; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.utsname = type { [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8] }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s [OPTION]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [362 x i8] c"Print certain system information.  With no OPTION, same as -s.\0A\0A  -a, --all                print all information, in the following order,\0A                             except omit -p and -i if unknown:\0A  -s, --kernel-name        print the kernel name\0A  -n, --nodename           print the network node hostname\0A  -r, --kernel-release     print the kernel release\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [303 x i8] c"  -v, --kernel-version     print the kernel version\0A  -m, --machine            print the machine hardware name\0A  -p, --processor          print the processor type (non-portable)\0A  -i, --hardware-platform  print the hardware platform (non-portable)\0A  -o, --operating-system   print the operating system\0A\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"Print machine architecture.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"uname\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"arch\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.22 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.23 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.24 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.26 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.27 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.28 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.16 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"cannot get system name\00", align 1
@main.unknown = internal constant [8 x i8] c"unknown\00", align 1, !dbg !0
@.str.13 = private unnamed_addr constant [10 x i8] c"GNU/Linux\00", align 1
@print_element.printed = internal global i8 0, align 1, !dbg !36
@arch_long_options = internal constant [3 x %struct.option] [%struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !15
@.str.30 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"Karel Zak\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"asnrvmpio\00", align 1
@uname_long_options = internal constant [14 x %struct.option] [%struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.37, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.40, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.42, i32 0, i32 0), i32 0, i32* null, i32 118 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i32 0, i32 0), i32 0, i32* null, i32 109 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i32 0, i32 0), i32 0, i32* null, i32 112 }, %struct.option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.45, i32 0, i32 0), i32 0, i32* null, i32 105 }, %struct.option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.46, i32 0, i32 0), i32 0, i32* null, i32 111 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !31
@optind = external dso_local global i32, align 4
@.str.33 = private unnamed_addr constant [17 x i8] c"extra operand %s\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.37 = private unnamed_addr constant [12 x i8] c"kernel-name\00", align 1
@.str.38 = private unnamed_addr constant [8 x i8] c"sysname\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"nodename\00", align 1
@.str.40 = private unnamed_addr constant [15 x i8] c"kernel-release\00", align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"release\00", align 1
@.str.42 = private unnamed_addr constant [15 x i8] c"kernel-version\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"machine\00", align 1
@.str.44 = private unnamed_addr constant [10 x i8] c"processor\00", align 1
@.str.45 = private unnamed_addr constant [18 x i8] c"hardware-platform\00", align 1
@.str.46 = private unnamed_addr constant [17 x i8] c"operating-system\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@uname_mode = internal global i32 1, align 4, !dbg !45
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), align 8, !dbg !50
@.str.47 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !55
@.str.50 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !60
@.str.1.51 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.52 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !63
@.str.57 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.58 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.59 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !70
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !77
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !131
@nslots = internal global i32 1, align 4, !dbg !138
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !140
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !126
@.str.10.62 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.63 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.64 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.65 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.66 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.67 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.68 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.69 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.70 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !116
@.str.75 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.76 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.77 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.78 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.79 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.80 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.81 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.82 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.83 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.84 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.85 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.86 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.87 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.88 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.89 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.90 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !142
@.str.1.101 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.102 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.111 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.112 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.115 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.116 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [3 x i8] c"-a\00"
@.compVal1 = private global [4 x i8] c"-aa\00"
@.compVal2 = private global [3 x i8] c"--\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !190 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !193, metadata !DIExpression()), !dbg !194
  %3 = load i32, i32* %2, align 4, !dbg !195
  %4 = icmp ne i32 %3, 0, !dbg !197
  br i1 %4, label %5, label %60, !dbg !198

5:                                                ; preds = %1
  %6 = load i32, i32* @x
  %7 = load i32, i32* @y
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = load i32, i32* @x
  %15 = load i32, i32* @y
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %22, !dbg !199

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x
  %24 = load i32, i32* @y
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !200
  %32 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !200
  %33 = load i8*, i8** @program_name, align 8, !dbg !200
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* %32, i8* %33), !dbg !200
  %35 = load i32, i32* @x
  %36 = load i32, i32* @y
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !200

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x
  %45 = load i32, i32* @y
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* @x
  %53 = load i32, i32* @y
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %136, !dbg !200

60:                                               ; preds = %1
  %61 = load i32, i32* @x
  %62 = load i32, i32* @y
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !202
  %70 = load i8*, i8** @program_name, align 8, !dbg !204
  %71 = call i32 (i8*, ...) @printf(i8* %69, i8* %70), !dbg !205
  %72 = load i32, i32* @uname_mode, align 4, !dbg !206
  %73 = icmp eq i32 %72, 1, !dbg !208
  %74 = load i32, i32* @x
  %75 = load i32, i32* @y
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %73, label %82, label %105, !dbg !209

82:                                               ; preds = %originalBBpart212
  %83 = load i32, i32* @x
  %84 = load i32, i32* @y
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = call i8* @gettext(i8* getelementptr inbounds ([362 x i8], [362 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !210
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !210
  %93 = call i32 @fputs_unlocked(i8* %91, %struct._IO_FILE* %92), !dbg !210
  %94 = call i8* @gettext(i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !212
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !212
  %96 = call i32 @fputs_unlocked(i8* %94, %struct._IO_FILE* %95), !dbg !212
  %97 = load i32, i32* @x
  %98 = load i32, i32* @y
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %109, !dbg !213

105:                                              ; preds = %originalBBpart212
  %106 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !214
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !214
  %108 = call i32 @fputs_unlocked(i8* %106, %struct._IO_FILE* %107), !dbg !214
  br label %109

109:                                              ; preds = %105, %originalBBpart216
  %110 = load i32, i32* @x
  %111 = load i32, i32* @y
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !216
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !216
  %120 = call i32 @fputs_unlocked(i8* %118, %struct._IO_FILE* %119), !dbg !216
  %121 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !217
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !217
  %123 = call i32 @fputs_unlocked(i8* %121, %struct._IO_FILE* %122), !dbg !217
  %124 = load i32, i32* @uname_mode, align 4, !dbg !218
  %125 = icmp eq i32 %124, 1, !dbg !218
  %126 = zext i1 %125 to i64, !dbg !218
  %127 = select i1 %125, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !218
  call void @emit_ancillary_info(i8* %127), !dbg !219
  %128 = load i32, i32* @x
  %129 = load i32, i32* @y
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %136

136:                                              ; preds = %originalBBpart220, %originalBBpart28
  %137 = load i32, i32* %2, align 4, !dbg !220
  call void @exit(i32 %137) #12, !dbg !221
  unreachable, !dbg !221

originalBBalteredBB:                              ; preds = %originalBB, %5
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %138 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !200
  %139 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !200
  %140 = load i8*, i8** @program_name, align 8, !dbg !200
  %141 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %138, i8* %139, i8* %140), !dbg !200
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %142 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !202
  %143 = load i8*, i8** @program_name, align 8, !dbg !204
  %144 = call i32 (i8*, ...) @printf(i8* %142, i8* %143), !dbg !205
  %145 = load i32, i32* @uname_mode, align 4, !dbg !206
  %146 = icmp eq i32 %145, 1, !dbg !208
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %147 = call i8* @gettext(i8* getelementptr inbounds ([362 x i8], [362 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !210
  %148 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !210
  %149 = call i32 @fputs_unlocked(i8* %147, %struct._IO_FILE* %148), !dbg !210
  %150 = call i8* @gettext(i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !212
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !212
  %152 = call i32 @fputs_unlocked(i8* %150, %struct._IO_FILE* %151), !dbg !212
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %153 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !216
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !216
  %155 = call i32 @fputs_unlocked(i8* %153, %struct._IO_FILE* %154), !dbg !216
  %156 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !217
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !217
  %158 = call i32 @fputs_unlocked(i8* %156, %struct._IO_FILE* %157), !dbg !217
  %159 = load i32, i32* @uname_mode, align 4, !dbg !218
  %160 = icmp eq i32 %159, 1, !dbg !218
  %161 = zext i1 %160 to i64, !dbg !218
  %162 = select i1 %160, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !218
  call void @emit_ancillary_info(i8* %162), !dbg !219
  br label %originalBB18
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !222 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !224, metadata !DIExpression()), !dbg !225
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !226, metadata !DIExpression()), !dbg !235
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !235
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !235
  call void @llvm.dbg.declare(metadata i8** %12, metadata !236, metadata !DIExpression()), !dbg !237
  %16 = load i8*, i8** %10, align 8, !dbg !238
  store i8* %16, i8** %12, align 8, !dbg !237
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !239, metadata !DIExpression()), !dbg !241
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !242
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !241
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !243

26:                                               ; preds = %originalBBpart222, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !244
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !245
  %37 = load i8*, i8** %36, align 8, !dbg !245
  %38 = icmp ne i8* %37, null, !dbg !244
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !246

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !247
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !247
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !247
  %59 = load i8*, i8** %58, align 8, !dbg !247
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !247
  %61 = icmp eq i32 %60, 0, !dbg !247
  %62 = xor i1 %61, true, !dbg !248
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart218, label %originalBB6alteredBB

originalBBpart218:                                ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart218, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart218 ], !dbg !249
  br i1 %72, label %73, label %92, !dbg !243

73:                                               ; preds = %71
  %74 = load i32, i32* @x.1
  %75 = load i32, i32* @y.2
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %73, %originalBB20alteredBB
  %82 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !250
  %83 = getelementptr inbounds %struct.infomap, %struct.infomap* %82, i32 1, !dbg !250
  store %struct.infomap* %83, %struct.infomap** %13, align 8, !dbg !250
  %84 = load i32, i32* @x.1
  %85 = load i32, i32* @y.2
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %26, !dbg !243, !llvm.loop !251

92:                                               ; preds = %71
  %93 = load i32, i32* @x.1
  %94 = load i32, i32* @y.2
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %92, %originalBB24alteredBB
  %101 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !252
  %102 = getelementptr inbounds %struct.infomap, %struct.infomap* %101, i32 0, i32 1, !dbg !254
  %103 = load i8*, i8** %102, align 8, !dbg !254
  %104 = icmp ne i8* %103, null, !dbg !252
  %105 = load i32, i32* @x.1
  %106 = load i32, i32* @y.2
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  br i1 %104, label %113, label %133, !dbg !255

113:                                              ; preds = %originalBBpart227
  %114 = load i32, i32* @x.1
  %115 = load i32, i32* @y.2
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %113, %originalBB29alteredBB
  %122 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !256
  %123 = getelementptr inbounds %struct.infomap, %struct.infomap* %122, i32 0, i32 1, !dbg !257
  %124 = load i8*, i8** %123, align 8, !dbg !257
  store i8* %124, i8** %12, align 8, !dbg !258
  %125 = load i32, i32* @x.1
  %126 = load i32, i32* @y.2
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %133, !dbg !259

133:                                              ; preds = %originalBBpart231, %originalBBpart227
  %134 = load i32, i32* @x.1
  %135 = load i32, i32* @y.2
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %133, %originalBB33alteredBB
  %142 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !260
  %143 = call i32 (i8*, ...) @printf(i8* %142, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0)), !dbg !261
  call void @llvm.dbg.declare(metadata i8** %14, metadata !262, metadata !DIExpression()), !dbg !263
  %144 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !264
  store i8* %144, i8** %14, align 8, !dbg !263
  %145 = load i8*, i8** %14, align 8, !dbg !265
  %146 = icmp ne i8* %145, null, !dbg !265
  %147 = load i32, i32* @x.1
  %148 = load i32, i32* @y.2
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %146, label %155, label %179, !dbg !267

155:                                              ; preds = %originalBBpart235
  %156 = load i32, i32* @x.1
  %157 = load i32, i32* @y.2
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %155, %originalBB37alteredBB
  %164 = load i8*, i8** %14, align 8, !dbg !268
  %165 = call i32 @strncmp(i8* %164, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0), i64 3) #13, !dbg !268
  %166 = icmp ne i32 %165, 0, !dbg !268
  %167 = load i32, i32* @x.1
  %168 = load i32, i32* @y.2
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br i1 %166, label %175, label %179, !dbg !269

175:                                              ; preds = %originalBBpart239
  %176 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !270
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !270
  %178 = call i32 @fputs_unlocked(i8* %176, %struct._IO_FILE* %177), !dbg !270
  br label %179, !dbg !272

179:                                              ; preds = %175, %originalBBpart239, %originalBBpart235
  %180 = load i32, i32* @x.1
  %181 = load i32, i32* @y.2
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %179, %originalBB41alteredBB
  %188 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i64 0, i64 0)) #10, !dbg !273
  %189 = load i8*, i8** %10, align 8, !dbg !274
  %190 = call i32 (i8*, ...) @printf(i8* %188, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i8* %189), !dbg !275
  %191 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !276
  %192 = load i8*, i8** %12, align 8, !dbg !277
  %193 = load i8*, i8** %12, align 8, !dbg !278
  %194 = load i8*, i8** %10, align 8, !dbg !279
  %195 = icmp eq i8* %193, %194, !dbg !280
  %196 = zext i1 %195 to i64, !dbg !278
  %197 = select i1 %195, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), !dbg !278
  %198 = call i32 (i8*, ...) @printf(i8* %191, i8* %192, i8* %197), !dbg !281
  %199 = load i32, i32* @x.1
  %200 = load i32, i32* @y.2
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  ret void, !dbg !282

originalBBalteredBB:                              ; preds = %originalBB, %1
  %207 = alloca i8*, align 8
  %208 = alloca [7 x %struct.infomap], align 16
  %209 = alloca i8*, align 8
  %210 = alloca %struct.infomap*, align 8
  %211 = alloca i8*, align 8
  store i8* %0, i8** %207, align 8
  call void @llvm.dbg.declare(metadata i8** %207, metadata !283, metadata !DIExpression()), !dbg !225
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %208, metadata !306, metadata !DIExpression()), !dbg !235
  %212 = bitcast [7 x %struct.infomap]* %208 to i8*, !dbg !235
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %212, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !235
  call void @llvm.dbg.declare(metadata i8** %209, metadata !313, metadata !DIExpression()), !dbg !237
  %213 = load i8*, i8** %207, align 8, !dbg !238
  store i8* %213, i8** %209, align 8, !dbg !237
  call void @llvm.dbg.declare(metadata %struct.infomap** %210, metadata !314, metadata !DIExpression()), !dbg !241
  %214 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %208, i64 0, i64 0, !dbg !242
  store %struct.infomap* %214, %struct.infomap** %210, align 8, !dbg !241
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %215 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !244
  %216 = getelementptr inbounds %struct.infomap, %struct.infomap* %215, i32 0, i32 0, !dbg !245
  %217 = load i8*, i8** %216, align 8, !dbg !245
  %218 = icmp ne i8* %217, null, !dbg !244
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %219 = load i8*, i8** %10, align 8, !dbg !247
  %220 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !247
  %221 = getelementptr inbounds %struct.infomap, %struct.infomap* %220, i32 0, i32 0, !dbg !247
  %222 = load i8*, i8** %221, align 8, !dbg !247
  %223 = call i32 @strcmp(i8* %219, i8* %222) #13, !dbg !247
  %224 = icmp eq i32 %223, 0, !dbg !247
  %_ = sub i1 false, %224
  %gen = add i1 %_, true
  %_7 = shl i1 %224, true
  %_8 = shl i1 %224, true
  %_9 = shl i1 %224, true
  %_10 = shl i1 %224, true
  %_11 = sub i1 false, %224
  %gen12 = add i1 %_11, true
  %_13 = sub i1 %224, true
  %gen14 = mul i1 %_13, true
  %_15 = sub i1 false, %224
  %gen16 = add i1 %_15, true
  %225 = xor i1 %224, true, !dbg !248
  br label %originalBB6

originalBB20alteredBB:                            ; preds = %originalBB20, %73
  %226 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !250
  %227 = getelementptr inbounds %struct.infomap, %struct.infomap* %226, i32 1, !dbg !250
  store %struct.infomap* %227, %struct.infomap** %13, align 8, !dbg !250
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %92
  %228 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !252
  %229 = getelementptr inbounds %struct.infomap, %struct.infomap* %228, i32 0, i32 1, !dbg !254
  %230 = load i8*, i8** %229, align 8, !dbg !254
  %231 = icmp ne i8* %230, null, !dbg !252
  br label %originalBB24

originalBB29alteredBB:                            ; preds = %originalBB29, %113
  %232 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !256
  %233 = getelementptr inbounds %struct.infomap, %struct.infomap* %232, i32 0, i32 1, !dbg !257
  %234 = load i8*, i8** %233, align 8, !dbg !257
  store i8* %234, i8** %12, align 8, !dbg !258
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %133
  %235 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !260
  %236 = call i32 (i8*, ...) @printf(i8* %235, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0)), !dbg !261
  call void @llvm.dbg.declare(metadata !11, metadata !316, metadata !DIExpression()), !dbg !263
  %237 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !264
  store i8* %237, i8** %14, align 8, !dbg !263
  %238 = load i8*, i8** %14, align 8, !dbg !265
  %239 = icmp ne i8* %238, null, !dbg !265
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %155
  %240 = load i8*, i8** %14, align 8, !dbg !268
  %241 = call i32 @strncmp(i8* %240, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0), i64 3) #13, !dbg !268
  %242 = icmp ne i32 %241, 0, !dbg !268
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %179
  %243 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i64 0, i64 0)) #10, !dbg !273
  %244 = load i8*, i8** %10, align 8, !dbg !274
  %245 = call i32 (i8*, ...) @printf(i8* %243, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i8* %244), !dbg !275
  %246 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !276
  %247 = load i8*, i8** %12, align 8, !dbg !277
  %248 = load i8*, i8** %12, align 8, !dbg !278
  %249 = load i8*, i8** %10, align 8, !dbg !279
  %250 = icmp eq i8* %248, %249, !dbg !280
  %251 = zext i1 %250 to i64, !dbg !278
  %252 = select i1 %250, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), !dbg !278
  %253 = call i32 (i8*, ...) @printf(i8* %246, i8* %247, i8* %252), !dbg !281
  br label %originalBB41
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !2 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.utsname, align 1
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !339, metadata !DIExpression()), !dbg !340
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !341, metadata !DIExpression()), !dbg !342
  call void @llvm.dbg.declare(metadata i32* %14, metadata !343, metadata !DIExpression()), !dbg !344
  store i32 0, i32* %14, align 4, !dbg !344
  %18 = load i8**, i8*** %13, align 8, !dbg !345
  %19 = getelementptr inbounds i8*, i8** %18, i64 0, !dbg !345
  %20 = load i8*, i8** %19, align 8, !dbg !345
  call void @set_program_name(i8* %20), !dbg !346
  %21 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !347
  %22 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !348
  %23 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !349
  %24 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !350
  %25 = load i32, i32* %12, align 4, !dbg !351
  %26 = load i8**, i8*** %13, align 8, !dbg !352
  %27 = call i32 @decode_switches(i32 %25, i8** %26), !dbg !353
  store i32 %27, i32* %14, align 4, !dbg !354
  %28 = load i32, i32* %14, align 4, !dbg !355
  %29 = load i32, i32* @x.3
  %30 = load i32, i32* @y.4
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %37, !dbg !357

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.3
  %39 = load i32, i32* @y.4
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %collatzVar = alloca i32
  %46 = load i32, i32* @x.3
  %47 = load i32, i32* @y.4
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %54

54:                                               ; preds = %originalBBpart24
  %55 = load i32, i32* @x.3
  %56 = load i32, i32* @y.4
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  %63 = load i32, i32* @inVal0
  %64 = icmp sgt i32 %63, 1
  %65 = load i32, i32* @x.3
  %66 = load i32, i32* @y.4
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %64, label %90, label %73

73:                                               ; preds = %originalBBpart28
  %74 = load i32, i32* @x.3
  %75 = load i32, i32* @y.4
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %73, %originalBB10alteredBB
  store i32 49, i32* %collatzVar
  %82 = load i32, i32* @x.3
  %83 = load i32, i32* @y.4
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %90

90:                                               ; preds = %originalBBpart212, %originalBBpart28
  %91 = load i32, i32* @x.3
  %92 = load i32, i32* @y.4
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %90, %originalBB14alteredBB
  %99 = load i8**, i8*** @inVal1
  %100 = getelementptr inbounds i8*, i8** %99, i64 1
  %101 = load i8*, i8** %100
  %controle = call i32 @controle(i8* %101, i32 0)
  store i32 %controle, i32* %collatzVar
  %102 = load i32, i32* @x.3
  %103 = load i32, i32* @y.4
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %110

110:                                              ; preds = %originalBBpart283, %originalBBpart267, %originalBBpart216
  %111 = load i32, i32* @x.3
  %112 = load i32, i32* @y.4
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = load i32, i32* %collatzVar
  %120 = icmp sgt i32 %119, 1
  %121 = load i32, i32* @x.3
  %122 = load i32, i32* @y.4
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %120, label %129, label %245

129:                                              ; preds = %originalBBpart220
  %130 = load i32, i32* @x.3
  %131 = load i32, i32* @y.4
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %129, %originalBB22alteredBB
  %138 = load i32, i32* %collatzVar
  %139 = srem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = load i32, i32* @x.3
  %142 = load i32, i32* @y.4
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %140, label %149, label %168

149:                                              ; preds = %originalBBpart224
  %150 = load i32, i32* @x.3
  %151 = load i32, i32* @y.4
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  %158 = load i32, i32* %collatzVar
  %159 = sdiv i32 %158, 2
  store i32 %159, i32* %collatzVar
  %160 = load i32, i32* @x.3
  %161 = load i32, i32* @y.4
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart234, label %originalBB26alteredBB

originalBBpart234:                                ; preds = %originalBB26
  br label %188

168:                                              ; preds = %originalBBpart224
  %169 = load i32, i32* @x.3
  %170 = load i32, i32* @y.4
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %168, %originalBB36alteredBB
  %177 = load i32, i32* %collatzVar
  %178 = mul i32 %177, 3
  %179 = add i32 %178, 1
  store i32 %179, i32* %collatzVar
  %180 = load i32, i32* @x.3
  %181 = load i32, i32* @y.4
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart250, label %originalBB36alteredBB

originalBBpart250:                                ; preds = %originalBB36
  br label %188

188:                                              ; preds = %originalBBpart250, %originalBBpart234
  %189 = load i32, i32* @x.3
  %190 = load i32, i32* @y.4
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %188, %originalBB52alteredBB
  %197 = load i32, i32* %collatzVar
  %198 = sub i32 %28, %197
  %199 = icmp sgt i32 %198, -2
  %200 = load i32, i32* @x.3
  %201 = load i32, i32* @y.4
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBBpart267, label %originalBB52alteredBB

originalBBpart267:                                ; preds = %originalBB52
  br i1 %199, label %208, label %110

208:                                              ; preds = %originalBBpart267
  %209 = load i32, i32* @x.3
  %210 = load i32, i32* @y.4
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %208, %originalBB69alteredBB
  %217 = load i32, i32* %collatzVar
  %218 = add i32 %28, %217
  %219 = icmp slt i32 %218, 2
  %220 = load i32, i32* @x.3
  %221 = load i32, i32* @y.4
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBBpart283, label %originalBB69alteredBB

originalBBpart283:                                ; preds = %originalBB69
  br i1 %219, label %228, label %110

228:                                              ; preds = %originalBBpart283
  %229 = load i32, i32* @x.3
  %230 = load i32, i32* @y.4
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %228, %originalBB85alteredBB
  store i32 1, i32* %14, align 4, !dbg !358
  %237 = load i32, i32* @x.3
  %238 = load i32, i32* @y.4
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br label %245, !dbg !359

245:                                              ; preds = %originalBBpart287, %originalBBpart220
  %246 = load i32, i32* @x.3
  %247 = load i32, i32* @y.4
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %245, %originalBB89alteredBB
  %254 = load i32, i32* %14, align 4, !dbg !360
  %255 = and i32 %254, 31, !dbg !362
  %256 = icmp ne i32 %255, 0, !dbg !362
  %257 = load i32, i32* @x.3
  %258 = load i32, i32* @y.4
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart297, label %originalBB89alteredBB

originalBBpart297:                                ; preds = %originalBB89
  br i1 %256, label %265, label %594, !dbg !363

265:                                              ; preds = %originalBBpart297
  call void @llvm.dbg.declare(metadata %struct.utsname* %15, metadata !364, metadata !DIExpression()), !dbg !378
  %266 = load i32, i32* @x.3
  %267 = load i32, i32* @y.4
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %265, %originalBB99alteredBB
  %274 = call i32 @uname(%struct.utsname* %15) #10, !dbg !379
  %275 = load i32, i32* @x.3
  %276 = load i32, i32* @y.4
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br label %283, !dbg !381

283:                                              ; preds = %originalBBpart2101
  %collatzVar5 = alloca i32
  br label %284

284:                                              ; preds = %283
  %285 = load i32, i32* @x.3
  %286 = load i32, i32* @y.4
  %287 = sub i32 %285, 1
  %288 = mul i32 %285, %287
  %289 = urem i32 %288, 2
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %290, %291
  br i1 %292, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %284, %originalBB103alteredBB
  %293 = load i32, i32* @inVal0
  %294 = icmp sgt i32 %293, 1
  %295 = load i32, i32* @x.3
  %296 = load i32, i32* @y.4
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br i1 %294, label %320, label %303

303:                                              ; preds = %originalBBpart2105
  %304 = load i32, i32* @x.3
  %305 = load i32, i32* @y.4
  %306 = sub i32 %304, 1
  %307 = mul i32 %304, %306
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %309, %310
  br i1 %311, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %303, %originalBB107alteredBB
  store i32 28, i32* %collatzVar5
  %312 = load i32, i32* @x.3
  %313 = load i32, i32* @y.4
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br label %320

320:                                              ; preds = %originalBBpart2109, %originalBBpart2105
  %321 = load i8**, i8*** @inVal1
  %322 = getelementptr inbounds i8*, i8** %321, i64 1
  %323 = load i8*, i8** %322
  %controle6 = call i32 @controle(i8* %323, i32 -1)
  store i32 %controle6, i32* %collatzVar5
  br label %324

324:                                              ; preds = %406, %402, %320
  %325 = load i32, i32* @x.3
  %326 = load i32, i32* @y.4
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %324, %originalBB111alteredBB
  %333 = load i32, i32* %collatzVar5
  %334 = icmp sgt i32 %333, 1
  %335 = load i32, i32* @x.3
  %336 = load i32, i32* @y.4
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br i1 %334, label %343, label %430

343:                                              ; preds = %originalBBpart2113
  %344 = load i32, i32* @x.3
  %345 = load i32, i32* @y.4
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %343, %originalBB115alteredBB
  %352 = load i32, i32* %collatzVar5
  %353 = srem i32 %352, 2
  %354 = icmp eq i32 %353, 0
  %355 = load i32, i32* @x.3
  %356 = load i32, i32* @y.4
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBBpart2119, label %originalBB115alteredBB

originalBBpart2119:                               ; preds = %originalBB115
  br i1 %354, label %363, label %382

363:                                              ; preds = %originalBBpart2119
  %364 = load i32, i32* @x.3
  %365 = load i32, i32* @y.4
  %366 = sub i32 %364, 1
  %367 = mul i32 %364, %366
  %368 = urem i32 %367, 2
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %365, 10
  %371 = or i1 %369, %370
  br i1 %371, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %363, %originalBB121alteredBB
  %372 = load i32, i32* %collatzVar5
  %373 = sdiv i32 %372, 2
  store i32 %373, i32* %collatzVar5
  %374 = load i32, i32* @x.3
  %375 = load i32, i32* @y.4
  %376 = sub i32 %374, 1
  %377 = mul i32 %374, %376
  %378 = urem i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %379, %380
  br i1 %381, label %originalBBpart2135, label %originalBB121alteredBB

originalBBpart2135:                               ; preds = %originalBB121
  br label %402

382:                                              ; preds = %originalBBpart2119
  %383 = load i32, i32* @x.3
  %384 = load i32, i32* @y.4
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBB137, label %originalBB137alteredBB

originalBB137:                                    ; preds = %382, %originalBB137alteredBB
  %391 = load i32, i32* %collatzVar5
  %392 = mul i32 %391, 3
  %393 = add i32 %392, 1
  store i32 %393, i32* %collatzVar5
  %394 = load i32, i32* @x.3
  %395 = load i32, i32* @y.4
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart2166, label %originalBB137alteredBB

originalBBpart2166:                               ; preds = %originalBB137
  br label %402

402:                                              ; preds = %originalBBpart2166, %originalBBpart2135
  %403 = load i32, i32* %collatzVar5
  %404 = sub i32 %274, %403
  %405 = icmp sgt i32 %404, -3
  br i1 %405, label %406, label %324

406:                                              ; preds = %402
  %407 = load i32, i32* %collatzVar5
  %408 = add i32 %274, %407
  %409 = icmp slt i32 %408, 1
  br i1 %409, label %410, label %324

410:                                              ; preds = %406
  %411 = load i32, i32* @x.3
  %412 = load i32, i32* @y.4
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %410, %originalBB168alteredBB
  %419 = call i32* @__errno_location() #14, !dbg !382
  %420 = load i32, i32* %419, align 4, !dbg !382
  %421 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !382
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %420, i8* %421), !dbg !382
  %422 = load i32, i32* @x.3
  %423 = load i32, i32* @y.4
  %424 = sub i32 %422, 1
  %425 = mul i32 %422, %424
  %426 = urem i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %427, %428
  br i1 %429, label %originalBBpart2170, label %originalBB168alteredBB

originalBBpart2170:                               ; preds = %originalBB168
  unreachable, !dbg !382

430:                                              ; preds = %originalBBpart2113
  %431 = load i32, i32* %14, align 4, !dbg !383
  %432 = and i32 %431, 1, !dbg !385
  %433 = icmp ne i32 %432, 0, !dbg !385
  br i1 %433, label %434, label %453, !dbg !386

434:                                              ; preds = %430
  %435 = load i32, i32* @x.3
  %436 = load i32, i32* @y.4
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %434, %originalBB172alteredBB
  %443 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 0, !dbg !387
  %444 = getelementptr inbounds [65 x i8], [65 x i8]* %443, i64 0, i64 0, !dbg !388
  call void @print_element(i8* %444), !dbg !389
  %445 = load i32, i32* @x.3
  %446 = load i32, i32* @y.4
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBBpart2174, label %originalBB172alteredBB

originalBBpart2174:                               ; preds = %originalBB172
  br label %453, !dbg !389

453:                                              ; preds = %originalBBpart2174, %430
  %454 = load i32, i32* @x.3
  %455 = load i32, i32* @y.4
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %453, %originalBB176alteredBB
  %462 = load i32, i32* %14, align 4, !dbg !390
  %463 = and i32 %462, 2, !dbg !392
  %464 = icmp ne i32 %463, 0, !dbg !392
  %465 = load i32, i32* @x.3
  %466 = load i32, i32* @y.4
  %467 = sub i32 %465, 1
  %468 = mul i32 %465, %467
  %469 = urem i32 %468, 2
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %470, %471
  br i1 %472, label %originalBBpart2191, label %originalBB176alteredBB

originalBBpart2191:                               ; preds = %originalBB176
  br i1 %464, label %473, label %492, !dbg !393

473:                                              ; preds = %originalBBpart2191
  %474 = load i32, i32* @x.3
  %475 = load i32, i32* @y.4
  %476 = sub i32 %474, 1
  %477 = mul i32 %474, %476
  %478 = urem i32 %477, 2
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %479, %480
  br i1 %481, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %473, %originalBB193alteredBB
  %482 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 1, !dbg !394
  %483 = getelementptr inbounds [65 x i8], [65 x i8]* %482, i64 0, i64 0, !dbg !395
  call void @print_element(i8* %483), !dbg !396
  %484 = load i32, i32* @x.3
  %485 = load i32, i32* @y.4
  %486 = sub i32 %484, 1
  %487 = mul i32 %484, %486
  %488 = urem i32 %487, 2
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %489, %490
  br i1 %491, label %originalBBpart2195, label %originalBB193alteredBB

originalBBpart2195:                               ; preds = %originalBB193
  br label %492, !dbg !396

492:                                              ; preds = %originalBBpart2195, %originalBBpart2191
  %493 = load i32, i32* @x.3
  %494 = load i32, i32* @y.4
  %495 = sub i32 %493, 1
  %496 = mul i32 %493, %495
  %497 = urem i32 %496, 2
  %498 = icmp eq i32 %497, 0
  %499 = icmp slt i32 %494, 10
  %500 = or i1 %498, %499
  br i1 %500, label %originalBB197, label %originalBB197alteredBB

originalBB197:                                    ; preds = %492, %originalBB197alteredBB
  %501 = load i32, i32* %14, align 4, !dbg !397
  %502 = and i32 %501, 4, !dbg !399
  %503 = icmp ne i32 %502, 0, !dbg !399
  %504 = load i32, i32* @x.3
  %505 = load i32, i32* @y.4
  %506 = sub i32 %504, 1
  %507 = mul i32 %504, %506
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %509, %510
  br i1 %511, label %originalBBpart2206, label %originalBB197alteredBB

originalBBpart2206:                               ; preds = %originalBB197
  br i1 %503, label %512, label %515, !dbg !400

512:                                              ; preds = %originalBBpart2206
  %513 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 2, !dbg !401
  %514 = getelementptr inbounds [65 x i8], [65 x i8]* %513, i64 0, i64 0, !dbg !402
  call void @print_element(i8* %514), !dbg !403
  br label %515, !dbg !403

515:                                              ; preds = %512, %originalBBpart2206
  %516 = load i32, i32* @x.3
  %517 = load i32, i32* @y.4
  %518 = sub i32 %516, 1
  %519 = mul i32 %516, %518
  %520 = urem i32 %519, 2
  %521 = icmp eq i32 %520, 0
  %522 = icmp slt i32 %517, 10
  %523 = or i1 %521, %522
  br i1 %523, label %originalBB208, label %originalBB208alteredBB

originalBB208:                                    ; preds = %515, %originalBB208alteredBB
  %524 = load i32, i32* %14, align 4, !dbg !404
  %525 = and i32 %524, 8, !dbg !406
  %526 = icmp ne i32 %525, 0, !dbg !406
  %527 = load i32, i32* @x.3
  %528 = load i32, i32* @y.4
  %529 = sub i32 %527, 1
  %530 = mul i32 %527, %529
  %531 = urem i32 %530, 2
  %532 = icmp eq i32 %531, 0
  %533 = icmp slt i32 %528, 10
  %534 = or i1 %532, %533
  br i1 %534, label %originalBBpart2223, label %originalBB208alteredBB

originalBBpart2223:                               ; preds = %originalBB208
  br i1 %526, label %535, label %554, !dbg !407

535:                                              ; preds = %originalBBpart2223
  %536 = load i32, i32* @x.3
  %537 = load i32, i32* @y.4
  %538 = sub i32 %536, 1
  %539 = mul i32 %536, %538
  %540 = urem i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = icmp slt i32 %537, 10
  %543 = or i1 %541, %542
  br i1 %543, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %535, %originalBB225alteredBB
  %544 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 3, !dbg !408
  %545 = getelementptr inbounds [65 x i8], [65 x i8]* %544, i64 0, i64 0, !dbg !409
  call void @print_element(i8* %545), !dbg !410
  %546 = load i32, i32* @x.3
  %547 = load i32, i32* @y.4
  %548 = sub i32 %546, 1
  %549 = mul i32 %546, %548
  %550 = urem i32 %549, 2
  %551 = icmp eq i32 %550, 0
  %552 = icmp slt i32 %547, 10
  %553 = or i1 %551, %552
  br i1 %553, label %originalBBpart2227, label %originalBB225alteredBB

originalBBpart2227:                               ; preds = %originalBB225
  br label %554, !dbg !410

554:                                              ; preds = %originalBBpart2227, %originalBBpart2223
  %555 = load i32, i32* %14, align 4, !dbg !411
  %556 = and i32 %555, 16, !dbg !413
  %557 = icmp ne i32 %556, 0, !dbg !413
  br i1 %557, label %558, label %577, !dbg !414

558:                                              ; preds = %554
  %559 = load i32, i32* @x.3
  %560 = load i32, i32* @y.4
  %561 = sub i32 %559, 1
  %562 = mul i32 %559, %561
  %563 = urem i32 %562, 2
  %564 = icmp eq i32 %563, 0
  %565 = icmp slt i32 %560, 10
  %566 = or i1 %564, %565
  br i1 %566, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %558, %originalBB229alteredBB
  %567 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 4, !dbg !415
  %568 = getelementptr inbounds [65 x i8], [65 x i8]* %567, i64 0, i64 0, !dbg !416
  call void @print_element(i8* %568), !dbg !417
  %569 = load i32, i32* @x.3
  %570 = load i32, i32* @y.4
  %571 = sub i32 %569, 1
  %572 = mul i32 %569, %571
  %573 = urem i32 %572, 2
  %574 = icmp eq i32 %573, 0
  %575 = icmp slt i32 %570, 10
  %576 = or i1 %574, %575
  br i1 %576, label %originalBBpart2231, label %originalBB229alteredBB

originalBBpart2231:                               ; preds = %originalBB229
  br label %577, !dbg !417

577:                                              ; preds = %originalBBpart2231, %554
  %578 = load i32, i32* @x.3
  %579 = load i32, i32* @y.4
  %580 = sub i32 %578, 1
  %581 = mul i32 %578, %580
  %582 = urem i32 %581, 2
  %583 = icmp eq i32 %582, 0
  %584 = icmp slt i32 %579, 10
  %585 = or i1 %583, %584
  br i1 %585, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %577, %originalBB233alteredBB
  %586 = load i32, i32* @x.3
  %587 = load i32, i32* @y.4
  %588 = sub i32 %586, 1
  %589 = mul i32 %586, %588
  %590 = urem i32 %589, 2
  %591 = icmp eq i32 %590, 0
  %592 = icmp slt i32 %587, 10
  %593 = or i1 %591, %592
  br i1 %593, label %originalBBpart2235, label %originalBB233alteredBB

originalBBpart2235:                               ; preds = %originalBB233
  br label %594, !dbg !418

594:                                              ; preds = %originalBBpart2235, %originalBBpart297
  %595 = load i32, i32* @x.3
  %596 = load i32, i32* @y.4
  %597 = sub i32 %595, 1
  %598 = mul i32 %595, %597
  %599 = urem i32 %598, 2
  %600 = icmp eq i32 %599, 0
  %601 = icmp slt i32 %596, 10
  %602 = or i1 %600, %601
  br i1 %602, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %594, %originalBB237alteredBB
  %603 = load i32, i32* %14, align 4, !dbg !419
  %604 = and i32 %603, 32, !dbg !421
  %605 = icmp ne i32 %604, 0, !dbg !421
  %606 = load i32, i32* @x.3
  %607 = load i32, i32* @y.4
  %608 = sub i32 %606, 1
  %609 = mul i32 %606, %608
  %610 = urem i32 %609, 2
  %611 = icmp eq i32 %610, 0
  %612 = icmp slt i32 %607, 10
  %613 = or i1 %611, %612
  br i1 %613, label %originalBBpart2241, label %originalBB237alteredBB

originalBBpart2241:                               ; preds = %originalBB237
  br i1 %605, label %614, label %861, !dbg !422

614:                                              ; preds = %originalBBpart2241
  call void @llvm.dbg.declare(metadata i8** %16, metadata !423, metadata !DIExpression()), !dbg !425
  %615 = load i32, i32* @x.3
  %616 = load i32, i32* @y.4
  %617 = sub i32 %615, 1
  %618 = mul i32 %615, %617
  %619 = urem i32 %618, 2
  %620 = icmp eq i32 %619, 0
  %621 = icmp slt i32 %616, 10
  %622 = or i1 %620, %621
  br i1 %622, label %originalBB243, label %originalBB243alteredBB

originalBB243:                                    ; preds = %614, %originalBB243alteredBB
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %16, align 8, !dbg !425
  %623 = load i32, i32* %14, align 4, !dbg !426
  %624 = load i32, i32* @x.3
  %625 = load i32, i32* @y.4
  %626 = sub i32 %624, 1
  %627 = mul i32 %624, %626
  %628 = urem i32 %627, 2
  %629 = icmp eq i32 %628, 0
  %630 = icmp slt i32 %625, 10
  %631 = or i1 %629, %630
  br i1 %631, label %originalBBpart2245, label %originalBB243alteredBB

originalBBpart2245:                               ; preds = %originalBB243
  br label %632, !dbg !428

632:                                              ; preds = %originalBBpart2245
  %633 = load i32, i32* @x.3
  %634 = load i32, i32* @y.4
  %635 = sub i32 %633, 1
  %636 = mul i32 %633, %635
  %637 = urem i32 %636, 2
  %638 = icmp eq i32 %637, 0
  %639 = icmp slt i32 %634, 10
  %640 = or i1 %638, %639
  br i1 %640, label %originalBB247, label %originalBB247alteredBB

originalBB247:                                    ; preds = %632, %originalBB247alteredBB
  %collatzVar1 = alloca i32
  %641 = load i32, i32* @x.3
  %642 = load i32, i32* @y.4
  %643 = sub i32 %641, 1
  %644 = mul i32 %641, %643
  %645 = urem i32 %644, 2
  %646 = icmp eq i32 %645, 0
  %647 = icmp slt i32 %642, 10
  %648 = or i1 %646, %647
  br i1 %648, label %originalBBpart2249, label %originalBB247alteredBB

originalBBpart2249:                               ; preds = %originalBB247
  br label %649

649:                                              ; preds = %originalBBpart2249
  %650 = load i32, i32* @x.3
  %651 = load i32, i32* @y.4
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBB251, label %originalBB251alteredBB

originalBB251:                                    ; preds = %649, %originalBB251alteredBB
  %658 = load i32, i32* @inVal0
  %659 = icmp sgt i32 %658, 1
  %660 = load i32, i32* @x.3
  %661 = load i32, i32* @y.4
  %662 = sub i32 %660, 1
  %663 = mul i32 %660, %662
  %664 = urem i32 %663, 2
  %665 = icmp eq i32 %664, 0
  %666 = icmp slt i32 %661, 10
  %667 = or i1 %665, %666
  br i1 %667, label %originalBBpart2253, label %originalBB251alteredBB

originalBBpart2253:                               ; preds = %originalBB251
  br i1 %659, label %685, label %668

668:                                              ; preds = %originalBBpart2253
  %669 = load i32, i32* @x.3
  %670 = load i32, i32* @y.4
  %671 = sub i32 %669, 1
  %672 = mul i32 %669, %671
  %673 = urem i32 %672, 2
  %674 = icmp eq i32 %673, 0
  %675 = icmp slt i32 %670, 10
  %676 = or i1 %674, %675
  br i1 %676, label %originalBB255, label %originalBB255alteredBB

originalBB255:                                    ; preds = %668, %originalBB255alteredBB
  store i32 59, i32* %collatzVar1
  %677 = load i32, i32* @x.3
  %678 = load i32, i32* @y.4
  %679 = sub i32 %677, 1
  %680 = mul i32 %677, %679
  %681 = urem i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = icmp slt i32 %678, 10
  %684 = or i1 %682, %683
  br i1 %684, label %originalBBpart2257, label %originalBB255alteredBB

originalBBpart2257:                               ; preds = %originalBB255
  br label %685

685:                                              ; preds = %originalBBpart2257, %originalBBpart2253
  %686 = load i32, i32* @x.3
  %687 = load i32, i32* @y.4
  %688 = sub i32 %686, 1
  %689 = mul i32 %686, %688
  %690 = urem i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = icmp slt i32 %687, 10
  %693 = or i1 %691, %692
  br i1 %693, label %originalBB259, label %originalBB259alteredBB

originalBB259:                                    ; preds = %685, %originalBB259alteredBB
  %694 = load i8**, i8*** @inVal1
  %695 = getelementptr inbounds i8*, i8** %694, i64 1
  %696 = load i8*, i8** %695
  %controle2 = call i32 @controle(i8* %696, i32 -1)
  store i32 %controle2, i32* %collatzVar1
  %697 = load i32, i32* @x.3
  %698 = load i32, i32* @y.4
  %699 = sub i32 %697, 1
  %700 = mul i32 %697, %699
  %701 = urem i32 %700, 2
  %702 = icmp eq i32 %701, 0
  %703 = icmp slt i32 %698, 10
  %704 = or i1 %702, %703
  br i1 %704, label %originalBBpart2261, label %originalBB259alteredBB

originalBBpart2261:                               ; preds = %originalBB259
  br label %705

705:                                              ; preds = %originalBBpart2326, %originalBBpart2320, %originalBBpart2261
  %706 = load i32, i32* @x.3
  %707 = load i32, i32* @y.4
  %708 = sub i32 %706, 1
  %709 = mul i32 %706, %708
  %710 = urem i32 %709, 2
  %711 = icmp eq i32 %710, 0
  %712 = icmp slt i32 %707, 10
  %713 = or i1 %711, %712
  br i1 %713, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %705, %originalBB263alteredBB
  %714 = load i32, i32* %collatzVar1
  %715 = icmp sgt i32 %714, 1
  %716 = load i32, i32* @x.3
  %717 = load i32, i32* @y.4
  %718 = sub i32 %716, 1
  %719 = mul i32 %716, %718
  %720 = urem i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = icmp slt i32 %717, 10
  %723 = or i1 %721, %722
  br i1 %723, label %originalBBpart2265, label %originalBB263alteredBB

originalBBpart2265:                               ; preds = %originalBB263
  br i1 %715, label %724, label %826

724:                                              ; preds = %originalBBpart2265
  %725 = load i32, i32* @x.3
  %726 = load i32, i32* @y.4
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %724, %originalBB267alteredBB
  %733 = load i32, i32* %collatzVar1
  %734 = srem i32 %733, 2
  %735 = icmp eq i32 %734, 0
  %736 = load i32, i32* @x.3
  %737 = load i32, i32* @y.4
  %738 = sub i32 %736, 1
  %739 = mul i32 %736, %738
  %740 = urem i32 %739, 2
  %741 = icmp eq i32 %740, 0
  %742 = icmp slt i32 %737, 10
  %743 = or i1 %741, %742
  br i1 %743, label %originalBBpart2279, label %originalBB267alteredBB

originalBBpart2279:                               ; preds = %originalBB267
  br i1 %735, label %744, label %747

744:                                              ; preds = %originalBBpart2279
  %745 = load i32, i32* %collatzVar1
  %746 = sdiv i32 %745, 2
  store i32 %746, i32* %collatzVar1
  br label %767

747:                                              ; preds = %originalBBpart2279
  %748 = load i32, i32* @x.3
  %749 = load i32, i32* @y.4
  %750 = sub i32 %748, 1
  %751 = mul i32 %748, %750
  %752 = urem i32 %751, 2
  %753 = icmp eq i32 %752, 0
  %754 = icmp slt i32 %749, 10
  %755 = or i1 %753, %754
  br i1 %755, label %originalBB281, label %originalBB281alteredBB

originalBB281:                                    ; preds = %747, %originalBB281alteredBB
  %756 = load i32, i32* %collatzVar1
  %757 = mul i32 %756, 3
  %758 = add i32 %757, 1
  store i32 %758, i32* %collatzVar1
  %759 = load i32, i32* @x.3
  %760 = load i32, i32* @y.4
  %761 = sub i32 %759, 1
  %762 = mul i32 %759, %761
  %763 = urem i32 %762, 2
  %764 = icmp eq i32 %763, 0
  %765 = icmp slt i32 %760, 10
  %766 = or i1 %764, %765
  br i1 %766, label %originalBBpart2306, label %originalBB281alteredBB

originalBBpart2306:                               ; preds = %originalBB281
  br label %767

767:                                              ; preds = %originalBBpart2306, %744
  %768 = load i32, i32* @x.3
  %769 = load i32, i32* @y.4
  %770 = sub i32 %768, 1
  %771 = mul i32 %768, %770
  %772 = urem i32 %771, 2
  %773 = icmp eq i32 %772, 0
  %774 = icmp slt i32 %769, 10
  %775 = or i1 %773, %774
  br i1 %775, label %originalBB308, label %originalBB308alteredBB

originalBB308:                                    ; preds = %767, %originalBB308alteredBB
  %776 = load i32, i32* %collatzVar1
  %777 = sub i32 %623, %776
  %778 = icmp sgt i32 %777, -3
  %779 = load i32, i32* @x.3
  %780 = load i32, i32* @y.4
  %781 = sub i32 %779, 1
  %782 = mul i32 %779, %781
  %783 = urem i32 %782, 2
  %784 = icmp eq i32 %783, 0
  %785 = icmp slt i32 %780, 10
  %786 = or i1 %784, %785
  br i1 %786, label %originalBBpart2320, label %originalBB308alteredBB

originalBBpart2320:                               ; preds = %originalBB308
  br i1 %778, label %787, label %705

787:                                              ; preds = %originalBBpart2320
  %788 = load i32, i32* @x.3
  %789 = load i32, i32* @y.4
  %790 = sub i32 %788, 1
  %791 = mul i32 %788, %790
  %792 = urem i32 %791, 2
  %793 = icmp eq i32 %792, 0
  %794 = icmp slt i32 %789, 10
  %795 = or i1 %793, %794
  br i1 %795, label %originalBB322, label %originalBB322alteredBB

originalBB322:                                    ; preds = %787, %originalBB322alteredBB
  %796 = load i32, i32* %collatzVar1
  %797 = add i32 %623, %796
  %798 = icmp slt i32 %797, 1
  %799 = load i32, i32* @x.3
  %800 = load i32, i32* @y.4
  %801 = sub i32 %799, 1
  %802 = mul i32 %799, %801
  %803 = urem i32 %802, 2
  %804 = icmp eq i32 %803, 0
  %805 = icmp slt i32 %800, 10
  %806 = or i1 %804, %805
  br i1 %806, label %originalBBpart2326, label %originalBB322alteredBB

originalBBpart2326:                               ; preds = %originalBB322
  br i1 %798, label %807, label %705

807:                                              ; preds = %originalBBpart2326
  %808 = load i32, i32* @x.3
  %809 = load i32, i32* @y.4
  %810 = sub i32 %808, 1
  %811 = mul i32 %808, %810
  %812 = urem i32 %811, 2
  %813 = icmp eq i32 %812, 0
  %814 = icmp slt i32 %809, 10
  %815 = or i1 %813, %814
  br i1 %815, label %originalBB328, label %originalBB328alteredBB

originalBB328:                                    ; preds = %807, %originalBB328alteredBB
  %816 = load i8*, i8** %16, align 8, !dbg !429
  %817 = icmp eq i8* %816, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !430
  %818 = load i32, i32* @x.3
  %819 = load i32, i32* @y.4
  %820 = sub i32 %818, 1
  %821 = mul i32 %818, %820
  %822 = urem i32 %821, 2
  %823 = icmp eq i32 %822, 0
  %824 = icmp slt i32 %819, 10
  %825 = or i1 %823, %824
  br i1 %825, label %originalBBpart2330, label %originalBB328alteredBB

originalBBpart2330:                               ; preds = %originalBB328
  br i1 %817, label %844, label %826, !dbg !431

826:                                              ; preds = %originalBBpart2330, %originalBBpart2265
  %827 = load i32, i32* @x.3
  %828 = load i32, i32* @y.4
  %829 = sub i32 %827, 1
  %830 = mul i32 %827, %829
  %831 = urem i32 %830, 2
  %832 = icmp eq i32 %831, 0
  %833 = icmp slt i32 %828, 10
  %834 = or i1 %832, %833
  br i1 %834, label %originalBB332, label %originalBB332alteredBB

originalBB332:                                    ; preds = %826, %originalBB332alteredBB
  %835 = load i8*, i8** %16, align 8, !dbg !432
  call void @print_element(i8* %835), !dbg !433
  %836 = load i32, i32* @x.3
  %837 = load i32, i32* @y.4
  %838 = sub i32 %836, 1
  %839 = mul i32 %836, %838
  %840 = urem i32 %839, 2
  %841 = icmp eq i32 %840, 0
  %842 = icmp slt i32 %837, 10
  %843 = or i1 %841, %842
  br i1 %843, label %originalBBpart2334, label %originalBB332alteredBB

originalBBpart2334:                               ; preds = %originalBB332
  br label %844, !dbg !433

844:                                              ; preds = %originalBBpart2334, %originalBBpart2330
  %845 = load i32, i32* @x.3
  %846 = load i32, i32* @y.4
  %847 = sub i32 %845, 1
  %848 = mul i32 %845, %847
  %849 = urem i32 %848, 2
  %850 = icmp eq i32 %849, 0
  %851 = icmp slt i32 %846, 10
  %852 = or i1 %850, %851
  br i1 %852, label %originalBB336, label %originalBB336alteredBB

originalBB336:                                    ; preds = %844, %originalBB336alteredBB
  %853 = load i32, i32* @x.3
  %854 = load i32, i32* @y.4
  %855 = sub i32 %853, 1
  %856 = mul i32 %853, %855
  %857 = urem i32 %856, 2
  %858 = icmp eq i32 %857, 0
  %859 = icmp slt i32 %854, 10
  %860 = or i1 %858, %859
  br i1 %860, label %originalBBpart2338, label %originalBB336alteredBB

originalBBpart2338:                               ; preds = %originalBB336
  br label %861, !dbg !434

861:                                              ; preds = %originalBBpart2338, %originalBBpart2241
  %862 = load i32, i32* @x.3
  %863 = load i32, i32* @y.4
  %864 = sub i32 %862, 1
  %865 = mul i32 %862, %864
  %866 = urem i32 %865, 2
  %867 = icmp eq i32 %866, 0
  %868 = icmp slt i32 %863, 10
  %869 = or i1 %867, %868
  br i1 %869, label %originalBB340, label %originalBB340alteredBB

originalBB340:                                    ; preds = %861, %originalBB340alteredBB
  %870 = load i32, i32* %14, align 4, !dbg !435
  %871 = and i32 %870, 64, !dbg !437
  %872 = icmp ne i32 %871, 0, !dbg !437
  %873 = load i32, i32* @x.3
  %874 = load i32, i32* @y.4
  %875 = sub i32 %873, 1
  %876 = mul i32 %873, %875
  %877 = urem i32 %876, 2
  %878 = icmp eq i32 %877, 0
  %879 = icmp slt i32 %874, 10
  %880 = or i1 %878, %879
  br i1 %880, label %originalBBpart2358, label %originalBB340alteredBB

originalBBpart2358:                               ; preds = %originalBB340
  br i1 %872, label %881, label %1080, !dbg !438

881:                                              ; preds = %originalBBpart2358
  call void @llvm.dbg.declare(metadata i8** %17, metadata !439, metadata !DIExpression()), !dbg !441
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %17, align 8, !dbg !441
  %882 = load i32, i32* %14, align 4, !dbg !442
  br label %883, !dbg !444

883:                                              ; preds = %881
  %collatzVar3 = alloca i32
  br label %884

884:                                              ; preds = %883
  %885 = load i32, i32* @x.3
  %886 = load i32, i32* @y.4
  %887 = sub i32 %885, 1
  %888 = mul i32 %885, %887
  %889 = urem i32 %888, 2
  %890 = icmp eq i32 %889, 0
  %891 = icmp slt i32 %886, 10
  %892 = or i1 %890, %891
  br i1 %892, label %originalBB360, label %originalBB360alteredBB

originalBB360:                                    ; preds = %884, %originalBB360alteredBB
  %893 = load i32, i32* @inVal0
  %894 = icmp sgt i32 %893, 1
  %895 = load i32, i32* @x.3
  %896 = load i32, i32* @y.4
  %897 = sub i32 %895, 1
  %898 = mul i32 %895, %897
  %899 = urem i32 %898, 2
  %900 = icmp eq i32 %899, 0
  %901 = icmp slt i32 %896, 10
  %902 = or i1 %900, %901
  br i1 %902, label %originalBBpart2362, label %originalBB360alteredBB

originalBBpart2362:                               ; preds = %originalBB360
  br i1 %894, label %920, label %903

903:                                              ; preds = %originalBBpart2362
  %904 = load i32, i32* @x.3
  %905 = load i32, i32* @y.4
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBB364, label %originalBB364alteredBB

originalBB364:                                    ; preds = %903, %originalBB364alteredBB
  store i32 89, i32* %collatzVar3
  %912 = load i32, i32* @x.3
  %913 = load i32, i32* @y.4
  %914 = sub i32 %912, 1
  %915 = mul i32 %912, %914
  %916 = urem i32 %915, 2
  %917 = icmp eq i32 %916, 0
  %918 = icmp slt i32 %913, 10
  %919 = or i1 %917, %918
  br i1 %919, label %originalBBpart2366, label %originalBB364alteredBB

originalBBpart2366:                               ; preds = %originalBB364
  br label %920

920:                                              ; preds = %originalBBpart2366, %originalBBpart2362
  %921 = load i32, i32* @x.3
  %922 = load i32, i32* @y.4
  %923 = sub i32 %921, 1
  %924 = mul i32 %921, %923
  %925 = urem i32 %924, 2
  %926 = icmp eq i32 %925, 0
  %927 = icmp slt i32 %922, 10
  %928 = or i1 %926, %927
  br i1 %928, label %originalBB368, label %originalBB368alteredBB

originalBB368:                                    ; preds = %920, %originalBB368alteredBB
  %929 = load i8**, i8*** @inVal1
  %930 = getelementptr inbounds i8*, i8** %929, i64 1
  %931 = load i8*, i8** %930
  %controle4 = call i32 @controle(i8* %931, i32 -1)
  store i32 %controle4, i32* %collatzVar3
  %932 = load i32, i32* @x.3
  %933 = load i32, i32* @y.4
  %934 = sub i32 %932, 1
  %935 = mul i32 %932, %934
  %936 = urem i32 %935, 2
  %937 = icmp eq i32 %936, 0
  %938 = icmp slt i32 %933, 10
  %939 = or i1 %937, %938
  br i1 %939, label %originalBBpart2370, label %originalBB368alteredBB

originalBBpart2370:                               ; preds = %originalBB368
  br label %940

940:                                              ; preds = %originalBBpart2420, %originalBBpart2414, %originalBBpart2370
  %941 = load i32, i32* %collatzVar3
  %942 = icmp sgt i32 %941, 1
  br i1 %942, label %943, label %1045

943:                                              ; preds = %940
  %944 = load i32, i32* @x.3
  %945 = load i32, i32* @y.4
  %946 = sub i32 %944, 1
  %947 = mul i32 %944, %946
  %948 = urem i32 %947, 2
  %949 = icmp eq i32 %948, 0
  %950 = icmp slt i32 %945, 10
  %951 = or i1 %949, %950
  br i1 %951, label %originalBB372, label %originalBB372alteredBB

originalBB372:                                    ; preds = %943, %originalBB372alteredBB
  %952 = load i32, i32* %collatzVar3
  %953 = srem i32 %952, 2
  %954 = icmp eq i32 %953, 0
  %955 = load i32, i32* @x.3
  %956 = load i32, i32* @y.4
  %957 = sub i32 %955, 1
  %958 = mul i32 %955, %957
  %959 = urem i32 %958, 2
  %960 = icmp eq i32 %959, 0
  %961 = icmp slt i32 %956, 10
  %962 = or i1 %960, %961
  br i1 %962, label %originalBBpart2381, label %originalBB372alteredBB

originalBBpart2381:                               ; preds = %originalBB372
  br i1 %954, label %963, label %982

963:                                              ; preds = %originalBBpart2381
  %964 = load i32, i32* @x.3
  %965 = load i32, i32* @y.4
  %966 = sub i32 %964, 1
  %967 = mul i32 %964, %966
  %968 = urem i32 %967, 2
  %969 = icmp eq i32 %968, 0
  %970 = icmp slt i32 %965, 10
  %971 = or i1 %969, %970
  br i1 %971, label %originalBB383, label %originalBB383alteredBB

originalBB383:                                    ; preds = %963, %originalBB383alteredBB
  %972 = load i32, i32* %collatzVar3
  %973 = sdiv i32 %972, 2
  store i32 %973, i32* %collatzVar3
  %974 = load i32, i32* @x.3
  %975 = load i32, i32* @y.4
  %976 = sub i32 %974, 1
  %977 = mul i32 %974, %976
  %978 = urem i32 %977, 2
  %979 = icmp eq i32 %978, 0
  %980 = icmp slt i32 %975, 10
  %981 = or i1 %979, %980
  br i1 %981, label %originalBBpart2387, label %originalBB383alteredBB

originalBBpart2387:                               ; preds = %originalBB383
  br label %1002

982:                                              ; preds = %originalBBpart2381
  %983 = load i32, i32* @x.3
  %984 = load i32, i32* @y.4
  %985 = sub i32 %983, 1
  %986 = mul i32 %983, %985
  %987 = urem i32 %986, 2
  %988 = icmp eq i32 %987, 0
  %989 = icmp slt i32 %984, 10
  %990 = or i1 %988, %989
  br i1 %990, label %originalBB389, label %originalBB389alteredBB

originalBB389:                                    ; preds = %982, %originalBB389alteredBB
  %991 = load i32, i32* %collatzVar3
  %992 = mul i32 %991, 3
  %993 = add i32 %992, 1
  store i32 %993, i32* %collatzVar3
  %994 = load i32, i32* @x.3
  %995 = load i32, i32* @y.4
  %996 = sub i32 %994, 1
  %997 = mul i32 %994, %996
  %998 = urem i32 %997, 2
  %999 = icmp eq i32 %998, 0
  %1000 = icmp slt i32 %995, 10
  %1001 = or i1 %999, %1000
  br i1 %1001, label %originalBBpart2401, label %originalBB389alteredBB

originalBBpart2401:                               ; preds = %originalBB389
  br label %1002

1002:                                             ; preds = %originalBBpart2401, %originalBBpart2387
  %1003 = load i32, i32* @x.3
  %1004 = load i32, i32* @y.4
  %1005 = sub i32 %1003, 1
  %1006 = mul i32 %1003, %1005
  %1007 = urem i32 %1006, 2
  %1008 = icmp eq i32 %1007, 0
  %1009 = icmp slt i32 %1004, 10
  %1010 = or i1 %1008, %1009
  br i1 %1010, label %originalBB403, label %originalBB403alteredBB

originalBB403:                                    ; preds = %1002, %originalBB403alteredBB
  %1011 = load i32, i32* %collatzVar3
  %1012 = sub i32 %882, %1011
  %1013 = icmp sgt i32 %1012, -3
  %1014 = load i32, i32* @x.3
  %1015 = load i32, i32* @y.4
  %1016 = sub i32 %1014, 1
  %1017 = mul i32 %1014, %1016
  %1018 = urem i32 %1017, 2
  %1019 = icmp eq i32 %1018, 0
  %1020 = icmp slt i32 %1015, 10
  %1021 = or i1 %1019, %1020
  br i1 %1021, label %originalBBpart2414, label %originalBB403alteredBB

originalBBpart2414:                               ; preds = %originalBB403
  br i1 %1013, label %1022, label %940

1022:                                             ; preds = %originalBBpart2414
  %1023 = load i32, i32* @x.3
  %1024 = load i32, i32* @y.4
  %1025 = sub i32 %1023, 1
  %1026 = mul i32 %1023, %1025
  %1027 = urem i32 %1026, 2
  %1028 = icmp eq i32 %1027, 0
  %1029 = icmp slt i32 %1024, 10
  %1030 = or i1 %1028, %1029
  br i1 %1030, label %originalBB416, label %originalBB416alteredBB

originalBB416:                                    ; preds = %1022, %originalBB416alteredBB
  %1031 = load i32, i32* %collatzVar3
  %1032 = add i32 %882, %1031
  %1033 = icmp slt i32 %1032, 1
  %1034 = load i32, i32* @x.3
  %1035 = load i32, i32* @y.4
  %1036 = sub i32 %1034, 1
  %1037 = mul i32 %1034, %1036
  %1038 = urem i32 %1037, 2
  %1039 = icmp eq i32 %1038, 0
  %1040 = icmp slt i32 %1035, 10
  %1041 = or i1 %1039, %1040
  br i1 %1041, label %originalBBpart2420, label %originalBB416alteredBB

originalBBpart2420:                               ; preds = %originalBB416
  br i1 %1033, label %1042, label %940

1042:                                             ; preds = %originalBBpart2420
  %1043 = load i8*, i8** %17, align 8, !dbg !445
  %1044 = icmp eq i8* %1043, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !446
  br i1 %1044, label %1063, label %1045, !dbg !447

1045:                                             ; preds = %1042, %940
  %1046 = load i32, i32* @x.3
  %1047 = load i32, i32* @y.4
  %1048 = sub i32 %1046, 1
  %1049 = mul i32 %1046, %1048
  %1050 = urem i32 %1049, 2
  %1051 = icmp eq i32 %1050, 0
  %1052 = icmp slt i32 %1047, 10
  %1053 = or i1 %1051, %1052
  br i1 %1053, label %originalBB422, label %originalBB422alteredBB

originalBB422:                                    ; preds = %1045, %originalBB422alteredBB
  %1054 = load i8*, i8** %17, align 8, !dbg !448
  call void @print_element(i8* %1054), !dbg !449
  %1055 = load i32, i32* @x.3
  %1056 = load i32, i32* @y.4
  %1057 = sub i32 %1055, 1
  %1058 = mul i32 %1055, %1057
  %1059 = urem i32 %1058, 2
  %1060 = icmp eq i32 %1059, 0
  %1061 = icmp slt i32 %1056, 10
  %1062 = or i1 %1060, %1061
  br i1 %1062, label %originalBBpart2424, label %originalBB422alteredBB

originalBBpart2424:                               ; preds = %originalBB422
  br label %1063, !dbg !449

1063:                                             ; preds = %originalBBpart2424, %1042
  %1064 = load i32, i32* @x.3
  %1065 = load i32, i32* @y.4
  %1066 = sub i32 %1064, 1
  %1067 = mul i32 %1064, %1066
  %1068 = urem i32 %1067, 2
  %1069 = icmp eq i32 %1068, 0
  %1070 = icmp slt i32 %1065, 10
  %1071 = or i1 %1069, %1070
  br i1 %1071, label %originalBB426, label %originalBB426alteredBB

originalBB426:                                    ; preds = %1063, %originalBB426alteredBB
  %1072 = load i32, i32* @x.3
  %1073 = load i32, i32* @y.4
  %1074 = sub i32 %1072, 1
  %1075 = mul i32 %1072, %1074
  %1076 = urem i32 %1075, 2
  %1077 = icmp eq i32 %1076, 0
  %1078 = icmp slt i32 %1073, 10
  %1079 = or i1 %1077, %1078
  br i1 %1079, label %originalBBpart2428, label %originalBB426alteredBB

originalBBpart2428:                               ; preds = %originalBB426
  br label %1080, !dbg !450

1080:                                             ; preds = %originalBBpart2428, %originalBBpart2358
  %1081 = load i32, i32* @x.3
  %1082 = load i32, i32* @y.4
  %1083 = sub i32 %1081, 1
  %1084 = mul i32 %1081, %1083
  %1085 = urem i32 %1084, 2
  %1086 = icmp eq i32 %1085, 0
  %1087 = icmp slt i32 %1082, 10
  %1088 = or i1 %1086, %1087
  br i1 %1088, label %originalBB430, label %originalBB430alteredBB

originalBB430:                                    ; preds = %1080, %originalBB430alteredBB
  %1089 = load i32, i32* %14, align 4, !dbg !451
  %1090 = and i32 %1089, 128, !dbg !453
  %1091 = icmp ne i32 %1090, 0, !dbg !453
  %1092 = load i32, i32* @x.3
  %1093 = load i32, i32* @y.4
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBBpart2436, label %originalBB430alteredBB

originalBBpart2436:                               ; preds = %originalBB430
  br i1 %1091, label %1100, label %1117, !dbg !454

1100:                                             ; preds = %originalBBpart2436
  %1101 = load i32, i32* @x.3
  %1102 = load i32, i32* @y.4
  %1103 = sub i32 %1101, 1
  %1104 = mul i32 %1101, %1103
  %1105 = urem i32 %1104, 2
  %1106 = icmp eq i32 %1105, 0
  %1107 = icmp slt i32 %1102, 10
  %1108 = or i1 %1106, %1107
  br i1 %1108, label %originalBB438, label %originalBB438alteredBB

originalBB438:                                    ; preds = %1100, %originalBB438alteredBB
  call void @print_element(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0)), !dbg !455
  %1109 = load i32, i32* @x.3
  %1110 = load i32, i32* @y.4
  %1111 = sub i32 %1109, 1
  %1112 = mul i32 %1109, %1111
  %1113 = urem i32 %1112, 2
  %1114 = icmp eq i32 %1113, 0
  %1115 = icmp slt i32 %1110, 10
  %1116 = or i1 %1114, %1115
  br i1 %1116, label %originalBBpart2440, label %originalBB438alteredBB

originalBBpart2440:                               ; preds = %originalBB438
  br label %1117, !dbg !455

1117:                                             ; preds = %originalBBpart2440, %originalBBpart2436
  %1118 = load i32, i32* @x.3
  %1119 = load i32, i32* @y.4
  %1120 = sub i32 %1118, 1
  %1121 = mul i32 %1118, %1120
  %1122 = urem i32 %1121, 2
  %1123 = icmp eq i32 %1122, 0
  %1124 = icmp slt i32 %1119, 10
  %1125 = or i1 %1123, %1124
  br i1 %1125, label %originalBB442, label %originalBB442alteredBB

originalBB442:                                    ; preds = %1117, %originalBB442alteredBB
  %1126 = call i32 @putchar_unlocked(i32 10), !dbg !456
  %1127 = load i32, i32* @x.3
  %1128 = load i32, i32* @y.4
  %1129 = sub i32 %1127, 1
  %1130 = mul i32 %1127, %1129
  %1131 = urem i32 %1130, 2
  %1132 = icmp eq i32 %1131, 0
  %1133 = icmp slt i32 %1128, 10
  %1134 = or i1 %1132, %1133
  br i1 %1134, label %originalBBpart2444, label %originalBB442alteredBB

originalBBpart2444:                               ; preds = %originalBB442
  ret i32 0, !dbg !457

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %1135 = alloca i32, align 4
  %1136 = alloca i32, align 4
  %1137 = alloca i8**, align 8
  %1138 = alloca i32, align 4
  %1139 = alloca %struct.utsname, align 1
  %1140 = alloca i8*, align 8
  %1141 = alloca i8*, align 8
  store i32 0, i32* %1135, align 4
  store i32 %0, i32* %1136, align 4
  call void @llvm.dbg.declare(metadata i32* %1136, metadata !458, metadata !DIExpression()), !dbg !340
  store i8** %1, i8*** %1137, align 8
  call void @llvm.dbg.declare(metadata i8*** %1137, metadata !480, metadata !DIExpression()), !dbg !342
  call void @llvm.dbg.declare(metadata i32* %1138, metadata !481, metadata !DIExpression()), !dbg !344
  store i32 0, i32* %1138, align 4, !dbg !344
  %1142 = load i8**, i8*** %1137, align 8, !dbg !345
  %1143 = getelementptr inbounds i8*, i8** %1142, i64 0, !dbg !345
  %1144 = load i8*, i8** %1143, align 8, !dbg !345
  call void @set_program_name(i8* %1144), !dbg !346
  %1145 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !347
  %1146 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !348
  %1147 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !349
  %1148 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !350
  %1149 = load i32, i32* %1136, align 4, !dbg !351
  %1150 = load i8**, i8*** %1137, align 8, !dbg !352
  %1151 = call i32 @decode_switches(i32 %1149, i8** %1150), !dbg !353
  store i32 %1151, i32* %1138, align 4, !dbg !354
  %1152 = load i32, i32* %1138, align 4, !dbg !355
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %collatzVaralteredBB = alloca i32
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  %1153 = load i32, i32* @inVal0
  %1154 = icmp sgt i32 %1153, 1
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %73
  store i32 49, i32* %collatzVar
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %90
  %1155 = load i8**, i8*** @inVal1
  %1156 = getelementptr inbounds i8*, i8** %1155, i64 1
  %1157 = load i8*, i8** %1156
  %controlealteredBB = call i32 @controle(i8* %1157, i32 0)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %1158 = load i32, i32* %collatzVar
  %1159 = icmp sgt i32 %1158, 1
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %129
  %1160 = load i32, i32* %collatzVar
  %1161 = srem i32 %1160, 2
  %1162 = icmp eq i32 %1161, 0
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  %1163 = load i32, i32* %collatzVar
  %_ = shl i32 %1163, 2
  %_27 = sub i32 0, %1163
  %gen = add i32 %_27, 2
  %_28 = sub i32 %1163, 2
  %gen29 = mul i32 %_28, 2
  %_30 = sub i32 0, %1163
  %gen31 = add i32 %_30, 2
  %_32 = shl i32 %1163, 2
  %1164 = sdiv i32 %1163, 2
  store i32 %1164, i32* %collatzVar
  br label %originalBB26

originalBB36alteredBB:                            ; preds = %originalBB36, %168
  %1165 = load i32, i32* %collatzVar
  %_37 = sub i32 %1165, 3
  %gen38 = mul i32 %_37, 3
  %_39 = sub i32 0, %1165
  %gen40 = add i32 %_39, 3
  %_41 = sub i32 %1165, 3
  %gen42 = mul i32 %_41, 3
  %_43 = sub i32 %1165, 3
  %gen44 = mul i32 %_43, 3
  %_45 = sub i32 0, %1165
  %gen46 = add i32 %_45, 3
  %1166 = mul i32 %1165, 3
  %_47 = sub i32 0, %1166
  %gen48 = add i32 %_47, 1
  %1167 = add i32 %1166, 1
  store i32 %1167, i32* %collatzVar
  br label %originalBB36

originalBB52alteredBB:                            ; preds = %originalBB52, %188
  %1168 = load i32, i32* %collatzVar
  %_53 = sub i32 %28, %1168
  %gen54 = mul i32 %_53, %1168
  %_55 = sub i32 %28, %1168
  %gen56 = mul i32 %_55, %1168
  %_57 = shl i32 %28, %1168
  %_58 = sub i32 0, %28
  %gen59 = add i32 %_58, %1168
  %_60 = sub i32 %28, %1168
  %gen61 = mul i32 %_60, %1168
  %_62 = sub i32 %28, %1168
  %gen63 = mul i32 %_62, %1168
  %_64 = sub i32 %28, %1168
  %gen65 = mul i32 %_64, %1168
  %1169 = sub i32 %28, %1168
  %1170 = icmp sgt i32 %1169, -2
  br label %originalBB52

originalBB69alteredBB:                            ; preds = %originalBB69, %208
  %1171 = load i32, i32* %collatzVar
  %_70 = sub i32 0, %28
  %gen71 = add i32 %_70, %1171
  %_72 = sub i32 %28, %1171
  %gen73 = mul i32 %_72, %1171
  %_74 = sub i32 0, %28
  %gen75 = add i32 %_74, %1171
  %_76 = sub i32 0, %28
  %gen77 = add i32 %_76, %1171
  %_78 = sub i32 0, %28
  %gen79 = add i32 %_78, %1171
  %_80 = sub i32 %28, %1171
  %gen81 = mul i32 %_80, %1171
  %1172 = add i32 %28, %1171
  %1173 = icmp slt i32 %1172, 2
  br label %originalBB69

originalBB85alteredBB:                            ; preds = %originalBB85, %228
  store i32 1, i32* %14, align 4, !dbg !358
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %245
  %1174 = load i32, i32* %14, align 4, !dbg !360
  %_90 = shl i32 %1174, 31
  %_91 = sub i32 0, %1174
  %gen92 = add i32 %_91, 31
  %_93 = shl i32 %1174, 31
  %_94 = sub i32 0, %1174
  %gen95 = add i32 %_94, 31
  %1175 = and i32 %1174, 31, !dbg !362
  %1176 = icmp ne i32 %1175, 0, !dbg !362
  br label %originalBB89

originalBB99alteredBB:                            ; preds = %originalBB99, %265
  %1177 = call i32 @uname(%struct.utsname* %15) #10, !dbg !379
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %284
  %1178 = load i32, i32* @inVal0
  %1179 = icmp sgt i32 %1178, 1
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %303
  store i32 28, i32* %collatzVar5
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %324
  %1180 = load i32, i32* %collatzVar5
  %1181 = icmp sgt i32 %1180, 1
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %343
  %1182 = load i32, i32* %collatzVar5
  %_116 = shl i32 %1182, 2
  %_117 = shl i32 %1182, 2
  %1183 = srem i32 %1182, 2
  %1184 = icmp eq i32 %1183, 0
  br label %originalBB115

originalBB121alteredBB:                           ; preds = %originalBB121, %363
  %1185 = load i32, i32* %collatzVar5
  %_122 = sub i32 0, %1185
  %gen123 = add i32 %_122, 2
  %_124 = shl i32 %1185, 2
  %_125 = sub i32 %1185, 2
  %gen126 = mul i32 %_125, 2
  %_127 = sub i32 0, %1185
  %gen128 = add i32 %_127, 2
  %_129 = sub i32 %1185, 2
  %gen130 = mul i32 %_129, 2
  %_131 = shl i32 %1185, 2
  %_132 = sub i32 %1185, 2
  %gen133 = mul i32 %_132, 2
  %1186 = sdiv i32 %1185, 2
  store i32 %1186, i32* %collatzVar5
  br label %originalBB121

originalBB137alteredBB:                           ; preds = %originalBB137, %382
  %1187 = load i32, i32* %collatzVar5
  %_138 = sub i32 0, %1187
  %gen139 = add i32 %_138, 3
  %_140 = shl i32 %1187, 3
  %_141 = sub i32 %1187, 3
  %gen142 = mul i32 %_141, 3
  %_143 = sub i32 %1187, 3
  %gen144 = mul i32 %_143, 3
  %_145 = sub i32 %1187, 3
  %gen146 = mul i32 %_145, 3
  %_147 = sub i32 0, %1187
  %gen148 = add i32 %_147, 3
  %_149 = sub i32 0, %1187
  %gen150 = add i32 %_149, 3
  %1188 = mul i32 %1187, 3
  %_151 = sub i32 0, %1188
  %gen152 = add i32 %_151, 1
  %_153 = sub i32 %1188, 1
  %gen154 = mul i32 %_153, 1
  %_155 = shl i32 %1188, 1
  %_156 = shl i32 %1188, 1
  %_157 = sub i32 0, %1188
  %gen158 = add i32 %_157, 1
  %_159 = sub i32 0, %1188
  %gen160 = add i32 %_159, 1
  %_161 = sub i32 %1188, 1
  %gen162 = mul i32 %_161, 1
  %_163 = sub i32 %1188, 1
  %gen164 = mul i32 %_163, 1
  %1189 = add i32 %1188, 1
  store i32 %1189, i32* %collatzVar5
  br label %originalBB137

originalBB168alteredBB:                           ; preds = %originalBB168, %410
  %1190 = call i32* @__errno_location() #14, !dbg !382
  %1191 = load i32, i32* %1190, align 4, !dbg !382
  %1192 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !382
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1191, i8* %1192), !dbg !382
  br label %originalBB168

originalBB172alteredBB:                           ; preds = %originalBB172, %434
  %1193 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 0, !dbg !387
  %1194 = getelementptr inbounds [65 x i8], [65 x i8]* %1193, i64 0, i64 0, !dbg !388
  call void @print_element(i8* %1194), !dbg !389
  br label %originalBB172

originalBB176alteredBB:                           ; preds = %originalBB176, %453
  %1195 = load i32, i32* %14, align 4, !dbg !390
  %_177 = sub i32 %1195, 2
  %gen178 = mul i32 %_177, 2
  %_179 = sub i32 0, %1195
  %gen180 = add i32 %_179, 2
  %_181 = shl i32 %1195, 2
  %_182 = sub i32 0, %1195
  %gen183 = add i32 %_182, 2
  %_184 = sub i32 0, %1195
  %gen185 = add i32 %_184, 2
  %_186 = shl i32 %1195, 2
  %_187 = shl i32 %1195, 2
  %_188 = sub i32 %1195, 2
  %gen189 = mul i32 %_188, 2
  %1196 = and i32 %1195, 2, !dbg !392
  %1197 = icmp ne i32 %1196, 0, !dbg !392
  br label %originalBB176

originalBB193alteredBB:                           ; preds = %originalBB193, %473
  %1198 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 1, !dbg !394
  %1199 = getelementptr inbounds [65 x i8], [65 x i8]* %1198, i64 0, i64 0, !dbg !395
  call void @print_element(i8* %1199), !dbg !396
  br label %originalBB193

originalBB197alteredBB:                           ; preds = %originalBB197, %492
  %1200 = load i32, i32* %14, align 4, !dbg !397
  %_198 = shl i32 %1200, 4
  %_199 = sub i32 %1200, 4
  %gen200 = mul i32 %_199, 4
  %_201 = sub i32 %1200, 4
  %gen202 = mul i32 %_201, 4
  %_203 = sub i32 %1200, 4
  %gen204 = mul i32 %_203, 4
  %1201 = and i32 %1200, 4, !dbg !399
  %1202 = icmp ne i32 %1201, 0, !dbg !399
  br label %originalBB197

originalBB208alteredBB:                           ; preds = %originalBB208, %515
  %1203 = load i32, i32* %14, align 4, !dbg !404
  %_209 = sub i32 0, %1203
  %gen210 = add i32 %_209, 8
  %_211 = sub i32 0, %1203
  %gen212 = add i32 %_211, 8
  %_213 = sub i32 0, %1203
  %gen214 = add i32 %_213, 8
  %_215 = sub i32 0, %1203
  %gen216 = add i32 %_215, 8
  %_217 = sub i32 0, %1203
  %gen218 = add i32 %_217, 8
  %_219 = sub i32 %1203, 8
  %gen220 = mul i32 %_219, 8
  %_221 = shl i32 %1203, 8
  %1204 = and i32 %1203, 8, !dbg !406
  %1205 = icmp ne i32 %1204, 0, !dbg !406
  br label %originalBB208

originalBB225alteredBB:                           ; preds = %originalBB225, %535
  %1206 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 3, !dbg !408
  %1207 = getelementptr inbounds [65 x i8], [65 x i8]* %1206, i64 0, i64 0, !dbg !409
  call void @print_element(i8* %1207), !dbg !410
  br label %originalBB225

originalBB229alteredBB:                           ; preds = %originalBB229, %558
  %1208 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 4, !dbg !415
  %1209 = getelementptr inbounds [65 x i8], [65 x i8]* %1208, i64 0, i64 0, !dbg !416
  call void @print_element(i8* %1209), !dbg !417
  br label %originalBB229

originalBB233alteredBB:                           ; preds = %originalBB233, %577
  br label %originalBB233

originalBB237alteredBB:                           ; preds = %originalBB237, %594
  %1210 = load i32, i32* %14, align 4, !dbg !419
  %_238 = sub i32 %1210, 32
  %gen239 = mul i32 %_238, 32
  %1211 = and i32 %1210, 32, !dbg !421
  %1212 = icmp ne i32 %1211, 0, !dbg !421
  br label %originalBB237

originalBB243alteredBB:                           ; preds = %originalBB243, %614
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %16, align 8, !dbg !425
  %1213 = load i32, i32* %14, align 4, !dbg !426
  br label %originalBB243

originalBB247alteredBB:                           ; preds = %originalBB247, %632
  %collatzVar1alteredBB = alloca i32
  br label %originalBB247

originalBB251alteredBB:                           ; preds = %originalBB251, %649
  %1214 = load i32, i32* @inVal0
  %1215 = icmp sgt i32 %1214, 1
  br label %originalBB251

originalBB255alteredBB:                           ; preds = %originalBB255, %668
  store i32 59, i32* %collatzVar1
  br label %originalBB255

originalBB259alteredBB:                           ; preds = %originalBB259, %685
  %1216 = load i8**, i8*** @inVal1
  %1217 = getelementptr inbounds i8*, i8** %1216, i64 1
  %1218 = load i8*, i8** %1217
  %controle2alteredBB = call i32 @controle(i8* %1218, i32 -1)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB259

originalBB263alteredBB:                           ; preds = %originalBB263, %705
  %1219 = load i32, i32* %collatzVar1
  %1220 = icmp sgt i32 %1219, 1
  br label %originalBB263

originalBB267alteredBB:                           ; preds = %originalBB267, %724
  %1221 = load i32, i32* %collatzVar1
  %_268 = sub i32 %1221, 2
  %gen269 = mul i32 %_268, 2
  %_270 = sub i32 %1221, 2
  %gen271 = mul i32 %_270, 2
  %_272 = sub i32 %1221, 2
  %gen273 = mul i32 %_272, 2
  %_274 = shl i32 %1221, 2
  %_275 = shl i32 %1221, 2
  %_276 = sub i32 0, %1221
  %gen277 = add i32 %_276, 2
  %1222 = srem i32 %1221, 2
  %1223 = icmp eq i32 %1222, 0
  br label %originalBB267

originalBB281alteredBB:                           ; preds = %originalBB281, %747
  %1224 = load i32, i32* %collatzVar1
  %_282 = sub i32 %1224, 3
  %gen283 = mul i32 %_282, 3
  %_284 = sub i32 0, %1224
  %gen285 = add i32 %_284, 3
  %_286 = shl i32 %1224, 3
  %_287 = sub i32 0, %1224
  %gen288 = add i32 %_287, 3
  %_289 = sub i32 %1224, 3
  %gen290 = mul i32 %_289, 3
  %_291 = sub i32 %1224, 3
  %gen292 = mul i32 %_291, 3
  %_293 = shl i32 %1224, 3
  %_294 = shl i32 %1224, 3
  %1225 = mul i32 %1224, 3
  %_295 = sub i32 0, %1225
  %gen296 = add i32 %_295, 1
  %_297 = sub i32 %1225, 1
  %gen298 = mul i32 %_297, 1
  %_299 = sub i32 0, %1225
  %gen300 = add i32 %_299, 1
  %_301 = sub i32 0, %1225
  %gen302 = add i32 %_301, 1
  %_303 = sub i32 %1225, 1
  %gen304 = mul i32 %_303, 1
  %1226 = add i32 %1225, 1
  store i32 %1226, i32* %collatzVar1
  br label %originalBB281

originalBB308alteredBB:                           ; preds = %originalBB308, %767
  %1227 = load i32, i32* %collatzVar1
  %_309 = sub i32 0, %623
  %gen310 = add i32 %_309, %1227
  %_311 = shl i32 %623, %1227
  %_312 = shl i32 %623, %1227
  %_313 = sub i32 %623, %1227
  %gen314 = mul i32 %_313, %1227
  %_315 = sub i32 %623, %1227
  %gen316 = mul i32 %_315, %1227
  %_317 = sub i32 %623, %1227
  %gen318 = mul i32 %_317, %1227
  %1228 = sub i32 %623, %1227
  %1229 = icmp sgt i32 %1228, -3
  br label %originalBB308

originalBB322alteredBB:                           ; preds = %originalBB322, %787
  %1230 = load i32, i32* %collatzVar1
  %_323 = sub i32 %623, %1230
  %gen324 = mul i32 %_323, %1230
  %1231 = add i32 %623, %1230
  %1232 = icmp slt i32 %1231, 1
  br label %originalBB322

originalBB328alteredBB:                           ; preds = %originalBB328, %807
  %1233 = load i8*, i8** %16, align 8, !dbg !429
  %1234 = icmp eq i8* %1233, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !430
  br label %originalBB328

originalBB332alteredBB:                           ; preds = %originalBB332, %826
  %1235 = load i8*, i8** %16, align 8, !dbg !432
  call void @print_element(i8* %1235), !dbg !433
  br label %originalBB332

originalBB336alteredBB:                           ; preds = %originalBB336, %844
  br label %originalBB336

originalBB340alteredBB:                           ; preds = %originalBB340, %861
  %1236 = load i32, i32* %14, align 4, !dbg !435
  %_341 = sub i32 0, %1236
  %gen342 = add i32 %_341, 64
  %_343 = sub i32 %1236, 64
  %gen344 = mul i32 %_343, 64
  %_345 = sub i32 0, %1236
  %gen346 = add i32 %_345, 64
  %_347 = sub i32 0, %1236
  %gen348 = add i32 %_347, 64
  %_349 = sub i32 0, %1236
  %gen350 = add i32 %_349, 64
  %_351 = sub i32 %1236, 64
  %gen352 = mul i32 %_351, 64
  %_353 = sub i32 0, %1236
  %gen354 = add i32 %_353, 64
  %_355 = sub i32 0, %1236
  %gen356 = add i32 %_355, 64
  %1237 = and i32 %1236, 64, !dbg !437
  %1238 = icmp ne i32 %1237, 0, !dbg !437
  br label %originalBB340

originalBB360alteredBB:                           ; preds = %originalBB360, %884
  %1239 = load i32, i32* @inVal0
  %1240 = icmp sgt i32 %1239, 1
  br label %originalBB360

originalBB364alteredBB:                           ; preds = %originalBB364, %903
  store i32 89, i32* %collatzVar3
  br label %originalBB364

originalBB368alteredBB:                           ; preds = %originalBB368, %920
  %1241 = load i8**, i8*** @inVal1
  %1242 = getelementptr inbounds i8*, i8** %1241, i64 1
  %1243 = load i8*, i8** %1242
  %controle4alteredBB = call i32 @controle(i8* %1243, i32 -1)
  store i32 %controle4alteredBB, i32* %collatzVar3
  br label %originalBB368

originalBB372alteredBB:                           ; preds = %originalBB372, %943
  %1244 = load i32, i32* %collatzVar3
  %_373 = sub i32 %1244, 2
  %gen374 = mul i32 %_373, 2
  %_375 = shl i32 %1244, 2
  %_376 = sub i32 %1244, 2
  %gen377 = mul i32 %_376, 2
  %_378 = shl i32 %1244, 2
  %_379 = shl i32 %1244, 2
  %1245 = srem i32 %1244, 2
  %1246 = icmp eq i32 %1245, 0
  br label %originalBB372

originalBB383alteredBB:                           ; preds = %originalBB383, %963
  %1247 = load i32, i32* %collatzVar3
  %_384 = sub i32 %1247, 2
  %gen385 = mul i32 %_384, 2
  %1248 = sdiv i32 %1247, 2
  store i32 %1248, i32* %collatzVar3
  br label %originalBB383

originalBB389alteredBB:                           ; preds = %originalBB389, %982
  %1249 = load i32, i32* %collatzVar3
  %_390 = shl i32 %1249, 3
  %_391 = sub i32 0, %1249
  %gen392 = add i32 %_391, 3
  %_393 = sub i32 0, %1249
  %gen394 = add i32 %_393, 3
  %_395 = shl i32 %1249, 3
  %_396 = sub i32 0, %1249
  %gen397 = add i32 %_396, 3
  %1250 = mul i32 %1249, 3
  %_398 = sub i32 0, %1250
  %gen399 = add i32 %_398, 1
  %1251 = add i32 %1250, 1
  store i32 %1251, i32* %collatzVar3
  br label %originalBB389

originalBB403alteredBB:                           ; preds = %originalBB403, %1002
  %1252 = load i32, i32* %collatzVar3
  %_404 = sub i32 0, %882
  %gen405 = add i32 %_404, %1252
  %_406 = sub i32 0, %882
  %gen407 = add i32 %_406, %1252
  %_408 = shl i32 %882, %1252
  %_409 = shl i32 %882, %1252
  %_410 = shl i32 %882, %1252
  %_411 = sub i32 0, %882
  %gen412 = add i32 %_411, %1252
  %1253 = sub i32 %882, %1252
  %1254 = icmp sgt i32 %1253, -3
  br label %originalBB403

originalBB416alteredBB:                           ; preds = %originalBB416, %1022
  %1255 = load i32, i32* %collatzVar3
  %_417 = sub i32 %882, %1255
  %gen418 = mul i32 %_417, %1255
  %1256 = add i32 %882, %1255
  %1257 = icmp slt i32 %1256, 1
  br label %originalBB416

originalBB422alteredBB:                           ; preds = %originalBB422, %1045
  %1258 = load i8*, i8** %17, align 8, !dbg !448
  call void @print_element(i8* %1258), !dbg !449
  br label %originalBB422

originalBB426alteredBB:                           ; preds = %originalBB426, %1063
  br label %originalBB426

originalBB430alteredBB:                           ; preds = %originalBB430, %1080
  %1259 = load i32, i32* %14, align 4, !dbg !451
  %_431 = sub i32 %1259, 128
  %gen432 = mul i32 %_431, 128
  %_433 = sub i32 %1259, 128
  %gen434 = mul i32 %_433, 128
  %1260 = and i32 %1259, 128, !dbg !453
  %1261 = icmp ne i32 %1260, 0, !dbg !453
  br label %originalBB430

originalBB438alteredBB:                           ; preds = %originalBB438, %1100
  call void @print_element(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0)), !dbg !455
  br label %originalBB438

originalBB442alteredBB:                           ; preds = %originalBB442, %1117
  %1262 = call i32 @putchar_unlocked(i32 10), !dbg !456
  br label %originalBB442
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @decode_switches(i32, i8**) #4 !dbg !482 {
  %3 = load i32, i32* @x.5
  %4 = load i32, i32* @y.6
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8**, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !483, metadata !DIExpression()), !dbg !484
  store i8** %1, i8*** %12, align 8
  call void @llvm.dbg.declare(metadata i8*** %12, metadata !485, metadata !DIExpression()), !dbg !486
  call void @llvm.dbg.declare(metadata i32* %13, metadata !487, metadata !DIExpression()), !dbg !488
  call void @llvm.dbg.declare(metadata i32* %14, metadata !489, metadata !DIExpression()), !dbg !490
  store i32 0, i32* %14, align 4, !dbg !490
  %15 = load i32, i32* @uname_mode, align 4, !dbg !491
  %16 = icmp eq i32 %15, 2, !dbg !493
  %17 = load i32, i32* @x.5
  %18 = load i32, i32* @y.6
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %139, !dbg !494

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.5
  %27 = load i32, i32* @y.6
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = load i32, i32* @x.5
  %35 = load i32, i32* @y.6
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %42, !dbg !495

42:                                               ; preds = %originalBBpart24
  %43 = load i32, i32* @x.5
  %44 = load i32, i32* @y.6
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i32, i32* %11, align 4, !dbg !497
  %52 = load i8**, i8*** %12, align 8, !dbg !498
  %53 = call i32 @getopt_long(i32 %51, i8** %52, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), %struct.option* getelementptr inbounds ([3 x %struct.option], [3 x %struct.option]* @arch_long_options, i64 0, i64 0), i32* null) #10, !dbg !499
  store i32 %53, i32* %13, align 4, !dbg !500
  %54 = icmp ne i32 %53, -1, !dbg !501
  %55 = load i32, i32* @x.5
  %56 = load i32, i32* @y.6
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %122, !dbg !495

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.5
  %65 = load i32, i32* @y.6
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i32, i32* %13, align 4, !dbg !502
  %73 = load i32, i32* @x.5
  %74 = load i32, i32* @y.6
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i32 %72, label %105 [
    i32 -130, label %81
    i32 -131, label %82
  ], !dbg !504

81:                                               ; preds = %originalBBpart212
  call void @usage(i32 0) #15, !dbg !505
  unreachable, !dbg !505

82:                                               ; preds = %originalBBpart212
  %83 = load i32, i32* @x.5
  %84 = load i32, i32* @y.6
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !507
  %92 = load i32, i32* @uname_mode, align 4, !dbg !507
  %93 = icmp eq i32 %92, 1, !dbg !507
  %94 = zext i1 %93 to i64, !dbg !507
  %95 = select i1 %93, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !507
  %96 = load i8*, i8** @Version, align 8, !dbg !507
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %91, i8* %95, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %96, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i64 0, i64 0), i8* null), !dbg !507
  call void @exit(i32 0) #12, !dbg !507
  %97 = load i32, i32* @x.5
  %98 = load i32, i32* @y.6
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !507

105:                                              ; preds = %originalBBpart212
  %106 = load i32, i32* @x.5
  %107 = load i32, i32* @y.6
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %105, %originalBB18alteredBB
  call void @usage(i32 1) #15, !dbg !508
  %114 = load i32, i32* @x.5
  %115 = load i32, i32* @y.6
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !508

122:                                              ; preds = %originalBBpart28
  %123 = load i32, i32* @x.5
  %124 = load i32, i32* @y.6
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %122, %originalBB22alteredBB
  store i32 16, i32* %14, align 4, !dbg !509
  %131 = load i32, i32* @x.5
  %132 = load i32, i32* @y.6
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %375, !dbg !510

139:                                              ; preds = %originalBBpart2
  %140 = load i32, i32* @x.5
  %141 = load i32, i32* @y.6
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %139, %originalBB26alteredBB
  %148 = load i32, i32* @x.5
  %149 = load i32, i32* @y.6
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %156, !dbg !511

156:                                              ; preds = %originalBBpart2115, %originalBBpart228
  %157 = load i32, i32* %11, align 4, !dbg !513
  %158 = load i8**, i8*** %12, align 8, !dbg !514
  %159 = call i32 @getopt_long(i32 %157, i8** %158, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i64 0, i64 0), %struct.option* getelementptr inbounds ([14 x %struct.option], [14 x %struct.option]* @uname_long_options, i64 0, i64 0), i32* null) #10, !dbg !515
  store i32 %159, i32* %13, align 4, !dbg !516
  %160 = icmp ne i32 %159, -1, !dbg !517
  br i1 %160, label %161, label %358, !dbg !511

161:                                              ; preds = %156
  %162 = load i32, i32* @x.5
  %163 = load i32, i32* @y.6
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %161, %originalBB30alteredBB
  %170 = load i32, i32* %13, align 4, !dbg !518
  %171 = load i32, i32* @x.5
  %172 = load i32, i32* @y.6
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  switch i32 %170, label %324 [
    i32 97, label %179
    i32 115, label %196
    i32 110, label %215
    i32 114, label %234
    i32 118, label %237
    i32 109, label %256
    i32 112, label %259
    i32 105, label %262
    i32 111, label %281
    i32 -130, label %300
    i32 -131, label %301
  ], !dbg !520

179:                                              ; preds = %originalBBpart232
  %180 = load i32, i32* @x.5
  %181 = load i32, i32* @y.6
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %179, %originalBB34alteredBB
  store i32 -1, i32* %14, align 4, !dbg !521
  %188 = load i32, i32* @x.5
  %189 = load i32, i32* @y.6
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %341, !dbg !523

196:                                              ; preds = %originalBBpart232
  %197 = load i32, i32* @x.5
  %198 = load i32, i32* @y.6
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %196, %originalBB38alteredBB
  %205 = load i32, i32* %14, align 4, !dbg !524
  %206 = or i32 %205, 1, !dbg !524
  store i32 %206, i32* %14, align 4, !dbg !524
  %207 = load i32, i32* @x.5
  %208 = load i32, i32* @y.6
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart252, label %originalBB38alteredBB

originalBBpart252:                                ; preds = %originalBB38
  br label %341, !dbg !525

215:                                              ; preds = %originalBBpart232
  %216 = load i32, i32* @x.5
  %217 = load i32, i32* @y.6
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %215, %originalBB54alteredBB
  %224 = load i32, i32* %14, align 4, !dbg !526
  %225 = or i32 %224, 2, !dbg !526
  store i32 %225, i32* %14, align 4, !dbg !526
  %226 = load i32, i32* @x.5
  %227 = load i32, i32* @y.6
  %228 = sub i32 %226, 1
  %229 = mul i32 %226, %228
  %230 = urem i32 %229, 2
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %231, %232
  br i1 %233, label %originalBBpart261, label %originalBB54alteredBB

originalBBpart261:                                ; preds = %originalBB54
  br label %341, !dbg !527

234:                                              ; preds = %originalBBpart232
  %235 = load i32, i32* %14, align 4, !dbg !528
  %236 = or i32 %235, 4, !dbg !528
  store i32 %236, i32* %14, align 4, !dbg !528
  br label %341, !dbg !529

237:                                              ; preds = %originalBBpart232
  %238 = load i32, i32* @x.5
  %239 = load i32, i32* @y.6
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %237, %originalBB63alteredBB
  %246 = load i32, i32* %14, align 4, !dbg !530
  %247 = or i32 %246, 8, !dbg !530
  store i32 %247, i32* %14, align 4, !dbg !530
  %248 = load i32, i32* @x.5
  %249 = load i32, i32* @y.6
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBBpart272, label %originalBB63alteredBB

originalBBpart272:                                ; preds = %originalBB63
  br label %341, !dbg !531

256:                                              ; preds = %originalBBpart232
  %257 = load i32, i32* %14, align 4, !dbg !532
  %258 = or i32 %257, 16, !dbg !532
  store i32 %258, i32* %14, align 4, !dbg !532
  br label %341, !dbg !533

259:                                              ; preds = %originalBBpart232
  %260 = load i32, i32* %14, align 4, !dbg !534
  %261 = or i32 %260, 32, !dbg !534
  store i32 %261, i32* %14, align 4, !dbg !534
  br label %341, !dbg !535

262:                                              ; preds = %originalBBpart232
  %263 = load i32, i32* @x.5
  %264 = load i32, i32* @y.6
  %265 = sub i32 %263, 1
  %266 = mul i32 %263, %265
  %267 = urem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %268, %269
  br i1 %270, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %262, %originalBB74alteredBB
  %271 = load i32, i32* %14, align 4, !dbg !536
  %272 = or i32 %271, 64, !dbg !536
  store i32 %272, i32* %14, align 4, !dbg !536
  %273 = load i32, i32* @x.5
  %274 = load i32, i32* @y.6
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart286, label %originalBB74alteredBB

originalBBpart286:                                ; preds = %originalBB74
  br label %341, !dbg !537

281:                                              ; preds = %originalBBpart232
  %282 = load i32, i32* @x.5
  %283 = load i32, i32* @y.6
  %284 = sub i32 %282, 1
  %285 = mul i32 %282, %284
  %286 = urem i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %287, %288
  br i1 %289, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %281, %originalBB88alteredBB
  %290 = load i32, i32* %14, align 4, !dbg !538
  %291 = or i32 %290, 128, !dbg !538
  store i32 %291, i32* %14, align 4, !dbg !538
  %292 = load i32, i32* @x.5
  %293 = load i32, i32* @y.6
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBBpart2103, label %originalBB88alteredBB

originalBBpart2103:                               ; preds = %originalBB88
  br label %341, !dbg !539

300:                                              ; preds = %originalBBpart232
  call void @usage(i32 0) #15, !dbg !540
  unreachable, !dbg !540

301:                                              ; preds = %originalBBpart232
  %302 = load i32, i32* @x.5
  %303 = load i32, i32* @y.6
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %301, %originalBB105alteredBB
  %310 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !541
  %311 = load i32, i32* @uname_mode, align 4, !dbg !541
  %312 = icmp eq i32 %311, 1, !dbg !541
  %313 = zext i1 %312 to i64, !dbg !541
  %314 = select i1 %312, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !541
  %315 = load i8*, i8** @Version, align 8, !dbg !541
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %310, i8* %314, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %315, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* null), !dbg !541
  call void @exit(i32 0) #12, !dbg !541
  %316 = load i32, i32* @x.5
  %317 = load i32, i32* @y.6
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  unreachable, !dbg !541

324:                                              ; preds = %originalBBpart232
  %325 = load i32, i32* @x.5
  %326 = load i32, i32* @y.6
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %324, %originalBB109alteredBB
  call void @usage(i32 1) #15, !dbg !542
  %333 = load i32, i32* @x.5
  %334 = load i32, i32* @y.6
  %335 = sub i32 %333, 1
  %336 = mul i32 %333, %335
  %337 = urem i32 %336, 2
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %338, %339
  br i1 %340, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  unreachable, !dbg !542

341:                                              ; preds = %originalBBpart2103, %originalBBpart286, %259, %256, %originalBBpart272, %234, %originalBBpart261, %originalBBpart252, %originalBBpart236
  %342 = load i32, i32* @x.5
  %343 = load i32, i32* @y.6
  %344 = sub i32 %342, 1
  %345 = mul i32 %342, %344
  %346 = urem i32 %345, 2
  %347 = icmp eq i32 %346, 0
  %348 = icmp slt i32 %343, 10
  %349 = or i1 %347, %348
  br i1 %349, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %341, %originalBB113alteredBB
  %350 = load i32, i32* @x.5
  %351 = load i32, i32* @y.6
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br label %156, !dbg !511, !llvm.loop !543

358:                                              ; preds = %156
  %359 = load i32, i32* @x.5
  %360 = load i32, i32* @y.6
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %358, %originalBB117alteredBB
  %367 = load i32, i32* @x.5
  %368 = load i32, i32* @y.6
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart2119, label %originalBB117alteredBB

originalBBpart2119:                               ; preds = %originalBB117
  br label %375

375:                                              ; preds = %originalBBpart2119, %originalBBpart224
  %376 = load i32, i32* @x.5
  %377 = load i32, i32* @y.6
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %375, %originalBB121alteredBB
  %384 = load i32, i32* %11, align 4, !dbg !545
  %385 = load i32, i32* @optind, align 4, !dbg !547
  %386 = icmp ne i32 %384, %385, !dbg !548
  %387 = load i32, i32* @x.5
  %388 = load i32, i32* @y.6
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBBpart2123, label %originalBB121alteredBB

originalBBpart2123:                               ; preds = %originalBB121
  br i1 %386, label %395, label %419, !dbg !549

395:                                              ; preds = %originalBBpart2123
  %396 = load i32, i32* @x.5
  %397 = load i32, i32* @y.6
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %395, %originalBB125alteredBB
  %404 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !550
  %405 = load i8**, i8*** %12, align 8, !dbg !552
  %406 = load i32, i32* @optind, align 4, !dbg !553
  %407 = sext i32 %406 to i64, !dbg !552
  %408 = getelementptr inbounds i8*, i8** %405, i64 %407, !dbg !552
  %409 = load i8*, i8** %408, align 8, !dbg !552
  %410 = call i8* @quote(i8* %409), !dbg !554
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %404, i8* %410), !dbg !555
  call void @usage(i32 1) #15, !dbg !556
  %411 = load i32, i32* @x.5
  %412 = load i32, i32* @y.6
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBBpart2127, label %originalBB125alteredBB

originalBBpart2127:                               ; preds = %originalBB125
  unreachable, !dbg !556

419:                                              ; preds = %originalBBpart2123
  %420 = load i32, i32* @x.5
  %421 = load i32, i32* @y.6
  %422 = sub i32 %420, 1
  %423 = mul i32 %420, %422
  %424 = urem i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %425, %426
  br i1 %427, label %originalBB129, label %originalBB129alteredBB

originalBB129:                                    ; preds = %419, %originalBB129alteredBB
  %428 = load i32, i32* %14, align 4, !dbg !557
  %429 = load i32, i32* @x.5
  %430 = load i32, i32* @y.6
  %431 = sub i32 %429, 1
  %432 = mul i32 %429, %431
  %433 = urem i32 %432, 2
  %434 = icmp eq i32 %433, 0
  %435 = icmp slt i32 %430, 10
  %436 = or i1 %434, %435
  br i1 %436, label %originalBBpart2131, label %originalBB129alteredBB

originalBBpart2131:                               ; preds = %originalBB129
  ret i32 %428, !dbg !558

originalBBalteredBB:                              ; preds = %originalBB, %2
  %437 = alloca i32, align 4
  %438 = alloca i8**, align 8
  %439 = alloca i32, align 4
  %440 = alloca i32, align 4
  store i32 %0, i32* %437, align 4
  call void @llvm.dbg.declare(metadata i32* %437, metadata !559, metadata !DIExpression()), !dbg !484
  store i8** %1, i8*** %438, align 8
  call void @llvm.dbg.declare(metadata i8*** %438, metadata !582, metadata !DIExpression()), !dbg !486
  call void @llvm.dbg.declare(metadata i32* %439, metadata !583, metadata !DIExpression()), !dbg !488
  call void @llvm.dbg.declare(metadata i32* %440, metadata !584, metadata !DIExpression()), !dbg !490
  store i32 0, i32* %440, align 4, !dbg !490
  %441 = load i32, i32* @uname_mode, align 4, !dbg !491
  %442 = icmp eq i32 %441, 2, !dbg !493
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %443 = load i32, i32* %11, align 4, !dbg !497
  %444 = load i8**, i8*** %12, align 8, !dbg !498
  %445 = call i32 @getopt_long(i32 %443, i8** %444, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), %struct.option* getelementptr inbounds ([3 x %struct.option], [3 x %struct.option]* @arch_long_options, i64 0, i64 0), i32* null) #10, !dbg !499
  store i32 %445, i32* %13, align 4, !dbg !500
  %446 = icmp ne i32 %445, -1, !dbg !501
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %447 = load i32, i32* %13, align 4, !dbg !502
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %448 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !507
  %449 = load i32, i32* @uname_mode, align 4, !dbg !507
  %450 = icmp eq i32 %449, 1, !dbg !507
  %451 = zext i1 %450 to i64, !dbg !507
  %452 = select i1 %450, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !507
  %453 = load i8*, i8** @Version, align 8, !dbg !507
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %448, i8* %452, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %453, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i64 0, i64 0), i8* null), !dbg !507
  call void @exit(i32 0) #12, !dbg !507
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %105
  call void @usage(i32 1) #15, !dbg !508
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %122
  store i32 16, i32* %14, align 4, !dbg !509
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %139
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %161
  %454 = load i32, i32* %13, align 4, !dbg !518
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %179
  store i32 -1, i32* %14, align 4, !dbg !521
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %196
  %455 = load i32, i32* %14, align 4, !dbg !524
  %_ = sub i32 0, %455
  %gen = add i32 %_, 1
  %_39 = sub i32 %455, 1
  %gen40 = mul i32 %_39, 1
  %_41 = sub i32 0, %455
  %gen42 = add i32 %_41, 1
  %_43 = shl i32 %455, 1
  %_44 = sub i32 %455, 1
  %gen45 = mul i32 %_44, 1
  %_46 = sub i32 0, %455
  %gen47 = add i32 %_46, 1
  %_48 = sub i32 %455, 1
  %gen49 = mul i32 %_48, 1
  %_50 = shl i32 %455, 1
  %456 = or i32 %455, 1, !dbg !524
  store i32 %456, i32* %14, align 4, !dbg !524
  br label %originalBB38

originalBB54alteredBB:                            ; preds = %originalBB54, %215
  %457 = load i32, i32* %14, align 4, !dbg !526
  %_55 = shl i32 %457, 2
  %_56 = sub i32 0, %457
  %gen57 = add i32 %_56, 2
  %_58 = sub i32 %457, 2
  %gen59 = mul i32 %_58, 2
  %458 = or i32 %457, 2, !dbg !526
  store i32 %458, i32* %14, align 4, !dbg !526
  br label %originalBB54

originalBB63alteredBB:                            ; preds = %originalBB63, %237
  %459 = load i32, i32* %14, align 4, !dbg !530
  %_64 = shl i32 %459, 8
  %_65 = shl i32 %459, 8
  %_66 = sub i32 0, %459
  %gen67 = add i32 %_66, 8
  %_68 = shl i32 %459, 8
  %_69 = sub i32 %459, 8
  %gen70 = mul i32 %_69, 8
  %460 = or i32 %459, 8, !dbg !530
  store i32 %460, i32* %14, align 4, !dbg !530
  br label %originalBB63

originalBB74alteredBB:                            ; preds = %originalBB74, %262
  %461 = load i32, i32* %14, align 4, !dbg !536
  %_75 = shl i32 %461, 64
  %_76 = sub i32 %461, 64
  %gen77 = mul i32 %_76, 64
  %_78 = shl i32 %461, 64
  %_79 = shl i32 %461, 64
  %_80 = sub i32 %461, 64
  %gen81 = mul i32 %_80, 64
  %_82 = shl i32 %461, 64
  %_83 = sub i32 %461, 64
  %gen84 = mul i32 %_83, 64
  %462 = or i32 %461, 64, !dbg !536
  store i32 %462, i32* %14, align 4, !dbg !536
  br label %originalBB74

originalBB88alteredBB:                            ; preds = %originalBB88, %281
  %463 = load i32, i32* %14, align 4, !dbg !538
  %_89 = sub i32 0, %463
  %gen90 = add i32 %_89, 128
  %_91 = shl i32 %463, 128
  %_92 = shl i32 %463, 128
  %_93 = shl i32 %463, 128
  %_94 = shl i32 %463, 128
  %_95 = sub i32 0, %463
  %gen96 = add i32 %_95, 128
  %_97 = shl i32 %463, 128
  %_98 = sub i32 0, %463
  %gen99 = add i32 %_98, 128
  %_100 = sub i32 0, %463
  %gen101 = add i32 %_100, 128
  %464 = or i32 %463, 128, !dbg !538
  store i32 %464, i32* %14, align 4, !dbg !538
  br label %originalBB88

originalBB105alteredBB:                           ; preds = %originalBB105, %301
  %465 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !541
  %466 = load i32, i32* @uname_mode, align 4, !dbg !541
  %467 = icmp eq i32 %466, 1, !dbg !541
  %468 = zext i1 %467 to i64, !dbg !541
  %469 = select i1 %467, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !541
  %470 = load i8*, i8** @Version, align 8, !dbg !541
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %465, i8* %469, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %470, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* null), !dbg !541
  call void @exit(i32 0) #12, !dbg !541
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %324
  call void @usage(i32 1) #15, !dbg !542
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %341
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %358
  br label %originalBB117

originalBB121alteredBB:                           ; preds = %originalBB121, %375
  %471 = load i32, i32* %11, align 4, !dbg !545
  %472 = load i32, i32* @optind, align 4, !dbg !547
  %473 = icmp ne i32 %471, %472, !dbg !548
  br label %originalBB121

originalBB125alteredBB:                           ; preds = %originalBB125, %395
  %474 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !550
  %475 = load i8**, i8*** %12, align 8, !dbg !552
  %476 = load i32, i32* @optind, align 4, !dbg !553
  %477 = sext i32 %476 to i64, !dbg !552
  %478 = getelementptr inbounds i8*, i8** %475, i64 %477, !dbg !552
  %479 = load i8*, i8** %478, align 8, !dbg !552
  %480 = call i8* @quote(i8* %479), !dbg !554
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %474, i8* %480), !dbg !555
  call void @usage(i32 1) #15, !dbg !556
  br label %originalBB125

originalBB129alteredBB:                           ; preds = %originalBB129, %419
  %481 = load i32, i32* %14, align 4, !dbg !557
  br label %originalBB129
}

; Function Attrs: nounwind
declare dso_local i32 @uname(%struct.utsname*) #2

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_element(i8*) #4 !dbg !38 {
  %2 = load i32, i32* @x.7
  %3 = load i32, i32* @y.8
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !585, metadata !DIExpression()), !dbg !586
  %11 = load i8, i8* @print_element.printed, align 1, !dbg !587
  %12 = trunc i8 %11 to i1, !dbg !587
  %13 = load i32, i32* @x.7
  %14 = load i32, i32* @y.8
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %23, !dbg !589

21:                                               ; preds = %originalBBpart2
  %22 = call i32 @putchar_unlocked(i32 32), !dbg !590
  br label %23, !dbg !590

23:                                               ; preds = %21, %originalBBpart2
  store i8 1, i8* @print_element.printed, align 1, !dbg !591
  %24 = load i8*, i8** %10, align 8, !dbg !592
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !592
  %26 = call i32 @fputs_unlocked(i8* %24, %struct._IO_FILE* %25), !dbg !592
  ret void, !dbg !593

originalBBalteredBB:                              ; preds = %originalBB, %1
  %27 = alloca i8*, align 8
  store i8* %0, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !594, metadata !DIExpression()), !dbg !586
  %28 = load i8, i8* @print_element.printed, align 1, !dbg !587
  %29 = trunc i8 %28 to i1, !dbg !587
  br label %originalBB
}

declare dso_local i32 @putchar_unlocked(i32) #3

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !616 {
  %1 = alloca i8*, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !619
  %3 = call i32 @close_stream(%struct._IO_FILE* %2), !dbg !621
  %4 = icmp ne i32 %3, 0, !dbg !622
  br i1 %4, label %5, label %92, !dbg !623

5:                                                ; preds = %0
  %6 = load i32, i32* @x.9
  %7 = load i32, i32* @y.10
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = load i8, i8* @ignore_EPIPE, align 1, !dbg !624
  %15 = trunc i8 %14 to i1, !dbg !624
  %16 = load i32, i32* @x.9
  %17 = load i32, i32* @y.10
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %44, !dbg !625

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.9
  %26 = load i32, i32* @y.10
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = call i32* @__errno_location() #14, !dbg !626
  %34 = load i32, i32* %33, align 4, !dbg !626
  %35 = icmp eq i32 %34, 32, !dbg !627
  %36 = load i32, i32* @x.9
  %37 = load i32, i32* @y.10
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %92, label %44, !dbg !628

44:                                               ; preds = %originalBBpart24, %originalBBpart2
  call void @llvm.dbg.declare(metadata i8** %1, metadata !629, metadata !DIExpression()), !dbg !631
  %45 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #10, !dbg !632
  store i8* %45, i8** %1, align 8, !dbg !631
  %46 = load i8*, i8** @file_name, align 8, !dbg !633
  %47 = icmp ne i8* %46, null, !dbg !633
  br i1 %47, label %48, label %54, !dbg !635

48:                                               ; preds = %44
  %49 = call i32* @__errno_location() #14, !dbg !636
  %50 = load i32, i32* %49, align 4, !dbg !636
  %51 = load i8*, i8** @file_name, align 8, !dbg !637
  %52 = call i8* @quotearg_colon(i8* %51), !dbg !638
  %53 = load i8*, i8** %1, align 8, !dbg !639
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %50, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.51, i64 0, i64 0), i8* %52, i8* %53), !dbg !640
  br label %74, !dbg !640

54:                                               ; preds = %44
  %55 = load i32, i32* @x.9
  %56 = load i32, i32* @y.10
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  %63 = call i32* @__errno_location() #14, !dbg !641
  %64 = load i32, i32* %63, align 4, !dbg !641
  %65 = load i8*, i8** %1, align 8, !dbg !642
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.52, i64 0, i64 0), i8* %65), !dbg !643
  %66 = load i32, i32* @x.9
  %67 = load i32, i32* @y.10
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28, %48
  %75 = load i32, i32* @x.9
  %76 = load i32, i32* @y.10
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load volatile i32, i32* @exit_failure, align 4, !dbg !644
  call void @_exit(i32 %83) #15, !dbg !645
  %84 = load i32, i32* @x.9
  %85 = load i32, i32* @y.10
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !645

92:                                               ; preds = %originalBBpart24, %0
  %93 = load i32, i32* @x.9
  %94 = load i32, i32* @y.10
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %92, %originalBB14alteredBB
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !646
  %102 = call i32 @close_stream(%struct._IO_FILE* %101), !dbg !648
  %103 = icmp ne i32 %102, 0, !dbg !649
  %104 = load i32, i32* @x.9
  %105 = load i32, i32* @y.10
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %103, label %112, label %130, !dbg !650

112:                                              ; preds = %originalBBpart216
  %113 = load i32, i32* @x.9
  %114 = load i32, i32* @y.10
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load volatile i32, i32* @exit_failure, align 4, !dbg !651
  call void @_exit(i32 %121) #15, !dbg !652
  %122 = load i32, i32* @x.9
  %123 = load i32, i32* @y.10
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !652

130:                                              ; preds = %originalBBpart216
  %131 = load i32, i32* @x.9
  %132 = load i32, i32* @y.10
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %130, %originalBB22alteredBB
  %139 = load i32, i32* @x.9
  %140 = load i32, i32* @y.10
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret void, !dbg !653

originalBBalteredBB:                              ; preds = %originalBB, %5
  %147 = load i8, i8* @ignore_EPIPE, align 1, !dbg !624
  %148 = trunc i8 %147 to i1, !dbg !624
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %149 = call i32* @__errno_location() #14, !dbg !626
  %150 = load i32, i32* %149, align 4, !dbg !626
  %151 = icmp eq i32 %150, 32, !dbg !627
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  %152 = call i32* @__errno_location() #14, !dbg !641
  %153 = load i32, i32* %152, align 4, !dbg !641
  %154 = load i8*, i8** %1, align 8, !dbg !642
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %153, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.52, i64 0, i64 0), i8* %154), !dbg !643
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %155 = load volatile i32, i32* @exit_failure, align 4, !dbg !644
  call void @_exit(i32 %155) #15, !dbg !645
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %92
  %156 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !646
  %157 = call i32 @close_stream(%struct._IO_FILE* %156), !dbg !648
  %158 = icmp ne i32 %157, 0, !dbg !649
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %159 = load volatile i32, i32* @exit_failure, align 4, !dbg !651
  call void @_exit(i32 %159) #15, !dbg !652
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %130
  br label %originalBB22
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !654 {
  %2 = load i32, i32* @x.11
  %3 = load i32, i32* @y.12
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !655, metadata !DIExpression()), !dbg !656
  call void @llvm.dbg.declare(metadata i8** %11, metadata !657, metadata !DIExpression()), !dbg !658
  call void @llvm.dbg.declare(metadata i8** %12, metadata !659, metadata !DIExpression()), !dbg !660
  %13 = load i8*, i8** %10, align 8, !dbg !661
  %14 = icmp eq i8* %13, null, !dbg !663
  %15 = load i32, i32* @x.11
  %16 = load i32, i32* @y.12
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !664

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.11
  %25 = load i32, i32* @y.12
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !665
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.57, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !667
  call void @abort() #12, !dbg !668
  %34 = load i32, i32* @x.11
  %35 = load i32, i32* @y.12
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !668

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.11
  %44 = load i32, i32* @y.12
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !669
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !670
  store i8* %52, i8** %11, align 8, !dbg !671
  %53 = load i8*, i8** %11, align 8, !dbg !672
  %54 = icmp ne i8* %53, null, !dbg !673
  %55 = load i32, i32* @x.11
  %56 = load i32, i32* @y.12
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %66, !dbg !672

63:                                               ; preds = %originalBBpart28
  %64 = load i8*, i8** %11, align 8, !dbg !674
  %65 = getelementptr inbounds i8, i8* %64, i64 1, !dbg !675
  br label %84, !dbg !672

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.11
  %68 = load i32, i32* @y.12
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load i8*, i8** %10, align 8, !dbg !676
  %76 = load i32, i32* @x.11
  %77 = load i32, i32* @y.12
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %84, !dbg !672

84:                                               ; preds = %originalBBpart212, %63
  %85 = phi i8* [ %65, %63 ], [ %75, %originalBBpart212 ], !dbg !672
  %86 = load i32, i32* @x.11
  %87 = load i32, i32* @y.12
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %84, %originalBB14alteredBB
  store i8* %85, i8** %12, align 8, !dbg !677
  %94 = load i8*, i8** %12, align 8, !dbg !678
  %95 = load i8*, i8** %10, align 8, !dbg !680
  %96 = ptrtoint i8* %94 to i64, !dbg !681
  %97 = ptrtoint i8* %95 to i64, !dbg !681
  %98 = sub i64 %96, %97, !dbg !681
  %99 = icmp sge i64 %98, 7, !dbg !682
  %100 = load i32, i32* @x.11
  %101 = load i32, i32* @y.12
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart232, label %originalBB14alteredBB

originalBBpart232:                                ; preds = %originalBB14
  br i1 %99, label %108, label %187, !dbg !683

108:                                              ; preds = %originalBBpart232
  %109 = load i32, i32* @x.11
  %110 = load i32, i32* @y.12
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %108, %originalBB34alteredBB
  %117 = load i8*, i8** %12, align 8, !dbg !684
  %118 = getelementptr inbounds i8, i8* %117, i64 -7, !dbg !685
  %119 = call i32 @strncmp(i8* %118, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.58, i64 0, i64 0), i64 7) #13, !dbg !686
  %120 = icmp eq i32 %119, 0, !dbg !687
  %121 = load i32, i32* @x.11
  %122 = load i32, i32* @y.12
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %120, label %129, label %187, !dbg !688

129:                                              ; preds = %originalBBpart236
  %130 = load i32, i32* @x.11
  %131 = load i32, i32* @y.12
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %129, %originalBB38alteredBB
  %138 = load i8*, i8** %12, align 8, !dbg !689
  store i8* %138, i8** %10, align 8, !dbg !691
  %139 = load i8*, i8** %12, align 8, !dbg !692
  %140 = call i32 @strncmp(i8* %139, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.59, i64 0, i64 0), i64 3) #13, !dbg !694
  %141 = icmp eq i32 %140, 0, !dbg !695
  %142 = load i32, i32* @x.11
  %143 = load i32, i32* @y.12
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %141, label %150, label %170, !dbg !696

150:                                              ; preds = %originalBBpart240
  %151 = load i32, i32* @x.11
  %152 = load i32, i32* @y.12
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %150, %originalBB42alteredBB
  %159 = load i8*, i8** %12, align 8, !dbg !697
  %160 = getelementptr inbounds i8, i8* %159, i64 3, !dbg !699
  store i8* %160, i8** %10, align 8, !dbg !700
  %161 = load i8*, i8** %10, align 8, !dbg !701
  store i8* %161, i8** @program_invocation_short_name, align 8, !dbg !702
  %162 = load i32, i32* @x.11
  %163 = load i32, i32* @y.12
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %170, !dbg !703

170:                                              ; preds = %originalBBpart244, %originalBBpart240
  %171 = load i32, i32* @x.11
  %172 = load i32, i32* @y.12
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %170, %originalBB46alteredBB
  %179 = load i32, i32* @x.11
  %180 = load i32, i32* @y.12
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %187, !dbg !704

187:                                              ; preds = %originalBBpart248, %originalBBpart236, %originalBBpart232
  %188 = load i8*, i8** %10, align 8, !dbg !705
  store i8* %188, i8** @program_name, align 8, !dbg !706
  %189 = load i8*, i8** %10, align 8, !dbg !707
  store i8* %189, i8** @program_invocation_name, align 8, !dbg !708
  ret void, !dbg !709

originalBBalteredBB:                              ; preds = %originalBB, %1
  %190 = alloca i8*, align 8
  %191 = alloca i8*, align 8
  %192 = alloca i8*, align 8
  store i8* %0, i8** %190, align 8
  call void @llvm.dbg.declare(metadata i8** %190, metadata !710, metadata !DIExpression()), !dbg !656
  call void @llvm.dbg.declare(metadata i8** %191, metadata !716, metadata !DIExpression()), !dbg !658
  call void @llvm.dbg.declare(metadata i8** %192, metadata !717, metadata !DIExpression()), !dbg !660
  %193 = load i8*, i8** %190, align 8, !dbg !661
  %194 = icmp eq i8* %193, null, !dbg !663
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %195 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !665
  %196 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.57, i64 0, i64 0), %struct._IO_FILE* %195), !dbg !667
  call void @abort() #12, !dbg !668
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %197 = load i8*, i8** %10, align 8, !dbg !669
  %198 = call i8* @strrchr(i8* %197, i32 47) #13, !dbg !670
  store i8* %198, i8** %11, align 8, !dbg !671
  %199 = load i8*, i8** %11, align 8, !dbg !672
  %200 = icmp ne i8* %199, null, !dbg !673
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %201 = load i8*, i8** %10, align 8, !dbg !676
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %84
  store i8* %85, i8** %12, align 8, !dbg !677
  %202 = load i8*, i8** %12, align 8, !dbg !678
  %203 = load i8*, i8** %10, align 8, !dbg !680
  %204 = ptrtoint i8* %202 to i64, !dbg !681
  %205 = ptrtoint i8* %203 to i64, !dbg !681
  %_ = sub i64 0, %204
  %gen = add i64 %_, %205
  %_15 = sub i64 0, %204
  %gen16 = add i64 %_15, %205
  %_17 = sub i64 %204, %205
  %gen18 = mul i64 %_17, %205
  %_19 = sub i64 %204, %205
  %gen20 = mul i64 %_19, %205
  %_21 = sub i64 %204, %205
  %gen22 = mul i64 %_21, %205
  %_23 = sub i64 0, %204
  %gen24 = add i64 %_23, %205
  %_25 = sub i64 0, %204
  %gen26 = add i64 %_25, %205
  %_27 = sub i64 %204, %205
  %gen28 = mul i64 %_27, %205
  %_29 = sub i64 0, %204
  %gen30 = add i64 %_29, %205
  %206 = sub i64 %204, %205, !dbg !681
  %207 = icmp sge i64 %206, 7, !dbg !682
  br label %originalBB14

originalBB34alteredBB:                            ; preds = %originalBB34, %108
  %208 = load i8*, i8** %12, align 8, !dbg !684
  %209 = getelementptr inbounds i8, i8* %208, i64 -7, !dbg !685
  %210 = call i32 @strncmp(i8* %209, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.58, i64 0, i64 0), i64 7) #13, !dbg !686
  %211 = icmp eq i32 %210, 0, !dbg !687
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %129
  %212 = load i8*, i8** %12, align 8, !dbg !689
  store i8* %212, i8** %10, align 8, !dbg !691
  %213 = load i8*, i8** %12, align 8, !dbg !692
  %214 = call i32 @strncmp(i8* %213, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.59, i64 0, i64 0), i64 3) #13, !dbg !694
  %215 = icmp eq i32 %214, 0, !dbg !695
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %150
  %216 = load i8*, i8** %12, align 8, !dbg !697
  %217 = getelementptr inbounds i8, i8* %216, i64 3, !dbg !699
  store i8* %217, i8** %10, align 8, !dbg !700
  %218 = load i8*, i8** %10, align 8, !dbg !701
  store i8* %218, i8** @program_invocation_short_name, align 8, !dbg !702
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %170
  br label %originalBB46
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !718 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !722, metadata !DIExpression()), !dbg !723
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !724, metadata !DIExpression()), !dbg !725
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !726, metadata !DIExpression()), !dbg !727
  call void @llvm.dbg.declare(metadata i8* %15, metadata !728, metadata !DIExpression()), !dbg !729
  %19 = load i8, i8* %13, align 1, !dbg !730
  store i8 %19, i8* %15, align 1, !dbg !729
  call void @llvm.dbg.declare(metadata i32** %16, metadata !731, metadata !DIExpression()), !dbg !733
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !734
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !734
  %22 = load i32, i32* @x.13
  %23 = load i32, i32* @y.14
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !734

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.13
  %32 = load i32, i32* @y.14
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !735
  %40 = load i32, i32* @x.13
  %41 = load i32, i32* @y.14
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !734

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.13
  %50 = load i32, i32* @y.14
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.13
  %58 = load i32, i32* @y.14
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !734

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !734
  %67 = load i32, i32* @x.13
  %68 = load i32, i32* @y.14
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %75 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !736
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* %75, i64 0, i64 0, !dbg !737
  %77 = load i8, i8* %15, align 1, !dbg !738
  %78 = zext i8 %77 to i64, !dbg !738
  %79 = udiv i64 %78, 32, !dbg !739
  %80 = getelementptr inbounds i32, i32* %76, i64 %79, !dbg !740
  store i32* %80, i32** %16, align 8, !dbg !733
  call void @llvm.dbg.declare(metadata i32* %17, metadata !741, metadata !DIExpression()), !dbg !742
  %81 = load i8, i8* %15, align 1, !dbg !743
  %82 = zext i8 %81 to i64, !dbg !743
  %83 = urem i64 %82, 32, !dbg !744
  %84 = trunc i64 %83 to i32, !dbg !743
  store i32 %84, i32* %17, align 4, !dbg !742
  call void @llvm.dbg.declare(metadata i32* %18, metadata !745, metadata !DIExpression()), !dbg !746
  %85 = load i32*, i32** %16, align 8, !dbg !747
  %86 = load i32, i32* %85, align 4, !dbg !748
  %87 = load i32, i32* %17, align 4, !dbg !749
  %88 = lshr i32 %86, %87, !dbg !750
  %89 = and i32 %88, 1, !dbg !751
  store i32 %89, i32* %18, align 4, !dbg !746
  %90 = load i32, i32* %14, align 4, !dbg !752
  %91 = and i32 %90, 1, !dbg !753
  %92 = load i32, i32* %18, align 4, !dbg !754
  %93 = xor i32 %91, %92, !dbg !755
  %94 = load i32, i32* %17, align 4, !dbg !756
  %95 = shl i32 %93, %94, !dbg !757
  %96 = load i32*, i32** %16, align 8, !dbg !758
  %97 = load i32, i32* %96, align 4, !dbg !759
  %98 = xor i32 %97, %95, !dbg !759
  store i32 %98, i32* %96, align 4, !dbg !759
  %99 = load i32, i32* %18, align 4, !dbg !760
  %100 = load i32, i32* @x.13
  %101 = load i32, i32* @y.14
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart246, label %originalBB10alteredBB

originalBBpart246:                                ; preds = %originalBB10
  ret i32 %99, !dbg !761

originalBBalteredBB:                              ; preds = %originalBB, %3
  %108 = alloca %struct.quoting_options*, align 8
  %109 = alloca i8, align 1
  %110 = alloca i32, align 4
  %111 = alloca i8, align 1
  %112 = alloca i32*, align 8
  %113 = alloca i32, align 4
  %114 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %108, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %108, metadata !762, metadata !DIExpression()), !dbg !723
  store i8 %1, i8* %109, align 1
  call void @llvm.dbg.declare(metadata i8* %109, metadata !797, metadata !DIExpression()), !dbg !725
  store i32 %2, i32* %110, align 4
  call void @llvm.dbg.declare(metadata i32* %110, metadata !798, metadata !DIExpression()), !dbg !727
  call void @llvm.dbg.declare(metadata i8* %111, metadata !799, metadata !DIExpression()), !dbg !729
  %115 = load i8, i8* %109, align 1, !dbg !730
  store i8 %115, i8* %111, align 1, !dbg !729
  call void @llvm.dbg.declare(metadata i32** %112, metadata !800, metadata !DIExpression()), !dbg !733
  %116 = load %struct.quoting_options*, %struct.quoting_options** %108, align 8, !dbg !734
  %117 = icmp ne %struct.quoting_options* %116, null, !dbg !734
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %118 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !735
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %119 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !736
  %120 = getelementptr inbounds [8 x i32], [8 x i32]* %119, i64 0, i64 0, !dbg !737
  %121 = load i8, i8* %15, align 1, !dbg !738
  %122 = zext i8 %121 to i64, !dbg !738
  %_ = shl i64 %122, 32
  %123 = udiv i64 %122, 32, !dbg !739
  %124 = getelementptr inbounds i32, i32* %120, i64 %123, !dbg !740
  store i32* %124, i32** %16, align 8, !dbg !733
  call void @llvm.dbg.declare(metadata !11, metadata !801, metadata !DIExpression()), !dbg !742
  %125 = load i8, i8* %15, align 1, !dbg !743
  %126 = zext i8 %125 to i64, !dbg !743
  %_11 = sub i64 0, %126
  %gen = add i64 %_11, 32
  %_12 = shl i64 %126, 32
  %_13 = sub i64 0, %126
  %gen14 = add i64 %_13, 32
  %_15 = shl i64 %126, 32
  %_16 = shl i64 %126, 32
  %127 = urem i64 %126, 32, !dbg !744
  %128 = trunc i64 %127 to i32, !dbg !743
  store i32 %128, i32* %17, align 4, !dbg !742
  call void @llvm.dbg.declare(metadata !11, metadata !836, metadata !DIExpression()), !dbg !746
  %129 = load i32*, i32** %16, align 8, !dbg !747
  %130 = load i32, i32* %129, align 4, !dbg !748
  %131 = load i32, i32* %17, align 4, !dbg !749
  %_17 = sub i32 %130, %131
  %gen18 = mul i32 %_17, %131
  %_19 = shl i32 %130, %131
  %_20 = shl i32 %130, %131
  %132 = lshr i32 %130, %131, !dbg !750
  %_21 = sub i32 0, %132
  %gen22 = add i32 %_21, 1
  %_23 = sub i32 0, %132
  %gen24 = add i32 %_23, 1
  %_25 = shl i32 %132, 1
  %_26 = sub i32 %132, 1
  %gen27 = mul i32 %_26, 1
  %133 = and i32 %132, 1, !dbg !751
  store i32 %133, i32* %18, align 4, !dbg !746
  %134 = load i32, i32* %14, align 4, !dbg !752
  %_28 = sub i32 %134, 1
  %gen29 = mul i32 %_28, 1
  %135 = and i32 %134, 1, !dbg !753
  %136 = load i32, i32* %18, align 4, !dbg !754
  %_30 = shl i32 %135, %136
  %137 = xor i32 %135, %136, !dbg !755
  %138 = load i32, i32* %17, align 4, !dbg !756
  %_31 = shl i32 %137, %138
  %_32 = shl i32 %137, %138
  %_33 = sub i32 0, %137
  %gen34 = add i32 %_33, %138
  %_35 = shl i32 %137, %138
  %_36 = sub i32 0, %137
  %gen37 = add i32 %_36, %138
  %_38 = shl i32 %137, %138
  %139 = shl i32 %137, %138, !dbg !757
  %140 = load i32*, i32** %16, align 8, !dbg !758
  %141 = load i32, i32* %140, align 4, !dbg !759
  %_39 = sub i32 %141, %139
  %gen40 = mul i32 %_39, %139
  %_41 = sub i32 %141, %139
  %gen42 = mul i32 %_41, %139
  %_43 = sub i32 0, %141
  %gen44 = add i32 %_43, %139
  %142 = xor i32 %141, %139, !dbg !759
  store i32 %142, i32* %140, align 4, !dbg !759
  %143 = load i32, i32* %18, align 4, !dbg !760
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !837 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !840, metadata !DIExpression()), !dbg !841
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !842, metadata !DIExpression()), !dbg !843
  store i8 %2, i8* %6, align 1
  call void @llvm.dbg.declare(metadata i8* %6, metadata !844, metadata !DIExpression()), !dbg !845
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %7, metadata !846, metadata !DIExpression()), !dbg !847
  %8 = bitcast %struct.quoting_options* %7 to i8*, !dbg !848
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !848
  %9 = load i8, i8* %6, align 1, !dbg !849
  %10 = call i32 @set_char_quoting(%struct.quoting_options* %7, i8 signext %9, i32 1), !dbg !850
  %11 = load i8*, i8** %4, align 8, !dbg !851
  %12 = load i64, i64* %5, align 8, !dbg !852
  %13 = call i8* @quotearg_n_options(i32 0, i8* %11, i64 %12, %struct.quoting_options* %7), !dbg !853
  ret i8* %13, !dbg !854
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !855 {
  %5 = load i32, i32* @x.17
  %6 = load i32, i32* @y.18
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !860, metadata !DIExpression()), !dbg !861
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !862, metadata !DIExpression()), !dbg !863
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !864, metadata !DIExpression()), !dbg !865
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !866, metadata !DIExpression()), !dbg !867
  call void @llvm.dbg.declare(metadata i32* %17, metadata !868, metadata !DIExpression()), !dbg !869
  %25 = call i32* @__errno_location() #14, !dbg !870
  %26 = load i32, i32* %25, align 4, !dbg !870
  store i32 %26, i32* %17, align 4, !dbg !869
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !871, metadata !DIExpression()), !dbg !872
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !873
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !872
  %28 = load i32, i32* %13, align 4, !dbg !874
  %29 = icmp slt i32 %28, 0, !dbg !876
  %30 = load i32, i32* @x.17
  %31 = load i32, i32* @y.18
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %55, !dbg !877

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x.17
  %40 = load i32, i32* @y.18
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %38, %originalBB1alteredBB
  call void @abort() #12, !dbg !878
  %47 = load i32, i32* @x.17
  %48 = load i32, i32* @y.18
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !878

55:                                               ; preds = %originalBBpart2
  %56 = load i32, i32* @nslots, align 4, !dbg !879
  %57 = load i32, i32* %13, align 4, !dbg !881
  %58 = icmp sle i32 %56, %57, !dbg !882
  br i1 %58, label %59, label %197, !dbg !883

59:                                               ; preds = %55
  call void @llvm.dbg.declare(metadata i8* %19, metadata !884, metadata !DIExpression()), !dbg !886
  %60 = load i32, i32* @x.17
  %61 = load i32, i32* @y.18
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !887
  %69 = icmp eq %struct.slotvec* %68, @slotvec0, !dbg !888
  %70 = zext i1 %69 to i8, !dbg !886
  store i8 %70, i8* %19, align 1, !dbg !886
  call void @llvm.dbg.declare(metadata i32* %20, metadata !889, metadata !DIExpression()), !dbg !890
  store i32 2147483646, i32* %20, align 4, !dbg !890
  %71 = load i32, i32* %20, align 4, !dbg !891
  %72 = load i32, i32* %13, align 4, !dbg !893
  %73 = icmp slt i32 %71, %72, !dbg !894
  %74 = load i32, i32* @x.17
  %75 = load i32, i32* @y.18
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %73, label %82, label %99, !dbg !895

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.17
  %84 = load i32, i32* @y.18
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  call void @xalloc_die() #15, !dbg !896
  %91 = load i32, i32* @x.17
  %92 = load i32, i32* @y.18
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !896

99:                                               ; preds = %originalBBpart28
  %100 = load i32, i32* @x.17
  %101 = load i32, i32* @y.18
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %99, %originalBB14alteredBB
  %108 = load i8, i8* %19, align 1, !dbg !897
  %109 = trunc i8 %108 to i1, !dbg !897
  %110 = load i32, i32* @x.17
  %111 = load i32, i32* @y.18
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %109, label %118, label %119, !dbg !897

118:                                              ; preds = %originalBBpart216
  br label %137, !dbg !897

119:                                              ; preds = %originalBBpart216
  %120 = load i32, i32* @x.17
  %121 = load i32, i32* @y.18
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !898
  %129 = load i32, i32* @x.17
  %130 = load i32, i32* @y.18
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %137, !dbg !897

137:                                              ; preds = %originalBBpart220, %118
  %138 = phi %struct.slotvec* [ null, %118 ], [ %128, %originalBBpart220 ], !dbg !897
  %139 = bitcast %struct.slotvec* %138 to i8*, !dbg !897
  %140 = load i32, i32* %13, align 4, !dbg !899
  %141 = add nsw i32 %140, 1, !dbg !900
  %142 = sext i32 %141 to i64, !dbg !901
  %143 = mul i64 %142, 16, !dbg !902
  %144 = call i8* @xrealloc(i8* %139, i64 %143), !dbg !903
  %145 = bitcast i8* %144 to %struct.slotvec*, !dbg !903
  store %struct.slotvec* %145, %struct.slotvec** %18, align 8, !dbg !904
  store %struct.slotvec* %145, %struct.slotvec** @slotvec, align 8, !dbg !905
  %146 = load i8, i8* %19, align 1, !dbg !906
  %147 = trunc i8 %146 to i1, !dbg !906
  br i1 %147, label %148, label %167, !dbg !908

148:                                              ; preds = %137
  %149 = load i32, i32* @x.17
  %150 = load i32, i32* @y.18
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %148, %originalBB22alteredBB
  %157 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !909
  %158 = bitcast %struct.slotvec* %157 to i8*, !dbg !910
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %158, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !910
  %159 = load i32, i32* @x.17
  %160 = load i32, i32* @y.18
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %167, !dbg !911

167:                                              ; preds = %originalBBpart224, %137
  %168 = load i32, i32* @x.17
  %169 = load i32, i32* @y.18
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %167, %originalBB26alteredBB
  %176 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !912
  %177 = load i32, i32* @nslots, align 4, !dbg !913
  %178 = sext i32 %177 to i64, !dbg !914
  %179 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %176, i64 %178, !dbg !914
  %180 = bitcast %struct.slotvec* %179 to i8*, !dbg !915
  %181 = load i32, i32* %13, align 4, !dbg !916
  %182 = add nsw i32 %181, 1, !dbg !917
  %183 = load i32, i32* @nslots, align 4, !dbg !918
  %184 = sub nsw i32 %182, %183, !dbg !919
  %185 = sext i32 %184 to i64, !dbg !920
  %186 = mul i64 %185, 16, !dbg !921
  call void @llvm.memset.p0i8.i64(i8* align 8 %180, i8 0, i64 %186, i1 false), !dbg !915
  %187 = load i32, i32* %13, align 4, !dbg !922
  %188 = add nsw i32 %187, 1, !dbg !923
  store i32 %188, i32* @nslots, align 4, !dbg !924
  %189 = load i32, i32* @x.17
  %190 = load i32, i32* @y.18
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart265, label %originalBB26alteredBB

originalBBpart265:                                ; preds = %originalBB26
  br label %197, !dbg !925

197:                                              ; preds = %originalBBpart265, %55
  call void @llvm.dbg.declare(metadata i64* %21, metadata !926, metadata !DIExpression()), !dbg !928
  %198 = load i32, i32* @x.17
  %199 = load i32, i32* @y.18
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %197, %originalBB67alteredBB
  %206 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !929
  %207 = load i32, i32* %13, align 4, !dbg !930
  %208 = sext i32 %207 to i64, !dbg !929
  %209 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %206, i64 %208, !dbg !929
  %210 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %209, i32 0, i32 0, !dbg !931
  %211 = load i64, i64* %210, align 8, !dbg !931
  store i64 %211, i64* %21, align 8, !dbg !928
  call void @llvm.dbg.declare(metadata i8** %22, metadata !932, metadata !DIExpression()), !dbg !933
  %212 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !934
  %213 = load i32, i32* %13, align 4, !dbg !935
  %214 = sext i32 %213 to i64, !dbg !934
  %215 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %212, i64 %214, !dbg !934
  %216 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %215, i32 0, i32 1, !dbg !936
  %217 = load i8*, i8** %216, align 8, !dbg !936
  store i8* %217, i8** %22, align 8, !dbg !933
  call void @llvm.dbg.declare(metadata i32* %23, metadata !937, metadata !DIExpression()), !dbg !938
  %218 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !939
  %219 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %218, i32 0, i32 1, !dbg !940
  %220 = load i32, i32* %219, align 4, !dbg !940
  %221 = or i32 %220, 1, !dbg !941
  store i32 %221, i32* %23, align 4, !dbg !938
  call void @llvm.dbg.declare(metadata i64* %24, metadata !942, metadata !DIExpression()), !dbg !943
  %222 = load i8*, i8** %22, align 8, !dbg !944
  %223 = load i64, i64* %21, align 8, !dbg !945
  %224 = load i8*, i8** %14, align 8, !dbg !946
  %225 = load i64, i64* %15, align 8, !dbg !947
  %226 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !948
  %227 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %226, i32 0, i32 0, !dbg !949
  %228 = load i32, i32* %227, align 8, !dbg !949
  %229 = load i32, i32* %23, align 4, !dbg !950
  %230 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !951
  %231 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %230, i32 0, i32 2, !dbg !952
  %232 = getelementptr inbounds [8 x i32], [8 x i32]* %231, i64 0, i64 0, !dbg !951
  %233 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !953
  %234 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %233, i32 0, i32 3, !dbg !954
  %235 = load i8*, i8** %234, align 8, !dbg !954
  %236 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !955
  %237 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %236, i32 0, i32 4, !dbg !956
  %238 = load i8*, i8** %237, align 8, !dbg !956
  %239 = call i64 @quotearg_buffer_restyled(i8* %222, i64 %223, i8* %224, i64 %225, i32 %228, i32 %229, i32* %232, i8* %235, i8* %238), !dbg !957
  store i64 %239, i64* %24, align 8, !dbg !943
  %240 = load i64, i64* %21, align 8, !dbg !958
  %241 = load i64, i64* %24, align 8, !dbg !960
  %242 = icmp ule i64 %240, %241, !dbg !961
  %243 = load i32, i32* @x.17
  %244 = load i32, i32* @y.18
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBBpart275, label %originalBB67alteredBB

originalBBpart275:                                ; preds = %originalBB67
  br i1 %242, label %251, label %321, !dbg !962

251:                                              ; preds = %originalBBpart275
  %252 = load i32, i32* @x.17
  %253 = load i32, i32* @y.18
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %251, %originalBB77alteredBB
  %260 = load i64, i64* %24, align 8, !dbg !963
  %261 = add i64 %260, 1, !dbg !965
  store i64 %261, i64* %21, align 8, !dbg !966
  %262 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !967
  %263 = load i32, i32* %13, align 4, !dbg !968
  %264 = sext i32 %263 to i64, !dbg !967
  %265 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %262, i64 %264, !dbg !967
  %266 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %265, i32 0, i32 0, !dbg !969
  store i64 %261, i64* %266, align 8, !dbg !970
  %267 = load i8*, i8** %22, align 8, !dbg !971
  %268 = icmp ne i8* %267, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !973
  %269 = load i32, i32* @x.17
  %270 = load i32, i32* @y.18
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart285, label %originalBB77alteredBB

originalBBpart285:                                ; preds = %originalBB77
  br i1 %268, label %277, label %295, !dbg !974

277:                                              ; preds = %originalBBpart285
  %278 = load i32, i32* @x.17
  %279 = load i32, i32* @y.18
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %277, %originalBB87alteredBB
  %286 = load i8*, i8** %22, align 8, !dbg !975
  call void @free(i8* %286) #10, !dbg !976
  %287 = load i32, i32* @x.17
  %288 = load i32, i32* @y.18
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br label %295, !dbg !976

295:                                              ; preds = %originalBBpart289, %originalBBpart285
  %296 = load i64, i64* %21, align 8, !dbg !977
  %297 = call noalias i8* @xcharalloc(i64 %296), !dbg !978
  store i8* %297, i8** %22, align 8, !dbg !979
  %298 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !980
  %299 = load i32, i32* %13, align 4, !dbg !981
  %300 = sext i32 %299 to i64, !dbg !980
  %301 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %298, i64 %300, !dbg !980
  %302 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %301, i32 0, i32 1, !dbg !982
  store i8* %297, i8** %302, align 8, !dbg !983
  %303 = load i8*, i8** %22, align 8, !dbg !984
  %304 = load i64, i64* %21, align 8, !dbg !985
  %305 = load i8*, i8** %14, align 8, !dbg !986
  %306 = load i64, i64* %15, align 8, !dbg !987
  %307 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !988
  %308 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %307, i32 0, i32 0, !dbg !989
  %309 = load i32, i32* %308, align 8, !dbg !989
  %310 = load i32, i32* %23, align 4, !dbg !990
  %311 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !991
  %312 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %311, i32 0, i32 2, !dbg !992
  %313 = getelementptr inbounds [8 x i32], [8 x i32]* %312, i64 0, i64 0, !dbg !991
  %314 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !993
  %315 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %314, i32 0, i32 3, !dbg !994
  %316 = load i8*, i8** %315, align 8, !dbg !994
  %317 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !995
  %318 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %317, i32 0, i32 4, !dbg !996
  %319 = load i8*, i8** %318, align 8, !dbg !996
  %320 = call i64 @quotearg_buffer_restyled(i8* %303, i64 %304, i8* %305, i64 %306, i32 %309, i32 %310, i32* %313, i8* %316, i8* %319), !dbg !997
  br label %321, !dbg !998

321:                                              ; preds = %295, %originalBBpart275
  %322 = load i32, i32* %17, align 4, !dbg !999
  %323 = call i32* @__errno_location() #14, !dbg !1000
  store i32 %322, i32* %323, align 4, !dbg !1001
  %324 = load i8*, i8** %22, align 8, !dbg !1002
  ret i8* %324, !dbg !1003

originalBBalteredBB:                              ; preds = %originalBB, %4
  %325 = alloca i32, align 4
  %326 = alloca i8*, align 8
  %327 = alloca i64, align 8
  %328 = alloca %struct.quoting_options*, align 8
  %329 = alloca i32, align 4
  %330 = alloca %struct.slotvec*, align 8
  %331 = alloca i8, align 1
  %332 = alloca i32, align 4
  %333 = alloca i64, align 8
  %334 = alloca i8*, align 8
  %335 = alloca i32, align 4
  %336 = alloca i64, align 8
  store i32 %0, i32* %325, align 4
  call void @llvm.dbg.declare(metadata i32* %325, metadata !1004, metadata !DIExpression()), !dbg !861
  store i8* %1, i8** %326, align 8
  call void @llvm.dbg.declare(metadata i8** %326, metadata !1040, metadata !DIExpression()), !dbg !863
  store i64 %2, i64* %327, align 8
  call void @llvm.dbg.declare(metadata i64* %327, metadata !1041, metadata !DIExpression()), !dbg !865
  store %struct.quoting_options* %3, %struct.quoting_options** %328, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %328, metadata !1042, metadata !DIExpression()), !dbg !867
  call void @llvm.dbg.declare(metadata i32* %329, metadata !1043, metadata !DIExpression()), !dbg !869
  %337 = call i32* @__errno_location() #14, !dbg !870
  %338 = load i32, i32* %337, align 4, !dbg !870
  store i32 %338, i32* %329, align 4, !dbg !869
  call void @llvm.dbg.declare(metadata %struct.slotvec** %330, metadata !1044, metadata !DIExpression()), !dbg !872
  %339 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !873
  store %struct.slotvec* %339, %struct.slotvec** %330, align 8, !dbg !872
  %340 = load i32, i32* %325, align 4, !dbg !874
  %341 = icmp slt i32 %340, 0, !dbg !876
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  call void @abort() #12, !dbg !878
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %342 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !887
  %343 = icmp eq %struct.slotvec* %342, @slotvec0, !dbg !888
  %344 = zext i1 %343 to i8, !dbg !886
  store i8 %344, i8* %19, align 1, !dbg !886
  call void @llvm.dbg.declare(metadata !11, metadata !1045, metadata !DIExpression()), !dbg !890
  store i32 2147483646, i32* %20, align 4, !dbg !890
  %345 = load i32, i32* %20, align 4, !dbg !891
  %346 = load i32, i32* %13, align 4, !dbg !893
  %347 = icmp slt i32 %345, %346, !dbg !894
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  call void @xalloc_die() #15, !dbg !896
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %99
  %348 = load i8, i8* %19, align 1, !dbg !897
  %349 = trunc i8 %348 to i1, !dbg !897
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %350 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !898
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %148
  %351 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !909
  %352 = bitcast %struct.slotvec* %351 to i8*, !dbg !910
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %352, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !910
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %167
  %353 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !912
  %354 = load i32, i32* @nslots, align 4, !dbg !913
  %355 = sext i32 %354 to i64, !dbg !914
  %356 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %353, i64 %355, !dbg !914
  %357 = bitcast %struct.slotvec* %356 to i8*, !dbg !915
  %358 = load i32, i32* %13, align 4, !dbg !916
  %_ = shl i32 %358, 1
  %_27 = sub i32 0, %358
  %gen = add i32 %_27, 1
  %_28 = shl i32 %358, 1
  %_29 = sub i32 %358, 1
  %gen30 = mul i32 %_29, 1
  %_31 = sub i32 0, %358
  %gen32 = add i32 %_31, 1
  %_33 = sub i32 %358, 1
  %gen34 = mul i32 %_33, 1
  %_35 = shl i32 %358, 1
  %_36 = sub i32 %358, 1
  %gen37 = mul i32 %_36, 1
  %359 = add nsw i32 %358, 1, !dbg !917
  %360 = load i32, i32* @nslots, align 4, !dbg !918
  %_38 = shl i32 %359, %360
  %_39 = sub i32 0, %359
  %gen40 = add i32 %_39, %360
  %_41 = sub i32 %359, %360
  %gen42 = mul i32 %_41, %360
  %_43 = shl i32 %359, %360
  %_44 = shl i32 %359, %360
  %_45 = sub i32 0, %359
  %gen46 = add i32 %_45, %360
  %_47 = sub i32 0, %359
  %gen48 = add i32 %_47, %360
  %361 = sub nsw i32 %359, %360, !dbg !919
  %362 = sext i32 %361 to i64, !dbg !920
  %_49 = shl i64 %362, 16
  %_50 = shl i64 %362, 16
  %_51 = shl i64 %362, 16
  %_52 = sub i64 %362, 16
  %gen53 = mul i64 %_52, 16
  %_54 = sub i64 %362, 16
  %gen55 = mul i64 %_54, 16
  %_56 = sub i64 0, %362
  %gen57 = add i64 %_56, 16
  %363 = mul i64 %362, 16, !dbg !921
  call void @llvm.memset.p0i8.i64(i8* align 8 %357, i8 0, i64 %363, i1 false), !dbg !915
  %364 = load i32, i32* %13, align 4, !dbg !922
  %_58 = sub i32 %364, 1
  %gen59 = mul i32 %_58, 1
  %_60 = sub i32 %364, 1
  %gen61 = mul i32 %_60, 1
  %_62 = sub i32 %364, 1
  %gen63 = mul i32 %_62, 1
  %365 = add nsw i32 %364, 1, !dbg !923
  store i32 %365, i32* @nslots, align 4, !dbg !924
  br label %originalBB26

originalBB67alteredBB:                            ; preds = %originalBB67, %197
  %366 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !929
  %367 = load i32, i32* %13, align 4, !dbg !930
  %368 = sext i32 %367 to i64, !dbg !929
  %369 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %366, i64 %368, !dbg !929
  %370 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %369, i32 0, i32 0, !dbg !931
  %371 = load i64, i64* %370, align 8, !dbg !931
  store i64 %371, i64* %21, align 8, !dbg !928
  call void @llvm.dbg.declare(metadata !11, metadata !1083, metadata !DIExpression()), !dbg !933
  %372 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !934
  %373 = load i32, i32* %13, align 4, !dbg !935
  %374 = sext i32 %373 to i64, !dbg !934
  %375 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %372, i64 %374, !dbg !934
  %376 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %375, i32 0, i32 1, !dbg !936
  %377 = load i8*, i8** %376, align 8, !dbg !936
  store i8* %377, i8** %22, align 8, !dbg !933
  call void @llvm.dbg.declare(metadata !11, metadata !1120, metadata !DIExpression()), !dbg !938
  %378 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !939
  %379 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %378, i32 0, i32 1, !dbg !940
  %380 = load i32, i32* %379, align 4, !dbg !940
  %_68 = sub i32 0, %380
  %gen69 = add i32 %_68, 1
  %_70 = shl i32 %380, 1
  %_71 = shl i32 %380, 1
  %_72 = sub i32 0, %380
  %gen73 = add i32 %_72, 1
  %381 = or i32 %380, 1, !dbg !941
  store i32 %381, i32* %23, align 4, !dbg !938
  call void @llvm.dbg.declare(metadata !11, metadata !1121, metadata !DIExpression()), !dbg !943
  %382 = load i8*, i8** %22, align 8, !dbg !944
  %383 = load i64, i64* %21, align 8, !dbg !945
  %384 = load i8*, i8** %14, align 8, !dbg !946
  %385 = load i64, i64* %15, align 8, !dbg !947
  %386 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !948
  %387 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %386, i32 0, i32 0, !dbg !949
  %388 = load i32, i32* %387, align 8, !dbg !949
  %389 = load i32, i32* %23, align 4, !dbg !950
  %390 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !951
  %391 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %390, i32 0, i32 2, !dbg !952
  %392 = getelementptr inbounds [8 x i32], [8 x i32]* %391, i64 0, i64 0, !dbg !951
  %393 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !953
  %394 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %393, i32 0, i32 3, !dbg !954
  %395 = load i8*, i8** %394, align 8, !dbg !954
  %396 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !955
  %397 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %396, i32 0, i32 4, !dbg !956
  %398 = load i8*, i8** %397, align 8, !dbg !956
  %399 = call i64 @quotearg_buffer_restyled(i8* %382, i64 %383, i8* %384, i64 %385, i32 %388, i32 %389, i32* %392, i8* %395, i8* %398), !dbg !957
  store i64 %399, i64* %24, align 8, !dbg !943
  %400 = load i64, i64* %21, align 8, !dbg !958
  %401 = load i64, i64* %24, align 8, !dbg !960
  %402 = icmp ule i64 %400, %401, !dbg !961
  br label %originalBB67

originalBB77alteredBB:                            ; preds = %originalBB77, %251
  %403 = load i64, i64* %24, align 8, !dbg !963
  %_78 = sub i64 %403, 1
  %gen79 = mul i64 %_78, 1
  %_80 = shl i64 %403, 1
  %_81 = shl i64 %403, 1
  %_82 = sub i64 %403, 1
  %gen83 = mul i64 %_82, 1
  %404 = add i64 %403, 1, !dbg !965
  store i64 %404, i64* %21, align 8, !dbg !966
  %405 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !967
  %406 = load i32, i32* %13, align 4, !dbg !968
  %407 = sext i32 %406 to i64, !dbg !967
  %408 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %405, i64 %407, !dbg !967
  %409 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %408, i32 0, i32 0, !dbg !969
  store i64 %404, i64* %409, align 8, !dbg !970
  %410 = load i8*, i8** %22, align 8, !dbg !971
  %411 = icmp ne i8* %410, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !973
  br label %originalBB77

originalBB87alteredBB:                            ; preds = %originalBB87, %277
  %412 = load i8*, i8** %22, align 8, !dbg !975
  call void @free(i8* %412) #10, !dbg !976
  br label %originalBB87
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !1122 {
  %10 = load i32, i32* @x.19
  %11 = load i32, i32* @y.20
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1127, metadata !DIExpression()), !dbg !1128
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1129, metadata !DIExpression()), !dbg !1130
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1131, metadata !DIExpression()), !dbg !1132
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1133, metadata !DIExpression()), !dbg !1134
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1135, metadata !DIExpression()), !dbg !1136
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1137, metadata !DIExpression()), !dbg !1138
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1139, metadata !DIExpression()), !dbg !1140
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1141, metadata !DIExpression()), !dbg !1142
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1143, metadata !DIExpression()), !dbg !1144
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1145, metadata !DIExpression()), !dbg !1146
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1147, metadata !DIExpression()), !dbg !1148
  store i64 0, i64* %29, align 8, !dbg !1148
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1149, metadata !DIExpression()), !dbg !1150
  store i64 0, i64* %30, align 8, !dbg !1150
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1151, metadata !DIExpression()), !dbg !1152
  store i8* null, i8** %31, align 8, !dbg !1152
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1153, metadata !DIExpression()), !dbg !1154
  store i64 0, i64* %32, align 8, !dbg !1154
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1155, metadata !DIExpression()), !dbg !1156
  store i8 0, i8* %33, align 1, !dbg !1156
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1157, metadata !DIExpression()), !dbg !1158
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1159
  %52 = icmp eq i64 %51, 1, !dbg !1160
  %53 = zext i1 %52 to i8, !dbg !1158
  store i8 %53, i8* %34, align 1, !dbg !1158
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1161, metadata !DIExpression()), !dbg !1162
  %54 = load i32, i32* %24, align 4, !dbg !1163
  %55 = and i32 %54, 2, !dbg !1164
  %56 = icmp ne i32 %55, 0, !dbg !1165
  %57 = zext i1 %56 to i8, !dbg !1162
  store i8 %57, i8* %35, align 1, !dbg !1162
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1166, metadata !DIExpression()), !dbg !1167
  store i8 0, i8* %36, align 1, !dbg !1167
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1168, metadata !DIExpression()), !dbg !1169
  store i8 0, i8* %37, align 1, !dbg !1169
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1170, metadata !DIExpression()), !dbg !1171
  store i8 1, i8* %38, align 1, !dbg !1171
  %58 = load i32, i32* @x.19
  %59 = load i32, i32* @y.20
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1172

66:                                               ; preds = %originalBBpart21513, %originalBBpart2
  call void @llvm.dbg.label(metadata !1173), !dbg !1174
  %67 = load i32, i32* @x.19
  %68 = load i32, i32* @y.20
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %66, %originalBB7alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !1175
  %76 = load i32, i32* @x.19
  %77 = load i32, i32* @y.20
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart29, label %originalBB7alteredBB

originalBBpart29:                                 ; preds = %originalBB7
  switch i32 %75, label %600 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %182
    i32 8, label %199
    i32 9, label %199
    i32 10, label %199
    i32 3, label %415
    i32 1, label %432
    i32 4, label %449
    i32 2, label %486
    i32 0, label %583
  ], !dbg !1176

84:                                               ; preds = %originalBBpart29
  %85 = load i32, i32* @x.19
  %86 = load i32, i32* @y.20
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %84, %originalBB11alteredBB
  store i32 5, i32* %23, align 4, !dbg !1177
  store i8 1, i8* %35, align 1, !dbg !1179
  %93 = load i32, i32* @x.19
  %94 = load i32, i32* @y.20
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %101, !dbg !1180

101:                                              ; preds = %originalBBpart213, %originalBBpart29
  %102 = load i32, i32* @x.19
  %103 = load i32, i32* @y.20
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %101, %originalBB15alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !1181
  %111 = trunc i8 %110 to i1, !dbg !1181
  %112 = load i32, i32* @x.19
  %113 = load i32, i32* @y.20
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %111, label %165, label %120, !dbg !1183

120:                                              ; preds = %originalBBpart217
  br label %121, !dbg !1184

121:                                              ; preds = %120
  %122 = load i32, i32* @x.19
  %123 = load i32, i32* @y.20
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %121, %originalBB19alteredBB
  %130 = load i64, i64* %29, align 8, !dbg !1185
  %131 = load i64, i64* %20, align 8, !dbg !1185
  %132 = icmp ult i64 %130, %131, !dbg !1185
  %133 = load i32, i32* @x.19
  %134 = load i32, i32* @y.20
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %132, label %141, label %145, !dbg !1188

141:                                              ; preds = %originalBBpart221
  %142 = load i8*, i8** %19, align 8, !dbg !1185
  %143 = load i64, i64* %29, align 8, !dbg !1185
  %144 = getelementptr inbounds i8, i8* %142, i64 %143, !dbg !1185
  store i8 34, i8* %144, align 1, !dbg !1185
  br label %145, !dbg !1185

145:                                              ; preds = %141, %originalBBpart221
  %146 = load i64, i64* %29, align 8, !dbg !1188
  %147 = add i64 %146, 1, !dbg !1188
  store i64 %147, i64* %29, align 8, !dbg !1188
  br label %148, !dbg !1188

148:                                              ; preds = %145
  %149 = load i32, i32* @x.19
  %150 = load i32, i32* @y.20
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %148, %originalBB23alteredBB
  %157 = load i32, i32* @x.19
  %158 = load i32, i32* @y.20
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %165, !dbg !1188

165:                                              ; preds = %originalBBpart225, %originalBBpart217
  %166 = load i32, i32* @x.19
  %167 = load i32, i32* @y.20
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %165, %originalBB27alteredBB
  store i8 1, i8* %33, align 1, !dbg !1189
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8** %31, align 8, !dbg !1190
  store i64 1, i64* %32, align 8, !dbg !1191
  %174 = load i32, i32* @x.19
  %175 = load i32, i32* @y.20
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %617, !dbg !1192

182:                                              ; preds = %originalBBpart29
  %183 = load i32, i32* @x.19
  %184 = load i32, i32* @y.20
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %182, %originalBB31alteredBB
  store i8 1, i8* %33, align 1, !dbg !1193
  store i8 0, i8* %35, align 1, !dbg !1194
  %191 = load i32, i32* @x.19
  %192 = load i32, i32* @y.20
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br label %617, !dbg !1195

199:                                              ; preds = %originalBBpart29, %originalBBpart29, %originalBBpart29
  %200 = load i32, i32* @x.19
  %201 = load i32, i32* @y.20
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %199, %originalBB35alteredBB
  %208 = load i32, i32* %23, align 4, !dbg !1196
  %209 = icmp ne i32 %208, 10, !dbg !1199
  %210 = load i32, i32* @x.19
  %211 = load i32, i32* @y.20
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br i1 %209, label %218, label %239, !dbg !1200

218:                                              ; preds = %originalBBpart237
  %219 = load i32, i32* @x.19
  %220 = load i32, i32* @y.20
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %218, %originalBB39alteredBB
  %227 = load i32, i32* %23, align 4, !dbg !1201
  %228 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.63, i64 0, i64 0), i32 %227), !dbg !1203
  store i8* %228, i8** %26, align 8, !dbg !1204
  %229 = load i32, i32* %23, align 4, !dbg !1205
  %230 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i32 %229), !dbg !1206
  store i8* %230, i8** %27, align 8, !dbg !1207
  %231 = load i32, i32* @x.19
  %232 = load i32, i32* @y.20
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br label %239, !dbg !1208

239:                                              ; preds = %originalBBpart241, %originalBBpart237
  %240 = load i32, i32* @x.19
  %241 = load i32, i32* @y.20
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %239, %originalBB43alteredBB
  %248 = load i8, i8* %35, align 1, !dbg !1209
  %249 = trunc i8 %248 to i1, !dbg !1209
  %250 = load i32, i32* @x.19
  %251 = load i32, i32* @y.20
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br i1 %249, label %395, label %258, !dbg !1211

258:                                              ; preds = %originalBBpart245
  %259 = load i8*, i8** %26, align 8, !dbg !1212
  store i8* %259, i8** %31, align 8, !dbg !1214
  br label %260, !dbg !1215

260:                                              ; preds = %originalBBpart279, %258
  %261 = load i8*, i8** %31, align 8, !dbg !1216
  %262 = load i8, i8* %261, align 1, !dbg !1218
  %263 = icmp ne i8 %262, 0, !dbg !1219
  br i1 %263, label %264, label %378, !dbg !1219

264:                                              ; preds = %260
  %265 = load i32, i32* @x.19
  %266 = load i32, i32* @y.20
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %264, %originalBB47alteredBB
  %273 = load i32, i32* @x.19
  %274 = load i32, i32* @y.20
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %281, !dbg !1220

281:                                              ; preds = %originalBBpart249
  %282 = load i32, i32* @x.19
  %283 = load i32, i32* @y.20
  %284 = sub i32 %282, 1
  %285 = mul i32 %282, %284
  %286 = urem i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %287, %288
  br i1 %289, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %281, %originalBB51alteredBB
  %290 = load i64, i64* %29, align 8, !dbg !1221
  %291 = load i64, i64* %20, align 8, !dbg !1221
  %292 = icmp ult i64 %290, %291, !dbg !1221
  %293 = load i32, i32* @x.19
  %294 = load i32, i32* @y.20
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br i1 %292, label %301, label %323, !dbg !1224

301:                                              ; preds = %originalBBpart253
  %302 = load i32, i32* @x.19
  %303 = load i32, i32* @y.20
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %301, %originalBB55alteredBB
  %310 = load i8*, i8** %31, align 8, !dbg !1221
  %311 = load i8, i8* %310, align 1, !dbg !1221
  %312 = load i8*, i8** %19, align 8, !dbg !1221
  %313 = load i64, i64* %29, align 8, !dbg !1221
  %314 = getelementptr inbounds i8, i8* %312, i64 %313, !dbg !1221
  store i8 %311, i8* %314, align 1, !dbg !1221
  %315 = load i32, i32* @x.19
  %316 = load i32, i32* @y.20
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br label %323, !dbg !1221

323:                                              ; preds = %originalBBpart257, %originalBBpart253
  %324 = load i32, i32* @x.19
  %325 = load i32, i32* @y.20
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %323, %originalBB59alteredBB
  %332 = load i64, i64* %29, align 8, !dbg !1224
  %333 = add i64 %332, 1, !dbg !1224
  store i64 %333, i64* %29, align 8, !dbg !1224
  %334 = load i32, i32* @x.19
  %335 = load i32, i32* @y.20
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBBpart271, label %originalBB59alteredBB

originalBBpart271:                                ; preds = %originalBB59
  br label %342, !dbg !1224

342:                                              ; preds = %originalBBpart271
  %343 = load i32, i32* @x.19
  %344 = load i32, i32* @y.20
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %342, %originalBB73alteredBB
  %351 = load i32, i32* @x.19
  %352 = load i32, i32* @y.20
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br label %359, !dbg !1224

359:                                              ; preds = %originalBBpart275
  %360 = load i32, i32* @x.19
  %361 = load i32, i32* @y.20
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %359, %originalBB77alteredBB
  %368 = load i8*, i8** %31, align 8, !dbg !1225
  %369 = getelementptr inbounds i8, i8* %368, i32 1, !dbg !1225
  store i8* %369, i8** %31, align 8, !dbg !1225
  %370 = load i32, i32* @x.19
  %371 = load i32, i32* @y.20
  %372 = sub i32 %370, 1
  %373 = mul i32 %370, %372
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %375, %376
  br i1 %377, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br label %260, !dbg !1226, !llvm.loop !1227

378:                                              ; preds = %260
  %379 = load i32, i32* @x.19
  %380 = load i32, i32* @y.20
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %378, %originalBB81alteredBB
  %387 = load i32, i32* @x.19
  %388 = load i32, i32* @y.20
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %395, !dbg !1228

395:                                              ; preds = %originalBBpart283, %originalBBpart245
  %396 = load i32, i32* @x.19
  %397 = load i32, i32* @y.20
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %395, %originalBB85alteredBB
  store i8 1, i8* %33, align 1, !dbg !1229
  %404 = load i8*, i8** %27, align 8, !dbg !1230
  store i8* %404, i8** %31, align 8, !dbg !1231
  %405 = load i8*, i8** %31, align 8, !dbg !1232
  %406 = call i64 @strlen(i8* %405) #13, !dbg !1233
  store i64 %406, i64* %32, align 8, !dbg !1234
  %407 = load i32, i32* @x.19
  %408 = load i32, i32* @y.20
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br label %617, !dbg !1235

415:                                              ; preds = %originalBBpart29
  %416 = load i32, i32* @x.19
  %417 = load i32, i32* @y.20
  %418 = sub i32 %416, 1
  %419 = mul i32 %416, %418
  %420 = urem i32 %419, 2
  %421 = icmp eq i32 %420, 0
  %422 = icmp slt i32 %417, 10
  %423 = or i1 %421, %422
  br i1 %423, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %415, %originalBB89alteredBB
  store i8 1, i8* %33, align 1, !dbg !1236
  %424 = load i32, i32* @x.19
  %425 = load i32, i32* @y.20
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %432, !dbg !1237

432:                                              ; preds = %originalBBpart291, %originalBBpart29
  %433 = load i32, i32* @x.19
  %434 = load i32, i32* @y.20
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %432, %originalBB93alteredBB
  store i8 1, i8* %35, align 1, !dbg !1238
  %441 = load i32, i32* @x.19
  %442 = load i32, i32* @y.20
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %449, !dbg !1239

449:                                              ; preds = %originalBBpart295, %originalBBpart29
  %450 = load i8, i8* %35, align 1, !dbg !1240
  %451 = trunc i8 %450 to i1, !dbg !1240
  br i1 %451, label %469, label %452, !dbg !1242

452:                                              ; preds = %449
  %453 = load i32, i32* @x.19
  %454 = load i32, i32* @y.20
  %455 = sub i32 %453, 1
  %456 = mul i32 %453, %455
  %457 = urem i32 %456, 2
  %458 = icmp eq i32 %457, 0
  %459 = icmp slt i32 %454, 10
  %460 = or i1 %458, %459
  br i1 %460, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %452, %originalBB97alteredBB
  store i8 1, i8* %33, align 1, !dbg !1243
  %461 = load i32, i32* @x.19
  %462 = load i32, i32* @y.20
  %463 = sub i32 %461, 1
  %464 = mul i32 %461, %463
  %465 = urem i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %466, %467
  br i1 %468, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %469, !dbg !1244

469:                                              ; preds = %originalBBpart299, %449
  %470 = load i32, i32* @x.19
  %471 = load i32, i32* @y.20
  %472 = sub i32 %470, 1
  %473 = mul i32 %470, %472
  %474 = urem i32 %473, 2
  %475 = icmp eq i32 %474, 0
  %476 = icmp slt i32 %471, 10
  %477 = or i1 %475, %476
  br i1 %477, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %469, %originalBB101alteredBB
  %478 = load i32, i32* @x.19
  %479 = load i32, i32* @y.20
  %480 = sub i32 %478, 1
  %481 = mul i32 %478, %480
  %482 = urem i32 %481, 2
  %483 = icmp eq i32 %482, 0
  %484 = icmp slt i32 %479, 10
  %485 = or i1 %483, %484
  br i1 %485, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br label %486, !dbg !1245

486:                                              ; preds = %originalBBpart2103, %originalBBpart29
  %487 = load i32, i32* @x.19
  %488 = load i32, i32* @y.20
  %489 = sub i32 %487, 1
  %490 = mul i32 %487, %489
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %492, %493
  br i1 %494, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %486, %originalBB105alteredBB
  store i32 2, i32* %23, align 4, !dbg !1246
  %495 = load i8, i8* %35, align 1, !dbg !1247
  %496 = trunc i8 %495 to i1, !dbg !1247
  %497 = load i32, i32* @x.19
  %498 = load i32, i32* @y.20
  %499 = sub i32 %497, 1
  %500 = mul i32 %497, %499
  %501 = urem i32 %500, 2
  %502 = icmp eq i32 %501, 0
  %503 = icmp slt i32 %498, 10
  %504 = or i1 %502, %503
  br i1 %504, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br i1 %496, label %566, label %505, !dbg !1249

505:                                              ; preds = %originalBBpart2107
  %506 = load i32, i32* @x.19
  %507 = load i32, i32* @y.20
  %508 = sub i32 %506, 1
  %509 = mul i32 %506, %508
  %510 = urem i32 %509, 2
  %511 = icmp eq i32 %510, 0
  %512 = icmp slt i32 %507, 10
  %513 = or i1 %511, %512
  br i1 %513, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %505, %originalBB109alteredBB
  %514 = load i32, i32* @x.19
  %515 = load i32, i32* @y.20
  %516 = sub i32 %514, 1
  %517 = mul i32 %514, %516
  %518 = urem i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %519, %520
  br i1 %521, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %522, !dbg !1250

522:                                              ; preds = %originalBBpart2111
  %523 = load i32, i32* @x.19
  %524 = load i32, i32* @y.20
  %525 = sub i32 %523, 1
  %526 = mul i32 %523, %525
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %524, 10
  %530 = or i1 %528, %529
  br i1 %530, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %522, %originalBB113alteredBB
  %531 = load i64, i64* %29, align 8, !dbg !1251
  %532 = load i64, i64* %20, align 8, !dbg !1251
  %533 = icmp ult i64 %531, %532, !dbg !1251
  %534 = load i32, i32* @x.19
  %535 = load i32, i32* @y.20
  %536 = sub i32 %534, 1
  %537 = mul i32 %534, %536
  %538 = urem i32 %537, 2
  %539 = icmp eq i32 %538, 0
  %540 = icmp slt i32 %535, 10
  %541 = or i1 %539, %540
  br i1 %541, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br i1 %533, label %542, label %546, !dbg !1254

542:                                              ; preds = %originalBBpart2115
  %543 = load i8*, i8** %19, align 8, !dbg !1251
  %544 = load i64, i64* %29, align 8, !dbg !1251
  %545 = getelementptr inbounds i8, i8* %543, i64 %544, !dbg !1251
  store i8 39, i8* %545, align 1, !dbg !1251
  br label %546, !dbg !1251

546:                                              ; preds = %542, %originalBBpart2115
  %547 = load i32, i32* @x.19
  %548 = load i32, i32* @y.20
  %549 = sub i32 %547, 1
  %550 = mul i32 %547, %549
  %551 = urem i32 %550, 2
  %552 = icmp eq i32 %551, 0
  %553 = icmp slt i32 %548, 10
  %554 = or i1 %552, %553
  br i1 %554, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %546, %originalBB117alteredBB
  %555 = load i64, i64* %29, align 8, !dbg !1254
  %556 = add i64 %555, 1, !dbg !1254
  store i64 %556, i64* %29, align 8, !dbg !1254
  %557 = load i32, i32* @x.19
  %558 = load i32, i32* @y.20
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2130, label %originalBB117alteredBB

originalBBpart2130:                               ; preds = %originalBB117
  br label %565, !dbg !1254

565:                                              ; preds = %originalBBpart2130
  br label %566, !dbg !1254

566:                                              ; preds = %565, %originalBBpart2107
  %567 = load i32, i32* @x.19
  %568 = load i32, i32* @y.20
  %569 = sub i32 %567, 1
  %570 = mul i32 %567, %569
  %571 = urem i32 %570, 2
  %572 = icmp eq i32 %571, 0
  %573 = icmp slt i32 %568, 10
  %574 = or i1 %572, %573
  br i1 %574, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %566, %originalBB132alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i8** %31, align 8, !dbg !1255
  store i64 1, i64* %32, align 8, !dbg !1256
  %575 = load i32, i32* @x.19
  %576 = load i32, i32* @y.20
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  br label %617, !dbg !1257

583:                                              ; preds = %originalBBpart29
  %584 = load i32, i32* @x.19
  %585 = load i32, i32* @y.20
  %586 = sub i32 %584, 1
  %587 = mul i32 %584, %586
  %588 = urem i32 %587, 2
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %589, %590
  br i1 %591, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %583, %originalBB136alteredBB
  store i8 0, i8* %35, align 1, !dbg !1258
  %592 = load i32, i32* @x.19
  %593 = load i32, i32* @y.20
  %594 = sub i32 %592, 1
  %595 = mul i32 %592, %594
  %596 = urem i32 %595, 2
  %597 = icmp eq i32 %596, 0
  %598 = icmp slt i32 %593, 10
  %599 = or i1 %597, %598
  br i1 %599, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br label %617, !dbg !1259

600:                                              ; preds = %originalBBpart29
  %601 = load i32, i32* @x.19
  %602 = load i32, i32* @y.20
  %603 = sub i32 %601, 1
  %604 = mul i32 %601, %603
  %605 = urem i32 %604, 2
  %606 = icmp eq i32 %605, 0
  %607 = icmp slt i32 %602, 10
  %608 = or i1 %606, %607
  br i1 %608, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %600, %originalBB140alteredBB
  call void @abort() #12, !dbg !1260
  %609 = load i32, i32* @x.19
  %610 = load i32, i32* @y.20
  %611 = sub i32 %609, 1
  %612 = mul i32 %609, %611
  %613 = urem i32 %612, 2
  %614 = icmp eq i32 %613, 0
  %615 = icmp slt i32 %610, 10
  %616 = or i1 %614, %615
  br i1 %616, label %originalBBpart2142, label %originalBB140alteredBB

originalBBpart2142:                               ; preds = %originalBB140
  unreachable, !dbg !1260

617:                                              ; preds = %originalBBpart2138, %originalBBpart2134, %originalBBpart287, %originalBBpart233, %originalBBpart229
  %618 = load i32, i32* @x.19
  %619 = load i32, i32* @y.20
  %620 = sub i32 %618, 1
  %621 = mul i32 %618, %620
  %622 = urem i32 %621, 2
  %623 = icmp eq i32 %622, 0
  %624 = icmp slt i32 %619, 10
  %625 = or i1 %623, %624
  br i1 %625, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %617, %originalBB144alteredBB
  store i64 0, i64* %28, align 8, !dbg !1261
  %626 = load i32, i32* @x.19
  %627 = load i32, i32* @y.20
  %628 = sub i32 %626, 1
  %629 = mul i32 %626, %628
  %630 = urem i32 %629, 2
  %631 = icmp eq i32 %630, 0
  %632 = icmp slt i32 %627, 10
  %633 = or i1 %631, %632
  br i1 %633, label %originalBBpart2146, label %originalBB144alteredBB

originalBBpart2146:                               ; preds = %originalBB144
  br label %634, !dbg !1263

634:                                              ; preds = %originalBBpart21469, %originalBBpart2146
  %635 = load i32, i32* @x.19
  %636 = load i32, i32* @y.20
  %637 = sub i32 %635, 1
  %638 = mul i32 %635, %637
  %639 = urem i32 %638, 2
  %640 = icmp eq i32 %639, 0
  %641 = icmp slt i32 %636, 10
  %642 = or i1 %640, %641
  br i1 %642, label %originalBB148, label %originalBB148alteredBB

originalBB148:                                    ; preds = %634, %originalBB148alteredBB
  %643 = load i64, i64* %22, align 8, !dbg !1264
  %644 = icmp eq i64 %643, -1, !dbg !1266
  %645 = load i32, i32* @x.19
  %646 = load i32, i32* @y.20
  %647 = sub i32 %645, 1
  %648 = mul i32 %645, %647
  %649 = urem i32 %648, 2
  %650 = icmp eq i32 %649, 0
  %651 = icmp slt i32 %646, 10
  %652 = or i1 %650, %651
  br i1 %652, label %originalBBpart2150, label %originalBB148alteredBB

originalBBpart2150:                               ; preds = %originalBB148
  br i1 %644, label %653, label %661, !dbg !1264

653:                                              ; preds = %originalBBpart2150
  %654 = load i8*, i8** %21, align 8, !dbg !1267
  %655 = load i64, i64* %28, align 8, !dbg !1268
  %656 = getelementptr inbounds i8, i8* %654, i64 %655, !dbg !1267
  %657 = load i8, i8* %656, align 1, !dbg !1267
  %658 = sext i8 %657 to i32, !dbg !1267
  %659 = icmp eq i32 %658, 0, !dbg !1269
  %660 = zext i1 %659 to i32, !dbg !1269
  br label %666, !dbg !1264

661:                                              ; preds = %originalBBpart2150
  %662 = load i64, i64* %28, align 8, !dbg !1270
  %663 = load i64, i64* %22, align 8, !dbg !1271
  %664 = icmp eq i64 %662, %663, !dbg !1272
  %665 = zext i1 %664 to i32, !dbg !1272
  br label %666, !dbg !1264

666:                                              ; preds = %661, %653
  %667 = phi i32 [ %660, %653 ], [ %665, %661 ], !dbg !1264
  %668 = load i32, i32* @x.19
  %669 = load i32, i32* @y.20
  %670 = sub i32 %668, 1
  %671 = mul i32 %668, %670
  %672 = urem i32 %671, 2
  %673 = icmp eq i32 %672, 0
  %674 = icmp slt i32 %669, 10
  %675 = or i1 %673, %674
  br i1 %675, label %originalBB152, label %originalBB152alteredBB

originalBB152:                                    ; preds = %666, %originalBB152alteredBB
  %676 = icmp ne i32 %667, 0, !dbg !1273
  %677 = xor i1 %676, true, !dbg !1273
  %678 = load i32, i32* @x.19
  %679 = load i32, i32* @y.20
  %680 = sub i32 %678, 1
  %681 = mul i32 %678, %680
  %682 = urem i32 %681, 2
  %683 = icmp eq i32 %682, 0
  %684 = icmp slt i32 %679, 10
  %685 = or i1 %683, %684
  br i1 %685, label %originalBBpart2165, label %originalBB152alteredBB

originalBBpart2165:                               ; preds = %originalBB152
  br i1 %677, label %686, label %5388, !dbg !1274

686:                                              ; preds = %originalBBpart2165
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1275, metadata !DIExpression()), !dbg !1277
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1278, metadata !DIExpression()), !dbg !1279
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1280, metadata !DIExpression()), !dbg !1281
  %687 = load i32, i32* @x.19
  %688 = load i32, i32* @y.20
  %689 = sub i32 %687, 1
  %690 = mul i32 %687, %689
  %691 = urem i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = icmp slt i32 %688, 10
  %694 = or i1 %692, %693
  br i1 %694, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %686, %originalBB167alteredBB
  store i8 0, i8* %41, align 1, !dbg !1281
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1282, metadata !DIExpression()), !dbg !1283
  store i8 0, i8* %42, align 1, !dbg !1283
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1284, metadata !DIExpression()), !dbg !1285
  store i8 0, i8* %43, align 1, !dbg !1285
  %695 = load i8, i8* %33, align 1, !dbg !1286
  %696 = trunc i8 %695 to i1, !dbg !1286
  %697 = load i32, i32* @x.19
  %698 = load i32, i32* @y.20
  %699 = sub i32 %697, 1
  %700 = mul i32 %697, %699
  %701 = urem i32 %700, 2
  %702 = icmp eq i32 %701, 0
  %703 = icmp slt i32 %698, 10
  %704 = or i1 %702, %703
  br i1 %704, label %originalBBpart2169, label %originalBB167alteredBB

originalBBpart2169:                               ; preds = %originalBB167
  br i1 %696, label %705, label %885, !dbg !1288

705:                                              ; preds = %originalBBpart2169
  %706 = load i32, i32* @x.19
  %707 = load i32, i32* @y.20
  %708 = sub i32 %706, 1
  %709 = mul i32 %706, %708
  %710 = urem i32 %709, 2
  %711 = icmp eq i32 %710, 0
  %712 = icmp slt i32 %707, 10
  %713 = or i1 %711, %712
  br i1 %713, label %originalBB171, label %originalBB171alteredBB

originalBB171:                                    ; preds = %705, %originalBB171alteredBB
  %714 = load i32, i32* %23, align 4, !dbg !1289
  %715 = icmp ne i32 %714, 2, !dbg !1290
  %716 = load i32, i32* @x.19
  %717 = load i32, i32* @y.20
  %718 = sub i32 %716, 1
  %719 = mul i32 %716, %718
  %720 = urem i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = icmp slt i32 %717, 10
  %723 = or i1 %721, %722
  br i1 %723, label %originalBBpart2173, label %originalBB171alteredBB

originalBBpart2173:                               ; preds = %originalBB171
  br i1 %715, label %724, label %885, !dbg !1291

724:                                              ; preds = %originalBBpart2173
  %725 = load i32, i32* @x.19
  %726 = load i32, i32* @y.20
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBB175, label %originalBB175alteredBB

originalBB175:                                    ; preds = %724, %originalBB175alteredBB
  %733 = load i64, i64* %32, align 8, !dbg !1292
  %734 = icmp ne i64 %733, 0, !dbg !1292
  %735 = load i32, i32* @x.19
  %736 = load i32, i32* @y.20
  %737 = sub i32 %735, 1
  %738 = mul i32 %735, %737
  %739 = urem i32 %738, 2
  %740 = icmp eq i32 %739, 0
  %741 = icmp slt i32 %736, 10
  %742 = or i1 %740, %741
  br i1 %742, label %originalBBpart2177, label %originalBB175alteredBB

originalBBpart2177:                               ; preds = %originalBB175
  br i1 %734, label %743, label %885, !dbg !1293

743:                                              ; preds = %originalBBpart2177
  %744 = load i32, i32* @x.19
  %745 = load i32, i32* @y.20
  %746 = sub i32 %744, 1
  %747 = mul i32 %744, %746
  %748 = urem i32 %747, 2
  %749 = icmp eq i32 %748, 0
  %750 = icmp slt i32 %745, 10
  %751 = or i1 %749, %750
  br i1 %751, label %originalBB179, label %originalBB179alteredBB

originalBB179:                                    ; preds = %743, %originalBB179alteredBB
  %752 = load i64, i64* %28, align 8, !dbg !1294
  %753 = load i64, i64* %32, align 8, !dbg !1295
  %754 = add i64 %752, %753, !dbg !1296
  %755 = load i64, i64* %22, align 8, !dbg !1297
  %756 = icmp eq i64 %755, -1, !dbg !1298
  %757 = load i32, i32* @x.19
  %758 = load i32, i32* @y.20
  %759 = sub i32 %757, 1
  %760 = mul i32 %757, %759
  %761 = urem i32 %760, 2
  %762 = icmp eq i32 %761, 0
  %763 = icmp slt i32 %758, 10
  %764 = or i1 %762, %763
  br i1 %764, label %originalBBpart2190, label %originalBB179alteredBB

originalBBpart2190:                               ; preds = %originalBB179
  br i1 %756, label %765, label %803, !dbg !1299

765:                                              ; preds = %originalBBpart2190
  %766 = load i32, i32* @x.19
  %767 = load i32, i32* @y.20
  %768 = sub i32 %766, 1
  %769 = mul i32 %766, %768
  %770 = urem i32 %769, 2
  %771 = icmp eq i32 %770, 0
  %772 = icmp slt i32 %767, 10
  %773 = or i1 %771, %772
  br i1 %773, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %765, %originalBB192alteredBB
  %774 = load i64, i64* %32, align 8, !dbg !1300
  %775 = icmp ult i64 1, %774, !dbg !1301
  %776 = load i32, i32* @x.19
  %777 = load i32, i32* @y.20
  %778 = sub i32 %776, 1
  %779 = mul i32 %776, %778
  %780 = urem i32 %779, 2
  %781 = icmp eq i32 %780, 0
  %782 = icmp slt i32 %777, 10
  %783 = or i1 %781, %782
  br i1 %783, label %originalBBpart2194, label %originalBB192alteredBB

originalBBpart2194:                               ; preds = %originalBB192
  br i1 %775, label %784, label %803, !dbg !1297

784:                                              ; preds = %originalBBpart2194
  %785 = load i32, i32* @x.19
  %786 = load i32, i32* @y.20
  %787 = sub i32 %785, 1
  %788 = mul i32 %785, %787
  %789 = urem i32 %788, 2
  %790 = icmp eq i32 %789, 0
  %791 = icmp slt i32 %786, 10
  %792 = or i1 %790, %791
  br i1 %792, label %originalBB196, label %originalBB196alteredBB

originalBB196:                                    ; preds = %784, %originalBB196alteredBB
  %793 = load i8*, i8** %21, align 8, !dbg !1302
  %794 = call i64 @strlen(i8* %793) #13, !dbg !1303
  store i64 %794, i64* %22, align 8, !dbg !1304
  %795 = load i32, i32* @x.19
  %796 = load i32, i32* @y.20
  %797 = sub i32 %795, 1
  %798 = mul i32 %795, %797
  %799 = urem i32 %798, 2
  %800 = icmp eq i32 %799, 0
  %801 = icmp slt i32 %796, 10
  %802 = or i1 %800, %801
  br i1 %802, label %originalBBpart2198, label %originalBB196alteredBB

originalBBpart2198:                               ; preds = %originalBB196
  br label %805, !dbg !1297

803:                                              ; preds = %originalBBpart2194, %originalBBpart2190
  %804 = load i64, i64* %22, align 8, !dbg !1305
  br label %805, !dbg !1297

805:                                              ; preds = %803, %originalBBpart2198
  %806 = phi i64 [ %794, %originalBBpart2198 ], [ %804, %803 ], !dbg !1297
  %807 = load i32, i32* @x.19
  %808 = load i32, i32* @y.20
  %809 = sub i32 %807, 1
  %810 = mul i32 %807, %809
  %811 = urem i32 %810, 2
  %812 = icmp eq i32 %811, 0
  %813 = icmp slt i32 %808, 10
  %814 = or i1 %812, %813
  br i1 %814, label %originalBB200, label %originalBB200alteredBB

originalBB200:                                    ; preds = %805, %originalBB200alteredBB
  %815 = icmp ule i64 %754, %806, !dbg !1306
  %816 = load i32, i32* @x.19
  %817 = load i32, i32* @y.20
  %818 = sub i32 %816, 1
  %819 = mul i32 %816, %818
  %820 = urem i32 %819, 2
  %821 = icmp eq i32 %820, 0
  %822 = icmp slt i32 %817, 10
  %823 = or i1 %821, %822
  br i1 %823, label %originalBBpart2202, label %originalBB200alteredBB

originalBBpart2202:                               ; preds = %originalBB200
  br i1 %815, label %824, label %885, !dbg !1307

824:                                              ; preds = %originalBBpart2202
  %825 = load i32, i32* @x.19
  %826 = load i32, i32* @y.20
  %827 = sub i32 %825, 1
  %828 = mul i32 %825, %827
  %829 = urem i32 %828, 2
  %830 = icmp eq i32 %829, 0
  %831 = icmp slt i32 %826, 10
  %832 = or i1 %830, %831
  br i1 %832, label %originalBB204, label %originalBB204alteredBB

originalBB204:                                    ; preds = %824, %originalBB204alteredBB
  %833 = load i8*, i8** %21, align 8, !dbg !1308
  %834 = load i64, i64* %28, align 8, !dbg !1309
  %835 = getelementptr inbounds i8, i8* %833, i64 %834, !dbg !1310
  %836 = load i8*, i8** %31, align 8, !dbg !1311
  %837 = load i64, i64* %32, align 8, !dbg !1312
  %838 = call i32 @memcmp(i8* %835, i8* %836, i64 %837) #13, !dbg !1313
  %839 = icmp eq i32 %838, 0, !dbg !1314
  %840 = load i32, i32* @x.19
  %841 = load i32, i32* @y.20
  %842 = sub i32 %840, 1
  %843 = mul i32 %840, %842
  %844 = urem i32 %843, 2
  %845 = icmp eq i32 %844, 0
  %846 = icmp slt i32 %841, 10
  %847 = or i1 %845, %846
  br i1 %847, label %originalBBpart2206, label %originalBB204alteredBB

originalBBpart2206:                               ; preds = %originalBB204
  br i1 %839, label %848, label %885, !dbg !1315

848:                                              ; preds = %originalBBpart2206
  %849 = load i32, i32* @x.19
  %850 = load i32, i32* @y.20
  %851 = sub i32 %849, 1
  %852 = mul i32 %849, %851
  %853 = urem i32 %852, 2
  %854 = icmp eq i32 %853, 0
  %855 = icmp slt i32 %850, 10
  %856 = or i1 %854, %855
  br i1 %856, label %originalBB208, label %originalBB208alteredBB

originalBB208:                                    ; preds = %848, %originalBB208alteredBB
  %857 = load i8, i8* %35, align 1, !dbg !1316
  %858 = trunc i8 %857 to i1, !dbg !1316
  %859 = load i32, i32* @x.19
  %860 = load i32, i32* @y.20
  %861 = sub i32 %859, 1
  %862 = mul i32 %859, %861
  %863 = urem i32 %862, 2
  %864 = icmp eq i32 %863, 0
  %865 = icmp slt i32 %860, 10
  %866 = or i1 %864, %865
  br i1 %866, label %originalBBpart2210, label %originalBB208alteredBB

originalBBpart2210:                               ; preds = %originalBB208
  br i1 %858, label %867, label %884, !dbg !1319

867:                                              ; preds = %originalBBpart2210
  %868 = load i32, i32* @x.19
  %869 = load i32, i32* @y.20
  %870 = sub i32 %868, 1
  %871 = mul i32 %868, %870
  %872 = urem i32 %871, 2
  %873 = icmp eq i32 %872, 0
  %874 = icmp slt i32 %869, 10
  %875 = or i1 %873, %874
  br i1 %875, label %originalBB212, label %originalBB212alteredBB

originalBB212:                                    ; preds = %867, %originalBB212alteredBB
  %876 = load i32, i32* @x.19
  %877 = load i32, i32* @y.20
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBBpart2214, label %originalBB212alteredBB

originalBBpart2214:                               ; preds = %originalBB212
  br label %5870, !dbg !1320

884:                                              ; preds = %originalBBpart2210
  store i8 1, i8* %41, align 1, !dbg !1321
  br label %885, !dbg !1322

885:                                              ; preds = %884, %originalBBpart2206, %originalBBpart2202, %originalBBpart2177, %originalBBpart2173, %originalBBpart2169
  %886 = load i32, i32* @x.19
  %887 = load i32, i32* @y.20
  %888 = sub i32 %886, 1
  %889 = mul i32 %886, %888
  %890 = urem i32 %889, 2
  %891 = icmp eq i32 %890, 0
  %892 = icmp slt i32 %887, 10
  %893 = or i1 %891, %892
  br i1 %893, label %originalBB216, label %originalBB216alteredBB

originalBB216:                                    ; preds = %885, %originalBB216alteredBB
  %894 = load i8*, i8** %21, align 8, !dbg !1323
  %895 = load i64, i64* %28, align 8, !dbg !1324
  %896 = getelementptr inbounds i8, i8* %894, i64 %895, !dbg !1323
  %897 = load i8, i8* %896, align 1, !dbg !1323
  store i8 %897, i8* %39, align 1, !dbg !1325
  %898 = load i8, i8* %39, align 1, !dbg !1326
  %899 = zext i8 %898 to i32, !dbg !1326
  %900 = load i32, i32* @x.19
  %901 = load i32, i32* @y.20
  %902 = sub i32 %900, 1
  %903 = mul i32 %900, %902
  %904 = urem i32 %903, 2
  %905 = icmp eq i32 %904, 0
  %906 = icmp slt i32 %901, 10
  %907 = or i1 %905, %906
  br i1 %907, label %originalBBpart2218, label %originalBB216alteredBB

originalBBpart2218:                               ; preds = %originalBB216
  switch i32 %899, label %2960 [
    i32 0, label %908
    i32 63, label %1541
    i32 7, label %2101
    i32 8, label %2102
    i32 12, label %2103
    i32 10, label %2120
    i32 13, label %2137
    i32 9, label %2154
    i32 11, label %2171
    i32 92, label %2172
    i32 123, label %2398
    i32 125, label %2398
    i32 35, label %2492
    i32 126, label %2492
    i32 32, label %2545
    i32 33, label %2562
    i32 34, label %2562
    i32 36, label %2562
    i32 38, label %2562
    i32 40, label %2562
    i32 41, label %2562
    i32 42, label %2562
    i32 59, label %2562
    i32 60, label %2562
    i32 61, label %2562
    i32 62, label %2562
    i32 91, label %2562
    i32 94, label %2562
    i32 96, label %2562
    i32 124, label %2562
    i32 39, label %2618
    i32 37, label %2943
    i32 43, label %2943
    i32 44, label %2943
    i32 45, label %2943
    i32 46, label %2943
    i32 47, label %2943
    i32 48, label %2943
    i32 49, label %2943
    i32 50, label %2943
    i32 51, label %2943
    i32 52, label %2943
    i32 53, label %2943
    i32 54, label %2943
    i32 55, label %2943
    i32 56, label %2943
    i32 57, label %2943
    i32 58, label %2943
    i32 65, label %2943
    i32 66, label %2943
    i32 67, label %2943
    i32 68, label %2943
    i32 69, label %2943
    i32 70, label %2943
    i32 71, label %2943
    i32 72, label %2943
    i32 73, label %2943
    i32 74, label %2943
    i32 75, label %2943
    i32 76, label %2943
    i32 77, label %2943
    i32 78, label %2943
    i32 79, label %2943
    i32 80, label %2943
    i32 81, label %2943
    i32 82, label %2943
    i32 83, label %2943
    i32 84, label %2943
    i32 85, label %2943
    i32 86, label %2943
    i32 87, label %2943
    i32 88, label %2943
    i32 89, label %2943
    i32 90, label %2943
    i32 93, label %2943
    i32 95, label %2943
    i32 97, label %2943
    i32 98, label %2943
    i32 99, label %2943
    i32 100, label %2943
    i32 101, label %2943
    i32 102, label %2943
    i32 103, label %2943
    i32 104, label %2943
    i32 105, label %2943
    i32 106, label %2943
    i32 107, label %2943
    i32 108, label %2943
    i32 109, label %2943
    i32 110, label %2943
    i32 111, label %2943
    i32 112, label %2943
    i32 113, label %2943
    i32 114, label %2943
    i32 115, label %2943
    i32 116, label %2943
    i32 117, label %2943
    i32 118, label %2943
    i32 119, label %2943
    i32 120, label %2943
    i32 121, label %2943
    i32 122, label %2943
  ], !dbg !1327

908:                                              ; preds = %originalBBpart2218
  %909 = load i32, i32* @x.19
  %910 = load i32, i32* @y.20
  %911 = sub i32 %909, 1
  %912 = mul i32 %909, %911
  %913 = urem i32 %912, 2
  %914 = icmp eq i32 %913, 0
  %915 = icmp slt i32 %910, 10
  %916 = or i1 %914, %915
  br i1 %916, label %originalBB220, label %originalBB220alteredBB

originalBB220:                                    ; preds = %908, %originalBB220alteredBB
  %917 = load i8, i8* %33, align 1, !dbg !1328
  %918 = trunc i8 %917 to i1, !dbg !1328
  %919 = load i32, i32* @x.19
  %920 = load i32, i32* @y.20
  %921 = sub i32 %919, 1
  %922 = mul i32 %919, %921
  %923 = urem i32 %922, 2
  %924 = icmp eq i32 %923, 0
  %925 = icmp slt i32 %920, 10
  %926 = or i1 %924, %925
  br i1 %926, label %originalBBpart2222, label %originalBB220alteredBB

originalBBpart2222:                               ; preds = %originalBB220
  br i1 %918, label %927, label %1486, !dbg !1331

927:                                              ; preds = %originalBBpart2222
  %928 = load i32, i32* @x.19
  %929 = load i32, i32* @y.20
  %930 = sub i32 %928, 1
  %931 = mul i32 %928, %930
  %932 = urem i32 %931, 2
  %933 = icmp eq i32 %932, 0
  %934 = icmp slt i32 %929, 10
  %935 = or i1 %933, %934
  br i1 %935, label %originalBB224, label %originalBB224alteredBB

originalBB224:                                    ; preds = %927, %originalBB224alteredBB
  %936 = load i32, i32* @x.19
  %937 = load i32, i32* @y.20
  %938 = sub i32 %936, 1
  %939 = mul i32 %936, %938
  %940 = urem i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = icmp slt i32 %937, 10
  %943 = or i1 %941, %942
  br i1 %943, label %originalBBpart2226, label %originalBB224alteredBB

originalBBpart2226:                               ; preds = %originalBB224
  br label %944, !dbg !1332

944:                                              ; preds = %originalBBpart2226
  %945 = load i8, i8* %35, align 1, !dbg !1334
  %946 = trunc i8 %945 to i1, !dbg !1334
  br i1 %946, label %947, label %964, !dbg !1337

947:                                              ; preds = %944
  %948 = load i32, i32* @x.19
  %949 = load i32, i32* @y.20
  %950 = sub i32 %948, 1
  %951 = mul i32 %948, %950
  %952 = urem i32 %951, 2
  %953 = icmp eq i32 %952, 0
  %954 = icmp slt i32 %949, 10
  %955 = or i1 %953, %954
  br i1 %955, label %originalBB228, label %originalBB228alteredBB

originalBB228:                                    ; preds = %947, %originalBB228alteredBB
  %956 = load i32, i32* @x.19
  %957 = load i32, i32* @y.20
  %958 = sub i32 %956, 1
  %959 = mul i32 %956, %958
  %960 = urem i32 %959, 2
  %961 = icmp eq i32 %960, 0
  %962 = icmp slt i32 %957, 10
  %963 = or i1 %961, %962
  br i1 %963, label %originalBBpart2230, label %originalBB228alteredBB

originalBBpart2230:                               ; preds = %originalBB228
  br label %5870, !dbg !1334

964:                                              ; preds = %944
  store i8 1, i8* %42, align 1, !dbg !1337
  %965 = load i32, i32* %23, align 4, !dbg !1338
  %966 = icmp eq i32 %965, 2, !dbg !1338
  br i1 %966, label %967, label %1151, !dbg !1338

967:                                              ; preds = %964
  %968 = load i32, i32* @x.19
  %969 = load i32, i32* @y.20
  %970 = sub i32 %968, 1
  %971 = mul i32 %968, %970
  %972 = urem i32 %971, 2
  %973 = icmp eq i32 %972, 0
  %974 = icmp slt i32 %969, 10
  %975 = or i1 %973, %974
  br i1 %975, label %originalBB232, label %originalBB232alteredBB

originalBB232:                                    ; preds = %967, %originalBB232alteredBB
  %976 = load i8, i8* %36, align 1, !dbg !1338
  %977 = trunc i8 %976 to i1, !dbg !1338
  %978 = load i32, i32* @x.19
  %979 = load i32, i32* @y.20
  %980 = sub i32 %978, 1
  %981 = mul i32 %978, %980
  %982 = urem i32 %981, 2
  %983 = icmp eq i32 %982, 0
  %984 = icmp slt i32 %979, 10
  %985 = or i1 %983, %984
  br i1 %985, label %originalBBpart2234, label %originalBB232alteredBB

originalBBpart2234:                               ; preds = %originalBB232
  br i1 %977, label %1151, label %986, !dbg !1337

986:                                              ; preds = %originalBBpart2234
  %987 = load i32, i32* @x.19
  %988 = load i32, i32* @y.20
  %989 = sub i32 %987, 1
  %990 = mul i32 %987, %989
  %991 = urem i32 %990, 2
  %992 = icmp eq i32 %991, 0
  %993 = icmp slt i32 %988, 10
  %994 = or i1 %992, %993
  br i1 %994, label %originalBB236, label %originalBB236alteredBB

originalBB236:                                    ; preds = %986, %originalBB236alteredBB
  %995 = load i32, i32* @x.19
  %996 = load i32, i32* @y.20
  %997 = sub i32 %995, 1
  %998 = mul i32 %995, %997
  %999 = urem i32 %998, 2
  %1000 = icmp eq i32 %999, 0
  %1001 = icmp slt i32 %996, 10
  %1002 = or i1 %1000, %1001
  br i1 %1002, label %originalBBpart2238, label %originalBB236alteredBB

originalBBpart2238:                               ; preds = %originalBB236
  br label %1003, !dbg !1340

1003:                                             ; preds = %originalBBpart2238
  %1004 = load i32, i32* @x.19
  %1005 = load i32, i32* @y.20
  %1006 = sub i32 %1004, 1
  %1007 = mul i32 %1004, %1006
  %1008 = urem i32 %1007, 2
  %1009 = icmp eq i32 %1008, 0
  %1010 = icmp slt i32 %1005, 10
  %1011 = or i1 %1009, %1010
  br i1 %1011, label %originalBB240, label %originalBB240alteredBB

originalBB240:                                    ; preds = %1003, %originalBB240alteredBB
  %1012 = load i64, i64* %29, align 8, !dbg !1342
  %1013 = load i64, i64* %20, align 8, !dbg !1342
  %1014 = icmp ult i64 %1012, %1013, !dbg !1342
  %1015 = load i32, i32* @x.19
  %1016 = load i32, i32* @y.20
  %1017 = sub i32 %1015, 1
  %1018 = mul i32 %1015, %1017
  %1019 = urem i32 %1018, 2
  %1020 = icmp eq i32 %1019, 0
  %1021 = icmp slt i32 %1016, 10
  %1022 = or i1 %1020, %1021
  br i1 %1022, label %originalBBpart2242, label %originalBB240alteredBB

originalBBpart2242:                               ; preds = %originalBB240
  br i1 %1014, label %1023, label %1027, !dbg !1345

1023:                                             ; preds = %originalBBpart2242
  %1024 = load i8*, i8** %19, align 8, !dbg !1342
  %1025 = load i64, i64* %29, align 8, !dbg !1342
  %1026 = getelementptr inbounds i8, i8* %1024, i64 %1025, !dbg !1342
  store i8 39, i8* %1026, align 1, !dbg !1342
  br label %1027, !dbg !1342

1027:                                             ; preds = %1023, %originalBBpart2242
  %1028 = load i32, i32* @x.19
  %1029 = load i32, i32* @y.20
  %1030 = sub i32 %1028, 1
  %1031 = mul i32 %1028, %1030
  %1032 = urem i32 %1031, 2
  %1033 = icmp eq i32 %1032, 0
  %1034 = icmp slt i32 %1029, 10
  %1035 = or i1 %1033, %1034
  br i1 %1035, label %originalBB244, label %originalBB244alteredBB

originalBB244:                                    ; preds = %1027, %originalBB244alteredBB
  %1036 = load i64, i64* %29, align 8, !dbg !1345
  %1037 = add i64 %1036, 1, !dbg !1345
  store i64 %1037, i64* %29, align 8, !dbg !1345
  %1038 = load i32, i32* @x.19
  %1039 = load i32, i32* @y.20
  %1040 = sub i32 %1038, 1
  %1041 = mul i32 %1038, %1040
  %1042 = urem i32 %1041, 2
  %1043 = icmp eq i32 %1042, 0
  %1044 = icmp slt i32 %1039, 10
  %1045 = or i1 %1043, %1044
  br i1 %1045, label %originalBBpart2262, label %originalBB244alteredBB

originalBBpart2262:                               ; preds = %originalBB244
  br label %1046, !dbg !1345

1046:                                             ; preds = %originalBBpart2262
  br label %1047, !dbg !1340

1047:                                             ; preds = %1046
  %1048 = load i64, i64* %29, align 8, !dbg !1346
  %1049 = load i64, i64* %20, align 8, !dbg !1346
  %1050 = icmp ult i64 %1048, %1049, !dbg !1346
  br i1 %1050, label %1051, label %1071, !dbg !1349

1051:                                             ; preds = %1047
  %1052 = load i32, i32* @x.19
  %1053 = load i32, i32* @y.20
  %1054 = sub i32 %1052, 1
  %1055 = mul i32 %1052, %1054
  %1056 = urem i32 %1055, 2
  %1057 = icmp eq i32 %1056, 0
  %1058 = icmp slt i32 %1053, 10
  %1059 = or i1 %1057, %1058
  br i1 %1059, label %originalBB264, label %originalBB264alteredBB

originalBB264:                                    ; preds = %1051, %originalBB264alteredBB
  %1060 = load i8*, i8** %19, align 8, !dbg !1346
  %1061 = load i64, i64* %29, align 8, !dbg !1346
  %1062 = getelementptr inbounds i8, i8* %1060, i64 %1061, !dbg !1346
  store i8 36, i8* %1062, align 1, !dbg !1346
  %1063 = load i32, i32* @x.19
  %1064 = load i32, i32* @y.20
  %1065 = sub i32 %1063, 1
  %1066 = mul i32 %1063, %1065
  %1067 = urem i32 %1066, 2
  %1068 = icmp eq i32 %1067, 0
  %1069 = icmp slt i32 %1064, 10
  %1070 = or i1 %1068, %1069
  br i1 %1070, label %originalBBpart2266, label %originalBB264alteredBB

originalBBpart2266:                               ; preds = %originalBB264
  br label %1071, !dbg !1346

1071:                                             ; preds = %originalBBpart2266, %1047
  %1072 = load i32, i32* @x.19
  %1073 = load i32, i32* @y.20
  %1074 = sub i32 %1072, 1
  %1075 = mul i32 %1072, %1074
  %1076 = urem i32 %1075, 2
  %1077 = icmp eq i32 %1076, 0
  %1078 = icmp slt i32 %1073, 10
  %1079 = or i1 %1077, %1078
  br i1 %1079, label %originalBB268, label %originalBB268alteredBB

originalBB268:                                    ; preds = %1071, %originalBB268alteredBB
  %1080 = load i64, i64* %29, align 8, !dbg !1349
  %1081 = add i64 %1080, 1, !dbg !1349
  store i64 %1081, i64* %29, align 8, !dbg !1349
  %1082 = load i32, i32* @x.19
  %1083 = load i32, i32* @y.20
  %1084 = sub i32 %1082, 1
  %1085 = mul i32 %1082, %1084
  %1086 = urem i32 %1085, 2
  %1087 = icmp eq i32 %1086, 0
  %1088 = icmp slt i32 %1083, 10
  %1089 = or i1 %1087, %1088
  br i1 %1089, label %originalBBpart2283, label %originalBB268alteredBB

originalBBpart2283:                               ; preds = %originalBB268
  br label %1090, !dbg !1349

1090:                                             ; preds = %originalBBpart2283
  br label %1091, !dbg !1340

1091:                                             ; preds = %1090
  %1092 = load i32, i32* @x.19
  %1093 = load i32, i32* @y.20
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBB285, label %originalBB285alteredBB

originalBB285:                                    ; preds = %1091, %originalBB285alteredBB
  %1100 = load i64, i64* %29, align 8, !dbg !1350
  %1101 = load i64, i64* %20, align 8, !dbg !1350
  %1102 = icmp ult i64 %1100, %1101, !dbg !1350
  %1103 = load i32, i32* @x.19
  %1104 = load i32, i32* @y.20
  %1105 = sub i32 %1103, 1
  %1106 = mul i32 %1103, %1105
  %1107 = urem i32 %1106, 2
  %1108 = icmp eq i32 %1107, 0
  %1109 = icmp slt i32 %1104, 10
  %1110 = or i1 %1108, %1109
  br i1 %1110, label %originalBBpart2287, label %originalBB285alteredBB

originalBBpart2287:                               ; preds = %originalBB285
  br i1 %1102, label %1111, label %1131, !dbg !1353

1111:                                             ; preds = %originalBBpart2287
  %1112 = load i32, i32* @x.19
  %1113 = load i32, i32* @y.20
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBB289, label %originalBB289alteredBB

originalBB289:                                    ; preds = %1111, %originalBB289alteredBB
  %1120 = load i8*, i8** %19, align 8, !dbg !1350
  %1121 = load i64, i64* %29, align 8, !dbg !1350
  %1122 = getelementptr inbounds i8, i8* %1120, i64 %1121, !dbg !1350
  store i8 39, i8* %1122, align 1, !dbg !1350
  %1123 = load i32, i32* @x.19
  %1124 = load i32, i32* @y.20
  %1125 = sub i32 %1123, 1
  %1126 = mul i32 %1123, %1125
  %1127 = urem i32 %1126, 2
  %1128 = icmp eq i32 %1127, 0
  %1129 = icmp slt i32 %1124, 10
  %1130 = or i1 %1128, %1129
  br i1 %1130, label %originalBBpart2291, label %originalBB289alteredBB

originalBBpart2291:                               ; preds = %originalBB289
  br label %1131, !dbg !1350

1131:                                             ; preds = %originalBBpart2291, %originalBBpart2287
  %1132 = load i64, i64* %29, align 8, !dbg !1353
  %1133 = add i64 %1132, 1, !dbg !1353
  store i64 %1133, i64* %29, align 8, !dbg !1353
  br label %1134, !dbg !1353

1134:                                             ; preds = %1131
  %1135 = load i32, i32* @x.19
  %1136 = load i32, i32* @y.20
  %1137 = sub i32 %1135, 1
  %1138 = mul i32 %1135, %1137
  %1139 = urem i32 %1138, 2
  %1140 = icmp eq i32 %1139, 0
  %1141 = icmp slt i32 %1136, 10
  %1142 = or i1 %1140, %1141
  br i1 %1142, label %originalBB293, label %originalBB293alteredBB

originalBB293:                                    ; preds = %1134, %originalBB293alteredBB
  store i8 1, i8* %36, align 1, !dbg !1340
  %1143 = load i32, i32* @x.19
  %1144 = load i32, i32* @y.20
  %1145 = sub i32 %1143, 1
  %1146 = mul i32 %1143, %1145
  %1147 = urem i32 %1146, 2
  %1148 = icmp eq i32 %1147, 0
  %1149 = icmp slt i32 %1144, 10
  %1150 = or i1 %1148, %1149
  br i1 %1150, label %originalBBpart2295, label %originalBB293alteredBB

originalBBpart2295:                               ; preds = %originalBB293
  br label %1151, !dbg !1340

1151:                                             ; preds = %originalBBpart2295, %originalBBpart2234, %964
  %1152 = load i32, i32* @x.19
  %1153 = load i32, i32* @y.20
  %1154 = sub i32 %1152, 1
  %1155 = mul i32 %1152, %1154
  %1156 = urem i32 %1155, 2
  %1157 = icmp eq i32 %1156, 0
  %1158 = icmp slt i32 %1153, 10
  %1159 = or i1 %1157, %1158
  br i1 %1159, label %originalBB297, label %originalBB297alteredBB

originalBB297:                                    ; preds = %1151, %originalBB297alteredBB
  %1160 = load i32, i32* @x.19
  %1161 = load i32, i32* @y.20
  %1162 = sub i32 %1160, 1
  %1163 = mul i32 %1160, %1162
  %1164 = urem i32 %1163, 2
  %1165 = icmp eq i32 %1164, 0
  %1166 = icmp slt i32 %1161, 10
  %1167 = or i1 %1165, %1166
  br i1 %1167, label %originalBBpart2299, label %originalBB297alteredBB

originalBBpart2299:                               ; preds = %originalBB297
  br label %1168, !dbg !1337

1168:                                             ; preds = %originalBBpart2299
  %1169 = load i32, i32* @x.19
  %1170 = load i32, i32* @y.20
  %1171 = sub i32 %1169, 1
  %1172 = mul i32 %1169, %1171
  %1173 = urem i32 %1172, 2
  %1174 = icmp eq i32 %1173, 0
  %1175 = icmp slt i32 %1170, 10
  %1176 = or i1 %1174, %1175
  br i1 %1176, label %originalBB301, label %originalBB301alteredBB

originalBB301:                                    ; preds = %1168, %originalBB301alteredBB
  %1177 = load i64, i64* %29, align 8, !dbg !1354
  %1178 = load i64, i64* %20, align 8, !dbg !1354
  %1179 = icmp ult i64 %1177, %1178, !dbg !1354
  %1180 = load i32, i32* @x.19
  %1181 = load i32, i32* @y.20
  %1182 = sub i32 %1180, 1
  %1183 = mul i32 %1180, %1182
  %1184 = urem i32 %1183, 2
  %1185 = icmp eq i32 %1184, 0
  %1186 = icmp slt i32 %1181, 10
  %1187 = or i1 %1185, %1186
  br i1 %1187, label %originalBBpart2303, label %originalBB301alteredBB

originalBBpart2303:                               ; preds = %originalBB301
  br i1 %1179, label %1188, label %1208, !dbg !1357

1188:                                             ; preds = %originalBBpart2303
  %1189 = load i32, i32* @x.19
  %1190 = load i32, i32* @y.20
  %1191 = sub i32 %1189, 1
  %1192 = mul i32 %1189, %1191
  %1193 = urem i32 %1192, 2
  %1194 = icmp eq i32 %1193, 0
  %1195 = icmp slt i32 %1190, 10
  %1196 = or i1 %1194, %1195
  br i1 %1196, label %originalBB305, label %originalBB305alteredBB

originalBB305:                                    ; preds = %1188, %originalBB305alteredBB
  %1197 = load i8*, i8** %19, align 8, !dbg !1354
  %1198 = load i64, i64* %29, align 8, !dbg !1354
  %1199 = getelementptr inbounds i8, i8* %1197, i64 %1198, !dbg !1354
  store i8 92, i8* %1199, align 1, !dbg !1354
  %1200 = load i32, i32* @x.19
  %1201 = load i32, i32* @y.20
  %1202 = sub i32 %1200, 1
  %1203 = mul i32 %1200, %1202
  %1204 = urem i32 %1203, 2
  %1205 = icmp eq i32 %1204, 0
  %1206 = icmp slt i32 %1201, 10
  %1207 = or i1 %1205, %1206
  br i1 %1207, label %originalBBpart2307, label %originalBB305alteredBB

originalBBpart2307:                               ; preds = %originalBB305
  br label %1208, !dbg !1354

1208:                                             ; preds = %originalBBpart2307, %originalBBpart2303
  %1209 = load i32, i32* @x.19
  %1210 = load i32, i32* @y.20
  %1211 = sub i32 %1209, 1
  %1212 = mul i32 %1209, %1211
  %1213 = urem i32 %1212, 2
  %1214 = icmp eq i32 %1213, 0
  %1215 = icmp slt i32 %1210, 10
  %1216 = or i1 %1214, %1215
  br i1 %1216, label %originalBB309, label %originalBB309alteredBB

originalBB309:                                    ; preds = %1208, %originalBB309alteredBB
  %1217 = load i64, i64* %29, align 8, !dbg !1357
  %1218 = add i64 %1217, 1, !dbg !1357
  store i64 %1218, i64* %29, align 8, !dbg !1357
  %1219 = load i32, i32* @x.19
  %1220 = load i32, i32* @y.20
  %1221 = sub i32 %1219, 1
  %1222 = mul i32 %1219, %1221
  %1223 = urem i32 %1222, 2
  %1224 = icmp eq i32 %1223, 0
  %1225 = icmp slt i32 %1220, 10
  %1226 = or i1 %1224, %1225
  br i1 %1226, label %originalBBpart2312, label %originalBB309alteredBB

originalBBpart2312:                               ; preds = %originalBB309
  br label %1227, !dbg !1357

1227:                                             ; preds = %originalBBpart2312
  %1228 = load i32, i32* @x.19
  %1229 = load i32, i32* @y.20
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBB314, label %originalBB314alteredBB

originalBB314:                                    ; preds = %1227, %originalBB314alteredBB
  %1236 = load i32, i32* @x.19
  %1237 = load i32, i32* @y.20
  %1238 = sub i32 %1236, 1
  %1239 = mul i32 %1236, %1238
  %1240 = urem i32 %1239, 2
  %1241 = icmp eq i32 %1240, 0
  %1242 = icmp slt i32 %1237, 10
  %1243 = or i1 %1241, %1242
  br i1 %1243, label %originalBBpart2316, label %originalBB314alteredBB

originalBBpart2316:                               ; preds = %originalBB314
  br label %1244, !dbg !1337

1244:                                             ; preds = %originalBBpart2316
  %1245 = load i32, i32* @x.19
  %1246 = load i32, i32* @y.20
  %1247 = sub i32 %1245, 1
  %1248 = mul i32 %1245, %1247
  %1249 = urem i32 %1248, 2
  %1250 = icmp eq i32 %1249, 0
  %1251 = icmp slt i32 %1246, 10
  %1252 = or i1 %1250, %1251
  br i1 %1252, label %originalBB318, label %originalBB318alteredBB

originalBB318:                                    ; preds = %1244, %originalBB318alteredBB
  %1253 = load i32, i32* %23, align 4, !dbg !1358
  %1254 = icmp ne i32 %1253, 2, !dbg !1360
  %1255 = load i32, i32* @x.19
  %1256 = load i32, i32* @y.20
  %1257 = sub i32 %1255, 1
  %1258 = mul i32 %1255, %1257
  %1259 = urem i32 %1258, 2
  %1260 = icmp eq i32 %1259, 0
  %1261 = icmp slt i32 %1256, 10
  %1262 = or i1 %1260, %1261
  br i1 %1262, label %originalBBpart2320, label %originalBB318alteredBB

originalBBpart2320:                               ; preds = %originalBB318
  br i1 %1254, label %1263, label %1469, !dbg !1361

1263:                                             ; preds = %originalBBpart2320
  %1264 = load i32, i32* @x.19
  %1265 = load i32, i32* @y.20
  %1266 = sub i32 %1264, 1
  %1267 = mul i32 %1264, %1266
  %1268 = urem i32 %1267, 2
  %1269 = icmp eq i32 %1268, 0
  %1270 = icmp slt i32 %1265, 10
  %1271 = or i1 %1269, %1270
  br i1 %1271, label %originalBB322, label %originalBB322alteredBB

originalBB322:                                    ; preds = %1263, %originalBB322alteredBB
  %1272 = load i64, i64* %28, align 8, !dbg !1362
  %1273 = add i64 %1272, 1, !dbg !1363
  %1274 = load i64, i64* %22, align 8, !dbg !1364
  %1275 = icmp ult i64 %1273, %1274, !dbg !1365
  %1276 = load i32, i32* @x.19
  %1277 = load i32, i32* @y.20
  %1278 = sub i32 %1276, 1
  %1279 = mul i32 %1276, %1278
  %1280 = urem i32 %1279, 2
  %1281 = icmp eq i32 %1280, 0
  %1282 = icmp slt i32 %1277, 10
  %1283 = or i1 %1281, %1282
  br i1 %1283, label %originalBBpart2330, label %originalBB322alteredBB

originalBBpart2330:                               ; preds = %originalBB322
  br i1 %1275, label %1284, label %1469, !dbg !1366

1284:                                             ; preds = %originalBBpart2330
  %1285 = load i32, i32* @x.19
  %1286 = load i32, i32* @y.20
  %1287 = sub i32 %1285, 1
  %1288 = mul i32 %1285, %1287
  %1289 = urem i32 %1288, 2
  %1290 = icmp eq i32 %1289, 0
  %1291 = icmp slt i32 %1286, 10
  %1292 = or i1 %1290, %1291
  br i1 %1292, label %originalBB332, label %originalBB332alteredBB

originalBB332:                                    ; preds = %1284, %originalBB332alteredBB
  %1293 = load i8*, i8** %21, align 8, !dbg !1367
  %1294 = load i64, i64* %28, align 8, !dbg !1368
  %1295 = add i64 %1294, 1, !dbg !1369
  %1296 = getelementptr inbounds i8, i8* %1293, i64 %1295, !dbg !1367
  %1297 = load i8, i8* %1296, align 1, !dbg !1367
  %1298 = sext i8 %1297 to i32, !dbg !1367
  %1299 = icmp sle i32 48, %1298, !dbg !1370
  %1300 = load i32, i32* @x.19
  %1301 = load i32, i32* @y.20
  %1302 = sub i32 %1300, 1
  %1303 = mul i32 %1300, %1302
  %1304 = urem i32 %1303, 2
  %1305 = icmp eq i32 %1304, 0
  %1306 = icmp slt i32 %1301, 10
  %1307 = or i1 %1305, %1306
  br i1 %1307, label %originalBBpart2337, label %originalBB332alteredBB

originalBBpart2337:                               ; preds = %originalBB332
  br i1 %1299, label %1308, label %1469, !dbg !1371

1308:                                             ; preds = %originalBBpart2337
  %1309 = load i32, i32* @x.19
  %1310 = load i32, i32* @y.20
  %1311 = sub i32 %1309, 1
  %1312 = mul i32 %1309, %1311
  %1313 = urem i32 %1312, 2
  %1314 = icmp eq i32 %1313, 0
  %1315 = icmp slt i32 %1310, 10
  %1316 = or i1 %1314, %1315
  br i1 %1316, label %originalBB339, label %originalBB339alteredBB

originalBB339:                                    ; preds = %1308, %originalBB339alteredBB
  %1317 = load i8*, i8** %21, align 8, !dbg !1372
  %1318 = load i64, i64* %28, align 8, !dbg !1373
  %1319 = add i64 %1318, 1, !dbg !1374
  %1320 = getelementptr inbounds i8, i8* %1317, i64 %1319, !dbg !1372
  %1321 = load i8, i8* %1320, align 1, !dbg !1372
  %1322 = sext i8 %1321 to i32, !dbg !1372
  %1323 = icmp sle i32 %1322, 57, !dbg !1375
  %1324 = load i32, i32* @x.19
  %1325 = load i32, i32* @y.20
  %1326 = sub i32 %1324, 1
  %1327 = mul i32 %1324, %1326
  %1328 = urem i32 %1327, 2
  %1329 = icmp eq i32 %1328, 0
  %1330 = icmp slt i32 %1325, 10
  %1331 = or i1 %1329, %1330
  br i1 %1331, label %originalBBpart2343, label %originalBB339alteredBB

originalBBpart2343:                               ; preds = %originalBB339
  br i1 %1323, label %1332, label %1469, !dbg !1376

1332:                                             ; preds = %originalBBpart2343
  %1333 = load i32, i32* @x.19
  %1334 = load i32, i32* @y.20
  %1335 = sub i32 %1333, 1
  %1336 = mul i32 %1333, %1335
  %1337 = urem i32 %1336, 2
  %1338 = icmp eq i32 %1337, 0
  %1339 = icmp slt i32 %1334, 10
  %1340 = or i1 %1338, %1339
  br i1 %1340, label %originalBB345, label %originalBB345alteredBB

originalBB345:                                    ; preds = %1332, %originalBB345alteredBB
  %1341 = load i32, i32* @x.19
  %1342 = load i32, i32* @y.20
  %1343 = sub i32 %1341, 1
  %1344 = mul i32 %1341, %1343
  %1345 = urem i32 %1344, 2
  %1346 = icmp eq i32 %1345, 0
  %1347 = icmp slt i32 %1342, 10
  %1348 = or i1 %1346, %1347
  br i1 %1348, label %originalBBpart2347, label %originalBB345alteredBB

originalBBpart2347:                               ; preds = %originalBB345
  br label %1349, !dbg !1377

1349:                                             ; preds = %originalBBpart2347
  %1350 = load i32, i32* @x.19
  %1351 = load i32, i32* @y.20
  %1352 = sub i32 %1350, 1
  %1353 = mul i32 %1350, %1352
  %1354 = urem i32 %1353, 2
  %1355 = icmp eq i32 %1354, 0
  %1356 = icmp slt i32 %1351, 10
  %1357 = or i1 %1355, %1356
  br i1 %1357, label %originalBB349, label %originalBB349alteredBB

originalBB349:                                    ; preds = %1349, %originalBB349alteredBB
  %1358 = load i64, i64* %29, align 8, !dbg !1379
  %1359 = load i64, i64* %20, align 8, !dbg !1379
  %1360 = icmp ult i64 %1358, %1359, !dbg !1379
  %1361 = load i32, i32* @x.19
  %1362 = load i32, i32* @y.20
  %1363 = sub i32 %1361, 1
  %1364 = mul i32 %1361, %1363
  %1365 = urem i32 %1364, 2
  %1366 = icmp eq i32 %1365, 0
  %1367 = icmp slt i32 %1362, 10
  %1368 = or i1 %1366, %1367
  br i1 %1368, label %originalBBpart2351, label %originalBB349alteredBB

originalBBpart2351:                               ; preds = %originalBB349
  br i1 %1360, label %1369, label %1389, !dbg !1382

1369:                                             ; preds = %originalBBpart2351
  %1370 = load i32, i32* @x.19
  %1371 = load i32, i32* @y.20
  %1372 = sub i32 %1370, 1
  %1373 = mul i32 %1370, %1372
  %1374 = urem i32 %1373, 2
  %1375 = icmp eq i32 %1374, 0
  %1376 = icmp slt i32 %1371, 10
  %1377 = or i1 %1375, %1376
  br i1 %1377, label %originalBB353, label %originalBB353alteredBB

originalBB353:                                    ; preds = %1369, %originalBB353alteredBB
  %1378 = load i8*, i8** %19, align 8, !dbg !1379
  %1379 = load i64, i64* %29, align 8, !dbg !1379
  %1380 = getelementptr inbounds i8, i8* %1378, i64 %1379, !dbg !1379
  store i8 48, i8* %1380, align 1, !dbg !1379
  %1381 = load i32, i32* @x.19
  %1382 = load i32, i32* @y.20
  %1383 = sub i32 %1381, 1
  %1384 = mul i32 %1381, %1383
  %1385 = urem i32 %1384, 2
  %1386 = icmp eq i32 %1385, 0
  %1387 = icmp slt i32 %1382, 10
  %1388 = or i1 %1386, %1387
  br i1 %1388, label %originalBBpart2355, label %originalBB353alteredBB

originalBBpart2355:                               ; preds = %originalBB353
  br label %1389, !dbg !1379

1389:                                             ; preds = %originalBBpart2355, %originalBBpart2351
  %1390 = load i32, i32* @x.19
  %1391 = load i32, i32* @y.20
  %1392 = sub i32 %1390, 1
  %1393 = mul i32 %1390, %1392
  %1394 = urem i32 %1393, 2
  %1395 = icmp eq i32 %1394, 0
  %1396 = icmp slt i32 %1391, 10
  %1397 = or i1 %1395, %1396
  br i1 %1397, label %originalBB357, label %originalBB357alteredBB

originalBB357:                                    ; preds = %1389, %originalBB357alteredBB
  %1398 = load i64, i64* %29, align 8, !dbg !1382
  %1399 = add i64 %1398, 1, !dbg !1382
  store i64 %1399, i64* %29, align 8, !dbg !1382
  %1400 = load i32, i32* @x.19
  %1401 = load i32, i32* @y.20
  %1402 = sub i32 %1400, 1
  %1403 = mul i32 %1400, %1402
  %1404 = urem i32 %1403, 2
  %1405 = icmp eq i32 %1404, 0
  %1406 = icmp slt i32 %1401, 10
  %1407 = or i1 %1405, %1406
  br i1 %1407, label %originalBBpart2369, label %originalBB357alteredBB

originalBBpart2369:                               ; preds = %originalBB357
  br label %1408, !dbg !1382

1408:                                             ; preds = %originalBBpart2369
  %1409 = load i32, i32* @x.19
  %1410 = load i32, i32* @y.20
  %1411 = sub i32 %1409, 1
  %1412 = mul i32 %1409, %1411
  %1413 = urem i32 %1412, 2
  %1414 = icmp eq i32 %1413, 0
  %1415 = icmp slt i32 %1410, 10
  %1416 = or i1 %1414, %1415
  br i1 %1416, label %originalBB371, label %originalBB371alteredBB

originalBB371:                                    ; preds = %1408, %originalBB371alteredBB
  %1417 = load i32, i32* @x.19
  %1418 = load i32, i32* @y.20
  %1419 = sub i32 %1417, 1
  %1420 = mul i32 %1417, %1419
  %1421 = urem i32 %1420, 2
  %1422 = icmp eq i32 %1421, 0
  %1423 = icmp slt i32 %1418, 10
  %1424 = or i1 %1422, %1423
  br i1 %1424, label %originalBBpart2373, label %originalBB371alteredBB

originalBBpart2373:                               ; preds = %originalBB371
  br label %1425, !dbg !1383

1425:                                             ; preds = %originalBBpart2373
  %1426 = load i32, i32* @x.19
  %1427 = load i32, i32* @y.20
  %1428 = sub i32 %1426, 1
  %1429 = mul i32 %1426, %1428
  %1430 = urem i32 %1429, 2
  %1431 = icmp eq i32 %1430, 0
  %1432 = icmp slt i32 %1427, 10
  %1433 = or i1 %1431, %1432
  br i1 %1433, label %originalBB375, label %originalBB375alteredBB

originalBB375:                                    ; preds = %1425, %originalBB375alteredBB
  %1434 = load i64, i64* %29, align 8, !dbg !1384
  %1435 = load i64, i64* %20, align 8, !dbg !1384
  %1436 = icmp ult i64 %1434, %1435, !dbg !1384
  %1437 = load i32, i32* @x.19
  %1438 = load i32, i32* @y.20
  %1439 = sub i32 %1437, 1
  %1440 = mul i32 %1437, %1439
  %1441 = urem i32 %1440, 2
  %1442 = icmp eq i32 %1441, 0
  %1443 = icmp slt i32 %1438, 10
  %1444 = or i1 %1442, %1443
  br i1 %1444, label %originalBBpart2377, label %originalBB375alteredBB

originalBBpart2377:                               ; preds = %originalBB375
  br i1 %1436, label %1445, label %1465, !dbg !1387

1445:                                             ; preds = %originalBBpart2377
  %1446 = load i32, i32* @x.19
  %1447 = load i32, i32* @y.20
  %1448 = sub i32 %1446, 1
  %1449 = mul i32 %1446, %1448
  %1450 = urem i32 %1449, 2
  %1451 = icmp eq i32 %1450, 0
  %1452 = icmp slt i32 %1447, 10
  %1453 = or i1 %1451, %1452
  br i1 %1453, label %originalBB379, label %originalBB379alteredBB

originalBB379:                                    ; preds = %1445, %originalBB379alteredBB
  %1454 = load i8*, i8** %19, align 8, !dbg !1384
  %1455 = load i64, i64* %29, align 8, !dbg !1384
  %1456 = getelementptr inbounds i8, i8* %1454, i64 %1455, !dbg !1384
  store i8 48, i8* %1456, align 1, !dbg !1384
  %1457 = load i32, i32* @x.19
  %1458 = load i32, i32* @y.20
  %1459 = sub i32 %1457, 1
  %1460 = mul i32 %1457, %1459
  %1461 = urem i32 %1460, 2
  %1462 = icmp eq i32 %1461, 0
  %1463 = icmp slt i32 %1458, 10
  %1464 = or i1 %1462, %1463
  br i1 %1464, label %originalBBpart2381, label %originalBB379alteredBB

originalBBpart2381:                               ; preds = %originalBB379
  br label %1465, !dbg !1384

1465:                                             ; preds = %originalBBpart2381, %originalBBpart2377
  %1466 = load i64, i64* %29, align 8, !dbg !1387
  %1467 = add i64 %1466, 1, !dbg !1387
  store i64 %1467, i64* %29, align 8, !dbg !1387
  br label %1468, !dbg !1387

1468:                                             ; preds = %1465
  br label %1469, !dbg !1388

1469:                                             ; preds = %1468, %originalBBpart2343, %originalBBpart2337, %originalBBpart2330, %originalBBpart2320
  %1470 = load i32, i32* @x.19
  %1471 = load i32, i32* @y.20
  %1472 = sub i32 %1470, 1
  %1473 = mul i32 %1470, %1472
  %1474 = urem i32 %1473, 2
  %1475 = icmp eq i32 %1474, 0
  %1476 = icmp slt i32 %1471, 10
  %1477 = or i1 %1475, %1476
  br i1 %1477, label %originalBB383, label %originalBB383alteredBB

originalBB383:                                    ; preds = %1469, %originalBB383alteredBB
  store i8 48, i8* %39, align 1, !dbg !1389
  %1478 = load i32, i32* @x.19
  %1479 = load i32, i32* @y.20
  %1480 = sub i32 %1478, 1
  %1481 = mul i32 %1478, %1480
  %1482 = urem i32 %1481, 2
  %1483 = icmp eq i32 %1482, 0
  %1484 = icmp slt i32 %1479, 10
  %1485 = or i1 %1483, %1484
  br i1 %1485, label %originalBBpart2385, label %originalBB383alteredBB

originalBBpart2385:                               ; preds = %originalBB383
  br label %1540, !dbg !1390

1486:                                             ; preds = %originalBBpart2222
  %1487 = load i32, i32* @x.19
  %1488 = load i32, i32* @y.20
  %1489 = sub i32 %1487, 1
  %1490 = mul i32 %1487, %1489
  %1491 = urem i32 %1490, 2
  %1492 = icmp eq i32 %1491, 0
  %1493 = icmp slt i32 %1488, 10
  %1494 = or i1 %1492, %1493
  br i1 %1494, label %originalBB387, label %originalBB387alteredBB

originalBB387:                                    ; preds = %1486, %originalBB387alteredBB
  %1495 = load i32, i32* %24, align 4, !dbg !1391
  %1496 = and i32 %1495, 1, !dbg !1393
  %1497 = icmp ne i32 %1496, 0, !dbg !1393
  %1498 = load i32, i32* @x.19
  %1499 = load i32, i32* @y.20
  %1500 = sub i32 %1498, 1
  %1501 = mul i32 %1498, %1500
  %1502 = urem i32 %1501, 2
  %1503 = icmp eq i32 %1502, 0
  %1504 = icmp slt i32 %1499, 10
  %1505 = or i1 %1503, %1504
  br i1 %1505, label %originalBBpart2395, label %originalBB387alteredBB

originalBBpart2395:                               ; preds = %originalBB387
  br i1 %1497, label %1506, label %1523, !dbg !1394

1506:                                             ; preds = %originalBBpart2395
  %1507 = load i32, i32* @x.19
  %1508 = load i32, i32* @y.20
  %1509 = sub i32 %1507, 1
  %1510 = mul i32 %1507, %1509
  %1511 = urem i32 %1510, 2
  %1512 = icmp eq i32 %1511, 0
  %1513 = icmp slt i32 %1508, 10
  %1514 = or i1 %1512, %1513
  br i1 %1514, label %originalBB397, label %originalBB397alteredBB

originalBB397:                                    ; preds = %1506, %originalBB397alteredBB
  %1515 = load i32, i32* @x.19
  %1516 = load i32, i32* @y.20
  %1517 = sub i32 %1515, 1
  %1518 = mul i32 %1515, %1517
  %1519 = urem i32 %1518, 2
  %1520 = icmp eq i32 %1519, 0
  %1521 = icmp slt i32 %1516, 10
  %1522 = or i1 %1520, %1521
  br i1 %1522, label %originalBBpart2399, label %originalBB397alteredBB

originalBBpart2399:                               ; preds = %originalBB397
  br label %5369, !dbg !1395

1523:                                             ; preds = %originalBBpart2395
  %1524 = load i32, i32* @x.19
  %1525 = load i32, i32* @y.20
  %1526 = sub i32 %1524, 1
  %1527 = mul i32 %1524, %1526
  %1528 = urem i32 %1527, 2
  %1529 = icmp eq i32 %1528, 0
  %1530 = icmp slt i32 %1525, 10
  %1531 = or i1 %1529, %1530
  br i1 %1531, label %originalBB401, label %originalBB401alteredBB

originalBB401:                                    ; preds = %1523, %originalBB401alteredBB
  %1532 = load i32, i32* @x.19
  %1533 = load i32, i32* @y.20
  %1534 = sub i32 %1532, 1
  %1535 = mul i32 %1532, %1534
  %1536 = urem i32 %1535, 2
  %1537 = icmp eq i32 %1536, 0
  %1538 = icmp slt i32 %1533, 10
  %1539 = or i1 %1537, %1538
  br i1 %1539, label %originalBBpart2403, label %originalBB401alteredBB

originalBBpart2403:                               ; preds = %originalBB401
  br label %1540

1540:                                             ; preds = %originalBBpart2403, %originalBBpart2385
  br label %4505, !dbg !1396

1541:                                             ; preds = %originalBBpart2218
  %1542 = load i32, i32* @x.19
  %1543 = load i32, i32* @y.20
  %1544 = sub i32 %1542, 1
  %1545 = mul i32 %1542, %1544
  %1546 = urem i32 %1545, 2
  %1547 = icmp eq i32 %1546, 0
  %1548 = icmp slt i32 %1543, 10
  %1549 = or i1 %1547, %1548
  br i1 %1549, label %originalBB405, label %originalBB405alteredBB

originalBB405:                                    ; preds = %1541, %originalBB405alteredBB
  %1550 = load i32, i32* %23, align 4, !dbg !1397
  %1551 = load i32, i32* @x.19
  %1552 = load i32, i32* @y.20
  %1553 = sub i32 %1551, 1
  %1554 = mul i32 %1551, %1553
  %1555 = urem i32 %1554, 2
  %1556 = icmp eq i32 %1555, 0
  %1557 = icmp slt i32 %1552, 10
  %1558 = or i1 %1556, %1557
  br i1 %1558, label %originalBBpart2407, label %originalBB405alteredBB

originalBBpart2407:                               ; preds = %originalBB405
  switch i32 %1550, label %2067 [
    i32 2, label %1559
    i32 5, label %1596
  ], !dbg !1398

1559:                                             ; preds = %originalBBpart2407
  %1560 = load i8, i8* %35, align 1, !dbg !1399
  %1561 = trunc i8 %1560 to i1, !dbg !1399
  br i1 %1561, label %1562, label %1579, !dbg !1402

1562:                                             ; preds = %1559
  %1563 = load i32, i32* @x.19
  %1564 = load i32, i32* @y.20
  %1565 = sub i32 %1563, 1
  %1566 = mul i32 %1563, %1565
  %1567 = urem i32 %1566, 2
  %1568 = icmp eq i32 %1567, 0
  %1569 = icmp slt i32 %1564, 10
  %1570 = or i1 %1568, %1569
  br i1 %1570, label %originalBB409, label %originalBB409alteredBB

originalBB409:                                    ; preds = %1562, %originalBB409alteredBB
  %1571 = load i32, i32* @x.19
  %1572 = load i32, i32* @y.20
  %1573 = sub i32 %1571, 1
  %1574 = mul i32 %1571, %1573
  %1575 = urem i32 %1574, 2
  %1576 = icmp eq i32 %1575, 0
  %1577 = icmp slt i32 %1572, 10
  %1578 = or i1 %1576, %1577
  br i1 %1578, label %originalBBpart2411, label %originalBB409alteredBB

originalBBpart2411:                               ; preds = %originalBB409
  br label %5870, !dbg !1403

1579:                                             ; preds = %1559
  %1580 = load i32, i32* @x.19
  %1581 = load i32, i32* @y.20
  %1582 = sub i32 %1580, 1
  %1583 = mul i32 %1580, %1582
  %1584 = urem i32 %1583, 2
  %1585 = icmp eq i32 %1584, 0
  %1586 = icmp slt i32 %1581, 10
  %1587 = or i1 %1585, %1586
  br i1 %1587, label %originalBB413, label %originalBB413alteredBB

originalBB413:                                    ; preds = %1579, %originalBB413alteredBB
  %1588 = load i32, i32* @x.19
  %1589 = load i32, i32* @y.20
  %1590 = sub i32 %1588, 1
  %1591 = mul i32 %1588, %1590
  %1592 = urem i32 %1591, 2
  %1593 = icmp eq i32 %1592, 0
  %1594 = icmp slt i32 %1589, 10
  %1595 = or i1 %1593, %1594
  br i1 %1595, label %originalBBpart2415, label %originalBB413alteredBB

originalBBpart2415:                               ; preds = %originalBB413
  br label %2084, !dbg !1404

1596:                                             ; preds = %originalBBpart2407
  %1597 = load i32, i32* @x.19
  %1598 = load i32, i32* @y.20
  %1599 = sub i32 %1597, 1
  %1600 = mul i32 %1597, %1599
  %1601 = urem i32 %1600, 2
  %1602 = icmp eq i32 %1601, 0
  %1603 = icmp slt i32 %1598, 10
  %1604 = or i1 %1602, %1603
  br i1 %1604, label %originalBB417, label %originalBB417alteredBB

originalBB417:                                    ; preds = %1596, %originalBB417alteredBB
  %1605 = load i32, i32* %24, align 4, !dbg !1405
  %1606 = and i32 %1605, 4, !dbg !1407
  %1607 = icmp ne i32 %1606, 0, !dbg !1407
  %1608 = load i32, i32* @x.19
  %1609 = load i32, i32* @y.20
  %1610 = sub i32 %1608, 1
  %1611 = mul i32 %1608, %1610
  %1612 = urem i32 %1611, 2
  %1613 = icmp eq i32 %1612, 0
  %1614 = icmp slt i32 %1609, 10
  %1615 = or i1 %1613, %1614
  br i1 %1615, label %originalBBpart2432, label %originalBB417alteredBB

originalBBpart2432:                               ; preds = %originalBB417
  br i1 %1607, label %1616, label %2066, !dbg !1408

1616:                                             ; preds = %originalBBpart2432
  %1617 = load i32, i32* @x.19
  %1618 = load i32, i32* @y.20
  %1619 = sub i32 %1617, 1
  %1620 = mul i32 %1617, %1619
  %1621 = urem i32 %1620, 2
  %1622 = icmp eq i32 %1621, 0
  %1623 = icmp slt i32 %1618, 10
  %1624 = or i1 %1622, %1623
  br i1 %1624, label %originalBB434, label %originalBB434alteredBB

originalBB434:                                    ; preds = %1616, %originalBB434alteredBB
  %1625 = load i64, i64* %28, align 8, !dbg !1409
  %1626 = add i64 %1625, 2, !dbg !1410
  %1627 = load i64, i64* %22, align 8, !dbg !1411
  %1628 = icmp ult i64 %1626, %1627, !dbg !1412
  %1629 = load i32, i32* @x.19
  %1630 = load i32, i32* @y.20
  %1631 = sub i32 %1629, 1
  %1632 = mul i32 %1629, %1631
  %1633 = urem i32 %1632, 2
  %1634 = icmp eq i32 %1633, 0
  %1635 = icmp slt i32 %1630, 10
  %1636 = or i1 %1634, %1635
  br i1 %1636, label %originalBBpart2437, label %originalBB434alteredBB

originalBBpart2437:                               ; preds = %originalBB434
  br i1 %1628, label %1637, label %2066, !dbg !1413

1637:                                             ; preds = %originalBBpart2437
  %1638 = load i32, i32* @x.19
  %1639 = load i32, i32* @y.20
  %1640 = sub i32 %1638, 1
  %1641 = mul i32 %1638, %1640
  %1642 = urem i32 %1641, 2
  %1643 = icmp eq i32 %1642, 0
  %1644 = icmp slt i32 %1639, 10
  %1645 = or i1 %1643, %1644
  br i1 %1645, label %originalBB439, label %originalBB439alteredBB

originalBB439:                                    ; preds = %1637, %originalBB439alteredBB
  %1646 = load i8*, i8** %21, align 8, !dbg !1414
  %1647 = load i64, i64* %28, align 8, !dbg !1415
  %1648 = add i64 %1647, 1, !dbg !1416
  %1649 = getelementptr inbounds i8, i8* %1646, i64 %1648, !dbg !1414
  %1650 = load i8, i8* %1649, align 1, !dbg !1414
  %1651 = sext i8 %1650 to i32, !dbg !1414
  %1652 = icmp eq i32 %1651, 63, !dbg !1417
  %1653 = load i32, i32* @x.19
  %1654 = load i32, i32* @y.20
  %1655 = sub i32 %1653, 1
  %1656 = mul i32 %1653, %1655
  %1657 = urem i32 %1656, 2
  %1658 = icmp eq i32 %1657, 0
  %1659 = icmp slt i32 %1654, 10
  %1660 = or i1 %1658, %1659
  br i1 %1660, label %originalBBpart2447, label %originalBB439alteredBB

originalBBpart2447:                               ; preds = %originalBB439
  br i1 %1652, label %1661, label %2066, !dbg !1418

1661:                                             ; preds = %originalBBpart2447
  %1662 = load i32, i32* @x.19
  %1663 = load i32, i32* @y.20
  %1664 = sub i32 %1662, 1
  %1665 = mul i32 %1662, %1664
  %1666 = urem i32 %1665, 2
  %1667 = icmp eq i32 %1666, 0
  %1668 = icmp slt i32 %1663, 10
  %1669 = or i1 %1667, %1668
  br i1 %1669, label %originalBB449, label %originalBB449alteredBB

originalBB449:                                    ; preds = %1661, %originalBB449alteredBB
  %1670 = load i8*, i8** %21, align 8, !dbg !1419
  %1671 = load i64, i64* %28, align 8, !dbg !1420
  %1672 = add i64 %1671, 2, !dbg !1421
  %1673 = getelementptr inbounds i8, i8* %1670, i64 %1672, !dbg !1419
  %1674 = load i8, i8* %1673, align 1, !dbg !1419
  %1675 = sext i8 %1674 to i32, !dbg !1419
  %1676 = load i32, i32* @x.19
  %1677 = load i32, i32* @y.20
  %1678 = sub i32 %1676, 1
  %1679 = mul i32 %1676, %1678
  %1680 = urem i32 %1679, 2
  %1681 = icmp eq i32 %1680, 0
  %1682 = icmp slt i32 %1677, 10
  %1683 = or i1 %1681, %1682
  br i1 %1683, label %originalBBpart2454, label %originalBB449alteredBB

originalBBpart2454:                               ; preds = %originalBB449
  switch i32 %1675, label %2032 [
    i32 33, label %1684
    i32 39, label %1684
    i32 40, label %1684
    i32 41, label %1684
    i32 45, label %1684
    i32 47, label %1684
    i32 60, label %1684
    i32 61, label %1684
    i32 62, label %1684
  ], !dbg !1422

1684:                                             ; preds = %originalBBpart2454, %originalBBpart2454, %originalBBpart2454, %originalBBpart2454, %originalBBpart2454, %originalBBpart2454, %originalBBpart2454, %originalBBpart2454, %originalBBpart2454
  %1685 = load i32, i32* @x.19
  %1686 = load i32, i32* @y.20
  %1687 = sub i32 %1685, 1
  %1688 = mul i32 %1685, %1687
  %1689 = urem i32 %1688, 2
  %1690 = icmp eq i32 %1689, 0
  %1691 = icmp slt i32 %1686, 10
  %1692 = or i1 %1690, %1691
  br i1 %1692, label %originalBB456, label %originalBB456alteredBB

originalBB456:                                    ; preds = %1684, %originalBB456alteredBB
  %1693 = load i8, i8* %35, align 1, !dbg !1423
  %1694 = trunc i8 %1693 to i1, !dbg !1423
  %1695 = load i32, i32* @x.19
  %1696 = load i32, i32* @y.20
  %1697 = sub i32 %1695, 1
  %1698 = mul i32 %1695, %1697
  %1699 = urem i32 %1698, 2
  %1700 = icmp eq i32 %1699, 0
  %1701 = icmp slt i32 %1696, 10
  %1702 = or i1 %1700, %1701
  br i1 %1702, label %originalBBpart2458, label %originalBB456alteredBB

originalBBpart2458:                               ; preds = %originalBB456
  br i1 %1694, label %1703, label %1720, !dbg !1426

1703:                                             ; preds = %originalBBpart2458
  %1704 = load i32, i32* @x.19
  %1705 = load i32, i32* @y.20
  %1706 = sub i32 %1704, 1
  %1707 = mul i32 %1704, %1706
  %1708 = urem i32 %1707, 2
  %1709 = icmp eq i32 %1708, 0
  %1710 = icmp slt i32 %1705, 10
  %1711 = or i1 %1709, %1710
  br i1 %1711, label %originalBB460, label %originalBB460alteredBB

originalBB460:                                    ; preds = %1703, %originalBB460alteredBB
  %1712 = load i32, i32* @x.19
  %1713 = load i32, i32* @y.20
  %1714 = sub i32 %1712, 1
  %1715 = mul i32 %1712, %1714
  %1716 = urem i32 %1715, 2
  %1717 = icmp eq i32 %1716, 0
  %1718 = icmp slt i32 %1713, 10
  %1719 = or i1 %1717, %1718
  br i1 %1719, label %originalBBpart2462, label %originalBB460alteredBB

originalBBpart2462:                               ; preds = %originalBB460
  br label %5870, !dbg !1427

1720:                                             ; preds = %originalBBpart2458
  %1721 = load i32, i32* @x.19
  %1722 = load i32, i32* @y.20
  %1723 = sub i32 %1721, 1
  %1724 = mul i32 %1721, %1723
  %1725 = urem i32 %1724, 2
  %1726 = icmp eq i32 %1725, 0
  %1727 = icmp slt i32 %1722, 10
  %1728 = or i1 %1726, %1727
  br i1 %1728, label %originalBB464, label %originalBB464alteredBB

originalBB464:                                    ; preds = %1720, %originalBB464alteredBB
  %1729 = load i8*, i8** %21, align 8, !dbg !1428
  %1730 = load i64, i64* %28, align 8, !dbg !1429
  %1731 = add i64 %1730, 2, !dbg !1430
  %1732 = getelementptr inbounds i8, i8* %1729, i64 %1731, !dbg !1428
  %1733 = load i8, i8* %1732, align 1, !dbg !1428
  store i8 %1733, i8* %39, align 1, !dbg !1431
  %1734 = load i64, i64* %28, align 8, !dbg !1432
  %1735 = add i64 %1734, 2, !dbg !1432
  store i64 %1735, i64* %28, align 8, !dbg !1432
  %1736 = load i32, i32* @x.19
  %1737 = load i32, i32* @y.20
  %1738 = sub i32 %1736, 1
  %1739 = mul i32 %1736, %1738
  %1740 = urem i32 %1739, 2
  %1741 = icmp eq i32 %1740, 0
  %1742 = icmp slt i32 %1737, 10
  %1743 = or i1 %1741, %1742
  br i1 %1743, label %originalBBpart2478, label %originalBB464alteredBB

originalBBpart2478:                               ; preds = %originalBB464
  br label %1744, !dbg !1433

1744:                                             ; preds = %originalBBpart2478
  %1745 = load i32, i32* @x.19
  %1746 = load i32, i32* @y.20
  %1747 = sub i32 %1745, 1
  %1748 = mul i32 %1745, %1747
  %1749 = urem i32 %1748, 2
  %1750 = icmp eq i32 %1749, 0
  %1751 = icmp slt i32 %1746, 10
  %1752 = or i1 %1750, %1751
  br i1 %1752, label %originalBB480, label %originalBB480alteredBB

originalBB480:                                    ; preds = %1744, %originalBB480alteredBB
  %1753 = load i64, i64* %29, align 8, !dbg !1434
  %1754 = load i64, i64* %20, align 8, !dbg !1434
  %1755 = icmp ult i64 %1753, %1754, !dbg !1434
  %1756 = load i32, i32* @x.19
  %1757 = load i32, i32* @y.20
  %1758 = sub i32 %1756, 1
  %1759 = mul i32 %1756, %1758
  %1760 = urem i32 %1759, 2
  %1761 = icmp eq i32 %1760, 0
  %1762 = icmp slt i32 %1757, 10
  %1763 = or i1 %1761, %1762
  br i1 %1763, label %originalBBpart2482, label %originalBB480alteredBB

originalBBpart2482:                               ; preds = %originalBB480
  br i1 %1755, label %1764, label %1784, !dbg !1437

1764:                                             ; preds = %originalBBpart2482
  %1765 = load i32, i32* @x.19
  %1766 = load i32, i32* @y.20
  %1767 = sub i32 %1765, 1
  %1768 = mul i32 %1765, %1767
  %1769 = urem i32 %1768, 2
  %1770 = icmp eq i32 %1769, 0
  %1771 = icmp slt i32 %1766, 10
  %1772 = or i1 %1770, %1771
  br i1 %1772, label %originalBB484, label %originalBB484alteredBB

originalBB484:                                    ; preds = %1764, %originalBB484alteredBB
  %1773 = load i8*, i8** %19, align 8, !dbg !1434
  %1774 = load i64, i64* %29, align 8, !dbg !1434
  %1775 = getelementptr inbounds i8, i8* %1773, i64 %1774, !dbg !1434
  store i8 63, i8* %1775, align 1, !dbg !1434
  %1776 = load i32, i32* @x.19
  %1777 = load i32, i32* @y.20
  %1778 = sub i32 %1776, 1
  %1779 = mul i32 %1776, %1778
  %1780 = urem i32 %1779, 2
  %1781 = icmp eq i32 %1780, 0
  %1782 = icmp slt i32 %1777, 10
  %1783 = or i1 %1781, %1782
  br i1 %1783, label %originalBBpart2486, label %originalBB484alteredBB

originalBBpart2486:                               ; preds = %originalBB484
  br label %1784, !dbg !1434

1784:                                             ; preds = %originalBBpart2486, %originalBBpart2482
  %1785 = load i32, i32* @x.19
  %1786 = load i32, i32* @y.20
  %1787 = sub i32 %1785, 1
  %1788 = mul i32 %1785, %1787
  %1789 = urem i32 %1788, 2
  %1790 = icmp eq i32 %1789, 0
  %1791 = icmp slt i32 %1786, 10
  %1792 = or i1 %1790, %1791
  br i1 %1792, label %originalBB488, label %originalBB488alteredBB

originalBB488:                                    ; preds = %1784, %originalBB488alteredBB
  %1793 = load i64, i64* %29, align 8, !dbg !1437
  %1794 = add i64 %1793, 1, !dbg !1437
  store i64 %1794, i64* %29, align 8, !dbg !1437
  %1795 = load i32, i32* @x.19
  %1796 = load i32, i32* @y.20
  %1797 = sub i32 %1795, 1
  %1798 = mul i32 %1795, %1797
  %1799 = urem i32 %1798, 2
  %1800 = icmp eq i32 %1799, 0
  %1801 = icmp slt i32 %1796, 10
  %1802 = or i1 %1800, %1801
  br i1 %1802, label %originalBBpart2493, label %originalBB488alteredBB

originalBBpart2493:                               ; preds = %originalBB488
  br label %1803, !dbg !1437

1803:                                             ; preds = %originalBBpart2493
  %1804 = load i32, i32* @x.19
  %1805 = load i32, i32* @y.20
  %1806 = sub i32 %1804, 1
  %1807 = mul i32 %1804, %1806
  %1808 = urem i32 %1807, 2
  %1809 = icmp eq i32 %1808, 0
  %1810 = icmp slt i32 %1805, 10
  %1811 = or i1 %1809, %1810
  br i1 %1811, label %originalBB495, label %originalBB495alteredBB

originalBB495:                                    ; preds = %1803, %originalBB495alteredBB
  %1812 = load i32, i32* @x.19
  %1813 = load i32, i32* @y.20
  %1814 = sub i32 %1812, 1
  %1815 = mul i32 %1812, %1814
  %1816 = urem i32 %1815, 2
  %1817 = icmp eq i32 %1816, 0
  %1818 = icmp slt i32 %1813, 10
  %1819 = or i1 %1817, %1818
  br i1 %1819, label %originalBBpart2497, label %originalBB495alteredBB

originalBBpart2497:                               ; preds = %originalBB495
  br label %1820, !dbg !1438

1820:                                             ; preds = %originalBBpart2497
  %1821 = load i32, i32* @x.19
  %1822 = load i32, i32* @y.20
  %1823 = sub i32 %1821, 1
  %1824 = mul i32 %1821, %1823
  %1825 = urem i32 %1824, 2
  %1826 = icmp eq i32 %1825, 0
  %1827 = icmp slt i32 %1822, 10
  %1828 = or i1 %1826, %1827
  br i1 %1828, label %originalBB499, label %originalBB499alteredBB

originalBB499:                                    ; preds = %1820, %originalBB499alteredBB
  %1829 = load i64, i64* %29, align 8, !dbg !1439
  %1830 = load i64, i64* %20, align 8, !dbg !1439
  %1831 = icmp ult i64 %1829, %1830, !dbg !1439
  %1832 = load i32, i32* @x.19
  %1833 = load i32, i32* @y.20
  %1834 = sub i32 %1832, 1
  %1835 = mul i32 %1832, %1834
  %1836 = urem i32 %1835, 2
  %1837 = icmp eq i32 %1836, 0
  %1838 = icmp slt i32 %1833, 10
  %1839 = or i1 %1837, %1838
  br i1 %1839, label %originalBBpart2501, label %originalBB499alteredBB

originalBBpart2501:                               ; preds = %originalBB499
  br i1 %1831, label %1840, label %1860, !dbg !1442

1840:                                             ; preds = %originalBBpart2501
  %1841 = load i32, i32* @x.19
  %1842 = load i32, i32* @y.20
  %1843 = sub i32 %1841, 1
  %1844 = mul i32 %1841, %1843
  %1845 = urem i32 %1844, 2
  %1846 = icmp eq i32 %1845, 0
  %1847 = icmp slt i32 %1842, 10
  %1848 = or i1 %1846, %1847
  br i1 %1848, label %originalBB503, label %originalBB503alteredBB

originalBB503:                                    ; preds = %1840, %originalBB503alteredBB
  %1849 = load i8*, i8** %19, align 8, !dbg !1439
  %1850 = load i64, i64* %29, align 8, !dbg !1439
  %1851 = getelementptr inbounds i8, i8* %1849, i64 %1850, !dbg !1439
  store i8 34, i8* %1851, align 1, !dbg !1439
  %1852 = load i32, i32* @x.19
  %1853 = load i32, i32* @y.20
  %1854 = sub i32 %1852, 1
  %1855 = mul i32 %1852, %1854
  %1856 = urem i32 %1855, 2
  %1857 = icmp eq i32 %1856, 0
  %1858 = icmp slt i32 %1853, 10
  %1859 = or i1 %1857, %1858
  br i1 %1859, label %originalBBpart2505, label %originalBB503alteredBB

originalBBpart2505:                               ; preds = %originalBB503
  br label %1860, !dbg !1439

1860:                                             ; preds = %originalBBpart2505, %originalBBpart2501
  %1861 = load i32, i32* @x.19
  %1862 = load i32, i32* @y.20
  %1863 = sub i32 %1861, 1
  %1864 = mul i32 %1861, %1863
  %1865 = urem i32 %1864, 2
  %1866 = icmp eq i32 %1865, 0
  %1867 = icmp slt i32 %1862, 10
  %1868 = or i1 %1866, %1867
  br i1 %1868, label %originalBB507, label %originalBB507alteredBB

originalBB507:                                    ; preds = %1860, %originalBB507alteredBB
  %1869 = load i64, i64* %29, align 8, !dbg !1442
  %1870 = add i64 %1869, 1, !dbg !1442
  store i64 %1870, i64* %29, align 8, !dbg !1442
  %1871 = load i32, i32* @x.19
  %1872 = load i32, i32* @y.20
  %1873 = sub i32 %1871, 1
  %1874 = mul i32 %1871, %1873
  %1875 = urem i32 %1874, 2
  %1876 = icmp eq i32 %1875, 0
  %1877 = icmp slt i32 %1872, 10
  %1878 = or i1 %1876, %1877
  br i1 %1878, label %originalBBpart2519, label %originalBB507alteredBB

originalBBpart2519:                               ; preds = %originalBB507
  br label %1879, !dbg !1442

1879:                                             ; preds = %originalBBpart2519
  %1880 = load i32, i32* @x.19
  %1881 = load i32, i32* @y.20
  %1882 = sub i32 %1880, 1
  %1883 = mul i32 %1880, %1882
  %1884 = urem i32 %1883, 2
  %1885 = icmp eq i32 %1884, 0
  %1886 = icmp slt i32 %1881, 10
  %1887 = or i1 %1885, %1886
  br i1 %1887, label %originalBB521, label %originalBB521alteredBB

originalBB521:                                    ; preds = %1879, %originalBB521alteredBB
  %1888 = load i32, i32* @x.19
  %1889 = load i32, i32* @y.20
  %1890 = sub i32 %1888, 1
  %1891 = mul i32 %1888, %1890
  %1892 = urem i32 %1891, 2
  %1893 = icmp eq i32 %1892, 0
  %1894 = icmp slt i32 %1889, 10
  %1895 = or i1 %1893, %1894
  br i1 %1895, label %originalBBpart2523, label %originalBB521alteredBB

originalBBpart2523:                               ; preds = %originalBB521
  br label %1896, !dbg !1443

1896:                                             ; preds = %originalBBpart2523
  %1897 = load i32, i32* @x.19
  %1898 = load i32, i32* @y.20
  %1899 = sub i32 %1897, 1
  %1900 = mul i32 %1897, %1899
  %1901 = urem i32 %1900, 2
  %1902 = icmp eq i32 %1901, 0
  %1903 = icmp slt i32 %1898, 10
  %1904 = or i1 %1902, %1903
  br i1 %1904, label %originalBB525, label %originalBB525alteredBB

originalBB525:                                    ; preds = %1896, %originalBB525alteredBB
  %1905 = load i64, i64* %29, align 8, !dbg !1444
  %1906 = load i64, i64* %20, align 8, !dbg !1444
  %1907 = icmp ult i64 %1905, %1906, !dbg !1444
  %1908 = load i32, i32* @x.19
  %1909 = load i32, i32* @y.20
  %1910 = sub i32 %1908, 1
  %1911 = mul i32 %1908, %1910
  %1912 = urem i32 %1911, 2
  %1913 = icmp eq i32 %1912, 0
  %1914 = icmp slt i32 %1909, 10
  %1915 = or i1 %1913, %1914
  br i1 %1915, label %originalBBpart2527, label %originalBB525alteredBB

originalBBpart2527:                               ; preds = %originalBB525
  br i1 %1907, label %1916, label %1936, !dbg !1447

1916:                                             ; preds = %originalBBpart2527
  %1917 = load i32, i32* @x.19
  %1918 = load i32, i32* @y.20
  %1919 = sub i32 %1917, 1
  %1920 = mul i32 %1917, %1919
  %1921 = urem i32 %1920, 2
  %1922 = icmp eq i32 %1921, 0
  %1923 = icmp slt i32 %1918, 10
  %1924 = or i1 %1922, %1923
  br i1 %1924, label %originalBB529, label %originalBB529alteredBB

originalBB529:                                    ; preds = %1916, %originalBB529alteredBB
  %1925 = load i8*, i8** %19, align 8, !dbg !1444
  %1926 = load i64, i64* %29, align 8, !dbg !1444
  %1927 = getelementptr inbounds i8, i8* %1925, i64 %1926, !dbg !1444
  store i8 34, i8* %1927, align 1, !dbg !1444
  %1928 = load i32, i32* @x.19
  %1929 = load i32, i32* @y.20
  %1930 = sub i32 %1928, 1
  %1931 = mul i32 %1928, %1930
  %1932 = urem i32 %1931, 2
  %1933 = icmp eq i32 %1932, 0
  %1934 = icmp slt i32 %1929, 10
  %1935 = or i1 %1933, %1934
  br i1 %1935, label %originalBBpart2531, label %originalBB529alteredBB

originalBBpart2531:                               ; preds = %originalBB529
  br label %1936, !dbg !1444

1936:                                             ; preds = %originalBBpart2531, %originalBBpart2527
  %1937 = load i32, i32* @x.19
  %1938 = load i32, i32* @y.20
  %1939 = sub i32 %1937, 1
  %1940 = mul i32 %1937, %1939
  %1941 = urem i32 %1940, 2
  %1942 = icmp eq i32 %1941, 0
  %1943 = icmp slt i32 %1938, 10
  %1944 = or i1 %1942, %1943
  br i1 %1944, label %originalBB533, label %originalBB533alteredBB

originalBB533:                                    ; preds = %1936, %originalBB533alteredBB
  %1945 = load i64, i64* %29, align 8, !dbg !1447
  %1946 = add i64 %1945, 1, !dbg !1447
  store i64 %1946, i64* %29, align 8, !dbg !1447
  %1947 = load i32, i32* @x.19
  %1948 = load i32, i32* @y.20
  %1949 = sub i32 %1947, 1
  %1950 = mul i32 %1947, %1949
  %1951 = urem i32 %1950, 2
  %1952 = icmp eq i32 %1951, 0
  %1953 = icmp slt i32 %1948, 10
  %1954 = or i1 %1952, %1953
  br i1 %1954, label %originalBBpart2537, label %originalBB533alteredBB

originalBBpart2537:                               ; preds = %originalBB533
  br label %1955, !dbg !1447

1955:                                             ; preds = %originalBBpart2537
  br label %1956, !dbg !1448

1956:                                             ; preds = %1955
  %1957 = load i32, i32* @x.19
  %1958 = load i32, i32* @y.20
  %1959 = sub i32 %1957, 1
  %1960 = mul i32 %1957, %1959
  %1961 = urem i32 %1960, 2
  %1962 = icmp eq i32 %1961, 0
  %1963 = icmp slt i32 %1958, 10
  %1964 = or i1 %1962, %1963
  br i1 %1964, label %originalBB539, label %originalBB539alteredBB

originalBB539:                                    ; preds = %1956, %originalBB539alteredBB
  %1965 = load i64, i64* %29, align 8, !dbg !1449
  %1966 = load i64, i64* %20, align 8, !dbg !1449
  %1967 = icmp ult i64 %1965, %1966, !dbg !1449
  %1968 = load i32, i32* @x.19
  %1969 = load i32, i32* @y.20
  %1970 = sub i32 %1968, 1
  %1971 = mul i32 %1968, %1970
  %1972 = urem i32 %1971, 2
  %1973 = icmp eq i32 %1972, 0
  %1974 = icmp slt i32 %1969, 10
  %1975 = or i1 %1973, %1974
  br i1 %1975, label %originalBBpart2541, label %originalBB539alteredBB

originalBBpart2541:                               ; preds = %originalBB539
  br i1 %1967, label %1976, label %1996, !dbg !1452

1976:                                             ; preds = %originalBBpart2541
  %1977 = load i32, i32* @x.19
  %1978 = load i32, i32* @y.20
  %1979 = sub i32 %1977, 1
  %1980 = mul i32 %1977, %1979
  %1981 = urem i32 %1980, 2
  %1982 = icmp eq i32 %1981, 0
  %1983 = icmp slt i32 %1978, 10
  %1984 = or i1 %1982, %1983
  br i1 %1984, label %originalBB543, label %originalBB543alteredBB

originalBB543:                                    ; preds = %1976, %originalBB543alteredBB
  %1985 = load i8*, i8** %19, align 8, !dbg !1449
  %1986 = load i64, i64* %29, align 8, !dbg !1449
  %1987 = getelementptr inbounds i8, i8* %1985, i64 %1986, !dbg !1449
  store i8 63, i8* %1987, align 1, !dbg !1449
  %1988 = load i32, i32* @x.19
  %1989 = load i32, i32* @y.20
  %1990 = sub i32 %1988, 1
  %1991 = mul i32 %1988, %1990
  %1992 = urem i32 %1991, 2
  %1993 = icmp eq i32 %1992, 0
  %1994 = icmp slt i32 %1989, 10
  %1995 = or i1 %1993, %1994
  br i1 %1995, label %originalBBpart2545, label %originalBB543alteredBB

originalBBpart2545:                               ; preds = %originalBB543
  br label %1996, !dbg !1449

1996:                                             ; preds = %originalBBpart2545, %originalBBpart2541
  %1997 = load i32, i32* @x.19
  %1998 = load i32, i32* @y.20
  %1999 = sub i32 %1997, 1
  %2000 = mul i32 %1997, %1999
  %2001 = urem i32 %2000, 2
  %2002 = icmp eq i32 %2001, 0
  %2003 = icmp slt i32 %1998, 10
  %2004 = or i1 %2002, %2003
  br i1 %2004, label %originalBB547, label %originalBB547alteredBB

originalBB547:                                    ; preds = %1996, %originalBB547alteredBB
  %2005 = load i64, i64* %29, align 8, !dbg !1452
  %2006 = add i64 %2005, 1, !dbg !1452
  store i64 %2006, i64* %29, align 8, !dbg !1452
  %2007 = load i32, i32* @x.19
  %2008 = load i32, i32* @y.20
  %2009 = sub i32 %2007, 1
  %2010 = mul i32 %2007, %2009
  %2011 = urem i32 %2010, 2
  %2012 = icmp eq i32 %2011, 0
  %2013 = icmp slt i32 %2008, 10
  %2014 = or i1 %2012, %2013
  br i1 %2014, label %originalBBpart2560, label %originalBB547alteredBB

originalBBpart2560:                               ; preds = %originalBB547
  br label %2015, !dbg !1452

2015:                                             ; preds = %originalBBpart2560
  %2016 = load i32, i32* @x.19
  %2017 = load i32, i32* @y.20
  %2018 = sub i32 %2016, 1
  %2019 = mul i32 %2016, %2018
  %2020 = urem i32 %2019, 2
  %2021 = icmp eq i32 %2020, 0
  %2022 = icmp slt i32 %2017, 10
  %2023 = or i1 %2021, %2022
  br i1 %2023, label %originalBB562, label %originalBB562alteredBB

originalBB562:                                    ; preds = %2015, %originalBB562alteredBB
  %2024 = load i32, i32* @x.19
  %2025 = load i32, i32* @y.20
  %2026 = sub i32 %2024, 1
  %2027 = mul i32 %2024, %2026
  %2028 = urem i32 %2027, 2
  %2029 = icmp eq i32 %2028, 0
  %2030 = icmp slt i32 %2025, 10
  %2031 = or i1 %2029, %2030
  br i1 %2031, label %originalBBpart2564, label %originalBB562alteredBB

originalBBpart2564:                               ; preds = %originalBB562
  br label %2049, !dbg !1453

2032:                                             ; preds = %originalBBpart2454
  %2033 = load i32, i32* @x.19
  %2034 = load i32, i32* @y.20
  %2035 = sub i32 %2033, 1
  %2036 = mul i32 %2033, %2035
  %2037 = urem i32 %2036, 2
  %2038 = icmp eq i32 %2037, 0
  %2039 = icmp slt i32 %2034, 10
  %2040 = or i1 %2038, %2039
  br i1 %2040, label %originalBB566, label %originalBB566alteredBB

originalBB566:                                    ; preds = %2032, %originalBB566alteredBB
  %2041 = load i32, i32* @x.19
  %2042 = load i32, i32* @y.20
  %2043 = sub i32 %2041, 1
  %2044 = mul i32 %2041, %2043
  %2045 = urem i32 %2044, 2
  %2046 = icmp eq i32 %2045, 0
  %2047 = icmp slt i32 %2042, 10
  %2048 = or i1 %2046, %2047
  br i1 %2048, label %originalBBpart2568, label %originalBB566alteredBB

originalBBpart2568:                               ; preds = %originalBB566
  br label %2049, !dbg !1454

2049:                                             ; preds = %originalBBpart2568, %originalBBpart2564
  %2050 = load i32, i32* @x.19
  %2051 = load i32, i32* @y.20
  %2052 = sub i32 %2050, 1
  %2053 = mul i32 %2050, %2052
  %2054 = urem i32 %2053, 2
  %2055 = icmp eq i32 %2054, 0
  %2056 = icmp slt i32 %2051, 10
  %2057 = or i1 %2055, %2056
  br i1 %2057, label %originalBB570, label %originalBB570alteredBB

originalBB570:                                    ; preds = %2049, %originalBB570alteredBB
  %2058 = load i32, i32* @x.19
  %2059 = load i32, i32* @y.20
  %2060 = sub i32 %2058, 1
  %2061 = mul i32 %2058, %2060
  %2062 = urem i32 %2061, 2
  %2063 = icmp eq i32 %2062, 0
  %2064 = icmp slt i32 %2059, 10
  %2065 = or i1 %2063, %2064
  br i1 %2065, label %originalBBpart2572, label %originalBB570alteredBB

originalBBpart2572:                               ; preds = %originalBB570
  br label %2066, !dbg !1455

2066:                                             ; preds = %originalBBpart2572, %originalBBpart2447, %originalBBpart2437, %originalBBpart2432
  br label %2084, !dbg !1456

2067:                                             ; preds = %originalBBpart2407
  %2068 = load i32, i32* @x.19
  %2069 = load i32, i32* @y.20
  %2070 = sub i32 %2068, 1
  %2071 = mul i32 %2068, %2070
  %2072 = urem i32 %2071, 2
  %2073 = icmp eq i32 %2072, 0
  %2074 = icmp slt i32 %2069, 10
  %2075 = or i1 %2073, %2074
  br i1 %2075, label %originalBB574, label %originalBB574alteredBB

originalBB574:                                    ; preds = %2067, %originalBB574alteredBB
  %2076 = load i32, i32* @x.19
  %2077 = load i32, i32* @y.20
  %2078 = sub i32 %2076, 1
  %2079 = mul i32 %2076, %2078
  %2080 = urem i32 %2079, 2
  %2081 = icmp eq i32 %2080, 0
  %2082 = icmp slt i32 %2077, 10
  %2083 = or i1 %2081, %2082
  br i1 %2083, label %originalBBpart2576, label %originalBB574alteredBB

originalBBpart2576:                               ; preds = %originalBB574
  br label %2084, !dbg !1457

2084:                                             ; preds = %originalBBpart2576, %2066, %originalBBpart2415
  %2085 = load i32, i32* @x.19
  %2086 = load i32, i32* @y.20
  %2087 = sub i32 %2085, 1
  %2088 = mul i32 %2085, %2087
  %2089 = urem i32 %2088, 2
  %2090 = icmp eq i32 %2089, 0
  %2091 = icmp slt i32 %2086, 10
  %2092 = or i1 %2090, %2091
  br i1 %2092, label %originalBB578, label %originalBB578alteredBB

originalBB578:                                    ; preds = %2084, %originalBB578alteredBB
  %2093 = load i32, i32* @x.19
  %2094 = load i32, i32* @y.20
  %2095 = sub i32 %2093, 1
  %2096 = mul i32 %2093, %2095
  %2097 = urem i32 %2096, 2
  %2098 = icmp eq i32 %2097, 0
  %2099 = icmp slt i32 %2094, 10
  %2100 = or i1 %2098, %2099
  br i1 %2100, label %originalBBpart2580, label %originalBB578alteredBB

originalBBpart2580:                               ; preds = %originalBB578
  br label %4505, !dbg !1458

2101:                                             ; preds = %originalBBpart2218
  store i8 97, i8* %40, align 1, !dbg !1459
  br label %2344, !dbg !1460

2102:                                             ; preds = %originalBBpart2218
  store i8 98, i8* %40, align 1, !dbg !1461
  br label %2344, !dbg !1462

2103:                                             ; preds = %originalBBpart2218
  %2104 = load i32, i32* @x.19
  %2105 = load i32, i32* @y.20
  %2106 = sub i32 %2104, 1
  %2107 = mul i32 %2104, %2106
  %2108 = urem i32 %2107, 2
  %2109 = icmp eq i32 %2108, 0
  %2110 = icmp slt i32 %2105, 10
  %2111 = or i1 %2109, %2110
  br i1 %2111, label %originalBB582, label %originalBB582alteredBB

originalBB582:                                    ; preds = %2103, %originalBB582alteredBB
  store i8 102, i8* %40, align 1, !dbg !1463
  %2112 = load i32, i32* @x.19
  %2113 = load i32, i32* @y.20
  %2114 = sub i32 %2112, 1
  %2115 = mul i32 %2112, %2114
  %2116 = urem i32 %2115, 2
  %2117 = icmp eq i32 %2116, 0
  %2118 = icmp slt i32 %2113, 10
  %2119 = or i1 %2117, %2118
  br i1 %2119, label %originalBBpart2584, label %originalBB582alteredBB

originalBBpart2584:                               ; preds = %originalBB582
  br label %2344, !dbg !1464

2120:                                             ; preds = %originalBBpart2218
  %2121 = load i32, i32* @x.19
  %2122 = load i32, i32* @y.20
  %2123 = sub i32 %2121, 1
  %2124 = mul i32 %2121, %2123
  %2125 = urem i32 %2124, 2
  %2126 = icmp eq i32 %2125, 0
  %2127 = icmp slt i32 %2122, 10
  %2128 = or i1 %2126, %2127
  br i1 %2128, label %originalBB586, label %originalBB586alteredBB

originalBB586:                                    ; preds = %2120, %originalBB586alteredBB
  store i8 110, i8* %40, align 1, !dbg !1465
  %2129 = load i32, i32* @x.19
  %2130 = load i32, i32* @y.20
  %2131 = sub i32 %2129, 1
  %2132 = mul i32 %2129, %2131
  %2133 = urem i32 %2132, 2
  %2134 = icmp eq i32 %2133, 0
  %2135 = icmp slt i32 %2130, 10
  %2136 = or i1 %2134, %2135
  br i1 %2136, label %originalBBpart2588, label %originalBB586alteredBB

originalBBpart2588:                               ; preds = %originalBB586
  br label %2288, !dbg !1466

2137:                                             ; preds = %originalBBpart2218
  %2138 = load i32, i32* @x.19
  %2139 = load i32, i32* @y.20
  %2140 = sub i32 %2138, 1
  %2141 = mul i32 %2138, %2140
  %2142 = urem i32 %2141, 2
  %2143 = icmp eq i32 %2142, 0
  %2144 = icmp slt i32 %2139, 10
  %2145 = or i1 %2143, %2144
  br i1 %2145, label %originalBB590, label %originalBB590alteredBB

originalBB590:                                    ; preds = %2137, %originalBB590alteredBB
  store i8 114, i8* %40, align 1, !dbg !1467
  %2146 = load i32, i32* @x.19
  %2147 = load i32, i32* @y.20
  %2148 = sub i32 %2146, 1
  %2149 = mul i32 %2146, %2148
  %2150 = urem i32 %2149, 2
  %2151 = icmp eq i32 %2150, 0
  %2152 = icmp slt i32 %2147, 10
  %2153 = or i1 %2151, %2152
  br i1 %2153, label %originalBBpart2592, label %originalBB590alteredBB

originalBBpart2592:                               ; preds = %originalBB590
  br label %2288, !dbg !1468

2154:                                             ; preds = %originalBBpart2218
  %2155 = load i32, i32* @x.19
  %2156 = load i32, i32* @y.20
  %2157 = sub i32 %2155, 1
  %2158 = mul i32 %2155, %2157
  %2159 = urem i32 %2158, 2
  %2160 = icmp eq i32 %2159, 0
  %2161 = icmp slt i32 %2156, 10
  %2162 = or i1 %2160, %2161
  br i1 %2162, label %originalBB594, label %originalBB594alteredBB

originalBB594:                                    ; preds = %2154, %originalBB594alteredBB
  store i8 116, i8* %40, align 1, !dbg !1469
  %2163 = load i32, i32* @x.19
  %2164 = load i32, i32* @y.20
  %2165 = sub i32 %2163, 1
  %2166 = mul i32 %2163, %2165
  %2167 = urem i32 %2166, 2
  %2168 = icmp eq i32 %2167, 0
  %2169 = icmp slt i32 %2164, 10
  %2170 = or i1 %2168, %2169
  br i1 %2170, label %originalBBpart2596, label %originalBB594alteredBB

originalBBpart2596:                               ; preds = %originalBB594
  br label %2288, !dbg !1470

2171:                                             ; preds = %originalBBpart2218
  store i8 118, i8* %40, align 1, !dbg !1471
  br label %2344, !dbg !1472

2172:                                             ; preds = %originalBBpart2218
  %2173 = load i32, i32* @x.19
  %2174 = load i32, i32* @y.20
  %2175 = sub i32 %2173, 1
  %2176 = mul i32 %2173, %2175
  %2177 = urem i32 %2176, 2
  %2178 = icmp eq i32 %2177, 0
  %2179 = icmp slt i32 %2174, 10
  %2180 = or i1 %2178, %2179
  br i1 %2180, label %originalBB598, label %originalBB598alteredBB

originalBB598:                                    ; preds = %2172, %originalBB598alteredBB
  %2181 = load i8, i8* %39, align 1, !dbg !1473
  store i8 %2181, i8* %40, align 1, !dbg !1474
  %2182 = load i32, i32* %23, align 4, !dbg !1475
  %2183 = icmp eq i32 %2182, 2, !dbg !1477
  %2184 = load i32, i32* @x.19
  %2185 = load i32, i32* @y.20
  %2186 = sub i32 %2184, 1
  %2187 = mul i32 %2184, %2186
  %2188 = urem i32 %2187, 2
  %2189 = icmp eq i32 %2188, 0
  %2190 = icmp slt i32 %2185, 10
  %2191 = or i1 %2189, %2190
  br i1 %2191, label %originalBBpart2600, label %originalBB598alteredBB

originalBBpart2600:                               ; preds = %originalBB598
  br i1 %2183, label %2192, label %2213, !dbg !1478

2192:                                             ; preds = %originalBBpart2600
  %2193 = load i8, i8* %35, align 1, !dbg !1479
  %2194 = trunc i8 %2193 to i1, !dbg !1479
  br i1 %2194, label %2195, label %2212, !dbg !1482

2195:                                             ; preds = %2192
  %2196 = load i32, i32* @x.19
  %2197 = load i32, i32* @y.20
  %2198 = sub i32 %2196, 1
  %2199 = mul i32 %2196, %2198
  %2200 = urem i32 %2199, 2
  %2201 = icmp eq i32 %2200, 0
  %2202 = icmp slt i32 %2197, 10
  %2203 = or i1 %2201, %2202
  br i1 %2203, label %originalBB602, label %originalBB602alteredBB

originalBB602:                                    ; preds = %2195, %originalBB602alteredBB
  %2204 = load i32, i32* @x.19
  %2205 = load i32, i32* @y.20
  %2206 = sub i32 %2204, 1
  %2207 = mul i32 %2204, %2206
  %2208 = urem i32 %2207, 2
  %2209 = icmp eq i32 %2208, 0
  %2210 = icmp slt i32 %2205, 10
  %2211 = or i1 %2209, %2210
  br i1 %2211, label %originalBBpart2604, label %originalBB602alteredBB

originalBBpart2604:                               ; preds = %originalBB602
  br label %5870, !dbg !1483

2212:                                             ; preds = %2192
  br label %5030, !dbg !1484

2213:                                             ; preds = %originalBBpart2600
  %2214 = load i32, i32* @x.19
  %2215 = load i32, i32* @y.20
  %2216 = sub i32 %2214, 1
  %2217 = mul i32 %2214, %2216
  %2218 = urem i32 %2217, 2
  %2219 = icmp eq i32 %2218, 0
  %2220 = icmp slt i32 %2215, 10
  %2221 = or i1 %2219, %2220
  br i1 %2221, label %originalBB606, label %originalBB606alteredBB

originalBB606:                                    ; preds = %2213, %originalBB606alteredBB
  %2222 = load i8, i8* %33, align 1, !dbg !1485
  %2223 = trunc i8 %2222 to i1, !dbg !1485
  %2224 = load i32, i32* @x.19
  %2225 = load i32, i32* @y.20
  %2226 = sub i32 %2224, 1
  %2227 = mul i32 %2224, %2226
  %2228 = urem i32 %2227, 2
  %2229 = icmp eq i32 %2228, 0
  %2230 = icmp slt i32 %2225, 10
  %2231 = or i1 %2229, %2230
  br i1 %2231, label %originalBBpart2608, label %originalBB606alteredBB

originalBBpart2608:                               ; preds = %originalBB606
  br i1 %2223, label %2232, label %2271, !dbg !1487

2232:                                             ; preds = %originalBBpart2608
  %2233 = load i8, i8* %35, align 1, !dbg !1488
  %2234 = trunc i8 %2233 to i1, !dbg !1488
  br i1 %2234, label %2235, label %2271, !dbg !1489

2235:                                             ; preds = %2232
  %2236 = load i32, i32* @x.19
  %2237 = load i32, i32* @y.20
  %2238 = sub i32 %2236, 1
  %2239 = mul i32 %2236, %2238
  %2240 = urem i32 %2239, 2
  %2241 = icmp eq i32 %2240, 0
  %2242 = icmp slt i32 %2237, 10
  %2243 = or i1 %2241, %2242
  br i1 %2243, label %originalBB610, label %originalBB610alteredBB

originalBB610:                                    ; preds = %2235, %originalBB610alteredBB
  %2244 = load i64, i64* %32, align 8, !dbg !1490
  %2245 = icmp ne i64 %2244, 0, !dbg !1490
  %2246 = load i32, i32* @x.19
  %2247 = load i32, i32* @y.20
  %2248 = sub i32 %2246, 1
  %2249 = mul i32 %2246, %2248
  %2250 = urem i32 %2249, 2
  %2251 = icmp eq i32 %2250, 0
  %2252 = icmp slt i32 %2247, 10
  %2253 = or i1 %2251, %2252
  br i1 %2253, label %originalBBpart2612, label %originalBB610alteredBB

originalBBpart2612:                               ; preds = %originalBB610
  br i1 %2245, label %2254, label %2271, !dbg !1491

2254:                                             ; preds = %originalBBpart2612
  %2255 = load i32, i32* @x.19
  %2256 = load i32, i32* @y.20
  %2257 = sub i32 %2255, 1
  %2258 = mul i32 %2255, %2257
  %2259 = urem i32 %2258, 2
  %2260 = icmp eq i32 %2259, 0
  %2261 = icmp slt i32 %2256, 10
  %2262 = or i1 %2260, %2261
  br i1 %2262, label %originalBB614, label %originalBB614alteredBB

originalBB614:                                    ; preds = %2254, %originalBB614alteredBB
  %2263 = load i32, i32* @x.19
  %2264 = load i32, i32* @y.20
  %2265 = sub i32 %2263, 1
  %2266 = mul i32 %2263, %2265
  %2267 = urem i32 %2266, 2
  %2268 = icmp eq i32 %2267, 0
  %2269 = icmp slt i32 %2264, 10
  %2270 = or i1 %2268, %2269
  br i1 %2270, label %originalBBpart2616, label %originalBB614alteredBB

originalBBpart2616:                               ; preds = %originalBB614
  br label %5030, !dbg !1492

2271:                                             ; preds = %originalBBpart2612, %2232, %originalBBpart2608
  %2272 = load i32, i32* @x.19
  %2273 = load i32, i32* @y.20
  %2274 = sub i32 %2272, 1
  %2275 = mul i32 %2272, %2274
  %2276 = urem i32 %2275, 2
  %2277 = icmp eq i32 %2276, 0
  %2278 = icmp slt i32 %2273, 10
  %2279 = or i1 %2277, %2278
  br i1 %2279, label %originalBB618, label %originalBB618alteredBB

originalBB618:                                    ; preds = %2271, %originalBB618alteredBB
  %2280 = load i32, i32* @x.19
  %2281 = load i32, i32* @y.20
  %2282 = sub i32 %2280, 1
  %2283 = mul i32 %2280, %2282
  %2284 = urem i32 %2283, 2
  %2285 = icmp eq i32 %2284, 0
  %2286 = icmp slt i32 %2281, 10
  %2287 = or i1 %2285, %2286
  br i1 %2287, label %originalBBpart2620, label %originalBB618alteredBB

originalBBpart2620:                               ; preds = %originalBB618
  br label %2288, !dbg !1490

2288:                                             ; preds = %originalBBpart2620, %originalBBpart2596, %originalBBpart2592, %originalBBpart2588
  call void @llvm.dbg.label(metadata !1493), !dbg !1494
  %2289 = load i32, i32* @x.19
  %2290 = load i32, i32* @y.20
  %2291 = sub i32 %2289, 1
  %2292 = mul i32 %2289, %2291
  %2293 = urem i32 %2292, 2
  %2294 = icmp eq i32 %2293, 0
  %2295 = icmp slt i32 %2290, 10
  %2296 = or i1 %2294, %2295
  br i1 %2296, label %originalBB622, label %originalBB622alteredBB

originalBB622:                                    ; preds = %2288, %originalBB622alteredBB
  %2297 = load i32, i32* %23, align 4, !dbg !1495
  %2298 = icmp eq i32 %2297, 2, !dbg !1497
  %2299 = load i32, i32* @x.19
  %2300 = load i32, i32* @y.20
  %2301 = sub i32 %2299, 1
  %2302 = mul i32 %2299, %2301
  %2303 = urem i32 %2302, 2
  %2304 = icmp eq i32 %2303, 0
  %2305 = icmp slt i32 %2300, 10
  %2306 = or i1 %2304, %2305
  br i1 %2306, label %originalBBpart2624, label %originalBB622alteredBB

originalBBpart2624:                               ; preds = %originalBB622
  br i1 %2298, label %2307, label %2327, !dbg !1498

2307:                                             ; preds = %originalBBpart2624
  %2308 = load i8, i8* %35, align 1, !dbg !1499
  %2309 = trunc i8 %2308 to i1, !dbg !1499
  br i1 %2309, label %2310, label %2327, !dbg !1500

2310:                                             ; preds = %2307
  %2311 = load i32, i32* @x.19
  %2312 = load i32, i32* @y.20
  %2313 = sub i32 %2311, 1
  %2314 = mul i32 %2311, %2313
  %2315 = urem i32 %2314, 2
  %2316 = icmp eq i32 %2315, 0
  %2317 = icmp slt i32 %2312, 10
  %2318 = or i1 %2316, %2317
  br i1 %2318, label %originalBB626, label %originalBB626alteredBB

originalBB626:                                    ; preds = %2310, %originalBB626alteredBB
  %2319 = load i32, i32* @x.19
  %2320 = load i32, i32* @y.20
  %2321 = sub i32 %2319, 1
  %2322 = mul i32 %2319, %2321
  %2323 = urem i32 %2322, 2
  %2324 = icmp eq i32 %2323, 0
  %2325 = icmp slt i32 %2320, 10
  %2326 = or i1 %2324, %2325
  br i1 %2326, label %originalBBpart2628, label %originalBB626alteredBB

originalBBpart2628:                               ; preds = %originalBB626
  br label %5870, !dbg !1501

2327:                                             ; preds = %2307, %originalBBpart2624
  %2328 = load i32, i32* @x.19
  %2329 = load i32, i32* @y.20
  %2330 = sub i32 %2328, 1
  %2331 = mul i32 %2328, %2330
  %2332 = urem i32 %2331, 2
  %2333 = icmp eq i32 %2332, 0
  %2334 = icmp slt i32 %2329, 10
  %2335 = or i1 %2333, %2334
  br i1 %2335, label %originalBB630, label %originalBB630alteredBB

originalBB630:                                    ; preds = %2327, %originalBB630alteredBB
  %2336 = load i32, i32* @x.19
  %2337 = load i32, i32* @y.20
  %2338 = sub i32 %2336, 1
  %2339 = mul i32 %2336, %2338
  %2340 = urem i32 %2339, 2
  %2341 = icmp eq i32 %2340, 0
  %2342 = icmp slt i32 %2337, 10
  %2343 = or i1 %2341, %2342
  br i1 %2343, label %originalBBpart2632, label %originalBB630alteredBB

originalBBpart2632:                               ; preds = %originalBB630
  br label %2344, !dbg !1499

2344:                                             ; preds = %originalBBpart2632, %2171, %originalBBpart2584, %2102, %2101
  call void @llvm.dbg.label(metadata !1502), !dbg !1503
  %2345 = load i32, i32* @x.19
  %2346 = load i32, i32* @y.20
  %2347 = sub i32 %2345, 1
  %2348 = mul i32 %2345, %2347
  %2349 = urem i32 %2348, 2
  %2350 = icmp eq i32 %2349, 0
  %2351 = icmp slt i32 %2346, 10
  %2352 = or i1 %2350, %2351
  br i1 %2352, label %originalBB634, label %originalBB634alteredBB

originalBB634:                                    ; preds = %2344, %originalBB634alteredBB
  %2353 = load i8, i8* %33, align 1, !dbg !1504
  %2354 = trunc i8 %2353 to i1, !dbg !1504
  %2355 = load i32, i32* @x.19
  %2356 = load i32, i32* @y.20
  %2357 = sub i32 %2355, 1
  %2358 = mul i32 %2355, %2357
  %2359 = urem i32 %2358, 2
  %2360 = icmp eq i32 %2359, 0
  %2361 = icmp slt i32 %2356, 10
  %2362 = or i1 %2360, %2361
  br i1 %2362, label %originalBBpart2636, label %originalBB634alteredBB

originalBBpart2636:                               ; preds = %originalBB634
  br i1 %2354, label %2363, label %2381, !dbg !1506

2363:                                             ; preds = %originalBBpart2636
  %2364 = load i32, i32* @x.19
  %2365 = load i32, i32* @y.20
  %2366 = sub i32 %2364, 1
  %2367 = mul i32 %2364, %2366
  %2368 = urem i32 %2367, 2
  %2369 = icmp eq i32 %2368, 0
  %2370 = icmp slt i32 %2365, 10
  %2371 = or i1 %2369, %2370
  br i1 %2371, label %originalBB638, label %originalBB638alteredBB

originalBB638:                                    ; preds = %2363, %originalBB638alteredBB
  %2372 = load i8, i8* %40, align 1, !dbg !1507
  store i8 %2372, i8* %39, align 1, !dbg !1509
  %2373 = load i32, i32* @x.19
  %2374 = load i32, i32* @y.20
  %2375 = sub i32 %2373, 1
  %2376 = mul i32 %2373, %2375
  %2377 = urem i32 %2376, 2
  %2378 = icmp eq i32 %2377, 0
  %2379 = icmp slt i32 %2374, 10
  %2380 = or i1 %2378, %2379
  br i1 %2380, label %originalBBpart2640, label %originalBB638alteredBB

originalBBpart2640:                               ; preds = %originalBB638
  br label %4664, !dbg !1510

2381:                                             ; preds = %originalBBpart2636
  %2382 = load i32, i32* @x.19
  %2383 = load i32, i32* @y.20
  %2384 = sub i32 %2382, 1
  %2385 = mul i32 %2382, %2384
  %2386 = urem i32 %2385, 2
  %2387 = icmp eq i32 %2386, 0
  %2388 = icmp slt i32 %2383, 10
  %2389 = or i1 %2387, %2388
  br i1 %2389, label %originalBB642, label %originalBB642alteredBB

originalBB642:                                    ; preds = %2381, %originalBB642alteredBB
  %2390 = load i32, i32* @x.19
  %2391 = load i32, i32* @y.20
  %2392 = sub i32 %2390, 1
  %2393 = mul i32 %2390, %2392
  %2394 = urem i32 %2393, 2
  %2395 = icmp eq i32 %2394, 0
  %2396 = icmp slt i32 %2391, 10
  %2397 = or i1 %2395, %2396
  br i1 %2397, label %originalBBpart2644, label %originalBB642alteredBB

originalBBpart2644:                               ; preds = %originalBB642
  br label %4505, !dbg !1511

2398:                                             ; preds = %originalBBpart2218, %originalBBpart2218
  %2399 = load i32, i32* @x.19
  %2400 = load i32, i32* @y.20
  %2401 = sub i32 %2399, 1
  %2402 = mul i32 %2399, %2401
  %2403 = urem i32 %2402, 2
  %2404 = icmp eq i32 %2403, 0
  %2405 = icmp slt i32 %2400, 10
  %2406 = or i1 %2404, %2405
  br i1 %2406, label %originalBB646, label %originalBB646alteredBB

originalBB646:                                    ; preds = %2398, %originalBB646alteredBB
  %2407 = load i64, i64* %22, align 8, !dbg !1512
  %2408 = icmp eq i64 %2407, -1, !dbg !1514
  %2409 = load i32, i32* @x.19
  %2410 = load i32, i32* @y.20
  %2411 = sub i32 %2409, 1
  %2412 = mul i32 %2409, %2411
  %2413 = urem i32 %2412, 2
  %2414 = icmp eq i32 %2413, 0
  %2415 = icmp slt i32 %2410, 10
  %2416 = or i1 %2414, %2415
  br i1 %2416, label %originalBBpart2648, label %originalBB646alteredBB

originalBBpart2648:                               ; preds = %originalBB646
  br i1 %2408, label %2417, label %2439, !dbg !1515

2417:                                             ; preds = %originalBBpart2648
  %2418 = load i32, i32* @x.19
  %2419 = load i32, i32* @y.20
  %2420 = sub i32 %2418, 1
  %2421 = mul i32 %2418, %2420
  %2422 = urem i32 %2421, 2
  %2423 = icmp eq i32 %2422, 0
  %2424 = icmp slt i32 %2419, 10
  %2425 = or i1 %2423, %2424
  br i1 %2425, label %originalBB650, label %originalBB650alteredBB

originalBB650:                                    ; preds = %2417, %originalBB650alteredBB
  %2426 = load i8*, i8** %21, align 8, !dbg !1516
  %2427 = getelementptr inbounds i8, i8* %2426, i64 1, !dbg !1516
  %2428 = load i8, i8* %2427, align 1, !dbg !1516
  %2429 = sext i8 %2428 to i32, !dbg !1516
  %2430 = icmp eq i32 %2429, 0, !dbg !1517
  %2431 = load i32, i32* @x.19
  %2432 = load i32, i32* @y.20
  %2433 = sub i32 %2431, 1
  %2434 = mul i32 %2431, %2433
  %2435 = urem i32 %2434, 2
  %2436 = icmp eq i32 %2435, 0
  %2437 = icmp slt i32 %2432, 10
  %2438 = or i1 %2436, %2437
  br i1 %2438, label %originalBBpart2652, label %originalBB650alteredBB

originalBBpart2652:                               ; preds = %originalBB650
  br i1 %2430, label %2475, label %2458, !dbg !1512

2439:                                             ; preds = %originalBBpart2648
  %2440 = load i32, i32* @x.19
  %2441 = load i32, i32* @y.20
  %2442 = sub i32 %2440, 1
  %2443 = mul i32 %2440, %2442
  %2444 = urem i32 %2443, 2
  %2445 = icmp eq i32 %2444, 0
  %2446 = icmp slt i32 %2441, 10
  %2447 = or i1 %2445, %2446
  br i1 %2447, label %originalBB654, label %originalBB654alteredBB

originalBB654:                                    ; preds = %2439, %originalBB654alteredBB
  %2448 = load i64, i64* %22, align 8, !dbg !1518
  %2449 = icmp eq i64 %2448, 1, !dbg !1519
  %2450 = load i32, i32* @x.19
  %2451 = load i32, i32* @y.20
  %2452 = sub i32 %2450, 1
  %2453 = mul i32 %2450, %2452
  %2454 = urem i32 %2453, 2
  %2455 = icmp eq i32 %2454, 0
  %2456 = icmp slt i32 %2451, 10
  %2457 = or i1 %2455, %2456
  br i1 %2457, label %originalBBpart2656, label %originalBB654alteredBB

originalBBpart2656:                               ; preds = %originalBB654
  br i1 %2449, label %2475, label %2458, !dbg !1515

2458:                                             ; preds = %originalBBpart2656, %originalBBpart2652
  %2459 = load i32, i32* @x.19
  %2460 = load i32, i32* @y.20
  %2461 = sub i32 %2459, 1
  %2462 = mul i32 %2459, %2461
  %2463 = urem i32 %2462, 2
  %2464 = icmp eq i32 %2463, 0
  %2465 = icmp slt i32 %2460, 10
  %2466 = or i1 %2464, %2465
  br i1 %2466, label %originalBB658, label %originalBB658alteredBB

originalBB658:                                    ; preds = %2458, %originalBB658alteredBB
  %2467 = load i32, i32* @x.19
  %2468 = load i32, i32* @y.20
  %2469 = sub i32 %2467, 1
  %2470 = mul i32 %2467, %2469
  %2471 = urem i32 %2470, 2
  %2472 = icmp eq i32 %2471, 0
  %2473 = icmp slt i32 %2468, 10
  %2474 = or i1 %2472, %2473
  br i1 %2474, label %originalBBpart2660, label %originalBB658alteredBB

originalBBpart2660:                               ; preds = %originalBB658
  br label %4505, !dbg !1520

2475:                                             ; preds = %originalBBpart2656, %originalBBpart2652
  %2476 = load i32, i32* @x.19
  %2477 = load i32, i32* @y.20
  %2478 = sub i32 %2476, 1
  %2479 = mul i32 %2476, %2478
  %2480 = urem i32 %2479, 2
  %2481 = icmp eq i32 %2480, 0
  %2482 = icmp slt i32 %2477, 10
  %2483 = or i1 %2481, %2482
  br i1 %2483, label %originalBB662, label %originalBB662alteredBB

originalBB662:                                    ; preds = %2475, %originalBB662alteredBB
  %2484 = load i32, i32* @x.19
  %2485 = load i32, i32* @y.20
  %2486 = sub i32 %2484, 1
  %2487 = mul i32 %2484, %2486
  %2488 = urem i32 %2487, 2
  %2489 = icmp eq i32 %2488, 0
  %2490 = icmp slt i32 %2485, 10
  %2491 = or i1 %2489, %2490
  br i1 %2491, label %originalBBpart2664, label %originalBB662alteredBB

originalBBpart2664:                               ; preds = %originalBB662
  br label %2492, !dbg !1521

2492:                                             ; preds = %originalBBpart2664, %originalBBpart2218, %originalBBpart2218
  %2493 = load i32, i32* @x.19
  %2494 = load i32, i32* @y.20
  %2495 = sub i32 %2493, 1
  %2496 = mul i32 %2493, %2495
  %2497 = urem i32 %2496, 2
  %2498 = icmp eq i32 %2497, 0
  %2499 = icmp slt i32 %2494, 10
  %2500 = or i1 %2498, %2499
  br i1 %2500, label %originalBB666, label %originalBB666alteredBB

originalBB666:                                    ; preds = %2492, %originalBB666alteredBB
  %2501 = load i64, i64* %28, align 8, !dbg !1522
  %2502 = icmp ne i64 %2501, 0, !dbg !1524
  %2503 = load i32, i32* @x.19
  %2504 = load i32, i32* @y.20
  %2505 = sub i32 %2503, 1
  %2506 = mul i32 %2503, %2505
  %2507 = urem i32 %2506, 2
  %2508 = icmp eq i32 %2507, 0
  %2509 = icmp slt i32 %2504, 10
  %2510 = or i1 %2508, %2509
  br i1 %2510, label %originalBBpart2668, label %originalBB666alteredBB

originalBBpart2668:                               ; preds = %originalBB666
  br i1 %2502, label %2511, label %2528, !dbg !1525

2511:                                             ; preds = %originalBBpart2668
  %2512 = load i32, i32* @x.19
  %2513 = load i32, i32* @y.20
  %2514 = sub i32 %2512, 1
  %2515 = mul i32 %2512, %2514
  %2516 = urem i32 %2515, 2
  %2517 = icmp eq i32 %2516, 0
  %2518 = icmp slt i32 %2513, 10
  %2519 = or i1 %2517, %2518
  br i1 %2519, label %originalBB670, label %originalBB670alteredBB

originalBB670:                                    ; preds = %2511, %originalBB670alteredBB
  %2520 = load i32, i32* @x.19
  %2521 = load i32, i32* @y.20
  %2522 = sub i32 %2520, 1
  %2523 = mul i32 %2520, %2522
  %2524 = urem i32 %2523, 2
  %2525 = icmp eq i32 %2524, 0
  %2526 = icmp slt i32 %2521, 10
  %2527 = or i1 %2525, %2526
  br i1 %2527, label %originalBBpart2672, label %originalBB670alteredBB

originalBBpart2672:                               ; preds = %originalBB670
  br label %4505, !dbg !1526

2528:                                             ; preds = %originalBBpart2668
  %2529 = load i32, i32* @x.19
  %2530 = load i32, i32* @y.20
  %2531 = sub i32 %2529, 1
  %2532 = mul i32 %2529, %2531
  %2533 = urem i32 %2532, 2
  %2534 = icmp eq i32 %2533, 0
  %2535 = icmp slt i32 %2530, 10
  %2536 = or i1 %2534, %2535
  br i1 %2536, label %originalBB674, label %originalBB674alteredBB

originalBB674:                                    ; preds = %2528, %originalBB674alteredBB
  %2537 = load i32, i32* @x.19
  %2538 = load i32, i32* @y.20
  %2539 = sub i32 %2537, 1
  %2540 = mul i32 %2537, %2539
  %2541 = urem i32 %2540, 2
  %2542 = icmp eq i32 %2541, 0
  %2543 = icmp slt i32 %2538, 10
  %2544 = or i1 %2542, %2543
  br i1 %2544, label %originalBBpart2676, label %originalBB674alteredBB

originalBBpart2676:                               ; preds = %originalBB674
  br label %2545, !dbg !1527

2545:                                             ; preds = %originalBBpart2676, %originalBBpart2218
  %2546 = load i32, i32* @x.19
  %2547 = load i32, i32* @y.20
  %2548 = sub i32 %2546, 1
  %2549 = mul i32 %2546, %2548
  %2550 = urem i32 %2549, 2
  %2551 = icmp eq i32 %2550, 0
  %2552 = icmp slt i32 %2547, 10
  %2553 = or i1 %2551, %2552
  br i1 %2553, label %originalBB678, label %originalBB678alteredBB

originalBB678:                                    ; preds = %2545, %originalBB678alteredBB
  store i8 1, i8* %43, align 1, !dbg !1528
  %2554 = load i32, i32* @x.19
  %2555 = load i32, i32* @y.20
  %2556 = sub i32 %2554, 1
  %2557 = mul i32 %2554, %2556
  %2558 = urem i32 %2557, 2
  %2559 = icmp eq i32 %2558, 0
  %2560 = icmp slt i32 %2555, 10
  %2561 = or i1 %2559, %2560
  br i1 %2561, label %originalBBpart2680, label %originalBB678alteredBB

originalBBpart2680:                               ; preds = %originalBB678
  br label %2562, !dbg !1529

2562:                                             ; preds = %originalBBpart2680, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218
  %2563 = load i32, i32* @x.19
  %2564 = load i32, i32* @y.20
  %2565 = sub i32 %2563, 1
  %2566 = mul i32 %2563, %2565
  %2567 = urem i32 %2566, 2
  %2568 = icmp eq i32 %2567, 0
  %2569 = icmp slt i32 %2564, 10
  %2570 = or i1 %2568, %2569
  br i1 %2570, label %originalBB682, label %originalBB682alteredBB

originalBB682:                                    ; preds = %2562, %originalBB682alteredBB
  %2571 = load i32, i32* %23, align 4, !dbg !1530
  %2572 = icmp eq i32 %2571, 2, !dbg !1532
  %2573 = load i32, i32* @x.19
  %2574 = load i32, i32* @y.20
  %2575 = sub i32 %2573, 1
  %2576 = mul i32 %2573, %2575
  %2577 = urem i32 %2576, 2
  %2578 = icmp eq i32 %2577, 0
  %2579 = icmp slt i32 %2574, 10
  %2580 = or i1 %2578, %2579
  br i1 %2580, label %originalBBpart2684, label %originalBB682alteredBB

originalBBpart2684:                               ; preds = %originalBB682
  br i1 %2572, label %2581, label %2601, !dbg !1533

2581:                                             ; preds = %originalBBpart2684
  %2582 = load i32, i32* @x.19
  %2583 = load i32, i32* @y.20
  %2584 = sub i32 %2582, 1
  %2585 = mul i32 %2582, %2584
  %2586 = urem i32 %2585, 2
  %2587 = icmp eq i32 %2586, 0
  %2588 = icmp slt i32 %2583, 10
  %2589 = or i1 %2587, %2588
  br i1 %2589, label %originalBB686, label %originalBB686alteredBB

originalBB686:                                    ; preds = %2581, %originalBB686alteredBB
  %2590 = load i8, i8* %35, align 1, !dbg !1534
  %2591 = trunc i8 %2590 to i1, !dbg !1534
  %2592 = load i32, i32* @x.19
  %2593 = load i32, i32* @y.20
  %2594 = sub i32 %2592, 1
  %2595 = mul i32 %2592, %2594
  %2596 = urem i32 %2595, 2
  %2597 = icmp eq i32 %2596, 0
  %2598 = icmp slt i32 %2593, 10
  %2599 = or i1 %2597, %2598
  br i1 %2599, label %originalBBpart2688, label %originalBB686alteredBB

originalBBpart2688:                               ; preds = %originalBB686
  br i1 %2591, label %2600, label %2601, !dbg !1535

2600:                                             ; preds = %originalBBpart2688
  br label %5870, !dbg !1536

2601:                                             ; preds = %originalBBpart2688, %originalBBpart2684
  %2602 = load i32, i32* @x.19
  %2603 = load i32, i32* @y.20
  %2604 = sub i32 %2602, 1
  %2605 = mul i32 %2602, %2604
  %2606 = urem i32 %2605, 2
  %2607 = icmp eq i32 %2606, 0
  %2608 = icmp slt i32 %2603, 10
  %2609 = or i1 %2607, %2608
  br i1 %2609, label %originalBB690, label %originalBB690alteredBB

originalBB690:                                    ; preds = %2601, %originalBB690alteredBB
  %2610 = load i32, i32* @x.19
  %2611 = load i32, i32* @y.20
  %2612 = sub i32 %2610, 1
  %2613 = mul i32 %2610, %2612
  %2614 = urem i32 %2613, 2
  %2615 = icmp eq i32 %2614, 0
  %2616 = icmp slt i32 %2611, 10
  %2617 = or i1 %2615, %2616
  br i1 %2617, label %originalBBpart2692, label %originalBB690alteredBB

originalBBpart2692:                               ; preds = %originalBB690
  br label %4505, !dbg !1537

2618:                                             ; preds = %originalBBpart2218
  %2619 = load i32, i32* @x.19
  %2620 = load i32, i32* @y.20
  %2621 = sub i32 %2619, 1
  %2622 = mul i32 %2619, %2621
  %2623 = urem i32 %2622, 2
  %2624 = icmp eq i32 %2623, 0
  %2625 = icmp slt i32 %2620, 10
  %2626 = or i1 %2624, %2625
  br i1 %2626, label %originalBB694, label %originalBB694alteredBB

originalBB694:                                    ; preds = %2618, %originalBB694alteredBB
  store i8 1, i8* %37, align 1, !dbg !1538
  store i8 1, i8* %43, align 1, !dbg !1539
  %2627 = load i32, i32* %23, align 4, !dbg !1540
  %2628 = icmp eq i32 %2627, 2, !dbg !1542
  %2629 = load i32, i32* @x.19
  %2630 = load i32, i32* @y.20
  %2631 = sub i32 %2629, 1
  %2632 = mul i32 %2629, %2631
  %2633 = urem i32 %2632, 2
  %2634 = icmp eq i32 %2633, 0
  %2635 = icmp slt i32 %2630, 10
  %2636 = or i1 %2634, %2635
  br i1 %2636, label %originalBBpart2696, label %originalBB694alteredBB

originalBBpart2696:                               ; preds = %originalBB694
  br i1 %2628, label %2637, label %2926, !dbg !1543

2637:                                             ; preds = %originalBBpart2696
  %2638 = load i32, i32* @x.19
  %2639 = load i32, i32* @y.20
  %2640 = sub i32 %2638, 1
  %2641 = mul i32 %2638, %2640
  %2642 = urem i32 %2641, 2
  %2643 = icmp eq i32 %2642, 0
  %2644 = icmp slt i32 %2639, 10
  %2645 = or i1 %2643, %2644
  br i1 %2645, label %originalBB698, label %originalBB698alteredBB

originalBB698:                                    ; preds = %2637, %originalBB698alteredBB
  %2646 = load i8, i8* %35, align 1, !dbg !1544
  %2647 = trunc i8 %2646 to i1, !dbg !1544
  %2648 = load i32, i32* @x.19
  %2649 = load i32, i32* @y.20
  %2650 = sub i32 %2648, 1
  %2651 = mul i32 %2648, %2650
  %2652 = urem i32 %2651, 2
  %2653 = icmp eq i32 %2652, 0
  %2654 = icmp slt i32 %2649, 10
  %2655 = or i1 %2653, %2654
  br i1 %2655, label %originalBBpart2700, label %originalBB698alteredBB

originalBBpart2700:                               ; preds = %originalBB698
  br i1 %2647, label %2656, label %2673, !dbg !1547

2656:                                             ; preds = %originalBBpart2700
  %2657 = load i32, i32* @x.19
  %2658 = load i32, i32* @y.20
  %2659 = sub i32 %2657, 1
  %2660 = mul i32 %2657, %2659
  %2661 = urem i32 %2660, 2
  %2662 = icmp eq i32 %2661, 0
  %2663 = icmp slt i32 %2658, 10
  %2664 = or i1 %2662, %2663
  br i1 %2664, label %originalBB702, label %originalBB702alteredBB

originalBB702:                                    ; preds = %2656, %originalBB702alteredBB
  %2665 = load i32, i32* @x.19
  %2666 = load i32, i32* @y.20
  %2667 = sub i32 %2665, 1
  %2668 = mul i32 %2665, %2667
  %2669 = urem i32 %2668, 2
  %2670 = icmp eq i32 %2669, 0
  %2671 = icmp slt i32 %2666, 10
  %2672 = or i1 %2670, %2671
  br i1 %2672, label %originalBBpart2704, label %originalBB702alteredBB

originalBBpart2704:                               ; preds = %originalBB702
  br label %5870, !dbg !1548

2673:                                             ; preds = %originalBBpart2700
  %2674 = load i32, i32* @x.19
  %2675 = load i32, i32* @y.20
  %2676 = sub i32 %2674, 1
  %2677 = mul i32 %2674, %2676
  %2678 = urem i32 %2677, 2
  %2679 = icmp eq i32 %2678, 0
  %2680 = icmp slt i32 %2675, 10
  %2681 = or i1 %2679, %2680
  br i1 %2681, label %originalBB706, label %originalBB706alteredBB

originalBB706:                                    ; preds = %2673, %originalBB706alteredBB
  %2682 = load i64, i64* %20, align 8, !dbg !1549
  %2683 = icmp ne i64 %2682, 0, !dbg !1549
  %2684 = load i32, i32* @x.19
  %2685 = load i32, i32* @y.20
  %2686 = sub i32 %2684, 1
  %2687 = mul i32 %2684, %2686
  %2688 = urem i32 %2687, 2
  %2689 = icmp eq i32 %2688, 0
  %2690 = icmp slt i32 %2685, 10
  %2691 = or i1 %2689, %2690
  br i1 %2691, label %originalBBpart2708, label %originalBB706alteredBB

originalBBpart2708:                               ; preds = %originalBB706
  br i1 %2683, label %2692, label %2713, !dbg !1551

2692:                                             ; preds = %originalBBpart2708
  %2693 = load i64, i64* %30, align 8, !dbg !1552
  %2694 = icmp ne i64 %2693, 0, !dbg !1552
  br i1 %2694, label %2713, label %2695, !dbg !1553

2695:                                             ; preds = %2692
  %2696 = load i32, i32* @x.19
  %2697 = load i32, i32* @y.20
  %2698 = sub i32 %2696, 1
  %2699 = mul i32 %2696, %2698
  %2700 = urem i32 %2699, 2
  %2701 = icmp eq i32 %2700, 0
  %2702 = icmp slt i32 %2697, 10
  %2703 = or i1 %2701, %2702
  br i1 %2703, label %originalBB710, label %originalBB710alteredBB

originalBB710:                                    ; preds = %2695, %originalBB710alteredBB
  %2704 = load i64, i64* %20, align 8, !dbg !1554
  store i64 %2704, i64* %30, align 8, !dbg !1556
  store i64 0, i64* %20, align 8, !dbg !1557
  %2705 = load i32, i32* @x.19
  %2706 = load i32, i32* @y.20
  %2707 = sub i32 %2705, 1
  %2708 = mul i32 %2705, %2707
  %2709 = urem i32 %2708, 2
  %2710 = icmp eq i32 %2709, 0
  %2711 = icmp slt i32 %2706, 10
  %2712 = or i1 %2710, %2711
  br i1 %2712, label %originalBBpart2712, label %originalBB710alteredBB

originalBBpart2712:                               ; preds = %originalBB710
  br label %2713, !dbg !1558

2713:                                             ; preds = %originalBBpart2712, %2692, %originalBBpart2708
  %2714 = load i32, i32* @x.19
  %2715 = load i32, i32* @y.20
  %2716 = sub i32 %2714, 1
  %2717 = mul i32 %2714, %2716
  %2718 = urem i32 %2717, 2
  %2719 = icmp eq i32 %2718, 0
  %2720 = icmp slt i32 %2715, 10
  %2721 = or i1 %2719, %2720
  br i1 %2721, label %originalBB714, label %originalBB714alteredBB

originalBB714:                                    ; preds = %2713, %originalBB714alteredBB
  %2722 = load i32, i32* @x.19
  %2723 = load i32, i32* @y.20
  %2724 = sub i32 %2722, 1
  %2725 = mul i32 %2722, %2724
  %2726 = urem i32 %2725, 2
  %2727 = icmp eq i32 %2726, 0
  %2728 = icmp slt i32 %2723, 10
  %2729 = or i1 %2727, %2728
  br i1 %2729, label %originalBBpart2716, label %originalBB714alteredBB

originalBBpart2716:                               ; preds = %originalBB714
  br label %2730, !dbg !1559

2730:                                             ; preds = %originalBBpart2716
  %2731 = load i32, i32* @x.19
  %2732 = load i32, i32* @y.20
  %2733 = sub i32 %2731, 1
  %2734 = mul i32 %2731, %2733
  %2735 = urem i32 %2734, 2
  %2736 = icmp eq i32 %2735, 0
  %2737 = icmp slt i32 %2732, 10
  %2738 = or i1 %2736, %2737
  br i1 %2738, label %originalBB718, label %originalBB718alteredBB

originalBB718:                                    ; preds = %2730, %originalBB718alteredBB
  %2739 = load i64, i64* %29, align 8, !dbg !1560
  %2740 = load i64, i64* %20, align 8, !dbg !1560
  %2741 = icmp ult i64 %2739, %2740, !dbg !1560
  %2742 = load i32, i32* @x.19
  %2743 = load i32, i32* @y.20
  %2744 = sub i32 %2742, 1
  %2745 = mul i32 %2742, %2744
  %2746 = urem i32 %2745, 2
  %2747 = icmp eq i32 %2746, 0
  %2748 = icmp slt i32 %2743, 10
  %2749 = or i1 %2747, %2748
  br i1 %2749, label %originalBBpart2720, label %originalBB718alteredBB

originalBBpart2720:                               ; preds = %originalBB718
  br i1 %2741, label %2750, label %2770, !dbg !1563

2750:                                             ; preds = %originalBBpart2720
  %2751 = load i32, i32* @x.19
  %2752 = load i32, i32* @y.20
  %2753 = sub i32 %2751, 1
  %2754 = mul i32 %2751, %2753
  %2755 = urem i32 %2754, 2
  %2756 = icmp eq i32 %2755, 0
  %2757 = icmp slt i32 %2752, 10
  %2758 = or i1 %2756, %2757
  br i1 %2758, label %originalBB722, label %originalBB722alteredBB

originalBB722:                                    ; preds = %2750, %originalBB722alteredBB
  %2759 = load i8*, i8** %19, align 8, !dbg !1560
  %2760 = load i64, i64* %29, align 8, !dbg !1560
  %2761 = getelementptr inbounds i8, i8* %2759, i64 %2760, !dbg !1560
  store i8 39, i8* %2761, align 1, !dbg !1560
  %2762 = load i32, i32* @x.19
  %2763 = load i32, i32* @y.20
  %2764 = sub i32 %2762, 1
  %2765 = mul i32 %2762, %2764
  %2766 = urem i32 %2765, 2
  %2767 = icmp eq i32 %2766, 0
  %2768 = icmp slt i32 %2763, 10
  %2769 = or i1 %2767, %2768
  br i1 %2769, label %originalBBpart2724, label %originalBB722alteredBB

originalBBpart2724:                               ; preds = %originalBB722
  br label %2770, !dbg !1560

2770:                                             ; preds = %originalBBpart2724, %originalBBpart2720
  %2771 = load i32, i32* @x.19
  %2772 = load i32, i32* @y.20
  %2773 = sub i32 %2771, 1
  %2774 = mul i32 %2771, %2773
  %2775 = urem i32 %2774, 2
  %2776 = icmp eq i32 %2775, 0
  %2777 = icmp slt i32 %2772, 10
  %2778 = or i1 %2776, %2777
  br i1 %2778, label %originalBB726, label %originalBB726alteredBB

originalBB726:                                    ; preds = %2770, %originalBB726alteredBB
  %2779 = load i64, i64* %29, align 8, !dbg !1563
  %2780 = add i64 %2779, 1, !dbg !1563
  store i64 %2780, i64* %29, align 8, !dbg !1563
  %2781 = load i32, i32* @x.19
  %2782 = load i32, i32* @y.20
  %2783 = sub i32 %2781, 1
  %2784 = mul i32 %2781, %2783
  %2785 = urem i32 %2784, 2
  %2786 = icmp eq i32 %2785, 0
  %2787 = icmp slt i32 %2782, 10
  %2788 = or i1 %2786, %2787
  br i1 %2788, label %originalBBpart2734, label %originalBB726alteredBB

originalBBpart2734:                               ; preds = %originalBB726
  br label %2789, !dbg !1563

2789:                                             ; preds = %originalBBpart2734
  %2790 = load i32, i32* @x.19
  %2791 = load i32, i32* @y.20
  %2792 = sub i32 %2790, 1
  %2793 = mul i32 %2790, %2792
  %2794 = urem i32 %2793, 2
  %2795 = icmp eq i32 %2794, 0
  %2796 = icmp slt i32 %2791, 10
  %2797 = or i1 %2795, %2796
  br i1 %2797, label %originalBB736, label %originalBB736alteredBB

originalBB736:                                    ; preds = %2789, %originalBB736alteredBB
  %2798 = load i32, i32* @x.19
  %2799 = load i32, i32* @y.20
  %2800 = sub i32 %2798, 1
  %2801 = mul i32 %2798, %2800
  %2802 = urem i32 %2801, 2
  %2803 = icmp eq i32 %2802, 0
  %2804 = icmp slt i32 %2799, 10
  %2805 = or i1 %2803, %2804
  br i1 %2805, label %originalBBpart2738, label %originalBB736alteredBB

originalBBpart2738:                               ; preds = %originalBB736
  br label %2806, !dbg !1564

2806:                                             ; preds = %originalBBpart2738
  %2807 = load i32, i32* @x.19
  %2808 = load i32, i32* @y.20
  %2809 = sub i32 %2807, 1
  %2810 = mul i32 %2807, %2809
  %2811 = urem i32 %2810, 2
  %2812 = icmp eq i32 %2811, 0
  %2813 = icmp slt i32 %2808, 10
  %2814 = or i1 %2812, %2813
  br i1 %2814, label %originalBB740, label %originalBB740alteredBB

originalBB740:                                    ; preds = %2806, %originalBB740alteredBB
  %2815 = load i64, i64* %29, align 8, !dbg !1565
  %2816 = load i64, i64* %20, align 8, !dbg !1565
  %2817 = icmp ult i64 %2815, %2816, !dbg !1565
  %2818 = load i32, i32* @x.19
  %2819 = load i32, i32* @y.20
  %2820 = sub i32 %2818, 1
  %2821 = mul i32 %2818, %2820
  %2822 = urem i32 %2821, 2
  %2823 = icmp eq i32 %2822, 0
  %2824 = icmp slt i32 %2819, 10
  %2825 = or i1 %2823, %2824
  br i1 %2825, label %originalBBpart2742, label %originalBB740alteredBB

originalBBpart2742:                               ; preds = %originalBB740
  br i1 %2817, label %2826, label %2846, !dbg !1568

2826:                                             ; preds = %originalBBpart2742
  %2827 = load i32, i32* @x.19
  %2828 = load i32, i32* @y.20
  %2829 = sub i32 %2827, 1
  %2830 = mul i32 %2827, %2829
  %2831 = urem i32 %2830, 2
  %2832 = icmp eq i32 %2831, 0
  %2833 = icmp slt i32 %2828, 10
  %2834 = or i1 %2832, %2833
  br i1 %2834, label %originalBB744, label %originalBB744alteredBB

originalBB744:                                    ; preds = %2826, %originalBB744alteredBB
  %2835 = load i8*, i8** %19, align 8, !dbg !1565
  %2836 = load i64, i64* %29, align 8, !dbg !1565
  %2837 = getelementptr inbounds i8, i8* %2835, i64 %2836, !dbg !1565
  store i8 92, i8* %2837, align 1, !dbg !1565
  %2838 = load i32, i32* @x.19
  %2839 = load i32, i32* @y.20
  %2840 = sub i32 %2838, 1
  %2841 = mul i32 %2838, %2840
  %2842 = urem i32 %2841, 2
  %2843 = icmp eq i32 %2842, 0
  %2844 = icmp slt i32 %2839, 10
  %2845 = or i1 %2843, %2844
  br i1 %2845, label %originalBBpart2746, label %originalBB744alteredBB

originalBBpart2746:                               ; preds = %originalBB744
  br label %2846, !dbg !1565

2846:                                             ; preds = %originalBBpart2746, %originalBBpart2742
  %2847 = load i64, i64* %29, align 8, !dbg !1568
  %2848 = add i64 %2847, 1, !dbg !1568
  store i64 %2848, i64* %29, align 8, !dbg !1568
  br label %2849, !dbg !1568

2849:                                             ; preds = %2846
  %2850 = load i32, i32* @x.19
  %2851 = load i32, i32* @y.20
  %2852 = sub i32 %2850, 1
  %2853 = mul i32 %2850, %2852
  %2854 = urem i32 %2853, 2
  %2855 = icmp eq i32 %2854, 0
  %2856 = icmp slt i32 %2851, 10
  %2857 = or i1 %2855, %2856
  br i1 %2857, label %originalBB748, label %originalBB748alteredBB

originalBB748:                                    ; preds = %2849, %originalBB748alteredBB
  %2858 = load i32, i32* @x.19
  %2859 = load i32, i32* @y.20
  %2860 = sub i32 %2858, 1
  %2861 = mul i32 %2858, %2860
  %2862 = urem i32 %2861, 2
  %2863 = icmp eq i32 %2862, 0
  %2864 = icmp slt i32 %2859, 10
  %2865 = or i1 %2863, %2864
  br i1 %2865, label %originalBBpart2750, label %originalBB748alteredBB

originalBBpart2750:                               ; preds = %originalBB748
  br label %2866, !dbg !1569

2866:                                             ; preds = %originalBBpart2750
  %2867 = load i32, i32* @x.19
  %2868 = load i32, i32* @y.20
  %2869 = sub i32 %2867, 1
  %2870 = mul i32 %2867, %2869
  %2871 = urem i32 %2870, 2
  %2872 = icmp eq i32 %2871, 0
  %2873 = icmp slt i32 %2868, 10
  %2874 = or i1 %2872, %2873
  br i1 %2874, label %originalBB752, label %originalBB752alteredBB

originalBB752:                                    ; preds = %2866, %originalBB752alteredBB
  %2875 = load i64, i64* %29, align 8, !dbg !1570
  %2876 = load i64, i64* %20, align 8, !dbg !1570
  %2877 = icmp ult i64 %2875, %2876, !dbg !1570
  %2878 = load i32, i32* @x.19
  %2879 = load i32, i32* @y.20
  %2880 = sub i32 %2878, 1
  %2881 = mul i32 %2878, %2880
  %2882 = urem i32 %2881, 2
  %2883 = icmp eq i32 %2882, 0
  %2884 = icmp slt i32 %2879, 10
  %2885 = or i1 %2883, %2884
  br i1 %2885, label %originalBBpart2754, label %originalBB752alteredBB

originalBBpart2754:                               ; preds = %originalBB752
  br i1 %2877, label %2886, label %2906, !dbg !1573

2886:                                             ; preds = %originalBBpart2754
  %2887 = load i32, i32* @x.19
  %2888 = load i32, i32* @y.20
  %2889 = sub i32 %2887, 1
  %2890 = mul i32 %2887, %2889
  %2891 = urem i32 %2890, 2
  %2892 = icmp eq i32 %2891, 0
  %2893 = icmp slt i32 %2888, 10
  %2894 = or i1 %2892, %2893
  br i1 %2894, label %originalBB756, label %originalBB756alteredBB

originalBB756:                                    ; preds = %2886, %originalBB756alteredBB
  %2895 = load i8*, i8** %19, align 8, !dbg !1570
  %2896 = load i64, i64* %29, align 8, !dbg !1570
  %2897 = getelementptr inbounds i8, i8* %2895, i64 %2896, !dbg !1570
  store i8 39, i8* %2897, align 1, !dbg !1570
  %2898 = load i32, i32* @x.19
  %2899 = load i32, i32* @y.20
  %2900 = sub i32 %2898, 1
  %2901 = mul i32 %2898, %2900
  %2902 = urem i32 %2901, 2
  %2903 = icmp eq i32 %2902, 0
  %2904 = icmp slt i32 %2899, 10
  %2905 = or i1 %2903, %2904
  br i1 %2905, label %originalBBpart2758, label %originalBB756alteredBB

originalBBpart2758:                               ; preds = %originalBB756
  br label %2906, !dbg !1570

2906:                                             ; preds = %originalBBpart2758, %originalBBpart2754
  %2907 = load i64, i64* %29, align 8, !dbg !1573
  %2908 = add i64 %2907, 1, !dbg !1573
  store i64 %2908, i64* %29, align 8, !dbg !1573
  br label %2909, !dbg !1573

2909:                                             ; preds = %2906
  %2910 = load i32, i32* @x.19
  %2911 = load i32, i32* @y.20
  %2912 = sub i32 %2910, 1
  %2913 = mul i32 %2910, %2912
  %2914 = urem i32 %2913, 2
  %2915 = icmp eq i32 %2914, 0
  %2916 = icmp slt i32 %2911, 10
  %2917 = or i1 %2915, %2916
  br i1 %2917, label %originalBB760, label %originalBB760alteredBB

originalBB760:                                    ; preds = %2909, %originalBB760alteredBB
  store i8 0, i8* %36, align 1, !dbg !1574
  %2918 = load i32, i32* @x.19
  %2919 = load i32, i32* @y.20
  %2920 = sub i32 %2918, 1
  %2921 = mul i32 %2918, %2920
  %2922 = urem i32 %2921, 2
  %2923 = icmp eq i32 %2922, 0
  %2924 = icmp slt i32 %2919, 10
  %2925 = or i1 %2923, %2924
  br i1 %2925, label %originalBBpart2762, label %originalBB760alteredBB

originalBBpart2762:                               ; preds = %originalBB760
  br label %2926, !dbg !1575

2926:                                             ; preds = %originalBBpart2762, %originalBBpart2696
  %2927 = load i32, i32* @x.19
  %2928 = load i32, i32* @y.20
  %2929 = sub i32 %2927, 1
  %2930 = mul i32 %2927, %2929
  %2931 = urem i32 %2930, 2
  %2932 = icmp eq i32 %2931, 0
  %2933 = icmp slt i32 %2928, 10
  %2934 = or i1 %2932, %2933
  br i1 %2934, label %originalBB764, label %originalBB764alteredBB

originalBB764:                                    ; preds = %2926, %originalBB764alteredBB
  %2935 = load i32, i32* @x.19
  %2936 = load i32, i32* @y.20
  %2937 = sub i32 %2935, 1
  %2938 = mul i32 %2935, %2937
  %2939 = urem i32 %2938, 2
  %2940 = icmp eq i32 %2939, 0
  %2941 = icmp slt i32 %2936, 10
  %2942 = or i1 %2940, %2941
  br i1 %2942, label %originalBBpart2766, label %originalBB764alteredBB

originalBBpart2766:                               ; preds = %originalBB764
  br label %4505, !dbg !1576

2943:                                             ; preds = %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218, %originalBBpart2218
  %2944 = load i32, i32* @x.19
  %2945 = load i32, i32* @y.20
  %2946 = sub i32 %2944, 1
  %2947 = mul i32 %2944, %2946
  %2948 = urem i32 %2947, 2
  %2949 = icmp eq i32 %2948, 0
  %2950 = icmp slt i32 %2945, 10
  %2951 = or i1 %2949, %2950
  br i1 %2951, label %originalBB768, label %originalBB768alteredBB

originalBB768:                                    ; preds = %2943, %originalBB768alteredBB
  store i8 1, i8* %43, align 1, !dbg !1577
  %2952 = load i32, i32* @x.19
  %2953 = load i32, i32* @y.20
  %2954 = sub i32 %2952, 1
  %2955 = mul i32 %2952, %2954
  %2956 = urem i32 %2955, 2
  %2957 = icmp eq i32 %2956, 0
  %2958 = icmp slt i32 %2953, 10
  %2959 = or i1 %2957, %2958
  br i1 %2959, label %originalBBpart2770, label %originalBB768alteredBB

originalBBpart2770:                               ; preds = %originalBB768
  br label %4505, !dbg !1578

2960:                                             ; preds = %originalBBpart2218
  call void @llvm.dbg.declare(metadata i64* %44, metadata !1579, metadata !DIExpression()), !dbg !1581
  call void @llvm.dbg.declare(metadata i8* %45, metadata !1582, metadata !DIExpression()), !dbg !1583
  %2961 = load i32, i32* @x.19
  %2962 = load i32, i32* @y.20
  %2963 = sub i32 %2961, 1
  %2964 = mul i32 %2961, %2963
  %2965 = urem i32 %2964, 2
  %2966 = icmp eq i32 %2965, 0
  %2967 = icmp slt i32 %2962, 10
  %2968 = or i1 %2966, %2967
  br i1 %2968, label %originalBB772, label %originalBB772alteredBB

originalBB772:                                    ; preds = %2960, %originalBB772alteredBB
  %2969 = load i8, i8* %34, align 1, !dbg !1584
  %2970 = trunc i8 %2969 to i1, !dbg !1584
  %2971 = load i32, i32* @x.19
  %2972 = load i32, i32* @y.20
  %2973 = sub i32 %2971, 1
  %2974 = mul i32 %2971, %2973
  %2975 = urem i32 %2974, 2
  %2976 = icmp eq i32 %2975, 0
  %2977 = icmp slt i32 %2972, 10
  %2978 = or i1 %2976, %2977
  br i1 %2978, label %originalBBpart2774, label %originalBB772alteredBB

originalBBpart2774:                               ; preds = %originalBB772
  br i1 %2970, label %2979, label %3007, !dbg !1586

2979:                                             ; preds = %originalBBpart2774
  %2980 = load i32, i32* @x.19
  %2981 = load i32, i32* @y.20
  %2982 = sub i32 %2980, 1
  %2983 = mul i32 %2980, %2982
  %2984 = urem i32 %2983, 2
  %2985 = icmp eq i32 %2984, 0
  %2986 = icmp slt i32 %2981, 10
  %2987 = or i1 %2985, %2986
  br i1 %2987, label %originalBB776, label %originalBB776alteredBB

originalBB776:                                    ; preds = %2979, %originalBB776alteredBB
  store i64 1, i64* %44, align 8, !dbg !1587
  %2988 = call i16** @__ctype_b_loc() #14, !dbg !1589
  %2989 = load i16*, i16** %2988, align 8, !dbg !1589
  %2990 = load i8, i8* %39, align 1, !dbg !1589
  %2991 = zext i8 %2990 to i32, !dbg !1589
  %2992 = sext i32 %2991 to i64, !dbg !1589
  %2993 = getelementptr inbounds i16, i16* %2989, i64 %2992, !dbg !1589
  %2994 = load i16, i16* %2993, align 2, !dbg !1589
  %2995 = zext i16 %2994 to i32, !dbg !1589
  %2996 = and i32 %2995, 16384, !dbg !1589
  %2997 = icmp ne i32 %2996, 0, !dbg !1590
  %2998 = zext i1 %2997 to i8, !dbg !1591
  store i8 %2998, i8* %45, align 1, !dbg !1591
  %2999 = load i32, i32* @x.19
  %3000 = load i32, i32* @y.20
  %3001 = sub i32 %2999, 1
  %3002 = mul i32 %2999, %3001
  %3003 = urem i32 %3002, 2
  %3004 = icmp eq i32 %3003, 0
  %3005 = icmp slt i32 %3000, 10
  %3006 = or i1 %3004, %3005
  br i1 %3006, label %originalBBpart2781, label %originalBB776alteredBB

originalBBpart2781:                               ; preds = %originalBB776
  br label %3520, !dbg !1592

3007:                                             ; preds = %originalBBpart2774
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !1593, metadata !DIExpression()), !dbg !1610
  %3008 = load i32, i32* @x.19
  %3009 = load i32, i32* @y.20
  %3010 = sub i32 %3008, 1
  %3011 = mul i32 %3008, %3010
  %3012 = urem i32 %3011, 2
  %3013 = icmp eq i32 %3012, 0
  %3014 = icmp slt i32 %3009, 10
  %3015 = or i1 %3013, %3014
  br i1 %3015, label %originalBB783, label %originalBB783alteredBB

originalBB783:                                    ; preds = %3007, %originalBB783alteredBB
  %3016 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1611
  call void @llvm.memset.p0i8.i64(i8* align 4 %3016, i8 0, i64 8, i1 false), !dbg !1611
  store i64 0, i64* %44, align 8, !dbg !1612
  store i8 1, i8* %45, align 1, !dbg !1613
  %3017 = load i64, i64* %22, align 8, !dbg !1614
  %3018 = icmp eq i64 %3017, -1, !dbg !1616
  %3019 = load i32, i32* @x.19
  %3020 = load i32, i32* @y.20
  %3021 = sub i32 %3019, 1
  %3022 = mul i32 %3019, %3021
  %3023 = urem i32 %3022, 2
  %3024 = icmp eq i32 %3023, 0
  %3025 = icmp slt i32 %3020, 10
  %3026 = or i1 %3024, %3025
  br i1 %3026, label %originalBBpart2785, label %originalBB783alteredBB

originalBBpart2785:                               ; preds = %originalBB783
  br i1 %3018, label %3027, label %3046, !dbg !1617

3027:                                             ; preds = %originalBBpart2785
  %3028 = load i32, i32* @x.19
  %3029 = load i32, i32* @y.20
  %3030 = sub i32 %3028, 1
  %3031 = mul i32 %3028, %3030
  %3032 = urem i32 %3031, 2
  %3033 = icmp eq i32 %3032, 0
  %3034 = icmp slt i32 %3029, 10
  %3035 = or i1 %3033, %3034
  br i1 %3035, label %originalBB787, label %originalBB787alteredBB

originalBB787:                                    ; preds = %3027, %originalBB787alteredBB
  %3036 = load i8*, i8** %21, align 8, !dbg !1618
  %3037 = call i64 @strlen(i8* %3036) #13, !dbg !1619
  store i64 %3037, i64* %22, align 8, !dbg !1620
  %3038 = load i32, i32* @x.19
  %3039 = load i32, i32* @y.20
  %3040 = sub i32 %3038, 1
  %3041 = mul i32 %3038, %3040
  %3042 = urem i32 %3041, 2
  %3043 = icmp eq i32 %3042, 0
  %3044 = icmp slt i32 %3039, 10
  %3045 = or i1 %3043, %3044
  br i1 %3045, label %originalBBpart2789, label %originalBB787alteredBB

originalBBpart2789:                               ; preds = %originalBB787
  br label %3046, !dbg !1621

3046:                                             ; preds = %originalBBpart2789, %originalBBpart2785
  %3047 = load i32, i32* @x.19
  %3048 = load i32, i32* @y.20
  %3049 = sub i32 %3047, 1
  %3050 = mul i32 %3047, %3049
  %3051 = urem i32 %3050, 2
  %3052 = icmp eq i32 %3051, 0
  %3053 = icmp slt i32 %3048, 10
  %3054 = or i1 %3052, %3053
  br i1 %3054, label %originalBB791, label %originalBB791alteredBB

originalBB791:                                    ; preds = %3046, %originalBB791alteredBB
  %3055 = load i32, i32* @x.19
  %3056 = load i32, i32* @y.20
  %3057 = sub i32 %3055, 1
  %3058 = mul i32 %3055, %3057
  %3059 = urem i32 %3058, 2
  %3060 = icmp eq i32 %3059, 0
  %3061 = icmp slt i32 %3056, 10
  %3062 = or i1 %3060, %3061
  br i1 %3062, label %originalBBpart2793, label %originalBB791alteredBB

originalBBpart2793:                               ; preds = %originalBB791
  br label %3063, !dbg !1622

3063:                                             ; preds = %originalBBpart2916, %originalBBpart2793
  call void @llvm.dbg.declare(metadata i32* %47, metadata !1623, metadata !DIExpression()), !dbg !1626
  call void @llvm.dbg.declare(metadata i64* %48, metadata !1627, metadata !DIExpression()), !dbg !1628
  %3064 = load i8*, i8** %21, align 8, !dbg !1629
  %3065 = load i64, i64* %28, align 8, !dbg !1630
  %3066 = load i64, i64* %44, align 8, !dbg !1631
  %3067 = add i64 %3065, %3066, !dbg !1632
  %3068 = getelementptr inbounds i8, i8* %3064, i64 %3067, !dbg !1629
  %3069 = load i64, i64* %22, align 8, !dbg !1633
  %3070 = load i64, i64* %28, align 8, !dbg !1634
  %3071 = load i64, i64* %44, align 8, !dbg !1635
  %3072 = add i64 %3070, %3071, !dbg !1636
  %3073 = sub i64 %3069, %3072, !dbg !1637
  %3074 = call i64 @rpl_mbrtowc(i32* %47, i8* %3068, i64 %3073, %struct.__mbstate_t* %46), !dbg !1638
  store i64 %3074, i64* %48, align 8, !dbg !1628
  %3075 = load i64, i64* %48, align 8, !dbg !1639
  %3076 = icmp eq i64 %3075, 0, !dbg !1641
  br i1 %3076, label %3077, label %3094, !dbg !1642

3077:                                             ; preds = %3063
  %3078 = load i32, i32* @x.19
  %3079 = load i32, i32* @y.20
  %3080 = sub i32 %3078, 1
  %3081 = mul i32 %3078, %3080
  %3082 = urem i32 %3081, 2
  %3083 = icmp eq i32 %3082, 0
  %3084 = icmp slt i32 %3079, 10
  %3085 = or i1 %3083, %3084
  br i1 %3085, label %originalBB795, label %originalBB795alteredBB

originalBB795:                                    ; preds = %3077, %originalBB795alteredBB
  %3086 = load i32, i32* @x.19
  %3087 = load i32, i32* @y.20
  %3088 = sub i32 %3086, 1
  %3089 = mul i32 %3086, %3088
  %3090 = urem i32 %3089, 2
  %3091 = icmp eq i32 %3090, 0
  %3092 = icmp slt i32 %3087, 10
  %3093 = or i1 %3091, %3092
  br i1 %3093, label %originalBBpart2797, label %originalBB795alteredBB

originalBBpart2797:                               ; preds = %originalBB795
  br label %3503, !dbg !1643

3094:                                             ; preds = %3063
  %3095 = load i32, i32* @x.19
  %3096 = load i32, i32* @y.20
  %3097 = sub i32 %3095, 1
  %3098 = mul i32 %3095, %3097
  %3099 = urem i32 %3098, 2
  %3100 = icmp eq i32 %3099, 0
  %3101 = icmp slt i32 %3096, 10
  %3102 = or i1 %3100, %3101
  br i1 %3102, label %originalBB799, label %originalBB799alteredBB

originalBB799:                                    ; preds = %3094, %originalBB799alteredBB
  %3103 = load i64, i64* %48, align 8, !dbg !1644
  %3104 = icmp eq i64 %3103, -1, !dbg !1646
  %3105 = load i32, i32* @x.19
  %3106 = load i32, i32* @y.20
  %3107 = sub i32 %3105, 1
  %3108 = mul i32 %3105, %3107
  %3109 = urem i32 %3108, 2
  %3110 = icmp eq i32 %3109, 0
  %3111 = icmp slt i32 %3106, 10
  %3112 = or i1 %3110, %3111
  br i1 %3112, label %originalBBpart2801, label %originalBB799alteredBB

originalBBpart2801:                               ; preds = %originalBB799
  br i1 %3104, label %3113, label %3130, !dbg !1647

3113:                                             ; preds = %originalBBpart2801
  %3114 = load i32, i32* @x.19
  %3115 = load i32, i32* @y.20
  %3116 = sub i32 %3114, 1
  %3117 = mul i32 %3114, %3116
  %3118 = urem i32 %3117, 2
  %3119 = icmp eq i32 %3118, 0
  %3120 = icmp slt i32 %3115, 10
  %3121 = or i1 %3119, %3120
  br i1 %3121, label %originalBB803, label %originalBB803alteredBB

originalBB803:                                    ; preds = %3113, %originalBB803alteredBB
  store i8 0, i8* %45, align 1, !dbg !1648
  %3122 = load i32, i32* @x.19
  %3123 = load i32, i32* @y.20
  %3124 = sub i32 %3122, 1
  %3125 = mul i32 %3122, %3124
  %3126 = urem i32 %3125, 2
  %3127 = icmp eq i32 %3126, 0
  %3128 = icmp slt i32 %3123, 10
  %3129 = or i1 %3127, %3128
  br i1 %3129, label %originalBBpart2805, label %originalBB803alteredBB

originalBBpart2805:                               ; preds = %originalBB803
  br label %3503, !dbg !1650

3130:                                             ; preds = %originalBBpart2801
  %3131 = load i32, i32* @x.19
  %3132 = load i32, i32* @y.20
  %3133 = sub i32 %3131, 1
  %3134 = mul i32 %3131, %3133
  %3135 = urem i32 %3134, 2
  %3136 = icmp eq i32 %3135, 0
  %3137 = icmp slt i32 %3132, 10
  %3138 = or i1 %3136, %3137
  br i1 %3138, label %originalBB807, label %originalBB807alteredBB

originalBB807:                                    ; preds = %3130, %originalBB807alteredBB
  %3139 = load i64, i64* %48, align 8, !dbg !1651
  %3140 = icmp eq i64 %3139, -2, !dbg !1653
  %3141 = load i32, i32* @x.19
  %3142 = load i32, i32* @y.20
  %3143 = sub i32 %3141, 1
  %3144 = mul i32 %3141, %3143
  %3145 = urem i32 %3144, 2
  %3146 = icmp eq i32 %3145, 0
  %3147 = icmp slt i32 %3142, 10
  %3148 = or i1 %3146, %3147
  br i1 %3148, label %originalBBpart2809, label %originalBB807alteredBB

originalBBpart2809:                               ; preds = %originalBB807
  br i1 %3140, label %3149, label %3251, !dbg !1654

3149:                                             ; preds = %originalBBpart2809
  %3150 = load i32, i32* @x.19
  %3151 = load i32, i32* @y.20
  %3152 = sub i32 %3150, 1
  %3153 = mul i32 %3150, %3152
  %3154 = urem i32 %3153, 2
  %3155 = icmp eq i32 %3154, 0
  %3156 = icmp slt i32 %3151, 10
  %3157 = or i1 %3155, %3156
  br i1 %3157, label %originalBB811, label %originalBB811alteredBB

originalBB811:                                    ; preds = %3149, %originalBB811alteredBB
  store i8 0, i8* %45, align 1, !dbg !1655
  %3158 = load i32, i32* @x.19
  %3159 = load i32, i32* @y.20
  %3160 = sub i32 %3158, 1
  %3161 = mul i32 %3158, %3160
  %3162 = urem i32 %3161, 2
  %3163 = icmp eq i32 %3162, 0
  %3164 = icmp slt i32 %3159, 10
  %3165 = or i1 %3163, %3164
  br i1 %3165, label %originalBBpart2813, label %originalBB811alteredBB

originalBBpart2813:                               ; preds = %originalBB811
  br label %3166, !dbg !1657

3166:                                             ; preds = %3231, %originalBBpart2813
  %3167 = load i32, i32* @x.19
  %3168 = load i32, i32* @y.20
  %3169 = sub i32 %3167, 1
  %3170 = mul i32 %3167, %3169
  %3171 = urem i32 %3170, 2
  %3172 = icmp eq i32 %3171, 0
  %3173 = icmp slt i32 %3168, 10
  %3174 = or i1 %3172, %3173
  br i1 %3174, label %originalBB815, label %originalBB815alteredBB

originalBB815:                                    ; preds = %3166, %originalBB815alteredBB
  %3175 = load i64, i64* %28, align 8, !dbg !1658
  %3176 = load i64, i64* %44, align 8, !dbg !1659
  %3177 = add i64 %3175, %3176, !dbg !1660
  %3178 = load i64, i64* %22, align 8, !dbg !1661
  %3179 = icmp ult i64 %3177, %3178, !dbg !1662
  %3180 = load i32, i32* @x.19
  %3181 = load i32, i32* @y.20
  %3182 = sub i32 %3180, 1
  %3183 = mul i32 %3180, %3182
  %3184 = urem i32 %3183, 2
  %3185 = icmp eq i32 %3184, 0
  %3186 = icmp slt i32 %3181, 10
  %3187 = or i1 %3185, %3186
  br i1 %3187, label %originalBBpart2825, label %originalBB815alteredBB

originalBBpart2825:                               ; preds = %originalBB815
  br i1 %3179, label %3188, label %3213, !dbg !1663

3188:                                             ; preds = %originalBBpart2825
  %3189 = load i32, i32* @x.19
  %3190 = load i32, i32* @y.20
  %3191 = sub i32 %3189, 1
  %3192 = mul i32 %3189, %3191
  %3193 = urem i32 %3192, 2
  %3194 = icmp eq i32 %3193, 0
  %3195 = icmp slt i32 %3190, 10
  %3196 = or i1 %3194, %3195
  br i1 %3196, label %originalBB827, label %originalBB827alteredBB

originalBB827:                                    ; preds = %3188, %originalBB827alteredBB
  %3197 = load i8*, i8** %21, align 8, !dbg !1664
  %3198 = load i64, i64* %28, align 8, !dbg !1665
  %3199 = load i64, i64* %44, align 8, !dbg !1666
  %3200 = add i64 %3198, %3199, !dbg !1667
  %3201 = getelementptr inbounds i8, i8* %3197, i64 %3200, !dbg !1664
  %3202 = load i8, i8* %3201, align 1, !dbg !1664
  %3203 = sext i8 %3202 to i32, !dbg !1664
  %3204 = icmp ne i32 %3203, 0, !dbg !1663
  %3205 = load i32, i32* @x.19
  %3206 = load i32, i32* @y.20
  %3207 = sub i32 %3205, 1
  %3208 = mul i32 %3205, %3207
  %3209 = urem i32 %3208, 2
  %3210 = icmp eq i32 %3209, 0
  %3211 = icmp slt i32 %3206, 10
  %3212 = or i1 %3210, %3211
  br i1 %3212, label %originalBBpart2838, label %originalBB827alteredBB

originalBBpart2838:                               ; preds = %originalBB827
  br label %3213

3213:                                             ; preds = %originalBBpart2838, %originalBBpart2825
  %3214 = phi i1 [ false, %originalBBpart2825 ], [ %3204, %originalBBpart2838 ], !dbg !1668
  %3215 = load i32, i32* @x.19
  %3216 = load i32, i32* @y.20
  %3217 = sub i32 %3215, 1
  %3218 = mul i32 %3215, %3217
  %3219 = urem i32 %3218, 2
  %3220 = icmp eq i32 %3219, 0
  %3221 = icmp slt i32 %3216, 10
  %3222 = or i1 %3220, %3221
  br i1 %3222, label %originalBB840, label %originalBB840alteredBB

originalBB840:                                    ; preds = %3213, %originalBB840alteredBB
  %3223 = load i32, i32* @x.19
  %3224 = load i32, i32* @y.20
  %3225 = sub i32 %3223, 1
  %3226 = mul i32 %3223, %3225
  %3227 = urem i32 %3226, 2
  %3228 = icmp eq i32 %3227, 0
  %3229 = icmp slt i32 %3224, 10
  %3230 = or i1 %3228, %3229
  br i1 %3230, label %originalBBpart2842, label %originalBB840alteredBB

originalBBpart2842:                               ; preds = %originalBB840
  br i1 %3214, label %3231, label %3234, !dbg !1657

3231:                                             ; preds = %originalBBpart2842
  %3232 = load i64, i64* %44, align 8, !dbg !1669
  %3233 = add i64 %3232, 1, !dbg !1669
  store i64 %3233, i64* %44, align 8, !dbg !1669
  br label %3166, !dbg !1657, !llvm.loop !1670

3234:                                             ; preds = %originalBBpart2842
  %3235 = load i32, i32* @x.19
  %3236 = load i32, i32* @y.20
  %3237 = sub i32 %3235, 1
  %3238 = mul i32 %3235, %3237
  %3239 = urem i32 %3238, 2
  %3240 = icmp eq i32 %3239, 0
  %3241 = icmp slt i32 %3236, 10
  %3242 = or i1 %3240, %3241
  br i1 %3242, label %originalBB844, label %originalBB844alteredBB

originalBB844:                                    ; preds = %3234, %originalBB844alteredBB
  %3243 = load i32, i32* @x.19
  %3244 = load i32, i32* @y.20
  %3245 = sub i32 %3243, 1
  %3246 = mul i32 %3243, %3245
  %3247 = urem i32 %3246, 2
  %3248 = icmp eq i32 %3247, 0
  %3249 = icmp slt i32 %3244, 10
  %3250 = or i1 %3248, %3249
  br i1 %3250, label %originalBBpart2846, label %originalBB844alteredBB

originalBBpart2846:                               ; preds = %originalBB844
  br label %3503, !dbg !1671

3251:                                             ; preds = %originalBBpart2809
  %3252 = load i8, i8* %35, align 1, !dbg !1672
  %3253 = trunc i8 %3252 to i1, !dbg !1672
  br i1 %3253, label %3254, label %3391, !dbg !1675

3254:                                             ; preds = %3251
  %3255 = load i32, i32* @x.19
  %3256 = load i32, i32* @y.20
  %3257 = sub i32 %3255, 1
  %3258 = mul i32 %3255, %3257
  %3259 = urem i32 %3258, 2
  %3260 = icmp eq i32 %3259, 0
  %3261 = icmp slt i32 %3256, 10
  %3262 = or i1 %3260, %3261
  br i1 %3262, label %originalBB848, label %originalBB848alteredBB

originalBB848:                                    ; preds = %3254, %originalBB848alteredBB
  %3263 = load i32, i32* %23, align 4, !dbg !1676
  %3264 = icmp eq i32 %3263, 2, !dbg !1677
  %3265 = load i32, i32* @x.19
  %3266 = load i32, i32* @y.20
  %3267 = sub i32 %3265, 1
  %3268 = mul i32 %3265, %3267
  %3269 = urem i32 %3268, 2
  %3270 = icmp eq i32 %3269, 0
  %3271 = icmp slt i32 %3266, 10
  %3272 = or i1 %3270, %3271
  br i1 %3272, label %originalBBpart2850, label %originalBB848alteredBB

originalBBpart2850:                               ; preds = %originalBB848
  br i1 %3264, label %3273, label %3391, !dbg !1678

3273:                                             ; preds = %originalBBpart2850
  call void @llvm.dbg.declare(metadata i64* %49, metadata !1679, metadata !DIExpression()), !dbg !1681
  store i64 1, i64* %49, align 8, !dbg !1682
  br label %3274, !dbg !1684

3274:                                             ; preds = %originalBBpart2884, %3273
  %3275 = load i32, i32* @x.19
  %3276 = load i32, i32* @y.20
  %3277 = sub i32 %3275, 1
  %3278 = mul i32 %3275, %3277
  %3279 = urem i32 %3278, 2
  %3280 = icmp eq i32 %3279, 0
  %3281 = icmp slt i32 %3276, 10
  %3282 = or i1 %3280, %3281
  br i1 %3282, label %originalBB852, label %originalBB852alteredBB

originalBB852:                                    ; preds = %3274, %originalBB852alteredBB
  %3283 = load i64, i64* %49, align 8, !dbg !1685
  %3284 = load i64, i64* %48, align 8, !dbg !1687
  %3285 = icmp ult i64 %3283, %3284, !dbg !1688
  %3286 = load i32, i32* @x.19
  %3287 = load i32, i32* @y.20
  %3288 = sub i32 %3286, 1
  %3289 = mul i32 %3286, %3288
  %3290 = urem i32 %3289, 2
  %3291 = icmp eq i32 %3290, 0
  %3292 = icmp slt i32 %3287, 10
  %3293 = or i1 %3291, %3292
  br i1 %3293, label %originalBBpart2854, label %originalBB852alteredBB

originalBBpart2854:                               ; preds = %originalBB852
  br i1 %3285, label %3294, label %3374, !dbg !1689

3294:                                             ; preds = %originalBBpart2854
  %3295 = load i32, i32* @x.19
  %3296 = load i32, i32* @y.20
  %3297 = sub i32 %3295, 1
  %3298 = mul i32 %3295, %3297
  %3299 = urem i32 %3298, 2
  %3300 = icmp eq i32 %3299, 0
  %3301 = icmp slt i32 %3296, 10
  %3302 = or i1 %3300, %3301
  br i1 %3302, label %originalBB856, label %originalBB856alteredBB

originalBB856:                                    ; preds = %3294, %originalBB856alteredBB
  %3303 = load i8*, i8** %21, align 8, !dbg !1690
  %3304 = load i64, i64* %28, align 8, !dbg !1691
  %3305 = load i64, i64* %44, align 8, !dbg !1692
  %3306 = add i64 %3304, %3305, !dbg !1693
  %3307 = load i64, i64* %49, align 8, !dbg !1694
  %3308 = add i64 %3306, %3307, !dbg !1695
  %3309 = getelementptr inbounds i8, i8* %3303, i64 %3308, !dbg !1690
  %3310 = load i8, i8* %3309, align 1, !dbg !1690
  %3311 = sext i8 %3310 to i32, !dbg !1690
  %3312 = load i32, i32* @x.19
  %3313 = load i32, i32* @y.20
  %3314 = sub i32 %3312, 1
  %3315 = mul i32 %3312, %3314
  %3316 = urem i32 %3315, 2
  %3317 = icmp eq i32 %3316, 0
  %3318 = icmp slt i32 %3313, 10
  %3319 = or i1 %3317, %3318
  br i1 %3319, label %originalBBpart2868, label %originalBB856alteredBB

originalBBpart2868:                               ; preds = %originalBB856
  switch i32 %3311, label %3321 [
    i32 91, label %3320
    i32 92, label %3320
    i32 94, label %3320
    i32 96, label %3320
    i32 124, label %3320
  ], !dbg !1696

3320:                                             ; preds = %originalBBpart2868, %originalBBpart2868, %originalBBpart2868, %originalBBpart2868, %originalBBpart2868
  br label %5870, !dbg !1697

3321:                                             ; preds = %originalBBpart2868
  %3322 = load i32, i32* @x.19
  %3323 = load i32, i32* @y.20
  %3324 = sub i32 %3322, 1
  %3325 = mul i32 %3322, %3324
  %3326 = urem i32 %3325, 2
  %3327 = icmp eq i32 %3326, 0
  %3328 = icmp slt i32 %3323, 10
  %3329 = or i1 %3327, %3328
  br i1 %3329, label %originalBB870, label %originalBB870alteredBB

originalBB870:                                    ; preds = %3321, %originalBB870alteredBB
  %3330 = load i32, i32* @x.19
  %3331 = load i32, i32* @y.20
  %3332 = sub i32 %3330, 1
  %3333 = mul i32 %3330, %3332
  %3334 = urem i32 %3333, 2
  %3335 = icmp eq i32 %3334, 0
  %3336 = icmp slt i32 %3331, 10
  %3337 = or i1 %3335, %3336
  br i1 %3337, label %originalBBpart2872, label %originalBB870alteredBB

originalBBpart2872:                               ; preds = %originalBB870
  br label %3338, !dbg !1699

3338:                                             ; preds = %originalBBpart2872
  %3339 = load i32, i32* @x.19
  %3340 = load i32, i32* @y.20
  %3341 = sub i32 %3339, 1
  %3342 = mul i32 %3339, %3341
  %3343 = urem i32 %3342, 2
  %3344 = icmp eq i32 %3343, 0
  %3345 = icmp slt i32 %3340, 10
  %3346 = or i1 %3344, %3345
  br i1 %3346, label %originalBB874, label %originalBB874alteredBB

originalBB874:                                    ; preds = %3338, %originalBB874alteredBB
  %3347 = load i32, i32* @x.19
  %3348 = load i32, i32* @y.20
  %3349 = sub i32 %3347, 1
  %3350 = mul i32 %3347, %3349
  %3351 = urem i32 %3350, 2
  %3352 = icmp eq i32 %3351, 0
  %3353 = icmp slt i32 %3348, 10
  %3354 = or i1 %3352, %3353
  br i1 %3354, label %originalBBpart2876, label %originalBB874alteredBB

originalBBpart2876:                               ; preds = %originalBB874
  br label %3355, !dbg !1700

3355:                                             ; preds = %originalBBpart2876
  %3356 = load i32, i32* @x.19
  %3357 = load i32, i32* @y.20
  %3358 = sub i32 %3356, 1
  %3359 = mul i32 %3356, %3358
  %3360 = urem i32 %3359, 2
  %3361 = icmp eq i32 %3360, 0
  %3362 = icmp slt i32 %3357, 10
  %3363 = or i1 %3361, %3362
  br i1 %3363, label %originalBB878, label %originalBB878alteredBB

originalBB878:                                    ; preds = %3355, %originalBB878alteredBB
  %3364 = load i64, i64* %49, align 8, !dbg !1701
  %3365 = add i64 %3364, 1, !dbg !1701
  store i64 %3365, i64* %49, align 8, !dbg !1701
  %3366 = load i32, i32* @x.19
  %3367 = load i32, i32* @y.20
  %3368 = sub i32 %3366, 1
  %3369 = mul i32 %3366, %3368
  %3370 = urem i32 %3369, 2
  %3371 = icmp eq i32 %3370, 0
  %3372 = icmp slt i32 %3367, 10
  %3373 = or i1 %3371, %3372
  br i1 %3373, label %originalBBpart2884, label %originalBB878alteredBB

originalBBpart2884:                               ; preds = %originalBB878
  br label %3274, !dbg !1702, !llvm.loop !1703

3374:                                             ; preds = %originalBBpart2854
  %3375 = load i32, i32* @x.19
  %3376 = load i32, i32* @y.20
  %3377 = sub i32 %3375, 1
  %3378 = mul i32 %3375, %3377
  %3379 = urem i32 %3378, 2
  %3380 = icmp eq i32 %3379, 0
  %3381 = icmp slt i32 %3376, 10
  %3382 = or i1 %3380, %3381
  br i1 %3382, label %originalBB886, label %originalBB886alteredBB

originalBB886:                                    ; preds = %3374, %originalBB886alteredBB
  %3383 = load i32, i32* @x.19
  %3384 = load i32, i32* @y.20
  %3385 = sub i32 %3383, 1
  %3386 = mul i32 %3383, %3385
  %3387 = urem i32 %3386, 2
  %3388 = icmp eq i32 %3387, 0
  %3389 = icmp slt i32 %3384, 10
  %3390 = or i1 %3388, %3389
  br i1 %3390, label %originalBBpart2888, label %originalBB886alteredBB

originalBBpart2888:                               ; preds = %originalBB886
  br label %3391, !dbg !1705

3391:                                             ; preds = %originalBBpart2888, %originalBBpart2850, %3251
  %3392 = load i32, i32* @x.19
  %3393 = load i32, i32* @y.20
  %3394 = sub i32 %3392, 1
  %3395 = mul i32 %3392, %3394
  %3396 = urem i32 %3395, 2
  %3397 = icmp eq i32 %3396, 0
  %3398 = icmp slt i32 %3393, 10
  %3399 = or i1 %3397, %3398
  br i1 %3399, label %originalBB890, label %originalBB890alteredBB

originalBB890:                                    ; preds = %3391, %originalBB890alteredBB
  %3400 = load i32, i32* %47, align 4, !dbg !1706
  %3401 = call i32 @iswprint(i32 %3400) #10, !dbg !1708
  %3402 = icmp ne i32 %3401, 0, !dbg !1708
  %3403 = load i32, i32* @x.19
  %3404 = load i32, i32* @y.20
  %3405 = sub i32 %3403, 1
  %3406 = mul i32 %3403, %3405
  %3407 = urem i32 %3406, 2
  %3408 = icmp eq i32 %3407, 0
  %3409 = icmp slt i32 %3404, 10
  %3410 = or i1 %3408, %3409
  br i1 %3410, label %originalBBpart2892, label %originalBB890alteredBB

originalBBpart2892:                               ; preds = %originalBB890
  br i1 %3402, label %3428, label %3411, !dbg !1709

3411:                                             ; preds = %originalBBpart2892
  %3412 = load i32, i32* @x.19
  %3413 = load i32, i32* @y.20
  %3414 = sub i32 %3412, 1
  %3415 = mul i32 %3412, %3414
  %3416 = urem i32 %3415, 2
  %3417 = icmp eq i32 %3416, 0
  %3418 = icmp slt i32 %3413, 10
  %3419 = or i1 %3417, %3418
  br i1 %3419, label %originalBB894, label %originalBB894alteredBB

originalBB894:                                    ; preds = %3411, %originalBB894alteredBB
  store i8 0, i8* %45, align 1, !dbg !1710
  %3420 = load i32, i32* @x.19
  %3421 = load i32, i32* @y.20
  %3422 = sub i32 %3420, 1
  %3423 = mul i32 %3420, %3422
  %3424 = urem i32 %3423, 2
  %3425 = icmp eq i32 %3424, 0
  %3426 = icmp slt i32 %3421, 10
  %3427 = or i1 %3425, %3426
  br i1 %3427, label %originalBBpart2896, label %originalBB894alteredBB

originalBBpart2896:                               ; preds = %originalBB894
  br label %3428, !dbg !1711

3428:                                             ; preds = %originalBBpart2896, %originalBBpart2892
  %3429 = load i32, i32* @x.19
  %3430 = load i32, i32* @y.20
  %3431 = sub i32 %3429, 1
  %3432 = mul i32 %3429, %3431
  %3433 = urem i32 %3432, 2
  %3434 = icmp eq i32 %3433, 0
  %3435 = icmp slt i32 %3430, 10
  %3436 = or i1 %3434, %3435
  br i1 %3436, label %originalBB898, label %originalBB898alteredBB

originalBB898:                                    ; preds = %3428, %originalBB898alteredBB
  %3437 = load i64, i64* %48, align 8, !dbg !1712
  %3438 = load i64, i64* %44, align 8, !dbg !1713
  %3439 = add i64 %3438, %3437, !dbg !1713
  store i64 %3439, i64* %44, align 8, !dbg !1713
  %3440 = load i32, i32* @x.19
  %3441 = load i32, i32* @y.20
  %3442 = sub i32 %3440, 1
  %3443 = mul i32 %3440, %3442
  %3444 = urem i32 %3443, 2
  %3445 = icmp eq i32 %3444, 0
  %3446 = icmp slt i32 %3441, 10
  %3447 = or i1 %3445, %3446
  br i1 %3447, label %originalBBpart2901, label %originalBB898alteredBB

originalBBpart2901:                               ; preds = %originalBB898
  br label %3448

3448:                                             ; preds = %originalBBpart2901
  %3449 = load i32, i32* @x.19
  %3450 = load i32, i32* @y.20
  %3451 = sub i32 %3449, 1
  %3452 = mul i32 %3449, %3451
  %3453 = urem i32 %3452, 2
  %3454 = icmp eq i32 %3453, 0
  %3455 = icmp slt i32 %3450, 10
  %3456 = or i1 %3454, %3455
  br i1 %3456, label %originalBB903, label %originalBB903alteredBB

originalBB903:                                    ; preds = %3448, %originalBB903alteredBB
  %3457 = load i32, i32* @x.19
  %3458 = load i32, i32* @y.20
  %3459 = sub i32 %3457, 1
  %3460 = mul i32 %3457, %3459
  %3461 = urem i32 %3460, 2
  %3462 = icmp eq i32 %3461, 0
  %3463 = icmp slt i32 %3458, 10
  %3464 = or i1 %3462, %3463
  br i1 %3464, label %originalBBpart2905, label %originalBB903alteredBB

originalBBpart2905:                               ; preds = %originalBB903
  br label %3465

3465:                                             ; preds = %originalBBpart2905
  br label %3466

3466:                                             ; preds = %3465
  %3467 = load i32, i32* @x.19
  %3468 = load i32, i32* @y.20
  %3469 = sub i32 %3467, 1
  %3470 = mul i32 %3467, %3469
  %3471 = urem i32 %3470, 2
  %3472 = icmp eq i32 %3471, 0
  %3473 = icmp slt i32 %3468, 10
  %3474 = or i1 %3472, %3473
  br i1 %3474, label %originalBB907, label %originalBB907alteredBB

originalBB907:                                    ; preds = %3466, %originalBB907alteredBB
  %3475 = load i32, i32* @x.19
  %3476 = load i32, i32* @y.20
  %3477 = sub i32 %3475, 1
  %3478 = mul i32 %3475, %3477
  %3479 = urem i32 %3478, 2
  %3480 = icmp eq i32 %3479, 0
  %3481 = icmp slt i32 %3476, 10
  %3482 = or i1 %3480, %3481
  br i1 %3482, label %originalBBpart2909, label %originalBB907alteredBB

originalBBpart2909:                               ; preds = %originalBB907
  br label %3483, !dbg !1714

3483:                                             ; preds = %originalBBpart2909
  %3484 = load i32, i32* @x.19
  %3485 = load i32, i32* @y.20
  %3486 = sub i32 %3484, 1
  %3487 = mul i32 %3484, %3486
  %3488 = urem i32 %3487, 2
  %3489 = icmp eq i32 %3488, 0
  %3490 = icmp slt i32 %3485, 10
  %3491 = or i1 %3489, %3490
  br i1 %3491, label %originalBB911, label %originalBB911alteredBB

originalBB911:                                    ; preds = %3483, %originalBB911alteredBB
  %3492 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1715
  %3493 = icmp ne i32 %3492, 0, !dbg !1716
  %3494 = xor i1 %3493, true, !dbg !1716
  %3495 = load i32, i32* @x.19
  %3496 = load i32, i32* @y.20
  %3497 = sub i32 %3495, 1
  %3498 = mul i32 %3495, %3497
  %3499 = urem i32 %3498, 2
  %3500 = icmp eq i32 %3499, 0
  %3501 = icmp slt i32 %3496, 10
  %3502 = or i1 %3500, %3501
  br i1 %3502, label %originalBBpart2916, label %originalBB911alteredBB

originalBBpart2916:                               ; preds = %originalBB911
  br i1 %3494, label %3063, label %3503, !dbg !1714, !llvm.loop !1717

3503:                                             ; preds = %originalBBpart2916, %originalBBpart2846, %originalBBpart2805, %originalBBpart2797
  %3504 = load i32, i32* @x.19
  %3505 = load i32, i32* @y.20
  %3506 = sub i32 %3504, 1
  %3507 = mul i32 %3504, %3506
  %3508 = urem i32 %3507, 2
  %3509 = icmp eq i32 %3508, 0
  %3510 = icmp slt i32 %3505, 10
  %3511 = or i1 %3509, %3510
  br i1 %3511, label %originalBB918, label %originalBB918alteredBB

originalBB918:                                    ; preds = %3503, %originalBB918alteredBB
  %3512 = load i32, i32* @x.19
  %3513 = load i32, i32* @y.20
  %3514 = sub i32 %3512, 1
  %3515 = mul i32 %3512, %3514
  %3516 = urem i32 %3515, 2
  %3517 = icmp eq i32 %3516, 0
  %3518 = icmp slt i32 %3513, 10
  %3519 = or i1 %3517, %3518
  br i1 %3519, label %originalBBpart2920, label %originalBB918alteredBB

originalBBpart2920:                               ; preds = %originalBB918
  br label %3520

3520:                                             ; preds = %originalBBpart2920, %originalBBpart2781
  %3521 = load i32, i32* @x.19
  %3522 = load i32, i32* @y.20
  %3523 = sub i32 %3521, 1
  %3524 = mul i32 %3521, %3523
  %3525 = urem i32 %3524, 2
  %3526 = icmp eq i32 %3525, 0
  %3527 = icmp slt i32 %3522, 10
  %3528 = or i1 %3526, %3527
  br i1 %3528, label %originalBB922, label %originalBB922alteredBB

originalBB922:                                    ; preds = %3520, %originalBB922alteredBB
  %3529 = load i8, i8* %45, align 1, !dbg !1719
  %3530 = trunc i8 %3529 to i1, !dbg !1719
  %3531 = zext i1 %3530 to i8, !dbg !1720
  store i8 %3531, i8* %43, align 1, !dbg !1720
  %3532 = load i64, i64* %44, align 8, !dbg !1721
  %3533 = icmp ult i64 1, %3532, !dbg !1723
  %3534 = load i32, i32* @x.19
  %3535 = load i32, i32* @y.20
  %3536 = sub i32 %3534, 1
  %3537 = mul i32 %3534, %3536
  %3538 = urem i32 %3537, 2
  %3539 = icmp eq i32 %3538, 0
  %3540 = icmp slt i32 %3535, 10
  %3541 = or i1 %3539, %3540
  br i1 %3541, label %originalBBpart2924, label %originalBB922alteredBB

originalBBpart2924:                               ; preds = %originalBB922
  br i1 %3533, label %3580, label %3542, !dbg !1724

3542:                                             ; preds = %originalBBpart2924
  %3543 = load i32, i32* @x.19
  %3544 = load i32, i32* @y.20
  %3545 = sub i32 %3543, 1
  %3546 = mul i32 %3543, %3545
  %3547 = urem i32 %3546, 2
  %3548 = icmp eq i32 %3547, 0
  %3549 = icmp slt i32 %3544, 10
  %3550 = or i1 %3548, %3549
  br i1 %3550, label %originalBB926, label %originalBB926alteredBB

originalBB926:                                    ; preds = %3542, %originalBB926alteredBB
  %3551 = load i8, i8* %33, align 1, !dbg !1725
  %3552 = trunc i8 %3551 to i1, !dbg !1725
  %3553 = load i32, i32* @x.19
  %3554 = load i32, i32* @y.20
  %3555 = sub i32 %3553, 1
  %3556 = mul i32 %3553, %3555
  %3557 = urem i32 %3556, 2
  %3558 = icmp eq i32 %3557, 0
  %3559 = icmp slt i32 %3554, 10
  %3560 = or i1 %3558, %3559
  br i1 %3560, label %originalBBpart2928, label %originalBB926alteredBB

originalBBpart2928:                               ; preds = %originalBB926
  br i1 %3552, label %3561, label %4504, !dbg !1726

3561:                                             ; preds = %originalBBpart2928
  %3562 = load i32, i32* @x.19
  %3563 = load i32, i32* @y.20
  %3564 = sub i32 %3562, 1
  %3565 = mul i32 %3562, %3564
  %3566 = urem i32 %3565, 2
  %3567 = icmp eq i32 %3566, 0
  %3568 = icmp slt i32 %3563, 10
  %3569 = or i1 %3567, %3568
  br i1 %3569, label %originalBB930, label %originalBB930alteredBB

originalBB930:                                    ; preds = %3561, %originalBB930alteredBB
  %3570 = load i8, i8* %45, align 1, !dbg !1727
  %3571 = trunc i8 %3570 to i1, !dbg !1727
  %3572 = load i32, i32* @x.19
  %3573 = load i32, i32* @y.20
  %3574 = sub i32 %3572, 1
  %3575 = mul i32 %3572, %3574
  %3576 = urem i32 %3575, 2
  %3577 = icmp eq i32 %3576, 0
  %3578 = icmp slt i32 %3573, 10
  %3579 = or i1 %3577, %3578
  br i1 %3579, label %originalBBpart2932, label %originalBB930alteredBB

originalBBpart2932:                               ; preds = %originalBB930
  br i1 %3571, label %4504, label %3580, !dbg !1728

3580:                                             ; preds = %originalBBpart2932, %originalBBpart2924
  call void @llvm.dbg.declare(metadata i64* %50, metadata !1729, metadata !DIExpression()), !dbg !1731
  %3581 = load i32, i32* @x.19
  %3582 = load i32, i32* @y.20
  %3583 = sub i32 %3581, 1
  %3584 = mul i32 %3581, %3583
  %3585 = urem i32 %3584, 2
  %3586 = icmp eq i32 %3585, 0
  %3587 = icmp slt i32 %3582, 10
  %3588 = or i1 %3586, %3587
  br i1 %3588, label %originalBB934, label %originalBB934alteredBB

originalBB934:                                    ; preds = %3580, %originalBB934alteredBB
  %3589 = load i64, i64* %28, align 8, !dbg !1732
  %3590 = load i64, i64* %44, align 8, !dbg !1733
  %3591 = add i64 %3589, %3590, !dbg !1734
  store i64 %3591, i64* %50, align 8, !dbg !1731
  %3592 = load i32, i32* @x.19
  %3593 = load i32, i32* @y.20
  %3594 = sub i32 %3592, 1
  %3595 = mul i32 %3592, %3594
  %3596 = urem i32 %3595, 2
  %3597 = icmp eq i32 %3596, 0
  %3598 = icmp slt i32 %3593, 10
  %3599 = or i1 %3597, %3598
  br i1 %3599, label %originalBBpart2943, label %originalBB934alteredBB

originalBBpart2943:                               ; preds = %originalBB934
  br label %3600, !dbg !1735

3600:                                             ; preds = %originalBBpart21214, %originalBBpart2943
  %3601 = load i8, i8* %33, align 1, !dbg !1736
  %3602 = trunc i8 %3601 to i1, !dbg !1736
  br i1 %3602, label %3603, label %4172, !dbg !1741

3603:                                             ; preds = %3600
  %3604 = load i32, i32* @x.19
  %3605 = load i32, i32* @y.20
  %3606 = sub i32 %3604, 1
  %3607 = mul i32 %3604, %3606
  %3608 = urem i32 %3607, 2
  %3609 = icmp eq i32 %3608, 0
  %3610 = icmp slt i32 %3605, 10
  %3611 = or i1 %3609, %3610
  br i1 %3611, label %originalBB945, label %originalBB945alteredBB

originalBB945:                                    ; preds = %3603, %originalBB945alteredBB
  %3612 = load i8, i8* %45, align 1, !dbg !1742
  %3613 = trunc i8 %3612 to i1, !dbg !1742
  %3614 = load i32, i32* @x.19
  %3615 = load i32, i32* @y.20
  %3616 = sub i32 %3614, 1
  %3617 = mul i32 %3614, %3616
  %3618 = urem i32 %3617, 2
  %3619 = icmp eq i32 %3618, 0
  %3620 = icmp slt i32 %3615, 10
  %3621 = or i1 %3619, %3620
  br i1 %3621, label %originalBBpart2947, label %originalBB945alteredBB

originalBBpart2947:                               ; preds = %originalBB945
  br i1 %3613, label %4172, label %3622, !dbg !1743

3622:                                             ; preds = %originalBBpart2947
  br label %3623, !dbg !1744

3623:                                             ; preds = %3622
  %3624 = load i32, i32* @x.19
  %3625 = load i32, i32* @y.20
  %3626 = sub i32 %3624, 1
  %3627 = mul i32 %3624, %3626
  %3628 = urem i32 %3627, 2
  %3629 = icmp eq i32 %3628, 0
  %3630 = icmp slt i32 %3625, 10
  %3631 = or i1 %3629, %3630
  br i1 %3631, label %originalBB949, label %originalBB949alteredBB

originalBB949:                                    ; preds = %3623, %originalBB949alteredBB
  %3632 = load i8, i8* %35, align 1, !dbg !1746
  %3633 = trunc i8 %3632 to i1, !dbg !1746
  %3634 = load i32, i32* @x.19
  %3635 = load i32, i32* @y.20
  %3636 = sub i32 %3634, 1
  %3637 = mul i32 %3634, %3636
  %3638 = urem i32 %3637, 2
  %3639 = icmp eq i32 %3638, 0
  %3640 = icmp slt i32 %3635, 10
  %3641 = or i1 %3639, %3640
  br i1 %3641, label %originalBBpart2951, label %originalBB949alteredBB

originalBBpart2951:                               ; preds = %originalBB949
  br i1 %3633, label %3642, label %3659, !dbg !1749

3642:                                             ; preds = %originalBBpart2951
  %3643 = load i32, i32* @x.19
  %3644 = load i32, i32* @y.20
  %3645 = sub i32 %3643, 1
  %3646 = mul i32 %3643, %3645
  %3647 = urem i32 %3646, 2
  %3648 = icmp eq i32 %3647, 0
  %3649 = icmp slt i32 %3644, 10
  %3650 = or i1 %3648, %3649
  br i1 %3650, label %originalBB953, label %originalBB953alteredBB

originalBB953:                                    ; preds = %3642, %originalBB953alteredBB
  %3651 = load i32, i32* @x.19
  %3652 = load i32, i32* @y.20
  %3653 = sub i32 %3651, 1
  %3654 = mul i32 %3651, %3653
  %3655 = urem i32 %3654, 2
  %3656 = icmp eq i32 %3655, 0
  %3657 = icmp slt i32 %3652, 10
  %3658 = or i1 %3656, %3657
  br i1 %3658, label %originalBBpart2955, label %originalBB953alteredBB

originalBBpart2955:                               ; preds = %originalBB953
  br label %5870, !dbg !1746

3659:                                             ; preds = %originalBBpart2951
  %3660 = load i32, i32* @x.19
  %3661 = load i32, i32* @y.20
  %3662 = sub i32 %3660, 1
  %3663 = mul i32 %3660, %3662
  %3664 = urem i32 %3663, 2
  %3665 = icmp eq i32 %3664, 0
  %3666 = icmp slt i32 %3661, 10
  %3667 = or i1 %3665, %3666
  br i1 %3667, label %originalBB957, label %originalBB957alteredBB

originalBB957:                                    ; preds = %3659, %originalBB957alteredBB
  store i8 1, i8* %42, align 1, !dbg !1749
  %3668 = load i32, i32* %23, align 4, !dbg !1750
  %3669 = icmp eq i32 %3668, 2, !dbg !1750
  %3670 = load i32, i32* @x.19
  %3671 = load i32, i32* @y.20
  %3672 = sub i32 %3670, 1
  %3673 = mul i32 %3670, %3672
  %3674 = urem i32 %3673, 2
  %3675 = icmp eq i32 %3674, 0
  %3676 = icmp slt i32 %3671, 10
  %3677 = or i1 %3675, %3676
  br i1 %3677, label %originalBBpart2959, label %originalBB957alteredBB

originalBBpart2959:                               ; preds = %originalBB957
  br i1 %3669, label %3678, label %3894, !dbg !1750

3678:                                             ; preds = %originalBBpart2959
  %3679 = load i32, i32* @x.19
  %3680 = load i32, i32* @y.20
  %3681 = sub i32 %3679, 1
  %3682 = mul i32 %3679, %3681
  %3683 = urem i32 %3682, 2
  %3684 = icmp eq i32 %3683, 0
  %3685 = icmp slt i32 %3680, 10
  %3686 = or i1 %3684, %3685
  br i1 %3686, label %originalBB961, label %originalBB961alteredBB

originalBB961:                                    ; preds = %3678, %originalBB961alteredBB
  %3687 = load i8, i8* %36, align 1, !dbg !1750
  %3688 = trunc i8 %3687 to i1, !dbg !1750
  %3689 = load i32, i32* @x.19
  %3690 = load i32, i32* @y.20
  %3691 = sub i32 %3689, 1
  %3692 = mul i32 %3689, %3691
  %3693 = urem i32 %3692, 2
  %3694 = icmp eq i32 %3693, 0
  %3695 = icmp slt i32 %3690, 10
  %3696 = or i1 %3694, %3695
  br i1 %3696, label %originalBBpart2963, label %originalBB961alteredBB

originalBBpart2963:                               ; preds = %originalBB961
  br i1 %3688, label %3894, label %3697, !dbg !1749

3697:                                             ; preds = %originalBBpart2963
  %3698 = load i32, i32* @x.19
  %3699 = load i32, i32* @y.20
  %3700 = sub i32 %3698, 1
  %3701 = mul i32 %3698, %3700
  %3702 = urem i32 %3701, 2
  %3703 = icmp eq i32 %3702, 0
  %3704 = icmp slt i32 %3699, 10
  %3705 = or i1 %3703, %3704
  br i1 %3705, label %originalBB965, label %originalBB965alteredBB

originalBB965:                                    ; preds = %3697, %originalBB965alteredBB
  %3706 = load i32, i32* @x.19
  %3707 = load i32, i32* @y.20
  %3708 = sub i32 %3706, 1
  %3709 = mul i32 %3706, %3708
  %3710 = urem i32 %3709, 2
  %3711 = icmp eq i32 %3710, 0
  %3712 = icmp slt i32 %3707, 10
  %3713 = or i1 %3711, %3712
  br i1 %3713, label %originalBBpart2967, label %originalBB965alteredBB

originalBBpart2967:                               ; preds = %originalBB965
  br label %3714, !dbg !1752

3714:                                             ; preds = %originalBBpart2967
  %3715 = load i32, i32* @x.19
  %3716 = load i32, i32* @y.20
  %3717 = sub i32 %3715, 1
  %3718 = mul i32 %3715, %3717
  %3719 = urem i32 %3718, 2
  %3720 = icmp eq i32 %3719, 0
  %3721 = icmp slt i32 %3716, 10
  %3722 = or i1 %3720, %3721
  br i1 %3722, label %originalBB969, label %originalBB969alteredBB

originalBB969:                                    ; preds = %3714, %originalBB969alteredBB
  %3723 = load i64, i64* %29, align 8, !dbg !1754
  %3724 = load i64, i64* %20, align 8, !dbg !1754
  %3725 = icmp ult i64 %3723, %3724, !dbg !1754
  %3726 = load i32, i32* @x.19
  %3727 = load i32, i32* @y.20
  %3728 = sub i32 %3726, 1
  %3729 = mul i32 %3726, %3728
  %3730 = urem i32 %3729, 2
  %3731 = icmp eq i32 %3730, 0
  %3732 = icmp slt i32 %3727, 10
  %3733 = or i1 %3731, %3732
  br i1 %3733, label %originalBBpart2971, label %originalBB969alteredBB

originalBBpart2971:                               ; preds = %originalBB969
  br i1 %3725, label %3734, label %3754, !dbg !1757

3734:                                             ; preds = %originalBBpart2971
  %3735 = load i32, i32* @x.19
  %3736 = load i32, i32* @y.20
  %3737 = sub i32 %3735, 1
  %3738 = mul i32 %3735, %3737
  %3739 = urem i32 %3738, 2
  %3740 = icmp eq i32 %3739, 0
  %3741 = icmp slt i32 %3736, 10
  %3742 = or i1 %3740, %3741
  br i1 %3742, label %originalBB973, label %originalBB973alteredBB

originalBB973:                                    ; preds = %3734, %originalBB973alteredBB
  %3743 = load i8*, i8** %19, align 8, !dbg !1754
  %3744 = load i64, i64* %29, align 8, !dbg !1754
  %3745 = getelementptr inbounds i8, i8* %3743, i64 %3744, !dbg !1754
  store i8 39, i8* %3745, align 1, !dbg !1754
  %3746 = load i32, i32* @x.19
  %3747 = load i32, i32* @y.20
  %3748 = sub i32 %3746, 1
  %3749 = mul i32 %3746, %3748
  %3750 = urem i32 %3749, 2
  %3751 = icmp eq i32 %3750, 0
  %3752 = icmp slt i32 %3747, 10
  %3753 = or i1 %3751, %3752
  br i1 %3753, label %originalBBpart2975, label %originalBB973alteredBB

originalBBpart2975:                               ; preds = %originalBB973
  br label %3754, !dbg !1754

3754:                                             ; preds = %originalBBpart2975, %originalBBpart2971
  %3755 = load i32, i32* @x.19
  %3756 = load i32, i32* @y.20
  %3757 = sub i32 %3755, 1
  %3758 = mul i32 %3755, %3757
  %3759 = urem i32 %3758, 2
  %3760 = icmp eq i32 %3759, 0
  %3761 = icmp slt i32 %3756, 10
  %3762 = or i1 %3760, %3761
  br i1 %3762, label %originalBB977, label %originalBB977alteredBB

originalBB977:                                    ; preds = %3754, %originalBB977alteredBB
  %3763 = load i64, i64* %29, align 8, !dbg !1757
  %3764 = add i64 %3763, 1, !dbg !1757
  store i64 %3764, i64* %29, align 8, !dbg !1757
  %3765 = load i32, i32* @x.19
  %3766 = load i32, i32* @y.20
  %3767 = sub i32 %3765, 1
  %3768 = mul i32 %3765, %3767
  %3769 = urem i32 %3768, 2
  %3770 = icmp eq i32 %3769, 0
  %3771 = icmp slt i32 %3766, 10
  %3772 = or i1 %3770, %3771
  br i1 %3772, label %originalBBpart2984, label %originalBB977alteredBB

originalBBpart2984:                               ; preds = %originalBB977
  br label %3773, !dbg !1757

3773:                                             ; preds = %originalBBpart2984
  br label %3774, !dbg !1752

3774:                                             ; preds = %3773
  %3775 = load i32, i32* @x.19
  %3776 = load i32, i32* @y.20
  %3777 = sub i32 %3775, 1
  %3778 = mul i32 %3775, %3777
  %3779 = urem i32 %3778, 2
  %3780 = icmp eq i32 %3779, 0
  %3781 = icmp slt i32 %3776, 10
  %3782 = or i1 %3780, %3781
  br i1 %3782, label %originalBB986, label %originalBB986alteredBB

originalBB986:                                    ; preds = %3774, %originalBB986alteredBB
  %3783 = load i64, i64* %29, align 8, !dbg !1758
  %3784 = load i64, i64* %20, align 8, !dbg !1758
  %3785 = icmp ult i64 %3783, %3784, !dbg !1758
  %3786 = load i32, i32* @x.19
  %3787 = load i32, i32* @y.20
  %3788 = sub i32 %3786, 1
  %3789 = mul i32 %3786, %3788
  %3790 = urem i32 %3789, 2
  %3791 = icmp eq i32 %3790, 0
  %3792 = icmp slt i32 %3787, 10
  %3793 = or i1 %3791, %3792
  br i1 %3793, label %originalBBpart2988, label %originalBB986alteredBB

originalBBpart2988:                               ; preds = %originalBB986
  br i1 %3785, label %3794, label %3814, !dbg !1761

3794:                                             ; preds = %originalBBpart2988
  %3795 = load i32, i32* @x.19
  %3796 = load i32, i32* @y.20
  %3797 = sub i32 %3795, 1
  %3798 = mul i32 %3795, %3797
  %3799 = urem i32 %3798, 2
  %3800 = icmp eq i32 %3799, 0
  %3801 = icmp slt i32 %3796, 10
  %3802 = or i1 %3800, %3801
  br i1 %3802, label %originalBB990, label %originalBB990alteredBB

originalBB990:                                    ; preds = %3794, %originalBB990alteredBB
  %3803 = load i8*, i8** %19, align 8, !dbg !1758
  %3804 = load i64, i64* %29, align 8, !dbg !1758
  %3805 = getelementptr inbounds i8, i8* %3803, i64 %3804, !dbg !1758
  store i8 36, i8* %3805, align 1, !dbg !1758
  %3806 = load i32, i32* @x.19
  %3807 = load i32, i32* @y.20
  %3808 = sub i32 %3806, 1
  %3809 = mul i32 %3806, %3808
  %3810 = urem i32 %3809, 2
  %3811 = icmp eq i32 %3810, 0
  %3812 = icmp slt i32 %3807, 10
  %3813 = or i1 %3811, %3812
  br i1 %3813, label %originalBBpart2992, label %originalBB990alteredBB

originalBBpart2992:                               ; preds = %originalBB990
  br label %3814, !dbg !1758

3814:                                             ; preds = %originalBBpart2992, %originalBBpart2988
  %3815 = load i32, i32* @x.19
  %3816 = load i32, i32* @y.20
  %3817 = sub i32 %3815, 1
  %3818 = mul i32 %3815, %3817
  %3819 = urem i32 %3818, 2
  %3820 = icmp eq i32 %3819, 0
  %3821 = icmp slt i32 %3816, 10
  %3822 = or i1 %3820, %3821
  br i1 %3822, label %originalBB994, label %originalBB994alteredBB

originalBB994:                                    ; preds = %3814, %originalBB994alteredBB
  %3823 = load i64, i64* %29, align 8, !dbg !1761
  %3824 = add i64 %3823, 1, !dbg !1761
  store i64 %3824, i64* %29, align 8, !dbg !1761
  %3825 = load i32, i32* @x.19
  %3826 = load i32, i32* @y.20
  %3827 = sub i32 %3825, 1
  %3828 = mul i32 %3825, %3827
  %3829 = urem i32 %3828, 2
  %3830 = icmp eq i32 %3829, 0
  %3831 = icmp slt i32 %3826, 10
  %3832 = or i1 %3830, %3831
  br i1 %3832, label %originalBBpart21008, label %originalBB994alteredBB

originalBBpart21008:                              ; preds = %originalBB994
  br label %3833, !dbg !1761

3833:                                             ; preds = %originalBBpart21008
  br label %3834, !dbg !1752

3834:                                             ; preds = %3833
  %3835 = load i64, i64* %29, align 8, !dbg !1762
  %3836 = load i64, i64* %20, align 8, !dbg !1762
  %3837 = icmp ult i64 %3835, %3836, !dbg !1762
  br i1 %3837, label %3838, label %3858, !dbg !1765

3838:                                             ; preds = %3834
  %3839 = load i32, i32* @x.19
  %3840 = load i32, i32* @y.20
  %3841 = sub i32 %3839, 1
  %3842 = mul i32 %3839, %3841
  %3843 = urem i32 %3842, 2
  %3844 = icmp eq i32 %3843, 0
  %3845 = icmp slt i32 %3840, 10
  %3846 = or i1 %3844, %3845
  br i1 %3846, label %originalBB1010, label %originalBB1010alteredBB

originalBB1010:                                   ; preds = %3838, %originalBB1010alteredBB
  %3847 = load i8*, i8** %19, align 8, !dbg !1762
  %3848 = load i64, i64* %29, align 8, !dbg !1762
  %3849 = getelementptr inbounds i8, i8* %3847, i64 %3848, !dbg !1762
  store i8 39, i8* %3849, align 1, !dbg !1762
  %3850 = load i32, i32* @x.19
  %3851 = load i32, i32* @y.20
  %3852 = sub i32 %3850, 1
  %3853 = mul i32 %3850, %3852
  %3854 = urem i32 %3853, 2
  %3855 = icmp eq i32 %3854, 0
  %3856 = icmp slt i32 %3851, 10
  %3857 = or i1 %3855, %3856
  br i1 %3857, label %originalBBpart21012, label %originalBB1010alteredBB

originalBBpart21012:                              ; preds = %originalBB1010
  br label %3858, !dbg !1762

3858:                                             ; preds = %originalBBpart21012, %3834
  %3859 = load i32, i32* @x.19
  %3860 = load i32, i32* @y.20
  %3861 = sub i32 %3859, 1
  %3862 = mul i32 %3859, %3861
  %3863 = urem i32 %3862, 2
  %3864 = icmp eq i32 %3863, 0
  %3865 = icmp slt i32 %3860, 10
  %3866 = or i1 %3864, %3865
  br i1 %3866, label %originalBB1014, label %originalBB1014alteredBB

originalBB1014:                                   ; preds = %3858, %originalBB1014alteredBB
  %3867 = load i64, i64* %29, align 8, !dbg !1765
  %3868 = add i64 %3867, 1, !dbg !1765
  store i64 %3868, i64* %29, align 8, !dbg !1765
  %3869 = load i32, i32* @x.19
  %3870 = load i32, i32* @y.20
  %3871 = sub i32 %3869, 1
  %3872 = mul i32 %3869, %3871
  %3873 = urem i32 %3872, 2
  %3874 = icmp eq i32 %3873, 0
  %3875 = icmp slt i32 %3870, 10
  %3876 = or i1 %3874, %3875
  br i1 %3876, label %originalBBpart21018, label %originalBB1014alteredBB

originalBBpart21018:                              ; preds = %originalBB1014
  br label %3877, !dbg !1765

3877:                                             ; preds = %originalBBpart21018
  %3878 = load i32, i32* @x.19
  %3879 = load i32, i32* @y.20
  %3880 = sub i32 %3878, 1
  %3881 = mul i32 %3878, %3880
  %3882 = urem i32 %3881, 2
  %3883 = icmp eq i32 %3882, 0
  %3884 = icmp slt i32 %3879, 10
  %3885 = or i1 %3883, %3884
  br i1 %3885, label %originalBB1020, label %originalBB1020alteredBB

originalBB1020:                                   ; preds = %3877, %originalBB1020alteredBB
  store i8 1, i8* %36, align 1, !dbg !1752
  %3886 = load i32, i32* @x.19
  %3887 = load i32, i32* @y.20
  %3888 = sub i32 %3886, 1
  %3889 = mul i32 %3886, %3888
  %3890 = urem i32 %3889, 2
  %3891 = icmp eq i32 %3890, 0
  %3892 = icmp slt i32 %3887, 10
  %3893 = or i1 %3891, %3892
  br i1 %3893, label %originalBBpart21022, label %originalBB1020alteredBB

originalBBpart21022:                              ; preds = %originalBB1020
  br label %3894, !dbg !1752

3894:                                             ; preds = %originalBBpart21022, %originalBBpart2963, %originalBBpart2959
  %3895 = load i32, i32* @x.19
  %3896 = load i32, i32* @y.20
  %3897 = sub i32 %3895, 1
  %3898 = mul i32 %3895, %3897
  %3899 = urem i32 %3898, 2
  %3900 = icmp eq i32 %3899, 0
  %3901 = icmp slt i32 %3896, 10
  %3902 = or i1 %3900, %3901
  br i1 %3902, label %originalBB1024, label %originalBB1024alteredBB

originalBB1024:                                   ; preds = %3894, %originalBB1024alteredBB
  %3903 = load i32, i32* @x.19
  %3904 = load i32, i32* @y.20
  %3905 = sub i32 %3903, 1
  %3906 = mul i32 %3903, %3905
  %3907 = urem i32 %3906, 2
  %3908 = icmp eq i32 %3907, 0
  %3909 = icmp slt i32 %3904, 10
  %3910 = or i1 %3908, %3909
  br i1 %3910, label %originalBBpart21026, label %originalBB1024alteredBB

originalBBpart21026:                              ; preds = %originalBB1024
  br label %3911, !dbg !1749

3911:                                             ; preds = %originalBBpart21026
  %3912 = load i32, i32* @x.19
  %3913 = load i32, i32* @y.20
  %3914 = sub i32 %3912, 1
  %3915 = mul i32 %3912, %3914
  %3916 = urem i32 %3915, 2
  %3917 = icmp eq i32 %3916, 0
  %3918 = icmp slt i32 %3913, 10
  %3919 = or i1 %3917, %3918
  br i1 %3919, label %originalBB1028, label %originalBB1028alteredBB

originalBB1028:                                   ; preds = %3911, %originalBB1028alteredBB
  %3920 = load i64, i64* %29, align 8, !dbg !1766
  %3921 = load i64, i64* %20, align 8, !dbg !1766
  %3922 = icmp ult i64 %3920, %3921, !dbg !1766
  %3923 = load i32, i32* @x.19
  %3924 = load i32, i32* @y.20
  %3925 = sub i32 %3923, 1
  %3926 = mul i32 %3923, %3925
  %3927 = urem i32 %3926, 2
  %3928 = icmp eq i32 %3927, 0
  %3929 = icmp slt i32 %3924, 10
  %3930 = or i1 %3928, %3929
  br i1 %3930, label %originalBBpart21030, label %originalBB1028alteredBB

originalBBpart21030:                              ; preds = %originalBB1028
  br i1 %3922, label %3931, label %3951, !dbg !1769

3931:                                             ; preds = %originalBBpart21030
  %3932 = load i32, i32* @x.19
  %3933 = load i32, i32* @y.20
  %3934 = sub i32 %3932, 1
  %3935 = mul i32 %3932, %3934
  %3936 = urem i32 %3935, 2
  %3937 = icmp eq i32 %3936, 0
  %3938 = icmp slt i32 %3933, 10
  %3939 = or i1 %3937, %3938
  br i1 %3939, label %originalBB1032, label %originalBB1032alteredBB

originalBB1032:                                   ; preds = %3931, %originalBB1032alteredBB
  %3940 = load i8*, i8** %19, align 8, !dbg !1766
  %3941 = load i64, i64* %29, align 8, !dbg !1766
  %3942 = getelementptr inbounds i8, i8* %3940, i64 %3941, !dbg !1766
  store i8 92, i8* %3942, align 1, !dbg !1766
  %3943 = load i32, i32* @x.19
  %3944 = load i32, i32* @y.20
  %3945 = sub i32 %3943, 1
  %3946 = mul i32 %3943, %3945
  %3947 = urem i32 %3946, 2
  %3948 = icmp eq i32 %3947, 0
  %3949 = icmp slt i32 %3944, 10
  %3950 = or i1 %3948, %3949
  br i1 %3950, label %originalBBpart21034, label %originalBB1032alteredBB

originalBBpart21034:                              ; preds = %originalBB1032
  br label %3951, !dbg !1766

3951:                                             ; preds = %originalBBpart21034, %originalBBpart21030
  %3952 = load i32, i32* @x.19
  %3953 = load i32, i32* @y.20
  %3954 = sub i32 %3952, 1
  %3955 = mul i32 %3952, %3954
  %3956 = urem i32 %3955, 2
  %3957 = icmp eq i32 %3956, 0
  %3958 = icmp slt i32 %3953, 10
  %3959 = or i1 %3957, %3958
  br i1 %3959, label %originalBB1036, label %originalBB1036alteredBB

originalBB1036:                                   ; preds = %3951, %originalBB1036alteredBB
  %3960 = load i64, i64* %29, align 8, !dbg !1769
  %3961 = add i64 %3960, 1, !dbg !1769
  store i64 %3961, i64* %29, align 8, !dbg !1769
  %3962 = load i32, i32* @x.19
  %3963 = load i32, i32* @y.20
  %3964 = sub i32 %3962, 1
  %3965 = mul i32 %3962, %3964
  %3966 = urem i32 %3965, 2
  %3967 = icmp eq i32 %3966, 0
  %3968 = icmp slt i32 %3963, 10
  %3969 = or i1 %3967, %3968
  br i1 %3969, label %originalBBpart21043, label %originalBB1036alteredBB

originalBBpart21043:                              ; preds = %originalBB1036
  br label %3970, !dbg !1769

3970:                                             ; preds = %originalBBpart21043
  %3971 = load i32, i32* @x.19
  %3972 = load i32, i32* @y.20
  %3973 = sub i32 %3971, 1
  %3974 = mul i32 %3971, %3973
  %3975 = urem i32 %3974, 2
  %3976 = icmp eq i32 %3975, 0
  %3977 = icmp slt i32 %3972, 10
  %3978 = or i1 %3976, %3977
  br i1 %3978, label %originalBB1045, label %originalBB1045alteredBB

originalBB1045:                                   ; preds = %3970, %originalBB1045alteredBB
  %3979 = load i32, i32* @x.19
  %3980 = load i32, i32* @y.20
  %3981 = sub i32 %3979, 1
  %3982 = mul i32 %3979, %3981
  %3983 = urem i32 %3982, 2
  %3984 = icmp eq i32 %3983, 0
  %3985 = icmp slt i32 %3980, 10
  %3986 = or i1 %3984, %3985
  br i1 %3986, label %originalBBpart21047, label %originalBB1045alteredBB

originalBBpart21047:                              ; preds = %originalBB1045
  br label %3987, !dbg !1749

3987:                                             ; preds = %originalBBpart21047
  %3988 = load i32, i32* @x.19
  %3989 = load i32, i32* @y.20
  %3990 = sub i32 %3988, 1
  %3991 = mul i32 %3988, %3990
  %3992 = urem i32 %3991, 2
  %3993 = icmp eq i32 %3992, 0
  %3994 = icmp slt i32 %3989, 10
  %3995 = or i1 %3993, %3994
  br i1 %3995, label %originalBB1049, label %originalBB1049alteredBB

originalBB1049:                                   ; preds = %3987, %originalBB1049alteredBB
  %3996 = load i32, i32* @x.19
  %3997 = load i32, i32* @y.20
  %3998 = sub i32 %3996, 1
  %3999 = mul i32 %3996, %3998
  %4000 = urem i32 %3999, 2
  %4001 = icmp eq i32 %4000, 0
  %4002 = icmp slt i32 %3997, 10
  %4003 = or i1 %4001, %4002
  br i1 %4003, label %originalBBpart21051, label %originalBB1049alteredBB

originalBBpart21051:                              ; preds = %originalBB1049
  br label %4004, !dbg !1770

4004:                                             ; preds = %originalBBpart21051
  %4005 = load i32, i32* @x.19
  %4006 = load i32, i32* @y.20
  %4007 = sub i32 %4005, 1
  %4008 = mul i32 %4005, %4007
  %4009 = urem i32 %4008, 2
  %4010 = icmp eq i32 %4009, 0
  %4011 = icmp slt i32 %4006, 10
  %4012 = or i1 %4010, %4011
  br i1 %4012, label %originalBB1053, label %originalBB1053alteredBB

originalBB1053:                                   ; preds = %4004, %originalBB1053alteredBB
  %4013 = load i64, i64* %29, align 8, !dbg !1771
  %4014 = load i64, i64* %20, align 8, !dbg !1771
  %4015 = icmp ult i64 %4013, %4014, !dbg !1771
  %4016 = load i32, i32* @x.19
  %4017 = load i32, i32* @y.20
  %4018 = sub i32 %4016, 1
  %4019 = mul i32 %4016, %4018
  %4020 = urem i32 %4019, 2
  %4021 = icmp eq i32 %4020, 0
  %4022 = icmp slt i32 %4017, 10
  %4023 = or i1 %4021, %4022
  br i1 %4023, label %originalBBpart21055, label %originalBB1053alteredBB

originalBBpart21055:                              ; preds = %originalBB1053
  br i1 %4015, label %4024, label %4049, !dbg !1774

4024:                                             ; preds = %originalBBpart21055
  %4025 = load i32, i32* @x.19
  %4026 = load i32, i32* @y.20
  %4027 = sub i32 %4025, 1
  %4028 = mul i32 %4025, %4027
  %4029 = urem i32 %4028, 2
  %4030 = icmp eq i32 %4029, 0
  %4031 = icmp slt i32 %4026, 10
  %4032 = or i1 %4030, %4031
  br i1 %4032, label %originalBB1057, label %originalBB1057alteredBB

originalBB1057:                                   ; preds = %4024, %originalBB1057alteredBB
  %4033 = load i8, i8* %39, align 1, !dbg !1771
  %4034 = zext i8 %4033 to i32, !dbg !1771
  %4035 = ashr i32 %4034, 6, !dbg !1771
  %4036 = add nsw i32 48, %4035, !dbg !1771
  %4037 = trunc i32 %4036 to i8, !dbg !1771
  %4038 = load i8*, i8** %19, align 8, !dbg !1771
  %4039 = load i64, i64* %29, align 8, !dbg !1771
  %4040 = getelementptr inbounds i8, i8* %4038, i64 %4039, !dbg !1771
  store i8 %4037, i8* %4040, align 1, !dbg !1771
  %4041 = load i32, i32* @x.19
  %4042 = load i32, i32* @y.20
  %4043 = sub i32 %4041, 1
  %4044 = mul i32 %4041, %4043
  %4045 = urem i32 %4044, 2
  %4046 = icmp eq i32 %4045, 0
  %4047 = icmp slt i32 %4042, 10
  %4048 = or i1 %4046, %4047
  br i1 %4048, label %originalBBpart21071, label %originalBB1057alteredBB

originalBBpart21071:                              ; preds = %originalBB1057
  br label %4049, !dbg !1771

4049:                                             ; preds = %originalBBpart21071, %originalBBpart21055
  %4050 = load i32, i32* @x.19
  %4051 = load i32, i32* @y.20
  %4052 = sub i32 %4050, 1
  %4053 = mul i32 %4050, %4052
  %4054 = urem i32 %4053, 2
  %4055 = icmp eq i32 %4054, 0
  %4056 = icmp slt i32 %4051, 10
  %4057 = or i1 %4055, %4056
  br i1 %4057, label %originalBB1073, label %originalBB1073alteredBB

originalBB1073:                                   ; preds = %4049, %originalBB1073alteredBB
  %4058 = load i64, i64* %29, align 8, !dbg !1774
  %4059 = add i64 %4058, 1, !dbg !1774
  store i64 %4059, i64* %29, align 8, !dbg !1774
  %4060 = load i32, i32* @x.19
  %4061 = load i32, i32* @y.20
  %4062 = sub i32 %4060, 1
  %4063 = mul i32 %4060, %4062
  %4064 = urem i32 %4063, 2
  %4065 = icmp eq i32 %4064, 0
  %4066 = icmp slt i32 %4061, 10
  %4067 = or i1 %4065, %4066
  br i1 %4067, label %originalBBpart21088, label %originalBB1073alteredBB

originalBBpart21088:                              ; preds = %originalBB1073
  br label %4068, !dbg !1774

4068:                                             ; preds = %originalBBpart21088
  %4069 = load i32, i32* @x.19
  %4070 = load i32, i32* @y.20
  %4071 = sub i32 %4069, 1
  %4072 = mul i32 %4069, %4071
  %4073 = urem i32 %4072, 2
  %4074 = icmp eq i32 %4073, 0
  %4075 = icmp slt i32 %4070, 10
  %4076 = or i1 %4074, %4075
  br i1 %4076, label %originalBB1090, label %originalBB1090alteredBB

originalBB1090:                                   ; preds = %4068, %originalBB1090alteredBB
  %4077 = load i32, i32* @x.19
  %4078 = load i32, i32* @y.20
  %4079 = sub i32 %4077, 1
  %4080 = mul i32 %4077, %4079
  %4081 = urem i32 %4080, 2
  %4082 = icmp eq i32 %4081, 0
  %4083 = icmp slt i32 %4078, 10
  %4084 = or i1 %4082, %4083
  br i1 %4084, label %originalBBpart21092, label %originalBB1090alteredBB

originalBBpart21092:                              ; preds = %originalBB1090
  br label %4085, !dbg !1775

4085:                                             ; preds = %originalBBpart21092
  %4086 = load i32, i32* @x.19
  %4087 = load i32, i32* @y.20
  %4088 = sub i32 %4086, 1
  %4089 = mul i32 %4086, %4088
  %4090 = urem i32 %4089, 2
  %4091 = icmp eq i32 %4090, 0
  %4092 = icmp slt i32 %4087, 10
  %4093 = or i1 %4091, %4092
  br i1 %4093, label %originalBB1094, label %originalBB1094alteredBB

originalBB1094:                                   ; preds = %4085, %originalBB1094alteredBB
  %4094 = load i64, i64* %29, align 8, !dbg !1776
  %4095 = load i64, i64* %20, align 8, !dbg !1776
  %4096 = icmp ult i64 %4094, %4095, !dbg !1776
  %4097 = load i32, i32* @x.19
  %4098 = load i32, i32* @y.20
  %4099 = sub i32 %4097, 1
  %4100 = mul i32 %4097, %4099
  %4101 = urem i32 %4100, 2
  %4102 = icmp eq i32 %4101, 0
  %4103 = icmp slt i32 %4098, 10
  %4104 = or i1 %4102, %4103
  br i1 %4104, label %originalBBpart21096, label %originalBB1094alteredBB

originalBBpart21096:                              ; preds = %originalBB1094
  br i1 %4096, label %4105, label %4131, !dbg !1779

4105:                                             ; preds = %originalBBpart21096
  %4106 = load i32, i32* @x.19
  %4107 = load i32, i32* @y.20
  %4108 = sub i32 %4106, 1
  %4109 = mul i32 %4106, %4108
  %4110 = urem i32 %4109, 2
  %4111 = icmp eq i32 %4110, 0
  %4112 = icmp slt i32 %4107, 10
  %4113 = or i1 %4111, %4112
  br i1 %4113, label %originalBB1098, label %originalBB1098alteredBB

originalBB1098:                                   ; preds = %4105, %originalBB1098alteredBB
  %4114 = load i8, i8* %39, align 1, !dbg !1776
  %4115 = zext i8 %4114 to i32, !dbg !1776
  %4116 = ashr i32 %4115, 3, !dbg !1776
  %4117 = and i32 %4116, 7, !dbg !1776
  %4118 = add nsw i32 48, %4117, !dbg !1776
  %4119 = trunc i32 %4118 to i8, !dbg !1776
  %4120 = load i8*, i8** %19, align 8, !dbg !1776
  %4121 = load i64, i64* %29, align 8, !dbg !1776
  %4122 = getelementptr inbounds i8, i8* %4120, i64 %4121, !dbg !1776
  store i8 %4119, i8* %4122, align 1, !dbg !1776
  %4123 = load i32, i32* @x.19
  %4124 = load i32, i32* @y.20
  %4125 = sub i32 %4123, 1
  %4126 = mul i32 %4123, %4125
  %4127 = urem i32 %4126, 2
  %4128 = icmp eq i32 %4127, 0
  %4129 = icmp slt i32 %4124, 10
  %4130 = or i1 %4128, %4129
  br i1 %4130, label %originalBBpart21124, label %originalBB1098alteredBB

originalBBpart21124:                              ; preds = %originalBB1098
  br label %4131, !dbg !1776

4131:                                             ; preds = %originalBBpart21124, %originalBBpart21096
  %4132 = load i32, i32* @x.19
  %4133 = load i32, i32* @y.20
  %4134 = sub i32 %4132, 1
  %4135 = mul i32 %4132, %4134
  %4136 = urem i32 %4135, 2
  %4137 = icmp eq i32 %4136, 0
  %4138 = icmp slt i32 %4133, 10
  %4139 = or i1 %4137, %4138
  br i1 %4139, label %originalBB1126, label %originalBB1126alteredBB

originalBB1126:                                   ; preds = %4131, %originalBB1126alteredBB
  %4140 = load i64, i64* %29, align 8, !dbg !1779
  %4141 = add i64 %4140, 1, !dbg !1779
  store i64 %4141, i64* %29, align 8, !dbg !1779
  %4142 = load i32, i32* @x.19
  %4143 = load i32, i32* @y.20
  %4144 = sub i32 %4142, 1
  %4145 = mul i32 %4142, %4144
  %4146 = urem i32 %4145, 2
  %4147 = icmp eq i32 %4146, 0
  %4148 = icmp slt i32 %4143, 10
  %4149 = or i1 %4147, %4148
  br i1 %4149, label %originalBBpart21134, label %originalBB1126alteredBB

originalBBpart21134:                              ; preds = %originalBB1126
  br label %4150, !dbg !1779

4150:                                             ; preds = %originalBBpart21134
  %4151 = load i32, i32* @x.19
  %4152 = load i32, i32* @y.20
  %4153 = sub i32 %4151, 1
  %4154 = mul i32 %4151, %4153
  %4155 = urem i32 %4154, 2
  %4156 = icmp eq i32 %4155, 0
  %4157 = icmp slt i32 %4152, 10
  %4158 = or i1 %4156, %4157
  br i1 %4158, label %originalBB1136, label %originalBB1136alteredBB

originalBB1136:                                   ; preds = %4150, %originalBB1136alteredBB
  %4159 = load i8, i8* %39, align 1, !dbg !1780
  %4160 = zext i8 %4159 to i32, !dbg !1780
  %4161 = and i32 %4160, 7, !dbg !1781
  %4162 = add nsw i32 48, %4161, !dbg !1782
  %4163 = trunc i32 %4162 to i8, !dbg !1783
  store i8 %4163, i8* %39, align 1, !dbg !1784
  %4164 = load i32, i32* @x.19
  %4165 = load i32, i32* @y.20
  %4166 = sub i32 %4164, 1
  %4167 = mul i32 %4164, %4166
  %4168 = urem i32 %4167, 2
  %4169 = icmp eq i32 %4168, 0
  %4170 = icmp slt i32 %4165, 10
  %4171 = or i1 %4169, %4170
  br i1 %4171, label %originalBBpart21147, label %originalBB1136alteredBB

originalBBpart21147:                              ; preds = %originalBB1136
  br label %4269, !dbg !1785

4172:                                             ; preds = %originalBBpart2947, %3600
  %4173 = load i8, i8* %41, align 1, !dbg !1786
  %4174 = trunc i8 %4173 to i1, !dbg !1786
  br i1 %4174, label %4175, label %4252, !dbg !1788

4175:                                             ; preds = %4172
  %4176 = load i32, i32* @x.19
  %4177 = load i32, i32* @y.20
  %4178 = sub i32 %4176, 1
  %4179 = mul i32 %4176, %4178
  %4180 = urem i32 %4179, 2
  %4181 = icmp eq i32 %4180, 0
  %4182 = icmp slt i32 %4177, 10
  %4183 = or i1 %4181, %4182
  br i1 %4183, label %originalBB1149, label %originalBB1149alteredBB

originalBB1149:                                   ; preds = %4175, %originalBB1149alteredBB
  %4184 = load i32, i32* @x.19
  %4185 = load i32, i32* @y.20
  %4186 = sub i32 %4184, 1
  %4187 = mul i32 %4184, %4186
  %4188 = urem i32 %4187, 2
  %4189 = icmp eq i32 %4188, 0
  %4190 = icmp slt i32 %4185, 10
  %4191 = or i1 %4189, %4190
  br i1 %4191, label %originalBBpart21151, label %originalBB1149alteredBB

originalBBpart21151:                              ; preds = %originalBB1149
  br label %4192, !dbg !1789

4192:                                             ; preds = %originalBBpart21151
  %4193 = load i32, i32* @x.19
  %4194 = load i32, i32* @y.20
  %4195 = sub i32 %4193, 1
  %4196 = mul i32 %4193, %4195
  %4197 = urem i32 %4196, 2
  %4198 = icmp eq i32 %4197, 0
  %4199 = icmp slt i32 %4194, 10
  %4200 = or i1 %4198, %4199
  br i1 %4200, label %originalBB1153, label %originalBB1153alteredBB

originalBB1153:                                   ; preds = %4192, %originalBB1153alteredBB
  %4201 = load i64, i64* %29, align 8, !dbg !1791
  %4202 = load i64, i64* %20, align 8, !dbg !1791
  %4203 = icmp ult i64 %4201, %4202, !dbg !1791
  %4204 = load i32, i32* @x.19
  %4205 = load i32, i32* @y.20
  %4206 = sub i32 %4204, 1
  %4207 = mul i32 %4204, %4206
  %4208 = urem i32 %4207, 2
  %4209 = icmp eq i32 %4208, 0
  %4210 = icmp slt i32 %4205, 10
  %4211 = or i1 %4209, %4210
  br i1 %4211, label %originalBBpart21155, label %originalBB1153alteredBB

originalBBpart21155:                              ; preds = %originalBB1153
  br i1 %4203, label %4212, label %4232, !dbg !1794

4212:                                             ; preds = %originalBBpart21155
  %4213 = load i32, i32* @x.19
  %4214 = load i32, i32* @y.20
  %4215 = sub i32 %4213, 1
  %4216 = mul i32 %4213, %4215
  %4217 = urem i32 %4216, 2
  %4218 = icmp eq i32 %4217, 0
  %4219 = icmp slt i32 %4214, 10
  %4220 = or i1 %4218, %4219
  br i1 %4220, label %originalBB1157, label %originalBB1157alteredBB

originalBB1157:                                   ; preds = %4212, %originalBB1157alteredBB
  %4221 = load i8*, i8** %19, align 8, !dbg !1791
  %4222 = load i64, i64* %29, align 8, !dbg !1791
  %4223 = getelementptr inbounds i8, i8* %4221, i64 %4222, !dbg !1791
  store i8 92, i8* %4223, align 1, !dbg !1791
  %4224 = load i32, i32* @x.19
  %4225 = load i32, i32* @y.20
  %4226 = sub i32 %4224, 1
  %4227 = mul i32 %4224, %4226
  %4228 = urem i32 %4227, 2
  %4229 = icmp eq i32 %4228, 0
  %4230 = icmp slt i32 %4225, 10
  %4231 = or i1 %4229, %4230
  br i1 %4231, label %originalBBpart21159, label %originalBB1157alteredBB

originalBBpart21159:                              ; preds = %originalBB1157
  br label %4232, !dbg !1791

4232:                                             ; preds = %originalBBpart21159, %originalBBpart21155
  %4233 = load i64, i64* %29, align 8, !dbg !1794
  %4234 = add i64 %4233, 1, !dbg !1794
  store i64 %4234, i64* %29, align 8, !dbg !1794
  br label %4235, !dbg !1794

4235:                                             ; preds = %4232
  %4236 = load i32, i32* @x.19
  %4237 = load i32, i32* @y.20
  %4238 = sub i32 %4236, 1
  %4239 = mul i32 %4236, %4238
  %4240 = urem i32 %4239, 2
  %4241 = icmp eq i32 %4240, 0
  %4242 = icmp slt i32 %4237, 10
  %4243 = or i1 %4241, %4242
  br i1 %4243, label %originalBB1161, label %originalBB1161alteredBB

originalBB1161:                                   ; preds = %4235, %originalBB1161alteredBB
  store i8 0, i8* %41, align 1, !dbg !1795
  %4244 = load i32, i32* @x.19
  %4245 = load i32, i32* @y.20
  %4246 = sub i32 %4244, 1
  %4247 = mul i32 %4244, %4246
  %4248 = urem i32 %4247, 2
  %4249 = icmp eq i32 %4248, 0
  %4250 = icmp slt i32 %4245, 10
  %4251 = or i1 %4249, %4250
  br i1 %4251, label %originalBBpart21163, label %originalBB1161alteredBB

originalBBpart21163:                              ; preds = %originalBB1161
  br label %4252, !dbg !1796

4252:                                             ; preds = %originalBBpart21163, %4172
  %4253 = load i32, i32* @x.19
  %4254 = load i32, i32* @y.20
  %4255 = sub i32 %4253, 1
  %4256 = mul i32 %4253, %4255
  %4257 = urem i32 %4256, 2
  %4258 = icmp eq i32 %4257, 0
  %4259 = icmp slt i32 %4254, 10
  %4260 = or i1 %4258, %4259
  br i1 %4260, label %originalBB1165, label %originalBB1165alteredBB

originalBB1165:                                   ; preds = %4252, %originalBB1165alteredBB
  %4261 = load i32, i32* @x.19
  %4262 = load i32, i32* @y.20
  %4263 = sub i32 %4261, 1
  %4264 = mul i32 %4261, %4263
  %4265 = urem i32 %4264, 2
  %4266 = icmp eq i32 %4265, 0
  %4267 = icmp slt i32 %4262, 10
  %4268 = or i1 %4266, %4267
  br i1 %4268, label %originalBBpart21167, label %originalBB1165alteredBB

originalBBpart21167:                              ; preds = %originalBB1165
  br label %4269

4269:                                             ; preds = %originalBBpart21167, %originalBBpart21147
  %4270 = load i64, i64* %50, align 8, !dbg !1797
  %4271 = load i64, i64* %28, align 8, !dbg !1799
  %4272 = add i64 %4271, 1, !dbg !1800
  %4273 = icmp ule i64 %4270, %4272, !dbg !1801
  br i1 %4273, label %4274, label %4291, !dbg !1802

4274:                                             ; preds = %4269
  %4275 = load i32, i32* @x.19
  %4276 = load i32, i32* @y.20
  %4277 = sub i32 %4275, 1
  %4278 = mul i32 %4275, %4277
  %4279 = urem i32 %4278, 2
  %4280 = icmp eq i32 %4279, 0
  %4281 = icmp slt i32 %4276, 10
  %4282 = or i1 %4280, %4281
  br i1 %4282, label %originalBB1169, label %originalBB1169alteredBB

originalBB1169:                                   ; preds = %4274, %originalBB1169alteredBB
  %4283 = load i32, i32* @x.19
  %4284 = load i32, i32* @y.20
  %4285 = sub i32 %4283, 1
  %4286 = mul i32 %4283, %4285
  %4287 = urem i32 %4286, 2
  %4288 = icmp eq i32 %4287, 0
  %4289 = icmp slt i32 %4284, 10
  %4290 = or i1 %4288, %4289
  br i1 %4290, label %originalBBpart21171, label %originalBB1169alteredBB

originalBBpart21171:                              ; preds = %originalBB1169
  br label %4487, !dbg !1803

4291:                                             ; preds = %4269
  %4292 = load i32, i32* @x.19
  %4293 = load i32, i32* @y.20
  %4294 = sub i32 %4292, 1
  %4295 = mul i32 %4292, %4294
  %4296 = urem i32 %4295, 2
  %4297 = icmp eq i32 %4296, 0
  %4298 = icmp slt i32 %4293, 10
  %4299 = or i1 %4297, %4298
  br i1 %4299, label %originalBB1173, label %originalBB1173alteredBB

originalBB1173:                                   ; preds = %4291, %originalBB1173alteredBB
  %4300 = load i32, i32* @x.19
  %4301 = load i32, i32* @y.20
  %4302 = sub i32 %4300, 1
  %4303 = mul i32 %4300, %4302
  %4304 = urem i32 %4303, 2
  %4305 = icmp eq i32 %4304, 0
  %4306 = icmp slt i32 %4301, 10
  %4307 = or i1 %4305, %4306
  br i1 %4307, label %originalBBpart21175, label %originalBB1173alteredBB

originalBBpart21175:                              ; preds = %originalBB1173
  br label %4308, !dbg !1804

4308:                                             ; preds = %originalBBpart21175
  %4309 = load i8, i8* %36, align 1, !dbg !1805
  %4310 = trunc i8 %4309 to i1, !dbg !1805
  br i1 %4310, label %4311, label %4435, !dbg !1805

4311:                                             ; preds = %4308
  %4312 = load i32, i32* @x.19
  %4313 = load i32, i32* @y.20
  %4314 = sub i32 %4312, 1
  %4315 = mul i32 %4312, %4314
  %4316 = urem i32 %4315, 2
  %4317 = icmp eq i32 %4316, 0
  %4318 = icmp slt i32 %4313, 10
  %4319 = or i1 %4317, %4318
  br i1 %4319, label %originalBB1177, label %originalBB1177alteredBB

originalBB1177:                                   ; preds = %4311, %originalBB1177alteredBB
  %4320 = load i8, i8* %42, align 1, !dbg !1805
  %4321 = trunc i8 %4320 to i1, !dbg !1805
  %4322 = load i32, i32* @x.19
  %4323 = load i32, i32* @y.20
  %4324 = sub i32 %4322, 1
  %4325 = mul i32 %4322, %4324
  %4326 = urem i32 %4325, 2
  %4327 = icmp eq i32 %4326, 0
  %4328 = icmp slt i32 %4323, 10
  %4329 = or i1 %4327, %4328
  br i1 %4329, label %originalBBpart21179, label %originalBB1177alteredBB

originalBBpart21179:                              ; preds = %originalBB1177
  br i1 %4321, label %4435, label %4330, !dbg !1808

4330:                                             ; preds = %originalBBpart21179
  br label %4331, !dbg !1809

4331:                                             ; preds = %4330
  %4332 = load i32, i32* @x.19
  %4333 = load i32, i32* @y.20
  %4334 = sub i32 %4332, 1
  %4335 = mul i32 %4332, %4334
  %4336 = urem i32 %4335, 2
  %4337 = icmp eq i32 %4336, 0
  %4338 = icmp slt i32 %4333, 10
  %4339 = or i1 %4337, %4338
  br i1 %4339, label %originalBB1181, label %originalBB1181alteredBB

originalBB1181:                                   ; preds = %4331, %originalBB1181alteredBB
  %4340 = load i64, i64* %29, align 8, !dbg !1811
  %4341 = load i64, i64* %20, align 8, !dbg !1811
  %4342 = icmp ult i64 %4340, %4341, !dbg !1811
  %4343 = load i32, i32* @x.19
  %4344 = load i32, i32* @y.20
  %4345 = sub i32 %4343, 1
  %4346 = mul i32 %4343, %4345
  %4347 = urem i32 %4346, 2
  %4348 = icmp eq i32 %4347, 0
  %4349 = icmp slt i32 %4344, 10
  %4350 = or i1 %4348, %4349
  br i1 %4350, label %originalBBpart21183, label %originalBB1181alteredBB

originalBBpart21183:                              ; preds = %originalBB1181
  br i1 %4342, label %4351, label %4371, !dbg !1814

4351:                                             ; preds = %originalBBpart21183
  %4352 = load i32, i32* @x.19
  %4353 = load i32, i32* @y.20
  %4354 = sub i32 %4352, 1
  %4355 = mul i32 %4352, %4354
  %4356 = urem i32 %4355, 2
  %4357 = icmp eq i32 %4356, 0
  %4358 = icmp slt i32 %4353, 10
  %4359 = or i1 %4357, %4358
  br i1 %4359, label %originalBB1185, label %originalBB1185alteredBB

originalBB1185:                                   ; preds = %4351, %originalBB1185alteredBB
  %4360 = load i8*, i8** %19, align 8, !dbg !1811
  %4361 = load i64, i64* %29, align 8, !dbg !1811
  %4362 = getelementptr inbounds i8, i8* %4360, i64 %4361, !dbg !1811
  store i8 39, i8* %4362, align 1, !dbg !1811
  %4363 = load i32, i32* @x.19
  %4364 = load i32, i32* @y.20
  %4365 = sub i32 %4363, 1
  %4366 = mul i32 %4363, %4365
  %4367 = urem i32 %4366, 2
  %4368 = icmp eq i32 %4367, 0
  %4369 = icmp slt i32 %4364, 10
  %4370 = or i1 %4368, %4369
  br i1 %4370, label %originalBBpart21187, label %originalBB1185alteredBB

originalBBpart21187:                              ; preds = %originalBB1185
  br label %4371, !dbg !1811

4371:                                             ; preds = %originalBBpart21187, %originalBBpart21183
  %4372 = load i32, i32* @x.19
  %4373 = load i32, i32* @y.20
  %4374 = sub i32 %4372, 1
  %4375 = mul i32 %4372, %4374
  %4376 = urem i32 %4375, 2
  %4377 = icmp eq i32 %4376, 0
  %4378 = icmp slt i32 %4373, 10
  %4379 = or i1 %4377, %4378
  br i1 %4379, label %originalBB1189, label %originalBB1189alteredBB

originalBB1189:                                   ; preds = %4371, %originalBB1189alteredBB
  %4380 = load i64, i64* %29, align 8, !dbg !1814
  %4381 = add i64 %4380, 1, !dbg !1814
  store i64 %4381, i64* %29, align 8, !dbg !1814
  %4382 = load i32, i32* @x.19
  %4383 = load i32, i32* @y.20
  %4384 = sub i32 %4382, 1
  %4385 = mul i32 %4382, %4384
  %4386 = urem i32 %4385, 2
  %4387 = icmp eq i32 %4386, 0
  %4388 = icmp slt i32 %4383, 10
  %4389 = or i1 %4387, %4388
  br i1 %4389, label %originalBBpart21195, label %originalBB1189alteredBB

originalBBpart21195:                              ; preds = %originalBB1189
  br label %4390, !dbg !1814

4390:                                             ; preds = %originalBBpart21195
  br label %4391, !dbg !1809

4391:                                             ; preds = %4390
  %4392 = load i32, i32* @x.19
  %4393 = load i32, i32* @y.20
  %4394 = sub i32 %4392, 1
  %4395 = mul i32 %4392, %4394
  %4396 = urem i32 %4395, 2
  %4397 = icmp eq i32 %4396, 0
  %4398 = icmp slt i32 %4393, 10
  %4399 = or i1 %4397, %4398
  br i1 %4399, label %originalBB1197, label %originalBB1197alteredBB

originalBB1197:                                   ; preds = %4391, %originalBB1197alteredBB
  %4400 = load i64, i64* %29, align 8, !dbg !1815
  %4401 = load i64, i64* %20, align 8, !dbg !1815
  %4402 = icmp ult i64 %4400, %4401, !dbg !1815
  %4403 = load i32, i32* @x.19
  %4404 = load i32, i32* @y.20
  %4405 = sub i32 %4403, 1
  %4406 = mul i32 %4403, %4405
  %4407 = urem i32 %4406, 2
  %4408 = icmp eq i32 %4407, 0
  %4409 = icmp slt i32 %4404, 10
  %4410 = or i1 %4408, %4409
  br i1 %4410, label %originalBBpart21199, label %originalBB1197alteredBB

originalBBpart21199:                              ; preds = %originalBB1197
  br i1 %4402, label %4411, label %4415, !dbg !1818

4411:                                             ; preds = %originalBBpart21199
  %4412 = load i8*, i8** %19, align 8, !dbg !1815
  %4413 = load i64, i64* %29, align 8, !dbg !1815
  %4414 = getelementptr inbounds i8, i8* %4412, i64 %4413, !dbg !1815
  store i8 39, i8* %4414, align 1, !dbg !1815
  br label %4415, !dbg !1815

4415:                                             ; preds = %4411, %originalBBpart21199
  %4416 = load i64, i64* %29, align 8, !dbg !1818
  %4417 = add i64 %4416, 1, !dbg !1818
  store i64 %4417, i64* %29, align 8, !dbg !1818
  br label %4418, !dbg !1818

4418:                                             ; preds = %4415
  %4419 = load i32, i32* @x.19
  %4420 = load i32, i32* @y.20
  %4421 = sub i32 %4419, 1
  %4422 = mul i32 %4419, %4421
  %4423 = urem i32 %4422, 2
  %4424 = icmp eq i32 %4423, 0
  %4425 = icmp slt i32 %4420, 10
  %4426 = or i1 %4424, %4425
  br i1 %4426, label %originalBB1201, label %originalBB1201alteredBB

originalBB1201:                                   ; preds = %4418, %originalBB1201alteredBB
  store i8 0, i8* %36, align 1, !dbg !1809
  %4427 = load i32, i32* @x.19
  %4428 = load i32, i32* @y.20
  %4429 = sub i32 %4427, 1
  %4430 = mul i32 %4427, %4429
  %4431 = urem i32 %4430, 2
  %4432 = icmp eq i32 %4431, 0
  %4433 = icmp slt i32 %4428, 10
  %4434 = or i1 %4432, %4433
  br i1 %4434, label %originalBBpart21203, label %originalBB1201alteredBB

originalBBpart21203:                              ; preds = %originalBB1201
  br label %4435, !dbg !1809

4435:                                             ; preds = %originalBBpart21203, %originalBBpart21179, %4308
  %4436 = load i32, i32* @x.19
  %4437 = load i32, i32* @y.20
  %4438 = sub i32 %4436, 1
  %4439 = mul i32 %4436, %4438
  %4440 = urem i32 %4439, 2
  %4441 = icmp eq i32 %4440, 0
  %4442 = icmp slt i32 %4437, 10
  %4443 = or i1 %4441, %4442
  br i1 %4443, label %originalBB1205, label %originalBB1205alteredBB

originalBB1205:                                   ; preds = %4435, %originalBB1205alteredBB
  %4444 = load i32, i32* @x.19
  %4445 = load i32, i32* @y.20
  %4446 = sub i32 %4444, 1
  %4447 = mul i32 %4444, %4446
  %4448 = urem i32 %4447, 2
  %4449 = icmp eq i32 %4448, 0
  %4450 = icmp slt i32 %4445, 10
  %4451 = or i1 %4449, %4450
  br i1 %4451, label %originalBBpart21207, label %originalBB1205alteredBB

originalBBpart21207:                              ; preds = %originalBB1205
  br label %4452, !dbg !1808

4452:                                             ; preds = %originalBBpart21207
  br label %4453, !dbg !1819

4453:                                             ; preds = %4452
  %4454 = load i64, i64* %29, align 8, !dbg !1820
  %4455 = load i64, i64* %20, align 8, !dbg !1820
  %4456 = icmp ult i64 %4454, %4455, !dbg !1820
  br i1 %4456, label %4457, label %4462, !dbg !1823

4457:                                             ; preds = %4453
  %4458 = load i8, i8* %39, align 1, !dbg !1820
  %4459 = load i8*, i8** %19, align 8, !dbg !1820
  %4460 = load i64, i64* %29, align 8, !dbg !1820
  %4461 = getelementptr inbounds i8, i8* %4459, i64 %4460, !dbg !1820
  store i8 %4458, i8* %4461, align 1, !dbg !1820
  br label %4462, !dbg !1820

4462:                                             ; preds = %4457, %4453
  %4463 = load i64, i64* %29, align 8, !dbg !1823
  %4464 = add i64 %4463, 1, !dbg !1823
  store i64 %4464, i64* %29, align 8, !dbg !1823
  br label %4465, !dbg !1823

4465:                                             ; preds = %4462
  %4466 = load i32, i32* @x.19
  %4467 = load i32, i32* @y.20
  %4468 = sub i32 %4466, 1
  %4469 = mul i32 %4466, %4468
  %4470 = urem i32 %4469, 2
  %4471 = icmp eq i32 %4470, 0
  %4472 = icmp slt i32 %4467, 10
  %4473 = or i1 %4471, %4472
  br i1 %4473, label %originalBB1209, label %originalBB1209alteredBB

originalBB1209:                                   ; preds = %4465, %originalBB1209alteredBB
  %4474 = load i8*, i8** %21, align 8, !dbg !1824
  %4475 = load i64, i64* %28, align 8, !dbg !1825
  %4476 = add i64 %4475, 1, !dbg !1825
  store i64 %4476, i64* %28, align 8, !dbg !1825
  %4477 = getelementptr inbounds i8, i8* %4474, i64 %4476, !dbg !1824
  %4478 = load i8, i8* %4477, align 1, !dbg !1824
  store i8 %4478, i8* %39, align 1, !dbg !1826
  %4479 = load i32, i32* @x.19
  %4480 = load i32, i32* @y.20
  %4481 = sub i32 %4479, 1
  %4482 = mul i32 %4479, %4481
  %4483 = urem i32 %4482, 2
  %4484 = icmp eq i32 %4483, 0
  %4485 = icmp slt i32 %4480, 10
  %4486 = or i1 %4484, %4485
  br i1 %4486, label %originalBBpart21214, label %originalBB1209alteredBB

originalBBpart21214:                              ; preds = %originalBB1209
  br label %3600, !dbg !1827, !llvm.loop !1828

4487:                                             ; preds = %originalBBpart21171
  %4488 = load i32, i32* @x.19
  %4489 = load i32, i32* @y.20
  %4490 = sub i32 %4488, 1
  %4491 = mul i32 %4488, %4490
  %4492 = urem i32 %4491, 2
  %4493 = icmp eq i32 %4492, 0
  %4494 = icmp slt i32 %4489, 10
  %4495 = or i1 %4493, %4494
  br i1 %4495, label %originalBB1216, label %originalBB1216alteredBB

originalBB1216:                                   ; preds = %4487, %originalBB1216alteredBB
  %4496 = load i32, i32* @x.19
  %4497 = load i32, i32* @y.20
  %4498 = sub i32 %4496, 1
  %4499 = mul i32 %4496, %4498
  %4500 = urem i32 %4499, 2
  %4501 = icmp eq i32 %4500, 0
  %4502 = icmp slt i32 %4497, 10
  %4503 = or i1 %4501, %4502
  br i1 %4503, label %originalBBpart21218, label %originalBB1216alteredBB

originalBBpart21218:                              ; preds = %originalBB1216
  br label %5030, !dbg !1831

4504:                                             ; preds = %originalBBpart2932, %originalBBpart2928
  br label %4505, !dbg !1832

4505:                                             ; preds = %4504, %originalBBpart2770, %originalBBpart2766, %originalBBpart2692, %originalBBpart2672, %originalBBpart2660, %originalBBpart2644, %originalBBpart2580, %1540
  %4506 = load i32, i32* @x.19
  %4507 = load i32, i32* @y.20
  %4508 = sub i32 %4506, 1
  %4509 = mul i32 %4506, %4508
  %4510 = urem i32 %4509, 2
  %4511 = icmp eq i32 %4510, 0
  %4512 = icmp slt i32 %4507, 10
  %4513 = or i1 %4511, %4512
  br i1 %4513, label %originalBB1220, label %originalBB1220alteredBB

originalBB1220:                                   ; preds = %4505, %originalBB1220alteredBB
  %4514 = load i8, i8* %33, align 1, !dbg !1833
  %4515 = trunc i8 %4514 to i1, !dbg !1833
  %4516 = load i32, i32* @x.19
  %4517 = load i32, i32* @y.20
  %4518 = sub i32 %4516, 1
  %4519 = mul i32 %4516, %4518
  %4520 = urem i32 %4519, 2
  %4521 = icmp eq i32 %4520, 0
  %4522 = icmp slt i32 %4517, 10
  %4523 = or i1 %4521, %4522
  br i1 %4523, label %originalBBpart21222, label %originalBB1220alteredBB

originalBBpart21222:                              ; preds = %originalBB1220
  br i1 %4515, label %4524, label %4543, !dbg !1835

4524:                                             ; preds = %originalBBpart21222
  %4525 = load i32, i32* @x.19
  %4526 = load i32, i32* @y.20
  %4527 = sub i32 %4525, 1
  %4528 = mul i32 %4525, %4527
  %4529 = urem i32 %4528, 2
  %4530 = icmp eq i32 %4529, 0
  %4531 = icmp slt i32 %4526, 10
  %4532 = or i1 %4530, %4531
  br i1 %4532, label %originalBB1224, label %originalBB1224alteredBB

originalBB1224:                                   ; preds = %4524, %originalBB1224alteredBB
  %4533 = load i32, i32* %23, align 4, !dbg !1836
  %4534 = icmp ne i32 %4533, 2, !dbg !1837
  %4535 = load i32, i32* @x.19
  %4536 = load i32, i32* @y.20
  %4537 = sub i32 %4535, 1
  %4538 = mul i32 %4535, %4537
  %4539 = urem i32 %4538, 2
  %4540 = icmp eq i32 %4539, 0
  %4541 = icmp slt i32 %4536, 10
  %4542 = or i1 %4540, %4541
  br i1 %4542, label %originalBBpart21226, label %originalBB1224alteredBB

originalBBpart21226:                              ; preds = %originalBB1224
  br i1 %4534, label %4562, label %4543, !dbg !1838

4543:                                             ; preds = %originalBBpart21226, %originalBBpart21222
  %4544 = load i32, i32* @x.19
  %4545 = load i32, i32* @y.20
  %4546 = sub i32 %4544, 1
  %4547 = mul i32 %4544, %4546
  %4548 = urem i32 %4547, 2
  %4549 = icmp eq i32 %4548, 0
  %4550 = icmp slt i32 %4545, 10
  %4551 = or i1 %4549, %4550
  br i1 %4551, label %originalBB1228, label %originalBB1228alteredBB

originalBB1228:                                   ; preds = %4543, %originalBB1228alteredBB
  %4552 = load i8, i8* %35, align 1, !dbg !1839
  %4553 = trunc i8 %4552 to i1, !dbg !1839
  %4554 = load i32, i32* @x.19
  %4555 = load i32, i32* @y.20
  %4556 = sub i32 %4554, 1
  %4557 = mul i32 %4554, %4556
  %4558 = urem i32 %4557, 2
  %4559 = icmp eq i32 %4558, 0
  %4560 = icmp slt i32 %4555, 10
  %4561 = or i1 %4559, %4560
  br i1 %4561, label %originalBBpart21230, label %originalBB1228alteredBB

originalBBpart21230:                              ; preds = %originalBB1228
  br i1 %4553, label %4562, label %4611, !dbg !1840

4562:                                             ; preds = %originalBBpart21230, %originalBBpart21226
  %4563 = load i32, i32* @x.19
  %4564 = load i32, i32* @y.20
  %4565 = sub i32 %4563, 1
  %4566 = mul i32 %4563, %4565
  %4567 = urem i32 %4566, 2
  %4568 = icmp eq i32 %4567, 0
  %4569 = icmp slt i32 %4564, 10
  %4570 = or i1 %4568, %4569
  br i1 %4570, label %originalBB1232, label %originalBB1232alteredBB

originalBB1232:                                   ; preds = %4562, %originalBB1232alteredBB
  %4571 = load i32*, i32** %25, align 8, !dbg !1841
  %4572 = icmp ne i32* %4571, null, !dbg !1841
  %4573 = load i32, i32* @x.19
  %4574 = load i32, i32* @y.20
  %4575 = sub i32 %4573, 1
  %4576 = mul i32 %4573, %4575
  %4577 = urem i32 %4576, 2
  %4578 = icmp eq i32 %4577, 0
  %4579 = icmp slt i32 %4574, 10
  %4580 = or i1 %4578, %4579
  br i1 %4580, label %originalBBpart21234, label %originalBB1232alteredBB

originalBBpart21234:                              ; preds = %originalBB1232
  br i1 %4572, label %4581, label %4611, !dbg !1842

4581:                                             ; preds = %originalBBpart21234
  %4582 = load i32, i32* @x.19
  %4583 = load i32, i32* @y.20
  %4584 = sub i32 %4582, 1
  %4585 = mul i32 %4582, %4584
  %4586 = urem i32 %4585, 2
  %4587 = icmp eq i32 %4586, 0
  %4588 = icmp slt i32 %4583, 10
  %4589 = or i1 %4587, %4588
  br i1 %4589, label %originalBB1236, label %originalBB1236alteredBB

originalBB1236:                                   ; preds = %4581, %originalBB1236alteredBB
  %4590 = load i32*, i32** %25, align 8, !dbg !1843
  %4591 = load i8, i8* %39, align 1, !dbg !1844
  %4592 = zext i8 %4591 to i64, !dbg !1844
  %4593 = udiv i64 %4592, 32, !dbg !1845
  %4594 = getelementptr inbounds i32, i32* %4590, i64 %4593, !dbg !1843
  %4595 = load i32, i32* %4594, align 4, !dbg !1843
  %4596 = load i8, i8* %39, align 1, !dbg !1846
  %4597 = zext i8 %4596 to i64, !dbg !1846
  %4598 = urem i64 %4597, 32, !dbg !1847
  %4599 = trunc i64 %4598 to i32, !dbg !1848
  %4600 = lshr i32 %4595, %4599, !dbg !1848
  %4601 = and i32 %4600, 1, !dbg !1849
  %4602 = icmp ne i32 %4601, 0, !dbg !1849
  %4603 = load i32, i32* @x.19
  %4604 = load i32, i32* @y.20
  %4605 = sub i32 %4603, 1
  %4606 = mul i32 %4603, %4605
  %4607 = urem i32 %4606, 2
  %4608 = icmp eq i32 %4607, 0
  %4609 = icmp slt i32 %4604, 10
  %4610 = or i1 %4608, %4609
  br i1 %4610, label %originalBBpart21257, label %originalBB1236alteredBB

originalBBpart21257:                              ; preds = %originalBB1236
  br i1 %4602, label %4647, label %4611, !dbg !1850

4611:                                             ; preds = %originalBBpart21257, %originalBBpart21234, %originalBBpart21230
  %4612 = load i32, i32* @x.19
  %4613 = load i32, i32* @y.20
  %4614 = sub i32 %4612, 1
  %4615 = mul i32 %4612, %4614
  %4616 = urem i32 %4615, 2
  %4617 = icmp eq i32 %4616, 0
  %4618 = icmp slt i32 %4613, 10
  %4619 = or i1 %4617, %4618
  br i1 %4619, label %originalBB1259, label %originalBB1259alteredBB

originalBB1259:                                   ; preds = %4611, %originalBB1259alteredBB
  %4620 = load i8, i8* %41, align 1, !dbg !1851
  %4621 = trunc i8 %4620 to i1, !dbg !1851
  %4622 = load i32, i32* @x.19
  %4623 = load i32, i32* @y.20
  %4624 = sub i32 %4622, 1
  %4625 = mul i32 %4622, %4624
  %4626 = urem i32 %4625, 2
  %4627 = icmp eq i32 %4626, 0
  %4628 = icmp slt i32 %4623, 10
  %4629 = or i1 %4627, %4628
  br i1 %4629, label %originalBBpart21261, label %originalBB1259alteredBB

originalBBpart21261:                              ; preds = %originalBB1259
  br i1 %4621, label %4647, label %4630, !dbg !1852

4630:                                             ; preds = %originalBBpart21261
  %4631 = load i32, i32* @x.19
  %4632 = load i32, i32* @y.20
  %4633 = sub i32 %4631, 1
  %4634 = mul i32 %4631, %4633
  %4635 = urem i32 %4634, 2
  %4636 = icmp eq i32 %4635, 0
  %4637 = icmp slt i32 %4632, 10
  %4638 = or i1 %4636, %4637
  br i1 %4638, label %originalBB1263, label %originalBB1263alteredBB

originalBB1263:                                   ; preds = %4630, %originalBB1263alteredBB
  %4639 = load i32, i32* @x.19
  %4640 = load i32, i32* @y.20
  %4641 = sub i32 %4639, 1
  %4642 = mul i32 %4639, %4641
  %4643 = urem i32 %4642, 2
  %4644 = icmp eq i32 %4643, 0
  %4645 = icmp slt i32 %4640, 10
  %4646 = or i1 %4644, %4645
  br i1 %4646, label %originalBBpart21265, label %originalBB1263alteredBB

originalBBpart21265:                              ; preds = %originalBB1263
  br label %5030, !dbg !1853

4647:                                             ; preds = %originalBBpart21261, %originalBBpart21257
  %4648 = load i32, i32* @x.19
  %4649 = load i32, i32* @y.20
  %4650 = sub i32 %4648, 1
  %4651 = mul i32 %4648, %4650
  %4652 = urem i32 %4651, 2
  %4653 = icmp eq i32 %4652, 0
  %4654 = icmp slt i32 %4649, 10
  %4655 = or i1 %4653, %4654
  br i1 %4655, label %originalBB1267, label %originalBB1267alteredBB

originalBB1267:                                   ; preds = %4647, %originalBB1267alteredBB
  %4656 = load i32, i32* @x.19
  %4657 = load i32, i32* @y.20
  %4658 = sub i32 %4656, 1
  %4659 = mul i32 %4656, %4658
  %4660 = urem i32 %4659, 2
  %4661 = icmp eq i32 %4660, 0
  %4662 = icmp slt i32 %4657, 10
  %4663 = or i1 %4661, %4662
  br i1 %4663, label %originalBBpart21269, label %originalBB1267alteredBB

originalBBpart21269:                              ; preds = %originalBB1267
  br label %4664, !dbg !1851

4664:                                             ; preds = %originalBBpart21269, %originalBBpart2640
  call void @llvm.dbg.label(metadata !1854), !dbg !1855
  %4665 = load i32, i32* @x.19
  %4666 = load i32, i32* @y.20
  %4667 = sub i32 %4665, 1
  %4668 = mul i32 %4665, %4667
  %4669 = urem i32 %4668, 2
  %4670 = icmp eq i32 %4669, 0
  %4671 = icmp slt i32 %4666, 10
  %4672 = or i1 %4670, %4671
  br i1 %4672, label %originalBB1271, label %originalBB1271alteredBB

originalBB1271:                                   ; preds = %4664, %originalBB1271alteredBB
  %4673 = load i32, i32* @x.19
  %4674 = load i32, i32* @y.20
  %4675 = sub i32 %4673, 1
  %4676 = mul i32 %4673, %4675
  %4677 = urem i32 %4676, 2
  %4678 = icmp eq i32 %4677, 0
  %4679 = icmp slt i32 %4674, 10
  %4680 = or i1 %4678, %4679
  br i1 %4680, label %originalBBpart21273, label %originalBB1271alteredBB

originalBBpart21273:                              ; preds = %originalBB1271
  br label %4681, !dbg !1856

4681:                                             ; preds = %originalBBpart21273
  %4682 = load i32, i32* @x.19
  %4683 = load i32, i32* @y.20
  %4684 = sub i32 %4682, 1
  %4685 = mul i32 %4682, %4684
  %4686 = urem i32 %4685, 2
  %4687 = icmp eq i32 %4686, 0
  %4688 = icmp slt i32 %4683, 10
  %4689 = or i1 %4687, %4688
  br i1 %4689, label %originalBB1275, label %originalBB1275alteredBB

originalBB1275:                                   ; preds = %4681, %originalBB1275alteredBB
  %4690 = load i8, i8* %35, align 1, !dbg !1857
  %4691 = trunc i8 %4690 to i1, !dbg !1857
  %4692 = load i32, i32* @x.19
  %4693 = load i32, i32* @y.20
  %4694 = sub i32 %4692, 1
  %4695 = mul i32 %4692, %4694
  %4696 = urem i32 %4695, 2
  %4697 = icmp eq i32 %4696, 0
  %4698 = icmp slt i32 %4693, 10
  %4699 = or i1 %4697, %4698
  br i1 %4699, label %originalBBpart21277, label %originalBB1275alteredBB

originalBBpart21277:                              ; preds = %originalBB1275
  br i1 %4691, label %4700, label %4701, !dbg !1860

4700:                                             ; preds = %originalBBpart21277
  br label %5870, !dbg !1857

4701:                                             ; preds = %originalBBpart21277
  %4702 = load i32, i32* @x.19
  %4703 = load i32, i32* @y.20
  %4704 = sub i32 %4702, 1
  %4705 = mul i32 %4702, %4704
  %4706 = urem i32 %4705, 2
  %4707 = icmp eq i32 %4706, 0
  %4708 = icmp slt i32 %4703, 10
  %4709 = or i1 %4707, %4708
  br i1 %4709, label %originalBB1279, label %originalBB1279alteredBB

originalBB1279:                                   ; preds = %4701, %originalBB1279alteredBB
  store i8 1, i8* %42, align 1, !dbg !1860
  %4710 = load i32, i32* %23, align 4, !dbg !1861
  %4711 = icmp eq i32 %4710, 2, !dbg !1861
  %4712 = load i32, i32* @x.19
  %4713 = load i32, i32* @y.20
  %4714 = sub i32 %4712, 1
  %4715 = mul i32 %4712, %4714
  %4716 = urem i32 %4715, 2
  %4717 = icmp eq i32 %4716, 0
  %4718 = icmp slt i32 %4713, 10
  %4719 = or i1 %4717, %4718
  br i1 %4719, label %originalBBpart21281, label %originalBB1279alteredBB

originalBBpart21281:                              ; preds = %originalBB1279
  br i1 %4711, label %4720, label %4936, !dbg !1861

4720:                                             ; preds = %originalBBpart21281
  %4721 = load i32, i32* @x.19
  %4722 = load i32, i32* @y.20
  %4723 = sub i32 %4721, 1
  %4724 = mul i32 %4721, %4723
  %4725 = urem i32 %4724, 2
  %4726 = icmp eq i32 %4725, 0
  %4727 = icmp slt i32 %4722, 10
  %4728 = or i1 %4726, %4727
  br i1 %4728, label %originalBB1283, label %originalBB1283alteredBB

originalBB1283:                                   ; preds = %4720, %originalBB1283alteredBB
  %4729 = load i8, i8* %36, align 1, !dbg !1861
  %4730 = trunc i8 %4729 to i1, !dbg !1861
  %4731 = load i32, i32* @x.19
  %4732 = load i32, i32* @y.20
  %4733 = sub i32 %4731, 1
  %4734 = mul i32 %4731, %4733
  %4735 = urem i32 %4734, 2
  %4736 = icmp eq i32 %4735, 0
  %4737 = icmp slt i32 %4732, 10
  %4738 = or i1 %4736, %4737
  br i1 %4738, label %originalBBpart21285, label %originalBB1283alteredBB

originalBBpart21285:                              ; preds = %originalBB1283
  br i1 %4730, label %4936, label %4739, !dbg !1860

4739:                                             ; preds = %originalBBpart21285
  %4740 = load i32, i32* @x.19
  %4741 = load i32, i32* @y.20
  %4742 = sub i32 %4740, 1
  %4743 = mul i32 %4740, %4742
  %4744 = urem i32 %4743, 2
  %4745 = icmp eq i32 %4744, 0
  %4746 = icmp slt i32 %4741, 10
  %4747 = or i1 %4745, %4746
  br i1 %4747, label %originalBB1287, label %originalBB1287alteredBB

originalBB1287:                                   ; preds = %4739, %originalBB1287alteredBB
  %4748 = load i32, i32* @x.19
  %4749 = load i32, i32* @y.20
  %4750 = sub i32 %4748, 1
  %4751 = mul i32 %4748, %4750
  %4752 = urem i32 %4751, 2
  %4753 = icmp eq i32 %4752, 0
  %4754 = icmp slt i32 %4749, 10
  %4755 = or i1 %4753, %4754
  br i1 %4755, label %originalBBpart21289, label %originalBB1287alteredBB

originalBBpart21289:                              ; preds = %originalBB1287
  br label %4756, !dbg !1863

4756:                                             ; preds = %originalBBpart21289
  %4757 = load i64, i64* %29, align 8, !dbg !1865
  %4758 = load i64, i64* %20, align 8, !dbg !1865
  %4759 = icmp ult i64 %4757, %4758, !dbg !1865
  br i1 %4759, label %4760, label %4780, !dbg !1868

4760:                                             ; preds = %4756
  %4761 = load i32, i32* @x.19
  %4762 = load i32, i32* @y.20
  %4763 = sub i32 %4761, 1
  %4764 = mul i32 %4761, %4763
  %4765 = urem i32 %4764, 2
  %4766 = icmp eq i32 %4765, 0
  %4767 = icmp slt i32 %4762, 10
  %4768 = or i1 %4766, %4767
  br i1 %4768, label %originalBB1291, label %originalBB1291alteredBB

originalBB1291:                                   ; preds = %4760, %originalBB1291alteredBB
  %4769 = load i8*, i8** %19, align 8, !dbg !1865
  %4770 = load i64, i64* %29, align 8, !dbg !1865
  %4771 = getelementptr inbounds i8, i8* %4769, i64 %4770, !dbg !1865
  store i8 39, i8* %4771, align 1, !dbg !1865
  %4772 = load i32, i32* @x.19
  %4773 = load i32, i32* @y.20
  %4774 = sub i32 %4772, 1
  %4775 = mul i32 %4772, %4774
  %4776 = urem i32 %4775, 2
  %4777 = icmp eq i32 %4776, 0
  %4778 = icmp slt i32 %4773, 10
  %4779 = or i1 %4777, %4778
  br i1 %4779, label %originalBBpart21293, label %originalBB1291alteredBB

originalBBpart21293:                              ; preds = %originalBB1291
  br label %4780, !dbg !1865

4780:                                             ; preds = %originalBBpart21293, %4756
  %4781 = load i32, i32* @x.19
  %4782 = load i32, i32* @y.20
  %4783 = sub i32 %4781, 1
  %4784 = mul i32 %4781, %4783
  %4785 = urem i32 %4784, 2
  %4786 = icmp eq i32 %4785, 0
  %4787 = icmp slt i32 %4782, 10
  %4788 = or i1 %4786, %4787
  br i1 %4788, label %originalBB1295, label %originalBB1295alteredBB

originalBB1295:                                   ; preds = %4780, %originalBB1295alteredBB
  %4789 = load i64, i64* %29, align 8, !dbg !1868
  %4790 = add i64 %4789, 1, !dbg !1868
  store i64 %4790, i64* %29, align 8, !dbg !1868
  %4791 = load i32, i32* @x.19
  %4792 = load i32, i32* @y.20
  %4793 = sub i32 %4791, 1
  %4794 = mul i32 %4791, %4793
  %4795 = urem i32 %4794, 2
  %4796 = icmp eq i32 %4795, 0
  %4797 = icmp slt i32 %4792, 10
  %4798 = or i1 %4796, %4797
  br i1 %4798, label %originalBBpart21299, label %originalBB1295alteredBB

originalBBpart21299:                              ; preds = %originalBB1295
  br label %4799, !dbg !1868

4799:                                             ; preds = %originalBBpart21299
  br label %4800, !dbg !1863

4800:                                             ; preds = %4799
  %4801 = load i64, i64* %29, align 8, !dbg !1869
  %4802 = load i64, i64* %20, align 8, !dbg !1869
  %4803 = icmp ult i64 %4801, %4802, !dbg !1869
  br i1 %4803, label %4804, label %4824, !dbg !1872

4804:                                             ; preds = %4800
  %4805 = load i32, i32* @x.19
  %4806 = load i32, i32* @y.20
  %4807 = sub i32 %4805, 1
  %4808 = mul i32 %4805, %4807
  %4809 = urem i32 %4808, 2
  %4810 = icmp eq i32 %4809, 0
  %4811 = icmp slt i32 %4806, 10
  %4812 = or i1 %4810, %4811
  br i1 %4812, label %originalBB1301, label %originalBB1301alteredBB

originalBB1301:                                   ; preds = %4804, %originalBB1301alteredBB
  %4813 = load i8*, i8** %19, align 8, !dbg !1869
  %4814 = load i64, i64* %29, align 8, !dbg !1869
  %4815 = getelementptr inbounds i8, i8* %4813, i64 %4814, !dbg !1869
  store i8 36, i8* %4815, align 1, !dbg !1869
  %4816 = load i32, i32* @x.19
  %4817 = load i32, i32* @y.20
  %4818 = sub i32 %4816, 1
  %4819 = mul i32 %4816, %4818
  %4820 = urem i32 %4819, 2
  %4821 = icmp eq i32 %4820, 0
  %4822 = icmp slt i32 %4817, 10
  %4823 = or i1 %4821, %4822
  br i1 %4823, label %originalBBpart21303, label %originalBB1301alteredBB

originalBBpart21303:                              ; preds = %originalBB1301
  br label %4824, !dbg !1869

4824:                                             ; preds = %originalBBpart21303, %4800
  %4825 = load i32, i32* @x.19
  %4826 = load i32, i32* @y.20
  %4827 = sub i32 %4825, 1
  %4828 = mul i32 %4825, %4827
  %4829 = urem i32 %4828, 2
  %4830 = icmp eq i32 %4829, 0
  %4831 = icmp slt i32 %4826, 10
  %4832 = or i1 %4830, %4831
  br i1 %4832, label %originalBB1305, label %originalBB1305alteredBB

originalBB1305:                                   ; preds = %4824, %originalBB1305alteredBB
  %4833 = load i64, i64* %29, align 8, !dbg !1872
  %4834 = add i64 %4833, 1, !dbg !1872
  store i64 %4834, i64* %29, align 8, !dbg !1872
  %4835 = load i32, i32* @x.19
  %4836 = load i32, i32* @y.20
  %4837 = sub i32 %4835, 1
  %4838 = mul i32 %4835, %4837
  %4839 = urem i32 %4838, 2
  %4840 = icmp eq i32 %4839, 0
  %4841 = icmp slt i32 %4836, 10
  %4842 = or i1 %4840, %4841
  br i1 %4842, label %originalBBpart21314, label %originalBB1305alteredBB

originalBBpart21314:                              ; preds = %originalBB1305
  br label %4843, !dbg !1872

4843:                                             ; preds = %originalBBpart21314
  %4844 = load i32, i32* @x.19
  %4845 = load i32, i32* @y.20
  %4846 = sub i32 %4844, 1
  %4847 = mul i32 %4844, %4846
  %4848 = urem i32 %4847, 2
  %4849 = icmp eq i32 %4848, 0
  %4850 = icmp slt i32 %4845, 10
  %4851 = or i1 %4849, %4850
  br i1 %4851, label %originalBB1316, label %originalBB1316alteredBB

originalBB1316:                                   ; preds = %4843, %originalBB1316alteredBB
  %4852 = load i32, i32* @x.19
  %4853 = load i32, i32* @y.20
  %4854 = sub i32 %4852, 1
  %4855 = mul i32 %4852, %4854
  %4856 = urem i32 %4855, 2
  %4857 = icmp eq i32 %4856, 0
  %4858 = icmp slt i32 %4853, 10
  %4859 = or i1 %4857, %4858
  br i1 %4859, label %originalBBpart21318, label %originalBB1316alteredBB

originalBBpart21318:                              ; preds = %originalBB1316
  br label %4860, !dbg !1863

4860:                                             ; preds = %originalBBpart21318
  %4861 = load i32, i32* @x.19
  %4862 = load i32, i32* @y.20
  %4863 = sub i32 %4861, 1
  %4864 = mul i32 %4861, %4863
  %4865 = urem i32 %4864, 2
  %4866 = icmp eq i32 %4865, 0
  %4867 = icmp slt i32 %4862, 10
  %4868 = or i1 %4866, %4867
  br i1 %4868, label %originalBB1320, label %originalBB1320alteredBB

originalBB1320:                                   ; preds = %4860, %originalBB1320alteredBB
  %4869 = load i64, i64* %29, align 8, !dbg !1873
  %4870 = load i64, i64* %20, align 8, !dbg !1873
  %4871 = icmp ult i64 %4869, %4870, !dbg !1873
  %4872 = load i32, i32* @x.19
  %4873 = load i32, i32* @y.20
  %4874 = sub i32 %4872, 1
  %4875 = mul i32 %4872, %4874
  %4876 = urem i32 %4875, 2
  %4877 = icmp eq i32 %4876, 0
  %4878 = icmp slt i32 %4873, 10
  %4879 = or i1 %4877, %4878
  br i1 %4879, label %originalBBpart21322, label %originalBB1320alteredBB

originalBBpart21322:                              ; preds = %originalBB1320
  br i1 %4871, label %4880, label %4900, !dbg !1876

4880:                                             ; preds = %originalBBpart21322
  %4881 = load i32, i32* @x.19
  %4882 = load i32, i32* @y.20
  %4883 = sub i32 %4881, 1
  %4884 = mul i32 %4881, %4883
  %4885 = urem i32 %4884, 2
  %4886 = icmp eq i32 %4885, 0
  %4887 = icmp slt i32 %4882, 10
  %4888 = or i1 %4886, %4887
  br i1 %4888, label %originalBB1324, label %originalBB1324alteredBB

originalBB1324:                                   ; preds = %4880, %originalBB1324alteredBB
  %4889 = load i8*, i8** %19, align 8, !dbg !1873
  %4890 = load i64, i64* %29, align 8, !dbg !1873
  %4891 = getelementptr inbounds i8, i8* %4889, i64 %4890, !dbg !1873
  store i8 39, i8* %4891, align 1, !dbg !1873
  %4892 = load i32, i32* @x.19
  %4893 = load i32, i32* @y.20
  %4894 = sub i32 %4892, 1
  %4895 = mul i32 %4892, %4894
  %4896 = urem i32 %4895, 2
  %4897 = icmp eq i32 %4896, 0
  %4898 = icmp slt i32 %4893, 10
  %4899 = or i1 %4897, %4898
  br i1 %4899, label %originalBBpart21326, label %originalBB1324alteredBB

originalBBpart21326:                              ; preds = %originalBB1324
  br label %4900, !dbg !1873

4900:                                             ; preds = %originalBBpart21326, %originalBBpart21322
  %4901 = load i32, i32* @x.19
  %4902 = load i32, i32* @y.20
  %4903 = sub i32 %4901, 1
  %4904 = mul i32 %4901, %4903
  %4905 = urem i32 %4904, 2
  %4906 = icmp eq i32 %4905, 0
  %4907 = icmp slt i32 %4902, 10
  %4908 = or i1 %4906, %4907
  br i1 %4908, label %originalBB1328, label %originalBB1328alteredBB

originalBB1328:                                   ; preds = %4900, %originalBB1328alteredBB
  %4909 = load i64, i64* %29, align 8, !dbg !1876
  %4910 = add i64 %4909, 1, !dbg !1876
  store i64 %4910, i64* %29, align 8, !dbg !1876
  %4911 = load i32, i32* @x.19
  %4912 = load i32, i32* @y.20
  %4913 = sub i32 %4911, 1
  %4914 = mul i32 %4911, %4913
  %4915 = urem i32 %4914, 2
  %4916 = icmp eq i32 %4915, 0
  %4917 = icmp slt i32 %4912, 10
  %4918 = or i1 %4916, %4917
  br i1 %4918, label %originalBBpart21339, label %originalBB1328alteredBB

originalBBpart21339:                              ; preds = %originalBB1328
  br label %4919, !dbg !1876

4919:                                             ; preds = %originalBBpart21339
  %4920 = load i32, i32* @x.19
  %4921 = load i32, i32* @y.20
  %4922 = sub i32 %4920, 1
  %4923 = mul i32 %4920, %4922
  %4924 = urem i32 %4923, 2
  %4925 = icmp eq i32 %4924, 0
  %4926 = icmp slt i32 %4921, 10
  %4927 = or i1 %4925, %4926
  br i1 %4927, label %originalBB1341, label %originalBB1341alteredBB

originalBB1341:                                   ; preds = %4919, %originalBB1341alteredBB
  store i8 1, i8* %36, align 1, !dbg !1863
  %4928 = load i32, i32* @x.19
  %4929 = load i32, i32* @y.20
  %4930 = sub i32 %4928, 1
  %4931 = mul i32 %4928, %4930
  %4932 = urem i32 %4931, 2
  %4933 = icmp eq i32 %4932, 0
  %4934 = icmp slt i32 %4929, 10
  %4935 = or i1 %4933, %4934
  br i1 %4935, label %originalBBpart21343, label %originalBB1341alteredBB

originalBBpart21343:                              ; preds = %originalBB1341
  br label %4936, !dbg !1863

4936:                                             ; preds = %originalBBpart21343, %originalBBpart21285, %originalBBpart21281
  %4937 = load i32, i32* @x.19
  %4938 = load i32, i32* @y.20
  %4939 = sub i32 %4937, 1
  %4940 = mul i32 %4937, %4939
  %4941 = urem i32 %4940, 2
  %4942 = icmp eq i32 %4941, 0
  %4943 = icmp slt i32 %4938, 10
  %4944 = or i1 %4942, %4943
  br i1 %4944, label %originalBB1345, label %originalBB1345alteredBB

originalBB1345:                                   ; preds = %4936, %originalBB1345alteredBB
  %4945 = load i32, i32* @x.19
  %4946 = load i32, i32* @y.20
  %4947 = sub i32 %4945, 1
  %4948 = mul i32 %4945, %4947
  %4949 = urem i32 %4948, 2
  %4950 = icmp eq i32 %4949, 0
  %4951 = icmp slt i32 %4946, 10
  %4952 = or i1 %4950, %4951
  br i1 %4952, label %originalBBpart21347, label %originalBB1345alteredBB

originalBBpart21347:                              ; preds = %originalBB1345
  br label %4953, !dbg !1860

4953:                                             ; preds = %originalBBpart21347
  %4954 = load i64, i64* %29, align 8, !dbg !1877
  %4955 = load i64, i64* %20, align 8, !dbg !1877
  %4956 = icmp ult i64 %4954, %4955, !dbg !1877
  br i1 %4956, label %4957, label %4977, !dbg !1880

4957:                                             ; preds = %4953
  %4958 = load i32, i32* @x.19
  %4959 = load i32, i32* @y.20
  %4960 = sub i32 %4958, 1
  %4961 = mul i32 %4958, %4960
  %4962 = urem i32 %4961, 2
  %4963 = icmp eq i32 %4962, 0
  %4964 = icmp slt i32 %4959, 10
  %4965 = or i1 %4963, %4964
  br i1 %4965, label %originalBB1349, label %originalBB1349alteredBB

originalBB1349:                                   ; preds = %4957, %originalBB1349alteredBB
  %4966 = load i8*, i8** %19, align 8, !dbg !1877
  %4967 = load i64, i64* %29, align 8, !dbg !1877
  %4968 = getelementptr inbounds i8, i8* %4966, i64 %4967, !dbg !1877
  store i8 92, i8* %4968, align 1, !dbg !1877
  %4969 = load i32, i32* @x.19
  %4970 = load i32, i32* @y.20
  %4971 = sub i32 %4969, 1
  %4972 = mul i32 %4969, %4971
  %4973 = urem i32 %4972, 2
  %4974 = icmp eq i32 %4973, 0
  %4975 = icmp slt i32 %4970, 10
  %4976 = or i1 %4974, %4975
  br i1 %4976, label %originalBBpart21351, label %originalBB1349alteredBB

originalBBpart21351:                              ; preds = %originalBB1349
  br label %4977, !dbg !1877

4977:                                             ; preds = %originalBBpart21351, %4953
  %4978 = load i32, i32* @x.19
  %4979 = load i32, i32* @y.20
  %4980 = sub i32 %4978, 1
  %4981 = mul i32 %4978, %4980
  %4982 = urem i32 %4981, 2
  %4983 = icmp eq i32 %4982, 0
  %4984 = icmp slt i32 %4979, 10
  %4985 = or i1 %4983, %4984
  br i1 %4985, label %originalBB1353, label %originalBB1353alteredBB

originalBB1353:                                   ; preds = %4977, %originalBB1353alteredBB
  %4986 = load i64, i64* %29, align 8, !dbg !1880
  %4987 = add i64 %4986, 1, !dbg !1880
  store i64 %4987, i64* %29, align 8, !dbg !1880
  %4988 = load i32, i32* @x.19
  %4989 = load i32, i32* @y.20
  %4990 = sub i32 %4988, 1
  %4991 = mul i32 %4988, %4990
  %4992 = urem i32 %4991, 2
  %4993 = icmp eq i32 %4992, 0
  %4994 = icmp slt i32 %4989, 10
  %4995 = or i1 %4993, %4994
  br i1 %4995, label %originalBBpart21363, label %originalBB1353alteredBB

originalBBpart21363:                              ; preds = %originalBB1353
  br label %4996, !dbg !1880

4996:                                             ; preds = %originalBBpart21363
  %4997 = load i32, i32* @x.19
  %4998 = load i32, i32* @y.20
  %4999 = sub i32 %4997, 1
  %5000 = mul i32 %4997, %4999
  %5001 = urem i32 %5000, 2
  %5002 = icmp eq i32 %5001, 0
  %5003 = icmp slt i32 %4998, 10
  %5004 = or i1 %5002, %5003
  br i1 %5004, label %originalBB1365, label %originalBB1365alteredBB

originalBB1365:                                   ; preds = %4996, %originalBB1365alteredBB
  %5005 = load i32, i32* @x.19
  %5006 = load i32, i32* @y.20
  %5007 = sub i32 %5005, 1
  %5008 = mul i32 %5005, %5007
  %5009 = urem i32 %5008, 2
  %5010 = icmp eq i32 %5009, 0
  %5011 = icmp slt i32 %5006, 10
  %5012 = or i1 %5010, %5011
  br i1 %5012, label %originalBBpart21367, label %originalBB1365alteredBB

originalBBpart21367:                              ; preds = %originalBB1365
  br label %5013, !dbg !1860

5013:                                             ; preds = %originalBBpart21367
  %5014 = load i32, i32* @x.19
  %5015 = load i32, i32* @y.20
  %5016 = sub i32 %5014, 1
  %5017 = mul i32 %5014, %5016
  %5018 = urem i32 %5017, 2
  %5019 = icmp eq i32 %5018, 0
  %5020 = icmp slt i32 %5015, 10
  %5021 = or i1 %5019, %5020
  br i1 %5021, label %originalBB1369, label %originalBB1369alteredBB

originalBB1369:                                   ; preds = %5013, %originalBB1369alteredBB
  %5022 = load i32, i32* @x.19
  %5023 = load i32, i32* @y.20
  %5024 = sub i32 %5022, 1
  %5025 = mul i32 %5022, %5024
  %5026 = urem i32 %5025, 2
  %5027 = icmp eq i32 %5026, 0
  %5028 = icmp slt i32 %5023, 10
  %5029 = or i1 %5027, %5028
  br i1 %5029, label %originalBBpart21371, label %originalBB1369alteredBB

originalBBpart21371:                              ; preds = %originalBB1369
  br label %5030, !dbg !1860

5030:                                             ; preds = %originalBBpart21371, %originalBBpart21265, %originalBBpart21218, %originalBBpart2616, %2212
  call void @llvm.dbg.label(metadata !1881), !dbg !1882
  %5031 = load i32, i32* @x.19
  %5032 = load i32, i32* @y.20
  %5033 = sub i32 %5031, 1
  %5034 = mul i32 %5031, %5033
  %5035 = urem i32 %5034, 2
  %5036 = icmp eq i32 %5035, 0
  %5037 = icmp slt i32 %5032, 10
  %5038 = or i1 %5036, %5037
  br i1 %5038, label %originalBB1373, label %originalBB1373alteredBB

originalBB1373:                                   ; preds = %5030, %originalBB1373alteredBB
  %5039 = load i32, i32* @x.19
  %5040 = load i32, i32* @y.20
  %5041 = sub i32 %5039, 1
  %5042 = mul i32 %5039, %5041
  %5043 = urem i32 %5042, 2
  %5044 = icmp eq i32 %5043, 0
  %5045 = icmp slt i32 %5040, 10
  %5046 = or i1 %5044, %5045
  br i1 %5046, label %originalBBpart21375, label %originalBB1373alteredBB

originalBBpart21375:                              ; preds = %originalBB1373
  br label %5047, !dbg !1883

5047:                                             ; preds = %originalBBpart21375
  %5048 = load i32, i32* @x.19
  %5049 = load i32, i32* @y.20
  %5050 = sub i32 %5048, 1
  %5051 = mul i32 %5048, %5050
  %5052 = urem i32 %5051, 2
  %5053 = icmp eq i32 %5052, 0
  %5054 = icmp slt i32 %5049, 10
  %5055 = or i1 %5053, %5054
  br i1 %5055, label %originalBB1377, label %originalBB1377alteredBB

originalBB1377:                                   ; preds = %5047, %originalBB1377alteredBB
  %5056 = load i8, i8* %36, align 1, !dbg !1884
  %5057 = trunc i8 %5056 to i1, !dbg !1884
  %5058 = load i32, i32* @x.19
  %5059 = load i32, i32* @y.20
  %5060 = sub i32 %5058, 1
  %5061 = mul i32 %5058, %5060
  %5062 = urem i32 %5061, 2
  %5063 = icmp eq i32 %5062, 0
  %5064 = icmp slt i32 %5059, 10
  %5065 = or i1 %5063, %5064
  br i1 %5065, label %originalBBpart21379, label %originalBB1377alteredBB

originalBBpart21379:                              ; preds = %originalBB1377
  br i1 %5057, label %5066, label %5238, !dbg !1884

5066:                                             ; preds = %originalBBpart21379
  %5067 = load i32, i32* @x.19
  %5068 = load i32, i32* @y.20
  %5069 = sub i32 %5067, 1
  %5070 = mul i32 %5067, %5069
  %5071 = urem i32 %5070, 2
  %5072 = icmp eq i32 %5071, 0
  %5073 = icmp slt i32 %5068, 10
  %5074 = or i1 %5072, %5073
  br i1 %5074, label %originalBB1381, label %originalBB1381alteredBB

originalBB1381:                                   ; preds = %5066, %originalBB1381alteredBB
  %5075 = load i8, i8* %42, align 1, !dbg !1884
  %5076 = trunc i8 %5075 to i1, !dbg !1884
  %5077 = load i32, i32* @x.19
  %5078 = load i32, i32* @y.20
  %5079 = sub i32 %5077, 1
  %5080 = mul i32 %5077, %5079
  %5081 = urem i32 %5080, 2
  %5082 = icmp eq i32 %5081, 0
  %5083 = icmp slt i32 %5078, 10
  %5084 = or i1 %5082, %5083
  br i1 %5084, label %originalBBpart21383, label %originalBB1381alteredBB

originalBBpart21383:                              ; preds = %originalBB1381
  br i1 %5076, label %5238, label %5085, !dbg !1887

5085:                                             ; preds = %originalBBpart21383
  %5086 = load i32, i32* @x.19
  %5087 = load i32, i32* @y.20
  %5088 = sub i32 %5086, 1
  %5089 = mul i32 %5086, %5088
  %5090 = urem i32 %5089, 2
  %5091 = icmp eq i32 %5090, 0
  %5092 = icmp slt i32 %5087, 10
  %5093 = or i1 %5091, %5092
  br i1 %5093, label %originalBB1385, label %originalBB1385alteredBB

originalBB1385:                                   ; preds = %5085, %originalBB1385alteredBB
  %5094 = load i32, i32* @x.19
  %5095 = load i32, i32* @y.20
  %5096 = sub i32 %5094, 1
  %5097 = mul i32 %5094, %5096
  %5098 = urem i32 %5097, 2
  %5099 = icmp eq i32 %5098, 0
  %5100 = icmp slt i32 %5095, 10
  %5101 = or i1 %5099, %5100
  br i1 %5101, label %originalBBpart21387, label %originalBB1385alteredBB

originalBBpart21387:                              ; preds = %originalBB1385
  br label %5102, !dbg !1888

5102:                                             ; preds = %originalBBpart21387
  %5103 = load i32, i32* @x.19
  %5104 = load i32, i32* @y.20
  %5105 = sub i32 %5103, 1
  %5106 = mul i32 %5103, %5105
  %5107 = urem i32 %5106, 2
  %5108 = icmp eq i32 %5107, 0
  %5109 = icmp slt i32 %5104, 10
  %5110 = or i1 %5108, %5109
  br i1 %5110, label %originalBB1389, label %originalBB1389alteredBB

originalBB1389:                                   ; preds = %5102, %originalBB1389alteredBB
  %5111 = load i64, i64* %29, align 8, !dbg !1890
  %5112 = load i64, i64* %20, align 8, !dbg !1890
  %5113 = icmp ult i64 %5111, %5112, !dbg !1890
  %5114 = load i32, i32* @x.19
  %5115 = load i32, i32* @y.20
  %5116 = sub i32 %5114, 1
  %5117 = mul i32 %5114, %5116
  %5118 = urem i32 %5117, 2
  %5119 = icmp eq i32 %5118, 0
  %5120 = icmp slt i32 %5115, 10
  %5121 = or i1 %5119, %5120
  br i1 %5121, label %originalBBpart21391, label %originalBB1389alteredBB

originalBBpart21391:                              ; preds = %originalBB1389
  br i1 %5113, label %5122, label %5142, !dbg !1893

5122:                                             ; preds = %originalBBpart21391
  %5123 = load i32, i32* @x.19
  %5124 = load i32, i32* @y.20
  %5125 = sub i32 %5123, 1
  %5126 = mul i32 %5123, %5125
  %5127 = urem i32 %5126, 2
  %5128 = icmp eq i32 %5127, 0
  %5129 = icmp slt i32 %5124, 10
  %5130 = or i1 %5128, %5129
  br i1 %5130, label %originalBB1393, label %originalBB1393alteredBB

originalBB1393:                                   ; preds = %5122, %originalBB1393alteredBB
  %5131 = load i8*, i8** %19, align 8, !dbg !1890
  %5132 = load i64, i64* %29, align 8, !dbg !1890
  %5133 = getelementptr inbounds i8, i8* %5131, i64 %5132, !dbg !1890
  store i8 39, i8* %5133, align 1, !dbg !1890
  %5134 = load i32, i32* @x.19
  %5135 = load i32, i32* @y.20
  %5136 = sub i32 %5134, 1
  %5137 = mul i32 %5134, %5136
  %5138 = urem i32 %5137, 2
  %5139 = icmp eq i32 %5138, 0
  %5140 = icmp slt i32 %5135, 10
  %5141 = or i1 %5139, %5140
  br i1 %5141, label %originalBBpart21395, label %originalBB1393alteredBB

originalBBpart21395:                              ; preds = %originalBB1393
  br label %5142, !dbg !1890

5142:                                             ; preds = %originalBBpart21395, %originalBBpart21391
  %5143 = load i32, i32* @x.19
  %5144 = load i32, i32* @y.20
  %5145 = sub i32 %5143, 1
  %5146 = mul i32 %5143, %5145
  %5147 = urem i32 %5146, 2
  %5148 = icmp eq i32 %5147, 0
  %5149 = icmp slt i32 %5144, 10
  %5150 = or i1 %5148, %5149
  br i1 %5150, label %originalBB1397, label %originalBB1397alteredBB

originalBB1397:                                   ; preds = %5142, %originalBB1397alteredBB
  %5151 = load i64, i64* %29, align 8, !dbg !1893
  %5152 = add i64 %5151, 1, !dbg !1893
  store i64 %5152, i64* %29, align 8, !dbg !1893
  %5153 = load i32, i32* @x.19
  %5154 = load i32, i32* @y.20
  %5155 = sub i32 %5153, 1
  %5156 = mul i32 %5153, %5155
  %5157 = urem i32 %5156, 2
  %5158 = icmp eq i32 %5157, 0
  %5159 = icmp slt i32 %5154, 10
  %5160 = or i1 %5158, %5159
  br i1 %5160, label %originalBBpart21406, label %originalBB1397alteredBB

originalBBpart21406:                              ; preds = %originalBB1397
  br label %5161, !dbg !1893

5161:                                             ; preds = %originalBBpart21406
  br label %5162, !dbg !1888

5162:                                             ; preds = %5161
  %5163 = load i32, i32* @x.19
  %5164 = load i32, i32* @y.20
  %5165 = sub i32 %5163, 1
  %5166 = mul i32 %5163, %5165
  %5167 = urem i32 %5166, 2
  %5168 = icmp eq i32 %5167, 0
  %5169 = icmp slt i32 %5164, 10
  %5170 = or i1 %5168, %5169
  br i1 %5170, label %originalBB1408, label %originalBB1408alteredBB

originalBB1408:                                   ; preds = %5162, %originalBB1408alteredBB
  %5171 = load i64, i64* %29, align 8, !dbg !1894
  %5172 = load i64, i64* %20, align 8, !dbg !1894
  %5173 = icmp ult i64 %5171, %5172, !dbg !1894
  %5174 = load i32, i32* @x.19
  %5175 = load i32, i32* @y.20
  %5176 = sub i32 %5174, 1
  %5177 = mul i32 %5174, %5176
  %5178 = urem i32 %5177, 2
  %5179 = icmp eq i32 %5178, 0
  %5180 = icmp slt i32 %5175, 10
  %5181 = or i1 %5179, %5180
  br i1 %5181, label %originalBBpart21410, label %originalBB1408alteredBB

originalBBpart21410:                              ; preds = %originalBB1408
  br i1 %5173, label %5182, label %5202, !dbg !1897

5182:                                             ; preds = %originalBBpart21410
  %5183 = load i32, i32* @x.19
  %5184 = load i32, i32* @y.20
  %5185 = sub i32 %5183, 1
  %5186 = mul i32 %5183, %5185
  %5187 = urem i32 %5186, 2
  %5188 = icmp eq i32 %5187, 0
  %5189 = icmp slt i32 %5184, 10
  %5190 = or i1 %5188, %5189
  br i1 %5190, label %originalBB1412, label %originalBB1412alteredBB

originalBB1412:                                   ; preds = %5182, %originalBB1412alteredBB
  %5191 = load i8*, i8** %19, align 8, !dbg !1894
  %5192 = load i64, i64* %29, align 8, !dbg !1894
  %5193 = getelementptr inbounds i8, i8* %5191, i64 %5192, !dbg !1894
  store i8 39, i8* %5193, align 1, !dbg !1894
  %5194 = load i32, i32* @x.19
  %5195 = load i32, i32* @y.20
  %5196 = sub i32 %5194, 1
  %5197 = mul i32 %5194, %5196
  %5198 = urem i32 %5197, 2
  %5199 = icmp eq i32 %5198, 0
  %5200 = icmp slt i32 %5195, 10
  %5201 = or i1 %5199, %5200
  br i1 %5201, label %originalBBpart21414, label %originalBB1412alteredBB

originalBBpart21414:                              ; preds = %originalBB1412
  br label %5202, !dbg !1894

5202:                                             ; preds = %originalBBpart21414, %originalBBpart21410
  %5203 = load i32, i32* @x.19
  %5204 = load i32, i32* @y.20
  %5205 = sub i32 %5203, 1
  %5206 = mul i32 %5203, %5205
  %5207 = urem i32 %5206, 2
  %5208 = icmp eq i32 %5207, 0
  %5209 = icmp slt i32 %5204, 10
  %5210 = or i1 %5208, %5209
  br i1 %5210, label %originalBB1416, label %originalBB1416alteredBB

originalBB1416:                                   ; preds = %5202, %originalBB1416alteredBB
  %5211 = load i64, i64* %29, align 8, !dbg !1897
  %5212 = add i64 %5211, 1, !dbg !1897
  store i64 %5212, i64* %29, align 8, !dbg !1897
  %5213 = load i32, i32* @x.19
  %5214 = load i32, i32* @y.20
  %5215 = sub i32 %5213, 1
  %5216 = mul i32 %5213, %5215
  %5217 = urem i32 %5216, 2
  %5218 = icmp eq i32 %5217, 0
  %5219 = icmp slt i32 %5214, 10
  %5220 = or i1 %5218, %5219
  br i1 %5220, label %originalBBpart21427, label %originalBB1416alteredBB

originalBBpart21427:                              ; preds = %originalBB1416
  br label %5221, !dbg !1897

5221:                                             ; preds = %originalBBpart21427
  %5222 = load i32, i32* @x.19
  %5223 = load i32, i32* @y.20
  %5224 = sub i32 %5222, 1
  %5225 = mul i32 %5222, %5224
  %5226 = urem i32 %5225, 2
  %5227 = icmp eq i32 %5226, 0
  %5228 = icmp slt i32 %5223, 10
  %5229 = or i1 %5227, %5228
  br i1 %5229, label %originalBB1429, label %originalBB1429alteredBB

originalBB1429:                                   ; preds = %5221, %originalBB1429alteredBB
  store i8 0, i8* %36, align 1, !dbg !1888
  %5230 = load i32, i32* @x.19
  %5231 = load i32, i32* @y.20
  %5232 = sub i32 %5230, 1
  %5233 = mul i32 %5230, %5232
  %5234 = urem i32 %5233, 2
  %5235 = icmp eq i32 %5234, 0
  %5236 = icmp slt i32 %5231, 10
  %5237 = or i1 %5235, %5236
  br i1 %5237, label %originalBBpart21431, label %originalBB1429alteredBB

originalBBpart21431:                              ; preds = %originalBB1429
  br label %5238, !dbg !1888

5238:                                             ; preds = %originalBBpart21431, %originalBBpart21383, %originalBBpart21379
  %5239 = load i32, i32* @x.19
  %5240 = load i32, i32* @y.20
  %5241 = sub i32 %5239, 1
  %5242 = mul i32 %5239, %5241
  %5243 = urem i32 %5242, 2
  %5244 = icmp eq i32 %5243, 0
  %5245 = icmp slt i32 %5240, 10
  %5246 = or i1 %5244, %5245
  br i1 %5246, label %originalBB1433, label %originalBB1433alteredBB

originalBB1433:                                   ; preds = %5238, %originalBB1433alteredBB
  %5247 = load i32, i32* @x.19
  %5248 = load i32, i32* @y.20
  %5249 = sub i32 %5247, 1
  %5250 = mul i32 %5247, %5249
  %5251 = urem i32 %5250, 2
  %5252 = icmp eq i32 %5251, 0
  %5253 = icmp slt i32 %5248, 10
  %5254 = or i1 %5252, %5253
  br i1 %5254, label %originalBBpart21435, label %originalBB1433alteredBB

originalBBpart21435:                              ; preds = %originalBB1433
  br label %5255, !dbg !1887

5255:                                             ; preds = %originalBBpart21435
  %5256 = load i32, i32* @x.19
  %5257 = load i32, i32* @y.20
  %5258 = sub i32 %5256, 1
  %5259 = mul i32 %5256, %5258
  %5260 = urem i32 %5259, 2
  %5261 = icmp eq i32 %5260, 0
  %5262 = icmp slt i32 %5257, 10
  %5263 = or i1 %5261, %5262
  br i1 %5263, label %originalBB1437, label %originalBB1437alteredBB

originalBB1437:                                   ; preds = %5255, %originalBB1437alteredBB
  %5264 = load i32, i32* @x.19
  %5265 = load i32, i32* @y.20
  %5266 = sub i32 %5264, 1
  %5267 = mul i32 %5264, %5266
  %5268 = urem i32 %5267, 2
  %5269 = icmp eq i32 %5268, 0
  %5270 = icmp slt i32 %5265, 10
  %5271 = or i1 %5269, %5270
  br i1 %5271, label %originalBBpart21439, label %originalBB1437alteredBB

originalBBpart21439:                              ; preds = %originalBB1437
  br label %5272, !dbg !1898

5272:                                             ; preds = %originalBBpart21439
  %5273 = load i32, i32* @x.19
  %5274 = load i32, i32* @y.20
  %5275 = sub i32 %5273, 1
  %5276 = mul i32 %5273, %5275
  %5277 = urem i32 %5276, 2
  %5278 = icmp eq i32 %5277, 0
  %5279 = icmp slt i32 %5274, 10
  %5280 = or i1 %5278, %5279
  br i1 %5280, label %originalBB1441, label %originalBB1441alteredBB

originalBB1441:                                   ; preds = %5272, %originalBB1441alteredBB
  %5281 = load i64, i64* %29, align 8, !dbg !1899
  %5282 = load i64, i64* %20, align 8, !dbg !1899
  %5283 = icmp ult i64 %5281, %5282, !dbg !1899
  %5284 = load i32, i32* @x.19
  %5285 = load i32, i32* @y.20
  %5286 = sub i32 %5284, 1
  %5287 = mul i32 %5284, %5286
  %5288 = urem i32 %5287, 2
  %5289 = icmp eq i32 %5288, 0
  %5290 = icmp slt i32 %5285, 10
  %5291 = or i1 %5289, %5290
  br i1 %5291, label %originalBBpart21443, label %originalBB1441alteredBB

originalBBpart21443:                              ; preds = %originalBB1441
  br i1 %5283, label %5292, label %5313, !dbg !1902

5292:                                             ; preds = %originalBBpart21443
  %5293 = load i32, i32* @x.19
  %5294 = load i32, i32* @y.20
  %5295 = sub i32 %5293, 1
  %5296 = mul i32 %5293, %5295
  %5297 = urem i32 %5296, 2
  %5298 = icmp eq i32 %5297, 0
  %5299 = icmp slt i32 %5294, 10
  %5300 = or i1 %5298, %5299
  br i1 %5300, label %originalBB1445, label %originalBB1445alteredBB

originalBB1445:                                   ; preds = %5292, %originalBB1445alteredBB
  %5301 = load i8, i8* %39, align 1, !dbg !1899
  %5302 = load i8*, i8** %19, align 8, !dbg !1899
  %5303 = load i64, i64* %29, align 8, !dbg !1899
  %5304 = getelementptr inbounds i8, i8* %5302, i64 %5303, !dbg !1899
  store i8 %5301, i8* %5304, align 1, !dbg !1899
  %5305 = load i32, i32* @x.19
  %5306 = load i32, i32* @y.20
  %5307 = sub i32 %5305, 1
  %5308 = mul i32 %5305, %5307
  %5309 = urem i32 %5308, 2
  %5310 = icmp eq i32 %5309, 0
  %5311 = icmp slt i32 %5306, 10
  %5312 = or i1 %5310, %5311
  br i1 %5312, label %originalBBpart21447, label %originalBB1445alteredBB

originalBBpart21447:                              ; preds = %originalBB1445
  br label %5313, !dbg !1899

5313:                                             ; preds = %originalBBpart21447, %originalBBpart21443
  %5314 = load i32, i32* @x.19
  %5315 = load i32, i32* @y.20
  %5316 = sub i32 %5314, 1
  %5317 = mul i32 %5314, %5316
  %5318 = urem i32 %5317, 2
  %5319 = icmp eq i32 %5318, 0
  %5320 = icmp slt i32 %5315, 10
  %5321 = or i1 %5319, %5320
  br i1 %5321, label %originalBB1449, label %originalBB1449alteredBB

originalBB1449:                                   ; preds = %5313, %originalBB1449alteredBB
  %5322 = load i64, i64* %29, align 8, !dbg !1902
  %5323 = add i64 %5322, 1, !dbg !1902
  store i64 %5323, i64* %29, align 8, !dbg !1902
  %5324 = load i32, i32* @x.19
  %5325 = load i32, i32* @y.20
  %5326 = sub i32 %5324, 1
  %5327 = mul i32 %5324, %5326
  %5328 = urem i32 %5327, 2
  %5329 = icmp eq i32 %5328, 0
  %5330 = icmp slt i32 %5325, 10
  %5331 = or i1 %5329, %5330
  br i1 %5331, label %originalBBpart21455, label %originalBB1449alteredBB

originalBBpart21455:                              ; preds = %originalBB1449
  br label %5332, !dbg !1902

5332:                                             ; preds = %originalBBpart21455
  %5333 = load i8, i8* %43, align 1, !dbg !1903
  %5334 = trunc i8 %5333 to i1, !dbg !1903
  br i1 %5334, label %5352, label %5335, !dbg !1905

5335:                                             ; preds = %5332
  %5336 = load i32, i32* @x.19
  %5337 = load i32, i32* @y.20
  %5338 = sub i32 %5336, 1
  %5339 = mul i32 %5336, %5338
  %5340 = urem i32 %5339, 2
  %5341 = icmp eq i32 %5340, 0
  %5342 = icmp slt i32 %5337, 10
  %5343 = or i1 %5341, %5342
  br i1 %5343, label %originalBB1457, label %originalBB1457alteredBB

originalBB1457:                                   ; preds = %5335, %originalBB1457alteredBB
  store i8 0, i8* %38, align 1, !dbg !1906
  %5344 = load i32, i32* @x.19
  %5345 = load i32, i32* @y.20
  %5346 = sub i32 %5344, 1
  %5347 = mul i32 %5344, %5346
  %5348 = urem i32 %5347, 2
  %5349 = icmp eq i32 %5348, 0
  %5350 = icmp slt i32 %5345, 10
  %5351 = or i1 %5349, %5350
  br i1 %5351, label %originalBBpart21459, label %originalBB1457alteredBB

originalBBpart21459:                              ; preds = %originalBB1457
  br label %5352, !dbg !1907

5352:                                             ; preds = %originalBBpart21459, %5332
  %5353 = load i32, i32* @x.19
  %5354 = load i32, i32* @y.20
  %5355 = sub i32 %5353, 1
  %5356 = mul i32 %5353, %5355
  %5357 = urem i32 %5356, 2
  %5358 = icmp eq i32 %5357, 0
  %5359 = icmp slt i32 %5354, 10
  %5360 = or i1 %5358, %5359
  br i1 %5360, label %originalBB1461, label %originalBB1461alteredBB

originalBB1461:                                   ; preds = %5352, %originalBB1461alteredBB
  %5361 = load i32, i32* @x.19
  %5362 = load i32, i32* @y.20
  %5363 = sub i32 %5361, 1
  %5364 = mul i32 %5361, %5363
  %5365 = urem i32 %5364, 2
  %5366 = icmp eq i32 %5365, 0
  %5367 = icmp slt i32 %5362, 10
  %5368 = or i1 %5366, %5367
  br i1 %5368, label %originalBBpart21463, label %originalBB1461alteredBB

originalBBpart21463:                              ; preds = %originalBB1461
  br label %5369, !dbg !1908

5369:                                             ; preds = %originalBBpart21463, %originalBBpart2399
  %5370 = load i32, i32* @x.19
  %5371 = load i32, i32* @y.20
  %5372 = sub i32 %5370, 1
  %5373 = mul i32 %5370, %5372
  %5374 = urem i32 %5373, 2
  %5375 = icmp eq i32 %5374, 0
  %5376 = icmp slt i32 %5371, 10
  %5377 = or i1 %5375, %5376
  br i1 %5377, label %originalBB1465, label %originalBB1465alteredBB

originalBB1465:                                   ; preds = %5369, %originalBB1465alteredBB
  %5378 = load i64, i64* %28, align 8, !dbg !1909
  %5379 = add i64 %5378, 1, !dbg !1909
  store i64 %5379, i64* %28, align 8, !dbg !1909
  %5380 = load i32, i32* @x.19
  %5381 = load i32, i32* @y.20
  %5382 = sub i32 %5380, 1
  %5383 = mul i32 %5380, %5382
  %5384 = urem i32 %5383, 2
  %5385 = icmp eq i32 %5384, 0
  %5386 = icmp slt i32 %5381, 10
  %5387 = or i1 %5385, %5386
  br i1 %5387, label %originalBBpart21469, label %originalBB1465alteredBB

originalBBpart21469:                              ; preds = %originalBB1465
  br label %634, !dbg !1910, !llvm.loop !1911

5388:                                             ; preds = %originalBBpart2165
  %5389 = load i32, i32* @x.19
  %5390 = load i32, i32* @y.20
  %5391 = sub i32 %5389, 1
  %5392 = mul i32 %5389, %5391
  %5393 = urem i32 %5392, 2
  %5394 = icmp eq i32 %5393, 0
  %5395 = icmp slt i32 %5390, 10
  %5396 = or i1 %5394, %5395
  br i1 %5396, label %originalBB1471, label %originalBB1471alteredBB

originalBB1471:                                   ; preds = %5388, %originalBB1471alteredBB
  %5397 = load i64, i64* %29, align 8, !dbg !1913
  %5398 = icmp eq i64 %5397, 0, !dbg !1915
  %5399 = load i32, i32* @x.19
  %5400 = load i32, i32* @y.20
  %5401 = sub i32 %5399, 1
  %5402 = mul i32 %5399, %5401
  %5403 = urem i32 %5402, 2
  %5404 = icmp eq i32 %5403, 0
  %5405 = icmp slt i32 %5400, 10
  %5406 = or i1 %5404, %5405
  br i1 %5406, label %originalBBpart21473, label %originalBB1471alteredBB

originalBBpart21473:                              ; preds = %originalBB1471
  br i1 %5398, label %5407, label %5446, !dbg !1916

5407:                                             ; preds = %originalBBpart21473
  %5408 = load i32, i32* %23, align 4, !dbg !1917
  %5409 = icmp eq i32 %5408, 2, !dbg !1918
  br i1 %5409, label %5410, label %5446, !dbg !1919

5410:                                             ; preds = %5407
  %5411 = load i32, i32* @x.19
  %5412 = load i32, i32* @y.20
  %5413 = sub i32 %5411, 1
  %5414 = mul i32 %5411, %5413
  %5415 = urem i32 %5414, 2
  %5416 = icmp eq i32 %5415, 0
  %5417 = icmp slt i32 %5412, 10
  %5418 = or i1 %5416, %5417
  br i1 %5418, label %originalBB1475, label %originalBB1475alteredBB

originalBB1475:                                   ; preds = %5410, %originalBB1475alteredBB
  %5419 = load i8, i8* %35, align 1, !dbg !1920
  %5420 = trunc i8 %5419 to i1, !dbg !1920
  %5421 = load i32, i32* @x.19
  %5422 = load i32, i32* @y.20
  %5423 = sub i32 %5421, 1
  %5424 = mul i32 %5421, %5423
  %5425 = urem i32 %5424, 2
  %5426 = icmp eq i32 %5425, 0
  %5427 = icmp slt i32 %5422, 10
  %5428 = or i1 %5426, %5427
  br i1 %5428, label %originalBBpart21477, label %originalBB1475alteredBB

originalBBpart21477:                              ; preds = %originalBB1475
  br i1 %5420, label %5429, label %5446, !dbg !1921

5429:                                             ; preds = %originalBBpart21477
  %5430 = load i32, i32* @x.19
  %5431 = load i32, i32* @y.20
  %5432 = sub i32 %5430, 1
  %5433 = mul i32 %5430, %5432
  %5434 = urem i32 %5433, 2
  %5435 = icmp eq i32 %5434, 0
  %5436 = icmp slt i32 %5431, 10
  %5437 = or i1 %5435, %5436
  br i1 %5437, label %originalBB1479, label %originalBB1479alteredBB

originalBB1479:                                   ; preds = %5429, %originalBB1479alteredBB
  %5438 = load i32, i32* @x.19
  %5439 = load i32, i32* @y.20
  %5440 = sub i32 %5438, 1
  %5441 = mul i32 %5438, %5440
  %5442 = urem i32 %5441, 2
  %5443 = icmp eq i32 %5442, 0
  %5444 = icmp slt i32 %5439, 10
  %5445 = or i1 %5443, %5444
  br i1 %5445, label %originalBBpart21481, label %originalBB1479alteredBB

originalBBpart21481:                              ; preds = %originalBB1479
  br label %5870, !dbg !1922

5446:                                             ; preds = %originalBBpart21477, %5407, %originalBBpart21473
  %5447 = load i32, i32* @x.19
  %5448 = load i32, i32* @y.20
  %5449 = sub i32 %5447, 1
  %5450 = mul i32 %5447, %5449
  %5451 = urem i32 %5450, 2
  %5452 = icmp eq i32 %5451, 0
  %5453 = icmp slt i32 %5448, 10
  %5454 = or i1 %5452, %5453
  br i1 %5454, label %originalBB1483, label %originalBB1483alteredBB

originalBB1483:                                   ; preds = %5446, %originalBB1483alteredBB
  %5455 = load i32, i32* %23, align 4, !dbg !1923
  %5456 = icmp eq i32 %5455, 2, !dbg !1925
  %5457 = load i32, i32* @x.19
  %5458 = load i32, i32* @y.20
  %5459 = sub i32 %5457, 1
  %5460 = mul i32 %5457, %5459
  %5461 = urem i32 %5460, 2
  %5462 = icmp eq i32 %5461, 0
  %5463 = icmp slt i32 %5458, 10
  %5464 = or i1 %5462, %5463
  br i1 %5464, label %originalBBpart21485, label %originalBB1483alteredBB

originalBBpart21485:                              ; preds = %originalBB1483
  br i1 %5456, label %5465, label %5622, !dbg !1926

5465:                                             ; preds = %originalBBpart21485
  %5466 = load i32, i32* @x.19
  %5467 = load i32, i32* @y.20
  %5468 = sub i32 %5466, 1
  %5469 = mul i32 %5466, %5468
  %5470 = urem i32 %5469, 2
  %5471 = icmp eq i32 %5470, 0
  %5472 = icmp slt i32 %5467, 10
  %5473 = or i1 %5471, %5472
  br i1 %5473, label %originalBB1487, label %originalBB1487alteredBB

originalBB1487:                                   ; preds = %5465, %originalBB1487alteredBB
  %5474 = load i8, i8* %35, align 1, !dbg !1927
  %5475 = trunc i8 %5474 to i1, !dbg !1927
  %5476 = load i32, i32* @x.19
  %5477 = load i32, i32* @y.20
  %5478 = sub i32 %5476, 1
  %5479 = mul i32 %5476, %5478
  %5480 = urem i32 %5479, 2
  %5481 = icmp eq i32 %5480, 0
  %5482 = icmp slt i32 %5477, 10
  %5483 = or i1 %5481, %5482
  br i1 %5483, label %originalBBpart21489, label %originalBB1487alteredBB

originalBBpart21489:                              ; preds = %originalBB1487
  br i1 %5475, label %5622, label %5484, !dbg !1928

5484:                                             ; preds = %originalBBpart21489
  %5485 = load i32, i32* @x.19
  %5486 = load i32, i32* @y.20
  %5487 = sub i32 %5485, 1
  %5488 = mul i32 %5485, %5487
  %5489 = urem i32 %5488, 2
  %5490 = icmp eq i32 %5489, 0
  %5491 = icmp slt i32 %5486, 10
  %5492 = or i1 %5490, %5491
  br i1 %5492, label %originalBB1491, label %originalBB1491alteredBB

originalBB1491:                                   ; preds = %5484, %originalBB1491alteredBB
  %5493 = load i8, i8* %37, align 1, !dbg !1929
  %5494 = trunc i8 %5493 to i1, !dbg !1929
  %5495 = load i32, i32* @x.19
  %5496 = load i32, i32* @y.20
  %5497 = sub i32 %5495, 1
  %5498 = mul i32 %5495, %5497
  %5499 = urem i32 %5498, 2
  %5500 = icmp eq i32 %5499, 0
  %5501 = icmp slt i32 %5496, 10
  %5502 = or i1 %5500, %5501
  br i1 %5502, label %originalBBpart21493, label %originalBB1491alteredBB

originalBBpart21493:                              ; preds = %originalBB1491
  br i1 %5494, label %5503, label %5622, !dbg !1930

5503:                                             ; preds = %originalBBpart21493
  %5504 = load i32, i32* @x.19
  %5505 = load i32, i32* @y.20
  %5506 = sub i32 %5504, 1
  %5507 = mul i32 %5504, %5506
  %5508 = urem i32 %5507, 2
  %5509 = icmp eq i32 %5508, 0
  %5510 = icmp slt i32 %5505, 10
  %5511 = or i1 %5509, %5510
  br i1 %5511, label %originalBB1495, label %originalBB1495alteredBB

originalBB1495:                                   ; preds = %5503, %originalBB1495alteredBB
  %5512 = load i8, i8* %38, align 1, !dbg !1931
  %5513 = trunc i8 %5512 to i1, !dbg !1931
  %5514 = load i32, i32* @x.19
  %5515 = load i32, i32* @y.20
  %5516 = sub i32 %5514, 1
  %5517 = mul i32 %5514, %5516
  %5518 = urem i32 %5517, 2
  %5519 = icmp eq i32 %5518, 0
  %5520 = icmp slt i32 %5515, 10
  %5521 = or i1 %5519, %5520
  br i1 %5521, label %originalBBpart21497, label %originalBB1495alteredBB

originalBBpart21497:                              ; preds = %originalBB1495
  br i1 %5513, label %5522, label %5548, !dbg !1934

5522:                                             ; preds = %originalBBpart21497
  %5523 = load i32, i32* @x.19
  %5524 = load i32, i32* @y.20
  %5525 = sub i32 %5523, 1
  %5526 = mul i32 %5523, %5525
  %5527 = urem i32 %5526, 2
  %5528 = icmp eq i32 %5527, 0
  %5529 = icmp slt i32 %5524, 10
  %5530 = or i1 %5528, %5529
  br i1 %5530, label %originalBB1499, label %originalBB1499alteredBB

originalBB1499:                                   ; preds = %5522, %originalBB1499alteredBB
  %5531 = load i8*, i8** %19, align 8, !dbg !1935
  %5532 = load i64, i64* %30, align 8, !dbg !1936
  %5533 = load i8*, i8** %21, align 8, !dbg !1937
  %5534 = load i64, i64* %22, align 8, !dbg !1938
  %5535 = load i32, i32* %24, align 4, !dbg !1939
  %5536 = load i32*, i32** %25, align 8, !dbg !1940
  %5537 = load i8*, i8** %26, align 8, !dbg !1941
  %5538 = load i8*, i8** %27, align 8, !dbg !1942
  %5539 = call i64 @quotearg_buffer_restyled(i8* %5531, i64 %5532, i8* %5533, i64 %5534, i32 5, i32 %5535, i32* %5536, i8* %5537, i8* %5538), !dbg !1943
  store i64 %5539, i64* %18, align 8, !dbg !1944
  %5540 = load i32, i32* @x.19
  %5541 = load i32, i32* @y.20
  %5542 = sub i32 %5540, 1
  %5543 = mul i32 %5540, %5542
  %5544 = urem i32 %5543, 2
  %5545 = icmp eq i32 %5544, 0
  %5546 = icmp slt i32 %5541, 10
  %5547 = or i1 %5545, %5546
  br i1 %5547, label %originalBBpart21501, label %originalBB1499alteredBB

originalBBpart21501:                              ; preds = %originalBB1499
  br label %5936, !dbg !1944

5548:                                             ; preds = %originalBBpart21497
  %5549 = load i32, i32* @x.19
  %5550 = load i32, i32* @y.20
  %5551 = sub i32 %5549, 1
  %5552 = mul i32 %5549, %5551
  %5553 = urem i32 %5552, 2
  %5554 = icmp eq i32 %5553, 0
  %5555 = icmp slt i32 %5550, 10
  %5556 = or i1 %5554, %5555
  br i1 %5556, label %originalBB1503, label %originalBB1503alteredBB

originalBB1503:                                   ; preds = %5548, %originalBB1503alteredBB
  %5557 = load i64, i64* %20, align 8, !dbg !1945
  %5558 = icmp ne i64 %5557, 0, !dbg !1945
  %5559 = load i32, i32* @x.19
  %5560 = load i32, i32* @y.20
  %5561 = sub i32 %5559, 1
  %5562 = mul i32 %5559, %5561
  %5563 = urem i32 %5562, 2
  %5564 = icmp eq i32 %5563, 0
  %5565 = icmp slt i32 %5560, 10
  %5566 = or i1 %5564, %5565
  br i1 %5566, label %originalBBpart21505, label %originalBB1503alteredBB

originalBBpart21505:                              ; preds = %originalBB1503
  br i1 %5558, label %5604, label %5567, !dbg !1947

5567:                                             ; preds = %originalBBpart21505
  %5568 = load i32, i32* @x.19
  %5569 = load i32, i32* @y.20
  %5570 = sub i32 %5568, 1
  %5571 = mul i32 %5568, %5570
  %5572 = urem i32 %5571, 2
  %5573 = icmp eq i32 %5572, 0
  %5574 = icmp slt i32 %5569, 10
  %5575 = or i1 %5573, %5574
  br i1 %5575, label %originalBB1507, label %originalBB1507alteredBB

originalBB1507:                                   ; preds = %5567, %originalBB1507alteredBB
  %5576 = load i64, i64* %30, align 8, !dbg !1948
  %5577 = icmp ne i64 %5576, 0, !dbg !1948
  %5578 = load i32, i32* @x.19
  %5579 = load i32, i32* @y.20
  %5580 = sub i32 %5578, 1
  %5581 = mul i32 %5578, %5580
  %5582 = urem i32 %5581, 2
  %5583 = icmp eq i32 %5582, 0
  %5584 = icmp slt i32 %5579, 10
  %5585 = or i1 %5583, %5584
  br i1 %5585, label %originalBBpart21509, label %originalBB1507alteredBB

originalBBpart21509:                              ; preds = %originalBB1507
  br i1 %5577, label %5586, label %5604, !dbg !1949

5586:                                             ; preds = %originalBBpart21509
  %5587 = load i32, i32* @x.19
  %5588 = load i32, i32* @y.20
  %5589 = sub i32 %5587, 1
  %5590 = mul i32 %5587, %5589
  %5591 = urem i32 %5590, 2
  %5592 = icmp eq i32 %5591, 0
  %5593 = icmp slt i32 %5588, 10
  %5594 = or i1 %5592, %5593
  br i1 %5594, label %originalBB1511, label %originalBB1511alteredBB

originalBB1511:                                   ; preds = %5586, %originalBB1511alteredBB
  %5595 = load i64, i64* %30, align 8, !dbg !1950
  store i64 %5595, i64* %20, align 8, !dbg !1952
  store i64 0, i64* %29, align 8, !dbg !1953
  %5596 = load i32, i32* @x.19
  %5597 = load i32, i32* @y.20
  %5598 = sub i32 %5596, 1
  %5599 = mul i32 %5596, %5598
  %5600 = urem i32 %5599, 2
  %5601 = icmp eq i32 %5600, 0
  %5602 = icmp slt i32 %5597, 10
  %5603 = or i1 %5601, %5602
  br i1 %5603, label %originalBBpart21513, label %originalBB1511alteredBB

originalBBpart21513:                              ; preds = %originalBB1511
  br label %66, !dbg !1954

5604:                                             ; preds = %originalBBpart21509, %originalBBpart21505
  %5605 = load i32, i32* @x.19
  %5606 = load i32, i32* @y.20
  %5607 = sub i32 %5605, 1
  %5608 = mul i32 %5605, %5607
  %5609 = urem i32 %5608, 2
  %5610 = icmp eq i32 %5609, 0
  %5611 = icmp slt i32 %5606, 10
  %5612 = or i1 %5610, %5611
  br i1 %5612, label %originalBB1515, label %originalBB1515alteredBB

originalBB1515:                                   ; preds = %5604, %originalBB1515alteredBB
  %5613 = load i32, i32* @x.19
  %5614 = load i32, i32* @y.20
  %5615 = sub i32 %5613, 1
  %5616 = mul i32 %5613, %5615
  %5617 = urem i32 %5616, 2
  %5618 = icmp eq i32 %5617, 0
  %5619 = icmp slt i32 %5614, 10
  %5620 = or i1 %5618, %5619
  br i1 %5620, label %originalBBpart21517, label %originalBB1515alteredBB

originalBBpart21517:                              ; preds = %originalBB1515
  br label %5621

5621:                                             ; preds = %originalBBpart21517
  br label %5622, !dbg !1955

5622:                                             ; preds = %5621, %originalBBpart21493, %originalBBpart21489, %originalBBpart21485
  %5623 = load i32, i32* @x.19
  %5624 = load i32, i32* @y.20
  %5625 = sub i32 %5623, 1
  %5626 = mul i32 %5623, %5625
  %5627 = urem i32 %5626, 2
  %5628 = icmp eq i32 %5627, 0
  %5629 = icmp slt i32 %5624, 10
  %5630 = or i1 %5628, %5629
  br i1 %5630, label %originalBB1519, label %originalBB1519alteredBB

originalBB1519:                                   ; preds = %5622, %originalBB1519alteredBB
  %5631 = load i8*, i8** %31, align 8, !dbg !1956
  %5632 = icmp ne i8* %5631, null, !dbg !1956
  %5633 = load i32, i32* @x.19
  %5634 = load i32, i32* @y.20
  %5635 = sub i32 %5633, 1
  %5636 = mul i32 %5633, %5635
  %5637 = urem i32 %5636, 2
  %5638 = icmp eq i32 %5637, 0
  %5639 = icmp slt i32 %5634, 10
  %5640 = or i1 %5638, %5639
  br i1 %5640, label %originalBBpart21521, label %originalBB1519alteredBB

originalBBpart21521:                              ; preds = %originalBB1519
  br i1 %5632, label %5641, label %5828, !dbg !1958

5641:                                             ; preds = %originalBBpart21521
  %5642 = load i32, i32* @x.19
  %5643 = load i32, i32* @y.20
  %5644 = sub i32 %5642, 1
  %5645 = mul i32 %5642, %5644
  %5646 = urem i32 %5645, 2
  %5647 = icmp eq i32 %5646, 0
  %5648 = icmp slt i32 %5643, 10
  %5649 = or i1 %5647, %5648
  br i1 %5649, label %originalBB1523, label %originalBB1523alteredBB

originalBB1523:                                   ; preds = %5641, %originalBB1523alteredBB
  %5650 = load i8, i8* %35, align 1, !dbg !1959
  %5651 = trunc i8 %5650 to i1, !dbg !1959
  %5652 = load i32, i32* @x.19
  %5653 = load i32, i32* @y.20
  %5654 = sub i32 %5652, 1
  %5655 = mul i32 %5652, %5654
  %5656 = urem i32 %5655, 2
  %5657 = icmp eq i32 %5656, 0
  %5658 = icmp slt i32 %5653, 10
  %5659 = or i1 %5657, %5658
  br i1 %5659, label %originalBBpart21525, label %originalBB1523alteredBB

originalBBpart21525:                              ; preds = %originalBB1523
  br i1 %5651, label %5828, label %5660, !dbg !1960

5660:                                             ; preds = %originalBBpart21525
  %5661 = load i32, i32* @x.19
  %5662 = load i32, i32* @y.20
  %5663 = sub i32 %5661, 1
  %5664 = mul i32 %5661, %5663
  %5665 = urem i32 %5664, 2
  %5666 = icmp eq i32 %5665, 0
  %5667 = icmp slt i32 %5662, 10
  %5668 = or i1 %5666, %5667
  br i1 %5668, label %originalBB1527, label %originalBB1527alteredBB

originalBB1527:                                   ; preds = %5660, %originalBB1527alteredBB
  %5669 = load i32, i32* @x.19
  %5670 = load i32, i32* @y.20
  %5671 = sub i32 %5669, 1
  %5672 = mul i32 %5669, %5671
  %5673 = urem i32 %5672, 2
  %5674 = icmp eq i32 %5673, 0
  %5675 = icmp slt i32 %5670, 10
  %5676 = or i1 %5674, %5675
  br i1 %5676, label %originalBBpart21529, label %originalBB1527alteredBB

originalBBpart21529:                              ; preds = %originalBB1527
  br label %5677, !dbg !1961

5677:                                             ; preds = %originalBBpart21564, %originalBBpart21529
  %5678 = load i32, i32* @x.19
  %5679 = load i32, i32* @y.20
  %5680 = sub i32 %5678, 1
  %5681 = mul i32 %5678, %5680
  %5682 = urem i32 %5681, 2
  %5683 = icmp eq i32 %5682, 0
  %5684 = icmp slt i32 %5679, 10
  %5685 = or i1 %5683, %5684
  br i1 %5685, label %originalBB1531, label %originalBB1531alteredBB

originalBB1531:                                   ; preds = %5677, %originalBB1531alteredBB
  %5686 = load i8*, i8** %31, align 8, !dbg !1962
  %5687 = load i8, i8* %5686, align 1, !dbg !1965
  %5688 = icmp ne i8 %5687, 0, !dbg !1966
  %5689 = load i32, i32* @x.19
  %5690 = load i32, i32* @y.20
  %5691 = sub i32 %5689, 1
  %5692 = mul i32 %5689, %5691
  %5693 = urem i32 %5692, 2
  %5694 = icmp eq i32 %5693, 0
  %5695 = icmp slt i32 %5690, 10
  %5696 = or i1 %5694, %5695
  br i1 %5696, label %originalBBpart21533, label %originalBB1531alteredBB

originalBBpart21533:                              ; preds = %originalBB1531
  br i1 %5688, label %5697, label %5811, !dbg !1966

5697:                                             ; preds = %originalBBpart21533
  %5698 = load i32, i32* @x.19
  %5699 = load i32, i32* @y.20
  %5700 = sub i32 %5698, 1
  %5701 = mul i32 %5698, %5700
  %5702 = urem i32 %5701, 2
  %5703 = icmp eq i32 %5702, 0
  %5704 = icmp slt i32 %5699, 10
  %5705 = or i1 %5703, %5704
  br i1 %5705, label %originalBB1535, label %originalBB1535alteredBB

originalBB1535:                                   ; preds = %5697, %originalBB1535alteredBB
  %5706 = load i32, i32* @x.19
  %5707 = load i32, i32* @y.20
  %5708 = sub i32 %5706, 1
  %5709 = mul i32 %5706, %5708
  %5710 = urem i32 %5709, 2
  %5711 = icmp eq i32 %5710, 0
  %5712 = icmp slt i32 %5707, 10
  %5713 = or i1 %5711, %5712
  br i1 %5713, label %originalBBpart21537, label %originalBB1535alteredBB

originalBBpart21537:                              ; preds = %originalBB1535
  br label %5714, !dbg !1967

5714:                                             ; preds = %originalBBpart21537
  %5715 = load i32, i32* @x.19
  %5716 = load i32, i32* @y.20
  %5717 = sub i32 %5715, 1
  %5718 = mul i32 %5715, %5717
  %5719 = urem i32 %5718, 2
  %5720 = icmp eq i32 %5719, 0
  %5721 = icmp slt i32 %5716, 10
  %5722 = or i1 %5720, %5721
  br i1 %5722, label %originalBB1539, label %originalBB1539alteredBB

originalBB1539:                                   ; preds = %5714, %originalBB1539alteredBB
  %5723 = load i64, i64* %29, align 8, !dbg !1968
  %5724 = load i64, i64* %20, align 8, !dbg !1968
  %5725 = icmp ult i64 %5723, %5724, !dbg !1968
  %5726 = load i32, i32* @x.19
  %5727 = load i32, i32* @y.20
  %5728 = sub i32 %5726, 1
  %5729 = mul i32 %5726, %5728
  %5730 = urem i32 %5729, 2
  %5731 = icmp eq i32 %5730, 0
  %5732 = icmp slt i32 %5727, 10
  %5733 = or i1 %5731, %5732
  br i1 %5733, label %originalBBpart21541, label %originalBB1539alteredBB

originalBBpart21541:                              ; preds = %originalBB1539
  br i1 %5725, label %5734, label %5756, !dbg !1971

5734:                                             ; preds = %originalBBpart21541
  %5735 = load i32, i32* @x.19
  %5736 = load i32, i32* @y.20
  %5737 = sub i32 %5735, 1
  %5738 = mul i32 %5735, %5737
  %5739 = urem i32 %5738, 2
  %5740 = icmp eq i32 %5739, 0
  %5741 = icmp slt i32 %5736, 10
  %5742 = or i1 %5740, %5741
  br i1 %5742, label %originalBB1543, label %originalBB1543alteredBB

originalBB1543:                                   ; preds = %5734, %originalBB1543alteredBB
  %5743 = load i8*, i8** %31, align 8, !dbg !1968
  %5744 = load i8, i8* %5743, align 1, !dbg !1968
  %5745 = load i8*, i8** %19, align 8, !dbg !1968
  %5746 = load i64, i64* %29, align 8, !dbg !1968
  %5747 = getelementptr inbounds i8, i8* %5745, i64 %5746, !dbg !1968
  store i8 %5744, i8* %5747, align 1, !dbg !1968
  %5748 = load i32, i32* @x.19
  %5749 = load i32, i32* @y.20
  %5750 = sub i32 %5748, 1
  %5751 = mul i32 %5748, %5750
  %5752 = urem i32 %5751, 2
  %5753 = icmp eq i32 %5752, 0
  %5754 = icmp slt i32 %5749, 10
  %5755 = or i1 %5753, %5754
  br i1 %5755, label %originalBBpart21545, label %originalBB1543alteredBB

originalBBpart21545:                              ; preds = %originalBB1543
  br label %5756, !dbg !1968

5756:                                             ; preds = %originalBBpart21545, %originalBBpart21541
  %5757 = load i32, i32* @x.19
  %5758 = load i32, i32* @y.20
  %5759 = sub i32 %5757, 1
  %5760 = mul i32 %5757, %5759
  %5761 = urem i32 %5760, 2
  %5762 = icmp eq i32 %5761, 0
  %5763 = icmp slt i32 %5758, 10
  %5764 = or i1 %5762, %5763
  br i1 %5764, label %originalBB1547, label %originalBB1547alteredBB

originalBB1547:                                   ; preds = %5756, %originalBB1547alteredBB
  %5765 = load i64, i64* %29, align 8, !dbg !1971
  %5766 = add i64 %5765, 1, !dbg !1971
  store i64 %5766, i64* %29, align 8, !dbg !1971
  %5767 = load i32, i32* @x.19
  %5768 = load i32, i32* @y.20
  %5769 = sub i32 %5767, 1
  %5770 = mul i32 %5767, %5769
  %5771 = urem i32 %5770, 2
  %5772 = icmp eq i32 %5771, 0
  %5773 = icmp slt i32 %5768, 10
  %5774 = or i1 %5772, %5773
  br i1 %5774, label %originalBBpart21556, label %originalBB1547alteredBB

originalBBpart21556:                              ; preds = %originalBB1547
  br label %5775, !dbg !1971

5775:                                             ; preds = %originalBBpart21556
  %5776 = load i32, i32* @x.19
  %5777 = load i32, i32* @y.20
  %5778 = sub i32 %5776, 1
  %5779 = mul i32 %5776, %5778
  %5780 = urem i32 %5779, 2
  %5781 = icmp eq i32 %5780, 0
  %5782 = icmp slt i32 %5777, 10
  %5783 = or i1 %5781, %5782
  br i1 %5783, label %originalBB1558, label %originalBB1558alteredBB

originalBB1558:                                   ; preds = %5775, %originalBB1558alteredBB
  %5784 = load i32, i32* @x.19
  %5785 = load i32, i32* @y.20
  %5786 = sub i32 %5784, 1
  %5787 = mul i32 %5784, %5786
  %5788 = urem i32 %5787, 2
  %5789 = icmp eq i32 %5788, 0
  %5790 = icmp slt i32 %5785, 10
  %5791 = or i1 %5789, %5790
  br i1 %5791, label %originalBBpart21560, label %originalBB1558alteredBB

originalBBpart21560:                              ; preds = %originalBB1558
  br label %5792, !dbg !1971

5792:                                             ; preds = %originalBBpart21560
  %5793 = load i32, i32* @x.19
  %5794 = load i32, i32* @y.20
  %5795 = sub i32 %5793, 1
  %5796 = mul i32 %5793, %5795
  %5797 = urem i32 %5796, 2
  %5798 = icmp eq i32 %5797, 0
  %5799 = icmp slt i32 %5794, 10
  %5800 = or i1 %5798, %5799
  br i1 %5800, label %originalBB1562, label %originalBB1562alteredBB

originalBB1562:                                   ; preds = %5792, %originalBB1562alteredBB
  %5801 = load i8*, i8** %31, align 8, !dbg !1972
  %5802 = getelementptr inbounds i8, i8* %5801, i32 1, !dbg !1972
  store i8* %5802, i8** %31, align 8, !dbg !1972
  %5803 = load i32, i32* @x.19
  %5804 = load i32, i32* @y.20
  %5805 = sub i32 %5803, 1
  %5806 = mul i32 %5803, %5805
  %5807 = urem i32 %5806, 2
  %5808 = icmp eq i32 %5807, 0
  %5809 = icmp slt i32 %5804, 10
  %5810 = or i1 %5808, %5809
  br i1 %5810, label %originalBBpart21564, label %originalBB1562alteredBB

originalBBpart21564:                              ; preds = %originalBB1562
  br label %5677, !dbg !1973, !llvm.loop !1974

5811:                                             ; preds = %originalBBpart21533
  %5812 = load i32, i32* @x.19
  %5813 = load i32, i32* @y.20
  %5814 = sub i32 %5812, 1
  %5815 = mul i32 %5812, %5814
  %5816 = urem i32 %5815, 2
  %5817 = icmp eq i32 %5816, 0
  %5818 = icmp slt i32 %5813, 10
  %5819 = or i1 %5817, %5818
  br i1 %5819, label %originalBB1566, label %originalBB1566alteredBB

originalBB1566:                                   ; preds = %5811, %originalBB1566alteredBB
  %5820 = load i32, i32* @x.19
  %5821 = load i32, i32* @y.20
  %5822 = sub i32 %5820, 1
  %5823 = mul i32 %5820, %5822
  %5824 = urem i32 %5823, 2
  %5825 = icmp eq i32 %5824, 0
  %5826 = icmp slt i32 %5821, 10
  %5827 = or i1 %5825, %5826
  br i1 %5827, label %originalBBpart21568, label %originalBB1566alteredBB

originalBBpart21568:                              ; preds = %originalBB1566
  br label %5828, !dbg !1975

5828:                                             ; preds = %originalBBpart21568, %originalBBpart21525, %originalBBpart21521
  %5829 = load i64, i64* %29, align 8, !dbg !1976
  %5830 = load i64, i64* %20, align 8, !dbg !1978
  %5831 = icmp ult i64 %5829, %5830, !dbg !1979
  br i1 %5831, label %5832, label %5852, !dbg !1980

5832:                                             ; preds = %5828
  %5833 = load i32, i32* @x.19
  %5834 = load i32, i32* @y.20
  %5835 = sub i32 %5833, 1
  %5836 = mul i32 %5833, %5835
  %5837 = urem i32 %5836, 2
  %5838 = icmp eq i32 %5837, 0
  %5839 = icmp slt i32 %5834, 10
  %5840 = or i1 %5838, %5839
  br i1 %5840, label %originalBB1570, label %originalBB1570alteredBB

originalBB1570:                                   ; preds = %5832, %originalBB1570alteredBB
  %5841 = load i8*, i8** %19, align 8, !dbg !1981
  %5842 = load i64, i64* %29, align 8, !dbg !1982
  %5843 = getelementptr inbounds i8, i8* %5841, i64 %5842, !dbg !1981
  store i8 0, i8* %5843, align 1, !dbg !1983
  %5844 = load i32, i32* @x.19
  %5845 = load i32, i32* @y.20
  %5846 = sub i32 %5844, 1
  %5847 = mul i32 %5844, %5846
  %5848 = urem i32 %5847, 2
  %5849 = icmp eq i32 %5848, 0
  %5850 = icmp slt i32 %5845, 10
  %5851 = or i1 %5849, %5850
  br i1 %5851, label %originalBBpart21572, label %originalBB1570alteredBB

originalBBpart21572:                              ; preds = %originalBB1570
  br label %5852, !dbg !1981

5852:                                             ; preds = %originalBBpart21572, %5828
  %5853 = load i32, i32* @x.19
  %5854 = load i32, i32* @y.20
  %5855 = sub i32 %5853, 1
  %5856 = mul i32 %5853, %5855
  %5857 = urem i32 %5856, 2
  %5858 = icmp eq i32 %5857, 0
  %5859 = icmp slt i32 %5854, 10
  %5860 = or i1 %5858, %5859
  br i1 %5860, label %originalBB1574, label %originalBB1574alteredBB

originalBB1574:                                   ; preds = %5852, %originalBB1574alteredBB
  %5861 = load i64, i64* %29, align 8, !dbg !1984
  store i64 %5861, i64* %18, align 8, !dbg !1985
  %5862 = load i32, i32* @x.19
  %5863 = load i32, i32* @y.20
  %5864 = sub i32 %5862, 1
  %5865 = mul i32 %5862, %5864
  %5866 = urem i32 %5865, 2
  %5867 = icmp eq i32 %5866, 0
  %5868 = icmp slt i32 %5863, 10
  %5869 = or i1 %5867, %5868
  br i1 %5869, label %originalBBpart21576, label %originalBB1574alteredBB

originalBBpart21576:                              ; preds = %originalBB1574
  br label %5936, !dbg !1985

5870:                                             ; preds = %originalBBpart21481, %4700, %originalBBpart2955, %3320, %originalBBpart2704, %2600, %originalBBpart2628, %originalBBpart2604, %originalBBpart2462, %originalBBpart2411, %originalBBpart2230, %originalBBpart2214
  call void @llvm.dbg.label(metadata !1986), !dbg !1987
  %5871 = load i32, i32* @x.19
  %5872 = load i32, i32* @y.20
  %5873 = sub i32 %5871, 1
  %5874 = mul i32 %5871, %5873
  %5875 = urem i32 %5874, 2
  %5876 = icmp eq i32 %5875, 0
  %5877 = icmp slt i32 %5872, 10
  %5878 = or i1 %5876, %5877
  br i1 %5878, label %originalBB1578, label %originalBB1578alteredBB

originalBB1578:                                   ; preds = %5870, %originalBB1578alteredBB
  %5879 = load i32, i32* %23, align 4, !dbg !1988
  %5880 = icmp eq i32 %5879, 2, !dbg !1990
  %5881 = load i32, i32* @x.19
  %5882 = load i32, i32* @y.20
  %5883 = sub i32 %5881, 1
  %5884 = mul i32 %5881, %5883
  %5885 = urem i32 %5884, 2
  %5886 = icmp eq i32 %5885, 0
  %5887 = icmp slt i32 %5882, 10
  %5888 = or i1 %5886, %5887
  br i1 %5888, label %originalBBpart21580, label %originalBB1578alteredBB

originalBBpart21580:                              ; preds = %originalBB1578
  br i1 %5880, label %5889, label %5909, !dbg !1991

5889:                                             ; preds = %originalBBpart21580
  %5890 = load i32, i32* @x.19
  %5891 = load i32, i32* @y.20
  %5892 = sub i32 %5890, 1
  %5893 = mul i32 %5890, %5892
  %5894 = urem i32 %5893, 2
  %5895 = icmp eq i32 %5894, 0
  %5896 = icmp slt i32 %5891, 10
  %5897 = or i1 %5895, %5896
  br i1 %5897, label %originalBB1582, label %originalBB1582alteredBB

originalBB1582:                                   ; preds = %5889, %originalBB1582alteredBB
  %5898 = load i8, i8* %33, align 1, !dbg !1992
  %5899 = trunc i8 %5898 to i1, !dbg !1992
  %5900 = load i32, i32* @x.19
  %5901 = load i32, i32* @y.20
  %5902 = sub i32 %5900, 1
  %5903 = mul i32 %5900, %5902
  %5904 = urem i32 %5903, 2
  %5905 = icmp eq i32 %5904, 0
  %5906 = icmp slt i32 %5901, 10
  %5907 = or i1 %5905, %5906
  br i1 %5907, label %originalBBpart21584, label %originalBB1582alteredBB

originalBBpart21584:                              ; preds = %originalBB1582
  br i1 %5899, label %5908, label %5909, !dbg !1993

5908:                                             ; preds = %originalBBpart21584
  store i32 4, i32* %23, align 4, !dbg !1994
  br label %5909, !dbg !1995

5909:                                             ; preds = %5908, %originalBBpart21584, %originalBBpart21580
  %5910 = load i32, i32* @x.19
  %5911 = load i32, i32* @y.20
  %5912 = sub i32 %5910, 1
  %5913 = mul i32 %5910, %5912
  %5914 = urem i32 %5913, 2
  %5915 = icmp eq i32 %5914, 0
  %5916 = icmp slt i32 %5911, 10
  %5917 = or i1 %5915, %5916
  br i1 %5917, label %originalBB1586, label %originalBB1586alteredBB

originalBB1586:                                   ; preds = %5909, %originalBB1586alteredBB
  %5918 = load i8*, i8** %19, align 8, !dbg !1996
  %5919 = load i64, i64* %20, align 8, !dbg !1997
  %5920 = load i8*, i8** %21, align 8, !dbg !1998
  %5921 = load i64, i64* %22, align 8, !dbg !1999
  %5922 = load i32, i32* %23, align 4, !dbg !2000
  %5923 = load i32, i32* %24, align 4, !dbg !2001
  %5924 = and i32 %5923, -3, !dbg !2002
  %5925 = load i8*, i8** %26, align 8, !dbg !2003
  %5926 = load i8*, i8** %27, align 8, !dbg !2004
  %5927 = call i64 @quotearg_buffer_restyled(i8* %5918, i64 %5919, i8* %5920, i64 %5921, i32 %5922, i32 %5924, i32* null, i8* %5925, i8* %5926), !dbg !2005
  store i64 %5927, i64* %18, align 8, !dbg !2006
  %5928 = load i32, i32* @x.19
  %5929 = load i32, i32* @y.20
  %5930 = sub i32 %5928, 1
  %5931 = mul i32 %5928, %5930
  %5932 = urem i32 %5931, 2
  %5933 = icmp eq i32 %5932, 0
  %5934 = icmp slt i32 %5929, 10
  %5935 = or i1 %5933, %5934
  br i1 %5935, label %originalBBpart21596, label %originalBB1586alteredBB

originalBBpart21596:                              ; preds = %originalBB1586
  br label %5936, !dbg !2006

5936:                                             ; preds = %originalBBpart21596, %originalBBpart21576, %originalBBpart21501
  %5937 = load i32, i32* @x.19
  %5938 = load i32, i32* @y.20
  %5939 = sub i32 %5937, 1
  %5940 = mul i32 %5937, %5939
  %5941 = urem i32 %5940, 2
  %5942 = icmp eq i32 %5941, 0
  %5943 = icmp slt i32 %5938, 10
  %5944 = or i1 %5942, %5943
  br i1 %5944, label %originalBB1598, label %originalBB1598alteredBB

originalBB1598:                                   ; preds = %5936, %originalBB1598alteredBB
  %5945 = load i64, i64* %18, align 8, !dbg !2007
  %5946 = load i32, i32* @x.19
  %5947 = load i32, i32* @y.20
  %5948 = sub i32 %5946, 1
  %5949 = mul i32 %5946, %5948
  %5950 = urem i32 %5949, 2
  %5951 = icmp eq i32 %5950, 0
  %5952 = icmp slt i32 %5947, 10
  %5953 = or i1 %5951, %5952
  br i1 %5953, label %originalBBpart21600, label %originalBB1598alteredBB

originalBBpart21600:                              ; preds = %originalBB1598
  ret i64 %5945, !dbg !2007

originalBBalteredBB:                              ; preds = %originalBB, %9
  %5954 = alloca i64, align 8
  %5955 = alloca i8*, align 8
  %5956 = alloca i64, align 8
  %5957 = alloca i8*, align 8
  %5958 = alloca i64, align 8
  %5959 = alloca i32, align 4
  %5960 = alloca i32, align 4
  %5961 = alloca i32*, align 8
  %5962 = alloca i8*, align 8
  %5963 = alloca i8*, align 8
  %5964 = alloca i64, align 8
  %5965 = alloca i64, align 8
  %5966 = alloca i64, align 8
  %5967 = alloca i8*, align 8
  %5968 = alloca i64, align 8
  %5969 = alloca i8, align 1
  %5970 = alloca i8, align 1
  %5971 = alloca i8, align 1
  %5972 = alloca i8, align 1
  %5973 = alloca i8, align 1
  %5974 = alloca i8, align 1
  %5975 = alloca i8, align 1
  %5976 = alloca i8, align 1
  %5977 = alloca i8, align 1
  %5978 = alloca i8, align 1
  %5979 = alloca i8, align 1
  %5980 = alloca i64, align 8
  %5981 = alloca i8, align 1
  %5982 = alloca %struct.__mbstate_t, align 4
  %5983 = alloca i32, align 4
  %5984 = alloca i64, align 8
  %5985 = alloca i64, align 8
  %5986 = alloca i64, align 8
  store i8* %0, i8** %5955, align 8
  call void @llvm.dbg.declare(metadata i8** %5955, metadata !2008, metadata !DIExpression()), !dbg !1128
  store i64 %1, i64* %5956, align 8
  call void @llvm.dbg.declare(metadata i64* %5956, metadata !2040, metadata !DIExpression()), !dbg !1130
  store i8* %2, i8** %5957, align 8
  call void @llvm.dbg.declare(metadata i8** %5957, metadata !2041, metadata !DIExpression()), !dbg !1132
  store i64 %3, i64* %5958, align 8
  call void @llvm.dbg.declare(metadata i64* %5958, metadata !2042, metadata !DIExpression()), !dbg !1134
  store i32 %4, i32* %5959, align 4
  call void @llvm.dbg.declare(metadata i32* %5959, metadata !2043, metadata !DIExpression()), !dbg !1136
  store i32 %5, i32* %5960, align 4
  call void @llvm.dbg.declare(metadata i32* %5960, metadata !2044, metadata !DIExpression()), !dbg !1138
  store i32* %6, i32** %5961, align 8
  call void @llvm.dbg.declare(metadata i32** %5961, metadata !2045, metadata !DIExpression()), !dbg !1140
  store i8* %7, i8** %5962, align 8
  call void @llvm.dbg.declare(metadata i8** %5962, metadata !2046, metadata !DIExpression()), !dbg !1142
  store i8* %8, i8** %5963, align 8
  call void @llvm.dbg.declare(metadata i8** %5963, metadata !2047, metadata !DIExpression()), !dbg !1144
  call void @llvm.dbg.declare(metadata i64* %5964, metadata !2048, metadata !DIExpression()), !dbg !1146
  call void @llvm.dbg.declare(metadata i64* %5965, metadata !2049, metadata !DIExpression()), !dbg !1148
  store i64 0, i64* %5965, align 8, !dbg !1148
  call void @llvm.dbg.declare(metadata i64* %5966, metadata !2050, metadata !DIExpression()), !dbg !1150
  store i64 0, i64* %5966, align 8, !dbg !1150
  call void @llvm.dbg.declare(metadata i8** %5967, metadata !2051, metadata !DIExpression()), !dbg !1152
  store i8* null, i8** %5967, align 8, !dbg !1152
  call void @llvm.dbg.declare(metadata i64* %5968, metadata !2052, metadata !DIExpression()), !dbg !1154
  store i64 0, i64* %5968, align 8, !dbg !1154
  call void @llvm.dbg.declare(metadata i8* %5969, metadata !2053, metadata !DIExpression()), !dbg !1156
  store i8 0, i8* %5969, align 1, !dbg !1156
  call void @llvm.dbg.declare(metadata i8* %5970, metadata !2054, metadata !DIExpression()), !dbg !1158
  %5987 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1159
  %5988 = icmp eq i64 %5987, 1, !dbg !1160
  %5989 = zext i1 %5988 to i8, !dbg !1158
  store i8 %5989, i8* %5970, align 1, !dbg !1158
  call void @llvm.dbg.declare(metadata i8* %5971, metadata !2055, metadata !DIExpression()), !dbg !1162
  %5990 = load i32, i32* %5960, align 4, !dbg !1163
  %_ = sub i32 0, %5990
  %gen = add i32 %_, 2
  %_1 = sub i32 %5990, 2
  %gen2 = mul i32 %_1, 2
  %_3 = sub i32 %5990, 2
  %gen4 = mul i32 %_3, 2
  %_5 = sub i32 0, %5990
  %gen6 = add i32 %_5, 2
  %5991 = and i32 %5990, 2, !dbg !1164
  %5992 = icmp ne i32 %5991, 0, !dbg !1165
  %5993 = zext i1 %5992 to i8, !dbg !1162
  store i8 %5993, i8* %5971, align 1, !dbg !1162
  call void @llvm.dbg.declare(metadata i8* %5972, metadata !2056, metadata !DIExpression()), !dbg !1167
  store i8 0, i8* %5972, align 1, !dbg !1167
  call void @llvm.dbg.declare(metadata i8* %5973, metadata !2057, metadata !DIExpression()), !dbg !1169
  store i8 0, i8* %5973, align 1, !dbg !1169
  call void @llvm.dbg.declare(metadata i8* %5974, metadata !2058, metadata !DIExpression()), !dbg !1171
  store i8 1, i8* %5974, align 1, !dbg !1171
  br label %originalBB

originalBB7alteredBB:                             ; preds = %originalBB7, %66
  %5994 = load i32, i32* %23, align 4, !dbg !1175
  br label %originalBB7

originalBB11alteredBB:                            ; preds = %originalBB11, %84
  store i32 5, i32* %23, align 4, !dbg !1177
  store i8 1, i8* %35, align 1, !dbg !1179
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %101
  %5995 = load i8, i8* %35, align 1, !dbg !1181
  %5996 = trunc i8 %5995 to i1, !dbg !1181
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %121
  %5997 = load i64, i64* %29, align 8, !dbg !1185
  %5998 = load i64, i64* %20, align 8, !dbg !1185
  %5999 = icmp ult i64 %5997, %5998, !dbg !1185
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %148
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %165
  store i8 1, i8* %33, align 1, !dbg !1189
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8** %31, align 8, !dbg !1190
  store i64 1, i64* %32, align 8, !dbg !1191
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %182
  store i8 1, i8* %33, align 1, !dbg !1193
  store i8 0, i8* %35, align 1, !dbg !1194
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %199
  %6000 = load i32, i32* %23, align 4, !dbg !1196
  %6001 = icmp ne i32 %6000, 10, !dbg !1199
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %218
  %6002 = load i32, i32* %23, align 4, !dbg !1201
  %6003 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.63, i64 0, i64 0), i32 %6002), !dbg !1203
  store i8* %6003, i8** %26, align 8, !dbg !1204
  %6004 = load i32, i32* %23, align 4, !dbg !1205
  %6005 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i32 %6004), !dbg !1206
  store i8* %6005, i8** %27, align 8, !dbg !1207
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %239
  %6006 = load i8, i8* %35, align 1, !dbg !1209
  %6007 = trunc i8 %6006 to i1, !dbg !1209
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %264
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %281
  %6008 = load i64, i64* %29, align 8, !dbg !1221
  %6009 = load i64, i64* %20, align 8, !dbg !1221
  %6010 = icmp ult i64 %6008, %6009, !dbg !1221
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %301
  %6011 = load i8*, i8** %31, align 8, !dbg !1221
  %6012 = load i8, i8* %6011, align 1, !dbg !1221
  %6013 = load i8*, i8** %19, align 8, !dbg !1221
  %6014 = load i64, i64* %29, align 8, !dbg !1221
  %6015 = getelementptr inbounds i8, i8* %6013, i64 %6014, !dbg !1221
  store i8 %6012, i8* %6015, align 1, !dbg !1221
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %323
  %6016 = load i64, i64* %29, align 8, !dbg !1224
  %_60 = sub i64 0, %6016
  %gen61 = add i64 %_60, 1
  %_62 = shl i64 %6016, 1
  %_63 = shl i64 %6016, 1
  %_64 = sub i64 0, %6016
  %gen65 = add i64 %_64, 1
  %_66 = sub i64 %6016, 1
  %gen67 = mul i64 %_66, 1
  %_68 = sub i64 0, %6016
  %gen69 = add i64 %_68, 1
  %6017 = add i64 %6016, 1, !dbg !1224
  store i64 %6017, i64* %29, align 8, !dbg !1224
  br label %originalBB59

originalBB73alteredBB:                            ; preds = %originalBB73, %342
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %359
  %6018 = load i8*, i8** %31, align 8, !dbg !1225
  %6019 = getelementptr inbounds i8, i8* %6018, i32 1, !dbg !1225
  store i8* %6019, i8** %31, align 8, !dbg !1225
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %378
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %395
  store i8 1, i8* %33, align 1, !dbg !1229
  %6020 = load i8*, i8** %27, align 8, !dbg !1230
  store i8* %6020, i8** %31, align 8, !dbg !1231
  %6021 = load i8*, i8** %31, align 8, !dbg !1232
  %6022 = call i64 @strlen(i8* %6021) #13, !dbg !1233
  store i64 %6022, i64* %32, align 8, !dbg !1234
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %415
  store i8 1, i8* %33, align 1, !dbg !1236
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %432
  store i8 1, i8* %35, align 1, !dbg !1238
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %452
  store i8 1, i8* %33, align 1, !dbg !1243
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %469
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %486
  store i32 2, i32* %23, align 4, !dbg !1246
  %6023 = load i8, i8* %35, align 1, !dbg !1247
  %6024 = trunc i8 %6023 to i1, !dbg !1247
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %505
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %522
  %6025 = load i64, i64* %29, align 8, !dbg !1251
  %6026 = load i64, i64* %20, align 8, !dbg !1251
  %6027 = icmp ult i64 %6025, %6026, !dbg !1251
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %546
  %6028 = load i64, i64* %29, align 8, !dbg !1254
  %_118 = shl i64 %6028, 1
  %_119 = sub i64 %6028, 1
  %gen120 = mul i64 %_119, 1
  %_121 = sub i64 0, %6028
  %gen122 = add i64 %_121, 1
  %_123 = shl i64 %6028, 1
  %_124 = sub i64 0, %6028
  %gen125 = add i64 %_124, 1
  %_126 = shl i64 %6028, 1
  %_127 = sub i64 0, %6028
  %gen128 = add i64 %_127, 1
  %6029 = add i64 %6028, 1, !dbg !1254
  store i64 %6029, i64* %29, align 8, !dbg !1254
  br label %originalBB117

originalBB132alteredBB:                           ; preds = %originalBB132, %566
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i8** %31, align 8, !dbg !1255
  store i64 1, i64* %32, align 8, !dbg !1256
  br label %originalBB132

originalBB136alteredBB:                           ; preds = %originalBB136, %583
  store i8 0, i8* %35, align 1, !dbg !1258
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %600
  call void @abort() #12, !dbg !1260
  br label %originalBB140

originalBB144alteredBB:                           ; preds = %originalBB144, %617
  store i64 0, i64* %28, align 8, !dbg !1261
  br label %originalBB144

originalBB148alteredBB:                           ; preds = %originalBB148, %634
  %6030 = load i64, i64* %22, align 8, !dbg !1264
  %6031 = icmp eq i64 %6030, -1, !dbg !1266
  br label %originalBB148

originalBB152alteredBB:                           ; preds = %originalBB152, %666
  %6032 = icmp ne i32 %667, 0, !dbg !1273
  %_153 = sub i1 %6032, true
  %gen154 = mul i1 %_153, true
  %_155 = sub i1 false, %6032
  %gen156 = add i1 %_155, true
  %_157 = shl i1 %6032, true
  %_158 = sub i1 %6032, true
  %gen159 = mul i1 %_158, true
  %_160 = sub i1 %6032, true
  %gen161 = mul i1 %_160, true
  %_162 = sub i1 false, %6032
  %gen163 = add i1 %_162, true
  %6033 = xor i1 %6032, true, !dbg !1273
  br label %originalBB152

originalBB167alteredBB:                           ; preds = %originalBB167, %686
  store i8 0, i8* %41, align 1, !dbg !1281
  call void @llvm.dbg.declare(metadata !11, metadata !2059, metadata !DIExpression()), !dbg !1283
  store i8 0, i8* %42, align 1, !dbg !1283
  call void @llvm.dbg.declare(metadata !11, metadata !2094, metadata !DIExpression()), !dbg !1285
  store i8 0, i8* %43, align 1, !dbg !1285
  %6034 = load i8, i8* %33, align 1, !dbg !1286
  %6035 = trunc i8 %6034 to i1, !dbg !1286
  br label %originalBB167

originalBB171alteredBB:                           ; preds = %originalBB171, %705
  %6036 = load i32, i32* %23, align 4, !dbg !1289
  %6037 = icmp ne i32 %6036, 2, !dbg !1290
  br label %originalBB171

originalBB175alteredBB:                           ; preds = %originalBB175, %724
  %6038 = load i64, i64* %32, align 8, !dbg !1292
  %6039 = icmp ne i64 %6038, 0, !dbg !1292
  br label %originalBB175

originalBB179alteredBB:                           ; preds = %originalBB179, %743
  %6040 = load i64, i64* %28, align 8, !dbg !1294
  %6041 = load i64, i64* %32, align 8, !dbg !1295
  %_180 = sub i64 %6040, %6041
  %gen181 = mul i64 %_180, %6041
  %_182 = shl i64 %6040, %6041
  %_183 = sub i64 0, %6040
  %gen184 = add i64 %_183, %6041
  %_185 = shl i64 %6040, %6041
  %_186 = shl i64 %6040, %6041
  %_187 = sub i64 0, %6040
  %gen188 = add i64 %_187, %6041
  %6042 = add i64 %6040, %6041, !dbg !1296
  %6043 = load i64, i64* %22, align 8, !dbg !1297
  %6044 = icmp eq i64 %6043, -1, !dbg !1298
  br label %originalBB179

originalBB192alteredBB:                           ; preds = %originalBB192, %765
  %6045 = load i64, i64* %32, align 8, !dbg !1300
  %6046 = icmp ult i64 1, %6045, !dbg !1301
  br label %originalBB192

originalBB196alteredBB:                           ; preds = %originalBB196, %784
  %6047 = load i8*, i8** %21, align 8, !dbg !1302
  %6048 = call i64 @strlen(i8* %6047) #13, !dbg !1303
  store i64 %6048, i64* %22, align 8, !dbg !1304
  br label %originalBB196

originalBB200alteredBB:                           ; preds = %originalBB200, %805
  %6049 = icmp ule i64 %754, %806, !dbg !1306
  br label %originalBB200

originalBB204alteredBB:                           ; preds = %originalBB204, %824
  %6050 = load i8*, i8** %21, align 8, !dbg !1308
  %6051 = load i64, i64* %28, align 8, !dbg !1309
  %6052 = getelementptr inbounds i8, i8* %6050, i64 %6051, !dbg !1310
  %6053 = load i8*, i8** %31, align 8, !dbg !1311
  %6054 = load i64, i64* %32, align 8, !dbg !1312
  %6055 = call i32 @memcmp(i8* %6052, i8* %6053, i64 %6054) #13, !dbg !1313
  %6056 = icmp eq i32 %6055, 0, !dbg !1314
  br label %originalBB204

originalBB208alteredBB:                           ; preds = %originalBB208, %848
  %6057 = load i8, i8* %35, align 1, !dbg !1316
  %6058 = trunc i8 %6057 to i1, !dbg !1316
  br label %originalBB208

originalBB212alteredBB:                           ; preds = %originalBB212, %867
  br label %originalBB212

originalBB216alteredBB:                           ; preds = %originalBB216, %885
  %6059 = load i8*, i8** %21, align 8, !dbg !1323
  %6060 = load i64, i64* %28, align 8, !dbg !1324
  %6061 = getelementptr inbounds i8, i8* %6059, i64 %6060, !dbg !1323
  %6062 = load i8, i8* %6061, align 1, !dbg !1323
  store i8 %6062, i8* %39, align 1, !dbg !1325
  %6063 = load i8, i8* %39, align 1, !dbg !1326
  %6064 = zext i8 %6063 to i32, !dbg !1326
  br label %originalBB216

originalBB220alteredBB:                           ; preds = %originalBB220, %908
  %6065 = load i8, i8* %33, align 1, !dbg !1328
  %6066 = trunc i8 %6065 to i1, !dbg !1328
  br label %originalBB220

originalBB224alteredBB:                           ; preds = %originalBB224, %927
  br label %originalBB224

originalBB228alteredBB:                           ; preds = %originalBB228, %947
  br label %originalBB228

originalBB232alteredBB:                           ; preds = %originalBB232, %967
  %6067 = load i8, i8* %36, align 1, !dbg !1338
  %6068 = trunc i8 %6067 to i1, !dbg !1338
  br label %originalBB232

originalBB236alteredBB:                           ; preds = %originalBB236, %986
  br label %originalBB236

originalBB240alteredBB:                           ; preds = %originalBB240, %1003
  %6069 = load i64, i64* %29, align 8, !dbg !1342
  %6070 = load i64, i64* %20, align 8, !dbg !1342
  %6071 = icmp ult i64 %6069, %6070, !dbg !1342
  br label %originalBB240

originalBB244alteredBB:                           ; preds = %originalBB244, %1027
  %6072 = load i64, i64* %29, align 8, !dbg !1345
  %_245 = sub i64 0, %6072
  %gen246 = add i64 %_245, 1
  %_247 = sub i64 %6072, 1
  %gen248 = mul i64 %_247, 1
  %_249 = shl i64 %6072, 1
  %_250 = sub i64 0, %6072
  %gen251 = add i64 %_250, 1
  %_252 = sub i64 0, %6072
  %gen253 = add i64 %_252, 1
  %_254 = sub i64 %6072, 1
  %gen255 = mul i64 %_254, 1
  %_256 = shl i64 %6072, 1
  %_257 = sub i64 0, %6072
  %gen258 = add i64 %_257, 1
  %_259 = sub i64 0, %6072
  %gen260 = add i64 %_259, 1
  %6073 = add i64 %6072, 1, !dbg !1345
  store i64 %6073, i64* %29, align 8, !dbg !1345
  br label %originalBB244

originalBB264alteredBB:                           ; preds = %originalBB264, %1051
  %6074 = load i8*, i8** %19, align 8, !dbg !1346
  %6075 = load i64, i64* %29, align 8, !dbg !1346
  %6076 = getelementptr inbounds i8, i8* %6074, i64 %6075, !dbg !1346
  store i8 36, i8* %6076, align 1, !dbg !1346
  br label %originalBB264

originalBB268alteredBB:                           ; preds = %originalBB268, %1071
  %6077 = load i64, i64* %29, align 8, !dbg !1349
  %_269 = sub i64 0, %6077
  %gen270 = add i64 %_269, 1
  %_271 = sub i64 0, %6077
  %gen272 = add i64 %_271, 1
  %_273 = shl i64 %6077, 1
  %_274 = sub i64 %6077, 1
  %gen275 = mul i64 %_274, 1
  %_276 = sub i64 0, %6077
  %gen277 = add i64 %_276, 1
  %_278 = shl i64 %6077, 1
  %_279 = shl i64 %6077, 1
  %_280 = sub i64 %6077, 1
  %gen281 = mul i64 %_280, 1
  %6078 = add i64 %6077, 1, !dbg !1349
  store i64 %6078, i64* %29, align 8, !dbg !1349
  br label %originalBB268

originalBB285alteredBB:                           ; preds = %originalBB285, %1091
  %6079 = load i64, i64* %29, align 8, !dbg !1350
  %6080 = load i64, i64* %20, align 8, !dbg !1350
  %6081 = icmp ult i64 %6079, %6080, !dbg !1350
  br label %originalBB285

originalBB289alteredBB:                           ; preds = %originalBB289, %1111
  %6082 = load i8*, i8** %19, align 8, !dbg !1350
  %6083 = load i64, i64* %29, align 8, !dbg !1350
  %6084 = getelementptr inbounds i8, i8* %6082, i64 %6083, !dbg !1350
  store i8 39, i8* %6084, align 1, !dbg !1350
  br label %originalBB289

originalBB293alteredBB:                           ; preds = %originalBB293, %1134
  store i8 1, i8* %36, align 1, !dbg !1340
  br label %originalBB293

originalBB297alteredBB:                           ; preds = %originalBB297, %1151
  br label %originalBB297

originalBB301alteredBB:                           ; preds = %originalBB301, %1168
  %6085 = load i64, i64* %29, align 8, !dbg !1354
  %6086 = load i64, i64* %20, align 8, !dbg !1354
  %6087 = icmp ult i64 %6085, %6086, !dbg !1354
  br label %originalBB301

originalBB305alteredBB:                           ; preds = %originalBB305, %1188
  %6088 = load i8*, i8** %19, align 8, !dbg !1354
  %6089 = load i64, i64* %29, align 8, !dbg !1354
  %6090 = getelementptr inbounds i8, i8* %6088, i64 %6089, !dbg !1354
  store i8 92, i8* %6090, align 1, !dbg !1354
  br label %originalBB305

originalBB309alteredBB:                           ; preds = %originalBB309, %1208
  %6091 = load i64, i64* %29, align 8, !dbg !1357
  %_310 = shl i64 %6091, 1
  %6092 = add i64 %6091, 1, !dbg !1357
  store i64 %6092, i64* %29, align 8, !dbg !1357
  br label %originalBB309

originalBB314alteredBB:                           ; preds = %originalBB314, %1227
  br label %originalBB314

originalBB318alteredBB:                           ; preds = %originalBB318, %1244
  %6093 = load i32, i32* %23, align 4, !dbg !1358
  %6094 = icmp ne i32 %6093, 2, !dbg !1360
  br label %originalBB318

originalBB322alteredBB:                           ; preds = %originalBB322, %1263
  %6095 = load i64, i64* %28, align 8, !dbg !1362
  %_323 = sub i64 0, %6095
  %gen324 = add i64 %_323, 1
  %_325 = sub i64 %6095, 1
  %gen326 = mul i64 %_325, 1
  %_327 = sub i64 0, %6095
  %gen328 = add i64 %_327, 1
  %6096 = add i64 %6095, 1, !dbg !1363
  %6097 = load i64, i64* %22, align 8, !dbg !1364
  %6098 = icmp ult i64 %6096, %6097, !dbg !1365
  br label %originalBB322

originalBB332alteredBB:                           ; preds = %originalBB332, %1284
  %6099 = load i8*, i8** %21, align 8, !dbg !1367
  %6100 = load i64, i64* %28, align 8, !dbg !1368
  %_333 = shl i64 %6100, 1
  %_334 = sub i64 0, %6100
  %gen335 = add i64 %_334, 1
  %6101 = add i64 %6100, 1, !dbg !1369
  %6102 = getelementptr inbounds i8, i8* %6099, i64 %6101, !dbg !1367
  %6103 = load i8, i8* %6102, align 1, !dbg !1367
  %6104 = sext i8 %6103 to i32, !dbg !1367
  %6105 = icmp sle i32 48, %6104, !dbg !1370
  br label %originalBB332

originalBB339alteredBB:                           ; preds = %originalBB339, %1308
  %6106 = load i8*, i8** %21, align 8, !dbg !1372
  %6107 = load i64, i64* %28, align 8, !dbg !1373
  %_340 = sub i64 0, %6107
  %gen341 = add i64 %_340, 1
  %6108 = add i64 %6107, 1, !dbg !1374
  %6109 = getelementptr inbounds i8, i8* %6106, i64 %6108, !dbg !1372
  %6110 = load i8, i8* %6109, align 1, !dbg !1372
  %6111 = sext i8 %6110 to i32, !dbg !1372
  %6112 = icmp sle i32 %6111, 57, !dbg !1375
  br label %originalBB339

originalBB345alteredBB:                           ; preds = %originalBB345, %1332
  br label %originalBB345

originalBB349alteredBB:                           ; preds = %originalBB349, %1349
  %6113 = load i64, i64* %29, align 8, !dbg !1379
  %6114 = load i64, i64* %20, align 8, !dbg !1379
  %6115 = icmp ult i64 %6113, %6114, !dbg !1379
  br label %originalBB349

originalBB353alteredBB:                           ; preds = %originalBB353, %1369
  %6116 = load i8*, i8** %19, align 8, !dbg !1379
  %6117 = load i64, i64* %29, align 8, !dbg !1379
  %6118 = getelementptr inbounds i8, i8* %6116, i64 %6117, !dbg !1379
  store i8 48, i8* %6118, align 1, !dbg !1379
  br label %originalBB353

originalBB357alteredBB:                           ; preds = %originalBB357, %1389
  %6119 = load i64, i64* %29, align 8, !dbg !1382
  %_358 = sub i64 0, %6119
  %gen359 = add i64 %_358, 1
  %_360 = sub i64 0, %6119
  %gen361 = add i64 %_360, 1
  %_362 = sub i64 %6119, 1
  %gen363 = mul i64 %_362, 1
  %_364 = sub i64 0, %6119
  %gen365 = add i64 %_364, 1
  %_366 = sub i64 0, %6119
  %gen367 = add i64 %_366, 1
  %6120 = add i64 %6119, 1, !dbg !1382
  store i64 %6120, i64* %29, align 8, !dbg !1382
  br label %originalBB357

originalBB371alteredBB:                           ; preds = %originalBB371, %1408
  br label %originalBB371

originalBB375alteredBB:                           ; preds = %originalBB375, %1425
  %6121 = load i64, i64* %29, align 8, !dbg !1384
  %6122 = load i64, i64* %20, align 8, !dbg !1384
  %6123 = icmp ult i64 %6121, %6122, !dbg !1384
  br label %originalBB375

originalBB379alteredBB:                           ; preds = %originalBB379, %1445
  %6124 = load i8*, i8** %19, align 8, !dbg !1384
  %6125 = load i64, i64* %29, align 8, !dbg !1384
  %6126 = getelementptr inbounds i8, i8* %6124, i64 %6125, !dbg !1384
  store i8 48, i8* %6126, align 1, !dbg !1384
  br label %originalBB379

originalBB383alteredBB:                           ; preds = %originalBB383, %1469
  store i8 48, i8* %39, align 1, !dbg !1389
  br label %originalBB383

originalBB387alteredBB:                           ; preds = %originalBB387, %1486
  %6127 = load i32, i32* %24, align 4, !dbg !1391
  %_388 = shl i32 %6127, 1
  %_389 = sub i32 %6127, 1
  %gen390 = mul i32 %_389, 1
  %_391 = shl i32 %6127, 1
  %_392 = sub i32 %6127, 1
  %gen393 = mul i32 %_392, 1
  %6128 = and i32 %6127, 1, !dbg !1393
  %6129 = icmp ne i32 %6128, 0, !dbg !1393
  br label %originalBB387

originalBB397alteredBB:                           ; preds = %originalBB397, %1506
  br label %originalBB397

originalBB401alteredBB:                           ; preds = %originalBB401, %1523
  br label %originalBB401

originalBB405alteredBB:                           ; preds = %originalBB405, %1541
  %6130 = load i32, i32* %23, align 4, !dbg !1397
  br label %originalBB405

originalBB409alteredBB:                           ; preds = %originalBB409, %1562
  br label %originalBB409

originalBB413alteredBB:                           ; preds = %originalBB413, %1579
  br label %originalBB413

originalBB417alteredBB:                           ; preds = %originalBB417, %1596
  %6131 = load i32, i32* %24, align 4, !dbg !1405
  %_418 = sub i32 0, %6131
  %gen419 = add i32 %_418, 4
  %_420 = sub i32 0, %6131
  %gen421 = add i32 %_420, 4
  %_422 = sub i32 0, %6131
  %gen423 = add i32 %_422, 4
  %_424 = sub i32 0, %6131
  %gen425 = add i32 %_424, 4
  %_426 = sub i32 0, %6131
  %gen427 = add i32 %_426, 4
  %_428 = sub i32 0, %6131
  %gen429 = add i32 %_428, 4
  %_430 = shl i32 %6131, 4
  %6132 = and i32 %6131, 4, !dbg !1407
  %6133 = icmp ne i32 %6132, 0, !dbg !1407
  br label %originalBB417

originalBB434alteredBB:                           ; preds = %originalBB434, %1616
  %6134 = load i64, i64* %28, align 8, !dbg !1409
  %_435 = shl i64 %6134, 2
  %6135 = add i64 %6134, 2, !dbg !1410
  %6136 = load i64, i64* %22, align 8, !dbg !1411
  %6137 = icmp ult i64 %6135, %6136, !dbg !1412
  br label %originalBB434

originalBB439alteredBB:                           ; preds = %originalBB439, %1637
  %6138 = load i8*, i8** %21, align 8, !dbg !1414
  %6139 = load i64, i64* %28, align 8, !dbg !1415
  %_440 = sub i64 %6139, 1
  %gen441 = mul i64 %_440, 1
  %_442 = sub i64 0, %6139
  %gen443 = add i64 %_442, 1
  %_444 = shl i64 %6139, 1
  %_445 = shl i64 %6139, 1
  %6140 = add i64 %6139, 1, !dbg !1416
  %6141 = getelementptr inbounds i8, i8* %6138, i64 %6140, !dbg !1414
  %6142 = load i8, i8* %6141, align 1, !dbg !1414
  %6143 = sext i8 %6142 to i32, !dbg !1414
  %6144 = icmp eq i32 %6143, 63, !dbg !1417
  br label %originalBB439

originalBB449alteredBB:                           ; preds = %originalBB449, %1661
  %6145 = load i8*, i8** %21, align 8, !dbg !1419
  %6146 = load i64, i64* %28, align 8, !dbg !1420
  %_450 = shl i64 %6146, 2
  %_451 = shl i64 %6146, 2
  %_452 = shl i64 %6146, 2
  %6147 = add i64 %6146, 2, !dbg !1421
  %6148 = getelementptr inbounds i8, i8* %6145, i64 %6147, !dbg !1419
  %6149 = load i8, i8* %6148, align 1, !dbg !1419
  %6150 = sext i8 %6149 to i32, !dbg !1419
  br label %originalBB449

originalBB456alteredBB:                           ; preds = %originalBB456, %1684
  %6151 = load i8, i8* %35, align 1, !dbg !1423
  %6152 = trunc i8 %6151 to i1, !dbg !1423
  br label %originalBB456

originalBB460alteredBB:                           ; preds = %originalBB460, %1703
  br label %originalBB460

originalBB464alteredBB:                           ; preds = %originalBB464, %1720
  %6153 = load i8*, i8** %21, align 8, !dbg !1428
  %6154 = load i64, i64* %28, align 8, !dbg !1429
  %_465 = sub i64 0, %6154
  %gen466 = add i64 %_465, 2
  %_467 = sub i64 0, %6154
  %gen468 = add i64 %_467, 2
  %_469 = sub i64 0, %6154
  %gen470 = add i64 %_469, 2
  %_471 = sub i64 0, %6154
  %gen472 = add i64 %_471, 2
  %_473 = sub i64 %6154, 2
  %gen474 = mul i64 %_473, 2
  %6155 = add i64 %6154, 2, !dbg !1430
  %6156 = getelementptr inbounds i8, i8* %6153, i64 %6155, !dbg !1428
  %6157 = load i8, i8* %6156, align 1, !dbg !1428
  store i8 %6157, i8* %39, align 1, !dbg !1431
  %6158 = load i64, i64* %28, align 8, !dbg !1432
  %_475 = sub i64 %6158, 2
  %gen476 = mul i64 %_475, 2
  %6159 = add i64 %6158, 2, !dbg !1432
  store i64 %6159, i64* %28, align 8, !dbg !1432
  br label %originalBB464

originalBB480alteredBB:                           ; preds = %originalBB480, %1744
  %6160 = load i64, i64* %29, align 8, !dbg !1434
  %6161 = load i64, i64* %20, align 8, !dbg !1434
  %6162 = icmp ult i64 %6160, %6161, !dbg !1434
  br label %originalBB480

originalBB484alteredBB:                           ; preds = %originalBB484, %1764
  %6163 = load i8*, i8** %19, align 8, !dbg !1434
  %6164 = load i64, i64* %29, align 8, !dbg !1434
  %6165 = getelementptr inbounds i8, i8* %6163, i64 %6164, !dbg !1434
  store i8 63, i8* %6165, align 1, !dbg !1434
  br label %originalBB484

originalBB488alteredBB:                           ; preds = %originalBB488, %1784
  %6166 = load i64, i64* %29, align 8, !dbg !1437
  %_489 = sub i64 %6166, 1
  %gen490 = mul i64 %_489, 1
  %_491 = shl i64 %6166, 1
  %6167 = add i64 %6166, 1, !dbg !1437
  store i64 %6167, i64* %29, align 8, !dbg !1437
  br label %originalBB488

originalBB495alteredBB:                           ; preds = %originalBB495, %1803
  br label %originalBB495

originalBB499alteredBB:                           ; preds = %originalBB499, %1820
  %6168 = load i64, i64* %29, align 8, !dbg !1439
  %6169 = load i64, i64* %20, align 8, !dbg !1439
  %6170 = icmp ult i64 %6168, %6169, !dbg !1439
  br label %originalBB499

originalBB503alteredBB:                           ; preds = %originalBB503, %1840
  %6171 = load i8*, i8** %19, align 8, !dbg !1439
  %6172 = load i64, i64* %29, align 8, !dbg !1439
  %6173 = getelementptr inbounds i8, i8* %6171, i64 %6172, !dbg !1439
  store i8 34, i8* %6173, align 1, !dbg !1439
  br label %originalBB503

originalBB507alteredBB:                           ; preds = %originalBB507, %1860
  %6174 = load i64, i64* %29, align 8, !dbg !1442
  %_508 = sub i64 0, %6174
  %gen509 = add i64 %_508, 1
  %_510 = shl i64 %6174, 1
  %_511 = sub i64 %6174, 1
  %gen512 = mul i64 %_511, 1
  %_513 = shl i64 %6174, 1
  %_514 = sub i64 0, %6174
  %gen515 = add i64 %_514, 1
  %_516 = sub i64 0, %6174
  %gen517 = add i64 %_516, 1
  %6175 = add i64 %6174, 1, !dbg !1442
  store i64 %6175, i64* %29, align 8, !dbg !1442
  br label %originalBB507

originalBB521alteredBB:                           ; preds = %originalBB521, %1879
  br label %originalBB521

originalBB525alteredBB:                           ; preds = %originalBB525, %1896
  %6176 = load i64, i64* %29, align 8, !dbg !1444
  %6177 = load i64, i64* %20, align 8, !dbg !1444
  %6178 = icmp ult i64 %6176, %6177, !dbg !1444
  br label %originalBB525

originalBB529alteredBB:                           ; preds = %originalBB529, %1916
  %6179 = load i8*, i8** %19, align 8, !dbg !1444
  %6180 = load i64, i64* %29, align 8, !dbg !1444
  %6181 = getelementptr inbounds i8, i8* %6179, i64 %6180, !dbg !1444
  store i8 34, i8* %6181, align 1, !dbg !1444
  br label %originalBB529

originalBB533alteredBB:                           ; preds = %originalBB533, %1936
  %6182 = load i64, i64* %29, align 8, !dbg !1447
  %_534 = sub i64 %6182, 1
  %gen535 = mul i64 %_534, 1
  %6183 = add i64 %6182, 1, !dbg !1447
  store i64 %6183, i64* %29, align 8, !dbg !1447
  br label %originalBB533

originalBB539alteredBB:                           ; preds = %originalBB539, %1956
  %6184 = load i64, i64* %29, align 8, !dbg !1449
  %6185 = load i64, i64* %20, align 8, !dbg !1449
  %6186 = icmp ult i64 %6184, %6185, !dbg !1449
  br label %originalBB539

originalBB543alteredBB:                           ; preds = %originalBB543, %1976
  %6187 = load i8*, i8** %19, align 8, !dbg !1449
  %6188 = load i64, i64* %29, align 8, !dbg !1449
  %6189 = getelementptr inbounds i8, i8* %6187, i64 %6188, !dbg !1449
  store i8 63, i8* %6189, align 1, !dbg !1449
  br label %originalBB543

originalBB547alteredBB:                           ; preds = %originalBB547, %1996
  %6190 = load i64, i64* %29, align 8, !dbg !1452
  %_548 = sub i64 0, %6190
  %gen549 = add i64 %_548, 1
  %_550 = sub i64 0, %6190
  %gen551 = add i64 %_550, 1
  %_552 = sub i64 %6190, 1
  %gen553 = mul i64 %_552, 1
  %_554 = sub i64 0, %6190
  %gen555 = add i64 %_554, 1
  %_556 = sub i64 %6190, 1
  %gen557 = mul i64 %_556, 1
  %_558 = shl i64 %6190, 1
  %6191 = add i64 %6190, 1, !dbg !1452
  store i64 %6191, i64* %29, align 8, !dbg !1452
  br label %originalBB547

originalBB562alteredBB:                           ; preds = %originalBB562, %2015
  br label %originalBB562

originalBB566alteredBB:                           ; preds = %originalBB566, %2032
  br label %originalBB566

originalBB570alteredBB:                           ; preds = %originalBB570, %2049
  br label %originalBB570

originalBB574alteredBB:                           ; preds = %originalBB574, %2067
  br label %originalBB574

originalBB578alteredBB:                           ; preds = %originalBB578, %2084
  br label %originalBB578

originalBB582alteredBB:                           ; preds = %originalBB582, %2103
  store i8 102, i8* %40, align 1, !dbg !1463
  br label %originalBB582

originalBB586alteredBB:                           ; preds = %originalBB586, %2120
  store i8 110, i8* %40, align 1, !dbg !1465
  br label %originalBB586

originalBB590alteredBB:                           ; preds = %originalBB590, %2137
  store i8 114, i8* %40, align 1, !dbg !1467
  br label %originalBB590

originalBB594alteredBB:                           ; preds = %originalBB594, %2154
  store i8 116, i8* %40, align 1, !dbg !1469
  br label %originalBB594

originalBB598alteredBB:                           ; preds = %originalBB598, %2172
  %6192 = load i8, i8* %39, align 1, !dbg !1473
  store i8 %6192, i8* %40, align 1, !dbg !1474
  %6193 = load i32, i32* %23, align 4, !dbg !1475
  %6194 = icmp eq i32 %6193, 2, !dbg !1477
  br label %originalBB598

originalBB602alteredBB:                           ; preds = %originalBB602, %2195
  br label %originalBB602

originalBB606alteredBB:                           ; preds = %originalBB606, %2213
  %6195 = load i8, i8* %33, align 1, !dbg !1485
  %6196 = trunc i8 %6195 to i1, !dbg !1485
  br label %originalBB606

originalBB610alteredBB:                           ; preds = %originalBB610, %2235
  %6197 = load i64, i64* %32, align 8, !dbg !1490
  %6198 = icmp ne i64 %6197, 0, !dbg !1490
  br label %originalBB610

originalBB614alteredBB:                           ; preds = %originalBB614, %2254
  br label %originalBB614

originalBB618alteredBB:                           ; preds = %originalBB618, %2271
  br label %originalBB618

originalBB622alteredBB:                           ; preds = %originalBB622, %2288
  %6199 = load i32, i32* %23, align 4, !dbg !1495
  %6200 = icmp eq i32 %6199, 2, !dbg !1497
  br label %originalBB622

originalBB626alteredBB:                           ; preds = %originalBB626, %2310
  br label %originalBB626

originalBB630alteredBB:                           ; preds = %originalBB630, %2327
  br label %originalBB630

originalBB634alteredBB:                           ; preds = %originalBB634, %2344
  %6201 = load i8, i8* %33, align 1, !dbg !1504
  %6202 = trunc i8 %6201 to i1, !dbg !1504
  br label %originalBB634

originalBB638alteredBB:                           ; preds = %originalBB638, %2363
  %6203 = load i8, i8* %40, align 1, !dbg !1507
  store i8 %6203, i8* %39, align 1, !dbg !1509
  br label %originalBB638

originalBB642alteredBB:                           ; preds = %originalBB642, %2381
  br label %originalBB642

originalBB646alteredBB:                           ; preds = %originalBB646, %2398
  %6204 = load i64, i64* %22, align 8, !dbg !1512
  %6205 = icmp eq i64 %6204, -1, !dbg !1514
  br label %originalBB646

originalBB650alteredBB:                           ; preds = %originalBB650, %2417
  %6206 = load i8*, i8** %21, align 8, !dbg !1516
  %6207 = getelementptr inbounds i8, i8* %6206, i64 1, !dbg !1516
  %6208 = load i8, i8* %6207, align 1, !dbg !1516
  %6209 = sext i8 %6208 to i32, !dbg !1516
  %6210 = icmp eq i32 %6209, 0, !dbg !1517
  br label %originalBB650

originalBB654alteredBB:                           ; preds = %originalBB654, %2439
  %6211 = load i64, i64* %22, align 8, !dbg !1518
  %6212 = icmp eq i64 %6211, 1, !dbg !1519
  br label %originalBB654

originalBB658alteredBB:                           ; preds = %originalBB658, %2458
  br label %originalBB658

originalBB662alteredBB:                           ; preds = %originalBB662, %2475
  br label %originalBB662

originalBB666alteredBB:                           ; preds = %originalBB666, %2492
  %6213 = load i64, i64* %28, align 8, !dbg !1522
  %6214 = icmp ne i64 %6213, 0, !dbg !1524
  br label %originalBB666

originalBB670alteredBB:                           ; preds = %originalBB670, %2511
  br label %originalBB670

originalBB674alteredBB:                           ; preds = %originalBB674, %2528
  br label %originalBB674

originalBB678alteredBB:                           ; preds = %originalBB678, %2545
  store i8 1, i8* %43, align 1, !dbg !1528
  br label %originalBB678

originalBB682alteredBB:                           ; preds = %originalBB682, %2562
  %6215 = load i32, i32* %23, align 4, !dbg !1530
  %6216 = icmp eq i32 %6215, 2, !dbg !1532
  br label %originalBB682

originalBB686alteredBB:                           ; preds = %originalBB686, %2581
  %6217 = load i8, i8* %35, align 1, !dbg !1534
  %6218 = trunc i8 %6217 to i1, !dbg !1534
  br label %originalBB686

originalBB690alteredBB:                           ; preds = %originalBB690, %2601
  br label %originalBB690

originalBB694alteredBB:                           ; preds = %originalBB694, %2618
  store i8 1, i8* %37, align 1, !dbg !1538
  store i8 1, i8* %43, align 1, !dbg !1539
  %6219 = load i32, i32* %23, align 4, !dbg !1540
  %6220 = icmp eq i32 %6219, 2, !dbg !1542
  br label %originalBB694

originalBB698alteredBB:                           ; preds = %originalBB698, %2637
  %6221 = load i8, i8* %35, align 1, !dbg !1544
  %6222 = trunc i8 %6221 to i1, !dbg !1544
  br label %originalBB698

originalBB702alteredBB:                           ; preds = %originalBB702, %2656
  br label %originalBB702

originalBB706alteredBB:                           ; preds = %originalBB706, %2673
  %6223 = load i64, i64* %20, align 8, !dbg !1549
  %6224 = icmp ne i64 %6223, 0, !dbg !1549
  br label %originalBB706

originalBB710alteredBB:                           ; preds = %originalBB710, %2695
  %6225 = load i64, i64* %20, align 8, !dbg !1554
  store i64 %6225, i64* %30, align 8, !dbg !1556
  store i64 0, i64* %20, align 8, !dbg !1557
  br label %originalBB710

originalBB714alteredBB:                           ; preds = %originalBB714, %2713
  br label %originalBB714

originalBB718alteredBB:                           ; preds = %originalBB718, %2730
  %6226 = load i64, i64* %29, align 8, !dbg !1560
  %6227 = load i64, i64* %20, align 8, !dbg !1560
  %6228 = icmp ult i64 %6226, %6227, !dbg !1560
  br label %originalBB718

originalBB722alteredBB:                           ; preds = %originalBB722, %2750
  %6229 = load i8*, i8** %19, align 8, !dbg !1560
  %6230 = load i64, i64* %29, align 8, !dbg !1560
  %6231 = getelementptr inbounds i8, i8* %6229, i64 %6230, !dbg !1560
  store i8 39, i8* %6231, align 1, !dbg !1560
  br label %originalBB722

originalBB726alteredBB:                           ; preds = %originalBB726, %2770
  %6232 = load i64, i64* %29, align 8, !dbg !1563
  %_727 = sub i64 0, %6232
  %gen728 = add i64 %_727, 1
  %_729 = sub i64 %6232, 1
  %gen730 = mul i64 %_729, 1
  %_731 = sub i64 0, %6232
  %gen732 = add i64 %_731, 1
  %6233 = add i64 %6232, 1, !dbg !1563
  store i64 %6233, i64* %29, align 8, !dbg !1563
  br label %originalBB726

originalBB736alteredBB:                           ; preds = %originalBB736, %2789
  br label %originalBB736

originalBB740alteredBB:                           ; preds = %originalBB740, %2806
  %6234 = load i64, i64* %29, align 8, !dbg !1565
  %6235 = load i64, i64* %20, align 8, !dbg !1565
  %6236 = icmp ult i64 %6234, %6235, !dbg !1565
  br label %originalBB740

originalBB744alteredBB:                           ; preds = %originalBB744, %2826
  %6237 = load i8*, i8** %19, align 8, !dbg !1565
  %6238 = load i64, i64* %29, align 8, !dbg !1565
  %6239 = getelementptr inbounds i8, i8* %6237, i64 %6238, !dbg !1565
  store i8 92, i8* %6239, align 1, !dbg !1565
  br label %originalBB744

originalBB748alteredBB:                           ; preds = %originalBB748, %2849
  br label %originalBB748

originalBB752alteredBB:                           ; preds = %originalBB752, %2866
  %6240 = load i64, i64* %29, align 8, !dbg !1570
  %6241 = load i64, i64* %20, align 8, !dbg !1570
  %6242 = icmp ult i64 %6240, %6241, !dbg !1570
  br label %originalBB752

originalBB756alteredBB:                           ; preds = %originalBB756, %2886
  %6243 = load i8*, i8** %19, align 8, !dbg !1570
  %6244 = load i64, i64* %29, align 8, !dbg !1570
  %6245 = getelementptr inbounds i8, i8* %6243, i64 %6244, !dbg !1570
  store i8 39, i8* %6245, align 1, !dbg !1570
  br label %originalBB756

originalBB760alteredBB:                           ; preds = %originalBB760, %2909
  store i8 0, i8* %36, align 1, !dbg !1574
  br label %originalBB760

originalBB764alteredBB:                           ; preds = %originalBB764, %2926
  br label %originalBB764

originalBB768alteredBB:                           ; preds = %originalBB768, %2943
  store i8 1, i8* %43, align 1, !dbg !1577
  br label %originalBB768

originalBB772alteredBB:                           ; preds = %originalBB772, %2960
  %6246 = load i8, i8* %34, align 1, !dbg !1584
  %6247 = trunc i8 %6246 to i1, !dbg !1584
  br label %originalBB772

originalBB776alteredBB:                           ; preds = %originalBB776, %2979
  store i64 1, i64* %44, align 8, !dbg !1587
  %6248 = call i16** @__ctype_b_loc() #14, !dbg !1589
  %6249 = load i16*, i16** %6248, align 8, !dbg !1589
  %6250 = load i8, i8* %39, align 1, !dbg !1589
  %6251 = zext i8 %6250 to i32, !dbg !1589
  %6252 = sext i32 %6251 to i64, !dbg !1589
  %6253 = getelementptr inbounds i16, i16* %6249, i64 %6252, !dbg !1589
  %6254 = load i16, i16* %6253, align 2, !dbg !1589
  %6255 = zext i16 %6254 to i32, !dbg !1589
  %_777 = sub i32 0, %6255
  %gen778 = add i32 %_777, 16384
  %_779 = shl i32 %6255, 16384
  %6256 = and i32 %6255, 16384, !dbg !1589
  %6257 = icmp ne i32 %6256, 0, !dbg !1590
  %6258 = zext i1 %6257 to i8, !dbg !1591
  store i8 %6258, i8* %45, align 1, !dbg !1591
  br label %originalBB776

originalBB783alteredBB:                           ; preds = %originalBB783, %3007
  %6259 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1611
  call void @llvm.memset.p0i8.i64(i8* align 4 %6259, i8 0, i64 8, i1 false), !dbg !1611
  store i64 0, i64* %44, align 8, !dbg !1612
  store i8 1, i8* %45, align 1, !dbg !1613
  %6260 = load i64, i64* %22, align 8, !dbg !1614
  %6261 = icmp eq i64 %6260, -1, !dbg !1616
  br label %originalBB783

originalBB787alteredBB:                           ; preds = %originalBB787, %3027
  %6262 = load i8*, i8** %21, align 8, !dbg !1618
  %6263 = call i64 @strlen(i8* %6262) #13, !dbg !1619
  store i64 %6263, i64* %22, align 8, !dbg !1620
  br label %originalBB787

originalBB791alteredBB:                           ; preds = %originalBB791, %3046
  br label %originalBB791

originalBB795alteredBB:                           ; preds = %originalBB795, %3077
  br label %originalBB795

originalBB799alteredBB:                           ; preds = %originalBB799, %3094
  %6264 = load i64, i64* %48, align 8, !dbg !1644
  %6265 = icmp eq i64 %6264, -1, !dbg !1646
  br label %originalBB799

originalBB803alteredBB:                           ; preds = %originalBB803, %3113
  store i8 0, i8* %45, align 1, !dbg !1648
  br label %originalBB803

originalBB807alteredBB:                           ; preds = %originalBB807, %3130
  %6266 = load i64, i64* %48, align 8, !dbg !1651
  %6267 = icmp eq i64 %6266, -2, !dbg !1653
  br label %originalBB807

originalBB811alteredBB:                           ; preds = %originalBB811, %3149
  store i8 0, i8* %45, align 1, !dbg !1655
  br label %originalBB811

originalBB815alteredBB:                           ; preds = %originalBB815, %3166
  %6268 = load i64, i64* %28, align 8, !dbg !1658
  %6269 = load i64, i64* %44, align 8, !dbg !1659
  %_816 = shl i64 %6268, %6269
  %_817 = sub i64 0, %6268
  %gen818 = add i64 %_817, %6269
  %_819 = sub i64 %6268, %6269
  %gen820 = mul i64 %_819, %6269
  %_821 = shl i64 %6268, %6269
  %_822 = sub i64 %6268, %6269
  %gen823 = mul i64 %_822, %6269
  %6270 = add i64 %6268, %6269, !dbg !1660
  %6271 = load i64, i64* %22, align 8, !dbg !1661
  %6272 = icmp ult i64 %6270, %6271, !dbg !1662
  br label %originalBB815

originalBB827alteredBB:                           ; preds = %originalBB827, %3188
  %6273 = load i8*, i8** %21, align 8, !dbg !1664
  %6274 = load i64, i64* %28, align 8, !dbg !1665
  %6275 = load i64, i64* %44, align 8, !dbg !1666
  %_828 = sub i64 0, %6274
  %gen829 = add i64 %_828, %6275
  %_830 = sub i64 0, %6274
  %gen831 = add i64 %_830, %6275
  %_832 = shl i64 %6274, %6275
  %_833 = sub i64 0, %6274
  %gen834 = add i64 %_833, %6275
  %_835 = sub i64 0, %6274
  %gen836 = add i64 %_835, %6275
  %6276 = add i64 %6274, %6275, !dbg !1667
  %6277 = getelementptr inbounds i8, i8* %6273, i64 %6276, !dbg !1664
  %6278 = load i8, i8* %6277, align 1, !dbg !1664
  %6279 = sext i8 %6278 to i32, !dbg !1664
  %6280 = icmp ne i32 %6279, 0, !dbg !1663
  br label %originalBB827

originalBB840alteredBB:                           ; preds = %originalBB840, %3213
  br label %originalBB840

originalBB844alteredBB:                           ; preds = %originalBB844, %3234
  br label %originalBB844

originalBB848alteredBB:                           ; preds = %originalBB848, %3254
  %6281 = load i32, i32* %23, align 4, !dbg !1676
  %6282 = icmp eq i32 %6281, 2, !dbg !1677
  br label %originalBB848

originalBB852alteredBB:                           ; preds = %originalBB852, %3274
  %6283 = load i64, i64* %49, align 8, !dbg !1685
  %6284 = load i64, i64* %48, align 8, !dbg !1687
  %6285 = icmp ult i64 %6283, %6284, !dbg !1688
  br label %originalBB852

originalBB856alteredBB:                           ; preds = %originalBB856, %3294
  %6286 = load i8*, i8** %21, align 8, !dbg !1690
  %6287 = load i64, i64* %28, align 8, !dbg !1691
  %6288 = load i64, i64* %44, align 8, !dbg !1692
  %_857 = sub i64 %6287, %6288
  %gen858 = mul i64 %_857, %6288
  %6289 = add i64 %6287, %6288, !dbg !1693
  %6290 = load i64, i64* %49, align 8, !dbg !1694
  %_859 = sub i64 %6289, %6290
  %gen860 = mul i64 %_859, %6290
  %_861 = shl i64 %6289, %6290
  %_862 = sub i64 0, %6289
  %gen863 = add i64 %_862, %6290
  %_864 = shl i64 %6289, %6290
  %_865 = shl i64 %6289, %6290
  %_866 = shl i64 %6289, %6290
  %6291 = add i64 %6289, %6290, !dbg !1695
  %6292 = getelementptr inbounds i8, i8* %6286, i64 %6291, !dbg !1690
  %6293 = load i8, i8* %6292, align 1, !dbg !1690
  %6294 = sext i8 %6293 to i32, !dbg !1690
  br label %originalBB856

originalBB870alteredBB:                           ; preds = %originalBB870, %3321
  br label %originalBB870

originalBB874alteredBB:                           ; preds = %originalBB874, %3338
  br label %originalBB874

originalBB878alteredBB:                           ; preds = %originalBB878, %3355
  %6295 = load i64, i64* %49, align 8, !dbg !1701
  %_879 = sub i64 %6295, 1
  %gen880 = mul i64 %_879, 1
  %_881 = sub i64 %6295, 1
  %gen882 = mul i64 %_881, 1
  %6296 = add i64 %6295, 1, !dbg !1701
  store i64 %6296, i64* %49, align 8, !dbg !1701
  br label %originalBB878

originalBB886alteredBB:                           ; preds = %originalBB886, %3374
  br label %originalBB886

originalBB890alteredBB:                           ; preds = %originalBB890, %3391
  %6297 = load i32, i32* %47, align 4, !dbg !1706
  %6298 = call i32 @iswprint(i32 %6297) #10, !dbg !1708
  %6299 = icmp ne i32 %6298, 0, !dbg !1708
  br label %originalBB890

originalBB894alteredBB:                           ; preds = %originalBB894, %3411
  store i8 0, i8* %45, align 1, !dbg !1710
  br label %originalBB894

originalBB898alteredBB:                           ; preds = %originalBB898, %3428
  %6300 = load i64, i64* %48, align 8, !dbg !1712
  %6301 = load i64, i64* %44, align 8, !dbg !1713
  %_899 = shl i64 %6301, %6300
  %6302 = add i64 %6301, %6300, !dbg !1713
  store i64 %6302, i64* %44, align 8, !dbg !1713
  br label %originalBB898

originalBB903alteredBB:                           ; preds = %originalBB903, %3448
  br label %originalBB903

originalBB907alteredBB:                           ; preds = %originalBB907, %3466
  br label %originalBB907

originalBB911alteredBB:                           ; preds = %originalBB911, %3483
  %6303 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1715
  %6304 = icmp ne i32 %6303, 0, !dbg !1716
  %_912 = shl i1 %6304, true
  %_913 = sub i1 false, %6304
  %gen914 = add i1 %_913, true
  %6305 = xor i1 %6304, true, !dbg !1716
  br label %originalBB911

originalBB918alteredBB:                           ; preds = %originalBB918, %3503
  br label %originalBB918

originalBB922alteredBB:                           ; preds = %originalBB922, %3520
  %6306 = load i8, i8* %45, align 1, !dbg !1719
  %6307 = trunc i8 %6306 to i1, !dbg !1719
  %6308 = zext i1 %6307 to i8, !dbg !1720
  store i8 %6308, i8* %43, align 1, !dbg !1720
  %6309 = load i64, i64* %44, align 8, !dbg !1721
  %6310 = icmp ult i64 1, %6309, !dbg !1723
  br label %originalBB922

originalBB926alteredBB:                           ; preds = %originalBB926, %3542
  %6311 = load i8, i8* %33, align 1, !dbg !1725
  %6312 = trunc i8 %6311 to i1, !dbg !1725
  br label %originalBB926

originalBB930alteredBB:                           ; preds = %originalBB930, %3561
  %6313 = load i8, i8* %45, align 1, !dbg !1727
  %6314 = trunc i8 %6313 to i1, !dbg !1727
  br label %originalBB930

originalBB934alteredBB:                           ; preds = %originalBB934, %3580
  %6315 = load i64, i64* %28, align 8, !dbg !1732
  %6316 = load i64, i64* %44, align 8, !dbg !1733
  %_935 = sub i64 %6315, %6316
  %gen936 = mul i64 %_935, %6316
  %_937 = sub i64 %6315, %6316
  %gen938 = mul i64 %_937, %6316
  %_939 = sub i64 0, %6315
  %gen940 = add i64 %_939, %6316
  %_941 = shl i64 %6315, %6316
  %6317 = add i64 %6315, %6316, !dbg !1734
  store i64 %6317, i64* %50, align 8, !dbg !1731
  br label %originalBB934

originalBB945alteredBB:                           ; preds = %originalBB945, %3603
  %6318 = load i8, i8* %45, align 1, !dbg !1742
  %6319 = trunc i8 %6318 to i1, !dbg !1742
  br label %originalBB945

originalBB949alteredBB:                           ; preds = %originalBB949, %3623
  %6320 = load i8, i8* %35, align 1, !dbg !1746
  %6321 = trunc i8 %6320 to i1, !dbg !1746
  br label %originalBB949

originalBB953alteredBB:                           ; preds = %originalBB953, %3642
  br label %originalBB953

originalBB957alteredBB:                           ; preds = %originalBB957, %3659
  store i8 1, i8* %42, align 1, !dbg !1749
  %6322 = load i32, i32* %23, align 4, !dbg !1750
  %6323 = icmp eq i32 %6322, 2, !dbg !1750
  br label %originalBB957

originalBB961alteredBB:                           ; preds = %originalBB961, %3678
  %6324 = load i8, i8* %36, align 1, !dbg !1750
  %6325 = trunc i8 %6324 to i1, !dbg !1750
  br label %originalBB961

originalBB965alteredBB:                           ; preds = %originalBB965, %3697
  br label %originalBB965

originalBB969alteredBB:                           ; preds = %originalBB969, %3714
  %6326 = load i64, i64* %29, align 8, !dbg !1754
  %6327 = load i64, i64* %20, align 8, !dbg !1754
  %6328 = icmp ult i64 %6326, %6327, !dbg !1754
  br label %originalBB969

originalBB973alteredBB:                           ; preds = %originalBB973, %3734
  %6329 = load i8*, i8** %19, align 8, !dbg !1754
  %6330 = load i64, i64* %29, align 8, !dbg !1754
  %6331 = getelementptr inbounds i8, i8* %6329, i64 %6330, !dbg !1754
  store i8 39, i8* %6331, align 1, !dbg !1754
  br label %originalBB973

originalBB977alteredBB:                           ; preds = %originalBB977, %3754
  %6332 = load i64, i64* %29, align 8, !dbg !1757
  %_978 = shl i64 %6332, 1
  %_979 = sub i64 0, %6332
  %gen980 = add i64 %_979, 1
  %_981 = sub i64 %6332, 1
  %gen982 = mul i64 %_981, 1
  %6333 = add i64 %6332, 1, !dbg !1757
  store i64 %6333, i64* %29, align 8, !dbg !1757
  br label %originalBB977

originalBB986alteredBB:                           ; preds = %originalBB986, %3774
  %6334 = load i64, i64* %29, align 8, !dbg !1758
  %6335 = load i64, i64* %20, align 8, !dbg !1758
  %6336 = icmp ult i64 %6334, %6335, !dbg !1758
  br label %originalBB986

originalBB990alteredBB:                           ; preds = %originalBB990, %3794
  %6337 = load i8*, i8** %19, align 8, !dbg !1758
  %6338 = load i64, i64* %29, align 8, !dbg !1758
  %6339 = getelementptr inbounds i8, i8* %6337, i64 %6338, !dbg !1758
  store i8 36, i8* %6339, align 1, !dbg !1758
  br label %originalBB990

originalBB994alteredBB:                           ; preds = %originalBB994, %3814
  %6340 = load i64, i64* %29, align 8, !dbg !1761
  %_995 = sub i64 %6340, 1
  %gen996 = mul i64 %_995, 1
  %_997 = sub i64 0, %6340
  %gen998 = add i64 %_997, 1
  %_999 = sub i64 0, %6340
  %gen1000 = add i64 %_999, 1
  %_1001 = sub i64 0, %6340
  %gen1002 = add i64 %_1001, 1
  %_1003 = sub i64 0, %6340
  %gen1004 = add i64 %_1003, 1
  %_1005 = sub i64 %6340, 1
  %gen1006 = mul i64 %_1005, 1
  %6341 = add i64 %6340, 1, !dbg !1761
  store i64 %6341, i64* %29, align 8, !dbg !1761
  br label %originalBB994

originalBB1010alteredBB:                          ; preds = %originalBB1010, %3838
  %6342 = load i8*, i8** %19, align 8, !dbg !1762
  %6343 = load i64, i64* %29, align 8, !dbg !1762
  %6344 = getelementptr inbounds i8, i8* %6342, i64 %6343, !dbg !1762
  store i8 39, i8* %6344, align 1, !dbg !1762
  br label %originalBB1010

originalBB1014alteredBB:                          ; preds = %originalBB1014, %3858
  %6345 = load i64, i64* %29, align 8, !dbg !1765
  %_1015 = sub i64 %6345, 1
  %gen1016 = mul i64 %_1015, 1
  %6346 = add i64 %6345, 1, !dbg !1765
  store i64 %6346, i64* %29, align 8, !dbg !1765
  br label %originalBB1014

originalBB1020alteredBB:                          ; preds = %originalBB1020, %3877
  store i8 1, i8* %36, align 1, !dbg !1752
  br label %originalBB1020

originalBB1024alteredBB:                          ; preds = %originalBB1024, %3894
  br label %originalBB1024

originalBB1028alteredBB:                          ; preds = %originalBB1028, %3911
  %6347 = load i64, i64* %29, align 8, !dbg !1766
  %6348 = load i64, i64* %20, align 8, !dbg !1766
  %6349 = icmp ult i64 %6347, %6348, !dbg !1766
  br label %originalBB1028

originalBB1032alteredBB:                          ; preds = %originalBB1032, %3931
  %6350 = load i8*, i8** %19, align 8, !dbg !1766
  %6351 = load i64, i64* %29, align 8, !dbg !1766
  %6352 = getelementptr inbounds i8, i8* %6350, i64 %6351, !dbg !1766
  store i8 92, i8* %6352, align 1, !dbg !1766
  br label %originalBB1032

originalBB1036alteredBB:                          ; preds = %originalBB1036, %3951
  %6353 = load i64, i64* %29, align 8, !dbg !1769
  %_1037 = sub i64 0, %6353
  %gen1038 = add i64 %_1037, 1
  %_1039 = shl i64 %6353, 1
  %_1040 = sub i64 %6353, 1
  %gen1041 = mul i64 %_1040, 1
  %6354 = add i64 %6353, 1, !dbg !1769
  store i64 %6354, i64* %29, align 8, !dbg !1769
  br label %originalBB1036

originalBB1045alteredBB:                          ; preds = %originalBB1045, %3970
  br label %originalBB1045

originalBB1049alteredBB:                          ; preds = %originalBB1049, %3987
  br label %originalBB1049

originalBB1053alteredBB:                          ; preds = %originalBB1053, %4004
  %6355 = load i64, i64* %29, align 8, !dbg !1771
  %6356 = load i64, i64* %20, align 8, !dbg !1771
  %6357 = icmp ult i64 %6355, %6356, !dbg !1771
  br label %originalBB1053

originalBB1057alteredBB:                          ; preds = %originalBB1057, %4024
  %6358 = load i8, i8* %39, align 1, !dbg !1771
  %6359 = zext i8 %6358 to i32, !dbg !1771
  %_1058 = sub i32 0, %6359
  %gen1059 = add i32 %_1058, 6
  %6360 = ashr i32 %6359, 6, !dbg !1771
  %_1060 = sub i32 48, %6360
  %gen1061 = mul i32 %_1060, %6360
  %_1062 = shl i32 48, %6360
  %_1063 = shl i32 48, %6360
  %_1064 = shl i32 48, %6360
  %_1065 = sub i32 0, 48
  %gen1066 = add i32 %_1065, %6360
  %_1067 = shl i32 48, %6360
  %_1068 = sub i32 0, 48
  %gen1069 = add i32 %_1068, %6360
  %6361 = add nsw i32 48, %6360, !dbg !1771
  %6362 = trunc i32 %6361 to i8, !dbg !1771
  %6363 = load i8*, i8** %19, align 8, !dbg !1771
  %6364 = load i64, i64* %29, align 8, !dbg !1771
  %6365 = getelementptr inbounds i8, i8* %6363, i64 %6364, !dbg !1771
  store i8 %6362, i8* %6365, align 1, !dbg !1771
  br label %originalBB1057

originalBB1073alteredBB:                          ; preds = %originalBB1073, %4049
  %6366 = load i64, i64* %29, align 8, !dbg !1774
  %_1074 = sub i64 0, %6366
  %gen1075 = add i64 %_1074, 1
  %_1076 = sub i64 0, %6366
  %gen1077 = add i64 %_1076, 1
  %_1078 = sub i64 0, %6366
  %gen1079 = add i64 %_1078, 1
  %_1080 = shl i64 %6366, 1
  %_1081 = sub i64 %6366, 1
  %gen1082 = mul i64 %_1081, 1
  %_1083 = sub i64 %6366, 1
  %gen1084 = mul i64 %_1083, 1
  %_1085 = sub i64 0, %6366
  %gen1086 = add i64 %_1085, 1
  %6367 = add i64 %6366, 1, !dbg !1774
  store i64 %6367, i64* %29, align 8, !dbg !1774
  br label %originalBB1073

originalBB1090alteredBB:                          ; preds = %originalBB1090, %4068
  br label %originalBB1090

originalBB1094alteredBB:                          ; preds = %originalBB1094, %4085
  %6368 = load i64, i64* %29, align 8, !dbg !1776
  %6369 = load i64, i64* %20, align 8, !dbg !1776
  %6370 = icmp ult i64 %6368, %6369, !dbg !1776
  br label %originalBB1094

originalBB1098alteredBB:                          ; preds = %originalBB1098, %4105
  %6371 = load i8, i8* %39, align 1, !dbg !1776
  %6372 = zext i8 %6371 to i32, !dbg !1776
  %_1099 = shl i32 %6372, 3
  %_1100 = sub i32 0, %6372
  %gen1101 = add i32 %_1100, 3
  %_1102 = sub i32 0, %6372
  %gen1103 = add i32 %_1102, 3
  %_1104 = sub i32 0, %6372
  %gen1105 = add i32 %_1104, 3
  %_1106 = sub i32 0, %6372
  %gen1107 = add i32 %_1106, 3
  %6373 = ashr i32 %6372, 3, !dbg !1776
  %_1108 = shl i32 %6373, 7
  %_1109 = sub i32 %6373, 7
  %gen1110 = mul i32 %_1109, 7
  %_1111 = shl i32 %6373, 7
  %_1112 = shl i32 %6373, 7
  %6374 = and i32 %6373, 7, !dbg !1776
  %_1113 = sub i32 0, 48
  %gen1114 = add i32 %_1113, %6374
  %_1115 = sub i32 48, %6374
  %gen1116 = mul i32 %_1115, %6374
  %_1117 = shl i32 48, %6374
  %_1118 = sub i32 48, %6374
  %gen1119 = mul i32 %_1118, %6374
  %_1120 = shl i32 48, %6374
  %_1121 = sub i32 48, %6374
  %gen1122 = mul i32 %_1121, %6374
  %6375 = add nsw i32 48, %6374, !dbg !1776
  %6376 = trunc i32 %6375 to i8, !dbg !1776
  %6377 = load i8*, i8** %19, align 8, !dbg !1776
  %6378 = load i64, i64* %29, align 8, !dbg !1776
  %6379 = getelementptr inbounds i8, i8* %6377, i64 %6378, !dbg !1776
  store i8 %6376, i8* %6379, align 1, !dbg !1776
  br label %originalBB1098

originalBB1126alteredBB:                          ; preds = %originalBB1126, %4131
  %6380 = load i64, i64* %29, align 8, !dbg !1779
  %_1127 = sub i64 0, %6380
  %gen1128 = add i64 %_1127, 1
  %_1129 = sub i64 0, %6380
  %gen1130 = add i64 %_1129, 1
  %_1131 = shl i64 %6380, 1
  %_1132 = shl i64 %6380, 1
  %6381 = add i64 %6380, 1, !dbg !1779
  store i64 %6381, i64* %29, align 8, !dbg !1779
  br label %originalBB1126

originalBB1136alteredBB:                          ; preds = %originalBB1136, %4150
  %6382 = load i8, i8* %39, align 1, !dbg !1780
  %6383 = zext i8 %6382 to i32, !dbg !1780
  %_1137 = sub i32 %6383, 7
  %gen1138 = mul i32 %_1137, 7
  %_1139 = sub i32 0, %6383
  %gen1140 = add i32 %_1139, 7
  %_1141 = sub i32 0, %6383
  %gen1142 = add i32 %_1141, 7
  %_1143 = sub i32 %6383, 7
  %gen1144 = mul i32 %_1143, 7
  %6384 = and i32 %6383, 7, !dbg !1781
  %_1145 = shl i32 48, %6384
  %6385 = add nsw i32 48, %6384, !dbg !1782
  %6386 = trunc i32 %6385 to i8, !dbg !1783
  store i8 %6386, i8* %39, align 1, !dbg !1784
  br label %originalBB1136

originalBB1149alteredBB:                          ; preds = %originalBB1149, %4175
  br label %originalBB1149

originalBB1153alteredBB:                          ; preds = %originalBB1153, %4192
  %6387 = load i64, i64* %29, align 8, !dbg !1791
  %6388 = load i64, i64* %20, align 8, !dbg !1791
  %6389 = icmp ult i64 %6387, %6388, !dbg !1791
  br label %originalBB1153

originalBB1157alteredBB:                          ; preds = %originalBB1157, %4212
  %6390 = load i8*, i8** %19, align 8, !dbg !1791
  %6391 = load i64, i64* %29, align 8, !dbg !1791
  %6392 = getelementptr inbounds i8, i8* %6390, i64 %6391, !dbg !1791
  store i8 92, i8* %6392, align 1, !dbg !1791
  br label %originalBB1157

originalBB1161alteredBB:                          ; preds = %originalBB1161, %4235
  store i8 0, i8* %41, align 1, !dbg !1795
  br label %originalBB1161

originalBB1165alteredBB:                          ; preds = %originalBB1165, %4252
  br label %originalBB1165

originalBB1169alteredBB:                          ; preds = %originalBB1169, %4274
  br label %originalBB1169

originalBB1173alteredBB:                          ; preds = %originalBB1173, %4291
  br label %originalBB1173

originalBB1177alteredBB:                          ; preds = %originalBB1177, %4311
  %6393 = load i8, i8* %42, align 1, !dbg !1805
  %6394 = trunc i8 %6393 to i1, !dbg !1805
  br label %originalBB1177

originalBB1181alteredBB:                          ; preds = %originalBB1181, %4331
  %6395 = load i64, i64* %29, align 8, !dbg !1811
  %6396 = load i64, i64* %20, align 8, !dbg !1811
  %6397 = icmp ult i64 %6395, %6396, !dbg !1811
  br label %originalBB1181

originalBB1185alteredBB:                          ; preds = %originalBB1185, %4351
  %6398 = load i8*, i8** %19, align 8, !dbg !1811
  %6399 = load i64, i64* %29, align 8, !dbg !1811
  %6400 = getelementptr inbounds i8, i8* %6398, i64 %6399, !dbg !1811
  store i8 39, i8* %6400, align 1, !dbg !1811
  br label %originalBB1185

originalBB1189alteredBB:                          ; preds = %originalBB1189, %4371
  %6401 = load i64, i64* %29, align 8, !dbg !1814
  %_1190 = sub i64 0, %6401
  %gen1191 = add i64 %_1190, 1
  %_1192 = sub i64 %6401, 1
  %gen1193 = mul i64 %_1192, 1
  %6402 = add i64 %6401, 1, !dbg !1814
  store i64 %6402, i64* %29, align 8, !dbg !1814
  br label %originalBB1189

originalBB1197alteredBB:                          ; preds = %originalBB1197, %4391
  %6403 = load i64, i64* %29, align 8, !dbg !1815
  %6404 = load i64, i64* %20, align 8, !dbg !1815
  %6405 = icmp ult i64 %6403, %6404, !dbg !1815
  br label %originalBB1197

originalBB1201alteredBB:                          ; preds = %originalBB1201, %4418
  store i8 0, i8* %36, align 1, !dbg !1809
  br label %originalBB1201

originalBB1205alteredBB:                          ; preds = %originalBB1205, %4435
  br label %originalBB1205

originalBB1209alteredBB:                          ; preds = %originalBB1209, %4465
  %6406 = load i8*, i8** %21, align 8, !dbg !1824
  %6407 = load i64, i64* %28, align 8, !dbg !1825
  %_1210 = sub i64 0, %6407
  %gen1211 = add i64 %_1210, 1
  %_1212 = shl i64 %6407, 1
  %6408 = add i64 %6407, 1, !dbg !1825
  store i64 %6408, i64* %28, align 8, !dbg !1825
  %6409 = getelementptr inbounds i8, i8* %6406, i64 %6408, !dbg !1824
  %6410 = load i8, i8* %6409, align 1, !dbg !1824
  store i8 %6410, i8* %39, align 1, !dbg !1826
  br label %originalBB1209

originalBB1216alteredBB:                          ; preds = %originalBB1216, %4487
  br label %originalBB1216

originalBB1220alteredBB:                          ; preds = %originalBB1220, %4505
  %6411 = load i8, i8* %33, align 1, !dbg !1833
  %6412 = trunc i8 %6411 to i1, !dbg !1833
  br label %originalBB1220

originalBB1224alteredBB:                          ; preds = %originalBB1224, %4524
  %6413 = load i32, i32* %23, align 4, !dbg !1836
  %6414 = icmp ne i32 %6413, 2, !dbg !1837
  br label %originalBB1224

originalBB1228alteredBB:                          ; preds = %originalBB1228, %4543
  %6415 = load i8, i8* %35, align 1, !dbg !1839
  %6416 = trunc i8 %6415 to i1, !dbg !1839
  br label %originalBB1228

originalBB1232alteredBB:                          ; preds = %originalBB1232, %4562
  %6417 = load i32*, i32** %25, align 8, !dbg !1841
  %6418 = icmp ne i32* %6417, null, !dbg !1841
  br label %originalBB1232

originalBB1236alteredBB:                          ; preds = %originalBB1236, %4581
  %6419 = load i32*, i32** %25, align 8, !dbg !1843
  %6420 = load i8, i8* %39, align 1, !dbg !1844
  %6421 = zext i8 %6420 to i64, !dbg !1844
  %_1237 = sub i64 %6421, 32
  %gen1238 = mul i64 %_1237, 32
  %_1239 = sub i64 %6421, 32
  %gen1240 = mul i64 %_1239, 32
  %6422 = udiv i64 %6421, 32, !dbg !1845
  %6423 = getelementptr inbounds i32, i32* %6419, i64 %6422, !dbg !1843
  %6424 = load i32, i32* %6423, align 4, !dbg !1843
  %6425 = load i8, i8* %39, align 1, !dbg !1846
  %6426 = zext i8 %6425 to i64, !dbg !1846
  %_1241 = sub i64 %6426, 32
  %gen1242 = mul i64 %_1241, 32
  %_1243 = shl i64 %6426, 32
  %_1244 = shl i64 %6426, 32
  %_1245 = sub i64 %6426, 32
  %gen1246 = mul i64 %_1245, 32
  %6427 = urem i64 %6426, 32, !dbg !1847
  %6428 = trunc i64 %6427 to i32, !dbg !1848
  %_1247 = shl i32 %6424, %6428
  %6429 = lshr i32 %6424, %6428, !dbg !1848
  %_1248 = shl i32 %6429, 1
  %_1249 = sub i32 0, %6429
  %gen1250 = add i32 %_1249, 1
  %_1251 = shl i32 %6429, 1
  %_1252 = sub i32 0, %6429
  %gen1253 = add i32 %_1252, 1
  %_1254 = sub i32 %6429, 1
  %gen1255 = mul i32 %_1254, 1
  %6430 = and i32 %6429, 1, !dbg !1849
  %6431 = icmp ne i32 %6430, 0, !dbg !1849
  br label %originalBB1236

originalBB1259alteredBB:                          ; preds = %originalBB1259, %4611
  %6432 = load i8, i8* %41, align 1, !dbg !1851
  %6433 = trunc i8 %6432 to i1, !dbg !1851
  br label %originalBB1259

originalBB1263alteredBB:                          ; preds = %originalBB1263, %4630
  br label %originalBB1263

originalBB1267alteredBB:                          ; preds = %originalBB1267, %4647
  br label %originalBB1267

originalBB1271alteredBB:                          ; preds = %originalBB1271, %4664
  br label %originalBB1271

originalBB1275alteredBB:                          ; preds = %originalBB1275, %4681
  %6434 = load i8, i8* %35, align 1, !dbg !1857
  %6435 = trunc i8 %6434 to i1, !dbg !1857
  br label %originalBB1275

originalBB1279alteredBB:                          ; preds = %originalBB1279, %4701
  store i8 1, i8* %42, align 1, !dbg !1860
  %6436 = load i32, i32* %23, align 4, !dbg !1861
  %6437 = icmp eq i32 %6436, 2, !dbg !1861
  br label %originalBB1279

originalBB1283alteredBB:                          ; preds = %originalBB1283, %4720
  %6438 = load i8, i8* %36, align 1, !dbg !1861
  %6439 = trunc i8 %6438 to i1, !dbg !1861
  br label %originalBB1283

originalBB1287alteredBB:                          ; preds = %originalBB1287, %4739
  br label %originalBB1287

originalBB1291alteredBB:                          ; preds = %originalBB1291, %4760
  %6440 = load i8*, i8** %19, align 8, !dbg !1865
  %6441 = load i64, i64* %29, align 8, !dbg !1865
  %6442 = getelementptr inbounds i8, i8* %6440, i64 %6441, !dbg !1865
  store i8 39, i8* %6442, align 1, !dbg !1865
  br label %originalBB1291

originalBB1295alteredBB:                          ; preds = %originalBB1295, %4780
  %6443 = load i64, i64* %29, align 8, !dbg !1868
  %_1296 = sub i64 %6443, 1
  %gen1297 = mul i64 %_1296, 1
  %6444 = add i64 %6443, 1, !dbg !1868
  store i64 %6444, i64* %29, align 8, !dbg !1868
  br label %originalBB1295

originalBB1301alteredBB:                          ; preds = %originalBB1301, %4804
  %6445 = load i8*, i8** %19, align 8, !dbg !1869
  %6446 = load i64, i64* %29, align 8, !dbg !1869
  %6447 = getelementptr inbounds i8, i8* %6445, i64 %6446, !dbg !1869
  store i8 36, i8* %6447, align 1, !dbg !1869
  br label %originalBB1301

originalBB1305alteredBB:                          ; preds = %originalBB1305, %4824
  %6448 = load i64, i64* %29, align 8, !dbg !1872
  %_1306 = shl i64 %6448, 1
  %_1307 = shl i64 %6448, 1
  %_1308 = shl i64 %6448, 1
  %_1309 = shl i64 %6448, 1
  %_1310 = sub i64 %6448, 1
  %gen1311 = mul i64 %_1310, 1
  %_1312 = shl i64 %6448, 1
  %6449 = add i64 %6448, 1, !dbg !1872
  store i64 %6449, i64* %29, align 8, !dbg !1872
  br label %originalBB1305

originalBB1316alteredBB:                          ; preds = %originalBB1316, %4843
  br label %originalBB1316

originalBB1320alteredBB:                          ; preds = %originalBB1320, %4860
  %6450 = load i64, i64* %29, align 8, !dbg !1873
  %6451 = load i64, i64* %20, align 8, !dbg !1873
  %6452 = icmp ult i64 %6450, %6451, !dbg !1873
  br label %originalBB1320

originalBB1324alteredBB:                          ; preds = %originalBB1324, %4880
  %6453 = load i8*, i8** %19, align 8, !dbg !1873
  %6454 = load i64, i64* %29, align 8, !dbg !1873
  %6455 = getelementptr inbounds i8, i8* %6453, i64 %6454, !dbg !1873
  store i8 39, i8* %6455, align 1, !dbg !1873
  br label %originalBB1324

originalBB1328alteredBB:                          ; preds = %originalBB1328, %4900
  %6456 = load i64, i64* %29, align 8, !dbg !1876
  %_1329 = shl i64 %6456, 1
  %_1330 = sub i64 0, %6456
  %gen1331 = add i64 %_1330, 1
  %_1332 = shl i64 %6456, 1
  %_1333 = sub i64 %6456, 1
  %gen1334 = mul i64 %_1333, 1
  %_1335 = shl i64 %6456, 1
  %_1336 = sub i64 %6456, 1
  %gen1337 = mul i64 %_1336, 1
  %6457 = add i64 %6456, 1, !dbg !1876
  store i64 %6457, i64* %29, align 8, !dbg !1876
  br label %originalBB1328

originalBB1341alteredBB:                          ; preds = %originalBB1341, %4919
  store i8 1, i8* %36, align 1, !dbg !1863
  br label %originalBB1341

originalBB1345alteredBB:                          ; preds = %originalBB1345, %4936
  br label %originalBB1345

originalBB1349alteredBB:                          ; preds = %originalBB1349, %4957
  %6458 = load i8*, i8** %19, align 8, !dbg !1877
  %6459 = load i64, i64* %29, align 8, !dbg !1877
  %6460 = getelementptr inbounds i8, i8* %6458, i64 %6459, !dbg !1877
  store i8 92, i8* %6460, align 1, !dbg !1877
  br label %originalBB1349

originalBB1353alteredBB:                          ; preds = %originalBB1353, %4977
  %6461 = load i64, i64* %29, align 8, !dbg !1880
  %_1354 = shl i64 %6461, 1
  %_1355 = shl i64 %6461, 1
  %_1356 = sub i64 %6461, 1
  %gen1357 = mul i64 %_1356, 1
  %_1358 = sub i64 0, %6461
  %gen1359 = add i64 %_1358, 1
  %_1360 = sub i64 0, %6461
  %gen1361 = add i64 %_1360, 1
  %6462 = add i64 %6461, 1, !dbg !1880
  store i64 %6462, i64* %29, align 8, !dbg !1880
  br label %originalBB1353

originalBB1365alteredBB:                          ; preds = %originalBB1365, %4996
  br label %originalBB1365

originalBB1369alteredBB:                          ; preds = %originalBB1369, %5013
  br label %originalBB1369

originalBB1373alteredBB:                          ; preds = %originalBB1373, %5030
  br label %originalBB1373

originalBB1377alteredBB:                          ; preds = %originalBB1377, %5047
  %6463 = load i8, i8* %36, align 1, !dbg !1884
  %6464 = trunc i8 %6463 to i1, !dbg !1884
  br label %originalBB1377

originalBB1381alteredBB:                          ; preds = %originalBB1381, %5066
  %6465 = load i8, i8* %42, align 1, !dbg !1884
  %6466 = trunc i8 %6465 to i1, !dbg !1884
  br label %originalBB1381

originalBB1385alteredBB:                          ; preds = %originalBB1385, %5085
  br label %originalBB1385

originalBB1389alteredBB:                          ; preds = %originalBB1389, %5102
  %6467 = load i64, i64* %29, align 8, !dbg !1890
  %6468 = load i64, i64* %20, align 8, !dbg !1890
  %6469 = icmp ult i64 %6467, %6468, !dbg !1890
  br label %originalBB1389

originalBB1393alteredBB:                          ; preds = %originalBB1393, %5122
  %6470 = load i8*, i8** %19, align 8, !dbg !1890
  %6471 = load i64, i64* %29, align 8, !dbg !1890
  %6472 = getelementptr inbounds i8, i8* %6470, i64 %6471, !dbg !1890
  store i8 39, i8* %6472, align 1, !dbg !1890
  br label %originalBB1393

originalBB1397alteredBB:                          ; preds = %originalBB1397, %5142
  %6473 = load i64, i64* %29, align 8, !dbg !1893
  %_1398 = sub i64 %6473, 1
  %gen1399 = mul i64 %_1398, 1
  %_1400 = shl i64 %6473, 1
  %_1401 = sub i64 %6473, 1
  %gen1402 = mul i64 %_1401, 1
  %_1403 = shl i64 %6473, 1
  %_1404 = shl i64 %6473, 1
  %6474 = add i64 %6473, 1, !dbg !1893
  store i64 %6474, i64* %29, align 8, !dbg !1893
  br label %originalBB1397

originalBB1408alteredBB:                          ; preds = %originalBB1408, %5162
  %6475 = load i64, i64* %29, align 8, !dbg !1894
  %6476 = load i64, i64* %20, align 8, !dbg !1894
  %6477 = icmp ult i64 %6475, %6476, !dbg !1894
  br label %originalBB1408

originalBB1412alteredBB:                          ; preds = %originalBB1412, %5182
  %6478 = load i8*, i8** %19, align 8, !dbg !1894
  %6479 = load i64, i64* %29, align 8, !dbg !1894
  %6480 = getelementptr inbounds i8, i8* %6478, i64 %6479, !dbg !1894
  store i8 39, i8* %6480, align 1, !dbg !1894
  br label %originalBB1412

originalBB1416alteredBB:                          ; preds = %originalBB1416, %5202
  %6481 = load i64, i64* %29, align 8, !dbg !1897
  %_1417 = sub i64 %6481, 1
  %gen1418 = mul i64 %_1417, 1
  %_1419 = sub i64 %6481, 1
  %gen1420 = mul i64 %_1419, 1
  %_1421 = shl i64 %6481, 1
  %_1422 = shl i64 %6481, 1
  %_1423 = sub i64 0, %6481
  %gen1424 = add i64 %_1423, 1
  %_1425 = shl i64 %6481, 1
  %6482 = add i64 %6481, 1, !dbg !1897
  store i64 %6482, i64* %29, align 8, !dbg !1897
  br label %originalBB1416

originalBB1429alteredBB:                          ; preds = %originalBB1429, %5221
  store i8 0, i8* %36, align 1, !dbg !1888
  br label %originalBB1429

originalBB1433alteredBB:                          ; preds = %originalBB1433, %5238
  br label %originalBB1433

originalBB1437alteredBB:                          ; preds = %originalBB1437, %5255
  br label %originalBB1437

originalBB1441alteredBB:                          ; preds = %originalBB1441, %5272
  %6483 = load i64, i64* %29, align 8, !dbg !1899
  %6484 = load i64, i64* %20, align 8, !dbg !1899
  %6485 = icmp ult i64 %6483, %6484, !dbg !1899
  br label %originalBB1441

originalBB1445alteredBB:                          ; preds = %originalBB1445, %5292
  %6486 = load i8, i8* %39, align 1, !dbg !1899
  %6487 = load i8*, i8** %19, align 8, !dbg !1899
  %6488 = load i64, i64* %29, align 8, !dbg !1899
  %6489 = getelementptr inbounds i8, i8* %6487, i64 %6488, !dbg !1899
  store i8 %6486, i8* %6489, align 1, !dbg !1899
  br label %originalBB1445

originalBB1449alteredBB:                          ; preds = %originalBB1449, %5313
  %6490 = load i64, i64* %29, align 8, !dbg !1902
  %_1450 = shl i64 %6490, 1
  %_1451 = shl i64 %6490, 1
  %_1452 = sub i64 %6490, 1
  %gen1453 = mul i64 %_1452, 1
  %6491 = add i64 %6490, 1, !dbg !1902
  store i64 %6491, i64* %29, align 8, !dbg !1902
  br label %originalBB1449

originalBB1457alteredBB:                          ; preds = %originalBB1457, %5335
  store i8 0, i8* %38, align 1, !dbg !1906
  br label %originalBB1457

originalBB1461alteredBB:                          ; preds = %originalBB1461, %5352
  br label %originalBB1461

originalBB1465alteredBB:                          ; preds = %originalBB1465, %5369
  %6492 = load i64, i64* %28, align 8, !dbg !1909
  %_1466 = shl i64 %6492, 1
  %_1467 = shl i64 %6492, 1
  %6493 = add i64 %6492, 1, !dbg !1909
  store i64 %6493, i64* %28, align 8, !dbg !1909
  br label %originalBB1465

originalBB1471alteredBB:                          ; preds = %originalBB1471, %5388
  %6494 = load i64, i64* %29, align 8, !dbg !1913
  %6495 = icmp eq i64 %6494, 0, !dbg !1915
  br label %originalBB1471

originalBB1475alteredBB:                          ; preds = %originalBB1475, %5410
  %6496 = load i8, i8* %35, align 1, !dbg !1920
  %6497 = trunc i8 %6496 to i1, !dbg !1920
  br label %originalBB1475

originalBB1479alteredBB:                          ; preds = %originalBB1479, %5429
  br label %originalBB1479

originalBB1483alteredBB:                          ; preds = %originalBB1483, %5446
  %6498 = load i32, i32* %23, align 4, !dbg !1923
  %6499 = icmp eq i32 %6498, 2, !dbg !1925
  br label %originalBB1483

originalBB1487alteredBB:                          ; preds = %originalBB1487, %5465
  %6500 = load i8, i8* %35, align 1, !dbg !1927
  %6501 = trunc i8 %6500 to i1, !dbg !1927
  br label %originalBB1487

originalBB1491alteredBB:                          ; preds = %originalBB1491, %5484
  %6502 = load i8, i8* %37, align 1, !dbg !1929
  %6503 = trunc i8 %6502 to i1, !dbg !1929
  br label %originalBB1491

originalBB1495alteredBB:                          ; preds = %originalBB1495, %5503
  %6504 = load i8, i8* %38, align 1, !dbg !1931
  %6505 = trunc i8 %6504 to i1, !dbg !1931
  br label %originalBB1495

originalBB1499alteredBB:                          ; preds = %originalBB1499, %5522
  %6506 = load i8*, i8** %19, align 8, !dbg !1935
  %6507 = load i64, i64* %30, align 8, !dbg !1936
  %6508 = load i8*, i8** %21, align 8, !dbg !1937
  %6509 = load i64, i64* %22, align 8, !dbg !1938
  %6510 = load i32, i32* %24, align 4, !dbg !1939
  %6511 = load i32*, i32** %25, align 8, !dbg !1940
  %6512 = load i8*, i8** %26, align 8, !dbg !1941
  %6513 = load i8*, i8** %27, align 8, !dbg !1942
  %6514 = call i64 @quotearg_buffer_restyled(i8* %6506, i64 %6507, i8* %6508, i64 %6509, i32 5, i32 %6510, i32* %6511, i8* %6512, i8* %6513), !dbg !1943
  store i64 %6514, i64* %18, align 8, !dbg !1944
  br label %originalBB1499

originalBB1503alteredBB:                          ; preds = %originalBB1503, %5548
  %6515 = load i64, i64* %20, align 8, !dbg !1945
  %6516 = icmp ne i64 %6515, 0, !dbg !1945
  br label %originalBB1503

originalBB1507alteredBB:                          ; preds = %originalBB1507, %5567
  %6517 = load i64, i64* %30, align 8, !dbg !1948
  %6518 = icmp ne i64 %6517, 0, !dbg !1948
  br label %originalBB1507

originalBB1511alteredBB:                          ; preds = %originalBB1511, %5586
  %6519 = load i64, i64* %30, align 8, !dbg !1950
  store i64 %6519, i64* %20, align 8, !dbg !1952
  store i64 0, i64* %29, align 8, !dbg !1953
  br label %originalBB1511

originalBB1515alteredBB:                          ; preds = %originalBB1515, %5604
  br label %originalBB1515

originalBB1519alteredBB:                          ; preds = %originalBB1519, %5622
  %6520 = load i8*, i8** %31, align 8, !dbg !1956
  %6521 = icmp ne i8* %6520, null, !dbg !1956
  br label %originalBB1519

originalBB1523alteredBB:                          ; preds = %originalBB1523, %5641
  %6522 = load i8, i8* %35, align 1, !dbg !1959
  %6523 = trunc i8 %6522 to i1, !dbg !1959
  br label %originalBB1523

originalBB1527alteredBB:                          ; preds = %originalBB1527, %5660
  br label %originalBB1527

originalBB1531alteredBB:                          ; preds = %originalBB1531, %5677
  %6524 = load i8*, i8** %31, align 8, !dbg !1962
  %6525 = load i8, i8* %6524, align 1, !dbg !1965
  %6526 = icmp ne i8 %6525, 0, !dbg !1966
  br label %originalBB1531

originalBB1535alteredBB:                          ; preds = %originalBB1535, %5697
  br label %originalBB1535

originalBB1539alteredBB:                          ; preds = %originalBB1539, %5714
  %6527 = load i64, i64* %29, align 8, !dbg !1968
  %6528 = load i64, i64* %20, align 8, !dbg !1968
  %6529 = icmp ult i64 %6527, %6528, !dbg !1968
  br label %originalBB1539

originalBB1543alteredBB:                          ; preds = %originalBB1543, %5734
  %6530 = load i8*, i8** %31, align 8, !dbg !1968
  %6531 = load i8, i8* %6530, align 1, !dbg !1968
  %6532 = load i8*, i8** %19, align 8, !dbg !1968
  %6533 = load i64, i64* %29, align 8, !dbg !1968
  %6534 = getelementptr inbounds i8, i8* %6532, i64 %6533, !dbg !1968
  store i8 %6531, i8* %6534, align 1, !dbg !1968
  br label %originalBB1543

originalBB1547alteredBB:                          ; preds = %originalBB1547, %5756
  %6535 = load i64, i64* %29, align 8, !dbg !1971
  %_1548 = shl i64 %6535, 1
  %_1549 = sub i64 %6535, 1
  %gen1550 = mul i64 %_1549, 1
  %_1551 = sub i64 %6535, 1
  %gen1552 = mul i64 %_1551, 1
  %_1553 = sub i64 0, %6535
  %gen1554 = add i64 %_1553, 1
  %6536 = add i64 %6535, 1, !dbg !1971
  store i64 %6536, i64* %29, align 8, !dbg !1971
  br label %originalBB1547

originalBB1558alteredBB:                          ; preds = %originalBB1558, %5775
  br label %originalBB1558

originalBB1562alteredBB:                          ; preds = %originalBB1562, %5792
  %6537 = load i8*, i8** %31, align 8, !dbg !1972
  %6538 = getelementptr inbounds i8, i8* %6537, i32 1, !dbg !1972
  store i8* %6538, i8** %31, align 8, !dbg !1972
  br label %originalBB1562

originalBB1566alteredBB:                          ; preds = %originalBB1566, %5811
  br label %originalBB1566

originalBB1570alteredBB:                          ; preds = %originalBB1570, %5832
  %6539 = load i8*, i8** %19, align 8, !dbg !1981
  %6540 = load i64, i64* %29, align 8, !dbg !1982
  %6541 = getelementptr inbounds i8, i8* %6539, i64 %6540, !dbg !1981
  store i8 0, i8* %6541, align 1, !dbg !1983
  br label %originalBB1570

originalBB1574alteredBB:                          ; preds = %originalBB1574, %5852
  %6542 = load i64, i64* %29, align 8, !dbg !1984
  store i64 %6542, i64* %18, align 8, !dbg !1985
  br label %originalBB1574

originalBB1578alteredBB:                          ; preds = %originalBB1578, %5870
  %6543 = load i32, i32* %23, align 4, !dbg !1988
  %6544 = icmp eq i32 %6543, 2, !dbg !1990
  br label %originalBB1578

originalBB1582alteredBB:                          ; preds = %originalBB1582, %5889
  %6545 = load i8, i8* %33, align 1, !dbg !1992
  %6546 = trunc i8 %6545 to i1, !dbg !1992
  br label %originalBB1582

originalBB1586alteredBB:                          ; preds = %originalBB1586, %5909
  %6547 = load i8*, i8** %19, align 8, !dbg !1996
  %6548 = load i64, i64* %20, align 8, !dbg !1997
  %6549 = load i8*, i8** %21, align 8, !dbg !1998
  %6550 = load i64, i64* %22, align 8, !dbg !1999
  %6551 = load i32, i32* %23, align 4, !dbg !2000
  %6552 = load i32, i32* %24, align 4, !dbg !2001
  %_1587 = sub i32 0, %6552
  %gen1588 = add i32 %_1587, -3
  %_1589 = sub i32 0, %6552
  %gen1590 = add i32 %_1589, -3
  %_1591 = sub i32 %6552, -3
  %gen1592 = mul i32 %_1591, -3
  %_1593 = sub i32 %6552, -3
  %gen1594 = mul i32 %_1593, -3
  %6553 = and i32 %6552, -3, !dbg !2002
  %6554 = load i8*, i8** %26, align 8, !dbg !2003
  %6555 = load i8*, i8** %27, align 8, !dbg !2004
  %6556 = call i64 @quotearg_buffer_restyled(i8* %6547, i64 %6548, i8* %6549, i64 %6550, i32 %6551, i32 %6553, i32* null, i8* %6554, i8* %6555), !dbg !2005
  store i64 %6556, i64* %18, align 8, !dbg !2006
  br label %originalBB1586

originalBB1598alteredBB:                          ; preds = %originalBB1598, %5936
  %6557 = load i64, i64* %18, align 8, !dbg !2007
  br label %originalBB1598
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !2095 {
  %3 = load i32, i32* @x.21
  %4 = load i32, i32* @y.22
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2098, metadata !DIExpression()), !dbg !2099
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !2100, metadata !DIExpression()), !dbg !2101
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2102, metadata !DIExpression()), !dbg !2103
  %16 = load i8*, i8** %12, align 8, !dbg !2104
  %17 = call i8* @gettext(i8* %16) #10, !dbg !2104
  store i8* %17, i8** %14, align 8, !dbg !2103
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2105, metadata !DIExpression()), !dbg !2106
  %18 = load i8*, i8** %14, align 8, !dbg !2107
  %19 = load i8*, i8** %12, align 8, !dbg !2109
  %20 = icmp ne i8* %18, %19, !dbg !2110
  %21 = load i32, i32* @x.21
  %22 = load i32, i32* @y.22
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !2111

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.21
  %31 = load i32, i32* @y.22
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !2112
  store i8* %38, i8** %11, align 8, !dbg !2113
  %39 = load i32, i32* @x.21
  %40 = load i32, i32* @y.22
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %141, !dbg !2113

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.21
  %49 = load i32, i32* @y.22
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !2114
  store i8* %56, i8** %15, align 8, !dbg !2115
  %57 = load i8*, i8** %15, align 8, !dbg !2116
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.65, i64 0, i64 0)) #13, !dbg !2116
  %59 = icmp eq i32 %58, 0, !dbg !2116
  %60 = load i32, i32* @x.21
  %61 = load i32, i32* @y.22
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %92, !dbg !2118

68:                                               ; preds = %originalBBpart28
  %69 = load i32, i32* @x.21
  %70 = load i32, i32* @y.22
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %77 = load i8*, i8** %12, align 8, !dbg !2119
  %78 = getelementptr inbounds i8, i8* %77, i64 0, !dbg !2119
  %79 = load i8, i8* %78, align 1, !dbg !2119
  %80 = sext i8 %79 to i32, !dbg !2119
  %81 = icmp eq i32 %80, 96, !dbg !2120
  %82 = zext i1 %81 to i64, !dbg !2119
  %83 = select i1 %81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.66, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.67, i64 0, i64 0), !dbg !2119
  store i8* %83, i8** %11, align 8, !dbg !2121
  %84 = load i32, i32* @x.21
  %85 = load i32, i32* @y.22
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %141, !dbg !2121

92:                                               ; preds = %originalBBpart28
  %93 = load i8*, i8** %15, align 8, !dbg !2122
  %94 = call i32 @c_strcasecmp(i8* %93, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.68, i64 0, i64 0)) #13, !dbg !2122
  %95 = icmp eq i32 %94, 0, !dbg !2122
  br i1 %95, label %96, label %120, !dbg !2124

96:                                               ; preds = %92
  %97 = load i32, i32* @x.21
  %98 = load i32, i32* @y.22
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %96, %originalBB14alteredBB
  %105 = load i8*, i8** %12, align 8, !dbg !2125
  %106 = getelementptr inbounds i8, i8* %105, i64 0, !dbg !2125
  %107 = load i8, i8* %106, align 1, !dbg !2125
  %108 = sext i8 %107 to i32, !dbg !2125
  %109 = icmp eq i32 %108, 96, !dbg !2126
  %110 = zext i1 %109 to i64, !dbg !2125
  %111 = select i1 %109, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.69, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.70, i64 0, i64 0), !dbg !2125
  store i8* %111, i8** %11, align 8, !dbg !2127
  %112 = load i32, i32* @x.21
  %113 = load i32, i32* @y.22
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %141, !dbg !2127

120:                                              ; preds = %92
  %121 = load i32, i32* @x.21
  %122 = load i32, i32* @y.22
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %120, %originalBB18alteredBB
  %129 = load i32, i32* %13, align 4, !dbg !2128
  %130 = icmp eq i32 %129, 9, !dbg !2129
  %131 = zext i1 %130 to i64, !dbg !2128
  %132 = select i1 %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), !dbg !2128
  store i8* %132, i8** %11, align 8, !dbg !2130
  %133 = load i32, i32* @x.21
  %134 = load i32, i32* @y.22
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %141, !dbg !2130

141:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart212, %originalBBpart24
  %142 = load i32, i32* @x.21
  %143 = load i32, i32* @y.22
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %141, %originalBB22alteredBB
  %150 = load i8*, i8** %11, align 8, !dbg !2131
  %151 = load i32, i32* @x.21
  %152 = load i32, i32* @y.22
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i8* %150, !dbg !2131

originalBBalteredBB:                              ; preds = %originalBB, %2
  %159 = alloca i8*, align 8
  %160 = alloca i8*, align 8
  %161 = alloca i32, align 4
  %162 = alloca i8*, align 8
  %163 = alloca i8*, align 8
  store i8* %0, i8** %160, align 8
  call void @llvm.dbg.declare(metadata i8** %160, metadata !2132, metadata !DIExpression()), !dbg !2099
  store i32 %1, i32* %161, align 4
  call void @llvm.dbg.declare(metadata i32* %161, metadata !2164, metadata !DIExpression()), !dbg !2101
  call void @llvm.dbg.declare(metadata i8** %162, metadata !2165, metadata !DIExpression()), !dbg !2103
  %164 = load i8*, i8** %160, align 8, !dbg !2104
  %165 = call i8* @gettext(i8* %164) #10, !dbg !2104
  store i8* %165, i8** %162, align 8, !dbg !2103
  call void @llvm.dbg.declare(metadata i8** %163, metadata !2166, metadata !DIExpression()), !dbg !2106
  %166 = load i8*, i8** %162, align 8, !dbg !2107
  %167 = load i8*, i8** %160, align 8, !dbg !2109
  %168 = icmp ne i8* %166, %167, !dbg !2110
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %169 = load i8*, i8** %14, align 8, !dbg !2112
  store i8* %169, i8** %11, align 8, !dbg !2113
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %170 = call i8* @locale_charset(), !dbg !2114
  store i8* %170, i8** %15, align 8, !dbg !2115
  %171 = load i8*, i8** %15, align 8, !dbg !2116
  %172 = call i32 @c_strcasecmp(i8* %171, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.65, i64 0, i64 0)) #13, !dbg !2116
  %173 = icmp eq i32 %172, 0, !dbg !2116
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  %174 = load i8*, i8** %12, align 8, !dbg !2119
  %175 = getelementptr inbounds i8, i8* %174, i64 0, !dbg !2119
  %176 = load i8, i8* %175, align 1, !dbg !2119
  %177 = sext i8 %176 to i32, !dbg !2119
  %178 = icmp eq i32 %177, 96, !dbg !2120
  %179 = zext i1 %178 to i64, !dbg !2119
  %180 = select i1 %178, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.66, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.67, i64 0, i64 0), !dbg !2119
  store i8* %180, i8** %11, align 8, !dbg !2121
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %96
  %181 = load i8*, i8** %12, align 8, !dbg !2125
  %182 = getelementptr inbounds i8, i8* %181, i64 0, !dbg !2125
  %183 = load i8, i8* %182, align 1, !dbg !2125
  %184 = sext i8 %183 to i32, !dbg !2125
  %185 = icmp eq i32 %184, 96, !dbg !2126
  %186 = zext i1 %185 to i64, !dbg !2125
  %187 = select i1 %185, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.69, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.70, i64 0, i64 0), !dbg !2125
  store i8* %187, i8** %11, align 8, !dbg !2127
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %120
  %188 = load i32, i32* %13, align 4, !dbg !2128
  %189 = icmp eq i32 %188, 9, !dbg !2129
  %190 = zext i1 %189 to i64, !dbg !2128
  %191 = select i1 %189, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), !dbg !2128
  store i8* %191, i8** %11, align 8, !dbg !2130
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %141
  %192 = load i8*, i8** %11, align 8, !dbg !2131
  br label %originalBB22
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !2167 {
  %3 = load i32, i32* @x.23
  %4 = load i32, i32* @y.24
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2170, metadata !DIExpression()), !dbg !2171
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2172, metadata !DIExpression()), !dbg !2173
  %13 = load i8*, i8** %11, align 8, !dbg !2174
  %14 = load i8, i8* %12, align 1, !dbg !2175
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !2176
  %16 = load i32, i32* @x.23
  %17 = load i32, i32* @y.24
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2177

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2178, metadata !DIExpression()), !dbg !2171
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2210, metadata !DIExpression()), !dbg !2173
  %26 = load i8*, i8** %24, align 8, !dbg !2174
  %27 = load i8, i8* %25, align 1, !dbg !2175
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !2176
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !2211 {
  %2 = load i32, i32* @x.25
  %3 = load i32, i32* @y.26
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2214, metadata !DIExpression()), !dbg !2215
  %11 = load i8*, i8** %10, align 8, !dbg !2216
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !2217
  %13 = load i32, i32* @x.25
  %14 = load i32, i32* @y.26
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2218

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2219, metadata !DIExpression()), !dbg !2215
  %22 = load i8*, i8** %21, align 8, !dbg !2216
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !2217
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !2251 {
  %4 = load i32, i32* @x.27
  %5 = load i32, i32* @y.28
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2254, metadata !DIExpression()), !dbg !2255
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2256, metadata !DIExpression()), !dbg !2257
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2258, metadata !DIExpression()), !dbg !2259
  %15 = load i32, i32* %12, align 4, !dbg !2260
  %16 = load i8*, i8** %13, align 8, !dbg !2261
  %17 = load i64, i64* %14, align 8, !dbg !2262
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !2263
  %19 = load i32, i32* @x.27
  %20 = load i32, i32* @y.28
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !2264

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !2265, metadata !DIExpression()), !dbg !2255
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2297, metadata !DIExpression()), !dbg !2257
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !2298, metadata !DIExpression()), !dbg !2259
  %30 = load i32, i32* %27, align 4, !dbg !2260
  %31 = load i8*, i8** %28, align 8, !dbg !2261
  %32 = load i64, i64* %29, align 8, !dbg !2262
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !2263
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !2299 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !2302, metadata !DIExpression()), !dbg !2303
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2304, metadata !DIExpression()), !dbg !2305
  %5 = load i32, i32* %3, align 4, !dbg !2306
  %6 = load i8*, i8** %4, align 8, !dbg !2307
  %7 = call i8* @quote_n_mem(i32 %5, i8* %6, i64 -1), !dbg !2308
  ret i8* %7, !dbg !2309
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !2310 {
  %2 = load i32, i32* @x.31
  %3 = load i32, i32* @y.32
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2313, metadata !DIExpression()), !dbg !2314
  %11 = load i8*, i8** %10, align 8, !dbg !2315
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !2316
  %13 = load i32, i32* @x.31
  %14 = load i32, i32* @y.32
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2317

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2318, metadata !DIExpression()), !dbg !2314
  %22 = load i8*, i8** %21, align 8, !dbg !2315
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !2316
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !2350 {
  %7 = load i32, i32* @x.33
  %8 = load i32, i32* @y.34
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !2410, metadata !DIExpression()), !dbg !2411
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2412, metadata !DIExpression()), !dbg !2413
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2414, metadata !DIExpression()), !dbg !2415
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !2416, metadata !DIExpression()), !dbg !2417
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !2418, metadata !DIExpression()), !dbg !2419
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2420, metadata !DIExpression()), !dbg !2421
  %21 = load i8*, i8** %16, align 8, !dbg !2422
  %22 = icmp ne i8* %21, null, !dbg !2422
  %23 = load i32, i32* @x.33
  %24 = load i32, i32* @y.34
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %37, !dbg !2424

31:                                               ; preds = %originalBBpart2
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2425
  %33 = load i8*, i8** %16, align 8, !dbg !2426
  %34 = load i8*, i8** %17, align 8, !dbg !2427
  %35 = load i8*, i8** %18, align 8, !dbg !2428
  %36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.75, i64 0, i64 0), i8* %33, i8* %34, i8* %35), !dbg !2429
  br label %58, !dbg !2429

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.33
  %39 = load i32, i32* @y.34
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2430
  %47 = load i8*, i8** %17, align 8, !dbg !2431
  %48 = load i8*, i8** %18, align 8, !dbg !2432
  %49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.76, i64 0, i64 0), i8* %47, i8* %48), !dbg !2433
  %50 = load i32, i32* @x.33
  %51 = load i32, i32* @y.34
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %58

58:                                               ; preds = %originalBBpart24, %31
  %59 = load i32, i32* @x.33
  %60 = load i32, i32* @y.34
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2434
  %68 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.77, i64 0, i64 0)) #10, !dbg !2435
  %69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %68, i32 2020), !dbg !2436
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2437
  %71 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %70), !dbg !2437
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2438
  %73 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.79, i64 0, i64 0)) #10, !dbg !2439
  %74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* %73, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.80, i64 0, i64 0)), !dbg !2440
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2441
  %76 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %75), !dbg !2441
  %77 = load i64, i64* %20, align 8, !dbg !2442
  %78 = load i32, i32* @x.33
  %79 = load i32, i32* @y.34
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  switch i64 %77, label %370 [
    i64 0, label %86
    i64 1, label %103
    i64 2, label %126
    i64 3, label %136
    i64 4, label %165
    i64 5, label %181
    i64 6, label %216
    i64 7, label %254
    i64 8, label %295
    i64 9, label %323
  ], !dbg !2443

86:                                               ; preds = %originalBBpart28
  %87 = load i32, i32* @x.33
  %88 = load i32, i32* @y.34
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %86, %originalBB10alteredBB
  %95 = load i32, i32* @x.33
  %96 = load i32, i32* @y.34
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %417, !dbg !2444

103:                                              ; preds = %originalBBpart28
  %104 = load i32, i32* @x.33
  %105 = load i32, i32* @y.34
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %103, %originalBB14alteredBB
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2446
  %113 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.81, i64 0, i64 0)) #10, !dbg !2447
  %114 = load i8**, i8*** %19, align 8, !dbg !2448
  %115 = getelementptr inbounds i8*, i8** %114, i64 0, !dbg !2448
  %116 = load i8*, i8** %115, align 8, !dbg !2448
  %117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* %113, i8* %116), !dbg !2449
  %118 = load i32, i32* @x.33
  %119 = load i32, i32* @y.34
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %417, !dbg !2450

126:                                              ; preds = %originalBBpart28
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2451
  %128 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.82, i64 0, i64 0)) #10, !dbg !2452
  %129 = load i8**, i8*** %19, align 8, !dbg !2453
  %130 = getelementptr inbounds i8*, i8** %129, i64 0, !dbg !2453
  %131 = load i8*, i8** %130, align 8, !dbg !2453
  %132 = load i8**, i8*** %19, align 8, !dbg !2454
  %133 = getelementptr inbounds i8*, i8** %132, i64 1, !dbg !2454
  %134 = load i8*, i8** %133, align 8, !dbg !2454
  %135 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %127, i8* %128, i8* %131, i8* %134), !dbg !2455
  br label %417, !dbg !2456

136:                                              ; preds = %originalBBpart28
  %137 = load i32, i32* @x.33
  %138 = load i32, i32* @y.34
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %136, %originalBB18alteredBB
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2457
  %146 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.83, i64 0, i64 0)) #10, !dbg !2458
  %147 = load i8**, i8*** %19, align 8, !dbg !2459
  %148 = getelementptr inbounds i8*, i8** %147, i64 0, !dbg !2459
  %149 = load i8*, i8** %148, align 8, !dbg !2459
  %150 = load i8**, i8*** %19, align 8, !dbg !2460
  %151 = getelementptr inbounds i8*, i8** %150, i64 1, !dbg !2460
  %152 = load i8*, i8** %151, align 8, !dbg !2460
  %153 = load i8**, i8*** %19, align 8, !dbg !2461
  %154 = getelementptr inbounds i8*, i8** %153, i64 2, !dbg !2461
  %155 = load i8*, i8** %154, align 8, !dbg !2461
  %156 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %145, i8* %146, i8* %149, i8* %152, i8* %155), !dbg !2462
  %157 = load i32, i32* @x.33
  %158 = load i32, i32* @y.34
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %417, !dbg !2463

165:                                              ; preds = %originalBBpart28
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2464
  %167 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.84, i64 0, i64 0)) #10, !dbg !2465
  %168 = load i8**, i8*** %19, align 8, !dbg !2466
  %169 = getelementptr inbounds i8*, i8** %168, i64 0, !dbg !2466
  %170 = load i8*, i8** %169, align 8, !dbg !2466
  %171 = load i8**, i8*** %19, align 8, !dbg !2467
  %172 = getelementptr inbounds i8*, i8** %171, i64 1, !dbg !2467
  %173 = load i8*, i8** %172, align 8, !dbg !2467
  %174 = load i8**, i8*** %19, align 8, !dbg !2468
  %175 = getelementptr inbounds i8*, i8** %174, i64 2, !dbg !2468
  %176 = load i8*, i8** %175, align 8, !dbg !2468
  %177 = load i8**, i8*** %19, align 8, !dbg !2469
  %178 = getelementptr inbounds i8*, i8** %177, i64 3, !dbg !2469
  %179 = load i8*, i8** %178, align 8, !dbg !2469
  %180 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %166, i8* %167, i8* %170, i8* %173, i8* %176, i8* %179), !dbg !2470
  br label %417, !dbg !2471

181:                                              ; preds = %originalBBpart28
  %182 = load i32, i32* @x.33
  %183 = load i32, i32* @y.34
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %181, %originalBB22alteredBB
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2472
  %191 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.85, i64 0, i64 0)) #10, !dbg !2473
  %192 = load i8**, i8*** %19, align 8, !dbg !2474
  %193 = getelementptr inbounds i8*, i8** %192, i64 0, !dbg !2474
  %194 = load i8*, i8** %193, align 8, !dbg !2474
  %195 = load i8**, i8*** %19, align 8, !dbg !2475
  %196 = getelementptr inbounds i8*, i8** %195, i64 1, !dbg !2475
  %197 = load i8*, i8** %196, align 8, !dbg !2475
  %198 = load i8**, i8*** %19, align 8, !dbg !2476
  %199 = getelementptr inbounds i8*, i8** %198, i64 2, !dbg !2476
  %200 = load i8*, i8** %199, align 8, !dbg !2476
  %201 = load i8**, i8*** %19, align 8, !dbg !2477
  %202 = getelementptr inbounds i8*, i8** %201, i64 3, !dbg !2477
  %203 = load i8*, i8** %202, align 8, !dbg !2477
  %204 = load i8**, i8*** %19, align 8, !dbg !2478
  %205 = getelementptr inbounds i8*, i8** %204, i64 4, !dbg !2478
  %206 = load i8*, i8** %205, align 8, !dbg !2478
  %207 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %190, i8* %191, i8* %194, i8* %197, i8* %200, i8* %203, i8* %206), !dbg !2479
  %208 = load i32, i32* @x.33
  %209 = load i32, i32* @y.34
  %210 = sub i32 %208, 1
  %211 = mul i32 %208, %210
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %213, %214
  br i1 %215, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %417, !dbg !2480

216:                                              ; preds = %originalBBpart28
  %217 = load i32, i32* @x.33
  %218 = load i32, i32* @y.34
  %219 = sub i32 %217, 1
  %220 = mul i32 %217, %219
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %222, %223
  br i1 %224, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %216, %originalBB26alteredBB
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2481
  %226 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.86, i64 0, i64 0)) #10, !dbg !2482
  %227 = load i8**, i8*** %19, align 8, !dbg !2483
  %228 = getelementptr inbounds i8*, i8** %227, i64 0, !dbg !2483
  %229 = load i8*, i8** %228, align 8, !dbg !2483
  %230 = load i8**, i8*** %19, align 8, !dbg !2484
  %231 = getelementptr inbounds i8*, i8** %230, i64 1, !dbg !2484
  %232 = load i8*, i8** %231, align 8, !dbg !2484
  %233 = load i8**, i8*** %19, align 8, !dbg !2485
  %234 = getelementptr inbounds i8*, i8** %233, i64 2, !dbg !2485
  %235 = load i8*, i8** %234, align 8, !dbg !2485
  %236 = load i8**, i8*** %19, align 8, !dbg !2486
  %237 = getelementptr inbounds i8*, i8** %236, i64 3, !dbg !2486
  %238 = load i8*, i8** %237, align 8, !dbg !2486
  %239 = load i8**, i8*** %19, align 8, !dbg !2487
  %240 = getelementptr inbounds i8*, i8** %239, i64 4, !dbg !2487
  %241 = load i8*, i8** %240, align 8, !dbg !2487
  %242 = load i8**, i8*** %19, align 8, !dbg !2488
  %243 = getelementptr inbounds i8*, i8** %242, i64 5, !dbg !2488
  %244 = load i8*, i8** %243, align 8, !dbg !2488
  %245 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %225, i8* %226, i8* %229, i8* %232, i8* %235, i8* %238, i8* %241, i8* %244), !dbg !2489
  %246 = load i32, i32* @x.33
  %247 = load i32, i32* @y.34
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %417, !dbg !2490

254:                                              ; preds = %originalBBpart28
  %255 = load i32, i32* @x.33
  %256 = load i32, i32* @y.34
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %254, %originalBB30alteredBB
  %263 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2491
  %264 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.87, i64 0, i64 0)) #10, !dbg !2492
  %265 = load i8**, i8*** %19, align 8, !dbg !2493
  %266 = getelementptr inbounds i8*, i8** %265, i64 0, !dbg !2493
  %267 = load i8*, i8** %266, align 8, !dbg !2493
  %268 = load i8**, i8*** %19, align 8, !dbg !2494
  %269 = getelementptr inbounds i8*, i8** %268, i64 1, !dbg !2494
  %270 = load i8*, i8** %269, align 8, !dbg !2494
  %271 = load i8**, i8*** %19, align 8, !dbg !2495
  %272 = getelementptr inbounds i8*, i8** %271, i64 2, !dbg !2495
  %273 = load i8*, i8** %272, align 8, !dbg !2495
  %274 = load i8**, i8*** %19, align 8, !dbg !2496
  %275 = getelementptr inbounds i8*, i8** %274, i64 3, !dbg !2496
  %276 = load i8*, i8** %275, align 8, !dbg !2496
  %277 = load i8**, i8*** %19, align 8, !dbg !2497
  %278 = getelementptr inbounds i8*, i8** %277, i64 4, !dbg !2497
  %279 = load i8*, i8** %278, align 8, !dbg !2497
  %280 = load i8**, i8*** %19, align 8, !dbg !2498
  %281 = getelementptr inbounds i8*, i8** %280, i64 5, !dbg !2498
  %282 = load i8*, i8** %281, align 8, !dbg !2498
  %283 = load i8**, i8*** %19, align 8, !dbg !2499
  %284 = getelementptr inbounds i8*, i8** %283, i64 6, !dbg !2499
  %285 = load i8*, i8** %284, align 8, !dbg !2499
  %286 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %263, i8* %264, i8* %267, i8* %270, i8* %273, i8* %276, i8* %279, i8* %282, i8* %285), !dbg !2500
  %287 = load i32, i32* @x.33
  %288 = load i32, i32* @y.34
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %417, !dbg !2501

295:                                              ; preds = %originalBBpart28
  %296 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2502
  %297 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.88, i64 0, i64 0)) #10, !dbg !2503
  %298 = load i8**, i8*** %19, align 8, !dbg !2504
  %299 = getelementptr inbounds i8*, i8** %298, i64 0, !dbg !2504
  %300 = load i8*, i8** %299, align 8, !dbg !2504
  %301 = load i8**, i8*** %19, align 8, !dbg !2505
  %302 = getelementptr inbounds i8*, i8** %301, i64 1, !dbg !2505
  %303 = load i8*, i8** %302, align 8, !dbg !2505
  %304 = load i8**, i8*** %19, align 8, !dbg !2506
  %305 = getelementptr inbounds i8*, i8** %304, i64 2, !dbg !2506
  %306 = load i8*, i8** %305, align 8, !dbg !2506
  %307 = load i8**, i8*** %19, align 8, !dbg !2507
  %308 = getelementptr inbounds i8*, i8** %307, i64 3, !dbg !2507
  %309 = load i8*, i8** %308, align 8, !dbg !2507
  %310 = load i8**, i8*** %19, align 8, !dbg !2508
  %311 = getelementptr inbounds i8*, i8** %310, i64 4, !dbg !2508
  %312 = load i8*, i8** %311, align 8, !dbg !2508
  %313 = load i8**, i8*** %19, align 8, !dbg !2509
  %314 = getelementptr inbounds i8*, i8** %313, i64 5, !dbg !2509
  %315 = load i8*, i8** %314, align 8, !dbg !2509
  %316 = load i8**, i8*** %19, align 8, !dbg !2510
  %317 = getelementptr inbounds i8*, i8** %316, i64 6, !dbg !2510
  %318 = load i8*, i8** %317, align 8, !dbg !2510
  %319 = load i8**, i8*** %19, align 8, !dbg !2511
  %320 = getelementptr inbounds i8*, i8** %319, i64 7, !dbg !2511
  %321 = load i8*, i8** %320, align 8, !dbg !2511
  %322 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %296, i8* %297, i8* %300, i8* %303, i8* %306, i8* %309, i8* %312, i8* %315, i8* %318, i8* %321), !dbg !2512
  br label %417, !dbg !2513

323:                                              ; preds = %originalBBpart28
  %324 = load i32, i32* @x.33
  %325 = load i32, i32* @y.34
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %323, %originalBB34alteredBB
  %332 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2514
  %333 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.89, i64 0, i64 0)) #10, !dbg !2515
  %334 = load i8**, i8*** %19, align 8, !dbg !2516
  %335 = getelementptr inbounds i8*, i8** %334, i64 0, !dbg !2516
  %336 = load i8*, i8** %335, align 8, !dbg !2516
  %337 = load i8**, i8*** %19, align 8, !dbg !2517
  %338 = getelementptr inbounds i8*, i8** %337, i64 1, !dbg !2517
  %339 = load i8*, i8** %338, align 8, !dbg !2517
  %340 = load i8**, i8*** %19, align 8, !dbg !2518
  %341 = getelementptr inbounds i8*, i8** %340, i64 2, !dbg !2518
  %342 = load i8*, i8** %341, align 8, !dbg !2518
  %343 = load i8**, i8*** %19, align 8, !dbg !2519
  %344 = getelementptr inbounds i8*, i8** %343, i64 3, !dbg !2519
  %345 = load i8*, i8** %344, align 8, !dbg !2519
  %346 = load i8**, i8*** %19, align 8, !dbg !2520
  %347 = getelementptr inbounds i8*, i8** %346, i64 4, !dbg !2520
  %348 = load i8*, i8** %347, align 8, !dbg !2520
  %349 = load i8**, i8*** %19, align 8, !dbg !2521
  %350 = getelementptr inbounds i8*, i8** %349, i64 5, !dbg !2521
  %351 = load i8*, i8** %350, align 8, !dbg !2521
  %352 = load i8**, i8*** %19, align 8, !dbg !2522
  %353 = getelementptr inbounds i8*, i8** %352, i64 6, !dbg !2522
  %354 = load i8*, i8** %353, align 8, !dbg !2522
  %355 = load i8**, i8*** %19, align 8, !dbg !2523
  %356 = getelementptr inbounds i8*, i8** %355, i64 7, !dbg !2523
  %357 = load i8*, i8** %356, align 8, !dbg !2523
  %358 = load i8**, i8*** %19, align 8, !dbg !2524
  %359 = getelementptr inbounds i8*, i8** %358, i64 8, !dbg !2524
  %360 = load i8*, i8** %359, align 8, !dbg !2524
  %361 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %332, i8* %333, i8* %336, i8* %339, i8* %342, i8* %345, i8* %348, i8* %351, i8* %354, i8* %357, i8* %360), !dbg !2525
  %362 = load i32, i32* @x.33
  %363 = load i32, i32* @y.34
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %417, !dbg !2526

370:                                              ; preds = %originalBBpart28
  %371 = load i32, i32* @x.33
  %372 = load i32, i32* @y.34
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %370, %originalBB38alteredBB
  %379 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2527
  %380 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.90, i64 0, i64 0)) #10, !dbg !2528
  %381 = load i8**, i8*** %19, align 8, !dbg !2529
  %382 = getelementptr inbounds i8*, i8** %381, i64 0, !dbg !2529
  %383 = load i8*, i8** %382, align 8, !dbg !2529
  %384 = load i8**, i8*** %19, align 8, !dbg !2530
  %385 = getelementptr inbounds i8*, i8** %384, i64 1, !dbg !2530
  %386 = load i8*, i8** %385, align 8, !dbg !2530
  %387 = load i8**, i8*** %19, align 8, !dbg !2531
  %388 = getelementptr inbounds i8*, i8** %387, i64 2, !dbg !2531
  %389 = load i8*, i8** %388, align 8, !dbg !2531
  %390 = load i8**, i8*** %19, align 8, !dbg !2532
  %391 = getelementptr inbounds i8*, i8** %390, i64 3, !dbg !2532
  %392 = load i8*, i8** %391, align 8, !dbg !2532
  %393 = load i8**, i8*** %19, align 8, !dbg !2533
  %394 = getelementptr inbounds i8*, i8** %393, i64 4, !dbg !2533
  %395 = load i8*, i8** %394, align 8, !dbg !2533
  %396 = load i8**, i8*** %19, align 8, !dbg !2534
  %397 = getelementptr inbounds i8*, i8** %396, i64 5, !dbg !2534
  %398 = load i8*, i8** %397, align 8, !dbg !2534
  %399 = load i8**, i8*** %19, align 8, !dbg !2535
  %400 = getelementptr inbounds i8*, i8** %399, i64 6, !dbg !2535
  %401 = load i8*, i8** %400, align 8, !dbg !2535
  %402 = load i8**, i8*** %19, align 8, !dbg !2536
  %403 = getelementptr inbounds i8*, i8** %402, i64 7, !dbg !2536
  %404 = load i8*, i8** %403, align 8, !dbg !2536
  %405 = load i8**, i8*** %19, align 8, !dbg !2537
  %406 = getelementptr inbounds i8*, i8** %405, i64 8, !dbg !2537
  %407 = load i8*, i8** %406, align 8, !dbg !2537
  %408 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %379, i8* %380, i8* %383, i8* %386, i8* %389, i8* %392, i8* %395, i8* %398, i8* %401, i8* %404, i8* %407), !dbg !2538
  %409 = load i32, i32* @x.33
  %410 = load i32, i32* @y.34
  %411 = sub i32 %409, 1
  %412 = mul i32 %409, %411
  %413 = urem i32 %412, 2
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %414, %415
  br i1 %416, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %417, !dbg !2539

417:                                              ; preds = %originalBBpart240, %originalBBpart236, %295, %originalBBpart232, %originalBBpart228, %originalBBpart224, %165, %originalBBpart220, %126, %originalBBpart216, %originalBBpart212
  ret void, !dbg !2540

originalBBalteredBB:                              ; preds = %originalBB, %6
  %418 = alloca %struct._IO_FILE*, align 8
  %419 = alloca i8*, align 8
  %420 = alloca i8*, align 8
  %421 = alloca i8*, align 8
  %422 = alloca i8**, align 8
  %423 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %418, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %418, metadata !2541, metadata !DIExpression()), !dbg !2411
  store i8* %1, i8** %419, align 8
  call void @llvm.dbg.declare(metadata i8** %419, metadata !2580, metadata !DIExpression()), !dbg !2413
  store i8* %2, i8** %420, align 8
  call void @llvm.dbg.declare(metadata i8** %420, metadata !2581, metadata !DIExpression()), !dbg !2415
  store i8* %3, i8** %421, align 8
  call void @llvm.dbg.declare(metadata i8** %421, metadata !2582, metadata !DIExpression()), !dbg !2417
  store i8** %4, i8*** %422, align 8
  call void @llvm.dbg.declare(metadata i8*** %422, metadata !2583, metadata !DIExpression()), !dbg !2419
  store i64 %5, i64* %423, align 8
  call void @llvm.dbg.declare(metadata i64* %423, metadata !2584, metadata !DIExpression()), !dbg !2421
  %424 = load i8*, i8** %419, align 8, !dbg !2422
  %425 = icmp ne i8* %424, null, !dbg !2422
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %426 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2430
  %427 = load i8*, i8** %17, align 8, !dbg !2431
  %428 = load i8*, i8** %18, align 8, !dbg !2432
  %429 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %426, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.76, i64 0, i64 0), i8* %427, i8* %428), !dbg !2433
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  %430 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2434
  %431 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.77, i64 0, i64 0)) #10, !dbg !2435
  %432 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %430, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %431, i32 2020), !dbg !2436
  %433 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2437
  %434 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %433), !dbg !2437
  %435 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2438
  %436 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.79, i64 0, i64 0)) #10, !dbg !2439
  %437 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %435, i8* %436, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.80, i64 0, i64 0)), !dbg !2440
  %438 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2441
  %439 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %438), !dbg !2441
  %440 = load i64, i64* %20, align 8, !dbg !2442
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %86
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %103
  %441 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2446
  %442 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.81, i64 0, i64 0)) #10, !dbg !2447
  %443 = load i8**, i8*** %19, align 8, !dbg !2448
  %444 = getelementptr inbounds i8*, i8** %443, i64 0, !dbg !2448
  %445 = load i8*, i8** %444, align 8, !dbg !2448
  %446 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %441, i8* %442, i8* %445), !dbg !2449
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %136
  %447 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2457
  %448 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.83, i64 0, i64 0)) #10, !dbg !2458
  %449 = load i8**, i8*** %19, align 8, !dbg !2459
  %450 = getelementptr inbounds i8*, i8** %449, i64 0, !dbg !2459
  %451 = load i8*, i8** %450, align 8, !dbg !2459
  %452 = load i8**, i8*** %19, align 8, !dbg !2460
  %453 = getelementptr inbounds i8*, i8** %452, i64 1, !dbg !2460
  %454 = load i8*, i8** %453, align 8, !dbg !2460
  %455 = load i8**, i8*** %19, align 8, !dbg !2461
  %456 = getelementptr inbounds i8*, i8** %455, i64 2, !dbg !2461
  %457 = load i8*, i8** %456, align 8, !dbg !2461
  %458 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %447, i8* %448, i8* %451, i8* %454, i8* %457), !dbg !2462
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %181
  %459 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2472
  %460 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.85, i64 0, i64 0)) #10, !dbg !2473
  %461 = load i8**, i8*** %19, align 8, !dbg !2474
  %462 = getelementptr inbounds i8*, i8** %461, i64 0, !dbg !2474
  %463 = load i8*, i8** %462, align 8, !dbg !2474
  %464 = load i8**, i8*** %19, align 8, !dbg !2475
  %465 = getelementptr inbounds i8*, i8** %464, i64 1, !dbg !2475
  %466 = load i8*, i8** %465, align 8, !dbg !2475
  %467 = load i8**, i8*** %19, align 8, !dbg !2476
  %468 = getelementptr inbounds i8*, i8** %467, i64 2, !dbg !2476
  %469 = load i8*, i8** %468, align 8, !dbg !2476
  %470 = load i8**, i8*** %19, align 8, !dbg !2477
  %471 = getelementptr inbounds i8*, i8** %470, i64 3, !dbg !2477
  %472 = load i8*, i8** %471, align 8, !dbg !2477
  %473 = load i8**, i8*** %19, align 8, !dbg !2478
  %474 = getelementptr inbounds i8*, i8** %473, i64 4, !dbg !2478
  %475 = load i8*, i8** %474, align 8, !dbg !2478
  %476 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %459, i8* %460, i8* %463, i8* %466, i8* %469, i8* %472, i8* %475), !dbg !2479
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %216
  %477 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2481
  %478 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.86, i64 0, i64 0)) #10, !dbg !2482
  %479 = load i8**, i8*** %19, align 8, !dbg !2483
  %480 = getelementptr inbounds i8*, i8** %479, i64 0, !dbg !2483
  %481 = load i8*, i8** %480, align 8, !dbg !2483
  %482 = load i8**, i8*** %19, align 8, !dbg !2484
  %483 = getelementptr inbounds i8*, i8** %482, i64 1, !dbg !2484
  %484 = load i8*, i8** %483, align 8, !dbg !2484
  %485 = load i8**, i8*** %19, align 8, !dbg !2485
  %486 = getelementptr inbounds i8*, i8** %485, i64 2, !dbg !2485
  %487 = load i8*, i8** %486, align 8, !dbg !2485
  %488 = load i8**, i8*** %19, align 8, !dbg !2486
  %489 = getelementptr inbounds i8*, i8** %488, i64 3, !dbg !2486
  %490 = load i8*, i8** %489, align 8, !dbg !2486
  %491 = load i8**, i8*** %19, align 8, !dbg !2487
  %492 = getelementptr inbounds i8*, i8** %491, i64 4, !dbg !2487
  %493 = load i8*, i8** %492, align 8, !dbg !2487
  %494 = load i8**, i8*** %19, align 8, !dbg !2488
  %495 = getelementptr inbounds i8*, i8** %494, i64 5, !dbg !2488
  %496 = load i8*, i8** %495, align 8, !dbg !2488
  %497 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %477, i8* %478, i8* %481, i8* %484, i8* %487, i8* %490, i8* %493, i8* %496), !dbg !2489
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %254
  %498 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2491
  %499 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.87, i64 0, i64 0)) #10, !dbg !2492
  %500 = load i8**, i8*** %19, align 8, !dbg !2493
  %501 = getelementptr inbounds i8*, i8** %500, i64 0, !dbg !2493
  %502 = load i8*, i8** %501, align 8, !dbg !2493
  %503 = load i8**, i8*** %19, align 8, !dbg !2494
  %504 = getelementptr inbounds i8*, i8** %503, i64 1, !dbg !2494
  %505 = load i8*, i8** %504, align 8, !dbg !2494
  %506 = load i8**, i8*** %19, align 8, !dbg !2495
  %507 = getelementptr inbounds i8*, i8** %506, i64 2, !dbg !2495
  %508 = load i8*, i8** %507, align 8, !dbg !2495
  %509 = load i8**, i8*** %19, align 8, !dbg !2496
  %510 = getelementptr inbounds i8*, i8** %509, i64 3, !dbg !2496
  %511 = load i8*, i8** %510, align 8, !dbg !2496
  %512 = load i8**, i8*** %19, align 8, !dbg !2497
  %513 = getelementptr inbounds i8*, i8** %512, i64 4, !dbg !2497
  %514 = load i8*, i8** %513, align 8, !dbg !2497
  %515 = load i8**, i8*** %19, align 8, !dbg !2498
  %516 = getelementptr inbounds i8*, i8** %515, i64 5, !dbg !2498
  %517 = load i8*, i8** %516, align 8, !dbg !2498
  %518 = load i8**, i8*** %19, align 8, !dbg !2499
  %519 = getelementptr inbounds i8*, i8** %518, i64 6, !dbg !2499
  %520 = load i8*, i8** %519, align 8, !dbg !2499
  %521 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %498, i8* %499, i8* %502, i8* %505, i8* %508, i8* %511, i8* %514, i8* %517, i8* %520), !dbg !2500
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %323
  %522 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2514
  %523 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.89, i64 0, i64 0)) #10, !dbg !2515
  %524 = load i8**, i8*** %19, align 8, !dbg !2516
  %525 = getelementptr inbounds i8*, i8** %524, i64 0, !dbg !2516
  %526 = load i8*, i8** %525, align 8, !dbg !2516
  %527 = load i8**, i8*** %19, align 8, !dbg !2517
  %528 = getelementptr inbounds i8*, i8** %527, i64 1, !dbg !2517
  %529 = load i8*, i8** %528, align 8, !dbg !2517
  %530 = load i8**, i8*** %19, align 8, !dbg !2518
  %531 = getelementptr inbounds i8*, i8** %530, i64 2, !dbg !2518
  %532 = load i8*, i8** %531, align 8, !dbg !2518
  %533 = load i8**, i8*** %19, align 8, !dbg !2519
  %534 = getelementptr inbounds i8*, i8** %533, i64 3, !dbg !2519
  %535 = load i8*, i8** %534, align 8, !dbg !2519
  %536 = load i8**, i8*** %19, align 8, !dbg !2520
  %537 = getelementptr inbounds i8*, i8** %536, i64 4, !dbg !2520
  %538 = load i8*, i8** %537, align 8, !dbg !2520
  %539 = load i8**, i8*** %19, align 8, !dbg !2521
  %540 = getelementptr inbounds i8*, i8** %539, i64 5, !dbg !2521
  %541 = load i8*, i8** %540, align 8, !dbg !2521
  %542 = load i8**, i8*** %19, align 8, !dbg !2522
  %543 = getelementptr inbounds i8*, i8** %542, i64 6, !dbg !2522
  %544 = load i8*, i8** %543, align 8, !dbg !2522
  %545 = load i8**, i8*** %19, align 8, !dbg !2523
  %546 = getelementptr inbounds i8*, i8** %545, i64 7, !dbg !2523
  %547 = load i8*, i8** %546, align 8, !dbg !2523
  %548 = load i8**, i8*** %19, align 8, !dbg !2524
  %549 = getelementptr inbounds i8*, i8** %548, i64 8, !dbg !2524
  %550 = load i8*, i8** %549, align 8, !dbg !2524
  %551 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %522, i8* %523, i8* %526, i8* %529, i8* %532, i8* %535, i8* %538, i8* %541, i8* %544, i8* %547, i8* %550), !dbg !2525
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %370
  %552 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2527
  %553 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.90, i64 0, i64 0)) #10, !dbg !2528
  %554 = load i8**, i8*** %19, align 8, !dbg !2529
  %555 = getelementptr inbounds i8*, i8** %554, i64 0, !dbg !2529
  %556 = load i8*, i8** %555, align 8, !dbg !2529
  %557 = load i8**, i8*** %19, align 8, !dbg !2530
  %558 = getelementptr inbounds i8*, i8** %557, i64 1, !dbg !2530
  %559 = load i8*, i8** %558, align 8, !dbg !2530
  %560 = load i8**, i8*** %19, align 8, !dbg !2531
  %561 = getelementptr inbounds i8*, i8** %560, i64 2, !dbg !2531
  %562 = load i8*, i8** %561, align 8, !dbg !2531
  %563 = load i8**, i8*** %19, align 8, !dbg !2532
  %564 = getelementptr inbounds i8*, i8** %563, i64 3, !dbg !2532
  %565 = load i8*, i8** %564, align 8, !dbg !2532
  %566 = load i8**, i8*** %19, align 8, !dbg !2533
  %567 = getelementptr inbounds i8*, i8** %566, i64 4, !dbg !2533
  %568 = load i8*, i8** %567, align 8, !dbg !2533
  %569 = load i8**, i8*** %19, align 8, !dbg !2534
  %570 = getelementptr inbounds i8*, i8** %569, i64 5, !dbg !2534
  %571 = load i8*, i8** %570, align 8, !dbg !2534
  %572 = load i8**, i8*** %19, align 8, !dbg !2535
  %573 = getelementptr inbounds i8*, i8** %572, i64 6, !dbg !2535
  %574 = load i8*, i8** %573, align 8, !dbg !2535
  %575 = load i8**, i8*** %19, align 8, !dbg !2536
  %576 = getelementptr inbounds i8*, i8** %575, i64 7, !dbg !2536
  %577 = load i8*, i8** %576, align 8, !dbg !2536
  %578 = load i8**, i8*** %19, align 8, !dbg !2537
  %579 = getelementptr inbounds i8*, i8** %578, i64 8, !dbg !2537
  %580 = load i8*, i8** %579, align 8, !dbg !2537
  %581 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %552, i8* %553, i8* %556, i8* %559, i8* %562, i8* %565, i8* %568, i8* %571, i8* %574, i8* %577, i8* %580), !dbg !2538
  br label %originalBB38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !2585 {
  %6 = load i32, i32* @x.35
  %7 = load i32, i32* @y.36
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !2595, metadata !DIExpression()), !dbg !2596
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2597, metadata !DIExpression()), !dbg !2598
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2599, metadata !DIExpression()), !dbg !2600
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2601, metadata !DIExpression()), !dbg !2602
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !2603, metadata !DIExpression()), !dbg !2604
  call void @llvm.dbg.declare(metadata i64* %19, metadata !2605, metadata !DIExpression()), !dbg !2606
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !2607, metadata !DIExpression()), !dbg !2609
  store i64 0, i64* %19, align 8, !dbg !2610
  %21 = load i32, i32* @x.35
  %22 = load i32, i32* @y.36
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !2612

29:                                               ; preds = %originalBBpart243, %originalBBpart2
  %30 = load i32, i32* @x.35
  %31 = load i32, i32* @y.36
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !2613
  %39 = icmp ult i64 %38, 10, !dbg !2615
  %40 = load i32, i32* @x.35
  %41 = load i32, i32* @y.36
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %134, !dbg !2616

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.35
  %50 = load i32, i32* @y.36
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2617
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !2617
  %59 = load i32, i32* %58, align 8, !dbg !2617
  %60 = icmp ule i32 %59, 40, !dbg !2617
  %61 = load i32, i32* @x.35
  %62 = load i32, i32* @y.36
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !2617

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.35
  %71 = load i32, i32* @y.36
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2617
  %79 = load i8*, i8** %78, align 8, !dbg !2617
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !2617
  %81 = bitcast i8* %80 to i8**, !dbg !2617
  %82 = add i32 %59, 8, !dbg !2617
  store i32 %82, i32* %58, align 8, !dbg !2617
  %83 = load i32, i32* @x.35
  %84 = load i32, i32* @y.36
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart216, label %originalBB10alteredBB

originalBBpart216:                                ; preds = %originalBB10
  br label %112, !dbg !2617

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.35
  %93 = load i32, i32* @y.36
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %91, %originalBB18alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2617
  %101 = load i8*, i8** %100, align 8, !dbg !2617
  %102 = bitcast i8* %101 to i8**, !dbg !2617
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !2617
  store i8* %103, i8** %100, align 8, !dbg !2617
  %104 = load i32, i32* @x.35
  %105 = load i32, i32* @y.36
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %112, !dbg !2617

112:                                              ; preds = %originalBBpart220, %originalBBpart216
  %113 = phi i8** [ %81, %originalBBpart216 ], [ %102, %originalBBpart220 ], !dbg !2617
  %114 = load i32, i32* @x.35
  %115 = load i32, i32* @y.36
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %112, %originalBB22alteredBB
  %122 = load i8*, i8** %113, align 8, !dbg !2617
  %123 = load i64, i64* %19, align 8, !dbg !2618
  %124 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %123, !dbg !2619
  store i8* %122, i8** %124, align 8, !dbg !2620
  %125 = icmp ne i8* %122, null, !dbg !2621
  %126 = load i32, i32* @x.35
  %127 = load i32, i32* @y.36
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %134

134:                                              ; preds = %originalBBpart224, %originalBBpart24
  %135 = phi i1 [ false, %originalBBpart24 ], [ %125, %originalBBpart224 ], !dbg !2622
  %136 = load i32, i32* @x.35
  %137 = load i32, i32* @y.36
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %134, %originalBB26alteredBB
  %144 = load i32, i32* @x.35
  %145 = load i32, i32* @y.36
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %135, label %152, label %188, !dbg !2623

152:                                              ; preds = %originalBBpart228
  %153 = load i32, i32* @x.35
  %154 = load i32, i32* @y.36
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %152, %originalBB30alteredBB
  %161 = load i32, i32* @x.35
  %162 = load i32, i32* @y.36
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %169, !dbg !2623

169:                                              ; preds = %originalBBpart232
  %170 = load i32, i32* @x.35
  %171 = load i32, i32* @y.36
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %169, %originalBB34alteredBB
  %178 = load i64, i64* %19, align 8, !dbg !2624
  %179 = add i64 %178, 1, !dbg !2624
  store i64 %179, i64* %19, align 8, !dbg !2624
  %180 = load i32, i32* @x.35
  %181 = load i32, i32* @y.36
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart243, label %originalBB34alteredBB

originalBBpart243:                                ; preds = %originalBB34
  br label %29, !dbg !2625, !llvm.loop !2626

188:                                              ; preds = %originalBBpart228
  %189 = load i32, i32* @x.35
  %190 = load i32, i32* @y.36
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %188, %originalBB45alteredBB
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2628
  %198 = load i8*, i8** %15, align 8, !dbg !2629
  %199 = load i8*, i8** %16, align 8, !dbg !2630
  %200 = load i8*, i8** %17, align 8, !dbg !2631
  %201 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2632
  %202 = load i64, i64* %19, align 8, !dbg !2633
  call void @version_etc_arn(%struct._IO_FILE* %197, i8* %198, i8* %199, i8* %200, i8** %201, i64 %202), !dbg !2634
  %203 = load i32, i32* @x.35
  %204 = load i32, i32* @y.36
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  ret void, !dbg !2635

originalBBalteredBB:                              ; preds = %originalBB, %5
  %211 = alloca %struct._IO_FILE*, align 8
  %212 = alloca i8*, align 8
  %213 = alloca i8*, align 8
  %214 = alloca i8*, align 8
  %215 = alloca %struct.__va_list_tag*, align 8
  %216 = alloca i64, align 8
  %217 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %211, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %211, metadata !2636, metadata !DIExpression()), !dbg !2596
  store i8* %1, i8** %212, align 8
  call void @llvm.dbg.declare(metadata i8** %212, metadata !2682, metadata !DIExpression()), !dbg !2598
  store i8* %2, i8** %213, align 8
  call void @llvm.dbg.declare(metadata i8** %213, metadata !2683, metadata !DIExpression()), !dbg !2600
  store i8* %3, i8** %214, align 8
  call void @llvm.dbg.declare(metadata i8** %214, metadata !2684, metadata !DIExpression()), !dbg !2602
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %215, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %215, metadata !2685, metadata !DIExpression()), !dbg !2604
  call void @llvm.dbg.declare(metadata i64* %216, metadata !2686, metadata !DIExpression()), !dbg !2606
  call void @llvm.dbg.declare(metadata [10 x i8*]* %217, metadata !2687, metadata !DIExpression()), !dbg !2609
  store i64 0, i64* %216, align 8, !dbg !2610
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %218 = load i64, i64* %19, align 8, !dbg !2613
  %219 = icmp ult i64 %218, 10, !dbg !2615
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %220 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2617
  %221 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %220, i32 0, i32 0, !dbg !2617
  %222 = load i32, i32* %221, align 8, !dbg !2617
  %223 = icmp ule i32 %222, 40, !dbg !2617
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %224 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2617
  %225 = load i8*, i8** %224, align 8, !dbg !2617
  %226 = getelementptr i8, i8* %225, i32 %59, !dbg !2617
  %227 = bitcast i8* %226 to i8**, !dbg !2617
  %_ = sub i32 0, %59
  %gen = add i32 %_, 8
  %_11 = sub i32 0, %59
  %gen12 = add i32 %_11, 8
  %_13 = sub i32 %59, 8
  %gen14 = mul i32 %_13, 8
  %228 = add i32 %59, 8, !dbg !2617
  store i32 %228, i32* %58, align 8, !dbg !2617
  br label %originalBB10

originalBB18alteredBB:                            ; preds = %originalBB18, %91
  %229 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2617
  %230 = load i8*, i8** %229, align 8, !dbg !2617
  %231 = bitcast i8* %230 to i8**, !dbg !2617
  %232 = getelementptr i8, i8* %230, i32 8, !dbg !2617
  store i8* %232, i8** %229, align 8, !dbg !2617
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %112
  %233 = load i8*, i8** %113, align 8, !dbg !2617
  %234 = load i64, i64* %19, align 8, !dbg !2618
  %235 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %234, !dbg !2619
  store i8* %233, i8** %235, align 8, !dbg !2620
  %236 = icmp ne i8* %233, null, !dbg !2621
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %134
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %152
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %169
  %237 = load i64, i64* %19, align 8, !dbg !2624
  %_35 = sub i64 %237, 1
  %gen36 = mul i64 %_35, 1
  %_37 = shl i64 %237, 1
  %_38 = sub i64 0, %237
  %gen39 = add i64 %_38, 1
  %_40 = sub i64 0, %237
  %gen41 = add i64 %_40, 1
  %238 = add i64 %237, 1, !dbg !2624
  store i64 %238, i64* %19, align 8, !dbg !2624
  br label %originalBB34

originalBB45alteredBB:                            ; preds = %originalBB45, %188
  %239 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2628
  %240 = load i8*, i8** %15, align 8, !dbg !2629
  %241 = load i8*, i8** %16, align 8, !dbg !2630
  %242 = load i8*, i8** %17, align 8, !dbg !2631
  %243 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2632
  %244 = load i64, i64* %19, align 8, !dbg !2633
  call void @version_etc_arn(%struct._IO_FILE* %239, i8* %240, i8* %241, i8* %242, i8** %243, i64 %244), !dbg !2634
  br label %originalBB45
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !2688 {
  %5 = load i32, i32* @x.37
  %6 = load i32, i32* @y.38
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !2691, metadata !DIExpression()), !dbg !2692
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2693, metadata !DIExpression()), !dbg !2694
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2695, metadata !DIExpression()), !dbg !2696
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2697, metadata !DIExpression()), !dbg !2698
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !2699, metadata !DIExpression()), !dbg !2706
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2707
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !2707
  call void @llvm.va_start(i8* %19), !dbg !2707
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !2708
  %21 = load i8*, i8** %14, align 8, !dbg !2709
  %22 = load i8*, i8** %15, align 8, !dbg !2710
  %23 = load i8*, i8** %16, align 8, !dbg !2711
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2712
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !2713
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2714
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !2714
  call void @llvm.va_end(i8* %26), !dbg !2714
  %27 = load i32, i32* @x.37
  %28 = load i32, i32* @y.38
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2715

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !2716, metadata !DIExpression()), !dbg !2692
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !2755, metadata !DIExpression()), !dbg !2694
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !2756, metadata !DIExpression()), !dbg !2696
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !2757, metadata !DIExpression()), !dbg !2698
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !2758, metadata !DIExpression()), !dbg !2706
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2707
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !2707
  call void @llvm.va_start(i8* %41), !dbg !2707
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !2708
  %43 = load i8*, i8** %36, align 8, !dbg !2709
  %44 = load i8*, i8** %37, align 8, !dbg !2710
  %45 = load i8*, i8** %38, align 8, !dbg !2711
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2712
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !2713
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2714
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !2714
  call void @llvm.va_end(i8* %48), !dbg !2714
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !2769 {
  %2 = load i32, i32* @x.39
  %3 = load i32, i32* @y.40
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2773, metadata !DIExpression()), !dbg !2774
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2775, metadata !DIExpression()), !dbg !2776
  %12 = load i64, i64* %10, align 8, !dbg !2777
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !2778
  store i8* %13, i8** %11, align 8, !dbg !2776
  %14 = load i8*, i8** %11, align 8, !dbg !2779
  %15 = icmp ne i8* %14, null, !dbg !2779
  %16 = load i32, i32* @x.39
  %17 = load i32, i32* @y.40
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %44, label %24, !dbg !2781

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.39
  %26 = load i32, i32* @y.40
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !2782
  %34 = icmp ne i64 %33, 0, !dbg !2783
  %35 = load i32, i32* @x.39
  %36 = load i32, i32* @y.40
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %44, !dbg !2784

43:                                               ; preds = %originalBBpart24
  call void @xalloc_die() #15, !dbg !2785
  unreachable, !dbg !2785

44:                                               ; preds = %originalBBpart24, %originalBBpart2
  %45 = load i32, i32* @x.39
  %46 = load i32, i32* @y.40
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = load i8*, i8** %11, align 8, !dbg !2786
  %54 = load i32, i32* @x.39
  %55 = load i32, i32* @y.40
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %53, !dbg !2787

originalBBalteredBB:                              ; preds = %originalBB, %1
  %62 = alloca i64, align 8
  %63 = alloca i8*, align 8
  store i64 %0, i64* %62, align 8
  call void @llvm.dbg.declare(metadata i64* %62, metadata !2788, metadata !DIExpression()), !dbg !2774
  call void @llvm.dbg.declare(metadata i8** %63, metadata !2791, metadata !DIExpression()), !dbg !2776
  %64 = load i64, i64* %62, align 8, !dbg !2777
  %65 = call noalias i8* @malloc(i64 %64) #10, !dbg !2778
  store i8* %65, i8** %63, align 8, !dbg !2776
  %66 = load i8*, i8** %63, align 8, !dbg !2779
  %67 = icmp ne i8* %66, null, !dbg !2779
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %68 = load i64, i64* %10, align 8, !dbg !2782
  %69 = icmp ne i64 %68, 0, !dbg !2783
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %70 = load i8*, i8** %11, align 8, !dbg !2786
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !2792 {
  %3 = load i32, i32* @x.41
  %4 = load i32, i32* @y.42
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2795, metadata !DIExpression()), !dbg !2796
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2797, metadata !DIExpression()), !dbg !2798
  %14 = load i64, i64* %13, align 8, !dbg !2799
  %15 = icmp ne i64 %14, 0, !dbg !2799
  %16 = load i32, i32* @x.41
  %17 = load i32, i32* @y.42
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %61, label %24, !dbg !2801

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.41
  %26 = load i32, i32* @y.42
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !2802
  %34 = icmp ne i8* %33, null, !dbg !2802
  %35 = load i32, i32* @x.41
  %36 = load i32, i32* @y.42
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %61, !dbg !2803

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.41
  %45 = load i32, i32* @y.42
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i8*, i8** %12, align 8, !dbg !2804
  call void @free(i8* %52) #10, !dbg !2806
  store i8* null, i8** %11, align 8, !dbg !2807
  %53 = load i32, i32* @x.41
  %54 = load i32, i32* @y.42
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %121, !dbg !2807

61:                                               ; preds = %originalBBpart24, %originalBBpart2
  %62 = load i8*, i8** %12, align 8, !dbg !2808
  %63 = load i64, i64* %13, align 8, !dbg !2809
  %64 = call i8* @realloc(i8* %62, i64 %63) #10, !dbg !2810
  store i8* %64, i8** %12, align 8, !dbg !2811
  %65 = load i8*, i8** %12, align 8, !dbg !2812
  %66 = icmp ne i8* %65, null, !dbg !2812
  br i1 %66, label %103, label %67, !dbg !2814

67:                                               ; preds = %61
  %68 = load i32, i32* @x.41
  %69 = load i32, i32* @y.42
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %76 = load i64, i64* %13, align 8, !dbg !2815
  %77 = icmp ne i64 %76, 0, !dbg !2815
  %78 = load i32, i32* @x.41
  %79 = load i32, i32* @y.42
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %77, label %86, label %103, !dbg !2816

86:                                               ; preds = %originalBBpart212
  %87 = load i32, i32* @x.41
  %88 = load i32, i32* @y.42
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %86, %originalBB14alteredBB
  call void @xalloc_die() #15, !dbg !2817
  %95 = load i32, i32* @x.41
  %96 = load i32, i32* @y.42
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !2817

103:                                              ; preds = %originalBBpart212, %61
  %104 = load i32, i32* @x.41
  %105 = load i32, i32* @y.42
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %103, %originalBB18alteredBB
  %112 = load i8*, i8** %12, align 8, !dbg !2818
  store i8* %112, i8** %11, align 8, !dbg !2819
  %113 = load i32, i32* @x.41
  %114 = load i32, i32* @y.42
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %121, !dbg !2819

121:                                              ; preds = %originalBBpart220, %originalBBpart28
  %122 = load i32, i32* @x.41
  %123 = load i32, i32* @y.42
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %121, %originalBB22alteredBB
  %130 = load i8*, i8** %11, align 8, !dbg !2820
  %131 = load i32, i32* @x.41
  %132 = load i32, i32* @y.42
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i8* %130, !dbg !2820

originalBBalteredBB:                              ; preds = %originalBB, %2
  %139 = alloca i8*, align 8
  %140 = alloca i8*, align 8
  %141 = alloca i64, align 8
  store i8* %0, i8** %140, align 8
  call void @llvm.dbg.declare(metadata i8** %140, metadata !2821, metadata !DIExpression()), !dbg !2796
  store i64 %1, i64* %141, align 8
  call void @llvm.dbg.declare(metadata i64* %141, metadata !2824, metadata !DIExpression()), !dbg !2798
  %142 = load i64, i64* %141, align 8, !dbg !2799
  %143 = icmp ne i64 %142, 0, !dbg !2799
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %144 = load i8*, i8** %12, align 8, !dbg !2802
  %145 = icmp ne i8* %144, null, !dbg !2802
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %146 = load i8*, i8** %12, align 8, !dbg !2804
  call void @free(i8* %146) #10, !dbg !2806
  store i8* null, i8** %11, align 8, !dbg !2807
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %147 = load i64, i64* %13, align 8, !dbg !2815
  %148 = icmp ne i64 %147, 0, !dbg !2815
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %86
  call void @xalloc_die() #15, !dbg !2817
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %103
  %149 = load i8*, i8** %12, align 8, !dbg !2818
  store i8* %149, i8** %11, align 8, !dbg !2819
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %121
  %150 = load i8*, i8** %11, align 8, !dbg !2820
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !2825 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !2829, metadata !DIExpression()), !dbg !2830
  %3 = load i64, i64* %2, align 8, !dbg !2831
  %4 = call noalias i8* @xmalloc(i64 %3), !dbg !2831
  ret i8* %4, !dbg !2832
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !2833 {
  %1 = load i32, i32* @x.45
  %2 = load i32, i32* @y.46
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !2835
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.101, i64 0, i64 0)) #10, !dbg !2836
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.102, i64 0, i64 0), i8* %10), !dbg !2837
  call void @abort() #12, !dbg !2838
  %11 = load i32, i32* @x.45
  %12 = load i32, i32* @y.46
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !2838

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !2835
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.101, i64 0, i64 0)) #10, !dbg !2836
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.102, i64 0, i64 0), i8* %20), !dbg !2837
  call void @abort() #12, !dbg !2838
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !2839 {
  %5 = load i32, i32* @x.47
  %6 = load i32, i32* @y.48
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !2855, metadata !DIExpression()), !dbg !2856
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2857, metadata !DIExpression()), !dbg !2858
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !2859, metadata !DIExpression()), !dbg !2860
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !2861, metadata !DIExpression()), !dbg !2862
  call void @llvm.dbg.declare(metadata i64* %18, metadata !2863, metadata !DIExpression()), !dbg !2864
  call void @llvm.dbg.declare(metadata i32* %19, metadata !2865, metadata !DIExpression()), !dbg !2866
  %21 = load i32*, i32** %14, align 8, !dbg !2867
  %22 = icmp ne i32* %21, null, !dbg !2867
  %23 = load i32, i32* @x.47
  %24 = load i32, i32* @y.48
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !2869

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.47
  %33 = load i32, i32* @y.48
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !2870
  %40 = load i32, i32* @x.47
  %41 = load i32, i32* @y.48
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !2871

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.47
  %50 = load i32, i32* @y.48
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !2872
  %58 = load i8*, i8** %15, align 8, !dbg !2873
  %59 = load i64, i64* %16, align 8, !dbg !2874
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2875
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !2876
  store i64 %61, i64* %18, align 8, !dbg !2877
  %62 = load i64, i64* %18, align 8, !dbg !2878
  %63 = icmp ule i64 -2, %62, !dbg !2880
  %64 = load i32, i32* @x.47
  %65 = load i32, i32* @y.48
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %131, !dbg !2881

72:                                               ; preds = %originalBBpart28
  %73 = load i32, i32* @x.47
  %74 = load i32, i32* @y.48
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %72, %originalBB10alteredBB
  %81 = load i64, i64* %16, align 8, !dbg !2882
  %82 = icmp ne i64 %81, 0, !dbg !2883
  %83 = load i32, i32* @x.47
  %84 = load i32, i32* @y.48
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %131, !dbg !2884

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.47
  %93 = load i32, i32* @y.48
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call zeroext i1 @hard_locale(i32 0), !dbg !2885
  %101 = load i32, i32* @x.47
  %102 = load i32, i32* @y.48
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %100, label %131, label %109, !dbg !2886

109:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8* %20, metadata !2887, metadata !DIExpression()), !dbg !2889
  %110 = load i32, i32* @x.47
  %111 = load i32, i32* @y.48
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = load i8*, i8** %15, align 8, !dbg !2890
  %119 = load i8, i8* %118, align 1, !dbg !2891
  store i8 %119, i8* %20, align 1, !dbg !2889
  %120 = load i8, i8* %20, align 1, !dbg !2892
  %121 = zext i8 %120 to i32, !dbg !2892
  %122 = load i32*, i32** %14, align 8, !dbg !2893
  store i32 %121, i32* %122, align 4, !dbg !2894
  store i64 1, i64* %13, align 8, !dbg !2895
  %123 = load i32, i32* @x.47
  %124 = load i32, i32* @y.48
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %149, !dbg !2895

131:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %132 = load i32, i32* @x.47
  %133 = load i32, i32* @y.48
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i64, i64* %18, align 8, !dbg !2896
  store i64 %140, i64* %13, align 8, !dbg !2897
  %141 = load i32, i32* @x.47
  %142 = load i32, i32* @y.48
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %149, !dbg !2897

149:                                              ; preds = %originalBBpart224, %originalBBpart220
  %150 = load i32, i32* @x.47
  %151 = load i32, i32* @y.48
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  %158 = load i64, i64* %13, align 8, !dbg !2898
  %159 = load i32, i32* @x.47
  %160 = load i32, i32* @y.48
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i64 %158, !dbg !2898

originalBBalteredBB:                              ; preds = %originalBB, %4
  %167 = alloca i64, align 8
  %168 = alloca i32*, align 8
  %169 = alloca i8*, align 8
  %170 = alloca i64, align 8
  %171 = alloca %struct.__mbstate_t*, align 8
  %172 = alloca i64, align 8
  %173 = alloca i32, align 4
  %174 = alloca i8, align 1
  store i32* %0, i32** %168, align 8
  call void @llvm.dbg.declare(metadata i32** %168, metadata !2899, metadata !DIExpression()), !dbg !2856
  store i8* %1, i8** %169, align 8
  call void @llvm.dbg.declare(metadata i8** %169, metadata !2915, metadata !DIExpression()), !dbg !2858
  store i64 %2, i64* %170, align 8
  call void @llvm.dbg.declare(metadata i64* %170, metadata !2916, metadata !DIExpression()), !dbg !2860
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %171, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %171, metadata !2917, metadata !DIExpression()), !dbg !2862
  call void @llvm.dbg.declare(metadata i64* %172, metadata !2918, metadata !DIExpression()), !dbg !2864
  call void @llvm.dbg.declare(metadata i32* %173, metadata !2919, metadata !DIExpression()), !dbg !2866
  %175 = load i32*, i32** %168, align 8, !dbg !2867
  %176 = icmp ne i32* %175, null, !dbg !2867
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !2870
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %177 = load i32*, i32** %14, align 8, !dbg !2872
  %178 = load i8*, i8** %15, align 8, !dbg !2873
  %179 = load i64, i64* %16, align 8, !dbg !2874
  %180 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2875
  %181 = call i64 @mbrtowc(i32* %177, i8* %178, i64 %179, %struct.__mbstate_t* %180) #10, !dbg !2876
  store i64 %181, i64* %18, align 8, !dbg !2877
  %182 = load i64, i64* %18, align 8, !dbg !2878
  %183 = icmp ule i64 -2, %182, !dbg !2880
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %72
  %184 = load i64, i64* %16, align 8, !dbg !2882
  %185 = icmp ne i64 %184, 0, !dbg !2883
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %186 = call zeroext i1 @hard_locale(i32 0), !dbg !2885
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %187 = load i8*, i8** %15, align 8, !dbg !2890
  %188 = load i8, i8* %187, align 1, !dbg !2891
  store i8 %188, i8* %20, align 1, !dbg !2889
  %189 = load i8, i8* %20, align 1, !dbg !2892
  %190 = zext i8 %189 to i32, !dbg !2892
  %191 = load i32*, i32** %14, align 8, !dbg !2893
  store i32 %190, i32* %191, align 4, !dbg !2894
  store i64 1, i64* %13, align 8, !dbg !2895
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %192 = load i64, i64* %18, align 8, !dbg !2896
  store i64 %192, i64* %13, align 8, !dbg !2897
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  %193 = load i64, i64* %13, align 8, !dbg !2898
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !2920 {
  %3 = load i32, i32* @x.49
  %4 = load i32, i32* @y.50
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2924, metadata !DIExpression()), !dbg !2925
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2926, metadata !DIExpression()), !dbg !2927
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2928, metadata !DIExpression()), !dbg !2929
  %18 = load i8*, i8** %12, align 8, !dbg !2930
  store i8* %18, i8** %14, align 8, !dbg !2929
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2931, metadata !DIExpression()), !dbg !2932
  %19 = load i8*, i8** %13, align 8, !dbg !2933
  store i8* %19, i8** %15, align 8, !dbg !2932
  call void @llvm.dbg.declare(metadata i8* %16, metadata !2934, metadata !DIExpression()), !dbg !2935
  call void @llvm.dbg.declare(metadata i8* %17, metadata !2936, metadata !DIExpression()), !dbg !2937
  %20 = load i8*, i8** %14, align 8, !dbg !2938
  %21 = load i8*, i8** %15, align 8, !dbg !2940
  %22 = icmp eq i8* %20, %21, !dbg !2941
  %23 = load i32, i32* @x.49
  %24 = load i32, i32* @y.50
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !2942

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.49
  %33 = load i32, i32* @y.50
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !2943
  %40 = load i32, i32* @x.49
  %41 = load i32, i32* @y.50
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %113, !dbg !2943

48:                                               ; preds = %originalBBpart2
  br label %49, !dbg !2944

49:                                               ; preds = %101, %48
  %50 = load i8*, i8** %14, align 8, !dbg !2945
  %51 = load i8, i8* %50, align 1, !dbg !2947
  %52 = zext i8 %51 to i32, !dbg !2947
  %53 = call i32 @c_tolower(i32 %52), !dbg !2948
  %54 = trunc i32 %53 to i8, !dbg !2948
  store i8 %54, i8* %16, align 1, !dbg !2949
  %55 = load i8*, i8** %15, align 8, !dbg !2950
  %56 = load i8, i8* %55, align 1, !dbg !2951
  %57 = zext i8 %56 to i32, !dbg !2951
  %58 = call i32 @c_tolower(i32 %57), !dbg !2952
  %59 = trunc i32 %58 to i8, !dbg !2952
  store i8 %59, i8* %17, align 1, !dbg !2953
  %60 = load i8, i8* %16, align 1, !dbg !2954
  %61 = zext i8 %60 to i32, !dbg !2954
  %62 = icmp eq i32 %61, 0, !dbg !2956
  br i1 %62, label %63, label %80, !dbg !2957

63:                                               ; preds = %49
  %64 = load i32, i32* @x.49
  %65 = load i32, i32* @y.50
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  %72 = load i32, i32* @x.49
  %73 = load i32, i32* @y.50
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %107, !dbg !2958

80:                                               ; preds = %49
  %81 = load i32, i32* @x.49
  %82 = load i32, i32* @y.50
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %89 = load i8*, i8** %14, align 8, !dbg !2959
  %90 = getelementptr inbounds i8, i8* %89, i32 1, !dbg !2959
  store i8* %90, i8** %14, align 8, !dbg !2959
  %91 = load i8*, i8** %15, align 8, !dbg !2960
  %92 = getelementptr inbounds i8, i8* %91, i32 1, !dbg !2960
  store i8* %92, i8** %15, align 8, !dbg !2960
  %93 = load i32, i32* @x.49
  %94 = load i32, i32* @y.50
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %101, !dbg !2961

101:                                              ; preds = %originalBBpart212
  %102 = load i8, i8* %16, align 1, !dbg !2962
  %103 = zext i8 %102 to i32, !dbg !2962
  %104 = load i8, i8* %17, align 1, !dbg !2963
  %105 = zext i8 %104 to i32, !dbg !2963
  %106 = icmp eq i32 %103, %105, !dbg !2964
  br i1 %106, label %49, label %107, !dbg !2961, !llvm.loop !2965

107:                                              ; preds = %101, %originalBBpart28
  %108 = load i8, i8* %16, align 1, !dbg !2967
  %109 = zext i8 %108 to i32, !dbg !2967
  %110 = load i8, i8* %17, align 1, !dbg !2969
  %111 = zext i8 %110 to i32, !dbg !2969
  %112 = sub nsw i32 %109, %111, !dbg !2970
  store i32 %112, i32* %11, align 4, !dbg !2971
  br label %113, !dbg !2971

113:                                              ; preds = %107, %originalBBpart24
  %114 = load i32, i32* @x.49
  %115 = load i32, i32* @y.50
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %113, %originalBB14alteredBB
  %122 = load i32, i32* %11, align 4, !dbg !2972
  %123 = load i32, i32* @x.49
  %124 = load i32, i32* @y.50
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %122, !dbg !2972

originalBBalteredBB:                              ; preds = %originalBB, %2
  %131 = alloca i32, align 4
  %132 = alloca i8*, align 8
  %133 = alloca i8*, align 8
  %134 = alloca i8*, align 8
  %135 = alloca i8*, align 8
  %136 = alloca i8, align 1
  %137 = alloca i8, align 1
  store i8* %0, i8** %132, align 8
  call void @llvm.dbg.declare(metadata i8** %132, metadata !2973, metadata !DIExpression()), !dbg !2925
  store i8* %1, i8** %133, align 8
  call void @llvm.dbg.declare(metadata i8** %133, metadata !2976, metadata !DIExpression()), !dbg !2927
  call void @llvm.dbg.declare(metadata i8** %134, metadata !2977, metadata !DIExpression()), !dbg !2929
  %138 = load i8*, i8** %132, align 8, !dbg !2930
  store i8* %138, i8** %134, align 8, !dbg !2929
  call void @llvm.dbg.declare(metadata i8** %135, metadata !2978, metadata !DIExpression()), !dbg !2932
  %139 = load i8*, i8** %133, align 8, !dbg !2933
  store i8* %139, i8** %135, align 8, !dbg !2932
  call void @llvm.dbg.declare(metadata i8* %136, metadata !2979, metadata !DIExpression()), !dbg !2935
  call void @llvm.dbg.declare(metadata i8* %137, metadata !2980, metadata !DIExpression()), !dbg !2937
  %140 = load i8*, i8** %134, align 8, !dbg !2938
  %141 = load i8*, i8** %135, align 8, !dbg !2940
  %142 = icmp eq i8* %140, %141, !dbg !2941
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !2943
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  %143 = load i8*, i8** %14, align 8, !dbg !2959
  %144 = getelementptr inbounds i8, i8* %143, i32 1, !dbg !2959
  store i8* %144, i8** %14, align 8, !dbg !2959
  %145 = load i8*, i8** %15, align 8, !dbg !2960
  %146 = getelementptr inbounds i8, i8* %145, i32 1, !dbg !2960
  store i8* %146, i8** %15, align 8, !dbg !2960
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %113
  %147 = load i32, i32* %11, align 4, !dbg !2972
  br label %originalBB14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !2981 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3019, metadata !DIExpression()), !dbg !3020
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3021, metadata !DIExpression()), !dbg !3023
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3024
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !3025
  %17 = icmp ne i64 %16, 0, !dbg !3026
  %18 = zext i1 %17 to i8, !dbg !3023
  store i8 %18, i8* %12, align 1, !dbg !3023
  call void @llvm.dbg.declare(metadata i8* %13, metadata !3027, metadata !DIExpression()), !dbg !3028
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3029
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !3029
  %21 = icmp ne i32 %20, 0, !dbg !3030
  %22 = zext i1 %21 to i8, !dbg !3028
  store i8 %22, i8* %13, align 1, !dbg !3028
  call void @llvm.dbg.declare(metadata i8* %14, metadata !3031, metadata !DIExpression()), !dbg !3032
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3033
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !3034
  %25 = icmp ne i32 %24, 0, !dbg !3035
  %26 = zext i1 %25 to i8, !dbg !3032
  store i8 %26, i8* %14, align 1, !dbg !3032
  %27 = load i8, i8* %13, align 1, !dbg !3036
  %28 = trunc i8 %27 to i1, !dbg !3036
  %29 = load i32, i32* @x.51
  %30 = load i32, i32* @y.52
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %95, label %37, !dbg !3038

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.51
  %39 = load i32, i32* @y.52
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !3039
  %47 = trunc i8 %46 to i1, !dbg !3039
  %48 = load i32, i32* @x.51
  %49 = load i32, i32* @y.52
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %149, !dbg !3040

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.51
  %58 = load i32, i32* @y.52
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !3041
  %66 = trunc i8 %65 to i1, !dbg !3041
  %67 = load i32, i32* @x.51
  %68 = load i32, i32* @y.52
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %95, label %75, !dbg !3042

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.51
  %77 = load i32, i32* @y.52
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call i32* @__errno_location() #14, !dbg !3043
  %85 = load i32, i32* %84, align 4, !dbg !3043
  %86 = icmp ne i32 %85, 9, !dbg !3044
  %87 = load i32, i32* @x.51
  %88 = load i32, i32* @y.52
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %149, !dbg !3045

95:                                               ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart2
  %96 = load i32, i32* @x.51
  %97 = load i32, i32* @y.52
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i8, i8* %14, align 1, !dbg !3046
  %105 = trunc i8 %104 to i1, !dbg !3046
  %106 = load i32, i32* @x.51
  %107 = load i32, i32* @y.52
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %105, label %132, label %114, !dbg !3049

114:                                              ; preds = %originalBBpart216
  %115 = load i32, i32* @x.51
  %116 = load i32, i32* @y.52
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  %123 = call i32* @__errno_location() #14, !dbg !3050
  store i32 0, i32* %123, align 4, !dbg !3051
  %124 = load i32, i32* @x.51
  %125 = load i32, i32* @y.52
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %132, !dbg !3050

132:                                              ; preds = %originalBBpart220, %originalBBpart216
  %133 = load i32, i32* @x.51
  %134 = load i32, i32* @y.52
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %132, %originalBB22alteredBB
  store i32 -1, i32* %10, align 4, !dbg !3052
  %141 = load i32, i32* @x.51
  %142 = load i32, i32* @y.52
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %166, !dbg !3052

149:                                              ; preds = %originalBBpart212, %originalBBpart24
  %150 = load i32, i32* @x.51
  %151 = load i32, i32* @y.52
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  store i32 0, i32* %10, align 4, !dbg !3053
  %158 = load i32, i32* @x.51
  %159 = load i32, i32* @y.52
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !3053

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.51
  %168 = load i32, i32* @y.52
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %10, align 4, !dbg !3054
  %176 = load i32, i32* @x.51
  %177 = load i32, i32* @y.52
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %175, !dbg !3054

originalBBalteredBB:                              ; preds = %originalBB, %1
  %184 = alloca i32, align 4
  %185 = alloca %struct._IO_FILE*, align 8
  %186 = alloca i8, align 1
  %187 = alloca i8, align 1
  %188 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %185, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %185, metadata !3055, metadata !DIExpression()), !dbg !3020
  call void @llvm.dbg.declare(metadata i8* %186, metadata !3094, metadata !DIExpression()), !dbg !3023
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3024
  %190 = call i64 @__fpending(%struct._IO_FILE* %189) #10, !dbg !3025
  %191 = icmp ne i64 %190, 0, !dbg !3026
  %192 = zext i1 %191 to i8, !dbg !3023
  store i8 %192, i8* %186, align 1, !dbg !3023
  call void @llvm.dbg.declare(metadata i8* %187, metadata !3095, metadata !DIExpression()), !dbg !3028
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3029
  %194 = call i32 @ferror_unlocked(%struct._IO_FILE* %193) #10, !dbg !3029
  %195 = icmp ne i32 %194, 0, !dbg !3030
  %196 = zext i1 %195 to i8, !dbg !3028
  store i8 %196, i8* %187, align 1, !dbg !3028
  call void @llvm.dbg.declare(metadata i8* %188, metadata !3096, metadata !DIExpression()), !dbg !3032
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3033
  %198 = call i32 @rpl_fclose(%struct._IO_FILE* %197), !dbg !3034
  %199 = icmp ne i32 %198, 0, !dbg !3035
  %200 = zext i1 %199 to i8, !dbg !3032
  store i8 %200, i8* %188, align 1, !dbg !3032
  %201 = load i8, i8* %187, align 1, !dbg !3036
  %202 = trunc i8 %201 to i1, !dbg !3036
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %203 = load i8, i8* %14, align 1, !dbg !3039
  %204 = trunc i8 %203 to i1, !dbg !3039
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %205 = load i8, i8* %12, align 1, !dbg !3041
  %206 = trunc i8 %205 to i1, !dbg !3041
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %207 = call i32* @__errno_location() #14, !dbg !3043
  %208 = load i32, i32* %207, align 4, !dbg !3043
  %209 = icmp ne i32 %208, 9, !dbg !3044
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %210 = load i8, i8* %14, align 1, !dbg !3046
  %211 = trunc i8 %210 to i1, !dbg !3046
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  %212 = call i32* @__errno_location() #14, !dbg !3050
  store i32 0, i32* %212, align 4, !dbg !3051
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %132
  store i32 -1, i32* %10, align 4, !dbg !3052
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  store i32 0, i32* %10, align 4, !dbg !3053
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %213 = load i32, i32* %10, align 4, !dbg !3054
  br label %originalBB30
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !3097 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3101, metadata !DIExpression()), !dbg !3102
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !3103, metadata !DIExpression()), !dbg !3107
  %13 = load i32, i32* %11, align 4, !dbg !3108
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3110
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !3111
  %16 = icmp ne i32 %15, 0, !dbg !3111
  %17 = load i32, i32* @x.53
  %18 = load i32, i32* @y.54
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !3112

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.53
  %27 = load i32, i32* @y.54
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !3113
  %34 = load i32, i32* @x.53
  %35 = load i32, i32* @y.54
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %101, !dbg !3113

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.53
  %44 = load i32, i32* @y.54
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3114
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i64 0, i64 0)) #13, !dbg !3115
  %53 = icmp eq i32 %52, 0, !dbg !3116
  %54 = load i32, i32* @x.53
  %55 = load i32, i32* @y.54
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %82, label %62, !dbg !3117

62:                                               ; preds = %originalBBpart28
  %63 = load i32, i32* @x.53
  %64 = load i32, i32* @y.54
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %62, %originalBB10alteredBB
  %71 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3118
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.112, i64 0, i64 0)) #13, !dbg !3119
  %73 = icmp eq i32 %72, 0, !dbg !3120
  %74 = load i32, i32* @x.53
  %75 = load i32, i32* @y.54
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %82, !dbg !3117

82:                                               ; preds = %originalBBpart212, %originalBBpart28
  %83 = phi i1 [ true, %originalBBpart28 ], [ %73, %originalBBpart212 ]
  %84 = load i32, i32* @x.53
  %85 = load i32, i32* @y.54
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %92 = xor i1 %83, true, !dbg !3121
  store i1 %92, i1* %10, align 1, !dbg !3122
  %93 = load i32, i32* @x.53
  %94 = load i32, i32* @y.54
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart224, label %originalBB14alteredBB

originalBBpart224:                                ; preds = %originalBB14
  br label %101, !dbg !3122

101:                                              ; preds = %originalBBpart224, %originalBBpart24
  %102 = load i32, i32* @x.53
  %103 = load i32, i32* @y.54
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %101, %originalBB26alteredBB
  %110 = load i1, i1* %10, align 1, !dbg !3123
  %111 = load i32, i32* @x.53
  %112 = load i32, i32* @y.54
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i1 %110, !dbg !3123

originalBBalteredBB:                              ; preds = %originalBB, %1
  %119 = alloca i1, align 1
  %120 = alloca i32, align 4
  %121 = alloca [257 x i8], align 16
  store i32 %0, i32* %120, align 4
  call void @llvm.dbg.declare(metadata i32* %120, metadata !3124, metadata !DIExpression()), !dbg !3102
  call void @llvm.dbg.declare(metadata [257 x i8]* %121, metadata !3127, metadata !DIExpression()), !dbg !3107
  %122 = load i32, i32* %120, align 4, !dbg !3108
  %123 = getelementptr inbounds [257 x i8], [257 x i8]* %121, i64 0, i64 0, !dbg !3110
  %124 = call i32 @setlocale_null_r(i32 %122, i8* %123, i64 257), !dbg !3111
  %125 = icmp ne i32 %124, 0, !dbg !3111
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  store i1 false, i1* %10, align 1, !dbg !3113
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %126 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3114
  %127 = call i32 @strcmp(i8* %126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i64 0, i64 0)) #13, !dbg !3115
  %128 = icmp eq i32 %127, 0, !dbg !3116
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %62
  %129 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3118
  %130 = call i32 @strcmp(i8* %129, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.112, i64 0, i64 0)) #13, !dbg !3119
  %131 = icmp eq i32 %130, 0, !dbg !3120
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %_ = shl i1 %83, true
  %_15 = shl i1 %83, true
  %_16 = sub i1 false, %83
  %gen = add i1 %_16, true
  %_17 = sub i1 %83, true
  %gen18 = mul i1 %_17, true
  %_19 = sub i1 %83, true
  %gen20 = mul i1 %_19, true
  %_21 = shl i1 %83, true
  %_22 = shl i1 %83, true
  %132 = xor i1 %83, true, !dbg !3121
  store i1 %132, i1* %10, align 1, !dbg !3122
  br label %originalBB14

originalBB26alteredBB:                            ; preds = %originalBB26, %101
  %133 = load i1, i1* %10, align 1, !dbg !3123
  br label %originalBB26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !3128 {
  %1 = load i32, i32* @x.55
  %2 = load i32, i32* @y.56
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3132, metadata !DIExpression()), !dbg !3133
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !3134
  store i8* %10, i8** %9, align 8, !dbg !3135
  %11 = load i8*, i8** %9, align 8, !dbg !3136
  %12 = icmp eq i8* %11, null, !dbg !3138
  %13 = load i32, i32* @x.55
  %14 = load i32, i32* @y.56
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %22, !dbg !3139

21:                                               ; preds = %originalBBpart2
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.115, i64 0, i64 0), i8** %9, align 8, !dbg !3140
  br label %22, !dbg !3141

22:                                               ; preds = %21, %originalBBpart2
  %23 = load i32, i32* @x.55
  %24 = load i32, i32* @y.56
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load i8*, i8** %9, align 8, !dbg !3142
  %32 = getelementptr inbounds i8, i8* %31, i64 0, !dbg !3142
  %33 = load i8, i8* %32, align 1, !dbg !3142
  %34 = sext i8 %33 to i32, !dbg !3142
  %35 = icmp eq i32 %34, 0, !dbg !3146
  %36 = load i32, i32* @x.55
  %37 = load i32, i32* @y.56
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %44, label %61, !dbg !3147

44:                                               ; preds = %originalBBpart24
  %45 = load i32, i32* @x.55
  %46 = load i32, i32* @y.56
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.116, i64 0, i64 0), i8** %9, align 8, !dbg !3148
  %53 = load i32, i32* @x.55
  %54 = load i32, i32* @y.56
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %61, !dbg !3149

61:                                               ; preds = %originalBBpart28, %originalBBpart24
  %62 = load i32, i32* @x.55
  %63 = load i32, i32* @y.56
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %9, align 8, !dbg !3150
  %71 = load i32, i32* @x.55
  %72 = load i32, i32* @y.56
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %70, !dbg !3151

originalBBalteredBB:                              ; preds = %originalBB, %0
  %79 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %79, metadata !3152, metadata !DIExpression()), !dbg !3133
  %80 = call i8* @nl_langinfo(i32 14) #10, !dbg !3134
  store i8* %80, i8** %79, align 8, !dbg !3135
  %81 = load i8*, i8** %79, align 8, !dbg !3136
  %82 = icmp eq i8* %81, null, !dbg !3138
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %83 = load i8*, i8** %9, align 8, !dbg !3142
  %84 = getelementptr inbounds i8, i8* %83, i64 0, !dbg !3142
  %85 = load i8, i8* %84, align 1, !dbg !3142
  %86 = sext i8 %85 to i32, !dbg !3142
  %87 = icmp eq i32 %86, 0, !dbg !3146
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.116, i64 0, i64 0), i8** %9, align 8, !dbg !3148
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %88 = load i8*, i8** %9, align 8, !dbg !3150
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !3155 {
  %4 = load i32, i32* @x.57
  %5 = load i32, i32* @y.58
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3159, metadata !DIExpression()), !dbg !3160
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3161, metadata !DIExpression()), !dbg !3162
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3163, metadata !DIExpression()), !dbg !3164
  %15 = load i32, i32* %12, align 4, !dbg !3165
  %16 = load i8*, i8** %13, align 8, !dbg !3166
  %17 = load i64, i64* %14, align 8, !dbg !3167
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !3168
  %19 = load i32, i32* @x.57
  %20 = load i32, i32* @y.58
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !3169

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3170, metadata !DIExpression()), !dbg !3160
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !3173, metadata !DIExpression()), !dbg !3162
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3174, metadata !DIExpression()), !dbg !3164
  %30 = load i32, i32* %27, align 4, !dbg !3165
  %31 = load i8*, i8** %28, align 8, !dbg !3166
  %32 = load i64, i64* %29, align 8, !dbg !3167
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !3168
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !3175 {
  %4 = load i32, i32* @x.59
  %5 = load i32, i32* @y.60
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3176, metadata !DIExpression()), !dbg !3177
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3178, metadata !DIExpression()), !dbg !3179
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !3180, metadata !DIExpression()), !dbg !3181
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3182, metadata !DIExpression()), !dbg !3183
  %18 = load i32, i32* %13, align 4, !dbg !3184
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !3185
  store i8* %19, i8** %16, align 8, !dbg !3183
  %20 = load i8*, i8** %16, align 8, !dbg !3186
  %21 = icmp eq i8* %20, null, !dbg !3188
  %22 = load i32, i32* @x.59
  %23 = load i32, i32* @y.60
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %69, !dbg !3189

30:                                               ; preds = %originalBBpart2
  %31 = load i64, i64* %15, align 8, !dbg !3190
  %32 = icmp ugt i64 %31, 0, !dbg !3193
  br i1 %32, label %33, label %52, !dbg !3194

33:                                               ; preds = %30
  %34 = load i32, i32* @x.59
  %35 = load i32, i32* @y.60
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %14, align 8, !dbg !3195
  %43 = getelementptr inbounds i8, i8* %42, i64 0, !dbg !3195
  store i8 0, i8* %43, align 1, !dbg !3196
  %44 = load i32, i32* @x.59
  %45 = load i32, i32* @y.60
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %52, !dbg !3195

52:                                               ; preds = %originalBBpart24, %30
  %53 = load i32, i32* @x.59
  %54 = load i32, i32* @y.60
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  store i32 22, i32* %12, align 4, !dbg !3197
  %61 = load i32, i32* @x.59
  %62 = load i32, i32* @y.60
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %173, !dbg !3197

69:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !3198, metadata !DIExpression()), !dbg !3200
  %70 = load i32, i32* @x.59
  %71 = load i32, i32* @y.60
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = load i8*, i8** %16, align 8, !dbg !3201
  %79 = call i64 @strlen(i8* %78) #13, !dbg !3202
  store i64 %79, i64* %17, align 8, !dbg !3200
  %80 = load i64, i64* %17, align 8, !dbg !3203
  %81 = load i64, i64* %15, align 8, !dbg !3205
  %82 = icmp ult i64 %80, %81, !dbg !3206
  %83 = load i32, i32* @x.59
  %84 = load i32, i32* @y.60
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %112, !dbg !3207

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.59
  %93 = load i32, i32* @y.60
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = load i8*, i8** %14, align 8, !dbg !3208
  %101 = load i8*, i8** %16, align 8, !dbg !3210
  %102 = load i64, i64* %17, align 8, !dbg !3211
  %103 = add i64 %102, 1, !dbg !3212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %100, i8* align 1 %101, i64 %103, i1 false), !dbg !3213
  store i32 0, i32* %12, align 4, !dbg !3214
  %104 = load i32, i32* @x.59
  %105 = load i32, i32* @y.60
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart223, label %originalBB14alteredBB

originalBBpart223:                                ; preds = %originalBB14
  br label %173, !dbg !3214

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.59
  %114 = load i32, i32* @y.60
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %112, %originalBB25alteredBB
  %121 = load i64, i64* %15, align 8, !dbg !3215
  %122 = icmp ugt i64 %121, 0, !dbg !3218
  %123 = load i32, i32* @x.59
  %124 = load i32, i32* @y.60
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %122, label %131, label %156, !dbg !3219

131:                                              ; preds = %originalBBpart227
  %132 = load i32, i32* @x.59
  %133 = load i32, i32* @y.60
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %131, %originalBB29alteredBB
  %140 = load i8*, i8** %14, align 8, !dbg !3220
  %141 = load i8*, i8** %16, align 8, !dbg !3222
  %142 = load i64, i64* %15, align 8, !dbg !3223
  %143 = sub i64 %142, 1, !dbg !3224
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %141, i64 %143, i1 false), !dbg !3225
  %144 = load i8*, i8** %14, align 8, !dbg !3226
  %145 = load i64, i64* %15, align 8, !dbg !3227
  %146 = sub i64 %145, 1, !dbg !3228
  %147 = getelementptr inbounds i8, i8* %144, i64 %146, !dbg !3226
  store i8 0, i8* %147, align 1, !dbg !3229
  %148 = load i32, i32* @x.59
  %149 = load i32, i32* @y.60
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart251, label %originalBB29alteredBB

originalBBpart251:                                ; preds = %originalBB29
  br label %156, !dbg !3230

156:                                              ; preds = %originalBBpart251, %originalBBpart227
  %157 = load i32, i32* @x.59
  %158 = load i32, i32* @y.60
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %156, %originalBB53alteredBB
  store i32 34, i32* %12, align 4, !dbg !3231
  %165 = load i32, i32* @x.59
  %166 = load i32, i32* @y.60
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br label %173, !dbg !3231

173:                                              ; preds = %originalBBpart255, %originalBBpart223, %originalBBpart28
  %174 = load i32, i32* @x.59
  %175 = load i32, i32* @y.60
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %173, %originalBB57alteredBB
  %182 = load i32, i32* %12, align 4, !dbg !3232
  %183 = load i32, i32* @x.59
  %184 = load i32, i32* @y.60
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  ret i32 %182, !dbg !3232

originalBBalteredBB:                              ; preds = %originalBB, %3
  %191 = alloca i32, align 4
  %192 = alloca i32, align 4
  %193 = alloca i8*, align 8
  %194 = alloca i64, align 8
  %195 = alloca i8*, align 8
  %196 = alloca i64, align 8
  store i32 %0, i32* %192, align 4
  call void @llvm.dbg.declare(metadata i32* %192, metadata !3233, metadata !DIExpression()), !dbg !3177
  store i8* %1, i8** %193, align 8
  call void @llvm.dbg.declare(metadata i8** %193, metadata !3236, metadata !DIExpression()), !dbg !3179
  store i64 %2, i64* %194, align 8
  call void @llvm.dbg.declare(metadata i64* %194, metadata !3237, metadata !DIExpression()), !dbg !3181
  call void @llvm.dbg.declare(metadata i8** %195, metadata !3238, metadata !DIExpression()), !dbg !3183
  %197 = load i32, i32* %192, align 4, !dbg !3184
  %198 = call i8* @setlocale_null_androidfix(i32 %197), !dbg !3185
  store i8* %198, i8** %195, align 8, !dbg !3183
  %199 = load i8*, i8** %195, align 8, !dbg !3186
  %200 = icmp eq i8* %199, null, !dbg !3188
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %201 = load i8*, i8** %14, align 8, !dbg !3195
  %202 = getelementptr inbounds i8, i8* %201, i64 0, !dbg !3195
  store i8 0, i8* %202, align 1, !dbg !3196
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  store i32 22, i32* %12, align 4, !dbg !3197
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %203 = load i8*, i8** %16, align 8, !dbg !3201
  %204 = call i64 @strlen(i8* %203) #13, !dbg !3202
  store i64 %204, i64* %17, align 8, !dbg !3200
  %205 = load i64, i64* %17, align 8, !dbg !3203
  %206 = load i64, i64* %15, align 8, !dbg !3205
  %207 = icmp ult i64 %205, %206, !dbg !3206
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %208 = load i8*, i8** %14, align 8, !dbg !3208
  %209 = load i8*, i8** %16, align 8, !dbg !3210
  %210 = load i64, i64* %17, align 8, !dbg !3211
  %_ = sub i64 0, %210
  %gen = add i64 %_, 1
  %_15 = sub i64 0, %210
  %gen16 = add i64 %_15, 1
  %_17 = sub i64 %210, 1
  %gen18 = mul i64 %_17, 1
  %_19 = sub i64 %210, 1
  %gen20 = mul i64 %_19, 1
  %_21 = shl i64 %210, 1
  %211 = add i64 %210, 1, !dbg !3212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %208, i8* align 1 %209, i64 %211, i1 false), !dbg !3213
  store i32 0, i32* %12, align 4, !dbg !3214
  br label %originalBB14

originalBB25alteredBB:                            ; preds = %originalBB25, %112
  %212 = load i64, i64* %15, align 8, !dbg !3215
  %213 = icmp ugt i64 %212, 0, !dbg !3218
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %131
  %214 = load i8*, i8** %14, align 8, !dbg !3220
  %215 = load i8*, i8** %16, align 8, !dbg !3222
  %216 = load i64, i64* %15, align 8, !dbg !3223
  %_30 = sub i64 0, %216
  %gen31 = add i64 %_30, 1
  %_32 = sub i64 0, %216
  %gen33 = add i64 %_32, 1
  %_34 = sub i64 %216, 1
  %gen35 = mul i64 %_34, 1
  %_36 = sub i64 0, %216
  %gen37 = add i64 %_36, 1
  %_38 = sub i64 %216, 1
  %gen39 = mul i64 %_38, 1
  %_40 = sub i64 %216, 1
  %gen41 = mul i64 %_40, 1
  %_42 = sub i64 %216, 1
  %gen43 = mul i64 %_42, 1
  %_44 = sub i64 0, %216
  %gen45 = add i64 %_44, 1
  %217 = sub i64 %216, 1, !dbg !3224
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %214, i8* align 1 %215, i64 %217, i1 false), !dbg !3225
  %218 = load i8*, i8** %14, align 8, !dbg !3226
  %219 = load i64, i64* %15, align 8, !dbg !3227
  %_46 = shl i64 %219, 1
  %_47 = shl i64 %219, 1
  %_48 = sub i64 %219, 1
  %gen49 = mul i64 %_48, 1
  %220 = sub i64 %219, 1, !dbg !3228
  %221 = getelementptr inbounds i8, i8* %218, i64 %220, !dbg !3226
  store i8 0, i8* %221, align 1, !dbg !3229
  br label %originalBB29

originalBB53alteredBB:                            ; preds = %originalBB53, %156
  store i32 34, i32* %12, align 4, !dbg !3231
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %173
  %222 = load i32, i32* %12, align 4, !dbg !3232
  br label %originalBB57
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !3239 {
  %2 = load i32, i32* @x.61
  %3 = load i32, i32* @y.62
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3242, metadata !DIExpression()), !dbg !3243
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3244, metadata !DIExpression()), !dbg !3245
  %12 = load i32, i32* %10, align 4, !dbg !3246
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !3247
  store i8* %13, i8** %11, align 8, !dbg !3245
  %14 = load i8*, i8** %11, align 8, !dbg !3248
  %15 = load i32, i32* @x.61
  %16 = load i32, i32* @y.62
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !3249

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3250, metadata !DIExpression()), !dbg !3243
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3253, metadata !DIExpression()), !dbg !3245
  %25 = load i32, i32* %23, align 4, !dbg !3246
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !3247
  store i8* %26, i8** %24, align 8, !dbg !3245
  %27 = load i8*, i8** %24, align 8, !dbg !3248
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !3254 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !3292, metadata !DIExpression()), !dbg !3293
  call void @llvm.dbg.declare(metadata i32* %4, metadata !3294, metadata !DIExpression()), !dbg !3295
  store i32 0, i32* %4, align 4, !dbg !3295
  call void @llvm.dbg.declare(metadata i32* %5, metadata !3296, metadata !DIExpression()), !dbg !3297
  call void @llvm.dbg.declare(metadata i32* %6, metadata !3298, metadata !DIExpression()), !dbg !3299
  store i32 0, i32* %6, align 4, !dbg !3299
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3300
  %8 = call i32 @fileno(%struct._IO_FILE* %7) #10, !dbg !3301
  store i32 %8, i32* %5, align 4, !dbg !3302
  %9 = load i32, i32* %5, align 4, !dbg !3303
  %10 = icmp slt i32 %9, 0, !dbg !3305
  br i1 %10, label %11, label %30, !dbg !3306

11:                                               ; preds = %1
  %12 = load i32, i32* @x.63
  %13 = load i32, i32* @y.64
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %11, %originalBBalteredBB
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3307
  %21 = call i32 @fclose(%struct._IO_FILE* %20), !dbg !3308
  store i32 %21, i32* %2, align 4, !dbg !3309
  %22 = load i32, i32* @x.63
  %23 = load i32, i32* @y.64
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %152, !dbg !3309

30:                                               ; preds = %1
  %31 = load i32, i32* @x.63
  %32 = load i32, i32* @y.64
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3310
  %40 = call i32 @__freading(%struct._IO_FILE* %39) #10, !dbg !3310
  %41 = icmp ne i32 %40, 0, !dbg !3310
  %42 = load i32, i32* @x.63
  %43 = load i32, i32* @y.64
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %41, label %50, label %71, !dbg !3312

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.63
  %52 = load i32, i32* @y.64
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3313
  %60 = call i32 @fileno(%struct._IO_FILE* %59) #10, !dbg !3314
  %61 = call i64 @lseek(i32 %60, i64 0, i32 1) #10, !dbg !3315
  %62 = icmp ne i64 %61, -1, !dbg !3316
  %63 = load i32, i32* @x.63
  %64 = load i32, i32* @y.64
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %62, label %71, label %110, !dbg !3317

71:                                               ; preds = %originalBBpart28, %originalBBpart24
  %72 = load i32, i32* @x.63
  %73 = load i32, i32* @y.64
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %71, %originalBB10alteredBB
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3318
  %81 = call i32 @rpl_fflush(%struct._IO_FILE* %80), !dbg !3319
  %82 = icmp ne i32 %81, 0, !dbg !3319
  %83 = load i32, i32* @x.63
  %84 = load i32, i32* @y.64
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %110, !dbg !3320

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.63
  %93 = load i32, i32* @y.64
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call i32* @__errno_location() #14, !dbg !3321
  %101 = load i32, i32* %100, align 4, !dbg !3321
  store i32 %101, i32* %4, align 4, !dbg !3322
  %102 = load i32, i32* @x.63
  %103 = load i32, i32* @y.64
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %110, !dbg !3323

110:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %111 = load i32, i32* @x.63
  %112 = load i32, i32* @y.64
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3324
  %120 = call i32 @fclose(%struct._IO_FILE* %119), !dbg !3325
  store i32 %120, i32* %6, align 4, !dbg !3326
  %121 = load i32, i32* %4, align 4, !dbg !3327
  %122 = icmp ne i32 %121, 0, !dbg !3329
  %123 = load i32, i32* @x.63
  %124 = load i32, i32* @y.64
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %122, label %131, label %134, !dbg !3330

131:                                              ; preds = %originalBBpart220
  %132 = load i32, i32* %4, align 4, !dbg !3331
  %133 = call i32* @__errno_location() #14, !dbg !3333
  store i32 %132, i32* %133, align 4, !dbg !3334
  store i32 -1, i32* %6, align 4, !dbg !3335
  br label %134, !dbg !3336

134:                                              ; preds = %131, %originalBBpart220
  %135 = load i32, i32* @x.63
  %136 = load i32, i32* @y.64
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %134, %originalBB22alteredBB
  %143 = load i32, i32* %6, align 4, !dbg !3337
  store i32 %143, i32* %2, align 4, !dbg !3338
  %144 = load i32, i32* @x.63
  %145 = load i32, i32* @y.64
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %152, !dbg !3338

152:                                              ; preds = %originalBBpart224, %originalBBpart2
  %153 = load i32, i32* @x.63
  %154 = load i32, i32* @y.64
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %152, %originalBB26alteredBB
  %161 = load i32, i32* %2, align 4, !dbg !3339
  %162 = load i32, i32* @x.63
  %163 = load i32, i32* @y.64
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 %161, !dbg !3339

originalBBalteredBB:                              ; preds = %originalBB, %11
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3307
  %171 = call i32 @fclose(%struct._IO_FILE* %170), !dbg !3308
  store i32 %171, i32* %2, align 4, !dbg !3309
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3310
  %173 = call i32 @__freading(%struct._IO_FILE* %172) #10, !dbg !3310
  %174 = icmp ne i32 %173, 0, !dbg !3310
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3313
  %176 = call i32 @fileno(%struct._IO_FILE* %175) #10, !dbg !3314
  %177 = call i64 @lseek(i32 %176, i64 0, i32 1) #10, !dbg !3315
  %178 = icmp ne i64 %177, -1, !dbg !3316
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %71
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3318
  %180 = call i32 @rpl_fflush(%struct._IO_FILE* %179), !dbg !3319
  %181 = icmp ne i32 %180, 0, !dbg !3319
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %182 = call i32* @__errno_location() #14, !dbg !3321
  %183 = load i32, i32* %182, align 4, !dbg !3321
  store i32 %183, i32* %4, align 4, !dbg !3322
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %184 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3324
  %185 = call i32 @fclose(%struct._IO_FILE* %184), !dbg !3325
  store i32 %185, i32* %6, align 4, !dbg !3326
  %186 = load i32, i32* %4, align 4, !dbg !3327
  %187 = icmp ne i32 %186, 0, !dbg !3329
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %134
  %188 = load i32, i32* %6, align 4, !dbg !3337
  store i32 %188, i32* %2, align 4, !dbg !3338
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %152
  %189 = load i32, i32* %2, align 4, !dbg !3339
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !3340 {
  %2 = load i32, i32* @x.65
  %3 = load i32, i32* @y.66
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3378, metadata !DIExpression()), !dbg !3379
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3380
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !3382
  %14 = load i32, i32* @x.65
  %15 = load i32, i32* @y.66
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !3383

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.65
  %24 = load i32, i32* @y.66
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3384
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !3384
  %33 = icmp ne i32 %32, 0, !dbg !3384
  %34 = load i32, i32* @x.65
  %35 = load i32, i32* @y.66
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !3385

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.65
  %44 = load i32, i32* @y.66
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3386
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !3387
  store i32 %52, i32* %10, align 4, !dbg !3388
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !3388

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3389
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !3390
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3391
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !3392
  store i32 %72, i32* %10, align 4, !dbg !3393
  %73 = load i32, i32* @x.65
  %74 = load i32, i32* @y.66
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !3393

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* %10, align 4, !dbg !3394
  ret i32 %82, !dbg !3394

originalBBalteredBB:                              ; preds = %originalBB, %1
  %83 = alloca i32, align 4
  %84 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %84, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %84, metadata !3395, metadata !DIExpression()), !dbg !3379
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** %84, align 8, !dbg !3380
  %86 = icmp eq %struct._IO_FILE* %85, null, !dbg !3382
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3384
  %88 = call i32 @__freading(%struct._IO_FILE* %87) #10, !dbg !3384
  %89 = icmp ne i32 %88, 0, !dbg !3384
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3386
  %91 = call i32 @fflush(%struct._IO_FILE* %90), !dbg !3387
  store i32 %91, i32* %10, align 4, !dbg !3388
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3389
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %92), !dbg !3390
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3391
  %94 = call i32 @fflush(%struct._IO_FILE* %93), !dbg !3392
  store i32 %94, i32* %10, align 4, !dbg !3393
  br label %originalBB10
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !3434 {
  %2 = load i32, i32* @x.67
  %3 = load i32, i32* @y.68
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !3437, metadata !DIExpression()), !dbg !3438
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3439
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !3441
  %13 = load i32, i32* %12, align 8, !dbg !3441
  %14 = and i32 %13, 256, !dbg !3442
  %15 = icmp ne i32 %14, 0, !dbg !3442
  %16 = load i32, i32* @x.67
  %17 = load i32, i32* @y.68
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !3443

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.67
  %26 = load i32, i32* @y.68
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB2, label %originalBB2alteredBB

originalBB2:                                      ; preds = %24, %originalBB2alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3444
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !3445
  %35 = load i32, i32* @x.67
  %36 = load i32, i32* @y.68
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB2alteredBB

originalBBpart24:                                 ; preds = %originalBB2
  br label %43, !dbg !3445

43:                                               ; preds = %originalBBpart24, %originalBBpart2
  %44 = load i32, i32* @x.67
  %45 = load i32, i32* @y.68
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* @x.67
  %53 = load i32, i32* @y.68
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !3446

originalBBalteredBB:                              ; preds = %originalBB, %1
  %60 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %60, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %60, metadata !3447, metadata !DIExpression()), !dbg !3438
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %60, align 8, !dbg !3439
  %62 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %61, i32 0, i32 0, !dbg !3441
  %63 = load i32, i32* %62, align 8, !dbg !3441
  %_ = sub i32 0, %63
  %gen = add i32 %_, 256
  %_1 = shl i32 %63, 256
  %64 = and i32 %63, 256, !dbg !3442
  %65 = icmp ne i32 %64, 0, !dbg !3442
  br label %originalBB

originalBB2alteredBB:                             ; preds = %originalBB2, %24
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3444
  %67 = call i32 @rpl_fseeko(%struct._IO_FILE* %66, i64 0, i32 1), !dbg !3445
  br label %originalBB2

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !3486 {
  %4 = load i32, i32* @x.69
  %5 = load i32, i32* @y.70
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3525, metadata !DIExpression()), !dbg !3526
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3527, metadata !DIExpression()), !dbg !3528
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3529, metadata !DIExpression()), !dbg !3530
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3531
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !3533
  %19 = load i8*, i8** %18, align 8, !dbg !3533
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3534
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !3535
  %22 = load i8*, i8** %21, align 8, !dbg !3535
  %23 = icmp eq i8* %19, %22, !dbg !3536
  %24 = load i32, i32* @x.69
  %25 = load i32, i32* @y.70
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %142, !dbg !3537

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.69
  %34 = load i32, i32* @y.70
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3538
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !3539
  %43 = load i8*, i8** %42, align 8, !dbg !3539
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3540
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !3541
  %46 = load i8*, i8** %45, align 8, !dbg !3541
  %47 = icmp eq i8* %43, %46, !dbg !3542
  %48 = load i32, i32* @x.69
  %49 = load i32, i32* @y.70
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %142, !dbg !3543

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.69
  %58 = load i32, i32* @y.70
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3544
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !3545
  %67 = load i8*, i8** %66, align 8, !dbg !3545
  %68 = icmp eq i8* %67, null, !dbg !3546
  %69 = load i32, i32* @x.69
  %70 = load i32, i32* @y.70
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %142, !dbg !3547

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !3548, metadata !DIExpression()), !dbg !3550
  %78 = load i32, i32* @x.69
  %79 = load i32, i32* @y.70
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3551
  %87 = call i32 @fileno(%struct._IO_FILE* %86) #10, !dbg !3552
  %88 = load i64, i64* %14, align 8, !dbg !3553
  %89 = load i32, i32* %15, align 4, !dbg !3554
  %90 = call i64 @lseek(i32 %87, i64 %88, i32 %89) #10, !dbg !3555
  store i64 %90, i64* %16, align 8, !dbg !3550
  %91 = load i64, i64* %16, align 8, !dbg !3556
  %92 = icmp eq i64 %91, -1, !dbg !3558
  %93 = load i32, i32* @x.69
  %94 = load i32, i32* @y.70
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %92, label %101, label %118, !dbg !3559

101:                                              ; preds = %originalBBpart212
  %102 = load i32, i32* @x.69
  %103 = load i32, i32* @y.70
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  store i32 -1, i32* %12, align 4, !dbg !3560
  %110 = load i32, i32* @x.69
  %111 = load i32, i32* @y.70
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %163, !dbg !3560

118:                                              ; preds = %originalBBpart212
  %119 = load i32, i32* @x.69
  %120 = load i32, i32* @y.70
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3562
  %128 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %127, i32 0, i32 0, !dbg !3563
  %129 = load i32, i32* %128, align 8, !dbg !3564
  %130 = and i32 %129, -17, !dbg !3564
  store i32 %130, i32* %128, align 8, !dbg !3564
  %131 = load i64, i64* %16, align 8, !dbg !3565
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3566
  %133 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %132, i32 0, i32 21, !dbg !3567
  store i64 %131, i64* %133, align 8, !dbg !3568
  store i32 0, i32* %12, align 4, !dbg !3569
  %134 = load i32, i32* @x.69
  %135 = load i32, i32* @y.70
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %163, !dbg !3569

142:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %143 = load i32, i32* @x.69
  %144 = load i32, i32* @y.70
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3570
  %152 = load i64, i64* %14, align 8, !dbg !3571
  %153 = load i32, i32* %15, align 4, !dbg !3572
  %154 = call i32 @fseeko(%struct._IO_FILE* %151, i64 %152, i32 %153), !dbg !3573
  store i32 %154, i32* %12, align 4, !dbg !3574
  %155 = load i32, i32* @x.69
  %156 = load i32, i32* @y.70
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %163, !dbg !3574

163:                                              ; preds = %originalBBpart224, %originalBBpart220, %originalBBpart216
  %164 = load i32, i32* @x.69
  %165 = load i32, i32* @y.70
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %163, %originalBB26alteredBB
  %172 = load i32, i32* %12, align 4, !dbg !3575
  %173 = load i32, i32* @x.69
  %174 = load i32, i32* @y.70
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 %172, !dbg !3575

originalBBalteredBB:                              ; preds = %originalBB, %3
  %181 = alloca i32, align 4
  %182 = alloca %struct._IO_FILE*, align 8
  %183 = alloca i64, align 8
  %184 = alloca i32, align 4
  %185 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %182, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %182, metadata !3576, metadata !DIExpression()), !dbg !3526
  store i64 %1, i64* %183, align 8
  call void @llvm.dbg.declare(metadata i64* %183, metadata !3615, metadata !DIExpression()), !dbg !3528
  store i32 %2, i32* %184, align 4
  call void @llvm.dbg.declare(metadata i32* %184, metadata !3616, metadata !DIExpression()), !dbg !3530
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !3531
  %187 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %186, i32 0, i32 2, !dbg !3533
  %188 = load i8*, i8** %187, align 8, !dbg !3533
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !3534
  %190 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %189, i32 0, i32 1, !dbg !3535
  %191 = load i8*, i8** %190, align 8, !dbg !3535
  %192 = icmp eq i8* %188, %191, !dbg !3536
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3538
  %194 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %193, i32 0, i32 5, !dbg !3539
  %195 = load i8*, i8** %194, align 8, !dbg !3539
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3540
  %197 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %196, i32 0, i32 4, !dbg !3541
  %198 = load i8*, i8** %197, align 8, !dbg !3541
  %199 = icmp eq i8* %195, %198, !dbg !3542
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3544
  %201 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %200, i32 0, i32 9, !dbg !3545
  %202 = load i8*, i8** %201, align 8, !dbg !3545
  %203 = icmp eq i8* %202, null, !dbg !3546
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %204 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3551
  %205 = call i32 @fileno(%struct._IO_FILE* %204) #10, !dbg !3552
  %206 = load i64, i64* %14, align 8, !dbg !3553
  %207 = load i32, i32* %15, align 4, !dbg !3554
  %208 = call i64 @lseek(i32 %205, i64 %206, i32 %207) #10, !dbg !3555
  store i64 %208, i64* %16, align 8, !dbg !3550
  %209 = load i64, i64* %16, align 8, !dbg !3556
  %210 = icmp eq i64 %209, -1, !dbg !3558
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  store i32 -1, i32* %12, align 4, !dbg !3560
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3562
  %212 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %211, i32 0, i32 0, !dbg !3563
  %213 = load i32, i32* %212, align 8, !dbg !3564
  %_ = shl i32 %213, -17
  %214 = and i32 %213, -17, !dbg !3564
  store i32 %214, i32* %212, align 8, !dbg !3564
  %215 = load i64, i64* %16, align 8, !dbg !3565
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3566
  %217 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %216, i32 0, i32 21, !dbg !3567
  store i64 %215, i64* %217, align 8, !dbg !3568
  store i32 0, i32* %12, align 4, !dbg !3569
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3570
  %219 = load i64, i64* %14, align 8, !dbg !3571
  %220 = load i32, i32* %15, align 4, !dbg !3572
  %221 = call i32 @fseeko(%struct._IO_FILE* %218, i64 %219, i32 %220), !dbg !3573
  store i32 %221, i32* %12, align 4, !dbg !3574
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %163
  %222 = load i32, i32* %12, align 4, !dbg !3575
  br label %originalBB26
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !3617 {
  %2 = load i32, i32* @x.71
  %3 = load i32, i32* @y.72
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3621, metadata !DIExpression()), !dbg !3622
  %12 = load i32, i32* %11, align 4, !dbg !3623
  %13 = load i32, i32* @x.71
  %14 = load i32, i32* @y.72
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3624

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.71
  %23 = load i32, i32* @y.72
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !3625
  %31 = sub nsw i32 %30, 65, !dbg !3627
  %32 = add nsw i32 %31, 97, !dbg !3628
  store i32 %32, i32* %10, align 4, !dbg !3629
  %33 = load i32, i32* @x.71
  %34 = load i32, i32* @y.72
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart216, label %originalBB1alteredBB

originalBBpart216:                                ; preds = %originalBB1
  br label %59, !dbg !3629

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.71
  %43 = load i32, i32* @y.72
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %41, %originalBB18alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !3630
  store i32 %50, i32* %10, align 4, !dbg !3631
  %51 = load i32, i32* @x.71
  %52 = load i32, i32* @y.72
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %59, !dbg !3631

59:                                               ; preds = %originalBBpart220, %originalBBpart216
  %60 = load i32, i32* @x.71
  %61 = load i32, i32* @y.72
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %59, %originalBB22alteredBB
  %68 = load i32, i32* %10, align 4, !dbg !3632
  %69 = load i32, i32* @x.71
  %70 = load i32, i32* @y.72
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i32 %68, !dbg !3632

originalBBalteredBB:                              ; preds = %originalBB, %1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  store i32 %0, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !3633, metadata !DIExpression()), !dbg !3622
  %79 = load i32, i32* %78, align 4, !dbg !3623
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = load i32, i32* %11, align 4, !dbg !3625
  %_ = shl i32 %80, 65
  %_2 = sub i32 %80, 65
  %gen = mul i32 %_2, 65
  %_3 = sub i32 0, %80
  %gen4 = add i32 %_3, 65
  %_5 = sub i32 0, %80
  %gen6 = add i32 %_5, 65
  %_7 = shl i32 %80, 65
  %_8 = sub i32 %80, 65
  %gen9 = mul i32 %_8, 65
  %81 = sub nsw i32 %80, 65, !dbg !3627
  %_10 = shl i32 %81, 97
  %_11 = sub i32 %81, 97
  %gen12 = mul i32 %_11, 97
  %_13 = sub i32 0, %81
  %gen14 = add i32 %_13, 97
  %82 = add nsw i32 %81, 97, !dbg !3628
  store i32 %82, i32* %10, align 4, !dbg !3629
  br label %originalBB1

originalBB18alteredBB:                            ; preds = %originalBB18, %41
  %83 = load i32, i32* %11, align 4, !dbg !3630
  store i32 %83, i32* %10, align 4, !dbg !3631
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %59
  %84 = load i32, i32* %10, align 4, !dbg !3632
  br label %originalBB22
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @inVal0
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  call void @srand(i32 %1)
  %6 = call i32 @rand()
  %7 = srem i32 %6, 50000
  %8 = add i32 %7, 2
  ret i32 %8

9:                                                ; preds = %2
  %10 = load i32, i32* @x.73
  %11 = load i32, i32* @y.74
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %19 = call i32 @strcmp(i8* %18, i8* %0)
  %20 = icmp eq i32 %19, 0
  %21 = load i32, i32* @x.73
  %22 = load i32, i32* @y.74
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %32

29:                                               ; preds = %originalBBpart2
  %30 = icmp eq i32 %1, -1
  br i1 %30, label %31, label %32

31:                                               ; preds = %29
  ret i32 5

32:                                               ; preds = %29, %originalBBpart2
  %33 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %34 = call i32 @strcmp(i8* %33, i8* %0)
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %71

36:                                               ; preds = %32
  %37 = load i32, i32* @x.73
  %38 = load i32, i32* @y.74
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = icmp eq i32 %1, -1
  %46 = load i32, i32* @x.73
  %47 = load i32, i32* @y.74
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %45, label %54, label %71

54:                                               ; preds = %originalBBpart24
  %55 = load i32, i32* @x.73
  %56 = load i32, i32* @y.74
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  %63 = load i32, i32* @x.73
  %64 = load i32, i32* @y.74
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i32 3

71:                                               ; preds = %originalBBpart24, %32
  %72 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %73 = call i32 @strcmp(i8* %72, i8* %0)
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %110

75:                                               ; preds = %71
  %76 = load i32, i32* @x.73
  %77 = load i32, i32* @y.74
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = icmp eq i32 %1, -1
  %85 = load i32, i32* @x.73
  %86 = load i32, i32* @y.74
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %84, label %93, label %110

93:                                               ; preds = %originalBBpart212
  %94 = load i32, i32* @x.73
  %95 = load i32, i32* @y.74
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  %102 = load i32, i32* @x.73
  %103 = load i32, i32* @y.74
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 3

110:                                              ; preds = %originalBBpart212, %71
  %111 = load i32, i32* @x.73
  %112 = load i32, i32* @y.74
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %120 = call i32 @strcmp(i8* %119, i8* %0)
  %121 = icmp eq i32 %120, 0
  %122 = load i32, i32* @x.73
  %123 = load i32, i32* @y.74
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %121, label %130, label %165

130:                                              ; preds = %originalBBpart220
  %131 = load i32, i32* @x.73
  %132 = load i32, i32* @y.74
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %130, %originalBB22alteredBB
  %139 = icmp eq i32 %1, 0
  %140 = load i32, i32* @x.73
  %141 = load i32, i32* @y.74
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %139, label %148, label %165

148:                                              ; preds = %originalBBpart224
  %149 = load i32, i32* @x.73
  %150 = load i32, i32* @y.74
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %148, %originalBB26alteredBB
  %157 = load i32, i32* @x.73
  %158 = load i32, i32* @y.74
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 5

165:                                              ; preds = %originalBBpart224, %originalBBpart220
  %166 = load i32, i32* @x.73
  %167 = load i32, i32* @y.74
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %165, %originalBB30alteredBB
  call void @srand(i32 %1)
  %174 = call i32 @rand()
  %175 = srem i32 %174, 50000
  %176 = add i32 %175, 2
  %177 = load i32, i32* @x.73
  %178 = load i32, i32* @y.74
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBBpart247, label %originalBB30alteredBB

originalBBpart247:                                ; preds = %originalBB30
  ret i32 %176

originalBBalteredBB:                              ; preds = %originalBB, %9
  %185 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %186 = call i32 @strcmp(i8* %185, i8* %0)
  %187 = icmp eq i32 %186, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %188 = icmp eq i32 %1, -1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %189 = icmp eq i32 %1, -1
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %190 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %191 = call i32 @strcmp(i8* %190, i8* %0)
  %192 = icmp eq i32 %191, 0
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %130
  %193 = icmp eq i32 %1, 0
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %148
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %165
  call void @srand(i32 %1)
  %194 = call i32 @rand()
  %_ = sub i32 %194, 50000
  %gen = mul i32 %_, 50000
  %_31 = sub i32 0, %194
  %gen32 = add i32 %_31, 50000
  %_33 = sub i32 %194, 50000
  %gen34 = mul i32 %_33, 50000
  %_35 = sub i32 0, %194
  %gen36 = add i32 %_35, 50000
  %_37 = sub i32 0, %194
  %gen38 = add i32 %_37, 50000
  %_39 = shl i32 %194, 50000
  %_40 = shl i32 %194, 50000
  %_41 = shl i32 %194, 50000
  %195 = srem i32 %194, 50000
  %_42 = shl i32 %195, 2
  %_43 = shl i32 %195, 2
  %_44 = sub i32 %195, 2
  %gen45 = mul i32 %_44, 2
  %196 = add i32 %195, 2
  br label %originalBB30
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { nounwind readnone }
attributes #15 = { noreturn }

!llvm.dbg.cu = !{!10, !47, !52, !57, !65, !72, !79, !151, !144, !154, !157, !159, !162, !168, !170, !172, !174, !176, !178, !180, !182}
!llvm.ident = !{!184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184}
!llvm.module.flags = !{!185, !186, !187, !188, !189}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "unknown", scope: !2, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !11)
!3 = !DIFile(filename: "src/uname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !6, !7}
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!10 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !14, nameTableKind: None)
!11 = !{}
!12 = !{!8, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!14 = !{!0, !15, !31, !36}
!15 = !DIGlobalVariableExpression(var: !16, expr: !DIExpression())
!16 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !10, file: !3, line: 107, type: !17, isLocal: true, isDefinition: true)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 768, elements: !29)
!18 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!19 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !21)
!20 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!21 = !{!22, !25, !26, !28}
!22 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !19, file: !20, line: 52, baseType: !23, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !19, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !19, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !19, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!29 = !{!30}
!30 = !DISubrange(count: 3)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !10, file: !3, line: 89, type: !33, isLocal: true, isDefinition: true)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 3584, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 14)
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "printed", scope: !38, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!38 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!39 = !DISubroutineType(types: !40)
!40 = !{null, !23}
!41 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!42 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 64, elements: !43)
!43 = !{!44}
!44 = !DISubrange(count: 8)
!45 = !DIGlobalVariableExpression(var: !46, expr: !DIExpression())
!46 = distinct !DIGlobalVariable(name: "uname_mode", scope: !47, file: !48, line: 2, type: !6, isLocal: false, isDefinition: true)
!47 = distinct !DICompileUnit(language: DW_LANG_C99, file: !48, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !49, nameTableKind: None)
!48 = !DIFile(filename: "src/uname-uname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!49 = !{!45}
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(name: "Version", scope: !52, file: !53, line: 2, type: !23, isLocal: false, isDefinition: true)
!52 = distinct !DICompileUnit(language: DW_LANG_C99, file: !53, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !54, nameTableKind: None)
!53 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!54 = !{!50}
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !57, file: !62, line: 56, type: !41, isLocal: true, isDefinition: true)
!57 = distinct !DICompileUnit(language: DW_LANG_C99, file: !58, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !59, nameTableKind: None)
!58 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!59 = !{!60, !55}
!60 = !DIGlobalVariableExpression(var: !61, expr: !DIExpression())
!61 = distinct !DIGlobalVariable(name: "file_name", scope: !57, file: !62, line: 46, type: !23, isLocal: true, isDefinition: true)
!62 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!63 = !DIGlobalVariableExpression(var: !64, expr: !DIExpression())
!64 = distinct !DIGlobalVariable(name: "exit_failure", scope: !65, file: !68, line: 24, type: !69, isLocal: false, isDefinition: true)
!65 = distinct !DICompileUnit(language: DW_LANG_C99, file: !66, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !67, nameTableKind: None)
!66 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!67 = !{!63}
!68 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!69 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !6)
!70 = !DIGlobalVariableExpression(var: !71, expr: !DIExpression())
!71 = distinct !DIGlobalVariable(name: "program_name", scope: !72, file: !76, line: 33, type: !23, isLocal: false, isDefinition: true)
!72 = distinct !DICompileUnit(language: DW_LANG_C99, file: !73, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !74, globals: !75, nameTableKind: None)
!73 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!74 = !{!13, !8}
!75 = !{!70}
!76 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!77 = !DIGlobalVariableExpression(var: !78, expr: !DIExpression())
!78 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !79, file: !105, line: 116, type: !118, isLocal: true, isDefinition: true)
!79 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !102, nameTableKind: None)
!80 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!81 = !{!82}
!82 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !83, line: 32, baseType: !84, size: 32, elements: !85)
!83 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!84 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!85 = !{!86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96}
!86 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!87 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!88 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!89 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!90 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!91 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!92 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!93 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!94 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!95 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!96 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!97 = !{!6, !98, !99}
!98 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!99 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !100, line: 46, baseType: !101)
!100 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!101 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!102 = !{!103, !110, !116, !77, !126, !131, !138, !140}
!103 = !DIGlobalVariableExpression(var: !104, expr: !DIExpression())
!104 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !79, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!105 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!106 = !DICompositeType(tag: DW_TAG_array_type, baseType: !107, size: 704, elements: !108)
!107 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !23)
!108 = !{!109}
!109 = !DISubrange(count: 11)
!110 = !DIGlobalVariableExpression(var: !111, expr: !DIExpression())
!111 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !79, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!112 = !DICompositeType(tag: DW_TAG_array_type, baseType: !113, size: 320, elements: !114)
!113 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !82)
!114 = !{!115}
!115 = !DISubrange(count: 10)
!116 = !DIGlobalVariableExpression(var: !117, expr: !DIExpression())
!117 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !79, file: !105, line: 1052, type: !118, isLocal: false, isDefinition: true)
!118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !119)
!119 = !{!120, !121, !122, !124, !125}
!120 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !118, file: !105, line: 68, baseType: !82, size: 32)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !118, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!122 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !118, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!123 = !DICompositeType(tag: DW_TAG_array_type, baseType: !84, size: 256, elements: !43)
!124 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !118, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !118, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!126 = !DIGlobalVariableExpression(var: !127, expr: !DIExpression())
!127 = distinct !DIGlobalVariable(name: "slot0", scope: !79, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!128 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 2048, elements: !129)
!129 = !{!130}
!130 = !DISubrange(count: 256)
!131 = !DIGlobalVariableExpression(var: !132, expr: !DIExpression())
!132 = distinct !DIGlobalVariable(name: "slotvec", scope: !79, file: !105, line: 845, type: !133, isLocal: true, isDefinition: true)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !135)
!135 = !{!136, !137}
!136 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !134, file: !105, line: 836, baseType: !99, size: 64)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !134, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!138 = !DIGlobalVariableExpression(var: !139, expr: !DIExpression())
!139 = distinct !DIGlobalVariable(name: "nslots", scope: !79, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!140 = !DIGlobalVariableExpression(var: !141, expr: !DIExpression())
!141 = distinct !DIGlobalVariable(name: "slotvec0", scope: !79, file: !105, line: 844, type: !134, isLocal: true, isDefinition: true)
!142 = !DIGlobalVariableExpression(var: !143, expr: !DIExpression())
!143 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !144, file: !147, line: 26, type: !148, isLocal: false, isDefinition: true)
!144 = distinct !DICompileUnit(language: DW_LANG_C99, file: !145, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !146, nameTableKind: None)
!145 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!146 = !{!142}
!147 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!148 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 376, elements: !149)
!149 = !{!150}
!150 = !DISubrange(count: 47)
!151 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!152 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!153 = !{!13}
!154 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!155 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!156 = !{!99, !8, !13}
!157 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!158 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!159 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !161, nameTableKind: None)
!160 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!161 = !{!99}
!162 = distinct !DICompileUnit(language: DW_LANG_C99, file: !163, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !164, nameTableKind: None)
!163 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!164 = !{!165}
!165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !166, size: 64)
!166 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !167)
!167 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!168 = distinct !DICompileUnit(language: DW_LANG_C99, file: !169, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!169 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!170 = distinct !DICompileUnit(language: DW_LANG_C99, file: !171, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!171 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!172 = distinct !DICompileUnit(language: DW_LANG_C99, file: !173, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!173 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!174 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!175 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!176 = distinct !DICompileUnit(language: DW_LANG_C99, file: !177, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!177 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!178 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!179 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!180 = distinct !DICompileUnit(language: DW_LANG_C99, file: !181, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!181 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!182 = distinct !DICompileUnit(language: DW_LANG_C99, file: !183, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!183 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!184 = !{!"clang version 9.0.1-12 "}
!185 = !{i32 2, !"Dwarf Version", i32 4}
!186 = !{i32 2, !"Debug Info Version", i32 3}
!187 = !{i32 1, !"wchar_size", i32 4}
!188 = !{i32 1, !"ThinLTO", i32 0}
!189 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!190 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 115, type: !191, scopeLine: 116, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !11)
!191 = !DISubroutineType(types: !192)
!192 = !{null, !6}
!193 = !DILocalVariable(name: "status", arg: 1, scope: !190, file: !3, line: 115, type: !6)
!194 = !DILocation(line: 115, column: 12, scope: !190)
!195 = !DILocation(line: 117, column: 7, scope: !196)
!196 = distinct !DILexicalBlock(scope: !190, file: !3, line: 117, column: 7)
!197 = !DILocation(line: 117, column: 14, scope: !196)
!198 = !DILocation(line: 117, column: 7, scope: !190)
!199 = !DILocation(line: 118, column: 5, scope: !196)
!200 = !DILocation(line: 118, column: 5, scope: !201)
!201 = distinct !DILexicalBlock(scope: !196, file: !3, line: 118, column: 5)
!202 = !DILocation(line: 121, column: 15, scope: !203)
!203 = distinct !DILexicalBlock(scope: !196, file: !3, line: 120, column: 5)
!204 = !DILocation(line: 121, column: 45, scope: !203)
!205 = !DILocation(line: 121, column: 7, scope: !203)
!206 = !DILocation(line: 123, column: 11, scope: !207)
!207 = distinct !DILexicalBlock(scope: !203, file: !3, line: 123, column: 11)
!208 = !DILocation(line: 123, column: 22, scope: !207)
!209 = !DILocation(line: 123, column: 11, scope: !203)
!210 = !DILocation(line: 125, column: 11, scope: !211)
!211 = distinct !DILexicalBlock(scope: !207, file: !3, line: 124, column: 9)
!212 = !DILocation(line: 134, column: 11, scope: !211)
!213 = !DILocation(line: 141, column: 9, scope: !211)
!214 = !DILocation(line: 144, column: 11, scope: !215)
!215 = distinct !DILexicalBlock(scope: !207, file: !3, line: 143, column: 9)
!216 = !DILocation(line: 150, column: 7, scope: !203)
!217 = !DILocation(line: 151, column: 7, scope: !203)
!218 = !DILocation(line: 152, column: 28, scope: !203)
!219 = !DILocation(line: 152, column: 7, scope: !203)
!220 = !DILocation(line: 154, column: 9, scope: !190)
!221 = !DILocation(line: 154, column: 3, scope: !190)
!222 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !223, file: !223, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!223 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!224 = !DILocalVariable(name: "program", arg: 1, scope: !222, file: !223, line: 634, type: !23)
!225 = !DILocation(line: 634, column: 34, scope: !222)
!226 = !DILocalVariable(name: "infomap", scope: !222, file: !223, line: 636, type: !227)
!227 = !DICompositeType(tag: DW_TAG_array_type, baseType: !228, size: 896, elements: !233)
!228 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !229)
!229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !222, file: !223, line: 636, size: 128, elements: !230)
!230 = !{!231, !232}
!231 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !229, file: !223, line: 636, baseType: !23, size: 64)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !229, file: !223, line: 636, baseType: !23, size: 64, offset: 64)
!233 = !{!234}
!234 = !DISubrange(count: 7)
!235 = !DILocation(line: 636, column: 67, scope: !222)
!236 = !DILocalVariable(name: "node", scope: !222, file: !223, line: 646, type: !23)
!237 = !DILocation(line: 646, column: 15, scope: !222)
!238 = !DILocation(line: 646, column: 22, scope: !222)
!239 = !DILocalVariable(name: "map_prog", scope: !222, file: !223, line: 647, type: !240)
!240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !228, size: 64)
!241 = !DILocation(line: 647, column: 25, scope: !222)
!242 = !DILocation(line: 647, column: 36, scope: !222)
!243 = !DILocation(line: 649, column: 3, scope: !222)
!244 = !DILocation(line: 649, column: 10, scope: !222)
!245 = !DILocation(line: 649, column: 20, scope: !222)
!246 = !DILocation(line: 649, column: 28, scope: !222)
!247 = !DILocation(line: 649, column: 33, scope: !222)
!248 = !DILocation(line: 649, column: 31, scope: !222)
!249 = !DILocation(line: 0, scope: !222)
!250 = !DILocation(line: 650, column: 13, scope: !222)
!251 = distinct !{!251, !243, !250}
!252 = !DILocation(line: 652, column: 7, scope: !253)
!253 = distinct !DILexicalBlock(scope: !222, file: !223, line: 652, column: 7)
!254 = !DILocation(line: 652, column: 17, scope: !253)
!255 = !DILocation(line: 652, column: 7, scope: !222)
!256 = !DILocation(line: 653, column: 12, scope: !253)
!257 = !DILocation(line: 653, column: 22, scope: !253)
!258 = !DILocation(line: 653, column: 10, scope: !253)
!259 = !DILocation(line: 653, column: 5, scope: !253)
!260 = !DILocation(line: 655, column: 11, scope: !222)
!261 = !DILocation(line: 655, column: 3, scope: !222)
!262 = !DILocalVariable(name: "lc_messages", scope: !222, file: !223, line: 659, type: !23)
!263 = !DILocation(line: 659, column: 15, scope: !222)
!264 = !DILocation(line: 659, column: 29, scope: !222)
!265 = !DILocation(line: 660, column: 7, scope: !266)
!266 = distinct !DILexicalBlock(scope: !222, file: !223, line: 660, column: 7)
!267 = !DILocation(line: 660, column: 19, scope: !266)
!268 = !DILocation(line: 660, column: 22, scope: !266)
!269 = !DILocation(line: 660, column: 7, scope: !222)
!270 = !DILocation(line: 666, column: 7, scope: !271)
!271 = distinct !DILexicalBlock(scope: !266, file: !223, line: 661, column: 5)
!272 = !DILocation(line: 668, column: 5, scope: !271)
!273 = !DILocation(line: 669, column: 11, scope: !222)
!274 = !DILocation(line: 670, column: 24, scope: !222)
!275 = !DILocation(line: 669, column: 3, scope: !222)
!276 = !DILocation(line: 671, column: 11, scope: !222)
!277 = !DILocation(line: 672, column: 11, scope: !222)
!278 = !DILocation(line: 672, column: 17, scope: !222)
!279 = !DILocation(line: 672, column: 25, scope: !222)
!280 = !DILocation(line: 672, column: 22, scope: !222)
!281 = !DILocation(line: 671, column: 3, scope: !222)
!282 = !DILocation(line: 673, column: 1, scope: !222)
!283 = !DILocalVariable(name: "program", arg: 1, scope: !284, file: !223, line: 634, type: !23)
!284 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !223, file: !223, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !285, retainedNodes: !11)
!285 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !286, nameTableKind: None)
!286 = !{!287, !290, !300, !303}
!287 = !DIGlobalVariableExpression(var: !288, expr: !DIExpression())
!288 = distinct !DIGlobalVariable(name: "unknown", scope: !289, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!289 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !285, retainedNodes: !11)
!290 = !DIGlobalVariableExpression(var: !291, expr: !DIExpression())
!291 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !285, file: !3, line: 107, type: !292, isLocal: true, isDefinition: true)
!292 = !DICompositeType(tag: DW_TAG_array_type, baseType: !293, size: 768, elements: !29)
!293 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !294)
!294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !295)
!295 = !{!296, !297, !298, !299}
!296 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !294, file: !20, line: 52, baseType: !23, size: 64)
!297 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !294, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!298 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !294, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!299 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !294, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!300 = !DIGlobalVariableExpression(var: !301, expr: !DIExpression())
!301 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !285, file: !3, line: 89, type: !302, isLocal: true, isDefinition: true)
!302 = !DICompositeType(tag: DW_TAG_array_type, baseType: !293, size: 3584, elements: !34)
!303 = !DIGlobalVariableExpression(var: !304, expr: !DIExpression())
!304 = distinct !DIGlobalVariable(name: "printed", scope: !305, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!305 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !285, retainedNodes: !11)
!306 = !DILocalVariable(name: "infomap", scope: !284, file: !223, line: 636, type: !307)
!307 = !DICompositeType(tag: DW_TAG_array_type, baseType: !308, size: 896, elements: !233)
!308 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !309)
!309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !284, file: !223, line: 636, size: 128, elements: !310)
!310 = !{!311, !312}
!311 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !309, file: !223, line: 636, baseType: !23, size: 64)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !309, file: !223, line: 636, baseType: !23, size: 64, offset: 64)
!313 = !DILocalVariable(name: "node", scope: !284, file: !223, line: 646, type: !23)
!314 = !DILocalVariable(name: "map_prog", scope: !284, file: !223, line: 647, type: !315)
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !308, size: 64)
!316 = !DILocalVariable(name: "lc_messages", scope: !317, file: !223, line: 659, type: !23)
!317 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !223, file: !223, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !318, retainedNodes: !11)
!318 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !319, nameTableKind: None)
!319 = !{!320, !323, !333, !336}
!320 = !DIGlobalVariableExpression(var: !321, expr: !DIExpression())
!321 = distinct !DIGlobalVariable(name: "unknown", scope: !322, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!322 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !318, retainedNodes: !11)
!323 = !DIGlobalVariableExpression(var: !324, expr: !DIExpression())
!324 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !318, file: !3, line: 107, type: !325, isLocal: true, isDefinition: true)
!325 = !DICompositeType(tag: DW_TAG_array_type, baseType: !326, size: 768, elements: !29)
!326 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !327)
!327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !328)
!328 = !{!329, !330, !331, !332}
!329 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !327, file: !20, line: 52, baseType: !23, size: 64)
!330 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !327, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !327, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!332 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !327, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!333 = !DIGlobalVariableExpression(var: !334, expr: !DIExpression())
!334 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !318, file: !3, line: 89, type: !335, isLocal: true, isDefinition: true)
!335 = !DICompositeType(tag: DW_TAG_array_type, baseType: !326, size: 3584, elements: !34)
!336 = !DIGlobalVariableExpression(var: !337, expr: !DIExpression())
!337 = distinct !DIGlobalVariable(name: "printed", scope: !338, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!338 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !318, retainedNodes: !11)
!339 = !DILocalVariable(name: "argc", arg: 1, scope: !2, file: !3, line: 260, type: !6)
!340 = !DILocation(line: 260, column: 11, scope: !2)
!341 = !DILocalVariable(name: "argv", arg: 2, scope: !2, file: !3, line: 260, type: !7)
!342 = !DILocation(line: 260, column: 24, scope: !2)
!343 = !DILocalVariable(name: "toprint", scope: !2, file: !3, line: 265, type: !84)
!344 = !DILocation(line: 265, column: 16, scope: !2)
!345 = !DILocation(line: 268, column: 21, scope: !2)
!346 = !DILocation(line: 268, column: 3, scope: !2)
!347 = !DILocation(line: 269, column: 3, scope: !2)
!348 = !DILocation(line: 270, column: 3, scope: !2)
!349 = !DILocation(line: 271, column: 3, scope: !2)
!350 = !DILocation(line: 273, column: 3, scope: !2)
!351 = !DILocation(line: 275, column: 30, scope: !2)
!352 = !DILocation(line: 275, column: 36, scope: !2)
!353 = !DILocation(line: 275, column: 13, scope: !2)
!354 = !DILocation(line: 275, column: 11, scope: !2)
!355 = !DILocation(line: 277, column: 7, scope: !356)
!356 = distinct !DILexicalBlock(scope: !2, file: !3, line: 277, column: 7)
!357 = !DILocation(line: 277, column: 15, scope: !356)
!358 = !DILocation(line: 278, column: 13, scope: !356)
!359 = !DILocation(line: 278, column: 5, scope: !356)
!360 = !DILocation(line: 280, column: 7, scope: !361)
!361 = distinct !DILexicalBlock(scope: !2, file: !3, line: 280, column: 7)
!362 = !DILocation(line: 281, column: 8, scope: !361)
!363 = !DILocation(line: 280, column: 7, scope: !2)
!364 = !DILocalVariable(name: "name", scope: !365, file: !3, line: 284, type: !366)
!365 = distinct !DILexicalBlock(scope: !361, file: !3, line: 283, column: 5)
!366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utsname", file: !367, line: 48, size: 3120, elements: !368)
!367 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/utsname.h", directory: "")
!368 = !{!369, !373, !374, !375, !376, !377}
!369 = !DIDerivedType(tag: DW_TAG_member, name: "sysname", scope: !366, file: !367, line: 51, baseType: !370, size: 520)
!370 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 520, elements: !371)
!371 = !{!372}
!372 = !DISubrange(count: 65)
!373 = !DIDerivedType(tag: DW_TAG_member, name: "nodename", scope: !366, file: !367, line: 54, baseType: !370, size: 520, offset: 520)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !366, file: !367, line: 57, baseType: !370, size: 520, offset: 1040)
!375 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !366, file: !367, line: 59, baseType: !370, size: 520, offset: 1560)
!376 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !366, file: !367, line: 62, baseType: !370, size: 520, offset: 2080)
!377 = !DIDerivedType(tag: DW_TAG_member, name: "domainname", scope: !366, file: !367, line: 67, baseType: !370, size: 520, offset: 2600)
!378 = !DILocation(line: 284, column: 22, scope: !365)
!379 = !DILocation(line: 286, column: 11, scope: !380)
!380 = distinct !DILexicalBlock(scope: !365, file: !3, line: 286, column: 11)
!381 = !DILocation(line: 286, column: 25, scope: !380)
!382 = !DILocation(line: 287, column: 9, scope: !380)
!383 = !DILocation(line: 289, column: 11, scope: !384)
!384 = distinct !DILexicalBlock(scope: !365, file: !3, line: 289, column: 11)
!385 = !DILocation(line: 289, column: 19, scope: !384)
!386 = !DILocation(line: 289, column: 11, scope: !365)
!387 = !DILocation(line: 290, column: 29, scope: !384)
!388 = !DILocation(line: 290, column: 24, scope: !384)
!389 = !DILocation(line: 290, column: 9, scope: !384)
!390 = !DILocation(line: 291, column: 11, scope: !391)
!391 = distinct !DILexicalBlock(scope: !365, file: !3, line: 291, column: 11)
!392 = !DILocation(line: 291, column: 19, scope: !391)
!393 = !DILocation(line: 291, column: 11, scope: !365)
!394 = !DILocation(line: 292, column: 29, scope: !391)
!395 = !DILocation(line: 292, column: 24, scope: !391)
!396 = !DILocation(line: 292, column: 9, scope: !391)
!397 = !DILocation(line: 293, column: 11, scope: !398)
!398 = distinct !DILexicalBlock(scope: !365, file: !3, line: 293, column: 11)
!399 = !DILocation(line: 293, column: 19, scope: !398)
!400 = !DILocation(line: 293, column: 11, scope: !365)
!401 = !DILocation(line: 294, column: 29, scope: !398)
!402 = !DILocation(line: 294, column: 24, scope: !398)
!403 = !DILocation(line: 294, column: 9, scope: !398)
!404 = !DILocation(line: 295, column: 11, scope: !405)
!405 = distinct !DILexicalBlock(scope: !365, file: !3, line: 295, column: 11)
!406 = !DILocation(line: 295, column: 19, scope: !405)
!407 = !DILocation(line: 295, column: 11, scope: !365)
!408 = !DILocation(line: 296, column: 29, scope: !405)
!409 = !DILocation(line: 296, column: 24, scope: !405)
!410 = !DILocation(line: 296, column: 9, scope: !405)
!411 = !DILocation(line: 297, column: 11, scope: !412)
!412 = distinct !DILexicalBlock(scope: !365, file: !3, line: 297, column: 11)
!413 = !DILocation(line: 297, column: 19, scope: !412)
!414 = !DILocation(line: 297, column: 11, scope: !365)
!415 = !DILocation(line: 298, column: 29, scope: !412)
!416 = !DILocation(line: 298, column: 24, scope: !412)
!417 = !DILocation(line: 298, column: 9, scope: !412)
!418 = !DILocation(line: 299, column: 5, scope: !365)
!419 = !DILocation(line: 301, column: 7, scope: !420)
!420 = distinct !DILexicalBlock(scope: !2, file: !3, line: 301, column: 7)
!421 = !DILocation(line: 301, column: 15, scope: !420)
!422 = !DILocation(line: 301, column: 7, scope: !2)
!423 = !DILocalVariable(name: "element", scope: !424, file: !3, line: 303, type: !23)
!424 = distinct !DILexicalBlock(scope: !420, file: !3, line: 302, column: 5)
!425 = !DILocation(line: 303, column: 19, scope: !424)
!426 = !DILocation(line: 341, column: 14, scope: !427)
!427 = distinct !DILexicalBlock(scope: !424, file: !3, line: 341, column: 11)
!428 = !DILocation(line: 341, column: 22, scope: !427)
!429 = !DILocation(line: 341, column: 37, scope: !427)
!430 = !DILocation(line: 341, column: 45, scope: !427)
!431 = !DILocation(line: 341, column: 11, scope: !424)
!432 = !DILocation(line: 342, column: 24, scope: !427)
!433 = !DILocation(line: 342, column: 9, scope: !427)
!434 = !DILocation(line: 343, column: 5, scope: !424)
!435 = !DILocation(line: 345, column: 7, scope: !436)
!436 = distinct !DILexicalBlock(scope: !2, file: !3, line: 345, column: 7)
!437 = !DILocation(line: 345, column: 15, scope: !436)
!438 = !DILocation(line: 345, column: 7, scope: !2)
!439 = !DILocalVariable(name: "element", scope: !440, file: !3, line: 347, type: !23)
!440 = distinct !DILexicalBlock(scope: !436, file: !3, line: 346, column: 5)
!441 = !DILocation(line: 347, column: 19, scope: !440)
!442 = !DILocation(line: 366, column: 14, scope: !443)
!443 = distinct !DILexicalBlock(scope: !440, file: !3, line: 366, column: 11)
!444 = !DILocation(line: 366, column: 22, scope: !443)
!445 = !DILocation(line: 366, column: 37, scope: !443)
!446 = !DILocation(line: 366, column: 45, scope: !443)
!447 = !DILocation(line: 366, column: 11, scope: !440)
!448 = !DILocation(line: 367, column: 24, scope: !443)
!449 = !DILocation(line: 367, column: 9, scope: !443)
!450 = !DILocation(line: 368, column: 5, scope: !440)
!451 = !DILocation(line: 370, column: 7, scope: !452)
!452 = distinct !DILexicalBlock(scope: !2, file: !3, line: 370, column: 7)
!453 = !DILocation(line: 370, column: 15, scope: !452)
!454 = !DILocation(line: 370, column: 7, scope: !2)
!455 = !DILocation(line: 371, column: 5, scope: !452)
!456 = !DILocation(line: 373, column: 3, scope: !2)
!457 = !DILocation(line: 375, column: 3, scope: !2)
!458 = !DILocalVariable(name: "argc", arg: 1, scope: !459, file: !3, line: 260, type: !6)
!459 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !460, retainedNodes: !11)
!460 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !461, nameTableKind: None)
!461 = !{!462, !464, !474, !477}
!462 = !DIGlobalVariableExpression(var: !463, expr: !DIExpression())
!463 = distinct !DIGlobalVariable(name: "unknown", scope: !459, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!464 = !DIGlobalVariableExpression(var: !465, expr: !DIExpression())
!465 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !460, file: !3, line: 107, type: !466, isLocal: true, isDefinition: true)
!466 = !DICompositeType(tag: DW_TAG_array_type, baseType: !467, size: 768, elements: !29)
!467 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !468)
!468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !469)
!469 = !{!470, !471, !472, !473}
!470 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !468, file: !20, line: 52, baseType: !23, size: 64)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !468, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !468, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!473 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !468, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!474 = !DIGlobalVariableExpression(var: !475, expr: !DIExpression())
!475 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !460, file: !3, line: 89, type: !476, isLocal: true, isDefinition: true)
!476 = !DICompositeType(tag: DW_TAG_array_type, baseType: !467, size: 3584, elements: !34)
!477 = !DIGlobalVariableExpression(var: !478, expr: !DIExpression())
!478 = distinct !DIGlobalVariable(name: "printed", scope: !479, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!479 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !460, retainedNodes: !11)
!480 = !DILocalVariable(name: "argv", arg: 2, scope: !459, file: !3, line: 260, type: !7)
!481 = !DILocalVariable(name: "toprint", scope: !459, file: !3, line: 265, type: !84)
!482 = distinct !DISubprogram(name: "decode_switches", scope: !3, file: !3, line: 175, type: !4, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!483 = !DILocalVariable(name: "argc", arg: 1, scope: !482, file: !3, line: 175, type: !6)
!484 = !DILocation(line: 175, column: 22, scope: !482)
!485 = !DILocalVariable(name: "argv", arg: 2, scope: !482, file: !3, line: 175, type: !7)
!486 = !DILocation(line: 175, column: 35, scope: !482)
!487 = !DILocalVariable(name: "c", scope: !482, file: !3, line: 177, type: !6)
!488 = !DILocation(line: 177, column: 7, scope: !482)
!489 = !DILocalVariable(name: "toprint", scope: !482, file: !3, line: 178, type: !84)
!490 = !DILocation(line: 178, column: 16, scope: !482)
!491 = !DILocation(line: 180, column: 7, scope: !492)
!492 = distinct !DILexicalBlock(scope: !482, file: !3, line: 180, column: 7)
!493 = !DILocation(line: 180, column: 18, scope: !492)
!494 = !DILocation(line: 180, column: 7, scope: !482)
!495 = !DILocation(line: 182, column: 7, scope: !496)
!496 = distinct !DILexicalBlock(scope: !492, file: !3, line: 181, column: 5)
!497 = !DILocation(line: 182, column: 32, scope: !496)
!498 = !DILocation(line: 182, column: 38, scope: !496)
!499 = !DILocation(line: 182, column: 19, scope: !496)
!500 = !DILocation(line: 182, column: 17, scope: !496)
!501 = !DILocation(line: 183, column: 58, scope: !496)
!502 = !DILocation(line: 185, column: 19, scope: !503)
!503 = distinct !DILexicalBlock(scope: !496, file: !3, line: 184, column: 9)
!504 = !DILocation(line: 185, column: 11, scope: !503)
!505 = !DILocation(line: 187, column: 13, scope: !506)
!506 = distinct !DILexicalBlock(scope: !503, file: !3, line: 186, column: 13)
!507 = !DILocation(line: 189, column: 13, scope: !506)
!508 = !DILocation(line: 192, column: 15, scope: !506)
!509 = !DILocation(line: 195, column: 15, scope: !496)
!510 = !DILocation(line: 196, column: 5, scope: !496)
!511 = !DILocation(line: 199, column: 7, scope: !512)
!512 = distinct !DILexicalBlock(scope: !492, file: !3, line: 198, column: 5)
!513 = !DILocation(line: 199, column: 32, scope: !512)
!514 = !DILocation(line: 199, column: 38, scope: !512)
!515 = !DILocation(line: 199, column: 19, scope: !512)
!516 = !DILocation(line: 199, column: 17, scope: !512)
!517 = !DILocation(line: 200, column: 59, scope: !512)
!518 = !DILocation(line: 202, column: 19, scope: !519)
!519 = distinct !DILexicalBlock(scope: !512, file: !3, line: 201, column: 9)
!520 = !DILocation(line: 202, column: 11, scope: !519)
!521 = !DILocation(line: 205, column: 23, scope: !522)
!522 = distinct !DILexicalBlock(scope: !519, file: !3, line: 203, column: 13)
!523 = !DILocation(line: 206, column: 15, scope: !522)
!524 = !DILocation(line: 209, column: 23, scope: !522)
!525 = !DILocation(line: 210, column: 15, scope: !522)
!526 = !DILocation(line: 213, column: 23, scope: !522)
!527 = !DILocation(line: 214, column: 15, scope: !522)
!528 = !DILocation(line: 217, column: 23, scope: !522)
!529 = !DILocation(line: 218, column: 15, scope: !522)
!530 = !DILocation(line: 221, column: 23, scope: !522)
!531 = !DILocation(line: 222, column: 15, scope: !522)
!532 = !DILocation(line: 225, column: 23, scope: !522)
!533 = !DILocation(line: 226, column: 15, scope: !522)
!534 = !DILocation(line: 229, column: 23, scope: !522)
!535 = !DILocation(line: 230, column: 15, scope: !522)
!536 = !DILocation(line: 233, column: 23, scope: !522)
!537 = !DILocation(line: 234, column: 15, scope: !522)
!538 = !DILocation(line: 237, column: 23, scope: !522)
!539 = !DILocation(line: 238, column: 15, scope: !522)
!540 = !DILocation(line: 240, column: 13, scope: !522)
!541 = !DILocation(line: 242, column: 13, scope: !522)
!542 = !DILocation(line: 245, column: 15, scope: !522)
!543 = distinct !{!543, !511, !544}
!544 = !DILocation(line: 247, column: 9, scope: !512)
!545 = !DILocation(line: 250, column: 7, scope: !546)
!546 = distinct !DILexicalBlock(scope: !482, file: !3, line: 250, column: 7)
!547 = !DILocation(line: 250, column: 15, scope: !546)
!548 = !DILocation(line: 250, column: 12, scope: !546)
!549 = !DILocation(line: 250, column: 7, scope: !482)
!550 = !DILocation(line: 252, column: 20, scope: !551)
!551 = distinct !DILexicalBlock(scope: !546, file: !3, line: 251, column: 5)
!552 = !DILocation(line: 252, column: 50, scope: !551)
!553 = !DILocation(line: 252, column: 55, scope: !551)
!554 = !DILocation(line: 252, column: 43, scope: !551)
!555 = !DILocation(line: 252, column: 7, scope: !551)
!556 = !DILocation(line: 253, column: 7, scope: !551)
!557 = !DILocation(line: 256, column: 10, scope: !482)
!558 = !DILocation(line: 256, column: 3, scope: !482)
!559 = !DILocalVariable(name: "argc", arg: 1, scope: !560, file: !3, line: 175, type: !6)
!560 = distinct !DISubprogram(name: "decode_switches", scope: !3, file: !3, line: 175, type: !4, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !561, retainedNodes: !11)
!561 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !562, nameTableKind: None)
!562 = !{!563, !566, !576, !579}
!563 = !DIGlobalVariableExpression(var: !564, expr: !DIExpression())
!564 = distinct !DIGlobalVariable(name: "unknown", scope: !565, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!565 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !561, retainedNodes: !11)
!566 = !DIGlobalVariableExpression(var: !567, expr: !DIExpression())
!567 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !561, file: !3, line: 107, type: !568, isLocal: true, isDefinition: true)
!568 = !DICompositeType(tag: DW_TAG_array_type, baseType: !569, size: 768, elements: !29)
!569 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !570)
!570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !571)
!571 = !{!572, !573, !574, !575}
!572 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !570, file: !20, line: 52, baseType: !23, size: 64)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !570, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !570, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !570, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!576 = !DIGlobalVariableExpression(var: !577, expr: !DIExpression())
!577 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !561, file: !3, line: 89, type: !578, isLocal: true, isDefinition: true)
!578 = !DICompositeType(tag: DW_TAG_array_type, baseType: !569, size: 3584, elements: !34)
!579 = !DIGlobalVariableExpression(var: !580, expr: !DIExpression())
!580 = distinct !DIGlobalVariable(name: "printed", scope: !581, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!581 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !561, retainedNodes: !11)
!582 = !DILocalVariable(name: "argv", arg: 2, scope: !560, file: !3, line: 175, type: !7)
!583 = !DILocalVariable(name: "c", scope: !560, file: !3, line: 177, type: !6)
!584 = !DILocalVariable(name: "toprint", scope: !560, file: !3, line: 178, type: !84)
!585 = !DILocalVariable(name: "element", arg: 1, scope: !38, file: !3, line: 161, type: !23)
!586 = !DILocation(line: 161, column: 28, scope: !38)
!587 = !DILocation(line: 164, column: 7, scope: !588)
!588 = distinct !DILexicalBlock(scope: !38, file: !3, line: 164, column: 7)
!589 = !DILocation(line: 164, column: 7, scope: !38)
!590 = !DILocation(line: 165, column: 5, scope: !588)
!591 = !DILocation(line: 166, column: 11, scope: !38)
!592 = !DILocation(line: 167, column: 3, scope: !38)
!593 = !DILocation(line: 168, column: 1, scope: !38)
!594 = !DILocalVariable(name: "element", arg: 1, scope: !595, file: !3, line: 161, type: !23)
!595 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !596, retainedNodes: !11)
!596 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !597, nameTableKind: None)
!597 = !{!598, !601, !611, !614}
!598 = !DIGlobalVariableExpression(var: !599, expr: !DIExpression())
!599 = distinct !DIGlobalVariable(name: "unknown", scope: !600, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!600 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !596, retainedNodes: !11)
!601 = !DIGlobalVariableExpression(var: !602, expr: !DIExpression())
!602 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !596, file: !3, line: 107, type: !603, isLocal: true, isDefinition: true)
!603 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 768, elements: !29)
!604 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !605)
!605 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !606)
!606 = !{!607, !608, !609, !610}
!607 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !605, file: !20, line: 52, baseType: !23, size: 64)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !605, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!609 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !605, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!610 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !605, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!611 = !DIGlobalVariableExpression(var: !612, expr: !DIExpression())
!612 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !596, file: !3, line: 89, type: !613, isLocal: true, isDefinition: true)
!613 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 3584, elements: !34)
!614 = !DIGlobalVariableExpression(var: !615, expr: !DIExpression())
!615 = distinct !DIGlobalVariable(name: "printed", scope: !595, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!616 = distinct !DISubprogram(name: "close_stdout", scope: !62, file: !62, line: 117, type: !617, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !57, retainedNodes: !11)
!617 = !DISubroutineType(types: !618)
!618 = !{null}
!619 = !DILocation(line: 119, column: 21, scope: !620)
!620 = distinct !DILexicalBlock(scope: !616, file: !62, line: 119, column: 7)
!621 = !DILocation(line: 119, column: 7, scope: !620)
!622 = !DILocation(line: 119, column: 29, scope: !620)
!623 = !DILocation(line: 120, column: 7, scope: !620)
!624 = !DILocation(line: 120, column: 12, scope: !620)
!625 = !DILocation(line: 120, column: 25, scope: !620)
!626 = !DILocation(line: 120, column: 28, scope: !620)
!627 = !DILocation(line: 120, column: 34, scope: !620)
!628 = !DILocation(line: 119, column: 7, scope: !616)
!629 = !DILocalVariable(name: "write_error", scope: !630, file: !62, line: 122, type: !23)
!630 = distinct !DILexicalBlock(scope: !620, file: !62, line: 121, column: 5)
!631 = !DILocation(line: 122, column: 19, scope: !630)
!632 = !DILocation(line: 122, column: 33, scope: !630)
!633 = !DILocation(line: 123, column: 11, scope: !634)
!634 = distinct !DILexicalBlock(scope: !630, file: !62, line: 123, column: 11)
!635 = !DILocation(line: 123, column: 11, scope: !630)
!636 = !DILocation(line: 124, column: 19, scope: !634)
!637 = !DILocation(line: 124, column: 52, scope: !634)
!638 = !DILocation(line: 124, column: 36, scope: !634)
!639 = !DILocation(line: 125, column: 16, scope: !634)
!640 = !DILocation(line: 124, column: 9, scope: !634)
!641 = !DILocation(line: 127, column: 19, scope: !634)
!642 = !DILocation(line: 127, column: 32, scope: !634)
!643 = !DILocation(line: 127, column: 9, scope: !634)
!644 = !DILocation(line: 129, column: 14, scope: !630)
!645 = !DILocation(line: 129, column: 7, scope: !630)
!646 = !DILocation(line: 134, column: 42, scope: !647)
!647 = distinct !DILexicalBlock(scope: !616, file: !62, line: 134, column: 7)
!648 = !DILocation(line: 134, column: 28, scope: !647)
!649 = !DILocation(line: 134, column: 50, scope: !647)
!650 = !DILocation(line: 134, column: 7, scope: !616)
!651 = !DILocation(line: 135, column: 12, scope: !647)
!652 = !DILocation(line: 135, column: 5, scope: !647)
!653 = !DILocation(line: 136, column: 1, scope: !616)
!654 = distinct !DISubprogram(name: "set_program_name", scope: !76, file: !76, line: 39, type: !39, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !72, retainedNodes: !11)
!655 = !DILocalVariable(name: "argv0", arg: 1, scope: !654, file: !76, line: 39, type: !23)
!656 = !DILocation(line: 39, column: 31, scope: !654)
!657 = !DILocalVariable(name: "slash", scope: !654, file: !76, line: 46, type: !23)
!658 = !DILocation(line: 46, column: 15, scope: !654)
!659 = !DILocalVariable(name: "base", scope: !654, file: !76, line: 47, type: !23)
!660 = !DILocation(line: 47, column: 15, scope: !654)
!661 = !DILocation(line: 51, column: 7, scope: !662)
!662 = distinct !DILexicalBlock(scope: !654, file: !76, line: 51, column: 7)
!663 = !DILocation(line: 51, column: 13, scope: !662)
!664 = !DILocation(line: 51, column: 7, scope: !654)
!665 = !DILocation(line: 55, column: 14, scope: !666)
!666 = distinct !DILexicalBlock(scope: !662, file: !76, line: 52, column: 5)
!667 = !DILocation(line: 54, column: 7, scope: !666)
!668 = !DILocation(line: 56, column: 7, scope: !666)
!669 = !DILocation(line: 59, column: 20, scope: !654)
!670 = !DILocation(line: 59, column: 11, scope: !654)
!671 = !DILocation(line: 59, column: 9, scope: !654)
!672 = !DILocation(line: 60, column: 11, scope: !654)
!673 = !DILocation(line: 60, column: 17, scope: !654)
!674 = !DILocation(line: 60, column: 27, scope: !654)
!675 = !DILocation(line: 60, column: 33, scope: !654)
!676 = !DILocation(line: 60, column: 39, scope: !654)
!677 = !DILocation(line: 60, column: 8, scope: !654)
!678 = !DILocation(line: 61, column: 7, scope: !679)
!679 = distinct !DILexicalBlock(scope: !654, file: !76, line: 61, column: 7)
!680 = !DILocation(line: 61, column: 14, scope: !679)
!681 = !DILocation(line: 61, column: 12, scope: !679)
!682 = !DILocation(line: 61, column: 20, scope: !679)
!683 = !DILocation(line: 61, column: 25, scope: !679)
!684 = !DILocation(line: 61, column: 37, scope: !679)
!685 = !DILocation(line: 61, column: 42, scope: !679)
!686 = !DILocation(line: 61, column: 28, scope: !679)
!687 = !DILocation(line: 61, column: 61, scope: !679)
!688 = !DILocation(line: 61, column: 7, scope: !654)
!689 = !DILocation(line: 63, column: 15, scope: !690)
!690 = distinct !DILexicalBlock(scope: !679, file: !76, line: 62, column: 5)
!691 = !DILocation(line: 63, column: 13, scope: !690)
!692 = !DILocation(line: 64, column: 20, scope: !693)
!693 = distinct !DILexicalBlock(scope: !690, file: !76, line: 64, column: 11)
!694 = !DILocation(line: 64, column: 11, scope: !693)
!695 = !DILocation(line: 64, column: 36, scope: !693)
!696 = !DILocation(line: 64, column: 11, scope: !690)
!697 = !DILocation(line: 66, column: 19, scope: !698)
!698 = distinct !DILexicalBlock(scope: !693, file: !76, line: 65, column: 9)
!699 = !DILocation(line: 66, column: 24, scope: !698)
!700 = !DILocation(line: 66, column: 17, scope: !698)
!701 = !DILocation(line: 70, column: 52, scope: !698)
!702 = !DILocation(line: 70, column: 41, scope: !698)
!703 = !DILocation(line: 72, column: 9, scope: !698)
!704 = !DILocation(line: 73, column: 5, scope: !690)
!705 = !DILocation(line: 84, column: 18, scope: !654)
!706 = !DILocation(line: 84, column: 16, scope: !654)
!707 = !DILocation(line: 90, column: 38, scope: !654)
!708 = !DILocation(line: 90, column: 27, scope: !654)
!709 = !DILocation(line: 92, column: 1, scope: !654)
!710 = !DILocalVariable(name: "argv0", arg: 1, scope: !711, file: !76, line: 39, type: !23)
!711 = distinct !DISubprogram(name: "set_program_name", scope: !76, file: !76, line: 39, type: !39, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !712, retainedNodes: !11)
!712 = distinct !DICompileUnit(language: DW_LANG_C99, file: !73, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !74, globals: !713, nameTableKind: None)
!713 = !{!714}
!714 = !DIGlobalVariableExpression(var: !715, expr: !DIExpression())
!715 = distinct !DIGlobalVariable(name: "program_name", scope: !712, file: !76, line: 33, type: !23, isLocal: false, isDefinition: true)
!716 = !DILocalVariable(name: "slash", scope: !711, file: !76, line: 46, type: !23)
!717 = !DILocalVariable(name: "base", scope: !711, file: !76, line: 47, type: !23)
!718 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !719, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!719 = !DISubroutineType(types: !720)
!720 = !{!6, !721, !9, !6}
!721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !118, size: 64)
!722 = !DILocalVariable(name: "o", arg: 1, scope: !718, file: !105, line: 152, type: !721)
!723 = !DILocation(line: 152, column: 43, scope: !718)
!724 = !DILocalVariable(name: "c", arg: 2, scope: !718, file: !105, line: 152, type: !9)
!725 = !DILocation(line: 152, column: 51, scope: !718)
!726 = !DILocalVariable(name: "i", arg: 3, scope: !718, file: !105, line: 152, type: !6)
!727 = !DILocation(line: 152, column: 58, scope: !718)
!728 = !DILocalVariable(name: "uc", scope: !718, file: !105, line: 154, type: !167)
!729 = !DILocation(line: 154, column: 17, scope: !718)
!730 = !DILocation(line: 154, column: 22, scope: !718)
!731 = !DILocalVariable(name: "p", scope: !718, file: !105, line: 155, type: !732)
!732 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !84, size: 64)
!733 = !DILocation(line: 155, column: 17, scope: !718)
!734 = !DILocation(line: 156, column: 6, scope: !718)
!735 = !DILocation(line: 156, column: 10, scope: !718)
!736 = !DILocation(line: 156, column: 41, scope: !718)
!737 = !DILocation(line: 156, column: 5, scope: !718)
!738 = !DILocation(line: 156, column: 59, scope: !718)
!739 = !DILocation(line: 156, column: 62, scope: !718)
!740 = !DILocation(line: 156, column: 57, scope: !718)
!741 = !DILocalVariable(name: "shift", scope: !718, file: !105, line: 157, type: !6)
!742 = !DILocation(line: 157, column: 7, scope: !718)
!743 = !DILocation(line: 157, column: 15, scope: !718)
!744 = !DILocation(line: 157, column: 18, scope: !718)
!745 = !DILocalVariable(name: "r", scope: !718, file: !105, line: 158, type: !6)
!746 = !DILocation(line: 158, column: 7, scope: !718)
!747 = !DILocation(line: 158, column: 13, scope: !718)
!748 = !DILocation(line: 158, column: 12, scope: !718)
!749 = !DILocation(line: 158, column: 18, scope: !718)
!750 = !DILocation(line: 158, column: 15, scope: !718)
!751 = !DILocation(line: 158, column: 25, scope: !718)
!752 = !DILocation(line: 159, column: 11, scope: !718)
!753 = !DILocation(line: 159, column: 13, scope: !718)
!754 = !DILocation(line: 159, column: 20, scope: !718)
!755 = !DILocation(line: 159, column: 18, scope: !718)
!756 = !DILocation(line: 159, column: 26, scope: !718)
!757 = !DILocation(line: 159, column: 23, scope: !718)
!758 = !DILocation(line: 159, column: 4, scope: !718)
!759 = !DILocation(line: 159, column: 6, scope: !718)
!760 = !DILocation(line: 160, column: 10, scope: !718)
!761 = !DILocation(line: 160, column: 3, scope: !718)
!762 = !DILocalVariable(name: "o", arg: 1, scope: !763, file: !105, line: 152, type: !766)
!763 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !764, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !774, retainedNodes: !11)
!764 = !DISubroutineType(types: !765)
!765 = !{!6, !766, !9, !6}
!766 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !767, size: 64)
!767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !768)
!768 = !{!769, !770, !771, !772, !773}
!769 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !767, file: !105, line: 68, baseType: !82, size: 32)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !767, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !767, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !767, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !767, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!774 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !775, nameTableKind: None)
!775 = !{!776, !778, !780, !782, !784, !786, !793, !795}
!776 = !DIGlobalVariableExpression(var: !777, expr: !DIExpression())
!777 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !774, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!778 = !DIGlobalVariableExpression(var: !779, expr: !DIExpression())
!779 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !774, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!780 = !DIGlobalVariableExpression(var: !781, expr: !DIExpression())
!781 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !774, file: !105, line: 1052, type: !767, isLocal: false, isDefinition: true)
!782 = !DIGlobalVariableExpression(var: !783, expr: !DIExpression())
!783 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !774, file: !105, line: 116, type: !767, isLocal: true, isDefinition: true)
!784 = !DIGlobalVariableExpression(var: !785, expr: !DIExpression())
!785 = distinct !DIGlobalVariable(name: "slot0", scope: !774, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!786 = !DIGlobalVariableExpression(var: !787, expr: !DIExpression())
!787 = distinct !DIGlobalVariable(name: "slotvec", scope: !774, file: !105, line: 845, type: !788, isLocal: true, isDefinition: true)
!788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !789, size: 64)
!789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !790)
!790 = !{!791, !792}
!791 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !789, file: !105, line: 836, baseType: !99, size: 64)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !789, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!793 = !DIGlobalVariableExpression(var: !794, expr: !DIExpression())
!794 = distinct !DIGlobalVariable(name: "nslots", scope: !774, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!795 = !DIGlobalVariableExpression(var: !796, expr: !DIExpression())
!796 = distinct !DIGlobalVariable(name: "slotvec0", scope: !774, file: !105, line: 844, type: !789, isLocal: true, isDefinition: true)
!797 = !DILocalVariable(name: "c", arg: 2, scope: !763, file: !105, line: 152, type: !9)
!798 = !DILocalVariable(name: "i", arg: 3, scope: !763, file: !105, line: 152, type: !6)
!799 = !DILocalVariable(name: "uc", scope: !763, file: !105, line: 154, type: !167)
!800 = !DILocalVariable(name: "p", scope: !763, file: !105, line: 155, type: !732)
!801 = !DILocalVariable(name: "shift", scope: !802, file: !105, line: 157, type: !6)
!802 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !803, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !813, retainedNodes: !11)
!803 = !DISubroutineType(types: !804)
!804 = !{!6, !805, !9, !6}
!805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !806, size: 64)
!806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !807)
!807 = !{!808, !809, !810, !811, !812}
!808 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !806, file: !105, line: 68, baseType: !82, size: 32)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !806, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !806, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !806, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !806, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!813 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !814, nameTableKind: None)
!814 = !{!815, !817, !819, !821, !823, !825, !832, !834}
!815 = !DIGlobalVariableExpression(var: !816, expr: !DIExpression())
!816 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !813, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!817 = !DIGlobalVariableExpression(var: !818, expr: !DIExpression())
!818 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !813, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!819 = !DIGlobalVariableExpression(var: !820, expr: !DIExpression())
!820 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !813, file: !105, line: 1052, type: !806, isLocal: false, isDefinition: true)
!821 = !DIGlobalVariableExpression(var: !822, expr: !DIExpression())
!822 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !813, file: !105, line: 116, type: !806, isLocal: true, isDefinition: true)
!823 = !DIGlobalVariableExpression(var: !824, expr: !DIExpression())
!824 = distinct !DIGlobalVariable(name: "slot0", scope: !813, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!825 = !DIGlobalVariableExpression(var: !826, expr: !DIExpression())
!826 = distinct !DIGlobalVariable(name: "slotvec", scope: !813, file: !105, line: 845, type: !827, isLocal: true, isDefinition: true)
!827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !828, size: 64)
!828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !829)
!829 = !{!830, !831}
!830 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !828, file: !105, line: 836, baseType: !99, size: 64)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !828, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!832 = !DIGlobalVariableExpression(var: !833, expr: !DIExpression())
!833 = distinct !DIGlobalVariable(name: "nslots", scope: !813, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!834 = !DIGlobalVariableExpression(var: !835, expr: !DIExpression())
!835 = distinct !DIGlobalVariable(name: "slotvec0", scope: !813, file: !105, line: 844, type: !828, isLocal: true, isDefinition: true)
!836 = !DILocalVariable(name: "r", scope: !802, file: !105, line: 158, type: !6)
!837 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !105, file: !105, line: 982, type: !838, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!838 = !DISubroutineType(types: !839)
!839 = !{!8, !23, !99, !9}
!840 = !DILocalVariable(name: "arg", arg: 1, scope: !837, file: !105, line: 982, type: !23)
!841 = !DILocation(line: 982, column: 32, scope: !837)
!842 = !DILocalVariable(name: "argsize", arg: 2, scope: !837, file: !105, line: 982, type: !99)
!843 = !DILocation(line: 982, column: 44, scope: !837)
!844 = !DILocalVariable(name: "ch", arg: 3, scope: !837, file: !105, line: 982, type: !9)
!845 = !DILocation(line: 982, column: 58, scope: !837)
!846 = !DILocalVariable(name: "options", scope: !837, file: !105, line: 984, type: !118)
!847 = !DILocation(line: 984, column: 26, scope: !837)
!848 = !DILocation(line: 985, column: 13, scope: !837)
!849 = !DILocation(line: 986, column: 31, scope: !837)
!850 = !DILocation(line: 986, column: 3, scope: !837)
!851 = !DILocation(line: 987, column: 33, scope: !837)
!852 = !DILocation(line: 987, column: 38, scope: !837)
!853 = !DILocation(line: 987, column: 10, scope: !837)
!854 = !DILocation(line: 987, column: 3, scope: !837)
!855 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !856, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!856 = !DISubroutineType(types: !857)
!857 = !{!8, !6, !23, !99, !858}
!858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !859, size: 64)
!859 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !118)
!860 = !DILocalVariable(name: "n", arg: 1, scope: !855, file: !105, line: 877, type: !6)
!861 = !DILocation(line: 877, column: 25, scope: !855)
!862 = !DILocalVariable(name: "arg", arg: 2, scope: !855, file: !105, line: 877, type: !23)
!863 = !DILocation(line: 877, column: 40, scope: !855)
!864 = !DILocalVariable(name: "argsize", arg: 3, scope: !855, file: !105, line: 877, type: !99)
!865 = !DILocation(line: 877, column: 52, scope: !855)
!866 = !DILocalVariable(name: "options", arg: 4, scope: !855, file: !105, line: 878, type: !858)
!867 = !DILocation(line: 878, column: 51, scope: !855)
!868 = !DILocalVariable(name: "e", scope: !855, file: !105, line: 880, type: !6)
!869 = !DILocation(line: 880, column: 7, scope: !855)
!870 = !DILocation(line: 880, column: 11, scope: !855)
!871 = !DILocalVariable(name: "sv", scope: !855, file: !105, line: 882, type: !133)
!872 = !DILocation(line: 882, column: 19, scope: !855)
!873 = !DILocation(line: 882, column: 24, scope: !855)
!874 = !DILocation(line: 884, column: 7, scope: !875)
!875 = distinct !DILexicalBlock(scope: !855, file: !105, line: 884, column: 7)
!876 = !DILocation(line: 884, column: 9, scope: !875)
!877 = !DILocation(line: 884, column: 7, scope: !855)
!878 = !DILocation(line: 885, column: 5, scope: !875)
!879 = !DILocation(line: 887, column: 7, scope: !880)
!880 = distinct !DILexicalBlock(scope: !855, file: !105, line: 887, column: 7)
!881 = !DILocation(line: 887, column: 17, scope: !880)
!882 = !DILocation(line: 887, column: 14, scope: !880)
!883 = !DILocation(line: 887, column: 7, scope: !855)
!884 = !DILocalVariable(name: "preallocated", scope: !885, file: !105, line: 889, type: !41)
!885 = distinct !DILexicalBlock(scope: !880, file: !105, line: 888, column: 5)
!886 = !DILocation(line: 889, column: 12, scope: !885)
!887 = !DILocation(line: 889, column: 28, scope: !885)
!888 = !DILocation(line: 889, column: 31, scope: !885)
!889 = !DILocalVariable(name: "nmax", scope: !885, file: !105, line: 890, type: !6)
!890 = !DILocation(line: 890, column: 11, scope: !885)
!891 = !DILocation(line: 892, column: 11, scope: !892)
!892 = distinct !DILexicalBlock(scope: !885, file: !105, line: 892, column: 11)
!893 = !DILocation(line: 892, column: 18, scope: !892)
!894 = !DILocation(line: 892, column: 16, scope: !892)
!895 = !DILocation(line: 892, column: 11, scope: !885)
!896 = !DILocation(line: 893, column: 9, scope: !892)
!897 = !DILocation(line: 895, column: 32, scope: !885)
!898 = !DILocation(line: 895, column: 54, scope: !885)
!899 = !DILocation(line: 895, column: 59, scope: !885)
!900 = !DILocation(line: 895, column: 61, scope: !885)
!901 = !DILocation(line: 895, column: 58, scope: !885)
!902 = !DILocation(line: 895, column: 66, scope: !885)
!903 = !DILocation(line: 895, column: 22, scope: !885)
!904 = !DILocation(line: 895, column: 20, scope: !885)
!905 = !DILocation(line: 895, column: 15, scope: !885)
!906 = !DILocation(line: 896, column: 11, scope: !907)
!907 = distinct !DILexicalBlock(scope: !885, file: !105, line: 896, column: 11)
!908 = !DILocation(line: 896, column: 11, scope: !885)
!909 = !DILocation(line: 897, column: 10, scope: !907)
!910 = !DILocation(line: 897, column: 15, scope: !907)
!911 = !DILocation(line: 897, column: 9, scope: !907)
!912 = !DILocation(line: 898, column: 15, scope: !885)
!913 = !DILocation(line: 898, column: 20, scope: !885)
!914 = !DILocation(line: 898, column: 18, scope: !885)
!915 = !DILocation(line: 898, column: 7, scope: !885)
!916 = !DILocation(line: 898, column: 32, scope: !885)
!917 = !DILocation(line: 898, column: 34, scope: !885)
!918 = !DILocation(line: 898, column: 40, scope: !885)
!919 = !DILocation(line: 898, column: 38, scope: !885)
!920 = !DILocation(line: 898, column: 31, scope: !885)
!921 = !DILocation(line: 898, column: 48, scope: !885)
!922 = !DILocation(line: 899, column: 16, scope: !885)
!923 = !DILocation(line: 899, column: 18, scope: !885)
!924 = !DILocation(line: 899, column: 14, scope: !885)
!925 = !DILocation(line: 900, column: 5, scope: !885)
!926 = !DILocalVariable(name: "size", scope: !927, file: !105, line: 903, type: !99)
!927 = distinct !DILexicalBlock(scope: !855, file: !105, line: 902, column: 3)
!928 = !DILocation(line: 903, column: 12, scope: !927)
!929 = !DILocation(line: 903, column: 19, scope: !927)
!930 = !DILocation(line: 903, column: 22, scope: !927)
!931 = !DILocation(line: 903, column: 25, scope: !927)
!932 = !DILocalVariable(name: "val", scope: !927, file: !105, line: 904, type: !8)
!933 = !DILocation(line: 904, column: 11, scope: !927)
!934 = !DILocation(line: 904, column: 17, scope: !927)
!935 = !DILocation(line: 904, column: 20, scope: !927)
!936 = !DILocation(line: 904, column: 23, scope: !927)
!937 = !DILocalVariable(name: "flags", scope: !927, file: !105, line: 906, type: !6)
!938 = !DILocation(line: 906, column: 9, scope: !927)
!939 = !DILocation(line: 906, column: 17, scope: !927)
!940 = !DILocation(line: 906, column: 26, scope: !927)
!941 = !DILocation(line: 906, column: 32, scope: !927)
!942 = !DILocalVariable(name: "qsize", scope: !927, file: !105, line: 907, type: !99)
!943 = !DILocation(line: 907, column: 12, scope: !927)
!944 = !DILocation(line: 907, column: 46, scope: !927)
!945 = !DILocation(line: 907, column: 51, scope: !927)
!946 = !DILocation(line: 907, column: 57, scope: !927)
!947 = !DILocation(line: 907, column: 62, scope: !927)
!948 = !DILocation(line: 908, column: 46, scope: !927)
!949 = !DILocation(line: 908, column: 55, scope: !927)
!950 = !DILocation(line: 908, column: 62, scope: !927)
!951 = !DILocation(line: 909, column: 46, scope: !927)
!952 = !DILocation(line: 909, column: 55, scope: !927)
!953 = !DILocation(line: 910, column: 46, scope: !927)
!954 = !DILocation(line: 910, column: 55, scope: !927)
!955 = !DILocation(line: 911, column: 46, scope: !927)
!956 = !DILocation(line: 911, column: 55, scope: !927)
!957 = !DILocation(line: 907, column: 20, scope: !927)
!958 = !DILocation(line: 913, column: 9, scope: !959)
!959 = distinct !DILexicalBlock(scope: !927, file: !105, line: 913, column: 9)
!960 = !DILocation(line: 913, column: 17, scope: !959)
!961 = !DILocation(line: 913, column: 14, scope: !959)
!962 = !DILocation(line: 913, column: 9, scope: !927)
!963 = !DILocation(line: 915, column: 29, scope: !964)
!964 = distinct !DILexicalBlock(scope: !959, file: !105, line: 914, column: 7)
!965 = !DILocation(line: 915, column: 35, scope: !964)
!966 = !DILocation(line: 915, column: 27, scope: !964)
!967 = !DILocation(line: 915, column: 9, scope: !964)
!968 = !DILocation(line: 915, column: 12, scope: !964)
!969 = !DILocation(line: 915, column: 15, scope: !964)
!970 = !DILocation(line: 915, column: 20, scope: !964)
!971 = !DILocation(line: 916, column: 13, scope: !972)
!972 = distinct !DILexicalBlock(scope: !964, file: !105, line: 916, column: 13)
!973 = !DILocation(line: 916, column: 17, scope: !972)
!974 = !DILocation(line: 916, column: 13, scope: !964)
!975 = !DILocation(line: 917, column: 17, scope: !972)
!976 = !DILocation(line: 917, column: 11, scope: !972)
!977 = !DILocation(line: 918, column: 39, scope: !964)
!978 = !DILocation(line: 918, column: 27, scope: !964)
!979 = !DILocation(line: 918, column: 25, scope: !964)
!980 = !DILocation(line: 918, column: 9, scope: !964)
!981 = !DILocation(line: 918, column: 12, scope: !964)
!982 = !DILocation(line: 918, column: 15, scope: !964)
!983 = !DILocation(line: 918, column: 19, scope: !964)
!984 = !DILocation(line: 919, column: 35, scope: !964)
!985 = !DILocation(line: 919, column: 40, scope: !964)
!986 = !DILocation(line: 919, column: 46, scope: !964)
!987 = !DILocation(line: 919, column: 51, scope: !964)
!988 = !DILocation(line: 919, column: 60, scope: !964)
!989 = !DILocation(line: 919, column: 69, scope: !964)
!990 = !DILocation(line: 920, column: 35, scope: !964)
!991 = !DILocation(line: 920, column: 42, scope: !964)
!992 = !DILocation(line: 920, column: 51, scope: !964)
!993 = !DILocation(line: 921, column: 35, scope: !964)
!994 = !DILocation(line: 921, column: 44, scope: !964)
!995 = !DILocation(line: 922, column: 35, scope: !964)
!996 = !DILocation(line: 922, column: 44, scope: !964)
!997 = !DILocation(line: 919, column: 9, scope: !964)
!998 = !DILocation(line: 923, column: 7, scope: !964)
!999 = !DILocation(line: 925, column: 13, scope: !927)
!1000 = !DILocation(line: 925, column: 5, scope: !927)
!1001 = !DILocation(line: 925, column: 11, scope: !927)
!1002 = !DILocation(line: 926, column: 12, scope: !927)
!1003 = !DILocation(line: 926, column: 5, scope: !927)
!1004 = !DILocalVariable(name: "n", arg: 1, scope: !1005, file: !105, line: 877, type: !6)
!1005 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1006, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1017, retainedNodes: !11)
!1006 = !DISubroutineType(types: !1007)
!1007 = !{!8, !6, !23, !99, !1008}
!1008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1009, size: 64)
!1009 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1010)
!1010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1011)
!1011 = !{!1012, !1013, !1014, !1015, !1016}
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1010, file: !105, line: 68, baseType: !82, size: 32)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1010, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1010, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1010, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1010, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1017 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1018, nameTableKind: None)
!1018 = !{!1019, !1021, !1023, !1025, !1027, !1029, !1036, !1038}
!1019 = !DIGlobalVariableExpression(var: !1020, expr: !DIExpression())
!1020 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1017, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1021 = !DIGlobalVariableExpression(var: !1022, expr: !DIExpression())
!1022 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1017, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1023 = !DIGlobalVariableExpression(var: !1024, expr: !DIExpression())
!1024 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1017, file: !105, line: 1052, type: !1010, isLocal: false, isDefinition: true)
!1025 = !DIGlobalVariableExpression(var: !1026, expr: !DIExpression())
!1026 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1017, file: !105, line: 116, type: !1010, isLocal: true, isDefinition: true)
!1027 = !DIGlobalVariableExpression(var: !1028, expr: !DIExpression())
!1028 = distinct !DIGlobalVariable(name: "slot0", scope: !1017, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1029 = !DIGlobalVariableExpression(var: !1030, expr: !DIExpression())
!1030 = distinct !DIGlobalVariable(name: "slotvec", scope: !1017, file: !105, line: 845, type: !1031, isLocal: true, isDefinition: true)
!1031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1032, size: 64)
!1032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1033)
!1033 = !{!1034, !1035}
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1032, file: !105, line: 836, baseType: !99, size: 64)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1032, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1036 = !DIGlobalVariableExpression(var: !1037, expr: !DIExpression())
!1037 = distinct !DIGlobalVariable(name: "nslots", scope: !1017, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1038 = !DIGlobalVariableExpression(var: !1039, expr: !DIExpression())
!1039 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1017, file: !105, line: 844, type: !1032, isLocal: true, isDefinition: true)
!1040 = !DILocalVariable(name: "arg", arg: 2, scope: !1005, file: !105, line: 877, type: !23)
!1041 = !DILocalVariable(name: "argsize", arg: 3, scope: !1005, file: !105, line: 877, type: !99)
!1042 = !DILocalVariable(name: "options", arg: 4, scope: !1005, file: !105, line: 878, type: !1008)
!1043 = !DILocalVariable(name: "e", scope: !1005, file: !105, line: 880, type: !6)
!1044 = !DILocalVariable(name: "sv", scope: !1005, file: !105, line: 882, type: !1031)
!1045 = !DILocalVariable(name: "nmax", scope: !1046, file: !105, line: 890, type: !6)
!1046 = distinct !DILexicalBlock(scope: !1047, file: !105, line: 888, column: 5)
!1047 = distinct !DILexicalBlock(scope: !1048, file: !105, line: 887, column: 7)
!1048 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1049, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1060, retainedNodes: !11)
!1049 = !DISubroutineType(types: !1050)
!1050 = !{!8, !6, !23, !99, !1051}
!1051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1052, size: 64)
!1052 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1053)
!1053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1054)
!1054 = !{!1055, !1056, !1057, !1058, !1059}
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1053, file: !105, line: 68, baseType: !82, size: 32)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1053, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1053, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1053, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1053, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1060 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1061, nameTableKind: None)
!1061 = !{!1062, !1064, !1066, !1068, !1070, !1072, !1079, !1081}
!1062 = !DIGlobalVariableExpression(var: !1063, expr: !DIExpression())
!1063 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1060, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1064 = !DIGlobalVariableExpression(var: !1065, expr: !DIExpression())
!1065 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1060, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1066 = !DIGlobalVariableExpression(var: !1067, expr: !DIExpression())
!1067 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1060, file: !105, line: 1052, type: !1053, isLocal: false, isDefinition: true)
!1068 = !DIGlobalVariableExpression(var: !1069, expr: !DIExpression())
!1069 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1060, file: !105, line: 116, type: !1053, isLocal: true, isDefinition: true)
!1070 = !DIGlobalVariableExpression(var: !1071, expr: !DIExpression())
!1071 = distinct !DIGlobalVariable(name: "slot0", scope: !1060, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1072 = !DIGlobalVariableExpression(var: !1073, expr: !DIExpression())
!1073 = distinct !DIGlobalVariable(name: "slotvec", scope: !1060, file: !105, line: 845, type: !1074, isLocal: true, isDefinition: true)
!1074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1075, size: 64)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1076)
!1076 = !{!1077, !1078}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1075, file: !105, line: 836, baseType: !99, size: 64)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1075, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1079 = !DIGlobalVariableExpression(var: !1080, expr: !DIExpression())
!1080 = distinct !DIGlobalVariable(name: "nslots", scope: !1060, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1081 = !DIGlobalVariableExpression(var: !1082, expr: !DIExpression())
!1082 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1060, file: !105, line: 844, type: !1075, isLocal: true, isDefinition: true)
!1083 = !DILocalVariable(name: "val", scope: !1084, file: !105, line: 904, type: !8)
!1084 = distinct !DILexicalBlock(scope: !1085, file: !105, line: 902, column: 3)
!1085 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1086, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1097, retainedNodes: !11)
!1086 = !DISubroutineType(types: !1087)
!1087 = !{!8, !6, !23, !99, !1088}
!1088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1089, size: 64)
!1089 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1090)
!1090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1091)
!1091 = !{!1092, !1093, !1094, !1095, !1096}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1090, file: !105, line: 68, baseType: !82, size: 32)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1090, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1090, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1090, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1090, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1097 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1098, nameTableKind: None)
!1098 = !{!1099, !1101, !1103, !1105, !1107, !1109, !1116, !1118}
!1099 = !DIGlobalVariableExpression(var: !1100, expr: !DIExpression())
!1100 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1097, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1101 = !DIGlobalVariableExpression(var: !1102, expr: !DIExpression())
!1102 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1097, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1103 = !DIGlobalVariableExpression(var: !1104, expr: !DIExpression())
!1104 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1097, file: !105, line: 1052, type: !1090, isLocal: false, isDefinition: true)
!1105 = !DIGlobalVariableExpression(var: !1106, expr: !DIExpression())
!1106 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1097, file: !105, line: 116, type: !1090, isLocal: true, isDefinition: true)
!1107 = !DIGlobalVariableExpression(var: !1108, expr: !DIExpression())
!1108 = distinct !DIGlobalVariable(name: "slot0", scope: !1097, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1109 = !DIGlobalVariableExpression(var: !1110, expr: !DIExpression())
!1110 = distinct !DIGlobalVariable(name: "slotvec", scope: !1097, file: !105, line: 845, type: !1111, isLocal: true, isDefinition: true)
!1111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1112, size: 64)
!1112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1113)
!1113 = !{!1114, !1115}
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1112, file: !105, line: 836, baseType: !99, size: 64)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1112, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1116 = !DIGlobalVariableExpression(var: !1117, expr: !DIExpression())
!1117 = distinct !DIGlobalVariable(name: "nslots", scope: !1097, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1118 = !DIGlobalVariableExpression(var: !1119, expr: !DIExpression())
!1119 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1097, file: !105, line: 844, type: !1112, isLocal: true, isDefinition: true)
!1120 = !DILocalVariable(name: "flags", scope: !1084, file: !105, line: 906, type: !6)
!1121 = !DILocalVariable(name: "qsize", scope: !1084, file: !105, line: 907, type: !99)
!1122 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !105, file: !105, line: 256, type: !1123, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!1123 = !DISubroutineType(types: !1124)
!1124 = !{!99, !8, !99, !23, !99, !82, !6, !1125, !23, !23}
!1125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1126, size: 64)
!1126 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !84)
!1127 = !DILocalVariable(name: "buffer", arg: 1, scope: !1122, file: !105, line: 256, type: !8)
!1128 = !DILocation(line: 256, column: 33, scope: !1122)
!1129 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1122, file: !105, line: 256, type: !99)
!1130 = !DILocation(line: 256, column: 48, scope: !1122)
!1131 = !DILocalVariable(name: "arg", arg: 3, scope: !1122, file: !105, line: 257, type: !23)
!1132 = !DILocation(line: 257, column: 39, scope: !1122)
!1133 = !DILocalVariable(name: "argsize", arg: 4, scope: !1122, file: !105, line: 257, type: !99)
!1134 = !DILocation(line: 257, column: 51, scope: !1122)
!1135 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1122, file: !105, line: 258, type: !82)
!1136 = !DILocation(line: 258, column: 46, scope: !1122)
!1137 = !DILocalVariable(name: "flags", arg: 6, scope: !1122, file: !105, line: 258, type: !6)
!1138 = !DILocation(line: 258, column: 65, scope: !1122)
!1139 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1122, file: !105, line: 259, type: !1125)
!1140 = !DILocation(line: 259, column: 47, scope: !1122)
!1141 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1122, file: !105, line: 260, type: !23)
!1142 = !DILocation(line: 260, column: 39, scope: !1122)
!1143 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1122, file: !105, line: 261, type: !23)
!1144 = !DILocation(line: 261, column: 39, scope: !1122)
!1145 = !DILocalVariable(name: "i", scope: !1122, file: !105, line: 263, type: !99)
!1146 = !DILocation(line: 263, column: 10, scope: !1122)
!1147 = !DILocalVariable(name: "len", scope: !1122, file: !105, line: 264, type: !99)
!1148 = !DILocation(line: 264, column: 10, scope: !1122)
!1149 = !DILocalVariable(name: "orig_buffersize", scope: !1122, file: !105, line: 265, type: !99)
!1150 = !DILocation(line: 265, column: 10, scope: !1122)
!1151 = !DILocalVariable(name: "quote_string", scope: !1122, file: !105, line: 266, type: !23)
!1152 = !DILocation(line: 266, column: 15, scope: !1122)
!1153 = !DILocalVariable(name: "quote_string_len", scope: !1122, file: !105, line: 267, type: !99)
!1154 = !DILocation(line: 267, column: 10, scope: !1122)
!1155 = !DILocalVariable(name: "backslash_escapes", scope: !1122, file: !105, line: 268, type: !41)
!1156 = !DILocation(line: 268, column: 8, scope: !1122)
!1157 = !DILocalVariable(name: "unibyte_locale", scope: !1122, file: !105, line: 269, type: !41)
!1158 = !DILocation(line: 269, column: 8, scope: !1122)
!1159 = !DILocation(line: 269, column: 25, scope: !1122)
!1160 = !DILocation(line: 269, column: 36, scope: !1122)
!1161 = !DILocalVariable(name: "elide_outer_quotes", scope: !1122, file: !105, line: 270, type: !41)
!1162 = !DILocation(line: 270, column: 8, scope: !1122)
!1163 = !DILocation(line: 270, column: 30, scope: !1122)
!1164 = !DILocation(line: 270, column: 36, scope: !1122)
!1165 = !DILocation(line: 270, column: 61, scope: !1122)
!1166 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1122, file: !105, line: 271, type: !41)
!1167 = !DILocation(line: 271, column: 8, scope: !1122)
!1168 = !DILocalVariable(name: "encountered_single_quote", scope: !1122, file: !105, line: 272, type: !41)
!1169 = !DILocation(line: 272, column: 8, scope: !1122)
!1170 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1122, file: !105, line: 273, type: !41)
!1171 = !DILocation(line: 273, column: 8, scope: !1122)
!1172 = !DILocation(line: 273, column: 3, scope: !1122)
!1173 = !DILabel(scope: !1122, name: "process_input", file: !105, line: 314)
!1174 = !DILocation(line: 314, column: 2, scope: !1122)
!1175 = !DILocation(line: 316, column: 11, scope: !1122)
!1176 = !DILocation(line: 316, column: 3, scope: !1122)
!1177 = !DILocation(line: 319, column: 21, scope: !1178)
!1178 = distinct !DILexicalBlock(scope: !1122, file: !105, line: 317, column: 5)
!1179 = !DILocation(line: 320, column: 26, scope: !1178)
!1180 = !DILocation(line: 321, column: 7, scope: !1178)
!1181 = !DILocation(line: 323, column: 12, scope: !1182)
!1182 = distinct !DILexicalBlock(scope: !1178, file: !105, line: 323, column: 11)
!1183 = !DILocation(line: 323, column: 11, scope: !1178)
!1184 = !DILocation(line: 324, column: 9, scope: !1182)
!1185 = !DILocation(line: 324, column: 9, scope: !1186)
!1186 = distinct !DILexicalBlock(scope: !1187, file: !105, line: 324, column: 9)
!1187 = distinct !DILexicalBlock(scope: !1182, file: !105, line: 324, column: 9)
!1188 = !DILocation(line: 324, column: 9, scope: !1187)
!1189 = !DILocation(line: 325, column: 25, scope: !1178)
!1190 = !DILocation(line: 326, column: 20, scope: !1178)
!1191 = !DILocation(line: 327, column: 24, scope: !1178)
!1192 = !DILocation(line: 328, column: 7, scope: !1178)
!1193 = !DILocation(line: 331, column: 25, scope: !1178)
!1194 = !DILocation(line: 332, column: 26, scope: !1178)
!1195 = !DILocation(line: 333, column: 7, scope: !1178)
!1196 = !DILocation(line: 339, column: 13, scope: !1197)
!1197 = distinct !DILexicalBlock(scope: !1198, file: !105, line: 339, column: 13)
!1198 = distinct !DILexicalBlock(scope: !1178, file: !105, line: 338, column: 7)
!1199 = !DILocation(line: 339, column: 27, scope: !1197)
!1200 = !DILocation(line: 339, column: 13, scope: !1198)
!1201 = !DILocation(line: 362, column: 50, scope: !1202)
!1202 = distinct !DILexicalBlock(scope: !1197, file: !105, line: 340, column: 11)
!1203 = !DILocation(line: 362, column: 26, scope: !1202)
!1204 = !DILocation(line: 362, column: 24, scope: !1202)
!1205 = !DILocation(line: 363, column: 51, scope: !1202)
!1206 = !DILocation(line: 363, column: 27, scope: !1202)
!1207 = !DILocation(line: 363, column: 25, scope: !1202)
!1208 = !DILocation(line: 364, column: 11, scope: !1202)
!1209 = !DILocation(line: 365, column: 14, scope: !1210)
!1210 = distinct !DILexicalBlock(scope: !1198, file: !105, line: 365, column: 13)
!1211 = !DILocation(line: 365, column: 13, scope: !1198)
!1212 = !DILocation(line: 366, column: 31, scope: !1213)
!1213 = distinct !DILexicalBlock(scope: !1210, file: !105, line: 366, column: 11)
!1214 = !DILocation(line: 366, column: 29, scope: !1213)
!1215 = !DILocation(line: 366, column: 16, scope: !1213)
!1216 = !DILocation(line: 366, column: 44, scope: !1217)
!1217 = distinct !DILexicalBlock(scope: !1213, file: !105, line: 366, column: 11)
!1218 = !DILocation(line: 366, column: 43, scope: !1217)
!1219 = !DILocation(line: 366, column: 11, scope: !1213)
!1220 = !DILocation(line: 367, column: 13, scope: !1217)
!1221 = !DILocation(line: 367, column: 13, scope: !1222)
!1222 = distinct !DILexicalBlock(scope: !1223, file: !105, line: 367, column: 13)
!1223 = distinct !DILexicalBlock(scope: !1217, file: !105, line: 367, column: 13)
!1224 = !DILocation(line: 367, column: 13, scope: !1223)
!1225 = !DILocation(line: 366, column: 70, scope: !1217)
!1226 = !DILocation(line: 366, column: 11, scope: !1217)
!1227 = distinct !{!1227, !1219, !1228}
!1228 = !DILocation(line: 367, column: 13, scope: !1213)
!1229 = !DILocation(line: 368, column: 27, scope: !1198)
!1230 = !DILocation(line: 369, column: 24, scope: !1198)
!1231 = !DILocation(line: 369, column: 22, scope: !1198)
!1232 = !DILocation(line: 370, column: 36, scope: !1198)
!1233 = !DILocation(line: 370, column: 28, scope: !1198)
!1234 = !DILocation(line: 370, column: 26, scope: !1198)
!1235 = !DILocation(line: 372, column: 7, scope: !1178)
!1236 = !DILocation(line: 375, column: 25, scope: !1178)
!1237 = !DILocation(line: 376, column: 7, scope: !1178)
!1238 = !DILocation(line: 378, column: 26, scope: !1178)
!1239 = !DILocation(line: 379, column: 7, scope: !1178)
!1240 = !DILocation(line: 381, column: 12, scope: !1241)
!1241 = distinct !DILexicalBlock(scope: !1178, file: !105, line: 381, column: 11)
!1242 = !DILocation(line: 381, column: 11, scope: !1178)
!1243 = !DILocation(line: 382, column: 27, scope: !1241)
!1244 = !DILocation(line: 382, column: 9, scope: !1241)
!1245 = !DILocation(line: 383, column: 7, scope: !1178)
!1246 = !DILocation(line: 385, column: 21, scope: !1178)
!1247 = !DILocation(line: 386, column: 12, scope: !1248)
!1248 = distinct !DILexicalBlock(scope: !1178, file: !105, line: 386, column: 11)
!1249 = !DILocation(line: 386, column: 11, scope: !1178)
!1250 = !DILocation(line: 387, column: 9, scope: !1248)
!1251 = !DILocation(line: 387, column: 9, scope: !1252)
!1252 = distinct !DILexicalBlock(scope: !1253, file: !105, line: 387, column: 9)
!1253 = distinct !DILexicalBlock(scope: !1248, file: !105, line: 387, column: 9)
!1254 = !DILocation(line: 387, column: 9, scope: !1253)
!1255 = !DILocation(line: 388, column: 20, scope: !1178)
!1256 = !DILocation(line: 389, column: 24, scope: !1178)
!1257 = !DILocation(line: 390, column: 7, scope: !1178)
!1258 = !DILocation(line: 393, column: 26, scope: !1178)
!1259 = !DILocation(line: 394, column: 7, scope: !1178)
!1260 = !DILocation(line: 397, column: 7, scope: !1178)
!1261 = !DILocation(line: 400, column: 10, scope: !1262)
!1262 = distinct !DILexicalBlock(scope: !1122, file: !105, line: 400, column: 3)
!1263 = !DILocation(line: 400, column: 8, scope: !1262)
!1264 = !DILocation(line: 400, column: 19, scope: !1265)
!1265 = distinct !DILexicalBlock(scope: !1262, file: !105, line: 400, column: 3)
!1266 = !DILocation(line: 400, column: 27, scope: !1265)
!1267 = !DILocation(line: 400, column: 41, scope: !1265)
!1268 = !DILocation(line: 400, column: 45, scope: !1265)
!1269 = !DILocation(line: 400, column: 48, scope: !1265)
!1270 = !DILocation(line: 400, column: 58, scope: !1265)
!1271 = !DILocation(line: 400, column: 63, scope: !1265)
!1272 = !DILocation(line: 400, column: 60, scope: !1265)
!1273 = !DILocation(line: 400, column: 16, scope: !1265)
!1274 = !DILocation(line: 400, column: 3, scope: !1262)
!1275 = !DILocalVariable(name: "c", scope: !1276, file: !105, line: 402, type: !167)
!1276 = distinct !DILexicalBlock(scope: !1265, file: !105, line: 401, column: 5)
!1277 = !DILocation(line: 402, column: 21, scope: !1276)
!1278 = !DILocalVariable(name: "esc", scope: !1276, file: !105, line: 403, type: !167)
!1279 = !DILocation(line: 403, column: 21, scope: !1276)
!1280 = !DILocalVariable(name: "is_right_quote", scope: !1276, file: !105, line: 404, type: !41)
!1281 = !DILocation(line: 404, column: 12, scope: !1276)
!1282 = !DILocalVariable(name: "escaping", scope: !1276, file: !105, line: 405, type: !41)
!1283 = !DILocation(line: 405, column: 12, scope: !1276)
!1284 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1276, file: !105, line: 406, type: !41)
!1285 = !DILocation(line: 406, column: 12, scope: !1276)
!1286 = !DILocation(line: 408, column: 11, scope: !1287)
!1287 = distinct !DILexicalBlock(scope: !1276, file: !105, line: 408, column: 11)
!1288 = !DILocation(line: 409, column: 11, scope: !1287)
!1289 = !DILocation(line: 409, column: 14, scope: !1287)
!1290 = !DILocation(line: 409, column: 28, scope: !1287)
!1291 = !DILocation(line: 410, column: 11, scope: !1287)
!1292 = !DILocation(line: 410, column: 14, scope: !1287)
!1293 = !DILocation(line: 411, column: 11, scope: !1287)
!1294 = !DILocation(line: 411, column: 15, scope: !1287)
!1295 = !DILocation(line: 411, column: 19, scope: !1287)
!1296 = !DILocation(line: 411, column: 17, scope: !1287)
!1297 = !DILocation(line: 412, column: 19, scope: !1287)
!1298 = !DILocation(line: 412, column: 27, scope: !1287)
!1299 = !DILocation(line: 412, column: 39, scope: !1287)
!1300 = !DILocation(line: 412, column: 46, scope: !1287)
!1301 = !DILocation(line: 412, column: 44, scope: !1287)
!1302 = !DILocation(line: 416, column: 40, scope: !1287)
!1303 = !DILocation(line: 416, column: 32, scope: !1287)
!1304 = !DILocation(line: 416, column: 30, scope: !1287)
!1305 = !DILocation(line: 416, column: 48, scope: !1287)
!1306 = !DILocation(line: 412, column: 15, scope: !1287)
!1307 = !DILocation(line: 417, column: 11, scope: !1287)
!1308 = !DILocation(line: 417, column: 22, scope: !1287)
!1309 = !DILocation(line: 417, column: 28, scope: !1287)
!1310 = !DILocation(line: 417, column: 26, scope: !1287)
!1311 = !DILocation(line: 417, column: 31, scope: !1287)
!1312 = !DILocation(line: 417, column: 45, scope: !1287)
!1313 = !DILocation(line: 417, column: 14, scope: !1287)
!1314 = !DILocation(line: 417, column: 63, scope: !1287)
!1315 = !DILocation(line: 408, column: 11, scope: !1276)
!1316 = !DILocation(line: 419, column: 15, scope: !1317)
!1317 = distinct !DILexicalBlock(scope: !1318, file: !105, line: 419, column: 15)
!1318 = distinct !DILexicalBlock(scope: !1287, file: !105, line: 418, column: 9)
!1319 = !DILocation(line: 419, column: 15, scope: !1318)
!1320 = !DILocation(line: 420, column: 13, scope: !1317)
!1321 = !DILocation(line: 421, column: 26, scope: !1318)
!1322 = !DILocation(line: 422, column: 9, scope: !1318)
!1323 = !DILocation(line: 424, column: 11, scope: !1276)
!1324 = !DILocation(line: 424, column: 15, scope: !1276)
!1325 = !DILocation(line: 424, column: 9, scope: !1276)
!1326 = !DILocation(line: 425, column: 15, scope: !1276)
!1327 = !DILocation(line: 425, column: 7, scope: !1276)
!1328 = !DILocation(line: 428, column: 15, scope: !1329)
!1329 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 428, column: 15)
!1330 = distinct !DILexicalBlock(scope: !1276, file: !105, line: 426, column: 9)
!1331 = !DILocation(line: 428, column: 15, scope: !1330)
!1332 = !DILocation(line: 430, column: 15, scope: !1333)
!1333 = distinct !DILexicalBlock(scope: !1329, file: !105, line: 429, column: 13)
!1334 = !DILocation(line: 430, column: 15, scope: !1335)
!1335 = distinct !DILexicalBlock(scope: !1336, file: !105, line: 430, column: 15)
!1336 = distinct !DILexicalBlock(scope: !1333, file: !105, line: 430, column: 15)
!1337 = !DILocation(line: 430, column: 15, scope: !1336)
!1338 = !DILocation(line: 430, column: 15, scope: !1339)
!1339 = distinct !DILexicalBlock(scope: !1336, file: !105, line: 430, column: 15)
!1340 = !DILocation(line: 430, column: 15, scope: !1341)
!1341 = distinct !DILexicalBlock(scope: !1339, file: !105, line: 430, column: 15)
!1342 = !DILocation(line: 430, column: 15, scope: !1343)
!1343 = distinct !DILexicalBlock(scope: !1344, file: !105, line: 430, column: 15)
!1344 = distinct !DILexicalBlock(scope: !1341, file: !105, line: 430, column: 15)
!1345 = !DILocation(line: 430, column: 15, scope: !1344)
!1346 = !DILocation(line: 430, column: 15, scope: !1347)
!1347 = distinct !DILexicalBlock(scope: !1348, file: !105, line: 430, column: 15)
!1348 = distinct !DILexicalBlock(scope: !1341, file: !105, line: 430, column: 15)
!1349 = !DILocation(line: 430, column: 15, scope: !1348)
!1350 = !DILocation(line: 430, column: 15, scope: !1351)
!1351 = distinct !DILexicalBlock(scope: !1352, file: !105, line: 430, column: 15)
!1352 = distinct !DILexicalBlock(scope: !1341, file: !105, line: 430, column: 15)
!1353 = !DILocation(line: 430, column: 15, scope: !1352)
!1354 = !DILocation(line: 430, column: 15, scope: !1355)
!1355 = distinct !DILexicalBlock(scope: !1356, file: !105, line: 430, column: 15)
!1356 = distinct !DILexicalBlock(scope: !1336, file: !105, line: 430, column: 15)
!1357 = !DILocation(line: 430, column: 15, scope: !1356)
!1358 = !DILocation(line: 437, column: 19, scope: !1359)
!1359 = distinct !DILexicalBlock(scope: !1333, file: !105, line: 437, column: 19)
!1360 = !DILocation(line: 437, column: 33, scope: !1359)
!1361 = !DILocation(line: 438, column: 19, scope: !1359)
!1362 = !DILocation(line: 438, column: 22, scope: !1359)
!1363 = !DILocation(line: 438, column: 24, scope: !1359)
!1364 = !DILocation(line: 438, column: 30, scope: !1359)
!1365 = !DILocation(line: 438, column: 28, scope: !1359)
!1366 = !DILocation(line: 438, column: 38, scope: !1359)
!1367 = !DILocation(line: 438, column: 48, scope: !1359)
!1368 = !DILocation(line: 438, column: 52, scope: !1359)
!1369 = !DILocation(line: 438, column: 54, scope: !1359)
!1370 = !DILocation(line: 438, column: 45, scope: !1359)
!1371 = !DILocation(line: 438, column: 59, scope: !1359)
!1372 = !DILocation(line: 438, column: 62, scope: !1359)
!1373 = !DILocation(line: 438, column: 66, scope: !1359)
!1374 = !DILocation(line: 438, column: 68, scope: !1359)
!1375 = !DILocation(line: 438, column: 73, scope: !1359)
!1376 = !DILocation(line: 437, column: 19, scope: !1333)
!1377 = !DILocation(line: 440, column: 19, scope: !1378)
!1378 = distinct !DILexicalBlock(scope: !1359, file: !105, line: 439, column: 17)
!1379 = !DILocation(line: 440, column: 19, scope: !1380)
!1380 = distinct !DILexicalBlock(scope: !1381, file: !105, line: 440, column: 19)
!1381 = distinct !DILexicalBlock(scope: !1378, file: !105, line: 440, column: 19)
!1382 = !DILocation(line: 440, column: 19, scope: !1381)
!1383 = !DILocation(line: 441, column: 19, scope: !1378)
!1384 = !DILocation(line: 441, column: 19, scope: !1385)
!1385 = distinct !DILexicalBlock(scope: !1386, file: !105, line: 441, column: 19)
!1386 = distinct !DILexicalBlock(scope: !1378, file: !105, line: 441, column: 19)
!1387 = !DILocation(line: 441, column: 19, scope: !1386)
!1388 = !DILocation(line: 442, column: 17, scope: !1378)
!1389 = !DILocation(line: 443, column: 17, scope: !1333)
!1390 = !DILocation(line: 448, column: 13, scope: !1333)
!1391 = !DILocation(line: 449, column: 20, scope: !1392)
!1392 = distinct !DILexicalBlock(scope: !1329, file: !105, line: 449, column: 20)
!1393 = !DILocation(line: 449, column: 26, scope: !1392)
!1394 = !DILocation(line: 449, column: 20, scope: !1329)
!1395 = !DILocation(line: 450, column: 13, scope: !1392)
!1396 = !DILocation(line: 451, column: 11, scope: !1330)
!1397 = !DILocation(line: 454, column: 19, scope: !1330)
!1398 = !DILocation(line: 454, column: 11, scope: !1330)
!1399 = !DILocation(line: 457, column: 19, scope: !1400)
!1400 = distinct !DILexicalBlock(scope: !1401, file: !105, line: 457, column: 19)
!1401 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 455, column: 13)
!1402 = !DILocation(line: 457, column: 19, scope: !1401)
!1403 = !DILocation(line: 458, column: 17, scope: !1400)
!1404 = !DILocation(line: 459, column: 15, scope: !1401)
!1405 = !DILocation(line: 462, column: 20, scope: !1406)
!1406 = distinct !DILexicalBlock(scope: !1401, file: !105, line: 462, column: 19)
!1407 = !DILocation(line: 462, column: 26, scope: !1406)
!1408 = !DILocation(line: 463, column: 19, scope: !1406)
!1409 = !DILocation(line: 463, column: 22, scope: !1406)
!1410 = !DILocation(line: 463, column: 24, scope: !1406)
!1411 = !DILocation(line: 463, column: 30, scope: !1406)
!1412 = !DILocation(line: 463, column: 28, scope: !1406)
!1413 = !DILocation(line: 463, column: 38, scope: !1406)
!1414 = !DILocation(line: 463, column: 41, scope: !1406)
!1415 = !DILocation(line: 463, column: 45, scope: !1406)
!1416 = !DILocation(line: 463, column: 47, scope: !1406)
!1417 = !DILocation(line: 463, column: 52, scope: !1406)
!1418 = !DILocation(line: 462, column: 19, scope: !1401)
!1419 = !DILocation(line: 464, column: 25, scope: !1406)
!1420 = !DILocation(line: 464, column: 29, scope: !1406)
!1421 = !DILocation(line: 464, column: 31, scope: !1406)
!1422 = !DILocation(line: 464, column: 17, scope: !1406)
!1423 = !DILocation(line: 471, column: 25, scope: !1424)
!1424 = distinct !DILexicalBlock(scope: !1425, file: !105, line: 471, column: 25)
!1425 = distinct !DILexicalBlock(scope: !1406, file: !105, line: 465, column: 19)
!1426 = !DILocation(line: 471, column: 25, scope: !1425)
!1427 = !DILocation(line: 472, column: 23, scope: !1424)
!1428 = !DILocation(line: 473, column: 25, scope: !1425)
!1429 = !DILocation(line: 473, column: 29, scope: !1425)
!1430 = !DILocation(line: 473, column: 31, scope: !1425)
!1431 = !DILocation(line: 473, column: 23, scope: !1425)
!1432 = !DILocation(line: 474, column: 23, scope: !1425)
!1433 = !DILocation(line: 475, column: 21, scope: !1425)
!1434 = !DILocation(line: 475, column: 21, scope: !1435)
!1435 = distinct !DILexicalBlock(scope: !1436, file: !105, line: 475, column: 21)
!1436 = distinct !DILexicalBlock(scope: !1425, file: !105, line: 475, column: 21)
!1437 = !DILocation(line: 475, column: 21, scope: !1436)
!1438 = !DILocation(line: 476, column: 21, scope: !1425)
!1439 = !DILocation(line: 476, column: 21, scope: !1440)
!1440 = distinct !DILexicalBlock(scope: !1441, file: !105, line: 476, column: 21)
!1441 = distinct !DILexicalBlock(scope: !1425, file: !105, line: 476, column: 21)
!1442 = !DILocation(line: 476, column: 21, scope: !1441)
!1443 = !DILocation(line: 477, column: 21, scope: !1425)
!1444 = !DILocation(line: 477, column: 21, scope: !1445)
!1445 = distinct !DILexicalBlock(scope: !1446, file: !105, line: 477, column: 21)
!1446 = distinct !DILexicalBlock(scope: !1425, file: !105, line: 477, column: 21)
!1447 = !DILocation(line: 477, column: 21, scope: !1446)
!1448 = !DILocation(line: 478, column: 21, scope: !1425)
!1449 = !DILocation(line: 478, column: 21, scope: !1450)
!1450 = distinct !DILexicalBlock(scope: !1451, file: !105, line: 478, column: 21)
!1451 = distinct !DILexicalBlock(scope: !1425, file: !105, line: 478, column: 21)
!1452 = !DILocation(line: 478, column: 21, scope: !1451)
!1453 = !DILocation(line: 479, column: 21, scope: !1425)
!1454 = !DILocation(line: 482, column: 21, scope: !1425)
!1455 = !DILocation(line: 483, column: 19, scope: !1425)
!1456 = !DILocation(line: 484, column: 15, scope: !1401)
!1457 = !DILocation(line: 487, column: 15, scope: !1401)
!1458 = !DILocation(line: 489, column: 11, scope: !1330)
!1459 = !DILocation(line: 491, column: 24, scope: !1330)
!1460 = !DILocation(line: 491, column: 31, scope: !1330)
!1461 = !DILocation(line: 492, column: 24, scope: !1330)
!1462 = !DILocation(line: 492, column: 31, scope: !1330)
!1463 = !DILocation(line: 493, column: 24, scope: !1330)
!1464 = !DILocation(line: 493, column: 31, scope: !1330)
!1465 = !DILocation(line: 494, column: 24, scope: !1330)
!1466 = !DILocation(line: 494, column: 31, scope: !1330)
!1467 = !DILocation(line: 495, column: 24, scope: !1330)
!1468 = !DILocation(line: 495, column: 31, scope: !1330)
!1469 = !DILocation(line: 496, column: 24, scope: !1330)
!1470 = !DILocation(line: 496, column: 31, scope: !1330)
!1471 = !DILocation(line: 497, column: 24, scope: !1330)
!1472 = !DILocation(line: 497, column: 31, scope: !1330)
!1473 = !DILocation(line: 498, column: 26, scope: !1330)
!1474 = !DILocation(line: 498, column: 24, scope: !1330)
!1475 = !DILocation(line: 500, column: 15, scope: !1476)
!1476 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 500, column: 15)
!1477 = !DILocation(line: 500, column: 29, scope: !1476)
!1478 = !DILocation(line: 500, column: 15, scope: !1330)
!1479 = !DILocation(line: 502, column: 19, scope: !1480)
!1480 = distinct !DILexicalBlock(scope: !1481, file: !105, line: 502, column: 19)
!1481 = distinct !DILexicalBlock(scope: !1476, file: !105, line: 501, column: 13)
!1482 = !DILocation(line: 502, column: 19, scope: !1481)
!1483 = !DILocation(line: 503, column: 17, scope: !1480)
!1484 = !DILocation(line: 504, column: 15, scope: !1481)
!1485 = !DILocation(line: 509, column: 15, scope: !1486)
!1486 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 509, column: 15)
!1487 = !DILocation(line: 509, column: 33, scope: !1486)
!1488 = !DILocation(line: 509, column: 36, scope: !1486)
!1489 = !DILocation(line: 509, column: 55, scope: !1486)
!1490 = !DILocation(line: 509, column: 58, scope: !1486)
!1491 = !DILocation(line: 509, column: 15, scope: !1330)
!1492 = !DILocation(line: 510, column: 13, scope: !1486)
!1493 = !DILabel(scope: !1330, name: "c_and_shell_escape", file: !105, line: 512)
!1494 = !DILocation(line: 512, column: 9, scope: !1330)
!1495 = !DILocation(line: 513, column: 15, scope: !1496)
!1496 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 513, column: 15)
!1497 = !DILocation(line: 513, column: 29, scope: !1496)
!1498 = !DILocation(line: 514, column: 15, scope: !1496)
!1499 = !DILocation(line: 514, column: 18, scope: !1496)
!1500 = !DILocation(line: 513, column: 15, scope: !1330)
!1501 = !DILocation(line: 515, column: 13, scope: !1496)
!1502 = !DILabel(scope: !1330, name: "c_escape", file: !105, line: 517)
!1503 = !DILocation(line: 517, column: 9, scope: !1330)
!1504 = !DILocation(line: 518, column: 15, scope: !1505)
!1505 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 518, column: 15)
!1506 = !DILocation(line: 518, column: 15, scope: !1330)
!1507 = !DILocation(line: 520, column: 19, scope: !1508)
!1508 = distinct !DILexicalBlock(scope: !1505, file: !105, line: 519, column: 13)
!1509 = !DILocation(line: 520, column: 17, scope: !1508)
!1510 = !DILocation(line: 521, column: 15, scope: !1508)
!1511 = !DILocation(line: 523, column: 11, scope: !1330)
!1512 = !DILocation(line: 526, column: 18, scope: !1513)
!1513 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 526, column: 15)
!1514 = !DILocation(line: 526, column: 26, scope: !1513)
!1515 = !DILocation(line: 526, column: 15, scope: !1330)
!1516 = !DILocation(line: 526, column: 40, scope: !1513)
!1517 = !DILocation(line: 526, column: 47, scope: !1513)
!1518 = !DILocation(line: 526, column: 57, scope: !1513)
!1519 = !DILocation(line: 526, column: 65, scope: !1513)
!1520 = !DILocation(line: 527, column: 13, scope: !1513)
!1521 = !DILocation(line: 528, column: 11, scope: !1330)
!1522 = !DILocation(line: 530, column: 15, scope: !1523)
!1523 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 530, column: 15)
!1524 = !DILocation(line: 530, column: 17, scope: !1523)
!1525 = !DILocation(line: 530, column: 15, scope: !1330)
!1526 = !DILocation(line: 531, column: 13, scope: !1523)
!1527 = !DILocation(line: 532, column: 11, scope: !1330)
!1528 = !DILocation(line: 534, column: 36, scope: !1330)
!1529 = !DILocation(line: 535, column: 11, scope: !1330)
!1530 = !DILocation(line: 548, column: 15, scope: !1531)
!1531 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 548, column: 15)
!1532 = !DILocation(line: 548, column: 29, scope: !1531)
!1533 = !DILocation(line: 549, column: 15, scope: !1531)
!1534 = !DILocation(line: 549, column: 18, scope: !1531)
!1535 = !DILocation(line: 548, column: 15, scope: !1330)
!1536 = !DILocation(line: 550, column: 13, scope: !1531)
!1537 = !DILocation(line: 551, column: 11, scope: !1330)
!1538 = !DILocation(line: 554, column: 36, scope: !1330)
!1539 = !DILocation(line: 555, column: 36, scope: !1330)
!1540 = !DILocation(line: 556, column: 15, scope: !1541)
!1541 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 556, column: 15)
!1542 = !DILocation(line: 556, column: 29, scope: !1541)
!1543 = !DILocation(line: 556, column: 15, scope: !1330)
!1544 = !DILocation(line: 558, column: 19, scope: !1545)
!1545 = distinct !DILexicalBlock(scope: !1546, file: !105, line: 558, column: 19)
!1546 = distinct !DILexicalBlock(scope: !1541, file: !105, line: 557, column: 13)
!1547 = !DILocation(line: 558, column: 19, scope: !1546)
!1548 = !DILocation(line: 559, column: 17, scope: !1545)
!1549 = !DILocation(line: 561, column: 19, scope: !1550)
!1550 = distinct !DILexicalBlock(scope: !1546, file: !105, line: 561, column: 19)
!1551 = !DILocation(line: 561, column: 30, scope: !1550)
!1552 = !DILocation(line: 561, column: 35, scope: !1550)
!1553 = !DILocation(line: 561, column: 19, scope: !1546)
!1554 = !DILocation(line: 566, column: 37, scope: !1555)
!1555 = distinct !DILexicalBlock(scope: !1550, file: !105, line: 562, column: 17)
!1556 = !DILocation(line: 566, column: 35, scope: !1555)
!1557 = !DILocation(line: 567, column: 30, scope: !1555)
!1558 = !DILocation(line: 568, column: 17, scope: !1555)
!1559 = !DILocation(line: 570, column: 15, scope: !1546)
!1560 = !DILocation(line: 570, column: 15, scope: !1561)
!1561 = distinct !DILexicalBlock(scope: !1562, file: !105, line: 570, column: 15)
!1562 = distinct !DILexicalBlock(scope: !1546, file: !105, line: 570, column: 15)
!1563 = !DILocation(line: 570, column: 15, scope: !1562)
!1564 = !DILocation(line: 571, column: 15, scope: !1546)
!1565 = !DILocation(line: 571, column: 15, scope: !1566)
!1566 = distinct !DILexicalBlock(scope: !1567, file: !105, line: 571, column: 15)
!1567 = distinct !DILexicalBlock(scope: !1546, file: !105, line: 571, column: 15)
!1568 = !DILocation(line: 571, column: 15, scope: !1567)
!1569 = !DILocation(line: 572, column: 15, scope: !1546)
!1570 = !DILocation(line: 572, column: 15, scope: !1571)
!1571 = distinct !DILexicalBlock(scope: !1572, file: !105, line: 572, column: 15)
!1572 = distinct !DILexicalBlock(scope: !1546, file: !105, line: 572, column: 15)
!1573 = !DILocation(line: 572, column: 15, scope: !1572)
!1574 = !DILocation(line: 573, column: 40, scope: !1546)
!1575 = !DILocation(line: 574, column: 13, scope: !1546)
!1576 = !DILocation(line: 575, column: 11, scope: !1330)
!1577 = !DILocation(line: 599, column: 36, scope: !1330)
!1578 = !DILocation(line: 600, column: 11, scope: !1330)
!1579 = !DILocalVariable(name: "m", scope: !1580, file: !105, line: 610, type: !99)
!1580 = distinct !DILexicalBlock(scope: !1330, file: !105, line: 608, column: 11)
!1581 = !DILocation(line: 610, column: 20, scope: !1580)
!1582 = !DILocalVariable(name: "printable", scope: !1580, file: !105, line: 612, type: !41)
!1583 = !DILocation(line: 612, column: 18, scope: !1580)
!1584 = !DILocation(line: 614, column: 17, scope: !1585)
!1585 = distinct !DILexicalBlock(scope: !1580, file: !105, line: 614, column: 17)
!1586 = !DILocation(line: 614, column: 17, scope: !1580)
!1587 = !DILocation(line: 616, column: 19, scope: !1588)
!1588 = distinct !DILexicalBlock(scope: !1585, file: !105, line: 615, column: 15)
!1589 = !DILocation(line: 617, column: 29, scope: !1588)
!1590 = !DILocation(line: 617, column: 41, scope: !1588)
!1591 = !DILocation(line: 617, column: 27, scope: !1588)
!1592 = !DILocation(line: 618, column: 15, scope: !1588)
!1593 = !DILocalVariable(name: "mbstate", scope: !1594, file: !105, line: 621, type: !1595)
!1594 = distinct !DILexicalBlock(scope: !1585, file: !105, line: 620, column: 15)
!1595 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1596, line: 6, baseType: !1597)
!1596 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!1597 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1598, line: 21, baseType: !1599)
!1598 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!1599 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1598, line: 13, size: 64, elements: !1600)
!1600 = !{!1601, !1602}
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1599, file: !1598, line: 15, baseType: !6, size: 32)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1599, file: !1598, line: 20, baseType: !1603, size: 32, offset: 32)
!1603 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1599, file: !1598, line: 16, size: 32, elements: !1604)
!1604 = !{!1605, !1606}
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1603, file: !1598, line: 18, baseType: !84, size: 32)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1603, file: !1598, line: 19, baseType: !1607, size: 32)
!1607 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 32, elements: !1608)
!1608 = !{!1609}
!1609 = !DISubrange(count: 4)
!1610 = !DILocation(line: 621, column: 27, scope: !1594)
!1611 = !DILocation(line: 622, column: 17, scope: !1594)
!1612 = !DILocation(line: 624, column: 19, scope: !1594)
!1613 = !DILocation(line: 625, column: 27, scope: !1594)
!1614 = !DILocation(line: 626, column: 21, scope: !1615)
!1615 = distinct !DILexicalBlock(scope: !1594, file: !105, line: 626, column: 21)
!1616 = !DILocation(line: 626, column: 29, scope: !1615)
!1617 = !DILocation(line: 626, column: 21, scope: !1594)
!1618 = !DILocation(line: 627, column: 37, scope: !1615)
!1619 = !DILocation(line: 627, column: 29, scope: !1615)
!1620 = !DILocation(line: 627, column: 27, scope: !1615)
!1621 = !DILocation(line: 627, column: 19, scope: !1615)
!1622 = !DILocation(line: 629, column: 17, scope: !1594)
!1623 = !DILocalVariable(name: "w", scope: !1624, file: !105, line: 631, type: !1625)
!1624 = distinct !DILexicalBlock(scope: !1594, file: !105, line: 630, column: 19)
!1625 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !100, line: 74, baseType: !6)
!1626 = !DILocation(line: 631, column: 29, scope: !1624)
!1627 = !DILocalVariable(name: "bytes", scope: !1624, file: !105, line: 632, type: !99)
!1628 = !DILocation(line: 632, column: 28, scope: !1624)
!1629 = !DILocation(line: 632, column: 50, scope: !1624)
!1630 = !DILocation(line: 632, column: 54, scope: !1624)
!1631 = !DILocation(line: 632, column: 58, scope: !1624)
!1632 = !DILocation(line: 632, column: 56, scope: !1624)
!1633 = !DILocation(line: 633, column: 45, scope: !1624)
!1634 = !DILocation(line: 633, column: 56, scope: !1624)
!1635 = !DILocation(line: 633, column: 60, scope: !1624)
!1636 = !DILocation(line: 633, column: 58, scope: !1624)
!1637 = !DILocation(line: 633, column: 53, scope: !1624)
!1638 = !DILocation(line: 632, column: 36, scope: !1624)
!1639 = !DILocation(line: 634, column: 25, scope: !1640)
!1640 = distinct !DILexicalBlock(scope: !1624, file: !105, line: 634, column: 25)
!1641 = !DILocation(line: 634, column: 31, scope: !1640)
!1642 = !DILocation(line: 634, column: 25, scope: !1624)
!1643 = !DILocation(line: 635, column: 23, scope: !1640)
!1644 = !DILocation(line: 636, column: 30, scope: !1645)
!1645 = distinct !DILexicalBlock(scope: !1640, file: !105, line: 636, column: 30)
!1646 = !DILocation(line: 636, column: 36, scope: !1645)
!1647 = !DILocation(line: 636, column: 30, scope: !1640)
!1648 = !DILocation(line: 638, column: 35, scope: !1649)
!1649 = distinct !DILexicalBlock(scope: !1645, file: !105, line: 637, column: 23)
!1650 = !DILocation(line: 639, column: 25, scope: !1649)
!1651 = !DILocation(line: 641, column: 30, scope: !1652)
!1652 = distinct !DILexicalBlock(scope: !1645, file: !105, line: 641, column: 30)
!1653 = !DILocation(line: 641, column: 36, scope: !1652)
!1654 = !DILocation(line: 641, column: 30, scope: !1645)
!1655 = !DILocation(line: 643, column: 35, scope: !1656)
!1656 = distinct !DILexicalBlock(scope: !1652, file: !105, line: 642, column: 23)
!1657 = !DILocation(line: 644, column: 25, scope: !1656)
!1658 = !DILocation(line: 644, column: 32, scope: !1656)
!1659 = !DILocation(line: 644, column: 36, scope: !1656)
!1660 = !DILocation(line: 644, column: 34, scope: !1656)
!1661 = !DILocation(line: 644, column: 40, scope: !1656)
!1662 = !DILocation(line: 644, column: 38, scope: !1656)
!1663 = !DILocation(line: 644, column: 48, scope: !1656)
!1664 = !DILocation(line: 644, column: 51, scope: !1656)
!1665 = !DILocation(line: 644, column: 55, scope: !1656)
!1666 = !DILocation(line: 644, column: 59, scope: !1656)
!1667 = !DILocation(line: 644, column: 57, scope: !1656)
!1668 = !DILocation(line: 0, scope: !1656)
!1669 = !DILocation(line: 645, column: 28, scope: !1656)
!1670 = distinct !{!1670, !1657, !1669}
!1671 = !DILocation(line: 646, column: 25, scope: !1656)
!1672 = !DILocation(line: 654, column: 44, scope: !1673)
!1673 = distinct !DILexicalBlock(scope: !1674, file: !105, line: 654, column: 29)
!1674 = distinct !DILexicalBlock(scope: !1652, file: !105, line: 649, column: 23)
!1675 = !DILocation(line: 655, column: 29, scope: !1673)
!1676 = !DILocation(line: 655, column: 32, scope: !1673)
!1677 = !DILocation(line: 655, column: 46, scope: !1673)
!1678 = !DILocation(line: 654, column: 29, scope: !1674)
!1679 = !DILocalVariable(name: "j", scope: !1680, file: !105, line: 657, type: !99)
!1680 = distinct !DILexicalBlock(scope: !1673, file: !105, line: 656, column: 27)
!1681 = !DILocation(line: 657, column: 36, scope: !1680)
!1682 = !DILocation(line: 658, column: 36, scope: !1683)
!1683 = distinct !DILexicalBlock(scope: !1680, file: !105, line: 658, column: 29)
!1684 = !DILocation(line: 658, column: 34, scope: !1683)
!1685 = !DILocation(line: 658, column: 41, scope: !1686)
!1686 = distinct !DILexicalBlock(scope: !1683, file: !105, line: 658, column: 29)
!1687 = !DILocation(line: 658, column: 45, scope: !1686)
!1688 = !DILocation(line: 658, column: 43, scope: !1686)
!1689 = !DILocation(line: 658, column: 29, scope: !1683)
!1690 = !DILocation(line: 659, column: 39, scope: !1686)
!1691 = !DILocation(line: 659, column: 43, scope: !1686)
!1692 = !DILocation(line: 659, column: 47, scope: !1686)
!1693 = !DILocation(line: 659, column: 45, scope: !1686)
!1694 = !DILocation(line: 659, column: 51, scope: !1686)
!1695 = !DILocation(line: 659, column: 49, scope: !1686)
!1696 = !DILocation(line: 659, column: 31, scope: !1686)
!1697 = !DILocation(line: 663, column: 35, scope: !1698)
!1698 = distinct !DILexicalBlock(scope: !1686, file: !105, line: 660, column: 33)
!1699 = !DILocation(line: 666, column: 35, scope: !1698)
!1700 = !DILocation(line: 667, column: 33, scope: !1698)
!1701 = !DILocation(line: 658, column: 53, scope: !1686)
!1702 = !DILocation(line: 658, column: 29, scope: !1686)
!1703 = distinct !{!1703, !1689, !1704}
!1704 = !DILocation(line: 667, column: 33, scope: !1683)
!1705 = !DILocation(line: 668, column: 27, scope: !1680)
!1706 = !DILocation(line: 670, column: 41, scope: !1707)
!1707 = distinct !DILexicalBlock(scope: !1674, file: !105, line: 670, column: 29)
!1708 = !DILocation(line: 670, column: 31, scope: !1707)
!1709 = !DILocation(line: 670, column: 29, scope: !1674)
!1710 = !DILocation(line: 671, column: 37, scope: !1707)
!1711 = !DILocation(line: 671, column: 27, scope: !1707)
!1712 = !DILocation(line: 672, column: 30, scope: !1674)
!1713 = !DILocation(line: 672, column: 27, scope: !1674)
!1714 = !DILocation(line: 674, column: 19, scope: !1624)
!1715 = !DILocation(line: 675, column: 26, scope: !1594)
!1716 = !DILocation(line: 675, column: 24, scope: !1594)
!1717 = distinct !{!1717, !1622, !1718}
!1718 = !DILocation(line: 675, column: 44, scope: !1594)
!1719 = !DILocation(line: 678, column: 40, scope: !1580)
!1720 = !DILocation(line: 678, column: 38, scope: !1580)
!1721 = !DILocation(line: 680, column: 21, scope: !1722)
!1722 = distinct !DILexicalBlock(scope: !1580, file: !105, line: 680, column: 17)
!1723 = !DILocation(line: 680, column: 19, scope: !1722)
!1724 = !DILocation(line: 680, column: 23, scope: !1722)
!1725 = !DILocation(line: 680, column: 27, scope: !1722)
!1726 = !DILocation(line: 680, column: 45, scope: !1722)
!1727 = !DILocation(line: 680, column: 50, scope: !1722)
!1728 = !DILocation(line: 680, column: 17, scope: !1580)
!1729 = !DILocalVariable(name: "ilim", scope: !1730, file: !105, line: 684, type: !99)
!1730 = distinct !DILexicalBlock(scope: !1722, file: !105, line: 681, column: 15)
!1731 = !DILocation(line: 684, column: 24, scope: !1730)
!1732 = !DILocation(line: 684, column: 31, scope: !1730)
!1733 = !DILocation(line: 684, column: 35, scope: !1730)
!1734 = !DILocation(line: 684, column: 33, scope: !1730)
!1735 = !DILocation(line: 686, column: 17, scope: !1730)
!1736 = !DILocation(line: 688, column: 25, scope: !1737)
!1737 = distinct !DILexicalBlock(scope: !1738, file: !105, line: 688, column: 25)
!1738 = distinct !DILexicalBlock(scope: !1739, file: !105, line: 687, column: 19)
!1739 = distinct !DILexicalBlock(scope: !1740, file: !105, line: 686, column: 17)
!1740 = distinct !DILexicalBlock(scope: !1730, file: !105, line: 686, column: 17)
!1741 = !DILocation(line: 688, column: 43, scope: !1737)
!1742 = !DILocation(line: 688, column: 48, scope: !1737)
!1743 = !DILocation(line: 688, column: 25, scope: !1738)
!1744 = !DILocation(line: 690, column: 25, scope: !1745)
!1745 = distinct !DILexicalBlock(scope: !1737, file: !105, line: 689, column: 23)
!1746 = !DILocation(line: 690, column: 25, scope: !1747)
!1747 = distinct !DILexicalBlock(scope: !1748, file: !105, line: 690, column: 25)
!1748 = distinct !DILexicalBlock(scope: !1745, file: !105, line: 690, column: 25)
!1749 = !DILocation(line: 690, column: 25, scope: !1748)
!1750 = !DILocation(line: 690, column: 25, scope: !1751)
!1751 = distinct !DILexicalBlock(scope: !1748, file: !105, line: 690, column: 25)
!1752 = !DILocation(line: 690, column: 25, scope: !1753)
!1753 = distinct !DILexicalBlock(scope: !1751, file: !105, line: 690, column: 25)
!1754 = !DILocation(line: 690, column: 25, scope: !1755)
!1755 = distinct !DILexicalBlock(scope: !1756, file: !105, line: 690, column: 25)
!1756 = distinct !DILexicalBlock(scope: !1753, file: !105, line: 690, column: 25)
!1757 = !DILocation(line: 690, column: 25, scope: !1756)
!1758 = !DILocation(line: 690, column: 25, scope: !1759)
!1759 = distinct !DILexicalBlock(scope: !1760, file: !105, line: 690, column: 25)
!1760 = distinct !DILexicalBlock(scope: !1753, file: !105, line: 690, column: 25)
!1761 = !DILocation(line: 690, column: 25, scope: !1760)
!1762 = !DILocation(line: 690, column: 25, scope: !1763)
!1763 = distinct !DILexicalBlock(scope: !1764, file: !105, line: 690, column: 25)
!1764 = distinct !DILexicalBlock(scope: !1753, file: !105, line: 690, column: 25)
!1765 = !DILocation(line: 690, column: 25, scope: !1764)
!1766 = !DILocation(line: 690, column: 25, scope: !1767)
!1767 = distinct !DILexicalBlock(scope: !1768, file: !105, line: 690, column: 25)
!1768 = distinct !DILexicalBlock(scope: !1748, file: !105, line: 690, column: 25)
!1769 = !DILocation(line: 690, column: 25, scope: !1768)
!1770 = !DILocation(line: 691, column: 25, scope: !1745)
!1771 = !DILocation(line: 691, column: 25, scope: !1772)
!1772 = distinct !DILexicalBlock(scope: !1773, file: !105, line: 691, column: 25)
!1773 = distinct !DILexicalBlock(scope: !1745, file: !105, line: 691, column: 25)
!1774 = !DILocation(line: 691, column: 25, scope: !1773)
!1775 = !DILocation(line: 692, column: 25, scope: !1745)
!1776 = !DILocation(line: 692, column: 25, scope: !1777)
!1777 = distinct !DILexicalBlock(scope: !1778, file: !105, line: 692, column: 25)
!1778 = distinct !DILexicalBlock(scope: !1745, file: !105, line: 692, column: 25)
!1779 = !DILocation(line: 692, column: 25, scope: !1778)
!1780 = !DILocation(line: 693, column: 36, scope: !1745)
!1781 = !DILocation(line: 693, column: 38, scope: !1745)
!1782 = !DILocation(line: 693, column: 33, scope: !1745)
!1783 = !DILocation(line: 693, column: 29, scope: !1745)
!1784 = !DILocation(line: 693, column: 27, scope: !1745)
!1785 = !DILocation(line: 694, column: 23, scope: !1745)
!1786 = !DILocation(line: 695, column: 30, scope: !1787)
!1787 = distinct !DILexicalBlock(scope: !1737, file: !105, line: 695, column: 30)
!1788 = !DILocation(line: 695, column: 30, scope: !1737)
!1789 = !DILocation(line: 697, column: 25, scope: !1790)
!1790 = distinct !DILexicalBlock(scope: !1787, file: !105, line: 696, column: 23)
!1791 = !DILocation(line: 697, column: 25, scope: !1792)
!1792 = distinct !DILexicalBlock(scope: !1793, file: !105, line: 697, column: 25)
!1793 = distinct !DILexicalBlock(scope: !1790, file: !105, line: 697, column: 25)
!1794 = !DILocation(line: 697, column: 25, scope: !1793)
!1795 = !DILocation(line: 698, column: 40, scope: !1790)
!1796 = !DILocation(line: 699, column: 23, scope: !1790)
!1797 = !DILocation(line: 700, column: 25, scope: !1798)
!1798 = distinct !DILexicalBlock(scope: !1738, file: !105, line: 700, column: 25)
!1799 = !DILocation(line: 700, column: 33, scope: !1798)
!1800 = !DILocation(line: 700, column: 35, scope: !1798)
!1801 = !DILocation(line: 700, column: 30, scope: !1798)
!1802 = !DILocation(line: 700, column: 25, scope: !1738)
!1803 = !DILocation(line: 701, column: 23, scope: !1798)
!1804 = !DILocation(line: 702, column: 21, scope: !1738)
!1805 = !DILocation(line: 702, column: 21, scope: !1806)
!1806 = distinct !DILexicalBlock(scope: !1807, file: !105, line: 702, column: 21)
!1807 = distinct !DILexicalBlock(scope: !1738, file: !105, line: 702, column: 21)
!1808 = !DILocation(line: 702, column: 21, scope: !1807)
!1809 = !DILocation(line: 702, column: 21, scope: !1810)
!1810 = distinct !DILexicalBlock(scope: !1806, file: !105, line: 702, column: 21)
!1811 = !DILocation(line: 702, column: 21, scope: !1812)
!1812 = distinct !DILexicalBlock(scope: !1813, file: !105, line: 702, column: 21)
!1813 = distinct !DILexicalBlock(scope: !1810, file: !105, line: 702, column: 21)
!1814 = !DILocation(line: 702, column: 21, scope: !1813)
!1815 = !DILocation(line: 702, column: 21, scope: !1816)
!1816 = distinct !DILexicalBlock(scope: !1817, file: !105, line: 702, column: 21)
!1817 = distinct !DILexicalBlock(scope: !1810, file: !105, line: 702, column: 21)
!1818 = !DILocation(line: 702, column: 21, scope: !1817)
!1819 = !DILocation(line: 703, column: 21, scope: !1738)
!1820 = !DILocation(line: 703, column: 21, scope: !1821)
!1821 = distinct !DILexicalBlock(scope: !1822, file: !105, line: 703, column: 21)
!1822 = distinct !DILexicalBlock(scope: !1738, file: !105, line: 703, column: 21)
!1823 = !DILocation(line: 703, column: 21, scope: !1822)
!1824 = !DILocation(line: 704, column: 25, scope: !1738)
!1825 = !DILocation(line: 704, column: 29, scope: !1738)
!1826 = !DILocation(line: 704, column: 23, scope: !1738)
!1827 = !DILocation(line: 686, column: 17, scope: !1739)
!1828 = distinct !{!1828, !1829, !1830}
!1829 = !DILocation(line: 686, column: 17, scope: !1740)
!1830 = !DILocation(line: 705, column: 19, scope: !1740)
!1831 = !DILocation(line: 707, column: 17, scope: !1730)
!1832 = !DILocation(line: 710, column: 9, scope: !1330)
!1833 = !DILocation(line: 712, column: 16, scope: !1834)
!1834 = distinct !DILexicalBlock(scope: !1276, file: !105, line: 712, column: 11)
!1835 = !DILocation(line: 712, column: 34, scope: !1834)
!1836 = !DILocation(line: 712, column: 37, scope: !1834)
!1837 = !DILocation(line: 712, column: 51, scope: !1834)
!1838 = !DILocation(line: 713, column: 15, scope: !1834)
!1839 = !DILocation(line: 713, column: 18, scope: !1834)
!1840 = !DILocation(line: 714, column: 14, scope: !1834)
!1841 = !DILocation(line: 714, column: 17, scope: !1834)
!1842 = !DILocation(line: 715, column: 14, scope: !1834)
!1843 = !DILocation(line: 715, column: 17, scope: !1834)
!1844 = !DILocation(line: 715, column: 33, scope: !1834)
!1845 = !DILocation(line: 715, column: 35, scope: !1834)
!1846 = !DILocation(line: 715, column: 51, scope: !1834)
!1847 = !DILocation(line: 715, column: 53, scope: !1834)
!1848 = !DILocation(line: 715, column: 47, scope: !1834)
!1849 = !DILocation(line: 715, column: 65, scope: !1834)
!1850 = !DILocation(line: 716, column: 11, scope: !1834)
!1851 = !DILocation(line: 716, column: 15, scope: !1834)
!1852 = !DILocation(line: 712, column: 11, scope: !1276)
!1853 = !DILocation(line: 717, column: 9, scope: !1834)
!1854 = !DILabel(scope: !1276, name: "store_escape", file: !105, line: 719)
!1855 = !DILocation(line: 719, column: 5, scope: !1276)
!1856 = !DILocation(line: 720, column: 7, scope: !1276)
!1857 = !DILocation(line: 720, column: 7, scope: !1858)
!1858 = distinct !DILexicalBlock(scope: !1859, file: !105, line: 720, column: 7)
!1859 = distinct !DILexicalBlock(scope: !1276, file: !105, line: 720, column: 7)
!1860 = !DILocation(line: 720, column: 7, scope: !1859)
!1861 = !DILocation(line: 720, column: 7, scope: !1862)
!1862 = distinct !DILexicalBlock(scope: !1859, file: !105, line: 720, column: 7)
!1863 = !DILocation(line: 720, column: 7, scope: !1864)
!1864 = distinct !DILexicalBlock(scope: !1862, file: !105, line: 720, column: 7)
!1865 = !DILocation(line: 720, column: 7, scope: !1866)
!1866 = distinct !DILexicalBlock(scope: !1867, file: !105, line: 720, column: 7)
!1867 = distinct !DILexicalBlock(scope: !1864, file: !105, line: 720, column: 7)
!1868 = !DILocation(line: 720, column: 7, scope: !1867)
!1869 = !DILocation(line: 720, column: 7, scope: !1870)
!1870 = distinct !DILexicalBlock(scope: !1871, file: !105, line: 720, column: 7)
!1871 = distinct !DILexicalBlock(scope: !1864, file: !105, line: 720, column: 7)
!1872 = !DILocation(line: 720, column: 7, scope: !1871)
!1873 = !DILocation(line: 720, column: 7, scope: !1874)
!1874 = distinct !DILexicalBlock(scope: !1875, file: !105, line: 720, column: 7)
!1875 = distinct !DILexicalBlock(scope: !1864, file: !105, line: 720, column: 7)
!1876 = !DILocation(line: 720, column: 7, scope: !1875)
!1877 = !DILocation(line: 720, column: 7, scope: !1878)
!1878 = distinct !DILexicalBlock(scope: !1879, file: !105, line: 720, column: 7)
!1879 = distinct !DILexicalBlock(scope: !1859, file: !105, line: 720, column: 7)
!1880 = !DILocation(line: 720, column: 7, scope: !1879)
!1881 = !DILabel(scope: !1276, name: "store_c", file: !105, line: 722)
!1882 = !DILocation(line: 722, column: 5, scope: !1276)
!1883 = !DILocation(line: 723, column: 7, scope: !1276)
!1884 = !DILocation(line: 723, column: 7, scope: !1885)
!1885 = distinct !DILexicalBlock(scope: !1886, file: !105, line: 723, column: 7)
!1886 = distinct !DILexicalBlock(scope: !1276, file: !105, line: 723, column: 7)
!1887 = !DILocation(line: 723, column: 7, scope: !1886)
!1888 = !DILocation(line: 723, column: 7, scope: !1889)
!1889 = distinct !DILexicalBlock(scope: !1885, file: !105, line: 723, column: 7)
!1890 = !DILocation(line: 723, column: 7, scope: !1891)
!1891 = distinct !DILexicalBlock(scope: !1892, file: !105, line: 723, column: 7)
!1892 = distinct !DILexicalBlock(scope: !1889, file: !105, line: 723, column: 7)
!1893 = !DILocation(line: 723, column: 7, scope: !1892)
!1894 = !DILocation(line: 723, column: 7, scope: !1895)
!1895 = distinct !DILexicalBlock(scope: !1896, file: !105, line: 723, column: 7)
!1896 = distinct !DILexicalBlock(scope: !1889, file: !105, line: 723, column: 7)
!1897 = !DILocation(line: 723, column: 7, scope: !1896)
!1898 = !DILocation(line: 724, column: 7, scope: !1276)
!1899 = !DILocation(line: 724, column: 7, scope: !1900)
!1900 = distinct !DILexicalBlock(scope: !1901, file: !105, line: 724, column: 7)
!1901 = distinct !DILexicalBlock(scope: !1276, file: !105, line: 724, column: 7)
!1902 = !DILocation(line: 724, column: 7, scope: !1901)
!1903 = !DILocation(line: 726, column: 13, scope: !1904)
!1904 = distinct !DILexicalBlock(scope: !1276, file: !105, line: 726, column: 11)
!1905 = !DILocation(line: 726, column: 11, scope: !1276)
!1906 = !DILocation(line: 727, column: 38, scope: !1904)
!1907 = !DILocation(line: 727, column: 9, scope: !1904)
!1908 = !DILocation(line: 728, column: 5, scope: !1276)
!1909 = !DILocation(line: 400, column: 75, scope: !1265)
!1910 = !DILocation(line: 400, column: 3, scope: !1265)
!1911 = distinct !{!1911, !1274, !1912}
!1912 = !DILocation(line: 728, column: 5, scope: !1262)
!1913 = !DILocation(line: 730, column: 7, scope: !1914)
!1914 = distinct !DILexicalBlock(scope: !1122, file: !105, line: 730, column: 7)
!1915 = !DILocation(line: 730, column: 11, scope: !1914)
!1916 = !DILocation(line: 730, column: 16, scope: !1914)
!1917 = !DILocation(line: 730, column: 19, scope: !1914)
!1918 = !DILocation(line: 730, column: 33, scope: !1914)
!1919 = !DILocation(line: 731, column: 7, scope: !1914)
!1920 = !DILocation(line: 731, column: 10, scope: !1914)
!1921 = !DILocation(line: 730, column: 7, scope: !1122)
!1922 = !DILocation(line: 732, column: 5, scope: !1914)
!1923 = !DILocation(line: 738, column: 7, scope: !1924)
!1924 = distinct !DILexicalBlock(scope: !1122, file: !105, line: 738, column: 7)
!1925 = !DILocation(line: 738, column: 21, scope: !1924)
!1926 = !DILocation(line: 738, column: 51, scope: !1924)
!1927 = !DILocation(line: 738, column: 56, scope: !1924)
!1928 = !DILocation(line: 739, column: 7, scope: !1924)
!1929 = !DILocation(line: 739, column: 10, scope: !1924)
!1930 = !DILocation(line: 738, column: 7, scope: !1122)
!1931 = !DILocation(line: 741, column: 11, scope: !1932)
!1932 = distinct !DILexicalBlock(scope: !1933, file: !105, line: 741, column: 11)
!1933 = distinct !DILexicalBlock(scope: !1924, file: !105, line: 740, column: 5)
!1934 = !DILocation(line: 741, column: 11, scope: !1933)
!1935 = !DILocation(line: 742, column: 42, scope: !1932)
!1936 = !DILocation(line: 742, column: 50, scope: !1932)
!1937 = !DILocation(line: 742, column: 67, scope: !1932)
!1938 = !DILocation(line: 742, column: 72, scope: !1932)
!1939 = !DILocation(line: 744, column: 42, scope: !1932)
!1940 = !DILocation(line: 744, column: 49, scope: !1932)
!1941 = !DILocation(line: 745, column: 42, scope: !1932)
!1942 = !DILocation(line: 745, column: 54, scope: !1932)
!1943 = !DILocation(line: 742, column: 16, scope: !1932)
!1944 = !DILocation(line: 742, column: 9, scope: !1932)
!1945 = !DILocation(line: 746, column: 18, scope: !1946)
!1946 = distinct !DILexicalBlock(scope: !1932, file: !105, line: 746, column: 16)
!1947 = !DILocation(line: 746, column: 29, scope: !1946)
!1948 = !DILocation(line: 746, column: 32, scope: !1946)
!1949 = !DILocation(line: 746, column: 16, scope: !1932)
!1950 = !DILocation(line: 749, column: 24, scope: !1951)
!1951 = distinct !DILexicalBlock(scope: !1946, file: !105, line: 747, column: 9)
!1952 = !DILocation(line: 749, column: 22, scope: !1951)
!1953 = !DILocation(line: 750, column: 15, scope: !1951)
!1954 = !DILocation(line: 751, column: 11, scope: !1951)
!1955 = !DILocation(line: 753, column: 5, scope: !1933)
!1956 = !DILocation(line: 755, column: 7, scope: !1957)
!1957 = distinct !DILexicalBlock(scope: !1122, file: !105, line: 755, column: 7)
!1958 = !DILocation(line: 755, column: 20, scope: !1957)
!1959 = !DILocation(line: 755, column: 24, scope: !1957)
!1960 = !DILocation(line: 755, column: 7, scope: !1122)
!1961 = !DILocation(line: 756, column: 5, scope: !1957)
!1962 = !DILocation(line: 756, column: 13, scope: !1963)
!1963 = distinct !DILexicalBlock(scope: !1964, file: !105, line: 756, column: 5)
!1964 = distinct !DILexicalBlock(scope: !1957, file: !105, line: 756, column: 5)
!1965 = !DILocation(line: 756, column: 12, scope: !1963)
!1966 = !DILocation(line: 756, column: 5, scope: !1964)
!1967 = !DILocation(line: 757, column: 7, scope: !1963)
!1968 = !DILocation(line: 757, column: 7, scope: !1969)
!1969 = distinct !DILexicalBlock(scope: !1970, file: !105, line: 757, column: 7)
!1970 = distinct !DILexicalBlock(scope: !1963, file: !105, line: 757, column: 7)
!1971 = !DILocation(line: 757, column: 7, scope: !1970)
!1972 = !DILocation(line: 756, column: 39, scope: !1963)
!1973 = !DILocation(line: 756, column: 5, scope: !1963)
!1974 = distinct !{!1974, !1966, !1975}
!1975 = !DILocation(line: 757, column: 7, scope: !1964)
!1976 = !DILocation(line: 759, column: 7, scope: !1977)
!1977 = distinct !DILexicalBlock(scope: !1122, file: !105, line: 759, column: 7)
!1978 = !DILocation(line: 759, column: 13, scope: !1977)
!1979 = !DILocation(line: 759, column: 11, scope: !1977)
!1980 = !DILocation(line: 759, column: 7, scope: !1122)
!1981 = !DILocation(line: 760, column: 5, scope: !1977)
!1982 = !DILocation(line: 760, column: 12, scope: !1977)
!1983 = !DILocation(line: 760, column: 17, scope: !1977)
!1984 = !DILocation(line: 761, column: 10, scope: !1122)
!1985 = !DILocation(line: 761, column: 3, scope: !1122)
!1986 = !DILabel(scope: !1122, name: "force_outer_quoting_style", file: !105, line: 763)
!1987 = !DILocation(line: 763, column: 2, scope: !1122)
!1988 = !DILocation(line: 766, column: 7, scope: !1989)
!1989 = distinct !DILexicalBlock(scope: !1122, file: !105, line: 766, column: 7)
!1990 = !DILocation(line: 766, column: 21, scope: !1989)
!1991 = !DILocation(line: 766, column: 51, scope: !1989)
!1992 = !DILocation(line: 766, column: 54, scope: !1989)
!1993 = !DILocation(line: 766, column: 7, scope: !1122)
!1994 = !DILocation(line: 767, column: 19, scope: !1989)
!1995 = !DILocation(line: 767, column: 5, scope: !1989)
!1996 = !DILocation(line: 768, column: 36, scope: !1122)
!1997 = !DILocation(line: 768, column: 44, scope: !1122)
!1998 = !DILocation(line: 768, column: 56, scope: !1122)
!1999 = !DILocation(line: 768, column: 61, scope: !1122)
!2000 = !DILocation(line: 769, column: 36, scope: !1122)
!2001 = !DILocation(line: 770, column: 36, scope: !1122)
!2002 = !DILocation(line: 770, column: 42, scope: !1122)
!2003 = !DILocation(line: 771, column: 36, scope: !1122)
!2004 = !DILocation(line: 771, column: 48, scope: !1122)
!2005 = !DILocation(line: 768, column: 10, scope: !1122)
!2006 = !DILocation(line: 768, column: 3, scope: !1122)
!2007 = !DILocation(line: 772, column: 1, scope: !1122)
!2008 = !DILocalVariable(name: "buffer", arg: 1, scope: !2009, file: !105, line: 256, type: !8)
!2009 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !105, file: !105, line: 256, type: !1123, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2010, retainedNodes: !11)
!2010 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2011, nameTableKind: None)
!2011 = !{!2012, !2014, !2016, !2025, !2027, !2029, !2036, !2038}
!2012 = !DIGlobalVariableExpression(var: !2013, expr: !DIExpression())
!2013 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2010, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2014 = !DIGlobalVariableExpression(var: !2015, expr: !DIExpression())
!2015 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2010, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2016 = !DIGlobalVariableExpression(var: !2017, expr: !DIExpression())
!2017 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2010, file: !105, line: 1052, type: !2018, isLocal: false, isDefinition: true)
!2018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2019)
!2019 = !{!2020, !2021, !2022, !2023, !2024}
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2018, file: !105, line: 68, baseType: !82, size: 32)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2018, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2018, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2018, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2018, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2025 = !DIGlobalVariableExpression(var: !2026, expr: !DIExpression())
!2026 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2010, file: !105, line: 116, type: !2018, isLocal: true, isDefinition: true)
!2027 = !DIGlobalVariableExpression(var: !2028, expr: !DIExpression())
!2028 = distinct !DIGlobalVariable(name: "slot0", scope: !2010, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2029 = !DIGlobalVariableExpression(var: !2030, expr: !DIExpression())
!2030 = distinct !DIGlobalVariable(name: "slotvec", scope: !2010, file: !105, line: 845, type: !2031, isLocal: true, isDefinition: true)
!2031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2032, size: 64)
!2032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2033)
!2033 = !{!2034, !2035}
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2032, file: !105, line: 836, baseType: !99, size: 64)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2032, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2036 = !DIGlobalVariableExpression(var: !2037, expr: !DIExpression())
!2037 = distinct !DIGlobalVariable(name: "nslots", scope: !2010, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2038 = !DIGlobalVariableExpression(var: !2039, expr: !DIExpression())
!2039 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2010, file: !105, line: 844, type: !2032, isLocal: true, isDefinition: true)
!2040 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2009, file: !105, line: 256, type: !99)
!2041 = !DILocalVariable(name: "arg", arg: 3, scope: !2009, file: !105, line: 257, type: !23)
!2042 = !DILocalVariable(name: "argsize", arg: 4, scope: !2009, file: !105, line: 257, type: !99)
!2043 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2009, file: !105, line: 258, type: !82)
!2044 = !DILocalVariable(name: "flags", arg: 6, scope: !2009, file: !105, line: 258, type: !6)
!2045 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2009, file: !105, line: 259, type: !1125)
!2046 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2009, file: !105, line: 260, type: !23)
!2047 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2009, file: !105, line: 261, type: !23)
!2048 = !DILocalVariable(name: "i", scope: !2009, file: !105, line: 263, type: !99)
!2049 = !DILocalVariable(name: "len", scope: !2009, file: !105, line: 264, type: !99)
!2050 = !DILocalVariable(name: "orig_buffersize", scope: !2009, file: !105, line: 265, type: !99)
!2051 = !DILocalVariable(name: "quote_string", scope: !2009, file: !105, line: 266, type: !23)
!2052 = !DILocalVariable(name: "quote_string_len", scope: !2009, file: !105, line: 267, type: !99)
!2053 = !DILocalVariable(name: "backslash_escapes", scope: !2009, file: !105, line: 268, type: !41)
!2054 = !DILocalVariable(name: "unibyte_locale", scope: !2009, file: !105, line: 269, type: !41)
!2055 = !DILocalVariable(name: "elide_outer_quotes", scope: !2009, file: !105, line: 270, type: !41)
!2056 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2009, file: !105, line: 271, type: !41)
!2057 = !DILocalVariable(name: "encountered_single_quote", scope: !2009, file: !105, line: 272, type: !41)
!2058 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2009, file: !105, line: 273, type: !41)
!2059 = !DILocalVariable(name: "escaping", scope: !2060, file: !105, line: 405, type: !41)
!2060 = distinct !DILexicalBlock(scope: !2061, file: !105, line: 401, column: 5)
!2061 = distinct !DILexicalBlock(scope: !2062, file: !105, line: 400, column: 3)
!2062 = distinct !DILexicalBlock(scope: !2063, file: !105, line: 400, column: 3)
!2063 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !105, file: !105, line: 256, type: !1123, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2064, retainedNodes: !11)
!2064 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2065, nameTableKind: None)
!2065 = !{!2066, !2068, !2070, !2079, !2081, !2083, !2090, !2092}
!2066 = !DIGlobalVariableExpression(var: !2067, expr: !DIExpression())
!2067 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2064, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2068 = !DIGlobalVariableExpression(var: !2069, expr: !DIExpression())
!2069 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2064, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2070 = !DIGlobalVariableExpression(var: !2071, expr: !DIExpression())
!2071 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2064, file: !105, line: 1052, type: !2072, isLocal: false, isDefinition: true)
!2072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2073)
!2073 = !{!2074, !2075, !2076, !2077, !2078}
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2072, file: !105, line: 68, baseType: !82, size: 32)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2072, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2072, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2072, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2072, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2079 = !DIGlobalVariableExpression(var: !2080, expr: !DIExpression())
!2080 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2064, file: !105, line: 116, type: !2072, isLocal: true, isDefinition: true)
!2081 = !DIGlobalVariableExpression(var: !2082, expr: !DIExpression())
!2082 = distinct !DIGlobalVariable(name: "slot0", scope: !2064, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2083 = !DIGlobalVariableExpression(var: !2084, expr: !DIExpression())
!2084 = distinct !DIGlobalVariable(name: "slotvec", scope: !2064, file: !105, line: 845, type: !2085, isLocal: true, isDefinition: true)
!2085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2086, size: 64)
!2086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2087)
!2087 = !{!2088, !2089}
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2086, file: !105, line: 836, baseType: !99, size: 64)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2086, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2090 = !DIGlobalVariableExpression(var: !2091, expr: !DIExpression())
!2091 = distinct !DIGlobalVariable(name: "nslots", scope: !2064, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2092 = !DIGlobalVariableExpression(var: !2093, expr: !DIExpression())
!2093 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2064, file: !105, line: 844, type: !2086, isLocal: true, isDefinition: true)
!2094 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2060, file: !105, line: 406, type: !41)
!2095 = distinct !DISubprogram(name: "gettext_quote", scope: !105, file: !105, line: 207, type: !2096, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2096 = !DISubroutineType(types: !2097)
!2097 = !{!23, !23, !82}
!2098 = !DILocalVariable(name: "msgid", arg: 1, scope: !2095, file: !105, line: 207, type: !23)
!2099 = !DILocation(line: 207, column: 28, scope: !2095)
!2100 = !DILocalVariable(name: "s", arg: 2, scope: !2095, file: !105, line: 207, type: !82)
!2101 = !DILocation(line: 207, column: 54, scope: !2095)
!2102 = !DILocalVariable(name: "translation", scope: !2095, file: !105, line: 209, type: !23)
!2103 = !DILocation(line: 209, column: 15, scope: !2095)
!2104 = !DILocation(line: 209, column: 29, scope: !2095)
!2105 = !DILocalVariable(name: "locale_code", scope: !2095, file: !105, line: 210, type: !23)
!2106 = !DILocation(line: 210, column: 15, scope: !2095)
!2107 = !DILocation(line: 212, column: 7, scope: !2108)
!2108 = distinct !DILexicalBlock(scope: !2095, file: !105, line: 212, column: 7)
!2109 = !DILocation(line: 212, column: 22, scope: !2108)
!2110 = !DILocation(line: 212, column: 19, scope: !2108)
!2111 = !DILocation(line: 212, column: 7, scope: !2095)
!2112 = !DILocation(line: 213, column: 12, scope: !2108)
!2113 = !DILocation(line: 213, column: 5, scope: !2108)
!2114 = !DILocation(line: 233, column: 17, scope: !2095)
!2115 = !DILocation(line: 233, column: 15, scope: !2095)
!2116 = !DILocation(line: 234, column: 7, scope: !2117)
!2117 = distinct !DILexicalBlock(scope: !2095, file: !105, line: 234, column: 7)
!2118 = !DILocation(line: 234, column: 7, scope: !2095)
!2119 = !DILocation(line: 235, column: 12, scope: !2117)
!2120 = !DILocation(line: 235, column: 21, scope: !2117)
!2121 = !DILocation(line: 235, column: 5, scope: !2117)
!2122 = !DILocation(line: 236, column: 7, scope: !2123)
!2123 = distinct !DILexicalBlock(scope: !2095, file: !105, line: 236, column: 7)
!2124 = !DILocation(line: 236, column: 7, scope: !2095)
!2125 = !DILocation(line: 237, column: 12, scope: !2123)
!2126 = !DILocation(line: 237, column: 21, scope: !2123)
!2127 = !DILocation(line: 237, column: 5, scope: !2123)
!2128 = !DILocation(line: 239, column: 11, scope: !2095)
!2129 = !DILocation(line: 239, column: 13, scope: !2095)
!2130 = !DILocation(line: 239, column: 3, scope: !2095)
!2131 = !DILocation(line: 240, column: 1, scope: !2095)
!2132 = !DILocalVariable(name: "msgid", arg: 1, scope: !2133, file: !105, line: 207, type: !23)
!2133 = distinct !DISubprogram(name: "gettext_quote", scope: !105, file: !105, line: 207, type: !2096, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2134, retainedNodes: !11)
!2134 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2135, nameTableKind: None)
!2135 = !{!2136, !2138, !2140, !2149, !2151, !2153, !2160, !2162}
!2136 = !DIGlobalVariableExpression(var: !2137, expr: !DIExpression())
!2137 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2134, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2138 = !DIGlobalVariableExpression(var: !2139, expr: !DIExpression())
!2139 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2134, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2140 = !DIGlobalVariableExpression(var: !2141, expr: !DIExpression())
!2141 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2134, file: !105, line: 1052, type: !2142, isLocal: false, isDefinition: true)
!2142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2143)
!2143 = !{!2144, !2145, !2146, !2147, !2148}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2142, file: !105, line: 68, baseType: !82, size: 32)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2142, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2142, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2142, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2142, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2149 = !DIGlobalVariableExpression(var: !2150, expr: !DIExpression())
!2150 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2134, file: !105, line: 116, type: !2142, isLocal: true, isDefinition: true)
!2151 = !DIGlobalVariableExpression(var: !2152, expr: !DIExpression())
!2152 = distinct !DIGlobalVariable(name: "slot0", scope: !2134, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2153 = !DIGlobalVariableExpression(var: !2154, expr: !DIExpression())
!2154 = distinct !DIGlobalVariable(name: "slotvec", scope: !2134, file: !105, line: 845, type: !2155, isLocal: true, isDefinition: true)
!2155 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2156, size: 64)
!2156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2157)
!2157 = !{!2158, !2159}
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2156, file: !105, line: 836, baseType: !99, size: 64)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2156, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2160 = !DIGlobalVariableExpression(var: !2161, expr: !DIExpression())
!2161 = distinct !DIGlobalVariable(name: "nslots", scope: !2134, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2162 = !DIGlobalVariableExpression(var: !2163, expr: !DIExpression())
!2163 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2134, file: !105, line: 844, type: !2156, isLocal: true, isDefinition: true)
!2164 = !DILocalVariable(name: "s", arg: 2, scope: !2133, file: !105, line: 207, type: !82)
!2165 = !DILocalVariable(name: "translation", scope: !2133, file: !105, line: 209, type: !23)
!2166 = !DILocalVariable(name: "locale_code", scope: !2133, file: !105, line: 210, type: !23)
!2167 = distinct !DISubprogram(name: "quotearg_char", scope: !105, file: !105, line: 991, type: !2168, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2168 = !DISubroutineType(types: !2169)
!2169 = !{!8, !23, !9}
!2170 = !DILocalVariable(name: "arg", arg: 1, scope: !2167, file: !105, line: 991, type: !23)
!2171 = !DILocation(line: 991, column: 28, scope: !2167)
!2172 = !DILocalVariable(name: "ch", arg: 2, scope: !2167, file: !105, line: 991, type: !9)
!2173 = !DILocation(line: 991, column: 38, scope: !2167)
!2174 = !DILocation(line: 993, column: 29, scope: !2167)
!2175 = !DILocation(line: 993, column: 44, scope: !2167)
!2176 = !DILocation(line: 993, column: 10, scope: !2167)
!2177 = !DILocation(line: 993, column: 3, scope: !2167)
!2178 = !DILocalVariable(name: "arg", arg: 1, scope: !2179, file: !105, line: 991, type: !23)
!2179 = distinct !DISubprogram(name: "quotearg_char", scope: !105, file: !105, line: 991, type: !2168, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2180, retainedNodes: !11)
!2180 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2181, nameTableKind: None)
!2181 = !{!2182, !2184, !2186, !2195, !2197, !2199, !2206, !2208}
!2182 = !DIGlobalVariableExpression(var: !2183, expr: !DIExpression())
!2183 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2180, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2184 = !DIGlobalVariableExpression(var: !2185, expr: !DIExpression())
!2185 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2180, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2186 = !DIGlobalVariableExpression(var: !2187, expr: !DIExpression())
!2187 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2180, file: !105, line: 1052, type: !2188, isLocal: false, isDefinition: true)
!2188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2189)
!2189 = !{!2190, !2191, !2192, !2193, !2194}
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2188, file: !105, line: 68, baseType: !82, size: 32)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2188, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2188, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2188, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2188, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2195 = !DIGlobalVariableExpression(var: !2196, expr: !DIExpression())
!2196 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2180, file: !105, line: 116, type: !2188, isLocal: true, isDefinition: true)
!2197 = !DIGlobalVariableExpression(var: !2198, expr: !DIExpression())
!2198 = distinct !DIGlobalVariable(name: "slot0", scope: !2180, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2199 = !DIGlobalVariableExpression(var: !2200, expr: !DIExpression())
!2200 = distinct !DIGlobalVariable(name: "slotvec", scope: !2180, file: !105, line: 845, type: !2201, isLocal: true, isDefinition: true)
!2201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2202, size: 64)
!2202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2203)
!2203 = !{!2204, !2205}
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2202, file: !105, line: 836, baseType: !99, size: 64)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2202, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2206 = !DIGlobalVariableExpression(var: !2207, expr: !DIExpression())
!2207 = distinct !DIGlobalVariable(name: "nslots", scope: !2180, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2208 = !DIGlobalVariableExpression(var: !2209, expr: !DIExpression())
!2209 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2180, file: !105, line: 844, type: !2202, isLocal: true, isDefinition: true)
!2210 = !DILocalVariable(name: "ch", arg: 2, scope: !2179, file: !105, line: 991, type: !9)
!2211 = distinct !DISubprogram(name: "quotearg_colon", scope: !105, file: !105, line: 997, type: !2212, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2212 = !DISubroutineType(types: !2213)
!2213 = !{!8, !23}
!2214 = !DILocalVariable(name: "arg", arg: 1, scope: !2211, file: !105, line: 997, type: !23)
!2215 = !DILocation(line: 997, column: 29, scope: !2211)
!2216 = !DILocation(line: 999, column: 25, scope: !2211)
!2217 = !DILocation(line: 999, column: 10, scope: !2211)
!2218 = !DILocation(line: 999, column: 3, scope: !2211)
!2219 = !DILocalVariable(name: "arg", arg: 1, scope: !2220, file: !105, line: 997, type: !23)
!2220 = distinct !DISubprogram(name: "quotearg_colon", scope: !105, file: !105, line: 997, type: !2212, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2221, retainedNodes: !11)
!2221 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2222, nameTableKind: None)
!2222 = !{!2223, !2225, !2227, !2236, !2238, !2240, !2247, !2249}
!2223 = !DIGlobalVariableExpression(var: !2224, expr: !DIExpression())
!2224 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2221, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2225 = !DIGlobalVariableExpression(var: !2226, expr: !DIExpression())
!2226 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2221, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2227 = !DIGlobalVariableExpression(var: !2228, expr: !DIExpression())
!2228 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2221, file: !105, line: 1052, type: !2229, isLocal: false, isDefinition: true)
!2229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2230)
!2230 = !{!2231, !2232, !2233, !2234, !2235}
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2229, file: !105, line: 68, baseType: !82, size: 32)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2229, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2229, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2229, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2229, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2236 = !DIGlobalVariableExpression(var: !2237, expr: !DIExpression())
!2237 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2221, file: !105, line: 116, type: !2229, isLocal: true, isDefinition: true)
!2238 = !DIGlobalVariableExpression(var: !2239, expr: !DIExpression())
!2239 = distinct !DIGlobalVariable(name: "slot0", scope: !2221, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2240 = !DIGlobalVariableExpression(var: !2241, expr: !DIExpression())
!2241 = distinct !DIGlobalVariable(name: "slotvec", scope: !2221, file: !105, line: 845, type: !2242, isLocal: true, isDefinition: true)
!2242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2243, size: 64)
!2243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2244)
!2244 = !{!2245, !2246}
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2243, file: !105, line: 836, baseType: !99, size: 64)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2243, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2247 = !DIGlobalVariableExpression(var: !2248, expr: !DIExpression())
!2248 = distinct !DIGlobalVariable(name: "nslots", scope: !2221, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2249 = !DIGlobalVariableExpression(var: !2250, expr: !DIExpression())
!2250 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2221, file: !105, line: 844, type: !2243, isLocal: true, isDefinition: true)
!2251 = distinct !DISubprogram(name: "quote_n_mem", scope: !105, file: !105, line: 1061, type: !2252, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2252 = !DISubroutineType(types: !2253)
!2253 = !{!23, !6, !23, !99}
!2254 = !DILocalVariable(name: "n", arg: 1, scope: !2251, file: !105, line: 1061, type: !6)
!2255 = !DILocation(line: 1061, column: 18, scope: !2251)
!2256 = !DILocalVariable(name: "arg", arg: 2, scope: !2251, file: !105, line: 1061, type: !23)
!2257 = !DILocation(line: 1061, column: 33, scope: !2251)
!2258 = !DILocalVariable(name: "argsize", arg: 3, scope: !2251, file: !105, line: 1061, type: !99)
!2259 = !DILocation(line: 1061, column: 45, scope: !2251)
!2260 = !DILocation(line: 1063, column: 30, scope: !2251)
!2261 = !DILocation(line: 1063, column: 33, scope: !2251)
!2262 = !DILocation(line: 1063, column: 38, scope: !2251)
!2263 = !DILocation(line: 1063, column: 10, scope: !2251)
!2264 = !DILocation(line: 1063, column: 3, scope: !2251)
!2265 = !DILocalVariable(name: "n", arg: 1, scope: !2266, file: !105, line: 1061, type: !6)
!2266 = distinct !DISubprogram(name: "quote_n_mem", scope: !105, file: !105, line: 1061, type: !2252, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2267, retainedNodes: !11)
!2267 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2268, nameTableKind: None)
!2268 = !{!2269, !2271, !2273, !2282, !2284, !2286, !2293, !2295}
!2269 = !DIGlobalVariableExpression(var: !2270, expr: !DIExpression())
!2270 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2267, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2271 = !DIGlobalVariableExpression(var: !2272, expr: !DIExpression())
!2272 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2267, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2273 = !DIGlobalVariableExpression(var: !2274, expr: !DIExpression())
!2274 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2267, file: !105, line: 1052, type: !2275, isLocal: false, isDefinition: true)
!2275 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2276)
!2276 = !{!2277, !2278, !2279, !2280, !2281}
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2275, file: !105, line: 68, baseType: !82, size: 32)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2275, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2275, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2275, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2275, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2282 = !DIGlobalVariableExpression(var: !2283, expr: !DIExpression())
!2283 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2267, file: !105, line: 116, type: !2275, isLocal: true, isDefinition: true)
!2284 = !DIGlobalVariableExpression(var: !2285, expr: !DIExpression())
!2285 = distinct !DIGlobalVariable(name: "slot0", scope: !2267, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2286 = !DIGlobalVariableExpression(var: !2287, expr: !DIExpression())
!2287 = distinct !DIGlobalVariable(name: "slotvec", scope: !2267, file: !105, line: 845, type: !2288, isLocal: true, isDefinition: true)
!2288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2289, size: 64)
!2289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2290)
!2290 = !{!2291, !2292}
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2289, file: !105, line: 836, baseType: !99, size: 64)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2289, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2293 = !DIGlobalVariableExpression(var: !2294, expr: !DIExpression())
!2294 = distinct !DIGlobalVariable(name: "nslots", scope: !2267, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2295 = !DIGlobalVariableExpression(var: !2296, expr: !DIExpression())
!2296 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2267, file: !105, line: 844, type: !2289, isLocal: true, isDefinition: true)
!2297 = !DILocalVariable(name: "arg", arg: 2, scope: !2266, file: !105, line: 1061, type: !23)
!2298 = !DILocalVariable(name: "argsize", arg: 3, scope: !2266, file: !105, line: 1061, type: !99)
!2299 = distinct !DISubprogram(name: "quote_n", scope: !105, file: !105, line: 1073, type: !2300, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2300 = !DISubroutineType(types: !2301)
!2301 = !{!23, !6, !23}
!2302 = !DILocalVariable(name: "n", arg: 1, scope: !2299, file: !105, line: 1073, type: !6)
!2303 = !DILocation(line: 1073, column: 14, scope: !2299)
!2304 = !DILocalVariable(name: "arg", arg: 2, scope: !2299, file: !105, line: 1073, type: !23)
!2305 = !DILocation(line: 1073, column: 29, scope: !2299)
!2306 = !DILocation(line: 1075, column: 23, scope: !2299)
!2307 = !DILocation(line: 1075, column: 26, scope: !2299)
!2308 = !DILocation(line: 1075, column: 10, scope: !2299)
!2309 = !DILocation(line: 1075, column: 3, scope: !2299)
!2310 = distinct !DISubprogram(name: "quote", scope: !105, file: !105, line: 1079, type: !2311, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2311 = !DISubroutineType(types: !2312)
!2312 = !{!23, !23}
!2313 = !DILocalVariable(name: "arg", arg: 1, scope: !2310, file: !105, line: 1079, type: !23)
!2314 = !DILocation(line: 1079, column: 20, scope: !2310)
!2315 = !DILocation(line: 1081, column: 22, scope: !2310)
!2316 = !DILocation(line: 1081, column: 10, scope: !2310)
!2317 = !DILocation(line: 1081, column: 3, scope: !2310)
!2318 = !DILocalVariable(name: "arg", arg: 1, scope: !2319, file: !105, line: 1079, type: !23)
!2319 = distinct !DISubprogram(name: "quote", scope: !105, file: !105, line: 1079, type: !2311, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2320, retainedNodes: !11)
!2320 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2321, nameTableKind: None)
!2321 = !{!2322, !2324, !2326, !2335, !2337, !2339, !2346, !2348}
!2322 = !DIGlobalVariableExpression(var: !2323, expr: !DIExpression())
!2323 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2320, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2324 = !DIGlobalVariableExpression(var: !2325, expr: !DIExpression())
!2325 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2320, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2326 = !DIGlobalVariableExpression(var: !2327, expr: !DIExpression())
!2327 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2320, file: !105, line: 1052, type: !2328, isLocal: false, isDefinition: true)
!2328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2329)
!2329 = !{!2330, !2331, !2332, !2333, !2334}
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2328, file: !105, line: 68, baseType: !82, size: 32)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2328, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2328, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2328, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2328, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2335 = !DIGlobalVariableExpression(var: !2336, expr: !DIExpression())
!2336 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2320, file: !105, line: 116, type: !2328, isLocal: true, isDefinition: true)
!2337 = !DIGlobalVariableExpression(var: !2338, expr: !DIExpression())
!2338 = distinct !DIGlobalVariable(name: "slot0", scope: !2320, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2339 = !DIGlobalVariableExpression(var: !2340, expr: !DIExpression())
!2340 = distinct !DIGlobalVariable(name: "slotvec", scope: !2320, file: !105, line: 845, type: !2341, isLocal: true, isDefinition: true)
!2341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2342, size: 64)
!2342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2343)
!2343 = !{!2344, !2345}
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2342, file: !105, line: 836, baseType: !99, size: 64)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2342, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2346 = !DIGlobalVariableExpression(var: !2347, expr: !DIExpression())
!2347 = distinct !DIGlobalVariable(name: "nslots", scope: !2320, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2348 = !DIGlobalVariableExpression(var: !2349, expr: !DIExpression())
!2349 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2320, file: !105, line: 844, type: !2342, isLocal: true, isDefinition: true)
!2350 = distinct !DISubprogram(name: "version_etc_arn", scope: !2351, file: !2351, line: 61, type: !2352, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2351 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2352 = !DISubroutineType(types: !2353)
!2353 = !{null, !2354, !23, !23, !23, !2409, !99}
!2354 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2355, size: 64)
!2355 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !2357)
!2356 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !2359)
!2358 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2359 = !{!2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2375, !2377, !2378, !2379, !2383, !2384, !2386, !2390, !2393, !2395, !2398, !2401, !2402, !2403, !2404, !2405}
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2357, file: !2358, line: 51, baseType: !6, size: 32)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2357, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2357, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2357, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2357, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2357, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2357, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2357, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2357, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2357, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2357, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2357, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2357, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!2373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2374, size: 64)
!2374 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2358, line: 36, flags: DIFlagFwdDecl)
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2357, file: !2358, line: 70, baseType: !2376, size: 64, offset: 832)
!2376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2357, size: 64)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2357, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2357, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2357, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!2380 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2381, line: 152, baseType: !2382)
!2381 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2382 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2357, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2357, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!2385 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2357, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!2387 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 8, elements: !2388)
!2388 = !{!2389}
!2389 = !DISubrange(count: 1)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2357, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!2391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2392, size: 64)
!2392 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2358, line: 43, baseType: null)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2357, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!2394 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2381, line: 153, baseType: !2382)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2357, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!2396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2397, size: 64)
!2397 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2358, line: 37, flags: DIFlagFwdDecl)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2357, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!2399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2400, size: 64)
!2400 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2358, line: 38, flags: DIFlagFwdDecl)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2357, file: !2358, line: 93, baseType: !2376, size: 64, offset: 1344)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2357, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2357, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2357, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2357, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!2406 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 160, elements: !2407)
!2407 = !{!2408}
!2408 = !DISubrange(count: 20)
!2409 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!2410 = !DILocalVariable(name: "stream", arg: 1, scope: !2350, file: !2351, line: 61, type: !2354)
!2411 = !DILocation(line: 61, column: 24, scope: !2350)
!2412 = !DILocalVariable(name: "command_name", arg: 2, scope: !2350, file: !2351, line: 62, type: !23)
!2413 = !DILocation(line: 62, column: 30, scope: !2350)
!2414 = !DILocalVariable(name: "package", arg: 3, scope: !2350, file: !2351, line: 62, type: !23)
!2415 = !DILocation(line: 62, column: 56, scope: !2350)
!2416 = !DILocalVariable(name: "version", arg: 4, scope: !2350, file: !2351, line: 63, type: !23)
!2417 = !DILocation(line: 63, column: 30, scope: !2350)
!2418 = !DILocalVariable(name: "authors", arg: 5, scope: !2350, file: !2351, line: 64, type: !2409)
!2419 = !DILocation(line: 64, column: 39, scope: !2350)
!2420 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2350, file: !2351, line: 64, type: !99)
!2421 = !DILocation(line: 64, column: 55, scope: !2350)
!2422 = !DILocation(line: 66, column: 7, scope: !2423)
!2423 = distinct !DILexicalBlock(scope: !2350, file: !2351, line: 66, column: 7)
!2424 = !DILocation(line: 66, column: 7, scope: !2350)
!2425 = !DILocation(line: 67, column: 14, scope: !2423)
!2426 = !DILocation(line: 67, column: 38, scope: !2423)
!2427 = !DILocation(line: 67, column: 52, scope: !2423)
!2428 = !DILocation(line: 67, column: 61, scope: !2423)
!2429 = !DILocation(line: 67, column: 5, scope: !2423)
!2430 = !DILocation(line: 69, column: 14, scope: !2423)
!2431 = !DILocation(line: 69, column: 33, scope: !2423)
!2432 = !DILocation(line: 69, column: 42, scope: !2423)
!2433 = !DILocation(line: 69, column: 5, scope: !2423)
!2434 = !DILocation(line: 83, column: 12, scope: !2350)
!2435 = !DILocation(line: 83, column: 43, scope: !2350)
!2436 = !DILocation(line: 83, column: 3, scope: !2350)
!2437 = !DILocation(line: 85, column: 3, scope: !2350)
!2438 = !DILocation(line: 88, column: 12, scope: !2350)
!2439 = !DILocation(line: 88, column: 20, scope: !2350)
!2440 = !DILocation(line: 88, column: 3, scope: !2350)
!2441 = !DILocation(line: 95, column: 3, scope: !2350)
!2442 = !DILocation(line: 97, column: 11, scope: !2350)
!2443 = !DILocation(line: 97, column: 3, scope: !2350)
!2444 = !DILocation(line: 102, column: 7, scope: !2445)
!2445 = distinct !DILexicalBlock(scope: !2350, file: !2351, line: 98, column: 5)
!2446 = !DILocation(line: 105, column: 16, scope: !2445)
!2447 = !DILocation(line: 105, column: 24, scope: !2445)
!2448 = !DILocation(line: 105, column: 47, scope: !2445)
!2449 = !DILocation(line: 105, column: 7, scope: !2445)
!2450 = !DILocation(line: 106, column: 7, scope: !2445)
!2451 = !DILocation(line: 109, column: 16, scope: !2445)
!2452 = !DILocation(line: 109, column: 24, scope: !2445)
!2453 = !DILocation(line: 109, column: 54, scope: !2445)
!2454 = !DILocation(line: 109, column: 66, scope: !2445)
!2455 = !DILocation(line: 109, column: 7, scope: !2445)
!2456 = !DILocation(line: 110, column: 7, scope: !2445)
!2457 = !DILocation(line: 113, column: 16, scope: !2445)
!2458 = !DILocation(line: 113, column: 24, scope: !2445)
!2459 = !DILocation(line: 114, column: 16, scope: !2445)
!2460 = !DILocation(line: 114, column: 28, scope: !2445)
!2461 = !DILocation(line: 114, column: 40, scope: !2445)
!2462 = !DILocation(line: 113, column: 7, scope: !2445)
!2463 = !DILocation(line: 115, column: 7, scope: !2445)
!2464 = !DILocation(line: 120, column: 16, scope: !2445)
!2465 = !DILocation(line: 120, column: 24, scope: !2445)
!2466 = !DILocation(line: 121, column: 16, scope: !2445)
!2467 = !DILocation(line: 121, column: 28, scope: !2445)
!2468 = !DILocation(line: 121, column: 40, scope: !2445)
!2469 = !DILocation(line: 121, column: 52, scope: !2445)
!2470 = !DILocation(line: 120, column: 7, scope: !2445)
!2471 = !DILocation(line: 122, column: 7, scope: !2445)
!2472 = !DILocation(line: 127, column: 16, scope: !2445)
!2473 = !DILocation(line: 127, column: 24, scope: !2445)
!2474 = !DILocation(line: 128, column: 16, scope: !2445)
!2475 = !DILocation(line: 128, column: 28, scope: !2445)
!2476 = !DILocation(line: 128, column: 40, scope: !2445)
!2477 = !DILocation(line: 128, column: 52, scope: !2445)
!2478 = !DILocation(line: 128, column: 64, scope: !2445)
!2479 = !DILocation(line: 127, column: 7, scope: !2445)
!2480 = !DILocation(line: 129, column: 7, scope: !2445)
!2481 = !DILocation(line: 134, column: 16, scope: !2445)
!2482 = !DILocation(line: 134, column: 24, scope: !2445)
!2483 = !DILocation(line: 135, column: 16, scope: !2445)
!2484 = !DILocation(line: 135, column: 28, scope: !2445)
!2485 = !DILocation(line: 135, column: 40, scope: !2445)
!2486 = !DILocation(line: 135, column: 52, scope: !2445)
!2487 = !DILocation(line: 135, column: 64, scope: !2445)
!2488 = !DILocation(line: 136, column: 16, scope: !2445)
!2489 = !DILocation(line: 134, column: 7, scope: !2445)
!2490 = !DILocation(line: 137, column: 7, scope: !2445)
!2491 = !DILocation(line: 142, column: 16, scope: !2445)
!2492 = !DILocation(line: 142, column: 24, scope: !2445)
!2493 = !DILocation(line: 143, column: 16, scope: !2445)
!2494 = !DILocation(line: 143, column: 28, scope: !2445)
!2495 = !DILocation(line: 143, column: 40, scope: !2445)
!2496 = !DILocation(line: 143, column: 52, scope: !2445)
!2497 = !DILocation(line: 143, column: 64, scope: !2445)
!2498 = !DILocation(line: 144, column: 16, scope: !2445)
!2499 = !DILocation(line: 144, column: 28, scope: !2445)
!2500 = !DILocation(line: 142, column: 7, scope: !2445)
!2501 = !DILocation(line: 145, column: 7, scope: !2445)
!2502 = !DILocation(line: 150, column: 16, scope: !2445)
!2503 = !DILocation(line: 150, column: 24, scope: !2445)
!2504 = !DILocation(line: 152, column: 17, scope: !2445)
!2505 = !DILocation(line: 152, column: 29, scope: !2445)
!2506 = !DILocation(line: 152, column: 41, scope: !2445)
!2507 = !DILocation(line: 152, column: 53, scope: !2445)
!2508 = !DILocation(line: 152, column: 65, scope: !2445)
!2509 = !DILocation(line: 153, column: 17, scope: !2445)
!2510 = !DILocation(line: 153, column: 29, scope: !2445)
!2511 = !DILocation(line: 153, column: 41, scope: !2445)
!2512 = !DILocation(line: 150, column: 7, scope: !2445)
!2513 = !DILocation(line: 154, column: 7, scope: !2445)
!2514 = !DILocation(line: 159, column: 16, scope: !2445)
!2515 = !DILocation(line: 159, column: 24, scope: !2445)
!2516 = !DILocation(line: 161, column: 16, scope: !2445)
!2517 = !DILocation(line: 161, column: 28, scope: !2445)
!2518 = !DILocation(line: 161, column: 40, scope: !2445)
!2519 = !DILocation(line: 161, column: 52, scope: !2445)
!2520 = !DILocation(line: 161, column: 64, scope: !2445)
!2521 = !DILocation(line: 162, column: 16, scope: !2445)
!2522 = !DILocation(line: 162, column: 28, scope: !2445)
!2523 = !DILocation(line: 162, column: 40, scope: !2445)
!2524 = !DILocation(line: 162, column: 52, scope: !2445)
!2525 = !DILocation(line: 159, column: 7, scope: !2445)
!2526 = !DILocation(line: 163, column: 7, scope: !2445)
!2527 = !DILocation(line: 170, column: 16, scope: !2445)
!2528 = !DILocation(line: 170, column: 24, scope: !2445)
!2529 = !DILocation(line: 172, column: 17, scope: !2445)
!2530 = !DILocation(line: 172, column: 29, scope: !2445)
!2531 = !DILocation(line: 172, column: 41, scope: !2445)
!2532 = !DILocation(line: 172, column: 53, scope: !2445)
!2533 = !DILocation(line: 172, column: 65, scope: !2445)
!2534 = !DILocation(line: 173, column: 17, scope: !2445)
!2535 = !DILocation(line: 173, column: 29, scope: !2445)
!2536 = !DILocation(line: 173, column: 41, scope: !2445)
!2537 = !DILocation(line: 173, column: 53, scope: !2445)
!2538 = !DILocation(line: 170, column: 7, scope: !2445)
!2539 = !DILocation(line: 174, column: 7, scope: !2445)
!2540 = !DILocation(line: 176, column: 1, scope: !2350)
!2541 = !DILocalVariable(name: "stream", arg: 1, scope: !2542, file: !2351, line: 61, type: !2545)
!2542 = distinct !DISubprogram(name: "version_etc_arn", scope: !2351, file: !2351, line: 61, type: !2543, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2579, retainedNodes: !11)
!2543 = !DISubroutineType(types: !2544)
!2544 = !{null, !2545, !23, !23, !23, !2409, !99}
!2545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2546, size: 64)
!2546 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !2547)
!2547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !2548)
!2548 = !{!2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578}
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2547, file: !2358, line: 51, baseType: !6, size: 32)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2547, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2547, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2547, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2547, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2547, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2547, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2547, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2547, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2547, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2547, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2547, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2547, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2547, file: !2358, line: 70, baseType: !2563, size: 64, offset: 832)
!2563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2547, size: 64)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2547, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2547, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2547, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2547, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2547, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2547, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2547, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2547, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2547, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2547, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2547, file: !2358, line: 93, baseType: !2563, size: 64, offset: 1344)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2547, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2547, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2547, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2547, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!2579 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2580 = !DILocalVariable(name: "command_name", arg: 2, scope: !2542, file: !2351, line: 62, type: !23)
!2581 = !DILocalVariable(name: "package", arg: 3, scope: !2542, file: !2351, line: 62, type: !23)
!2582 = !DILocalVariable(name: "version", arg: 4, scope: !2542, file: !2351, line: 63, type: !23)
!2583 = !DILocalVariable(name: "authors", arg: 5, scope: !2542, file: !2351, line: 64, type: !2409)
!2584 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2542, file: !2351, line: 64, type: !99)
!2585 = distinct !DISubprogram(name: "version_etc_va", scope: !2351, file: !2351, line: 199, type: !2586, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2586 = !DISubroutineType(types: !2587)
!2587 = !{null, !2354, !23, !23, !23, !2588}
!2588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2589, size: 64)
!2589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2590)
!2590 = !{!2591, !2592, !2593, !2594}
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2589, file: !152, line: 192, baseType: !84, size: 32)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2589, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2589, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2589, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2595 = !DILocalVariable(name: "stream", arg: 1, scope: !2585, file: !2351, line: 199, type: !2354)
!2596 = !DILocation(line: 199, column: 23, scope: !2585)
!2597 = !DILocalVariable(name: "command_name", arg: 2, scope: !2585, file: !2351, line: 200, type: !23)
!2598 = !DILocation(line: 200, column: 29, scope: !2585)
!2599 = !DILocalVariable(name: "package", arg: 3, scope: !2585, file: !2351, line: 200, type: !23)
!2600 = !DILocation(line: 200, column: 55, scope: !2585)
!2601 = !DILocalVariable(name: "version", arg: 4, scope: !2585, file: !2351, line: 201, type: !23)
!2602 = !DILocation(line: 201, column: 29, scope: !2585)
!2603 = !DILocalVariable(name: "authors", arg: 5, scope: !2585, file: !2351, line: 201, type: !2588)
!2604 = !DILocation(line: 201, column: 46, scope: !2585)
!2605 = !DILocalVariable(name: "n_authors", scope: !2585, file: !2351, line: 203, type: !99)
!2606 = !DILocation(line: 203, column: 10, scope: !2585)
!2607 = !DILocalVariable(name: "authtab", scope: !2585, file: !2351, line: 204, type: !2608)
!2608 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 640, elements: !114)
!2609 = !DILocation(line: 204, column: 15, scope: !2585)
!2610 = !DILocation(line: 206, column: 18, scope: !2611)
!2611 = distinct !DILexicalBlock(scope: !2585, file: !2351, line: 206, column: 3)
!2612 = !DILocation(line: 206, column: 8, scope: !2611)
!2613 = !DILocation(line: 207, column: 8, scope: !2614)
!2614 = distinct !DILexicalBlock(scope: !2611, file: !2351, line: 206, column: 3)
!2615 = !DILocation(line: 207, column: 18, scope: !2614)
!2616 = !DILocation(line: 208, column: 10, scope: !2614)
!2617 = !DILocation(line: 208, column: 35, scope: !2614)
!2618 = !DILocation(line: 208, column: 22, scope: !2614)
!2619 = !DILocation(line: 208, column: 14, scope: !2614)
!2620 = !DILocation(line: 208, column: 33, scope: !2614)
!2621 = !DILocation(line: 208, column: 67, scope: !2614)
!2622 = !DILocation(line: 0, scope: !2614)
!2623 = !DILocation(line: 206, column: 3, scope: !2611)
!2624 = !DILocation(line: 209, column: 17, scope: !2614)
!2625 = !DILocation(line: 206, column: 3, scope: !2614)
!2626 = distinct !{!2626, !2623, !2627}
!2627 = !DILocation(line: 210, column: 5, scope: !2611)
!2628 = !DILocation(line: 211, column: 20, scope: !2585)
!2629 = !DILocation(line: 211, column: 28, scope: !2585)
!2630 = !DILocation(line: 211, column: 42, scope: !2585)
!2631 = !DILocation(line: 211, column: 51, scope: !2585)
!2632 = !DILocation(line: 212, column: 20, scope: !2585)
!2633 = !DILocation(line: 212, column: 29, scope: !2585)
!2634 = !DILocation(line: 211, column: 3, scope: !2585)
!2635 = !DILocation(line: 213, column: 1, scope: !2585)
!2636 = !DILocalVariable(name: "stream", arg: 1, scope: !2637, file: !2351, line: 199, type: !2640)
!2637 = distinct !DISubprogram(name: "version_etc_va", scope: !2351, file: !2351, line: 199, type: !2638, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2681, retainedNodes: !11)
!2638 = !DISubroutineType(types: !2639)
!2639 = !{null, !2640, !23, !23, !23, !2674}
!2640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2641, size: 64)
!2641 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !2642)
!2642 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !2643)
!2643 = !{!2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673}
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2642, file: !2358, line: 51, baseType: !6, size: 32)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2642, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2642, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2642, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2642, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2642, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2642, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2642, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2642, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2642, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2642, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2642, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2642, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2642, file: !2358, line: 70, baseType: !2658, size: 64, offset: 832)
!2658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2642, size: 64)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2642, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2642, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2642, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2642, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2642, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2642, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2642, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2642, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2642, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2642, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2642, file: !2358, line: 93, baseType: !2658, size: 64, offset: 1344)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2642, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2642, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2642, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2642, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!2674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2675, size: 64)
!2675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2676)
!2676 = !{!2677, !2678, !2679, !2680}
!2677 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2675, file: !152, line: 192, baseType: !84, size: 32)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2675, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2675, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2675, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2681 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2682 = !DILocalVariable(name: "command_name", arg: 2, scope: !2637, file: !2351, line: 200, type: !23)
!2683 = !DILocalVariable(name: "package", arg: 3, scope: !2637, file: !2351, line: 200, type: !23)
!2684 = !DILocalVariable(name: "version", arg: 4, scope: !2637, file: !2351, line: 201, type: !23)
!2685 = !DILocalVariable(name: "authors", arg: 5, scope: !2637, file: !2351, line: 201, type: !2674)
!2686 = !DILocalVariable(name: "n_authors", scope: !2637, file: !2351, line: 203, type: !99)
!2687 = !DILocalVariable(name: "authtab", scope: !2637, file: !2351, line: 204, type: !2608)
!2688 = distinct !DISubprogram(name: "version_etc", scope: !2351, file: !2351, line: 230, type: !2689, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2689 = !DISubroutineType(types: !2690)
!2690 = !{null, !2354, !23, !23, !23, null}
!2691 = !DILocalVariable(name: "stream", arg: 1, scope: !2688, file: !2351, line: 230, type: !2354)
!2692 = !DILocation(line: 230, column: 20, scope: !2688)
!2693 = !DILocalVariable(name: "command_name", arg: 2, scope: !2688, file: !2351, line: 231, type: !23)
!2694 = !DILocation(line: 231, column: 26, scope: !2688)
!2695 = !DILocalVariable(name: "package", arg: 3, scope: !2688, file: !2351, line: 231, type: !23)
!2696 = !DILocation(line: 231, column: 52, scope: !2688)
!2697 = !DILocalVariable(name: "version", arg: 4, scope: !2688, file: !2351, line: 232, type: !23)
!2698 = !DILocation(line: 232, column: 26, scope: !2688)
!2699 = !DILocalVariable(name: "authors", scope: !2688, file: !2351, line: 234, type: !2700)
!2700 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2701, line: 52, baseType: !2702)
!2701 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!2702 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2703, line: 32, baseType: !2704)
!2703 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!2704 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !152, line: 234, baseType: !2705)
!2705 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2589, size: 192, elements: !2388)
!2706 = !DILocation(line: 234, column: 11, scope: !2688)
!2707 = !DILocation(line: 236, column: 3, scope: !2688)
!2708 = !DILocation(line: 237, column: 19, scope: !2688)
!2709 = !DILocation(line: 237, column: 27, scope: !2688)
!2710 = !DILocation(line: 237, column: 41, scope: !2688)
!2711 = !DILocation(line: 237, column: 50, scope: !2688)
!2712 = !DILocation(line: 237, column: 59, scope: !2688)
!2713 = !DILocation(line: 237, column: 3, scope: !2688)
!2714 = !DILocation(line: 238, column: 3, scope: !2688)
!2715 = !DILocation(line: 239, column: 1, scope: !2688)
!2716 = !DILocalVariable(name: "stream", arg: 1, scope: !2717, file: !2351, line: 230, type: !2720)
!2717 = distinct !DISubprogram(name: "version_etc", scope: !2351, file: !2351, line: 230, type: !2718, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2754, retainedNodes: !11)
!2718 = !DISubroutineType(types: !2719)
!2719 = !{null, !2720, !23, !23, !23, null}
!2720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2721, size: 64)
!2721 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !2722)
!2722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !2723)
!2723 = !{!2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753}
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2722, file: !2358, line: 51, baseType: !6, size: 32)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2722, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2722, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2722, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2722, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2722, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2722, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2722, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2722, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2722, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2722, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2722, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2722, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2722, file: !2358, line: 70, baseType: !2738, size: 64, offset: 832)
!2738 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2722, size: 64)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2722, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2722, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2722, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2722, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2722, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2722, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2722, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2722, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2722, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2722, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2722, file: !2358, line: 93, baseType: !2738, size: 64, offset: 1344)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2722, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2722, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2722, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2722, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!2754 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2755 = !DILocalVariable(name: "command_name", arg: 2, scope: !2717, file: !2351, line: 231, type: !23)
!2756 = !DILocalVariable(name: "package", arg: 3, scope: !2717, file: !2351, line: 231, type: !23)
!2757 = !DILocalVariable(name: "version", arg: 4, scope: !2717, file: !2351, line: 232, type: !23)
!2758 = !DILocalVariable(name: "authors", scope: !2717, file: !2351, line: 234, type: !2759)
!2759 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2701, line: 52, baseType: !2760)
!2760 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2703, line: 32, baseType: !2761)
!2761 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !152, line: 234, baseType: !2762)
!2762 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2763, size: 192, elements: !2388)
!2763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2764)
!2764 = !{!2765, !2766, !2767, !2768}
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2763, file: !152, line: 192, baseType: !84, size: 32)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2763, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2763, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2763, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2769 = distinct !DISubprogram(name: "xmalloc", scope: !2770, file: !2770, line: 39, type: !2771, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2770 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2771 = !DISubroutineType(types: !2772)
!2772 = !{!13, !99}
!2773 = !DILocalVariable(name: "n", arg: 1, scope: !2769, file: !2770, line: 39, type: !99)
!2774 = !DILocation(line: 39, column: 17, scope: !2769)
!2775 = !DILocalVariable(name: "p", scope: !2769, file: !2770, line: 41, type: !13)
!2776 = !DILocation(line: 41, column: 9, scope: !2769)
!2777 = !DILocation(line: 41, column: 21, scope: !2769)
!2778 = !DILocation(line: 41, column: 13, scope: !2769)
!2779 = !DILocation(line: 42, column: 8, scope: !2780)
!2780 = distinct !DILexicalBlock(scope: !2769, file: !2770, line: 42, column: 7)
!2781 = !DILocation(line: 42, column: 10, scope: !2780)
!2782 = !DILocation(line: 42, column: 13, scope: !2780)
!2783 = !DILocation(line: 42, column: 15, scope: !2780)
!2784 = !DILocation(line: 42, column: 7, scope: !2769)
!2785 = !DILocation(line: 43, column: 5, scope: !2780)
!2786 = !DILocation(line: 44, column: 10, scope: !2769)
!2787 = !DILocation(line: 44, column: 3, scope: !2769)
!2788 = !DILocalVariable(name: "n", arg: 1, scope: !2789, file: !2770, line: 39, type: !99)
!2789 = distinct !DISubprogram(name: "xmalloc", scope: !2770, file: !2770, line: 39, type: !2771, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2790, retainedNodes: !11)
!2790 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!2791 = !DILocalVariable(name: "p", scope: !2789, file: !2770, line: 41, type: !13)
!2792 = distinct !DISubprogram(name: "xrealloc", scope: !2770, file: !2770, line: 51, type: !2793, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2793 = !DISubroutineType(types: !2794)
!2794 = !{!13, !13, !99}
!2795 = !DILocalVariable(name: "p", arg: 1, scope: !2792, file: !2770, line: 51, type: !13)
!2796 = !DILocation(line: 51, column: 17, scope: !2792)
!2797 = !DILocalVariable(name: "n", arg: 2, scope: !2792, file: !2770, line: 51, type: !99)
!2798 = !DILocation(line: 51, column: 27, scope: !2792)
!2799 = !DILocation(line: 53, column: 8, scope: !2800)
!2800 = distinct !DILexicalBlock(scope: !2792, file: !2770, line: 53, column: 7)
!2801 = !DILocation(line: 53, column: 10, scope: !2800)
!2802 = !DILocation(line: 53, column: 13, scope: !2800)
!2803 = !DILocation(line: 53, column: 7, scope: !2792)
!2804 = !DILocation(line: 57, column: 13, scope: !2805)
!2805 = distinct !DILexicalBlock(scope: !2800, file: !2770, line: 54, column: 5)
!2806 = !DILocation(line: 57, column: 7, scope: !2805)
!2807 = !DILocation(line: 58, column: 7, scope: !2805)
!2808 = !DILocation(line: 61, column: 16, scope: !2792)
!2809 = !DILocation(line: 61, column: 19, scope: !2792)
!2810 = !DILocation(line: 61, column: 7, scope: !2792)
!2811 = !DILocation(line: 61, column: 5, scope: !2792)
!2812 = !DILocation(line: 62, column: 8, scope: !2813)
!2813 = distinct !DILexicalBlock(scope: !2792, file: !2770, line: 62, column: 7)
!2814 = !DILocation(line: 62, column: 10, scope: !2813)
!2815 = !DILocation(line: 62, column: 13, scope: !2813)
!2816 = !DILocation(line: 62, column: 7, scope: !2792)
!2817 = !DILocation(line: 63, column: 5, scope: !2813)
!2818 = !DILocation(line: 64, column: 10, scope: !2792)
!2819 = !DILocation(line: 64, column: 3, scope: !2792)
!2820 = !DILocation(line: 65, column: 1, scope: !2792)
!2821 = !DILocalVariable(name: "p", arg: 1, scope: !2822, file: !2770, line: 51, type: !13)
!2822 = distinct !DISubprogram(name: "xrealloc", scope: !2770, file: !2770, line: 51, type: !2793, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2823, retainedNodes: !11)
!2823 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!2824 = !DILocalVariable(name: "n", arg: 2, scope: !2822, file: !2770, line: 51, type: !99)
!2825 = distinct !DISubprogram(name: "xcharalloc", scope: !2826, file: !2826, line: 216, type: !2827, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2826 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2827 = !DISubroutineType(types: !2828)
!2828 = !{!8, !99}
!2829 = !DILocalVariable(name: "n", arg: 1, scope: !2825, file: !2826, line: 216, type: !99)
!2830 = !DILocation(line: 216, column: 20, scope: !2825)
!2831 = !DILocation(line: 218, column: 10, scope: !2825)
!2832 = !DILocation(line: 218, column: 3, scope: !2825)
!2833 = distinct !DISubprogram(name: "xalloc_die", scope: !2834, file: !2834, line: 32, type: !617, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !157, retainedNodes: !11)
!2834 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2835 = !DILocation(line: 34, column: 10, scope: !2833)
!2836 = !DILocation(line: 34, column: 33, scope: !2833)
!2837 = !DILocation(line: 34, column: 3, scope: !2833)
!2838 = !DILocation(line: 40, column: 3, scope: !2833)
!2839 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2840, file: !2840, line: 86, type: !2841, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !159, retainedNodes: !11)
!2840 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2841 = !DISubroutineType(types: !2842)
!2842 = !{!99, !2843, !23, !99, !2844}
!2843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1625, size: 64)
!2844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2845, size: 64)
!2845 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1596, line: 6, baseType: !2846)
!2846 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1598, line: 21, baseType: !2847)
!2847 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1598, line: 13, size: 64, elements: !2848)
!2848 = !{!2849, !2850}
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2847, file: !1598, line: 15, baseType: !6, size: 32)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2847, file: !1598, line: 20, baseType: !2851, size: 32, offset: 32)
!2851 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2847, file: !1598, line: 16, size: 32, elements: !2852)
!2852 = !{!2853, !2854}
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2851, file: !1598, line: 18, baseType: !84, size: 32)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2851, file: !1598, line: 19, baseType: !1607, size: 32)
!2855 = !DILocalVariable(name: "pwc", arg: 1, scope: !2839, file: !2840, line: 86, type: !2843)
!2856 = !DILocation(line: 86, column: 23, scope: !2839)
!2857 = !DILocalVariable(name: "s", arg: 2, scope: !2839, file: !2840, line: 86, type: !23)
!2858 = !DILocation(line: 86, column: 40, scope: !2839)
!2859 = !DILocalVariable(name: "n", arg: 3, scope: !2839, file: !2840, line: 86, type: !99)
!2860 = !DILocation(line: 86, column: 50, scope: !2839)
!2861 = !DILocalVariable(name: "ps", arg: 4, scope: !2839, file: !2840, line: 86, type: !2844)
!2862 = !DILocation(line: 86, column: 64, scope: !2839)
!2863 = !DILocalVariable(name: "ret", scope: !2839, file: !2840, line: 88, type: !99)
!2864 = !DILocation(line: 88, column: 10, scope: !2839)
!2865 = !DILocalVariable(name: "wc", scope: !2839, file: !2840, line: 89, type: !1625)
!2866 = !DILocation(line: 89, column: 11, scope: !2839)
!2867 = !DILocation(line: 105, column: 9, scope: !2868)
!2868 = distinct !DILexicalBlock(scope: !2839, file: !2840, line: 105, column: 7)
!2869 = !DILocation(line: 105, column: 7, scope: !2839)
!2870 = !DILocation(line: 106, column: 9, scope: !2868)
!2871 = !DILocation(line: 106, column: 5, scope: !2868)
!2872 = !DILocation(line: 145, column: 18, scope: !2839)
!2873 = !DILocation(line: 145, column: 23, scope: !2839)
!2874 = !DILocation(line: 145, column: 26, scope: !2839)
!2875 = !DILocation(line: 145, column: 29, scope: !2839)
!2876 = !DILocation(line: 145, column: 9, scope: !2839)
!2877 = !DILocation(line: 145, column: 7, scope: !2839)
!2878 = !DILocation(line: 154, column: 22, scope: !2879)
!2879 = distinct !DILexicalBlock(scope: !2839, file: !2840, line: 154, column: 7)
!2880 = !DILocation(line: 154, column: 19, scope: !2879)
!2881 = !DILocation(line: 154, column: 26, scope: !2879)
!2882 = !DILocation(line: 154, column: 29, scope: !2879)
!2883 = !DILocation(line: 154, column: 31, scope: !2879)
!2884 = !DILocation(line: 154, column: 36, scope: !2879)
!2885 = !DILocation(line: 154, column: 41, scope: !2879)
!2886 = !DILocation(line: 154, column: 7, scope: !2839)
!2887 = !DILocalVariable(name: "uc", scope: !2888, file: !2840, line: 156, type: !167)
!2888 = distinct !DILexicalBlock(scope: !2879, file: !2840, line: 155, column: 5)
!2889 = !DILocation(line: 156, column: 21, scope: !2888)
!2890 = !DILocation(line: 156, column: 27, scope: !2888)
!2891 = !DILocation(line: 156, column: 26, scope: !2888)
!2892 = !DILocation(line: 157, column: 14, scope: !2888)
!2893 = !DILocation(line: 157, column: 8, scope: !2888)
!2894 = !DILocation(line: 157, column: 12, scope: !2888)
!2895 = !DILocation(line: 158, column: 7, scope: !2888)
!2896 = !DILocation(line: 162, column: 10, scope: !2839)
!2897 = !DILocation(line: 162, column: 3, scope: !2839)
!2898 = !DILocation(line: 163, column: 1, scope: !2839)
!2899 = !DILocalVariable(name: "pwc", arg: 1, scope: !2900, file: !2840, line: 86, type: !2843)
!2900 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2840, file: !2840, line: 86, type: !2901, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2914, retainedNodes: !11)
!2901 = !DISubroutineType(types: !2902)
!2902 = !{!99, !2843, !23, !99, !2903}
!2903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2904, size: 64)
!2904 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1596, line: 6, baseType: !2905)
!2905 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1598, line: 21, baseType: !2906)
!2906 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1598, line: 13, size: 64, elements: !2907)
!2907 = !{!2908, !2909}
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2906, file: !1598, line: 15, baseType: !6, size: 32)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2906, file: !1598, line: 20, baseType: !2910, size: 32, offset: 32)
!2910 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2906, file: !1598, line: 16, size: 32, elements: !2911)
!2911 = !{!2912, !2913}
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2910, file: !1598, line: 18, baseType: !84, size: 32)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2910, file: !1598, line: 19, baseType: !1607, size: 32)
!2914 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !161, nameTableKind: None)
!2915 = !DILocalVariable(name: "s", arg: 2, scope: !2900, file: !2840, line: 86, type: !23)
!2916 = !DILocalVariable(name: "n", arg: 3, scope: !2900, file: !2840, line: 86, type: !99)
!2917 = !DILocalVariable(name: "ps", arg: 4, scope: !2900, file: !2840, line: 86, type: !2903)
!2918 = !DILocalVariable(name: "ret", scope: !2900, file: !2840, line: 88, type: !99)
!2919 = !DILocalVariable(name: "wc", scope: !2900, file: !2840, line: 89, type: !1625)
!2920 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2921, file: !2921, line: 27, type: !2922, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !162, retainedNodes: !11)
!2921 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2922 = !DISubroutineType(types: !2923)
!2923 = !{!6, !23, !23}
!2924 = !DILocalVariable(name: "s1", arg: 1, scope: !2920, file: !2921, line: 27, type: !23)
!2925 = !DILocation(line: 27, column: 27, scope: !2920)
!2926 = !DILocalVariable(name: "s2", arg: 2, scope: !2920, file: !2921, line: 27, type: !23)
!2927 = !DILocation(line: 27, column: 43, scope: !2920)
!2928 = !DILocalVariable(name: "p1", scope: !2920, file: !2921, line: 29, type: !165)
!2929 = !DILocation(line: 29, column: 33, scope: !2920)
!2930 = !DILocation(line: 29, column: 62, scope: !2920)
!2931 = !DILocalVariable(name: "p2", scope: !2920, file: !2921, line: 30, type: !165)
!2932 = !DILocation(line: 30, column: 33, scope: !2920)
!2933 = !DILocation(line: 30, column: 62, scope: !2920)
!2934 = !DILocalVariable(name: "c1", scope: !2920, file: !2921, line: 31, type: !167)
!2935 = !DILocation(line: 31, column: 17, scope: !2920)
!2936 = !DILocalVariable(name: "c2", scope: !2920, file: !2921, line: 31, type: !167)
!2937 = !DILocation(line: 31, column: 21, scope: !2920)
!2938 = !DILocation(line: 33, column: 7, scope: !2939)
!2939 = distinct !DILexicalBlock(scope: !2920, file: !2921, line: 33, column: 7)
!2940 = !DILocation(line: 33, column: 13, scope: !2939)
!2941 = !DILocation(line: 33, column: 10, scope: !2939)
!2942 = !DILocation(line: 33, column: 7, scope: !2920)
!2943 = !DILocation(line: 34, column: 5, scope: !2939)
!2944 = !DILocation(line: 36, column: 3, scope: !2920)
!2945 = !DILocation(line: 38, column: 24, scope: !2946)
!2946 = distinct !DILexicalBlock(scope: !2920, file: !2921, line: 37, column: 5)
!2947 = !DILocation(line: 38, column: 23, scope: !2946)
!2948 = !DILocation(line: 38, column: 12, scope: !2946)
!2949 = !DILocation(line: 38, column: 10, scope: !2946)
!2950 = !DILocation(line: 39, column: 24, scope: !2946)
!2951 = !DILocation(line: 39, column: 23, scope: !2946)
!2952 = !DILocation(line: 39, column: 12, scope: !2946)
!2953 = !DILocation(line: 39, column: 10, scope: !2946)
!2954 = !DILocation(line: 41, column: 11, scope: !2955)
!2955 = distinct !DILexicalBlock(scope: !2946, file: !2921, line: 41, column: 11)
!2956 = !DILocation(line: 41, column: 14, scope: !2955)
!2957 = !DILocation(line: 41, column: 11, scope: !2946)
!2958 = !DILocation(line: 42, column: 9, scope: !2955)
!2959 = !DILocation(line: 44, column: 7, scope: !2946)
!2960 = !DILocation(line: 45, column: 7, scope: !2946)
!2961 = !DILocation(line: 46, column: 5, scope: !2946)
!2962 = !DILocation(line: 47, column: 10, scope: !2920)
!2963 = !DILocation(line: 47, column: 16, scope: !2920)
!2964 = !DILocation(line: 47, column: 13, scope: !2920)
!2965 = distinct !{!2965, !2944, !2966}
!2966 = !DILocation(line: 47, column: 18, scope: !2920)
!2967 = !DILocation(line: 50, column: 12, scope: !2968)
!2968 = distinct !DILexicalBlock(scope: !2920, file: !2921, line: 49, column: 7)
!2969 = !DILocation(line: 50, column: 17, scope: !2968)
!2970 = !DILocation(line: 50, column: 15, scope: !2968)
!2971 = !DILocation(line: 50, column: 5, scope: !2968)
!2972 = !DILocation(line: 56, column: 1, scope: !2920)
!2973 = !DILocalVariable(name: "s1", arg: 1, scope: !2974, file: !2921, line: 27, type: !23)
!2974 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2921, file: !2921, line: 27, type: !2922, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2975, retainedNodes: !11)
!2975 = distinct !DICompileUnit(language: DW_LANG_C99, file: !163, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !164, nameTableKind: None)
!2976 = !DILocalVariable(name: "s2", arg: 2, scope: !2974, file: !2921, line: 27, type: !23)
!2977 = !DILocalVariable(name: "p1", scope: !2974, file: !2921, line: 29, type: !165)
!2978 = !DILocalVariable(name: "p2", scope: !2974, file: !2921, line: 30, type: !165)
!2979 = !DILocalVariable(name: "c1", scope: !2974, file: !2921, line: 31, type: !167)
!2980 = !DILocalVariable(name: "c2", scope: !2974, file: !2921, line: 31, type: !167)
!2981 = distinct !DISubprogram(name: "close_stream", scope: !2982, file: !2982, line: 56, type: !2983, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !168, retainedNodes: !11)
!2982 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2983 = !DISubroutineType(types: !2984)
!2984 = !{!6, !2985}
!2985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2986, size: 64)
!2986 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !2987)
!2987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !2988)
!2988 = !{!2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018}
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2987, file: !2358, line: 51, baseType: !6, size: 32)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2987, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2987, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2987, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2987, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2987, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2987, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2987, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2987, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2987, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2987, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2987, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2987, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2987, file: !2358, line: 70, baseType: !3003, size: 64, offset: 832)
!3003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2987, size: 64)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2987, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2987, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2987, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2987, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2987, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2987, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2987, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2987, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2987, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2987, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2987, file: !2358, line: 93, baseType: !3003, size: 64, offset: 1344)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2987, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2987, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2987, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2987, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!3019 = !DILocalVariable(name: "stream", arg: 1, scope: !2981, file: !2982, line: 56, type: !2985)
!3020 = !DILocation(line: 56, column: 21, scope: !2981)
!3021 = !DILocalVariable(name: "some_pending", scope: !2981, file: !2982, line: 58, type: !3022)
!3022 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !41)
!3023 = !DILocation(line: 58, column: 14, scope: !2981)
!3024 = !DILocation(line: 58, column: 42, scope: !2981)
!3025 = !DILocation(line: 58, column: 30, scope: !2981)
!3026 = !DILocation(line: 58, column: 50, scope: !2981)
!3027 = !DILocalVariable(name: "prev_fail", scope: !2981, file: !2982, line: 59, type: !3022)
!3028 = !DILocation(line: 59, column: 14, scope: !2981)
!3029 = !DILocation(line: 59, column: 27, scope: !2981)
!3030 = !DILocation(line: 59, column: 43, scope: !2981)
!3031 = !DILocalVariable(name: "fclose_fail", scope: !2981, file: !2982, line: 60, type: !3022)
!3032 = !DILocation(line: 60, column: 14, scope: !2981)
!3033 = !DILocation(line: 60, column: 37, scope: !2981)
!3034 = !DILocation(line: 60, column: 29, scope: !2981)
!3035 = !DILocation(line: 60, column: 45, scope: !2981)
!3036 = !DILocation(line: 70, column: 7, scope: !3037)
!3037 = distinct !DILexicalBlock(scope: !2981, file: !2982, line: 70, column: 7)
!3038 = !DILocation(line: 70, column: 17, scope: !3037)
!3039 = !DILocation(line: 70, column: 21, scope: !3037)
!3040 = !DILocation(line: 70, column: 33, scope: !3037)
!3041 = !DILocation(line: 70, column: 37, scope: !3037)
!3042 = !DILocation(line: 70, column: 50, scope: !3037)
!3043 = !DILocation(line: 70, column: 53, scope: !3037)
!3044 = !DILocation(line: 70, column: 59, scope: !3037)
!3045 = !DILocation(line: 70, column: 7, scope: !2981)
!3046 = !DILocation(line: 72, column: 13, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !3048, file: !2982, line: 72, column: 11)
!3048 = distinct !DILexicalBlock(scope: !3037, file: !2982, line: 71, column: 5)
!3049 = !DILocation(line: 72, column: 11, scope: !3048)
!3050 = !DILocation(line: 73, column: 9, scope: !3047)
!3051 = !DILocation(line: 73, column: 15, scope: !3047)
!3052 = !DILocation(line: 74, column: 7, scope: !3048)
!3053 = !DILocation(line: 77, column: 3, scope: !2981)
!3054 = !DILocation(line: 78, column: 1, scope: !2981)
!3055 = !DILocalVariable(name: "stream", arg: 1, scope: !3056, file: !2982, line: 56, type: !3059)
!3056 = distinct !DISubprogram(name: "close_stream", scope: !2982, file: !2982, line: 56, type: !3057, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3093, retainedNodes: !11)
!3057 = !DISubroutineType(types: !3058)
!3058 = !{!6, !3059}
!3059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3060, size: 64)
!3060 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !3061)
!3061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !3062)
!3062 = !{!3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092}
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3061, file: !2358, line: 51, baseType: !6, size: 32)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3061, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3061, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3061, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3061, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3061, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3061, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3061, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3061, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3061, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3061, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3061, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3061, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3061, file: !2358, line: 70, baseType: !3077, size: 64, offset: 832)
!3077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3061, size: 64)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3061, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3061, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3061, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3061, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3061, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3061, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3061, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3061, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3061, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3061, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3061, file: !2358, line: 93, baseType: !3077, size: 64, offset: 1344)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3061, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3061, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3061, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3061, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!3093 = distinct !DICompileUnit(language: DW_LANG_C99, file: !169, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!3094 = !DILocalVariable(name: "some_pending", scope: !3056, file: !2982, line: 58, type: !3022)
!3095 = !DILocalVariable(name: "prev_fail", scope: !3056, file: !2982, line: 59, type: !3022)
!3096 = !DILocalVariable(name: "fclose_fail", scope: !3056, file: !2982, line: 60, type: !3022)
!3097 = distinct !DISubprogram(name: "hard_locale", scope: !3098, file: !3098, line: 27, type: !3099, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !170, retainedNodes: !11)
!3098 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3099 = !DISubroutineType(types: !3100)
!3100 = !{!41, !6}
!3101 = !DILocalVariable(name: "category", arg: 1, scope: !3097, file: !3098, line: 27, type: !6)
!3102 = !DILocation(line: 27, column: 18, scope: !3097)
!3103 = !DILocalVariable(name: "locale", scope: !3097, file: !3098, line: 29, type: !3104)
!3104 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 2056, elements: !3105)
!3105 = !{!3106}
!3106 = !DISubrange(count: 257)
!3107 = !DILocation(line: 29, column: 8, scope: !3097)
!3108 = !DILocation(line: 31, column: 25, scope: !3109)
!3109 = distinct !DILexicalBlock(scope: !3097, file: !3098, line: 31, column: 7)
!3110 = !DILocation(line: 31, column: 35, scope: !3109)
!3111 = !DILocation(line: 31, column: 7, scope: !3109)
!3112 = !DILocation(line: 31, column: 7, scope: !3097)
!3113 = !DILocation(line: 32, column: 5, scope: !3109)
!3114 = !DILocation(line: 34, column: 20, scope: !3097)
!3115 = !DILocation(line: 34, column: 12, scope: !3097)
!3116 = !DILocation(line: 34, column: 33, scope: !3097)
!3117 = !DILocation(line: 34, column: 38, scope: !3097)
!3118 = !DILocation(line: 34, column: 49, scope: !3097)
!3119 = !DILocation(line: 34, column: 41, scope: !3097)
!3120 = !DILocation(line: 34, column: 66, scope: !3097)
!3121 = !DILocation(line: 34, column: 10, scope: !3097)
!3122 = !DILocation(line: 34, column: 3, scope: !3097)
!3123 = !DILocation(line: 35, column: 1, scope: !3097)
!3124 = !DILocalVariable(name: "category", arg: 1, scope: !3125, file: !3098, line: 27, type: !6)
!3125 = distinct !DISubprogram(name: "hard_locale", scope: !3098, file: !3098, line: 27, type: !3099, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3126, retainedNodes: !11)
!3126 = distinct !DICompileUnit(language: DW_LANG_C99, file: !171, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!3127 = !DILocalVariable(name: "locale", scope: !3125, file: !3098, line: 29, type: !3104)
!3128 = distinct !DISubprogram(name: "locale_charset", scope: !3129, file: !3129, line: 831, type: !3130, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !172, retainedNodes: !11)
!3129 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3130 = !DISubroutineType(types: !3131)
!3131 = !{!23}
!3132 = !DILocalVariable(name: "codeset", scope: !3128, file: !3129, line: 833, type: !23)
!3133 = !DILocation(line: 833, column: 15, scope: !3128)
!3134 = !DILocation(line: 847, column: 13, scope: !3128)
!3135 = !DILocation(line: 847, column: 11, scope: !3128)
!3136 = !DILocation(line: 911, column: 7, scope: !3137)
!3137 = distinct !DILexicalBlock(scope: !3128, file: !3129, line: 911, column: 7)
!3138 = !DILocation(line: 911, column: 15, scope: !3137)
!3139 = !DILocation(line: 911, column: 7, scope: !3128)
!3140 = !DILocation(line: 913, column: 13, scope: !3137)
!3141 = !DILocation(line: 913, column: 5, scope: !3137)
!3142 = !DILocation(line: 1070, column: 13, scope: !3143)
!3143 = distinct !DILexicalBlock(scope: !3144, file: !3129, line: 1070, column: 13)
!3144 = distinct !DILexicalBlock(scope: !3145, file: !3129, line: 1060, column: 7)
!3145 = distinct !DILexicalBlock(scope: !3128, file: !3129, line: 1019, column: 3)
!3146 = !DILocation(line: 1070, column: 24, scope: !3143)
!3147 = !DILocation(line: 1070, column: 13, scope: !3144)
!3148 = !DILocation(line: 1071, column: 19, scope: !3143)
!3149 = !DILocation(line: 1071, column: 11, scope: !3143)
!3150 = !DILocation(line: 1158, column: 10, scope: !3128)
!3151 = !DILocation(line: 1158, column: 3, scope: !3128)
!3152 = !DILocalVariable(name: "codeset", scope: !3153, file: !3129, line: 833, type: !23)
!3153 = distinct !DISubprogram(name: "locale_charset", scope: !3129, file: !3129, line: 831, type: !3130, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3154, retainedNodes: !11)
!3154 = distinct !DICompileUnit(language: DW_LANG_C99, file: !173, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3155 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3156, file: !3156, line: 269, type: !3157, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3156 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3157 = !DISubroutineType(types: !3158)
!3158 = !{!6, !6, !8, !99}
!3159 = !DILocalVariable(name: "category", arg: 1, scope: !3155, file: !3156, line: 269, type: !6)
!3160 = !DILocation(line: 269, column: 23, scope: !3155)
!3161 = !DILocalVariable(name: "buf", arg: 2, scope: !3155, file: !3156, line: 269, type: !8)
!3162 = !DILocation(line: 269, column: 39, scope: !3155)
!3163 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3155, file: !3156, line: 269, type: !99)
!3164 = !DILocation(line: 269, column: 51, scope: !3155)
!3165 = !DILocation(line: 274, column: 35, scope: !3155)
!3166 = !DILocation(line: 274, column: 45, scope: !3155)
!3167 = !DILocation(line: 274, column: 50, scope: !3155)
!3168 = !DILocation(line: 274, column: 10, scope: !3155)
!3169 = !DILocation(line: 274, column: 3, scope: !3155)
!3170 = !DILocalVariable(name: "category", arg: 1, scope: !3171, file: !3156, line: 269, type: !6)
!3171 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3156, file: !3156, line: 269, type: !3157, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3172, retainedNodes: !11)
!3172 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3173 = !DILocalVariable(name: "buf", arg: 2, scope: !3171, file: !3156, line: 269, type: !8)
!3174 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3171, file: !3156, line: 269, type: !99)
!3175 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3156, file: !3156, line: 91, type: !3157, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3176 = !DILocalVariable(name: "category", arg: 1, scope: !3175, file: !3156, line: 91, type: !6)
!3177 = !DILocation(line: 91, column: 30, scope: !3175)
!3178 = !DILocalVariable(name: "buf", arg: 2, scope: !3175, file: !3156, line: 91, type: !8)
!3179 = !DILocation(line: 91, column: 46, scope: !3175)
!3180 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3175, file: !3156, line: 91, type: !99)
!3181 = !DILocation(line: 91, column: 58, scope: !3175)
!3182 = !DILocalVariable(name: "result", scope: !3175, file: !3156, line: 140, type: !23)
!3183 = !DILocation(line: 140, column: 15, scope: !3175)
!3184 = !DILocation(line: 140, column: 51, scope: !3175)
!3185 = !DILocation(line: 140, column: 24, scope: !3175)
!3186 = !DILocation(line: 142, column: 7, scope: !3187)
!3187 = distinct !DILexicalBlock(scope: !3175, file: !3156, line: 142, column: 7)
!3188 = !DILocation(line: 142, column: 14, scope: !3187)
!3189 = !DILocation(line: 142, column: 7, scope: !3175)
!3190 = !DILocation(line: 145, column: 11, scope: !3191)
!3191 = distinct !DILexicalBlock(scope: !3192, file: !3156, line: 145, column: 11)
!3192 = distinct !DILexicalBlock(scope: !3187, file: !3156, line: 143, column: 5)
!3193 = !DILocation(line: 145, column: 19, scope: !3191)
!3194 = !DILocation(line: 145, column: 11, scope: !3192)
!3195 = !DILocation(line: 149, column: 9, scope: !3191)
!3196 = !DILocation(line: 149, column: 16, scope: !3191)
!3197 = !DILocation(line: 150, column: 7, scope: !3192)
!3198 = !DILocalVariable(name: "length", scope: !3199, file: !3156, line: 154, type: !99)
!3199 = distinct !DILexicalBlock(scope: !3187, file: !3156, line: 153, column: 5)
!3200 = !DILocation(line: 154, column: 14, scope: !3199)
!3201 = !DILocation(line: 154, column: 31, scope: !3199)
!3202 = !DILocation(line: 154, column: 23, scope: !3199)
!3203 = !DILocation(line: 155, column: 11, scope: !3204)
!3204 = distinct !DILexicalBlock(scope: !3199, file: !3156, line: 155, column: 11)
!3205 = !DILocation(line: 155, column: 20, scope: !3204)
!3206 = !DILocation(line: 155, column: 18, scope: !3204)
!3207 = !DILocation(line: 155, column: 11, scope: !3199)
!3208 = !DILocation(line: 157, column: 19, scope: !3209)
!3209 = distinct !DILexicalBlock(scope: !3204, file: !3156, line: 156, column: 9)
!3210 = !DILocation(line: 157, column: 24, scope: !3209)
!3211 = !DILocation(line: 157, column: 32, scope: !3209)
!3212 = !DILocation(line: 157, column: 39, scope: !3209)
!3213 = !DILocation(line: 157, column: 11, scope: !3209)
!3214 = !DILocation(line: 158, column: 11, scope: !3209)
!3215 = !DILocation(line: 162, column: 15, scope: !3216)
!3216 = distinct !DILexicalBlock(scope: !3217, file: !3156, line: 162, column: 15)
!3217 = distinct !DILexicalBlock(scope: !3204, file: !3156, line: 161, column: 9)
!3218 = !DILocation(line: 162, column: 23, scope: !3216)
!3219 = !DILocation(line: 162, column: 15, scope: !3217)
!3220 = !DILocation(line: 167, column: 23, scope: !3221)
!3221 = distinct !DILexicalBlock(scope: !3216, file: !3156, line: 163, column: 13)
!3222 = !DILocation(line: 167, column: 28, scope: !3221)
!3223 = !DILocation(line: 167, column: 36, scope: !3221)
!3224 = !DILocation(line: 167, column: 44, scope: !3221)
!3225 = !DILocation(line: 167, column: 15, scope: !3221)
!3226 = !DILocation(line: 168, column: 15, scope: !3221)
!3227 = !DILocation(line: 168, column: 19, scope: !3221)
!3228 = !DILocation(line: 168, column: 27, scope: !3221)
!3229 = !DILocation(line: 168, column: 32, scope: !3221)
!3230 = !DILocation(line: 169, column: 13, scope: !3221)
!3231 = !DILocation(line: 170, column: 11, scope: !3217)
!3232 = !DILocation(line: 174, column: 1, scope: !3175)
!3233 = !DILocalVariable(name: "category", arg: 1, scope: !3234, file: !3156, line: 91, type: !6)
!3234 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3156, file: !3156, line: 91, type: !3157, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3235, retainedNodes: !11)
!3235 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3236 = !DILocalVariable(name: "buf", arg: 2, scope: !3234, file: !3156, line: 91, type: !8)
!3237 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3234, file: !3156, line: 91, type: !99)
!3238 = !DILocalVariable(name: "result", scope: !3234, file: !3156, line: 140, type: !23)
!3239 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3156, file: !3156, line: 60, type: !3240, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3240 = !DISubroutineType(types: !3241)
!3241 = !{!23, !6}
!3242 = !DILocalVariable(name: "category", arg: 1, scope: !3239, file: !3156, line: 60, type: !6)
!3243 = !DILocation(line: 60, column: 32, scope: !3239)
!3244 = !DILocalVariable(name: "result", scope: !3239, file: !3156, line: 62, type: !23)
!3245 = !DILocation(line: 62, column: 15, scope: !3239)
!3246 = !DILocation(line: 62, column: 35, scope: !3239)
!3247 = !DILocation(line: 62, column: 24, scope: !3239)
!3248 = !DILocation(line: 87, column: 10, scope: !3239)
!3249 = !DILocation(line: 87, column: 3, scope: !3239)
!3250 = !DILocalVariable(name: "category", arg: 1, scope: !3251, file: !3156, line: 60, type: !6)
!3251 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3156, file: !3156, line: 60, type: !3240, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3252, retainedNodes: !11)
!3252 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3253 = !DILocalVariable(name: "result", scope: !3251, file: !3156, line: 62, type: !23)
!3254 = distinct !DISubprogram(name: "rpl_fclose", scope: !3255, file: !3255, line: 58, type: !3256, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !176, retainedNodes: !11)
!3255 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3256 = !DISubroutineType(types: !3257)
!3257 = !{!6, !3258}
!3258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3259, size: 64)
!3259 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !3260)
!3260 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !3261)
!3261 = !{!3262, !3263, !3264, !3265, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3277, !3278, !3279, !3280, !3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289, !3290, !3291}
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3260, file: !2358, line: 51, baseType: !6, size: 32)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3260, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3260, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3260, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3260, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3260, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3260, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3260, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3260, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3260, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3260, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3260, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3260, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3260, file: !2358, line: 70, baseType: !3276, size: 64, offset: 832)
!3276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3260, size: 64)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3260, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3260, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3260, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3260, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3260, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3260, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3260, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3260, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3260, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3260, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3260, file: !2358, line: 93, baseType: !3276, size: 64, offset: 1344)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3260, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3260, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3260, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3260, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!3292 = !DILocalVariable(name: "fp", arg: 1, scope: !3254, file: !3255, line: 58, type: !3258)
!3293 = !DILocation(line: 58, column: 19, scope: !3254)
!3294 = !DILocalVariable(name: "saved_errno", scope: !3254, file: !3255, line: 60, type: !6)
!3295 = !DILocation(line: 60, column: 7, scope: !3254)
!3296 = !DILocalVariable(name: "fd", scope: !3254, file: !3255, line: 61, type: !6)
!3297 = !DILocation(line: 61, column: 7, scope: !3254)
!3298 = !DILocalVariable(name: "result", scope: !3254, file: !3255, line: 62, type: !6)
!3299 = !DILocation(line: 62, column: 7, scope: !3254)
!3300 = !DILocation(line: 65, column: 16, scope: !3254)
!3301 = !DILocation(line: 65, column: 8, scope: !3254)
!3302 = !DILocation(line: 65, column: 6, scope: !3254)
!3303 = !DILocation(line: 66, column: 7, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3254, file: !3255, line: 66, column: 7)
!3305 = !DILocation(line: 66, column: 10, scope: !3304)
!3306 = !DILocation(line: 66, column: 7, scope: !3254)
!3307 = !DILocation(line: 67, column: 28, scope: !3304)
!3308 = !DILocation(line: 67, column: 12, scope: !3304)
!3309 = !DILocation(line: 67, column: 5, scope: !3304)
!3310 = !DILocation(line: 72, column: 9, scope: !3311)
!3311 = distinct !DILexicalBlock(scope: !3254, file: !3255, line: 72, column: 7)
!3312 = !DILocation(line: 72, column: 23, scope: !3311)
!3313 = !DILocation(line: 72, column: 41, scope: !3311)
!3314 = !DILocation(line: 72, column: 33, scope: !3311)
!3315 = !DILocation(line: 72, column: 26, scope: !3311)
!3316 = !DILocation(line: 72, column: 59, scope: !3311)
!3317 = !DILocation(line: 73, column: 7, scope: !3311)
!3318 = !DILocation(line: 73, column: 18, scope: !3311)
!3319 = !DILocation(line: 73, column: 10, scope: !3311)
!3320 = !DILocation(line: 72, column: 7, scope: !3254)
!3321 = !DILocation(line: 74, column: 19, scope: !3311)
!3322 = !DILocation(line: 74, column: 17, scope: !3311)
!3323 = !DILocation(line: 74, column: 5, scope: !3311)
!3324 = !DILocation(line: 100, column: 28, scope: !3254)
!3325 = !DILocation(line: 100, column: 12, scope: !3254)
!3326 = !DILocation(line: 100, column: 10, scope: !3254)
!3327 = !DILocation(line: 105, column: 7, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3254, file: !3255, line: 105, column: 7)
!3329 = !DILocation(line: 105, column: 19, scope: !3328)
!3330 = !DILocation(line: 105, column: 7, scope: !3254)
!3331 = !DILocation(line: 107, column: 15, scope: !3332)
!3332 = distinct !DILexicalBlock(scope: !3328, file: !3255, line: 106, column: 5)
!3333 = !DILocation(line: 107, column: 7, scope: !3332)
!3334 = !DILocation(line: 107, column: 13, scope: !3332)
!3335 = !DILocation(line: 108, column: 14, scope: !3332)
!3336 = !DILocation(line: 109, column: 5, scope: !3332)
!3337 = !DILocation(line: 111, column: 10, scope: !3254)
!3338 = !DILocation(line: 111, column: 3, scope: !3254)
!3339 = !DILocation(line: 112, column: 1, scope: !3254)
!3340 = distinct !DISubprogram(name: "rpl_fflush", scope: !3341, file: !3341, line: 129, type: !3342, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !178, retainedNodes: !11)
!3341 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3342 = !DISubroutineType(types: !3343)
!3343 = !{!6, !3344}
!3344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3345, size: 64)
!3345 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !3346)
!3346 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !3347)
!3347 = !{!3348, !3349, !3350, !3351, !3352, !3353, !3354, !3355, !3356, !3357, !3358, !3359, !3360, !3361, !3363, !3364, !3365, !3366, !3367, !3368, !3369, !3370, !3371, !3372, !3373, !3374, !3375, !3376, !3377}
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3346, file: !2358, line: 51, baseType: !6, size: 32)
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3346, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3346, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3346, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3346, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3346, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3346, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3346, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3346, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3346, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3346, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3346, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3346, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3346, file: !2358, line: 70, baseType: !3362, size: 64, offset: 832)
!3362 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3346, size: 64)
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3346, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3346, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3346, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3346, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3346, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3346, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3346, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3346, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3346, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3346, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3346, file: !2358, line: 93, baseType: !3362, size: 64, offset: 1344)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3346, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3346, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3346, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3346, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!3378 = !DILocalVariable(name: "stream", arg: 1, scope: !3340, file: !3341, line: 129, type: !3344)
!3379 = !DILocation(line: 129, column: 19, scope: !3340)
!3380 = !DILocation(line: 150, column: 7, scope: !3381)
!3381 = distinct !DILexicalBlock(scope: !3340, file: !3341, line: 150, column: 7)
!3382 = !DILocation(line: 150, column: 14, scope: !3381)
!3383 = !DILocation(line: 150, column: 22, scope: !3381)
!3384 = !DILocation(line: 150, column: 27, scope: !3381)
!3385 = !DILocation(line: 150, column: 7, scope: !3340)
!3386 = !DILocation(line: 151, column: 20, scope: !3381)
!3387 = !DILocation(line: 151, column: 12, scope: !3381)
!3388 = !DILocation(line: 151, column: 5, scope: !3381)
!3389 = !DILocation(line: 156, column: 44, scope: !3340)
!3390 = !DILocation(line: 156, column: 3, scope: !3340)
!3391 = !DILocation(line: 158, column: 18, scope: !3340)
!3392 = !DILocation(line: 158, column: 10, scope: !3340)
!3393 = !DILocation(line: 158, column: 3, scope: !3340)
!3394 = !DILocation(line: 235, column: 1, scope: !3340)
!3395 = !DILocalVariable(name: "stream", arg: 1, scope: !3396, file: !3341, line: 129, type: !3399)
!3396 = distinct !DISubprogram(name: "rpl_fflush", scope: !3341, file: !3341, line: 129, type: !3397, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3433, retainedNodes: !11)
!3397 = !DISubroutineType(types: !3398)
!3398 = !{!6, !3399}
!3399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3400, size: 64)
!3400 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !3401)
!3401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !3402)
!3402 = !{!3403, !3404, !3405, !3406, !3407, !3408, !3409, !3410, !3411, !3412, !3413, !3414, !3415, !3416, !3418, !3419, !3420, !3421, !3422, !3423, !3424, !3425, !3426, !3427, !3428, !3429, !3430, !3431, !3432}
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3401, file: !2358, line: 51, baseType: !6, size: 32)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3401, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3401, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3401, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3401, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3401, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3401, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3401, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3401, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3401, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3401, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3401, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3401, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3401, file: !2358, line: 70, baseType: !3417, size: 64, offset: 832)
!3417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3401, size: 64)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3401, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3401, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3401, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3401, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3401, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3401, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3401, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3401, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3401, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3401, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3401, file: !2358, line: 93, baseType: !3417, size: 64, offset: 1344)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3401, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3401, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3401, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3401, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!3433 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3434 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3341, file: !3341, line: 41, type: !3435, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !178, retainedNodes: !11)
!3435 = !DISubroutineType(types: !3436)
!3436 = !{null, !3344}
!3437 = !DILocalVariable(name: "fp", arg: 1, scope: !3434, file: !3341, line: 41, type: !3344)
!3438 = !DILocation(line: 41, column: 48, scope: !3434)
!3439 = !DILocation(line: 43, column: 7, scope: !3440)
!3440 = distinct !DILexicalBlock(scope: !3434, file: !3341, line: 43, column: 7)
!3441 = !DILocation(line: 43, column: 11, scope: !3440)
!3442 = !DILocation(line: 43, column: 18, scope: !3440)
!3443 = !DILocation(line: 43, column: 7, scope: !3434)
!3444 = !DILocation(line: 45, column: 13, scope: !3440)
!3445 = !DILocation(line: 45, column: 5, scope: !3440)
!3446 = !DILocation(line: 46, column: 1, scope: !3434)
!3447 = !DILocalVariable(name: "fp", arg: 1, scope: !3448, file: !3341, line: 41, type: !3451)
!3448 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3341, file: !3341, line: 41, type: !3449, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3485, retainedNodes: !11)
!3449 = !DISubroutineType(types: !3450)
!3450 = !{null, !3451}
!3451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3452, size: 64)
!3452 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !3453)
!3453 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !3454)
!3454 = !{!3455, !3456, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3470, !3471, !3472, !3473, !3474, !3475, !3476, !3477, !3478, !3479, !3480, !3481, !3482, !3483, !3484}
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3453, file: !2358, line: 51, baseType: !6, size: 32)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3453, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3453, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3453, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3453, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3453, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3453, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3453, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3453, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3453, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3453, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3453, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3453, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3453, file: !2358, line: 70, baseType: !3469, size: 64, offset: 832)
!3469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3453, size: 64)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3453, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3453, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3453, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3453, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3453, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3453, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3453, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3453, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3453, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3453, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3453, file: !2358, line: 93, baseType: !3469, size: 64, offset: 1344)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3453, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3453, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3453, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3453, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!3485 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3486 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3487, file: !3487, line: 28, type: !3488, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !180, retainedNodes: !11)
!3487 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3488 = !DISubroutineType(types: !3489)
!3489 = !{!6, !3490, !3524, !6}
!3490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3491, size: 64)
!3491 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !3492)
!3492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !3493)
!3493 = !{!3494, !3495, !3496, !3497, !3498, !3499, !3500, !3501, !3502, !3503, !3504, !3505, !3506, !3507, !3509, !3510, !3511, !3512, !3513, !3514, !3515, !3516, !3517, !3518, !3519, !3520, !3521, !3522, !3523}
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3492, file: !2358, line: 51, baseType: !6, size: 32)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3492, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3492, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3492, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3492, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3492, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3492, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3492, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3492, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3492, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3492, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3492, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3492, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3492, file: !2358, line: 70, baseType: !3508, size: 64, offset: 832)
!3508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3492, size: 64)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3492, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3492, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3492, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3492, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3492, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3492, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3492, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3492, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3492, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3492, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3492, file: !2358, line: 93, baseType: !3508, size: 64, offset: 1344)
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3492, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3492, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3492, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3492, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!3524 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !2701, line: 63, baseType: !2380)
!3525 = !DILocalVariable(name: "fp", arg: 1, scope: !3486, file: !3487, line: 28, type: !3490)
!3526 = !DILocation(line: 28, column: 15, scope: !3486)
!3527 = !DILocalVariable(name: "offset", arg: 2, scope: !3486, file: !3487, line: 28, type: !3524)
!3528 = !DILocation(line: 28, column: 25, scope: !3486)
!3529 = !DILocalVariable(name: "whence", arg: 3, scope: !3486, file: !3487, line: 28, type: !6)
!3530 = !DILocation(line: 28, column: 37, scope: !3486)
!3531 = !DILocation(line: 52, column: 7, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3486, file: !3487, line: 52, column: 7)
!3533 = !DILocation(line: 52, column: 11, scope: !3532)
!3534 = !DILocation(line: 52, column: 27, scope: !3532)
!3535 = !DILocation(line: 52, column: 31, scope: !3532)
!3536 = !DILocation(line: 52, column: 24, scope: !3532)
!3537 = !DILocation(line: 53, column: 7, scope: !3532)
!3538 = !DILocation(line: 53, column: 10, scope: !3532)
!3539 = !DILocation(line: 53, column: 14, scope: !3532)
!3540 = !DILocation(line: 53, column: 31, scope: !3532)
!3541 = !DILocation(line: 53, column: 35, scope: !3532)
!3542 = !DILocation(line: 53, column: 28, scope: !3532)
!3543 = !DILocation(line: 54, column: 7, scope: !3532)
!3544 = !DILocation(line: 54, column: 10, scope: !3532)
!3545 = !DILocation(line: 54, column: 14, scope: !3532)
!3546 = !DILocation(line: 54, column: 28, scope: !3532)
!3547 = !DILocation(line: 52, column: 7, scope: !3486)
!3548 = !DILocalVariable(name: "pos", scope: !3549, file: !3487, line: 117, type: !3524)
!3549 = distinct !DILexicalBlock(scope: !3532, file: !3487, line: 113, column: 5)
!3550 = !DILocation(line: 117, column: 13, scope: !3549)
!3551 = !DILocation(line: 117, column: 34, scope: !3549)
!3552 = !DILocation(line: 117, column: 26, scope: !3549)
!3553 = !DILocation(line: 117, column: 39, scope: !3549)
!3554 = !DILocation(line: 117, column: 47, scope: !3549)
!3555 = !DILocation(line: 117, column: 19, scope: !3549)
!3556 = !DILocation(line: 118, column: 11, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3549, file: !3487, line: 118, column: 11)
!3558 = !DILocation(line: 118, column: 15, scope: !3557)
!3559 = !DILocation(line: 118, column: 11, scope: !3549)
!3560 = !DILocation(line: 124, column: 11, scope: !3561)
!3561 = distinct !DILexicalBlock(scope: !3557, file: !3487, line: 119, column: 9)
!3562 = !DILocation(line: 129, column: 7, scope: !3549)
!3563 = !DILocation(line: 129, column: 11, scope: !3549)
!3564 = !DILocation(line: 129, column: 18, scope: !3549)
!3565 = !DILocation(line: 130, column: 21, scope: !3549)
!3566 = !DILocation(line: 130, column: 7, scope: !3549)
!3567 = !DILocation(line: 130, column: 11, scope: !3549)
!3568 = !DILocation(line: 130, column: 19, scope: !3549)
!3569 = !DILocation(line: 161, column: 7, scope: !3549)
!3570 = !DILocation(line: 163, column: 18, scope: !3486)
!3571 = !DILocation(line: 163, column: 22, scope: !3486)
!3572 = !DILocation(line: 163, column: 30, scope: !3486)
!3573 = !DILocation(line: 163, column: 10, scope: !3486)
!3574 = !DILocation(line: 163, column: 3, scope: !3486)
!3575 = !DILocation(line: 164, column: 1, scope: !3486)
!3576 = !DILocalVariable(name: "fp", arg: 1, scope: !3577, file: !3487, line: 28, type: !3580)
!3577 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3487, file: !3487, line: 28, type: !3578, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3614, retainedNodes: !11)
!3578 = !DISubroutineType(types: !3579)
!3579 = !{!6, !3580, !3524, !6}
!3580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3581, size: 64)
!3581 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2356, line: 7, baseType: !3582)
!3582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2358, line: 49, size: 1728, elements: !3583)
!3583 = !{!3584, !3585, !3586, !3587, !3588, !3589, !3590, !3591, !3592, !3593, !3594, !3595, !3596, !3597, !3599, !3600, !3601, !3602, !3603, !3604, !3605, !3606, !3607, !3608, !3609, !3610, !3611, !3612, !3613}
!3584 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3582, file: !2358, line: 51, baseType: !6, size: 32)
!3585 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3582, file: !2358, line: 54, baseType: !8, size: 64, offset: 64)
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3582, file: !2358, line: 55, baseType: !8, size: 64, offset: 128)
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3582, file: !2358, line: 56, baseType: !8, size: 64, offset: 192)
!3588 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3582, file: !2358, line: 57, baseType: !8, size: 64, offset: 256)
!3589 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3582, file: !2358, line: 58, baseType: !8, size: 64, offset: 320)
!3590 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3582, file: !2358, line: 59, baseType: !8, size: 64, offset: 384)
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3582, file: !2358, line: 60, baseType: !8, size: 64, offset: 448)
!3592 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3582, file: !2358, line: 61, baseType: !8, size: 64, offset: 512)
!3593 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3582, file: !2358, line: 64, baseType: !8, size: 64, offset: 576)
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3582, file: !2358, line: 65, baseType: !8, size: 64, offset: 640)
!3595 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3582, file: !2358, line: 66, baseType: !8, size: 64, offset: 704)
!3596 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3582, file: !2358, line: 68, baseType: !2373, size: 64, offset: 768)
!3597 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3582, file: !2358, line: 70, baseType: !3598, size: 64, offset: 832)
!3598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3582, size: 64)
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3582, file: !2358, line: 72, baseType: !6, size: 32, offset: 896)
!3600 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3582, file: !2358, line: 73, baseType: !6, size: 32, offset: 928)
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3582, file: !2358, line: 74, baseType: !2380, size: 64, offset: 960)
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3582, file: !2358, line: 77, baseType: !98, size: 16, offset: 1024)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3582, file: !2358, line: 78, baseType: !2385, size: 8, offset: 1040)
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3582, file: !2358, line: 79, baseType: !2387, size: 8, offset: 1048)
!3605 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3582, file: !2358, line: 81, baseType: !2391, size: 64, offset: 1088)
!3606 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3582, file: !2358, line: 89, baseType: !2394, size: 64, offset: 1152)
!3607 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3582, file: !2358, line: 91, baseType: !2396, size: 64, offset: 1216)
!3608 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3582, file: !2358, line: 92, baseType: !2399, size: 64, offset: 1280)
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3582, file: !2358, line: 93, baseType: !3598, size: 64, offset: 1344)
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3582, file: !2358, line: 94, baseType: !13, size: 64, offset: 1408)
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3582, file: !2358, line: 95, baseType: !99, size: 64, offset: 1472)
!3612 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3582, file: !2358, line: 96, baseType: !6, size: 32, offset: 1536)
!3613 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3582, file: !2358, line: 98, baseType: !2406, size: 160, offset: 1568)
!3614 = distinct !DICompileUnit(language: DW_LANG_C99, file: !181, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3615 = !DILocalVariable(name: "offset", arg: 2, scope: !3577, file: !3487, line: 28, type: !3524)
!3616 = !DILocalVariable(name: "whence", arg: 3, scope: !3577, file: !3487, line: 28, type: !6)
!3617 = distinct !DISubprogram(name: "c_tolower", scope: !3618, file: !3618, line: 337, type: !3619, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !182, retainedNodes: !11)
!3618 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3619 = !DISubroutineType(types: !3620)
!3620 = !{!6, !6}
!3621 = !DILocalVariable(name: "c", arg: 1, scope: !3617, file: !3618, line: 337, type: !6)
!3622 = !DILocation(line: 337, column: 16, scope: !3617)
!3623 = !DILocation(line: 339, column: 11, scope: !3617)
!3624 = !DILocation(line: 339, column: 3, scope: !3617)
!3625 = !DILocation(line: 342, column: 14, scope: !3626)
!3626 = distinct !DILexicalBlock(scope: !3617, file: !3618, line: 340, column: 5)
!3627 = !DILocation(line: 342, column: 16, scope: !3626)
!3628 = !DILocation(line: 342, column: 22, scope: !3626)
!3629 = !DILocation(line: 342, column: 7, scope: !3626)
!3630 = !DILocation(line: 344, column: 14, scope: !3626)
!3631 = !DILocation(line: 344, column: 7, scope: !3626)
!3632 = !DILocation(line: 346, column: 1, scope: !3617)
!3633 = !DILocalVariable(name: "c", arg: 1, scope: !3634, file: !3618, line: 337, type: !6)
!3634 = distinct !DISubprogram(name: "c_tolower", scope: !3618, file: !3618, line: 337, type: !3619, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3635, retainedNodes: !11)
!3635 = distinct !DICompileUnit(language: DW_LANG_C99, file: !183, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
