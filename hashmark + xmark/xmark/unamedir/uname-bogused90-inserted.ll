; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.utsname = type { [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8] }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s [OPTION]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [362 x i8] c"Print certain system information.  With no OPTION, same as -s.\0A\0A  -a, --all                print all information, in the following order,\0A                             except omit -p and -i if unknown:\0A  -s, --kernel-name        print the kernel name\0A  -n, --nodename           print the network node hostname\0A  -r, --kernel-release     print the kernel release\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [303 x i8] c"  -v, --kernel-version     print the kernel version\0A  -m, --machine            print the machine hardware name\0A  -p, --processor          print the processor type (non-portable)\0A  -i, --hardware-platform  print the hardware platform (non-portable)\0A  -o, --operating-system   print the operating system\0A\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"Print machine architecture.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"uname\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"arch\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.22 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.23 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.24 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.26 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.27 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.28 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.16 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"cannot get system name\00", align 1
@main.unknown = internal constant [8 x i8] c"unknown\00", align 1, !dbg !0
@.str.13 = private unnamed_addr constant [10 x i8] c"GNU/Linux\00", align 1
@print_element.printed = internal global i8 0, align 1, !dbg !36
@arch_long_options = internal constant [3 x %struct.option] [%struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !15
@.str.30 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"Karel Zak\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"asnrvmpio\00", align 1
@uname_long_options = internal constant [14 x %struct.option] [%struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.37, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.40, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.42, i32 0, i32 0), i32 0, i32* null, i32 118 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i32 0, i32 0), i32 0, i32* null, i32 109 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i32 0, i32 0), i32 0, i32* null, i32 112 }, %struct.option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.45, i32 0, i32 0), i32 0, i32* null, i32 105 }, %struct.option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.46, i32 0, i32 0), i32 0, i32* null, i32 111 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !31
@optind = external dso_local global i32, align 4
@.str.33 = private unnamed_addr constant [17 x i8] c"extra operand %s\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.37 = private unnamed_addr constant [12 x i8] c"kernel-name\00", align 1
@.str.38 = private unnamed_addr constant [8 x i8] c"sysname\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"nodename\00", align 1
@.str.40 = private unnamed_addr constant [15 x i8] c"kernel-release\00", align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"release\00", align 1
@.str.42 = private unnamed_addr constant [15 x i8] c"kernel-version\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"machine\00", align 1
@.str.44 = private unnamed_addr constant [10 x i8] c"processor\00", align 1
@.str.45 = private unnamed_addr constant [18 x i8] c"hardware-platform\00", align 1
@.str.46 = private unnamed_addr constant [17 x i8] c"operating-system\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@uname_mode = internal global i32 1, align 4, !dbg !45
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), align 8, !dbg !50
@.str.47 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !55
@.str.50 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !60
@.str.1.51 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.52 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !63
@.str.57 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.58 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.59 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !70
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !77
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !131
@nslots = internal global i32 1, align 4, !dbg !138
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !140
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !126
@.str.10.62 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.63 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.64 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.65 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.66 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.67 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.68 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.69 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.70 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !116
@.str.75 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.76 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.77 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.78 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.79 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.80 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.81 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.82 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.83 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.84 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.85 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.86 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.87 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.88 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.89 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.90 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !142
@.str.1.101 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.102 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.111 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.112 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.115 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.116 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [3 x i8] c"-a\00"
@.compVal1 = private global [4 x i8] c"-aa\00"
@.compVal2 = private global [3 x i8] c"--\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !190 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !193, metadata !DIExpression()), !dbg !194
  %11 = load i32, i32* %10, align 4, !dbg !195
  %12 = icmp ne i32 %11, 0, !dbg !197
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %60, !dbg !198

21:                                               ; preds = %originalBBpart2
  br label %22, !dbg !199

22:                                               ; preds = %21
  %23 = load i32, i32* @x
  %24 = load i32, i32* @y
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !200
  %32 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !200
  %33 = load i8*, i8** @program_name, align 8, !dbg !200
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* %32, i8* %33), !dbg !200
  %35 = load i32, i32* @x
  %36 = load i32, i32* @y
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !200

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x
  %45 = load i32, i32* @y
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* @x
  %53 = load i32, i32* @y
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %136, !dbg !200

60:                                               ; preds = %originalBBpart2
  %61 = load i32, i32* @x
  %62 = load i32, i32* @y
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !202
  %70 = load i8*, i8** @program_name, align 8, !dbg !204
  %71 = call i32 (i8*, ...) @printf(i8* %69, i8* %70), !dbg !205
  %72 = load i32, i32* @uname_mode, align 4, !dbg !206
  %73 = icmp eq i32 %72, 1, !dbg !208
  %74 = load i32, i32* @x
  %75 = load i32, i32* @y
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %73, label %82, label %105, !dbg !209

82:                                               ; preds = %originalBBpart212
  %83 = load i32, i32* @x
  %84 = load i32, i32* @y
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = call i8* @gettext(i8* getelementptr inbounds ([362 x i8], [362 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !210
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !210
  %93 = call i32 @fputs_unlocked(i8* %91, %struct._IO_FILE* %92), !dbg !210
  %94 = call i8* @gettext(i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !212
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !212
  %96 = call i32 @fputs_unlocked(i8* %94, %struct._IO_FILE* %95), !dbg !212
  %97 = load i32, i32* @x
  %98 = load i32, i32* @y
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %125, !dbg !213

105:                                              ; preds = %originalBBpart212
  %106 = load i32, i32* @x
  %107 = load i32, i32* @y
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %105, %originalBB18alteredBB
  %114 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !214
  %115 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !214
  %116 = call i32 @fputs_unlocked(i8* %114, %struct._IO_FILE* %115), !dbg !214
  %117 = load i32, i32* @x
  %118 = load i32, i32* @y
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %125

125:                                              ; preds = %originalBBpart220, %originalBBpart216
  %126 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !216
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !216
  %128 = call i32 @fputs_unlocked(i8* %126, %struct._IO_FILE* %127), !dbg !216
  %129 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !217
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !217
  %131 = call i32 @fputs_unlocked(i8* %129, %struct._IO_FILE* %130), !dbg !217
  %132 = load i32, i32* @uname_mode, align 4, !dbg !218
  %133 = icmp eq i32 %132, 1, !dbg !218
  %134 = zext i1 %133 to i64, !dbg !218
  %135 = select i1 %133, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !218
  call void @emit_ancillary_info(i8* %135), !dbg !219
  br label %136

136:                                              ; preds = %125, %originalBBpart28
  %137 = load i32, i32* @x
  %138 = load i32, i32* @y
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  %145 = load i32, i32* %10, align 4, !dbg !220
  call void @exit(i32 %145) #12, !dbg !221
  %146 = load i32, i32* @x
  %147 = load i32, i32* @y
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !221

originalBBalteredBB:                              ; preds = %originalBB, %1
  %154 = alloca i32, align 4
  store i32 %0, i32* %154, align 4
  call void @llvm.dbg.declare(metadata i32* %154, metadata !222, metadata !DIExpression()), !dbg !194
  %155 = load i32, i32* %154, align 4, !dbg !195
  %156 = icmp ne i32 %155, 0, !dbg !197
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !200
  %158 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !200
  %159 = load i8*, i8** @program_name, align 8, !dbg !200
  %160 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %157, i8* %158, i8* %159), !dbg !200
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %161 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !202
  %162 = load i8*, i8** @program_name, align 8, !dbg !204
  %163 = call i32 (i8*, ...) @printf(i8* %161, i8* %162), !dbg !205
  %164 = load i32, i32* @uname_mode, align 4, !dbg !206
  %165 = icmp eq i32 %164, 1, !dbg !208
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %166 = call i8* @gettext(i8* getelementptr inbounds ([362 x i8], [362 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !210
  %167 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !210
  %168 = call i32 @fputs_unlocked(i8* %166, %struct._IO_FILE* %167), !dbg !210
  %169 = call i8* @gettext(i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !212
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !212
  %171 = call i32 @fputs_unlocked(i8* %169, %struct._IO_FILE* %170), !dbg !212
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %105
  %172 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !214
  %173 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !214
  %174 = call i32 @fputs_unlocked(i8* %172, %struct._IO_FILE* %173), !dbg !214
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  %175 = load i32, i32* %10, align 4, !dbg !220
  call void @exit(i32 %175) #12, !dbg !221
  br label %originalBB22
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !245 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !247, metadata !DIExpression()), !dbg !248
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !249, metadata !DIExpression()), !dbg !258
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !258
  call void @llvm.dbg.declare(metadata i8** %12, metadata !259, metadata !DIExpression()), !dbg !260
  %16 = load i8*, i8** %10, align 8, !dbg !261
  store i8* %16, i8** %12, align 8, !dbg !260
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !262, metadata !DIExpression()), !dbg !264
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !265
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !264
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !266

26:                                               ; preds = %originalBBpart223, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !267
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !268
  %37 = load i8*, i8** %36, align 8, !dbg !268
  %38 = icmp ne i8* %37, null, !dbg !267
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !269

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !270
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !270
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !270
  %59 = load i8*, i8** %58, align 8, !dbg !270
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !270
  %61 = icmp eq i32 %60, 0, !dbg !270
  %62 = xor i1 %61, true, !dbg !271
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart219, label %originalBB6alteredBB

originalBBpart219:                                ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart219, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart219 ], !dbg !272
  br i1 %72, label %73, label %92, !dbg !266

73:                                               ; preds = %71
  %74 = load i32, i32* @x.1
  %75 = load i32, i32* @y.2
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %73, %originalBB21alteredBB
  %82 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !273
  %83 = getelementptr inbounds %struct.infomap, %struct.infomap* %82, i32 1, !dbg !273
  store %struct.infomap* %83, %struct.infomap** %13, align 8, !dbg !273
  %84 = load i32, i32* @x.1
  %85 = load i32, i32* @y.2
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br label %26, !dbg !266, !llvm.loop !274

92:                                               ; preds = %71
  %93 = load i32, i32* @x.1
  %94 = load i32, i32* @y.2
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %92, %originalBB25alteredBB
  %101 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !275
  %102 = getelementptr inbounds %struct.infomap, %struct.infomap* %101, i32 0, i32 1, !dbg !277
  %103 = load i8*, i8** %102, align 8, !dbg !277
  %104 = icmp ne i8* %103, null, !dbg !275
  %105 = load i32, i32* @x.1
  %106 = load i32, i32* @y.2
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %104, label %113, label %133, !dbg !278

113:                                              ; preds = %originalBBpart227
  %114 = load i32, i32* @x.1
  %115 = load i32, i32* @y.2
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %113, %originalBB29alteredBB
  %122 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !279
  %123 = getelementptr inbounds %struct.infomap, %struct.infomap* %122, i32 0, i32 1, !dbg !280
  %124 = load i8*, i8** %123, align 8, !dbg !280
  store i8* %124, i8** %12, align 8, !dbg !281
  %125 = load i32, i32* @x.1
  %126 = load i32, i32* @y.2
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %133, !dbg !282

133:                                              ; preds = %originalBBpart231, %originalBBpart227
  %134 = load i32, i32* @x.1
  %135 = load i32, i32* @y.2
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %133, %originalBB33alteredBB
  %142 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !283
  %143 = call i32 (i8*, ...) @printf(i8* %142, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0)), !dbg !284
  call void @llvm.dbg.declare(metadata i8** %14, metadata !285, metadata !DIExpression()), !dbg !286
  %144 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !287
  store i8* %144, i8** %14, align 8, !dbg !286
  %145 = load i8*, i8** %14, align 8, !dbg !288
  %146 = icmp ne i8* %145, null, !dbg !288
  %147 = load i32, i32* @x.1
  %148 = load i32, i32* @y.2
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %146, label %155, label %179, !dbg !290

155:                                              ; preds = %originalBBpart235
  %156 = load i8*, i8** %14, align 8, !dbg !291
  %157 = call i32 @strncmp(i8* %156, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0), i64 3) #13, !dbg !291
  %158 = icmp ne i32 %157, 0, !dbg !291
  br i1 %158, label %159, label %179, !dbg !292

159:                                              ; preds = %155
  %160 = load i32, i32* @x.1
  %161 = load i32, i32* @y.2
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %159, %originalBB37alteredBB
  %168 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !293
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !293
  %170 = call i32 @fputs_unlocked(i8* %168, %struct._IO_FILE* %169), !dbg !293
  %171 = load i32, i32* @x.1
  %172 = load i32, i32* @y.2
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %179, !dbg !295

179:                                              ; preds = %originalBBpart239, %155, %originalBBpart235
  %180 = load i32, i32* @x.1
  %181 = load i32, i32* @y.2
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %179, %originalBB41alteredBB
  %188 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i64 0, i64 0)) #10, !dbg !296
  %189 = load i8*, i8** %10, align 8, !dbg !297
  %190 = call i32 (i8*, ...) @printf(i8* %188, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i8* %189), !dbg !298
  %191 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !299
  %192 = load i8*, i8** %12, align 8, !dbg !300
  %193 = load i8*, i8** %12, align 8, !dbg !301
  %194 = load i8*, i8** %10, align 8, !dbg !302
  %195 = icmp eq i8* %193, %194, !dbg !303
  %196 = zext i1 %195 to i64, !dbg !301
  %197 = select i1 %195, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), !dbg !301
  %198 = call i32 (i8*, ...) @printf(i8* %191, i8* %192, i8* %197), !dbg !304
  %199 = load i32, i32* @x.1
  %200 = load i32, i32* @y.2
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  ret void, !dbg !305

originalBBalteredBB:                              ; preds = %originalBB, %1
  %207 = alloca i8*, align 8
  %208 = alloca [7 x %struct.infomap], align 16
  %209 = alloca i8*, align 8
  %210 = alloca %struct.infomap*, align 8
  %211 = alloca i8*, align 8
  store i8* %0, i8** %207, align 8
  call void @llvm.dbg.declare(metadata i8** %207, metadata !306, metadata !DIExpression()), !dbg !248
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %208, metadata !329, metadata !DIExpression()), !dbg !258
  %212 = bitcast [7 x %struct.infomap]* %208 to i8*, !dbg !258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %212, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !258
  call void @llvm.dbg.declare(metadata i8** %209, metadata !336, metadata !DIExpression()), !dbg !260
  %213 = load i8*, i8** %207, align 8, !dbg !261
  store i8* %213, i8** %209, align 8, !dbg !260
  call void @llvm.dbg.declare(metadata %struct.infomap** %210, metadata !337, metadata !DIExpression()), !dbg !264
  %214 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %208, i64 0, i64 0, !dbg !265
  store %struct.infomap* %214, %struct.infomap** %210, align 8, !dbg !264
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %215 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !267
  %216 = getelementptr inbounds %struct.infomap, %struct.infomap* %215, i32 0, i32 0, !dbg !268
  %217 = load i8*, i8** %216, align 8, !dbg !268
  %218 = icmp ne i8* %217, null, !dbg !267
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %219 = load i8*, i8** %10, align 8, !dbg !270
  %220 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !270
  %221 = getelementptr inbounds %struct.infomap, %struct.infomap* %220, i32 0, i32 0, !dbg !270
  %222 = load i8*, i8** %221, align 8, !dbg !270
  %223 = call i32 @strcmp(i8* %219, i8* %222) #13, !dbg !270
  %224 = icmp eq i32 %223, 0, !dbg !270
  %_ = sub i1 false, %224
  %gen = add i1 %_, true
  %_7 = sub i1 %224, true
  %gen8 = mul i1 %_7, true
  %_9 = shl i1 %224, true
  %_10 = sub i1 false, %224
  %gen11 = add i1 %_10, true
  %_12 = shl i1 %224, true
  %_13 = sub i1 false, %224
  %gen14 = add i1 %_13, true
  %_15 = shl i1 %224, true
  %_16 = sub i1 %224, true
  %gen17 = mul i1 %_16, true
  %225 = xor i1 %224, true, !dbg !271
  br label %originalBB6

originalBB21alteredBB:                            ; preds = %originalBB21, %73
  %226 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !273
  %227 = getelementptr inbounds %struct.infomap, %struct.infomap* %226, i32 1, !dbg !273
  store %struct.infomap* %227, %struct.infomap** %13, align 8, !dbg !273
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %92
  %228 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !275
  %229 = getelementptr inbounds %struct.infomap, %struct.infomap* %228, i32 0, i32 1, !dbg !277
  %230 = load i8*, i8** %229, align 8, !dbg !277
  %231 = icmp ne i8* %230, null, !dbg !275
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %113
  %232 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !279
  %233 = getelementptr inbounds %struct.infomap, %struct.infomap* %232, i32 0, i32 1, !dbg !280
  %234 = load i8*, i8** %233, align 8, !dbg !280
  store i8* %234, i8** %12, align 8, !dbg !281
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %133
  %235 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !283
  %236 = call i32 (i8*, ...) @printf(i8* %235, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0)), !dbg !284
  call void @llvm.dbg.declare(metadata !11, metadata !339, metadata !DIExpression()), !dbg !286
  %237 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !287
  store i8* %237, i8** %14, align 8, !dbg !286
  %238 = load i8*, i8** %14, align 8, !dbg !288
  %239 = icmp ne i8* %238, null, !dbg !288
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %159
  %240 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !293
  %241 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !293
  %242 = call i32 @fputs_unlocked(i8* %240, %struct._IO_FILE* %241), !dbg !293
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %179
  %243 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i64 0, i64 0)) #10, !dbg !296
  %244 = load i8*, i8** %10, align 8, !dbg !297
  %245 = call i32 (i8*, ...) @printf(i8* %243, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i8* %244), !dbg !298
  %246 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !299
  %247 = load i8*, i8** %12, align 8, !dbg !300
  %248 = load i8*, i8** %12, align 8, !dbg !301
  %249 = load i8*, i8** %10, align 8, !dbg !302
  %250 = icmp eq i8* %248, %249, !dbg !303
  %251 = zext i1 %250 to i64, !dbg !301
  %252 = select i1 %250, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), !dbg !301
  %253 = call i32 (i8*, ...) @printf(i8* %246, i8* %247, i8* %252), !dbg !304
  br label %originalBB41
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !2 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.utsname, align 1
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !362, metadata !DIExpression()), !dbg !363
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !364, metadata !DIExpression()), !dbg !365
  call void @llvm.dbg.declare(metadata i32* %14, metadata !366, metadata !DIExpression()), !dbg !367
  store i32 0, i32* %14, align 4, !dbg !367
  %18 = load i8**, i8*** %13, align 8, !dbg !368
  %19 = getelementptr inbounds i8*, i8** %18, i64 0, !dbg !368
  %20 = load i8*, i8** %19, align 8, !dbg !368
  call void @set_program_name(i8* %20), !dbg !369
  %21 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !370
  %22 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !371
  %23 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !372
  %24 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !373
  %25 = load i32, i32* %12, align 4, !dbg !374
  %26 = load i8**, i8*** %13, align 8, !dbg !375
  %27 = call i32 @decode_switches(i32 %25, i8** %26), !dbg !376
  store i32 %27, i32* %14, align 4, !dbg !377
  %28 = load i32, i32* %14, align 4, !dbg !378
  %29 = load i32, i32* @x.3
  %30 = load i32, i32* @y.4
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %37, !dbg !380

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.3
  %39 = load i32, i32* @y.4
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %collatzVar = alloca i32
  %46 = load i32, i32* @x.3
  %47 = load i32, i32* @y.4
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %54

54:                                               ; preds = %originalBBpart24
  %55 = load i32, i32* @x.3
  %56 = load i32, i32* @y.4
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  %63 = load i32, i32* @inVal0
  %64 = icmp sgt i32 %63, 1
  %65 = load i32, i32* @x.3
  %66 = load i32, i32* @y.4
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %64, label %90, label %73

73:                                               ; preds = %originalBBpart28
  %74 = load i32, i32* @x.3
  %75 = load i32, i32* @y.4
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %73, %originalBB10alteredBB
  store i32 49, i32* %collatzVar
  %82 = load i32, i32* @x.3
  %83 = load i32, i32* @y.4
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %90

90:                                               ; preds = %originalBBpart212, %originalBBpart28
  %91 = load i32, i32* @x.3
  %92 = load i32, i32* @y.4
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %90, %originalBB14alteredBB
  %99 = load i8**, i8*** @inVal1
  %100 = getelementptr inbounds i8*, i8** %99, i64 1
  %101 = load i8*, i8** %100
  %controle = call i32 @controle(i8* %101, i32 0)
  store i32 %controle, i32* %collatzVar
  %102 = load i32, i32* @x.3
  %103 = load i32, i32* @y.4
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %110

110:                                              ; preds = %originalBBpart267, %188, %originalBBpart216
  %111 = load i32, i32* @x.3
  %112 = load i32, i32* @y.4
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = load i32, i32* %collatzVar
  %120 = icmp sgt i32 %119, 1
  %121 = load i32, i32* @x.3
  %122 = load i32, i32* @y.4
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %120, label %129, label %229

129:                                              ; preds = %originalBBpart220
  %130 = load i32, i32* @x.3
  %131 = load i32, i32* @y.4
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %129, %originalBB22alteredBB
  %138 = load i32, i32* %collatzVar
  %139 = srem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = load i32, i32* @x.3
  %142 = load i32, i32* @y.4
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart229, label %originalBB22alteredBB

originalBBpart229:                                ; preds = %originalBB22
  br i1 %140, label %149, label %168

149:                                              ; preds = %originalBBpart229
  %150 = load i32, i32* @x.3
  %151 = load i32, i32* @y.4
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %149, %originalBB31alteredBB
  %158 = load i32, i32* %collatzVar
  %159 = sdiv i32 %158, 2
  store i32 %159, i32* %collatzVar
  %160 = load i32, i32* @x.3
  %161 = load i32, i32* @y.4
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart238, label %originalBB31alteredBB

originalBBpart238:                                ; preds = %originalBB31
  br label %188

168:                                              ; preds = %originalBBpart229
  %169 = load i32, i32* @x.3
  %170 = load i32, i32* @y.4
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %168, %originalBB40alteredBB
  %177 = load i32, i32* %collatzVar
  %178 = mul i32 %177, 3
  %179 = add i32 %178, 1
  store i32 %179, i32* %collatzVar
  %180 = load i32, i32* @x.3
  %181 = load i32, i32* @y.4
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart255, label %originalBB40alteredBB

originalBBpart255:                                ; preds = %originalBB40
  br label %188

188:                                              ; preds = %originalBBpart255, %originalBBpart238
  %189 = load i32, i32* %collatzVar
  %190 = sub i32 %28, %189
  %191 = icmp sgt i32 %190, -2
  br i1 %191, label %192, label %110

192:                                              ; preds = %188
  %193 = load i32, i32* @x.3
  %194 = load i32, i32* @y.4
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %192, %originalBB57alteredBB
  %201 = load i32, i32* %collatzVar
  %202 = add i32 %28, %201
  %203 = icmp slt i32 %202, 2
  %204 = load i32, i32* @x.3
  %205 = load i32, i32* @y.4
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBBpart267, label %originalBB57alteredBB

originalBBpart267:                                ; preds = %originalBB57
  br i1 %203, label %212, label %110

212:                                              ; preds = %originalBBpart267
  %213 = load i32, i32* @x.3
  %214 = load i32, i32* @y.4
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %212, %originalBB69alteredBB
  store i32 1, i32* %14, align 4, !dbg !381
  %221 = load i32, i32* @x.3
  %222 = load i32, i32* @y.4
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %229, !dbg !382

229:                                              ; preds = %originalBBpart271, %originalBBpart220
  %230 = load i32, i32* @x.3
  %231 = load i32, i32* @y.4
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %229, %originalBB73alteredBB
  %238 = load i32, i32* %14, align 4, !dbg !383
  %239 = and i32 %238, 31, !dbg !385
  %240 = icmp ne i32 %239, 0, !dbg !385
  %241 = load i32, i32* @x.3
  %242 = load i32, i32* @y.4
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBBpart281, label %originalBB73alteredBB

originalBBpart281:                                ; preds = %originalBB73
  br i1 %240, label %249, label %658, !dbg !386

249:                                              ; preds = %originalBBpart281
  call void @llvm.dbg.declare(metadata %struct.utsname* %15, metadata !387, metadata !DIExpression()), !dbg !401
  %250 = load i32, i32* @x.3
  %251 = load i32, i32* @y.4
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %249, %originalBB83alteredBB
  %258 = call i32 @uname(%struct.utsname* %15) #10, !dbg !402
  %259 = load i32, i32* @x.3
  %260 = load i32, i32* @y.4
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %267, !dbg !404

267:                                              ; preds = %originalBBpart285
  %268 = load i32, i32* @x.3
  %269 = load i32, i32* @y.4
  %270 = sub i32 %268, 1
  %271 = mul i32 %268, %270
  %272 = urem i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %273, %274
  br i1 %275, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %267, %originalBB87alteredBB
  %collatzVar5 = alloca i32
  %276 = load i32, i32* @x.3
  %277 = load i32, i32* @y.4
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br label %284

284:                                              ; preds = %originalBBpart289
  %285 = load i32, i32* @x.3
  %286 = load i32, i32* @y.4
  %287 = sub i32 %285, 1
  %288 = mul i32 %285, %287
  %289 = urem i32 %288, 2
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %290, %291
  br i1 %292, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %284, %originalBB91alteredBB
  %293 = load i32, i32* @inVal0
  %294 = icmp sgt i32 %293, 1
  %295 = load i32, i32* @x.3
  %296 = load i32, i32* @y.4
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br i1 %294, label %320, label %303

303:                                              ; preds = %originalBBpart293
  %304 = load i32, i32* @x.3
  %305 = load i32, i32* @y.4
  %306 = sub i32 %304, 1
  %307 = mul i32 %304, %306
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %309, %310
  br i1 %311, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %303, %originalBB95alteredBB
  store i32 28, i32* %collatzVar5
  %312 = load i32, i32* @x.3
  %313 = load i32, i32* @y.4
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br label %320

320:                                              ; preds = %originalBBpart297, %originalBBpart293
  %321 = load i32, i32* @x.3
  %322 = load i32, i32* @y.4
  %323 = sub i32 %321, 1
  %324 = mul i32 %321, %323
  %325 = urem i32 %324, 2
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %326, %327
  br i1 %328, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %320, %originalBB99alteredBB
  %329 = load i8**, i8*** @inVal1
  %330 = getelementptr inbounds i8*, i8** %329, i64 1
  %331 = load i8*, i8** %330
  %controle6 = call i32 @controle(i8* %331, i32 -1)
  store i32 %controle6, i32* %collatzVar5
  %332 = load i32, i32* @x.3
  %333 = load i32, i32* @y.4
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br label %340

340:                                              ; preds = %originalBBpart2156, %originalBBpart2143, %originalBBpart2101
  %341 = load i32, i32* @x.3
  %342 = load i32, i32* @y.4
  %343 = sub i32 %341, 1
  %344 = mul i32 %341, %343
  %345 = urem i32 %344, 2
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %346, %347
  br i1 %348, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %340, %originalBB103alteredBB
  %349 = load i32, i32* %collatzVar5
  %350 = icmp sgt i32 %349, 1
  %351 = load i32, i32* @x.3
  %352 = load i32, i32* @y.4
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br i1 %350, label %359, label %462

359:                                              ; preds = %originalBBpart2105
  %360 = load i32, i32* @x.3
  %361 = load i32, i32* @y.4
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %359, %originalBB107alteredBB
  %368 = load i32, i32* %collatzVar5
  %369 = srem i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = load i32, i32* @x.3
  %372 = load i32, i32* @y.4
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBBpart2111, label %originalBB107alteredBB

originalBBpart2111:                               ; preds = %originalBB107
  br i1 %370, label %379, label %382

379:                                              ; preds = %originalBBpart2111
  %380 = load i32, i32* %collatzVar5
  %381 = sdiv i32 %380, 2
  store i32 %381, i32* %collatzVar5
  br label %402

382:                                              ; preds = %originalBBpart2111
  %383 = load i32, i32* @x.3
  %384 = load i32, i32* @y.4
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %382, %originalBB113alteredBB
  %391 = load i32, i32* %collatzVar5
  %392 = mul i32 %391, 3
  %393 = add i32 %392, 1
  store i32 %393, i32* %collatzVar5
  %394 = load i32, i32* @x.3
  %395 = load i32, i32* @y.4
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart2127, label %originalBB113alteredBB

originalBBpart2127:                               ; preds = %originalBB113
  br label %402

402:                                              ; preds = %originalBBpart2127, %379
  %403 = load i32, i32* @x.3
  %404 = load i32, i32* @y.4
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBB129, label %originalBB129alteredBB

originalBB129:                                    ; preds = %402, %originalBB129alteredBB
  %411 = load i32, i32* %collatzVar5
  %412 = sub i32 %258, %411
  %413 = icmp sgt i32 %412, -3
  %414 = load i32, i32* @x.3
  %415 = load i32, i32* @y.4
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart2143, label %originalBB129alteredBB

originalBBpart2143:                               ; preds = %originalBB129
  br i1 %413, label %422, label %340

422:                                              ; preds = %originalBBpart2143
  %423 = load i32, i32* @x.3
  %424 = load i32, i32* @y.4
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB145, label %originalBB145alteredBB

originalBB145:                                    ; preds = %422, %originalBB145alteredBB
  %431 = load i32, i32* %collatzVar5
  %432 = add i32 %258, %431
  %433 = icmp slt i32 %432, 1
  %434 = load i32, i32* @x.3
  %435 = load i32, i32* @y.4
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBBpart2156, label %originalBB145alteredBB

originalBBpart2156:                               ; preds = %originalBB145
  br i1 %433, label %442, label %340

442:                                              ; preds = %originalBBpart2156
  %443 = load i32, i32* @x.3
  %444 = load i32, i32* @y.4
  %445 = sub i32 %443, 1
  %446 = mul i32 %443, %445
  %447 = urem i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %448, %449
  br i1 %450, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %442, %originalBB158alteredBB
  %451 = call i32* @__errno_location() #14, !dbg !405
  %452 = load i32, i32* %451, align 4, !dbg !405
  %453 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !405
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %452, i8* %453), !dbg !405
  %454 = load i32, i32* @x.3
  %455 = load i32, i32* @y.4
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  unreachable, !dbg !405

462:                                              ; preds = %originalBBpart2105
  %463 = load i32, i32* @x.3
  %464 = load i32, i32* @y.4
  %465 = sub i32 %463, 1
  %466 = mul i32 %463, %465
  %467 = urem i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = icmp slt i32 %464, 10
  %470 = or i1 %468, %469
  br i1 %470, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %462, %originalBB162alteredBB
  %471 = load i32, i32* %14, align 4, !dbg !406
  %472 = and i32 %471, 1, !dbg !408
  %473 = icmp ne i32 %472, 0, !dbg !408
  %474 = load i32, i32* @x.3
  %475 = load i32, i32* @y.4
  %476 = sub i32 %474, 1
  %477 = mul i32 %474, %476
  %478 = urem i32 %477, 2
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %479, %480
  br i1 %481, label %originalBBpart2176, label %originalBB162alteredBB

originalBBpart2176:                               ; preds = %originalBB162
  br i1 %473, label %482, label %501, !dbg !409

482:                                              ; preds = %originalBBpart2176
  %483 = load i32, i32* @x.3
  %484 = load i32, i32* @y.4
  %485 = sub i32 %483, 1
  %486 = mul i32 %483, %485
  %487 = urem i32 %486, 2
  %488 = icmp eq i32 %487, 0
  %489 = icmp slt i32 %484, 10
  %490 = or i1 %488, %489
  br i1 %490, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %482, %originalBB178alteredBB
  %491 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 0, !dbg !410
  %492 = getelementptr inbounds [65 x i8], [65 x i8]* %491, i64 0, i64 0, !dbg !411
  call void @print_element(i8* %492), !dbg !412
  %493 = load i32, i32* @x.3
  %494 = load i32, i32* @y.4
  %495 = sub i32 %493, 1
  %496 = mul i32 %493, %495
  %497 = urem i32 %496, 2
  %498 = icmp eq i32 %497, 0
  %499 = icmp slt i32 %494, 10
  %500 = or i1 %498, %499
  br i1 %500, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br label %501, !dbg !412

501:                                              ; preds = %originalBBpart2180, %originalBBpart2176
  %502 = load i32, i32* @x.3
  %503 = load i32, i32* @y.4
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %501, %originalBB182alteredBB
  %510 = load i32, i32* %14, align 4, !dbg !413
  %511 = and i32 %510, 2, !dbg !415
  %512 = icmp ne i32 %511, 0, !dbg !415
  %513 = load i32, i32* @x.3
  %514 = load i32, i32* @y.4
  %515 = sub i32 %513, 1
  %516 = mul i32 %513, %515
  %517 = urem i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = icmp slt i32 %514, 10
  %520 = or i1 %518, %519
  br i1 %520, label %originalBBpart2193, label %originalBB182alteredBB

originalBBpart2193:                               ; preds = %originalBB182
  br i1 %512, label %521, label %524, !dbg !416

521:                                              ; preds = %originalBBpart2193
  %522 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 1, !dbg !417
  %523 = getelementptr inbounds [65 x i8], [65 x i8]* %522, i64 0, i64 0, !dbg !418
  call void @print_element(i8* %523), !dbg !419
  br label %524, !dbg !419

524:                                              ; preds = %521, %originalBBpart2193
  %525 = load i32, i32* @x.3
  %526 = load i32, i32* @y.4
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBB195, label %originalBB195alteredBB

originalBB195:                                    ; preds = %524, %originalBB195alteredBB
  %533 = load i32, i32* %14, align 4, !dbg !420
  %534 = and i32 %533, 4, !dbg !422
  %535 = icmp ne i32 %534, 0, !dbg !422
  %536 = load i32, i32* @x.3
  %537 = load i32, i32* @y.4
  %538 = sub i32 %536, 1
  %539 = mul i32 %536, %538
  %540 = urem i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = icmp slt i32 %537, 10
  %543 = or i1 %541, %542
  br i1 %543, label %originalBBpart2198, label %originalBB195alteredBB

originalBBpart2198:                               ; preds = %originalBB195
  br i1 %535, label %544, label %563, !dbg !423

544:                                              ; preds = %originalBBpart2198
  %545 = load i32, i32* @x.3
  %546 = load i32, i32* @y.4
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBB200, label %originalBB200alteredBB

originalBB200:                                    ; preds = %544, %originalBB200alteredBB
  %553 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 2, !dbg !424
  %554 = getelementptr inbounds [65 x i8], [65 x i8]* %553, i64 0, i64 0, !dbg !425
  call void @print_element(i8* %554), !dbg !426
  %555 = load i32, i32* @x.3
  %556 = load i32, i32* @y.4
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBBpart2202, label %originalBB200alteredBB

originalBBpart2202:                               ; preds = %originalBB200
  br label %563, !dbg !426

563:                                              ; preds = %originalBBpart2202, %originalBBpart2198
  %564 = load i32, i32* @x.3
  %565 = load i32, i32* @y.4
  %566 = sub i32 %564, 1
  %567 = mul i32 %564, %566
  %568 = urem i32 %567, 2
  %569 = icmp eq i32 %568, 0
  %570 = icmp slt i32 %565, 10
  %571 = or i1 %569, %570
  br i1 %571, label %originalBB204, label %originalBB204alteredBB

originalBB204:                                    ; preds = %563, %originalBB204alteredBB
  %572 = load i32, i32* %14, align 4, !dbg !427
  %573 = and i32 %572, 8, !dbg !429
  %574 = icmp ne i32 %573, 0, !dbg !429
  %575 = load i32, i32* @x.3
  %576 = load i32, i32* @y.4
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBBpart2210, label %originalBB204alteredBB

originalBBpart2210:                               ; preds = %originalBB204
  br i1 %574, label %583, label %602, !dbg !430

583:                                              ; preds = %originalBBpart2210
  %584 = load i32, i32* @x.3
  %585 = load i32, i32* @y.4
  %586 = sub i32 %584, 1
  %587 = mul i32 %584, %586
  %588 = urem i32 %587, 2
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %589, %590
  br i1 %591, label %originalBB212, label %originalBB212alteredBB

originalBB212:                                    ; preds = %583, %originalBB212alteredBB
  %592 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 3, !dbg !431
  %593 = getelementptr inbounds [65 x i8], [65 x i8]* %592, i64 0, i64 0, !dbg !432
  call void @print_element(i8* %593), !dbg !433
  %594 = load i32, i32* @x.3
  %595 = load i32, i32* @y.4
  %596 = sub i32 %594, 1
  %597 = mul i32 %594, %596
  %598 = urem i32 %597, 2
  %599 = icmp eq i32 %598, 0
  %600 = icmp slt i32 %595, 10
  %601 = or i1 %599, %600
  br i1 %601, label %originalBBpart2215, label %originalBB212alteredBB

originalBBpart2215:                               ; preds = %originalBB212
  br label %602, !dbg !433

602:                                              ; preds = %originalBBpart2215, %originalBBpart2210
  %603 = load i32, i32* @x.3
  %604 = load i32, i32* @y.4
  %605 = sub i32 %603, 1
  %606 = mul i32 %603, %605
  %607 = urem i32 %606, 2
  %608 = icmp eq i32 %607, 0
  %609 = icmp slt i32 %604, 10
  %610 = or i1 %608, %609
  br i1 %610, label %originalBB217, label %originalBB217alteredBB

originalBB217:                                    ; preds = %602, %originalBB217alteredBB
  %611 = load i32, i32* %14, align 4, !dbg !434
  %612 = and i32 %611, 16, !dbg !436
  %613 = icmp ne i32 %612, 0, !dbg !436
  %614 = load i32, i32* @x.3
  %615 = load i32, i32* @y.4
  %616 = sub i32 %614, 1
  %617 = mul i32 %614, %616
  %618 = urem i32 %617, 2
  %619 = icmp eq i32 %618, 0
  %620 = icmp slt i32 %615, 10
  %621 = or i1 %619, %620
  br i1 %621, label %originalBBpart2234, label %originalBB217alteredBB

originalBBpart2234:                               ; preds = %originalBB217
  br i1 %613, label %622, label %641, !dbg !437

622:                                              ; preds = %originalBBpart2234
  %623 = load i32, i32* @x.3
  %624 = load i32, i32* @y.4
  %625 = sub i32 %623, 1
  %626 = mul i32 %623, %625
  %627 = urem i32 %626, 2
  %628 = icmp eq i32 %627, 0
  %629 = icmp slt i32 %624, 10
  %630 = or i1 %628, %629
  br i1 %630, label %originalBB236, label %originalBB236alteredBB

originalBB236:                                    ; preds = %622, %originalBB236alteredBB
  %631 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 4, !dbg !438
  %632 = getelementptr inbounds [65 x i8], [65 x i8]* %631, i64 0, i64 0, !dbg !439
  call void @print_element(i8* %632), !dbg !440
  %633 = load i32, i32* @x.3
  %634 = load i32, i32* @y.4
  %635 = sub i32 %633, 1
  %636 = mul i32 %633, %635
  %637 = urem i32 %636, 2
  %638 = icmp eq i32 %637, 0
  %639 = icmp slt i32 %634, 10
  %640 = or i1 %638, %639
  br i1 %640, label %originalBBpart2238, label %originalBB236alteredBB

originalBBpart2238:                               ; preds = %originalBB236
  br label %641, !dbg !440

641:                                              ; preds = %originalBBpart2238, %originalBBpart2234
  %642 = load i32, i32* @x.3
  %643 = load i32, i32* @y.4
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBB240, label %originalBB240alteredBB

originalBB240:                                    ; preds = %641, %originalBB240alteredBB
  %650 = load i32, i32* @x.3
  %651 = load i32, i32* @y.4
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBBpart2242, label %originalBB240alteredBB

originalBBpart2242:                               ; preds = %originalBB240
  br label %658, !dbg !441

658:                                              ; preds = %originalBBpart2242, %originalBBpart281
  %659 = load i32, i32* @x.3
  %660 = load i32, i32* @y.4
  %661 = sub i32 %659, 1
  %662 = mul i32 %659, %661
  %663 = urem i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = icmp slt i32 %660, 10
  %666 = or i1 %664, %665
  br i1 %666, label %originalBB244, label %originalBB244alteredBB

originalBB244:                                    ; preds = %658, %originalBB244alteredBB
  %667 = load i32, i32* %14, align 4, !dbg !442
  %668 = and i32 %667, 32, !dbg !444
  %669 = icmp ne i32 %668, 0, !dbg !444
  %670 = load i32, i32* @x.3
  %671 = load i32, i32* @y.4
  %672 = sub i32 %670, 1
  %673 = mul i32 %670, %672
  %674 = urem i32 %673, 2
  %675 = icmp eq i32 %674, 0
  %676 = icmp slt i32 %671, 10
  %677 = or i1 %675, %676
  br i1 %677, label %originalBBpart2254, label %originalBB244alteredBB

originalBBpart2254:                               ; preds = %originalBB244
  br i1 %669, label %678, label %893, !dbg !445

678:                                              ; preds = %originalBBpart2254
  call void @llvm.dbg.declare(metadata i8** %16, metadata !446, metadata !DIExpression()), !dbg !448
  %679 = load i32, i32* @x.3
  %680 = load i32, i32* @y.4
  %681 = sub i32 %679, 1
  %682 = mul i32 %679, %681
  %683 = urem i32 %682, 2
  %684 = icmp eq i32 %683, 0
  %685 = icmp slt i32 %680, 10
  %686 = or i1 %684, %685
  br i1 %686, label %originalBB256, label %originalBB256alteredBB

originalBB256:                                    ; preds = %678, %originalBB256alteredBB
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %16, align 8, !dbg !448
  %687 = load i32, i32* %14, align 4, !dbg !449
  %688 = load i32, i32* @x.3
  %689 = load i32, i32* @y.4
  %690 = sub i32 %688, 1
  %691 = mul i32 %688, %690
  %692 = urem i32 %691, 2
  %693 = icmp eq i32 %692, 0
  %694 = icmp slt i32 %689, 10
  %695 = or i1 %693, %694
  br i1 %695, label %originalBBpart2258, label %originalBB256alteredBB

originalBBpart2258:                               ; preds = %originalBB256
  br label %696, !dbg !451

696:                                              ; preds = %originalBBpart2258
  %697 = load i32, i32* @x.3
  %698 = load i32, i32* @y.4
  %699 = sub i32 %697, 1
  %700 = mul i32 %697, %699
  %701 = urem i32 %700, 2
  %702 = icmp eq i32 %701, 0
  %703 = icmp slt i32 %698, 10
  %704 = or i1 %702, %703
  br i1 %704, label %originalBB260, label %originalBB260alteredBB

originalBB260:                                    ; preds = %696, %originalBB260alteredBB
  %collatzVar1 = alloca i32
  %705 = load i32, i32* @x.3
  %706 = load i32, i32* @y.4
  %707 = sub i32 %705, 1
  %708 = mul i32 %705, %707
  %709 = urem i32 %708, 2
  %710 = icmp eq i32 %709, 0
  %711 = icmp slt i32 %706, 10
  %712 = or i1 %710, %711
  br i1 %712, label %originalBBpart2262, label %originalBB260alteredBB

originalBBpart2262:                               ; preds = %originalBB260
  br label %713

713:                                              ; preds = %originalBBpart2262
  %714 = load i32, i32* @x.3
  %715 = load i32, i32* @y.4
  %716 = sub i32 %714, 1
  %717 = mul i32 %714, %716
  %718 = urem i32 %717, 2
  %719 = icmp eq i32 %718, 0
  %720 = icmp slt i32 %715, 10
  %721 = or i1 %719, %720
  br i1 %721, label %originalBB264, label %originalBB264alteredBB

originalBB264:                                    ; preds = %713, %originalBB264alteredBB
  %722 = load i32, i32* @inVal0
  %723 = icmp sgt i32 %722, 1
  %724 = load i32, i32* @x.3
  %725 = load i32, i32* @y.4
  %726 = sub i32 %724, 1
  %727 = mul i32 %724, %726
  %728 = urem i32 %727, 2
  %729 = icmp eq i32 %728, 0
  %730 = icmp slt i32 %725, 10
  %731 = or i1 %729, %730
  br i1 %731, label %originalBBpart2266, label %originalBB264alteredBB

originalBBpart2266:                               ; preds = %originalBB264
  br i1 %723, label %749, label %732

732:                                              ; preds = %originalBBpart2266
  %733 = load i32, i32* @x.3
  %734 = load i32, i32* @y.4
  %735 = sub i32 %733, 1
  %736 = mul i32 %733, %735
  %737 = urem i32 %736, 2
  %738 = icmp eq i32 %737, 0
  %739 = icmp slt i32 %734, 10
  %740 = or i1 %738, %739
  br i1 %740, label %originalBB268, label %originalBB268alteredBB

originalBB268:                                    ; preds = %732, %originalBB268alteredBB
  store i32 59, i32* %collatzVar1
  %741 = load i32, i32* @x.3
  %742 = load i32, i32* @y.4
  %743 = sub i32 %741, 1
  %744 = mul i32 %741, %743
  %745 = urem i32 %744, 2
  %746 = icmp eq i32 %745, 0
  %747 = icmp slt i32 %742, 10
  %748 = or i1 %746, %747
  br i1 %748, label %originalBBpart2270, label %originalBB268alteredBB

originalBBpart2270:                               ; preds = %originalBB268
  br label %749

749:                                              ; preds = %originalBBpart2270, %originalBBpart2266
  %750 = load i32, i32* @x.3
  %751 = load i32, i32* @y.4
  %752 = sub i32 %750, 1
  %753 = mul i32 %750, %752
  %754 = urem i32 %753, 2
  %755 = icmp eq i32 %754, 0
  %756 = icmp slt i32 %751, 10
  %757 = or i1 %755, %756
  br i1 %757, label %originalBB272, label %originalBB272alteredBB

originalBB272:                                    ; preds = %749, %originalBB272alteredBB
  %758 = load i8**, i8*** @inVal1
  %759 = getelementptr inbounds i8*, i8** %758, i64 1
  %760 = load i8*, i8** %759
  %controle2 = call i32 @controle(i8* %760, i32 -1)
  store i32 %controle2, i32* %collatzVar1
  %761 = load i32, i32* @x.3
  %762 = load i32, i32* @y.4
  %763 = sub i32 %761, 1
  %764 = mul i32 %761, %763
  %765 = urem i32 %764, 2
  %766 = icmp eq i32 %765, 0
  %767 = icmp slt i32 %762, 10
  %768 = or i1 %766, %767
  br i1 %768, label %originalBBpart2274, label %originalBB272alteredBB

originalBBpart2274:                               ; preds = %originalBB272
  br label %769

769:                                              ; preds = %originalBBpart2331, %originalBBpart2317, %originalBBpart2274
  %770 = load i32, i32* @x.3
  %771 = load i32, i32* @y.4
  %772 = sub i32 %770, 1
  %773 = mul i32 %770, %772
  %774 = urem i32 %773, 2
  %775 = icmp eq i32 %774, 0
  %776 = icmp slt i32 %771, 10
  %777 = or i1 %775, %776
  br i1 %777, label %originalBB276, label %originalBB276alteredBB

originalBB276:                                    ; preds = %769, %originalBB276alteredBB
  %778 = load i32, i32* %collatzVar1
  %779 = icmp sgt i32 %778, 1
  %780 = load i32, i32* @x.3
  %781 = load i32, i32* @y.4
  %782 = sub i32 %780, 1
  %783 = mul i32 %780, %782
  %784 = urem i32 %783, 2
  %785 = icmp eq i32 %784, 0
  %786 = icmp slt i32 %781, 10
  %787 = or i1 %785, %786
  br i1 %787, label %originalBBpart2278, label %originalBB276alteredBB

originalBBpart2278:                               ; preds = %originalBB276
  br i1 %779, label %788, label %890

788:                                              ; preds = %originalBBpart2278
  %789 = load i32, i32* @x.3
  %790 = load i32, i32* @y.4
  %791 = sub i32 %789, 1
  %792 = mul i32 %789, %791
  %793 = urem i32 %792, 2
  %794 = icmp eq i32 %793, 0
  %795 = icmp slt i32 %790, 10
  %796 = or i1 %794, %795
  br i1 %796, label %originalBB280, label %originalBB280alteredBB

originalBB280:                                    ; preds = %788, %originalBB280alteredBB
  %797 = load i32, i32* %collatzVar1
  %798 = srem i32 %797, 2
  %799 = icmp eq i32 %798, 0
  %800 = load i32, i32* @x.3
  %801 = load i32, i32* @y.4
  %802 = sub i32 %800, 1
  %803 = mul i32 %800, %802
  %804 = urem i32 %803, 2
  %805 = icmp eq i32 %804, 0
  %806 = icmp slt i32 %801, 10
  %807 = or i1 %805, %806
  br i1 %807, label %originalBBpart2292, label %originalBB280alteredBB

originalBBpart2292:                               ; preds = %originalBB280
  br i1 %799, label %808, label %827

808:                                              ; preds = %originalBBpart2292
  %809 = load i32, i32* @x.3
  %810 = load i32, i32* @y.4
  %811 = sub i32 %809, 1
  %812 = mul i32 %809, %811
  %813 = urem i32 %812, 2
  %814 = icmp eq i32 %813, 0
  %815 = icmp slt i32 %810, 10
  %816 = or i1 %814, %815
  br i1 %816, label %originalBB294, label %originalBB294alteredBB

originalBB294:                                    ; preds = %808, %originalBB294alteredBB
  %817 = load i32, i32* %collatzVar1
  %818 = sdiv i32 %817, 2
  store i32 %818, i32* %collatzVar1
  %819 = load i32, i32* @x.3
  %820 = load i32, i32* @y.4
  %821 = sub i32 %819, 1
  %822 = mul i32 %819, %821
  %823 = urem i32 %822, 2
  %824 = icmp eq i32 %823, 0
  %825 = icmp slt i32 %820, 10
  %826 = or i1 %824, %825
  br i1 %826, label %originalBBpart2310, label %originalBB294alteredBB

originalBBpart2310:                               ; preds = %originalBB294
  br label %831

827:                                              ; preds = %originalBBpart2292
  %828 = load i32, i32* %collatzVar1
  %829 = mul i32 %828, 3
  %830 = add i32 %829, 1
  store i32 %830, i32* %collatzVar1
  br label %831

831:                                              ; preds = %827, %originalBBpart2310
  %832 = load i32, i32* @x.3
  %833 = load i32, i32* @y.4
  %834 = sub i32 %832, 1
  %835 = mul i32 %832, %834
  %836 = urem i32 %835, 2
  %837 = icmp eq i32 %836, 0
  %838 = icmp slt i32 %833, 10
  %839 = or i1 %837, %838
  br i1 %839, label %originalBB312, label %originalBB312alteredBB

originalBB312:                                    ; preds = %831, %originalBB312alteredBB
  %840 = load i32, i32* %collatzVar1
  %841 = sub i32 %687, %840
  %842 = icmp sgt i32 %841, -3
  %843 = load i32, i32* @x.3
  %844 = load i32, i32* @y.4
  %845 = sub i32 %843, 1
  %846 = mul i32 %843, %845
  %847 = urem i32 %846, 2
  %848 = icmp eq i32 %847, 0
  %849 = icmp slt i32 %844, 10
  %850 = or i1 %848, %849
  br i1 %850, label %originalBBpart2317, label %originalBB312alteredBB

originalBBpart2317:                               ; preds = %originalBB312
  br i1 %842, label %851, label %769

851:                                              ; preds = %originalBBpart2317
  %852 = load i32, i32* @x.3
  %853 = load i32, i32* @y.4
  %854 = sub i32 %852, 1
  %855 = mul i32 %852, %854
  %856 = urem i32 %855, 2
  %857 = icmp eq i32 %856, 0
  %858 = icmp slt i32 %853, 10
  %859 = or i1 %857, %858
  br i1 %859, label %originalBB319, label %originalBB319alteredBB

originalBB319:                                    ; preds = %851, %originalBB319alteredBB
  %860 = load i32, i32* %collatzVar1
  %861 = add i32 %687, %860
  %862 = icmp slt i32 %861, 1
  %863 = load i32, i32* @x.3
  %864 = load i32, i32* @y.4
  %865 = sub i32 %863, 1
  %866 = mul i32 %863, %865
  %867 = urem i32 %866, 2
  %868 = icmp eq i32 %867, 0
  %869 = icmp slt i32 %864, 10
  %870 = or i1 %868, %869
  br i1 %870, label %originalBBpart2331, label %originalBB319alteredBB

originalBBpart2331:                               ; preds = %originalBB319
  br i1 %862, label %871, label %769

871:                                              ; preds = %originalBBpart2331
  %872 = load i32, i32* @x.3
  %873 = load i32, i32* @y.4
  %874 = sub i32 %872, 1
  %875 = mul i32 %872, %874
  %876 = urem i32 %875, 2
  %877 = icmp eq i32 %876, 0
  %878 = icmp slt i32 %873, 10
  %879 = or i1 %877, %878
  br i1 %879, label %originalBB333, label %originalBB333alteredBB

originalBB333:                                    ; preds = %871, %originalBB333alteredBB
  %880 = load i8*, i8** %16, align 8, !dbg !452
  %881 = icmp eq i8* %880, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !453
  %882 = load i32, i32* @x.3
  %883 = load i32, i32* @y.4
  %884 = sub i32 %882, 1
  %885 = mul i32 %882, %884
  %886 = urem i32 %885, 2
  %887 = icmp eq i32 %886, 0
  %888 = icmp slt i32 %883, 10
  %889 = or i1 %887, %888
  br i1 %889, label %originalBBpart2335, label %originalBB333alteredBB

originalBBpart2335:                               ; preds = %originalBB333
  br i1 %881, label %892, label %890, !dbg !454

890:                                              ; preds = %originalBBpart2335, %originalBBpart2278
  %891 = load i8*, i8** %16, align 8, !dbg !455
  call void @print_element(i8* %891), !dbg !456
  br label %892, !dbg !456

892:                                              ; preds = %890, %originalBBpart2335
  br label %893, !dbg !457

893:                                              ; preds = %892, %originalBBpart2254
  %894 = load i32, i32* @x.3
  %895 = load i32, i32* @y.4
  %896 = sub i32 %894, 1
  %897 = mul i32 %894, %896
  %898 = urem i32 %897, 2
  %899 = icmp eq i32 %898, 0
  %900 = icmp slt i32 %895, 10
  %901 = or i1 %899, %900
  br i1 %901, label %originalBB337, label %originalBB337alteredBB

originalBB337:                                    ; preds = %893, %originalBB337alteredBB
  %902 = load i32, i32* %14, align 4, !dbg !458
  %903 = and i32 %902, 64, !dbg !460
  %904 = icmp ne i32 %903, 0, !dbg !460
  %905 = load i32, i32* @x.3
  %906 = load i32, i32* @y.4
  %907 = sub i32 %905, 1
  %908 = mul i32 %905, %907
  %909 = urem i32 %908, 2
  %910 = icmp eq i32 %909, 0
  %911 = icmp slt i32 %906, 10
  %912 = or i1 %910, %911
  br i1 %912, label %originalBBpart2353, label %originalBB337alteredBB

originalBBpart2353:                               ; preds = %originalBB337
  br i1 %904, label %913, label %1128, !dbg !461

913:                                              ; preds = %originalBBpart2353
  call void @llvm.dbg.declare(metadata i8** %17, metadata !462, metadata !DIExpression()), !dbg !464
  %914 = load i32, i32* @x.3
  %915 = load i32, i32* @y.4
  %916 = sub i32 %914, 1
  %917 = mul i32 %914, %916
  %918 = urem i32 %917, 2
  %919 = icmp eq i32 %918, 0
  %920 = icmp slt i32 %915, 10
  %921 = or i1 %919, %920
  br i1 %921, label %originalBB355, label %originalBB355alteredBB

originalBB355:                                    ; preds = %913, %originalBB355alteredBB
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %17, align 8, !dbg !464
  %922 = load i32, i32* %14, align 4, !dbg !465
  %923 = load i32, i32* @x.3
  %924 = load i32, i32* @y.4
  %925 = sub i32 %923, 1
  %926 = mul i32 %923, %925
  %927 = urem i32 %926, 2
  %928 = icmp eq i32 %927, 0
  %929 = icmp slt i32 %924, 10
  %930 = or i1 %928, %929
  br i1 %930, label %originalBBpart2357, label %originalBB355alteredBB

originalBBpart2357:                               ; preds = %originalBB355
  br label %931, !dbg !467

931:                                              ; preds = %originalBBpart2357
  %932 = load i32, i32* @x.3
  %933 = load i32, i32* @y.4
  %934 = sub i32 %932, 1
  %935 = mul i32 %932, %934
  %936 = urem i32 %935, 2
  %937 = icmp eq i32 %936, 0
  %938 = icmp slt i32 %933, 10
  %939 = or i1 %937, %938
  br i1 %939, label %originalBB359, label %originalBB359alteredBB

originalBB359:                                    ; preds = %931, %originalBB359alteredBB
  %collatzVar3 = alloca i32
  %940 = load i32, i32* @x.3
  %941 = load i32, i32* @y.4
  %942 = sub i32 %940, 1
  %943 = mul i32 %940, %942
  %944 = urem i32 %943, 2
  %945 = icmp eq i32 %944, 0
  %946 = icmp slt i32 %941, 10
  %947 = or i1 %945, %946
  br i1 %947, label %originalBBpart2361, label %originalBB359alteredBB

originalBBpart2361:                               ; preds = %originalBB359
  br label %948

948:                                              ; preds = %originalBBpart2361
  %949 = load i32, i32* @inVal0
  %950 = icmp sgt i32 %949, 1
  br i1 %950, label %968, label %951

951:                                              ; preds = %948
  %952 = load i32, i32* @x.3
  %953 = load i32, i32* @y.4
  %954 = sub i32 %952, 1
  %955 = mul i32 %952, %954
  %956 = urem i32 %955, 2
  %957 = icmp eq i32 %956, 0
  %958 = icmp slt i32 %953, 10
  %959 = or i1 %957, %958
  br i1 %959, label %originalBB363, label %originalBB363alteredBB

originalBB363:                                    ; preds = %951, %originalBB363alteredBB
  store i32 89, i32* %collatzVar3
  %960 = load i32, i32* @x.3
  %961 = load i32, i32* @y.4
  %962 = sub i32 %960, 1
  %963 = mul i32 %960, %962
  %964 = urem i32 %963, 2
  %965 = icmp eq i32 %964, 0
  %966 = icmp slt i32 %961, 10
  %967 = or i1 %965, %966
  br i1 %967, label %originalBBpart2365, label %originalBB363alteredBB

originalBBpart2365:                               ; preds = %originalBB363
  br label %968

968:                                              ; preds = %originalBBpart2365, %948
  %969 = load i32, i32* @x.3
  %970 = load i32, i32* @y.4
  %971 = sub i32 %969, 1
  %972 = mul i32 %969, %971
  %973 = urem i32 %972, 2
  %974 = icmp eq i32 %973, 0
  %975 = icmp slt i32 %970, 10
  %976 = or i1 %974, %975
  br i1 %976, label %originalBB367, label %originalBB367alteredBB

originalBB367:                                    ; preds = %968, %originalBB367alteredBB
  %977 = load i8**, i8*** @inVal1
  %978 = getelementptr inbounds i8*, i8** %977, i64 1
  %979 = load i8*, i8** %978
  %controle4 = call i32 @controle(i8* %979, i32 -1)
  store i32 %controle4, i32* %collatzVar3
  %980 = load i32, i32* @x.3
  %981 = load i32, i32* @y.4
  %982 = sub i32 %980, 1
  %983 = mul i32 %980, %982
  %984 = urem i32 %983, 2
  %985 = icmp eq i32 %984, 0
  %986 = icmp slt i32 %981, 10
  %987 = or i1 %985, %986
  br i1 %987, label %originalBBpart2369, label %originalBB367alteredBB

originalBBpart2369:                               ; preds = %originalBB367
  br label %988

988:                                              ; preds = %1086, %originalBBpart2423, %originalBBpart2369
  %989 = load i32, i32* @x.3
  %990 = load i32, i32* @y.4
  %991 = sub i32 %989, 1
  %992 = mul i32 %989, %991
  %993 = urem i32 %992, 2
  %994 = icmp eq i32 %993, 0
  %995 = icmp slt i32 %990, 10
  %996 = or i1 %994, %995
  br i1 %996, label %originalBB371, label %originalBB371alteredBB

originalBB371:                                    ; preds = %988, %originalBB371alteredBB
  %997 = load i32, i32* %collatzVar3
  %998 = icmp sgt i32 %997, 1
  %999 = load i32, i32* @x.3
  %1000 = load i32, i32* @y.4
  %1001 = sub i32 %999, 1
  %1002 = mul i32 %999, %1001
  %1003 = urem i32 %1002, 2
  %1004 = icmp eq i32 %1003, 0
  %1005 = icmp slt i32 %1000, 10
  %1006 = or i1 %1004, %1005
  br i1 %1006, label %originalBBpart2373, label %originalBB371alteredBB

originalBBpart2373:                               ; preds = %originalBB371
  br i1 %998, label %1007, label %1093

1007:                                             ; preds = %originalBBpart2373
  %1008 = load i32, i32* @x.3
  %1009 = load i32, i32* @y.4
  %1010 = sub i32 %1008, 1
  %1011 = mul i32 %1008, %1010
  %1012 = urem i32 %1011, 2
  %1013 = icmp eq i32 %1012, 0
  %1014 = icmp slt i32 %1009, 10
  %1015 = or i1 %1013, %1014
  br i1 %1015, label %originalBB375, label %originalBB375alteredBB

originalBB375:                                    ; preds = %1007, %originalBB375alteredBB
  %1016 = load i32, i32* %collatzVar3
  %1017 = srem i32 %1016, 2
  %1018 = icmp eq i32 %1017, 0
  %1019 = load i32, i32* @x.3
  %1020 = load i32, i32* @y.4
  %1021 = sub i32 %1019, 1
  %1022 = mul i32 %1019, %1021
  %1023 = urem i32 %1022, 2
  %1024 = icmp eq i32 %1023, 0
  %1025 = icmp slt i32 %1020, 10
  %1026 = or i1 %1024, %1025
  br i1 %1026, label %originalBBpart2384, label %originalBB375alteredBB

originalBBpart2384:                               ; preds = %originalBB375
  br i1 %1018, label %1027, label %1046

1027:                                             ; preds = %originalBBpart2384
  %1028 = load i32, i32* @x.3
  %1029 = load i32, i32* @y.4
  %1030 = sub i32 %1028, 1
  %1031 = mul i32 %1028, %1030
  %1032 = urem i32 %1031, 2
  %1033 = icmp eq i32 %1032, 0
  %1034 = icmp slt i32 %1029, 10
  %1035 = or i1 %1033, %1034
  br i1 %1035, label %originalBB386, label %originalBB386alteredBB

originalBB386:                                    ; preds = %1027, %originalBB386alteredBB
  %1036 = load i32, i32* %collatzVar3
  %1037 = sdiv i32 %1036, 2
  store i32 %1037, i32* %collatzVar3
  %1038 = load i32, i32* @x.3
  %1039 = load i32, i32* @y.4
  %1040 = sub i32 %1038, 1
  %1041 = mul i32 %1038, %1040
  %1042 = urem i32 %1041, 2
  %1043 = icmp eq i32 %1042, 0
  %1044 = icmp slt i32 %1039, 10
  %1045 = or i1 %1043, %1044
  br i1 %1045, label %originalBBpart2398, label %originalBB386alteredBB

originalBBpart2398:                               ; preds = %originalBB386
  br label %1066

1046:                                             ; preds = %originalBBpart2384
  %1047 = load i32, i32* @x.3
  %1048 = load i32, i32* @y.4
  %1049 = sub i32 %1047, 1
  %1050 = mul i32 %1047, %1049
  %1051 = urem i32 %1050, 2
  %1052 = icmp eq i32 %1051, 0
  %1053 = icmp slt i32 %1048, 10
  %1054 = or i1 %1052, %1053
  br i1 %1054, label %originalBB400, label %originalBB400alteredBB

originalBB400:                                    ; preds = %1046, %originalBB400alteredBB
  %1055 = load i32, i32* %collatzVar3
  %1056 = mul i32 %1055, 3
  %1057 = add i32 %1056, 1
  store i32 %1057, i32* %collatzVar3
  %1058 = load i32, i32* @x.3
  %1059 = load i32, i32* @y.4
  %1060 = sub i32 %1058, 1
  %1061 = mul i32 %1058, %1060
  %1062 = urem i32 %1061, 2
  %1063 = icmp eq i32 %1062, 0
  %1064 = icmp slt i32 %1059, 10
  %1065 = or i1 %1063, %1064
  br i1 %1065, label %originalBBpart2419, label %originalBB400alteredBB

originalBBpart2419:                               ; preds = %originalBB400
  br label %1066

1066:                                             ; preds = %originalBBpart2419, %originalBBpart2398
  %1067 = load i32, i32* @x.3
  %1068 = load i32, i32* @y.4
  %1069 = sub i32 %1067, 1
  %1070 = mul i32 %1067, %1069
  %1071 = urem i32 %1070, 2
  %1072 = icmp eq i32 %1071, 0
  %1073 = icmp slt i32 %1068, 10
  %1074 = or i1 %1072, %1073
  br i1 %1074, label %originalBB421, label %originalBB421alteredBB

originalBB421:                                    ; preds = %1066, %originalBB421alteredBB
  %1075 = load i32, i32* %collatzVar3
  %1076 = sub i32 %922, %1075
  %1077 = icmp sgt i32 %1076, -3
  %1078 = load i32, i32* @x.3
  %1079 = load i32, i32* @y.4
  %1080 = sub i32 %1078, 1
  %1081 = mul i32 %1078, %1080
  %1082 = urem i32 %1081, 2
  %1083 = icmp eq i32 %1082, 0
  %1084 = icmp slt i32 %1079, 10
  %1085 = or i1 %1083, %1084
  br i1 %1085, label %originalBBpart2423, label %originalBB421alteredBB

originalBBpart2423:                               ; preds = %originalBB421
  br i1 %1077, label %1086, label %988

1086:                                             ; preds = %originalBBpart2423
  %1087 = load i32, i32* %collatzVar3
  %1088 = add i32 %922, %1087
  %1089 = icmp slt i32 %1088, 1
  br i1 %1089, label %1090, label %988

1090:                                             ; preds = %1086
  %1091 = load i8*, i8** %17, align 8, !dbg !468
  %1092 = icmp eq i8* %1091, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !469
  br i1 %1092, label %1111, label %1093, !dbg !470

1093:                                             ; preds = %1090, %originalBBpart2373
  %1094 = load i32, i32* @x.3
  %1095 = load i32, i32* @y.4
  %1096 = sub i32 %1094, 1
  %1097 = mul i32 %1094, %1096
  %1098 = urem i32 %1097, 2
  %1099 = icmp eq i32 %1098, 0
  %1100 = icmp slt i32 %1095, 10
  %1101 = or i1 %1099, %1100
  br i1 %1101, label %originalBB425, label %originalBB425alteredBB

originalBB425:                                    ; preds = %1093, %originalBB425alteredBB
  %1102 = load i8*, i8** %17, align 8, !dbg !471
  call void @print_element(i8* %1102), !dbg !472
  %1103 = load i32, i32* @x.3
  %1104 = load i32, i32* @y.4
  %1105 = sub i32 %1103, 1
  %1106 = mul i32 %1103, %1105
  %1107 = urem i32 %1106, 2
  %1108 = icmp eq i32 %1107, 0
  %1109 = icmp slt i32 %1104, 10
  %1110 = or i1 %1108, %1109
  br i1 %1110, label %originalBBpart2427, label %originalBB425alteredBB

originalBBpart2427:                               ; preds = %originalBB425
  br label %1111, !dbg !472

1111:                                             ; preds = %originalBBpart2427, %1090
  %1112 = load i32, i32* @x.3
  %1113 = load i32, i32* @y.4
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBB429, label %originalBB429alteredBB

originalBB429:                                    ; preds = %1111, %originalBB429alteredBB
  %1120 = load i32, i32* @x.3
  %1121 = load i32, i32* @y.4
  %1122 = sub i32 %1120, 1
  %1123 = mul i32 %1120, %1122
  %1124 = urem i32 %1123, 2
  %1125 = icmp eq i32 %1124, 0
  %1126 = icmp slt i32 %1121, 10
  %1127 = or i1 %1125, %1126
  br i1 %1127, label %originalBBpart2431, label %originalBB429alteredBB

originalBBpart2431:                               ; preds = %originalBB429
  br label %1128, !dbg !473

1128:                                             ; preds = %originalBBpart2431, %originalBBpart2353
  %1129 = load i32, i32* @x.3
  %1130 = load i32, i32* @y.4
  %1131 = sub i32 %1129, 1
  %1132 = mul i32 %1129, %1131
  %1133 = urem i32 %1132, 2
  %1134 = icmp eq i32 %1133, 0
  %1135 = icmp slt i32 %1130, 10
  %1136 = or i1 %1134, %1135
  br i1 %1136, label %originalBB433, label %originalBB433alteredBB

originalBB433:                                    ; preds = %1128, %originalBB433alteredBB
  %1137 = load i32, i32* %14, align 4, !dbg !474
  %1138 = and i32 %1137, 128, !dbg !476
  %1139 = icmp ne i32 %1138, 0, !dbg !476
  %1140 = load i32, i32* @x.3
  %1141 = load i32, i32* @y.4
  %1142 = sub i32 %1140, 1
  %1143 = mul i32 %1140, %1142
  %1144 = urem i32 %1143, 2
  %1145 = icmp eq i32 %1144, 0
  %1146 = icmp slt i32 %1141, 10
  %1147 = or i1 %1145, %1146
  br i1 %1147, label %originalBBpart2445, label %originalBB433alteredBB

originalBBpart2445:                               ; preds = %originalBB433
  br i1 %1139, label %1148, label %1165, !dbg !477

1148:                                             ; preds = %originalBBpart2445
  %1149 = load i32, i32* @x.3
  %1150 = load i32, i32* @y.4
  %1151 = sub i32 %1149, 1
  %1152 = mul i32 %1149, %1151
  %1153 = urem i32 %1152, 2
  %1154 = icmp eq i32 %1153, 0
  %1155 = icmp slt i32 %1150, 10
  %1156 = or i1 %1154, %1155
  br i1 %1156, label %originalBB447, label %originalBB447alteredBB

originalBB447:                                    ; preds = %1148, %originalBB447alteredBB
  call void @print_element(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0)), !dbg !478
  %1157 = load i32, i32* @x.3
  %1158 = load i32, i32* @y.4
  %1159 = sub i32 %1157, 1
  %1160 = mul i32 %1157, %1159
  %1161 = urem i32 %1160, 2
  %1162 = icmp eq i32 %1161, 0
  %1163 = icmp slt i32 %1158, 10
  %1164 = or i1 %1162, %1163
  br i1 %1164, label %originalBBpart2449, label %originalBB447alteredBB

originalBBpart2449:                               ; preds = %originalBB447
  br label %1165, !dbg !478

1165:                                             ; preds = %originalBBpart2449, %originalBBpart2445
  %1166 = load i32, i32* @x.3
  %1167 = load i32, i32* @y.4
  %1168 = sub i32 %1166, 1
  %1169 = mul i32 %1166, %1168
  %1170 = urem i32 %1169, 2
  %1171 = icmp eq i32 %1170, 0
  %1172 = icmp slt i32 %1167, 10
  %1173 = or i1 %1171, %1172
  br i1 %1173, label %originalBB451, label %originalBB451alteredBB

originalBB451:                                    ; preds = %1165, %originalBB451alteredBB
  %1174 = call i32 @putchar_unlocked(i32 10), !dbg !479
  %1175 = load i32, i32* @x.3
  %1176 = load i32, i32* @y.4
  %1177 = sub i32 %1175, 1
  %1178 = mul i32 %1175, %1177
  %1179 = urem i32 %1178, 2
  %1180 = icmp eq i32 %1179, 0
  %1181 = icmp slt i32 %1176, 10
  %1182 = or i1 %1180, %1181
  br i1 %1182, label %originalBBpart2453, label %originalBB451alteredBB

originalBBpart2453:                               ; preds = %originalBB451
  ret i32 0, !dbg !480

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %1183 = alloca i32, align 4
  %1184 = alloca i32, align 4
  %1185 = alloca i8**, align 8
  %1186 = alloca i32, align 4
  %1187 = alloca %struct.utsname, align 1
  %1188 = alloca i8*, align 8
  %1189 = alloca i8*, align 8
  store i32 0, i32* %1183, align 4
  store i32 %0, i32* %1184, align 4
  call void @llvm.dbg.declare(metadata i32* %1184, metadata !481, metadata !DIExpression()), !dbg !363
  store i8** %1, i8*** %1185, align 8
  call void @llvm.dbg.declare(metadata i8*** %1185, metadata !503, metadata !DIExpression()), !dbg !365
  call void @llvm.dbg.declare(metadata i32* %1186, metadata !504, metadata !DIExpression()), !dbg !367
  store i32 0, i32* %1186, align 4, !dbg !367
  %1190 = load i8**, i8*** %1185, align 8, !dbg !368
  %1191 = getelementptr inbounds i8*, i8** %1190, i64 0, !dbg !368
  %1192 = load i8*, i8** %1191, align 8, !dbg !368
  call void @set_program_name(i8* %1192), !dbg !369
  %1193 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !370
  %1194 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !371
  %1195 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !372
  %1196 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !373
  %1197 = load i32, i32* %1184, align 4, !dbg !374
  %1198 = load i8**, i8*** %1185, align 8, !dbg !375
  %1199 = call i32 @decode_switches(i32 %1197, i8** %1198), !dbg !376
  store i32 %1199, i32* %1186, align 4, !dbg !377
  %1200 = load i32, i32* %1186, align 4, !dbg !378
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %collatzVaralteredBB = alloca i32
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  %1201 = load i32, i32* @inVal0
  %1202 = icmp sgt i32 %1201, 1
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %73
  store i32 49, i32* %collatzVar
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %90
  %1203 = load i8**, i8*** @inVal1
  %1204 = getelementptr inbounds i8*, i8** %1203, i64 1
  %1205 = load i8*, i8** %1204
  %controlealteredBB = call i32 @controle(i8* %1205, i32 0)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %1206 = load i32, i32* %collatzVar
  %1207 = icmp sgt i32 %1206, 1
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %129
  %1208 = load i32, i32* %collatzVar
  %_ = sub i32 0, %1208
  %gen = add i32 %_, 2
  %_23 = sub i32 %1208, 2
  %gen24 = mul i32 %_23, 2
  %_25 = sub i32 0, %1208
  %gen26 = add i32 %_25, 2
  %_27 = shl i32 %1208, 2
  %1209 = srem i32 %1208, 2
  %1210 = icmp eq i32 %1209, 0
  br label %originalBB22

originalBB31alteredBB:                            ; preds = %originalBB31, %149
  %1211 = load i32, i32* %collatzVar
  %_32 = shl i32 %1211, 2
  %_33 = sub i32 0, %1211
  %gen34 = add i32 %_33, 2
  %_35 = sub i32 0, %1211
  %gen36 = add i32 %_35, 2
  %1212 = sdiv i32 %1211, 2
  store i32 %1212, i32* %collatzVar
  br label %originalBB31

originalBB40alteredBB:                            ; preds = %originalBB40, %168
  %1213 = load i32, i32* %collatzVar
  %_41 = shl i32 %1213, 3
  %_42 = sub i32 %1213, 3
  %gen43 = mul i32 %_42, 3
  %_44 = sub i32 0, %1213
  %gen45 = add i32 %_44, 3
  %_46 = sub i32 %1213, 3
  %gen47 = mul i32 %_46, 3
  %_48 = shl i32 %1213, 3
  %_49 = shl i32 %1213, 3
  %1214 = mul i32 %1213, 3
  %_50 = sub i32 %1214, 1
  %gen51 = mul i32 %_50, 1
  %_52 = sub i32 %1214, 1
  %gen53 = mul i32 %_52, 1
  %1215 = add i32 %1214, 1
  store i32 %1215, i32* %collatzVar
  br label %originalBB40

originalBB57alteredBB:                            ; preds = %originalBB57, %192
  %1216 = load i32, i32* %collatzVar
  %_58 = sub i32 %28, %1216
  %gen59 = mul i32 %_58, %1216
  %_60 = sub i32 0, %28
  %gen61 = add i32 %_60, %1216
  %_62 = sub i32 0, %28
  %gen63 = add i32 %_62, %1216
  %_64 = sub i32 %28, %1216
  %gen65 = mul i32 %_64, %1216
  %1217 = add i32 %28, %1216
  %1218 = icmp slt i32 %1217, 2
  br label %originalBB57

originalBB69alteredBB:                            ; preds = %originalBB69, %212
  store i32 1, i32* %14, align 4, !dbg !381
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %229
  %1219 = load i32, i32* %14, align 4, !dbg !383
  %_74 = sub i32 %1219, 31
  %gen75 = mul i32 %_74, 31
  %_76 = shl i32 %1219, 31
  %_77 = sub i32 %1219, 31
  %gen78 = mul i32 %_77, 31
  %_79 = shl i32 %1219, 31
  %1220 = and i32 %1219, 31, !dbg !385
  %1221 = icmp ne i32 %1220, 0, !dbg !385
  br label %originalBB73

originalBB83alteredBB:                            ; preds = %originalBB83, %249
  %1222 = call i32 @uname(%struct.utsname* %15) #10, !dbg !402
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %267
  %collatzVar5alteredBB = alloca i32
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %284
  %1223 = load i32, i32* @inVal0
  %1224 = icmp sgt i32 %1223, 1
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %303
  store i32 28, i32* %collatzVar5
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %320
  %1225 = load i8**, i8*** @inVal1
  %1226 = getelementptr inbounds i8*, i8** %1225, i64 1
  %1227 = load i8*, i8** %1226
  %controle6alteredBB = call i32 @controle(i8* %1227, i32 -1)
  store i32 %controle6alteredBB, i32* %collatzVar5
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %340
  %1228 = load i32, i32* %collatzVar5
  %1229 = icmp sgt i32 %1228, 1
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %359
  %1230 = load i32, i32* %collatzVar5
  %_108 = sub i32 0, %1230
  %gen109 = add i32 %_108, 2
  %1231 = srem i32 %1230, 2
  %1232 = icmp eq i32 %1231, 0
  br label %originalBB107

originalBB113alteredBB:                           ; preds = %originalBB113, %382
  %1233 = load i32, i32* %collatzVar5
  %_114 = sub i32 %1233, 3
  %gen115 = mul i32 %_114, 3
  %1234 = mul i32 %1233, 3
  %_116 = shl i32 %1234, 1
  %_117 = sub i32 0, %1234
  %gen118 = add i32 %_117, 1
  %_119 = shl i32 %1234, 1
  %_120 = shl i32 %1234, 1
  %_121 = shl i32 %1234, 1
  %_122 = sub i32 %1234, 1
  %gen123 = mul i32 %_122, 1
  %_124 = sub i32 0, %1234
  %gen125 = add i32 %_124, 1
  %1235 = add i32 %1234, 1
  store i32 %1235, i32* %collatzVar5
  br label %originalBB113

originalBB129alteredBB:                           ; preds = %originalBB129, %402
  %1236 = load i32, i32* %collatzVar5
  %_130 = shl i32 %258, %1236
  %_131 = sub i32 %258, %1236
  %gen132 = mul i32 %_131, %1236
  %_133 = sub i32 %258, %1236
  %gen134 = mul i32 %_133, %1236
  %_135 = sub i32 %258, %1236
  %gen136 = mul i32 %_135, %1236
  %_137 = sub i32 0, %258
  %gen138 = add i32 %_137, %1236
  %_139 = sub i32 0, %258
  %gen140 = add i32 %_139, %1236
  %_141 = shl i32 %258, %1236
  %1237 = sub i32 %258, %1236
  %1238 = icmp sgt i32 %1237, -3
  br label %originalBB129

originalBB145alteredBB:                           ; preds = %originalBB145, %422
  %1239 = load i32, i32* %collatzVar5
  %_146 = sub i32 0, %258
  %gen147 = add i32 %_146, %1239
  %_148 = sub i32 %258, %1239
  %gen149 = mul i32 %_148, %1239
  %_150 = shl i32 %258, %1239
  %_151 = shl i32 %258, %1239
  %_152 = shl i32 %258, %1239
  %_153 = sub i32 %258, %1239
  %gen154 = mul i32 %_153, %1239
  %1240 = add i32 %258, %1239
  %1241 = icmp slt i32 %1240, 1
  br label %originalBB145

originalBB158alteredBB:                           ; preds = %originalBB158, %442
  %1242 = call i32* @__errno_location() #14, !dbg !405
  %1243 = load i32, i32* %1242, align 4, !dbg !405
  %1244 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !405
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1243, i8* %1244), !dbg !405
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %462
  %1245 = load i32, i32* %14, align 4, !dbg !406
  %_163 = shl i32 %1245, 1
  %_164 = sub i32 %1245, 1
  %gen165 = mul i32 %_164, 1
  %_166 = sub i32 0, %1245
  %gen167 = add i32 %_166, 1
  %_168 = sub i32 %1245, 1
  %gen169 = mul i32 %_168, 1
  %_170 = sub i32 0, %1245
  %gen171 = add i32 %_170, 1
  %_172 = shl i32 %1245, 1
  %_173 = sub i32 %1245, 1
  %gen174 = mul i32 %_173, 1
  %1246 = and i32 %1245, 1, !dbg !408
  %1247 = icmp ne i32 %1246, 0, !dbg !408
  br label %originalBB162

originalBB178alteredBB:                           ; preds = %originalBB178, %482
  %1248 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 0, !dbg !410
  %1249 = getelementptr inbounds [65 x i8], [65 x i8]* %1248, i64 0, i64 0, !dbg !411
  call void @print_element(i8* %1249), !dbg !412
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %501
  %1250 = load i32, i32* %14, align 4, !dbg !413
  %_183 = shl i32 %1250, 2
  %_184 = sub i32 0, %1250
  %gen185 = add i32 %_184, 2
  %_186 = sub i32 0, %1250
  %gen187 = add i32 %_186, 2
  %_188 = shl i32 %1250, 2
  %_189 = shl i32 %1250, 2
  %_190 = shl i32 %1250, 2
  %_191 = shl i32 %1250, 2
  %1251 = and i32 %1250, 2, !dbg !415
  %1252 = icmp ne i32 %1251, 0, !dbg !415
  br label %originalBB182

originalBB195alteredBB:                           ; preds = %originalBB195, %524
  %1253 = load i32, i32* %14, align 4, !dbg !420
  %_196 = shl i32 %1253, 4
  %1254 = and i32 %1253, 4, !dbg !422
  %1255 = icmp ne i32 %1254, 0, !dbg !422
  br label %originalBB195

originalBB200alteredBB:                           ; preds = %originalBB200, %544
  %1256 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 2, !dbg !424
  %1257 = getelementptr inbounds [65 x i8], [65 x i8]* %1256, i64 0, i64 0, !dbg !425
  call void @print_element(i8* %1257), !dbg !426
  br label %originalBB200

originalBB204alteredBB:                           ; preds = %originalBB204, %563
  %1258 = load i32, i32* %14, align 4, !dbg !427
  %_205 = sub i32 %1258, 8
  %gen206 = mul i32 %_205, 8
  %_207 = sub i32 %1258, 8
  %gen208 = mul i32 %_207, 8
  %1259 = and i32 %1258, 8, !dbg !429
  %1260 = icmp ne i32 %1259, 0, !dbg !429
  br label %originalBB204

originalBB212alteredBB:                           ; preds = %originalBB212, %583
  %1261 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 3, !dbg !431
  %1262 = getelementptr inbounds [65 x i8], [65 x i8]* %1261, i64 0, i64 0, !dbg !432
  call void @print_element(i8* %1262), !dbg !433
  br label %originalBB212

originalBB217alteredBB:                           ; preds = %originalBB217, %602
  %1263 = load i32, i32* %14, align 4, !dbg !434
  %_218 = shl i32 %1263, 16
  %_219 = sub i32 0, %1263
  %gen220 = add i32 %_219, 16
  %_221 = sub i32 %1263, 16
  %gen222 = mul i32 %_221, 16
  %_223 = shl i32 %1263, 16
  %_224 = sub i32 %1263, 16
  %gen225 = mul i32 %_224, 16
  %_226 = shl i32 %1263, 16
  %_227 = sub i32 %1263, 16
  %gen228 = mul i32 %_227, 16
  %_229 = sub i32 0, %1263
  %gen230 = add i32 %_229, 16
  %_231 = sub i32 %1263, 16
  %gen232 = mul i32 %_231, 16
  %1264 = and i32 %1263, 16, !dbg !436
  %1265 = icmp ne i32 %1264, 0, !dbg !436
  br label %originalBB217

originalBB236alteredBB:                           ; preds = %originalBB236, %622
  %1266 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 4, !dbg !438
  %1267 = getelementptr inbounds [65 x i8], [65 x i8]* %1266, i64 0, i64 0, !dbg !439
  call void @print_element(i8* %1267), !dbg !440
  br label %originalBB236

originalBB240alteredBB:                           ; preds = %originalBB240, %641
  br label %originalBB240

originalBB244alteredBB:                           ; preds = %originalBB244, %658
  %1268 = load i32, i32* %14, align 4, !dbg !442
  %_245 = shl i32 %1268, 32
  %_246 = sub i32 %1268, 32
  %gen247 = mul i32 %_246, 32
  %_248 = sub i32 %1268, 32
  %gen249 = mul i32 %_248, 32
  %_250 = shl i32 %1268, 32
  %_251 = sub i32 0, %1268
  %gen252 = add i32 %_251, 32
  %1269 = and i32 %1268, 32, !dbg !444
  %1270 = icmp ne i32 %1269, 0, !dbg !444
  br label %originalBB244

originalBB256alteredBB:                           ; preds = %originalBB256, %678
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %16, align 8, !dbg !448
  %1271 = load i32, i32* %14, align 4, !dbg !449
  br label %originalBB256

originalBB260alteredBB:                           ; preds = %originalBB260, %696
  %collatzVar1alteredBB = alloca i32
  br label %originalBB260

originalBB264alteredBB:                           ; preds = %originalBB264, %713
  %1272 = load i32, i32* @inVal0
  %1273 = icmp sgt i32 %1272, 1
  br label %originalBB264

originalBB268alteredBB:                           ; preds = %originalBB268, %732
  store i32 59, i32* %collatzVar1
  br label %originalBB268

originalBB272alteredBB:                           ; preds = %originalBB272, %749
  %1274 = load i8**, i8*** @inVal1
  %1275 = getelementptr inbounds i8*, i8** %1274, i64 1
  %1276 = load i8*, i8** %1275
  %controle2alteredBB = call i32 @controle(i8* %1276, i32 -1)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB272

originalBB276alteredBB:                           ; preds = %originalBB276, %769
  %1277 = load i32, i32* %collatzVar1
  %1278 = icmp sgt i32 %1277, 1
  br label %originalBB276

originalBB280alteredBB:                           ; preds = %originalBB280, %788
  %1279 = load i32, i32* %collatzVar1
  %_281 = sub i32 0, %1279
  %gen282 = add i32 %_281, 2
  %_283 = sub i32 0, %1279
  %gen284 = add i32 %_283, 2
  %_285 = sub i32 %1279, 2
  %gen286 = mul i32 %_285, 2
  %_287 = shl i32 %1279, 2
  %_288 = sub i32 %1279, 2
  %gen289 = mul i32 %_288, 2
  %1280 = srem i32 %1279, 2
  %1281 = icmp eq i32 %1280, 0
  br label %originalBB280

originalBB294alteredBB:                           ; preds = %originalBB294, %808
  %1282 = load i32, i32* %collatzVar1
  %_295 = shl i32 %1282, 2
  %_296 = shl i32 %1282, 2
  %_297 = sub i32 %1282, 2
  %gen298 = mul i32 %_297, 2
  %_299 = sub i32 %1282, 2
  %gen300 = mul i32 %_299, 2
  %_301 = sub i32 0, %1282
  %gen302 = add i32 %_301, 2
  %_303 = sub i32 0, %1282
  %gen304 = add i32 %_303, 2
  %_305 = sub i32 %1282, 2
  %gen306 = mul i32 %_305, 2
  %_307 = sub i32 %1282, 2
  %gen308 = mul i32 %_307, 2
  %1283 = sdiv i32 %1282, 2
  store i32 %1283, i32* %collatzVar1
  br label %originalBB294

originalBB312alteredBB:                           ; preds = %originalBB312, %831
  %1284 = load i32, i32* %collatzVar1
  %_313 = sub i32 0, %687
  %gen314 = add i32 %_313, %1284
  %_315 = shl i32 %687, %1284
  %1285 = sub i32 %687, %1284
  %1286 = icmp sgt i32 %1285, -3
  br label %originalBB312

originalBB319alteredBB:                           ; preds = %originalBB319, %851
  %1287 = load i32, i32* %collatzVar1
  %_320 = sub i32 0, %687
  %gen321 = add i32 %_320, %1287
  %_322 = sub i32 %687, %1287
  %gen323 = mul i32 %_322, %1287
  %_324 = shl i32 %687, %1287
  %_325 = sub i32 %687, %1287
  %gen326 = mul i32 %_325, %1287
  %_327 = shl i32 %687, %1287
  %_328 = sub i32 0, %687
  %gen329 = add i32 %_328, %1287
  %1288 = add i32 %687, %1287
  %1289 = icmp slt i32 %1288, 1
  br label %originalBB319

originalBB333alteredBB:                           ; preds = %originalBB333, %871
  %1290 = load i8*, i8** %16, align 8, !dbg !452
  %1291 = icmp eq i8* %1290, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !453
  br label %originalBB333

originalBB337alteredBB:                           ; preds = %originalBB337, %893
  %1292 = load i32, i32* %14, align 4, !dbg !458
  %_338 = sub i32 0, %1292
  %gen339 = add i32 %_338, 64
  %_340 = sub i32 0, %1292
  %gen341 = add i32 %_340, 64
  %_342 = sub i32 0, %1292
  %gen343 = add i32 %_342, 64
  %_344 = sub i32 0, %1292
  %gen345 = add i32 %_344, 64
  %_346 = sub i32 %1292, 64
  %gen347 = mul i32 %_346, 64
  %_348 = sub i32 %1292, 64
  %gen349 = mul i32 %_348, 64
  %_350 = sub i32 0, %1292
  %gen351 = add i32 %_350, 64
  %1293 = and i32 %1292, 64, !dbg !460
  %1294 = icmp ne i32 %1293, 0, !dbg !460
  br label %originalBB337

originalBB355alteredBB:                           ; preds = %originalBB355, %913
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %17, align 8, !dbg !464
  %1295 = load i32, i32* %14, align 4, !dbg !465
  br label %originalBB355

originalBB359alteredBB:                           ; preds = %originalBB359, %931
  %collatzVar3alteredBB = alloca i32
  br label %originalBB359

originalBB363alteredBB:                           ; preds = %originalBB363, %951
  store i32 89, i32* %collatzVar3
  br label %originalBB363

originalBB367alteredBB:                           ; preds = %originalBB367, %968
  %1296 = load i8**, i8*** @inVal1
  %1297 = getelementptr inbounds i8*, i8** %1296, i64 1
  %1298 = load i8*, i8** %1297
  %controle4alteredBB = call i32 @controle(i8* %1298, i32 -1)
  store i32 %controle4alteredBB, i32* %collatzVar3
  br label %originalBB367

originalBB371alteredBB:                           ; preds = %originalBB371, %988
  %1299 = load i32, i32* %collatzVar3
  %1300 = icmp sgt i32 %1299, 1
  br label %originalBB371

originalBB375alteredBB:                           ; preds = %originalBB375, %1007
  %1301 = load i32, i32* %collatzVar3
  %_376 = shl i32 %1301, 2
  %_377 = sub i32 0, %1301
  %gen378 = add i32 %_377, 2
  %_379 = shl i32 %1301, 2
  %_380 = sub i32 %1301, 2
  %gen381 = mul i32 %_380, 2
  %_382 = shl i32 %1301, 2
  %1302 = srem i32 %1301, 2
  %1303 = icmp eq i32 %1302, 0
  br label %originalBB375

originalBB386alteredBB:                           ; preds = %originalBB386, %1027
  %1304 = load i32, i32* %collatzVar3
  %_387 = sub i32 0, %1304
  %gen388 = add i32 %_387, 2
  %_389 = sub i32 0, %1304
  %gen390 = add i32 %_389, 2
  %_391 = sub i32 %1304, 2
  %gen392 = mul i32 %_391, 2
  %_393 = shl i32 %1304, 2
  %_394 = shl i32 %1304, 2
  %_395 = sub i32 0, %1304
  %gen396 = add i32 %_395, 2
  %1305 = sdiv i32 %1304, 2
  store i32 %1305, i32* %collatzVar3
  br label %originalBB386

originalBB400alteredBB:                           ; preds = %originalBB400, %1046
  %1306 = load i32, i32* %collatzVar3
  %_401 = sub i32 %1306, 3
  %gen402 = mul i32 %_401, 3
  %_403 = shl i32 %1306, 3
  %_404 = sub i32 %1306, 3
  %gen405 = mul i32 %_404, 3
  %_406 = sub i32 %1306, 3
  %gen407 = mul i32 %_406, 3
  %_408 = shl i32 %1306, 3
  %1307 = mul i32 %1306, 3
  %_409 = sub i32 0, %1307
  %gen410 = add i32 %_409, 1
  %_411 = sub i32 0, %1307
  %gen412 = add i32 %_411, 1
  %_413 = sub i32 0, %1307
  %gen414 = add i32 %_413, 1
  %_415 = sub i32 %1307, 1
  %gen416 = mul i32 %_415, 1
  %_417 = shl i32 %1307, 1
  %1308 = add i32 %1307, 1
  store i32 %1308, i32* %collatzVar3
  br label %originalBB400

originalBB421alteredBB:                           ; preds = %originalBB421, %1066
  %1309 = load i32, i32* %collatzVar3
  %1310 = sub i32 %922, %1309
  %1311 = icmp sgt i32 %1310, -3
  br label %originalBB421

originalBB425alteredBB:                           ; preds = %originalBB425, %1093
  %1312 = load i8*, i8** %17, align 8, !dbg !471
  call void @print_element(i8* %1312), !dbg !472
  br label %originalBB425

originalBB429alteredBB:                           ; preds = %originalBB429, %1111
  br label %originalBB429

originalBB433alteredBB:                           ; preds = %originalBB433, %1128
  %1313 = load i32, i32* %14, align 4, !dbg !474
  %_434 = sub i32 %1313, 128
  %gen435 = mul i32 %_434, 128
  %_436 = sub i32 0, %1313
  %gen437 = add i32 %_436, 128
  %_438 = sub i32 %1313, 128
  %gen439 = mul i32 %_438, 128
  %_440 = sub i32 0, %1313
  %gen441 = add i32 %_440, 128
  %_442 = sub i32 0, %1313
  %gen443 = add i32 %_442, 128
  %1314 = and i32 %1313, 128, !dbg !476
  %1315 = icmp ne i32 %1314, 0, !dbg !476
  br label %originalBB433

originalBB447alteredBB:                           ; preds = %originalBB447, %1148
  call void @print_element(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0)), !dbg !478
  br label %originalBB447

originalBB451alteredBB:                           ; preds = %originalBB451, %1165
  %1316 = call i32 @putchar_unlocked(i32 10), !dbg !479
  br label %originalBB451
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @decode_switches(i32, i8**) #4 !dbg !505 {
  %3 = load i32, i32* @x.5
  %4 = load i32, i32* @y.6
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8**, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !506, metadata !DIExpression()), !dbg !507
  store i8** %1, i8*** %12, align 8
  call void @llvm.dbg.declare(metadata i8*** %12, metadata !508, metadata !DIExpression()), !dbg !509
  call void @llvm.dbg.declare(metadata i32* %13, metadata !510, metadata !DIExpression()), !dbg !511
  call void @llvm.dbg.declare(metadata i32* %14, metadata !512, metadata !DIExpression()), !dbg !513
  store i32 0, i32* %14, align 4, !dbg !513
  %15 = load i32, i32* @uname_mode, align 4, !dbg !514
  %16 = icmp eq i32 %15, 2, !dbg !516
  %17 = load i32, i32* @x.5
  %18 = load i32, i32* @y.6
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %123, !dbg !517

25:                                               ; preds = %originalBBpart2
  br label %26, !dbg !518

26:                                               ; preds = %25
  %27 = load i32, i32* @x.5
  %28 = load i32, i32* @y.6
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i32, i32* %11, align 4, !dbg !520
  %36 = load i8**, i8*** %12, align 8, !dbg !521
  %37 = call i32 @getopt_long(i32 %35, i8** %36, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), %struct.option* getelementptr inbounds ([3 x %struct.option], [3 x %struct.option]* @arch_long_options, i64 0, i64 0), i32* null) #10, !dbg !522
  store i32 %37, i32* %13, align 4, !dbg !523
  %38 = icmp ne i32 %37, -1, !dbg !524
  %39 = load i32, i32* @x.5
  %40 = load i32, i32* @y.6
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %106, !dbg !518

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* %13, align 4, !dbg !525
  switch i32 %48, label %89 [
    i32 -130, label %49
    i32 -131, label %66
  ], !dbg !527

49:                                               ; preds = %47
  %50 = load i32, i32* @x.5
  %51 = load i32, i32* @y.6
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  call void @usage(i32 0) #15, !dbg !528
  %58 = load i32, i32* @x.5
  %59 = load i32, i32* @y.6
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !528

66:                                               ; preds = %47
  %67 = load i32, i32* @x.5
  %68 = load i32, i32* @y.6
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !530
  %76 = load i32, i32* @uname_mode, align 4, !dbg !530
  %77 = icmp eq i32 %76, 1, !dbg !530
  %78 = zext i1 %77 to i64, !dbg !530
  %79 = select i1 %77, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !530
  %80 = load i8*, i8** @Version, align 8, !dbg !530
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %75, i8* %79, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %80, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i64 0, i64 0), i8* null), !dbg !530
  call void @exit(i32 0) #12, !dbg !530
  %81 = load i32, i32* @x.5
  %82 = load i32, i32* @y.6
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !530

89:                                               ; preds = %47
  %90 = load i32, i32* @x.5
  %91 = load i32, i32* @y.6
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %89, %originalBB14alteredBB
  call void @usage(i32 1) #15, !dbg !531
  %98 = load i32, i32* @x.5
  %99 = load i32, i32* @y.6
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !531

106:                                              ; preds = %originalBBpart24
  %107 = load i32, i32* @x.5
  %108 = load i32, i32* @y.6
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %106, %originalBB18alteredBB
  store i32 16, i32* %14, align 4, !dbg !532
  %115 = load i32, i32* @x.5
  %116 = load i32, i32* @y.6
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %391, !dbg !533

123:                                              ; preds = %originalBBpart2
  br label %124, !dbg !534

124:                                              ; preds = %originalBBpart297, %123
  %125 = load i32, i32* @x.5
  %126 = load i32, i32* @y.6
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %124, %originalBB22alteredBB
  %133 = load i32, i32* %11, align 4, !dbg !536
  %134 = load i8**, i8*** %12, align 8, !dbg !537
  %135 = call i32 @getopt_long(i32 %133, i8** %134, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i64 0, i64 0), %struct.option* getelementptr inbounds ([14 x %struct.option], [14 x %struct.option]* @uname_long_options, i64 0, i64 0), i32* null) #10, !dbg !538
  store i32 %135, i32* %13, align 4, !dbg !539
  %136 = icmp ne i32 %135, -1, !dbg !540
  %137 = load i32, i32* @x.5
  %138 = load i32, i32* @y.6
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %136, label %145, label %374, !dbg !534

145:                                              ; preds = %originalBBpart224
  %146 = load i32, i32* @x.5
  %147 = load i32, i32* @y.6
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %145, %originalBB26alteredBB
  %154 = load i32, i32* %13, align 4, !dbg !541
  %155 = load i32, i32* @x.5
  %156 = load i32, i32* @y.6
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  switch i32 %154, label %340 [
    i32 97, label %163
    i32 115, label %180
    i32 110, label %199
    i32 114, label %218
    i32 118, label %237
    i32 109, label %256
    i32 112, label %259
    i32 105, label %262
    i32 111, label %281
    i32 -130, label %300
    i32 -131, label %317
  ], !dbg !543

163:                                              ; preds = %originalBBpart228
  %164 = load i32, i32* @x.5
  %165 = load i32, i32* @y.6
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %163, %originalBB30alteredBB
  store i32 -1, i32* %14, align 4, !dbg !544
  %172 = load i32, i32* @x.5
  %173 = load i32, i32* @y.6
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %357, !dbg !546

180:                                              ; preds = %originalBBpart228
  %181 = load i32, i32* @x.5
  %182 = load i32, i32* @y.6
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %180, %originalBB34alteredBB
  %189 = load i32, i32* %14, align 4, !dbg !547
  %190 = or i32 %189, 1, !dbg !547
  store i32 %190, i32* %14, align 4, !dbg !547
  %191 = load i32, i32* @x.5
  %192 = load i32, i32* @y.6
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %357, !dbg !548

199:                                              ; preds = %originalBBpart228
  %200 = load i32, i32* @x.5
  %201 = load i32, i32* @y.6
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %199, %originalBB38alteredBB
  %208 = load i32, i32* %14, align 4, !dbg !549
  %209 = or i32 %208, 2, !dbg !549
  store i32 %209, i32* %14, align 4, !dbg !549
  %210 = load i32, i32* @x.5
  %211 = load i32, i32* @y.6
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %originalBBpart246, label %originalBB38alteredBB

originalBBpart246:                                ; preds = %originalBB38
  br label %357, !dbg !550

218:                                              ; preds = %originalBBpart228
  %219 = load i32, i32* @x.5
  %220 = load i32, i32* @y.6
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %218, %originalBB48alteredBB
  %227 = load i32, i32* %14, align 4, !dbg !551
  %228 = or i32 %227, 4, !dbg !551
  store i32 %228, i32* %14, align 4, !dbg !551
  %229 = load i32, i32* @x.5
  %230 = load i32, i32* @y.6
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br label %357, !dbg !552

237:                                              ; preds = %originalBBpart228
  %238 = load i32, i32* @x.5
  %239 = load i32, i32* @y.6
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %237, %originalBB52alteredBB
  %246 = load i32, i32* %14, align 4, !dbg !553
  %247 = or i32 %246, 8, !dbg !553
  store i32 %247, i32* %14, align 4, !dbg !553
  %248 = load i32, i32* @x.5
  %249 = load i32, i32* @y.6
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBBpart260, label %originalBB52alteredBB

originalBBpart260:                                ; preds = %originalBB52
  br label %357, !dbg !554

256:                                              ; preds = %originalBBpart228
  %257 = load i32, i32* %14, align 4, !dbg !555
  %258 = or i32 %257, 16, !dbg !555
  store i32 %258, i32* %14, align 4, !dbg !555
  br label %357, !dbg !556

259:                                              ; preds = %originalBBpart228
  %260 = load i32, i32* %14, align 4, !dbg !557
  %261 = or i32 %260, 32, !dbg !557
  store i32 %261, i32* %14, align 4, !dbg !557
  br label %357, !dbg !558

262:                                              ; preds = %originalBBpart228
  %263 = load i32, i32* @x.5
  %264 = load i32, i32* @y.6
  %265 = sub i32 %263, 1
  %266 = mul i32 %263, %265
  %267 = urem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %268, %269
  br i1 %270, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %262, %originalBB62alteredBB
  %271 = load i32, i32* %14, align 4, !dbg !559
  %272 = or i32 %271, 64, !dbg !559
  store i32 %272, i32* %14, align 4, !dbg !559
  %273 = load i32, i32* @x.5
  %274 = load i32, i32* @y.6
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart270, label %originalBB62alteredBB

originalBBpart270:                                ; preds = %originalBB62
  br label %357, !dbg !560

281:                                              ; preds = %originalBBpart228
  %282 = load i32, i32* @x.5
  %283 = load i32, i32* @y.6
  %284 = sub i32 %282, 1
  %285 = mul i32 %282, %284
  %286 = urem i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %287, %288
  br i1 %289, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %281, %originalBB72alteredBB
  %290 = load i32, i32* %14, align 4, !dbg !561
  %291 = or i32 %290, 128, !dbg !561
  store i32 %291, i32* %14, align 4, !dbg !561
  %292 = load i32, i32* @x.5
  %293 = load i32, i32* @y.6
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBBpart281, label %originalBB72alteredBB

originalBBpart281:                                ; preds = %originalBB72
  br label %357, !dbg !562

300:                                              ; preds = %originalBBpart228
  %301 = load i32, i32* @x.5
  %302 = load i32, i32* @y.6
  %303 = sub i32 %301, 1
  %304 = mul i32 %301, %303
  %305 = urem i32 %304, 2
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %306, %307
  br i1 %308, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %300, %originalBB83alteredBB
  call void @usage(i32 0) #15, !dbg !563
  %309 = load i32, i32* @x.5
  %310 = load i32, i32* @y.6
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  unreachable, !dbg !563

317:                                              ; preds = %originalBBpart228
  %318 = load i32, i32* @x.5
  %319 = load i32, i32* @y.6
  %320 = sub i32 %318, 1
  %321 = mul i32 %318, %320
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %323, %324
  br i1 %325, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %317, %originalBB87alteredBB
  %326 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !564
  %327 = load i32, i32* @uname_mode, align 4, !dbg !564
  %328 = icmp eq i32 %327, 1, !dbg !564
  %329 = zext i1 %328 to i64, !dbg !564
  %330 = select i1 %328, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !564
  %331 = load i8*, i8** @Version, align 8, !dbg !564
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %326, i8* %330, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %331, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* null), !dbg !564
  call void @exit(i32 0) #12, !dbg !564
  %332 = load i32, i32* @x.5
  %333 = load i32, i32* @y.6
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  unreachable, !dbg !564

340:                                              ; preds = %originalBBpart228
  %341 = load i32, i32* @x.5
  %342 = load i32, i32* @y.6
  %343 = sub i32 %341, 1
  %344 = mul i32 %341, %343
  %345 = urem i32 %344, 2
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %346, %347
  br i1 %348, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %340, %originalBB91alteredBB
  call void @usage(i32 1) #15, !dbg !565
  %349 = load i32, i32* @x.5
  %350 = load i32, i32* @y.6
  %351 = sub i32 %349, 1
  %352 = mul i32 %349, %351
  %353 = urem i32 %352, 2
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %354, %355
  br i1 %356, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  unreachable, !dbg !565

357:                                              ; preds = %originalBBpart281, %originalBBpart270, %259, %256, %originalBBpart260, %originalBBpart250, %originalBBpart246, %originalBBpart236, %originalBBpart232
  %358 = load i32, i32* @x.5
  %359 = load i32, i32* @y.6
  %360 = sub i32 %358, 1
  %361 = mul i32 %358, %360
  %362 = urem i32 %361, 2
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %363, %364
  br i1 %365, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %357, %originalBB95alteredBB
  %366 = load i32, i32* @x.5
  %367 = load i32, i32* @y.6
  %368 = sub i32 %366, 1
  %369 = mul i32 %366, %368
  %370 = urem i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %371, %372
  br i1 %373, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br label %124, !dbg !534, !llvm.loop !566

374:                                              ; preds = %originalBBpart224
  %375 = load i32, i32* @x.5
  %376 = load i32, i32* @y.6
  %377 = sub i32 %375, 1
  %378 = mul i32 %375, %377
  %379 = urem i32 %378, 2
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %376, 10
  %382 = or i1 %380, %381
  br i1 %382, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %374, %originalBB99alteredBB
  %383 = load i32, i32* @x.5
  %384 = load i32, i32* @y.6
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br label %391

391:                                              ; preds = %originalBBpart2101, %originalBBpart220
  %392 = load i32, i32* @x.5
  %393 = load i32, i32* @y.6
  %394 = sub i32 %392, 1
  %395 = mul i32 %392, %394
  %396 = urem i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %397, %398
  br i1 %399, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %391, %originalBB103alteredBB
  %400 = load i32, i32* %11, align 4, !dbg !568
  %401 = load i32, i32* @optind, align 4, !dbg !570
  %402 = icmp ne i32 %400, %401, !dbg !571
  %403 = load i32, i32* @x.5
  %404 = load i32, i32* @y.6
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br i1 %402, label %411, label %435, !dbg !572

411:                                              ; preds = %originalBBpart2105
  %412 = load i32, i32* @x.5
  %413 = load i32, i32* @y.6
  %414 = sub i32 %412, 1
  %415 = mul i32 %412, %414
  %416 = urem i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %417, %418
  br i1 %419, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %411, %originalBB107alteredBB
  %420 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !573
  %421 = load i8**, i8*** %12, align 8, !dbg !575
  %422 = load i32, i32* @optind, align 4, !dbg !576
  %423 = sext i32 %422 to i64, !dbg !575
  %424 = getelementptr inbounds i8*, i8** %421, i64 %423, !dbg !575
  %425 = load i8*, i8** %424, align 8, !dbg !575
  %426 = call i8* @quote(i8* %425), !dbg !577
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %420, i8* %426), !dbg !578
  call void @usage(i32 1) #15, !dbg !579
  %427 = load i32, i32* @x.5
  %428 = load i32, i32* @y.6
  %429 = sub i32 %427, 1
  %430 = mul i32 %427, %429
  %431 = urem i32 %430, 2
  %432 = icmp eq i32 %431, 0
  %433 = icmp slt i32 %428, 10
  %434 = or i1 %432, %433
  br i1 %434, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  unreachable, !dbg !579

435:                                              ; preds = %originalBBpart2105
  %436 = load i32, i32* @x.5
  %437 = load i32, i32* @y.6
  %438 = sub i32 %436, 1
  %439 = mul i32 %436, %438
  %440 = urem i32 %439, 2
  %441 = icmp eq i32 %440, 0
  %442 = icmp slt i32 %437, 10
  %443 = or i1 %441, %442
  br i1 %443, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %435, %originalBB111alteredBB
  %444 = load i32, i32* %14, align 4, !dbg !580
  %445 = load i32, i32* @x.5
  %446 = load i32, i32* @y.6
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  ret i32 %444, !dbg !581

originalBBalteredBB:                              ; preds = %originalBB, %2
  %453 = alloca i32, align 4
  %454 = alloca i8**, align 8
  %455 = alloca i32, align 4
  %456 = alloca i32, align 4
  store i32 %0, i32* %453, align 4
  call void @llvm.dbg.declare(metadata i32* %453, metadata !582, metadata !DIExpression()), !dbg !507
  store i8** %1, i8*** %454, align 8
  call void @llvm.dbg.declare(metadata i8*** %454, metadata !605, metadata !DIExpression()), !dbg !509
  call void @llvm.dbg.declare(metadata i32* %455, metadata !606, metadata !DIExpression()), !dbg !511
  call void @llvm.dbg.declare(metadata i32* %456, metadata !607, metadata !DIExpression()), !dbg !513
  store i32 0, i32* %456, align 4, !dbg !513
  %457 = load i32, i32* @uname_mode, align 4, !dbg !514
  %458 = icmp eq i32 %457, 2, !dbg !516
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %459 = load i32, i32* %11, align 4, !dbg !520
  %460 = load i8**, i8*** %12, align 8, !dbg !521
  %461 = call i32 @getopt_long(i32 %459, i8** %460, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), %struct.option* getelementptr inbounds ([3 x %struct.option], [3 x %struct.option]* @arch_long_options, i64 0, i64 0), i32* null) #10, !dbg !522
  store i32 %461, i32* %13, align 4, !dbg !523
  %462 = icmp ne i32 %461, -1, !dbg !524
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  call void @usage(i32 0) #15, !dbg !528
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %463 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !530
  %464 = load i32, i32* @uname_mode, align 4, !dbg !530
  %465 = icmp eq i32 %464, 1, !dbg !530
  %466 = zext i1 %465 to i64, !dbg !530
  %467 = select i1 %465, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !530
  %468 = load i8*, i8** @Version, align 8, !dbg !530
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %463, i8* %467, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %468, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i64 0, i64 0), i8* null), !dbg !530
  call void @exit(i32 0) #12, !dbg !530
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %89
  call void @usage(i32 1) #15, !dbg !531
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %106
  store i32 16, i32* %14, align 4, !dbg !532
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %124
  %469 = load i32, i32* %11, align 4, !dbg !536
  %470 = load i8**, i8*** %12, align 8, !dbg !537
  %471 = call i32 @getopt_long(i32 %469, i8** %470, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i64 0, i64 0), %struct.option* getelementptr inbounds ([14 x %struct.option], [14 x %struct.option]* @uname_long_options, i64 0, i64 0), i32* null) #10, !dbg !538
  store i32 %471, i32* %13, align 4, !dbg !539
  %472 = icmp ne i32 %471, -1, !dbg !540
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %145
  %473 = load i32, i32* %13, align 4, !dbg !541
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %163
  store i32 -1, i32* %14, align 4, !dbg !544
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %180
  %474 = load i32, i32* %14, align 4, !dbg !547
  %_ = sub i32 0, %474
  %gen = add i32 %_, 1
  %475 = or i32 %474, 1, !dbg !547
  store i32 %475, i32* %14, align 4, !dbg !547
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %199
  %476 = load i32, i32* %14, align 4, !dbg !549
  %_39 = sub i32 %476, 2
  %gen40 = mul i32 %_39, 2
  %_41 = shl i32 %476, 2
  %_42 = sub i32 0, %476
  %gen43 = add i32 %_42, 2
  %_44 = shl i32 %476, 2
  %477 = or i32 %476, 2, !dbg !549
  store i32 %477, i32* %14, align 4, !dbg !549
  br label %originalBB38

originalBB48alteredBB:                            ; preds = %originalBB48, %218
  %478 = load i32, i32* %14, align 4, !dbg !551
  %479 = or i32 %478, 4, !dbg !551
  store i32 %479, i32* %14, align 4, !dbg !551
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %237
  %480 = load i32, i32* %14, align 4, !dbg !553
  %_53 = sub i32 0, %480
  %gen54 = add i32 %_53, 8
  %_55 = shl i32 %480, 8
  %_56 = sub i32 0, %480
  %gen57 = add i32 %_56, 8
  %_58 = shl i32 %480, 8
  %481 = or i32 %480, 8, !dbg !553
  store i32 %481, i32* %14, align 4, !dbg !553
  br label %originalBB52

originalBB62alteredBB:                            ; preds = %originalBB62, %262
  %482 = load i32, i32* %14, align 4, !dbg !559
  %_63 = sub i32 %482, 64
  %gen64 = mul i32 %_63, 64
  %_65 = sub i32 %482, 64
  %gen66 = mul i32 %_65, 64
  %_67 = sub i32 0, %482
  %gen68 = add i32 %_67, 64
  %483 = or i32 %482, 64, !dbg !559
  store i32 %483, i32* %14, align 4, !dbg !559
  br label %originalBB62

originalBB72alteredBB:                            ; preds = %originalBB72, %281
  %484 = load i32, i32* %14, align 4, !dbg !561
  %_73 = shl i32 %484, 128
  %_74 = sub i32 0, %484
  %gen75 = add i32 %_74, 128
  %_76 = sub i32 0, %484
  %gen77 = add i32 %_76, 128
  %_78 = sub i32 0, %484
  %gen79 = add i32 %_78, 128
  %485 = or i32 %484, 128, !dbg !561
  store i32 %485, i32* %14, align 4, !dbg !561
  br label %originalBB72

originalBB83alteredBB:                            ; preds = %originalBB83, %300
  call void @usage(i32 0) #15, !dbg !563
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %317
  %486 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !564
  %487 = load i32, i32* @uname_mode, align 4, !dbg !564
  %488 = icmp eq i32 %487, 1, !dbg !564
  %489 = zext i1 %488 to i64, !dbg !564
  %490 = select i1 %488, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !564
  %491 = load i8*, i8** @Version, align 8, !dbg !564
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %486, i8* %490, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %491, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* null), !dbg !564
  call void @exit(i32 0) #12, !dbg !564
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %340
  call void @usage(i32 1) #15, !dbg !565
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %357
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %374
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %391
  %492 = load i32, i32* %11, align 4, !dbg !568
  %493 = load i32, i32* @optind, align 4, !dbg !570
  %494 = icmp ne i32 %492, %493, !dbg !571
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %411
  %495 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !573
  %496 = load i8**, i8*** %12, align 8, !dbg !575
  %497 = load i32, i32* @optind, align 4, !dbg !576
  %498 = sext i32 %497 to i64, !dbg !575
  %499 = getelementptr inbounds i8*, i8** %496, i64 %498, !dbg !575
  %500 = load i8*, i8** %499, align 8, !dbg !575
  %501 = call i8* @quote(i8* %500), !dbg !577
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %495, i8* %501), !dbg !578
  call void @usage(i32 1) #15, !dbg !579
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %435
  %502 = load i32, i32* %14, align 4, !dbg !580
  br label %originalBB111
}

; Function Attrs: nounwind
declare dso_local i32 @uname(%struct.utsname*) #2

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_element(i8*) #4 !dbg !38 {
  %2 = load i32, i32* @x.7
  %3 = load i32, i32* @y.8
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !608, metadata !DIExpression()), !dbg !609
  %11 = load i8, i8* @print_element.printed, align 1, !dbg !610
  %12 = trunc i8 %11 to i1, !dbg !610
  %13 = load i32, i32* @x.7
  %14 = load i32, i32* @y.8
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %39, !dbg !612

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.7
  %23 = load i32, i32* @y.8
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = call i32 @putchar_unlocked(i32 32), !dbg !613
  %31 = load i32, i32* @x.7
  %32 = load i32, i32* @y.8
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %39, !dbg !613

39:                                               ; preds = %originalBBpart24, %originalBBpart2
  %40 = load i32, i32* @x.7
  %41 = load i32, i32* @y.8
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %39, %originalBB6alteredBB
  store i8 1, i8* @print_element.printed, align 1, !dbg !614
  %48 = load i8*, i8** %10, align 8, !dbg !615
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !615
  %50 = call i32 @fputs_unlocked(i8* %48, %struct._IO_FILE* %49), !dbg !615
  %51 = load i32, i32* @x.7
  %52 = load i32, i32* @y.8
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !616

originalBBalteredBB:                              ; preds = %originalBB, %1
  %59 = alloca i8*, align 8
  store i8* %0, i8** %59, align 8
  call void @llvm.dbg.declare(metadata i8** %59, metadata !617, metadata !DIExpression()), !dbg !609
  %60 = load i8, i8* @print_element.printed, align 1, !dbg !610
  %61 = trunc i8 %60 to i1, !dbg !610
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %62 = call i32 @putchar_unlocked(i32 32), !dbg !613
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %39
  store i8 1, i8* @print_element.printed, align 1, !dbg !614
  %63 = load i8*, i8** %10, align 8, !dbg !615
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !615
  %65 = call i32 @fputs_unlocked(i8* %63, %struct._IO_FILE* %64), !dbg !615
  br label %originalBB6
}

declare dso_local i32 @putchar_unlocked(i32) #3

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !639 {
  %1 = load i32, i32* @x.9
  %2 = load i32, i32* @y.10
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !642
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !644
  %12 = icmp ne i32 %11, 0, !dbg !645
  %13 = load i32, i32* @x.9
  %14 = load i32, i32* @y.10
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %140, !dbg !646

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.9
  %23 = load i32, i32* @y.10
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i8, i8* @ignore_EPIPE, align 1, !dbg !647
  %31 = trunc i8 %30 to i1, !dbg !647
  %32 = load i32, i32* @x.9
  %33 = load i32, i32* @y.10
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %31, label %40, label %60, !dbg !648

40:                                               ; preds = %originalBBpart24
  %41 = load i32, i32* @x.9
  %42 = load i32, i32* @y.10
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = call i32* @__errno_location() #14, !dbg !649
  %50 = load i32, i32* %49, align 4, !dbg !649
  %51 = icmp eq i32 %50, 32, !dbg !650
  %52 = load i32, i32* @x.9
  %53 = load i32, i32* @y.10
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %140, label %60, !dbg !651

60:                                               ; preds = %originalBBpart28, %originalBBpart24
  call void @llvm.dbg.declare(metadata i8** %9, metadata !652, metadata !DIExpression()), !dbg !654
  %61 = load i32, i32* @x.9
  %62 = load i32, i32* @y.10
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #10, !dbg !655
  store i8* %69, i8** %9, align 8, !dbg !654
  %70 = load i8*, i8** @file_name, align 8, !dbg !656
  %71 = icmp ne i8* %70, null, !dbg !656
  %72 = load i32, i32* @x.9
  %73 = load i32, i32* @y.10
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %71, label %80, label %102, !dbg !658

80:                                               ; preds = %originalBBpart212
  %81 = load i32, i32* @x.9
  %82 = load i32, i32* @y.10
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %80, %originalBB14alteredBB
  %89 = call i32* @__errno_location() #14, !dbg !659
  %90 = load i32, i32* %89, align 4, !dbg !659
  %91 = load i8*, i8** @file_name, align 8, !dbg !660
  %92 = call i8* @quotearg_colon(i8* %91), !dbg !661
  %93 = load i8*, i8** %9, align 8, !dbg !662
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.51, i64 0, i64 0), i8* %92, i8* %93), !dbg !663
  %94 = load i32, i32* @x.9
  %95 = load i32, i32* @y.10
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %122, !dbg !663

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.9
  %104 = load i32, i32* @y.10
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  %111 = call i32* @__errno_location() #14, !dbg !664
  %112 = load i32, i32* %111, align 4, !dbg !664
  %113 = load i8*, i8** %9, align 8, !dbg !665
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.52, i64 0, i64 0), i8* %113), !dbg !666
  %114 = load i32, i32* @x.9
  %115 = load i32, i32* @y.10
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %122

122:                                              ; preds = %originalBBpart220, %originalBBpart216
  %123 = load i32, i32* @x.9
  %124 = load i32, i32* @y.10
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %122, %originalBB22alteredBB
  %131 = load volatile i32, i32* @exit_failure, align 4, !dbg !667
  call void @_exit(i32 %131) #15, !dbg !668
  %132 = load i32, i32* @x.9
  %133 = load i32, i32* @y.10
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !668

140:                                              ; preds = %originalBBpart28, %originalBBpart2
  %141 = load i32, i32* @x.9
  %142 = load i32, i32* @y.10
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %140, %originalBB26alteredBB
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !669
  %150 = call i32 @close_stream(%struct._IO_FILE* %149), !dbg !671
  %151 = icmp ne i32 %150, 0, !dbg !672
  %152 = load i32, i32* @x.9
  %153 = load i32, i32* @y.10
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %151, label %160, label %178, !dbg !673

160:                                              ; preds = %originalBBpart228
  %161 = load i32, i32* @x.9
  %162 = load i32, i32* @y.10
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %160, %originalBB30alteredBB
  %169 = load volatile i32, i32* @exit_failure, align 4, !dbg !674
  call void @_exit(i32 %169) #15, !dbg !675
  %170 = load i32, i32* @x.9
  %171 = load i32, i32* @y.10
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  unreachable, !dbg !675

178:                                              ; preds = %originalBBpart228
  %179 = load i32, i32* @x.9
  %180 = load i32, i32* @y.10
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %178, %originalBB34alteredBB
  %187 = load i32, i32* @x.9
  %188 = load i32, i32* @y.10
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !676

originalBBalteredBB:                              ; preds = %originalBB, %0
  %195 = alloca i8*, align 8
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !642
  %197 = call i32 @close_stream(%struct._IO_FILE* %196), !dbg !644
  %198 = icmp ne i32 %197, 0, !dbg !645
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %199 = load i8, i8* @ignore_EPIPE, align 1, !dbg !647
  %200 = trunc i8 %199 to i1, !dbg !647
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %201 = call i32* @__errno_location() #14, !dbg !649
  %202 = load i32, i32* %201, align 4, !dbg !649
  %203 = icmp eq i32 %202, 32, !dbg !650
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %204 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #10, !dbg !655
  store i8* %204, i8** %9, align 8, !dbg !654
  %205 = load i8*, i8** @file_name, align 8, !dbg !656
  %206 = icmp ne i8* %205, null, !dbg !656
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %80
  %207 = call i32* @__errno_location() #14, !dbg !659
  %208 = load i32, i32* %207, align 4, !dbg !659
  %209 = load i8*, i8** @file_name, align 8, !dbg !660
  %210 = call i8* @quotearg_colon(i8* %209), !dbg !661
  %211 = load i8*, i8** %9, align 8, !dbg !662
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %208, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.51, i64 0, i64 0), i8* %210, i8* %211), !dbg !663
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  %212 = call i32* @__errno_location() #14, !dbg !664
  %213 = load i32, i32* %212, align 4, !dbg !664
  %214 = load i8*, i8** %9, align 8, !dbg !665
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %213, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.52, i64 0, i64 0), i8* %214), !dbg !666
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %122
  %215 = load volatile i32, i32* @exit_failure, align 4, !dbg !667
  call void @_exit(i32 %215) #15, !dbg !668
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %140
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !669
  %217 = call i32 @close_stream(%struct._IO_FILE* %216), !dbg !671
  %218 = icmp ne i32 %217, 0, !dbg !672
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %160
  %219 = load volatile i32, i32* @exit_failure, align 4, !dbg !674
  call void @_exit(i32 %219) #15, !dbg !675
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %178
  br label %originalBB34
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !677 {
  %2 = load i32, i32* @x.11
  %3 = load i32, i32* @y.12
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !678, metadata !DIExpression()), !dbg !679
  call void @llvm.dbg.declare(metadata i8** %11, metadata !680, metadata !DIExpression()), !dbg !681
  call void @llvm.dbg.declare(metadata i8** %12, metadata !682, metadata !DIExpression()), !dbg !683
  %13 = load i8*, i8** %10, align 8, !dbg !684
  %14 = icmp eq i8* %13, null, !dbg !686
  %15 = load i32, i32* @x.11
  %16 = load i32, i32* @y.12
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !687

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.11
  %25 = load i32, i32* @y.12
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !688
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.57, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !690
  call void @abort() #12, !dbg !691
  %34 = load i32, i32* @x.11
  %35 = load i32, i32* @y.12
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !691

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.11
  %44 = load i32, i32* @y.12
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !692
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !693
  store i8* %52, i8** %11, align 8, !dbg !694
  %53 = load i8*, i8** %11, align 8, !dbg !695
  %54 = icmp ne i8* %53, null, !dbg !696
  %55 = load i32, i32* @x.11
  %56 = load i32, i32* @y.12
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %82, !dbg !695

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.11
  %65 = load i32, i32* @y.12
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i8*, i8** %11, align 8, !dbg !697
  %73 = getelementptr inbounds i8, i8* %72, i64 1, !dbg !698
  %74 = load i32, i32* @x.11
  %75 = load i32, i32* @y.12
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !695

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.11
  %84 = load i32, i32* @y.12
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load i8*, i8** %10, align 8, !dbg !699
  %92 = load i32, i32* @x.11
  %93 = load i32, i32* @y.12
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %100, !dbg !695

100:                                              ; preds = %originalBBpart216, %originalBBpart212
  %101 = phi i8* [ %73, %originalBBpart212 ], [ %91, %originalBBpart216 ], !dbg !695
  %102 = load i32, i32* @x.11
  %103 = load i32, i32* @y.12
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %100, %originalBB18alteredBB
  store i8* %101, i8** %12, align 8, !dbg !700
  %110 = load i8*, i8** %12, align 8, !dbg !701
  %111 = load i8*, i8** %10, align 8, !dbg !703
  %112 = ptrtoint i8* %110 to i64, !dbg !704
  %113 = ptrtoint i8* %111 to i64, !dbg !704
  %114 = sub i64 %112, %113, !dbg !704
  %115 = icmp sge i64 %114, 7, !dbg !705
  %116 = load i32, i32* @x.11
  %117 = load i32, i32* @y.12
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %115, label %124, label %187, !dbg !706

124:                                              ; preds = %originalBBpart220
  %125 = load i32, i32* @x.11
  %126 = load i32, i32* @y.12
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %124, %originalBB22alteredBB
  %133 = load i8*, i8** %12, align 8, !dbg !707
  %134 = getelementptr inbounds i8, i8* %133, i64 -7, !dbg !708
  %135 = call i32 @strncmp(i8* %134, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.58, i64 0, i64 0), i64 7) #13, !dbg !709
  %136 = icmp eq i32 %135, 0, !dbg !710
  %137 = load i32, i32* @x.11
  %138 = load i32, i32* @y.12
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %136, label %145, label %187, !dbg !711

145:                                              ; preds = %originalBBpart224
  %146 = load i32, i32* @x.11
  %147 = load i32, i32* @y.12
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %145, %originalBB26alteredBB
  %154 = load i8*, i8** %12, align 8, !dbg !712
  store i8* %154, i8** %10, align 8, !dbg !714
  %155 = load i8*, i8** %12, align 8, !dbg !715
  %156 = call i32 @strncmp(i8* %155, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.59, i64 0, i64 0), i64 3) #13, !dbg !717
  %157 = icmp eq i32 %156, 0, !dbg !718
  %158 = load i32, i32* @x.11
  %159 = load i32, i32* @y.12
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %157, label %166, label %186, !dbg !719

166:                                              ; preds = %originalBBpart228
  %167 = load i32, i32* @x.11
  %168 = load i32, i32* @y.12
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i8*, i8** %12, align 8, !dbg !720
  %176 = getelementptr inbounds i8, i8* %175, i64 3, !dbg !722
  store i8* %176, i8** %10, align 8, !dbg !723
  %177 = load i8*, i8** %10, align 8, !dbg !724
  store i8* %177, i8** @program_invocation_short_name, align 8, !dbg !725
  %178 = load i32, i32* @x.11
  %179 = load i32, i32* @y.12
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %186, !dbg !726

186:                                              ; preds = %originalBBpart232, %originalBBpart228
  br label %187, !dbg !727

187:                                              ; preds = %186, %originalBBpart224, %originalBBpart220
  %188 = load i32, i32* @x.11
  %189 = load i32, i32* @y.12
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %187, %originalBB34alteredBB
  %196 = load i8*, i8** %10, align 8, !dbg !728
  store i8* %196, i8** @program_name, align 8, !dbg !729
  %197 = load i8*, i8** %10, align 8, !dbg !730
  store i8* %197, i8** @program_invocation_name, align 8, !dbg !731
  %198 = load i32, i32* @x.11
  %199 = load i32, i32* @y.12
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !732

originalBBalteredBB:                              ; preds = %originalBB, %1
  %206 = alloca i8*, align 8
  %207 = alloca i8*, align 8
  %208 = alloca i8*, align 8
  store i8* %0, i8** %206, align 8
  call void @llvm.dbg.declare(metadata i8** %206, metadata !733, metadata !DIExpression()), !dbg !679
  call void @llvm.dbg.declare(metadata i8** %207, metadata !739, metadata !DIExpression()), !dbg !681
  call void @llvm.dbg.declare(metadata i8** %208, metadata !740, metadata !DIExpression()), !dbg !683
  %209 = load i8*, i8** %206, align 8, !dbg !684
  %210 = icmp eq i8* %209, null, !dbg !686
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !688
  %212 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.57, i64 0, i64 0), %struct._IO_FILE* %211), !dbg !690
  call void @abort() #12, !dbg !691
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %213 = load i8*, i8** %10, align 8, !dbg !692
  %214 = call i8* @strrchr(i8* %213, i32 47) #13, !dbg !693
  store i8* %214, i8** %11, align 8, !dbg !694
  %215 = load i8*, i8** %11, align 8, !dbg !695
  %216 = icmp ne i8* %215, null, !dbg !696
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %217 = load i8*, i8** %11, align 8, !dbg !697
  %218 = getelementptr inbounds i8, i8* %217, i64 1, !dbg !698
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %219 = load i8*, i8** %10, align 8, !dbg !699
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %100
  store i8* %101, i8** %12, align 8, !dbg !700
  %220 = load i8*, i8** %12, align 8, !dbg !701
  %221 = load i8*, i8** %10, align 8, !dbg !703
  %222 = ptrtoint i8* %220 to i64, !dbg !704
  %223 = ptrtoint i8* %221 to i64, !dbg !704
  %_ = shl i64 %222, %223
  %224 = sub i64 %222, %223, !dbg !704
  %225 = icmp sge i64 %224, 7, !dbg !705
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %124
  %226 = load i8*, i8** %12, align 8, !dbg !707
  %227 = getelementptr inbounds i8, i8* %226, i64 -7, !dbg !708
  %228 = call i32 @strncmp(i8* %227, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.58, i64 0, i64 0), i64 7) #13, !dbg !709
  %229 = icmp eq i32 %228, 0, !dbg !710
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %145
  %230 = load i8*, i8** %12, align 8, !dbg !712
  store i8* %230, i8** %10, align 8, !dbg !714
  %231 = load i8*, i8** %12, align 8, !dbg !715
  %232 = call i32 @strncmp(i8* %231, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.59, i64 0, i64 0), i64 3) #13, !dbg !717
  %233 = icmp eq i32 %232, 0, !dbg !718
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %234 = load i8*, i8** %12, align 8, !dbg !720
  %235 = getelementptr inbounds i8, i8* %234, i64 3, !dbg !722
  store i8* %235, i8** %10, align 8, !dbg !723
  %236 = load i8*, i8** %10, align 8, !dbg !724
  store i8* %236, i8** @program_invocation_short_name, align 8, !dbg !725
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %187
  %237 = load i8*, i8** %10, align 8, !dbg !728
  store i8* %237, i8** @program_name, align 8, !dbg !729
  %238 = load i8*, i8** %10, align 8, !dbg !730
  store i8* %238, i8** @program_invocation_name, align 8, !dbg !731
  br label %originalBB34
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !741 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !745, metadata !DIExpression()), !dbg !746
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !747, metadata !DIExpression()), !dbg !748
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !749, metadata !DIExpression()), !dbg !750
  call void @llvm.dbg.declare(metadata i8* %15, metadata !751, metadata !DIExpression()), !dbg !752
  %19 = load i8, i8* %13, align 1, !dbg !753
  store i8 %19, i8* %15, align 1, !dbg !752
  call void @llvm.dbg.declare(metadata i32** %16, metadata !754, metadata !DIExpression()), !dbg !756
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !757
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !757
  %22 = load i32, i32* @x.13
  %23 = load i32, i32* @y.14
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !757

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.13
  %32 = load i32, i32* @y.14
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !758
  %40 = load i32, i32* @x.13
  %41 = load i32, i32* @y.14
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !757

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.13
  %50 = load i32, i32* @y.14
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.13
  %58 = load i32, i32* @y.14
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !757

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !757
  %67 = load i32, i32* @x.13
  %68 = load i32, i32* @y.14
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %75 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !759
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* %75, i64 0, i64 0, !dbg !760
  %77 = load i8, i8* %15, align 1, !dbg !761
  %78 = zext i8 %77 to i64, !dbg !761
  %79 = udiv i64 %78, 32, !dbg !762
  %80 = getelementptr inbounds i32, i32* %76, i64 %79, !dbg !763
  store i32* %80, i32** %16, align 8, !dbg !756
  call void @llvm.dbg.declare(metadata i32* %17, metadata !764, metadata !DIExpression()), !dbg !765
  %81 = load i8, i8* %15, align 1, !dbg !766
  %82 = zext i8 %81 to i64, !dbg !766
  %83 = urem i64 %82, 32, !dbg !767
  %84 = trunc i64 %83 to i32, !dbg !766
  store i32 %84, i32* %17, align 4, !dbg !765
  call void @llvm.dbg.declare(metadata i32* %18, metadata !768, metadata !DIExpression()), !dbg !769
  %85 = load i32*, i32** %16, align 8, !dbg !770
  %86 = load i32, i32* %85, align 4, !dbg !771
  %87 = load i32, i32* %17, align 4, !dbg !772
  %88 = lshr i32 %86, %87, !dbg !773
  %89 = and i32 %88, 1, !dbg !774
  store i32 %89, i32* %18, align 4, !dbg !769
  %90 = load i32, i32* %14, align 4, !dbg !775
  %91 = and i32 %90, 1, !dbg !776
  %92 = load i32, i32* %18, align 4, !dbg !777
  %93 = xor i32 %91, %92, !dbg !778
  %94 = load i32, i32* %17, align 4, !dbg !779
  %95 = shl i32 %93, %94, !dbg !780
  %96 = load i32*, i32** %16, align 8, !dbg !781
  %97 = load i32, i32* %96, align 4, !dbg !782
  %98 = xor i32 %97, %95, !dbg !782
  store i32 %98, i32* %96, align 4, !dbg !782
  %99 = load i32, i32* %18, align 4, !dbg !783
  %100 = load i32, i32* @x.13
  %101 = load i32, i32* @y.14
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart270, label %originalBB10alteredBB

originalBBpart270:                                ; preds = %originalBB10
  ret i32 %99, !dbg !784

originalBBalteredBB:                              ; preds = %originalBB, %3
  %108 = alloca %struct.quoting_options*, align 8
  %109 = alloca i8, align 1
  %110 = alloca i32, align 4
  %111 = alloca i8, align 1
  %112 = alloca i32*, align 8
  %113 = alloca i32, align 4
  %114 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %108, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %108, metadata !785, metadata !DIExpression()), !dbg !746
  store i8 %1, i8* %109, align 1
  call void @llvm.dbg.declare(metadata i8* %109, metadata !820, metadata !DIExpression()), !dbg !748
  store i32 %2, i32* %110, align 4
  call void @llvm.dbg.declare(metadata i32* %110, metadata !821, metadata !DIExpression()), !dbg !750
  call void @llvm.dbg.declare(metadata i8* %111, metadata !822, metadata !DIExpression()), !dbg !752
  %115 = load i8, i8* %109, align 1, !dbg !753
  store i8 %115, i8* %111, align 1, !dbg !752
  call void @llvm.dbg.declare(metadata i32** %112, metadata !823, metadata !DIExpression()), !dbg !756
  %116 = load %struct.quoting_options*, %struct.quoting_options** %108, align 8, !dbg !757
  %117 = icmp ne %struct.quoting_options* %116, null, !dbg !757
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %118 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !758
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %119 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !759
  %120 = getelementptr inbounds [8 x i32], [8 x i32]* %119, i64 0, i64 0, !dbg !760
  %121 = load i8, i8* %15, align 1, !dbg !761
  %122 = zext i8 %121 to i64, !dbg !761
  %_ = sub i64 0, %122
  %gen = add i64 %_, 32
  %_11 = shl i64 %122, 32
  %_12 = sub i64 0, %122
  %gen13 = add i64 %_12, 32
  %_14 = shl i64 %122, 32
  %123 = udiv i64 %122, 32, !dbg !762
  %124 = getelementptr inbounds i32, i32* %120, i64 %123, !dbg !763
  store i32* %124, i32** %16, align 8, !dbg !756
  call void @llvm.dbg.declare(metadata !11, metadata !824, metadata !DIExpression()), !dbg !765
  %125 = load i8, i8* %15, align 1, !dbg !766
  %126 = zext i8 %125 to i64, !dbg !766
  %_15 = sub i64 0, %126
  %gen16 = add i64 %_15, 32
  %_17 = sub i64 0, %126
  %gen18 = add i64 %_17, 32
  %127 = urem i64 %126, 32, !dbg !767
  %128 = trunc i64 %127 to i32, !dbg !766
  store i32 %128, i32* %17, align 4, !dbg !765
  call void @llvm.dbg.declare(metadata !11, metadata !859, metadata !DIExpression()), !dbg !769
  %129 = load i32*, i32** %16, align 8, !dbg !770
  %130 = load i32, i32* %129, align 4, !dbg !771
  %131 = load i32, i32* %17, align 4, !dbg !772
  %_19 = sub i32 0, %130
  %gen20 = add i32 %_19, %131
  %_21 = sub i32 %130, %131
  %gen22 = mul i32 %_21, %131
  %_23 = sub i32 0, %130
  %gen24 = add i32 %_23, %131
  %_25 = shl i32 %130, %131
  %_26 = shl i32 %130, %131
  %_27 = shl i32 %130, %131
  %_28 = shl i32 %130, %131
  %_29 = sub i32 0, %130
  %gen30 = add i32 %_29, %131
  %132 = lshr i32 %130, %131, !dbg !773
  %_31 = shl i32 %132, 1
  %_32 = shl i32 %132, 1
  %_33 = sub i32 %132, 1
  %gen34 = mul i32 %_33, 1
  %_35 = sub i32 0, %132
  %gen36 = add i32 %_35, 1
  %_37 = shl i32 %132, 1
  %133 = and i32 %132, 1, !dbg !774
  store i32 %133, i32* %18, align 4, !dbg !769
  %134 = load i32, i32* %14, align 4, !dbg !775
  %_38 = sub i32 0, %134
  %gen39 = add i32 %_38, 1
  %_40 = sub i32 %134, 1
  %gen41 = mul i32 %_40, 1
  %_42 = sub i32 %134, 1
  %gen43 = mul i32 %_42, 1
  %_44 = sub i32 %134, 1
  %gen45 = mul i32 %_44, 1
  %_46 = sub i32 %134, 1
  %gen47 = mul i32 %_46, 1
  %_48 = sub i32 0, %134
  %gen49 = add i32 %_48, 1
  %135 = and i32 %134, 1, !dbg !776
  %136 = load i32, i32* %18, align 4, !dbg !777
  %_50 = shl i32 %135, %136
  %_51 = sub i32 0, %135
  %gen52 = add i32 %_51, %136
  %137 = xor i32 %135, %136, !dbg !778
  %138 = load i32, i32* %17, align 4, !dbg !779
  %_53 = sub i32 0, %137
  %gen54 = add i32 %_53, %138
  %_55 = shl i32 %137, %138
  %_56 = shl i32 %137, %138
  %_57 = shl i32 %137, %138
  %139 = shl i32 %137, %138, !dbg !780
  %140 = load i32*, i32** %16, align 8, !dbg !781
  %141 = load i32, i32* %140, align 4, !dbg !782
  %_58 = shl i32 %141, %139
  %_59 = sub i32 %141, %139
  %gen60 = mul i32 %_59, %139
  %_61 = sub i32 0, %141
  %gen62 = add i32 %_61, %139
  %_63 = sub i32 %141, %139
  %gen64 = mul i32 %_63, %139
  %_65 = sub i32 0, %141
  %gen66 = add i32 %_65, %139
  %_67 = sub i32 %141, %139
  %gen68 = mul i32 %_67, %139
  %142 = xor i32 %141, %139, !dbg !782
  store i32 %142, i32* %140, align 4, !dbg !782
  %143 = load i32, i32* %18, align 4, !dbg !783
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !860 {
  %4 = load i32, i32* @x.15
  %5 = load i32, i32* @y.16
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !863, metadata !DIExpression()), !dbg !864
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !865, metadata !DIExpression()), !dbg !866
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !867, metadata !DIExpression()), !dbg !868
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !869, metadata !DIExpression()), !dbg !870
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !871
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !871
  %17 = load i8, i8* %14, align 1, !dbg !872
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !873
  %19 = load i8*, i8** %12, align 8, !dbg !874
  %20 = load i64, i64* %13, align 8, !dbg !875
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !876
  %22 = load i32, i32* @x.15
  %23 = load i32, i32* @y.16
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !877

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !878, metadata !DIExpression()), !dbg !864
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !910, metadata !DIExpression()), !dbg !866
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !911, metadata !DIExpression()), !dbg !868
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !912, metadata !DIExpression()), !dbg !870
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !871
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !871
  %35 = load i8, i8* %32, align 1, !dbg !872
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !873
  %37 = load i8*, i8** %30, align 8, !dbg !874
  %38 = load i64, i64* %31, align 8, !dbg !875
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !876
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !913 {
  %5 = load i32, i32* @x.17
  %6 = load i32, i32* @y.18
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !918, metadata !DIExpression()), !dbg !919
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !920, metadata !DIExpression()), !dbg !921
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !922, metadata !DIExpression()), !dbg !923
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !924, metadata !DIExpression()), !dbg !925
  call void @llvm.dbg.declare(metadata i32* %17, metadata !926, metadata !DIExpression()), !dbg !927
  %25 = call i32* @__errno_location() #14, !dbg !928
  %26 = load i32, i32* %25, align 4, !dbg !928
  store i32 %26, i32* %17, align 4, !dbg !927
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !929, metadata !DIExpression()), !dbg !930
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !931
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !930
  %28 = load i32, i32* %13, align 4, !dbg !932
  %29 = icmp slt i32 %28, 0, !dbg !934
  %30 = load i32, i32* @x.17
  %31 = load i32, i32* @y.18
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %39, !dbg !935

38:                                               ; preds = %originalBBpart2
  call void @abort() #12, !dbg !936
  unreachable, !dbg !936

39:                                               ; preds = %originalBBpart2
  %40 = load i32, i32* @nslots, align 4, !dbg !937
  %41 = load i32, i32* %13, align 4, !dbg !939
  %42 = icmp sle i32 %40, %41, !dbg !940
  br i1 %42, label %43, label %197, !dbg !941

43:                                               ; preds = %39
  call void @llvm.dbg.declare(metadata i8* %19, metadata !942, metadata !DIExpression()), !dbg !944
  %44 = load i32, i32* @x.17
  %45 = load i32, i32* @y.18
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %43, %originalBB1alteredBB
  %52 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !945
  %53 = icmp eq %struct.slotvec* %52, @slotvec0, !dbg !946
  %54 = zext i1 %53 to i8, !dbg !944
  store i8 %54, i8* %19, align 1, !dbg !944
  call void @llvm.dbg.declare(metadata i32* %20, metadata !947, metadata !DIExpression()), !dbg !948
  store i32 2147483646, i32* %20, align 4, !dbg !948
  %55 = load i32, i32* %20, align 4, !dbg !949
  %56 = load i32, i32* %13, align 4, !dbg !951
  %57 = icmp slt i32 %55, %56, !dbg !952
  %58 = load i32, i32* @x.17
  %59 = load i32, i32* @y.18
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %57, label %66, label %83, !dbg !953

66:                                               ; preds = %originalBBpart24
  %67 = load i32, i32* @x.17
  %68 = load i32, i32* @y.18
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %66, %originalBB6alteredBB
  call void @xalloc_die() #15, !dbg !954
  %75 = load i32, i32* @x.17
  %76 = load i32, i32* @y.18
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !954

83:                                               ; preds = %originalBBpart24
  %84 = load i32, i32* @x.17
  %85 = load i32, i32* @y.18
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %83, %originalBB10alteredBB
  %92 = load i8, i8* %19, align 1, !dbg !955
  %93 = trunc i8 %92 to i1, !dbg !955
  %94 = load i32, i32* @x.17
  %95 = load i32, i32* @y.18
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %93, label %102, label %119, !dbg !955

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.17
  %104 = load i32, i32* @y.18
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.17
  %112 = load i32, i32* @y.18
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %137, !dbg !955

119:                                              ; preds = %originalBBpart212
  %120 = load i32, i32* @x.17
  %121 = load i32, i32* @y.18
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !956
  %129 = load i32, i32* @x.17
  %130 = load i32, i32* @y.18
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %137, !dbg !955

137:                                              ; preds = %originalBBpart220, %originalBBpart216
  %138 = phi %struct.slotvec* [ null, %originalBBpart216 ], [ %128, %originalBBpart220 ], !dbg !955
  %139 = bitcast %struct.slotvec* %138 to i8*, !dbg !955
  %140 = load i32, i32* %13, align 4, !dbg !957
  %141 = add nsw i32 %140, 1, !dbg !958
  %142 = sext i32 %141 to i64, !dbg !959
  %143 = mul i64 %142, 16, !dbg !960
  %144 = call i8* @xrealloc(i8* %139, i64 %143), !dbg !961
  %145 = bitcast i8* %144 to %struct.slotvec*, !dbg !961
  store %struct.slotvec* %145, %struct.slotvec** %18, align 8, !dbg !962
  store %struct.slotvec* %145, %struct.slotvec** @slotvec, align 8, !dbg !963
  %146 = load i8, i8* %19, align 1, !dbg !964
  %147 = trunc i8 %146 to i1, !dbg !964
  br i1 %147, label %148, label %167, !dbg !966

148:                                              ; preds = %137
  %149 = load i32, i32* @x.17
  %150 = load i32, i32* @y.18
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %148, %originalBB22alteredBB
  %157 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !967
  %158 = bitcast %struct.slotvec* %157 to i8*, !dbg !968
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %158, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !968
  %159 = load i32, i32* @x.17
  %160 = load i32, i32* @y.18
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %167, !dbg !969

167:                                              ; preds = %originalBBpart224, %137
  %168 = load i32, i32* @x.17
  %169 = load i32, i32* @y.18
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %167, %originalBB26alteredBB
  %176 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !970
  %177 = load i32, i32* @nslots, align 4, !dbg !971
  %178 = sext i32 %177 to i64, !dbg !972
  %179 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %176, i64 %178, !dbg !972
  %180 = bitcast %struct.slotvec* %179 to i8*, !dbg !973
  %181 = load i32, i32* %13, align 4, !dbg !974
  %182 = add nsw i32 %181, 1, !dbg !975
  %183 = load i32, i32* @nslots, align 4, !dbg !976
  %184 = sub nsw i32 %182, %183, !dbg !977
  %185 = sext i32 %184 to i64, !dbg !978
  %186 = mul i64 %185, 16, !dbg !979
  call void @llvm.memset.p0i8.i64(i8* align 8 %180, i8 0, i64 %186, i1 false), !dbg !973
  %187 = load i32, i32* %13, align 4, !dbg !980
  %188 = add nsw i32 %187, 1, !dbg !981
  store i32 %188, i32* @nslots, align 4, !dbg !982
  %189 = load i32, i32* @x.17
  %190 = load i32, i32* @y.18
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart248, label %originalBB26alteredBB

originalBBpart248:                                ; preds = %originalBB26
  br label %197, !dbg !983

197:                                              ; preds = %originalBBpart248, %39
  call void @llvm.dbg.declare(metadata i64* %21, metadata !984, metadata !DIExpression()), !dbg !986
  %198 = load i32, i32* @x.17
  %199 = load i32, i32* @y.18
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %197, %originalBB50alteredBB
  %206 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !987
  %207 = load i32, i32* %13, align 4, !dbg !988
  %208 = sext i32 %207 to i64, !dbg !987
  %209 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %206, i64 %208, !dbg !987
  %210 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %209, i32 0, i32 0, !dbg !989
  %211 = load i64, i64* %210, align 8, !dbg !989
  store i64 %211, i64* %21, align 8, !dbg !986
  call void @llvm.dbg.declare(metadata i8** %22, metadata !990, metadata !DIExpression()), !dbg !991
  %212 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !992
  %213 = load i32, i32* %13, align 4, !dbg !993
  %214 = sext i32 %213 to i64, !dbg !992
  %215 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %212, i64 %214, !dbg !992
  %216 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %215, i32 0, i32 1, !dbg !994
  %217 = load i8*, i8** %216, align 8, !dbg !994
  store i8* %217, i8** %22, align 8, !dbg !991
  call void @llvm.dbg.declare(metadata i32* %23, metadata !995, metadata !DIExpression()), !dbg !996
  %218 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !997
  %219 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %218, i32 0, i32 1, !dbg !998
  %220 = load i32, i32* %219, align 4, !dbg !998
  %221 = or i32 %220, 1, !dbg !999
  store i32 %221, i32* %23, align 4, !dbg !996
  call void @llvm.dbg.declare(metadata i64* %24, metadata !1000, metadata !DIExpression()), !dbg !1001
  %222 = load i8*, i8** %22, align 8, !dbg !1002
  %223 = load i64, i64* %21, align 8, !dbg !1003
  %224 = load i8*, i8** %14, align 8, !dbg !1004
  %225 = load i64, i64* %15, align 8, !dbg !1005
  %226 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1006
  %227 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %226, i32 0, i32 0, !dbg !1007
  %228 = load i32, i32* %227, align 8, !dbg !1007
  %229 = load i32, i32* %23, align 4, !dbg !1008
  %230 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1009
  %231 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %230, i32 0, i32 2, !dbg !1010
  %232 = getelementptr inbounds [8 x i32], [8 x i32]* %231, i64 0, i64 0, !dbg !1009
  %233 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1011
  %234 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %233, i32 0, i32 3, !dbg !1012
  %235 = load i8*, i8** %234, align 8, !dbg !1012
  %236 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1013
  %237 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %236, i32 0, i32 4, !dbg !1014
  %238 = load i8*, i8** %237, align 8, !dbg !1014
  %239 = call i64 @quotearg_buffer_restyled(i8* %222, i64 %223, i8* %224, i64 %225, i32 %228, i32 %229, i32* %232, i8* %235, i8* %238), !dbg !1015
  store i64 %239, i64* %24, align 8, !dbg !1001
  %240 = load i64, i64* %21, align 8, !dbg !1016
  %241 = load i64, i64* %24, align 8, !dbg !1018
  %242 = icmp ule i64 %240, %241, !dbg !1019
  %243 = load i32, i32* @x.17
  %244 = load i32, i32* @y.18
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBBpart259, label %originalBB50alteredBB

originalBBpart259:                                ; preds = %originalBB50
  br i1 %242, label %251, label %321, !dbg !1020

251:                                              ; preds = %originalBBpart259
  %252 = load i32, i32* @x.17
  %253 = load i32, i32* @y.18
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %251, %originalBB61alteredBB
  %260 = load i64, i64* %24, align 8, !dbg !1021
  %261 = add i64 %260, 1, !dbg !1023
  store i64 %261, i64* %21, align 8, !dbg !1024
  %262 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1025
  %263 = load i32, i32* %13, align 4, !dbg !1026
  %264 = sext i32 %263 to i64, !dbg !1025
  %265 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %262, i64 %264, !dbg !1025
  %266 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %265, i32 0, i32 0, !dbg !1027
  store i64 %261, i64* %266, align 8, !dbg !1028
  %267 = load i8*, i8** %22, align 8, !dbg !1029
  %268 = icmp ne i8* %267, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1031
  %269 = load i32, i32* @x.17
  %270 = load i32, i32* @y.18
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart270, label %originalBB61alteredBB

originalBBpart270:                                ; preds = %originalBB61
  br i1 %268, label %277, label %295, !dbg !1032

277:                                              ; preds = %originalBBpart270
  %278 = load i32, i32* @x.17
  %279 = load i32, i32* @y.18
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %277, %originalBB72alteredBB
  %286 = load i8*, i8** %22, align 8, !dbg !1033
  call void @free(i8* %286) #10, !dbg !1034
  %287 = load i32, i32* @x.17
  %288 = load i32, i32* @y.18
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart274, label %originalBB72alteredBB

originalBBpart274:                                ; preds = %originalBB72
  br label %295, !dbg !1034

295:                                              ; preds = %originalBBpart274, %originalBBpart270
  %296 = load i64, i64* %21, align 8, !dbg !1035
  %297 = call noalias i8* @xcharalloc(i64 %296), !dbg !1036
  store i8* %297, i8** %22, align 8, !dbg !1037
  %298 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1038
  %299 = load i32, i32* %13, align 4, !dbg !1039
  %300 = sext i32 %299 to i64, !dbg !1038
  %301 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %298, i64 %300, !dbg !1038
  %302 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %301, i32 0, i32 1, !dbg !1040
  store i8* %297, i8** %302, align 8, !dbg !1041
  %303 = load i8*, i8** %22, align 8, !dbg !1042
  %304 = load i64, i64* %21, align 8, !dbg !1043
  %305 = load i8*, i8** %14, align 8, !dbg !1044
  %306 = load i64, i64* %15, align 8, !dbg !1045
  %307 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1046
  %308 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %307, i32 0, i32 0, !dbg !1047
  %309 = load i32, i32* %308, align 8, !dbg !1047
  %310 = load i32, i32* %23, align 4, !dbg !1048
  %311 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1049
  %312 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %311, i32 0, i32 2, !dbg !1050
  %313 = getelementptr inbounds [8 x i32], [8 x i32]* %312, i64 0, i64 0, !dbg !1049
  %314 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1051
  %315 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %314, i32 0, i32 3, !dbg !1052
  %316 = load i8*, i8** %315, align 8, !dbg !1052
  %317 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1053
  %318 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %317, i32 0, i32 4, !dbg !1054
  %319 = load i8*, i8** %318, align 8, !dbg !1054
  %320 = call i64 @quotearg_buffer_restyled(i8* %303, i64 %304, i8* %305, i64 %306, i32 %309, i32 %310, i32* %313, i8* %316, i8* %319), !dbg !1055
  br label %321, !dbg !1056

321:                                              ; preds = %295, %originalBBpart259
  %322 = load i32, i32* @x.17
  %323 = load i32, i32* @y.18
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %321, %originalBB76alteredBB
  %330 = load i32, i32* %17, align 4, !dbg !1057
  %331 = call i32* @__errno_location() #14, !dbg !1058
  store i32 %330, i32* %331, align 4, !dbg !1059
  %332 = load i8*, i8** %22, align 8, !dbg !1060
  %333 = load i32, i32* @x.17
  %334 = load i32, i32* @y.18
  %335 = sub i32 %333, 1
  %336 = mul i32 %333, %335
  %337 = urem i32 %336, 2
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %338, %339
  br i1 %340, label %originalBBpart278, label %originalBB76alteredBB

originalBBpart278:                                ; preds = %originalBB76
  ret i8* %332, !dbg !1061

originalBBalteredBB:                              ; preds = %originalBB, %4
  %341 = alloca i32, align 4
  %342 = alloca i8*, align 8
  %343 = alloca i64, align 8
  %344 = alloca %struct.quoting_options*, align 8
  %345 = alloca i32, align 4
  %346 = alloca %struct.slotvec*, align 8
  %347 = alloca i8, align 1
  %348 = alloca i32, align 4
  %349 = alloca i64, align 8
  %350 = alloca i8*, align 8
  %351 = alloca i32, align 4
  %352 = alloca i64, align 8
  store i32 %0, i32* %341, align 4
  call void @llvm.dbg.declare(metadata i32* %341, metadata !1062, metadata !DIExpression()), !dbg !919
  store i8* %1, i8** %342, align 8
  call void @llvm.dbg.declare(metadata i8** %342, metadata !1098, metadata !DIExpression()), !dbg !921
  store i64 %2, i64* %343, align 8
  call void @llvm.dbg.declare(metadata i64* %343, metadata !1099, metadata !DIExpression()), !dbg !923
  store %struct.quoting_options* %3, %struct.quoting_options** %344, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %344, metadata !1100, metadata !DIExpression()), !dbg !925
  call void @llvm.dbg.declare(metadata i32* %345, metadata !1101, metadata !DIExpression()), !dbg !927
  %353 = call i32* @__errno_location() #14, !dbg !928
  %354 = load i32, i32* %353, align 4, !dbg !928
  store i32 %354, i32* %345, align 4, !dbg !927
  call void @llvm.dbg.declare(metadata %struct.slotvec** %346, metadata !1102, metadata !DIExpression()), !dbg !930
  %355 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !931
  store %struct.slotvec* %355, %struct.slotvec** %346, align 8, !dbg !930
  %356 = load i32, i32* %341, align 4, !dbg !932
  %357 = icmp slt i32 %356, 0, !dbg !934
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %43
  %358 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !945
  %359 = icmp eq %struct.slotvec* %358, @slotvec0, !dbg !946
  %360 = zext i1 %359 to i8, !dbg !944
  store i8 %360, i8* %19, align 1, !dbg !944
  call void @llvm.dbg.declare(metadata !11, metadata !1103, metadata !DIExpression()), !dbg !948
  store i32 2147483646, i32* %20, align 4, !dbg !948
  %361 = load i32, i32* %20, align 4, !dbg !949
  %362 = load i32, i32* %13, align 4, !dbg !951
  %363 = icmp slt i32 %361, %362, !dbg !952
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %66
  call void @xalloc_die() #15, !dbg !954
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %83
  %364 = load i8, i8* %19, align 1, !dbg !955
  %365 = trunc i8 %364 to i1, !dbg !955
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %366 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !956
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %148
  %367 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !967
  %368 = bitcast %struct.slotvec* %367 to i8*, !dbg !968
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %368, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !968
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %167
  %369 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !970
  %370 = load i32, i32* @nslots, align 4, !dbg !971
  %371 = sext i32 %370 to i64, !dbg !972
  %372 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %369, i64 %371, !dbg !972
  %373 = bitcast %struct.slotvec* %372 to i8*, !dbg !973
  %374 = load i32, i32* %13, align 4, !dbg !974
  %_ = sub i32 0, %374
  %gen = add i32 %_, 1
  %375 = add nsw i32 %374, 1, !dbg !975
  %376 = load i32, i32* @nslots, align 4, !dbg !976
  %_27 = sub i32 0, %375
  %gen28 = add i32 %_27, %376
  %_29 = shl i32 %375, %376
  %_30 = shl i32 %375, %376
  %_31 = sub i32 %375, %376
  %gen32 = mul i32 %_31, %376
  %_33 = sub i32 %375, %376
  %gen34 = mul i32 %_33, %376
  %377 = sub nsw i32 %375, %376, !dbg !977
  %378 = sext i32 %377 to i64, !dbg !978
  %_35 = sub i64 0, %378
  %gen36 = add i64 %_35, 16
  %_37 = sub i64 0, %378
  %gen38 = add i64 %_37, 16
  %_39 = sub i64 %378, 16
  %gen40 = mul i64 %_39, 16
  %379 = mul i64 %378, 16, !dbg !979
  call void @llvm.memset.p0i8.i64(i8* align 8 %373, i8 0, i64 %379, i1 false), !dbg !973
  %380 = load i32, i32* %13, align 4, !dbg !980
  %_41 = sub i32 %380, 1
  %gen42 = mul i32 %_41, 1
  %_43 = shl i32 %380, 1
  %_44 = shl i32 %380, 1
  %_45 = sub i32 %380, 1
  %gen46 = mul i32 %_45, 1
  %381 = add nsw i32 %380, 1, !dbg !981
  store i32 %381, i32* @nslots, align 4, !dbg !982
  br label %originalBB26

originalBB50alteredBB:                            ; preds = %originalBB50, %197
  %382 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !987
  %383 = load i32, i32* %13, align 4, !dbg !988
  %384 = sext i32 %383 to i64, !dbg !987
  %385 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %382, i64 %384, !dbg !987
  %386 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %385, i32 0, i32 0, !dbg !989
  %387 = load i64, i64* %386, align 8, !dbg !989
  store i64 %387, i64* %21, align 8, !dbg !986
  call void @llvm.dbg.declare(metadata !11, metadata !1141, metadata !DIExpression()), !dbg !991
  %388 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !992
  %389 = load i32, i32* %13, align 4, !dbg !993
  %390 = sext i32 %389 to i64, !dbg !992
  %391 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %388, i64 %390, !dbg !992
  %392 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %391, i32 0, i32 1, !dbg !994
  %393 = load i8*, i8** %392, align 8, !dbg !994
  store i8* %393, i8** %22, align 8, !dbg !991
  call void @llvm.dbg.declare(metadata !11, metadata !1178, metadata !DIExpression()), !dbg !996
  %394 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !997
  %395 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %394, i32 0, i32 1, !dbg !998
  %396 = load i32, i32* %395, align 4, !dbg !998
  %_51 = sub i32 %396, 1
  %gen52 = mul i32 %_51, 1
  %_53 = sub i32 0, %396
  %gen54 = add i32 %_53, 1
  %_55 = shl i32 %396, 1
  %_56 = sub i32 0, %396
  %gen57 = add i32 %_56, 1
  %397 = or i32 %396, 1, !dbg !999
  store i32 %397, i32* %23, align 4, !dbg !996
  call void @llvm.dbg.declare(metadata !11, metadata !1179, metadata !DIExpression()), !dbg !1001
  %398 = load i8*, i8** %22, align 8, !dbg !1002
  %399 = load i64, i64* %21, align 8, !dbg !1003
  %400 = load i8*, i8** %14, align 8, !dbg !1004
  %401 = load i64, i64* %15, align 8, !dbg !1005
  %402 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1006
  %403 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %402, i32 0, i32 0, !dbg !1007
  %404 = load i32, i32* %403, align 8, !dbg !1007
  %405 = load i32, i32* %23, align 4, !dbg !1008
  %406 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1009
  %407 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %406, i32 0, i32 2, !dbg !1010
  %408 = getelementptr inbounds [8 x i32], [8 x i32]* %407, i64 0, i64 0, !dbg !1009
  %409 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1011
  %410 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %409, i32 0, i32 3, !dbg !1012
  %411 = load i8*, i8** %410, align 8, !dbg !1012
  %412 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1013
  %413 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %412, i32 0, i32 4, !dbg !1014
  %414 = load i8*, i8** %413, align 8, !dbg !1014
  %415 = call i64 @quotearg_buffer_restyled(i8* %398, i64 %399, i8* %400, i64 %401, i32 %404, i32 %405, i32* %408, i8* %411, i8* %414), !dbg !1015
  store i64 %415, i64* %24, align 8, !dbg !1001
  %416 = load i64, i64* %21, align 8, !dbg !1016
  %417 = load i64, i64* %24, align 8, !dbg !1018
  %418 = icmp ule i64 %416, %417, !dbg !1019
  br label %originalBB50

originalBB61alteredBB:                            ; preds = %originalBB61, %251
  %419 = load i64, i64* %24, align 8, !dbg !1021
  %_62 = sub i64 %419, 1
  %gen63 = mul i64 %_62, 1
  %_64 = sub i64 %419, 1
  %gen65 = mul i64 %_64, 1
  %_66 = shl i64 %419, 1
  %_67 = sub i64 %419, 1
  %gen68 = mul i64 %_67, 1
  %420 = add i64 %419, 1, !dbg !1023
  store i64 %420, i64* %21, align 8, !dbg !1024
  %421 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1025
  %422 = load i32, i32* %13, align 4, !dbg !1026
  %423 = sext i32 %422 to i64, !dbg !1025
  %424 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %421, i64 %423, !dbg !1025
  %425 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %424, i32 0, i32 0, !dbg !1027
  store i64 %420, i64* %425, align 8, !dbg !1028
  %426 = load i8*, i8** %22, align 8, !dbg !1029
  %427 = icmp ne i8* %426, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1031
  br label %originalBB61

originalBB72alteredBB:                            ; preds = %originalBB72, %277
  %428 = load i8*, i8** %22, align 8, !dbg !1033
  call void @free(i8* %428) #10, !dbg !1034
  br label %originalBB72

originalBB76alteredBB:                            ; preds = %originalBB76, %321
  %429 = load i32, i32* %17, align 4, !dbg !1057
  %430 = call i32* @__errno_location() #14, !dbg !1058
  store i32 %429, i32* %430, align 4, !dbg !1059
  %431 = load i8*, i8** %22, align 8, !dbg !1060
  br label %originalBB76
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !1180 {
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i64, align 8
  %25 = alloca i8, align 1
  %26 = alloca i8, align 1
  %27 = alloca i8, align 1
  %28 = alloca i8, align 1
  %29 = alloca i8, align 1
  %30 = alloca i8, align 1
  %31 = alloca i8, align 1
  %32 = alloca i8, align 1
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i64, align 8
  %37 = alloca i8, align 1
  %38 = alloca %struct.__mbstate_t, align 4
  %39 = alloca i32, align 4
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1185, metadata !DIExpression()), !dbg !1186
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !1187, metadata !DIExpression()), !dbg !1188
  store i8* %2, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !1189, metadata !DIExpression()), !dbg !1190
  store i64 %3, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !1191, metadata !DIExpression()), !dbg !1192
  store i32 %4, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !1193, metadata !DIExpression()), !dbg !1194
  store i32 %5, i32* %16, align 4
  call void @llvm.dbg.declare(metadata i32* %16, metadata !1195, metadata !DIExpression()), !dbg !1196
  store i32* %6, i32** %17, align 8
  call void @llvm.dbg.declare(metadata i32** %17, metadata !1197, metadata !DIExpression()), !dbg !1198
  store i8* %7, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !1199, metadata !DIExpression()), !dbg !1200
  store i8* %8, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1201, metadata !DIExpression()), !dbg !1202
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1203, metadata !DIExpression()), !dbg !1204
  call void @llvm.dbg.declare(metadata i64* %21, metadata !1205, metadata !DIExpression()), !dbg !1206
  store i64 0, i64* %21, align 8, !dbg !1206
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1207, metadata !DIExpression()), !dbg !1208
  store i64 0, i64* %22, align 8, !dbg !1208
  call void @llvm.dbg.declare(metadata i8** %23, metadata !1209, metadata !DIExpression()), !dbg !1210
  store i8* null, i8** %23, align 8, !dbg !1210
  call void @llvm.dbg.declare(metadata i64* %24, metadata !1211, metadata !DIExpression()), !dbg !1212
  store i64 0, i64* %24, align 8, !dbg !1212
  call void @llvm.dbg.declare(metadata i8* %25, metadata !1213, metadata !DIExpression()), !dbg !1214
  store i8 0, i8* %25, align 1, !dbg !1214
  call void @llvm.dbg.declare(metadata i8* %26, metadata !1215, metadata !DIExpression()), !dbg !1216
  %43 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1217
  %44 = icmp eq i64 %43, 1, !dbg !1218
  %45 = zext i1 %44 to i8, !dbg !1216
  store i8 %45, i8* %26, align 1, !dbg !1216
  call void @llvm.dbg.declare(metadata i8* %27, metadata !1219, metadata !DIExpression()), !dbg !1220
  %46 = load i32, i32* %16, align 4, !dbg !1221
  %47 = and i32 %46, 2, !dbg !1222
  %48 = icmp ne i32 %47, 0, !dbg !1223
  %49 = zext i1 %48 to i8, !dbg !1220
  store i8 %49, i8* %27, align 1, !dbg !1220
  call void @llvm.dbg.declare(metadata i8* %28, metadata !1224, metadata !DIExpression()), !dbg !1225
  store i8 0, i8* %28, align 1, !dbg !1225
  call void @llvm.dbg.declare(metadata i8* %29, metadata !1226, metadata !DIExpression()), !dbg !1227
  store i8 0, i8* %29, align 1, !dbg !1227
  call void @llvm.dbg.declare(metadata i8* %30, metadata !1228, metadata !DIExpression()), !dbg !1229
  store i8 1, i8* %30, align 1, !dbg !1229
  br label %50, !dbg !1230

50:                                               ; preds = %originalBBpart21732, %9
  call void @llvm.dbg.label(metadata !1231), !dbg !1232
  %51 = load i32, i32* @x.19
  %52 = load i32, i32* @y.20
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %50, %originalBBalteredBB
  %59 = load i32, i32* %15, align 4, !dbg !1233
  %60 = load i32, i32* @x.19
  %61 = load i32, i32* @y.20
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %59, label %664 [
    i32 6, label %68
    i32 5, label %85
    i32 7, label %198
    i32 8, label %215
    i32 9, label %215
    i32 10, label %215
    i32 3, label %431
    i32 1, label %448
    i32 4, label %465
    i32 2, label %518
    i32 0, label %647
  ], !dbg !1234

68:                                               ; preds = %originalBBpart2
  %69 = load i32, i32* @x.19
  %70 = load i32, i32* @y.20
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %68, %originalBB1alteredBB
  store i32 5, i32* %15, align 4, !dbg !1235
  store i8 1, i8* %27, align 1, !dbg !1237
  %77 = load i32, i32* @x.19
  %78 = load i32, i32* @y.20
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %85, !dbg !1238

85:                                               ; preds = %originalBBpart24, %originalBBpart2
  %86 = load i32, i32* @x.19
  %87 = load i32, i32* @y.20
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %85, %originalBB6alteredBB
  %94 = load i8, i8* %27, align 1, !dbg !1239
  %95 = trunc i8 %94 to i1, !dbg !1239
  %96 = load i32, i32* @x.19
  %97 = load i32, i32* @y.20
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %95, label %181, label %104, !dbg !1241

104:                                              ; preds = %originalBBpart28
  %105 = load i32, i32* @x.19
  %106 = load i32, i32* @y.20
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %104, %originalBB10alteredBB
  %113 = load i32, i32* @x.19
  %114 = load i32, i32* @y.20
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %121, !dbg !1242

121:                                              ; preds = %originalBBpart212
  %122 = load i32, i32* @x.19
  %123 = load i32, i32* @y.20
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %121, %originalBB14alteredBB
  %130 = load i64, i64* %21, align 8, !dbg !1243
  %131 = load i64, i64* %12, align 8, !dbg !1243
  %132 = icmp ult i64 %130, %131, !dbg !1243
  %133 = load i32, i32* @x.19
  %134 = load i32, i32* @y.20
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %132, label %141, label %161, !dbg !1246

141:                                              ; preds = %originalBBpart216
  %142 = load i32, i32* @x.19
  %143 = load i32, i32* @y.20
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %141, %originalBB18alteredBB
  %150 = load i8*, i8** %11, align 8, !dbg !1243
  %151 = load i64, i64* %21, align 8, !dbg !1243
  %152 = getelementptr inbounds i8, i8* %150, i64 %151, !dbg !1243
  store i8 34, i8* %152, align 1, !dbg !1243
  %153 = load i32, i32* @x.19
  %154 = load i32, i32* @y.20
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %161, !dbg !1243

161:                                              ; preds = %originalBBpart220, %originalBBpart216
  %162 = load i64, i64* %21, align 8, !dbg !1246
  %163 = add i64 %162, 1, !dbg !1246
  store i64 %163, i64* %21, align 8, !dbg !1246
  br label %164, !dbg !1246

164:                                              ; preds = %161
  %165 = load i32, i32* @x.19
  %166 = load i32, i32* @y.20
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %164, %originalBB22alteredBB
  %173 = load i32, i32* @x.19
  %174 = load i32, i32* @y.20
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %181, !dbg !1246

181:                                              ; preds = %originalBBpart224, %originalBBpart28
  %182 = load i32, i32* @x.19
  %183 = load i32, i32* @y.20
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %181, %originalBB26alteredBB
  store i8 1, i8* %25, align 1, !dbg !1247
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8** %23, align 8, !dbg !1248
  store i64 1, i64* %24, align 8, !dbg !1249
  %190 = load i32, i32* @x.19
  %191 = load i32, i32* @y.20
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %681, !dbg !1250

198:                                              ; preds = %originalBBpart2
  %199 = load i32, i32* @x.19
  %200 = load i32, i32* @y.20
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %198, %originalBB30alteredBB
  store i8 1, i8* %25, align 1, !dbg !1251
  store i8 0, i8* %27, align 1, !dbg !1252
  %207 = load i32, i32* @x.19
  %208 = load i32, i32* @y.20
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %681, !dbg !1253

215:                                              ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2
  %216 = load i32, i32* %15, align 4, !dbg !1254
  %217 = icmp ne i32 %216, 10, !dbg !1257
  br i1 %217, label %218, label %239, !dbg !1258

218:                                              ; preds = %215
  %219 = load i32, i32* @x.19
  %220 = load i32, i32* @y.20
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %218, %originalBB34alteredBB
  %227 = load i32, i32* %15, align 4, !dbg !1259
  %228 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.63, i64 0, i64 0), i32 %227), !dbg !1261
  store i8* %228, i8** %18, align 8, !dbg !1262
  %229 = load i32, i32* %15, align 4, !dbg !1263
  %230 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i32 %229), !dbg !1264
  store i8* %230, i8** %19, align 8, !dbg !1265
  %231 = load i32, i32* @x.19
  %232 = load i32, i32* @y.20
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %239, !dbg !1266

239:                                              ; preds = %originalBBpart236, %215
  %240 = load i32, i32* @x.19
  %241 = load i32, i32* @y.20
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %239, %originalBB38alteredBB
  %248 = load i8, i8* %27, align 1, !dbg !1267
  %249 = trunc i8 %248 to i1, !dbg !1267
  %250 = load i32, i32* @x.19
  %251 = load i32, i32* @y.20
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %249, label %411, label %258, !dbg !1269

258:                                              ; preds = %originalBBpart240
  %259 = load i32, i32* @x.19
  %260 = load i32, i32* @y.20
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %258, %originalBB42alteredBB
  %267 = load i8*, i8** %18, align 8, !dbg !1270
  store i8* %267, i8** %23, align 8, !dbg !1272
  %268 = load i32, i32* @x.19
  %269 = load i32, i32* @y.20
  %270 = sub i32 %268, 1
  %271 = mul i32 %268, %270
  %272 = urem i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %273, %274
  br i1 %275, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %276, !dbg !1273

276:                                              ; preds = %originalBBpart282, %originalBBpart244
  %277 = load i32, i32* @x.19
  %278 = load i32, i32* @y.20
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %276, %originalBB46alteredBB
  %285 = load i8*, i8** %23, align 8, !dbg !1274
  %286 = load i8, i8* %285, align 1, !dbg !1276
  %287 = icmp ne i8 %286, 0, !dbg !1277
  %288 = load i32, i32* @x.19
  %289 = load i32, i32* @y.20
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %287, label %296, label %394, !dbg !1277

296:                                              ; preds = %originalBBpart248
  %297 = load i32, i32* @x.19
  %298 = load i32, i32* @y.20
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %296, %originalBB50alteredBB
  %305 = load i32, i32* @x.19
  %306 = load i32, i32* @y.20
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %313, !dbg !1278

313:                                              ; preds = %originalBBpart252
  %314 = load i32, i32* @x.19
  %315 = load i32, i32* @y.20
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %313, %originalBB54alteredBB
  %322 = load i64, i64* %21, align 8, !dbg !1279
  %323 = load i64, i64* %12, align 8, !dbg !1279
  %324 = icmp ult i64 %322, %323, !dbg !1279
  %325 = load i32, i32* @x.19
  %326 = load i32, i32* @y.20
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %324, label %333, label %339, !dbg !1282

333:                                              ; preds = %originalBBpart256
  %334 = load i8*, i8** %23, align 8, !dbg !1279
  %335 = load i8, i8* %334, align 1, !dbg !1279
  %336 = load i8*, i8** %11, align 8, !dbg !1279
  %337 = load i64, i64* %21, align 8, !dbg !1279
  %338 = getelementptr inbounds i8, i8* %336, i64 %337, !dbg !1279
  store i8 %335, i8* %338, align 1, !dbg !1279
  br label %339, !dbg !1279

339:                                              ; preds = %333, %originalBBpart256
  %340 = load i32, i32* @x.19
  %341 = load i32, i32* @y.20
  %342 = sub i32 %340, 1
  %343 = mul i32 %340, %342
  %344 = urem i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %345, %346
  br i1 %347, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %339, %originalBB58alteredBB
  %348 = load i64, i64* %21, align 8, !dbg !1282
  %349 = add i64 %348, 1, !dbg !1282
  store i64 %349, i64* %21, align 8, !dbg !1282
  %350 = load i32, i32* @x.19
  %351 = load i32, i32* @y.20
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBBpart274, label %originalBB58alteredBB

originalBBpart274:                                ; preds = %originalBB58
  br label %358, !dbg !1282

358:                                              ; preds = %originalBBpart274
  %359 = load i32, i32* @x.19
  %360 = load i32, i32* @y.20
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %358, %originalBB76alteredBB
  %367 = load i32, i32* @x.19
  %368 = load i32, i32* @y.20
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart278, label %originalBB76alteredBB

originalBBpart278:                                ; preds = %originalBB76
  br label %375, !dbg !1282

375:                                              ; preds = %originalBBpart278
  %376 = load i32, i32* @x.19
  %377 = load i32, i32* @y.20
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB80, label %originalBB80alteredBB

originalBB80:                                     ; preds = %375, %originalBB80alteredBB
  %384 = load i8*, i8** %23, align 8, !dbg !1283
  %385 = getelementptr inbounds i8, i8* %384, i32 1, !dbg !1283
  store i8* %385, i8** %23, align 8, !dbg !1283
  %386 = load i32, i32* @x.19
  %387 = load i32, i32* @y.20
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBBpart282, label %originalBB80alteredBB

originalBBpart282:                                ; preds = %originalBB80
  br label %276, !dbg !1284, !llvm.loop !1285

394:                                              ; preds = %originalBBpart248
  %395 = load i32, i32* @x.19
  %396 = load i32, i32* @y.20
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %394, %originalBB84alteredBB
  %403 = load i32, i32* @x.19
  %404 = load i32, i32* @y.20
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBBpart286, label %originalBB84alteredBB

originalBBpart286:                                ; preds = %originalBB84
  br label %411, !dbg !1286

411:                                              ; preds = %originalBBpart286, %originalBBpart240
  %412 = load i32, i32* @x.19
  %413 = load i32, i32* @y.20
  %414 = sub i32 %412, 1
  %415 = mul i32 %412, %414
  %416 = urem i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %417, %418
  br i1 %419, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %411, %originalBB88alteredBB
  store i8 1, i8* %25, align 1, !dbg !1287
  %420 = load i8*, i8** %19, align 8, !dbg !1288
  store i8* %420, i8** %23, align 8, !dbg !1289
  %421 = load i8*, i8** %23, align 8, !dbg !1290
  %422 = call i64 @strlen(i8* %421) #13, !dbg !1291
  store i64 %422, i64* %24, align 8, !dbg !1292
  %423 = load i32, i32* @x.19
  %424 = load i32, i32* @y.20
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBBpart290, label %originalBB88alteredBB

originalBBpart290:                                ; preds = %originalBB88
  br label %681, !dbg !1293

431:                                              ; preds = %originalBBpart2
  %432 = load i32, i32* @x.19
  %433 = load i32, i32* @y.20
  %434 = sub i32 %432, 1
  %435 = mul i32 %432, %434
  %436 = urem i32 %435, 2
  %437 = icmp eq i32 %436, 0
  %438 = icmp slt i32 %433, 10
  %439 = or i1 %437, %438
  br i1 %439, label %originalBB92, label %originalBB92alteredBB

originalBB92:                                     ; preds = %431, %originalBB92alteredBB
  store i8 1, i8* %25, align 1, !dbg !1294
  %440 = load i32, i32* @x.19
  %441 = load i32, i32* @y.20
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBBpart294, label %originalBB92alteredBB

originalBBpart294:                                ; preds = %originalBB92
  br label %448, !dbg !1295

448:                                              ; preds = %originalBBpart294, %originalBBpart2
  %449 = load i32, i32* @x.19
  %450 = load i32, i32* @y.20
  %451 = sub i32 %449, 1
  %452 = mul i32 %449, %451
  %453 = urem i32 %452, 2
  %454 = icmp eq i32 %453, 0
  %455 = icmp slt i32 %450, 10
  %456 = or i1 %454, %455
  br i1 %456, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %448, %originalBB96alteredBB
  store i8 1, i8* %27, align 1, !dbg !1296
  %457 = load i32, i32* @x.19
  %458 = load i32, i32* @y.20
  %459 = sub i32 %457, 1
  %460 = mul i32 %457, %459
  %461 = urem i32 %460, 2
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %462, %463
  br i1 %464, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %465, !dbg !1297

465:                                              ; preds = %originalBBpart298, %originalBBpart2
  %466 = load i32, i32* @x.19
  %467 = load i32, i32* @y.20
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %465, %originalBB100alteredBB
  %474 = load i8, i8* %27, align 1, !dbg !1298
  %475 = trunc i8 %474 to i1, !dbg !1298
  %476 = load i32, i32* @x.19
  %477 = load i32, i32* @y.20
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br i1 %475, label %501, label %484, !dbg !1300

484:                                              ; preds = %originalBBpart2102
  %485 = load i32, i32* @x.19
  %486 = load i32, i32* @y.20
  %487 = sub i32 %485, 1
  %488 = mul i32 %485, %487
  %489 = urem i32 %488, 2
  %490 = icmp eq i32 %489, 0
  %491 = icmp slt i32 %486, 10
  %492 = or i1 %490, %491
  br i1 %492, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %484, %originalBB104alteredBB
  store i8 1, i8* %25, align 1, !dbg !1301
  %493 = load i32, i32* @x.19
  %494 = load i32, i32* @y.20
  %495 = sub i32 %493, 1
  %496 = mul i32 %493, %495
  %497 = urem i32 %496, 2
  %498 = icmp eq i32 %497, 0
  %499 = icmp slt i32 %494, 10
  %500 = or i1 %498, %499
  br i1 %500, label %originalBBpart2106, label %originalBB104alteredBB

originalBBpart2106:                               ; preds = %originalBB104
  br label %501, !dbg !1302

501:                                              ; preds = %originalBBpart2106, %originalBBpart2102
  %502 = load i32, i32* @x.19
  %503 = load i32, i32* @y.20
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %501, %originalBB108alteredBB
  %510 = load i32, i32* @x.19
  %511 = load i32, i32* @y.20
  %512 = sub i32 %510, 1
  %513 = mul i32 %510, %512
  %514 = urem i32 %513, 2
  %515 = icmp eq i32 %514, 0
  %516 = icmp slt i32 %511, 10
  %517 = or i1 %515, %516
  br i1 %517, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br label %518, !dbg !1303

518:                                              ; preds = %originalBBpart2110, %originalBBpart2
  %519 = load i32, i32* @x.19
  %520 = load i32, i32* @y.20
  %521 = sub i32 %519, 1
  %522 = mul i32 %519, %521
  %523 = urem i32 %522, 2
  %524 = icmp eq i32 %523, 0
  %525 = icmp slt i32 %520, 10
  %526 = or i1 %524, %525
  br i1 %526, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %518, %originalBB112alteredBB
  store i32 2, i32* %15, align 4, !dbg !1304
  %527 = load i8, i8* %27, align 1, !dbg !1305
  %528 = trunc i8 %527 to i1, !dbg !1305
  %529 = load i32, i32* @x.19
  %530 = load i32, i32* @y.20
  %531 = sub i32 %529, 1
  %532 = mul i32 %529, %531
  %533 = urem i32 %532, 2
  %534 = icmp eq i32 %533, 0
  %535 = icmp slt i32 %530, 10
  %536 = or i1 %534, %535
  br i1 %536, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br i1 %528, label %630, label %537, !dbg !1307

537:                                              ; preds = %originalBBpart2114
  %538 = load i32, i32* @x.19
  %539 = load i32, i32* @y.20
  %540 = sub i32 %538, 1
  %541 = mul i32 %538, %540
  %542 = urem i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = icmp slt i32 %539, 10
  %545 = or i1 %543, %544
  br i1 %545, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %537, %originalBB116alteredBB
  %546 = load i32, i32* @x.19
  %547 = load i32, i32* @y.20
  %548 = sub i32 %546, 1
  %549 = mul i32 %546, %548
  %550 = urem i32 %549, 2
  %551 = icmp eq i32 %550, 0
  %552 = icmp slt i32 %547, 10
  %553 = or i1 %551, %552
  br i1 %553, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  br label %554, !dbg !1308

554:                                              ; preds = %originalBBpart2118
  %555 = load i32, i32* @x.19
  %556 = load i32, i32* @y.20
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %554, %originalBB120alteredBB
  %563 = load i64, i64* %21, align 8, !dbg !1309
  %564 = load i64, i64* %12, align 8, !dbg !1309
  %565 = icmp ult i64 %563, %564, !dbg !1309
  %566 = load i32, i32* @x.19
  %567 = load i32, i32* @y.20
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br i1 %565, label %574, label %594, !dbg !1312

574:                                              ; preds = %originalBBpart2122
  %575 = load i32, i32* @x.19
  %576 = load i32, i32* @y.20
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %574, %originalBB124alteredBB
  %583 = load i8*, i8** %11, align 8, !dbg !1309
  %584 = load i64, i64* %21, align 8, !dbg !1309
  %585 = getelementptr inbounds i8, i8* %583, i64 %584, !dbg !1309
  store i8 39, i8* %585, align 1, !dbg !1309
  %586 = load i32, i32* @x.19
  %587 = load i32, i32* @y.20
  %588 = sub i32 %586, 1
  %589 = mul i32 %586, %588
  %590 = urem i32 %589, 2
  %591 = icmp eq i32 %590, 0
  %592 = icmp slt i32 %587, 10
  %593 = or i1 %591, %592
  br i1 %593, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br label %594, !dbg !1309

594:                                              ; preds = %originalBBpart2126, %originalBBpart2122
  %595 = load i32, i32* @x.19
  %596 = load i32, i32* @y.20
  %597 = sub i32 %595, 1
  %598 = mul i32 %595, %597
  %599 = urem i32 %598, 2
  %600 = icmp eq i32 %599, 0
  %601 = icmp slt i32 %596, 10
  %602 = or i1 %600, %601
  br i1 %602, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %594, %originalBB128alteredBB
  %603 = load i64, i64* %21, align 8, !dbg !1312
  %604 = add i64 %603, 1, !dbg !1312
  store i64 %604, i64* %21, align 8, !dbg !1312
  %605 = load i32, i32* @x.19
  %606 = load i32, i32* @y.20
  %607 = sub i32 %605, 1
  %608 = mul i32 %605, %607
  %609 = urem i32 %608, 2
  %610 = icmp eq i32 %609, 0
  %611 = icmp slt i32 %606, 10
  %612 = or i1 %610, %611
  br i1 %612, label %originalBBpart2132, label %originalBB128alteredBB

originalBBpart2132:                               ; preds = %originalBB128
  br label %613, !dbg !1312

613:                                              ; preds = %originalBBpart2132
  %614 = load i32, i32* @x.19
  %615 = load i32, i32* @y.20
  %616 = sub i32 %614, 1
  %617 = mul i32 %614, %616
  %618 = urem i32 %617, 2
  %619 = icmp eq i32 %618, 0
  %620 = icmp slt i32 %615, 10
  %621 = or i1 %619, %620
  br i1 %621, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %613, %originalBB134alteredBB
  %622 = load i32, i32* @x.19
  %623 = load i32, i32* @y.20
  %624 = sub i32 %622, 1
  %625 = mul i32 %622, %624
  %626 = urem i32 %625, 2
  %627 = icmp eq i32 %626, 0
  %628 = icmp slt i32 %623, 10
  %629 = or i1 %627, %628
  br i1 %629, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br label %630, !dbg !1312

630:                                              ; preds = %originalBBpart2136, %originalBBpart2114
  %631 = load i32, i32* @x.19
  %632 = load i32, i32* @y.20
  %633 = sub i32 %631, 1
  %634 = mul i32 %631, %633
  %635 = urem i32 %634, 2
  %636 = icmp eq i32 %635, 0
  %637 = icmp slt i32 %632, 10
  %638 = or i1 %636, %637
  br i1 %638, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %630, %originalBB138alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i8** %23, align 8, !dbg !1313
  store i64 1, i64* %24, align 8, !dbg !1314
  %639 = load i32, i32* @x.19
  %640 = load i32, i32* @y.20
  %641 = sub i32 %639, 1
  %642 = mul i32 %639, %641
  %643 = urem i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = icmp slt i32 %640, 10
  %646 = or i1 %644, %645
  br i1 %646, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br label %681, !dbg !1315

647:                                              ; preds = %originalBBpart2
  %648 = load i32, i32* @x.19
  %649 = load i32, i32* @y.20
  %650 = sub i32 %648, 1
  %651 = mul i32 %648, %650
  %652 = urem i32 %651, 2
  %653 = icmp eq i32 %652, 0
  %654 = icmp slt i32 %649, 10
  %655 = or i1 %653, %654
  br i1 %655, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %647, %originalBB142alteredBB
  store i8 0, i8* %27, align 1, !dbg !1316
  %656 = load i32, i32* @x.19
  %657 = load i32, i32* @y.20
  %658 = sub i32 %656, 1
  %659 = mul i32 %656, %658
  %660 = urem i32 %659, 2
  %661 = icmp eq i32 %660, 0
  %662 = icmp slt i32 %657, 10
  %663 = or i1 %661, %662
  br i1 %663, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br label %681, !dbg !1317

664:                                              ; preds = %originalBBpart2
  %665 = load i32, i32* @x.19
  %666 = load i32, i32* @y.20
  %667 = sub i32 %665, 1
  %668 = mul i32 %665, %667
  %669 = urem i32 %668, 2
  %670 = icmp eq i32 %669, 0
  %671 = icmp slt i32 %666, 10
  %672 = or i1 %670, %671
  br i1 %672, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %664, %originalBB146alteredBB
  call void @abort() #12, !dbg !1318
  %673 = load i32, i32* @x.19
  %674 = load i32, i32* @y.20
  %675 = sub i32 %673, 1
  %676 = mul i32 %673, %675
  %677 = urem i32 %676, 2
  %678 = icmp eq i32 %677, 0
  %679 = icmp slt i32 %674, 10
  %680 = or i1 %678, %679
  br i1 %680, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  unreachable, !dbg !1318

681:                                              ; preds = %originalBBpart2144, %originalBBpart2140, %originalBBpart290, %originalBBpart232, %originalBBpart228
  %682 = load i32, i32* @x.19
  %683 = load i32, i32* @y.20
  %684 = sub i32 %682, 1
  %685 = mul i32 %682, %684
  %686 = urem i32 %685, 2
  %687 = icmp eq i32 %686, 0
  %688 = icmp slt i32 %683, 10
  %689 = or i1 %687, %688
  br i1 %689, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %681, %originalBB150alteredBB
  store i64 0, i64* %20, align 8, !dbg !1319
  %690 = load i32, i32* @x.19
  %691 = load i32, i32* @y.20
  %692 = sub i32 %690, 1
  %693 = mul i32 %690, %692
  %694 = urem i32 %693, 2
  %695 = icmp eq i32 %694, 0
  %696 = icmp slt i32 %691, 10
  %697 = or i1 %695, %696
  br i1 %697, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br label %698, !dbg !1321

698:                                              ; preds = %originalBBpart21684, %originalBBpart2152
  %699 = load i32, i32* @x.19
  %700 = load i32, i32* @y.20
  %701 = sub i32 %699, 1
  %702 = mul i32 %699, %701
  %703 = urem i32 %702, 2
  %704 = icmp eq i32 %703, 0
  %705 = icmp slt i32 %700, 10
  %706 = or i1 %704, %705
  br i1 %706, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %698, %originalBB154alteredBB
  %707 = load i64, i64* %14, align 8, !dbg !1322
  %708 = icmp eq i64 %707, -1, !dbg !1324
  %709 = load i32, i32* @x.19
  %710 = load i32, i32* @y.20
  %711 = sub i32 %709, 1
  %712 = mul i32 %709, %711
  %713 = urem i32 %712, 2
  %714 = icmp eq i32 %713, 0
  %715 = icmp slt i32 %710, 10
  %716 = or i1 %714, %715
  br i1 %716, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br i1 %708, label %717, label %741, !dbg !1322

717:                                              ; preds = %originalBBpart2156
  %718 = load i32, i32* @x.19
  %719 = load i32, i32* @y.20
  %720 = sub i32 %718, 1
  %721 = mul i32 %718, %720
  %722 = urem i32 %721, 2
  %723 = icmp eq i32 %722, 0
  %724 = icmp slt i32 %719, 10
  %725 = or i1 %723, %724
  br i1 %725, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %717, %originalBB158alteredBB
  %726 = load i8*, i8** %13, align 8, !dbg !1325
  %727 = load i64, i64* %20, align 8, !dbg !1326
  %728 = getelementptr inbounds i8, i8* %726, i64 %727, !dbg !1325
  %729 = load i8, i8* %728, align 1, !dbg !1325
  %730 = sext i8 %729 to i32, !dbg !1325
  %731 = icmp eq i32 %730, 0, !dbg !1327
  %732 = zext i1 %731 to i32, !dbg !1327
  %733 = load i32, i32* @x.19
  %734 = load i32, i32* @y.20
  %735 = sub i32 %733, 1
  %736 = mul i32 %733, %735
  %737 = urem i32 %736, 2
  %738 = icmp eq i32 %737, 0
  %739 = icmp slt i32 %734, 10
  %740 = or i1 %738, %739
  br i1 %740, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br label %762, !dbg !1322

741:                                              ; preds = %originalBBpart2156
  %742 = load i32, i32* @x.19
  %743 = load i32, i32* @y.20
  %744 = sub i32 %742, 1
  %745 = mul i32 %742, %744
  %746 = urem i32 %745, 2
  %747 = icmp eq i32 %746, 0
  %748 = icmp slt i32 %743, 10
  %749 = or i1 %747, %748
  br i1 %749, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %741, %originalBB162alteredBB
  %750 = load i64, i64* %20, align 8, !dbg !1328
  %751 = load i64, i64* %14, align 8, !dbg !1329
  %752 = icmp eq i64 %750, %751, !dbg !1330
  %753 = zext i1 %752 to i32, !dbg !1330
  %754 = load i32, i32* @x.19
  %755 = load i32, i32* @y.20
  %756 = sub i32 %754, 1
  %757 = mul i32 %754, %756
  %758 = urem i32 %757, 2
  %759 = icmp eq i32 %758, 0
  %760 = icmp slt i32 %755, 10
  %761 = or i1 %759, %760
  br i1 %761, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br label %762, !dbg !1322

762:                                              ; preds = %originalBBpart2164, %originalBBpart2160
  %763 = phi i32 [ %732, %originalBBpart2160 ], [ %753, %originalBBpart2164 ], !dbg !1322
  %764 = load i32, i32* @x.19
  %765 = load i32, i32* @y.20
  %766 = sub i32 %764, 1
  %767 = mul i32 %764, %766
  %768 = urem i32 %767, 2
  %769 = icmp eq i32 %768, 0
  %770 = icmp slt i32 %765, 10
  %771 = or i1 %769, %770
  br i1 %771, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %762, %originalBB166alteredBB
  %772 = icmp ne i32 %763, 0, !dbg !1331
  %773 = xor i1 %772, true, !dbg !1331
  %774 = load i32, i32* @x.19
  %775 = load i32, i32* @y.20
  %776 = sub i32 %774, 1
  %777 = mul i32 %774, %776
  %778 = urem i32 %777, 2
  %779 = icmp eq i32 %778, 0
  %780 = icmp slt i32 %775, 10
  %781 = or i1 %779, %780
  br i1 %781, label %originalBBpart2171, label %originalBB166alteredBB

originalBBpart2171:                               ; preds = %originalBB166
  br i1 %773, label %782, label %6140, !dbg !1332

782:                                              ; preds = %originalBBpart2171
  call void @llvm.dbg.declare(metadata i8* %31, metadata !1333, metadata !DIExpression()), !dbg !1335
  call void @llvm.dbg.declare(metadata i8* %32, metadata !1336, metadata !DIExpression()), !dbg !1337
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1338, metadata !DIExpression()), !dbg !1339
  %783 = load i32, i32* @x.19
  %784 = load i32, i32* @y.20
  %785 = sub i32 %783, 1
  %786 = mul i32 %783, %785
  %787 = urem i32 %786, 2
  %788 = icmp eq i32 %787, 0
  %789 = icmp slt i32 %784, 10
  %790 = or i1 %788, %789
  br i1 %790, label %originalBB173, label %originalBB173alteredBB

originalBB173:                                    ; preds = %782, %originalBB173alteredBB
  store i8 0, i8* %33, align 1, !dbg !1339
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1340, metadata !DIExpression()), !dbg !1341
  store i8 0, i8* %34, align 1, !dbg !1341
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1342, metadata !DIExpression()), !dbg !1343
  store i8 0, i8* %35, align 1, !dbg !1343
  %791 = load i8, i8* %25, align 1, !dbg !1344
  %792 = trunc i8 %791 to i1, !dbg !1344
  %793 = load i32, i32* @x.19
  %794 = load i32, i32* @y.20
  %795 = sub i32 %793, 1
  %796 = mul i32 %793, %795
  %797 = urem i32 %796, 2
  %798 = icmp eq i32 %797, 0
  %799 = icmp slt i32 %794, 10
  %800 = or i1 %798, %799
  br i1 %800, label %originalBBpart2175, label %originalBB173alteredBB

originalBBpart2175:                               ; preds = %originalBB173
  br i1 %792, label %801, label %1013, !dbg !1346

801:                                              ; preds = %originalBBpart2175
  %802 = load i32, i32* @x.19
  %803 = load i32, i32* @y.20
  %804 = sub i32 %802, 1
  %805 = mul i32 %802, %804
  %806 = urem i32 %805, 2
  %807 = icmp eq i32 %806, 0
  %808 = icmp slt i32 %803, 10
  %809 = or i1 %807, %808
  br i1 %809, label %originalBB177, label %originalBB177alteredBB

originalBB177:                                    ; preds = %801, %originalBB177alteredBB
  %810 = load i32, i32* %15, align 4, !dbg !1347
  %811 = icmp ne i32 %810, 2, !dbg !1348
  %812 = load i32, i32* @x.19
  %813 = load i32, i32* @y.20
  %814 = sub i32 %812, 1
  %815 = mul i32 %812, %814
  %816 = urem i32 %815, 2
  %817 = icmp eq i32 %816, 0
  %818 = icmp slt i32 %813, 10
  %819 = or i1 %817, %818
  br i1 %819, label %originalBBpart2179, label %originalBB177alteredBB

originalBBpart2179:                               ; preds = %originalBB177
  br i1 %811, label %820, label %1013, !dbg !1349

820:                                              ; preds = %originalBBpart2179
  %821 = load i32, i32* @x.19
  %822 = load i32, i32* @y.20
  %823 = sub i32 %821, 1
  %824 = mul i32 %821, %823
  %825 = urem i32 %824, 2
  %826 = icmp eq i32 %825, 0
  %827 = icmp slt i32 %822, 10
  %828 = or i1 %826, %827
  br i1 %828, label %originalBB181, label %originalBB181alteredBB

originalBB181:                                    ; preds = %820, %originalBB181alteredBB
  %829 = load i64, i64* %24, align 8, !dbg !1350
  %830 = icmp ne i64 %829, 0, !dbg !1350
  %831 = load i32, i32* @x.19
  %832 = load i32, i32* @y.20
  %833 = sub i32 %831, 1
  %834 = mul i32 %831, %833
  %835 = urem i32 %834, 2
  %836 = icmp eq i32 %835, 0
  %837 = icmp slt i32 %832, 10
  %838 = or i1 %836, %837
  br i1 %838, label %originalBBpart2183, label %originalBB181alteredBB

originalBBpart2183:                               ; preds = %originalBB181
  br i1 %830, label %839, label %1013, !dbg !1351

839:                                              ; preds = %originalBBpart2183
  %840 = load i32, i32* @x.19
  %841 = load i32, i32* @y.20
  %842 = sub i32 %840, 1
  %843 = mul i32 %840, %842
  %844 = urem i32 %843, 2
  %845 = icmp eq i32 %844, 0
  %846 = icmp slt i32 %841, 10
  %847 = or i1 %845, %846
  br i1 %847, label %originalBB185, label %originalBB185alteredBB

originalBB185:                                    ; preds = %839, %originalBB185alteredBB
  %848 = load i64, i64* %20, align 8, !dbg !1352
  %849 = load i64, i64* %24, align 8, !dbg !1353
  %850 = add i64 %848, %849, !dbg !1354
  %851 = load i64, i64* %14, align 8, !dbg !1355
  %852 = icmp eq i64 %851, -1, !dbg !1356
  %853 = load i32, i32* @x.19
  %854 = load i32, i32* @y.20
  %855 = sub i32 %853, 1
  %856 = mul i32 %853, %855
  %857 = urem i32 %856, 2
  %858 = icmp eq i32 %857, 0
  %859 = icmp slt i32 %854, 10
  %860 = or i1 %858, %859
  br i1 %860, label %originalBBpart2187, label %originalBB185alteredBB

originalBBpart2187:                               ; preds = %originalBB185
  br i1 %852, label %861, label %899, !dbg !1357

861:                                              ; preds = %originalBBpart2187
  %862 = load i32, i32* @x.19
  %863 = load i32, i32* @y.20
  %864 = sub i32 %862, 1
  %865 = mul i32 %862, %864
  %866 = urem i32 %865, 2
  %867 = icmp eq i32 %866, 0
  %868 = icmp slt i32 %863, 10
  %869 = or i1 %867, %868
  br i1 %869, label %originalBB189, label %originalBB189alteredBB

originalBB189:                                    ; preds = %861, %originalBB189alteredBB
  %870 = load i64, i64* %24, align 8, !dbg !1358
  %871 = icmp ult i64 1, %870, !dbg !1359
  %872 = load i32, i32* @x.19
  %873 = load i32, i32* @y.20
  %874 = sub i32 %872, 1
  %875 = mul i32 %872, %874
  %876 = urem i32 %875, 2
  %877 = icmp eq i32 %876, 0
  %878 = icmp slt i32 %873, 10
  %879 = or i1 %877, %878
  br i1 %879, label %originalBBpart2191, label %originalBB189alteredBB

originalBBpart2191:                               ; preds = %originalBB189
  br i1 %871, label %880, label %899, !dbg !1355

880:                                              ; preds = %originalBBpart2191
  %881 = load i32, i32* @x.19
  %882 = load i32, i32* @y.20
  %883 = sub i32 %881, 1
  %884 = mul i32 %881, %883
  %885 = urem i32 %884, 2
  %886 = icmp eq i32 %885, 0
  %887 = icmp slt i32 %882, 10
  %888 = or i1 %886, %887
  br i1 %888, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %880, %originalBB193alteredBB
  %889 = load i8*, i8** %13, align 8, !dbg !1360
  %890 = call i64 @strlen(i8* %889) #13, !dbg !1361
  store i64 %890, i64* %14, align 8, !dbg !1362
  %891 = load i32, i32* @x.19
  %892 = load i32, i32* @y.20
  %893 = sub i32 %891, 1
  %894 = mul i32 %891, %893
  %895 = urem i32 %894, 2
  %896 = icmp eq i32 %895, 0
  %897 = icmp slt i32 %892, 10
  %898 = or i1 %896, %897
  br i1 %898, label %originalBBpart2195, label %originalBB193alteredBB

originalBBpart2195:                               ; preds = %originalBB193
  br label %917, !dbg !1355

899:                                              ; preds = %originalBBpart2191, %originalBBpart2187
  %900 = load i32, i32* @x.19
  %901 = load i32, i32* @y.20
  %902 = sub i32 %900, 1
  %903 = mul i32 %900, %902
  %904 = urem i32 %903, 2
  %905 = icmp eq i32 %904, 0
  %906 = icmp slt i32 %901, 10
  %907 = or i1 %905, %906
  br i1 %907, label %originalBB197, label %originalBB197alteredBB

originalBB197:                                    ; preds = %899, %originalBB197alteredBB
  %908 = load i64, i64* %14, align 8, !dbg !1363
  %909 = load i32, i32* @x.19
  %910 = load i32, i32* @y.20
  %911 = sub i32 %909, 1
  %912 = mul i32 %909, %911
  %913 = urem i32 %912, 2
  %914 = icmp eq i32 %913, 0
  %915 = icmp slt i32 %910, 10
  %916 = or i1 %914, %915
  br i1 %916, label %originalBBpart2199, label %originalBB197alteredBB

originalBBpart2199:                               ; preds = %originalBB197
  br label %917, !dbg !1355

917:                                              ; preds = %originalBBpart2199, %originalBBpart2195
  %918 = phi i64 [ %890, %originalBBpart2195 ], [ %908, %originalBBpart2199 ], !dbg !1355
  %919 = load i32, i32* @x.19
  %920 = load i32, i32* @y.20
  %921 = sub i32 %919, 1
  %922 = mul i32 %919, %921
  %923 = urem i32 %922, 2
  %924 = icmp eq i32 %923, 0
  %925 = icmp slt i32 %920, 10
  %926 = or i1 %924, %925
  br i1 %926, label %originalBB201, label %originalBB201alteredBB

originalBB201:                                    ; preds = %917, %originalBB201alteredBB
  %927 = icmp ule i64 %850, %918, !dbg !1364
  %928 = load i32, i32* @x.19
  %929 = load i32, i32* @y.20
  %930 = sub i32 %928, 1
  %931 = mul i32 %928, %930
  %932 = urem i32 %931, 2
  %933 = icmp eq i32 %932, 0
  %934 = icmp slt i32 %929, 10
  %935 = or i1 %933, %934
  br i1 %935, label %originalBBpart2203, label %originalBB201alteredBB

originalBBpart2203:                               ; preds = %originalBB201
  br i1 %927, label %936, label %1013, !dbg !1365

936:                                              ; preds = %originalBBpart2203
  %937 = load i32, i32* @x.19
  %938 = load i32, i32* @y.20
  %939 = sub i32 %937, 1
  %940 = mul i32 %937, %939
  %941 = urem i32 %940, 2
  %942 = icmp eq i32 %941, 0
  %943 = icmp slt i32 %938, 10
  %944 = or i1 %942, %943
  br i1 %944, label %originalBB205, label %originalBB205alteredBB

originalBB205:                                    ; preds = %936, %originalBB205alteredBB
  %945 = load i8*, i8** %13, align 8, !dbg !1366
  %946 = load i64, i64* %20, align 8, !dbg !1367
  %947 = getelementptr inbounds i8, i8* %945, i64 %946, !dbg !1368
  %948 = load i8*, i8** %23, align 8, !dbg !1369
  %949 = load i64, i64* %24, align 8, !dbg !1370
  %950 = call i32 @memcmp(i8* %947, i8* %948, i64 %949) #13, !dbg !1371
  %951 = icmp eq i32 %950, 0, !dbg !1372
  %952 = load i32, i32* @x.19
  %953 = load i32, i32* @y.20
  %954 = sub i32 %952, 1
  %955 = mul i32 %952, %954
  %956 = urem i32 %955, 2
  %957 = icmp eq i32 %956, 0
  %958 = icmp slt i32 %953, 10
  %959 = or i1 %957, %958
  br i1 %959, label %originalBBpart2207, label %originalBB205alteredBB

originalBBpart2207:                               ; preds = %originalBB205
  br i1 %951, label %960, label %1013, !dbg !1373

960:                                              ; preds = %originalBBpart2207
  %961 = load i32, i32* @x.19
  %962 = load i32, i32* @y.20
  %963 = sub i32 %961, 1
  %964 = mul i32 %961, %963
  %965 = urem i32 %964, 2
  %966 = icmp eq i32 %965, 0
  %967 = icmp slt i32 %962, 10
  %968 = or i1 %966, %967
  br i1 %968, label %originalBB209, label %originalBB209alteredBB

originalBB209:                                    ; preds = %960, %originalBB209alteredBB
  %969 = load i8, i8* %27, align 1, !dbg !1374
  %970 = trunc i8 %969 to i1, !dbg !1374
  %971 = load i32, i32* @x.19
  %972 = load i32, i32* @y.20
  %973 = sub i32 %971, 1
  %974 = mul i32 %971, %973
  %975 = urem i32 %974, 2
  %976 = icmp eq i32 %975, 0
  %977 = icmp slt i32 %972, 10
  %978 = or i1 %976, %977
  br i1 %978, label %originalBBpart2211, label %originalBB209alteredBB

originalBBpart2211:                               ; preds = %originalBB209
  br i1 %970, label %979, label %996, !dbg !1377

979:                                              ; preds = %originalBBpart2211
  %980 = load i32, i32* @x.19
  %981 = load i32, i32* @y.20
  %982 = sub i32 %980, 1
  %983 = mul i32 %980, %982
  %984 = urem i32 %983, 2
  %985 = icmp eq i32 %984, 0
  %986 = icmp slt i32 %981, 10
  %987 = or i1 %985, %986
  br i1 %987, label %originalBB213, label %originalBB213alteredBB

originalBB213:                                    ; preds = %979, %originalBB213alteredBB
  %988 = load i32, i32* @x.19
  %989 = load i32, i32* @y.20
  %990 = sub i32 %988, 1
  %991 = mul i32 %988, %990
  %992 = urem i32 %991, 2
  %993 = icmp eq i32 %992, 0
  %994 = icmp slt i32 %989, 10
  %995 = or i1 %993, %994
  br i1 %995, label %originalBBpart2215, label %originalBB213alteredBB

originalBBpart2215:                               ; preds = %originalBB213
  br label %6590, !dbg !1378

996:                                              ; preds = %originalBBpart2211
  %997 = load i32, i32* @x.19
  %998 = load i32, i32* @y.20
  %999 = sub i32 %997, 1
  %1000 = mul i32 %997, %999
  %1001 = urem i32 %1000, 2
  %1002 = icmp eq i32 %1001, 0
  %1003 = icmp slt i32 %998, 10
  %1004 = or i1 %1002, %1003
  br i1 %1004, label %originalBB217, label %originalBB217alteredBB

originalBB217:                                    ; preds = %996, %originalBB217alteredBB
  store i8 1, i8* %33, align 1, !dbg !1379
  %1005 = load i32, i32* @x.19
  %1006 = load i32, i32* @y.20
  %1007 = sub i32 %1005, 1
  %1008 = mul i32 %1005, %1007
  %1009 = urem i32 %1008, 2
  %1010 = icmp eq i32 %1009, 0
  %1011 = icmp slt i32 %1006, 10
  %1012 = or i1 %1010, %1011
  br i1 %1012, label %originalBBpart2219, label %originalBB217alteredBB

originalBBpart2219:                               ; preds = %originalBB217
  br label %1013, !dbg !1380

1013:                                             ; preds = %originalBBpart2219, %originalBBpart2207, %originalBBpart2203, %originalBBpart2183, %originalBBpart2179, %originalBBpart2175
  %1014 = load i32, i32* @x.19
  %1015 = load i32, i32* @y.20
  %1016 = sub i32 %1014, 1
  %1017 = mul i32 %1014, %1016
  %1018 = urem i32 %1017, 2
  %1019 = icmp eq i32 %1018, 0
  %1020 = icmp slt i32 %1015, 10
  %1021 = or i1 %1019, %1020
  br i1 %1021, label %originalBB221, label %originalBB221alteredBB

originalBB221:                                    ; preds = %1013, %originalBB221alteredBB
  %1022 = load i8*, i8** %13, align 8, !dbg !1381
  %1023 = load i64, i64* %20, align 8, !dbg !1382
  %1024 = getelementptr inbounds i8, i8* %1022, i64 %1023, !dbg !1381
  %1025 = load i8, i8* %1024, align 1, !dbg !1381
  store i8 %1025, i8* %31, align 1, !dbg !1383
  %1026 = load i8, i8* %31, align 1, !dbg !1384
  %1027 = zext i8 %1026 to i32, !dbg !1384
  %1028 = load i32, i32* @x.19
  %1029 = load i32, i32* @y.20
  %1030 = sub i32 %1028, 1
  %1031 = mul i32 %1028, %1030
  %1032 = urem i32 %1031, 2
  %1033 = icmp eq i32 %1032, 0
  %1034 = icmp slt i32 %1029, 10
  %1035 = or i1 %1033, %1034
  br i1 %1035, label %originalBBpart2223, label %originalBB221alteredBB

originalBBpart2223:                               ; preds = %originalBB221
  switch i32 %1027, label %3392 [
    i32 0, label %1036
    i32 63, label %1813
    i32 7, label %2405
    i32 8, label %2422
    i32 12, label %2423
    i32 10, label %2440
    i32 13, label %2457
    i32 9, label %2474
    i32 11, label %2491
    i32 92, label %2508
    i32 123, label %2782
    i32 125, label %2782
    i32 35, label %2876
    i32 126, label %2876
    i32 32, label %2929
    i32 33, label %2946
    i32 34, label %2946
    i32 36, label %2946
    i32 38, label %2946
    i32 40, label %2946
    i32 41, label %2946
    i32 42, label %2946
    i32 59, label %2946
    i32 60, label %2946
    i32 61, label %2946
    i32 62, label %2946
    i32 91, label %2946
    i32 94, label %2946
    i32 96, label %2946
    i32 124, label %2946
    i32 39, label %3018
    i32 37, label %3375
    i32 43, label %3375
    i32 44, label %3375
    i32 45, label %3375
    i32 46, label %3375
    i32 47, label %3375
    i32 48, label %3375
    i32 49, label %3375
    i32 50, label %3375
    i32 51, label %3375
    i32 52, label %3375
    i32 53, label %3375
    i32 54, label %3375
    i32 55, label %3375
    i32 56, label %3375
    i32 57, label %3375
    i32 58, label %3375
    i32 65, label %3375
    i32 66, label %3375
    i32 67, label %3375
    i32 68, label %3375
    i32 69, label %3375
    i32 70, label %3375
    i32 71, label %3375
    i32 72, label %3375
    i32 73, label %3375
    i32 74, label %3375
    i32 75, label %3375
    i32 76, label %3375
    i32 77, label %3375
    i32 78, label %3375
    i32 79, label %3375
    i32 80, label %3375
    i32 81, label %3375
    i32 82, label %3375
    i32 83, label %3375
    i32 84, label %3375
    i32 85, label %3375
    i32 86, label %3375
    i32 87, label %3375
    i32 88, label %3375
    i32 89, label %3375
    i32 90, label %3375
    i32 93, label %3375
    i32 95, label %3375
    i32 97, label %3375
    i32 98, label %3375
    i32 99, label %3375
    i32 100, label %3375
    i32 101, label %3375
    i32 102, label %3375
    i32 103, label %3375
    i32 104, label %3375
    i32 105, label %3375
    i32 106, label %3375
    i32 107, label %3375
    i32 108, label %3375
    i32 109, label %3375
    i32 110, label %3375
    i32 111, label %3375
    i32 112, label %3375
    i32 113, label %3375
    i32 114, label %3375
    i32 115, label %3375
    i32 116, label %3375
    i32 117, label %3375
    i32 118, label %3375
    i32 119, label %3375
    i32 120, label %3375
    i32 121, label %3375
    i32 122, label %3375
  ], !dbg !1385

1036:                                             ; preds = %originalBBpart2223
  %1037 = load i32, i32* @x.19
  %1038 = load i32, i32* @y.20
  %1039 = sub i32 %1037, 1
  %1040 = mul i32 %1037, %1039
  %1041 = urem i32 %1040, 2
  %1042 = icmp eq i32 %1041, 0
  %1043 = icmp slt i32 %1038, 10
  %1044 = or i1 %1042, %1043
  br i1 %1044, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %1036, %originalBB225alteredBB
  %1045 = load i8, i8* %25, align 1, !dbg !1386
  %1046 = trunc i8 %1045 to i1, !dbg !1386
  %1047 = load i32, i32* @x.19
  %1048 = load i32, i32* @y.20
  %1049 = sub i32 %1047, 1
  %1050 = mul i32 %1047, %1049
  %1051 = urem i32 %1050, 2
  %1052 = icmp eq i32 %1051, 0
  %1053 = icmp slt i32 %1048, 10
  %1054 = or i1 %1052, %1053
  br i1 %1054, label %originalBBpart2227, label %originalBB225alteredBB

originalBBpart2227:                               ; preds = %originalBB225
  br i1 %1046, label %1055, label %1742, !dbg !1389

1055:                                             ; preds = %originalBBpart2227
  %1056 = load i32, i32* @x.19
  %1057 = load i32, i32* @y.20
  %1058 = sub i32 %1056, 1
  %1059 = mul i32 %1056, %1058
  %1060 = urem i32 %1059, 2
  %1061 = icmp eq i32 %1060, 0
  %1062 = icmp slt i32 %1057, 10
  %1063 = or i1 %1061, %1062
  br i1 %1063, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %1055, %originalBB229alteredBB
  %1064 = load i32, i32* @x.19
  %1065 = load i32, i32* @y.20
  %1066 = sub i32 %1064, 1
  %1067 = mul i32 %1064, %1066
  %1068 = urem i32 %1067, 2
  %1069 = icmp eq i32 %1068, 0
  %1070 = icmp slt i32 %1065, 10
  %1071 = or i1 %1069, %1070
  br i1 %1071, label %originalBBpart2231, label %originalBB229alteredBB

originalBBpart2231:                               ; preds = %originalBB229
  br label %1072, !dbg !1390

1072:                                             ; preds = %originalBBpart2231
  %1073 = load i32, i32* @x.19
  %1074 = load i32, i32* @y.20
  %1075 = sub i32 %1073, 1
  %1076 = mul i32 %1073, %1075
  %1077 = urem i32 %1076, 2
  %1078 = icmp eq i32 %1077, 0
  %1079 = icmp slt i32 %1074, 10
  %1080 = or i1 %1078, %1079
  br i1 %1080, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %1072, %originalBB233alteredBB
  %1081 = load i8, i8* %27, align 1, !dbg !1392
  %1082 = trunc i8 %1081 to i1, !dbg !1392
  %1083 = load i32, i32* @x.19
  %1084 = load i32, i32* @y.20
  %1085 = sub i32 %1083, 1
  %1086 = mul i32 %1083, %1085
  %1087 = urem i32 %1086, 2
  %1088 = icmp eq i32 %1087, 0
  %1089 = icmp slt i32 %1084, 10
  %1090 = or i1 %1088, %1089
  br i1 %1090, label %originalBBpart2235, label %originalBB233alteredBB

originalBBpart2235:                               ; preds = %originalBB233
  br i1 %1082, label %1091, label %1108, !dbg !1395

1091:                                             ; preds = %originalBBpart2235
  %1092 = load i32, i32* @x.19
  %1093 = load i32, i32* @y.20
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %1091, %originalBB237alteredBB
  %1100 = load i32, i32* @x.19
  %1101 = load i32, i32* @y.20
  %1102 = sub i32 %1100, 1
  %1103 = mul i32 %1100, %1102
  %1104 = urem i32 %1103, 2
  %1105 = icmp eq i32 %1104, 0
  %1106 = icmp slt i32 %1101, 10
  %1107 = or i1 %1105, %1106
  br i1 %1107, label %originalBBpart2239, label %originalBB237alteredBB

originalBBpart2239:                               ; preds = %originalBB237
  br label %6590, !dbg !1392

1108:                                             ; preds = %originalBBpart2235
  %1109 = load i32, i32* @x.19
  %1110 = load i32, i32* @y.20
  %1111 = sub i32 %1109, 1
  %1112 = mul i32 %1109, %1111
  %1113 = urem i32 %1112, 2
  %1114 = icmp eq i32 %1113, 0
  %1115 = icmp slt i32 %1110, 10
  %1116 = or i1 %1114, %1115
  br i1 %1116, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %1108, %originalBB241alteredBB
  store i8 1, i8* %34, align 1, !dbg !1395
  %1117 = load i32, i32* %15, align 4, !dbg !1396
  %1118 = icmp eq i32 %1117, 2, !dbg !1396
  %1119 = load i32, i32* @x.19
  %1120 = load i32, i32* @y.20
  %1121 = sub i32 %1119, 1
  %1122 = mul i32 %1119, %1121
  %1123 = urem i32 %1122, 2
  %1124 = icmp eq i32 %1123, 0
  %1125 = icmp slt i32 %1120, 10
  %1126 = or i1 %1124, %1125
  br i1 %1126, label %originalBBpart2243, label %originalBB241alteredBB

originalBBpart2243:                               ; preds = %originalBB241
  br i1 %1118, label %1127, label %1375, !dbg !1396

1127:                                             ; preds = %originalBBpart2243
  %1128 = load i32, i32* @x.19
  %1129 = load i32, i32* @y.20
  %1130 = sub i32 %1128, 1
  %1131 = mul i32 %1128, %1130
  %1132 = urem i32 %1131, 2
  %1133 = icmp eq i32 %1132, 0
  %1134 = icmp slt i32 %1129, 10
  %1135 = or i1 %1133, %1134
  br i1 %1135, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %1127, %originalBB245alteredBB
  %1136 = load i8, i8* %28, align 1, !dbg !1396
  %1137 = trunc i8 %1136 to i1, !dbg !1396
  %1138 = load i32, i32* @x.19
  %1139 = load i32, i32* @y.20
  %1140 = sub i32 %1138, 1
  %1141 = mul i32 %1138, %1140
  %1142 = urem i32 %1141, 2
  %1143 = icmp eq i32 %1142, 0
  %1144 = icmp slt i32 %1139, 10
  %1145 = or i1 %1143, %1144
  br i1 %1145, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br i1 %1137, label %1375, label %1146, !dbg !1395

1146:                                             ; preds = %originalBBpart2247
  %1147 = load i32, i32* @x.19
  %1148 = load i32, i32* @y.20
  %1149 = sub i32 %1147, 1
  %1150 = mul i32 %1147, %1149
  %1151 = urem i32 %1150, 2
  %1152 = icmp eq i32 %1151, 0
  %1153 = icmp slt i32 %1148, 10
  %1154 = or i1 %1152, %1153
  br i1 %1154, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %1146, %originalBB249alteredBB
  %1155 = load i32, i32* @x.19
  %1156 = load i32, i32* @y.20
  %1157 = sub i32 %1155, 1
  %1158 = mul i32 %1155, %1157
  %1159 = urem i32 %1158, 2
  %1160 = icmp eq i32 %1159, 0
  %1161 = icmp slt i32 %1156, 10
  %1162 = or i1 %1160, %1161
  br i1 %1162, label %originalBBpart2251, label %originalBB249alteredBB

originalBBpart2251:                               ; preds = %originalBB249
  br label %1163, !dbg !1398

1163:                                             ; preds = %originalBBpart2251
  %1164 = load i32, i32* @x.19
  %1165 = load i32, i32* @y.20
  %1166 = sub i32 %1164, 1
  %1167 = mul i32 %1164, %1166
  %1168 = urem i32 %1167, 2
  %1169 = icmp eq i32 %1168, 0
  %1170 = icmp slt i32 %1165, 10
  %1171 = or i1 %1169, %1170
  br i1 %1171, label %originalBB253, label %originalBB253alteredBB

originalBB253:                                    ; preds = %1163, %originalBB253alteredBB
  %1172 = load i64, i64* %21, align 8, !dbg !1400
  %1173 = load i64, i64* %12, align 8, !dbg !1400
  %1174 = icmp ult i64 %1172, %1173, !dbg !1400
  %1175 = load i32, i32* @x.19
  %1176 = load i32, i32* @y.20
  %1177 = sub i32 %1175, 1
  %1178 = mul i32 %1175, %1177
  %1179 = urem i32 %1178, 2
  %1180 = icmp eq i32 %1179, 0
  %1181 = icmp slt i32 %1176, 10
  %1182 = or i1 %1180, %1181
  br i1 %1182, label %originalBBpart2255, label %originalBB253alteredBB

originalBBpart2255:                               ; preds = %originalBB253
  br i1 %1174, label %1183, label %1203, !dbg !1403

1183:                                             ; preds = %originalBBpart2255
  %1184 = load i32, i32* @x.19
  %1185 = load i32, i32* @y.20
  %1186 = sub i32 %1184, 1
  %1187 = mul i32 %1184, %1186
  %1188 = urem i32 %1187, 2
  %1189 = icmp eq i32 %1188, 0
  %1190 = icmp slt i32 %1185, 10
  %1191 = or i1 %1189, %1190
  br i1 %1191, label %originalBB257, label %originalBB257alteredBB

originalBB257:                                    ; preds = %1183, %originalBB257alteredBB
  %1192 = load i8*, i8** %11, align 8, !dbg !1400
  %1193 = load i64, i64* %21, align 8, !dbg !1400
  %1194 = getelementptr inbounds i8, i8* %1192, i64 %1193, !dbg !1400
  store i8 39, i8* %1194, align 1, !dbg !1400
  %1195 = load i32, i32* @x.19
  %1196 = load i32, i32* @y.20
  %1197 = sub i32 %1195, 1
  %1198 = mul i32 %1195, %1197
  %1199 = urem i32 %1198, 2
  %1200 = icmp eq i32 %1199, 0
  %1201 = icmp slt i32 %1196, 10
  %1202 = or i1 %1200, %1201
  br i1 %1202, label %originalBBpart2259, label %originalBB257alteredBB

originalBBpart2259:                               ; preds = %originalBB257
  br label %1203, !dbg !1400

1203:                                             ; preds = %originalBBpart2259, %originalBBpart2255
  %1204 = load i32, i32* @x.19
  %1205 = load i32, i32* @y.20
  %1206 = sub i32 %1204, 1
  %1207 = mul i32 %1204, %1206
  %1208 = urem i32 %1207, 2
  %1209 = icmp eq i32 %1208, 0
  %1210 = icmp slt i32 %1205, 10
  %1211 = or i1 %1209, %1210
  br i1 %1211, label %originalBB261, label %originalBB261alteredBB

originalBB261:                                    ; preds = %1203, %originalBB261alteredBB
  %1212 = load i64, i64* %21, align 8, !dbg !1403
  %1213 = add i64 %1212, 1, !dbg !1403
  store i64 %1213, i64* %21, align 8, !dbg !1403
  %1214 = load i32, i32* @x.19
  %1215 = load i32, i32* @y.20
  %1216 = sub i32 %1214, 1
  %1217 = mul i32 %1214, %1216
  %1218 = urem i32 %1217, 2
  %1219 = icmp eq i32 %1218, 0
  %1220 = icmp slt i32 %1215, 10
  %1221 = or i1 %1219, %1220
  br i1 %1221, label %originalBBpart2265, label %originalBB261alteredBB

originalBBpart2265:                               ; preds = %originalBB261
  br label %1222, !dbg !1403

1222:                                             ; preds = %originalBBpart2265
  %1223 = load i32, i32* @x.19
  %1224 = load i32, i32* @y.20
  %1225 = sub i32 %1223, 1
  %1226 = mul i32 %1223, %1225
  %1227 = urem i32 %1226, 2
  %1228 = icmp eq i32 %1227, 0
  %1229 = icmp slt i32 %1224, 10
  %1230 = or i1 %1228, %1229
  br i1 %1230, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %1222, %originalBB267alteredBB
  %1231 = load i32, i32* @x.19
  %1232 = load i32, i32* @y.20
  %1233 = sub i32 %1231, 1
  %1234 = mul i32 %1231, %1233
  %1235 = urem i32 %1234, 2
  %1236 = icmp eq i32 %1235, 0
  %1237 = icmp slt i32 %1232, 10
  %1238 = or i1 %1236, %1237
  br i1 %1238, label %originalBBpart2269, label %originalBB267alteredBB

originalBBpart2269:                               ; preds = %originalBB267
  br label %1239, !dbg !1398

1239:                                             ; preds = %originalBBpart2269
  %1240 = load i32, i32* @x.19
  %1241 = load i32, i32* @y.20
  %1242 = sub i32 %1240, 1
  %1243 = mul i32 %1240, %1242
  %1244 = urem i32 %1243, 2
  %1245 = icmp eq i32 %1244, 0
  %1246 = icmp slt i32 %1241, 10
  %1247 = or i1 %1245, %1246
  br i1 %1247, label %originalBB271, label %originalBB271alteredBB

originalBB271:                                    ; preds = %1239, %originalBB271alteredBB
  %1248 = load i64, i64* %21, align 8, !dbg !1404
  %1249 = load i64, i64* %12, align 8, !dbg !1404
  %1250 = icmp ult i64 %1248, %1249, !dbg !1404
  %1251 = load i32, i32* @x.19
  %1252 = load i32, i32* @y.20
  %1253 = sub i32 %1251, 1
  %1254 = mul i32 %1251, %1253
  %1255 = urem i32 %1254, 2
  %1256 = icmp eq i32 %1255, 0
  %1257 = icmp slt i32 %1252, 10
  %1258 = or i1 %1256, %1257
  br i1 %1258, label %originalBBpart2273, label %originalBB271alteredBB

originalBBpart2273:                               ; preds = %originalBB271
  br i1 %1250, label %1259, label %1279, !dbg !1407

1259:                                             ; preds = %originalBBpart2273
  %1260 = load i32, i32* @x.19
  %1261 = load i32, i32* @y.20
  %1262 = sub i32 %1260, 1
  %1263 = mul i32 %1260, %1262
  %1264 = urem i32 %1263, 2
  %1265 = icmp eq i32 %1264, 0
  %1266 = icmp slt i32 %1261, 10
  %1267 = or i1 %1265, %1266
  br i1 %1267, label %originalBB275, label %originalBB275alteredBB

originalBB275:                                    ; preds = %1259, %originalBB275alteredBB
  %1268 = load i8*, i8** %11, align 8, !dbg !1404
  %1269 = load i64, i64* %21, align 8, !dbg !1404
  %1270 = getelementptr inbounds i8, i8* %1268, i64 %1269, !dbg !1404
  store i8 36, i8* %1270, align 1, !dbg !1404
  %1271 = load i32, i32* @x.19
  %1272 = load i32, i32* @y.20
  %1273 = sub i32 %1271, 1
  %1274 = mul i32 %1271, %1273
  %1275 = urem i32 %1274, 2
  %1276 = icmp eq i32 %1275, 0
  %1277 = icmp slt i32 %1272, 10
  %1278 = or i1 %1276, %1277
  br i1 %1278, label %originalBBpart2277, label %originalBB275alteredBB

originalBBpart2277:                               ; preds = %originalBB275
  br label %1279, !dbg !1404

1279:                                             ; preds = %originalBBpart2277, %originalBBpart2273
  %1280 = load i64, i64* %21, align 8, !dbg !1407
  %1281 = add i64 %1280, 1, !dbg !1407
  store i64 %1281, i64* %21, align 8, !dbg !1407
  br label %1282, !dbg !1407

1282:                                             ; preds = %1279
  %1283 = load i32, i32* @x.19
  %1284 = load i32, i32* @y.20
  %1285 = sub i32 %1283, 1
  %1286 = mul i32 %1283, %1285
  %1287 = urem i32 %1286, 2
  %1288 = icmp eq i32 %1287, 0
  %1289 = icmp slt i32 %1284, 10
  %1290 = or i1 %1288, %1289
  br i1 %1290, label %originalBB279, label %originalBB279alteredBB

originalBB279:                                    ; preds = %1282, %originalBB279alteredBB
  %1291 = load i32, i32* @x.19
  %1292 = load i32, i32* @y.20
  %1293 = sub i32 %1291, 1
  %1294 = mul i32 %1291, %1293
  %1295 = urem i32 %1294, 2
  %1296 = icmp eq i32 %1295, 0
  %1297 = icmp slt i32 %1292, 10
  %1298 = or i1 %1296, %1297
  br i1 %1298, label %originalBBpart2281, label %originalBB279alteredBB

originalBBpart2281:                               ; preds = %originalBB279
  br label %1299, !dbg !1398

1299:                                             ; preds = %originalBBpart2281
  %1300 = load i32, i32* @x.19
  %1301 = load i32, i32* @y.20
  %1302 = sub i32 %1300, 1
  %1303 = mul i32 %1300, %1302
  %1304 = urem i32 %1303, 2
  %1305 = icmp eq i32 %1304, 0
  %1306 = icmp slt i32 %1301, 10
  %1307 = or i1 %1305, %1306
  br i1 %1307, label %originalBB283, label %originalBB283alteredBB

originalBB283:                                    ; preds = %1299, %originalBB283alteredBB
  %1308 = load i64, i64* %21, align 8, !dbg !1408
  %1309 = load i64, i64* %12, align 8, !dbg !1408
  %1310 = icmp ult i64 %1308, %1309, !dbg !1408
  %1311 = load i32, i32* @x.19
  %1312 = load i32, i32* @y.20
  %1313 = sub i32 %1311, 1
  %1314 = mul i32 %1311, %1313
  %1315 = urem i32 %1314, 2
  %1316 = icmp eq i32 %1315, 0
  %1317 = icmp slt i32 %1312, 10
  %1318 = or i1 %1316, %1317
  br i1 %1318, label %originalBBpart2285, label %originalBB283alteredBB

originalBBpart2285:                               ; preds = %originalBB283
  br i1 %1310, label %1319, label %1339, !dbg !1411

1319:                                             ; preds = %originalBBpart2285
  %1320 = load i32, i32* @x.19
  %1321 = load i32, i32* @y.20
  %1322 = sub i32 %1320, 1
  %1323 = mul i32 %1320, %1322
  %1324 = urem i32 %1323, 2
  %1325 = icmp eq i32 %1324, 0
  %1326 = icmp slt i32 %1321, 10
  %1327 = or i1 %1325, %1326
  br i1 %1327, label %originalBB287, label %originalBB287alteredBB

originalBB287:                                    ; preds = %1319, %originalBB287alteredBB
  %1328 = load i8*, i8** %11, align 8, !dbg !1408
  %1329 = load i64, i64* %21, align 8, !dbg !1408
  %1330 = getelementptr inbounds i8, i8* %1328, i64 %1329, !dbg !1408
  store i8 39, i8* %1330, align 1, !dbg !1408
  %1331 = load i32, i32* @x.19
  %1332 = load i32, i32* @y.20
  %1333 = sub i32 %1331, 1
  %1334 = mul i32 %1331, %1333
  %1335 = urem i32 %1334, 2
  %1336 = icmp eq i32 %1335, 0
  %1337 = icmp slt i32 %1332, 10
  %1338 = or i1 %1336, %1337
  br i1 %1338, label %originalBBpart2289, label %originalBB287alteredBB

originalBBpart2289:                               ; preds = %originalBB287
  br label %1339, !dbg !1408

1339:                                             ; preds = %originalBBpart2289, %originalBBpart2285
  %1340 = load i32, i32* @x.19
  %1341 = load i32, i32* @y.20
  %1342 = sub i32 %1340, 1
  %1343 = mul i32 %1340, %1342
  %1344 = urem i32 %1343, 2
  %1345 = icmp eq i32 %1344, 0
  %1346 = icmp slt i32 %1341, 10
  %1347 = or i1 %1345, %1346
  br i1 %1347, label %originalBB291, label %originalBB291alteredBB

originalBB291:                                    ; preds = %1339, %originalBB291alteredBB
  %1348 = load i64, i64* %21, align 8, !dbg !1411
  %1349 = add i64 %1348, 1, !dbg !1411
  store i64 %1349, i64* %21, align 8, !dbg !1411
  %1350 = load i32, i32* @x.19
  %1351 = load i32, i32* @y.20
  %1352 = sub i32 %1350, 1
  %1353 = mul i32 %1350, %1352
  %1354 = urem i32 %1353, 2
  %1355 = icmp eq i32 %1354, 0
  %1356 = icmp slt i32 %1351, 10
  %1357 = or i1 %1355, %1356
  br i1 %1357, label %originalBBpart2301, label %originalBB291alteredBB

originalBBpart2301:                               ; preds = %originalBB291
  br label %1358, !dbg !1411

1358:                                             ; preds = %originalBBpart2301
  %1359 = load i32, i32* @x.19
  %1360 = load i32, i32* @y.20
  %1361 = sub i32 %1359, 1
  %1362 = mul i32 %1359, %1361
  %1363 = urem i32 %1362, 2
  %1364 = icmp eq i32 %1363, 0
  %1365 = icmp slt i32 %1360, 10
  %1366 = or i1 %1364, %1365
  br i1 %1366, label %originalBB303, label %originalBB303alteredBB

originalBB303:                                    ; preds = %1358, %originalBB303alteredBB
  store i8 1, i8* %28, align 1, !dbg !1398
  %1367 = load i32, i32* @x.19
  %1368 = load i32, i32* @y.20
  %1369 = sub i32 %1367, 1
  %1370 = mul i32 %1367, %1369
  %1371 = urem i32 %1370, 2
  %1372 = icmp eq i32 %1371, 0
  %1373 = icmp slt i32 %1368, 10
  %1374 = or i1 %1372, %1373
  br i1 %1374, label %originalBBpart2305, label %originalBB303alteredBB

originalBBpart2305:                               ; preds = %originalBB303
  br label %1375, !dbg !1398

1375:                                             ; preds = %originalBBpart2305, %originalBBpart2247, %originalBBpart2243
  %1376 = load i32, i32* @x.19
  %1377 = load i32, i32* @y.20
  %1378 = sub i32 %1376, 1
  %1379 = mul i32 %1376, %1378
  %1380 = urem i32 %1379, 2
  %1381 = icmp eq i32 %1380, 0
  %1382 = icmp slt i32 %1377, 10
  %1383 = or i1 %1381, %1382
  br i1 %1383, label %originalBB307, label %originalBB307alteredBB

originalBB307:                                    ; preds = %1375, %originalBB307alteredBB
  %1384 = load i32, i32* @x.19
  %1385 = load i32, i32* @y.20
  %1386 = sub i32 %1384, 1
  %1387 = mul i32 %1384, %1386
  %1388 = urem i32 %1387, 2
  %1389 = icmp eq i32 %1388, 0
  %1390 = icmp slt i32 %1385, 10
  %1391 = or i1 %1389, %1390
  br i1 %1391, label %originalBBpart2309, label %originalBB307alteredBB

originalBBpart2309:                               ; preds = %originalBB307
  br label %1392, !dbg !1395

1392:                                             ; preds = %originalBBpart2309
  %1393 = load i32, i32* @x.19
  %1394 = load i32, i32* @y.20
  %1395 = sub i32 %1393, 1
  %1396 = mul i32 %1393, %1395
  %1397 = urem i32 %1396, 2
  %1398 = icmp eq i32 %1397, 0
  %1399 = icmp slt i32 %1394, 10
  %1400 = or i1 %1398, %1399
  br i1 %1400, label %originalBB311, label %originalBB311alteredBB

originalBB311:                                    ; preds = %1392, %originalBB311alteredBB
  %1401 = load i64, i64* %21, align 8, !dbg !1412
  %1402 = load i64, i64* %12, align 8, !dbg !1412
  %1403 = icmp ult i64 %1401, %1402, !dbg !1412
  %1404 = load i32, i32* @x.19
  %1405 = load i32, i32* @y.20
  %1406 = sub i32 %1404, 1
  %1407 = mul i32 %1404, %1406
  %1408 = urem i32 %1407, 2
  %1409 = icmp eq i32 %1408, 0
  %1410 = icmp slt i32 %1405, 10
  %1411 = or i1 %1409, %1410
  br i1 %1411, label %originalBBpart2313, label %originalBB311alteredBB

originalBBpart2313:                               ; preds = %originalBB311
  br i1 %1403, label %1412, label %1432, !dbg !1415

1412:                                             ; preds = %originalBBpart2313
  %1413 = load i32, i32* @x.19
  %1414 = load i32, i32* @y.20
  %1415 = sub i32 %1413, 1
  %1416 = mul i32 %1413, %1415
  %1417 = urem i32 %1416, 2
  %1418 = icmp eq i32 %1417, 0
  %1419 = icmp slt i32 %1414, 10
  %1420 = or i1 %1418, %1419
  br i1 %1420, label %originalBB315, label %originalBB315alteredBB

originalBB315:                                    ; preds = %1412, %originalBB315alteredBB
  %1421 = load i8*, i8** %11, align 8, !dbg !1412
  %1422 = load i64, i64* %21, align 8, !dbg !1412
  %1423 = getelementptr inbounds i8, i8* %1421, i64 %1422, !dbg !1412
  store i8 92, i8* %1423, align 1, !dbg !1412
  %1424 = load i32, i32* @x.19
  %1425 = load i32, i32* @y.20
  %1426 = sub i32 %1424, 1
  %1427 = mul i32 %1424, %1426
  %1428 = urem i32 %1427, 2
  %1429 = icmp eq i32 %1428, 0
  %1430 = icmp slt i32 %1425, 10
  %1431 = or i1 %1429, %1430
  br i1 %1431, label %originalBBpart2317, label %originalBB315alteredBB

originalBBpart2317:                               ; preds = %originalBB315
  br label %1432, !dbg !1412

1432:                                             ; preds = %originalBBpart2317, %originalBBpart2313
  %1433 = load i32, i32* @x.19
  %1434 = load i32, i32* @y.20
  %1435 = sub i32 %1433, 1
  %1436 = mul i32 %1433, %1435
  %1437 = urem i32 %1436, 2
  %1438 = icmp eq i32 %1437, 0
  %1439 = icmp slt i32 %1434, 10
  %1440 = or i1 %1438, %1439
  br i1 %1440, label %originalBB319, label %originalBB319alteredBB

originalBB319:                                    ; preds = %1432, %originalBB319alteredBB
  %1441 = load i64, i64* %21, align 8, !dbg !1415
  %1442 = add i64 %1441, 1, !dbg !1415
  store i64 %1442, i64* %21, align 8, !dbg !1415
  %1443 = load i32, i32* @x.19
  %1444 = load i32, i32* @y.20
  %1445 = sub i32 %1443, 1
  %1446 = mul i32 %1443, %1445
  %1447 = urem i32 %1446, 2
  %1448 = icmp eq i32 %1447, 0
  %1449 = icmp slt i32 %1444, 10
  %1450 = or i1 %1448, %1449
  br i1 %1450, label %originalBBpart2324, label %originalBB319alteredBB

originalBBpart2324:                               ; preds = %originalBB319
  br label %1451, !dbg !1415

1451:                                             ; preds = %originalBBpart2324
  %1452 = load i32, i32* @x.19
  %1453 = load i32, i32* @y.20
  %1454 = sub i32 %1452, 1
  %1455 = mul i32 %1452, %1454
  %1456 = urem i32 %1455, 2
  %1457 = icmp eq i32 %1456, 0
  %1458 = icmp slt i32 %1453, 10
  %1459 = or i1 %1457, %1458
  br i1 %1459, label %originalBB326, label %originalBB326alteredBB

originalBB326:                                    ; preds = %1451, %originalBB326alteredBB
  %1460 = load i32, i32* @x.19
  %1461 = load i32, i32* @y.20
  %1462 = sub i32 %1460, 1
  %1463 = mul i32 %1460, %1462
  %1464 = urem i32 %1463, 2
  %1465 = icmp eq i32 %1464, 0
  %1466 = icmp slt i32 %1461, 10
  %1467 = or i1 %1465, %1466
  br i1 %1467, label %originalBBpart2328, label %originalBB326alteredBB

originalBBpart2328:                               ; preds = %originalBB326
  br label %1468, !dbg !1395

1468:                                             ; preds = %originalBBpart2328
  %1469 = load i32, i32* @x.19
  %1470 = load i32, i32* @y.20
  %1471 = sub i32 %1469, 1
  %1472 = mul i32 %1469, %1471
  %1473 = urem i32 %1472, 2
  %1474 = icmp eq i32 %1473, 0
  %1475 = icmp slt i32 %1470, 10
  %1476 = or i1 %1474, %1475
  br i1 %1476, label %originalBB330, label %originalBB330alteredBB

originalBB330:                                    ; preds = %1468, %originalBB330alteredBB
  %1477 = load i32, i32* %15, align 4, !dbg !1416
  %1478 = icmp ne i32 %1477, 2, !dbg !1418
  %1479 = load i32, i32* @x.19
  %1480 = load i32, i32* @y.20
  %1481 = sub i32 %1479, 1
  %1482 = mul i32 %1479, %1481
  %1483 = urem i32 %1482, 2
  %1484 = icmp eq i32 %1483, 0
  %1485 = icmp slt i32 %1480, 10
  %1486 = or i1 %1484, %1485
  br i1 %1486, label %originalBBpart2332, label %originalBB330alteredBB

originalBBpart2332:                               ; preds = %originalBB330
  br i1 %1478, label %1487, label %1725, !dbg !1419

1487:                                             ; preds = %originalBBpart2332
  %1488 = load i32, i32* @x.19
  %1489 = load i32, i32* @y.20
  %1490 = sub i32 %1488, 1
  %1491 = mul i32 %1488, %1490
  %1492 = urem i32 %1491, 2
  %1493 = icmp eq i32 %1492, 0
  %1494 = icmp slt i32 %1489, 10
  %1495 = or i1 %1493, %1494
  br i1 %1495, label %originalBB334, label %originalBB334alteredBB

originalBB334:                                    ; preds = %1487, %originalBB334alteredBB
  %1496 = load i64, i64* %20, align 8, !dbg !1420
  %1497 = add i64 %1496, 1, !dbg !1421
  %1498 = load i64, i64* %14, align 8, !dbg !1422
  %1499 = icmp ult i64 %1497, %1498, !dbg !1423
  %1500 = load i32, i32* @x.19
  %1501 = load i32, i32* @y.20
  %1502 = sub i32 %1500, 1
  %1503 = mul i32 %1500, %1502
  %1504 = urem i32 %1503, 2
  %1505 = icmp eq i32 %1504, 0
  %1506 = icmp slt i32 %1501, 10
  %1507 = or i1 %1505, %1506
  br i1 %1507, label %originalBBpart2341, label %originalBB334alteredBB

originalBBpart2341:                               ; preds = %originalBB334
  br i1 %1499, label %1508, label %1725, !dbg !1424

1508:                                             ; preds = %originalBBpart2341
  %1509 = load i32, i32* @x.19
  %1510 = load i32, i32* @y.20
  %1511 = sub i32 %1509, 1
  %1512 = mul i32 %1509, %1511
  %1513 = urem i32 %1512, 2
  %1514 = icmp eq i32 %1513, 0
  %1515 = icmp slt i32 %1510, 10
  %1516 = or i1 %1514, %1515
  br i1 %1516, label %originalBB343, label %originalBB343alteredBB

originalBB343:                                    ; preds = %1508, %originalBB343alteredBB
  %1517 = load i8*, i8** %13, align 8, !dbg !1425
  %1518 = load i64, i64* %20, align 8, !dbg !1426
  %1519 = add i64 %1518, 1, !dbg !1427
  %1520 = getelementptr inbounds i8, i8* %1517, i64 %1519, !dbg !1425
  %1521 = load i8, i8* %1520, align 1, !dbg !1425
  %1522 = sext i8 %1521 to i32, !dbg !1425
  %1523 = icmp sle i32 48, %1522, !dbg !1428
  %1524 = load i32, i32* @x.19
  %1525 = load i32, i32* @y.20
  %1526 = sub i32 %1524, 1
  %1527 = mul i32 %1524, %1526
  %1528 = urem i32 %1527, 2
  %1529 = icmp eq i32 %1528, 0
  %1530 = icmp slt i32 %1525, 10
  %1531 = or i1 %1529, %1530
  br i1 %1531, label %originalBBpart2354, label %originalBB343alteredBB

originalBBpart2354:                               ; preds = %originalBB343
  br i1 %1523, label %1532, label %1725, !dbg !1429

1532:                                             ; preds = %originalBBpart2354
  %1533 = load i32, i32* @x.19
  %1534 = load i32, i32* @y.20
  %1535 = sub i32 %1533, 1
  %1536 = mul i32 %1533, %1535
  %1537 = urem i32 %1536, 2
  %1538 = icmp eq i32 %1537, 0
  %1539 = icmp slt i32 %1534, 10
  %1540 = or i1 %1538, %1539
  br i1 %1540, label %originalBB356, label %originalBB356alteredBB

originalBB356:                                    ; preds = %1532, %originalBB356alteredBB
  %1541 = load i8*, i8** %13, align 8, !dbg !1430
  %1542 = load i64, i64* %20, align 8, !dbg !1431
  %1543 = add i64 %1542, 1, !dbg !1432
  %1544 = getelementptr inbounds i8, i8* %1541, i64 %1543, !dbg !1430
  %1545 = load i8, i8* %1544, align 1, !dbg !1430
  %1546 = sext i8 %1545 to i32, !dbg !1430
  %1547 = icmp sle i32 %1546, 57, !dbg !1433
  %1548 = load i32, i32* @x.19
  %1549 = load i32, i32* @y.20
  %1550 = sub i32 %1548, 1
  %1551 = mul i32 %1548, %1550
  %1552 = urem i32 %1551, 2
  %1553 = icmp eq i32 %1552, 0
  %1554 = icmp slt i32 %1549, 10
  %1555 = or i1 %1553, %1554
  br i1 %1555, label %originalBBpart2363, label %originalBB356alteredBB

originalBBpart2363:                               ; preds = %originalBB356
  br i1 %1547, label %1556, label %1725, !dbg !1434

1556:                                             ; preds = %originalBBpart2363
  %1557 = load i32, i32* @x.19
  %1558 = load i32, i32* @y.20
  %1559 = sub i32 %1557, 1
  %1560 = mul i32 %1557, %1559
  %1561 = urem i32 %1560, 2
  %1562 = icmp eq i32 %1561, 0
  %1563 = icmp slt i32 %1558, 10
  %1564 = or i1 %1562, %1563
  br i1 %1564, label %originalBB365, label %originalBB365alteredBB

originalBB365:                                    ; preds = %1556, %originalBB365alteredBB
  %1565 = load i32, i32* @x.19
  %1566 = load i32, i32* @y.20
  %1567 = sub i32 %1565, 1
  %1568 = mul i32 %1565, %1567
  %1569 = urem i32 %1568, 2
  %1570 = icmp eq i32 %1569, 0
  %1571 = icmp slt i32 %1566, 10
  %1572 = or i1 %1570, %1571
  br i1 %1572, label %originalBBpart2367, label %originalBB365alteredBB

originalBBpart2367:                               ; preds = %originalBB365
  br label %1573, !dbg !1435

1573:                                             ; preds = %originalBBpart2367
  %1574 = load i32, i32* @x.19
  %1575 = load i32, i32* @y.20
  %1576 = sub i32 %1574, 1
  %1577 = mul i32 %1574, %1576
  %1578 = urem i32 %1577, 2
  %1579 = icmp eq i32 %1578, 0
  %1580 = icmp slt i32 %1575, 10
  %1581 = or i1 %1579, %1580
  br i1 %1581, label %originalBB369, label %originalBB369alteredBB

originalBB369:                                    ; preds = %1573, %originalBB369alteredBB
  %1582 = load i64, i64* %21, align 8, !dbg !1437
  %1583 = load i64, i64* %12, align 8, !dbg !1437
  %1584 = icmp ult i64 %1582, %1583, !dbg !1437
  %1585 = load i32, i32* @x.19
  %1586 = load i32, i32* @y.20
  %1587 = sub i32 %1585, 1
  %1588 = mul i32 %1585, %1587
  %1589 = urem i32 %1588, 2
  %1590 = icmp eq i32 %1589, 0
  %1591 = icmp slt i32 %1586, 10
  %1592 = or i1 %1590, %1591
  br i1 %1592, label %originalBBpart2371, label %originalBB369alteredBB

originalBBpart2371:                               ; preds = %originalBB369
  br i1 %1584, label %1593, label %1613, !dbg !1440

1593:                                             ; preds = %originalBBpart2371
  %1594 = load i32, i32* @x.19
  %1595 = load i32, i32* @y.20
  %1596 = sub i32 %1594, 1
  %1597 = mul i32 %1594, %1596
  %1598 = urem i32 %1597, 2
  %1599 = icmp eq i32 %1598, 0
  %1600 = icmp slt i32 %1595, 10
  %1601 = or i1 %1599, %1600
  br i1 %1601, label %originalBB373, label %originalBB373alteredBB

originalBB373:                                    ; preds = %1593, %originalBB373alteredBB
  %1602 = load i8*, i8** %11, align 8, !dbg !1437
  %1603 = load i64, i64* %21, align 8, !dbg !1437
  %1604 = getelementptr inbounds i8, i8* %1602, i64 %1603, !dbg !1437
  store i8 48, i8* %1604, align 1, !dbg !1437
  %1605 = load i32, i32* @x.19
  %1606 = load i32, i32* @y.20
  %1607 = sub i32 %1605, 1
  %1608 = mul i32 %1605, %1607
  %1609 = urem i32 %1608, 2
  %1610 = icmp eq i32 %1609, 0
  %1611 = icmp slt i32 %1606, 10
  %1612 = or i1 %1610, %1611
  br i1 %1612, label %originalBBpart2375, label %originalBB373alteredBB

originalBBpart2375:                               ; preds = %originalBB373
  br label %1613, !dbg !1437

1613:                                             ; preds = %originalBBpart2375, %originalBBpart2371
  %1614 = load i32, i32* @x.19
  %1615 = load i32, i32* @y.20
  %1616 = sub i32 %1614, 1
  %1617 = mul i32 %1614, %1616
  %1618 = urem i32 %1617, 2
  %1619 = icmp eq i32 %1618, 0
  %1620 = icmp slt i32 %1615, 10
  %1621 = or i1 %1619, %1620
  br i1 %1621, label %originalBB377, label %originalBB377alteredBB

originalBB377:                                    ; preds = %1613, %originalBB377alteredBB
  %1622 = load i64, i64* %21, align 8, !dbg !1440
  %1623 = add i64 %1622, 1, !dbg !1440
  store i64 %1623, i64* %21, align 8, !dbg !1440
  %1624 = load i32, i32* @x.19
  %1625 = load i32, i32* @y.20
  %1626 = sub i32 %1624, 1
  %1627 = mul i32 %1624, %1626
  %1628 = urem i32 %1627, 2
  %1629 = icmp eq i32 %1628, 0
  %1630 = icmp slt i32 %1625, 10
  %1631 = or i1 %1629, %1630
  br i1 %1631, label %originalBBpart2387, label %originalBB377alteredBB

originalBBpart2387:                               ; preds = %originalBB377
  br label %1632, !dbg !1440

1632:                                             ; preds = %originalBBpart2387
  %1633 = load i32, i32* @x.19
  %1634 = load i32, i32* @y.20
  %1635 = sub i32 %1633, 1
  %1636 = mul i32 %1633, %1635
  %1637 = urem i32 %1636, 2
  %1638 = icmp eq i32 %1637, 0
  %1639 = icmp slt i32 %1634, 10
  %1640 = or i1 %1638, %1639
  br i1 %1640, label %originalBB389, label %originalBB389alteredBB

originalBB389:                                    ; preds = %1632, %originalBB389alteredBB
  %1641 = load i32, i32* @x.19
  %1642 = load i32, i32* @y.20
  %1643 = sub i32 %1641, 1
  %1644 = mul i32 %1641, %1643
  %1645 = urem i32 %1644, 2
  %1646 = icmp eq i32 %1645, 0
  %1647 = icmp slt i32 %1642, 10
  %1648 = or i1 %1646, %1647
  br i1 %1648, label %originalBBpart2391, label %originalBB389alteredBB

originalBBpart2391:                               ; preds = %originalBB389
  br label %1649, !dbg !1441

1649:                                             ; preds = %originalBBpart2391
  %1650 = load i32, i32* @x.19
  %1651 = load i32, i32* @y.20
  %1652 = sub i32 %1650, 1
  %1653 = mul i32 %1650, %1652
  %1654 = urem i32 %1653, 2
  %1655 = icmp eq i32 %1654, 0
  %1656 = icmp slt i32 %1651, 10
  %1657 = or i1 %1655, %1656
  br i1 %1657, label %originalBB393, label %originalBB393alteredBB

originalBB393:                                    ; preds = %1649, %originalBB393alteredBB
  %1658 = load i64, i64* %21, align 8, !dbg !1442
  %1659 = load i64, i64* %12, align 8, !dbg !1442
  %1660 = icmp ult i64 %1658, %1659, !dbg !1442
  %1661 = load i32, i32* @x.19
  %1662 = load i32, i32* @y.20
  %1663 = sub i32 %1661, 1
  %1664 = mul i32 %1661, %1663
  %1665 = urem i32 %1664, 2
  %1666 = icmp eq i32 %1665, 0
  %1667 = icmp slt i32 %1662, 10
  %1668 = or i1 %1666, %1667
  br i1 %1668, label %originalBBpart2395, label %originalBB393alteredBB

originalBBpart2395:                               ; preds = %originalBB393
  br i1 %1660, label %1669, label %1689, !dbg !1445

1669:                                             ; preds = %originalBBpart2395
  %1670 = load i32, i32* @x.19
  %1671 = load i32, i32* @y.20
  %1672 = sub i32 %1670, 1
  %1673 = mul i32 %1670, %1672
  %1674 = urem i32 %1673, 2
  %1675 = icmp eq i32 %1674, 0
  %1676 = icmp slt i32 %1671, 10
  %1677 = or i1 %1675, %1676
  br i1 %1677, label %originalBB397, label %originalBB397alteredBB

originalBB397:                                    ; preds = %1669, %originalBB397alteredBB
  %1678 = load i8*, i8** %11, align 8, !dbg !1442
  %1679 = load i64, i64* %21, align 8, !dbg !1442
  %1680 = getelementptr inbounds i8, i8* %1678, i64 %1679, !dbg !1442
  store i8 48, i8* %1680, align 1, !dbg !1442
  %1681 = load i32, i32* @x.19
  %1682 = load i32, i32* @y.20
  %1683 = sub i32 %1681, 1
  %1684 = mul i32 %1681, %1683
  %1685 = urem i32 %1684, 2
  %1686 = icmp eq i32 %1685, 0
  %1687 = icmp slt i32 %1682, 10
  %1688 = or i1 %1686, %1687
  br i1 %1688, label %originalBBpart2399, label %originalBB397alteredBB

originalBBpart2399:                               ; preds = %originalBB397
  br label %1689, !dbg !1442

1689:                                             ; preds = %originalBBpart2399, %originalBBpart2395
  %1690 = load i32, i32* @x.19
  %1691 = load i32, i32* @y.20
  %1692 = sub i32 %1690, 1
  %1693 = mul i32 %1690, %1692
  %1694 = urem i32 %1693, 2
  %1695 = icmp eq i32 %1694, 0
  %1696 = icmp slt i32 %1691, 10
  %1697 = or i1 %1695, %1696
  br i1 %1697, label %originalBB401, label %originalBB401alteredBB

originalBB401:                                    ; preds = %1689, %originalBB401alteredBB
  %1698 = load i64, i64* %21, align 8, !dbg !1445
  %1699 = add i64 %1698, 1, !dbg !1445
  store i64 %1699, i64* %21, align 8, !dbg !1445
  %1700 = load i32, i32* @x.19
  %1701 = load i32, i32* @y.20
  %1702 = sub i32 %1700, 1
  %1703 = mul i32 %1700, %1702
  %1704 = urem i32 %1703, 2
  %1705 = icmp eq i32 %1704, 0
  %1706 = icmp slt i32 %1701, 10
  %1707 = or i1 %1705, %1706
  br i1 %1707, label %originalBBpart2406, label %originalBB401alteredBB

originalBBpart2406:                               ; preds = %originalBB401
  br label %1708, !dbg !1445

1708:                                             ; preds = %originalBBpart2406
  %1709 = load i32, i32* @x.19
  %1710 = load i32, i32* @y.20
  %1711 = sub i32 %1709, 1
  %1712 = mul i32 %1709, %1711
  %1713 = urem i32 %1712, 2
  %1714 = icmp eq i32 %1713, 0
  %1715 = icmp slt i32 %1710, 10
  %1716 = or i1 %1714, %1715
  br i1 %1716, label %originalBB408, label %originalBB408alteredBB

originalBB408:                                    ; preds = %1708, %originalBB408alteredBB
  %1717 = load i32, i32* @x.19
  %1718 = load i32, i32* @y.20
  %1719 = sub i32 %1717, 1
  %1720 = mul i32 %1717, %1719
  %1721 = urem i32 %1720, 2
  %1722 = icmp eq i32 %1721, 0
  %1723 = icmp slt i32 %1718, 10
  %1724 = or i1 %1722, %1723
  br i1 %1724, label %originalBBpart2410, label %originalBB408alteredBB

originalBBpart2410:                               ; preds = %originalBB408
  br label %1725, !dbg !1446

1725:                                             ; preds = %originalBBpart2410, %originalBBpart2363, %originalBBpart2354, %originalBBpart2341, %originalBBpart2332
  %1726 = load i32, i32* @x.19
  %1727 = load i32, i32* @y.20
  %1728 = sub i32 %1726, 1
  %1729 = mul i32 %1726, %1728
  %1730 = urem i32 %1729, 2
  %1731 = icmp eq i32 %1730, 0
  %1732 = icmp slt i32 %1727, 10
  %1733 = or i1 %1731, %1732
  br i1 %1733, label %originalBB412, label %originalBB412alteredBB

originalBB412:                                    ; preds = %1725, %originalBB412alteredBB
  store i8 48, i8* %31, align 1, !dbg !1447
  %1734 = load i32, i32* @x.19
  %1735 = load i32, i32* @y.20
  %1736 = sub i32 %1734, 1
  %1737 = mul i32 %1734, %1736
  %1738 = urem i32 %1737, 2
  %1739 = icmp eq i32 %1738, 0
  %1740 = icmp slt i32 %1735, 10
  %1741 = or i1 %1739, %1740
  br i1 %1741, label %originalBBpart2414, label %originalBB412alteredBB

originalBBpart2414:                               ; preds = %originalBB412
  br label %1796, !dbg !1448

1742:                                             ; preds = %originalBBpart2227
  %1743 = load i32, i32* @x.19
  %1744 = load i32, i32* @y.20
  %1745 = sub i32 %1743, 1
  %1746 = mul i32 %1743, %1745
  %1747 = urem i32 %1746, 2
  %1748 = icmp eq i32 %1747, 0
  %1749 = icmp slt i32 %1744, 10
  %1750 = or i1 %1748, %1749
  br i1 %1750, label %originalBB416, label %originalBB416alteredBB

originalBB416:                                    ; preds = %1742, %originalBB416alteredBB
  %1751 = load i32, i32* %16, align 4, !dbg !1449
  %1752 = and i32 %1751, 1, !dbg !1451
  %1753 = icmp ne i32 %1752, 0, !dbg !1451
  %1754 = load i32, i32* @x.19
  %1755 = load i32, i32* @y.20
  %1756 = sub i32 %1754, 1
  %1757 = mul i32 %1754, %1756
  %1758 = urem i32 %1757, 2
  %1759 = icmp eq i32 %1758, 0
  %1760 = icmp slt i32 %1755, 10
  %1761 = or i1 %1759, %1760
  br i1 %1761, label %originalBBpart2423, label %originalBB416alteredBB

originalBBpart2423:                               ; preds = %originalBB416
  br i1 %1753, label %1762, label %1779, !dbg !1452

1762:                                             ; preds = %originalBBpart2423
  %1763 = load i32, i32* @x.19
  %1764 = load i32, i32* @y.20
  %1765 = sub i32 %1763, 1
  %1766 = mul i32 %1763, %1765
  %1767 = urem i32 %1766, 2
  %1768 = icmp eq i32 %1767, 0
  %1769 = icmp slt i32 %1764, 10
  %1770 = or i1 %1768, %1769
  br i1 %1770, label %originalBB425, label %originalBB425alteredBB

originalBB425:                                    ; preds = %1762, %originalBB425alteredBB
  %1771 = load i32, i32* @x.19
  %1772 = load i32, i32* @y.20
  %1773 = sub i32 %1771, 1
  %1774 = mul i32 %1771, %1773
  %1775 = urem i32 %1774, 2
  %1776 = icmp eq i32 %1775, 0
  %1777 = icmp slt i32 %1772, 10
  %1778 = or i1 %1776, %1777
  br i1 %1778, label %originalBBpart2427, label %originalBB425alteredBB

originalBBpart2427:                               ; preds = %originalBB425
  br label %6121, !dbg !1453

1779:                                             ; preds = %originalBBpart2423
  %1780 = load i32, i32* @x.19
  %1781 = load i32, i32* @y.20
  %1782 = sub i32 %1780, 1
  %1783 = mul i32 %1780, %1782
  %1784 = urem i32 %1783, 2
  %1785 = icmp eq i32 %1784, 0
  %1786 = icmp slt i32 %1781, 10
  %1787 = or i1 %1785, %1786
  br i1 %1787, label %originalBB429, label %originalBB429alteredBB

originalBB429:                                    ; preds = %1779, %originalBB429alteredBB
  %1788 = load i32, i32* @x.19
  %1789 = load i32, i32* @y.20
  %1790 = sub i32 %1788, 1
  %1791 = mul i32 %1788, %1790
  %1792 = urem i32 %1791, 2
  %1793 = icmp eq i32 %1792, 0
  %1794 = icmp slt i32 %1789, 10
  %1795 = or i1 %1793, %1794
  br i1 %1795, label %originalBBpart2431, label %originalBB429alteredBB

originalBBpart2431:                               ; preds = %originalBB429
  br label %1796

1796:                                             ; preds = %originalBBpart2431, %originalBBpart2414
  %1797 = load i32, i32* @x.19
  %1798 = load i32, i32* @y.20
  %1799 = sub i32 %1797, 1
  %1800 = mul i32 %1797, %1799
  %1801 = urem i32 %1800, 2
  %1802 = icmp eq i32 %1801, 0
  %1803 = icmp slt i32 %1798, 10
  %1804 = or i1 %1802, %1803
  br i1 %1804, label %originalBB433, label %originalBB433alteredBB

originalBB433:                                    ; preds = %1796, %originalBB433alteredBB
  %1805 = load i32, i32* @x.19
  %1806 = load i32, i32* @y.20
  %1807 = sub i32 %1805, 1
  %1808 = mul i32 %1805, %1807
  %1809 = urem i32 %1808, 2
  %1810 = icmp eq i32 %1809, 0
  %1811 = icmp slt i32 %1806, 10
  %1812 = or i1 %1810, %1811
  br i1 %1812, label %originalBBpart2435, label %originalBB433alteredBB

originalBBpart2435:                               ; preds = %originalBB433
  br label %5193, !dbg !1454

1813:                                             ; preds = %originalBBpart2223
  %1814 = load i32, i32* @x.19
  %1815 = load i32, i32* @y.20
  %1816 = sub i32 %1814, 1
  %1817 = mul i32 %1814, %1816
  %1818 = urem i32 %1817, 2
  %1819 = icmp eq i32 %1818, 0
  %1820 = icmp slt i32 %1815, 10
  %1821 = or i1 %1819, %1820
  br i1 %1821, label %originalBB437, label %originalBB437alteredBB

originalBB437:                                    ; preds = %1813, %originalBB437alteredBB
  %1822 = load i32, i32* %15, align 4, !dbg !1455
  %1823 = load i32, i32* @x.19
  %1824 = load i32, i32* @y.20
  %1825 = sub i32 %1823, 1
  %1826 = mul i32 %1823, %1825
  %1827 = urem i32 %1826, 2
  %1828 = icmp eq i32 %1827, 0
  %1829 = icmp slt i32 %1824, 10
  %1830 = or i1 %1828, %1829
  br i1 %1830, label %originalBBpart2439, label %originalBB437alteredBB

originalBBpart2439:                               ; preds = %originalBB437
  switch i32 %1822, label %2371 [
    i32 2, label %1831
    i32 5, label %1884
  ], !dbg !1456

1831:                                             ; preds = %originalBBpart2439
  %1832 = load i32, i32* @x.19
  %1833 = load i32, i32* @y.20
  %1834 = sub i32 %1832, 1
  %1835 = mul i32 %1832, %1834
  %1836 = urem i32 %1835, 2
  %1837 = icmp eq i32 %1836, 0
  %1838 = icmp slt i32 %1833, 10
  %1839 = or i1 %1837, %1838
  br i1 %1839, label %originalBB441, label %originalBB441alteredBB

originalBB441:                                    ; preds = %1831, %originalBB441alteredBB
  %1840 = load i8, i8* %27, align 1, !dbg !1457
  %1841 = trunc i8 %1840 to i1, !dbg !1457
  %1842 = load i32, i32* @x.19
  %1843 = load i32, i32* @y.20
  %1844 = sub i32 %1842, 1
  %1845 = mul i32 %1842, %1844
  %1846 = urem i32 %1845, 2
  %1847 = icmp eq i32 %1846, 0
  %1848 = icmp slt i32 %1843, 10
  %1849 = or i1 %1847, %1848
  br i1 %1849, label %originalBBpart2443, label %originalBB441alteredBB

originalBBpart2443:                               ; preds = %originalBB441
  br i1 %1841, label %1850, label %1867, !dbg !1460

1850:                                             ; preds = %originalBBpart2443
  %1851 = load i32, i32* @x.19
  %1852 = load i32, i32* @y.20
  %1853 = sub i32 %1851, 1
  %1854 = mul i32 %1851, %1853
  %1855 = urem i32 %1854, 2
  %1856 = icmp eq i32 %1855, 0
  %1857 = icmp slt i32 %1852, 10
  %1858 = or i1 %1856, %1857
  br i1 %1858, label %originalBB445, label %originalBB445alteredBB

originalBB445:                                    ; preds = %1850, %originalBB445alteredBB
  %1859 = load i32, i32* @x.19
  %1860 = load i32, i32* @y.20
  %1861 = sub i32 %1859, 1
  %1862 = mul i32 %1859, %1861
  %1863 = urem i32 %1862, 2
  %1864 = icmp eq i32 %1863, 0
  %1865 = icmp slt i32 %1860, 10
  %1866 = or i1 %1864, %1865
  br i1 %1866, label %originalBBpart2447, label %originalBB445alteredBB

originalBBpart2447:                               ; preds = %originalBB445
  br label %6590, !dbg !1461

1867:                                             ; preds = %originalBBpart2443
  %1868 = load i32, i32* @x.19
  %1869 = load i32, i32* @y.20
  %1870 = sub i32 %1868, 1
  %1871 = mul i32 %1868, %1870
  %1872 = urem i32 %1871, 2
  %1873 = icmp eq i32 %1872, 0
  %1874 = icmp slt i32 %1869, 10
  %1875 = or i1 %1873, %1874
  br i1 %1875, label %originalBB449, label %originalBB449alteredBB

originalBB449:                                    ; preds = %1867, %originalBB449alteredBB
  %1876 = load i32, i32* @x.19
  %1877 = load i32, i32* @y.20
  %1878 = sub i32 %1876, 1
  %1879 = mul i32 %1876, %1878
  %1880 = urem i32 %1879, 2
  %1881 = icmp eq i32 %1880, 0
  %1882 = icmp slt i32 %1877, 10
  %1883 = or i1 %1881, %1882
  br i1 %1883, label %originalBBpart2451, label %originalBB449alteredBB

originalBBpart2451:                               ; preds = %originalBB449
  br label %2388, !dbg !1462

1884:                                             ; preds = %originalBBpart2439
  %1885 = load i32, i32* @x.19
  %1886 = load i32, i32* @y.20
  %1887 = sub i32 %1885, 1
  %1888 = mul i32 %1885, %1887
  %1889 = urem i32 %1888, 2
  %1890 = icmp eq i32 %1889, 0
  %1891 = icmp slt i32 %1886, 10
  %1892 = or i1 %1890, %1891
  br i1 %1892, label %originalBB453, label %originalBB453alteredBB

originalBB453:                                    ; preds = %1884, %originalBB453alteredBB
  %1893 = load i32, i32* %16, align 4, !dbg !1463
  %1894 = and i32 %1893, 4, !dbg !1465
  %1895 = icmp ne i32 %1894, 0, !dbg !1465
  %1896 = load i32, i32* @x.19
  %1897 = load i32, i32* @y.20
  %1898 = sub i32 %1896, 1
  %1899 = mul i32 %1896, %1898
  %1900 = urem i32 %1899, 2
  %1901 = icmp eq i32 %1900, 0
  %1902 = icmp slt i32 %1897, 10
  %1903 = or i1 %1901, %1902
  br i1 %1903, label %originalBBpart2461, label %originalBB453alteredBB

originalBBpart2461:                               ; preds = %originalBB453
  br i1 %1895, label %1904, label %2354, !dbg !1466

1904:                                             ; preds = %originalBBpart2461
  %1905 = load i32, i32* @x.19
  %1906 = load i32, i32* @y.20
  %1907 = sub i32 %1905, 1
  %1908 = mul i32 %1905, %1907
  %1909 = urem i32 %1908, 2
  %1910 = icmp eq i32 %1909, 0
  %1911 = icmp slt i32 %1906, 10
  %1912 = or i1 %1910, %1911
  br i1 %1912, label %originalBB463, label %originalBB463alteredBB

originalBB463:                                    ; preds = %1904, %originalBB463alteredBB
  %1913 = load i64, i64* %20, align 8, !dbg !1467
  %1914 = add i64 %1913, 2, !dbg !1468
  %1915 = load i64, i64* %14, align 8, !dbg !1469
  %1916 = icmp ult i64 %1914, %1915, !dbg !1470
  %1917 = load i32, i32* @x.19
  %1918 = load i32, i32* @y.20
  %1919 = sub i32 %1917, 1
  %1920 = mul i32 %1917, %1919
  %1921 = urem i32 %1920, 2
  %1922 = icmp eq i32 %1921, 0
  %1923 = icmp slt i32 %1918, 10
  %1924 = or i1 %1922, %1923
  br i1 %1924, label %originalBBpart2475, label %originalBB463alteredBB

originalBBpart2475:                               ; preds = %originalBB463
  br i1 %1916, label %1925, label %2354, !dbg !1471

1925:                                             ; preds = %originalBBpart2475
  %1926 = load i8*, i8** %13, align 8, !dbg !1472
  %1927 = load i64, i64* %20, align 8, !dbg !1473
  %1928 = add i64 %1927, 1, !dbg !1474
  %1929 = getelementptr inbounds i8, i8* %1926, i64 %1928, !dbg !1472
  %1930 = load i8, i8* %1929, align 1, !dbg !1472
  %1931 = sext i8 %1930 to i32, !dbg !1472
  %1932 = icmp eq i32 %1931, 63, !dbg !1475
  br i1 %1932, label %1933, label %2354, !dbg !1476

1933:                                             ; preds = %1925
  %1934 = load i32, i32* @x.19
  %1935 = load i32, i32* @y.20
  %1936 = sub i32 %1934, 1
  %1937 = mul i32 %1934, %1936
  %1938 = urem i32 %1937, 2
  %1939 = icmp eq i32 %1938, 0
  %1940 = icmp slt i32 %1935, 10
  %1941 = or i1 %1939, %1940
  br i1 %1941, label %originalBB477, label %originalBB477alteredBB

originalBB477:                                    ; preds = %1933, %originalBB477alteredBB
  %1942 = load i8*, i8** %13, align 8, !dbg !1477
  %1943 = load i64, i64* %20, align 8, !dbg !1478
  %1944 = add i64 %1943, 2, !dbg !1479
  %1945 = getelementptr inbounds i8, i8* %1942, i64 %1944, !dbg !1477
  %1946 = load i8, i8* %1945, align 1, !dbg !1477
  %1947 = sext i8 %1946 to i32, !dbg !1477
  %1948 = load i32, i32* @x.19
  %1949 = load i32, i32* @y.20
  %1950 = sub i32 %1948, 1
  %1951 = mul i32 %1948, %1950
  %1952 = urem i32 %1951, 2
  %1953 = icmp eq i32 %1952, 0
  %1954 = icmp slt i32 %1949, 10
  %1955 = or i1 %1953, %1954
  br i1 %1955, label %originalBBpart2483, label %originalBB477alteredBB

originalBBpart2483:                               ; preds = %originalBB477
  switch i32 %1947, label %2320 [
    i32 33, label %1956
    i32 39, label %1956
    i32 40, label %1956
    i32 41, label %1956
    i32 45, label %1956
    i32 47, label %1956
    i32 60, label %1956
    i32 61, label %1956
    i32 62, label %1956
  ], !dbg !1480

1956:                                             ; preds = %originalBBpart2483, %originalBBpart2483, %originalBBpart2483, %originalBBpart2483, %originalBBpart2483, %originalBBpart2483, %originalBBpart2483, %originalBBpart2483, %originalBBpart2483
  %1957 = load i32, i32* @x.19
  %1958 = load i32, i32* @y.20
  %1959 = sub i32 %1957, 1
  %1960 = mul i32 %1957, %1959
  %1961 = urem i32 %1960, 2
  %1962 = icmp eq i32 %1961, 0
  %1963 = icmp slt i32 %1958, 10
  %1964 = or i1 %1962, %1963
  br i1 %1964, label %originalBB485, label %originalBB485alteredBB

originalBB485:                                    ; preds = %1956, %originalBB485alteredBB
  %1965 = load i8, i8* %27, align 1, !dbg !1481
  %1966 = trunc i8 %1965 to i1, !dbg !1481
  %1967 = load i32, i32* @x.19
  %1968 = load i32, i32* @y.20
  %1969 = sub i32 %1967, 1
  %1970 = mul i32 %1967, %1969
  %1971 = urem i32 %1970, 2
  %1972 = icmp eq i32 %1971, 0
  %1973 = icmp slt i32 %1968, 10
  %1974 = or i1 %1972, %1973
  br i1 %1974, label %originalBBpart2487, label %originalBB485alteredBB

originalBBpart2487:                               ; preds = %originalBB485
  br i1 %1966, label %1975, label %1992, !dbg !1484

1975:                                             ; preds = %originalBBpart2487
  %1976 = load i32, i32* @x.19
  %1977 = load i32, i32* @y.20
  %1978 = sub i32 %1976, 1
  %1979 = mul i32 %1976, %1978
  %1980 = urem i32 %1979, 2
  %1981 = icmp eq i32 %1980, 0
  %1982 = icmp slt i32 %1977, 10
  %1983 = or i1 %1981, %1982
  br i1 %1983, label %originalBB489, label %originalBB489alteredBB

originalBB489:                                    ; preds = %1975, %originalBB489alteredBB
  %1984 = load i32, i32* @x.19
  %1985 = load i32, i32* @y.20
  %1986 = sub i32 %1984, 1
  %1987 = mul i32 %1984, %1986
  %1988 = urem i32 %1987, 2
  %1989 = icmp eq i32 %1988, 0
  %1990 = icmp slt i32 %1985, 10
  %1991 = or i1 %1989, %1990
  br i1 %1991, label %originalBBpart2491, label %originalBB489alteredBB

originalBBpart2491:                               ; preds = %originalBB489
  br label %6590, !dbg !1485

1992:                                             ; preds = %originalBBpart2487
  %1993 = load i32, i32* @x.19
  %1994 = load i32, i32* @y.20
  %1995 = sub i32 %1993, 1
  %1996 = mul i32 %1993, %1995
  %1997 = urem i32 %1996, 2
  %1998 = icmp eq i32 %1997, 0
  %1999 = icmp slt i32 %1994, 10
  %2000 = or i1 %1998, %1999
  br i1 %2000, label %originalBB493, label %originalBB493alteredBB

originalBB493:                                    ; preds = %1992, %originalBB493alteredBB
  %2001 = load i8*, i8** %13, align 8, !dbg !1486
  %2002 = load i64, i64* %20, align 8, !dbg !1487
  %2003 = add i64 %2002, 2, !dbg !1488
  %2004 = getelementptr inbounds i8, i8* %2001, i64 %2003, !dbg !1486
  %2005 = load i8, i8* %2004, align 1, !dbg !1486
  store i8 %2005, i8* %31, align 1, !dbg !1489
  %2006 = load i64, i64* %20, align 8, !dbg !1490
  %2007 = add i64 %2006, 2, !dbg !1490
  store i64 %2007, i64* %20, align 8, !dbg !1490
  %2008 = load i32, i32* @x.19
  %2009 = load i32, i32* @y.20
  %2010 = sub i32 %2008, 1
  %2011 = mul i32 %2008, %2010
  %2012 = urem i32 %2011, 2
  %2013 = icmp eq i32 %2012, 0
  %2014 = icmp slt i32 %2009, 10
  %2015 = or i1 %2013, %2014
  br i1 %2015, label %originalBBpart2519, label %originalBB493alteredBB

originalBBpart2519:                               ; preds = %originalBB493
  br label %2016, !dbg !1491

2016:                                             ; preds = %originalBBpart2519
  %2017 = load i32, i32* @x.19
  %2018 = load i32, i32* @y.20
  %2019 = sub i32 %2017, 1
  %2020 = mul i32 %2017, %2019
  %2021 = urem i32 %2020, 2
  %2022 = icmp eq i32 %2021, 0
  %2023 = icmp slt i32 %2018, 10
  %2024 = or i1 %2022, %2023
  br i1 %2024, label %originalBB521, label %originalBB521alteredBB

originalBB521:                                    ; preds = %2016, %originalBB521alteredBB
  %2025 = load i64, i64* %21, align 8, !dbg !1492
  %2026 = load i64, i64* %12, align 8, !dbg !1492
  %2027 = icmp ult i64 %2025, %2026, !dbg !1492
  %2028 = load i32, i32* @x.19
  %2029 = load i32, i32* @y.20
  %2030 = sub i32 %2028, 1
  %2031 = mul i32 %2028, %2030
  %2032 = urem i32 %2031, 2
  %2033 = icmp eq i32 %2032, 0
  %2034 = icmp slt i32 %2029, 10
  %2035 = or i1 %2033, %2034
  br i1 %2035, label %originalBBpart2523, label %originalBB521alteredBB

originalBBpart2523:                               ; preds = %originalBB521
  br i1 %2027, label %2036, label %2056, !dbg !1495

2036:                                             ; preds = %originalBBpart2523
  %2037 = load i32, i32* @x.19
  %2038 = load i32, i32* @y.20
  %2039 = sub i32 %2037, 1
  %2040 = mul i32 %2037, %2039
  %2041 = urem i32 %2040, 2
  %2042 = icmp eq i32 %2041, 0
  %2043 = icmp slt i32 %2038, 10
  %2044 = or i1 %2042, %2043
  br i1 %2044, label %originalBB525, label %originalBB525alteredBB

originalBB525:                                    ; preds = %2036, %originalBB525alteredBB
  %2045 = load i8*, i8** %11, align 8, !dbg !1492
  %2046 = load i64, i64* %21, align 8, !dbg !1492
  %2047 = getelementptr inbounds i8, i8* %2045, i64 %2046, !dbg !1492
  store i8 63, i8* %2047, align 1, !dbg !1492
  %2048 = load i32, i32* @x.19
  %2049 = load i32, i32* @y.20
  %2050 = sub i32 %2048, 1
  %2051 = mul i32 %2048, %2050
  %2052 = urem i32 %2051, 2
  %2053 = icmp eq i32 %2052, 0
  %2054 = icmp slt i32 %2049, 10
  %2055 = or i1 %2053, %2054
  br i1 %2055, label %originalBBpart2527, label %originalBB525alteredBB

originalBBpart2527:                               ; preds = %originalBB525
  br label %2056, !dbg !1492

2056:                                             ; preds = %originalBBpart2527, %originalBBpart2523
  %2057 = load i32, i32* @x.19
  %2058 = load i32, i32* @y.20
  %2059 = sub i32 %2057, 1
  %2060 = mul i32 %2057, %2059
  %2061 = urem i32 %2060, 2
  %2062 = icmp eq i32 %2061, 0
  %2063 = icmp slt i32 %2058, 10
  %2064 = or i1 %2062, %2063
  br i1 %2064, label %originalBB529, label %originalBB529alteredBB

originalBB529:                                    ; preds = %2056, %originalBB529alteredBB
  %2065 = load i64, i64* %21, align 8, !dbg !1495
  %2066 = add i64 %2065, 1, !dbg !1495
  store i64 %2066, i64* %21, align 8, !dbg !1495
  %2067 = load i32, i32* @x.19
  %2068 = load i32, i32* @y.20
  %2069 = sub i32 %2067, 1
  %2070 = mul i32 %2067, %2069
  %2071 = urem i32 %2070, 2
  %2072 = icmp eq i32 %2071, 0
  %2073 = icmp slt i32 %2068, 10
  %2074 = or i1 %2072, %2073
  br i1 %2074, label %originalBBpart2542, label %originalBB529alteredBB

originalBBpart2542:                               ; preds = %originalBB529
  br label %2075, !dbg !1495

2075:                                             ; preds = %originalBBpart2542
  %2076 = load i32, i32* @x.19
  %2077 = load i32, i32* @y.20
  %2078 = sub i32 %2076, 1
  %2079 = mul i32 %2076, %2078
  %2080 = urem i32 %2079, 2
  %2081 = icmp eq i32 %2080, 0
  %2082 = icmp slt i32 %2077, 10
  %2083 = or i1 %2081, %2082
  br i1 %2083, label %originalBB544, label %originalBB544alteredBB

originalBB544:                                    ; preds = %2075, %originalBB544alteredBB
  %2084 = load i32, i32* @x.19
  %2085 = load i32, i32* @y.20
  %2086 = sub i32 %2084, 1
  %2087 = mul i32 %2084, %2086
  %2088 = urem i32 %2087, 2
  %2089 = icmp eq i32 %2088, 0
  %2090 = icmp slt i32 %2085, 10
  %2091 = or i1 %2089, %2090
  br i1 %2091, label %originalBBpart2546, label %originalBB544alteredBB

originalBBpart2546:                               ; preds = %originalBB544
  br label %2092, !dbg !1496

2092:                                             ; preds = %originalBBpart2546
  %2093 = load i32, i32* @x.19
  %2094 = load i32, i32* @y.20
  %2095 = sub i32 %2093, 1
  %2096 = mul i32 %2093, %2095
  %2097 = urem i32 %2096, 2
  %2098 = icmp eq i32 %2097, 0
  %2099 = icmp slt i32 %2094, 10
  %2100 = or i1 %2098, %2099
  br i1 %2100, label %originalBB548, label %originalBB548alteredBB

originalBB548:                                    ; preds = %2092, %originalBB548alteredBB
  %2101 = load i64, i64* %21, align 8, !dbg !1497
  %2102 = load i64, i64* %12, align 8, !dbg !1497
  %2103 = icmp ult i64 %2101, %2102, !dbg !1497
  %2104 = load i32, i32* @x.19
  %2105 = load i32, i32* @y.20
  %2106 = sub i32 %2104, 1
  %2107 = mul i32 %2104, %2106
  %2108 = urem i32 %2107, 2
  %2109 = icmp eq i32 %2108, 0
  %2110 = icmp slt i32 %2105, 10
  %2111 = or i1 %2109, %2110
  br i1 %2111, label %originalBBpart2550, label %originalBB548alteredBB

originalBBpart2550:                               ; preds = %originalBB548
  br i1 %2103, label %2112, label %2132, !dbg !1500

2112:                                             ; preds = %originalBBpart2550
  %2113 = load i32, i32* @x.19
  %2114 = load i32, i32* @y.20
  %2115 = sub i32 %2113, 1
  %2116 = mul i32 %2113, %2115
  %2117 = urem i32 %2116, 2
  %2118 = icmp eq i32 %2117, 0
  %2119 = icmp slt i32 %2114, 10
  %2120 = or i1 %2118, %2119
  br i1 %2120, label %originalBB552, label %originalBB552alteredBB

originalBB552:                                    ; preds = %2112, %originalBB552alteredBB
  %2121 = load i8*, i8** %11, align 8, !dbg !1497
  %2122 = load i64, i64* %21, align 8, !dbg !1497
  %2123 = getelementptr inbounds i8, i8* %2121, i64 %2122, !dbg !1497
  store i8 34, i8* %2123, align 1, !dbg !1497
  %2124 = load i32, i32* @x.19
  %2125 = load i32, i32* @y.20
  %2126 = sub i32 %2124, 1
  %2127 = mul i32 %2124, %2126
  %2128 = urem i32 %2127, 2
  %2129 = icmp eq i32 %2128, 0
  %2130 = icmp slt i32 %2125, 10
  %2131 = or i1 %2129, %2130
  br i1 %2131, label %originalBBpart2554, label %originalBB552alteredBB

originalBBpart2554:                               ; preds = %originalBB552
  br label %2132, !dbg !1497

2132:                                             ; preds = %originalBBpart2554, %originalBBpart2550
  %2133 = load i32, i32* @x.19
  %2134 = load i32, i32* @y.20
  %2135 = sub i32 %2133, 1
  %2136 = mul i32 %2133, %2135
  %2137 = urem i32 %2136, 2
  %2138 = icmp eq i32 %2137, 0
  %2139 = icmp slt i32 %2134, 10
  %2140 = or i1 %2138, %2139
  br i1 %2140, label %originalBB556, label %originalBB556alteredBB

originalBB556:                                    ; preds = %2132, %originalBB556alteredBB
  %2141 = load i64, i64* %21, align 8, !dbg !1500
  %2142 = add i64 %2141, 1, !dbg !1500
  store i64 %2142, i64* %21, align 8, !dbg !1500
  %2143 = load i32, i32* @x.19
  %2144 = load i32, i32* @y.20
  %2145 = sub i32 %2143, 1
  %2146 = mul i32 %2143, %2145
  %2147 = urem i32 %2146, 2
  %2148 = icmp eq i32 %2147, 0
  %2149 = icmp slt i32 %2144, 10
  %2150 = or i1 %2148, %2149
  br i1 %2150, label %originalBBpart2559, label %originalBB556alteredBB

originalBBpart2559:                               ; preds = %originalBB556
  br label %2151, !dbg !1500

2151:                                             ; preds = %originalBBpart2559
  %2152 = load i32, i32* @x.19
  %2153 = load i32, i32* @y.20
  %2154 = sub i32 %2152, 1
  %2155 = mul i32 %2152, %2154
  %2156 = urem i32 %2155, 2
  %2157 = icmp eq i32 %2156, 0
  %2158 = icmp slt i32 %2153, 10
  %2159 = or i1 %2157, %2158
  br i1 %2159, label %originalBB561, label %originalBB561alteredBB

originalBB561:                                    ; preds = %2151, %originalBB561alteredBB
  %2160 = load i32, i32* @x.19
  %2161 = load i32, i32* @y.20
  %2162 = sub i32 %2160, 1
  %2163 = mul i32 %2160, %2162
  %2164 = urem i32 %2163, 2
  %2165 = icmp eq i32 %2164, 0
  %2166 = icmp slt i32 %2161, 10
  %2167 = or i1 %2165, %2166
  br i1 %2167, label %originalBBpart2563, label %originalBB561alteredBB

originalBBpart2563:                               ; preds = %originalBB561
  br label %2168, !dbg !1501

2168:                                             ; preds = %originalBBpart2563
  %2169 = load i32, i32* @x.19
  %2170 = load i32, i32* @y.20
  %2171 = sub i32 %2169, 1
  %2172 = mul i32 %2169, %2171
  %2173 = urem i32 %2172, 2
  %2174 = icmp eq i32 %2173, 0
  %2175 = icmp slt i32 %2170, 10
  %2176 = or i1 %2174, %2175
  br i1 %2176, label %originalBB565, label %originalBB565alteredBB

originalBB565:                                    ; preds = %2168, %originalBB565alteredBB
  %2177 = load i64, i64* %21, align 8, !dbg !1502
  %2178 = load i64, i64* %12, align 8, !dbg !1502
  %2179 = icmp ult i64 %2177, %2178, !dbg !1502
  %2180 = load i32, i32* @x.19
  %2181 = load i32, i32* @y.20
  %2182 = sub i32 %2180, 1
  %2183 = mul i32 %2180, %2182
  %2184 = urem i32 %2183, 2
  %2185 = icmp eq i32 %2184, 0
  %2186 = icmp slt i32 %2181, 10
  %2187 = or i1 %2185, %2186
  br i1 %2187, label %originalBBpart2567, label %originalBB565alteredBB

originalBBpart2567:                               ; preds = %originalBB565
  br i1 %2179, label %2188, label %2208, !dbg !1505

2188:                                             ; preds = %originalBBpart2567
  %2189 = load i32, i32* @x.19
  %2190 = load i32, i32* @y.20
  %2191 = sub i32 %2189, 1
  %2192 = mul i32 %2189, %2191
  %2193 = urem i32 %2192, 2
  %2194 = icmp eq i32 %2193, 0
  %2195 = icmp slt i32 %2190, 10
  %2196 = or i1 %2194, %2195
  br i1 %2196, label %originalBB569, label %originalBB569alteredBB

originalBB569:                                    ; preds = %2188, %originalBB569alteredBB
  %2197 = load i8*, i8** %11, align 8, !dbg !1502
  %2198 = load i64, i64* %21, align 8, !dbg !1502
  %2199 = getelementptr inbounds i8, i8* %2197, i64 %2198, !dbg !1502
  store i8 34, i8* %2199, align 1, !dbg !1502
  %2200 = load i32, i32* @x.19
  %2201 = load i32, i32* @y.20
  %2202 = sub i32 %2200, 1
  %2203 = mul i32 %2200, %2202
  %2204 = urem i32 %2203, 2
  %2205 = icmp eq i32 %2204, 0
  %2206 = icmp slt i32 %2201, 10
  %2207 = or i1 %2205, %2206
  br i1 %2207, label %originalBBpart2571, label %originalBB569alteredBB

originalBBpart2571:                               ; preds = %originalBB569
  br label %2208, !dbg !1502

2208:                                             ; preds = %originalBBpart2571, %originalBBpart2567
  %2209 = load i32, i32* @x.19
  %2210 = load i32, i32* @y.20
  %2211 = sub i32 %2209, 1
  %2212 = mul i32 %2209, %2211
  %2213 = urem i32 %2212, 2
  %2214 = icmp eq i32 %2213, 0
  %2215 = icmp slt i32 %2210, 10
  %2216 = or i1 %2214, %2215
  br i1 %2216, label %originalBB573, label %originalBB573alteredBB

originalBB573:                                    ; preds = %2208, %originalBB573alteredBB
  %2217 = load i64, i64* %21, align 8, !dbg !1505
  %2218 = add i64 %2217, 1, !dbg !1505
  store i64 %2218, i64* %21, align 8, !dbg !1505
  %2219 = load i32, i32* @x.19
  %2220 = load i32, i32* @y.20
  %2221 = sub i32 %2219, 1
  %2222 = mul i32 %2219, %2221
  %2223 = urem i32 %2222, 2
  %2224 = icmp eq i32 %2223, 0
  %2225 = icmp slt i32 %2220, 10
  %2226 = or i1 %2224, %2225
  br i1 %2226, label %originalBBpart2583, label %originalBB573alteredBB

originalBBpart2583:                               ; preds = %originalBB573
  br label %2227, !dbg !1505

2227:                                             ; preds = %originalBBpart2583
  %2228 = load i32, i32* @x.19
  %2229 = load i32, i32* @y.20
  %2230 = sub i32 %2228, 1
  %2231 = mul i32 %2228, %2230
  %2232 = urem i32 %2231, 2
  %2233 = icmp eq i32 %2232, 0
  %2234 = icmp slt i32 %2229, 10
  %2235 = or i1 %2233, %2234
  br i1 %2235, label %originalBB585, label %originalBB585alteredBB

originalBB585:                                    ; preds = %2227, %originalBB585alteredBB
  %2236 = load i32, i32* @x.19
  %2237 = load i32, i32* @y.20
  %2238 = sub i32 %2236, 1
  %2239 = mul i32 %2236, %2238
  %2240 = urem i32 %2239, 2
  %2241 = icmp eq i32 %2240, 0
  %2242 = icmp slt i32 %2237, 10
  %2243 = or i1 %2241, %2242
  br i1 %2243, label %originalBBpart2587, label %originalBB585alteredBB

originalBBpart2587:                               ; preds = %originalBB585
  br label %2244, !dbg !1506

2244:                                             ; preds = %originalBBpart2587
  %2245 = load i32, i32* @x.19
  %2246 = load i32, i32* @y.20
  %2247 = sub i32 %2245, 1
  %2248 = mul i32 %2245, %2247
  %2249 = urem i32 %2248, 2
  %2250 = icmp eq i32 %2249, 0
  %2251 = icmp slt i32 %2246, 10
  %2252 = or i1 %2250, %2251
  br i1 %2252, label %originalBB589, label %originalBB589alteredBB

originalBB589:                                    ; preds = %2244, %originalBB589alteredBB
  %2253 = load i64, i64* %21, align 8, !dbg !1507
  %2254 = load i64, i64* %12, align 8, !dbg !1507
  %2255 = icmp ult i64 %2253, %2254, !dbg !1507
  %2256 = load i32, i32* @x.19
  %2257 = load i32, i32* @y.20
  %2258 = sub i32 %2256, 1
  %2259 = mul i32 %2256, %2258
  %2260 = urem i32 %2259, 2
  %2261 = icmp eq i32 %2260, 0
  %2262 = icmp slt i32 %2257, 10
  %2263 = or i1 %2261, %2262
  br i1 %2263, label %originalBBpart2591, label %originalBB589alteredBB

originalBBpart2591:                               ; preds = %originalBB589
  br i1 %2255, label %2264, label %2284, !dbg !1510

2264:                                             ; preds = %originalBBpart2591
  %2265 = load i32, i32* @x.19
  %2266 = load i32, i32* @y.20
  %2267 = sub i32 %2265, 1
  %2268 = mul i32 %2265, %2267
  %2269 = urem i32 %2268, 2
  %2270 = icmp eq i32 %2269, 0
  %2271 = icmp slt i32 %2266, 10
  %2272 = or i1 %2270, %2271
  br i1 %2272, label %originalBB593, label %originalBB593alteredBB

originalBB593:                                    ; preds = %2264, %originalBB593alteredBB
  %2273 = load i8*, i8** %11, align 8, !dbg !1507
  %2274 = load i64, i64* %21, align 8, !dbg !1507
  %2275 = getelementptr inbounds i8, i8* %2273, i64 %2274, !dbg !1507
  store i8 63, i8* %2275, align 1, !dbg !1507
  %2276 = load i32, i32* @x.19
  %2277 = load i32, i32* @y.20
  %2278 = sub i32 %2276, 1
  %2279 = mul i32 %2276, %2278
  %2280 = urem i32 %2279, 2
  %2281 = icmp eq i32 %2280, 0
  %2282 = icmp slt i32 %2277, 10
  %2283 = or i1 %2281, %2282
  br i1 %2283, label %originalBBpart2595, label %originalBB593alteredBB

originalBBpart2595:                               ; preds = %originalBB593
  br label %2284, !dbg !1507

2284:                                             ; preds = %originalBBpart2595, %originalBBpart2591
  %2285 = load i32, i32* @x.19
  %2286 = load i32, i32* @y.20
  %2287 = sub i32 %2285, 1
  %2288 = mul i32 %2285, %2287
  %2289 = urem i32 %2288, 2
  %2290 = icmp eq i32 %2289, 0
  %2291 = icmp slt i32 %2286, 10
  %2292 = or i1 %2290, %2291
  br i1 %2292, label %originalBB597, label %originalBB597alteredBB

originalBB597:                                    ; preds = %2284, %originalBB597alteredBB
  %2293 = load i64, i64* %21, align 8, !dbg !1510
  %2294 = add i64 %2293, 1, !dbg !1510
  store i64 %2294, i64* %21, align 8, !dbg !1510
  %2295 = load i32, i32* @x.19
  %2296 = load i32, i32* @y.20
  %2297 = sub i32 %2295, 1
  %2298 = mul i32 %2295, %2297
  %2299 = urem i32 %2298, 2
  %2300 = icmp eq i32 %2299, 0
  %2301 = icmp slt i32 %2296, 10
  %2302 = or i1 %2300, %2301
  br i1 %2302, label %originalBBpart2602, label %originalBB597alteredBB

originalBBpart2602:                               ; preds = %originalBB597
  br label %2303, !dbg !1510

2303:                                             ; preds = %originalBBpart2602
  %2304 = load i32, i32* @x.19
  %2305 = load i32, i32* @y.20
  %2306 = sub i32 %2304, 1
  %2307 = mul i32 %2304, %2306
  %2308 = urem i32 %2307, 2
  %2309 = icmp eq i32 %2308, 0
  %2310 = icmp slt i32 %2305, 10
  %2311 = or i1 %2309, %2310
  br i1 %2311, label %originalBB604, label %originalBB604alteredBB

originalBB604:                                    ; preds = %2303, %originalBB604alteredBB
  %2312 = load i32, i32* @x.19
  %2313 = load i32, i32* @y.20
  %2314 = sub i32 %2312, 1
  %2315 = mul i32 %2312, %2314
  %2316 = urem i32 %2315, 2
  %2317 = icmp eq i32 %2316, 0
  %2318 = icmp slt i32 %2313, 10
  %2319 = or i1 %2317, %2318
  br i1 %2319, label %originalBBpart2606, label %originalBB604alteredBB

originalBBpart2606:                               ; preds = %originalBB604
  br label %2337, !dbg !1511

2320:                                             ; preds = %originalBBpart2483
  %2321 = load i32, i32* @x.19
  %2322 = load i32, i32* @y.20
  %2323 = sub i32 %2321, 1
  %2324 = mul i32 %2321, %2323
  %2325 = urem i32 %2324, 2
  %2326 = icmp eq i32 %2325, 0
  %2327 = icmp slt i32 %2322, 10
  %2328 = or i1 %2326, %2327
  br i1 %2328, label %originalBB608, label %originalBB608alteredBB

originalBB608:                                    ; preds = %2320, %originalBB608alteredBB
  %2329 = load i32, i32* @x.19
  %2330 = load i32, i32* @y.20
  %2331 = sub i32 %2329, 1
  %2332 = mul i32 %2329, %2331
  %2333 = urem i32 %2332, 2
  %2334 = icmp eq i32 %2333, 0
  %2335 = icmp slt i32 %2330, 10
  %2336 = or i1 %2334, %2335
  br i1 %2336, label %originalBBpart2610, label %originalBB608alteredBB

originalBBpart2610:                               ; preds = %originalBB608
  br label %2337, !dbg !1512

2337:                                             ; preds = %originalBBpart2610, %originalBBpart2606
  %2338 = load i32, i32* @x.19
  %2339 = load i32, i32* @y.20
  %2340 = sub i32 %2338, 1
  %2341 = mul i32 %2338, %2340
  %2342 = urem i32 %2341, 2
  %2343 = icmp eq i32 %2342, 0
  %2344 = icmp slt i32 %2339, 10
  %2345 = or i1 %2343, %2344
  br i1 %2345, label %originalBB612, label %originalBB612alteredBB

originalBB612:                                    ; preds = %2337, %originalBB612alteredBB
  %2346 = load i32, i32* @x.19
  %2347 = load i32, i32* @y.20
  %2348 = sub i32 %2346, 1
  %2349 = mul i32 %2346, %2348
  %2350 = urem i32 %2349, 2
  %2351 = icmp eq i32 %2350, 0
  %2352 = icmp slt i32 %2347, 10
  %2353 = or i1 %2351, %2352
  br i1 %2353, label %originalBBpart2614, label %originalBB612alteredBB

originalBBpart2614:                               ; preds = %originalBB612
  br label %2354, !dbg !1513

2354:                                             ; preds = %originalBBpart2614, %1925, %originalBBpart2475, %originalBBpart2461
  %2355 = load i32, i32* @x.19
  %2356 = load i32, i32* @y.20
  %2357 = sub i32 %2355, 1
  %2358 = mul i32 %2355, %2357
  %2359 = urem i32 %2358, 2
  %2360 = icmp eq i32 %2359, 0
  %2361 = icmp slt i32 %2356, 10
  %2362 = or i1 %2360, %2361
  br i1 %2362, label %originalBB616, label %originalBB616alteredBB

originalBB616:                                    ; preds = %2354, %originalBB616alteredBB
  %2363 = load i32, i32* @x.19
  %2364 = load i32, i32* @y.20
  %2365 = sub i32 %2363, 1
  %2366 = mul i32 %2363, %2365
  %2367 = urem i32 %2366, 2
  %2368 = icmp eq i32 %2367, 0
  %2369 = icmp slt i32 %2364, 10
  %2370 = or i1 %2368, %2369
  br i1 %2370, label %originalBBpart2618, label %originalBB616alteredBB

originalBBpart2618:                               ; preds = %originalBB616
  br label %2388, !dbg !1514

2371:                                             ; preds = %originalBBpart2439
  %2372 = load i32, i32* @x.19
  %2373 = load i32, i32* @y.20
  %2374 = sub i32 %2372, 1
  %2375 = mul i32 %2372, %2374
  %2376 = urem i32 %2375, 2
  %2377 = icmp eq i32 %2376, 0
  %2378 = icmp slt i32 %2373, 10
  %2379 = or i1 %2377, %2378
  br i1 %2379, label %originalBB620, label %originalBB620alteredBB

originalBB620:                                    ; preds = %2371, %originalBB620alteredBB
  %2380 = load i32, i32* @x.19
  %2381 = load i32, i32* @y.20
  %2382 = sub i32 %2380, 1
  %2383 = mul i32 %2380, %2382
  %2384 = urem i32 %2383, 2
  %2385 = icmp eq i32 %2384, 0
  %2386 = icmp slt i32 %2381, 10
  %2387 = or i1 %2385, %2386
  br i1 %2387, label %originalBBpart2622, label %originalBB620alteredBB

originalBBpart2622:                               ; preds = %originalBB620
  br label %2388, !dbg !1515

2388:                                             ; preds = %originalBBpart2622, %originalBBpart2618, %originalBBpart2451
  %2389 = load i32, i32* @x.19
  %2390 = load i32, i32* @y.20
  %2391 = sub i32 %2389, 1
  %2392 = mul i32 %2389, %2391
  %2393 = urem i32 %2392, 2
  %2394 = icmp eq i32 %2393, 0
  %2395 = icmp slt i32 %2390, 10
  %2396 = or i1 %2394, %2395
  br i1 %2396, label %originalBB624, label %originalBB624alteredBB

originalBB624:                                    ; preds = %2388, %originalBB624alteredBB
  %2397 = load i32, i32* @x.19
  %2398 = load i32, i32* @y.20
  %2399 = sub i32 %2397, 1
  %2400 = mul i32 %2397, %2399
  %2401 = urem i32 %2400, 2
  %2402 = icmp eq i32 %2401, 0
  %2403 = icmp slt i32 %2398, 10
  %2404 = or i1 %2402, %2403
  br i1 %2404, label %originalBBpart2626, label %originalBB624alteredBB

originalBBpart2626:                               ; preds = %originalBB624
  br label %5193, !dbg !1516

2405:                                             ; preds = %originalBBpart2223
  %2406 = load i32, i32* @x.19
  %2407 = load i32, i32* @y.20
  %2408 = sub i32 %2406, 1
  %2409 = mul i32 %2406, %2408
  %2410 = urem i32 %2409, 2
  %2411 = icmp eq i32 %2410, 0
  %2412 = icmp slt i32 %2407, 10
  %2413 = or i1 %2411, %2412
  br i1 %2413, label %originalBB628, label %originalBB628alteredBB

originalBB628:                                    ; preds = %2405, %originalBB628alteredBB
  store i8 97, i8* %32, align 1, !dbg !1517
  %2414 = load i32, i32* @x.19
  %2415 = load i32, i32* @y.20
  %2416 = sub i32 %2414, 1
  %2417 = mul i32 %2414, %2416
  %2418 = urem i32 %2417, 2
  %2419 = icmp eq i32 %2418, 0
  %2420 = icmp slt i32 %2415, 10
  %2421 = or i1 %2419, %2420
  br i1 %2421, label %originalBBpart2630, label %originalBB628alteredBB

originalBBpart2630:                               ; preds = %originalBB628
  br label %2744, !dbg !1518

2422:                                             ; preds = %originalBBpart2223
  store i8 98, i8* %32, align 1, !dbg !1519
  br label %2744, !dbg !1520

2423:                                             ; preds = %originalBBpart2223
  %2424 = load i32, i32* @x.19
  %2425 = load i32, i32* @y.20
  %2426 = sub i32 %2424, 1
  %2427 = mul i32 %2424, %2426
  %2428 = urem i32 %2427, 2
  %2429 = icmp eq i32 %2428, 0
  %2430 = icmp slt i32 %2425, 10
  %2431 = or i1 %2429, %2430
  br i1 %2431, label %originalBB632, label %originalBB632alteredBB

originalBB632:                                    ; preds = %2423, %originalBB632alteredBB
  store i8 102, i8* %32, align 1, !dbg !1521
  %2432 = load i32, i32* @x.19
  %2433 = load i32, i32* @y.20
  %2434 = sub i32 %2432, 1
  %2435 = mul i32 %2432, %2434
  %2436 = urem i32 %2435, 2
  %2437 = icmp eq i32 %2436, 0
  %2438 = icmp slt i32 %2433, 10
  %2439 = or i1 %2437, %2438
  br i1 %2439, label %originalBBpart2634, label %originalBB632alteredBB

originalBBpart2634:                               ; preds = %originalBB632
  br label %2744, !dbg !1522

2440:                                             ; preds = %originalBBpart2223
  %2441 = load i32, i32* @x.19
  %2442 = load i32, i32* @y.20
  %2443 = sub i32 %2441, 1
  %2444 = mul i32 %2441, %2443
  %2445 = urem i32 %2444, 2
  %2446 = icmp eq i32 %2445, 0
  %2447 = icmp slt i32 %2442, 10
  %2448 = or i1 %2446, %2447
  br i1 %2448, label %originalBB636, label %originalBB636alteredBB

originalBB636:                                    ; preds = %2440, %originalBB636alteredBB
  store i8 110, i8* %32, align 1, !dbg !1523
  %2449 = load i32, i32* @x.19
  %2450 = load i32, i32* @y.20
  %2451 = sub i32 %2449, 1
  %2452 = mul i32 %2449, %2451
  %2453 = urem i32 %2452, 2
  %2454 = icmp eq i32 %2453, 0
  %2455 = icmp slt i32 %2450, 10
  %2456 = or i1 %2454, %2455
  br i1 %2456, label %originalBBpart2638, label %originalBB636alteredBB

originalBBpart2638:                               ; preds = %originalBB636
  br label %2672, !dbg !1524

2457:                                             ; preds = %originalBBpart2223
  %2458 = load i32, i32* @x.19
  %2459 = load i32, i32* @y.20
  %2460 = sub i32 %2458, 1
  %2461 = mul i32 %2458, %2460
  %2462 = urem i32 %2461, 2
  %2463 = icmp eq i32 %2462, 0
  %2464 = icmp slt i32 %2459, 10
  %2465 = or i1 %2463, %2464
  br i1 %2465, label %originalBB640, label %originalBB640alteredBB

originalBB640:                                    ; preds = %2457, %originalBB640alteredBB
  store i8 114, i8* %32, align 1, !dbg !1525
  %2466 = load i32, i32* @x.19
  %2467 = load i32, i32* @y.20
  %2468 = sub i32 %2466, 1
  %2469 = mul i32 %2466, %2468
  %2470 = urem i32 %2469, 2
  %2471 = icmp eq i32 %2470, 0
  %2472 = icmp slt i32 %2467, 10
  %2473 = or i1 %2471, %2472
  br i1 %2473, label %originalBBpart2642, label %originalBB640alteredBB

originalBBpart2642:                               ; preds = %originalBB640
  br label %2672, !dbg !1526

2474:                                             ; preds = %originalBBpart2223
  %2475 = load i32, i32* @x.19
  %2476 = load i32, i32* @y.20
  %2477 = sub i32 %2475, 1
  %2478 = mul i32 %2475, %2477
  %2479 = urem i32 %2478, 2
  %2480 = icmp eq i32 %2479, 0
  %2481 = icmp slt i32 %2476, 10
  %2482 = or i1 %2480, %2481
  br i1 %2482, label %originalBB644, label %originalBB644alteredBB

originalBB644:                                    ; preds = %2474, %originalBB644alteredBB
  store i8 116, i8* %32, align 1, !dbg !1527
  %2483 = load i32, i32* @x.19
  %2484 = load i32, i32* @y.20
  %2485 = sub i32 %2483, 1
  %2486 = mul i32 %2483, %2485
  %2487 = urem i32 %2486, 2
  %2488 = icmp eq i32 %2487, 0
  %2489 = icmp slt i32 %2484, 10
  %2490 = or i1 %2488, %2489
  br i1 %2490, label %originalBBpart2646, label %originalBB644alteredBB

originalBBpart2646:                               ; preds = %originalBB644
  br label %2672, !dbg !1528

2491:                                             ; preds = %originalBBpart2223
  %2492 = load i32, i32* @x.19
  %2493 = load i32, i32* @y.20
  %2494 = sub i32 %2492, 1
  %2495 = mul i32 %2492, %2494
  %2496 = urem i32 %2495, 2
  %2497 = icmp eq i32 %2496, 0
  %2498 = icmp slt i32 %2493, 10
  %2499 = or i1 %2497, %2498
  br i1 %2499, label %originalBB648, label %originalBB648alteredBB

originalBB648:                                    ; preds = %2491, %originalBB648alteredBB
  store i8 118, i8* %32, align 1, !dbg !1529
  %2500 = load i32, i32* @x.19
  %2501 = load i32, i32* @y.20
  %2502 = sub i32 %2500, 1
  %2503 = mul i32 %2500, %2502
  %2504 = urem i32 %2503, 2
  %2505 = icmp eq i32 %2504, 0
  %2506 = icmp slt i32 %2501, 10
  %2507 = or i1 %2505, %2506
  br i1 %2507, label %originalBBpart2650, label %originalBB648alteredBB

originalBBpart2650:                               ; preds = %originalBB648
  br label %2744, !dbg !1530

2508:                                             ; preds = %originalBBpart2223
  %2509 = load i32, i32* @x.19
  %2510 = load i32, i32* @y.20
  %2511 = sub i32 %2509, 1
  %2512 = mul i32 %2509, %2511
  %2513 = urem i32 %2512, 2
  %2514 = icmp eq i32 %2513, 0
  %2515 = icmp slt i32 %2510, 10
  %2516 = or i1 %2514, %2515
  br i1 %2516, label %originalBB652, label %originalBB652alteredBB

originalBB652:                                    ; preds = %2508, %originalBB652alteredBB
  %2517 = load i8, i8* %31, align 1, !dbg !1531
  store i8 %2517, i8* %32, align 1, !dbg !1532
  %2518 = load i32, i32* %15, align 4, !dbg !1533
  %2519 = icmp eq i32 %2518, 2, !dbg !1535
  %2520 = load i32, i32* @x.19
  %2521 = load i32, i32* @y.20
  %2522 = sub i32 %2520, 1
  %2523 = mul i32 %2520, %2522
  %2524 = urem i32 %2523, 2
  %2525 = icmp eq i32 %2524, 0
  %2526 = icmp slt i32 %2521, 10
  %2527 = or i1 %2525, %2526
  br i1 %2527, label %originalBBpart2654, label %originalBB652alteredBB

originalBBpart2654:                               ; preds = %originalBB652
  br i1 %2519, label %2528, label %2581, !dbg !1536

2528:                                             ; preds = %originalBBpart2654
  %2529 = load i32, i32* @x.19
  %2530 = load i32, i32* @y.20
  %2531 = sub i32 %2529, 1
  %2532 = mul i32 %2529, %2531
  %2533 = urem i32 %2532, 2
  %2534 = icmp eq i32 %2533, 0
  %2535 = icmp slt i32 %2530, 10
  %2536 = or i1 %2534, %2535
  br i1 %2536, label %originalBB656, label %originalBB656alteredBB

originalBB656:                                    ; preds = %2528, %originalBB656alteredBB
  %2537 = load i8, i8* %27, align 1, !dbg !1537
  %2538 = trunc i8 %2537 to i1, !dbg !1537
  %2539 = load i32, i32* @x.19
  %2540 = load i32, i32* @y.20
  %2541 = sub i32 %2539, 1
  %2542 = mul i32 %2539, %2541
  %2543 = urem i32 %2542, 2
  %2544 = icmp eq i32 %2543, 0
  %2545 = icmp slt i32 %2540, 10
  %2546 = or i1 %2544, %2545
  br i1 %2546, label %originalBBpart2658, label %originalBB656alteredBB

originalBBpart2658:                               ; preds = %originalBB656
  br i1 %2538, label %2547, label %2564, !dbg !1540

2547:                                             ; preds = %originalBBpart2658
  %2548 = load i32, i32* @x.19
  %2549 = load i32, i32* @y.20
  %2550 = sub i32 %2548, 1
  %2551 = mul i32 %2548, %2550
  %2552 = urem i32 %2551, 2
  %2553 = icmp eq i32 %2552, 0
  %2554 = icmp slt i32 %2549, 10
  %2555 = or i1 %2553, %2554
  br i1 %2555, label %originalBB660, label %originalBB660alteredBB

originalBB660:                                    ; preds = %2547, %originalBB660alteredBB
  %2556 = load i32, i32* @x.19
  %2557 = load i32, i32* @y.20
  %2558 = sub i32 %2556, 1
  %2559 = mul i32 %2556, %2558
  %2560 = urem i32 %2559, 2
  %2561 = icmp eq i32 %2560, 0
  %2562 = icmp slt i32 %2557, 10
  %2563 = or i1 %2561, %2562
  br i1 %2563, label %originalBBpart2662, label %originalBB660alteredBB

originalBBpart2662:                               ; preds = %originalBB660
  br label %6590, !dbg !1541

2564:                                             ; preds = %originalBBpart2658
  %2565 = load i32, i32* @x.19
  %2566 = load i32, i32* @y.20
  %2567 = sub i32 %2565, 1
  %2568 = mul i32 %2565, %2567
  %2569 = urem i32 %2568, 2
  %2570 = icmp eq i32 %2569, 0
  %2571 = icmp slt i32 %2566, 10
  %2572 = or i1 %2570, %2571
  br i1 %2572, label %originalBB664, label %originalBB664alteredBB

originalBB664:                                    ; preds = %2564, %originalBB664alteredBB
  %2573 = load i32, i32* @x.19
  %2574 = load i32, i32* @y.20
  %2575 = sub i32 %2573, 1
  %2576 = mul i32 %2573, %2575
  %2577 = urem i32 %2576, 2
  %2578 = icmp eq i32 %2577, 0
  %2579 = icmp slt i32 %2574, 10
  %2580 = or i1 %2578, %2579
  br i1 %2580, label %originalBBpart2666, label %originalBB664alteredBB

originalBBpart2666:                               ; preds = %originalBB664
  br label %5750, !dbg !1542

2581:                                             ; preds = %originalBBpart2654
  %2582 = load i32, i32* @x.19
  %2583 = load i32, i32* @y.20
  %2584 = sub i32 %2582, 1
  %2585 = mul i32 %2582, %2584
  %2586 = urem i32 %2585, 2
  %2587 = icmp eq i32 %2586, 0
  %2588 = icmp slt i32 %2583, 10
  %2589 = or i1 %2587, %2588
  br i1 %2589, label %originalBB668, label %originalBB668alteredBB

originalBB668:                                    ; preds = %2581, %originalBB668alteredBB
  %2590 = load i8, i8* %25, align 1, !dbg !1543
  %2591 = trunc i8 %2590 to i1, !dbg !1543
  %2592 = load i32, i32* @x.19
  %2593 = load i32, i32* @y.20
  %2594 = sub i32 %2592, 1
  %2595 = mul i32 %2592, %2594
  %2596 = urem i32 %2595, 2
  %2597 = icmp eq i32 %2596, 0
  %2598 = icmp slt i32 %2593, 10
  %2599 = or i1 %2597, %2598
  br i1 %2599, label %originalBBpart2670, label %originalBB668alteredBB

originalBBpart2670:                               ; preds = %originalBB668
  br i1 %2591, label %2600, label %2655, !dbg !1545

2600:                                             ; preds = %originalBBpart2670
  %2601 = load i32, i32* @x.19
  %2602 = load i32, i32* @y.20
  %2603 = sub i32 %2601, 1
  %2604 = mul i32 %2601, %2603
  %2605 = urem i32 %2604, 2
  %2606 = icmp eq i32 %2605, 0
  %2607 = icmp slt i32 %2602, 10
  %2608 = or i1 %2606, %2607
  br i1 %2608, label %originalBB672, label %originalBB672alteredBB

originalBB672:                                    ; preds = %2600, %originalBB672alteredBB
  %2609 = load i8, i8* %27, align 1, !dbg !1546
  %2610 = trunc i8 %2609 to i1, !dbg !1546
  %2611 = load i32, i32* @x.19
  %2612 = load i32, i32* @y.20
  %2613 = sub i32 %2611, 1
  %2614 = mul i32 %2611, %2613
  %2615 = urem i32 %2614, 2
  %2616 = icmp eq i32 %2615, 0
  %2617 = icmp slt i32 %2612, 10
  %2618 = or i1 %2616, %2617
  br i1 %2618, label %originalBBpart2674, label %originalBB672alteredBB

originalBBpart2674:                               ; preds = %originalBB672
  br i1 %2610, label %2619, label %2655, !dbg !1547

2619:                                             ; preds = %originalBBpart2674
  %2620 = load i32, i32* @x.19
  %2621 = load i32, i32* @y.20
  %2622 = sub i32 %2620, 1
  %2623 = mul i32 %2620, %2622
  %2624 = urem i32 %2623, 2
  %2625 = icmp eq i32 %2624, 0
  %2626 = icmp slt i32 %2621, 10
  %2627 = or i1 %2625, %2626
  br i1 %2627, label %originalBB676, label %originalBB676alteredBB

originalBB676:                                    ; preds = %2619, %originalBB676alteredBB
  %2628 = load i64, i64* %24, align 8, !dbg !1548
  %2629 = icmp ne i64 %2628, 0, !dbg !1548
  %2630 = load i32, i32* @x.19
  %2631 = load i32, i32* @y.20
  %2632 = sub i32 %2630, 1
  %2633 = mul i32 %2630, %2632
  %2634 = urem i32 %2633, 2
  %2635 = icmp eq i32 %2634, 0
  %2636 = icmp slt i32 %2631, 10
  %2637 = or i1 %2635, %2636
  br i1 %2637, label %originalBBpart2678, label %originalBB676alteredBB

originalBBpart2678:                               ; preds = %originalBB676
  br i1 %2629, label %2638, label %2655, !dbg !1549

2638:                                             ; preds = %originalBBpart2678
  %2639 = load i32, i32* @x.19
  %2640 = load i32, i32* @y.20
  %2641 = sub i32 %2639, 1
  %2642 = mul i32 %2639, %2641
  %2643 = urem i32 %2642, 2
  %2644 = icmp eq i32 %2643, 0
  %2645 = icmp slt i32 %2640, 10
  %2646 = or i1 %2644, %2645
  br i1 %2646, label %originalBB680, label %originalBB680alteredBB

originalBB680:                                    ; preds = %2638, %originalBB680alteredBB
  %2647 = load i32, i32* @x.19
  %2648 = load i32, i32* @y.20
  %2649 = sub i32 %2647, 1
  %2650 = mul i32 %2647, %2649
  %2651 = urem i32 %2650, 2
  %2652 = icmp eq i32 %2651, 0
  %2653 = icmp slt i32 %2648, 10
  %2654 = or i1 %2652, %2653
  br i1 %2654, label %originalBBpart2682, label %originalBB680alteredBB

originalBBpart2682:                               ; preds = %originalBB680
  br label %5750, !dbg !1550

2655:                                             ; preds = %originalBBpart2678, %originalBBpart2674, %originalBBpart2670
  %2656 = load i32, i32* @x.19
  %2657 = load i32, i32* @y.20
  %2658 = sub i32 %2656, 1
  %2659 = mul i32 %2656, %2658
  %2660 = urem i32 %2659, 2
  %2661 = icmp eq i32 %2660, 0
  %2662 = icmp slt i32 %2657, 10
  %2663 = or i1 %2661, %2662
  br i1 %2663, label %originalBB684, label %originalBB684alteredBB

originalBB684:                                    ; preds = %2655, %originalBB684alteredBB
  %2664 = load i32, i32* @x.19
  %2665 = load i32, i32* @y.20
  %2666 = sub i32 %2664, 1
  %2667 = mul i32 %2664, %2666
  %2668 = urem i32 %2667, 2
  %2669 = icmp eq i32 %2668, 0
  %2670 = icmp slt i32 %2665, 10
  %2671 = or i1 %2669, %2670
  br i1 %2671, label %originalBBpart2686, label %originalBB684alteredBB

originalBBpart2686:                               ; preds = %originalBB684
  br label %2672, !dbg !1548

2672:                                             ; preds = %originalBBpart2686, %originalBBpart2646, %originalBBpart2642, %originalBBpart2638
  call void @llvm.dbg.label(metadata !1551), !dbg !1552
  %2673 = load i32, i32* @x.19
  %2674 = load i32, i32* @y.20
  %2675 = sub i32 %2673, 1
  %2676 = mul i32 %2673, %2675
  %2677 = urem i32 %2676, 2
  %2678 = icmp eq i32 %2677, 0
  %2679 = icmp slt i32 %2674, 10
  %2680 = or i1 %2678, %2679
  br i1 %2680, label %originalBB688, label %originalBB688alteredBB

originalBB688:                                    ; preds = %2672, %originalBB688alteredBB
  %2681 = load i32, i32* %15, align 4, !dbg !1553
  %2682 = icmp eq i32 %2681, 2, !dbg !1555
  %2683 = load i32, i32* @x.19
  %2684 = load i32, i32* @y.20
  %2685 = sub i32 %2683, 1
  %2686 = mul i32 %2683, %2685
  %2687 = urem i32 %2686, 2
  %2688 = icmp eq i32 %2687, 0
  %2689 = icmp slt i32 %2684, 10
  %2690 = or i1 %2688, %2689
  br i1 %2690, label %originalBBpart2690, label %originalBB688alteredBB

originalBBpart2690:                               ; preds = %originalBB688
  br i1 %2682, label %2691, label %2727, !dbg !1556

2691:                                             ; preds = %originalBBpart2690
  %2692 = load i32, i32* @x.19
  %2693 = load i32, i32* @y.20
  %2694 = sub i32 %2692, 1
  %2695 = mul i32 %2692, %2694
  %2696 = urem i32 %2695, 2
  %2697 = icmp eq i32 %2696, 0
  %2698 = icmp slt i32 %2693, 10
  %2699 = or i1 %2697, %2698
  br i1 %2699, label %originalBB692, label %originalBB692alteredBB

originalBB692:                                    ; preds = %2691, %originalBB692alteredBB
  %2700 = load i8, i8* %27, align 1, !dbg !1557
  %2701 = trunc i8 %2700 to i1, !dbg !1557
  %2702 = load i32, i32* @x.19
  %2703 = load i32, i32* @y.20
  %2704 = sub i32 %2702, 1
  %2705 = mul i32 %2702, %2704
  %2706 = urem i32 %2705, 2
  %2707 = icmp eq i32 %2706, 0
  %2708 = icmp slt i32 %2703, 10
  %2709 = or i1 %2707, %2708
  br i1 %2709, label %originalBBpart2694, label %originalBB692alteredBB

originalBBpart2694:                               ; preds = %originalBB692
  br i1 %2701, label %2710, label %2727, !dbg !1558

2710:                                             ; preds = %originalBBpart2694
  %2711 = load i32, i32* @x.19
  %2712 = load i32, i32* @y.20
  %2713 = sub i32 %2711, 1
  %2714 = mul i32 %2711, %2713
  %2715 = urem i32 %2714, 2
  %2716 = icmp eq i32 %2715, 0
  %2717 = icmp slt i32 %2712, 10
  %2718 = or i1 %2716, %2717
  br i1 %2718, label %originalBB696, label %originalBB696alteredBB

originalBB696:                                    ; preds = %2710, %originalBB696alteredBB
  %2719 = load i32, i32* @x.19
  %2720 = load i32, i32* @y.20
  %2721 = sub i32 %2719, 1
  %2722 = mul i32 %2719, %2721
  %2723 = urem i32 %2722, 2
  %2724 = icmp eq i32 %2723, 0
  %2725 = icmp slt i32 %2720, 10
  %2726 = or i1 %2724, %2725
  br i1 %2726, label %originalBBpart2698, label %originalBB696alteredBB

originalBBpart2698:                               ; preds = %originalBB696
  br label %6590, !dbg !1559

2727:                                             ; preds = %originalBBpart2694, %originalBBpart2690
  %2728 = load i32, i32* @x.19
  %2729 = load i32, i32* @y.20
  %2730 = sub i32 %2728, 1
  %2731 = mul i32 %2728, %2730
  %2732 = urem i32 %2731, 2
  %2733 = icmp eq i32 %2732, 0
  %2734 = icmp slt i32 %2729, 10
  %2735 = or i1 %2733, %2734
  br i1 %2735, label %originalBB700, label %originalBB700alteredBB

originalBB700:                                    ; preds = %2727, %originalBB700alteredBB
  %2736 = load i32, i32* @x.19
  %2737 = load i32, i32* @y.20
  %2738 = sub i32 %2736, 1
  %2739 = mul i32 %2736, %2738
  %2740 = urem i32 %2739, 2
  %2741 = icmp eq i32 %2740, 0
  %2742 = icmp slt i32 %2737, 10
  %2743 = or i1 %2741, %2742
  br i1 %2743, label %originalBBpart2702, label %originalBB700alteredBB

originalBBpart2702:                               ; preds = %originalBB700
  br label %2744, !dbg !1557

2744:                                             ; preds = %originalBBpart2702, %originalBBpart2650, %originalBBpart2634, %2422, %originalBBpart2630
  call void @llvm.dbg.label(metadata !1560), !dbg !1561
  %2745 = load i32, i32* @x.19
  %2746 = load i32, i32* @y.20
  %2747 = sub i32 %2745, 1
  %2748 = mul i32 %2745, %2747
  %2749 = urem i32 %2748, 2
  %2750 = icmp eq i32 %2749, 0
  %2751 = icmp slt i32 %2746, 10
  %2752 = or i1 %2750, %2751
  br i1 %2752, label %originalBB704, label %originalBB704alteredBB

originalBB704:                                    ; preds = %2744, %originalBB704alteredBB
  %2753 = load i8, i8* %25, align 1, !dbg !1562
  %2754 = trunc i8 %2753 to i1, !dbg !1562
  %2755 = load i32, i32* @x.19
  %2756 = load i32, i32* @y.20
  %2757 = sub i32 %2755, 1
  %2758 = mul i32 %2755, %2757
  %2759 = urem i32 %2758, 2
  %2760 = icmp eq i32 %2759, 0
  %2761 = icmp slt i32 %2756, 10
  %2762 = or i1 %2760, %2761
  br i1 %2762, label %originalBBpart2706, label %originalBB704alteredBB

originalBBpart2706:                               ; preds = %originalBB704
  br i1 %2754, label %2763, label %2781, !dbg !1564

2763:                                             ; preds = %originalBBpart2706
  %2764 = load i32, i32* @x.19
  %2765 = load i32, i32* @y.20
  %2766 = sub i32 %2764, 1
  %2767 = mul i32 %2764, %2766
  %2768 = urem i32 %2767, 2
  %2769 = icmp eq i32 %2768, 0
  %2770 = icmp slt i32 %2765, 10
  %2771 = or i1 %2769, %2770
  br i1 %2771, label %originalBB708, label %originalBB708alteredBB

originalBB708:                                    ; preds = %2763, %originalBB708alteredBB
  %2772 = load i8, i8* %32, align 1, !dbg !1565
  store i8 %2772, i8* %31, align 1, !dbg !1567
  %2773 = load i32, i32* @x.19
  %2774 = load i32, i32* @y.20
  %2775 = sub i32 %2773, 1
  %2776 = mul i32 %2773, %2775
  %2777 = urem i32 %2776, 2
  %2778 = icmp eq i32 %2777, 0
  %2779 = icmp slt i32 %2774, 10
  %2780 = or i1 %2778, %2779
  br i1 %2780, label %originalBBpart2710, label %originalBB708alteredBB

originalBBpart2710:                               ; preds = %originalBB708
  br label %5336, !dbg !1568

2781:                                             ; preds = %originalBBpart2706
  br label %5193, !dbg !1569

2782:                                             ; preds = %originalBBpart2223, %originalBBpart2223
  %2783 = load i32, i32* @x.19
  %2784 = load i32, i32* @y.20
  %2785 = sub i32 %2783, 1
  %2786 = mul i32 %2783, %2785
  %2787 = urem i32 %2786, 2
  %2788 = icmp eq i32 %2787, 0
  %2789 = icmp slt i32 %2784, 10
  %2790 = or i1 %2788, %2789
  br i1 %2790, label %originalBB712, label %originalBB712alteredBB

originalBB712:                                    ; preds = %2782, %originalBB712alteredBB
  %2791 = load i64, i64* %14, align 8, !dbg !1570
  %2792 = icmp eq i64 %2791, -1, !dbg !1572
  %2793 = load i32, i32* @x.19
  %2794 = load i32, i32* @y.20
  %2795 = sub i32 %2793, 1
  %2796 = mul i32 %2793, %2795
  %2797 = urem i32 %2796, 2
  %2798 = icmp eq i32 %2797, 0
  %2799 = icmp slt i32 %2794, 10
  %2800 = or i1 %2798, %2799
  br i1 %2800, label %originalBBpart2714, label %originalBB712alteredBB

originalBBpart2714:                               ; preds = %originalBB712
  br i1 %2792, label %2801, label %2823, !dbg !1573

2801:                                             ; preds = %originalBBpart2714
  %2802 = load i32, i32* @x.19
  %2803 = load i32, i32* @y.20
  %2804 = sub i32 %2802, 1
  %2805 = mul i32 %2802, %2804
  %2806 = urem i32 %2805, 2
  %2807 = icmp eq i32 %2806, 0
  %2808 = icmp slt i32 %2803, 10
  %2809 = or i1 %2807, %2808
  br i1 %2809, label %originalBB716, label %originalBB716alteredBB

originalBB716:                                    ; preds = %2801, %originalBB716alteredBB
  %2810 = load i8*, i8** %13, align 8, !dbg !1574
  %2811 = getelementptr inbounds i8, i8* %2810, i64 1, !dbg !1574
  %2812 = load i8, i8* %2811, align 1, !dbg !1574
  %2813 = sext i8 %2812 to i32, !dbg !1574
  %2814 = icmp eq i32 %2813, 0, !dbg !1575
  %2815 = load i32, i32* @x.19
  %2816 = load i32, i32* @y.20
  %2817 = sub i32 %2815, 1
  %2818 = mul i32 %2815, %2817
  %2819 = urem i32 %2818, 2
  %2820 = icmp eq i32 %2819, 0
  %2821 = icmp slt i32 %2816, 10
  %2822 = or i1 %2820, %2821
  br i1 %2822, label %originalBBpart2718, label %originalBB716alteredBB

originalBBpart2718:                               ; preds = %originalBB716
  br i1 %2814, label %2859, label %2842, !dbg !1570

2823:                                             ; preds = %originalBBpart2714
  %2824 = load i32, i32* @x.19
  %2825 = load i32, i32* @y.20
  %2826 = sub i32 %2824, 1
  %2827 = mul i32 %2824, %2826
  %2828 = urem i32 %2827, 2
  %2829 = icmp eq i32 %2828, 0
  %2830 = icmp slt i32 %2825, 10
  %2831 = or i1 %2829, %2830
  br i1 %2831, label %originalBB720, label %originalBB720alteredBB

originalBB720:                                    ; preds = %2823, %originalBB720alteredBB
  %2832 = load i64, i64* %14, align 8, !dbg !1576
  %2833 = icmp eq i64 %2832, 1, !dbg !1577
  %2834 = load i32, i32* @x.19
  %2835 = load i32, i32* @y.20
  %2836 = sub i32 %2834, 1
  %2837 = mul i32 %2834, %2836
  %2838 = urem i32 %2837, 2
  %2839 = icmp eq i32 %2838, 0
  %2840 = icmp slt i32 %2835, 10
  %2841 = or i1 %2839, %2840
  br i1 %2841, label %originalBBpart2722, label %originalBB720alteredBB

originalBBpart2722:                               ; preds = %originalBB720
  br i1 %2833, label %2859, label %2842, !dbg !1573

2842:                                             ; preds = %originalBBpart2722, %originalBBpart2718
  %2843 = load i32, i32* @x.19
  %2844 = load i32, i32* @y.20
  %2845 = sub i32 %2843, 1
  %2846 = mul i32 %2843, %2845
  %2847 = urem i32 %2846, 2
  %2848 = icmp eq i32 %2847, 0
  %2849 = icmp slt i32 %2844, 10
  %2850 = or i1 %2848, %2849
  br i1 %2850, label %originalBB724, label %originalBB724alteredBB

originalBB724:                                    ; preds = %2842, %originalBB724alteredBB
  %2851 = load i32, i32* @x.19
  %2852 = load i32, i32* @y.20
  %2853 = sub i32 %2851, 1
  %2854 = mul i32 %2851, %2853
  %2855 = urem i32 %2854, 2
  %2856 = icmp eq i32 %2855, 0
  %2857 = icmp slt i32 %2852, 10
  %2858 = or i1 %2856, %2857
  br i1 %2858, label %originalBBpart2726, label %originalBB724alteredBB

originalBBpart2726:                               ; preds = %originalBB724
  br label %5193, !dbg !1578

2859:                                             ; preds = %originalBBpart2722, %originalBBpart2718
  %2860 = load i32, i32* @x.19
  %2861 = load i32, i32* @y.20
  %2862 = sub i32 %2860, 1
  %2863 = mul i32 %2860, %2862
  %2864 = urem i32 %2863, 2
  %2865 = icmp eq i32 %2864, 0
  %2866 = icmp slt i32 %2861, 10
  %2867 = or i1 %2865, %2866
  br i1 %2867, label %originalBB728, label %originalBB728alteredBB

originalBB728:                                    ; preds = %2859, %originalBB728alteredBB
  %2868 = load i32, i32* @x.19
  %2869 = load i32, i32* @y.20
  %2870 = sub i32 %2868, 1
  %2871 = mul i32 %2868, %2870
  %2872 = urem i32 %2871, 2
  %2873 = icmp eq i32 %2872, 0
  %2874 = icmp slt i32 %2869, 10
  %2875 = or i1 %2873, %2874
  br i1 %2875, label %originalBBpart2730, label %originalBB728alteredBB

originalBBpart2730:                               ; preds = %originalBB728
  br label %2876, !dbg !1579

2876:                                             ; preds = %originalBBpart2730, %originalBBpart2223, %originalBBpart2223
  %2877 = load i32, i32* @x.19
  %2878 = load i32, i32* @y.20
  %2879 = sub i32 %2877, 1
  %2880 = mul i32 %2877, %2879
  %2881 = urem i32 %2880, 2
  %2882 = icmp eq i32 %2881, 0
  %2883 = icmp slt i32 %2878, 10
  %2884 = or i1 %2882, %2883
  br i1 %2884, label %originalBB732, label %originalBB732alteredBB

originalBB732:                                    ; preds = %2876, %originalBB732alteredBB
  %2885 = load i64, i64* %20, align 8, !dbg !1580
  %2886 = icmp ne i64 %2885, 0, !dbg !1582
  %2887 = load i32, i32* @x.19
  %2888 = load i32, i32* @y.20
  %2889 = sub i32 %2887, 1
  %2890 = mul i32 %2887, %2889
  %2891 = urem i32 %2890, 2
  %2892 = icmp eq i32 %2891, 0
  %2893 = icmp slt i32 %2888, 10
  %2894 = or i1 %2892, %2893
  br i1 %2894, label %originalBBpart2734, label %originalBB732alteredBB

originalBBpart2734:                               ; preds = %originalBB732
  br i1 %2886, label %2895, label %2912, !dbg !1583

2895:                                             ; preds = %originalBBpart2734
  %2896 = load i32, i32* @x.19
  %2897 = load i32, i32* @y.20
  %2898 = sub i32 %2896, 1
  %2899 = mul i32 %2896, %2898
  %2900 = urem i32 %2899, 2
  %2901 = icmp eq i32 %2900, 0
  %2902 = icmp slt i32 %2897, 10
  %2903 = or i1 %2901, %2902
  br i1 %2903, label %originalBB736, label %originalBB736alteredBB

originalBB736:                                    ; preds = %2895, %originalBB736alteredBB
  %2904 = load i32, i32* @x.19
  %2905 = load i32, i32* @y.20
  %2906 = sub i32 %2904, 1
  %2907 = mul i32 %2904, %2906
  %2908 = urem i32 %2907, 2
  %2909 = icmp eq i32 %2908, 0
  %2910 = icmp slt i32 %2905, 10
  %2911 = or i1 %2909, %2910
  br i1 %2911, label %originalBBpart2738, label %originalBB736alteredBB

originalBBpart2738:                               ; preds = %originalBB736
  br label %5193, !dbg !1584

2912:                                             ; preds = %originalBBpart2734
  %2913 = load i32, i32* @x.19
  %2914 = load i32, i32* @y.20
  %2915 = sub i32 %2913, 1
  %2916 = mul i32 %2913, %2915
  %2917 = urem i32 %2916, 2
  %2918 = icmp eq i32 %2917, 0
  %2919 = icmp slt i32 %2914, 10
  %2920 = or i1 %2918, %2919
  br i1 %2920, label %originalBB740, label %originalBB740alteredBB

originalBB740:                                    ; preds = %2912, %originalBB740alteredBB
  %2921 = load i32, i32* @x.19
  %2922 = load i32, i32* @y.20
  %2923 = sub i32 %2921, 1
  %2924 = mul i32 %2921, %2923
  %2925 = urem i32 %2924, 2
  %2926 = icmp eq i32 %2925, 0
  %2927 = icmp slt i32 %2922, 10
  %2928 = or i1 %2926, %2927
  br i1 %2928, label %originalBBpart2742, label %originalBB740alteredBB

originalBBpart2742:                               ; preds = %originalBB740
  br label %2929, !dbg !1585

2929:                                             ; preds = %originalBBpart2742, %originalBBpart2223
  %2930 = load i32, i32* @x.19
  %2931 = load i32, i32* @y.20
  %2932 = sub i32 %2930, 1
  %2933 = mul i32 %2930, %2932
  %2934 = urem i32 %2933, 2
  %2935 = icmp eq i32 %2934, 0
  %2936 = icmp slt i32 %2931, 10
  %2937 = or i1 %2935, %2936
  br i1 %2937, label %originalBB744, label %originalBB744alteredBB

originalBB744:                                    ; preds = %2929, %originalBB744alteredBB
  store i8 1, i8* %35, align 1, !dbg !1586
  %2938 = load i32, i32* @x.19
  %2939 = load i32, i32* @y.20
  %2940 = sub i32 %2938, 1
  %2941 = mul i32 %2938, %2940
  %2942 = urem i32 %2941, 2
  %2943 = icmp eq i32 %2942, 0
  %2944 = icmp slt i32 %2939, 10
  %2945 = or i1 %2943, %2944
  br i1 %2945, label %originalBBpart2746, label %originalBB744alteredBB

originalBBpart2746:                               ; preds = %originalBB744
  br label %2946, !dbg !1587

2946:                                             ; preds = %originalBBpart2746, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223
  %2947 = load i32, i32* @x.19
  %2948 = load i32, i32* @y.20
  %2949 = sub i32 %2947, 1
  %2950 = mul i32 %2947, %2949
  %2951 = urem i32 %2950, 2
  %2952 = icmp eq i32 %2951, 0
  %2953 = icmp slt i32 %2948, 10
  %2954 = or i1 %2952, %2953
  br i1 %2954, label %originalBB748, label %originalBB748alteredBB

originalBB748:                                    ; preds = %2946, %originalBB748alteredBB
  %2955 = load i32, i32* %15, align 4, !dbg !1588
  %2956 = icmp eq i32 %2955, 2, !dbg !1590
  %2957 = load i32, i32* @x.19
  %2958 = load i32, i32* @y.20
  %2959 = sub i32 %2957, 1
  %2960 = mul i32 %2957, %2959
  %2961 = urem i32 %2960, 2
  %2962 = icmp eq i32 %2961, 0
  %2963 = icmp slt i32 %2958, 10
  %2964 = or i1 %2962, %2963
  br i1 %2964, label %originalBBpart2750, label %originalBB748alteredBB

originalBBpart2750:                               ; preds = %originalBB748
  br i1 %2956, label %2965, label %3001, !dbg !1591

2965:                                             ; preds = %originalBBpart2750
  %2966 = load i32, i32* @x.19
  %2967 = load i32, i32* @y.20
  %2968 = sub i32 %2966, 1
  %2969 = mul i32 %2966, %2968
  %2970 = urem i32 %2969, 2
  %2971 = icmp eq i32 %2970, 0
  %2972 = icmp slt i32 %2967, 10
  %2973 = or i1 %2971, %2972
  br i1 %2973, label %originalBB752, label %originalBB752alteredBB

originalBB752:                                    ; preds = %2965, %originalBB752alteredBB
  %2974 = load i8, i8* %27, align 1, !dbg !1592
  %2975 = trunc i8 %2974 to i1, !dbg !1592
  %2976 = load i32, i32* @x.19
  %2977 = load i32, i32* @y.20
  %2978 = sub i32 %2976, 1
  %2979 = mul i32 %2976, %2978
  %2980 = urem i32 %2979, 2
  %2981 = icmp eq i32 %2980, 0
  %2982 = icmp slt i32 %2977, 10
  %2983 = or i1 %2981, %2982
  br i1 %2983, label %originalBBpart2754, label %originalBB752alteredBB

originalBBpart2754:                               ; preds = %originalBB752
  br i1 %2975, label %2984, label %3001, !dbg !1593

2984:                                             ; preds = %originalBBpart2754
  %2985 = load i32, i32* @x.19
  %2986 = load i32, i32* @y.20
  %2987 = sub i32 %2985, 1
  %2988 = mul i32 %2985, %2987
  %2989 = urem i32 %2988, 2
  %2990 = icmp eq i32 %2989, 0
  %2991 = icmp slt i32 %2986, 10
  %2992 = or i1 %2990, %2991
  br i1 %2992, label %originalBB756, label %originalBB756alteredBB

originalBB756:                                    ; preds = %2984, %originalBB756alteredBB
  %2993 = load i32, i32* @x.19
  %2994 = load i32, i32* @y.20
  %2995 = sub i32 %2993, 1
  %2996 = mul i32 %2993, %2995
  %2997 = urem i32 %2996, 2
  %2998 = icmp eq i32 %2997, 0
  %2999 = icmp slt i32 %2994, 10
  %3000 = or i1 %2998, %2999
  br i1 %3000, label %originalBBpart2758, label %originalBB756alteredBB

originalBBpart2758:                               ; preds = %originalBB756
  br label %6590, !dbg !1594

3001:                                             ; preds = %originalBBpart2754, %originalBBpart2750
  %3002 = load i32, i32* @x.19
  %3003 = load i32, i32* @y.20
  %3004 = sub i32 %3002, 1
  %3005 = mul i32 %3002, %3004
  %3006 = urem i32 %3005, 2
  %3007 = icmp eq i32 %3006, 0
  %3008 = icmp slt i32 %3003, 10
  %3009 = or i1 %3007, %3008
  br i1 %3009, label %originalBB760, label %originalBB760alteredBB

originalBB760:                                    ; preds = %3001, %originalBB760alteredBB
  %3010 = load i32, i32* @x.19
  %3011 = load i32, i32* @y.20
  %3012 = sub i32 %3010, 1
  %3013 = mul i32 %3010, %3012
  %3014 = urem i32 %3013, 2
  %3015 = icmp eq i32 %3014, 0
  %3016 = icmp slt i32 %3011, 10
  %3017 = or i1 %3015, %3016
  br i1 %3017, label %originalBBpart2762, label %originalBB760alteredBB

originalBBpart2762:                               ; preds = %originalBB760
  br label %5193, !dbg !1595

3018:                                             ; preds = %originalBBpart2223
  %3019 = load i32, i32* @x.19
  %3020 = load i32, i32* @y.20
  %3021 = sub i32 %3019, 1
  %3022 = mul i32 %3019, %3021
  %3023 = urem i32 %3022, 2
  %3024 = icmp eq i32 %3023, 0
  %3025 = icmp slt i32 %3020, 10
  %3026 = or i1 %3024, %3025
  br i1 %3026, label %originalBB764, label %originalBB764alteredBB

originalBB764:                                    ; preds = %3018, %originalBB764alteredBB
  store i8 1, i8* %29, align 1, !dbg !1596
  store i8 1, i8* %35, align 1, !dbg !1597
  %3027 = load i32, i32* %15, align 4, !dbg !1598
  %3028 = icmp eq i32 %3027, 2, !dbg !1600
  %3029 = load i32, i32* @x.19
  %3030 = load i32, i32* @y.20
  %3031 = sub i32 %3029, 1
  %3032 = mul i32 %3029, %3031
  %3033 = urem i32 %3032, 2
  %3034 = icmp eq i32 %3033, 0
  %3035 = icmp slt i32 %3030, 10
  %3036 = or i1 %3034, %3035
  br i1 %3036, label %originalBBpart2766, label %originalBB764alteredBB

originalBBpart2766:                               ; preds = %originalBB764
  br i1 %3028, label %3037, label %3358, !dbg !1601

3037:                                             ; preds = %originalBBpart2766
  %3038 = load i32, i32* @x.19
  %3039 = load i32, i32* @y.20
  %3040 = sub i32 %3038, 1
  %3041 = mul i32 %3038, %3040
  %3042 = urem i32 %3041, 2
  %3043 = icmp eq i32 %3042, 0
  %3044 = icmp slt i32 %3039, 10
  %3045 = or i1 %3043, %3044
  br i1 %3045, label %originalBB768, label %originalBB768alteredBB

originalBB768:                                    ; preds = %3037, %originalBB768alteredBB
  %3046 = load i8, i8* %27, align 1, !dbg !1602
  %3047 = trunc i8 %3046 to i1, !dbg !1602
  %3048 = load i32, i32* @x.19
  %3049 = load i32, i32* @y.20
  %3050 = sub i32 %3048, 1
  %3051 = mul i32 %3048, %3050
  %3052 = urem i32 %3051, 2
  %3053 = icmp eq i32 %3052, 0
  %3054 = icmp slt i32 %3049, 10
  %3055 = or i1 %3053, %3054
  br i1 %3055, label %originalBBpart2770, label %originalBB768alteredBB

originalBBpart2770:                               ; preds = %originalBB768
  br i1 %3047, label %3056, label %3073, !dbg !1605

3056:                                             ; preds = %originalBBpart2770
  %3057 = load i32, i32* @x.19
  %3058 = load i32, i32* @y.20
  %3059 = sub i32 %3057, 1
  %3060 = mul i32 %3057, %3059
  %3061 = urem i32 %3060, 2
  %3062 = icmp eq i32 %3061, 0
  %3063 = icmp slt i32 %3058, 10
  %3064 = or i1 %3062, %3063
  br i1 %3064, label %originalBB772, label %originalBB772alteredBB

originalBB772:                                    ; preds = %3056, %originalBB772alteredBB
  %3065 = load i32, i32* @x.19
  %3066 = load i32, i32* @y.20
  %3067 = sub i32 %3065, 1
  %3068 = mul i32 %3065, %3067
  %3069 = urem i32 %3068, 2
  %3070 = icmp eq i32 %3069, 0
  %3071 = icmp slt i32 %3066, 10
  %3072 = or i1 %3070, %3071
  br i1 %3072, label %originalBBpart2774, label %originalBB772alteredBB

originalBBpart2774:                               ; preds = %originalBB772
  br label %6590, !dbg !1606

3073:                                             ; preds = %originalBBpart2770
  %3074 = load i32, i32* @x.19
  %3075 = load i32, i32* @y.20
  %3076 = sub i32 %3074, 1
  %3077 = mul i32 %3074, %3076
  %3078 = urem i32 %3077, 2
  %3079 = icmp eq i32 %3078, 0
  %3080 = icmp slt i32 %3075, 10
  %3081 = or i1 %3079, %3080
  br i1 %3081, label %originalBB776, label %originalBB776alteredBB

originalBB776:                                    ; preds = %3073, %originalBB776alteredBB
  %3082 = load i64, i64* %12, align 8, !dbg !1607
  %3083 = icmp ne i64 %3082, 0, !dbg !1607
  %3084 = load i32, i32* @x.19
  %3085 = load i32, i32* @y.20
  %3086 = sub i32 %3084, 1
  %3087 = mul i32 %3084, %3086
  %3088 = urem i32 %3087, 2
  %3089 = icmp eq i32 %3088, 0
  %3090 = icmp slt i32 %3085, 10
  %3091 = or i1 %3089, %3090
  br i1 %3091, label %originalBBpart2778, label %originalBB776alteredBB

originalBBpart2778:                               ; preds = %originalBB776
  br i1 %3083, label %3092, label %3129, !dbg !1609

3092:                                             ; preds = %originalBBpart2778
  %3093 = load i32, i32* @x.19
  %3094 = load i32, i32* @y.20
  %3095 = sub i32 %3093, 1
  %3096 = mul i32 %3093, %3095
  %3097 = urem i32 %3096, 2
  %3098 = icmp eq i32 %3097, 0
  %3099 = icmp slt i32 %3094, 10
  %3100 = or i1 %3098, %3099
  br i1 %3100, label %originalBB780, label %originalBB780alteredBB

originalBB780:                                    ; preds = %3092, %originalBB780alteredBB
  %3101 = load i64, i64* %22, align 8, !dbg !1610
  %3102 = icmp ne i64 %3101, 0, !dbg !1610
  %3103 = load i32, i32* @x.19
  %3104 = load i32, i32* @y.20
  %3105 = sub i32 %3103, 1
  %3106 = mul i32 %3103, %3105
  %3107 = urem i32 %3106, 2
  %3108 = icmp eq i32 %3107, 0
  %3109 = icmp slt i32 %3104, 10
  %3110 = or i1 %3108, %3109
  br i1 %3110, label %originalBBpart2782, label %originalBB780alteredBB

originalBBpart2782:                               ; preds = %originalBB780
  br i1 %3102, label %3129, label %3111, !dbg !1611

3111:                                             ; preds = %originalBBpart2782
  %3112 = load i32, i32* @x.19
  %3113 = load i32, i32* @y.20
  %3114 = sub i32 %3112, 1
  %3115 = mul i32 %3112, %3114
  %3116 = urem i32 %3115, 2
  %3117 = icmp eq i32 %3116, 0
  %3118 = icmp slt i32 %3113, 10
  %3119 = or i1 %3117, %3118
  br i1 %3119, label %originalBB784, label %originalBB784alteredBB

originalBB784:                                    ; preds = %3111, %originalBB784alteredBB
  %3120 = load i64, i64* %12, align 8, !dbg !1612
  store i64 %3120, i64* %22, align 8, !dbg !1614
  store i64 0, i64* %12, align 8, !dbg !1615
  %3121 = load i32, i32* @x.19
  %3122 = load i32, i32* @y.20
  %3123 = sub i32 %3121, 1
  %3124 = mul i32 %3121, %3123
  %3125 = urem i32 %3124, 2
  %3126 = icmp eq i32 %3125, 0
  %3127 = icmp slt i32 %3122, 10
  %3128 = or i1 %3126, %3127
  br i1 %3128, label %originalBBpart2786, label %originalBB784alteredBB

originalBBpart2786:                               ; preds = %originalBB784
  br label %3129, !dbg !1616

3129:                                             ; preds = %originalBBpart2786, %originalBBpart2782, %originalBBpart2778
  %3130 = load i32, i32* @x.19
  %3131 = load i32, i32* @y.20
  %3132 = sub i32 %3130, 1
  %3133 = mul i32 %3130, %3132
  %3134 = urem i32 %3133, 2
  %3135 = icmp eq i32 %3134, 0
  %3136 = icmp slt i32 %3131, 10
  %3137 = or i1 %3135, %3136
  br i1 %3137, label %originalBB788, label %originalBB788alteredBB

originalBB788:                                    ; preds = %3129, %originalBB788alteredBB
  %3138 = load i32, i32* @x.19
  %3139 = load i32, i32* @y.20
  %3140 = sub i32 %3138, 1
  %3141 = mul i32 %3138, %3140
  %3142 = urem i32 %3141, 2
  %3143 = icmp eq i32 %3142, 0
  %3144 = icmp slt i32 %3139, 10
  %3145 = or i1 %3143, %3144
  br i1 %3145, label %originalBBpart2790, label %originalBB788alteredBB

originalBBpart2790:                               ; preds = %originalBB788
  br label %3146, !dbg !1617

3146:                                             ; preds = %originalBBpart2790
  %3147 = load i32, i32* @x.19
  %3148 = load i32, i32* @y.20
  %3149 = sub i32 %3147, 1
  %3150 = mul i32 %3147, %3149
  %3151 = urem i32 %3150, 2
  %3152 = icmp eq i32 %3151, 0
  %3153 = icmp slt i32 %3148, 10
  %3154 = or i1 %3152, %3153
  br i1 %3154, label %originalBB792, label %originalBB792alteredBB

originalBB792:                                    ; preds = %3146, %originalBB792alteredBB
  %3155 = load i64, i64* %21, align 8, !dbg !1618
  %3156 = load i64, i64* %12, align 8, !dbg !1618
  %3157 = icmp ult i64 %3155, %3156, !dbg !1618
  %3158 = load i32, i32* @x.19
  %3159 = load i32, i32* @y.20
  %3160 = sub i32 %3158, 1
  %3161 = mul i32 %3158, %3160
  %3162 = urem i32 %3161, 2
  %3163 = icmp eq i32 %3162, 0
  %3164 = icmp slt i32 %3159, 10
  %3165 = or i1 %3163, %3164
  br i1 %3165, label %originalBBpart2794, label %originalBB792alteredBB

originalBBpart2794:                               ; preds = %originalBB792
  br i1 %3157, label %3166, label %3186, !dbg !1621

3166:                                             ; preds = %originalBBpart2794
  %3167 = load i32, i32* @x.19
  %3168 = load i32, i32* @y.20
  %3169 = sub i32 %3167, 1
  %3170 = mul i32 %3167, %3169
  %3171 = urem i32 %3170, 2
  %3172 = icmp eq i32 %3171, 0
  %3173 = icmp slt i32 %3168, 10
  %3174 = or i1 %3172, %3173
  br i1 %3174, label %originalBB796, label %originalBB796alteredBB

originalBB796:                                    ; preds = %3166, %originalBB796alteredBB
  %3175 = load i8*, i8** %11, align 8, !dbg !1618
  %3176 = load i64, i64* %21, align 8, !dbg !1618
  %3177 = getelementptr inbounds i8, i8* %3175, i64 %3176, !dbg !1618
  store i8 39, i8* %3177, align 1, !dbg !1618
  %3178 = load i32, i32* @x.19
  %3179 = load i32, i32* @y.20
  %3180 = sub i32 %3178, 1
  %3181 = mul i32 %3178, %3180
  %3182 = urem i32 %3181, 2
  %3183 = icmp eq i32 %3182, 0
  %3184 = icmp slt i32 %3179, 10
  %3185 = or i1 %3183, %3184
  br i1 %3185, label %originalBBpart2798, label %originalBB796alteredBB

originalBBpart2798:                               ; preds = %originalBB796
  br label %3186, !dbg !1618

3186:                                             ; preds = %originalBBpart2798, %originalBBpart2794
  %3187 = load i32, i32* @x.19
  %3188 = load i32, i32* @y.20
  %3189 = sub i32 %3187, 1
  %3190 = mul i32 %3187, %3189
  %3191 = urem i32 %3190, 2
  %3192 = icmp eq i32 %3191, 0
  %3193 = icmp slt i32 %3188, 10
  %3194 = or i1 %3192, %3193
  br i1 %3194, label %originalBB800, label %originalBB800alteredBB

originalBB800:                                    ; preds = %3186, %originalBB800alteredBB
  %3195 = load i64, i64* %21, align 8, !dbg !1621
  %3196 = add i64 %3195, 1, !dbg !1621
  store i64 %3196, i64* %21, align 8, !dbg !1621
  %3197 = load i32, i32* @x.19
  %3198 = load i32, i32* @y.20
  %3199 = sub i32 %3197, 1
  %3200 = mul i32 %3197, %3199
  %3201 = urem i32 %3200, 2
  %3202 = icmp eq i32 %3201, 0
  %3203 = icmp slt i32 %3198, 10
  %3204 = or i1 %3202, %3203
  br i1 %3204, label %originalBBpart2813, label %originalBB800alteredBB

originalBBpart2813:                               ; preds = %originalBB800
  br label %3205, !dbg !1621

3205:                                             ; preds = %originalBBpart2813
  %3206 = load i32, i32* @x.19
  %3207 = load i32, i32* @y.20
  %3208 = sub i32 %3206, 1
  %3209 = mul i32 %3206, %3208
  %3210 = urem i32 %3209, 2
  %3211 = icmp eq i32 %3210, 0
  %3212 = icmp slt i32 %3207, 10
  %3213 = or i1 %3211, %3212
  br i1 %3213, label %originalBB815, label %originalBB815alteredBB

originalBB815:                                    ; preds = %3205, %originalBB815alteredBB
  %3214 = load i32, i32* @x.19
  %3215 = load i32, i32* @y.20
  %3216 = sub i32 %3214, 1
  %3217 = mul i32 %3214, %3216
  %3218 = urem i32 %3217, 2
  %3219 = icmp eq i32 %3218, 0
  %3220 = icmp slt i32 %3215, 10
  %3221 = or i1 %3219, %3220
  br i1 %3221, label %originalBBpart2817, label %originalBB815alteredBB

originalBBpart2817:                               ; preds = %originalBB815
  br label %3222, !dbg !1622

3222:                                             ; preds = %originalBBpart2817
  %3223 = load i32, i32* @x.19
  %3224 = load i32, i32* @y.20
  %3225 = sub i32 %3223, 1
  %3226 = mul i32 %3223, %3225
  %3227 = urem i32 %3226, 2
  %3228 = icmp eq i32 %3227, 0
  %3229 = icmp slt i32 %3224, 10
  %3230 = or i1 %3228, %3229
  br i1 %3230, label %originalBB819, label %originalBB819alteredBB

originalBB819:                                    ; preds = %3222, %originalBB819alteredBB
  %3231 = load i64, i64* %21, align 8, !dbg !1623
  %3232 = load i64, i64* %12, align 8, !dbg !1623
  %3233 = icmp ult i64 %3231, %3232, !dbg !1623
  %3234 = load i32, i32* @x.19
  %3235 = load i32, i32* @y.20
  %3236 = sub i32 %3234, 1
  %3237 = mul i32 %3234, %3236
  %3238 = urem i32 %3237, 2
  %3239 = icmp eq i32 %3238, 0
  %3240 = icmp slt i32 %3235, 10
  %3241 = or i1 %3239, %3240
  br i1 %3241, label %originalBBpart2821, label %originalBB819alteredBB

originalBBpart2821:                               ; preds = %originalBB819
  br i1 %3233, label %3242, label %3246, !dbg !1626

3242:                                             ; preds = %originalBBpart2821
  %3243 = load i8*, i8** %11, align 8, !dbg !1623
  %3244 = load i64, i64* %21, align 8, !dbg !1623
  %3245 = getelementptr inbounds i8, i8* %3243, i64 %3244, !dbg !1623
  store i8 92, i8* %3245, align 1, !dbg !1623
  br label %3246, !dbg !1623

3246:                                             ; preds = %3242, %originalBBpart2821
  %3247 = load i32, i32* @x.19
  %3248 = load i32, i32* @y.20
  %3249 = sub i32 %3247, 1
  %3250 = mul i32 %3247, %3249
  %3251 = urem i32 %3250, 2
  %3252 = icmp eq i32 %3251, 0
  %3253 = icmp slt i32 %3248, 10
  %3254 = or i1 %3252, %3253
  br i1 %3254, label %originalBB823, label %originalBB823alteredBB

originalBB823:                                    ; preds = %3246, %originalBB823alteredBB
  %3255 = load i64, i64* %21, align 8, !dbg !1626
  %3256 = add i64 %3255, 1, !dbg !1626
  store i64 %3256, i64* %21, align 8, !dbg !1626
  %3257 = load i32, i32* @x.19
  %3258 = load i32, i32* @y.20
  %3259 = sub i32 %3257, 1
  %3260 = mul i32 %3257, %3259
  %3261 = urem i32 %3260, 2
  %3262 = icmp eq i32 %3261, 0
  %3263 = icmp slt i32 %3258, 10
  %3264 = or i1 %3262, %3263
  br i1 %3264, label %originalBBpart2827, label %originalBB823alteredBB

originalBBpart2827:                               ; preds = %originalBB823
  br label %3265, !dbg !1626

3265:                                             ; preds = %originalBBpart2827
  %3266 = load i32, i32* @x.19
  %3267 = load i32, i32* @y.20
  %3268 = sub i32 %3266, 1
  %3269 = mul i32 %3266, %3268
  %3270 = urem i32 %3269, 2
  %3271 = icmp eq i32 %3270, 0
  %3272 = icmp slt i32 %3267, 10
  %3273 = or i1 %3271, %3272
  br i1 %3273, label %originalBB829, label %originalBB829alteredBB

originalBB829:                                    ; preds = %3265, %originalBB829alteredBB
  %3274 = load i32, i32* @x.19
  %3275 = load i32, i32* @y.20
  %3276 = sub i32 %3274, 1
  %3277 = mul i32 %3274, %3276
  %3278 = urem i32 %3277, 2
  %3279 = icmp eq i32 %3278, 0
  %3280 = icmp slt i32 %3275, 10
  %3281 = or i1 %3279, %3280
  br i1 %3281, label %originalBBpart2831, label %originalBB829alteredBB

originalBBpart2831:                               ; preds = %originalBB829
  br label %3282, !dbg !1627

3282:                                             ; preds = %originalBBpart2831
  %3283 = load i32, i32* @x.19
  %3284 = load i32, i32* @y.20
  %3285 = sub i32 %3283, 1
  %3286 = mul i32 %3283, %3285
  %3287 = urem i32 %3286, 2
  %3288 = icmp eq i32 %3287, 0
  %3289 = icmp slt i32 %3284, 10
  %3290 = or i1 %3288, %3289
  br i1 %3290, label %originalBB833, label %originalBB833alteredBB

originalBB833:                                    ; preds = %3282, %originalBB833alteredBB
  %3291 = load i64, i64* %21, align 8, !dbg !1628
  %3292 = load i64, i64* %12, align 8, !dbg !1628
  %3293 = icmp ult i64 %3291, %3292, !dbg !1628
  %3294 = load i32, i32* @x.19
  %3295 = load i32, i32* @y.20
  %3296 = sub i32 %3294, 1
  %3297 = mul i32 %3294, %3296
  %3298 = urem i32 %3297, 2
  %3299 = icmp eq i32 %3298, 0
  %3300 = icmp slt i32 %3295, 10
  %3301 = or i1 %3299, %3300
  br i1 %3301, label %originalBBpart2835, label %originalBB833alteredBB

originalBBpart2835:                               ; preds = %originalBB833
  br i1 %3293, label %3302, label %3322, !dbg !1631

3302:                                             ; preds = %originalBBpart2835
  %3303 = load i32, i32* @x.19
  %3304 = load i32, i32* @y.20
  %3305 = sub i32 %3303, 1
  %3306 = mul i32 %3303, %3305
  %3307 = urem i32 %3306, 2
  %3308 = icmp eq i32 %3307, 0
  %3309 = icmp slt i32 %3304, 10
  %3310 = or i1 %3308, %3309
  br i1 %3310, label %originalBB837, label %originalBB837alteredBB

originalBB837:                                    ; preds = %3302, %originalBB837alteredBB
  %3311 = load i8*, i8** %11, align 8, !dbg !1628
  %3312 = load i64, i64* %21, align 8, !dbg !1628
  %3313 = getelementptr inbounds i8, i8* %3311, i64 %3312, !dbg !1628
  store i8 39, i8* %3313, align 1, !dbg !1628
  %3314 = load i32, i32* @x.19
  %3315 = load i32, i32* @y.20
  %3316 = sub i32 %3314, 1
  %3317 = mul i32 %3314, %3316
  %3318 = urem i32 %3317, 2
  %3319 = icmp eq i32 %3318, 0
  %3320 = icmp slt i32 %3315, 10
  %3321 = or i1 %3319, %3320
  br i1 %3321, label %originalBBpart2839, label %originalBB837alteredBB

originalBBpart2839:                               ; preds = %originalBB837
  br label %3322, !dbg !1628

3322:                                             ; preds = %originalBBpart2839, %originalBBpart2835
  %3323 = load i32, i32* @x.19
  %3324 = load i32, i32* @y.20
  %3325 = sub i32 %3323, 1
  %3326 = mul i32 %3323, %3325
  %3327 = urem i32 %3326, 2
  %3328 = icmp eq i32 %3327, 0
  %3329 = icmp slt i32 %3324, 10
  %3330 = or i1 %3328, %3329
  br i1 %3330, label %originalBB841, label %originalBB841alteredBB

originalBB841:                                    ; preds = %3322, %originalBB841alteredBB
  %3331 = load i64, i64* %21, align 8, !dbg !1631
  %3332 = add i64 %3331, 1, !dbg !1631
  store i64 %3332, i64* %21, align 8, !dbg !1631
  %3333 = load i32, i32* @x.19
  %3334 = load i32, i32* @y.20
  %3335 = sub i32 %3333, 1
  %3336 = mul i32 %3333, %3335
  %3337 = urem i32 %3336, 2
  %3338 = icmp eq i32 %3337, 0
  %3339 = icmp slt i32 %3334, 10
  %3340 = or i1 %3338, %3339
  br i1 %3340, label %originalBBpart2844, label %originalBB841alteredBB

originalBBpart2844:                               ; preds = %originalBB841
  br label %3341, !dbg !1631

3341:                                             ; preds = %originalBBpart2844
  %3342 = load i32, i32* @x.19
  %3343 = load i32, i32* @y.20
  %3344 = sub i32 %3342, 1
  %3345 = mul i32 %3342, %3344
  %3346 = urem i32 %3345, 2
  %3347 = icmp eq i32 %3346, 0
  %3348 = icmp slt i32 %3343, 10
  %3349 = or i1 %3347, %3348
  br i1 %3349, label %originalBB846, label %originalBB846alteredBB

originalBB846:                                    ; preds = %3341, %originalBB846alteredBB
  store i8 0, i8* %28, align 1, !dbg !1632
  %3350 = load i32, i32* @x.19
  %3351 = load i32, i32* @y.20
  %3352 = sub i32 %3350, 1
  %3353 = mul i32 %3350, %3352
  %3354 = urem i32 %3353, 2
  %3355 = icmp eq i32 %3354, 0
  %3356 = icmp slt i32 %3351, 10
  %3357 = or i1 %3355, %3356
  br i1 %3357, label %originalBBpart2848, label %originalBB846alteredBB

originalBBpart2848:                               ; preds = %originalBB846
  br label %3358, !dbg !1633

3358:                                             ; preds = %originalBBpart2848, %originalBBpart2766
  %3359 = load i32, i32* @x.19
  %3360 = load i32, i32* @y.20
  %3361 = sub i32 %3359, 1
  %3362 = mul i32 %3359, %3361
  %3363 = urem i32 %3362, 2
  %3364 = icmp eq i32 %3363, 0
  %3365 = icmp slt i32 %3360, 10
  %3366 = or i1 %3364, %3365
  br i1 %3366, label %originalBB850, label %originalBB850alteredBB

originalBB850:                                    ; preds = %3358, %originalBB850alteredBB
  %3367 = load i32, i32* @x.19
  %3368 = load i32, i32* @y.20
  %3369 = sub i32 %3367, 1
  %3370 = mul i32 %3367, %3369
  %3371 = urem i32 %3370, 2
  %3372 = icmp eq i32 %3371, 0
  %3373 = icmp slt i32 %3368, 10
  %3374 = or i1 %3372, %3373
  br i1 %3374, label %originalBBpart2852, label %originalBB850alteredBB

originalBBpart2852:                               ; preds = %originalBB850
  br label %5193, !dbg !1634

3375:                                             ; preds = %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223, %originalBBpart2223
  %3376 = load i32, i32* @x.19
  %3377 = load i32, i32* @y.20
  %3378 = sub i32 %3376, 1
  %3379 = mul i32 %3376, %3378
  %3380 = urem i32 %3379, 2
  %3381 = icmp eq i32 %3380, 0
  %3382 = icmp slt i32 %3377, 10
  %3383 = or i1 %3381, %3382
  br i1 %3383, label %originalBB854, label %originalBB854alteredBB

originalBB854:                                    ; preds = %3375, %originalBB854alteredBB
  store i8 1, i8* %35, align 1, !dbg !1635
  %3384 = load i32, i32* @x.19
  %3385 = load i32, i32* @y.20
  %3386 = sub i32 %3384, 1
  %3387 = mul i32 %3384, %3386
  %3388 = urem i32 %3387, 2
  %3389 = icmp eq i32 %3388, 0
  %3390 = icmp slt i32 %3385, 10
  %3391 = or i1 %3389, %3390
  br i1 %3391, label %originalBBpart2856, label %originalBB854alteredBB

originalBBpart2856:                               ; preds = %originalBB854
  br label %5193, !dbg !1636

3392:                                             ; preds = %originalBBpart2223
  call void @llvm.dbg.declare(metadata i64* %36, metadata !1637, metadata !DIExpression()), !dbg !1639
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1640, metadata !DIExpression()), !dbg !1641
  %3393 = load i32, i32* @x.19
  %3394 = load i32, i32* @y.20
  %3395 = sub i32 %3393, 1
  %3396 = mul i32 %3393, %3395
  %3397 = urem i32 %3396, 2
  %3398 = icmp eq i32 %3397, 0
  %3399 = icmp slt i32 %3394, 10
  %3400 = or i1 %3398, %3399
  br i1 %3400, label %originalBB858, label %originalBB858alteredBB

originalBB858:                                    ; preds = %3392, %originalBB858alteredBB
  %3401 = load i8, i8* %26, align 1, !dbg !1642
  %3402 = trunc i8 %3401 to i1, !dbg !1642
  %3403 = load i32, i32* @x.19
  %3404 = load i32, i32* @y.20
  %3405 = sub i32 %3403, 1
  %3406 = mul i32 %3403, %3405
  %3407 = urem i32 %3406, 2
  %3408 = icmp eq i32 %3407, 0
  %3409 = icmp slt i32 %3404, 10
  %3410 = or i1 %3408, %3409
  br i1 %3410, label %originalBBpart2860, label %originalBB858alteredBB

originalBBpart2860:                               ; preds = %originalBB858
  br i1 %3402, label %3411, label %3439, !dbg !1644

3411:                                             ; preds = %originalBBpart2860
  %3412 = load i32, i32* @x.19
  %3413 = load i32, i32* @y.20
  %3414 = sub i32 %3412, 1
  %3415 = mul i32 %3412, %3414
  %3416 = urem i32 %3415, 2
  %3417 = icmp eq i32 %3416, 0
  %3418 = icmp slt i32 %3413, 10
  %3419 = or i1 %3417, %3418
  br i1 %3419, label %originalBB862, label %originalBB862alteredBB

originalBB862:                                    ; preds = %3411, %originalBB862alteredBB
  store i64 1, i64* %36, align 8, !dbg !1645
  %3420 = call i16** @__ctype_b_loc() #14, !dbg !1647
  %3421 = load i16*, i16** %3420, align 8, !dbg !1647
  %3422 = load i8, i8* %31, align 1, !dbg !1647
  %3423 = zext i8 %3422 to i32, !dbg !1647
  %3424 = sext i32 %3423 to i64, !dbg !1647
  %3425 = getelementptr inbounds i16, i16* %3421, i64 %3424, !dbg !1647
  %3426 = load i16, i16* %3425, align 2, !dbg !1647
  %3427 = zext i16 %3426 to i32, !dbg !1647
  %3428 = and i32 %3427, 16384, !dbg !1647
  %3429 = icmp ne i32 %3428, 0, !dbg !1648
  %3430 = zext i1 %3429 to i8, !dbg !1649
  store i8 %3430, i8* %37, align 1, !dbg !1649
  %3431 = load i32, i32* @x.19
  %3432 = load i32, i32* @y.20
  %3433 = sub i32 %3431, 1
  %3434 = mul i32 %3431, %3433
  %3435 = urem i32 %3434, 2
  %3436 = icmp eq i32 %3435, 0
  %3437 = icmp slt i32 %3432, 10
  %3438 = or i1 %3436, %3437
  br i1 %3438, label %originalBBpart2866, label %originalBB862alteredBB

originalBBpart2866:                               ; preds = %originalBB862
  br label %4000, !dbg !1650

3439:                                             ; preds = %originalBBpart2860
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %38, metadata !1651, metadata !DIExpression()), !dbg !1668
  %3440 = load i32, i32* @x.19
  %3441 = load i32, i32* @y.20
  %3442 = sub i32 %3440, 1
  %3443 = mul i32 %3440, %3442
  %3444 = urem i32 %3443, 2
  %3445 = icmp eq i32 %3444, 0
  %3446 = icmp slt i32 %3441, 10
  %3447 = or i1 %3445, %3446
  br i1 %3447, label %originalBB868, label %originalBB868alteredBB

originalBB868:                                    ; preds = %3439, %originalBB868alteredBB
  %3448 = bitcast %struct.__mbstate_t* %38 to i8*, !dbg !1669
  call void @llvm.memset.p0i8.i64(i8* align 4 %3448, i8 0, i64 8, i1 false), !dbg !1669
  store i64 0, i64* %36, align 8, !dbg !1670
  store i8 1, i8* %37, align 1, !dbg !1671
  %3449 = load i64, i64* %14, align 8, !dbg !1672
  %3450 = icmp eq i64 %3449, -1, !dbg !1674
  %3451 = load i32, i32* @x.19
  %3452 = load i32, i32* @y.20
  %3453 = sub i32 %3451, 1
  %3454 = mul i32 %3451, %3453
  %3455 = urem i32 %3454, 2
  %3456 = icmp eq i32 %3455, 0
  %3457 = icmp slt i32 %3452, 10
  %3458 = or i1 %3456, %3457
  br i1 %3458, label %originalBBpart2870, label %originalBB868alteredBB

originalBBpart2870:                               ; preds = %originalBB868
  br i1 %3450, label %3459, label %3478, !dbg !1675

3459:                                             ; preds = %originalBBpart2870
  %3460 = load i32, i32* @x.19
  %3461 = load i32, i32* @y.20
  %3462 = sub i32 %3460, 1
  %3463 = mul i32 %3460, %3462
  %3464 = urem i32 %3463, 2
  %3465 = icmp eq i32 %3464, 0
  %3466 = icmp slt i32 %3461, 10
  %3467 = or i1 %3465, %3466
  br i1 %3467, label %originalBB872, label %originalBB872alteredBB

originalBB872:                                    ; preds = %3459, %originalBB872alteredBB
  %3468 = load i8*, i8** %13, align 8, !dbg !1676
  %3469 = call i64 @strlen(i8* %3468) #13, !dbg !1677
  store i64 %3469, i64* %14, align 8, !dbg !1678
  %3470 = load i32, i32* @x.19
  %3471 = load i32, i32* @y.20
  %3472 = sub i32 %3470, 1
  %3473 = mul i32 %3470, %3472
  %3474 = urem i32 %3473, 2
  %3475 = icmp eq i32 %3474, 0
  %3476 = icmp slt i32 %3471, 10
  %3477 = or i1 %3475, %3476
  br i1 %3477, label %originalBBpart2874, label %originalBB872alteredBB

originalBBpart2874:                               ; preds = %originalBB872
  br label %3478, !dbg !1679

3478:                                             ; preds = %originalBBpart2874, %originalBBpart2870
  %3479 = load i32, i32* @x.19
  %3480 = load i32, i32* @y.20
  %3481 = sub i32 %3479, 1
  %3482 = mul i32 %3479, %3481
  %3483 = urem i32 %3482, 2
  %3484 = icmp eq i32 %3483, 0
  %3485 = icmp slt i32 %3480, 10
  %3486 = or i1 %3484, %3485
  br i1 %3486, label %originalBB876, label %originalBB876alteredBB

originalBB876:                                    ; preds = %3478, %originalBB876alteredBB
  %3487 = load i32, i32* @x.19
  %3488 = load i32, i32* @y.20
  %3489 = sub i32 %3487, 1
  %3490 = mul i32 %3487, %3489
  %3491 = urem i32 %3490, 2
  %3492 = icmp eq i32 %3491, 0
  %3493 = icmp slt i32 %3488, 10
  %3494 = or i1 %3492, %3493
  br i1 %3494, label %originalBBpart2878, label %originalBB876alteredBB

originalBBpart2878:                               ; preds = %originalBB876
  br label %3495, !dbg !1680

3495:                                             ; preds = %originalBBpart21027, %originalBBpart2878
  call void @llvm.dbg.declare(metadata i32* %39, metadata !1681, metadata !DIExpression()), !dbg !1684
  call void @llvm.dbg.declare(metadata i64* %40, metadata !1685, metadata !DIExpression()), !dbg !1686
  %3496 = load i32, i32* @x.19
  %3497 = load i32, i32* @y.20
  %3498 = sub i32 %3496, 1
  %3499 = mul i32 %3496, %3498
  %3500 = urem i32 %3499, 2
  %3501 = icmp eq i32 %3500, 0
  %3502 = icmp slt i32 %3497, 10
  %3503 = or i1 %3501, %3502
  br i1 %3503, label %originalBB880, label %originalBB880alteredBB

originalBB880:                                    ; preds = %3495, %originalBB880alteredBB
  %3504 = load i8*, i8** %13, align 8, !dbg !1687
  %3505 = load i64, i64* %20, align 8, !dbg !1688
  %3506 = load i64, i64* %36, align 8, !dbg !1689
  %3507 = add i64 %3505, %3506, !dbg !1690
  %3508 = getelementptr inbounds i8, i8* %3504, i64 %3507, !dbg !1687
  %3509 = load i64, i64* %14, align 8, !dbg !1691
  %3510 = load i64, i64* %20, align 8, !dbg !1692
  %3511 = load i64, i64* %36, align 8, !dbg !1693
  %3512 = add i64 %3510, %3511, !dbg !1694
  %3513 = sub i64 %3509, %3512, !dbg !1695
  %3514 = call i64 @rpl_mbrtowc(i32* %39, i8* %3508, i64 %3513, %struct.__mbstate_t* %38), !dbg !1696
  store i64 %3514, i64* %40, align 8, !dbg !1686
  %3515 = load i64, i64* %40, align 8, !dbg !1697
  %3516 = icmp eq i64 %3515, 0, !dbg !1699
  %3517 = load i32, i32* @x.19
  %3518 = load i32, i32* @y.20
  %3519 = sub i32 %3517, 1
  %3520 = mul i32 %3517, %3519
  %3521 = urem i32 %3520, 2
  %3522 = icmp eq i32 %3521, 0
  %3523 = icmp slt i32 %3518, 10
  %3524 = or i1 %3522, %3523
  br i1 %3524, label %originalBBpart2904, label %originalBB880alteredBB

originalBBpart2904:                               ; preds = %originalBB880
  br i1 %3516, label %3525, label %3542, !dbg !1700

3525:                                             ; preds = %originalBBpart2904
  %3526 = load i32, i32* @x.19
  %3527 = load i32, i32* @y.20
  %3528 = sub i32 %3526, 1
  %3529 = mul i32 %3526, %3528
  %3530 = urem i32 %3529, 2
  %3531 = icmp eq i32 %3530, 0
  %3532 = icmp slt i32 %3527, 10
  %3533 = or i1 %3531, %3532
  br i1 %3533, label %originalBB906, label %originalBB906alteredBB

originalBB906:                                    ; preds = %3525, %originalBB906alteredBB
  %3534 = load i32, i32* @x.19
  %3535 = load i32, i32* @y.20
  %3536 = sub i32 %3534, 1
  %3537 = mul i32 %3534, %3536
  %3538 = urem i32 %3537, 2
  %3539 = icmp eq i32 %3538, 0
  %3540 = icmp slt i32 %3535, 10
  %3541 = or i1 %3539, %3540
  br i1 %3541, label %originalBBpart2908, label %originalBB906alteredBB

originalBBpart2908:                               ; preds = %originalBB906
  br label %3983, !dbg !1701

3542:                                             ; preds = %originalBBpart2904
  %3543 = load i64, i64* %40, align 8, !dbg !1702
  %3544 = icmp eq i64 %3543, -1, !dbg !1704
  br i1 %3544, label %3545, label %3562, !dbg !1705

3545:                                             ; preds = %3542
  %3546 = load i32, i32* @x.19
  %3547 = load i32, i32* @y.20
  %3548 = sub i32 %3546, 1
  %3549 = mul i32 %3546, %3548
  %3550 = urem i32 %3549, 2
  %3551 = icmp eq i32 %3550, 0
  %3552 = icmp slt i32 %3547, 10
  %3553 = or i1 %3551, %3552
  br i1 %3553, label %originalBB910, label %originalBB910alteredBB

originalBB910:                                    ; preds = %3545, %originalBB910alteredBB
  store i8 0, i8* %37, align 1, !dbg !1706
  %3554 = load i32, i32* @x.19
  %3555 = load i32, i32* @y.20
  %3556 = sub i32 %3554, 1
  %3557 = mul i32 %3554, %3556
  %3558 = urem i32 %3557, 2
  %3559 = icmp eq i32 %3558, 0
  %3560 = icmp slt i32 %3555, 10
  %3561 = or i1 %3559, %3560
  br i1 %3561, label %originalBBpart2912, label %originalBB910alteredBB

originalBBpart2912:                               ; preds = %originalBB910
  br label %3983, !dbg !1708

3562:                                             ; preds = %3542
  %3563 = load i32, i32* @x.19
  %3564 = load i32, i32* @y.20
  %3565 = sub i32 %3563, 1
  %3566 = mul i32 %3563, %3565
  %3567 = urem i32 %3566, 2
  %3568 = icmp eq i32 %3567, 0
  %3569 = icmp slt i32 %3564, 10
  %3570 = or i1 %3568, %3569
  br i1 %3570, label %originalBB914, label %originalBB914alteredBB

originalBB914:                                    ; preds = %3562, %originalBB914alteredBB
  %3571 = load i64, i64* %40, align 8, !dbg !1709
  %3572 = icmp eq i64 %3571, -2, !dbg !1711
  %3573 = load i32, i32* @x.19
  %3574 = load i32, i32* @y.20
  %3575 = sub i32 %3573, 1
  %3576 = mul i32 %3573, %3575
  %3577 = urem i32 %3576, 2
  %3578 = icmp eq i32 %3577, 0
  %3579 = icmp slt i32 %3574, 10
  %3580 = or i1 %3578, %3579
  br i1 %3580, label %originalBBpart2916, label %originalBB914alteredBB

originalBBpart2916:                               ; preds = %originalBB914
  br i1 %3572, label %3581, label %3683, !dbg !1712

3581:                                             ; preds = %originalBBpart2916
  %3582 = load i32, i32* @x.19
  %3583 = load i32, i32* @y.20
  %3584 = sub i32 %3582, 1
  %3585 = mul i32 %3582, %3584
  %3586 = urem i32 %3585, 2
  %3587 = icmp eq i32 %3586, 0
  %3588 = icmp slt i32 %3583, 10
  %3589 = or i1 %3587, %3588
  br i1 %3589, label %originalBB918, label %originalBB918alteredBB

originalBB918:                                    ; preds = %3581, %originalBB918alteredBB
  store i8 0, i8* %37, align 1, !dbg !1713
  %3590 = load i32, i32* @x.19
  %3591 = load i32, i32* @y.20
  %3592 = sub i32 %3590, 1
  %3593 = mul i32 %3590, %3592
  %3594 = urem i32 %3593, 2
  %3595 = icmp eq i32 %3594, 0
  %3596 = icmp slt i32 %3591, 10
  %3597 = or i1 %3595, %3596
  br i1 %3597, label %originalBBpart2920, label %originalBB918alteredBB

originalBBpart2920:                               ; preds = %originalBB918
  br label %3598, !dbg !1715

3598:                                             ; preds = %3663, %originalBBpart2920
  %3599 = load i32, i32* @x.19
  %3600 = load i32, i32* @y.20
  %3601 = sub i32 %3599, 1
  %3602 = mul i32 %3599, %3601
  %3603 = urem i32 %3602, 2
  %3604 = icmp eq i32 %3603, 0
  %3605 = icmp slt i32 %3600, 10
  %3606 = or i1 %3604, %3605
  br i1 %3606, label %originalBB922, label %originalBB922alteredBB

originalBB922:                                    ; preds = %3598, %originalBB922alteredBB
  %3607 = load i64, i64* %20, align 8, !dbg !1716
  %3608 = load i64, i64* %36, align 8, !dbg !1717
  %3609 = add i64 %3607, %3608, !dbg !1718
  %3610 = load i64, i64* %14, align 8, !dbg !1719
  %3611 = icmp ult i64 %3609, %3610, !dbg !1720
  %3612 = load i32, i32* @x.19
  %3613 = load i32, i32* @y.20
  %3614 = sub i32 %3612, 1
  %3615 = mul i32 %3612, %3614
  %3616 = urem i32 %3615, 2
  %3617 = icmp eq i32 %3616, 0
  %3618 = icmp slt i32 %3613, 10
  %3619 = or i1 %3617, %3618
  br i1 %3619, label %originalBBpart2925, label %originalBB922alteredBB

originalBBpart2925:                               ; preds = %originalBB922
  br i1 %3611, label %3620, label %3645, !dbg !1721

3620:                                             ; preds = %originalBBpart2925
  %3621 = load i32, i32* @x.19
  %3622 = load i32, i32* @y.20
  %3623 = sub i32 %3621, 1
  %3624 = mul i32 %3621, %3623
  %3625 = urem i32 %3624, 2
  %3626 = icmp eq i32 %3625, 0
  %3627 = icmp slt i32 %3622, 10
  %3628 = or i1 %3626, %3627
  br i1 %3628, label %originalBB927, label %originalBB927alteredBB

originalBB927:                                    ; preds = %3620, %originalBB927alteredBB
  %3629 = load i8*, i8** %13, align 8, !dbg !1722
  %3630 = load i64, i64* %20, align 8, !dbg !1723
  %3631 = load i64, i64* %36, align 8, !dbg !1724
  %3632 = add i64 %3630, %3631, !dbg !1725
  %3633 = getelementptr inbounds i8, i8* %3629, i64 %3632, !dbg !1722
  %3634 = load i8, i8* %3633, align 1, !dbg !1722
  %3635 = sext i8 %3634 to i32, !dbg !1722
  %3636 = icmp ne i32 %3635, 0, !dbg !1721
  %3637 = load i32, i32* @x.19
  %3638 = load i32, i32* @y.20
  %3639 = sub i32 %3637, 1
  %3640 = mul i32 %3637, %3639
  %3641 = urem i32 %3640, 2
  %3642 = icmp eq i32 %3641, 0
  %3643 = icmp slt i32 %3638, 10
  %3644 = or i1 %3642, %3643
  br i1 %3644, label %originalBBpart2931, label %originalBB927alteredBB

originalBBpart2931:                               ; preds = %originalBB927
  br label %3645

3645:                                             ; preds = %originalBBpart2931, %originalBBpart2925
  %3646 = phi i1 [ false, %originalBBpart2925 ], [ %3636, %originalBBpart2931 ], !dbg !1726
  %3647 = load i32, i32* @x.19
  %3648 = load i32, i32* @y.20
  %3649 = sub i32 %3647, 1
  %3650 = mul i32 %3647, %3649
  %3651 = urem i32 %3650, 2
  %3652 = icmp eq i32 %3651, 0
  %3653 = icmp slt i32 %3648, 10
  %3654 = or i1 %3652, %3653
  br i1 %3654, label %originalBB933, label %originalBB933alteredBB

originalBB933:                                    ; preds = %3645, %originalBB933alteredBB
  %3655 = load i32, i32* @x.19
  %3656 = load i32, i32* @y.20
  %3657 = sub i32 %3655, 1
  %3658 = mul i32 %3655, %3657
  %3659 = urem i32 %3658, 2
  %3660 = icmp eq i32 %3659, 0
  %3661 = icmp slt i32 %3656, 10
  %3662 = or i1 %3660, %3661
  br i1 %3662, label %originalBBpart2935, label %originalBB933alteredBB

originalBBpart2935:                               ; preds = %originalBB933
  br i1 %3646, label %3663, label %3666, !dbg !1715

3663:                                             ; preds = %originalBBpart2935
  %3664 = load i64, i64* %36, align 8, !dbg !1727
  %3665 = add i64 %3664, 1, !dbg !1727
  store i64 %3665, i64* %36, align 8, !dbg !1727
  br label %3598, !dbg !1715, !llvm.loop !1728

3666:                                             ; preds = %originalBBpart2935
  %3667 = load i32, i32* @x.19
  %3668 = load i32, i32* @y.20
  %3669 = sub i32 %3667, 1
  %3670 = mul i32 %3667, %3669
  %3671 = urem i32 %3670, 2
  %3672 = icmp eq i32 %3671, 0
  %3673 = icmp slt i32 %3668, 10
  %3674 = or i1 %3672, %3673
  br i1 %3674, label %originalBB937, label %originalBB937alteredBB

originalBB937:                                    ; preds = %3666, %originalBB937alteredBB
  %3675 = load i32, i32* @x.19
  %3676 = load i32, i32* @y.20
  %3677 = sub i32 %3675, 1
  %3678 = mul i32 %3675, %3677
  %3679 = urem i32 %3678, 2
  %3680 = icmp eq i32 %3679, 0
  %3681 = icmp slt i32 %3676, 10
  %3682 = or i1 %3680, %3681
  br i1 %3682, label %originalBBpart2939, label %originalBB937alteredBB

originalBBpart2939:                               ; preds = %originalBB937
  br label %3983, !dbg !1729

3683:                                             ; preds = %originalBBpart2916
  %3684 = load i32, i32* @x.19
  %3685 = load i32, i32* @y.20
  %3686 = sub i32 %3684, 1
  %3687 = mul i32 %3684, %3686
  %3688 = urem i32 %3687, 2
  %3689 = icmp eq i32 %3688, 0
  %3690 = icmp slt i32 %3685, 10
  %3691 = or i1 %3689, %3690
  br i1 %3691, label %originalBB941, label %originalBB941alteredBB

originalBB941:                                    ; preds = %3683, %originalBB941alteredBB
  %3692 = load i8, i8* %27, align 1, !dbg !1730
  %3693 = trunc i8 %3692 to i1, !dbg !1730
  %3694 = load i32, i32* @x.19
  %3695 = load i32, i32* @y.20
  %3696 = sub i32 %3694, 1
  %3697 = mul i32 %3694, %3696
  %3698 = urem i32 %3697, 2
  %3699 = icmp eq i32 %3698, 0
  %3700 = icmp slt i32 %3695, 10
  %3701 = or i1 %3699, %3700
  br i1 %3701, label %originalBBpart2943, label %originalBB941alteredBB

originalBBpart2943:                               ; preds = %originalBB941
  br i1 %3693, label %3702, label %3855, !dbg !1733

3702:                                             ; preds = %originalBBpart2943
  %3703 = load i32, i32* @x.19
  %3704 = load i32, i32* @y.20
  %3705 = sub i32 %3703, 1
  %3706 = mul i32 %3703, %3705
  %3707 = urem i32 %3706, 2
  %3708 = icmp eq i32 %3707, 0
  %3709 = icmp slt i32 %3704, 10
  %3710 = or i1 %3708, %3709
  br i1 %3710, label %originalBB945, label %originalBB945alteredBB

originalBB945:                                    ; preds = %3702, %originalBB945alteredBB
  %3711 = load i32, i32* %15, align 4, !dbg !1734
  %3712 = icmp eq i32 %3711, 2, !dbg !1735
  %3713 = load i32, i32* @x.19
  %3714 = load i32, i32* @y.20
  %3715 = sub i32 %3713, 1
  %3716 = mul i32 %3713, %3715
  %3717 = urem i32 %3716, 2
  %3718 = icmp eq i32 %3717, 0
  %3719 = icmp slt i32 %3714, 10
  %3720 = or i1 %3718, %3719
  br i1 %3720, label %originalBBpart2947, label %originalBB945alteredBB

originalBBpart2947:                               ; preds = %originalBB945
  br i1 %3712, label %3721, label %3855, !dbg !1736

3721:                                             ; preds = %originalBBpart2947
  call void @llvm.dbg.declare(metadata i64* %41, metadata !1737, metadata !DIExpression()), !dbg !1739
  %3722 = load i32, i32* @x.19
  %3723 = load i32, i32* @y.20
  %3724 = sub i32 %3722, 1
  %3725 = mul i32 %3722, %3724
  %3726 = urem i32 %3725, 2
  %3727 = icmp eq i32 %3726, 0
  %3728 = icmp slt i32 %3723, 10
  %3729 = or i1 %3727, %3728
  br i1 %3729, label %originalBB949, label %originalBB949alteredBB

originalBB949:                                    ; preds = %3721, %originalBB949alteredBB
  store i64 1, i64* %41, align 8, !dbg !1740
  %3730 = load i32, i32* @x.19
  %3731 = load i32, i32* @y.20
  %3732 = sub i32 %3730, 1
  %3733 = mul i32 %3730, %3732
  %3734 = urem i32 %3733, 2
  %3735 = icmp eq i32 %3734, 0
  %3736 = icmp slt i32 %3731, 10
  %3737 = or i1 %3735, %3736
  br i1 %3737, label %originalBBpart2951, label %originalBB949alteredBB

originalBBpart2951:                               ; preds = %originalBB949
  br label %3738, !dbg !1742

3738:                                             ; preds = %originalBBpart2976, %originalBBpart2951
  %3739 = load i32, i32* @x.19
  %3740 = load i32, i32* @y.20
  %3741 = sub i32 %3739, 1
  %3742 = mul i32 %3739, %3741
  %3743 = urem i32 %3742, 2
  %3744 = icmp eq i32 %3743, 0
  %3745 = icmp slt i32 %3740, 10
  %3746 = or i1 %3744, %3745
  br i1 %3746, label %originalBB953, label %originalBB953alteredBB

originalBB953:                                    ; preds = %3738, %originalBB953alteredBB
  %3747 = load i64, i64* %41, align 8, !dbg !1743
  %3748 = load i64, i64* %40, align 8, !dbg !1745
  %3749 = icmp ult i64 %3747, %3748, !dbg !1746
  %3750 = load i32, i32* @x.19
  %3751 = load i32, i32* @y.20
  %3752 = sub i32 %3750, 1
  %3753 = mul i32 %3750, %3752
  %3754 = urem i32 %3753, 2
  %3755 = icmp eq i32 %3754, 0
  %3756 = icmp slt i32 %3751, 10
  %3757 = or i1 %3755, %3756
  br i1 %3757, label %originalBBpart2955, label %originalBB953alteredBB

originalBBpart2955:                               ; preds = %originalBB953
  br i1 %3749, label %3758, label %3838, !dbg !1747

3758:                                             ; preds = %originalBBpart2955
  %3759 = load i8*, i8** %13, align 8, !dbg !1748
  %3760 = load i64, i64* %20, align 8, !dbg !1749
  %3761 = load i64, i64* %36, align 8, !dbg !1750
  %3762 = add i64 %3760, %3761, !dbg !1751
  %3763 = load i64, i64* %41, align 8, !dbg !1752
  %3764 = add i64 %3762, %3763, !dbg !1753
  %3765 = getelementptr inbounds i8, i8* %3759, i64 %3764, !dbg !1748
  %3766 = load i8, i8* %3765, align 1, !dbg !1748
  %3767 = sext i8 %3766 to i32, !dbg !1748
  switch i32 %3767, label %3785 [
    i32 91, label %3768
    i32 92, label %3768
    i32 94, label %3768
    i32 96, label %3768
    i32 124, label %3768
  ], !dbg !1754

3768:                                             ; preds = %3758, %3758, %3758, %3758, %3758
  %3769 = load i32, i32* @x.19
  %3770 = load i32, i32* @y.20
  %3771 = sub i32 %3769, 1
  %3772 = mul i32 %3769, %3771
  %3773 = urem i32 %3772, 2
  %3774 = icmp eq i32 %3773, 0
  %3775 = icmp slt i32 %3770, 10
  %3776 = or i1 %3774, %3775
  br i1 %3776, label %originalBB957, label %originalBB957alteredBB

originalBB957:                                    ; preds = %3768, %originalBB957alteredBB
  %3777 = load i32, i32* @x.19
  %3778 = load i32, i32* @y.20
  %3779 = sub i32 %3777, 1
  %3780 = mul i32 %3777, %3779
  %3781 = urem i32 %3780, 2
  %3782 = icmp eq i32 %3781, 0
  %3783 = icmp slt i32 %3778, 10
  %3784 = or i1 %3782, %3783
  br i1 %3784, label %originalBBpart2959, label %originalBB957alteredBB

originalBBpart2959:                               ; preds = %originalBB957
  br label %6590, !dbg !1755

3785:                                             ; preds = %3758
  %3786 = load i32, i32* @x.19
  %3787 = load i32, i32* @y.20
  %3788 = sub i32 %3786, 1
  %3789 = mul i32 %3786, %3788
  %3790 = urem i32 %3789, 2
  %3791 = icmp eq i32 %3790, 0
  %3792 = icmp slt i32 %3787, 10
  %3793 = or i1 %3791, %3792
  br i1 %3793, label %originalBB961, label %originalBB961alteredBB

originalBB961:                                    ; preds = %3785, %originalBB961alteredBB
  %3794 = load i32, i32* @x.19
  %3795 = load i32, i32* @y.20
  %3796 = sub i32 %3794, 1
  %3797 = mul i32 %3794, %3796
  %3798 = urem i32 %3797, 2
  %3799 = icmp eq i32 %3798, 0
  %3800 = icmp slt i32 %3795, 10
  %3801 = or i1 %3799, %3800
  br i1 %3801, label %originalBBpart2963, label %originalBB961alteredBB

originalBBpart2963:                               ; preds = %originalBB961
  br label %3802, !dbg !1757

3802:                                             ; preds = %originalBBpart2963
  %3803 = load i32, i32* @x.19
  %3804 = load i32, i32* @y.20
  %3805 = sub i32 %3803, 1
  %3806 = mul i32 %3803, %3805
  %3807 = urem i32 %3806, 2
  %3808 = icmp eq i32 %3807, 0
  %3809 = icmp slt i32 %3804, 10
  %3810 = or i1 %3808, %3809
  br i1 %3810, label %originalBB965, label %originalBB965alteredBB

originalBB965:                                    ; preds = %3802, %originalBB965alteredBB
  %3811 = load i32, i32* @x.19
  %3812 = load i32, i32* @y.20
  %3813 = sub i32 %3811, 1
  %3814 = mul i32 %3811, %3813
  %3815 = urem i32 %3814, 2
  %3816 = icmp eq i32 %3815, 0
  %3817 = icmp slt i32 %3812, 10
  %3818 = or i1 %3816, %3817
  br i1 %3818, label %originalBBpart2967, label %originalBB965alteredBB

originalBBpart2967:                               ; preds = %originalBB965
  br label %3819, !dbg !1758

3819:                                             ; preds = %originalBBpart2967
  %3820 = load i32, i32* @x.19
  %3821 = load i32, i32* @y.20
  %3822 = sub i32 %3820, 1
  %3823 = mul i32 %3820, %3822
  %3824 = urem i32 %3823, 2
  %3825 = icmp eq i32 %3824, 0
  %3826 = icmp slt i32 %3821, 10
  %3827 = or i1 %3825, %3826
  br i1 %3827, label %originalBB969, label %originalBB969alteredBB

originalBB969:                                    ; preds = %3819, %originalBB969alteredBB
  %3828 = load i64, i64* %41, align 8, !dbg !1759
  %3829 = add i64 %3828, 1, !dbg !1759
  store i64 %3829, i64* %41, align 8, !dbg !1759
  %3830 = load i32, i32* @x.19
  %3831 = load i32, i32* @y.20
  %3832 = sub i32 %3830, 1
  %3833 = mul i32 %3830, %3832
  %3834 = urem i32 %3833, 2
  %3835 = icmp eq i32 %3834, 0
  %3836 = icmp slt i32 %3831, 10
  %3837 = or i1 %3835, %3836
  br i1 %3837, label %originalBBpart2976, label %originalBB969alteredBB

originalBBpart2976:                               ; preds = %originalBB969
  br label %3738, !dbg !1760, !llvm.loop !1761

3838:                                             ; preds = %originalBBpart2955
  %3839 = load i32, i32* @x.19
  %3840 = load i32, i32* @y.20
  %3841 = sub i32 %3839, 1
  %3842 = mul i32 %3839, %3841
  %3843 = urem i32 %3842, 2
  %3844 = icmp eq i32 %3843, 0
  %3845 = icmp slt i32 %3840, 10
  %3846 = or i1 %3844, %3845
  br i1 %3846, label %originalBB978, label %originalBB978alteredBB

originalBB978:                                    ; preds = %3838, %originalBB978alteredBB
  %3847 = load i32, i32* @x.19
  %3848 = load i32, i32* @y.20
  %3849 = sub i32 %3847, 1
  %3850 = mul i32 %3847, %3849
  %3851 = urem i32 %3850, 2
  %3852 = icmp eq i32 %3851, 0
  %3853 = icmp slt i32 %3848, 10
  %3854 = or i1 %3852, %3853
  br i1 %3854, label %originalBBpart2980, label %originalBB978alteredBB

originalBBpart2980:                               ; preds = %originalBB978
  br label %3855, !dbg !1763

3855:                                             ; preds = %originalBBpart2980, %originalBBpart2947, %originalBBpart2943
  %3856 = load i32, i32* @x.19
  %3857 = load i32, i32* @y.20
  %3858 = sub i32 %3856, 1
  %3859 = mul i32 %3856, %3858
  %3860 = urem i32 %3859, 2
  %3861 = icmp eq i32 %3860, 0
  %3862 = icmp slt i32 %3857, 10
  %3863 = or i1 %3861, %3862
  br i1 %3863, label %originalBB982, label %originalBB982alteredBB

originalBB982:                                    ; preds = %3855, %originalBB982alteredBB
  %3864 = load i32, i32* %39, align 4, !dbg !1764
  %3865 = call i32 @iswprint(i32 %3864) #10, !dbg !1766
  %3866 = icmp ne i32 %3865, 0, !dbg !1766
  %3867 = load i32, i32* @x.19
  %3868 = load i32, i32* @y.20
  %3869 = sub i32 %3867, 1
  %3870 = mul i32 %3867, %3869
  %3871 = urem i32 %3870, 2
  %3872 = icmp eq i32 %3871, 0
  %3873 = icmp slt i32 %3868, 10
  %3874 = or i1 %3872, %3873
  br i1 %3874, label %originalBBpart2984, label %originalBB982alteredBB

originalBBpart2984:                               ; preds = %originalBB982
  br i1 %3866, label %3892, label %3875, !dbg !1767

3875:                                             ; preds = %originalBBpart2984
  %3876 = load i32, i32* @x.19
  %3877 = load i32, i32* @y.20
  %3878 = sub i32 %3876, 1
  %3879 = mul i32 %3876, %3878
  %3880 = urem i32 %3879, 2
  %3881 = icmp eq i32 %3880, 0
  %3882 = icmp slt i32 %3877, 10
  %3883 = or i1 %3881, %3882
  br i1 %3883, label %originalBB986, label %originalBB986alteredBB

originalBB986:                                    ; preds = %3875, %originalBB986alteredBB
  store i8 0, i8* %37, align 1, !dbg !1768
  %3884 = load i32, i32* @x.19
  %3885 = load i32, i32* @y.20
  %3886 = sub i32 %3884, 1
  %3887 = mul i32 %3884, %3886
  %3888 = urem i32 %3887, 2
  %3889 = icmp eq i32 %3888, 0
  %3890 = icmp slt i32 %3885, 10
  %3891 = or i1 %3889, %3890
  br i1 %3891, label %originalBBpart2988, label %originalBB986alteredBB

originalBBpart2988:                               ; preds = %originalBB986
  br label %3892, !dbg !1769

3892:                                             ; preds = %originalBBpart2988, %originalBBpart2984
  %3893 = load i32, i32* @x.19
  %3894 = load i32, i32* @y.20
  %3895 = sub i32 %3893, 1
  %3896 = mul i32 %3893, %3895
  %3897 = urem i32 %3896, 2
  %3898 = icmp eq i32 %3897, 0
  %3899 = icmp slt i32 %3894, 10
  %3900 = or i1 %3898, %3899
  br i1 %3900, label %originalBB990, label %originalBB990alteredBB

originalBB990:                                    ; preds = %3892, %originalBB990alteredBB
  %3901 = load i64, i64* %40, align 8, !dbg !1770
  %3902 = load i64, i64* %36, align 8, !dbg !1771
  %3903 = add i64 %3902, %3901, !dbg !1771
  store i64 %3903, i64* %36, align 8, !dbg !1771
  %3904 = load i32, i32* @x.19
  %3905 = load i32, i32* @y.20
  %3906 = sub i32 %3904, 1
  %3907 = mul i32 %3904, %3906
  %3908 = urem i32 %3907, 2
  %3909 = icmp eq i32 %3908, 0
  %3910 = icmp slt i32 %3905, 10
  %3911 = or i1 %3909, %3910
  br i1 %3911, label %originalBBpart21000, label %originalBB990alteredBB

originalBBpart21000:                              ; preds = %originalBB990
  br label %3912

3912:                                             ; preds = %originalBBpart21000
  %3913 = load i32, i32* @x.19
  %3914 = load i32, i32* @y.20
  %3915 = sub i32 %3913, 1
  %3916 = mul i32 %3913, %3915
  %3917 = urem i32 %3916, 2
  %3918 = icmp eq i32 %3917, 0
  %3919 = icmp slt i32 %3914, 10
  %3920 = or i1 %3918, %3919
  br i1 %3920, label %originalBB1002, label %originalBB1002alteredBB

originalBB1002:                                   ; preds = %3912, %originalBB1002alteredBB
  %3921 = load i32, i32* @x.19
  %3922 = load i32, i32* @y.20
  %3923 = sub i32 %3921, 1
  %3924 = mul i32 %3921, %3923
  %3925 = urem i32 %3924, 2
  %3926 = icmp eq i32 %3925, 0
  %3927 = icmp slt i32 %3922, 10
  %3928 = or i1 %3926, %3927
  br i1 %3928, label %originalBBpart21004, label %originalBB1002alteredBB

originalBBpart21004:                              ; preds = %originalBB1002
  br label %3929

3929:                                             ; preds = %originalBBpart21004
  %3930 = load i32, i32* @x.19
  %3931 = load i32, i32* @y.20
  %3932 = sub i32 %3930, 1
  %3933 = mul i32 %3930, %3932
  %3934 = urem i32 %3933, 2
  %3935 = icmp eq i32 %3934, 0
  %3936 = icmp slt i32 %3931, 10
  %3937 = or i1 %3935, %3936
  br i1 %3937, label %originalBB1006, label %originalBB1006alteredBB

originalBB1006:                                   ; preds = %3929, %originalBB1006alteredBB
  %3938 = load i32, i32* @x.19
  %3939 = load i32, i32* @y.20
  %3940 = sub i32 %3938, 1
  %3941 = mul i32 %3938, %3940
  %3942 = urem i32 %3941, 2
  %3943 = icmp eq i32 %3942, 0
  %3944 = icmp slt i32 %3939, 10
  %3945 = or i1 %3943, %3944
  br i1 %3945, label %originalBBpart21008, label %originalBB1006alteredBB

originalBBpart21008:                              ; preds = %originalBB1006
  br label %3946

3946:                                             ; preds = %originalBBpart21008
  %3947 = load i32, i32* @x.19
  %3948 = load i32, i32* @y.20
  %3949 = sub i32 %3947, 1
  %3950 = mul i32 %3947, %3949
  %3951 = urem i32 %3950, 2
  %3952 = icmp eq i32 %3951, 0
  %3953 = icmp slt i32 %3948, 10
  %3954 = or i1 %3952, %3953
  br i1 %3954, label %originalBB1010, label %originalBB1010alteredBB

originalBB1010:                                   ; preds = %3946, %originalBB1010alteredBB
  %3955 = load i32, i32* @x.19
  %3956 = load i32, i32* @y.20
  %3957 = sub i32 %3955, 1
  %3958 = mul i32 %3955, %3957
  %3959 = urem i32 %3958, 2
  %3960 = icmp eq i32 %3959, 0
  %3961 = icmp slt i32 %3956, 10
  %3962 = or i1 %3960, %3961
  br i1 %3962, label %originalBBpart21012, label %originalBB1010alteredBB

originalBBpart21012:                              ; preds = %originalBB1010
  br label %3963, !dbg !1772

3963:                                             ; preds = %originalBBpart21012
  %3964 = load i32, i32* @x.19
  %3965 = load i32, i32* @y.20
  %3966 = sub i32 %3964, 1
  %3967 = mul i32 %3964, %3966
  %3968 = urem i32 %3967, 2
  %3969 = icmp eq i32 %3968, 0
  %3970 = icmp slt i32 %3965, 10
  %3971 = or i1 %3969, %3970
  br i1 %3971, label %originalBB1014, label %originalBB1014alteredBB

originalBB1014:                                   ; preds = %3963, %originalBB1014alteredBB
  %3972 = call i32 @mbsinit(%struct.__mbstate_t* %38) #13, !dbg !1773
  %3973 = icmp ne i32 %3972, 0, !dbg !1774
  %3974 = xor i1 %3973, true, !dbg !1774
  %3975 = load i32, i32* @x.19
  %3976 = load i32, i32* @y.20
  %3977 = sub i32 %3975, 1
  %3978 = mul i32 %3975, %3977
  %3979 = urem i32 %3978, 2
  %3980 = icmp eq i32 %3979, 0
  %3981 = icmp slt i32 %3976, 10
  %3982 = or i1 %3980, %3981
  br i1 %3982, label %originalBBpart21027, label %originalBB1014alteredBB

originalBBpart21027:                              ; preds = %originalBB1014
  br i1 %3974, label %3495, label %3983, !dbg !1772, !llvm.loop !1775

3983:                                             ; preds = %originalBBpart21027, %originalBBpart2939, %originalBBpart2912, %originalBBpart2908
  %3984 = load i32, i32* @x.19
  %3985 = load i32, i32* @y.20
  %3986 = sub i32 %3984, 1
  %3987 = mul i32 %3984, %3986
  %3988 = urem i32 %3987, 2
  %3989 = icmp eq i32 %3988, 0
  %3990 = icmp slt i32 %3985, 10
  %3991 = or i1 %3989, %3990
  br i1 %3991, label %originalBB1029, label %originalBB1029alteredBB

originalBB1029:                                   ; preds = %3983, %originalBB1029alteredBB
  %3992 = load i32, i32* @x.19
  %3993 = load i32, i32* @y.20
  %3994 = sub i32 %3992, 1
  %3995 = mul i32 %3992, %3994
  %3996 = urem i32 %3995, 2
  %3997 = icmp eq i32 %3996, 0
  %3998 = icmp slt i32 %3993, 10
  %3999 = or i1 %3997, %3998
  br i1 %3999, label %originalBBpart21031, label %originalBB1029alteredBB

originalBBpart21031:                              ; preds = %originalBB1029
  br label %4000

4000:                                             ; preds = %originalBBpart21031, %originalBBpart2866
  %4001 = load i32, i32* @x.19
  %4002 = load i32, i32* @y.20
  %4003 = sub i32 %4001, 1
  %4004 = mul i32 %4001, %4003
  %4005 = urem i32 %4004, 2
  %4006 = icmp eq i32 %4005, 0
  %4007 = icmp slt i32 %4002, 10
  %4008 = or i1 %4006, %4007
  br i1 %4008, label %originalBB1033, label %originalBB1033alteredBB

originalBB1033:                                   ; preds = %4000, %originalBB1033alteredBB
  %4009 = load i8, i8* %37, align 1, !dbg !1777
  %4010 = trunc i8 %4009 to i1, !dbg !1777
  %4011 = zext i1 %4010 to i8, !dbg !1778
  store i8 %4011, i8* %35, align 1, !dbg !1778
  %4012 = load i64, i64* %36, align 8, !dbg !1779
  %4013 = icmp ult i64 1, %4012, !dbg !1781
  %4014 = load i32, i32* @x.19
  %4015 = load i32, i32* @y.20
  %4016 = sub i32 %4014, 1
  %4017 = mul i32 %4014, %4016
  %4018 = urem i32 %4017, 2
  %4019 = icmp eq i32 %4018, 0
  %4020 = icmp slt i32 %4015, 10
  %4021 = or i1 %4019, %4020
  br i1 %4021, label %originalBBpart21035, label %originalBB1033alteredBB

originalBBpart21035:                              ; preds = %originalBB1033
  br i1 %4013, label %4060, label %4022, !dbg !1782

4022:                                             ; preds = %originalBBpart21035
  %4023 = load i32, i32* @x.19
  %4024 = load i32, i32* @y.20
  %4025 = sub i32 %4023, 1
  %4026 = mul i32 %4023, %4025
  %4027 = urem i32 %4026, 2
  %4028 = icmp eq i32 %4027, 0
  %4029 = icmp slt i32 %4024, 10
  %4030 = or i1 %4028, %4029
  br i1 %4030, label %originalBB1037, label %originalBB1037alteredBB

originalBB1037:                                   ; preds = %4022, %originalBB1037alteredBB
  %4031 = load i8, i8* %25, align 1, !dbg !1783
  %4032 = trunc i8 %4031 to i1, !dbg !1783
  %4033 = load i32, i32* @x.19
  %4034 = load i32, i32* @y.20
  %4035 = sub i32 %4033, 1
  %4036 = mul i32 %4033, %4035
  %4037 = urem i32 %4036, 2
  %4038 = icmp eq i32 %4037, 0
  %4039 = icmp slt i32 %4034, 10
  %4040 = or i1 %4038, %4039
  br i1 %4040, label %originalBBpart21039, label %originalBB1037alteredBB

originalBBpart21039:                              ; preds = %originalBB1037
  br i1 %4032, label %4041, label %5176, !dbg !1784

4041:                                             ; preds = %originalBBpart21039
  %4042 = load i32, i32* @x.19
  %4043 = load i32, i32* @y.20
  %4044 = sub i32 %4042, 1
  %4045 = mul i32 %4042, %4044
  %4046 = urem i32 %4045, 2
  %4047 = icmp eq i32 %4046, 0
  %4048 = icmp slt i32 %4043, 10
  %4049 = or i1 %4047, %4048
  br i1 %4049, label %originalBB1041, label %originalBB1041alteredBB

originalBB1041:                                   ; preds = %4041, %originalBB1041alteredBB
  %4050 = load i8, i8* %37, align 1, !dbg !1785
  %4051 = trunc i8 %4050 to i1, !dbg !1785
  %4052 = load i32, i32* @x.19
  %4053 = load i32, i32* @y.20
  %4054 = sub i32 %4052, 1
  %4055 = mul i32 %4052, %4054
  %4056 = urem i32 %4055, 2
  %4057 = icmp eq i32 %4056, 0
  %4058 = icmp slt i32 %4053, 10
  %4059 = or i1 %4057, %4058
  br i1 %4059, label %originalBBpart21043, label %originalBB1041alteredBB

originalBBpart21043:                              ; preds = %originalBB1041
  br i1 %4051, label %5176, label %4060, !dbg !1786

4060:                                             ; preds = %originalBBpart21043, %originalBBpart21035
  call void @llvm.dbg.declare(metadata i64* %42, metadata !1787, metadata !DIExpression()), !dbg !1789
  %4061 = load i32, i32* @x.19
  %4062 = load i32, i32* @y.20
  %4063 = sub i32 %4061, 1
  %4064 = mul i32 %4061, %4063
  %4065 = urem i32 %4064, 2
  %4066 = icmp eq i32 %4065, 0
  %4067 = icmp slt i32 %4062, 10
  %4068 = or i1 %4066, %4067
  br i1 %4068, label %originalBB1045, label %originalBB1045alteredBB

originalBB1045:                                   ; preds = %4060, %originalBB1045alteredBB
  %4069 = load i64, i64* %20, align 8, !dbg !1790
  %4070 = load i64, i64* %36, align 8, !dbg !1791
  %4071 = add i64 %4069, %4070, !dbg !1792
  store i64 %4071, i64* %42, align 8, !dbg !1789
  %4072 = load i32, i32* @x.19
  %4073 = load i32, i32* @y.20
  %4074 = sub i32 %4072, 1
  %4075 = mul i32 %4072, %4074
  %4076 = urem i32 %4075, 2
  %4077 = icmp eq i32 %4076, 0
  %4078 = icmp slt i32 %4073, 10
  %4079 = or i1 %4077, %4078
  br i1 %4079, label %originalBBpart21058, label %originalBB1045alteredBB

originalBBpart21058:                              ; preds = %originalBB1045
  br label %4080, !dbg !1793

4080:                                             ; preds = %originalBBpart21402, %originalBBpart21058
  %4081 = load i32, i32* @x.19
  %4082 = load i32, i32* @y.20
  %4083 = sub i32 %4081, 1
  %4084 = mul i32 %4081, %4083
  %4085 = urem i32 %4084, 2
  %4086 = icmp eq i32 %4085, 0
  %4087 = icmp slt i32 %4082, 10
  %4088 = or i1 %4086, %4087
  br i1 %4088, label %originalBB1060, label %originalBB1060alteredBB

originalBB1060:                                   ; preds = %4080, %originalBB1060alteredBB
  %4089 = load i8, i8* %25, align 1, !dbg !1794
  %4090 = trunc i8 %4089 to i1, !dbg !1794
  %4091 = load i32, i32* @x.19
  %4092 = load i32, i32* @y.20
  %4093 = sub i32 %4091, 1
  %4094 = mul i32 %4091, %4093
  %4095 = urem i32 %4094, 2
  %4096 = icmp eq i32 %4095, 0
  %4097 = icmp slt i32 %4092, 10
  %4098 = or i1 %4096, %4097
  br i1 %4098, label %originalBBpart21062, label %originalBB1060alteredBB

originalBBpart21062:                              ; preds = %originalBB1060
  br i1 %4090, label %4099, label %4700, !dbg !1799

4099:                                             ; preds = %originalBBpart21062
  %4100 = load i32, i32* @x.19
  %4101 = load i32, i32* @y.20
  %4102 = sub i32 %4100, 1
  %4103 = mul i32 %4100, %4102
  %4104 = urem i32 %4103, 2
  %4105 = icmp eq i32 %4104, 0
  %4106 = icmp slt i32 %4101, 10
  %4107 = or i1 %4105, %4106
  br i1 %4107, label %originalBB1064, label %originalBB1064alteredBB

originalBB1064:                                   ; preds = %4099, %originalBB1064alteredBB
  %4108 = load i8, i8* %37, align 1, !dbg !1800
  %4109 = trunc i8 %4108 to i1, !dbg !1800
  %4110 = load i32, i32* @x.19
  %4111 = load i32, i32* @y.20
  %4112 = sub i32 %4110, 1
  %4113 = mul i32 %4110, %4112
  %4114 = urem i32 %4113, 2
  %4115 = icmp eq i32 %4114, 0
  %4116 = icmp slt i32 %4111, 10
  %4117 = or i1 %4115, %4116
  br i1 %4117, label %originalBBpart21066, label %originalBB1064alteredBB

originalBBpart21066:                              ; preds = %originalBB1064
  br i1 %4109, label %4700, label %4118, !dbg !1801

4118:                                             ; preds = %originalBBpart21066
  %4119 = load i32, i32* @x.19
  %4120 = load i32, i32* @y.20
  %4121 = sub i32 %4119, 1
  %4122 = mul i32 %4119, %4121
  %4123 = urem i32 %4122, 2
  %4124 = icmp eq i32 %4123, 0
  %4125 = icmp slt i32 %4120, 10
  %4126 = or i1 %4124, %4125
  br i1 %4126, label %originalBB1068, label %originalBB1068alteredBB

originalBB1068:                                   ; preds = %4118, %originalBB1068alteredBB
  %4127 = load i32, i32* @x.19
  %4128 = load i32, i32* @y.20
  %4129 = sub i32 %4127, 1
  %4130 = mul i32 %4127, %4129
  %4131 = urem i32 %4130, 2
  %4132 = icmp eq i32 %4131, 0
  %4133 = icmp slt i32 %4128, 10
  %4134 = or i1 %4132, %4133
  br i1 %4134, label %originalBBpart21070, label %originalBB1068alteredBB

originalBBpart21070:                              ; preds = %originalBB1068
  br label %4135, !dbg !1802

4135:                                             ; preds = %originalBBpart21070
  %4136 = load i32, i32* @x.19
  %4137 = load i32, i32* @y.20
  %4138 = sub i32 %4136, 1
  %4139 = mul i32 %4136, %4138
  %4140 = urem i32 %4139, 2
  %4141 = icmp eq i32 %4140, 0
  %4142 = icmp slt i32 %4137, 10
  %4143 = or i1 %4141, %4142
  br i1 %4143, label %originalBB1072, label %originalBB1072alteredBB

originalBB1072:                                   ; preds = %4135, %originalBB1072alteredBB
  %4144 = load i8, i8* %27, align 1, !dbg !1804
  %4145 = trunc i8 %4144 to i1, !dbg !1804
  %4146 = load i32, i32* @x.19
  %4147 = load i32, i32* @y.20
  %4148 = sub i32 %4146, 1
  %4149 = mul i32 %4146, %4148
  %4150 = urem i32 %4149, 2
  %4151 = icmp eq i32 %4150, 0
  %4152 = icmp slt i32 %4147, 10
  %4153 = or i1 %4151, %4152
  br i1 %4153, label %originalBBpart21074, label %originalBB1072alteredBB

originalBBpart21074:                              ; preds = %originalBB1072
  br i1 %4145, label %4154, label %4171, !dbg !1807

4154:                                             ; preds = %originalBBpart21074
  %4155 = load i32, i32* @x.19
  %4156 = load i32, i32* @y.20
  %4157 = sub i32 %4155, 1
  %4158 = mul i32 %4155, %4157
  %4159 = urem i32 %4158, 2
  %4160 = icmp eq i32 %4159, 0
  %4161 = icmp slt i32 %4156, 10
  %4162 = or i1 %4160, %4161
  br i1 %4162, label %originalBB1076, label %originalBB1076alteredBB

originalBB1076:                                   ; preds = %4154, %originalBB1076alteredBB
  %4163 = load i32, i32* @x.19
  %4164 = load i32, i32* @y.20
  %4165 = sub i32 %4163, 1
  %4166 = mul i32 %4163, %4165
  %4167 = urem i32 %4166, 2
  %4168 = icmp eq i32 %4167, 0
  %4169 = icmp slt i32 %4164, 10
  %4170 = or i1 %4168, %4169
  br i1 %4170, label %originalBBpart21078, label %originalBB1076alteredBB

originalBBpart21078:                              ; preds = %originalBB1076
  br label %6590, !dbg !1804

4171:                                             ; preds = %originalBBpart21074
  %4172 = load i32, i32* @x.19
  %4173 = load i32, i32* @y.20
  %4174 = sub i32 %4172, 1
  %4175 = mul i32 %4172, %4174
  %4176 = urem i32 %4175, 2
  %4177 = icmp eq i32 %4176, 0
  %4178 = icmp slt i32 %4173, 10
  %4179 = or i1 %4177, %4178
  br i1 %4179, label %originalBB1080, label %originalBB1080alteredBB

originalBB1080:                                   ; preds = %4171, %originalBB1080alteredBB
  store i8 1, i8* %34, align 1, !dbg !1807
  %4180 = load i32, i32* %15, align 4, !dbg !1808
  %4181 = icmp eq i32 %4180, 2, !dbg !1808
  %4182 = load i32, i32* @x.19
  %4183 = load i32, i32* @y.20
  %4184 = sub i32 %4182, 1
  %4185 = mul i32 %4182, %4184
  %4186 = urem i32 %4185, 2
  %4187 = icmp eq i32 %4186, 0
  %4188 = icmp slt i32 %4183, 10
  %4189 = or i1 %4187, %4188
  br i1 %4189, label %originalBBpart21082, label %originalBB1080alteredBB

originalBBpart21082:                              ; preds = %originalBB1080
  br i1 %4181, label %4190, label %4454, !dbg !1808

4190:                                             ; preds = %originalBBpart21082
  %4191 = load i32, i32* @x.19
  %4192 = load i32, i32* @y.20
  %4193 = sub i32 %4191, 1
  %4194 = mul i32 %4191, %4193
  %4195 = urem i32 %4194, 2
  %4196 = icmp eq i32 %4195, 0
  %4197 = icmp slt i32 %4192, 10
  %4198 = or i1 %4196, %4197
  br i1 %4198, label %originalBB1084, label %originalBB1084alteredBB

originalBB1084:                                   ; preds = %4190, %originalBB1084alteredBB
  %4199 = load i8, i8* %28, align 1, !dbg !1808
  %4200 = trunc i8 %4199 to i1, !dbg !1808
  %4201 = load i32, i32* @x.19
  %4202 = load i32, i32* @y.20
  %4203 = sub i32 %4201, 1
  %4204 = mul i32 %4201, %4203
  %4205 = urem i32 %4204, 2
  %4206 = icmp eq i32 %4205, 0
  %4207 = icmp slt i32 %4202, 10
  %4208 = or i1 %4206, %4207
  br i1 %4208, label %originalBBpart21086, label %originalBB1084alteredBB

originalBBpart21086:                              ; preds = %originalBB1084
  br i1 %4200, label %4454, label %4209, !dbg !1807

4209:                                             ; preds = %originalBBpart21086
  %4210 = load i32, i32* @x.19
  %4211 = load i32, i32* @y.20
  %4212 = sub i32 %4210, 1
  %4213 = mul i32 %4210, %4212
  %4214 = urem i32 %4213, 2
  %4215 = icmp eq i32 %4214, 0
  %4216 = icmp slt i32 %4211, 10
  %4217 = or i1 %4215, %4216
  br i1 %4217, label %originalBB1088, label %originalBB1088alteredBB

originalBB1088:                                   ; preds = %4209, %originalBB1088alteredBB
  %4218 = load i32, i32* @x.19
  %4219 = load i32, i32* @y.20
  %4220 = sub i32 %4218, 1
  %4221 = mul i32 %4218, %4220
  %4222 = urem i32 %4221, 2
  %4223 = icmp eq i32 %4222, 0
  %4224 = icmp slt i32 %4219, 10
  %4225 = or i1 %4223, %4224
  br i1 %4225, label %originalBBpart21090, label %originalBB1088alteredBB

originalBBpart21090:                              ; preds = %originalBB1088
  br label %4226, !dbg !1810

4226:                                             ; preds = %originalBBpart21090
  %4227 = load i32, i32* @x.19
  %4228 = load i32, i32* @y.20
  %4229 = sub i32 %4227, 1
  %4230 = mul i32 %4227, %4229
  %4231 = urem i32 %4230, 2
  %4232 = icmp eq i32 %4231, 0
  %4233 = icmp slt i32 %4228, 10
  %4234 = or i1 %4232, %4233
  br i1 %4234, label %originalBB1092, label %originalBB1092alteredBB

originalBB1092:                                   ; preds = %4226, %originalBB1092alteredBB
  %4235 = load i64, i64* %21, align 8, !dbg !1812
  %4236 = load i64, i64* %12, align 8, !dbg !1812
  %4237 = icmp ult i64 %4235, %4236, !dbg !1812
  %4238 = load i32, i32* @x.19
  %4239 = load i32, i32* @y.20
  %4240 = sub i32 %4238, 1
  %4241 = mul i32 %4238, %4240
  %4242 = urem i32 %4241, 2
  %4243 = icmp eq i32 %4242, 0
  %4244 = icmp slt i32 %4239, 10
  %4245 = or i1 %4243, %4244
  br i1 %4245, label %originalBBpart21094, label %originalBB1092alteredBB

originalBBpart21094:                              ; preds = %originalBB1092
  br i1 %4237, label %4246, label %4266, !dbg !1815

4246:                                             ; preds = %originalBBpart21094
  %4247 = load i32, i32* @x.19
  %4248 = load i32, i32* @y.20
  %4249 = sub i32 %4247, 1
  %4250 = mul i32 %4247, %4249
  %4251 = urem i32 %4250, 2
  %4252 = icmp eq i32 %4251, 0
  %4253 = icmp slt i32 %4248, 10
  %4254 = or i1 %4252, %4253
  br i1 %4254, label %originalBB1096, label %originalBB1096alteredBB

originalBB1096:                                   ; preds = %4246, %originalBB1096alteredBB
  %4255 = load i8*, i8** %11, align 8, !dbg !1812
  %4256 = load i64, i64* %21, align 8, !dbg !1812
  %4257 = getelementptr inbounds i8, i8* %4255, i64 %4256, !dbg !1812
  store i8 39, i8* %4257, align 1, !dbg !1812
  %4258 = load i32, i32* @x.19
  %4259 = load i32, i32* @y.20
  %4260 = sub i32 %4258, 1
  %4261 = mul i32 %4258, %4260
  %4262 = urem i32 %4261, 2
  %4263 = icmp eq i32 %4262, 0
  %4264 = icmp slt i32 %4259, 10
  %4265 = or i1 %4263, %4264
  br i1 %4265, label %originalBBpart21098, label %originalBB1096alteredBB

originalBBpart21098:                              ; preds = %originalBB1096
  br label %4266, !dbg !1812

4266:                                             ; preds = %originalBBpart21098, %originalBBpart21094
  %4267 = load i32, i32* @x.19
  %4268 = load i32, i32* @y.20
  %4269 = sub i32 %4267, 1
  %4270 = mul i32 %4267, %4269
  %4271 = urem i32 %4270, 2
  %4272 = icmp eq i32 %4271, 0
  %4273 = icmp slt i32 %4268, 10
  %4274 = or i1 %4272, %4273
  br i1 %4274, label %originalBB1100, label %originalBB1100alteredBB

originalBB1100:                                   ; preds = %4266, %originalBB1100alteredBB
  %4275 = load i64, i64* %21, align 8, !dbg !1815
  %4276 = add i64 %4275, 1, !dbg !1815
  store i64 %4276, i64* %21, align 8, !dbg !1815
  %4277 = load i32, i32* @x.19
  %4278 = load i32, i32* @y.20
  %4279 = sub i32 %4277, 1
  %4280 = mul i32 %4277, %4279
  %4281 = urem i32 %4280, 2
  %4282 = icmp eq i32 %4281, 0
  %4283 = icmp slt i32 %4278, 10
  %4284 = or i1 %4282, %4283
  br i1 %4284, label %originalBBpart21117, label %originalBB1100alteredBB

originalBBpart21117:                              ; preds = %originalBB1100
  br label %4285, !dbg !1815

4285:                                             ; preds = %originalBBpart21117
  %4286 = load i32, i32* @x.19
  %4287 = load i32, i32* @y.20
  %4288 = sub i32 %4286, 1
  %4289 = mul i32 %4286, %4288
  %4290 = urem i32 %4289, 2
  %4291 = icmp eq i32 %4290, 0
  %4292 = icmp slt i32 %4287, 10
  %4293 = or i1 %4291, %4292
  br i1 %4293, label %originalBB1119, label %originalBB1119alteredBB

originalBB1119:                                   ; preds = %4285, %originalBB1119alteredBB
  %4294 = load i32, i32* @x.19
  %4295 = load i32, i32* @y.20
  %4296 = sub i32 %4294, 1
  %4297 = mul i32 %4294, %4296
  %4298 = urem i32 %4297, 2
  %4299 = icmp eq i32 %4298, 0
  %4300 = icmp slt i32 %4295, 10
  %4301 = or i1 %4299, %4300
  br i1 %4301, label %originalBBpart21121, label %originalBB1119alteredBB

originalBBpart21121:                              ; preds = %originalBB1119
  br label %4302, !dbg !1810

4302:                                             ; preds = %originalBBpart21121
  %4303 = load i32, i32* @x.19
  %4304 = load i32, i32* @y.20
  %4305 = sub i32 %4303, 1
  %4306 = mul i32 %4303, %4305
  %4307 = urem i32 %4306, 2
  %4308 = icmp eq i32 %4307, 0
  %4309 = icmp slt i32 %4304, 10
  %4310 = or i1 %4308, %4309
  br i1 %4310, label %originalBB1123, label %originalBB1123alteredBB

originalBB1123:                                   ; preds = %4302, %originalBB1123alteredBB
  %4311 = load i64, i64* %21, align 8, !dbg !1816
  %4312 = load i64, i64* %12, align 8, !dbg !1816
  %4313 = icmp ult i64 %4311, %4312, !dbg !1816
  %4314 = load i32, i32* @x.19
  %4315 = load i32, i32* @y.20
  %4316 = sub i32 %4314, 1
  %4317 = mul i32 %4314, %4316
  %4318 = urem i32 %4317, 2
  %4319 = icmp eq i32 %4318, 0
  %4320 = icmp slt i32 %4315, 10
  %4321 = or i1 %4319, %4320
  br i1 %4321, label %originalBBpart21125, label %originalBB1123alteredBB

originalBBpart21125:                              ; preds = %originalBB1123
  br i1 %4313, label %4322, label %4342, !dbg !1819

4322:                                             ; preds = %originalBBpart21125
  %4323 = load i32, i32* @x.19
  %4324 = load i32, i32* @y.20
  %4325 = sub i32 %4323, 1
  %4326 = mul i32 %4323, %4325
  %4327 = urem i32 %4326, 2
  %4328 = icmp eq i32 %4327, 0
  %4329 = icmp slt i32 %4324, 10
  %4330 = or i1 %4328, %4329
  br i1 %4330, label %originalBB1127, label %originalBB1127alteredBB

originalBB1127:                                   ; preds = %4322, %originalBB1127alteredBB
  %4331 = load i8*, i8** %11, align 8, !dbg !1816
  %4332 = load i64, i64* %21, align 8, !dbg !1816
  %4333 = getelementptr inbounds i8, i8* %4331, i64 %4332, !dbg !1816
  store i8 36, i8* %4333, align 1, !dbg !1816
  %4334 = load i32, i32* @x.19
  %4335 = load i32, i32* @y.20
  %4336 = sub i32 %4334, 1
  %4337 = mul i32 %4334, %4336
  %4338 = urem i32 %4337, 2
  %4339 = icmp eq i32 %4338, 0
  %4340 = icmp slt i32 %4335, 10
  %4341 = or i1 %4339, %4340
  br i1 %4341, label %originalBBpart21129, label %originalBB1127alteredBB

originalBBpart21129:                              ; preds = %originalBB1127
  br label %4342, !dbg !1816

4342:                                             ; preds = %originalBBpart21129, %originalBBpart21125
  %4343 = load i32, i32* @x.19
  %4344 = load i32, i32* @y.20
  %4345 = sub i32 %4343, 1
  %4346 = mul i32 %4343, %4345
  %4347 = urem i32 %4346, 2
  %4348 = icmp eq i32 %4347, 0
  %4349 = icmp slt i32 %4344, 10
  %4350 = or i1 %4348, %4349
  br i1 %4350, label %originalBB1131, label %originalBB1131alteredBB

originalBB1131:                                   ; preds = %4342, %originalBB1131alteredBB
  %4351 = load i64, i64* %21, align 8, !dbg !1819
  %4352 = add i64 %4351, 1, !dbg !1819
  store i64 %4352, i64* %21, align 8, !dbg !1819
  %4353 = load i32, i32* @x.19
  %4354 = load i32, i32* @y.20
  %4355 = sub i32 %4353, 1
  %4356 = mul i32 %4353, %4355
  %4357 = urem i32 %4356, 2
  %4358 = icmp eq i32 %4357, 0
  %4359 = icmp slt i32 %4354, 10
  %4360 = or i1 %4358, %4359
  br i1 %4360, label %originalBBpart21137, label %originalBB1131alteredBB

originalBBpart21137:                              ; preds = %originalBB1131
  br label %4361, !dbg !1819

4361:                                             ; preds = %originalBBpart21137
  %4362 = load i32, i32* @x.19
  %4363 = load i32, i32* @y.20
  %4364 = sub i32 %4362, 1
  %4365 = mul i32 %4362, %4364
  %4366 = urem i32 %4365, 2
  %4367 = icmp eq i32 %4366, 0
  %4368 = icmp slt i32 %4363, 10
  %4369 = or i1 %4367, %4368
  br i1 %4369, label %originalBB1139, label %originalBB1139alteredBB

originalBB1139:                                   ; preds = %4361, %originalBB1139alteredBB
  %4370 = load i32, i32* @x.19
  %4371 = load i32, i32* @y.20
  %4372 = sub i32 %4370, 1
  %4373 = mul i32 %4370, %4372
  %4374 = urem i32 %4373, 2
  %4375 = icmp eq i32 %4374, 0
  %4376 = icmp slt i32 %4371, 10
  %4377 = or i1 %4375, %4376
  br i1 %4377, label %originalBBpart21141, label %originalBB1139alteredBB

originalBBpart21141:                              ; preds = %originalBB1139
  br label %4378, !dbg !1810

4378:                                             ; preds = %originalBBpart21141
  %4379 = load i32, i32* @x.19
  %4380 = load i32, i32* @y.20
  %4381 = sub i32 %4379, 1
  %4382 = mul i32 %4379, %4381
  %4383 = urem i32 %4382, 2
  %4384 = icmp eq i32 %4383, 0
  %4385 = icmp slt i32 %4380, 10
  %4386 = or i1 %4384, %4385
  br i1 %4386, label %originalBB1143, label %originalBB1143alteredBB

originalBB1143:                                   ; preds = %4378, %originalBB1143alteredBB
  %4387 = load i64, i64* %21, align 8, !dbg !1820
  %4388 = load i64, i64* %12, align 8, !dbg !1820
  %4389 = icmp ult i64 %4387, %4388, !dbg !1820
  %4390 = load i32, i32* @x.19
  %4391 = load i32, i32* @y.20
  %4392 = sub i32 %4390, 1
  %4393 = mul i32 %4390, %4392
  %4394 = urem i32 %4393, 2
  %4395 = icmp eq i32 %4394, 0
  %4396 = icmp slt i32 %4391, 10
  %4397 = or i1 %4395, %4396
  br i1 %4397, label %originalBBpart21145, label %originalBB1143alteredBB

originalBBpart21145:                              ; preds = %originalBB1143
  br i1 %4389, label %4398, label %4418, !dbg !1823

4398:                                             ; preds = %originalBBpart21145
  %4399 = load i32, i32* @x.19
  %4400 = load i32, i32* @y.20
  %4401 = sub i32 %4399, 1
  %4402 = mul i32 %4399, %4401
  %4403 = urem i32 %4402, 2
  %4404 = icmp eq i32 %4403, 0
  %4405 = icmp slt i32 %4400, 10
  %4406 = or i1 %4404, %4405
  br i1 %4406, label %originalBB1147, label %originalBB1147alteredBB

originalBB1147:                                   ; preds = %4398, %originalBB1147alteredBB
  %4407 = load i8*, i8** %11, align 8, !dbg !1820
  %4408 = load i64, i64* %21, align 8, !dbg !1820
  %4409 = getelementptr inbounds i8, i8* %4407, i64 %4408, !dbg !1820
  store i8 39, i8* %4409, align 1, !dbg !1820
  %4410 = load i32, i32* @x.19
  %4411 = load i32, i32* @y.20
  %4412 = sub i32 %4410, 1
  %4413 = mul i32 %4410, %4412
  %4414 = urem i32 %4413, 2
  %4415 = icmp eq i32 %4414, 0
  %4416 = icmp slt i32 %4411, 10
  %4417 = or i1 %4415, %4416
  br i1 %4417, label %originalBBpart21149, label %originalBB1147alteredBB

originalBBpart21149:                              ; preds = %originalBB1147
  br label %4418, !dbg !1820

4418:                                             ; preds = %originalBBpart21149, %originalBBpart21145
  %4419 = load i32, i32* @x.19
  %4420 = load i32, i32* @y.20
  %4421 = sub i32 %4419, 1
  %4422 = mul i32 %4419, %4421
  %4423 = urem i32 %4422, 2
  %4424 = icmp eq i32 %4423, 0
  %4425 = icmp slt i32 %4420, 10
  %4426 = or i1 %4424, %4425
  br i1 %4426, label %originalBB1151, label %originalBB1151alteredBB

originalBB1151:                                   ; preds = %4418, %originalBB1151alteredBB
  %4427 = load i64, i64* %21, align 8, !dbg !1823
  %4428 = add i64 %4427, 1, !dbg !1823
  store i64 %4428, i64* %21, align 8, !dbg !1823
  %4429 = load i32, i32* @x.19
  %4430 = load i32, i32* @y.20
  %4431 = sub i32 %4429, 1
  %4432 = mul i32 %4429, %4431
  %4433 = urem i32 %4432, 2
  %4434 = icmp eq i32 %4433, 0
  %4435 = icmp slt i32 %4430, 10
  %4436 = or i1 %4434, %4435
  br i1 %4436, label %originalBBpart21156, label %originalBB1151alteredBB

originalBBpart21156:                              ; preds = %originalBB1151
  br label %4437, !dbg !1823

4437:                                             ; preds = %originalBBpart21156
  %4438 = load i32, i32* @x.19
  %4439 = load i32, i32* @y.20
  %4440 = sub i32 %4438, 1
  %4441 = mul i32 %4438, %4440
  %4442 = urem i32 %4441, 2
  %4443 = icmp eq i32 %4442, 0
  %4444 = icmp slt i32 %4439, 10
  %4445 = or i1 %4443, %4444
  br i1 %4445, label %originalBB1158, label %originalBB1158alteredBB

originalBB1158:                                   ; preds = %4437, %originalBB1158alteredBB
  store i8 1, i8* %28, align 1, !dbg !1810
  %4446 = load i32, i32* @x.19
  %4447 = load i32, i32* @y.20
  %4448 = sub i32 %4446, 1
  %4449 = mul i32 %4446, %4448
  %4450 = urem i32 %4449, 2
  %4451 = icmp eq i32 %4450, 0
  %4452 = icmp slt i32 %4447, 10
  %4453 = or i1 %4451, %4452
  br i1 %4453, label %originalBBpart21160, label %originalBB1158alteredBB

originalBBpart21160:                              ; preds = %originalBB1158
  br label %4454, !dbg !1810

4454:                                             ; preds = %originalBBpart21160, %originalBBpart21086, %originalBBpart21082
  br label %4455, !dbg !1807

4455:                                             ; preds = %4454
  %4456 = load i32, i32* @x.19
  %4457 = load i32, i32* @y.20
  %4458 = sub i32 %4456, 1
  %4459 = mul i32 %4456, %4458
  %4460 = urem i32 %4459, 2
  %4461 = icmp eq i32 %4460, 0
  %4462 = icmp slt i32 %4457, 10
  %4463 = or i1 %4461, %4462
  br i1 %4463, label %originalBB1162, label %originalBB1162alteredBB

originalBB1162:                                   ; preds = %4455, %originalBB1162alteredBB
  %4464 = load i64, i64* %21, align 8, !dbg !1824
  %4465 = load i64, i64* %12, align 8, !dbg !1824
  %4466 = icmp ult i64 %4464, %4465, !dbg !1824
  %4467 = load i32, i32* @x.19
  %4468 = load i32, i32* @y.20
  %4469 = sub i32 %4467, 1
  %4470 = mul i32 %4467, %4469
  %4471 = urem i32 %4470, 2
  %4472 = icmp eq i32 %4471, 0
  %4473 = icmp slt i32 %4468, 10
  %4474 = or i1 %4472, %4473
  br i1 %4474, label %originalBBpart21164, label %originalBB1162alteredBB

originalBBpart21164:                              ; preds = %originalBB1162
  br i1 %4466, label %4475, label %4495, !dbg !1827

4475:                                             ; preds = %originalBBpart21164
  %4476 = load i32, i32* @x.19
  %4477 = load i32, i32* @y.20
  %4478 = sub i32 %4476, 1
  %4479 = mul i32 %4476, %4478
  %4480 = urem i32 %4479, 2
  %4481 = icmp eq i32 %4480, 0
  %4482 = icmp slt i32 %4477, 10
  %4483 = or i1 %4481, %4482
  br i1 %4483, label %originalBB1166, label %originalBB1166alteredBB

originalBB1166:                                   ; preds = %4475, %originalBB1166alteredBB
  %4484 = load i8*, i8** %11, align 8, !dbg !1824
  %4485 = load i64, i64* %21, align 8, !dbg !1824
  %4486 = getelementptr inbounds i8, i8* %4484, i64 %4485, !dbg !1824
  store i8 92, i8* %4486, align 1, !dbg !1824
  %4487 = load i32, i32* @x.19
  %4488 = load i32, i32* @y.20
  %4489 = sub i32 %4487, 1
  %4490 = mul i32 %4487, %4489
  %4491 = urem i32 %4490, 2
  %4492 = icmp eq i32 %4491, 0
  %4493 = icmp slt i32 %4488, 10
  %4494 = or i1 %4492, %4493
  br i1 %4494, label %originalBBpart21168, label %originalBB1166alteredBB

originalBBpart21168:                              ; preds = %originalBB1166
  br label %4495, !dbg !1824

4495:                                             ; preds = %originalBBpart21168, %originalBBpart21164
  %4496 = load i32, i32* @x.19
  %4497 = load i32, i32* @y.20
  %4498 = sub i32 %4496, 1
  %4499 = mul i32 %4496, %4498
  %4500 = urem i32 %4499, 2
  %4501 = icmp eq i32 %4500, 0
  %4502 = icmp slt i32 %4497, 10
  %4503 = or i1 %4501, %4502
  br i1 %4503, label %originalBB1170, label %originalBB1170alteredBB

originalBB1170:                                   ; preds = %4495, %originalBB1170alteredBB
  %4504 = load i64, i64* %21, align 8, !dbg !1827
  %4505 = add i64 %4504, 1, !dbg !1827
  store i64 %4505, i64* %21, align 8, !dbg !1827
  %4506 = load i32, i32* @x.19
  %4507 = load i32, i32* @y.20
  %4508 = sub i32 %4506, 1
  %4509 = mul i32 %4506, %4508
  %4510 = urem i32 %4509, 2
  %4511 = icmp eq i32 %4510, 0
  %4512 = icmp slt i32 %4507, 10
  %4513 = or i1 %4511, %4512
  br i1 %4513, label %originalBBpart21185, label %originalBB1170alteredBB

originalBBpart21185:                              ; preds = %originalBB1170
  br label %4514, !dbg !1827

4514:                                             ; preds = %originalBBpart21185
  %4515 = load i32, i32* @x.19
  %4516 = load i32, i32* @y.20
  %4517 = sub i32 %4515, 1
  %4518 = mul i32 %4515, %4517
  %4519 = urem i32 %4518, 2
  %4520 = icmp eq i32 %4519, 0
  %4521 = icmp slt i32 %4516, 10
  %4522 = or i1 %4520, %4521
  br i1 %4522, label %originalBB1187, label %originalBB1187alteredBB

originalBB1187:                                   ; preds = %4514, %originalBB1187alteredBB
  %4523 = load i32, i32* @x.19
  %4524 = load i32, i32* @y.20
  %4525 = sub i32 %4523, 1
  %4526 = mul i32 %4523, %4525
  %4527 = urem i32 %4526, 2
  %4528 = icmp eq i32 %4527, 0
  %4529 = icmp slt i32 %4524, 10
  %4530 = or i1 %4528, %4529
  br i1 %4530, label %originalBBpart21189, label %originalBB1187alteredBB

originalBBpart21189:                              ; preds = %originalBB1187
  br label %4531, !dbg !1807

4531:                                             ; preds = %originalBBpart21189
  %4532 = load i32, i32* @x.19
  %4533 = load i32, i32* @y.20
  %4534 = sub i32 %4532, 1
  %4535 = mul i32 %4532, %4534
  %4536 = urem i32 %4535, 2
  %4537 = icmp eq i32 %4536, 0
  %4538 = icmp slt i32 %4533, 10
  %4539 = or i1 %4537, %4538
  br i1 %4539, label %originalBB1191, label %originalBB1191alteredBB

originalBB1191:                                   ; preds = %4531, %originalBB1191alteredBB
  %4540 = load i32, i32* @x.19
  %4541 = load i32, i32* @y.20
  %4542 = sub i32 %4540, 1
  %4543 = mul i32 %4540, %4542
  %4544 = urem i32 %4543, 2
  %4545 = icmp eq i32 %4544, 0
  %4546 = icmp slt i32 %4541, 10
  %4547 = or i1 %4545, %4546
  br i1 %4547, label %originalBBpart21193, label %originalBB1191alteredBB

originalBBpart21193:                              ; preds = %originalBB1191
  br label %4548, !dbg !1828

4548:                                             ; preds = %originalBBpart21193
  %4549 = load i32, i32* @x.19
  %4550 = load i32, i32* @y.20
  %4551 = sub i32 %4549, 1
  %4552 = mul i32 %4549, %4551
  %4553 = urem i32 %4552, 2
  %4554 = icmp eq i32 %4553, 0
  %4555 = icmp slt i32 %4550, 10
  %4556 = or i1 %4554, %4555
  br i1 %4556, label %originalBB1195, label %originalBB1195alteredBB

originalBB1195:                                   ; preds = %4548, %originalBB1195alteredBB
  %4557 = load i64, i64* %21, align 8, !dbg !1829
  %4558 = load i64, i64* %12, align 8, !dbg !1829
  %4559 = icmp ult i64 %4557, %4558, !dbg !1829
  %4560 = load i32, i32* @x.19
  %4561 = load i32, i32* @y.20
  %4562 = sub i32 %4560, 1
  %4563 = mul i32 %4560, %4562
  %4564 = urem i32 %4563, 2
  %4565 = icmp eq i32 %4564, 0
  %4566 = icmp slt i32 %4561, 10
  %4567 = or i1 %4565, %4566
  br i1 %4567, label %originalBBpart21197, label %originalBB1195alteredBB

originalBBpart21197:                              ; preds = %originalBB1195
  br i1 %4559, label %4568, label %4593, !dbg !1832

4568:                                             ; preds = %originalBBpart21197
  %4569 = load i32, i32* @x.19
  %4570 = load i32, i32* @y.20
  %4571 = sub i32 %4569, 1
  %4572 = mul i32 %4569, %4571
  %4573 = urem i32 %4572, 2
  %4574 = icmp eq i32 %4573, 0
  %4575 = icmp slt i32 %4570, 10
  %4576 = or i1 %4574, %4575
  br i1 %4576, label %originalBB1199, label %originalBB1199alteredBB

originalBB1199:                                   ; preds = %4568, %originalBB1199alteredBB
  %4577 = load i8, i8* %31, align 1, !dbg !1829
  %4578 = zext i8 %4577 to i32, !dbg !1829
  %4579 = ashr i32 %4578, 6, !dbg !1829
  %4580 = add nsw i32 48, %4579, !dbg !1829
  %4581 = trunc i32 %4580 to i8, !dbg !1829
  %4582 = load i8*, i8** %11, align 8, !dbg !1829
  %4583 = load i64, i64* %21, align 8, !dbg !1829
  %4584 = getelementptr inbounds i8, i8* %4582, i64 %4583, !dbg !1829
  store i8 %4581, i8* %4584, align 1, !dbg !1829
  %4585 = load i32, i32* @x.19
  %4586 = load i32, i32* @y.20
  %4587 = sub i32 %4585, 1
  %4588 = mul i32 %4585, %4587
  %4589 = urem i32 %4588, 2
  %4590 = icmp eq i32 %4589, 0
  %4591 = icmp slt i32 %4586, 10
  %4592 = or i1 %4590, %4591
  br i1 %4592, label %originalBBpart21208, label %originalBB1199alteredBB

originalBBpart21208:                              ; preds = %originalBB1199
  br label %4593, !dbg !1829

4593:                                             ; preds = %originalBBpart21208, %originalBBpart21197
  %4594 = load i64, i64* %21, align 8, !dbg !1832
  %4595 = add i64 %4594, 1, !dbg !1832
  store i64 %4595, i64* %21, align 8, !dbg !1832
  br label %4596, !dbg !1832

4596:                                             ; preds = %4593
  %4597 = load i32, i32* @x.19
  %4598 = load i32, i32* @y.20
  %4599 = sub i32 %4597, 1
  %4600 = mul i32 %4597, %4599
  %4601 = urem i32 %4600, 2
  %4602 = icmp eq i32 %4601, 0
  %4603 = icmp slt i32 %4598, 10
  %4604 = or i1 %4602, %4603
  br i1 %4604, label %originalBB1210, label %originalBB1210alteredBB

originalBB1210:                                   ; preds = %4596, %originalBB1210alteredBB
  %4605 = load i32, i32* @x.19
  %4606 = load i32, i32* @y.20
  %4607 = sub i32 %4605, 1
  %4608 = mul i32 %4605, %4607
  %4609 = urem i32 %4608, 2
  %4610 = icmp eq i32 %4609, 0
  %4611 = icmp slt i32 %4606, 10
  %4612 = or i1 %4610, %4611
  br i1 %4612, label %originalBBpart21212, label %originalBB1210alteredBB

originalBBpart21212:                              ; preds = %originalBB1210
  br label %4613, !dbg !1833

4613:                                             ; preds = %originalBBpart21212
  %4614 = load i32, i32* @x.19
  %4615 = load i32, i32* @y.20
  %4616 = sub i32 %4614, 1
  %4617 = mul i32 %4614, %4616
  %4618 = urem i32 %4617, 2
  %4619 = icmp eq i32 %4618, 0
  %4620 = icmp slt i32 %4615, 10
  %4621 = or i1 %4619, %4620
  br i1 %4621, label %originalBB1214, label %originalBB1214alteredBB

originalBB1214:                                   ; preds = %4613, %originalBB1214alteredBB
  %4622 = load i64, i64* %21, align 8, !dbg !1834
  %4623 = load i64, i64* %12, align 8, !dbg !1834
  %4624 = icmp ult i64 %4622, %4623, !dbg !1834
  %4625 = load i32, i32* @x.19
  %4626 = load i32, i32* @y.20
  %4627 = sub i32 %4625, 1
  %4628 = mul i32 %4625, %4627
  %4629 = urem i32 %4628, 2
  %4630 = icmp eq i32 %4629, 0
  %4631 = icmp slt i32 %4626, 10
  %4632 = or i1 %4630, %4631
  br i1 %4632, label %originalBBpart21216, label %originalBB1214alteredBB

originalBBpart21216:                              ; preds = %originalBB1214
  br i1 %4624, label %4633, label %4659, !dbg !1837

4633:                                             ; preds = %originalBBpart21216
  %4634 = load i32, i32* @x.19
  %4635 = load i32, i32* @y.20
  %4636 = sub i32 %4634, 1
  %4637 = mul i32 %4634, %4636
  %4638 = urem i32 %4637, 2
  %4639 = icmp eq i32 %4638, 0
  %4640 = icmp slt i32 %4635, 10
  %4641 = or i1 %4639, %4640
  br i1 %4641, label %originalBB1218, label %originalBB1218alteredBB

originalBB1218:                                   ; preds = %4633, %originalBB1218alteredBB
  %4642 = load i8, i8* %31, align 1, !dbg !1834
  %4643 = zext i8 %4642 to i32, !dbg !1834
  %4644 = ashr i32 %4643, 3, !dbg !1834
  %4645 = and i32 %4644, 7, !dbg !1834
  %4646 = add nsw i32 48, %4645, !dbg !1834
  %4647 = trunc i32 %4646 to i8, !dbg !1834
  %4648 = load i8*, i8** %11, align 8, !dbg !1834
  %4649 = load i64, i64* %21, align 8, !dbg !1834
  %4650 = getelementptr inbounds i8, i8* %4648, i64 %4649, !dbg !1834
  store i8 %4647, i8* %4650, align 1, !dbg !1834
  %4651 = load i32, i32* @x.19
  %4652 = load i32, i32* @y.20
  %4653 = sub i32 %4651, 1
  %4654 = mul i32 %4651, %4653
  %4655 = urem i32 %4654, 2
  %4656 = icmp eq i32 %4655, 0
  %4657 = icmp slt i32 %4652, 10
  %4658 = or i1 %4656, %4657
  br i1 %4658, label %originalBBpart21239, label %originalBB1218alteredBB

originalBBpart21239:                              ; preds = %originalBB1218
  br label %4659, !dbg !1834

4659:                                             ; preds = %originalBBpart21239, %originalBBpart21216
  %4660 = load i32, i32* @x.19
  %4661 = load i32, i32* @y.20
  %4662 = sub i32 %4660, 1
  %4663 = mul i32 %4660, %4662
  %4664 = urem i32 %4663, 2
  %4665 = icmp eq i32 %4664, 0
  %4666 = icmp slt i32 %4661, 10
  %4667 = or i1 %4665, %4666
  br i1 %4667, label %originalBB1241, label %originalBB1241alteredBB

originalBB1241:                                   ; preds = %4659, %originalBB1241alteredBB
  %4668 = load i64, i64* %21, align 8, !dbg !1837
  %4669 = add i64 %4668, 1, !dbg !1837
  store i64 %4669, i64* %21, align 8, !dbg !1837
  %4670 = load i32, i32* @x.19
  %4671 = load i32, i32* @y.20
  %4672 = sub i32 %4670, 1
  %4673 = mul i32 %4670, %4672
  %4674 = urem i32 %4673, 2
  %4675 = icmp eq i32 %4674, 0
  %4676 = icmp slt i32 %4671, 10
  %4677 = or i1 %4675, %4676
  br i1 %4677, label %originalBBpart21255, label %originalBB1241alteredBB

originalBBpart21255:                              ; preds = %originalBB1241
  br label %4678, !dbg !1837

4678:                                             ; preds = %originalBBpart21255
  %4679 = load i32, i32* @x.19
  %4680 = load i32, i32* @y.20
  %4681 = sub i32 %4679, 1
  %4682 = mul i32 %4679, %4681
  %4683 = urem i32 %4682, 2
  %4684 = icmp eq i32 %4683, 0
  %4685 = icmp slt i32 %4680, 10
  %4686 = or i1 %4684, %4685
  br i1 %4686, label %originalBB1257, label %originalBB1257alteredBB

originalBB1257:                                   ; preds = %4678, %originalBB1257alteredBB
  %4687 = load i8, i8* %31, align 1, !dbg !1838
  %4688 = zext i8 %4687 to i32, !dbg !1838
  %4689 = and i32 %4688, 7, !dbg !1839
  %4690 = add nsw i32 48, %4689, !dbg !1840
  %4691 = trunc i32 %4690 to i8, !dbg !1841
  store i8 %4691, i8* %31, align 1, !dbg !1842
  %4692 = load i32, i32* @x.19
  %4693 = load i32, i32* @y.20
  %4694 = sub i32 %4692, 1
  %4695 = mul i32 %4692, %4694
  %4696 = urem i32 %4695, 2
  %4697 = icmp eq i32 %4696, 0
  %4698 = icmp slt i32 %4693, 10
  %4699 = or i1 %4697, %4698
  br i1 %4699, label %originalBBpart21282, label %originalBB1257alteredBB

originalBBpart21282:                              ; preds = %originalBB1257
  br label %4813, !dbg !1843

4700:                                             ; preds = %originalBBpart21066, %originalBBpart21062
  %4701 = load i8, i8* %33, align 1, !dbg !1844
  %4702 = trunc i8 %4701 to i1, !dbg !1844
  br i1 %4702, label %4703, label %4796, !dbg !1846

4703:                                             ; preds = %4700
  %4704 = load i32, i32* @x.19
  %4705 = load i32, i32* @y.20
  %4706 = sub i32 %4704, 1
  %4707 = mul i32 %4704, %4706
  %4708 = urem i32 %4707, 2
  %4709 = icmp eq i32 %4708, 0
  %4710 = icmp slt i32 %4705, 10
  %4711 = or i1 %4709, %4710
  br i1 %4711, label %originalBB1284, label %originalBB1284alteredBB

originalBB1284:                                   ; preds = %4703, %originalBB1284alteredBB
  %4712 = load i32, i32* @x.19
  %4713 = load i32, i32* @y.20
  %4714 = sub i32 %4712, 1
  %4715 = mul i32 %4712, %4714
  %4716 = urem i32 %4715, 2
  %4717 = icmp eq i32 %4716, 0
  %4718 = icmp slt i32 %4713, 10
  %4719 = or i1 %4717, %4718
  br i1 %4719, label %originalBBpart21286, label %originalBB1284alteredBB

originalBBpart21286:                              ; preds = %originalBB1284
  br label %4720, !dbg !1847

4720:                                             ; preds = %originalBBpart21286
  %4721 = load i32, i32* @x.19
  %4722 = load i32, i32* @y.20
  %4723 = sub i32 %4721, 1
  %4724 = mul i32 %4721, %4723
  %4725 = urem i32 %4724, 2
  %4726 = icmp eq i32 %4725, 0
  %4727 = icmp slt i32 %4722, 10
  %4728 = or i1 %4726, %4727
  br i1 %4728, label %originalBB1288, label %originalBB1288alteredBB

originalBB1288:                                   ; preds = %4720, %originalBB1288alteredBB
  %4729 = load i64, i64* %21, align 8, !dbg !1849
  %4730 = load i64, i64* %12, align 8, !dbg !1849
  %4731 = icmp ult i64 %4729, %4730, !dbg !1849
  %4732 = load i32, i32* @x.19
  %4733 = load i32, i32* @y.20
  %4734 = sub i32 %4732, 1
  %4735 = mul i32 %4732, %4734
  %4736 = urem i32 %4735, 2
  %4737 = icmp eq i32 %4736, 0
  %4738 = icmp slt i32 %4733, 10
  %4739 = or i1 %4737, %4738
  br i1 %4739, label %originalBBpart21290, label %originalBB1288alteredBB

originalBBpart21290:                              ; preds = %originalBB1288
  br i1 %4731, label %4740, label %4760, !dbg !1852

4740:                                             ; preds = %originalBBpart21290
  %4741 = load i32, i32* @x.19
  %4742 = load i32, i32* @y.20
  %4743 = sub i32 %4741, 1
  %4744 = mul i32 %4741, %4743
  %4745 = urem i32 %4744, 2
  %4746 = icmp eq i32 %4745, 0
  %4747 = icmp slt i32 %4742, 10
  %4748 = or i1 %4746, %4747
  br i1 %4748, label %originalBB1292, label %originalBB1292alteredBB

originalBB1292:                                   ; preds = %4740, %originalBB1292alteredBB
  %4749 = load i8*, i8** %11, align 8, !dbg !1849
  %4750 = load i64, i64* %21, align 8, !dbg !1849
  %4751 = getelementptr inbounds i8, i8* %4749, i64 %4750, !dbg !1849
  store i8 92, i8* %4751, align 1, !dbg !1849
  %4752 = load i32, i32* @x.19
  %4753 = load i32, i32* @y.20
  %4754 = sub i32 %4752, 1
  %4755 = mul i32 %4752, %4754
  %4756 = urem i32 %4755, 2
  %4757 = icmp eq i32 %4756, 0
  %4758 = icmp slt i32 %4753, 10
  %4759 = or i1 %4757, %4758
  br i1 %4759, label %originalBBpart21294, label %originalBB1292alteredBB

originalBBpart21294:                              ; preds = %originalBB1292
  br label %4760, !dbg !1849

4760:                                             ; preds = %originalBBpart21294, %originalBBpart21290
  %4761 = load i32, i32* @x.19
  %4762 = load i32, i32* @y.20
  %4763 = sub i32 %4761, 1
  %4764 = mul i32 %4761, %4763
  %4765 = urem i32 %4764, 2
  %4766 = icmp eq i32 %4765, 0
  %4767 = icmp slt i32 %4762, 10
  %4768 = or i1 %4766, %4767
  br i1 %4768, label %originalBB1296, label %originalBB1296alteredBB

originalBB1296:                                   ; preds = %4760, %originalBB1296alteredBB
  %4769 = load i64, i64* %21, align 8, !dbg !1852
  %4770 = add i64 %4769, 1, !dbg !1852
  store i64 %4770, i64* %21, align 8, !dbg !1852
  %4771 = load i32, i32* @x.19
  %4772 = load i32, i32* @y.20
  %4773 = sub i32 %4771, 1
  %4774 = mul i32 %4771, %4773
  %4775 = urem i32 %4774, 2
  %4776 = icmp eq i32 %4775, 0
  %4777 = icmp slt i32 %4772, 10
  %4778 = or i1 %4776, %4777
  br i1 %4778, label %originalBBpart21305, label %originalBB1296alteredBB

originalBBpart21305:                              ; preds = %originalBB1296
  br label %4779, !dbg !1852

4779:                                             ; preds = %originalBBpart21305
  %4780 = load i32, i32* @x.19
  %4781 = load i32, i32* @y.20
  %4782 = sub i32 %4780, 1
  %4783 = mul i32 %4780, %4782
  %4784 = urem i32 %4783, 2
  %4785 = icmp eq i32 %4784, 0
  %4786 = icmp slt i32 %4781, 10
  %4787 = or i1 %4785, %4786
  br i1 %4787, label %originalBB1307, label %originalBB1307alteredBB

originalBB1307:                                   ; preds = %4779, %originalBB1307alteredBB
  store i8 0, i8* %33, align 1, !dbg !1853
  %4788 = load i32, i32* @x.19
  %4789 = load i32, i32* @y.20
  %4790 = sub i32 %4788, 1
  %4791 = mul i32 %4788, %4790
  %4792 = urem i32 %4791, 2
  %4793 = icmp eq i32 %4792, 0
  %4794 = icmp slt i32 %4789, 10
  %4795 = or i1 %4793, %4794
  br i1 %4795, label %originalBBpart21309, label %originalBB1307alteredBB

originalBBpart21309:                              ; preds = %originalBB1307
  br label %4796, !dbg !1854

4796:                                             ; preds = %originalBBpart21309, %4700
  %4797 = load i32, i32* @x.19
  %4798 = load i32, i32* @y.20
  %4799 = sub i32 %4797, 1
  %4800 = mul i32 %4797, %4799
  %4801 = urem i32 %4800, 2
  %4802 = icmp eq i32 %4801, 0
  %4803 = icmp slt i32 %4798, 10
  %4804 = or i1 %4802, %4803
  br i1 %4804, label %originalBB1311, label %originalBB1311alteredBB

originalBB1311:                                   ; preds = %4796, %originalBB1311alteredBB
  %4805 = load i32, i32* @x.19
  %4806 = load i32, i32* @y.20
  %4807 = sub i32 %4805, 1
  %4808 = mul i32 %4805, %4807
  %4809 = urem i32 %4808, 2
  %4810 = icmp eq i32 %4809, 0
  %4811 = icmp slt i32 %4806, 10
  %4812 = or i1 %4810, %4811
  br i1 %4812, label %originalBBpart21313, label %originalBB1311alteredBB

originalBBpart21313:                              ; preds = %originalBB1311
  br label %4813

4813:                                             ; preds = %originalBBpart21313, %originalBBpart21282
  %4814 = load i32, i32* @x.19
  %4815 = load i32, i32* @y.20
  %4816 = sub i32 %4814, 1
  %4817 = mul i32 %4814, %4816
  %4818 = urem i32 %4817, 2
  %4819 = icmp eq i32 %4818, 0
  %4820 = icmp slt i32 %4815, 10
  %4821 = or i1 %4819, %4820
  br i1 %4821, label %originalBB1315, label %originalBB1315alteredBB

originalBB1315:                                   ; preds = %4813, %originalBB1315alteredBB
  %4822 = load i64, i64* %42, align 8, !dbg !1855
  %4823 = load i64, i64* %20, align 8, !dbg !1857
  %4824 = add i64 %4823, 1, !dbg !1858
  %4825 = icmp ule i64 %4822, %4824, !dbg !1859
  %4826 = load i32, i32* @x.19
  %4827 = load i32, i32* @y.20
  %4828 = sub i32 %4826, 1
  %4829 = mul i32 %4826, %4828
  %4830 = urem i32 %4829, 2
  %4831 = icmp eq i32 %4830, 0
  %4832 = icmp slt i32 %4827, 10
  %4833 = or i1 %4831, %4832
  br i1 %4833, label %originalBBpart21325, label %originalBB1315alteredBB

originalBBpart21325:                              ; preds = %originalBB1315
  br i1 %4825, label %4834, label %4851, !dbg !1860

4834:                                             ; preds = %originalBBpart21325
  %4835 = load i32, i32* @x.19
  %4836 = load i32, i32* @y.20
  %4837 = sub i32 %4835, 1
  %4838 = mul i32 %4835, %4837
  %4839 = urem i32 %4838, 2
  %4840 = icmp eq i32 %4839, 0
  %4841 = icmp slt i32 %4836, 10
  %4842 = or i1 %4840, %4841
  br i1 %4842, label %originalBB1327, label %originalBB1327alteredBB

originalBB1327:                                   ; preds = %4834, %originalBB1327alteredBB
  %4843 = load i32, i32* @x.19
  %4844 = load i32, i32* @y.20
  %4845 = sub i32 %4843, 1
  %4846 = mul i32 %4843, %4845
  %4847 = urem i32 %4846, 2
  %4848 = icmp eq i32 %4847, 0
  %4849 = icmp slt i32 %4844, 10
  %4850 = or i1 %4848, %4849
  br i1 %4850, label %originalBBpart21329, label %originalBB1327alteredBB

originalBBpart21329:                              ; preds = %originalBB1327
  br label %5159, !dbg !1861

4851:                                             ; preds = %originalBBpart21325
  %4852 = load i32, i32* @x.19
  %4853 = load i32, i32* @y.20
  %4854 = sub i32 %4852, 1
  %4855 = mul i32 %4852, %4854
  %4856 = urem i32 %4855, 2
  %4857 = icmp eq i32 %4856, 0
  %4858 = icmp slt i32 %4853, 10
  %4859 = or i1 %4857, %4858
  br i1 %4859, label %originalBB1331, label %originalBB1331alteredBB

originalBB1331:                                   ; preds = %4851, %originalBB1331alteredBB
  %4860 = load i32, i32* @x.19
  %4861 = load i32, i32* @y.20
  %4862 = sub i32 %4860, 1
  %4863 = mul i32 %4860, %4862
  %4864 = urem i32 %4863, 2
  %4865 = icmp eq i32 %4864, 0
  %4866 = icmp slt i32 %4861, 10
  %4867 = or i1 %4865, %4866
  br i1 %4867, label %originalBBpart21333, label %originalBB1331alteredBB

originalBBpart21333:                              ; preds = %originalBB1331
  br label %4868, !dbg !1862

4868:                                             ; preds = %originalBBpart21333
  %4869 = load i32, i32* @x.19
  %4870 = load i32, i32* @y.20
  %4871 = sub i32 %4869, 1
  %4872 = mul i32 %4869, %4871
  %4873 = urem i32 %4872, 2
  %4874 = icmp eq i32 %4873, 0
  %4875 = icmp slt i32 %4870, 10
  %4876 = or i1 %4874, %4875
  br i1 %4876, label %originalBB1335, label %originalBB1335alteredBB

originalBB1335:                                   ; preds = %4868, %originalBB1335alteredBB
  %4877 = load i8, i8* %28, align 1, !dbg !1863
  %4878 = trunc i8 %4877 to i1, !dbg !1863
  %4879 = load i32, i32* @x.19
  %4880 = load i32, i32* @y.20
  %4881 = sub i32 %4879, 1
  %4882 = mul i32 %4879, %4881
  %4883 = urem i32 %4882, 2
  %4884 = icmp eq i32 %4883, 0
  %4885 = icmp slt i32 %4880, 10
  %4886 = or i1 %4884, %4885
  br i1 %4886, label %originalBBpart21337, label %originalBB1335alteredBB

originalBBpart21337:                              ; preds = %originalBB1335
  br i1 %4878, label %4887, label %5059, !dbg !1863

4887:                                             ; preds = %originalBBpart21337
  %4888 = load i32, i32* @x.19
  %4889 = load i32, i32* @y.20
  %4890 = sub i32 %4888, 1
  %4891 = mul i32 %4888, %4890
  %4892 = urem i32 %4891, 2
  %4893 = icmp eq i32 %4892, 0
  %4894 = icmp slt i32 %4889, 10
  %4895 = or i1 %4893, %4894
  br i1 %4895, label %originalBB1339, label %originalBB1339alteredBB

originalBB1339:                                   ; preds = %4887, %originalBB1339alteredBB
  %4896 = load i8, i8* %34, align 1, !dbg !1863
  %4897 = trunc i8 %4896 to i1, !dbg !1863
  %4898 = load i32, i32* @x.19
  %4899 = load i32, i32* @y.20
  %4900 = sub i32 %4898, 1
  %4901 = mul i32 %4898, %4900
  %4902 = urem i32 %4901, 2
  %4903 = icmp eq i32 %4902, 0
  %4904 = icmp slt i32 %4899, 10
  %4905 = or i1 %4903, %4904
  br i1 %4905, label %originalBBpart21341, label %originalBB1339alteredBB

originalBBpart21341:                              ; preds = %originalBB1339
  br i1 %4897, label %5059, label %4906, !dbg !1866

4906:                                             ; preds = %originalBBpart21341
  br label %4907, !dbg !1867

4907:                                             ; preds = %4906
  %4908 = load i32, i32* @x.19
  %4909 = load i32, i32* @y.20
  %4910 = sub i32 %4908, 1
  %4911 = mul i32 %4908, %4910
  %4912 = urem i32 %4911, 2
  %4913 = icmp eq i32 %4912, 0
  %4914 = icmp slt i32 %4909, 10
  %4915 = or i1 %4913, %4914
  br i1 %4915, label %originalBB1343, label %originalBB1343alteredBB

originalBB1343:                                   ; preds = %4907, %originalBB1343alteredBB
  %4916 = load i64, i64* %21, align 8, !dbg !1869
  %4917 = load i64, i64* %12, align 8, !dbg !1869
  %4918 = icmp ult i64 %4916, %4917, !dbg !1869
  %4919 = load i32, i32* @x.19
  %4920 = load i32, i32* @y.20
  %4921 = sub i32 %4919, 1
  %4922 = mul i32 %4919, %4921
  %4923 = urem i32 %4922, 2
  %4924 = icmp eq i32 %4923, 0
  %4925 = icmp slt i32 %4920, 10
  %4926 = or i1 %4924, %4925
  br i1 %4926, label %originalBBpart21345, label %originalBB1343alteredBB

originalBBpart21345:                              ; preds = %originalBB1343
  br i1 %4918, label %4927, label %4947, !dbg !1872

4927:                                             ; preds = %originalBBpart21345
  %4928 = load i32, i32* @x.19
  %4929 = load i32, i32* @y.20
  %4930 = sub i32 %4928, 1
  %4931 = mul i32 %4928, %4930
  %4932 = urem i32 %4931, 2
  %4933 = icmp eq i32 %4932, 0
  %4934 = icmp slt i32 %4929, 10
  %4935 = or i1 %4933, %4934
  br i1 %4935, label %originalBB1347, label %originalBB1347alteredBB

originalBB1347:                                   ; preds = %4927, %originalBB1347alteredBB
  %4936 = load i8*, i8** %11, align 8, !dbg !1869
  %4937 = load i64, i64* %21, align 8, !dbg !1869
  %4938 = getelementptr inbounds i8, i8* %4936, i64 %4937, !dbg !1869
  store i8 39, i8* %4938, align 1, !dbg !1869
  %4939 = load i32, i32* @x.19
  %4940 = load i32, i32* @y.20
  %4941 = sub i32 %4939, 1
  %4942 = mul i32 %4939, %4941
  %4943 = urem i32 %4942, 2
  %4944 = icmp eq i32 %4943, 0
  %4945 = icmp slt i32 %4940, 10
  %4946 = or i1 %4944, %4945
  br i1 %4946, label %originalBBpart21349, label %originalBB1347alteredBB

originalBBpart21349:                              ; preds = %originalBB1347
  br label %4947, !dbg !1869

4947:                                             ; preds = %originalBBpart21349, %originalBBpart21345
  %4948 = load i32, i32* @x.19
  %4949 = load i32, i32* @y.20
  %4950 = sub i32 %4948, 1
  %4951 = mul i32 %4948, %4950
  %4952 = urem i32 %4951, 2
  %4953 = icmp eq i32 %4952, 0
  %4954 = icmp slt i32 %4949, 10
  %4955 = or i1 %4953, %4954
  br i1 %4955, label %originalBB1351, label %originalBB1351alteredBB

originalBB1351:                                   ; preds = %4947, %originalBB1351alteredBB
  %4956 = load i64, i64* %21, align 8, !dbg !1872
  %4957 = add i64 %4956, 1, !dbg !1872
  store i64 %4957, i64* %21, align 8, !dbg !1872
  %4958 = load i32, i32* @x.19
  %4959 = load i32, i32* @y.20
  %4960 = sub i32 %4958, 1
  %4961 = mul i32 %4958, %4960
  %4962 = urem i32 %4961, 2
  %4963 = icmp eq i32 %4962, 0
  %4964 = icmp slt i32 %4959, 10
  %4965 = or i1 %4963, %4964
  br i1 %4965, label %originalBBpart21355, label %originalBB1351alteredBB

originalBBpart21355:                              ; preds = %originalBB1351
  br label %4966, !dbg !1872

4966:                                             ; preds = %originalBBpart21355
  %4967 = load i32, i32* @x.19
  %4968 = load i32, i32* @y.20
  %4969 = sub i32 %4967, 1
  %4970 = mul i32 %4967, %4969
  %4971 = urem i32 %4970, 2
  %4972 = icmp eq i32 %4971, 0
  %4973 = icmp slt i32 %4968, 10
  %4974 = or i1 %4972, %4973
  br i1 %4974, label %originalBB1357, label %originalBB1357alteredBB

originalBB1357:                                   ; preds = %4966, %originalBB1357alteredBB
  %4975 = load i32, i32* @x.19
  %4976 = load i32, i32* @y.20
  %4977 = sub i32 %4975, 1
  %4978 = mul i32 %4975, %4977
  %4979 = urem i32 %4978, 2
  %4980 = icmp eq i32 %4979, 0
  %4981 = icmp slt i32 %4976, 10
  %4982 = or i1 %4980, %4981
  br i1 %4982, label %originalBBpart21359, label %originalBB1357alteredBB

originalBBpart21359:                              ; preds = %originalBB1357
  br label %4983, !dbg !1867

4983:                                             ; preds = %originalBBpart21359
  %4984 = load i32, i32* @x.19
  %4985 = load i32, i32* @y.20
  %4986 = sub i32 %4984, 1
  %4987 = mul i32 %4984, %4986
  %4988 = urem i32 %4987, 2
  %4989 = icmp eq i32 %4988, 0
  %4990 = icmp slt i32 %4985, 10
  %4991 = or i1 %4989, %4990
  br i1 %4991, label %originalBB1361, label %originalBB1361alteredBB

originalBB1361:                                   ; preds = %4983, %originalBB1361alteredBB
  %4992 = load i64, i64* %21, align 8, !dbg !1873
  %4993 = load i64, i64* %12, align 8, !dbg !1873
  %4994 = icmp ult i64 %4992, %4993, !dbg !1873
  %4995 = load i32, i32* @x.19
  %4996 = load i32, i32* @y.20
  %4997 = sub i32 %4995, 1
  %4998 = mul i32 %4995, %4997
  %4999 = urem i32 %4998, 2
  %5000 = icmp eq i32 %4999, 0
  %5001 = icmp slt i32 %4996, 10
  %5002 = or i1 %5000, %5001
  br i1 %5002, label %originalBBpart21363, label %originalBB1361alteredBB

originalBBpart21363:                              ; preds = %originalBB1361
  br i1 %4994, label %5003, label %5023, !dbg !1876

5003:                                             ; preds = %originalBBpart21363
  %5004 = load i32, i32* @x.19
  %5005 = load i32, i32* @y.20
  %5006 = sub i32 %5004, 1
  %5007 = mul i32 %5004, %5006
  %5008 = urem i32 %5007, 2
  %5009 = icmp eq i32 %5008, 0
  %5010 = icmp slt i32 %5005, 10
  %5011 = or i1 %5009, %5010
  br i1 %5011, label %originalBB1365, label %originalBB1365alteredBB

originalBB1365:                                   ; preds = %5003, %originalBB1365alteredBB
  %5012 = load i8*, i8** %11, align 8, !dbg !1873
  %5013 = load i64, i64* %21, align 8, !dbg !1873
  %5014 = getelementptr inbounds i8, i8* %5012, i64 %5013, !dbg !1873
  store i8 39, i8* %5014, align 1, !dbg !1873
  %5015 = load i32, i32* @x.19
  %5016 = load i32, i32* @y.20
  %5017 = sub i32 %5015, 1
  %5018 = mul i32 %5015, %5017
  %5019 = urem i32 %5018, 2
  %5020 = icmp eq i32 %5019, 0
  %5021 = icmp slt i32 %5016, 10
  %5022 = or i1 %5020, %5021
  br i1 %5022, label %originalBBpart21367, label %originalBB1365alteredBB

originalBBpart21367:                              ; preds = %originalBB1365
  br label %5023, !dbg !1873

5023:                                             ; preds = %originalBBpart21367, %originalBBpart21363
  %5024 = load i32, i32* @x.19
  %5025 = load i32, i32* @y.20
  %5026 = sub i32 %5024, 1
  %5027 = mul i32 %5024, %5026
  %5028 = urem i32 %5027, 2
  %5029 = icmp eq i32 %5028, 0
  %5030 = icmp slt i32 %5025, 10
  %5031 = or i1 %5029, %5030
  br i1 %5031, label %originalBB1369, label %originalBB1369alteredBB

originalBB1369:                                   ; preds = %5023, %originalBB1369alteredBB
  %5032 = load i64, i64* %21, align 8, !dbg !1876
  %5033 = add i64 %5032, 1, !dbg !1876
  store i64 %5033, i64* %21, align 8, !dbg !1876
  %5034 = load i32, i32* @x.19
  %5035 = load i32, i32* @y.20
  %5036 = sub i32 %5034, 1
  %5037 = mul i32 %5034, %5036
  %5038 = urem i32 %5037, 2
  %5039 = icmp eq i32 %5038, 0
  %5040 = icmp slt i32 %5035, 10
  %5041 = or i1 %5039, %5040
  br i1 %5041, label %originalBBpart21377, label %originalBB1369alteredBB

originalBBpart21377:                              ; preds = %originalBB1369
  br label %5042, !dbg !1876

5042:                                             ; preds = %originalBBpart21377
  %5043 = load i32, i32* @x.19
  %5044 = load i32, i32* @y.20
  %5045 = sub i32 %5043, 1
  %5046 = mul i32 %5043, %5045
  %5047 = urem i32 %5046, 2
  %5048 = icmp eq i32 %5047, 0
  %5049 = icmp slt i32 %5044, 10
  %5050 = or i1 %5048, %5049
  br i1 %5050, label %originalBB1379, label %originalBB1379alteredBB

originalBB1379:                                   ; preds = %5042, %originalBB1379alteredBB
  store i8 0, i8* %28, align 1, !dbg !1867
  %5051 = load i32, i32* @x.19
  %5052 = load i32, i32* @y.20
  %5053 = sub i32 %5051, 1
  %5054 = mul i32 %5051, %5053
  %5055 = urem i32 %5054, 2
  %5056 = icmp eq i32 %5055, 0
  %5057 = icmp slt i32 %5052, 10
  %5058 = or i1 %5056, %5057
  br i1 %5058, label %originalBBpart21381, label %originalBB1379alteredBB

originalBBpart21381:                              ; preds = %originalBB1379
  br label %5059, !dbg !1867

5059:                                             ; preds = %originalBBpart21381, %originalBBpart21341, %originalBBpart21337
  %5060 = load i32, i32* @x.19
  %5061 = load i32, i32* @y.20
  %5062 = sub i32 %5060, 1
  %5063 = mul i32 %5060, %5062
  %5064 = urem i32 %5063, 2
  %5065 = icmp eq i32 %5064, 0
  %5066 = icmp slt i32 %5061, 10
  %5067 = or i1 %5065, %5066
  br i1 %5067, label %originalBB1383, label %originalBB1383alteredBB

originalBB1383:                                   ; preds = %5059, %originalBB1383alteredBB
  %5068 = load i32, i32* @x.19
  %5069 = load i32, i32* @y.20
  %5070 = sub i32 %5068, 1
  %5071 = mul i32 %5068, %5070
  %5072 = urem i32 %5071, 2
  %5073 = icmp eq i32 %5072, 0
  %5074 = icmp slt i32 %5069, 10
  %5075 = or i1 %5073, %5074
  br i1 %5075, label %originalBBpart21385, label %originalBB1383alteredBB

originalBBpart21385:                              ; preds = %originalBB1383
  br label %5076, !dbg !1866

5076:                                             ; preds = %originalBBpart21385
  %5077 = load i32, i32* @x.19
  %5078 = load i32, i32* @y.20
  %5079 = sub i32 %5077, 1
  %5080 = mul i32 %5077, %5079
  %5081 = urem i32 %5080, 2
  %5082 = icmp eq i32 %5081, 0
  %5083 = icmp slt i32 %5078, 10
  %5084 = or i1 %5082, %5083
  br i1 %5084, label %originalBB1387, label %originalBB1387alteredBB

originalBB1387:                                   ; preds = %5076, %originalBB1387alteredBB
  %5085 = load i32, i32* @x.19
  %5086 = load i32, i32* @y.20
  %5087 = sub i32 %5085, 1
  %5088 = mul i32 %5085, %5087
  %5089 = urem i32 %5088, 2
  %5090 = icmp eq i32 %5089, 0
  %5091 = icmp slt i32 %5086, 10
  %5092 = or i1 %5090, %5091
  br i1 %5092, label %originalBBpart21389, label %originalBB1387alteredBB

originalBBpart21389:                              ; preds = %originalBB1387
  br label %5093, !dbg !1877

5093:                                             ; preds = %originalBBpart21389
  %5094 = load i32, i32* @x.19
  %5095 = load i32, i32* @y.20
  %5096 = sub i32 %5094, 1
  %5097 = mul i32 %5094, %5096
  %5098 = urem i32 %5097, 2
  %5099 = icmp eq i32 %5098, 0
  %5100 = icmp slt i32 %5095, 10
  %5101 = or i1 %5099, %5100
  br i1 %5101, label %originalBB1391, label %originalBB1391alteredBB

originalBB1391:                                   ; preds = %5093, %originalBB1391alteredBB
  %5102 = load i64, i64* %21, align 8, !dbg !1878
  %5103 = load i64, i64* %12, align 8, !dbg !1878
  %5104 = icmp ult i64 %5102, %5103, !dbg !1878
  %5105 = load i32, i32* @x.19
  %5106 = load i32, i32* @y.20
  %5107 = sub i32 %5105, 1
  %5108 = mul i32 %5105, %5107
  %5109 = urem i32 %5108, 2
  %5110 = icmp eq i32 %5109, 0
  %5111 = icmp slt i32 %5106, 10
  %5112 = or i1 %5110, %5111
  br i1 %5112, label %originalBBpart21393, label %originalBB1391alteredBB

originalBBpart21393:                              ; preds = %originalBB1391
  br i1 %5104, label %5113, label %5134, !dbg !1881

5113:                                             ; preds = %originalBBpart21393
  %5114 = load i32, i32* @x.19
  %5115 = load i32, i32* @y.20
  %5116 = sub i32 %5114, 1
  %5117 = mul i32 %5114, %5116
  %5118 = urem i32 %5117, 2
  %5119 = icmp eq i32 %5118, 0
  %5120 = icmp slt i32 %5115, 10
  %5121 = or i1 %5119, %5120
  br i1 %5121, label %originalBB1395, label %originalBB1395alteredBB

originalBB1395:                                   ; preds = %5113, %originalBB1395alteredBB
  %5122 = load i8, i8* %31, align 1, !dbg !1878
  %5123 = load i8*, i8** %11, align 8, !dbg !1878
  %5124 = load i64, i64* %21, align 8, !dbg !1878
  %5125 = getelementptr inbounds i8, i8* %5123, i64 %5124, !dbg !1878
  store i8 %5122, i8* %5125, align 1, !dbg !1878
  %5126 = load i32, i32* @x.19
  %5127 = load i32, i32* @y.20
  %5128 = sub i32 %5126, 1
  %5129 = mul i32 %5126, %5128
  %5130 = urem i32 %5129, 2
  %5131 = icmp eq i32 %5130, 0
  %5132 = icmp slt i32 %5127, 10
  %5133 = or i1 %5131, %5132
  br i1 %5133, label %originalBBpart21397, label %originalBB1395alteredBB

originalBBpart21397:                              ; preds = %originalBB1395
  br label %5134, !dbg !1878

5134:                                             ; preds = %originalBBpart21397, %originalBBpart21393
  %5135 = load i64, i64* %21, align 8, !dbg !1881
  %5136 = add i64 %5135, 1, !dbg !1881
  store i64 %5136, i64* %21, align 8, !dbg !1881
  br label %5137, !dbg !1881

5137:                                             ; preds = %5134
  %5138 = load i32, i32* @x.19
  %5139 = load i32, i32* @y.20
  %5140 = sub i32 %5138, 1
  %5141 = mul i32 %5138, %5140
  %5142 = urem i32 %5141, 2
  %5143 = icmp eq i32 %5142, 0
  %5144 = icmp slt i32 %5139, 10
  %5145 = or i1 %5143, %5144
  br i1 %5145, label %originalBB1399, label %originalBB1399alteredBB

originalBB1399:                                   ; preds = %5137, %originalBB1399alteredBB
  %5146 = load i8*, i8** %13, align 8, !dbg !1882
  %5147 = load i64, i64* %20, align 8, !dbg !1883
  %5148 = add i64 %5147, 1, !dbg !1883
  store i64 %5148, i64* %20, align 8, !dbg !1883
  %5149 = getelementptr inbounds i8, i8* %5146, i64 %5148, !dbg !1882
  %5150 = load i8, i8* %5149, align 1, !dbg !1882
  store i8 %5150, i8* %31, align 1, !dbg !1884
  %5151 = load i32, i32* @x.19
  %5152 = load i32, i32* @y.20
  %5153 = sub i32 %5151, 1
  %5154 = mul i32 %5151, %5153
  %5155 = urem i32 %5154, 2
  %5156 = icmp eq i32 %5155, 0
  %5157 = icmp slt i32 %5152, 10
  %5158 = or i1 %5156, %5157
  br i1 %5158, label %originalBBpart21402, label %originalBB1399alteredBB

originalBBpart21402:                              ; preds = %originalBB1399
  br label %4080, !dbg !1885, !llvm.loop !1886

5159:                                             ; preds = %originalBBpart21329
  %5160 = load i32, i32* @x.19
  %5161 = load i32, i32* @y.20
  %5162 = sub i32 %5160, 1
  %5163 = mul i32 %5160, %5162
  %5164 = urem i32 %5163, 2
  %5165 = icmp eq i32 %5164, 0
  %5166 = icmp slt i32 %5161, 10
  %5167 = or i1 %5165, %5166
  br i1 %5167, label %originalBB1404, label %originalBB1404alteredBB

originalBB1404:                                   ; preds = %5159, %originalBB1404alteredBB
  %5168 = load i32, i32* @x.19
  %5169 = load i32, i32* @y.20
  %5170 = sub i32 %5168, 1
  %5171 = mul i32 %5168, %5170
  %5172 = urem i32 %5171, 2
  %5173 = icmp eq i32 %5172, 0
  %5174 = icmp slt i32 %5169, 10
  %5175 = or i1 %5173, %5174
  br i1 %5175, label %originalBBpart21406, label %originalBB1404alteredBB

originalBBpart21406:                              ; preds = %originalBB1404
  br label %5750, !dbg !1889

5176:                                             ; preds = %originalBBpart21043, %originalBBpart21039
  %5177 = load i32, i32* @x.19
  %5178 = load i32, i32* @y.20
  %5179 = sub i32 %5177, 1
  %5180 = mul i32 %5177, %5179
  %5181 = urem i32 %5180, 2
  %5182 = icmp eq i32 %5181, 0
  %5183 = icmp slt i32 %5178, 10
  %5184 = or i1 %5182, %5183
  br i1 %5184, label %originalBB1408, label %originalBB1408alteredBB

originalBB1408:                                   ; preds = %5176, %originalBB1408alteredBB
  %5185 = load i32, i32* @x.19
  %5186 = load i32, i32* @y.20
  %5187 = sub i32 %5185, 1
  %5188 = mul i32 %5185, %5187
  %5189 = urem i32 %5188, 2
  %5190 = icmp eq i32 %5189, 0
  %5191 = icmp slt i32 %5186, 10
  %5192 = or i1 %5190, %5191
  br i1 %5192, label %originalBBpart21410, label %originalBB1408alteredBB

originalBBpart21410:                              ; preds = %originalBB1408
  br label %5193, !dbg !1890

5193:                                             ; preds = %originalBBpart21410, %originalBBpart2856, %originalBBpart2852, %originalBBpart2762, %originalBBpart2738, %originalBBpart2726, %2781, %originalBBpart2626, %originalBBpart2435
  %5194 = load i32, i32* @x.19
  %5195 = load i32, i32* @y.20
  %5196 = sub i32 %5194, 1
  %5197 = mul i32 %5194, %5196
  %5198 = urem i32 %5197, 2
  %5199 = icmp eq i32 %5198, 0
  %5200 = icmp slt i32 %5195, 10
  %5201 = or i1 %5199, %5200
  br i1 %5201, label %originalBB1412, label %originalBB1412alteredBB

originalBB1412:                                   ; preds = %5193, %originalBB1412alteredBB
  %5202 = load i8, i8* %25, align 1, !dbg !1891
  %5203 = trunc i8 %5202 to i1, !dbg !1891
  %5204 = load i32, i32* @x.19
  %5205 = load i32, i32* @y.20
  %5206 = sub i32 %5204, 1
  %5207 = mul i32 %5204, %5206
  %5208 = urem i32 %5207, 2
  %5209 = icmp eq i32 %5208, 0
  %5210 = icmp slt i32 %5205, 10
  %5211 = or i1 %5209, %5210
  br i1 %5211, label %originalBBpart21414, label %originalBB1412alteredBB

originalBBpart21414:                              ; preds = %originalBB1412
  br i1 %5203, label %5212, label %5231, !dbg !1893

5212:                                             ; preds = %originalBBpart21414
  %5213 = load i32, i32* @x.19
  %5214 = load i32, i32* @y.20
  %5215 = sub i32 %5213, 1
  %5216 = mul i32 %5213, %5215
  %5217 = urem i32 %5216, 2
  %5218 = icmp eq i32 %5217, 0
  %5219 = icmp slt i32 %5214, 10
  %5220 = or i1 %5218, %5219
  br i1 %5220, label %originalBB1416, label %originalBB1416alteredBB

originalBB1416:                                   ; preds = %5212, %originalBB1416alteredBB
  %5221 = load i32, i32* %15, align 4, !dbg !1894
  %5222 = icmp ne i32 %5221, 2, !dbg !1895
  %5223 = load i32, i32* @x.19
  %5224 = load i32, i32* @y.20
  %5225 = sub i32 %5223, 1
  %5226 = mul i32 %5223, %5225
  %5227 = urem i32 %5226, 2
  %5228 = icmp eq i32 %5227, 0
  %5229 = icmp slt i32 %5224, 10
  %5230 = or i1 %5228, %5229
  br i1 %5230, label %originalBBpart21418, label %originalBB1416alteredBB

originalBBpart21418:                              ; preds = %originalBB1416
  br i1 %5222, label %5250, label %5231, !dbg !1896

5231:                                             ; preds = %originalBBpart21418, %originalBBpart21414
  %5232 = load i32, i32* @x.19
  %5233 = load i32, i32* @y.20
  %5234 = sub i32 %5232, 1
  %5235 = mul i32 %5232, %5234
  %5236 = urem i32 %5235, 2
  %5237 = icmp eq i32 %5236, 0
  %5238 = icmp slt i32 %5233, 10
  %5239 = or i1 %5237, %5238
  br i1 %5239, label %originalBB1420, label %originalBB1420alteredBB

originalBB1420:                                   ; preds = %5231, %originalBB1420alteredBB
  %5240 = load i8, i8* %27, align 1, !dbg !1897
  %5241 = trunc i8 %5240 to i1, !dbg !1897
  %5242 = load i32, i32* @x.19
  %5243 = load i32, i32* @y.20
  %5244 = sub i32 %5242, 1
  %5245 = mul i32 %5242, %5244
  %5246 = urem i32 %5245, 2
  %5247 = icmp eq i32 %5246, 0
  %5248 = icmp slt i32 %5243, 10
  %5249 = or i1 %5247, %5248
  br i1 %5249, label %originalBBpart21422, label %originalBB1420alteredBB

originalBBpart21422:                              ; preds = %originalBB1420
  br i1 %5241, label %5250, label %5283, !dbg !1898

5250:                                             ; preds = %originalBBpart21422, %originalBBpart21418
  %5251 = load i32, i32* @x.19
  %5252 = load i32, i32* @y.20
  %5253 = sub i32 %5251, 1
  %5254 = mul i32 %5251, %5253
  %5255 = urem i32 %5254, 2
  %5256 = icmp eq i32 %5255, 0
  %5257 = icmp slt i32 %5252, 10
  %5258 = or i1 %5256, %5257
  br i1 %5258, label %originalBB1424, label %originalBB1424alteredBB

originalBB1424:                                   ; preds = %5250, %originalBB1424alteredBB
  %5259 = load i32*, i32** %17, align 8, !dbg !1899
  %5260 = icmp ne i32* %5259, null, !dbg !1899
  %5261 = load i32, i32* @x.19
  %5262 = load i32, i32* @y.20
  %5263 = sub i32 %5261, 1
  %5264 = mul i32 %5261, %5263
  %5265 = urem i32 %5264, 2
  %5266 = icmp eq i32 %5265, 0
  %5267 = icmp slt i32 %5262, 10
  %5268 = or i1 %5266, %5267
  br i1 %5268, label %originalBBpart21426, label %originalBB1424alteredBB

originalBBpart21426:                              ; preds = %originalBB1424
  br i1 %5260, label %5269, label %5283, !dbg !1900

5269:                                             ; preds = %originalBBpart21426
  %5270 = load i32*, i32** %17, align 8, !dbg !1901
  %5271 = load i8, i8* %31, align 1, !dbg !1902
  %5272 = zext i8 %5271 to i64, !dbg !1902
  %5273 = udiv i64 %5272, 32, !dbg !1903
  %5274 = getelementptr inbounds i32, i32* %5270, i64 %5273, !dbg !1901
  %5275 = load i32, i32* %5274, align 4, !dbg !1901
  %5276 = load i8, i8* %31, align 1, !dbg !1904
  %5277 = zext i8 %5276 to i64, !dbg !1904
  %5278 = urem i64 %5277, 32, !dbg !1905
  %5279 = trunc i64 %5278 to i32, !dbg !1906
  %5280 = lshr i32 %5275, %5279, !dbg !1906
  %5281 = and i32 %5280, 1, !dbg !1907
  %5282 = icmp ne i32 %5281, 0, !dbg !1907
  br i1 %5282, label %5319, label %5283, !dbg !1908

5283:                                             ; preds = %5269, %originalBBpart21426, %originalBBpart21422
  %5284 = load i32, i32* @x.19
  %5285 = load i32, i32* @y.20
  %5286 = sub i32 %5284, 1
  %5287 = mul i32 %5284, %5286
  %5288 = urem i32 %5287, 2
  %5289 = icmp eq i32 %5288, 0
  %5290 = icmp slt i32 %5285, 10
  %5291 = or i1 %5289, %5290
  br i1 %5291, label %originalBB1428, label %originalBB1428alteredBB

originalBB1428:                                   ; preds = %5283, %originalBB1428alteredBB
  %5292 = load i8, i8* %33, align 1, !dbg !1909
  %5293 = trunc i8 %5292 to i1, !dbg !1909
  %5294 = load i32, i32* @x.19
  %5295 = load i32, i32* @y.20
  %5296 = sub i32 %5294, 1
  %5297 = mul i32 %5294, %5296
  %5298 = urem i32 %5297, 2
  %5299 = icmp eq i32 %5298, 0
  %5300 = icmp slt i32 %5295, 10
  %5301 = or i1 %5299, %5300
  br i1 %5301, label %originalBBpart21430, label %originalBB1428alteredBB

originalBBpart21430:                              ; preds = %originalBB1428
  br i1 %5293, label %5319, label %5302, !dbg !1910

5302:                                             ; preds = %originalBBpart21430
  %5303 = load i32, i32* @x.19
  %5304 = load i32, i32* @y.20
  %5305 = sub i32 %5303, 1
  %5306 = mul i32 %5303, %5305
  %5307 = urem i32 %5306, 2
  %5308 = icmp eq i32 %5307, 0
  %5309 = icmp slt i32 %5304, 10
  %5310 = or i1 %5308, %5309
  br i1 %5310, label %originalBB1432, label %originalBB1432alteredBB

originalBB1432:                                   ; preds = %5302, %originalBB1432alteredBB
  %5311 = load i32, i32* @x.19
  %5312 = load i32, i32* @y.20
  %5313 = sub i32 %5311, 1
  %5314 = mul i32 %5311, %5313
  %5315 = urem i32 %5314, 2
  %5316 = icmp eq i32 %5315, 0
  %5317 = icmp slt i32 %5312, 10
  %5318 = or i1 %5316, %5317
  br i1 %5318, label %originalBBpart21434, label %originalBB1432alteredBB

originalBBpart21434:                              ; preds = %originalBB1432
  br label %5750, !dbg !1911

5319:                                             ; preds = %originalBBpart21430, %5269
  %5320 = load i32, i32* @x.19
  %5321 = load i32, i32* @y.20
  %5322 = sub i32 %5320, 1
  %5323 = mul i32 %5320, %5322
  %5324 = urem i32 %5323, 2
  %5325 = icmp eq i32 %5324, 0
  %5326 = icmp slt i32 %5321, 10
  %5327 = or i1 %5325, %5326
  br i1 %5327, label %originalBB1436, label %originalBB1436alteredBB

originalBB1436:                                   ; preds = %5319, %originalBB1436alteredBB
  %5328 = load i32, i32* @x.19
  %5329 = load i32, i32* @y.20
  %5330 = sub i32 %5328, 1
  %5331 = mul i32 %5328, %5330
  %5332 = urem i32 %5331, 2
  %5333 = icmp eq i32 %5332, 0
  %5334 = icmp slt i32 %5329, 10
  %5335 = or i1 %5333, %5334
  br i1 %5335, label %originalBBpart21438, label %originalBB1436alteredBB

originalBBpart21438:                              ; preds = %originalBB1436
  br label %5336, !dbg !1909

5336:                                             ; preds = %originalBBpart21438, %originalBBpart2710
  call void @llvm.dbg.label(metadata !1912), !dbg !1913
  %5337 = load i32, i32* @x.19
  %5338 = load i32, i32* @y.20
  %5339 = sub i32 %5337, 1
  %5340 = mul i32 %5337, %5339
  %5341 = urem i32 %5340, 2
  %5342 = icmp eq i32 %5341, 0
  %5343 = icmp slt i32 %5338, 10
  %5344 = or i1 %5342, %5343
  br i1 %5344, label %originalBB1440, label %originalBB1440alteredBB

originalBB1440:                                   ; preds = %5336, %originalBB1440alteredBB
  %5345 = load i32, i32* @x.19
  %5346 = load i32, i32* @y.20
  %5347 = sub i32 %5345, 1
  %5348 = mul i32 %5345, %5347
  %5349 = urem i32 %5348, 2
  %5350 = icmp eq i32 %5349, 0
  %5351 = icmp slt i32 %5346, 10
  %5352 = or i1 %5350, %5351
  br i1 %5352, label %originalBBpart21442, label %originalBB1440alteredBB

originalBBpart21442:                              ; preds = %originalBB1440
  br label %5353, !dbg !1914

5353:                                             ; preds = %originalBBpart21442
  %5354 = load i32, i32* @x.19
  %5355 = load i32, i32* @y.20
  %5356 = sub i32 %5354, 1
  %5357 = mul i32 %5354, %5356
  %5358 = urem i32 %5357, 2
  %5359 = icmp eq i32 %5358, 0
  %5360 = icmp slt i32 %5355, 10
  %5361 = or i1 %5359, %5360
  br i1 %5361, label %originalBB1444, label %originalBB1444alteredBB

originalBB1444:                                   ; preds = %5353, %originalBB1444alteredBB
  %5362 = load i8, i8* %27, align 1, !dbg !1915
  %5363 = trunc i8 %5362 to i1, !dbg !1915
  %5364 = load i32, i32* @x.19
  %5365 = load i32, i32* @y.20
  %5366 = sub i32 %5364, 1
  %5367 = mul i32 %5364, %5366
  %5368 = urem i32 %5367, 2
  %5369 = icmp eq i32 %5368, 0
  %5370 = icmp slt i32 %5365, 10
  %5371 = or i1 %5369, %5370
  br i1 %5371, label %originalBBpart21446, label %originalBB1444alteredBB

originalBBpart21446:                              ; preds = %originalBB1444
  br i1 %5363, label %5372, label %5389, !dbg !1918

5372:                                             ; preds = %originalBBpart21446
  %5373 = load i32, i32* @x.19
  %5374 = load i32, i32* @y.20
  %5375 = sub i32 %5373, 1
  %5376 = mul i32 %5373, %5375
  %5377 = urem i32 %5376, 2
  %5378 = icmp eq i32 %5377, 0
  %5379 = icmp slt i32 %5374, 10
  %5380 = or i1 %5378, %5379
  br i1 %5380, label %originalBB1448, label %originalBB1448alteredBB

originalBB1448:                                   ; preds = %5372, %originalBB1448alteredBB
  %5381 = load i32, i32* @x.19
  %5382 = load i32, i32* @y.20
  %5383 = sub i32 %5381, 1
  %5384 = mul i32 %5381, %5383
  %5385 = urem i32 %5384, 2
  %5386 = icmp eq i32 %5385, 0
  %5387 = icmp slt i32 %5382, 10
  %5388 = or i1 %5386, %5387
  br i1 %5388, label %originalBBpart21450, label %originalBB1448alteredBB

originalBBpart21450:                              ; preds = %originalBB1448
  br label %6590, !dbg !1915

5389:                                             ; preds = %originalBBpart21446
  %5390 = load i32, i32* @x.19
  %5391 = load i32, i32* @y.20
  %5392 = sub i32 %5390, 1
  %5393 = mul i32 %5390, %5392
  %5394 = urem i32 %5393, 2
  %5395 = icmp eq i32 %5394, 0
  %5396 = icmp slt i32 %5391, 10
  %5397 = or i1 %5395, %5396
  br i1 %5397, label %originalBB1452, label %originalBB1452alteredBB

originalBB1452:                                   ; preds = %5389, %originalBB1452alteredBB
  store i8 1, i8* %34, align 1, !dbg !1918
  %5398 = load i32, i32* %15, align 4, !dbg !1919
  %5399 = icmp eq i32 %5398, 2, !dbg !1919
  %5400 = load i32, i32* @x.19
  %5401 = load i32, i32* @y.20
  %5402 = sub i32 %5400, 1
  %5403 = mul i32 %5400, %5402
  %5404 = urem i32 %5403, 2
  %5405 = icmp eq i32 %5404, 0
  %5406 = icmp slt i32 %5401, 10
  %5407 = or i1 %5405, %5406
  br i1 %5407, label %originalBBpart21454, label %originalBB1452alteredBB

originalBBpart21454:                              ; preds = %originalBB1452
  br i1 %5399, label %5408, label %5640, !dbg !1919

5408:                                             ; preds = %originalBBpart21454
  %5409 = load i8, i8* %28, align 1, !dbg !1919
  %5410 = trunc i8 %5409 to i1, !dbg !1919
  br i1 %5410, label %5640, label %5411, !dbg !1918

5411:                                             ; preds = %5408
  %5412 = load i32, i32* @x.19
  %5413 = load i32, i32* @y.20
  %5414 = sub i32 %5412, 1
  %5415 = mul i32 %5412, %5414
  %5416 = urem i32 %5415, 2
  %5417 = icmp eq i32 %5416, 0
  %5418 = icmp slt i32 %5413, 10
  %5419 = or i1 %5417, %5418
  br i1 %5419, label %originalBB1456, label %originalBB1456alteredBB

originalBB1456:                                   ; preds = %5411, %originalBB1456alteredBB
  %5420 = load i32, i32* @x.19
  %5421 = load i32, i32* @y.20
  %5422 = sub i32 %5420, 1
  %5423 = mul i32 %5420, %5422
  %5424 = urem i32 %5423, 2
  %5425 = icmp eq i32 %5424, 0
  %5426 = icmp slt i32 %5421, 10
  %5427 = or i1 %5425, %5426
  br i1 %5427, label %originalBBpart21458, label %originalBB1456alteredBB

originalBBpart21458:                              ; preds = %originalBB1456
  br label %5428, !dbg !1921

5428:                                             ; preds = %originalBBpart21458
  %5429 = load i32, i32* @x.19
  %5430 = load i32, i32* @y.20
  %5431 = sub i32 %5429, 1
  %5432 = mul i32 %5429, %5431
  %5433 = urem i32 %5432, 2
  %5434 = icmp eq i32 %5433, 0
  %5435 = icmp slt i32 %5430, 10
  %5436 = or i1 %5434, %5435
  br i1 %5436, label %originalBB1460, label %originalBB1460alteredBB

originalBB1460:                                   ; preds = %5428, %originalBB1460alteredBB
  %5437 = load i64, i64* %21, align 8, !dbg !1923
  %5438 = load i64, i64* %12, align 8, !dbg !1923
  %5439 = icmp ult i64 %5437, %5438, !dbg !1923
  %5440 = load i32, i32* @x.19
  %5441 = load i32, i32* @y.20
  %5442 = sub i32 %5440, 1
  %5443 = mul i32 %5440, %5442
  %5444 = urem i32 %5443, 2
  %5445 = icmp eq i32 %5444, 0
  %5446 = icmp slt i32 %5441, 10
  %5447 = or i1 %5445, %5446
  br i1 %5447, label %originalBBpart21462, label %originalBB1460alteredBB

originalBBpart21462:                              ; preds = %originalBB1460
  br i1 %5439, label %5448, label %5468, !dbg !1926

5448:                                             ; preds = %originalBBpart21462
  %5449 = load i32, i32* @x.19
  %5450 = load i32, i32* @y.20
  %5451 = sub i32 %5449, 1
  %5452 = mul i32 %5449, %5451
  %5453 = urem i32 %5452, 2
  %5454 = icmp eq i32 %5453, 0
  %5455 = icmp slt i32 %5450, 10
  %5456 = or i1 %5454, %5455
  br i1 %5456, label %originalBB1464, label %originalBB1464alteredBB

originalBB1464:                                   ; preds = %5448, %originalBB1464alteredBB
  %5457 = load i8*, i8** %11, align 8, !dbg !1923
  %5458 = load i64, i64* %21, align 8, !dbg !1923
  %5459 = getelementptr inbounds i8, i8* %5457, i64 %5458, !dbg !1923
  store i8 39, i8* %5459, align 1, !dbg !1923
  %5460 = load i32, i32* @x.19
  %5461 = load i32, i32* @y.20
  %5462 = sub i32 %5460, 1
  %5463 = mul i32 %5460, %5462
  %5464 = urem i32 %5463, 2
  %5465 = icmp eq i32 %5464, 0
  %5466 = icmp slt i32 %5461, 10
  %5467 = or i1 %5465, %5466
  br i1 %5467, label %originalBBpart21466, label %originalBB1464alteredBB

originalBBpart21466:                              ; preds = %originalBB1464
  br label %5468, !dbg !1923

5468:                                             ; preds = %originalBBpart21466, %originalBBpart21462
  %5469 = load i32, i32* @x.19
  %5470 = load i32, i32* @y.20
  %5471 = sub i32 %5469, 1
  %5472 = mul i32 %5469, %5471
  %5473 = urem i32 %5472, 2
  %5474 = icmp eq i32 %5473, 0
  %5475 = icmp slt i32 %5470, 10
  %5476 = or i1 %5474, %5475
  br i1 %5476, label %originalBB1468, label %originalBB1468alteredBB

originalBB1468:                                   ; preds = %5468, %originalBB1468alteredBB
  %5477 = load i64, i64* %21, align 8, !dbg !1926
  %5478 = add i64 %5477, 1, !dbg !1926
  store i64 %5478, i64* %21, align 8, !dbg !1926
  %5479 = load i32, i32* @x.19
  %5480 = load i32, i32* @y.20
  %5481 = sub i32 %5479, 1
  %5482 = mul i32 %5479, %5481
  %5483 = urem i32 %5482, 2
  %5484 = icmp eq i32 %5483, 0
  %5485 = icmp slt i32 %5480, 10
  %5486 = or i1 %5484, %5485
  br i1 %5486, label %originalBBpart21473, label %originalBB1468alteredBB

originalBBpart21473:                              ; preds = %originalBB1468
  br label %5487, !dbg !1926

5487:                                             ; preds = %originalBBpart21473
  %5488 = load i32, i32* @x.19
  %5489 = load i32, i32* @y.20
  %5490 = sub i32 %5488, 1
  %5491 = mul i32 %5488, %5490
  %5492 = urem i32 %5491, 2
  %5493 = icmp eq i32 %5492, 0
  %5494 = icmp slt i32 %5489, 10
  %5495 = or i1 %5493, %5494
  br i1 %5495, label %originalBB1475, label %originalBB1475alteredBB

originalBB1475:                                   ; preds = %5487, %originalBB1475alteredBB
  %5496 = load i32, i32* @x.19
  %5497 = load i32, i32* @y.20
  %5498 = sub i32 %5496, 1
  %5499 = mul i32 %5496, %5498
  %5500 = urem i32 %5499, 2
  %5501 = icmp eq i32 %5500, 0
  %5502 = icmp slt i32 %5497, 10
  %5503 = or i1 %5501, %5502
  br i1 %5503, label %originalBBpart21477, label %originalBB1475alteredBB

originalBBpart21477:                              ; preds = %originalBB1475
  br label %5504, !dbg !1921

5504:                                             ; preds = %originalBBpart21477
  %5505 = load i64, i64* %21, align 8, !dbg !1927
  %5506 = load i64, i64* %12, align 8, !dbg !1927
  %5507 = icmp ult i64 %5505, %5506, !dbg !1927
  br i1 %5507, label %5508, label %5528, !dbg !1930

5508:                                             ; preds = %5504
  %5509 = load i32, i32* @x.19
  %5510 = load i32, i32* @y.20
  %5511 = sub i32 %5509, 1
  %5512 = mul i32 %5509, %5511
  %5513 = urem i32 %5512, 2
  %5514 = icmp eq i32 %5513, 0
  %5515 = icmp slt i32 %5510, 10
  %5516 = or i1 %5514, %5515
  br i1 %5516, label %originalBB1479, label %originalBB1479alteredBB

originalBB1479:                                   ; preds = %5508, %originalBB1479alteredBB
  %5517 = load i8*, i8** %11, align 8, !dbg !1927
  %5518 = load i64, i64* %21, align 8, !dbg !1927
  %5519 = getelementptr inbounds i8, i8* %5517, i64 %5518, !dbg !1927
  store i8 36, i8* %5519, align 1, !dbg !1927
  %5520 = load i32, i32* @x.19
  %5521 = load i32, i32* @y.20
  %5522 = sub i32 %5520, 1
  %5523 = mul i32 %5520, %5522
  %5524 = urem i32 %5523, 2
  %5525 = icmp eq i32 %5524, 0
  %5526 = icmp slt i32 %5521, 10
  %5527 = or i1 %5525, %5526
  br i1 %5527, label %originalBBpart21481, label %originalBB1479alteredBB

originalBBpart21481:                              ; preds = %originalBB1479
  br label %5528, !dbg !1927

5528:                                             ; preds = %originalBBpart21481, %5504
  %5529 = load i32, i32* @x.19
  %5530 = load i32, i32* @y.20
  %5531 = sub i32 %5529, 1
  %5532 = mul i32 %5529, %5531
  %5533 = urem i32 %5532, 2
  %5534 = icmp eq i32 %5533, 0
  %5535 = icmp slt i32 %5530, 10
  %5536 = or i1 %5534, %5535
  br i1 %5536, label %originalBB1483, label %originalBB1483alteredBB

originalBB1483:                                   ; preds = %5528, %originalBB1483alteredBB
  %5537 = load i64, i64* %21, align 8, !dbg !1930
  %5538 = add i64 %5537, 1, !dbg !1930
  store i64 %5538, i64* %21, align 8, !dbg !1930
  %5539 = load i32, i32* @x.19
  %5540 = load i32, i32* @y.20
  %5541 = sub i32 %5539, 1
  %5542 = mul i32 %5539, %5541
  %5543 = urem i32 %5542, 2
  %5544 = icmp eq i32 %5543, 0
  %5545 = icmp slt i32 %5540, 10
  %5546 = or i1 %5544, %5545
  br i1 %5546, label %originalBBpart21487, label %originalBB1483alteredBB

originalBBpart21487:                              ; preds = %originalBB1483
  br label %5547, !dbg !1930

5547:                                             ; preds = %originalBBpart21487
  %5548 = load i32, i32* @x.19
  %5549 = load i32, i32* @y.20
  %5550 = sub i32 %5548, 1
  %5551 = mul i32 %5548, %5550
  %5552 = urem i32 %5551, 2
  %5553 = icmp eq i32 %5552, 0
  %5554 = icmp slt i32 %5549, 10
  %5555 = or i1 %5553, %5554
  br i1 %5555, label %originalBB1489, label %originalBB1489alteredBB

originalBB1489:                                   ; preds = %5547, %originalBB1489alteredBB
  %5556 = load i32, i32* @x.19
  %5557 = load i32, i32* @y.20
  %5558 = sub i32 %5556, 1
  %5559 = mul i32 %5556, %5558
  %5560 = urem i32 %5559, 2
  %5561 = icmp eq i32 %5560, 0
  %5562 = icmp slt i32 %5557, 10
  %5563 = or i1 %5561, %5562
  br i1 %5563, label %originalBBpart21491, label %originalBB1489alteredBB

originalBBpart21491:                              ; preds = %originalBB1489
  br label %5564, !dbg !1921

5564:                                             ; preds = %originalBBpart21491
  %5565 = load i32, i32* @x.19
  %5566 = load i32, i32* @y.20
  %5567 = sub i32 %5565, 1
  %5568 = mul i32 %5565, %5567
  %5569 = urem i32 %5568, 2
  %5570 = icmp eq i32 %5569, 0
  %5571 = icmp slt i32 %5566, 10
  %5572 = or i1 %5570, %5571
  br i1 %5572, label %originalBB1493, label %originalBB1493alteredBB

originalBB1493:                                   ; preds = %5564, %originalBB1493alteredBB
  %5573 = load i64, i64* %21, align 8, !dbg !1931
  %5574 = load i64, i64* %12, align 8, !dbg !1931
  %5575 = icmp ult i64 %5573, %5574, !dbg !1931
  %5576 = load i32, i32* @x.19
  %5577 = load i32, i32* @y.20
  %5578 = sub i32 %5576, 1
  %5579 = mul i32 %5576, %5578
  %5580 = urem i32 %5579, 2
  %5581 = icmp eq i32 %5580, 0
  %5582 = icmp slt i32 %5577, 10
  %5583 = or i1 %5581, %5582
  br i1 %5583, label %originalBBpart21495, label %originalBB1493alteredBB

originalBBpart21495:                              ; preds = %originalBB1493
  br i1 %5575, label %5584, label %5604, !dbg !1934

5584:                                             ; preds = %originalBBpart21495
  %5585 = load i32, i32* @x.19
  %5586 = load i32, i32* @y.20
  %5587 = sub i32 %5585, 1
  %5588 = mul i32 %5585, %5587
  %5589 = urem i32 %5588, 2
  %5590 = icmp eq i32 %5589, 0
  %5591 = icmp slt i32 %5586, 10
  %5592 = or i1 %5590, %5591
  br i1 %5592, label %originalBB1497, label %originalBB1497alteredBB

originalBB1497:                                   ; preds = %5584, %originalBB1497alteredBB
  %5593 = load i8*, i8** %11, align 8, !dbg !1931
  %5594 = load i64, i64* %21, align 8, !dbg !1931
  %5595 = getelementptr inbounds i8, i8* %5593, i64 %5594, !dbg !1931
  store i8 39, i8* %5595, align 1, !dbg !1931
  %5596 = load i32, i32* @x.19
  %5597 = load i32, i32* @y.20
  %5598 = sub i32 %5596, 1
  %5599 = mul i32 %5596, %5598
  %5600 = urem i32 %5599, 2
  %5601 = icmp eq i32 %5600, 0
  %5602 = icmp slt i32 %5597, 10
  %5603 = or i1 %5601, %5602
  br i1 %5603, label %originalBBpart21499, label %originalBB1497alteredBB

originalBBpart21499:                              ; preds = %originalBB1497
  br label %5604, !dbg !1931

5604:                                             ; preds = %originalBBpart21499, %originalBBpart21495
  %5605 = load i32, i32* @x.19
  %5606 = load i32, i32* @y.20
  %5607 = sub i32 %5605, 1
  %5608 = mul i32 %5605, %5607
  %5609 = urem i32 %5608, 2
  %5610 = icmp eq i32 %5609, 0
  %5611 = icmp slt i32 %5606, 10
  %5612 = or i1 %5610, %5611
  br i1 %5612, label %originalBB1501, label %originalBB1501alteredBB

originalBB1501:                                   ; preds = %5604, %originalBB1501alteredBB
  %5613 = load i64, i64* %21, align 8, !dbg !1934
  %5614 = add i64 %5613, 1, !dbg !1934
  store i64 %5614, i64* %21, align 8, !dbg !1934
  %5615 = load i32, i32* @x.19
  %5616 = load i32, i32* @y.20
  %5617 = sub i32 %5615, 1
  %5618 = mul i32 %5615, %5617
  %5619 = urem i32 %5618, 2
  %5620 = icmp eq i32 %5619, 0
  %5621 = icmp slt i32 %5616, 10
  %5622 = or i1 %5620, %5621
  br i1 %5622, label %originalBBpart21509, label %originalBB1501alteredBB

originalBBpart21509:                              ; preds = %originalBB1501
  br label %5623, !dbg !1934

5623:                                             ; preds = %originalBBpart21509
  %5624 = load i32, i32* @x.19
  %5625 = load i32, i32* @y.20
  %5626 = sub i32 %5624, 1
  %5627 = mul i32 %5624, %5626
  %5628 = urem i32 %5627, 2
  %5629 = icmp eq i32 %5628, 0
  %5630 = icmp slt i32 %5625, 10
  %5631 = or i1 %5629, %5630
  br i1 %5631, label %originalBB1511, label %originalBB1511alteredBB

originalBB1511:                                   ; preds = %5623, %originalBB1511alteredBB
  store i8 1, i8* %28, align 1, !dbg !1921
  %5632 = load i32, i32* @x.19
  %5633 = load i32, i32* @y.20
  %5634 = sub i32 %5632, 1
  %5635 = mul i32 %5632, %5634
  %5636 = urem i32 %5635, 2
  %5637 = icmp eq i32 %5636, 0
  %5638 = icmp slt i32 %5633, 10
  %5639 = or i1 %5637, %5638
  br i1 %5639, label %originalBBpart21513, label %originalBB1511alteredBB

originalBBpart21513:                              ; preds = %originalBB1511
  br label %5640, !dbg !1921

5640:                                             ; preds = %originalBBpart21513, %5408, %originalBBpart21454
  %5641 = load i32, i32* @x.19
  %5642 = load i32, i32* @y.20
  %5643 = sub i32 %5641, 1
  %5644 = mul i32 %5641, %5643
  %5645 = urem i32 %5644, 2
  %5646 = icmp eq i32 %5645, 0
  %5647 = icmp slt i32 %5642, 10
  %5648 = or i1 %5646, %5647
  br i1 %5648, label %originalBB1515, label %originalBB1515alteredBB

originalBB1515:                                   ; preds = %5640, %originalBB1515alteredBB
  %5649 = load i32, i32* @x.19
  %5650 = load i32, i32* @y.20
  %5651 = sub i32 %5649, 1
  %5652 = mul i32 %5649, %5651
  %5653 = urem i32 %5652, 2
  %5654 = icmp eq i32 %5653, 0
  %5655 = icmp slt i32 %5650, 10
  %5656 = or i1 %5654, %5655
  br i1 %5656, label %originalBBpart21517, label %originalBB1515alteredBB

originalBBpart21517:                              ; preds = %originalBB1515
  br label %5657, !dbg !1918

5657:                                             ; preds = %originalBBpart21517
  %5658 = load i32, i32* @x.19
  %5659 = load i32, i32* @y.20
  %5660 = sub i32 %5658, 1
  %5661 = mul i32 %5658, %5660
  %5662 = urem i32 %5661, 2
  %5663 = icmp eq i32 %5662, 0
  %5664 = icmp slt i32 %5659, 10
  %5665 = or i1 %5663, %5664
  br i1 %5665, label %originalBB1519, label %originalBB1519alteredBB

originalBB1519:                                   ; preds = %5657, %originalBB1519alteredBB
  %5666 = load i64, i64* %21, align 8, !dbg !1935
  %5667 = load i64, i64* %12, align 8, !dbg !1935
  %5668 = icmp ult i64 %5666, %5667, !dbg !1935
  %5669 = load i32, i32* @x.19
  %5670 = load i32, i32* @y.20
  %5671 = sub i32 %5669, 1
  %5672 = mul i32 %5669, %5671
  %5673 = urem i32 %5672, 2
  %5674 = icmp eq i32 %5673, 0
  %5675 = icmp slt i32 %5670, 10
  %5676 = or i1 %5674, %5675
  br i1 %5676, label %originalBBpart21521, label %originalBB1519alteredBB

originalBBpart21521:                              ; preds = %originalBB1519
  br i1 %5668, label %5677, label %5697, !dbg !1938

5677:                                             ; preds = %originalBBpart21521
  %5678 = load i32, i32* @x.19
  %5679 = load i32, i32* @y.20
  %5680 = sub i32 %5678, 1
  %5681 = mul i32 %5678, %5680
  %5682 = urem i32 %5681, 2
  %5683 = icmp eq i32 %5682, 0
  %5684 = icmp slt i32 %5679, 10
  %5685 = or i1 %5683, %5684
  br i1 %5685, label %originalBB1523, label %originalBB1523alteredBB

originalBB1523:                                   ; preds = %5677, %originalBB1523alteredBB
  %5686 = load i8*, i8** %11, align 8, !dbg !1935
  %5687 = load i64, i64* %21, align 8, !dbg !1935
  %5688 = getelementptr inbounds i8, i8* %5686, i64 %5687, !dbg !1935
  store i8 92, i8* %5688, align 1, !dbg !1935
  %5689 = load i32, i32* @x.19
  %5690 = load i32, i32* @y.20
  %5691 = sub i32 %5689, 1
  %5692 = mul i32 %5689, %5691
  %5693 = urem i32 %5692, 2
  %5694 = icmp eq i32 %5693, 0
  %5695 = icmp slt i32 %5690, 10
  %5696 = or i1 %5694, %5695
  br i1 %5696, label %originalBBpart21525, label %originalBB1523alteredBB

originalBBpart21525:                              ; preds = %originalBB1523
  br label %5697, !dbg !1935

5697:                                             ; preds = %originalBBpart21525, %originalBBpart21521
  %5698 = load i32, i32* @x.19
  %5699 = load i32, i32* @y.20
  %5700 = sub i32 %5698, 1
  %5701 = mul i32 %5698, %5700
  %5702 = urem i32 %5701, 2
  %5703 = icmp eq i32 %5702, 0
  %5704 = icmp slt i32 %5699, 10
  %5705 = or i1 %5703, %5704
  br i1 %5705, label %originalBB1527, label %originalBB1527alteredBB

originalBB1527:                                   ; preds = %5697, %originalBB1527alteredBB
  %5706 = load i64, i64* %21, align 8, !dbg !1938
  %5707 = add i64 %5706, 1, !dbg !1938
  store i64 %5707, i64* %21, align 8, !dbg !1938
  %5708 = load i32, i32* @x.19
  %5709 = load i32, i32* @y.20
  %5710 = sub i32 %5708, 1
  %5711 = mul i32 %5708, %5710
  %5712 = urem i32 %5711, 2
  %5713 = icmp eq i32 %5712, 0
  %5714 = icmp slt i32 %5709, 10
  %5715 = or i1 %5713, %5714
  br i1 %5715, label %originalBBpart21540, label %originalBB1527alteredBB

originalBBpart21540:                              ; preds = %originalBB1527
  br label %5716, !dbg !1938

5716:                                             ; preds = %originalBBpart21540
  %5717 = load i32, i32* @x.19
  %5718 = load i32, i32* @y.20
  %5719 = sub i32 %5717, 1
  %5720 = mul i32 %5717, %5719
  %5721 = urem i32 %5720, 2
  %5722 = icmp eq i32 %5721, 0
  %5723 = icmp slt i32 %5718, 10
  %5724 = or i1 %5722, %5723
  br i1 %5724, label %originalBB1542, label %originalBB1542alteredBB

originalBB1542:                                   ; preds = %5716, %originalBB1542alteredBB
  %5725 = load i32, i32* @x.19
  %5726 = load i32, i32* @y.20
  %5727 = sub i32 %5725, 1
  %5728 = mul i32 %5725, %5727
  %5729 = urem i32 %5728, 2
  %5730 = icmp eq i32 %5729, 0
  %5731 = icmp slt i32 %5726, 10
  %5732 = or i1 %5730, %5731
  br i1 %5732, label %originalBBpart21544, label %originalBB1542alteredBB

originalBBpart21544:                              ; preds = %originalBB1542
  br label %5733, !dbg !1918

5733:                                             ; preds = %originalBBpart21544
  %5734 = load i32, i32* @x.19
  %5735 = load i32, i32* @y.20
  %5736 = sub i32 %5734, 1
  %5737 = mul i32 %5734, %5736
  %5738 = urem i32 %5737, 2
  %5739 = icmp eq i32 %5738, 0
  %5740 = icmp slt i32 %5735, 10
  %5741 = or i1 %5739, %5740
  br i1 %5741, label %originalBB1546, label %originalBB1546alteredBB

originalBB1546:                                   ; preds = %5733, %originalBB1546alteredBB
  %5742 = load i32, i32* @x.19
  %5743 = load i32, i32* @y.20
  %5744 = sub i32 %5742, 1
  %5745 = mul i32 %5742, %5744
  %5746 = urem i32 %5745, 2
  %5747 = icmp eq i32 %5746, 0
  %5748 = icmp slt i32 %5743, 10
  %5749 = or i1 %5747, %5748
  br i1 %5749, label %originalBBpart21548, label %originalBB1546alteredBB

originalBBpart21548:                              ; preds = %originalBB1546
  br label %5750, !dbg !1918

5750:                                             ; preds = %originalBBpart21548, %originalBBpart21434, %originalBBpart21406, %originalBBpart2682, %originalBBpart2666
  call void @llvm.dbg.label(metadata !1939), !dbg !1940
  %5751 = load i32, i32* @x.19
  %5752 = load i32, i32* @y.20
  %5753 = sub i32 %5751, 1
  %5754 = mul i32 %5751, %5753
  %5755 = urem i32 %5754, 2
  %5756 = icmp eq i32 %5755, 0
  %5757 = icmp slt i32 %5752, 10
  %5758 = or i1 %5756, %5757
  br i1 %5758, label %originalBB1550, label %originalBB1550alteredBB

originalBB1550:                                   ; preds = %5750, %originalBB1550alteredBB
  %5759 = load i32, i32* @x.19
  %5760 = load i32, i32* @y.20
  %5761 = sub i32 %5759, 1
  %5762 = mul i32 %5759, %5761
  %5763 = urem i32 %5762, 2
  %5764 = icmp eq i32 %5763, 0
  %5765 = icmp slt i32 %5760, 10
  %5766 = or i1 %5764, %5765
  br i1 %5766, label %originalBBpart21552, label %originalBB1550alteredBB

originalBBpart21552:                              ; preds = %originalBB1550
  br label %5767, !dbg !1941

5767:                                             ; preds = %originalBBpart21552
  %5768 = load i32, i32* @x.19
  %5769 = load i32, i32* @y.20
  %5770 = sub i32 %5768, 1
  %5771 = mul i32 %5768, %5770
  %5772 = urem i32 %5771, 2
  %5773 = icmp eq i32 %5772, 0
  %5774 = icmp slt i32 %5769, 10
  %5775 = or i1 %5773, %5774
  br i1 %5775, label %originalBB1554, label %originalBB1554alteredBB

originalBB1554:                                   ; preds = %5767, %originalBB1554alteredBB
  %5776 = load i8, i8* %28, align 1, !dbg !1942
  %5777 = trunc i8 %5776 to i1, !dbg !1942
  %5778 = load i32, i32* @x.19
  %5779 = load i32, i32* @y.20
  %5780 = sub i32 %5778, 1
  %5781 = mul i32 %5778, %5780
  %5782 = urem i32 %5781, 2
  %5783 = icmp eq i32 %5782, 0
  %5784 = icmp slt i32 %5779, 10
  %5785 = or i1 %5783, %5784
  br i1 %5785, label %originalBBpart21556, label %originalBB1554alteredBB

originalBBpart21556:                              ; preds = %originalBB1554
  br i1 %5777, label %5786, label %5974, !dbg !1942

5786:                                             ; preds = %originalBBpart21556
  %5787 = load i32, i32* @x.19
  %5788 = load i32, i32* @y.20
  %5789 = sub i32 %5787, 1
  %5790 = mul i32 %5787, %5789
  %5791 = urem i32 %5790, 2
  %5792 = icmp eq i32 %5791, 0
  %5793 = icmp slt i32 %5788, 10
  %5794 = or i1 %5792, %5793
  br i1 %5794, label %originalBB1558, label %originalBB1558alteredBB

originalBB1558:                                   ; preds = %5786, %originalBB1558alteredBB
  %5795 = load i8, i8* %34, align 1, !dbg !1942
  %5796 = trunc i8 %5795 to i1, !dbg !1942
  %5797 = load i32, i32* @x.19
  %5798 = load i32, i32* @y.20
  %5799 = sub i32 %5797, 1
  %5800 = mul i32 %5797, %5799
  %5801 = urem i32 %5800, 2
  %5802 = icmp eq i32 %5801, 0
  %5803 = icmp slt i32 %5798, 10
  %5804 = or i1 %5802, %5803
  br i1 %5804, label %originalBBpart21560, label %originalBB1558alteredBB

originalBBpart21560:                              ; preds = %originalBB1558
  br i1 %5796, label %5974, label %5805, !dbg !1945

5805:                                             ; preds = %originalBBpart21560
  %5806 = load i32, i32* @x.19
  %5807 = load i32, i32* @y.20
  %5808 = sub i32 %5806, 1
  %5809 = mul i32 %5806, %5808
  %5810 = urem i32 %5809, 2
  %5811 = icmp eq i32 %5810, 0
  %5812 = icmp slt i32 %5807, 10
  %5813 = or i1 %5811, %5812
  br i1 %5813, label %originalBB1562, label %originalBB1562alteredBB

originalBB1562:                                   ; preds = %5805, %originalBB1562alteredBB
  %5814 = load i32, i32* @x.19
  %5815 = load i32, i32* @y.20
  %5816 = sub i32 %5814, 1
  %5817 = mul i32 %5814, %5816
  %5818 = urem i32 %5817, 2
  %5819 = icmp eq i32 %5818, 0
  %5820 = icmp slt i32 %5815, 10
  %5821 = or i1 %5819, %5820
  br i1 %5821, label %originalBBpart21564, label %originalBB1562alteredBB

originalBBpart21564:                              ; preds = %originalBB1562
  br label %5822, !dbg !1946

5822:                                             ; preds = %originalBBpart21564
  %5823 = load i32, i32* @x.19
  %5824 = load i32, i32* @y.20
  %5825 = sub i32 %5823, 1
  %5826 = mul i32 %5823, %5825
  %5827 = urem i32 %5826, 2
  %5828 = icmp eq i32 %5827, 0
  %5829 = icmp slt i32 %5824, 10
  %5830 = or i1 %5828, %5829
  br i1 %5830, label %originalBB1566, label %originalBB1566alteredBB

originalBB1566:                                   ; preds = %5822, %originalBB1566alteredBB
  %5831 = load i64, i64* %21, align 8, !dbg !1948
  %5832 = load i64, i64* %12, align 8, !dbg !1948
  %5833 = icmp ult i64 %5831, %5832, !dbg !1948
  %5834 = load i32, i32* @x.19
  %5835 = load i32, i32* @y.20
  %5836 = sub i32 %5834, 1
  %5837 = mul i32 %5834, %5836
  %5838 = urem i32 %5837, 2
  %5839 = icmp eq i32 %5838, 0
  %5840 = icmp slt i32 %5835, 10
  %5841 = or i1 %5839, %5840
  br i1 %5841, label %originalBBpart21568, label %originalBB1566alteredBB

originalBBpart21568:                              ; preds = %originalBB1566
  br i1 %5833, label %5842, label %5862, !dbg !1951

5842:                                             ; preds = %originalBBpart21568
  %5843 = load i32, i32* @x.19
  %5844 = load i32, i32* @y.20
  %5845 = sub i32 %5843, 1
  %5846 = mul i32 %5843, %5845
  %5847 = urem i32 %5846, 2
  %5848 = icmp eq i32 %5847, 0
  %5849 = icmp slt i32 %5844, 10
  %5850 = or i1 %5848, %5849
  br i1 %5850, label %originalBB1570, label %originalBB1570alteredBB

originalBB1570:                                   ; preds = %5842, %originalBB1570alteredBB
  %5851 = load i8*, i8** %11, align 8, !dbg !1948
  %5852 = load i64, i64* %21, align 8, !dbg !1948
  %5853 = getelementptr inbounds i8, i8* %5851, i64 %5852, !dbg !1948
  store i8 39, i8* %5853, align 1, !dbg !1948
  %5854 = load i32, i32* @x.19
  %5855 = load i32, i32* @y.20
  %5856 = sub i32 %5854, 1
  %5857 = mul i32 %5854, %5856
  %5858 = urem i32 %5857, 2
  %5859 = icmp eq i32 %5858, 0
  %5860 = icmp slt i32 %5855, 10
  %5861 = or i1 %5859, %5860
  br i1 %5861, label %originalBBpart21572, label %originalBB1570alteredBB

originalBBpart21572:                              ; preds = %originalBB1570
  br label %5862, !dbg !1948

5862:                                             ; preds = %originalBBpart21572, %originalBBpart21568
  %5863 = load i32, i32* @x.19
  %5864 = load i32, i32* @y.20
  %5865 = sub i32 %5863, 1
  %5866 = mul i32 %5863, %5865
  %5867 = urem i32 %5866, 2
  %5868 = icmp eq i32 %5867, 0
  %5869 = icmp slt i32 %5864, 10
  %5870 = or i1 %5868, %5869
  br i1 %5870, label %originalBB1574, label %originalBB1574alteredBB

originalBB1574:                                   ; preds = %5862, %originalBB1574alteredBB
  %5871 = load i64, i64* %21, align 8, !dbg !1951
  %5872 = add i64 %5871, 1, !dbg !1951
  store i64 %5872, i64* %21, align 8, !dbg !1951
  %5873 = load i32, i32* @x.19
  %5874 = load i32, i32* @y.20
  %5875 = sub i32 %5873, 1
  %5876 = mul i32 %5873, %5875
  %5877 = urem i32 %5876, 2
  %5878 = icmp eq i32 %5877, 0
  %5879 = icmp slt i32 %5874, 10
  %5880 = or i1 %5878, %5879
  br i1 %5880, label %originalBBpart21587, label %originalBB1574alteredBB

originalBBpart21587:                              ; preds = %originalBB1574
  br label %5881, !dbg !1951

5881:                                             ; preds = %originalBBpart21587
  %5882 = load i32, i32* @x.19
  %5883 = load i32, i32* @y.20
  %5884 = sub i32 %5882, 1
  %5885 = mul i32 %5882, %5884
  %5886 = urem i32 %5885, 2
  %5887 = icmp eq i32 %5886, 0
  %5888 = icmp slt i32 %5883, 10
  %5889 = or i1 %5887, %5888
  br i1 %5889, label %originalBB1589, label %originalBB1589alteredBB

originalBB1589:                                   ; preds = %5881, %originalBB1589alteredBB
  %5890 = load i32, i32* @x.19
  %5891 = load i32, i32* @y.20
  %5892 = sub i32 %5890, 1
  %5893 = mul i32 %5890, %5892
  %5894 = urem i32 %5893, 2
  %5895 = icmp eq i32 %5894, 0
  %5896 = icmp slt i32 %5891, 10
  %5897 = or i1 %5895, %5896
  br i1 %5897, label %originalBBpart21591, label %originalBB1589alteredBB

originalBBpart21591:                              ; preds = %originalBB1589
  br label %5898, !dbg !1946

5898:                                             ; preds = %originalBBpart21591
  %5899 = load i32, i32* @x.19
  %5900 = load i32, i32* @y.20
  %5901 = sub i32 %5899, 1
  %5902 = mul i32 %5899, %5901
  %5903 = urem i32 %5902, 2
  %5904 = icmp eq i32 %5903, 0
  %5905 = icmp slt i32 %5900, 10
  %5906 = or i1 %5904, %5905
  br i1 %5906, label %originalBB1593, label %originalBB1593alteredBB

originalBB1593:                                   ; preds = %5898, %originalBB1593alteredBB
  %5907 = load i64, i64* %21, align 8, !dbg !1952
  %5908 = load i64, i64* %12, align 8, !dbg !1952
  %5909 = icmp ult i64 %5907, %5908, !dbg !1952
  %5910 = load i32, i32* @x.19
  %5911 = load i32, i32* @y.20
  %5912 = sub i32 %5910, 1
  %5913 = mul i32 %5910, %5912
  %5914 = urem i32 %5913, 2
  %5915 = icmp eq i32 %5914, 0
  %5916 = icmp slt i32 %5911, 10
  %5917 = or i1 %5915, %5916
  br i1 %5917, label %originalBBpart21595, label %originalBB1593alteredBB

originalBBpart21595:                              ; preds = %originalBB1593
  br i1 %5909, label %5918, label %5938, !dbg !1955

5918:                                             ; preds = %originalBBpart21595
  %5919 = load i32, i32* @x.19
  %5920 = load i32, i32* @y.20
  %5921 = sub i32 %5919, 1
  %5922 = mul i32 %5919, %5921
  %5923 = urem i32 %5922, 2
  %5924 = icmp eq i32 %5923, 0
  %5925 = icmp slt i32 %5920, 10
  %5926 = or i1 %5924, %5925
  br i1 %5926, label %originalBB1597, label %originalBB1597alteredBB

originalBB1597:                                   ; preds = %5918, %originalBB1597alteredBB
  %5927 = load i8*, i8** %11, align 8, !dbg !1952
  %5928 = load i64, i64* %21, align 8, !dbg !1952
  %5929 = getelementptr inbounds i8, i8* %5927, i64 %5928, !dbg !1952
  store i8 39, i8* %5929, align 1, !dbg !1952
  %5930 = load i32, i32* @x.19
  %5931 = load i32, i32* @y.20
  %5932 = sub i32 %5930, 1
  %5933 = mul i32 %5930, %5932
  %5934 = urem i32 %5933, 2
  %5935 = icmp eq i32 %5934, 0
  %5936 = icmp slt i32 %5931, 10
  %5937 = or i1 %5935, %5936
  br i1 %5937, label %originalBBpart21599, label %originalBB1597alteredBB

originalBBpart21599:                              ; preds = %originalBB1597
  br label %5938, !dbg !1952

5938:                                             ; preds = %originalBBpart21599, %originalBBpart21595
  %5939 = load i32, i32* @x.19
  %5940 = load i32, i32* @y.20
  %5941 = sub i32 %5939, 1
  %5942 = mul i32 %5939, %5941
  %5943 = urem i32 %5942, 2
  %5944 = icmp eq i32 %5943, 0
  %5945 = icmp slt i32 %5940, 10
  %5946 = or i1 %5944, %5945
  br i1 %5946, label %originalBB1601, label %originalBB1601alteredBB

originalBB1601:                                   ; preds = %5938, %originalBB1601alteredBB
  %5947 = load i64, i64* %21, align 8, !dbg !1955
  %5948 = add i64 %5947, 1, !dbg !1955
  store i64 %5948, i64* %21, align 8, !dbg !1955
  %5949 = load i32, i32* @x.19
  %5950 = load i32, i32* @y.20
  %5951 = sub i32 %5949, 1
  %5952 = mul i32 %5949, %5951
  %5953 = urem i32 %5952, 2
  %5954 = icmp eq i32 %5953, 0
  %5955 = icmp slt i32 %5950, 10
  %5956 = or i1 %5954, %5955
  br i1 %5956, label %originalBBpart21619, label %originalBB1601alteredBB

originalBBpart21619:                              ; preds = %originalBB1601
  br label %5957, !dbg !1955

5957:                                             ; preds = %originalBBpart21619
  %5958 = load i32, i32* @x.19
  %5959 = load i32, i32* @y.20
  %5960 = sub i32 %5958, 1
  %5961 = mul i32 %5958, %5960
  %5962 = urem i32 %5961, 2
  %5963 = icmp eq i32 %5962, 0
  %5964 = icmp slt i32 %5959, 10
  %5965 = or i1 %5963, %5964
  br i1 %5965, label %originalBB1621, label %originalBB1621alteredBB

originalBB1621:                                   ; preds = %5957, %originalBB1621alteredBB
  store i8 0, i8* %28, align 1, !dbg !1946
  %5966 = load i32, i32* @x.19
  %5967 = load i32, i32* @y.20
  %5968 = sub i32 %5966, 1
  %5969 = mul i32 %5966, %5968
  %5970 = urem i32 %5969, 2
  %5971 = icmp eq i32 %5970, 0
  %5972 = icmp slt i32 %5967, 10
  %5973 = or i1 %5971, %5972
  br i1 %5973, label %originalBBpart21623, label %originalBB1621alteredBB

originalBBpart21623:                              ; preds = %originalBB1621
  br label %5974, !dbg !1946

5974:                                             ; preds = %originalBBpart21623, %originalBBpart21560, %originalBBpart21556
  %5975 = load i32, i32* @x.19
  %5976 = load i32, i32* @y.20
  %5977 = sub i32 %5975, 1
  %5978 = mul i32 %5975, %5977
  %5979 = urem i32 %5978, 2
  %5980 = icmp eq i32 %5979, 0
  %5981 = icmp slt i32 %5976, 10
  %5982 = or i1 %5980, %5981
  br i1 %5982, label %originalBB1625, label %originalBB1625alteredBB

originalBB1625:                                   ; preds = %5974, %originalBB1625alteredBB
  %5983 = load i32, i32* @x.19
  %5984 = load i32, i32* @y.20
  %5985 = sub i32 %5983, 1
  %5986 = mul i32 %5983, %5985
  %5987 = urem i32 %5986, 2
  %5988 = icmp eq i32 %5987, 0
  %5989 = icmp slt i32 %5984, 10
  %5990 = or i1 %5988, %5989
  br i1 %5990, label %originalBBpart21627, label %originalBB1625alteredBB

originalBBpart21627:                              ; preds = %originalBB1625
  br label %5991, !dbg !1945

5991:                                             ; preds = %originalBBpart21627
  %5992 = load i32, i32* @x.19
  %5993 = load i32, i32* @y.20
  %5994 = sub i32 %5992, 1
  %5995 = mul i32 %5992, %5994
  %5996 = urem i32 %5995, 2
  %5997 = icmp eq i32 %5996, 0
  %5998 = icmp slt i32 %5993, 10
  %5999 = or i1 %5997, %5998
  br i1 %5999, label %originalBB1629, label %originalBB1629alteredBB

originalBB1629:                                   ; preds = %5991, %originalBB1629alteredBB
  %6000 = load i32, i32* @x.19
  %6001 = load i32, i32* @y.20
  %6002 = sub i32 %6000, 1
  %6003 = mul i32 %6000, %6002
  %6004 = urem i32 %6003, 2
  %6005 = icmp eq i32 %6004, 0
  %6006 = icmp slt i32 %6001, 10
  %6007 = or i1 %6005, %6006
  br i1 %6007, label %originalBBpart21631, label %originalBB1629alteredBB

originalBBpart21631:                              ; preds = %originalBB1629
  br label %6008, !dbg !1956

6008:                                             ; preds = %originalBBpart21631
  %6009 = load i32, i32* @x.19
  %6010 = load i32, i32* @y.20
  %6011 = sub i32 %6009, 1
  %6012 = mul i32 %6009, %6011
  %6013 = urem i32 %6012, 2
  %6014 = icmp eq i32 %6013, 0
  %6015 = icmp slt i32 %6010, 10
  %6016 = or i1 %6014, %6015
  br i1 %6016, label %originalBB1633, label %originalBB1633alteredBB

originalBB1633:                                   ; preds = %6008, %originalBB1633alteredBB
  %6017 = load i64, i64* %21, align 8, !dbg !1957
  %6018 = load i64, i64* %12, align 8, !dbg !1957
  %6019 = icmp ult i64 %6017, %6018, !dbg !1957
  %6020 = load i32, i32* @x.19
  %6021 = load i32, i32* @y.20
  %6022 = sub i32 %6020, 1
  %6023 = mul i32 %6020, %6022
  %6024 = urem i32 %6023, 2
  %6025 = icmp eq i32 %6024, 0
  %6026 = icmp slt i32 %6021, 10
  %6027 = or i1 %6025, %6026
  br i1 %6027, label %originalBBpart21635, label %originalBB1633alteredBB

originalBBpart21635:                              ; preds = %originalBB1633
  br i1 %6019, label %6028, label %6049, !dbg !1960

6028:                                             ; preds = %originalBBpart21635
  %6029 = load i32, i32* @x.19
  %6030 = load i32, i32* @y.20
  %6031 = sub i32 %6029, 1
  %6032 = mul i32 %6029, %6031
  %6033 = urem i32 %6032, 2
  %6034 = icmp eq i32 %6033, 0
  %6035 = icmp slt i32 %6030, 10
  %6036 = or i1 %6034, %6035
  br i1 %6036, label %originalBB1637, label %originalBB1637alteredBB

originalBB1637:                                   ; preds = %6028, %originalBB1637alteredBB
  %6037 = load i8, i8* %31, align 1, !dbg !1957
  %6038 = load i8*, i8** %11, align 8, !dbg !1957
  %6039 = load i64, i64* %21, align 8, !dbg !1957
  %6040 = getelementptr inbounds i8, i8* %6038, i64 %6039, !dbg !1957
  store i8 %6037, i8* %6040, align 1, !dbg !1957
  %6041 = load i32, i32* @x.19
  %6042 = load i32, i32* @y.20
  %6043 = sub i32 %6041, 1
  %6044 = mul i32 %6041, %6043
  %6045 = urem i32 %6044, 2
  %6046 = icmp eq i32 %6045, 0
  %6047 = icmp slt i32 %6042, 10
  %6048 = or i1 %6046, %6047
  br i1 %6048, label %originalBBpart21639, label %originalBB1637alteredBB

originalBBpart21639:                              ; preds = %originalBB1637
  br label %6049, !dbg !1957

6049:                                             ; preds = %originalBBpart21639, %originalBBpart21635
  %6050 = load i32, i32* @x.19
  %6051 = load i32, i32* @y.20
  %6052 = sub i32 %6050, 1
  %6053 = mul i32 %6050, %6052
  %6054 = urem i32 %6053, 2
  %6055 = icmp eq i32 %6054, 0
  %6056 = icmp slt i32 %6051, 10
  %6057 = or i1 %6055, %6056
  br i1 %6057, label %originalBB1641, label %originalBB1641alteredBB

originalBB1641:                                   ; preds = %6049, %originalBB1641alteredBB
  %6058 = load i64, i64* %21, align 8, !dbg !1960
  %6059 = add i64 %6058, 1, !dbg !1960
  store i64 %6059, i64* %21, align 8, !dbg !1960
  %6060 = load i32, i32* @x.19
  %6061 = load i32, i32* @y.20
  %6062 = sub i32 %6060, 1
  %6063 = mul i32 %6060, %6062
  %6064 = urem i32 %6063, 2
  %6065 = icmp eq i32 %6064, 0
  %6066 = icmp slt i32 %6061, 10
  %6067 = or i1 %6065, %6066
  br i1 %6067, label %originalBBpart21651, label %originalBB1641alteredBB

originalBBpart21651:                              ; preds = %originalBB1641
  br label %6068, !dbg !1960

6068:                                             ; preds = %originalBBpart21651
  %6069 = load i32, i32* @x.19
  %6070 = load i32, i32* @y.20
  %6071 = sub i32 %6069, 1
  %6072 = mul i32 %6069, %6071
  %6073 = urem i32 %6072, 2
  %6074 = icmp eq i32 %6073, 0
  %6075 = icmp slt i32 %6070, 10
  %6076 = or i1 %6074, %6075
  br i1 %6076, label %originalBB1653, label %originalBB1653alteredBB

originalBB1653:                                   ; preds = %6068, %originalBB1653alteredBB
  %6077 = load i8, i8* %35, align 1, !dbg !1961
  %6078 = trunc i8 %6077 to i1, !dbg !1961
  %6079 = load i32, i32* @x.19
  %6080 = load i32, i32* @y.20
  %6081 = sub i32 %6079, 1
  %6082 = mul i32 %6079, %6081
  %6083 = urem i32 %6082, 2
  %6084 = icmp eq i32 %6083, 0
  %6085 = icmp slt i32 %6080, 10
  %6086 = or i1 %6084, %6085
  br i1 %6086, label %originalBBpart21655, label %originalBB1653alteredBB

originalBBpart21655:                              ; preds = %originalBB1653
  br i1 %6078, label %6104, label %6087, !dbg !1963

6087:                                             ; preds = %originalBBpart21655
  %6088 = load i32, i32* @x.19
  %6089 = load i32, i32* @y.20
  %6090 = sub i32 %6088, 1
  %6091 = mul i32 %6088, %6090
  %6092 = urem i32 %6091, 2
  %6093 = icmp eq i32 %6092, 0
  %6094 = icmp slt i32 %6089, 10
  %6095 = or i1 %6093, %6094
  br i1 %6095, label %originalBB1657, label %originalBB1657alteredBB

originalBB1657:                                   ; preds = %6087, %originalBB1657alteredBB
  store i8 0, i8* %30, align 1, !dbg !1964
  %6096 = load i32, i32* @x.19
  %6097 = load i32, i32* @y.20
  %6098 = sub i32 %6096, 1
  %6099 = mul i32 %6096, %6098
  %6100 = urem i32 %6099, 2
  %6101 = icmp eq i32 %6100, 0
  %6102 = icmp slt i32 %6097, 10
  %6103 = or i1 %6101, %6102
  br i1 %6103, label %originalBBpart21659, label %originalBB1657alteredBB

originalBBpart21659:                              ; preds = %originalBB1657
  br label %6104, !dbg !1965

6104:                                             ; preds = %originalBBpart21659, %originalBBpart21655
  %6105 = load i32, i32* @x.19
  %6106 = load i32, i32* @y.20
  %6107 = sub i32 %6105, 1
  %6108 = mul i32 %6105, %6107
  %6109 = urem i32 %6108, 2
  %6110 = icmp eq i32 %6109, 0
  %6111 = icmp slt i32 %6106, 10
  %6112 = or i1 %6110, %6111
  br i1 %6112, label %originalBB1661, label %originalBB1661alteredBB

originalBB1661:                                   ; preds = %6104, %originalBB1661alteredBB
  %6113 = load i32, i32* @x.19
  %6114 = load i32, i32* @y.20
  %6115 = sub i32 %6113, 1
  %6116 = mul i32 %6113, %6115
  %6117 = urem i32 %6116, 2
  %6118 = icmp eq i32 %6117, 0
  %6119 = icmp slt i32 %6114, 10
  %6120 = or i1 %6118, %6119
  br i1 %6120, label %originalBBpart21663, label %originalBB1661alteredBB

originalBBpart21663:                              ; preds = %originalBB1661
  br label %6121, !dbg !1966

6121:                                             ; preds = %originalBBpart21663, %originalBBpart2427
  %6122 = load i32, i32* @x.19
  %6123 = load i32, i32* @y.20
  %6124 = sub i32 %6122, 1
  %6125 = mul i32 %6122, %6124
  %6126 = urem i32 %6125, 2
  %6127 = icmp eq i32 %6126, 0
  %6128 = icmp slt i32 %6123, 10
  %6129 = or i1 %6127, %6128
  br i1 %6129, label %originalBB1665, label %originalBB1665alteredBB

originalBB1665:                                   ; preds = %6121, %originalBB1665alteredBB
  %6130 = load i64, i64* %20, align 8, !dbg !1967
  %6131 = add i64 %6130, 1, !dbg !1967
  store i64 %6131, i64* %20, align 8, !dbg !1967
  %6132 = load i32, i32* @x.19
  %6133 = load i32, i32* @y.20
  %6134 = sub i32 %6132, 1
  %6135 = mul i32 %6132, %6134
  %6136 = urem i32 %6135, 2
  %6137 = icmp eq i32 %6136, 0
  %6138 = icmp slt i32 %6133, 10
  %6139 = or i1 %6137, %6138
  br i1 %6139, label %originalBBpart21684, label %originalBB1665alteredBB

originalBBpart21684:                              ; preds = %originalBB1665
  br label %698, !dbg !1968, !llvm.loop !1969

6140:                                             ; preds = %originalBBpart2171
  %6141 = load i32, i32* @x.19
  %6142 = load i32, i32* @y.20
  %6143 = sub i32 %6141, 1
  %6144 = mul i32 %6141, %6143
  %6145 = urem i32 %6144, 2
  %6146 = icmp eq i32 %6145, 0
  %6147 = icmp slt i32 %6142, 10
  %6148 = or i1 %6146, %6147
  br i1 %6148, label %originalBB1686, label %originalBB1686alteredBB

originalBB1686:                                   ; preds = %6140, %originalBB1686alteredBB
  %6149 = load i64, i64* %21, align 8, !dbg !1971
  %6150 = icmp eq i64 %6149, 0, !dbg !1973
  %6151 = load i32, i32* @x.19
  %6152 = load i32, i32* @y.20
  %6153 = sub i32 %6151, 1
  %6154 = mul i32 %6151, %6153
  %6155 = urem i32 %6154, 2
  %6156 = icmp eq i32 %6155, 0
  %6157 = icmp slt i32 %6152, 10
  %6158 = or i1 %6156, %6157
  br i1 %6158, label %originalBBpart21688, label %originalBB1686alteredBB

originalBBpart21688:                              ; preds = %originalBB1686
  br i1 %6150, label %6159, label %6214, !dbg !1974

6159:                                             ; preds = %originalBBpart21688
  %6160 = load i32, i32* @x.19
  %6161 = load i32, i32* @y.20
  %6162 = sub i32 %6160, 1
  %6163 = mul i32 %6160, %6162
  %6164 = urem i32 %6163, 2
  %6165 = icmp eq i32 %6164, 0
  %6166 = icmp slt i32 %6161, 10
  %6167 = or i1 %6165, %6166
  br i1 %6167, label %originalBB1690, label %originalBB1690alteredBB

originalBB1690:                                   ; preds = %6159, %originalBB1690alteredBB
  %6168 = load i32, i32* %15, align 4, !dbg !1975
  %6169 = icmp eq i32 %6168, 2, !dbg !1976
  %6170 = load i32, i32* @x.19
  %6171 = load i32, i32* @y.20
  %6172 = sub i32 %6170, 1
  %6173 = mul i32 %6170, %6172
  %6174 = urem i32 %6173, 2
  %6175 = icmp eq i32 %6174, 0
  %6176 = icmp slt i32 %6171, 10
  %6177 = or i1 %6175, %6176
  br i1 %6177, label %originalBBpart21692, label %originalBB1690alteredBB

originalBBpart21692:                              ; preds = %originalBB1690
  br i1 %6169, label %6178, label %6214, !dbg !1977

6178:                                             ; preds = %originalBBpart21692
  %6179 = load i32, i32* @x.19
  %6180 = load i32, i32* @y.20
  %6181 = sub i32 %6179, 1
  %6182 = mul i32 %6179, %6181
  %6183 = urem i32 %6182, 2
  %6184 = icmp eq i32 %6183, 0
  %6185 = icmp slt i32 %6180, 10
  %6186 = or i1 %6184, %6185
  br i1 %6186, label %originalBB1694, label %originalBB1694alteredBB

originalBB1694:                                   ; preds = %6178, %originalBB1694alteredBB
  %6187 = load i8, i8* %27, align 1, !dbg !1978
  %6188 = trunc i8 %6187 to i1, !dbg !1978
  %6189 = load i32, i32* @x.19
  %6190 = load i32, i32* @y.20
  %6191 = sub i32 %6189, 1
  %6192 = mul i32 %6189, %6191
  %6193 = urem i32 %6192, 2
  %6194 = icmp eq i32 %6193, 0
  %6195 = icmp slt i32 %6190, 10
  %6196 = or i1 %6194, %6195
  br i1 %6196, label %originalBBpart21696, label %originalBB1694alteredBB

originalBBpart21696:                              ; preds = %originalBB1694
  br i1 %6188, label %6197, label %6214, !dbg !1979

6197:                                             ; preds = %originalBBpart21696
  %6198 = load i32, i32* @x.19
  %6199 = load i32, i32* @y.20
  %6200 = sub i32 %6198, 1
  %6201 = mul i32 %6198, %6200
  %6202 = urem i32 %6201, 2
  %6203 = icmp eq i32 %6202, 0
  %6204 = icmp slt i32 %6199, 10
  %6205 = or i1 %6203, %6204
  br i1 %6205, label %originalBB1698, label %originalBB1698alteredBB

originalBB1698:                                   ; preds = %6197, %originalBB1698alteredBB
  %6206 = load i32, i32* @x.19
  %6207 = load i32, i32* @y.20
  %6208 = sub i32 %6206, 1
  %6209 = mul i32 %6206, %6208
  %6210 = urem i32 %6209, 2
  %6211 = icmp eq i32 %6210, 0
  %6212 = icmp slt i32 %6207, 10
  %6213 = or i1 %6211, %6212
  br i1 %6213, label %originalBBpart21700, label %originalBB1698alteredBB

originalBBpart21700:                              ; preds = %originalBB1698
  br label %6590, !dbg !1980

6214:                                             ; preds = %originalBBpart21696, %originalBBpart21692, %originalBBpart21688
  %6215 = load i32, i32* @x.19
  %6216 = load i32, i32* @y.20
  %6217 = sub i32 %6215, 1
  %6218 = mul i32 %6215, %6217
  %6219 = urem i32 %6218, 2
  %6220 = icmp eq i32 %6219, 0
  %6221 = icmp slt i32 %6216, 10
  %6222 = or i1 %6220, %6221
  br i1 %6222, label %originalBB1702, label %originalBB1702alteredBB

originalBB1702:                                   ; preds = %6214, %originalBB1702alteredBB
  %6223 = load i32, i32* %15, align 4, !dbg !1981
  %6224 = icmp eq i32 %6223, 2, !dbg !1983
  %6225 = load i32, i32* @x.19
  %6226 = load i32, i32* @y.20
  %6227 = sub i32 %6225, 1
  %6228 = mul i32 %6225, %6227
  %6229 = urem i32 %6228, 2
  %6230 = icmp eq i32 %6229, 0
  %6231 = icmp slt i32 %6226, 10
  %6232 = or i1 %6230, %6231
  br i1 %6232, label %originalBBpart21704, label %originalBB1702alteredBB

originalBBpart21704:                              ; preds = %originalBB1702
  br i1 %6224, label %6233, label %6406, !dbg !1984

6233:                                             ; preds = %originalBBpart21704
  %6234 = load i32, i32* @x.19
  %6235 = load i32, i32* @y.20
  %6236 = sub i32 %6234, 1
  %6237 = mul i32 %6234, %6236
  %6238 = urem i32 %6237, 2
  %6239 = icmp eq i32 %6238, 0
  %6240 = icmp slt i32 %6235, 10
  %6241 = or i1 %6239, %6240
  br i1 %6241, label %originalBB1706, label %originalBB1706alteredBB

originalBB1706:                                   ; preds = %6233, %originalBB1706alteredBB
  %6242 = load i8, i8* %27, align 1, !dbg !1985
  %6243 = trunc i8 %6242 to i1, !dbg !1985
  %6244 = load i32, i32* @x.19
  %6245 = load i32, i32* @y.20
  %6246 = sub i32 %6244, 1
  %6247 = mul i32 %6244, %6246
  %6248 = urem i32 %6247, 2
  %6249 = icmp eq i32 %6248, 0
  %6250 = icmp slt i32 %6245, 10
  %6251 = or i1 %6249, %6250
  br i1 %6251, label %originalBBpart21708, label %originalBB1706alteredBB

originalBBpart21708:                              ; preds = %originalBB1706
  br i1 %6243, label %6406, label %6252, !dbg !1986

6252:                                             ; preds = %originalBBpart21708
  %6253 = load i32, i32* @x.19
  %6254 = load i32, i32* @y.20
  %6255 = sub i32 %6253, 1
  %6256 = mul i32 %6253, %6255
  %6257 = urem i32 %6256, 2
  %6258 = icmp eq i32 %6257, 0
  %6259 = icmp slt i32 %6254, 10
  %6260 = or i1 %6258, %6259
  br i1 %6260, label %originalBB1710, label %originalBB1710alteredBB

originalBB1710:                                   ; preds = %6252, %originalBB1710alteredBB
  %6261 = load i8, i8* %29, align 1, !dbg !1987
  %6262 = trunc i8 %6261 to i1, !dbg !1987
  %6263 = load i32, i32* @x.19
  %6264 = load i32, i32* @y.20
  %6265 = sub i32 %6263, 1
  %6266 = mul i32 %6263, %6265
  %6267 = urem i32 %6266, 2
  %6268 = icmp eq i32 %6267, 0
  %6269 = icmp slt i32 %6264, 10
  %6270 = or i1 %6268, %6269
  br i1 %6270, label %originalBBpart21712, label %originalBB1710alteredBB

originalBBpart21712:                              ; preds = %originalBB1710
  br i1 %6262, label %6271, label %6406, !dbg !1988

6271:                                             ; preds = %originalBBpart21712
  %6272 = load i32, i32* @x.19
  %6273 = load i32, i32* @y.20
  %6274 = sub i32 %6272, 1
  %6275 = mul i32 %6272, %6274
  %6276 = urem i32 %6275, 2
  %6277 = icmp eq i32 %6276, 0
  %6278 = icmp slt i32 %6273, 10
  %6279 = or i1 %6277, %6278
  br i1 %6279, label %originalBB1714, label %originalBB1714alteredBB

originalBB1714:                                   ; preds = %6271, %originalBB1714alteredBB
  %6280 = load i8, i8* %30, align 1, !dbg !1989
  %6281 = trunc i8 %6280 to i1, !dbg !1989
  %6282 = load i32, i32* @x.19
  %6283 = load i32, i32* @y.20
  %6284 = sub i32 %6282, 1
  %6285 = mul i32 %6282, %6284
  %6286 = urem i32 %6285, 2
  %6287 = icmp eq i32 %6286, 0
  %6288 = icmp slt i32 %6283, 10
  %6289 = or i1 %6287, %6288
  br i1 %6289, label %originalBBpart21716, label %originalBB1714alteredBB

originalBBpart21716:                              ; preds = %originalBB1714
  br i1 %6281, label %6290, label %6316, !dbg !1992

6290:                                             ; preds = %originalBBpart21716
  %6291 = load i32, i32* @x.19
  %6292 = load i32, i32* @y.20
  %6293 = sub i32 %6291, 1
  %6294 = mul i32 %6291, %6293
  %6295 = urem i32 %6294, 2
  %6296 = icmp eq i32 %6295, 0
  %6297 = icmp slt i32 %6292, 10
  %6298 = or i1 %6296, %6297
  br i1 %6298, label %originalBB1718, label %originalBB1718alteredBB

originalBB1718:                                   ; preds = %6290, %originalBB1718alteredBB
  %6299 = load i8*, i8** %11, align 8, !dbg !1993
  %6300 = load i64, i64* %22, align 8, !dbg !1994
  %6301 = load i8*, i8** %13, align 8, !dbg !1995
  %6302 = load i64, i64* %14, align 8, !dbg !1996
  %6303 = load i32, i32* %16, align 4, !dbg !1997
  %6304 = load i32*, i32** %17, align 8, !dbg !1998
  %6305 = load i8*, i8** %18, align 8, !dbg !1999
  %6306 = load i8*, i8** %19, align 8, !dbg !2000
  %6307 = call i64 @quotearg_buffer_restyled(i8* %6299, i64 %6300, i8* %6301, i64 %6302, i32 5, i32 %6303, i32* %6304, i8* %6305, i8* %6306), !dbg !2001
  store i64 %6307, i64* %10, align 8, !dbg !2002
  %6308 = load i32, i32* @x.19
  %6309 = load i32, i32* @y.20
  %6310 = sub i32 %6308, 1
  %6311 = mul i32 %6308, %6310
  %6312 = urem i32 %6311, 2
  %6313 = icmp eq i32 %6312, 0
  %6314 = icmp slt i32 %6309, 10
  %6315 = or i1 %6313, %6314
  br i1 %6315, label %originalBBpart21720, label %originalBB1718alteredBB

originalBBpart21720:                              ; preds = %originalBB1718
  br label %6656, !dbg !2002

6316:                                             ; preds = %originalBBpart21716
  %6317 = load i32, i32* @x.19
  %6318 = load i32, i32* @y.20
  %6319 = sub i32 %6317, 1
  %6320 = mul i32 %6317, %6319
  %6321 = urem i32 %6320, 2
  %6322 = icmp eq i32 %6321, 0
  %6323 = icmp slt i32 %6318, 10
  %6324 = or i1 %6322, %6323
  br i1 %6324, label %originalBB1722, label %originalBB1722alteredBB

originalBB1722:                                   ; preds = %6316, %originalBB1722alteredBB
  %6325 = load i64, i64* %12, align 8, !dbg !2003
  %6326 = icmp ne i64 %6325, 0, !dbg !2003
  %6327 = load i32, i32* @x.19
  %6328 = load i32, i32* @y.20
  %6329 = sub i32 %6327, 1
  %6330 = mul i32 %6327, %6329
  %6331 = urem i32 %6330, 2
  %6332 = icmp eq i32 %6331, 0
  %6333 = icmp slt i32 %6328, 10
  %6334 = or i1 %6332, %6333
  br i1 %6334, label %originalBBpart21724, label %originalBB1722alteredBB

originalBBpart21724:                              ; preds = %originalBB1722
  br i1 %6326, label %6372, label %6335, !dbg !2005

6335:                                             ; preds = %originalBBpart21724
  %6336 = load i32, i32* @x.19
  %6337 = load i32, i32* @y.20
  %6338 = sub i32 %6336, 1
  %6339 = mul i32 %6336, %6338
  %6340 = urem i32 %6339, 2
  %6341 = icmp eq i32 %6340, 0
  %6342 = icmp slt i32 %6337, 10
  %6343 = or i1 %6341, %6342
  br i1 %6343, label %originalBB1726, label %originalBB1726alteredBB

originalBB1726:                                   ; preds = %6335, %originalBB1726alteredBB
  %6344 = load i64, i64* %22, align 8, !dbg !2006
  %6345 = icmp ne i64 %6344, 0, !dbg !2006
  %6346 = load i32, i32* @x.19
  %6347 = load i32, i32* @y.20
  %6348 = sub i32 %6346, 1
  %6349 = mul i32 %6346, %6348
  %6350 = urem i32 %6349, 2
  %6351 = icmp eq i32 %6350, 0
  %6352 = icmp slt i32 %6347, 10
  %6353 = or i1 %6351, %6352
  br i1 %6353, label %originalBBpart21728, label %originalBB1726alteredBB

originalBBpart21728:                              ; preds = %originalBB1726
  br i1 %6345, label %6354, label %6372, !dbg !2007

6354:                                             ; preds = %originalBBpart21728
  %6355 = load i32, i32* @x.19
  %6356 = load i32, i32* @y.20
  %6357 = sub i32 %6355, 1
  %6358 = mul i32 %6355, %6357
  %6359 = urem i32 %6358, 2
  %6360 = icmp eq i32 %6359, 0
  %6361 = icmp slt i32 %6356, 10
  %6362 = or i1 %6360, %6361
  br i1 %6362, label %originalBB1730, label %originalBB1730alteredBB

originalBB1730:                                   ; preds = %6354, %originalBB1730alteredBB
  %6363 = load i64, i64* %22, align 8, !dbg !2008
  store i64 %6363, i64* %12, align 8, !dbg !2010
  store i64 0, i64* %21, align 8, !dbg !2011
  %6364 = load i32, i32* @x.19
  %6365 = load i32, i32* @y.20
  %6366 = sub i32 %6364, 1
  %6367 = mul i32 %6364, %6366
  %6368 = urem i32 %6367, 2
  %6369 = icmp eq i32 %6368, 0
  %6370 = icmp slt i32 %6365, 10
  %6371 = or i1 %6369, %6370
  br i1 %6371, label %originalBBpart21732, label %originalBB1730alteredBB

originalBBpart21732:                              ; preds = %originalBB1730
  br label %50, !dbg !2012

6372:                                             ; preds = %originalBBpart21728, %originalBBpart21724
  %6373 = load i32, i32* @x.19
  %6374 = load i32, i32* @y.20
  %6375 = sub i32 %6373, 1
  %6376 = mul i32 %6373, %6375
  %6377 = urem i32 %6376, 2
  %6378 = icmp eq i32 %6377, 0
  %6379 = icmp slt i32 %6374, 10
  %6380 = or i1 %6378, %6379
  br i1 %6380, label %originalBB1734, label %originalBB1734alteredBB

originalBB1734:                                   ; preds = %6372, %originalBB1734alteredBB
  %6381 = load i32, i32* @x.19
  %6382 = load i32, i32* @y.20
  %6383 = sub i32 %6381, 1
  %6384 = mul i32 %6381, %6383
  %6385 = urem i32 %6384, 2
  %6386 = icmp eq i32 %6385, 0
  %6387 = icmp slt i32 %6382, 10
  %6388 = or i1 %6386, %6387
  br i1 %6388, label %originalBBpart21736, label %originalBB1734alteredBB

originalBBpart21736:                              ; preds = %originalBB1734
  br label %6389

6389:                                             ; preds = %originalBBpart21736
  %6390 = load i32, i32* @x.19
  %6391 = load i32, i32* @y.20
  %6392 = sub i32 %6390, 1
  %6393 = mul i32 %6390, %6392
  %6394 = urem i32 %6393, 2
  %6395 = icmp eq i32 %6394, 0
  %6396 = icmp slt i32 %6391, 10
  %6397 = or i1 %6395, %6396
  br i1 %6397, label %originalBB1738, label %originalBB1738alteredBB

originalBB1738:                                   ; preds = %6389, %originalBB1738alteredBB
  %6398 = load i32, i32* @x.19
  %6399 = load i32, i32* @y.20
  %6400 = sub i32 %6398, 1
  %6401 = mul i32 %6398, %6400
  %6402 = urem i32 %6401, 2
  %6403 = icmp eq i32 %6402, 0
  %6404 = icmp slt i32 %6399, 10
  %6405 = or i1 %6403, %6404
  br i1 %6405, label %originalBBpart21740, label %originalBB1738alteredBB

originalBBpart21740:                              ; preds = %originalBB1738
  br label %6406, !dbg !2013

6406:                                             ; preds = %originalBBpart21740, %originalBBpart21712, %originalBBpart21708, %originalBBpart21704
  %6407 = load i32, i32* @x.19
  %6408 = load i32, i32* @y.20
  %6409 = sub i32 %6407, 1
  %6410 = mul i32 %6407, %6409
  %6411 = urem i32 %6410, 2
  %6412 = icmp eq i32 %6411, 0
  %6413 = icmp slt i32 %6408, 10
  %6414 = or i1 %6412, %6413
  br i1 %6414, label %originalBB1742, label %originalBB1742alteredBB

originalBB1742:                                   ; preds = %6406, %originalBB1742alteredBB
  %6415 = load i8*, i8** %23, align 8, !dbg !2014
  %6416 = icmp ne i8* %6415, null, !dbg !2014
  %6417 = load i32, i32* @x.19
  %6418 = load i32, i32* @y.20
  %6419 = sub i32 %6417, 1
  %6420 = mul i32 %6417, %6419
  %6421 = urem i32 %6420, 2
  %6422 = icmp eq i32 %6421, 0
  %6423 = icmp slt i32 %6418, 10
  %6424 = or i1 %6422, %6423
  br i1 %6424, label %originalBBpart21744, label %originalBB1742alteredBB

originalBBpart21744:                              ; preds = %originalBB1742
  br i1 %6416, label %6425, label %6564, !dbg !2016

6425:                                             ; preds = %originalBBpart21744
  %6426 = load i32, i32* @x.19
  %6427 = load i32, i32* @y.20
  %6428 = sub i32 %6426, 1
  %6429 = mul i32 %6426, %6428
  %6430 = urem i32 %6429, 2
  %6431 = icmp eq i32 %6430, 0
  %6432 = icmp slt i32 %6427, 10
  %6433 = or i1 %6431, %6432
  br i1 %6433, label %originalBB1746, label %originalBB1746alteredBB

originalBB1746:                                   ; preds = %6425, %originalBB1746alteredBB
  %6434 = load i8, i8* %27, align 1, !dbg !2017
  %6435 = trunc i8 %6434 to i1, !dbg !2017
  %6436 = load i32, i32* @x.19
  %6437 = load i32, i32* @y.20
  %6438 = sub i32 %6436, 1
  %6439 = mul i32 %6436, %6438
  %6440 = urem i32 %6439, 2
  %6441 = icmp eq i32 %6440, 0
  %6442 = icmp slt i32 %6437, 10
  %6443 = or i1 %6441, %6442
  br i1 %6443, label %originalBBpart21748, label %originalBB1746alteredBB

originalBBpart21748:                              ; preds = %originalBB1746
  br i1 %6435, label %6564, label %6444, !dbg !2018

6444:                                             ; preds = %originalBBpart21748
  %6445 = load i32, i32* @x.19
  %6446 = load i32, i32* @y.20
  %6447 = sub i32 %6445, 1
  %6448 = mul i32 %6445, %6447
  %6449 = urem i32 %6448, 2
  %6450 = icmp eq i32 %6449, 0
  %6451 = icmp slt i32 %6446, 10
  %6452 = or i1 %6450, %6451
  br i1 %6452, label %originalBB1750, label %originalBB1750alteredBB

originalBB1750:                                   ; preds = %6444, %originalBB1750alteredBB
  %6453 = load i32, i32* @x.19
  %6454 = load i32, i32* @y.20
  %6455 = sub i32 %6453, 1
  %6456 = mul i32 %6453, %6455
  %6457 = urem i32 %6456, 2
  %6458 = icmp eq i32 %6457, 0
  %6459 = icmp slt i32 %6454, 10
  %6460 = or i1 %6458, %6459
  br i1 %6460, label %originalBBpart21752, label %originalBB1750alteredBB

originalBBpart21752:                              ; preds = %originalBB1750
  br label %6461, !dbg !2019

6461:                                             ; preds = %originalBBpart21780, %originalBBpart21752
  %6462 = load i32, i32* @x.19
  %6463 = load i32, i32* @y.20
  %6464 = sub i32 %6462, 1
  %6465 = mul i32 %6462, %6464
  %6466 = urem i32 %6465, 2
  %6467 = icmp eq i32 %6466, 0
  %6468 = icmp slt i32 %6463, 10
  %6469 = or i1 %6467, %6468
  br i1 %6469, label %originalBB1754, label %originalBB1754alteredBB

originalBB1754:                                   ; preds = %6461, %originalBB1754alteredBB
  %6470 = load i8*, i8** %23, align 8, !dbg !2020
  %6471 = load i8, i8* %6470, align 1, !dbg !2023
  %6472 = icmp ne i8 %6471, 0, !dbg !2024
  %6473 = load i32, i32* @x.19
  %6474 = load i32, i32* @y.20
  %6475 = sub i32 %6473, 1
  %6476 = mul i32 %6473, %6475
  %6477 = urem i32 %6476, 2
  %6478 = icmp eq i32 %6477, 0
  %6479 = icmp slt i32 %6474, 10
  %6480 = or i1 %6478, %6479
  br i1 %6480, label %originalBBpart21756, label %originalBB1754alteredBB

originalBBpart21756:                              ; preds = %originalBB1754
  br i1 %6472, label %6481, label %6563, !dbg !2024

6481:                                             ; preds = %originalBBpart21756
  br label %6482, !dbg !2025

6482:                                             ; preds = %6481
  %6483 = load i32, i32* @x.19
  %6484 = load i32, i32* @y.20
  %6485 = sub i32 %6483, 1
  %6486 = mul i32 %6483, %6485
  %6487 = urem i32 %6486, 2
  %6488 = icmp eq i32 %6487, 0
  %6489 = icmp slt i32 %6484, 10
  %6490 = or i1 %6488, %6489
  br i1 %6490, label %originalBB1758, label %originalBB1758alteredBB

originalBB1758:                                   ; preds = %6482, %originalBB1758alteredBB
  %6491 = load i64, i64* %21, align 8, !dbg !2026
  %6492 = load i64, i64* %12, align 8, !dbg !2026
  %6493 = icmp ult i64 %6491, %6492, !dbg !2026
  %6494 = load i32, i32* @x.19
  %6495 = load i32, i32* @y.20
  %6496 = sub i32 %6494, 1
  %6497 = mul i32 %6494, %6496
  %6498 = urem i32 %6497, 2
  %6499 = icmp eq i32 %6498, 0
  %6500 = icmp slt i32 %6495, 10
  %6501 = or i1 %6499, %6500
  br i1 %6501, label %originalBBpart21760, label %originalBB1758alteredBB

originalBBpart21760:                              ; preds = %originalBB1758
  br i1 %6493, label %6502, label %6508, !dbg !2029

6502:                                             ; preds = %originalBBpart21760
  %6503 = load i8*, i8** %23, align 8, !dbg !2026
  %6504 = load i8, i8* %6503, align 1, !dbg !2026
  %6505 = load i8*, i8** %11, align 8, !dbg !2026
  %6506 = load i64, i64* %21, align 8, !dbg !2026
  %6507 = getelementptr inbounds i8, i8* %6505, i64 %6506, !dbg !2026
  store i8 %6504, i8* %6507, align 1, !dbg !2026
  br label %6508, !dbg !2026

6508:                                             ; preds = %6502, %originalBBpart21760
  %6509 = load i32, i32* @x.19
  %6510 = load i32, i32* @y.20
  %6511 = sub i32 %6509, 1
  %6512 = mul i32 %6509, %6511
  %6513 = urem i32 %6512, 2
  %6514 = icmp eq i32 %6513, 0
  %6515 = icmp slt i32 %6510, 10
  %6516 = or i1 %6514, %6515
  br i1 %6516, label %originalBB1762, label %originalBB1762alteredBB

originalBB1762:                                   ; preds = %6508, %originalBB1762alteredBB
  %6517 = load i64, i64* %21, align 8, !dbg !2029
  %6518 = add i64 %6517, 1, !dbg !2029
  store i64 %6518, i64* %21, align 8, !dbg !2029
  %6519 = load i32, i32* @x.19
  %6520 = load i32, i32* @y.20
  %6521 = sub i32 %6519, 1
  %6522 = mul i32 %6519, %6521
  %6523 = urem i32 %6522, 2
  %6524 = icmp eq i32 %6523, 0
  %6525 = icmp slt i32 %6520, 10
  %6526 = or i1 %6524, %6525
  br i1 %6526, label %originalBBpart21772, label %originalBB1762alteredBB

originalBBpart21772:                              ; preds = %originalBB1762
  br label %6527, !dbg !2029

6527:                                             ; preds = %originalBBpart21772
  %6528 = load i32, i32* @x.19
  %6529 = load i32, i32* @y.20
  %6530 = sub i32 %6528, 1
  %6531 = mul i32 %6528, %6530
  %6532 = urem i32 %6531, 2
  %6533 = icmp eq i32 %6532, 0
  %6534 = icmp slt i32 %6529, 10
  %6535 = or i1 %6533, %6534
  br i1 %6535, label %originalBB1774, label %originalBB1774alteredBB

originalBB1774:                                   ; preds = %6527, %originalBB1774alteredBB
  %6536 = load i32, i32* @x.19
  %6537 = load i32, i32* @y.20
  %6538 = sub i32 %6536, 1
  %6539 = mul i32 %6536, %6538
  %6540 = urem i32 %6539, 2
  %6541 = icmp eq i32 %6540, 0
  %6542 = icmp slt i32 %6537, 10
  %6543 = or i1 %6541, %6542
  br i1 %6543, label %originalBBpart21776, label %originalBB1774alteredBB

originalBBpart21776:                              ; preds = %originalBB1774
  br label %6544, !dbg !2029

6544:                                             ; preds = %originalBBpart21776
  %6545 = load i32, i32* @x.19
  %6546 = load i32, i32* @y.20
  %6547 = sub i32 %6545, 1
  %6548 = mul i32 %6545, %6547
  %6549 = urem i32 %6548, 2
  %6550 = icmp eq i32 %6549, 0
  %6551 = icmp slt i32 %6546, 10
  %6552 = or i1 %6550, %6551
  br i1 %6552, label %originalBB1778, label %originalBB1778alteredBB

originalBB1778:                                   ; preds = %6544, %originalBB1778alteredBB
  %6553 = load i8*, i8** %23, align 8, !dbg !2030
  %6554 = getelementptr inbounds i8, i8* %6553, i32 1, !dbg !2030
  store i8* %6554, i8** %23, align 8, !dbg !2030
  %6555 = load i32, i32* @x.19
  %6556 = load i32, i32* @y.20
  %6557 = sub i32 %6555, 1
  %6558 = mul i32 %6555, %6557
  %6559 = urem i32 %6558, 2
  %6560 = icmp eq i32 %6559, 0
  %6561 = icmp slt i32 %6556, 10
  %6562 = or i1 %6560, %6561
  br i1 %6562, label %originalBBpart21780, label %originalBB1778alteredBB

originalBBpart21780:                              ; preds = %originalBB1778
  br label %6461, !dbg !2031, !llvm.loop !2032

6563:                                             ; preds = %originalBBpart21756
  br label %6564, !dbg !2033

6564:                                             ; preds = %6563, %originalBBpart21748, %originalBBpart21744
  %6565 = load i32, i32* @x.19
  %6566 = load i32, i32* @y.20
  %6567 = sub i32 %6565, 1
  %6568 = mul i32 %6565, %6567
  %6569 = urem i32 %6568, 2
  %6570 = icmp eq i32 %6569, 0
  %6571 = icmp slt i32 %6566, 10
  %6572 = or i1 %6570, %6571
  br i1 %6572, label %originalBB1782, label %originalBB1782alteredBB

originalBB1782:                                   ; preds = %6564, %originalBB1782alteredBB
  %6573 = load i64, i64* %21, align 8, !dbg !2034
  %6574 = load i64, i64* %12, align 8, !dbg !2036
  %6575 = icmp ult i64 %6573, %6574, !dbg !2037
  %6576 = load i32, i32* @x.19
  %6577 = load i32, i32* @y.20
  %6578 = sub i32 %6576, 1
  %6579 = mul i32 %6576, %6578
  %6580 = urem i32 %6579, 2
  %6581 = icmp eq i32 %6580, 0
  %6582 = icmp slt i32 %6577, 10
  %6583 = or i1 %6581, %6582
  br i1 %6583, label %originalBBpart21784, label %originalBB1782alteredBB

originalBBpart21784:                              ; preds = %originalBB1782
  br i1 %6575, label %6584, label %6588, !dbg !2038

6584:                                             ; preds = %originalBBpart21784
  %6585 = load i8*, i8** %11, align 8, !dbg !2039
  %6586 = load i64, i64* %21, align 8, !dbg !2040
  %6587 = getelementptr inbounds i8, i8* %6585, i64 %6586, !dbg !2039
  store i8 0, i8* %6587, align 1, !dbg !2041
  br label %6588, !dbg !2039

6588:                                             ; preds = %6584, %originalBBpart21784
  %6589 = load i64, i64* %21, align 8, !dbg !2042
  store i64 %6589, i64* %10, align 8, !dbg !2043
  br label %6656, !dbg !2043

6590:                                             ; preds = %originalBBpart21700, %originalBBpart21450, %originalBBpart21078, %originalBBpart2959, %originalBBpart2774, %originalBBpart2758, %originalBBpart2698, %originalBBpart2662, %originalBBpart2491, %originalBBpart2447, %originalBBpart2239, %originalBBpart2215
  call void @llvm.dbg.label(metadata !2044), !dbg !2045
  %6591 = load i32, i32* @x.19
  %6592 = load i32, i32* @y.20
  %6593 = sub i32 %6591, 1
  %6594 = mul i32 %6591, %6593
  %6595 = urem i32 %6594, 2
  %6596 = icmp eq i32 %6595, 0
  %6597 = icmp slt i32 %6592, 10
  %6598 = or i1 %6596, %6597
  br i1 %6598, label %originalBB1786, label %originalBB1786alteredBB

originalBB1786:                                   ; preds = %6590, %originalBB1786alteredBB
  %6599 = load i32, i32* %15, align 4, !dbg !2046
  %6600 = icmp eq i32 %6599, 2, !dbg !2048
  %6601 = load i32, i32* @x.19
  %6602 = load i32, i32* @y.20
  %6603 = sub i32 %6601, 1
  %6604 = mul i32 %6601, %6603
  %6605 = urem i32 %6604, 2
  %6606 = icmp eq i32 %6605, 0
  %6607 = icmp slt i32 %6602, 10
  %6608 = or i1 %6606, %6607
  br i1 %6608, label %originalBBpart21788, label %originalBB1786alteredBB

originalBBpart21788:                              ; preds = %originalBB1786
  br i1 %6600, label %6609, label %6629, !dbg !2049

6609:                                             ; preds = %originalBBpart21788
  %6610 = load i8, i8* %25, align 1, !dbg !2050
  %6611 = trunc i8 %6610 to i1, !dbg !2050
  br i1 %6611, label %6612, label %6629, !dbg !2051

6612:                                             ; preds = %6609
  %6613 = load i32, i32* @x.19
  %6614 = load i32, i32* @y.20
  %6615 = sub i32 %6613, 1
  %6616 = mul i32 %6613, %6615
  %6617 = urem i32 %6616, 2
  %6618 = icmp eq i32 %6617, 0
  %6619 = icmp slt i32 %6614, 10
  %6620 = or i1 %6618, %6619
  br i1 %6620, label %originalBB1790, label %originalBB1790alteredBB

originalBB1790:                                   ; preds = %6612, %originalBB1790alteredBB
  store i32 4, i32* %15, align 4, !dbg !2052
  %6621 = load i32, i32* @x.19
  %6622 = load i32, i32* @y.20
  %6623 = sub i32 %6621, 1
  %6624 = mul i32 %6621, %6623
  %6625 = urem i32 %6624, 2
  %6626 = icmp eq i32 %6625, 0
  %6627 = icmp slt i32 %6622, 10
  %6628 = or i1 %6626, %6627
  br i1 %6628, label %originalBBpart21792, label %originalBB1790alteredBB

originalBBpart21792:                              ; preds = %originalBB1790
  br label %6629, !dbg !2053

6629:                                             ; preds = %originalBBpart21792, %6609, %originalBBpart21788
  %6630 = load i32, i32* @x.19
  %6631 = load i32, i32* @y.20
  %6632 = sub i32 %6630, 1
  %6633 = mul i32 %6630, %6632
  %6634 = urem i32 %6633, 2
  %6635 = icmp eq i32 %6634, 0
  %6636 = icmp slt i32 %6631, 10
  %6637 = or i1 %6635, %6636
  br i1 %6637, label %originalBB1794, label %originalBB1794alteredBB

originalBB1794:                                   ; preds = %6629, %originalBB1794alteredBB
  %6638 = load i8*, i8** %11, align 8, !dbg !2054
  %6639 = load i64, i64* %12, align 8, !dbg !2055
  %6640 = load i8*, i8** %13, align 8, !dbg !2056
  %6641 = load i64, i64* %14, align 8, !dbg !2057
  %6642 = load i32, i32* %15, align 4, !dbg !2058
  %6643 = load i32, i32* %16, align 4, !dbg !2059
  %6644 = and i32 %6643, -3, !dbg !2060
  %6645 = load i8*, i8** %18, align 8, !dbg !2061
  %6646 = load i8*, i8** %19, align 8, !dbg !2062
  %6647 = call i64 @quotearg_buffer_restyled(i8* %6638, i64 %6639, i8* %6640, i64 %6641, i32 %6642, i32 %6644, i32* null, i8* %6645, i8* %6646), !dbg !2063
  store i64 %6647, i64* %10, align 8, !dbg !2064
  %6648 = load i32, i32* @x.19
  %6649 = load i32, i32* @y.20
  %6650 = sub i32 %6648, 1
  %6651 = mul i32 %6648, %6650
  %6652 = urem i32 %6651, 2
  %6653 = icmp eq i32 %6652, 0
  %6654 = icmp slt i32 %6649, 10
  %6655 = or i1 %6653, %6654
  br i1 %6655, label %originalBBpart21805, label %originalBB1794alteredBB

originalBBpart21805:                              ; preds = %originalBB1794
  br label %6656, !dbg !2064

6656:                                             ; preds = %originalBBpart21805, %6588, %originalBBpart21720
  %6657 = load i32, i32* @x.19
  %6658 = load i32, i32* @y.20
  %6659 = sub i32 %6657, 1
  %6660 = mul i32 %6657, %6659
  %6661 = urem i32 %6660, 2
  %6662 = icmp eq i32 %6661, 0
  %6663 = icmp slt i32 %6658, 10
  %6664 = or i1 %6662, %6663
  br i1 %6664, label %originalBB1807, label %originalBB1807alteredBB

originalBB1807:                                   ; preds = %6656, %originalBB1807alteredBB
  %6665 = load i64, i64* %10, align 8, !dbg !2065
  %6666 = load i32, i32* @x.19
  %6667 = load i32, i32* @y.20
  %6668 = sub i32 %6666, 1
  %6669 = mul i32 %6666, %6668
  %6670 = urem i32 %6669, 2
  %6671 = icmp eq i32 %6670, 0
  %6672 = icmp slt i32 %6667, 10
  %6673 = or i1 %6671, %6672
  br i1 %6673, label %originalBBpart21809, label %originalBB1807alteredBB

originalBBpart21809:                              ; preds = %originalBB1807
  ret i64 %6665, !dbg !2065

originalBBalteredBB:                              ; preds = %originalBB, %50
  %6674 = load i32, i32* %15, align 4, !dbg !1233
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %68
  store i32 5, i32* %15, align 4, !dbg !1235
  store i8 1, i8* %27, align 1, !dbg !1237
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %85
  %6675 = load i8, i8* %27, align 1, !dbg !1239
  %6676 = trunc i8 %6675 to i1, !dbg !1239
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %104
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %121
  %6677 = load i64, i64* %21, align 8, !dbg !1243
  %6678 = load i64, i64* %12, align 8, !dbg !1243
  %6679 = icmp ult i64 %6677, %6678, !dbg !1243
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %141
  %6680 = load i8*, i8** %11, align 8, !dbg !1243
  %6681 = load i64, i64* %21, align 8, !dbg !1243
  %6682 = getelementptr inbounds i8, i8* %6680, i64 %6681, !dbg !1243
  store i8 34, i8* %6682, align 1, !dbg !1243
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %164
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %181
  store i8 1, i8* %25, align 1, !dbg !1247
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8** %23, align 8, !dbg !1248
  store i64 1, i64* %24, align 8, !dbg !1249
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %198
  store i8 1, i8* %25, align 1, !dbg !1251
  store i8 0, i8* %27, align 1, !dbg !1252
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %218
  %6683 = load i32, i32* %15, align 4, !dbg !1259
  %6684 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.63, i64 0, i64 0), i32 %6683), !dbg !1261
  store i8* %6684, i8** %18, align 8, !dbg !1262
  %6685 = load i32, i32* %15, align 4, !dbg !1263
  %6686 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i32 %6685), !dbg !1264
  store i8* %6686, i8** %19, align 8, !dbg !1265
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %239
  %6687 = load i8, i8* %27, align 1, !dbg !1267
  %6688 = trunc i8 %6687 to i1, !dbg !1267
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %258
  %6689 = load i8*, i8** %18, align 8, !dbg !1270
  store i8* %6689, i8** %23, align 8, !dbg !1272
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %276
  %6690 = load i8*, i8** %23, align 8, !dbg !1274
  %6691 = load i8, i8* %6690, align 1, !dbg !1276
  %6692 = icmp ne i8 %6691, 0, !dbg !1277
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %296
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %313
  %6693 = load i64, i64* %21, align 8, !dbg !1279
  %6694 = load i64, i64* %12, align 8, !dbg !1279
  %6695 = icmp ult i64 %6693, %6694, !dbg !1279
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %339
  %6696 = load i64, i64* %21, align 8, !dbg !1282
  %_ = sub i64 0, %6696
  %gen = add i64 %_, 1
  %_59 = sub i64 0, %6696
  %gen60 = add i64 %_59, 1
  %_61 = sub i64 %6696, 1
  %gen62 = mul i64 %_61, 1
  %_63 = sub i64 0, %6696
  %gen64 = add i64 %_63, 1
  %_65 = sub i64 %6696, 1
  %gen66 = mul i64 %_65, 1
  %_67 = sub i64 0, %6696
  %gen68 = add i64 %_67, 1
  %_69 = sub i64 %6696, 1
  %gen70 = mul i64 %_69, 1
  %_71 = sub i64 %6696, 1
  %gen72 = mul i64 %_71, 1
  %6697 = add i64 %6696, 1, !dbg !1282
  store i64 %6697, i64* %21, align 8, !dbg !1282
  br label %originalBB58

originalBB76alteredBB:                            ; preds = %originalBB76, %358
  br label %originalBB76

originalBB80alteredBB:                            ; preds = %originalBB80, %375
  %6698 = load i8*, i8** %23, align 8, !dbg !1283
  %6699 = getelementptr inbounds i8, i8* %6698, i32 1, !dbg !1283
  store i8* %6699, i8** %23, align 8, !dbg !1283
  br label %originalBB80

originalBB84alteredBB:                            ; preds = %originalBB84, %394
  br label %originalBB84

originalBB88alteredBB:                            ; preds = %originalBB88, %411
  store i8 1, i8* %25, align 1, !dbg !1287
  %6700 = load i8*, i8** %19, align 8, !dbg !1288
  store i8* %6700, i8** %23, align 8, !dbg !1289
  %6701 = load i8*, i8** %23, align 8, !dbg !1290
  %6702 = call i64 @strlen(i8* %6701) #13, !dbg !1291
  store i64 %6702, i64* %24, align 8, !dbg !1292
  br label %originalBB88

originalBB92alteredBB:                            ; preds = %originalBB92, %431
  store i8 1, i8* %25, align 1, !dbg !1294
  br label %originalBB92

originalBB96alteredBB:                            ; preds = %originalBB96, %448
  store i8 1, i8* %27, align 1, !dbg !1296
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %465
  %6703 = load i8, i8* %27, align 1, !dbg !1298
  %6704 = trunc i8 %6703 to i1, !dbg !1298
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %484
  store i8 1, i8* %25, align 1, !dbg !1301
  br label %originalBB104

originalBB108alteredBB:                           ; preds = %originalBB108, %501
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %518
  store i32 2, i32* %15, align 4, !dbg !1304
  %6705 = load i8, i8* %27, align 1, !dbg !1305
  %6706 = trunc i8 %6705 to i1, !dbg !1305
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %537
  br label %originalBB116

originalBB120alteredBB:                           ; preds = %originalBB120, %554
  %6707 = load i64, i64* %21, align 8, !dbg !1309
  %6708 = load i64, i64* %12, align 8, !dbg !1309
  %6709 = icmp ult i64 %6707, %6708, !dbg !1309
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %574
  %6710 = load i8*, i8** %11, align 8, !dbg !1309
  %6711 = load i64, i64* %21, align 8, !dbg !1309
  %6712 = getelementptr inbounds i8, i8* %6710, i64 %6711, !dbg !1309
  store i8 39, i8* %6712, align 1, !dbg !1309
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %594
  %6713 = load i64, i64* %21, align 8, !dbg !1312
  %_129 = sub i64 %6713, 1
  %gen130 = mul i64 %_129, 1
  %6714 = add i64 %6713, 1, !dbg !1312
  store i64 %6714, i64* %21, align 8, !dbg !1312
  br label %originalBB128

originalBB134alteredBB:                           ; preds = %originalBB134, %613
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %630
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i8** %23, align 8, !dbg !1313
  store i64 1, i64* %24, align 8, !dbg !1314
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %647
  store i8 0, i8* %27, align 1, !dbg !1316
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %664
  call void @abort() #12, !dbg !1318
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %681
  store i64 0, i64* %20, align 8, !dbg !1319
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %698
  %6715 = load i64, i64* %14, align 8, !dbg !1322
  %6716 = icmp eq i64 %6715, -1, !dbg !1324
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %717
  %6717 = load i8*, i8** %13, align 8, !dbg !1325
  %6718 = load i64, i64* %20, align 8, !dbg !1326
  %6719 = getelementptr inbounds i8, i8* %6717, i64 %6718, !dbg !1325
  %6720 = load i8, i8* %6719, align 1, !dbg !1325
  %6721 = sext i8 %6720 to i32, !dbg !1325
  %6722 = icmp eq i32 %6721, 0, !dbg !1327
  %6723 = zext i1 %6722 to i32, !dbg !1327
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %741
  %6724 = load i64, i64* %20, align 8, !dbg !1328
  %6725 = load i64, i64* %14, align 8, !dbg !1329
  %6726 = icmp eq i64 %6724, %6725, !dbg !1330
  %6727 = zext i1 %6726 to i32, !dbg !1330
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %762
  %6728 = icmp ne i32 %763, 0, !dbg !1331
  %_167 = sub i1 false, %6728
  %gen168 = add i1 %_167, true
  %_169 = shl i1 %6728, true
  %6729 = xor i1 %6728, true, !dbg !1331
  br label %originalBB166

originalBB173alteredBB:                           ; preds = %originalBB173, %782
  store i8 0, i8* %33, align 1, !dbg !1339
  call void @llvm.dbg.declare(metadata !11, metadata !2066, metadata !DIExpression()), !dbg !1341
  store i8 0, i8* %34, align 1, !dbg !1341
  call void @llvm.dbg.declare(metadata !11, metadata !2101, metadata !DIExpression()), !dbg !1343
  store i8 0, i8* %35, align 1, !dbg !1343
  %6730 = load i8, i8* %25, align 1, !dbg !1344
  %6731 = trunc i8 %6730 to i1, !dbg !1344
  br label %originalBB173

originalBB177alteredBB:                           ; preds = %originalBB177, %801
  %6732 = load i32, i32* %15, align 4, !dbg !1347
  %6733 = icmp ne i32 %6732, 2, !dbg !1348
  br label %originalBB177

originalBB181alteredBB:                           ; preds = %originalBB181, %820
  %6734 = load i64, i64* %24, align 8, !dbg !1350
  %6735 = icmp ne i64 %6734, 0, !dbg !1350
  br label %originalBB181

originalBB185alteredBB:                           ; preds = %originalBB185, %839
  %6736 = load i64, i64* %20, align 8, !dbg !1352
  %6737 = load i64, i64* %24, align 8, !dbg !1353
  %6738 = add i64 %6736, %6737, !dbg !1354
  %6739 = load i64, i64* %14, align 8, !dbg !1355
  %6740 = icmp eq i64 %6739, -1, !dbg !1356
  br label %originalBB185

originalBB189alteredBB:                           ; preds = %originalBB189, %861
  %6741 = load i64, i64* %24, align 8, !dbg !1358
  %6742 = icmp ult i64 1, %6741, !dbg !1359
  br label %originalBB189

originalBB193alteredBB:                           ; preds = %originalBB193, %880
  %6743 = load i8*, i8** %13, align 8, !dbg !1360
  %6744 = call i64 @strlen(i8* %6743) #13, !dbg !1361
  store i64 %6744, i64* %14, align 8, !dbg !1362
  br label %originalBB193

originalBB197alteredBB:                           ; preds = %originalBB197, %899
  %6745 = load i64, i64* %14, align 8, !dbg !1363
  br label %originalBB197

originalBB201alteredBB:                           ; preds = %originalBB201, %917
  %6746 = icmp ule i64 %850, %918, !dbg !1364
  br label %originalBB201

originalBB205alteredBB:                           ; preds = %originalBB205, %936
  %6747 = load i8*, i8** %13, align 8, !dbg !1366
  %6748 = load i64, i64* %20, align 8, !dbg !1367
  %6749 = getelementptr inbounds i8, i8* %6747, i64 %6748, !dbg !1368
  %6750 = load i8*, i8** %23, align 8, !dbg !1369
  %6751 = load i64, i64* %24, align 8, !dbg !1370
  %6752 = call i32 @memcmp(i8* %6749, i8* %6750, i64 %6751) #13, !dbg !1371
  %6753 = icmp eq i32 %6752, 0, !dbg !1372
  br label %originalBB205

originalBB209alteredBB:                           ; preds = %originalBB209, %960
  %6754 = load i8, i8* %27, align 1, !dbg !1374
  %6755 = trunc i8 %6754 to i1, !dbg !1374
  br label %originalBB209

originalBB213alteredBB:                           ; preds = %originalBB213, %979
  br label %originalBB213

originalBB217alteredBB:                           ; preds = %originalBB217, %996
  store i8 1, i8* %33, align 1, !dbg !1379
  br label %originalBB217

originalBB221alteredBB:                           ; preds = %originalBB221, %1013
  %6756 = load i8*, i8** %13, align 8, !dbg !1381
  %6757 = load i64, i64* %20, align 8, !dbg !1382
  %6758 = getelementptr inbounds i8, i8* %6756, i64 %6757, !dbg !1381
  %6759 = load i8, i8* %6758, align 1, !dbg !1381
  store i8 %6759, i8* %31, align 1, !dbg !1383
  %6760 = load i8, i8* %31, align 1, !dbg !1384
  %6761 = zext i8 %6760 to i32, !dbg !1384
  br label %originalBB221

originalBB225alteredBB:                           ; preds = %originalBB225, %1036
  %6762 = load i8, i8* %25, align 1, !dbg !1386
  %6763 = trunc i8 %6762 to i1, !dbg !1386
  br label %originalBB225

originalBB229alteredBB:                           ; preds = %originalBB229, %1055
  br label %originalBB229

originalBB233alteredBB:                           ; preds = %originalBB233, %1072
  %6764 = load i8, i8* %27, align 1, !dbg !1392
  %6765 = trunc i8 %6764 to i1, !dbg !1392
  br label %originalBB233

originalBB237alteredBB:                           ; preds = %originalBB237, %1091
  br label %originalBB237

originalBB241alteredBB:                           ; preds = %originalBB241, %1108
  store i8 1, i8* %34, align 1, !dbg !1395
  %6766 = load i32, i32* %15, align 4, !dbg !1396
  %6767 = icmp eq i32 %6766, 2, !dbg !1396
  br label %originalBB241

originalBB245alteredBB:                           ; preds = %originalBB245, %1127
  %6768 = load i8, i8* %28, align 1, !dbg !1396
  %6769 = trunc i8 %6768 to i1, !dbg !1396
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %1146
  br label %originalBB249

originalBB253alteredBB:                           ; preds = %originalBB253, %1163
  %6770 = load i64, i64* %21, align 8, !dbg !1400
  %6771 = load i64, i64* %12, align 8, !dbg !1400
  %6772 = icmp ult i64 %6770, %6771, !dbg !1400
  br label %originalBB253

originalBB257alteredBB:                           ; preds = %originalBB257, %1183
  %6773 = load i8*, i8** %11, align 8, !dbg !1400
  %6774 = load i64, i64* %21, align 8, !dbg !1400
  %6775 = getelementptr inbounds i8, i8* %6773, i64 %6774, !dbg !1400
  store i8 39, i8* %6775, align 1, !dbg !1400
  br label %originalBB257

originalBB261alteredBB:                           ; preds = %originalBB261, %1203
  %6776 = load i64, i64* %21, align 8, !dbg !1403
  %_262 = sub i64 0, %6776
  %gen263 = add i64 %_262, 1
  %6777 = add i64 %6776, 1, !dbg !1403
  store i64 %6777, i64* %21, align 8, !dbg !1403
  br label %originalBB261

originalBB267alteredBB:                           ; preds = %originalBB267, %1222
  br label %originalBB267

originalBB271alteredBB:                           ; preds = %originalBB271, %1239
  %6778 = load i64, i64* %21, align 8, !dbg !1404
  %6779 = load i64, i64* %12, align 8, !dbg !1404
  %6780 = icmp ult i64 %6778, %6779, !dbg !1404
  br label %originalBB271

originalBB275alteredBB:                           ; preds = %originalBB275, %1259
  %6781 = load i8*, i8** %11, align 8, !dbg !1404
  %6782 = load i64, i64* %21, align 8, !dbg !1404
  %6783 = getelementptr inbounds i8, i8* %6781, i64 %6782, !dbg !1404
  store i8 36, i8* %6783, align 1, !dbg !1404
  br label %originalBB275

originalBB279alteredBB:                           ; preds = %originalBB279, %1282
  br label %originalBB279

originalBB283alteredBB:                           ; preds = %originalBB283, %1299
  %6784 = load i64, i64* %21, align 8, !dbg !1408
  %6785 = load i64, i64* %12, align 8, !dbg !1408
  %6786 = icmp ult i64 %6784, %6785, !dbg !1408
  br label %originalBB283

originalBB287alteredBB:                           ; preds = %originalBB287, %1319
  %6787 = load i8*, i8** %11, align 8, !dbg !1408
  %6788 = load i64, i64* %21, align 8, !dbg !1408
  %6789 = getelementptr inbounds i8, i8* %6787, i64 %6788, !dbg !1408
  store i8 39, i8* %6789, align 1, !dbg !1408
  br label %originalBB287

originalBB291alteredBB:                           ; preds = %originalBB291, %1339
  %6790 = load i64, i64* %21, align 8, !dbg !1411
  %_292 = shl i64 %6790, 1
  %_293 = shl i64 %6790, 1
  %_294 = sub i64 %6790, 1
  %gen295 = mul i64 %_294, 1
  %_296 = sub i64 0, %6790
  %gen297 = add i64 %_296, 1
  %_298 = shl i64 %6790, 1
  %6791 = add i64 %6790, 1, !dbg !1411
  store i64 %6791, i64* %21, align 8, !dbg !1411
  br label %originalBB291

originalBB303alteredBB:                           ; preds = %originalBB303, %1358
  store i8 1, i8* %28, align 1, !dbg !1398
  br label %originalBB303

originalBB307alteredBB:                           ; preds = %originalBB307, %1375
  br label %originalBB307

originalBB311alteredBB:                           ; preds = %originalBB311, %1392
  %6792 = load i64, i64* %21, align 8, !dbg !1412
  %6793 = load i64, i64* %12, align 8, !dbg !1412
  %6794 = icmp ult i64 %6792, %6793, !dbg !1412
  br label %originalBB311

originalBB315alteredBB:                           ; preds = %originalBB315, %1412
  %6795 = load i8*, i8** %11, align 8, !dbg !1412
  %6796 = load i64, i64* %21, align 8, !dbg !1412
  %6797 = getelementptr inbounds i8, i8* %6795, i64 %6796, !dbg !1412
  store i8 92, i8* %6797, align 1, !dbg !1412
  br label %originalBB315

originalBB319alteredBB:                           ; preds = %originalBB319, %1432
  %6798 = load i64, i64* %21, align 8, !dbg !1415
  %_320 = sub i64 %6798, 1
  %gen321 = mul i64 %_320, 1
  %_322 = shl i64 %6798, 1
  %6799 = add i64 %6798, 1, !dbg !1415
  store i64 %6799, i64* %21, align 8, !dbg !1415
  br label %originalBB319

originalBB326alteredBB:                           ; preds = %originalBB326, %1451
  br label %originalBB326

originalBB330alteredBB:                           ; preds = %originalBB330, %1468
  %6800 = load i32, i32* %15, align 4, !dbg !1416
  %6801 = icmp ne i32 %6800, 2, !dbg !1418
  br label %originalBB330

originalBB334alteredBB:                           ; preds = %originalBB334, %1487
  %6802 = load i64, i64* %20, align 8, !dbg !1420
  %_335 = sub i64 %6802, 1
  %gen336 = mul i64 %_335, 1
  %_337 = shl i64 %6802, 1
  %_338 = sub i64 %6802, 1
  %gen339 = mul i64 %_338, 1
  %6803 = add i64 %6802, 1, !dbg !1421
  %6804 = load i64, i64* %14, align 8, !dbg !1422
  %6805 = icmp ult i64 %6803, %6804, !dbg !1423
  br label %originalBB334

originalBB343alteredBB:                           ; preds = %originalBB343, %1508
  %6806 = load i8*, i8** %13, align 8, !dbg !1425
  %6807 = load i64, i64* %20, align 8, !dbg !1426
  %_344 = shl i64 %6807, 1
  %_345 = sub i64 %6807, 1
  %gen346 = mul i64 %_345, 1
  %_347 = sub i64 %6807, 1
  %gen348 = mul i64 %_347, 1
  %_349 = shl i64 %6807, 1
  %_350 = sub i64 %6807, 1
  %gen351 = mul i64 %_350, 1
  %_352 = shl i64 %6807, 1
  %6808 = add i64 %6807, 1, !dbg !1427
  %6809 = getelementptr inbounds i8, i8* %6806, i64 %6808, !dbg !1425
  %6810 = load i8, i8* %6809, align 1, !dbg !1425
  %6811 = sext i8 %6810 to i32, !dbg !1425
  %6812 = icmp sle i32 48, %6811, !dbg !1428
  br label %originalBB343

originalBB356alteredBB:                           ; preds = %originalBB356, %1532
  %6813 = load i8*, i8** %13, align 8, !dbg !1430
  %6814 = load i64, i64* %20, align 8, !dbg !1431
  %_357 = shl i64 %6814, 1
  %_358 = sub i64 %6814, 1
  %gen359 = mul i64 %_358, 1
  %_360 = sub i64 %6814, 1
  %gen361 = mul i64 %_360, 1
  %6815 = add i64 %6814, 1, !dbg !1432
  %6816 = getelementptr inbounds i8, i8* %6813, i64 %6815, !dbg !1430
  %6817 = load i8, i8* %6816, align 1, !dbg !1430
  %6818 = sext i8 %6817 to i32, !dbg !1430
  %6819 = icmp sle i32 %6818, 57, !dbg !1433
  br label %originalBB356

originalBB365alteredBB:                           ; preds = %originalBB365, %1556
  br label %originalBB365

originalBB369alteredBB:                           ; preds = %originalBB369, %1573
  %6820 = load i64, i64* %21, align 8, !dbg !1437
  %6821 = load i64, i64* %12, align 8, !dbg !1437
  %6822 = icmp ult i64 %6820, %6821, !dbg !1437
  br label %originalBB369

originalBB373alteredBB:                           ; preds = %originalBB373, %1593
  %6823 = load i8*, i8** %11, align 8, !dbg !1437
  %6824 = load i64, i64* %21, align 8, !dbg !1437
  %6825 = getelementptr inbounds i8, i8* %6823, i64 %6824, !dbg !1437
  store i8 48, i8* %6825, align 1, !dbg !1437
  br label %originalBB373

originalBB377alteredBB:                           ; preds = %originalBB377, %1613
  %6826 = load i64, i64* %21, align 8, !dbg !1440
  %_378 = sub i64 %6826, 1
  %gen379 = mul i64 %_378, 1
  %_380 = sub i64 0, %6826
  %gen381 = add i64 %_380, 1
  %_382 = sub i64 %6826, 1
  %gen383 = mul i64 %_382, 1
  %_384 = sub i64 %6826, 1
  %gen385 = mul i64 %_384, 1
  %6827 = add i64 %6826, 1, !dbg !1440
  store i64 %6827, i64* %21, align 8, !dbg !1440
  br label %originalBB377

originalBB389alteredBB:                           ; preds = %originalBB389, %1632
  br label %originalBB389

originalBB393alteredBB:                           ; preds = %originalBB393, %1649
  %6828 = load i64, i64* %21, align 8, !dbg !1442
  %6829 = load i64, i64* %12, align 8, !dbg !1442
  %6830 = icmp ult i64 %6828, %6829, !dbg !1442
  br label %originalBB393

originalBB397alteredBB:                           ; preds = %originalBB397, %1669
  %6831 = load i8*, i8** %11, align 8, !dbg !1442
  %6832 = load i64, i64* %21, align 8, !dbg !1442
  %6833 = getelementptr inbounds i8, i8* %6831, i64 %6832, !dbg !1442
  store i8 48, i8* %6833, align 1, !dbg !1442
  br label %originalBB397

originalBB401alteredBB:                           ; preds = %originalBB401, %1689
  %6834 = load i64, i64* %21, align 8, !dbg !1445
  %_402 = sub i64 %6834, 1
  %gen403 = mul i64 %_402, 1
  %_404 = shl i64 %6834, 1
  %6835 = add i64 %6834, 1, !dbg !1445
  store i64 %6835, i64* %21, align 8, !dbg !1445
  br label %originalBB401

originalBB408alteredBB:                           ; preds = %originalBB408, %1708
  br label %originalBB408

originalBB412alteredBB:                           ; preds = %originalBB412, %1725
  store i8 48, i8* %31, align 1, !dbg !1447
  br label %originalBB412

originalBB416alteredBB:                           ; preds = %originalBB416, %1742
  %6836 = load i32, i32* %16, align 4, !dbg !1449
  %_417 = sub i32 %6836, 1
  %gen418 = mul i32 %_417, 1
  %_419 = shl i32 %6836, 1
  %_420 = sub i32 %6836, 1
  %gen421 = mul i32 %_420, 1
  %6837 = and i32 %6836, 1, !dbg !1451
  %6838 = icmp ne i32 %6837, 0, !dbg !1451
  br label %originalBB416

originalBB425alteredBB:                           ; preds = %originalBB425, %1762
  br label %originalBB425

originalBB429alteredBB:                           ; preds = %originalBB429, %1779
  br label %originalBB429

originalBB433alteredBB:                           ; preds = %originalBB433, %1796
  br label %originalBB433

originalBB437alteredBB:                           ; preds = %originalBB437, %1813
  %6839 = load i32, i32* %15, align 4, !dbg !1455
  br label %originalBB437

originalBB441alteredBB:                           ; preds = %originalBB441, %1831
  %6840 = load i8, i8* %27, align 1, !dbg !1457
  %6841 = trunc i8 %6840 to i1, !dbg !1457
  br label %originalBB441

originalBB445alteredBB:                           ; preds = %originalBB445, %1850
  br label %originalBB445

originalBB449alteredBB:                           ; preds = %originalBB449, %1867
  br label %originalBB449

originalBB453alteredBB:                           ; preds = %originalBB453, %1884
  %6842 = load i32, i32* %16, align 4, !dbg !1463
  %_454 = sub i32 %6842, 4
  %gen455 = mul i32 %_454, 4
  %_456 = sub i32 0, %6842
  %gen457 = add i32 %_456, 4
  %_458 = sub i32 0, %6842
  %gen459 = add i32 %_458, 4
  %6843 = and i32 %6842, 4, !dbg !1465
  %6844 = icmp ne i32 %6843, 0, !dbg !1465
  br label %originalBB453

originalBB463alteredBB:                           ; preds = %originalBB463, %1904
  %6845 = load i64, i64* %20, align 8, !dbg !1467
  %_464 = shl i64 %6845, 2
  %_465 = sub i64 0, %6845
  %gen466 = add i64 %_465, 2
  %_467 = sub i64 %6845, 2
  %gen468 = mul i64 %_467, 2
  %_469 = sub i64 %6845, 2
  %gen470 = mul i64 %_469, 2
  %_471 = sub i64 0, %6845
  %gen472 = add i64 %_471, 2
  %_473 = shl i64 %6845, 2
  %6846 = add i64 %6845, 2, !dbg !1468
  %6847 = load i64, i64* %14, align 8, !dbg !1469
  %6848 = icmp ult i64 %6846, %6847, !dbg !1470
  br label %originalBB463

originalBB477alteredBB:                           ; preds = %originalBB477, %1933
  %6849 = load i8*, i8** %13, align 8, !dbg !1477
  %6850 = load i64, i64* %20, align 8, !dbg !1478
  %_478 = shl i64 %6850, 2
  %_479 = sub i64 0, %6850
  %gen480 = add i64 %_479, 2
  %_481 = shl i64 %6850, 2
  %6851 = add i64 %6850, 2, !dbg !1479
  %6852 = getelementptr inbounds i8, i8* %6849, i64 %6851, !dbg !1477
  %6853 = load i8, i8* %6852, align 1, !dbg !1477
  %6854 = sext i8 %6853 to i32, !dbg !1477
  br label %originalBB477

originalBB485alteredBB:                           ; preds = %originalBB485, %1956
  %6855 = load i8, i8* %27, align 1, !dbg !1481
  %6856 = trunc i8 %6855 to i1, !dbg !1481
  br label %originalBB485

originalBB489alteredBB:                           ; preds = %originalBB489, %1975
  br label %originalBB489

originalBB493alteredBB:                           ; preds = %originalBB493, %1992
  %6857 = load i8*, i8** %13, align 8, !dbg !1486
  %6858 = load i64, i64* %20, align 8, !dbg !1487
  %_494 = sub i64 0, %6858
  %gen495 = add i64 %_494, 2
  %_496 = sub i64 0, %6858
  %gen497 = add i64 %_496, 2
  %_498 = sub i64 0, %6858
  %gen499 = add i64 %_498, 2
  %_500 = sub i64 %6858, 2
  %gen501 = mul i64 %_500, 2
  %_502 = sub i64 %6858, 2
  %gen503 = mul i64 %_502, 2
  %_504 = shl i64 %6858, 2
  %6859 = add i64 %6858, 2, !dbg !1488
  %6860 = getelementptr inbounds i8, i8* %6857, i64 %6859, !dbg !1486
  %6861 = load i8, i8* %6860, align 1, !dbg !1486
  store i8 %6861, i8* %31, align 1, !dbg !1489
  %6862 = load i64, i64* %20, align 8, !dbg !1490
  %_505 = sub i64 %6862, 2
  %gen506 = mul i64 %_505, 2
  %_507 = sub i64 0, %6862
  %gen508 = add i64 %_507, 2
  %_509 = sub i64 0, %6862
  %gen510 = add i64 %_509, 2
  %_511 = shl i64 %6862, 2
  %_512 = shl i64 %6862, 2
  %_513 = shl i64 %6862, 2
  %_514 = sub i64 0, %6862
  %gen515 = add i64 %_514, 2
  %_516 = sub i64 0, %6862
  %gen517 = add i64 %_516, 2
  %6863 = add i64 %6862, 2, !dbg !1490
  store i64 %6863, i64* %20, align 8, !dbg !1490
  br label %originalBB493

originalBB521alteredBB:                           ; preds = %originalBB521, %2016
  %6864 = load i64, i64* %21, align 8, !dbg !1492
  %6865 = load i64, i64* %12, align 8, !dbg !1492
  %6866 = icmp ult i64 %6864, %6865, !dbg !1492
  br label %originalBB521

originalBB525alteredBB:                           ; preds = %originalBB525, %2036
  %6867 = load i8*, i8** %11, align 8, !dbg !1492
  %6868 = load i64, i64* %21, align 8, !dbg !1492
  %6869 = getelementptr inbounds i8, i8* %6867, i64 %6868, !dbg !1492
  store i8 63, i8* %6869, align 1, !dbg !1492
  br label %originalBB525

originalBB529alteredBB:                           ; preds = %originalBB529, %2056
  %6870 = load i64, i64* %21, align 8, !dbg !1495
  %_530 = shl i64 %6870, 1
  %_531 = sub i64 %6870, 1
  %gen532 = mul i64 %_531, 1
  %_533 = sub i64 %6870, 1
  %gen534 = mul i64 %_533, 1
  %_535 = sub i64 0, %6870
  %gen536 = add i64 %_535, 1
  %_537 = sub i64 0, %6870
  %gen538 = add i64 %_537, 1
  %_539 = sub i64 %6870, 1
  %gen540 = mul i64 %_539, 1
  %6871 = add i64 %6870, 1, !dbg !1495
  store i64 %6871, i64* %21, align 8, !dbg !1495
  br label %originalBB529

originalBB544alteredBB:                           ; preds = %originalBB544, %2075
  br label %originalBB544

originalBB548alteredBB:                           ; preds = %originalBB548, %2092
  %6872 = load i64, i64* %21, align 8, !dbg !1497
  %6873 = load i64, i64* %12, align 8, !dbg !1497
  %6874 = icmp ult i64 %6872, %6873, !dbg !1497
  br label %originalBB548

originalBB552alteredBB:                           ; preds = %originalBB552, %2112
  %6875 = load i8*, i8** %11, align 8, !dbg !1497
  %6876 = load i64, i64* %21, align 8, !dbg !1497
  %6877 = getelementptr inbounds i8, i8* %6875, i64 %6876, !dbg !1497
  store i8 34, i8* %6877, align 1, !dbg !1497
  br label %originalBB552

originalBB556alteredBB:                           ; preds = %originalBB556, %2132
  %6878 = load i64, i64* %21, align 8, !dbg !1500
  %_557 = shl i64 %6878, 1
  %6879 = add i64 %6878, 1, !dbg !1500
  store i64 %6879, i64* %21, align 8, !dbg !1500
  br label %originalBB556

originalBB561alteredBB:                           ; preds = %originalBB561, %2151
  br label %originalBB561

originalBB565alteredBB:                           ; preds = %originalBB565, %2168
  %6880 = load i64, i64* %21, align 8, !dbg !1502
  %6881 = load i64, i64* %12, align 8, !dbg !1502
  %6882 = icmp ult i64 %6880, %6881, !dbg !1502
  br label %originalBB565

originalBB569alteredBB:                           ; preds = %originalBB569, %2188
  %6883 = load i8*, i8** %11, align 8, !dbg !1502
  %6884 = load i64, i64* %21, align 8, !dbg !1502
  %6885 = getelementptr inbounds i8, i8* %6883, i64 %6884, !dbg !1502
  store i8 34, i8* %6885, align 1, !dbg !1502
  br label %originalBB569

originalBB573alteredBB:                           ; preds = %originalBB573, %2208
  %6886 = load i64, i64* %21, align 8, !dbg !1505
  %_574 = sub i64 %6886, 1
  %gen575 = mul i64 %_574, 1
  %_576 = sub i64 %6886, 1
  %gen577 = mul i64 %_576, 1
  %_578 = shl i64 %6886, 1
  %_579 = sub i64 %6886, 1
  %gen580 = mul i64 %_579, 1
  %_581 = shl i64 %6886, 1
  %6887 = add i64 %6886, 1, !dbg !1505
  store i64 %6887, i64* %21, align 8, !dbg !1505
  br label %originalBB573

originalBB585alteredBB:                           ; preds = %originalBB585, %2227
  br label %originalBB585

originalBB589alteredBB:                           ; preds = %originalBB589, %2244
  %6888 = load i64, i64* %21, align 8, !dbg !1507
  %6889 = load i64, i64* %12, align 8, !dbg !1507
  %6890 = icmp ult i64 %6888, %6889, !dbg !1507
  br label %originalBB589

originalBB593alteredBB:                           ; preds = %originalBB593, %2264
  %6891 = load i8*, i8** %11, align 8, !dbg !1507
  %6892 = load i64, i64* %21, align 8, !dbg !1507
  %6893 = getelementptr inbounds i8, i8* %6891, i64 %6892, !dbg !1507
  store i8 63, i8* %6893, align 1, !dbg !1507
  br label %originalBB593

originalBB597alteredBB:                           ; preds = %originalBB597, %2284
  %6894 = load i64, i64* %21, align 8, !dbg !1510
  %_598 = shl i64 %6894, 1
  %_599 = sub i64 %6894, 1
  %gen600 = mul i64 %_599, 1
  %6895 = add i64 %6894, 1, !dbg !1510
  store i64 %6895, i64* %21, align 8, !dbg !1510
  br label %originalBB597

originalBB604alteredBB:                           ; preds = %originalBB604, %2303
  br label %originalBB604

originalBB608alteredBB:                           ; preds = %originalBB608, %2320
  br label %originalBB608

originalBB612alteredBB:                           ; preds = %originalBB612, %2337
  br label %originalBB612

originalBB616alteredBB:                           ; preds = %originalBB616, %2354
  br label %originalBB616

originalBB620alteredBB:                           ; preds = %originalBB620, %2371
  br label %originalBB620

originalBB624alteredBB:                           ; preds = %originalBB624, %2388
  br label %originalBB624

originalBB628alteredBB:                           ; preds = %originalBB628, %2405
  store i8 97, i8* %32, align 1, !dbg !1517
  br label %originalBB628

originalBB632alteredBB:                           ; preds = %originalBB632, %2423
  store i8 102, i8* %32, align 1, !dbg !1521
  br label %originalBB632

originalBB636alteredBB:                           ; preds = %originalBB636, %2440
  store i8 110, i8* %32, align 1, !dbg !1523
  br label %originalBB636

originalBB640alteredBB:                           ; preds = %originalBB640, %2457
  store i8 114, i8* %32, align 1, !dbg !1525
  br label %originalBB640

originalBB644alteredBB:                           ; preds = %originalBB644, %2474
  store i8 116, i8* %32, align 1, !dbg !1527
  br label %originalBB644

originalBB648alteredBB:                           ; preds = %originalBB648, %2491
  store i8 118, i8* %32, align 1, !dbg !1529
  br label %originalBB648

originalBB652alteredBB:                           ; preds = %originalBB652, %2508
  %6896 = load i8, i8* %31, align 1, !dbg !1531
  store i8 %6896, i8* %32, align 1, !dbg !1532
  %6897 = load i32, i32* %15, align 4, !dbg !1533
  %6898 = icmp eq i32 %6897, 2, !dbg !1535
  br label %originalBB652

originalBB656alteredBB:                           ; preds = %originalBB656, %2528
  %6899 = load i8, i8* %27, align 1, !dbg !1537
  %6900 = trunc i8 %6899 to i1, !dbg !1537
  br label %originalBB656

originalBB660alteredBB:                           ; preds = %originalBB660, %2547
  br label %originalBB660

originalBB664alteredBB:                           ; preds = %originalBB664, %2564
  br label %originalBB664

originalBB668alteredBB:                           ; preds = %originalBB668, %2581
  %6901 = load i8, i8* %25, align 1, !dbg !1543
  %6902 = trunc i8 %6901 to i1, !dbg !1543
  br label %originalBB668

originalBB672alteredBB:                           ; preds = %originalBB672, %2600
  %6903 = load i8, i8* %27, align 1, !dbg !1546
  %6904 = trunc i8 %6903 to i1, !dbg !1546
  br label %originalBB672

originalBB676alteredBB:                           ; preds = %originalBB676, %2619
  %6905 = load i64, i64* %24, align 8, !dbg !1548
  %6906 = icmp ne i64 %6905, 0, !dbg !1548
  br label %originalBB676

originalBB680alteredBB:                           ; preds = %originalBB680, %2638
  br label %originalBB680

originalBB684alteredBB:                           ; preds = %originalBB684, %2655
  br label %originalBB684

originalBB688alteredBB:                           ; preds = %originalBB688, %2672
  %6907 = load i32, i32* %15, align 4, !dbg !1553
  %6908 = icmp eq i32 %6907, 2, !dbg !1555
  br label %originalBB688

originalBB692alteredBB:                           ; preds = %originalBB692, %2691
  %6909 = load i8, i8* %27, align 1, !dbg !1557
  %6910 = trunc i8 %6909 to i1, !dbg !1557
  br label %originalBB692

originalBB696alteredBB:                           ; preds = %originalBB696, %2710
  br label %originalBB696

originalBB700alteredBB:                           ; preds = %originalBB700, %2727
  br label %originalBB700

originalBB704alteredBB:                           ; preds = %originalBB704, %2744
  %6911 = load i8, i8* %25, align 1, !dbg !1562
  %6912 = trunc i8 %6911 to i1, !dbg !1562
  br label %originalBB704

originalBB708alteredBB:                           ; preds = %originalBB708, %2763
  %6913 = load i8, i8* %32, align 1, !dbg !1565
  store i8 %6913, i8* %31, align 1, !dbg !1567
  br label %originalBB708

originalBB712alteredBB:                           ; preds = %originalBB712, %2782
  %6914 = load i64, i64* %14, align 8, !dbg !1570
  %6915 = icmp eq i64 %6914, -1, !dbg !1572
  br label %originalBB712

originalBB716alteredBB:                           ; preds = %originalBB716, %2801
  %6916 = load i8*, i8** %13, align 8, !dbg !1574
  %6917 = getelementptr inbounds i8, i8* %6916, i64 1, !dbg !1574
  %6918 = load i8, i8* %6917, align 1, !dbg !1574
  %6919 = sext i8 %6918 to i32, !dbg !1574
  %6920 = icmp eq i32 %6919, 0, !dbg !1575
  br label %originalBB716

originalBB720alteredBB:                           ; preds = %originalBB720, %2823
  %6921 = load i64, i64* %14, align 8, !dbg !1576
  %6922 = icmp eq i64 %6921, 1, !dbg !1577
  br label %originalBB720

originalBB724alteredBB:                           ; preds = %originalBB724, %2842
  br label %originalBB724

originalBB728alteredBB:                           ; preds = %originalBB728, %2859
  br label %originalBB728

originalBB732alteredBB:                           ; preds = %originalBB732, %2876
  %6923 = load i64, i64* %20, align 8, !dbg !1580
  %6924 = icmp ne i64 %6923, 0, !dbg !1582
  br label %originalBB732

originalBB736alteredBB:                           ; preds = %originalBB736, %2895
  br label %originalBB736

originalBB740alteredBB:                           ; preds = %originalBB740, %2912
  br label %originalBB740

originalBB744alteredBB:                           ; preds = %originalBB744, %2929
  store i8 1, i8* %35, align 1, !dbg !1586
  br label %originalBB744

originalBB748alteredBB:                           ; preds = %originalBB748, %2946
  %6925 = load i32, i32* %15, align 4, !dbg !1588
  %6926 = icmp eq i32 %6925, 2, !dbg !1590
  br label %originalBB748

originalBB752alteredBB:                           ; preds = %originalBB752, %2965
  %6927 = load i8, i8* %27, align 1, !dbg !1592
  %6928 = trunc i8 %6927 to i1, !dbg !1592
  br label %originalBB752

originalBB756alteredBB:                           ; preds = %originalBB756, %2984
  br label %originalBB756

originalBB760alteredBB:                           ; preds = %originalBB760, %3001
  br label %originalBB760

originalBB764alteredBB:                           ; preds = %originalBB764, %3018
  store i8 1, i8* %29, align 1, !dbg !1596
  store i8 1, i8* %35, align 1, !dbg !1597
  %6929 = load i32, i32* %15, align 4, !dbg !1598
  %6930 = icmp eq i32 %6929, 2, !dbg !1600
  br label %originalBB764

originalBB768alteredBB:                           ; preds = %originalBB768, %3037
  %6931 = load i8, i8* %27, align 1, !dbg !1602
  %6932 = trunc i8 %6931 to i1, !dbg !1602
  br label %originalBB768

originalBB772alteredBB:                           ; preds = %originalBB772, %3056
  br label %originalBB772

originalBB776alteredBB:                           ; preds = %originalBB776, %3073
  %6933 = load i64, i64* %12, align 8, !dbg !1607
  %6934 = icmp ne i64 %6933, 0, !dbg !1607
  br label %originalBB776

originalBB780alteredBB:                           ; preds = %originalBB780, %3092
  %6935 = load i64, i64* %22, align 8, !dbg !1610
  %6936 = icmp ne i64 %6935, 0, !dbg !1610
  br label %originalBB780

originalBB784alteredBB:                           ; preds = %originalBB784, %3111
  %6937 = load i64, i64* %12, align 8, !dbg !1612
  store i64 %6937, i64* %22, align 8, !dbg !1614
  store i64 0, i64* %12, align 8, !dbg !1615
  br label %originalBB784

originalBB788alteredBB:                           ; preds = %originalBB788, %3129
  br label %originalBB788

originalBB792alteredBB:                           ; preds = %originalBB792, %3146
  %6938 = load i64, i64* %21, align 8, !dbg !1618
  %6939 = load i64, i64* %12, align 8, !dbg !1618
  %6940 = icmp ult i64 %6938, %6939, !dbg !1618
  br label %originalBB792

originalBB796alteredBB:                           ; preds = %originalBB796, %3166
  %6941 = load i8*, i8** %11, align 8, !dbg !1618
  %6942 = load i64, i64* %21, align 8, !dbg !1618
  %6943 = getelementptr inbounds i8, i8* %6941, i64 %6942, !dbg !1618
  store i8 39, i8* %6943, align 1, !dbg !1618
  br label %originalBB796

originalBB800alteredBB:                           ; preds = %originalBB800, %3186
  %6944 = load i64, i64* %21, align 8, !dbg !1621
  %_801 = sub i64 %6944, 1
  %gen802 = mul i64 %_801, 1
  %_803 = sub i64 %6944, 1
  %gen804 = mul i64 %_803, 1
  %_805 = sub i64 0, %6944
  %gen806 = add i64 %_805, 1
  %_807 = sub i64 0, %6944
  %gen808 = add i64 %_807, 1
  %_809 = sub i64 %6944, 1
  %gen810 = mul i64 %_809, 1
  %_811 = shl i64 %6944, 1
  %6945 = add i64 %6944, 1, !dbg !1621
  store i64 %6945, i64* %21, align 8, !dbg !1621
  br label %originalBB800

originalBB815alteredBB:                           ; preds = %originalBB815, %3205
  br label %originalBB815

originalBB819alteredBB:                           ; preds = %originalBB819, %3222
  %6946 = load i64, i64* %21, align 8, !dbg !1623
  %6947 = load i64, i64* %12, align 8, !dbg !1623
  %6948 = icmp ult i64 %6946, %6947, !dbg !1623
  br label %originalBB819

originalBB823alteredBB:                           ; preds = %originalBB823, %3246
  %6949 = load i64, i64* %21, align 8, !dbg !1626
  %_824 = sub i64 %6949, 1
  %gen825 = mul i64 %_824, 1
  %6950 = add i64 %6949, 1, !dbg !1626
  store i64 %6950, i64* %21, align 8, !dbg !1626
  br label %originalBB823

originalBB829alteredBB:                           ; preds = %originalBB829, %3265
  br label %originalBB829

originalBB833alteredBB:                           ; preds = %originalBB833, %3282
  %6951 = load i64, i64* %21, align 8, !dbg !1628
  %6952 = load i64, i64* %12, align 8, !dbg !1628
  %6953 = icmp ult i64 %6951, %6952, !dbg !1628
  br label %originalBB833

originalBB837alteredBB:                           ; preds = %originalBB837, %3302
  %6954 = load i8*, i8** %11, align 8, !dbg !1628
  %6955 = load i64, i64* %21, align 8, !dbg !1628
  %6956 = getelementptr inbounds i8, i8* %6954, i64 %6955, !dbg !1628
  store i8 39, i8* %6956, align 1, !dbg !1628
  br label %originalBB837

originalBB841alteredBB:                           ; preds = %originalBB841, %3322
  %6957 = load i64, i64* %21, align 8, !dbg !1631
  %_842 = shl i64 %6957, 1
  %6958 = add i64 %6957, 1, !dbg !1631
  store i64 %6958, i64* %21, align 8, !dbg !1631
  br label %originalBB841

originalBB846alteredBB:                           ; preds = %originalBB846, %3341
  store i8 0, i8* %28, align 1, !dbg !1632
  br label %originalBB846

originalBB850alteredBB:                           ; preds = %originalBB850, %3358
  br label %originalBB850

originalBB854alteredBB:                           ; preds = %originalBB854, %3375
  store i8 1, i8* %35, align 1, !dbg !1635
  br label %originalBB854

originalBB858alteredBB:                           ; preds = %originalBB858, %3392
  %6959 = load i8, i8* %26, align 1, !dbg !1642
  %6960 = trunc i8 %6959 to i1, !dbg !1642
  br label %originalBB858

originalBB862alteredBB:                           ; preds = %originalBB862, %3411
  store i64 1, i64* %36, align 8, !dbg !1645
  %6961 = call i16** @__ctype_b_loc() #14, !dbg !1647
  %6962 = load i16*, i16** %6961, align 8, !dbg !1647
  %6963 = load i8, i8* %31, align 1, !dbg !1647
  %6964 = zext i8 %6963 to i32, !dbg !1647
  %6965 = sext i32 %6964 to i64, !dbg !1647
  %6966 = getelementptr inbounds i16, i16* %6962, i64 %6965, !dbg !1647
  %6967 = load i16, i16* %6966, align 2, !dbg !1647
  %6968 = zext i16 %6967 to i32, !dbg !1647
  %_863 = sub i32 0, %6968
  %gen864 = add i32 %_863, 16384
  %6969 = and i32 %6968, 16384, !dbg !1647
  %6970 = icmp ne i32 %6969, 0, !dbg !1648
  %6971 = zext i1 %6970 to i8, !dbg !1649
  store i8 %6971, i8* %37, align 1, !dbg !1649
  br label %originalBB862

originalBB868alteredBB:                           ; preds = %originalBB868, %3439
  %6972 = bitcast %struct.__mbstate_t* %38 to i8*, !dbg !1669
  call void @llvm.memset.p0i8.i64(i8* align 4 %6972, i8 0, i64 8, i1 false), !dbg !1669
  store i64 0, i64* %36, align 8, !dbg !1670
  store i8 1, i8* %37, align 1, !dbg !1671
  %6973 = load i64, i64* %14, align 8, !dbg !1672
  %6974 = icmp eq i64 %6973, -1, !dbg !1674
  br label %originalBB868

originalBB872alteredBB:                           ; preds = %originalBB872, %3459
  %6975 = load i8*, i8** %13, align 8, !dbg !1676
  %6976 = call i64 @strlen(i8* %6975) #13, !dbg !1677
  store i64 %6976, i64* %14, align 8, !dbg !1678
  br label %originalBB872

originalBB876alteredBB:                           ; preds = %originalBB876, %3478
  br label %originalBB876

originalBB880alteredBB:                           ; preds = %originalBB880, %3495
  %6977 = load i8*, i8** %13, align 8, !dbg !1687
  %6978 = load i64, i64* %20, align 8, !dbg !1688
  %6979 = load i64, i64* %36, align 8, !dbg !1689
  %_881 = sub i64 0, %6978
  %gen882 = add i64 %_881, %6979
  %_883 = sub i64 0, %6978
  %gen884 = add i64 %_883, %6979
  %_885 = shl i64 %6978, %6979
  %_886 = sub i64 %6978, %6979
  %gen887 = mul i64 %_886, %6979
  %_888 = sub i64 %6978, %6979
  %gen889 = mul i64 %_888, %6979
  %_890 = shl i64 %6978, %6979
  %6980 = add i64 %6978, %6979, !dbg !1690
  %6981 = getelementptr inbounds i8, i8* %6977, i64 %6980, !dbg !1687
  %6982 = load i64, i64* %14, align 8, !dbg !1691
  %6983 = load i64, i64* %20, align 8, !dbg !1692
  %6984 = load i64, i64* %36, align 8, !dbg !1693
  %_891 = sub i64 0, %6983
  %gen892 = add i64 %_891, %6984
  %_893 = shl i64 %6983, %6984
  %_894 = sub i64 0, %6983
  %gen895 = add i64 %_894, %6984
  %_896 = sub i64 %6983, %6984
  %gen897 = mul i64 %_896, %6984
  %6985 = add i64 %6983, %6984, !dbg !1694
  %_898 = sub i64 %6982, %6985
  %gen899 = mul i64 %_898, %6985
  %_900 = sub i64 %6982, %6985
  %gen901 = mul i64 %_900, %6985
  %_902 = shl i64 %6982, %6985
  %6986 = sub i64 %6982, %6985, !dbg !1695
  %6987 = call i64 @rpl_mbrtowc(i32* %39, i8* %6981, i64 %6986, %struct.__mbstate_t* %38), !dbg !1696
  store i64 %6987, i64* %40, align 8, !dbg !1686
  %6988 = load i64, i64* %40, align 8, !dbg !1697
  %6989 = icmp eq i64 %6988, 0, !dbg !1699
  br label %originalBB880

originalBB906alteredBB:                           ; preds = %originalBB906, %3525
  br label %originalBB906

originalBB910alteredBB:                           ; preds = %originalBB910, %3545
  store i8 0, i8* %37, align 1, !dbg !1706
  br label %originalBB910

originalBB914alteredBB:                           ; preds = %originalBB914, %3562
  %6990 = load i64, i64* %40, align 8, !dbg !1709
  %6991 = icmp eq i64 %6990, -2, !dbg !1711
  br label %originalBB914

originalBB918alteredBB:                           ; preds = %originalBB918, %3581
  store i8 0, i8* %37, align 1, !dbg !1713
  br label %originalBB918

originalBB922alteredBB:                           ; preds = %originalBB922, %3598
  %6992 = load i64, i64* %20, align 8, !dbg !1716
  %6993 = load i64, i64* %36, align 8, !dbg !1717
  %_923 = shl i64 %6992, %6993
  %6994 = add i64 %6992, %6993, !dbg !1718
  %6995 = load i64, i64* %14, align 8, !dbg !1719
  %6996 = icmp ult i64 %6994, %6995, !dbg !1720
  br label %originalBB922

originalBB927alteredBB:                           ; preds = %originalBB927, %3620
  %6997 = load i8*, i8** %13, align 8, !dbg !1722
  %6998 = load i64, i64* %20, align 8, !dbg !1723
  %6999 = load i64, i64* %36, align 8, !dbg !1724
  %_928 = sub i64 0, %6998
  %gen929 = add i64 %_928, %6999
  %7000 = add i64 %6998, %6999, !dbg !1725
  %7001 = getelementptr inbounds i8, i8* %6997, i64 %7000, !dbg !1722
  %7002 = load i8, i8* %7001, align 1, !dbg !1722
  %7003 = sext i8 %7002 to i32, !dbg !1722
  %7004 = icmp ne i32 %7003, 0, !dbg !1721
  br label %originalBB927

originalBB933alteredBB:                           ; preds = %originalBB933, %3645
  br label %originalBB933

originalBB937alteredBB:                           ; preds = %originalBB937, %3666
  br label %originalBB937

originalBB941alteredBB:                           ; preds = %originalBB941, %3683
  %7005 = load i8, i8* %27, align 1, !dbg !1730
  %7006 = trunc i8 %7005 to i1, !dbg !1730
  br label %originalBB941

originalBB945alteredBB:                           ; preds = %originalBB945, %3702
  %7007 = load i32, i32* %15, align 4, !dbg !1734
  %7008 = icmp eq i32 %7007, 2, !dbg !1735
  br label %originalBB945

originalBB949alteredBB:                           ; preds = %originalBB949, %3721
  store i64 1, i64* %41, align 8, !dbg !1740
  br label %originalBB949

originalBB953alteredBB:                           ; preds = %originalBB953, %3738
  %7009 = load i64, i64* %41, align 8, !dbg !1743
  %7010 = load i64, i64* %40, align 8, !dbg !1745
  %7011 = icmp ult i64 %7009, %7010, !dbg !1746
  br label %originalBB953

originalBB957alteredBB:                           ; preds = %originalBB957, %3768
  br label %originalBB957

originalBB961alteredBB:                           ; preds = %originalBB961, %3785
  br label %originalBB961

originalBB965alteredBB:                           ; preds = %originalBB965, %3802
  br label %originalBB965

originalBB969alteredBB:                           ; preds = %originalBB969, %3819
  %7012 = load i64, i64* %41, align 8, !dbg !1759
  %_970 = shl i64 %7012, 1
  %_971 = sub i64 0, %7012
  %gen972 = add i64 %_971, 1
  %_973 = sub i64 %7012, 1
  %gen974 = mul i64 %_973, 1
  %7013 = add i64 %7012, 1, !dbg !1759
  store i64 %7013, i64* %41, align 8, !dbg !1759
  br label %originalBB969

originalBB978alteredBB:                           ; preds = %originalBB978, %3838
  br label %originalBB978

originalBB982alteredBB:                           ; preds = %originalBB982, %3855
  %7014 = load i32, i32* %39, align 4, !dbg !1764
  %7015 = call i32 @iswprint(i32 %7014) #10, !dbg !1766
  %7016 = icmp ne i32 %7015, 0, !dbg !1766
  br label %originalBB982

originalBB986alteredBB:                           ; preds = %originalBB986, %3875
  store i8 0, i8* %37, align 1, !dbg !1768
  br label %originalBB986

originalBB990alteredBB:                           ; preds = %originalBB990, %3892
  %7017 = load i64, i64* %40, align 8, !dbg !1770
  %7018 = load i64, i64* %36, align 8, !dbg !1771
  %_991 = sub i64 0, %7018
  %gen992 = add i64 %_991, %7017
  %_993 = shl i64 %7018, %7017
  %_994 = sub i64 0, %7018
  %gen995 = add i64 %_994, %7017
  %_996 = shl i64 %7018, %7017
  %_997 = sub i64 %7018, %7017
  %gen998 = mul i64 %_997, %7017
  %7019 = add i64 %7018, %7017, !dbg !1771
  store i64 %7019, i64* %36, align 8, !dbg !1771
  br label %originalBB990

originalBB1002alteredBB:                          ; preds = %originalBB1002, %3912
  br label %originalBB1002

originalBB1006alteredBB:                          ; preds = %originalBB1006, %3929
  br label %originalBB1006

originalBB1010alteredBB:                          ; preds = %originalBB1010, %3946
  br label %originalBB1010

originalBB1014alteredBB:                          ; preds = %originalBB1014, %3963
  %7020 = call i32 @mbsinit(%struct.__mbstate_t* %38) #13, !dbg !1773
  %7021 = icmp ne i32 %7020, 0, !dbg !1774
  %_1015 = shl i1 %7021, true
  %_1016 = sub i1 false, %7021
  %gen1017 = add i1 %_1016, true
  %_1018 = sub i1 %7021, true
  %gen1019 = mul i1 %_1018, true
  %_1020 = sub i1 false, %7021
  %gen1021 = add i1 %_1020, true
  %_1022 = sub i1 false, %7021
  %gen1023 = add i1 %_1022, true
  %_1024 = shl i1 %7021, true
  %_1025 = shl i1 %7021, true
  %7022 = xor i1 %7021, true, !dbg !1774
  br label %originalBB1014

originalBB1029alteredBB:                          ; preds = %originalBB1029, %3983
  br label %originalBB1029

originalBB1033alteredBB:                          ; preds = %originalBB1033, %4000
  %7023 = load i8, i8* %37, align 1, !dbg !1777
  %7024 = trunc i8 %7023 to i1, !dbg !1777
  %7025 = zext i1 %7024 to i8, !dbg !1778
  store i8 %7025, i8* %35, align 1, !dbg !1778
  %7026 = load i64, i64* %36, align 8, !dbg !1779
  %7027 = icmp ult i64 1, %7026, !dbg !1781
  br label %originalBB1033

originalBB1037alteredBB:                          ; preds = %originalBB1037, %4022
  %7028 = load i8, i8* %25, align 1, !dbg !1783
  %7029 = trunc i8 %7028 to i1, !dbg !1783
  br label %originalBB1037

originalBB1041alteredBB:                          ; preds = %originalBB1041, %4041
  %7030 = load i8, i8* %37, align 1, !dbg !1785
  %7031 = trunc i8 %7030 to i1, !dbg !1785
  br label %originalBB1041

originalBB1045alteredBB:                          ; preds = %originalBB1045, %4060
  %7032 = load i64, i64* %20, align 8, !dbg !1790
  %7033 = load i64, i64* %36, align 8, !dbg !1791
  %_1046 = sub i64 %7032, %7033
  %gen1047 = mul i64 %_1046, %7033
  %_1048 = sub i64 %7032, %7033
  %gen1049 = mul i64 %_1048, %7033
  %_1050 = shl i64 %7032, %7033
  %_1051 = shl i64 %7032, %7033
  %_1052 = sub i64 0, %7032
  %gen1053 = add i64 %_1052, %7033
  %_1054 = shl i64 %7032, %7033
  %_1055 = sub i64 0, %7032
  %gen1056 = add i64 %_1055, %7033
  %7034 = add i64 %7032, %7033, !dbg !1792
  store i64 %7034, i64* %42, align 8, !dbg !1789
  br label %originalBB1045

originalBB1060alteredBB:                          ; preds = %originalBB1060, %4080
  %7035 = load i8, i8* %25, align 1, !dbg !1794
  %7036 = trunc i8 %7035 to i1, !dbg !1794
  br label %originalBB1060

originalBB1064alteredBB:                          ; preds = %originalBB1064, %4099
  %7037 = load i8, i8* %37, align 1, !dbg !1800
  %7038 = trunc i8 %7037 to i1, !dbg !1800
  br label %originalBB1064

originalBB1068alteredBB:                          ; preds = %originalBB1068, %4118
  br label %originalBB1068

originalBB1072alteredBB:                          ; preds = %originalBB1072, %4135
  %7039 = load i8, i8* %27, align 1, !dbg !1804
  %7040 = trunc i8 %7039 to i1, !dbg !1804
  br label %originalBB1072

originalBB1076alteredBB:                          ; preds = %originalBB1076, %4154
  br label %originalBB1076

originalBB1080alteredBB:                          ; preds = %originalBB1080, %4171
  store i8 1, i8* %34, align 1, !dbg !1807
  %7041 = load i32, i32* %15, align 4, !dbg !1808
  %7042 = icmp eq i32 %7041, 2, !dbg !1808
  br label %originalBB1080

originalBB1084alteredBB:                          ; preds = %originalBB1084, %4190
  %7043 = load i8, i8* %28, align 1, !dbg !1808
  %7044 = trunc i8 %7043 to i1, !dbg !1808
  br label %originalBB1084

originalBB1088alteredBB:                          ; preds = %originalBB1088, %4209
  br label %originalBB1088

originalBB1092alteredBB:                          ; preds = %originalBB1092, %4226
  %7045 = load i64, i64* %21, align 8, !dbg !1812
  %7046 = load i64, i64* %12, align 8, !dbg !1812
  %7047 = icmp ult i64 %7045, %7046, !dbg !1812
  br label %originalBB1092

originalBB1096alteredBB:                          ; preds = %originalBB1096, %4246
  %7048 = load i8*, i8** %11, align 8, !dbg !1812
  %7049 = load i64, i64* %21, align 8, !dbg !1812
  %7050 = getelementptr inbounds i8, i8* %7048, i64 %7049, !dbg !1812
  store i8 39, i8* %7050, align 1, !dbg !1812
  br label %originalBB1096

originalBB1100alteredBB:                          ; preds = %originalBB1100, %4266
  %7051 = load i64, i64* %21, align 8, !dbg !1815
  %_1101 = shl i64 %7051, 1
  %_1102 = sub i64 %7051, 1
  %gen1103 = mul i64 %_1102, 1
  %_1104 = sub i64 0, %7051
  %gen1105 = add i64 %_1104, 1
  %_1106 = sub i64 0, %7051
  %gen1107 = add i64 %_1106, 1
  %_1108 = sub i64 0, %7051
  %gen1109 = add i64 %_1108, 1
  %_1110 = sub i64 0, %7051
  %gen1111 = add i64 %_1110, 1
  %_1112 = sub i64 %7051, 1
  %gen1113 = mul i64 %_1112, 1
  %_1114 = sub i64 0, %7051
  %gen1115 = add i64 %_1114, 1
  %7052 = add i64 %7051, 1, !dbg !1815
  store i64 %7052, i64* %21, align 8, !dbg !1815
  br label %originalBB1100

originalBB1119alteredBB:                          ; preds = %originalBB1119, %4285
  br label %originalBB1119

originalBB1123alteredBB:                          ; preds = %originalBB1123, %4302
  %7053 = load i64, i64* %21, align 8, !dbg !1816
  %7054 = load i64, i64* %12, align 8, !dbg !1816
  %7055 = icmp ult i64 %7053, %7054, !dbg !1816
  br label %originalBB1123

originalBB1127alteredBB:                          ; preds = %originalBB1127, %4322
  %7056 = load i8*, i8** %11, align 8, !dbg !1816
  %7057 = load i64, i64* %21, align 8, !dbg !1816
  %7058 = getelementptr inbounds i8, i8* %7056, i64 %7057, !dbg !1816
  store i8 36, i8* %7058, align 1, !dbg !1816
  br label %originalBB1127

originalBB1131alteredBB:                          ; preds = %originalBB1131, %4342
  %7059 = load i64, i64* %21, align 8, !dbg !1819
  %_1132 = sub i64 0, %7059
  %gen1133 = add i64 %_1132, 1
  %_1134 = sub i64 %7059, 1
  %gen1135 = mul i64 %_1134, 1
  %7060 = add i64 %7059, 1, !dbg !1819
  store i64 %7060, i64* %21, align 8, !dbg !1819
  br label %originalBB1131

originalBB1139alteredBB:                          ; preds = %originalBB1139, %4361
  br label %originalBB1139

originalBB1143alteredBB:                          ; preds = %originalBB1143, %4378
  %7061 = load i64, i64* %21, align 8, !dbg !1820
  %7062 = load i64, i64* %12, align 8, !dbg !1820
  %7063 = icmp ult i64 %7061, %7062, !dbg !1820
  br label %originalBB1143

originalBB1147alteredBB:                          ; preds = %originalBB1147, %4398
  %7064 = load i8*, i8** %11, align 8, !dbg !1820
  %7065 = load i64, i64* %21, align 8, !dbg !1820
  %7066 = getelementptr inbounds i8, i8* %7064, i64 %7065, !dbg !1820
  store i8 39, i8* %7066, align 1, !dbg !1820
  br label %originalBB1147

originalBB1151alteredBB:                          ; preds = %originalBB1151, %4418
  %7067 = load i64, i64* %21, align 8, !dbg !1823
  %_1152 = sub i64 %7067, 1
  %gen1153 = mul i64 %_1152, 1
  %_1154 = shl i64 %7067, 1
  %7068 = add i64 %7067, 1, !dbg !1823
  store i64 %7068, i64* %21, align 8, !dbg !1823
  br label %originalBB1151

originalBB1158alteredBB:                          ; preds = %originalBB1158, %4437
  store i8 1, i8* %28, align 1, !dbg !1810
  br label %originalBB1158

originalBB1162alteredBB:                          ; preds = %originalBB1162, %4455
  %7069 = load i64, i64* %21, align 8, !dbg !1824
  %7070 = load i64, i64* %12, align 8, !dbg !1824
  %7071 = icmp ult i64 %7069, %7070, !dbg !1824
  br label %originalBB1162

originalBB1166alteredBB:                          ; preds = %originalBB1166, %4475
  %7072 = load i8*, i8** %11, align 8, !dbg !1824
  %7073 = load i64, i64* %21, align 8, !dbg !1824
  %7074 = getelementptr inbounds i8, i8* %7072, i64 %7073, !dbg !1824
  store i8 92, i8* %7074, align 1, !dbg !1824
  br label %originalBB1166

originalBB1170alteredBB:                          ; preds = %originalBB1170, %4495
  %7075 = load i64, i64* %21, align 8, !dbg !1827
  %_1171 = sub i64 %7075, 1
  %gen1172 = mul i64 %_1171, 1
  %_1173 = sub i64 %7075, 1
  %gen1174 = mul i64 %_1173, 1
  %_1175 = shl i64 %7075, 1
  %_1176 = sub i64 0, %7075
  %gen1177 = add i64 %_1176, 1
  %_1178 = sub i64 0, %7075
  %gen1179 = add i64 %_1178, 1
  %_1180 = sub i64 0, %7075
  %gen1181 = add i64 %_1180, 1
  %_1182 = sub i64 %7075, 1
  %gen1183 = mul i64 %_1182, 1
  %7076 = add i64 %7075, 1, !dbg !1827
  store i64 %7076, i64* %21, align 8, !dbg !1827
  br label %originalBB1170

originalBB1187alteredBB:                          ; preds = %originalBB1187, %4514
  br label %originalBB1187

originalBB1191alteredBB:                          ; preds = %originalBB1191, %4531
  br label %originalBB1191

originalBB1195alteredBB:                          ; preds = %originalBB1195, %4548
  %7077 = load i64, i64* %21, align 8, !dbg !1829
  %7078 = load i64, i64* %12, align 8, !dbg !1829
  %7079 = icmp ult i64 %7077, %7078, !dbg !1829
  br label %originalBB1195

originalBB1199alteredBB:                          ; preds = %originalBB1199, %4568
  %7080 = load i8, i8* %31, align 1, !dbg !1829
  %7081 = zext i8 %7080 to i32, !dbg !1829
  %_1200 = shl i32 %7081, 6
  %_1201 = sub i32 0, %7081
  %gen1202 = add i32 %_1201, 6
  %_1203 = sub i32 0, %7081
  %gen1204 = add i32 %_1203, 6
  %7082 = ashr i32 %7081, 6, !dbg !1829
  %_1205 = sub i32 0, 48
  %gen1206 = add i32 %_1205, %7082
  %7083 = add nsw i32 48, %7082, !dbg !1829
  %7084 = trunc i32 %7083 to i8, !dbg !1829
  %7085 = load i8*, i8** %11, align 8, !dbg !1829
  %7086 = load i64, i64* %21, align 8, !dbg !1829
  %7087 = getelementptr inbounds i8, i8* %7085, i64 %7086, !dbg !1829
  store i8 %7084, i8* %7087, align 1, !dbg !1829
  br label %originalBB1199

originalBB1210alteredBB:                          ; preds = %originalBB1210, %4596
  br label %originalBB1210

originalBB1214alteredBB:                          ; preds = %originalBB1214, %4613
  %7088 = load i64, i64* %21, align 8, !dbg !1834
  %7089 = load i64, i64* %12, align 8, !dbg !1834
  %7090 = icmp ult i64 %7088, %7089, !dbg !1834
  br label %originalBB1214

originalBB1218alteredBB:                          ; preds = %originalBB1218, %4633
  %7091 = load i8, i8* %31, align 1, !dbg !1834
  %7092 = zext i8 %7091 to i32, !dbg !1834
  %_1219 = shl i32 %7092, 3
  %_1220 = sub i32 0, %7092
  %gen1221 = add i32 %_1220, 3
  %_1222 = sub i32 0, %7092
  %gen1223 = add i32 %_1222, 3
  %_1224 = sub i32 %7092, 3
  %gen1225 = mul i32 %_1224, 3
  %_1226 = sub i32 %7092, 3
  %gen1227 = mul i32 %_1226, 3
  %7093 = ashr i32 %7092, 3, !dbg !1834
  %_1228 = sub i32 %7093, 7
  %gen1229 = mul i32 %_1228, 7
  %_1230 = sub i32 0, %7093
  %gen1231 = add i32 %_1230, 7
  %_1232 = sub i32 %7093, 7
  %gen1233 = mul i32 %_1232, 7
  %7094 = and i32 %7093, 7, !dbg !1834
  %_1234 = sub i32 0, 48
  %gen1235 = add i32 %_1234, %7094
  %_1236 = sub i32 0, 48
  %gen1237 = add i32 %_1236, %7094
  %7095 = add nsw i32 48, %7094, !dbg !1834
  %7096 = trunc i32 %7095 to i8, !dbg !1834
  %7097 = load i8*, i8** %11, align 8, !dbg !1834
  %7098 = load i64, i64* %21, align 8, !dbg !1834
  %7099 = getelementptr inbounds i8, i8* %7097, i64 %7098, !dbg !1834
  store i8 %7096, i8* %7099, align 1, !dbg !1834
  br label %originalBB1218

originalBB1241alteredBB:                          ; preds = %originalBB1241, %4659
  %7100 = load i64, i64* %21, align 8, !dbg !1837
  %_1242 = shl i64 %7100, 1
  %_1243 = sub i64 0, %7100
  %gen1244 = add i64 %_1243, 1
  %_1245 = shl i64 %7100, 1
  %_1246 = shl i64 %7100, 1
  %_1247 = shl i64 %7100, 1
  %_1248 = sub i64 0, %7100
  %gen1249 = add i64 %_1248, 1
  %_1250 = sub i64 0, %7100
  %gen1251 = add i64 %_1250, 1
  %_1252 = sub i64 0, %7100
  %gen1253 = add i64 %_1252, 1
  %7101 = add i64 %7100, 1, !dbg !1837
  store i64 %7101, i64* %21, align 8, !dbg !1837
  br label %originalBB1241

originalBB1257alteredBB:                          ; preds = %originalBB1257, %4678
  %7102 = load i8, i8* %31, align 1, !dbg !1838
  %7103 = zext i8 %7102 to i32, !dbg !1838
  %_1258 = sub i32 0, %7103
  %gen1259 = add i32 %_1258, 7
  %_1260 = sub i32 0, %7103
  %gen1261 = add i32 %_1260, 7
  %_1262 = shl i32 %7103, 7
  %_1263 = shl i32 %7103, 7
  %_1264 = sub i32 %7103, 7
  %gen1265 = mul i32 %_1264, 7
  %_1266 = sub i32 0, %7103
  %gen1267 = add i32 %_1266, 7
  %7104 = and i32 %7103, 7, !dbg !1839
  %_1268 = sub i32 0, 48
  %gen1269 = add i32 %_1268, %7104
  %_1270 = sub i32 0, 48
  %gen1271 = add i32 %_1270, %7104
  %_1272 = sub i32 0, 48
  %gen1273 = add i32 %_1272, %7104
  %_1274 = shl i32 48, %7104
  %_1275 = sub i32 0, 48
  %gen1276 = add i32 %_1275, %7104
  %_1277 = sub i32 48, %7104
  %gen1278 = mul i32 %_1277, %7104
  %_1279 = shl i32 48, %7104
  %_1280 = shl i32 48, %7104
  %7105 = add nsw i32 48, %7104, !dbg !1840
  %7106 = trunc i32 %7105 to i8, !dbg !1841
  store i8 %7106, i8* %31, align 1, !dbg !1842
  br label %originalBB1257

originalBB1284alteredBB:                          ; preds = %originalBB1284, %4703
  br label %originalBB1284

originalBB1288alteredBB:                          ; preds = %originalBB1288, %4720
  %7107 = load i64, i64* %21, align 8, !dbg !1849
  %7108 = load i64, i64* %12, align 8, !dbg !1849
  %7109 = icmp ult i64 %7107, %7108, !dbg !1849
  br label %originalBB1288

originalBB1292alteredBB:                          ; preds = %originalBB1292, %4740
  %7110 = load i8*, i8** %11, align 8, !dbg !1849
  %7111 = load i64, i64* %21, align 8, !dbg !1849
  %7112 = getelementptr inbounds i8, i8* %7110, i64 %7111, !dbg !1849
  store i8 92, i8* %7112, align 1, !dbg !1849
  br label %originalBB1292

originalBB1296alteredBB:                          ; preds = %originalBB1296, %4760
  %7113 = load i64, i64* %21, align 8, !dbg !1852
  %_1297 = sub i64 %7113, 1
  %gen1298 = mul i64 %_1297, 1
  %_1299 = sub i64 %7113, 1
  %gen1300 = mul i64 %_1299, 1
  %_1301 = sub i64 0, %7113
  %gen1302 = add i64 %_1301, 1
  %_1303 = shl i64 %7113, 1
  %7114 = add i64 %7113, 1, !dbg !1852
  store i64 %7114, i64* %21, align 8, !dbg !1852
  br label %originalBB1296

originalBB1307alteredBB:                          ; preds = %originalBB1307, %4779
  store i8 0, i8* %33, align 1, !dbg !1853
  br label %originalBB1307

originalBB1311alteredBB:                          ; preds = %originalBB1311, %4796
  br label %originalBB1311

originalBB1315alteredBB:                          ; preds = %originalBB1315, %4813
  %7115 = load i64, i64* %42, align 8, !dbg !1855
  %7116 = load i64, i64* %20, align 8, !dbg !1857
  %_1316 = shl i64 %7116, 1
  %_1317 = sub i64 0, %7116
  %gen1318 = add i64 %_1317, 1
  %_1319 = sub i64 %7116, 1
  %gen1320 = mul i64 %_1319, 1
  %_1321 = sub i64 0, %7116
  %gen1322 = add i64 %_1321, 1
  %_1323 = shl i64 %7116, 1
  %7117 = add i64 %7116, 1, !dbg !1858
  %7118 = icmp ule i64 %7115, %7117, !dbg !1859
  br label %originalBB1315

originalBB1327alteredBB:                          ; preds = %originalBB1327, %4834
  br label %originalBB1327

originalBB1331alteredBB:                          ; preds = %originalBB1331, %4851
  br label %originalBB1331

originalBB1335alteredBB:                          ; preds = %originalBB1335, %4868
  %7119 = load i8, i8* %28, align 1, !dbg !1863
  %7120 = trunc i8 %7119 to i1, !dbg !1863
  br label %originalBB1335

originalBB1339alteredBB:                          ; preds = %originalBB1339, %4887
  %7121 = load i8, i8* %34, align 1, !dbg !1863
  %7122 = trunc i8 %7121 to i1, !dbg !1863
  br label %originalBB1339

originalBB1343alteredBB:                          ; preds = %originalBB1343, %4907
  %7123 = load i64, i64* %21, align 8, !dbg !1869
  %7124 = load i64, i64* %12, align 8, !dbg !1869
  %7125 = icmp ult i64 %7123, %7124, !dbg !1869
  br label %originalBB1343

originalBB1347alteredBB:                          ; preds = %originalBB1347, %4927
  %7126 = load i8*, i8** %11, align 8, !dbg !1869
  %7127 = load i64, i64* %21, align 8, !dbg !1869
  %7128 = getelementptr inbounds i8, i8* %7126, i64 %7127, !dbg !1869
  store i8 39, i8* %7128, align 1, !dbg !1869
  br label %originalBB1347

originalBB1351alteredBB:                          ; preds = %originalBB1351, %4947
  %7129 = load i64, i64* %21, align 8, !dbg !1872
  %_1352 = sub i64 0, %7129
  %gen1353 = add i64 %_1352, 1
  %7130 = add i64 %7129, 1, !dbg !1872
  store i64 %7130, i64* %21, align 8, !dbg !1872
  br label %originalBB1351

originalBB1357alteredBB:                          ; preds = %originalBB1357, %4966
  br label %originalBB1357

originalBB1361alteredBB:                          ; preds = %originalBB1361, %4983
  %7131 = load i64, i64* %21, align 8, !dbg !1873
  %7132 = load i64, i64* %12, align 8, !dbg !1873
  %7133 = icmp ult i64 %7131, %7132, !dbg !1873
  br label %originalBB1361

originalBB1365alteredBB:                          ; preds = %originalBB1365, %5003
  %7134 = load i8*, i8** %11, align 8, !dbg !1873
  %7135 = load i64, i64* %21, align 8, !dbg !1873
  %7136 = getelementptr inbounds i8, i8* %7134, i64 %7135, !dbg !1873
  store i8 39, i8* %7136, align 1, !dbg !1873
  br label %originalBB1365

originalBB1369alteredBB:                          ; preds = %originalBB1369, %5023
  %7137 = load i64, i64* %21, align 8, !dbg !1876
  %_1370 = sub i64 0, %7137
  %gen1371 = add i64 %_1370, 1
  %_1372 = sub i64 %7137, 1
  %gen1373 = mul i64 %_1372, 1
  %_1374 = sub i64 %7137, 1
  %gen1375 = mul i64 %_1374, 1
  %7138 = add i64 %7137, 1, !dbg !1876
  store i64 %7138, i64* %21, align 8, !dbg !1876
  br label %originalBB1369

originalBB1379alteredBB:                          ; preds = %originalBB1379, %5042
  store i8 0, i8* %28, align 1, !dbg !1867
  br label %originalBB1379

originalBB1383alteredBB:                          ; preds = %originalBB1383, %5059
  br label %originalBB1383

originalBB1387alteredBB:                          ; preds = %originalBB1387, %5076
  br label %originalBB1387

originalBB1391alteredBB:                          ; preds = %originalBB1391, %5093
  %7139 = load i64, i64* %21, align 8, !dbg !1878
  %7140 = load i64, i64* %12, align 8, !dbg !1878
  %7141 = icmp ult i64 %7139, %7140, !dbg !1878
  br label %originalBB1391

originalBB1395alteredBB:                          ; preds = %originalBB1395, %5113
  %7142 = load i8, i8* %31, align 1, !dbg !1878
  %7143 = load i8*, i8** %11, align 8, !dbg !1878
  %7144 = load i64, i64* %21, align 8, !dbg !1878
  %7145 = getelementptr inbounds i8, i8* %7143, i64 %7144, !dbg !1878
  store i8 %7142, i8* %7145, align 1, !dbg !1878
  br label %originalBB1395

originalBB1399alteredBB:                          ; preds = %originalBB1399, %5137
  %7146 = load i8*, i8** %13, align 8, !dbg !1882
  %7147 = load i64, i64* %20, align 8, !dbg !1883
  %_1400 = shl i64 %7147, 1
  %7148 = add i64 %7147, 1, !dbg !1883
  store i64 %7148, i64* %20, align 8, !dbg !1883
  %7149 = getelementptr inbounds i8, i8* %7146, i64 %7148, !dbg !1882
  %7150 = load i8, i8* %7149, align 1, !dbg !1882
  store i8 %7150, i8* %31, align 1, !dbg !1884
  br label %originalBB1399

originalBB1404alteredBB:                          ; preds = %originalBB1404, %5159
  br label %originalBB1404

originalBB1408alteredBB:                          ; preds = %originalBB1408, %5176
  br label %originalBB1408

originalBB1412alteredBB:                          ; preds = %originalBB1412, %5193
  %7151 = load i8, i8* %25, align 1, !dbg !1891
  %7152 = trunc i8 %7151 to i1, !dbg !1891
  br label %originalBB1412

originalBB1416alteredBB:                          ; preds = %originalBB1416, %5212
  %7153 = load i32, i32* %15, align 4, !dbg !1894
  %7154 = icmp ne i32 %7153, 2, !dbg !1895
  br label %originalBB1416

originalBB1420alteredBB:                          ; preds = %originalBB1420, %5231
  %7155 = load i8, i8* %27, align 1, !dbg !1897
  %7156 = trunc i8 %7155 to i1, !dbg !1897
  br label %originalBB1420

originalBB1424alteredBB:                          ; preds = %originalBB1424, %5250
  %7157 = load i32*, i32** %17, align 8, !dbg !1899
  %7158 = icmp ne i32* %7157, null, !dbg !1899
  br label %originalBB1424

originalBB1428alteredBB:                          ; preds = %originalBB1428, %5283
  %7159 = load i8, i8* %33, align 1, !dbg !1909
  %7160 = trunc i8 %7159 to i1, !dbg !1909
  br label %originalBB1428

originalBB1432alteredBB:                          ; preds = %originalBB1432, %5302
  br label %originalBB1432

originalBB1436alteredBB:                          ; preds = %originalBB1436, %5319
  br label %originalBB1436

originalBB1440alteredBB:                          ; preds = %originalBB1440, %5336
  br label %originalBB1440

originalBB1444alteredBB:                          ; preds = %originalBB1444, %5353
  %7161 = load i8, i8* %27, align 1, !dbg !1915
  %7162 = trunc i8 %7161 to i1, !dbg !1915
  br label %originalBB1444

originalBB1448alteredBB:                          ; preds = %originalBB1448, %5372
  br label %originalBB1448

originalBB1452alteredBB:                          ; preds = %originalBB1452, %5389
  store i8 1, i8* %34, align 1, !dbg !1918
  %7163 = load i32, i32* %15, align 4, !dbg !1919
  %7164 = icmp eq i32 %7163, 2, !dbg !1919
  br label %originalBB1452

originalBB1456alteredBB:                          ; preds = %originalBB1456, %5411
  br label %originalBB1456

originalBB1460alteredBB:                          ; preds = %originalBB1460, %5428
  %7165 = load i64, i64* %21, align 8, !dbg !1923
  %7166 = load i64, i64* %12, align 8, !dbg !1923
  %7167 = icmp ult i64 %7165, %7166, !dbg !1923
  br label %originalBB1460

originalBB1464alteredBB:                          ; preds = %originalBB1464, %5448
  %7168 = load i8*, i8** %11, align 8, !dbg !1923
  %7169 = load i64, i64* %21, align 8, !dbg !1923
  %7170 = getelementptr inbounds i8, i8* %7168, i64 %7169, !dbg !1923
  store i8 39, i8* %7170, align 1, !dbg !1923
  br label %originalBB1464

originalBB1468alteredBB:                          ; preds = %originalBB1468, %5468
  %7171 = load i64, i64* %21, align 8, !dbg !1926
  %_1469 = shl i64 %7171, 1
  %_1470 = shl i64 %7171, 1
  %_1471 = shl i64 %7171, 1
  %7172 = add i64 %7171, 1, !dbg !1926
  store i64 %7172, i64* %21, align 8, !dbg !1926
  br label %originalBB1468

originalBB1475alteredBB:                          ; preds = %originalBB1475, %5487
  br label %originalBB1475

originalBB1479alteredBB:                          ; preds = %originalBB1479, %5508
  %7173 = load i8*, i8** %11, align 8, !dbg !1927
  %7174 = load i64, i64* %21, align 8, !dbg !1927
  %7175 = getelementptr inbounds i8, i8* %7173, i64 %7174, !dbg !1927
  store i8 36, i8* %7175, align 1, !dbg !1927
  br label %originalBB1479

originalBB1483alteredBB:                          ; preds = %originalBB1483, %5528
  %7176 = load i64, i64* %21, align 8, !dbg !1930
  %_1484 = sub i64 0, %7176
  %gen1485 = add i64 %_1484, 1
  %7177 = add i64 %7176, 1, !dbg !1930
  store i64 %7177, i64* %21, align 8, !dbg !1930
  br label %originalBB1483

originalBB1489alteredBB:                          ; preds = %originalBB1489, %5547
  br label %originalBB1489

originalBB1493alteredBB:                          ; preds = %originalBB1493, %5564
  %7178 = load i64, i64* %21, align 8, !dbg !1931
  %7179 = load i64, i64* %12, align 8, !dbg !1931
  %7180 = icmp ult i64 %7178, %7179, !dbg !1931
  br label %originalBB1493

originalBB1497alteredBB:                          ; preds = %originalBB1497, %5584
  %7181 = load i8*, i8** %11, align 8, !dbg !1931
  %7182 = load i64, i64* %21, align 8, !dbg !1931
  %7183 = getelementptr inbounds i8, i8* %7181, i64 %7182, !dbg !1931
  store i8 39, i8* %7183, align 1, !dbg !1931
  br label %originalBB1497

originalBB1501alteredBB:                          ; preds = %originalBB1501, %5604
  %7184 = load i64, i64* %21, align 8, !dbg !1934
  %_1502 = sub i64 %7184, 1
  %gen1503 = mul i64 %_1502, 1
  %_1504 = sub i64 0, %7184
  %gen1505 = add i64 %_1504, 1
  %_1506 = shl i64 %7184, 1
  %_1507 = shl i64 %7184, 1
  %7185 = add i64 %7184, 1, !dbg !1934
  store i64 %7185, i64* %21, align 8, !dbg !1934
  br label %originalBB1501

originalBB1511alteredBB:                          ; preds = %originalBB1511, %5623
  store i8 1, i8* %28, align 1, !dbg !1921
  br label %originalBB1511

originalBB1515alteredBB:                          ; preds = %originalBB1515, %5640
  br label %originalBB1515

originalBB1519alteredBB:                          ; preds = %originalBB1519, %5657
  %7186 = load i64, i64* %21, align 8, !dbg !1935
  %7187 = load i64, i64* %12, align 8, !dbg !1935
  %7188 = icmp ult i64 %7186, %7187, !dbg !1935
  br label %originalBB1519

originalBB1523alteredBB:                          ; preds = %originalBB1523, %5677
  %7189 = load i8*, i8** %11, align 8, !dbg !1935
  %7190 = load i64, i64* %21, align 8, !dbg !1935
  %7191 = getelementptr inbounds i8, i8* %7189, i64 %7190, !dbg !1935
  store i8 92, i8* %7191, align 1, !dbg !1935
  br label %originalBB1523

originalBB1527alteredBB:                          ; preds = %originalBB1527, %5697
  %7192 = load i64, i64* %21, align 8, !dbg !1938
  %_1528 = sub i64 0, %7192
  %gen1529 = add i64 %_1528, 1
  %_1530 = sub i64 %7192, 1
  %gen1531 = mul i64 %_1530, 1
  %_1532 = sub i64 0, %7192
  %gen1533 = add i64 %_1532, 1
  %_1534 = shl i64 %7192, 1
  %_1535 = shl i64 %7192, 1
  %_1536 = sub i64 0, %7192
  %gen1537 = add i64 %_1536, 1
  %_1538 = shl i64 %7192, 1
  %7193 = add i64 %7192, 1, !dbg !1938
  store i64 %7193, i64* %21, align 8, !dbg !1938
  br label %originalBB1527

originalBB1542alteredBB:                          ; preds = %originalBB1542, %5716
  br label %originalBB1542

originalBB1546alteredBB:                          ; preds = %originalBB1546, %5733
  br label %originalBB1546

originalBB1550alteredBB:                          ; preds = %originalBB1550, %5750
  br label %originalBB1550

originalBB1554alteredBB:                          ; preds = %originalBB1554, %5767
  %7194 = load i8, i8* %28, align 1, !dbg !1942
  %7195 = trunc i8 %7194 to i1, !dbg !1942
  br label %originalBB1554

originalBB1558alteredBB:                          ; preds = %originalBB1558, %5786
  %7196 = load i8, i8* %34, align 1, !dbg !1942
  %7197 = trunc i8 %7196 to i1, !dbg !1942
  br label %originalBB1558

originalBB1562alteredBB:                          ; preds = %originalBB1562, %5805
  br label %originalBB1562

originalBB1566alteredBB:                          ; preds = %originalBB1566, %5822
  %7198 = load i64, i64* %21, align 8, !dbg !1948
  %7199 = load i64, i64* %12, align 8, !dbg !1948
  %7200 = icmp ult i64 %7198, %7199, !dbg !1948
  br label %originalBB1566

originalBB1570alteredBB:                          ; preds = %originalBB1570, %5842
  %7201 = load i8*, i8** %11, align 8, !dbg !1948
  %7202 = load i64, i64* %21, align 8, !dbg !1948
  %7203 = getelementptr inbounds i8, i8* %7201, i64 %7202, !dbg !1948
  store i8 39, i8* %7203, align 1, !dbg !1948
  br label %originalBB1570

originalBB1574alteredBB:                          ; preds = %originalBB1574, %5862
  %7204 = load i64, i64* %21, align 8, !dbg !1951
  %_1575 = shl i64 %7204, 1
  %_1576 = sub i64 %7204, 1
  %gen1577 = mul i64 %_1576, 1
  %_1578 = sub i64 %7204, 1
  %gen1579 = mul i64 %_1578, 1
  %_1580 = sub i64 0, %7204
  %gen1581 = add i64 %_1580, 1
  %_1582 = sub i64 0, %7204
  %gen1583 = add i64 %_1582, 1
  %_1584 = sub i64 0, %7204
  %gen1585 = add i64 %_1584, 1
  %7205 = add i64 %7204, 1, !dbg !1951
  store i64 %7205, i64* %21, align 8, !dbg !1951
  br label %originalBB1574

originalBB1589alteredBB:                          ; preds = %originalBB1589, %5881
  br label %originalBB1589

originalBB1593alteredBB:                          ; preds = %originalBB1593, %5898
  %7206 = load i64, i64* %21, align 8, !dbg !1952
  %7207 = load i64, i64* %12, align 8, !dbg !1952
  %7208 = icmp ult i64 %7206, %7207, !dbg !1952
  br label %originalBB1593

originalBB1597alteredBB:                          ; preds = %originalBB1597, %5918
  %7209 = load i8*, i8** %11, align 8, !dbg !1952
  %7210 = load i64, i64* %21, align 8, !dbg !1952
  %7211 = getelementptr inbounds i8, i8* %7209, i64 %7210, !dbg !1952
  store i8 39, i8* %7211, align 1, !dbg !1952
  br label %originalBB1597

originalBB1601alteredBB:                          ; preds = %originalBB1601, %5938
  %7212 = load i64, i64* %21, align 8, !dbg !1955
  %_1602 = sub i64 0, %7212
  %gen1603 = add i64 %_1602, 1
  %_1604 = sub i64 0, %7212
  %gen1605 = add i64 %_1604, 1
  %_1606 = sub i64 0, %7212
  %gen1607 = add i64 %_1606, 1
  %_1608 = sub i64 0, %7212
  %gen1609 = add i64 %_1608, 1
  %_1610 = shl i64 %7212, 1
  %_1611 = sub i64 0, %7212
  %gen1612 = add i64 %_1611, 1
  %_1613 = sub i64 0, %7212
  %gen1614 = add i64 %_1613, 1
  %_1615 = shl i64 %7212, 1
  %_1616 = sub i64 %7212, 1
  %gen1617 = mul i64 %_1616, 1
  %7213 = add i64 %7212, 1, !dbg !1955
  store i64 %7213, i64* %21, align 8, !dbg !1955
  br label %originalBB1601

originalBB1621alteredBB:                          ; preds = %originalBB1621, %5957
  store i8 0, i8* %28, align 1, !dbg !1946
  br label %originalBB1621

originalBB1625alteredBB:                          ; preds = %originalBB1625, %5974
  br label %originalBB1625

originalBB1629alteredBB:                          ; preds = %originalBB1629, %5991
  br label %originalBB1629

originalBB1633alteredBB:                          ; preds = %originalBB1633, %6008
  %7214 = load i64, i64* %21, align 8, !dbg !1957
  %7215 = load i64, i64* %12, align 8, !dbg !1957
  %7216 = icmp ult i64 %7214, %7215, !dbg !1957
  br label %originalBB1633

originalBB1637alteredBB:                          ; preds = %originalBB1637, %6028
  %7217 = load i8, i8* %31, align 1, !dbg !1957
  %7218 = load i8*, i8** %11, align 8, !dbg !1957
  %7219 = load i64, i64* %21, align 8, !dbg !1957
  %7220 = getelementptr inbounds i8, i8* %7218, i64 %7219, !dbg !1957
  store i8 %7217, i8* %7220, align 1, !dbg !1957
  br label %originalBB1637

originalBB1641alteredBB:                          ; preds = %originalBB1641, %6049
  %7221 = load i64, i64* %21, align 8, !dbg !1960
  %_1642 = sub i64 0, %7221
  %gen1643 = add i64 %_1642, 1
  %_1644 = sub i64 0, %7221
  %gen1645 = add i64 %_1644, 1
  %_1646 = sub i64 0, %7221
  %gen1647 = add i64 %_1646, 1
  %_1648 = sub i64 %7221, 1
  %gen1649 = mul i64 %_1648, 1
  %7222 = add i64 %7221, 1, !dbg !1960
  store i64 %7222, i64* %21, align 8, !dbg !1960
  br label %originalBB1641

originalBB1653alteredBB:                          ; preds = %originalBB1653, %6068
  %7223 = load i8, i8* %35, align 1, !dbg !1961
  %7224 = trunc i8 %7223 to i1, !dbg !1961
  br label %originalBB1653

originalBB1657alteredBB:                          ; preds = %originalBB1657, %6087
  store i8 0, i8* %30, align 1, !dbg !1964
  br label %originalBB1657

originalBB1661alteredBB:                          ; preds = %originalBB1661, %6104
  br label %originalBB1661

originalBB1665alteredBB:                          ; preds = %originalBB1665, %6121
  %7225 = load i64, i64* %20, align 8, !dbg !1967
  %_1666 = sub i64 0, %7225
  %gen1667 = add i64 %_1666, 1
  %_1668 = sub i64 %7225, 1
  %gen1669 = mul i64 %_1668, 1
  %_1670 = sub i64 %7225, 1
  %gen1671 = mul i64 %_1670, 1
  %_1672 = sub i64 %7225, 1
  %gen1673 = mul i64 %_1672, 1
  %_1674 = sub i64 0, %7225
  %gen1675 = add i64 %_1674, 1
  %_1676 = sub i64 %7225, 1
  %gen1677 = mul i64 %_1676, 1
  %_1678 = shl i64 %7225, 1
  %_1679 = sub i64 0, %7225
  %gen1680 = add i64 %_1679, 1
  %_1681 = sub i64 %7225, 1
  %gen1682 = mul i64 %_1681, 1
  %7226 = add i64 %7225, 1, !dbg !1967
  store i64 %7226, i64* %20, align 8, !dbg !1967
  br label %originalBB1665

originalBB1686alteredBB:                          ; preds = %originalBB1686, %6140
  %7227 = load i64, i64* %21, align 8, !dbg !1971
  %7228 = icmp eq i64 %7227, 0, !dbg !1973
  br label %originalBB1686

originalBB1690alteredBB:                          ; preds = %originalBB1690, %6159
  %7229 = load i32, i32* %15, align 4, !dbg !1975
  %7230 = icmp eq i32 %7229, 2, !dbg !1976
  br label %originalBB1690

originalBB1694alteredBB:                          ; preds = %originalBB1694, %6178
  %7231 = load i8, i8* %27, align 1, !dbg !1978
  %7232 = trunc i8 %7231 to i1, !dbg !1978
  br label %originalBB1694

originalBB1698alteredBB:                          ; preds = %originalBB1698, %6197
  br label %originalBB1698

originalBB1702alteredBB:                          ; preds = %originalBB1702, %6214
  %7233 = load i32, i32* %15, align 4, !dbg !1981
  %7234 = icmp eq i32 %7233, 2, !dbg !1983
  br label %originalBB1702

originalBB1706alteredBB:                          ; preds = %originalBB1706, %6233
  %7235 = load i8, i8* %27, align 1, !dbg !1985
  %7236 = trunc i8 %7235 to i1, !dbg !1985
  br label %originalBB1706

originalBB1710alteredBB:                          ; preds = %originalBB1710, %6252
  %7237 = load i8, i8* %29, align 1, !dbg !1987
  %7238 = trunc i8 %7237 to i1, !dbg !1987
  br label %originalBB1710

originalBB1714alteredBB:                          ; preds = %originalBB1714, %6271
  %7239 = load i8, i8* %30, align 1, !dbg !1989
  %7240 = trunc i8 %7239 to i1, !dbg !1989
  br label %originalBB1714

originalBB1718alteredBB:                          ; preds = %originalBB1718, %6290
  %7241 = load i8*, i8** %11, align 8, !dbg !1993
  %7242 = load i64, i64* %22, align 8, !dbg !1994
  %7243 = load i8*, i8** %13, align 8, !dbg !1995
  %7244 = load i64, i64* %14, align 8, !dbg !1996
  %7245 = load i32, i32* %16, align 4, !dbg !1997
  %7246 = load i32*, i32** %17, align 8, !dbg !1998
  %7247 = load i8*, i8** %18, align 8, !dbg !1999
  %7248 = load i8*, i8** %19, align 8, !dbg !2000
  %7249 = call i64 @quotearg_buffer_restyled(i8* %7241, i64 %7242, i8* %7243, i64 %7244, i32 5, i32 %7245, i32* %7246, i8* %7247, i8* %7248), !dbg !2001
  store i64 %7249, i64* %10, align 8, !dbg !2002
  br label %originalBB1718

originalBB1722alteredBB:                          ; preds = %originalBB1722, %6316
  %7250 = load i64, i64* %12, align 8, !dbg !2003
  %7251 = icmp ne i64 %7250, 0, !dbg !2003
  br label %originalBB1722

originalBB1726alteredBB:                          ; preds = %originalBB1726, %6335
  %7252 = load i64, i64* %22, align 8, !dbg !2006
  %7253 = icmp ne i64 %7252, 0, !dbg !2006
  br label %originalBB1726

originalBB1730alteredBB:                          ; preds = %originalBB1730, %6354
  %7254 = load i64, i64* %22, align 8, !dbg !2008
  store i64 %7254, i64* %12, align 8, !dbg !2010
  store i64 0, i64* %21, align 8, !dbg !2011
  br label %originalBB1730

originalBB1734alteredBB:                          ; preds = %originalBB1734, %6372
  br label %originalBB1734

originalBB1738alteredBB:                          ; preds = %originalBB1738, %6389
  br label %originalBB1738

originalBB1742alteredBB:                          ; preds = %originalBB1742, %6406
  %7255 = load i8*, i8** %23, align 8, !dbg !2014
  %7256 = icmp ne i8* %7255, null, !dbg !2014
  br label %originalBB1742

originalBB1746alteredBB:                          ; preds = %originalBB1746, %6425
  %7257 = load i8, i8* %27, align 1, !dbg !2017
  %7258 = trunc i8 %7257 to i1, !dbg !2017
  br label %originalBB1746

originalBB1750alteredBB:                          ; preds = %originalBB1750, %6444
  br label %originalBB1750

originalBB1754alteredBB:                          ; preds = %originalBB1754, %6461
  %7259 = load i8*, i8** %23, align 8, !dbg !2020
  %7260 = load i8, i8* %7259, align 1, !dbg !2023
  %7261 = icmp ne i8 %7260, 0, !dbg !2024
  br label %originalBB1754

originalBB1758alteredBB:                          ; preds = %originalBB1758, %6482
  %7262 = load i64, i64* %21, align 8, !dbg !2026
  %7263 = load i64, i64* %12, align 8, !dbg !2026
  %7264 = icmp ult i64 %7262, %7263, !dbg !2026
  br label %originalBB1758

originalBB1762alteredBB:                          ; preds = %originalBB1762, %6508
  %7265 = load i64, i64* %21, align 8, !dbg !2029
  %_1763 = shl i64 %7265, 1
  %_1764 = shl i64 %7265, 1
  %_1765 = shl i64 %7265, 1
  %_1766 = sub i64 0, %7265
  %gen1767 = add i64 %_1766, 1
  %_1768 = sub i64 0, %7265
  %gen1769 = add i64 %_1768, 1
  %_1770 = shl i64 %7265, 1
  %7266 = add i64 %7265, 1, !dbg !2029
  store i64 %7266, i64* %21, align 8, !dbg !2029
  br label %originalBB1762

originalBB1774alteredBB:                          ; preds = %originalBB1774, %6527
  br label %originalBB1774

originalBB1778alteredBB:                          ; preds = %originalBB1778, %6544
  %7267 = load i8*, i8** %23, align 8, !dbg !2030
  %7268 = getelementptr inbounds i8, i8* %7267, i32 1, !dbg !2030
  store i8* %7268, i8** %23, align 8, !dbg !2030
  br label %originalBB1778

originalBB1782alteredBB:                          ; preds = %originalBB1782, %6564
  %7269 = load i64, i64* %21, align 8, !dbg !2034
  %7270 = load i64, i64* %12, align 8, !dbg !2036
  %7271 = icmp ult i64 %7269, %7270, !dbg !2037
  br label %originalBB1782

originalBB1786alteredBB:                          ; preds = %originalBB1786, %6590
  %7272 = load i32, i32* %15, align 4, !dbg !2046
  %7273 = icmp eq i32 %7272, 2, !dbg !2048
  br label %originalBB1786

originalBB1790alteredBB:                          ; preds = %originalBB1790, %6612
  store i32 4, i32* %15, align 4, !dbg !2052
  br label %originalBB1790

originalBB1794alteredBB:                          ; preds = %originalBB1794, %6629
  %7274 = load i8*, i8** %11, align 8, !dbg !2054
  %7275 = load i64, i64* %12, align 8, !dbg !2055
  %7276 = load i8*, i8** %13, align 8, !dbg !2056
  %7277 = load i64, i64* %14, align 8, !dbg !2057
  %7278 = load i32, i32* %15, align 4, !dbg !2058
  %7279 = load i32, i32* %16, align 4, !dbg !2059
  %_1795 = sub i32 %7279, -3
  %gen1796 = mul i32 %_1795, -3
  %_1797 = shl i32 %7279, -3
  %_1798 = sub i32 0, %7279
  %gen1799 = add i32 %_1798, -3
  %_1800 = sub i32 %7279, -3
  %gen1801 = mul i32 %_1800, -3
  %_1802 = sub i32 %7279, -3
  %gen1803 = mul i32 %_1802, -3
  %7280 = and i32 %7279, -3, !dbg !2060
  %7281 = load i8*, i8** %18, align 8, !dbg !2061
  %7282 = load i8*, i8** %19, align 8, !dbg !2062
  %7283 = call i64 @quotearg_buffer_restyled(i8* %7274, i64 %7275, i8* %7276, i64 %7277, i32 %7278, i32 %7280, i32* null, i8* %7281, i8* %7282), !dbg !2063
  store i64 %7283, i64* %10, align 8, !dbg !2064
  br label %originalBB1794

originalBB1807alteredBB:                          ; preds = %originalBB1807, %6656
  %7284 = load i64, i64* %10, align 8, !dbg !2065
  br label %originalBB1807
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !2102 {
  %3 = load i32, i32* @x.21
  %4 = load i32, i32* @y.22
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2105, metadata !DIExpression()), !dbg !2106
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !2107, metadata !DIExpression()), !dbg !2108
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2109, metadata !DIExpression()), !dbg !2110
  %16 = load i8*, i8** %12, align 8, !dbg !2111
  %17 = call i8* @gettext(i8* %16) #10, !dbg !2111
  store i8* %17, i8** %14, align 8, !dbg !2110
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2112, metadata !DIExpression()), !dbg !2113
  %18 = load i8*, i8** %14, align 8, !dbg !2114
  %19 = load i8*, i8** %12, align 8, !dbg !2116
  %20 = icmp ne i8* %18, %19, !dbg !2117
  %21 = load i32, i32* @x.21
  %22 = load i32, i32* @y.22
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !2118

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.21
  %31 = load i32, i32* @y.22
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !2119
  store i8* %38, i8** %11, align 8, !dbg !2120
  %39 = load i32, i32* @x.21
  %40 = load i32, i32* @y.22
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %157, !dbg !2120

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.21
  %49 = load i32, i32* @y.22
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !2121
  store i8* %56, i8** %15, align 8, !dbg !2122
  %57 = load i8*, i8** %15, align 8, !dbg !2123
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.65, i64 0, i64 0)) #13, !dbg !2123
  %59 = icmp eq i32 %58, 0, !dbg !2123
  %60 = load i32, i32* @x.21
  %61 = load i32, i32* @y.22
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %92, !dbg !2125

68:                                               ; preds = %originalBBpart28
  %69 = load i32, i32* @x.21
  %70 = load i32, i32* @y.22
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %77 = load i8*, i8** %12, align 8, !dbg !2126
  %78 = getelementptr inbounds i8, i8* %77, i64 0, !dbg !2126
  %79 = load i8, i8* %78, align 1, !dbg !2126
  %80 = sext i8 %79 to i32, !dbg !2126
  %81 = icmp eq i32 %80, 96, !dbg !2127
  %82 = zext i1 %81 to i64, !dbg !2126
  %83 = select i1 %81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.66, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.67, i64 0, i64 0), !dbg !2126
  store i8* %83, i8** %11, align 8, !dbg !2128
  %84 = load i32, i32* @x.21
  %85 = load i32, i32* @y.22
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %157, !dbg !2128

92:                                               ; preds = %originalBBpart28
  %93 = load i32, i32* @x.21
  %94 = load i32, i32* @y.22
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %92, %originalBB14alteredBB
  %101 = load i8*, i8** %15, align 8, !dbg !2129
  %102 = call i32 @c_strcasecmp(i8* %101, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.68, i64 0, i64 0)) #13, !dbg !2129
  %103 = icmp eq i32 %102, 0, !dbg !2129
  %104 = load i32, i32* @x.21
  %105 = load i32, i32* @y.22
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %103, label %112, label %136, !dbg !2131

112:                                              ; preds = %originalBBpart216
  %113 = load i32, i32* @x.21
  %114 = load i32, i32* @y.22
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %12, align 8, !dbg !2132
  %122 = getelementptr inbounds i8, i8* %121, i64 0, !dbg !2132
  %123 = load i8, i8* %122, align 1, !dbg !2132
  %124 = sext i8 %123 to i32, !dbg !2132
  %125 = icmp eq i32 %124, 96, !dbg !2133
  %126 = zext i1 %125 to i64, !dbg !2132
  %127 = select i1 %125, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.69, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.70, i64 0, i64 0), !dbg !2132
  store i8* %127, i8** %11, align 8, !dbg !2134
  %128 = load i32, i32* @x.21
  %129 = load i32, i32* @y.22
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %157, !dbg !2134

136:                                              ; preds = %originalBBpart216
  %137 = load i32, i32* @x.21
  %138 = load i32, i32* @y.22
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  %145 = load i32, i32* %13, align 4, !dbg !2135
  %146 = icmp eq i32 %145, 9, !dbg !2136
  %147 = zext i1 %146 to i64, !dbg !2135
  %148 = select i1 %146, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), !dbg !2135
  store i8* %148, i8** %11, align 8, !dbg !2137
  %149 = load i32, i32* @x.21
  %150 = load i32, i32* @y.22
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %157, !dbg !2137

157:                                              ; preds = %originalBBpart224, %originalBBpart220, %originalBBpart212, %originalBBpart24
  %158 = load i32, i32* @x.21
  %159 = load i32, i32* @y.22
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %157, %originalBB26alteredBB
  %166 = load i8*, i8** %11, align 8, !dbg !2138
  %167 = load i32, i32* @x.21
  %168 = load i32, i32* @y.22
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %166, !dbg !2138

originalBBalteredBB:                              ; preds = %originalBB, %2
  %175 = alloca i8*, align 8
  %176 = alloca i8*, align 8
  %177 = alloca i32, align 4
  %178 = alloca i8*, align 8
  %179 = alloca i8*, align 8
  store i8* %0, i8** %176, align 8
  call void @llvm.dbg.declare(metadata i8** %176, metadata !2139, metadata !DIExpression()), !dbg !2106
  store i32 %1, i32* %177, align 4
  call void @llvm.dbg.declare(metadata i32* %177, metadata !2171, metadata !DIExpression()), !dbg !2108
  call void @llvm.dbg.declare(metadata i8** %178, metadata !2172, metadata !DIExpression()), !dbg !2110
  %180 = load i8*, i8** %176, align 8, !dbg !2111
  %181 = call i8* @gettext(i8* %180) #10, !dbg !2111
  store i8* %181, i8** %178, align 8, !dbg !2110
  call void @llvm.dbg.declare(metadata i8** %179, metadata !2173, metadata !DIExpression()), !dbg !2113
  %182 = load i8*, i8** %178, align 8, !dbg !2114
  %183 = load i8*, i8** %176, align 8, !dbg !2116
  %184 = icmp ne i8* %182, %183, !dbg !2117
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %185 = load i8*, i8** %14, align 8, !dbg !2119
  store i8* %185, i8** %11, align 8, !dbg !2120
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %186 = call i8* @locale_charset(), !dbg !2121
  store i8* %186, i8** %15, align 8, !dbg !2122
  %187 = load i8*, i8** %15, align 8, !dbg !2123
  %188 = call i32 @c_strcasecmp(i8* %187, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.65, i64 0, i64 0)) #13, !dbg !2123
  %189 = icmp eq i32 %188, 0, !dbg !2123
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  %190 = load i8*, i8** %12, align 8, !dbg !2126
  %191 = getelementptr inbounds i8, i8* %190, i64 0, !dbg !2126
  %192 = load i8, i8* %191, align 1, !dbg !2126
  %193 = sext i8 %192 to i32, !dbg !2126
  %194 = icmp eq i32 %193, 96, !dbg !2127
  %195 = zext i1 %194 to i64, !dbg !2126
  %196 = select i1 %194, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.66, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.67, i64 0, i64 0), !dbg !2126
  store i8* %196, i8** %11, align 8, !dbg !2128
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %92
  %197 = load i8*, i8** %15, align 8, !dbg !2129
  %198 = call i32 @c_strcasecmp(i8* %197, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.68, i64 0, i64 0)) #13, !dbg !2129
  %199 = icmp eq i32 %198, 0, !dbg !2129
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %200 = load i8*, i8** %12, align 8, !dbg !2132
  %201 = getelementptr inbounds i8, i8* %200, i64 0, !dbg !2132
  %202 = load i8, i8* %201, align 1, !dbg !2132
  %203 = sext i8 %202 to i32, !dbg !2132
  %204 = icmp eq i32 %203, 96, !dbg !2133
  %205 = zext i1 %204 to i64, !dbg !2132
  %206 = select i1 %204, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.69, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.70, i64 0, i64 0), !dbg !2132
  store i8* %206, i8** %11, align 8, !dbg !2134
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  %207 = load i32, i32* %13, align 4, !dbg !2135
  %208 = icmp eq i32 %207, 9, !dbg !2136
  %209 = zext i1 %208 to i64, !dbg !2135
  %210 = select i1 %208, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), !dbg !2135
  store i8* %210, i8** %11, align 8, !dbg !2137
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %157
  %211 = load i8*, i8** %11, align 8, !dbg !2138
  br label %originalBB26
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !2174 {
  %3 = load i32, i32* @x.23
  %4 = load i32, i32* @y.24
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2177, metadata !DIExpression()), !dbg !2178
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2179, metadata !DIExpression()), !dbg !2180
  %13 = load i8*, i8** %11, align 8, !dbg !2181
  %14 = load i8, i8* %12, align 1, !dbg !2182
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !2183
  %16 = load i32, i32* @x.23
  %17 = load i32, i32* @y.24
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2184

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2185, metadata !DIExpression()), !dbg !2178
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2217, metadata !DIExpression()), !dbg !2180
  %26 = load i8*, i8** %24, align 8, !dbg !2181
  %27 = load i8, i8* %25, align 1, !dbg !2182
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !2183
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !2218 {
  %2 = load i32, i32* @x.25
  %3 = load i32, i32* @y.26
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2221, metadata !DIExpression()), !dbg !2222
  %11 = load i8*, i8** %10, align 8, !dbg !2223
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !2224
  %13 = load i32, i32* @x.25
  %14 = load i32, i32* @y.26
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2225

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2226, metadata !DIExpression()), !dbg !2222
  %22 = load i8*, i8** %21, align 8, !dbg !2223
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !2224
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !2258 {
  %4 = load i32, i32* @x.27
  %5 = load i32, i32* @y.28
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2261, metadata !DIExpression()), !dbg !2262
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2263, metadata !DIExpression()), !dbg !2264
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2265, metadata !DIExpression()), !dbg !2266
  %15 = load i32, i32* %12, align 4, !dbg !2267
  %16 = load i8*, i8** %13, align 8, !dbg !2268
  %17 = load i64, i64* %14, align 8, !dbg !2269
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !2270
  %19 = load i32, i32* @x.27
  %20 = load i32, i32* @y.28
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !2271

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !2272, metadata !DIExpression()), !dbg !2262
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2304, metadata !DIExpression()), !dbg !2264
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !2305, metadata !DIExpression()), !dbg !2266
  %30 = load i32, i32* %27, align 4, !dbg !2267
  %31 = load i8*, i8** %28, align 8, !dbg !2268
  %32 = load i64, i64* %29, align 8, !dbg !2269
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !2270
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !2306 {
  %3 = load i32, i32* @x.29
  %4 = load i32, i32* @y.30
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2309, metadata !DIExpression()), !dbg !2310
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2311, metadata !DIExpression()), !dbg !2312
  %13 = load i32, i32* %11, align 4, !dbg !2313
  %14 = load i8*, i8** %12, align 8, !dbg !2314
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !2315
  %16 = load i32, i32* @x.29
  %17 = load i32, i32* @y.30
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2316

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !2317, metadata !DIExpression()), !dbg !2310
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !2349, metadata !DIExpression()), !dbg !2312
  %26 = load i32, i32* %24, align 4, !dbg !2313
  %27 = load i8*, i8** %25, align 8, !dbg !2314
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !2315
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !2350 {
  %2 = load i32, i32* @x.31
  %3 = load i32, i32* @y.32
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2353, metadata !DIExpression()), !dbg !2354
  %11 = load i8*, i8** %10, align 8, !dbg !2355
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !2356
  %13 = load i32, i32* @x.31
  %14 = load i32, i32* @y.32
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2357

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2358, metadata !DIExpression()), !dbg !2354
  %22 = load i8*, i8** %21, align 8, !dbg !2355
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !2356
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !2390 {
  %7 = load i32, i32* @x.33
  %8 = load i32, i32* @y.34
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !2450, metadata !DIExpression()), !dbg !2451
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2452, metadata !DIExpression()), !dbg !2453
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2454, metadata !DIExpression()), !dbg !2455
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !2456, metadata !DIExpression()), !dbg !2457
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !2458, metadata !DIExpression()), !dbg !2459
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2460, metadata !DIExpression()), !dbg !2461
  %21 = load i8*, i8** %16, align 8, !dbg !2462
  %22 = icmp ne i8* %21, null, !dbg !2462
  %23 = load i32, i32* @x.33
  %24 = load i32, i32* @y.34
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %53, !dbg !2464

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.33
  %33 = load i32, i32* @y.34
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2465
  %41 = load i8*, i8** %16, align 8, !dbg !2466
  %42 = load i8*, i8** %17, align 8, !dbg !2467
  %43 = load i8*, i8** %18, align 8, !dbg !2468
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.75, i64 0, i64 0), i8* %41, i8* %42, i8* %43), !dbg !2469
  %45 = load i32, i32* @x.33
  %46 = load i32, i32* @y.34
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74, !dbg !2469

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* @x.33
  %55 = load i32, i32* @y.34
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2470
  %63 = load i8*, i8** %17, align 8, !dbg !2471
  %64 = load i8*, i8** %18, align 8, !dbg !2472
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.76, i64 0, i64 0), i8* %63, i8* %64), !dbg !2473
  %66 = load i32, i32* @x.33
  %67 = load i32, i32* @y.34
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28, %originalBBpart24
  %75 = load i32, i32* @x.33
  %76 = load i32, i32* @y.34
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2474
  %84 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.77, i64 0, i64 0)) #10, !dbg !2475
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %84, i32 2020), !dbg !2476
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2477
  %87 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %86), !dbg !2477
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2478
  %89 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.79, i64 0, i64 0)) #10, !dbg !2479
  %90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* %89, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.80, i64 0, i64 0)), !dbg !2480
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2481
  %92 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %91), !dbg !2481
  %93 = load i64, i64* %20, align 8, !dbg !2482
  %94 = load i32, i32* @x.33
  %95 = load i32, i32* @y.34
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i64 %93, label %402 [
    i64 0, label %102
    i64 1, label %119
    i64 2, label %126
    i64 3, label %152
    i64 4, label %181
    i64 5, label %213
    i64 6, label %248
    i64 7, label %286
    i64 8, label %311
    i64 9, label %355
  ], !dbg !2483

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.33
  %104 = load i32, i32* @y.34
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.33
  %112 = load i32, i32* @y.34
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %449, !dbg !2484

119:                                              ; preds = %originalBBpart212
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2486
  %121 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.81, i64 0, i64 0)) #10, !dbg !2487
  %122 = load i8**, i8*** %19, align 8, !dbg !2488
  %123 = getelementptr inbounds i8*, i8** %122, i64 0, !dbg !2488
  %124 = load i8*, i8** %123, align 8, !dbg !2488
  %125 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %120, i8* %121, i8* %124), !dbg !2489
  br label %449, !dbg !2490

126:                                              ; preds = %originalBBpart212
  %127 = load i32, i32* @x.33
  %128 = load i32, i32* @y.34
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %126, %originalBB18alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2491
  %136 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.82, i64 0, i64 0)) #10, !dbg !2492
  %137 = load i8**, i8*** %19, align 8, !dbg !2493
  %138 = getelementptr inbounds i8*, i8** %137, i64 0, !dbg !2493
  %139 = load i8*, i8** %138, align 8, !dbg !2493
  %140 = load i8**, i8*** %19, align 8, !dbg !2494
  %141 = getelementptr inbounds i8*, i8** %140, i64 1, !dbg !2494
  %142 = load i8*, i8** %141, align 8, !dbg !2494
  %143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %135, i8* %136, i8* %139, i8* %142), !dbg !2495
  %144 = load i32, i32* @x.33
  %145 = load i32, i32* @y.34
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %449, !dbg !2496

152:                                              ; preds = %originalBBpart212
  %153 = load i32, i32* @x.33
  %154 = load i32, i32* @y.34
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %152, %originalBB22alteredBB
  %161 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2497
  %162 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.83, i64 0, i64 0)) #10, !dbg !2498
  %163 = load i8**, i8*** %19, align 8, !dbg !2499
  %164 = getelementptr inbounds i8*, i8** %163, i64 0, !dbg !2499
  %165 = load i8*, i8** %164, align 8, !dbg !2499
  %166 = load i8**, i8*** %19, align 8, !dbg !2500
  %167 = getelementptr inbounds i8*, i8** %166, i64 1, !dbg !2500
  %168 = load i8*, i8** %167, align 8, !dbg !2500
  %169 = load i8**, i8*** %19, align 8, !dbg !2501
  %170 = getelementptr inbounds i8*, i8** %169, i64 2, !dbg !2501
  %171 = load i8*, i8** %170, align 8, !dbg !2501
  %172 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %161, i8* %162, i8* %165, i8* %168, i8* %171), !dbg !2502
  %173 = load i32, i32* @x.33
  %174 = load i32, i32* @y.34
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %449, !dbg !2503

181:                                              ; preds = %originalBBpart212
  %182 = load i32, i32* @x.33
  %183 = load i32, i32* @y.34
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %181, %originalBB26alteredBB
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2504
  %191 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.84, i64 0, i64 0)) #10, !dbg !2505
  %192 = load i8**, i8*** %19, align 8, !dbg !2506
  %193 = getelementptr inbounds i8*, i8** %192, i64 0, !dbg !2506
  %194 = load i8*, i8** %193, align 8, !dbg !2506
  %195 = load i8**, i8*** %19, align 8, !dbg !2507
  %196 = getelementptr inbounds i8*, i8** %195, i64 1, !dbg !2507
  %197 = load i8*, i8** %196, align 8, !dbg !2507
  %198 = load i8**, i8*** %19, align 8, !dbg !2508
  %199 = getelementptr inbounds i8*, i8** %198, i64 2, !dbg !2508
  %200 = load i8*, i8** %199, align 8, !dbg !2508
  %201 = load i8**, i8*** %19, align 8, !dbg !2509
  %202 = getelementptr inbounds i8*, i8** %201, i64 3, !dbg !2509
  %203 = load i8*, i8** %202, align 8, !dbg !2509
  %204 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %190, i8* %191, i8* %194, i8* %197, i8* %200, i8* %203), !dbg !2510
  %205 = load i32, i32* @x.33
  %206 = load i32, i32* @y.34
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %449, !dbg !2511

213:                                              ; preds = %originalBBpart212
  %214 = load i32, i32* @x.33
  %215 = load i32, i32* @y.34
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %213, %originalBB30alteredBB
  %222 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2512
  %223 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.85, i64 0, i64 0)) #10, !dbg !2513
  %224 = load i8**, i8*** %19, align 8, !dbg !2514
  %225 = getelementptr inbounds i8*, i8** %224, i64 0, !dbg !2514
  %226 = load i8*, i8** %225, align 8, !dbg !2514
  %227 = load i8**, i8*** %19, align 8, !dbg !2515
  %228 = getelementptr inbounds i8*, i8** %227, i64 1, !dbg !2515
  %229 = load i8*, i8** %228, align 8, !dbg !2515
  %230 = load i8**, i8*** %19, align 8, !dbg !2516
  %231 = getelementptr inbounds i8*, i8** %230, i64 2, !dbg !2516
  %232 = load i8*, i8** %231, align 8, !dbg !2516
  %233 = load i8**, i8*** %19, align 8, !dbg !2517
  %234 = getelementptr inbounds i8*, i8** %233, i64 3, !dbg !2517
  %235 = load i8*, i8** %234, align 8, !dbg !2517
  %236 = load i8**, i8*** %19, align 8, !dbg !2518
  %237 = getelementptr inbounds i8*, i8** %236, i64 4, !dbg !2518
  %238 = load i8*, i8** %237, align 8, !dbg !2518
  %239 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %222, i8* %223, i8* %226, i8* %229, i8* %232, i8* %235, i8* %238), !dbg !2519
  %240 = load i32, i32* @x.33
  %241 = load i32, i32* @y.34
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %449, !dbg !2520

248:                                              ; preds = %originalBBpart212
  %249 = load i32, i32* @x.33
  %250 = load i32, i32* @y.34
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %248, %originalBB34alteredBB
  %257 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2521
  %258 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.86, i64 0, i64 0)) #10, !dbg !2522
  %259 = load i8**, i8*** %19, align 8, !dbg !2523
  %260 = getelementptr inbounds i8*, i8** %259, i64 0, !dbg !2523
  %261 = load i8*, i8** %260, align 8, !dbg !2523
  %262 = load i8**, i8*** %19, align 8, !dbg !2524
  %263 = getelementptr inbounds i8*, i8** %262, i64 1, !dbg !2524
  %264 = load i8*, i8** %263, align 8, !dbg !2524
  %265 = load i8**, i8*** %19, align 8, !dbg !2525
  %266 = getelementptr inbounds i8*, i8** %265, i64 2, !dbg !2525
  %267 = load i8*, i8** %266, align 8, !dbg !2525
  %268 = load i8**, i8*** %19, align 8, !dbg !2526
  %269 = getelementptr inbounds i8*, i8** %268, i64 3, !dbg !2526
  %270 = load i8*, i8** %269, align 8, !dbg !2526
  %271 = load i8**, i8*** %19, align 8, !dbg !2527
  %272 = getelementptr inbounds i8*, i8** %271, i64 4, !dbg !2527
  %273 = load i8*, i8** %272, align 8, !dbg !2527
  %274 = load i8**, i8*** %19, align 8, !dbg !2528
  %275 = getelementptr inbounds i8*, i8** %274, i64 5, !dbg !2528
  %276 = load i8*, i8** %275, align 8, !dbg !2528
  %277 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %257, i8* %258, i8* %261, i8* %264, i8* %267, i8* %270, i8* %273, i8* %276), !dbg !2529
  %278 = load i32, i32* @x.33
  %279 = load i32, i32* @y.34
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %449, !dbg !2530

286:                                              ; preds = %originalBBpart212
  %287 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2531
  %288 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.87, i64 0, i64 0)) #10, !dbg !2532
  %289 = load i8**, i8*** %19, align 8, !dbg !2533
  %290 = getelementptr inbounds i8*, i8** %289, i64 0, !dbg !2533
  %291 = load i8*, i8** %290, align 8, !dbg !2533
  %292 = load i8**, i8*** %19, align 8, !dbg !2534
  %293 = getelementptr inbounds i8*, i8** %292, i64 1, !dbg !2534
  %294 = load i8*, i8** %293, align 8, !dbg !2534
  %295 = load i8**, i8*** %19, align 8, !dbg !2535
  %296 = getelementptr inbounds i8*, i8** %295, i64 2, !dbg !2535
  %297 = load i8*, i8** %296, align 8, !dbg !2535
  %298 = load i8**, i8*** %19, align 8, !dbg !2536
  %299 = getelementptr inbounds i8*, i8** %298, i64 3, !dbg !2536
  %300 = load i8*, i8** %299, align 8, !dbg !2536
  %301 = load i8**, i8*** %19, align 8, !dbg !2537
  %302 = getelementptr inbounds i8*, i8** %301, i64 4, !dbg !2537
  %303 = load i8*, i8** %302, align 8, !dbg !2537
  %304 = load i8**, i8*** %19, align 8, !dbg !2538
  %305 = getelementptr inbounds i8*, i8** %304, i64 5, !dbg !2538
  %306 = load i8*, i8** %305, align 8, !dbg !2538
  %307 = load i8**, i8*** %19, align 8, !dbg !2539
  %308 = getelementptr inbounds i8*, i8** %307, i64 6, !dbg !2539
  %309 = load i8*, i8** %308, align 8, !dbg !2539
  %310 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %287, i8* %288, i8* %291, i8* %294, i8* %297, i8* %300, i8* %303, i8* %306, i8* %309), !dbg !2540
  br label %449, !dbg !2541

311:                                              ; preds = %originalBBpart212
  %312 = load i32, i32* @x.33
  %313 = load i32, i32* @y.34
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %311, %originalBB38alteredBB
  %320 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2542
  %321 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.88, i64 0, i64 0)) #10, !dbg !2543
  %322 = load i8**, i8*** %19, align 8, !dbg !2544
  %323 = getelementptr inbounds i8*, i8** %322, i64 0, !dbg !2544
  %324 = load i8*, i8** %323, align 8, !dbg !2544
  %325 = load i8**, i8*** %19, align 8, !dbg !2545
  %326 = getelementptr inbounds i8*, i8** %325, i64 1, !dbg !2545
  %327 = load i8*, i8** %326, align 8, !dbg !2545
  %328 = load i8**, i8*** %19, align 8, !dbg !2546
  %329 = getelementptr inbounds i8*, i8** %328, i64 2, !dbg !2546
  %330 = load i8*, i8** %329, align 8, !dbg !2546
  %331 = load i8**, i8*** %19, align 8, !dbg !2547
  %332 = getelementptr inbounds i8*, i8** %331, i64 3, !dbg !2547
  %333 = load i8*, i8** %332, align 8, !dbg !2547
  %334 = load i8**, i8*** %19, align 8, !dbg !2548
  %335 = getelementptr inbounds i8*, i8** %334, i64 4, !dbg !2548
  %336 = load i8*, i8** %335, align 8, !dbg !2548
  %337 = load i8**, i8*** %19, align 8, !dbg !2549
  %338 = getelementptr inbounds i8*, i8** %337, i64 5, !dbg !2549
  %339 = load i8*, i8** %338, align 8, !dbg !2549
  %340 = load i8**, i8*** %19, align 8, !dbg !2550
  %341 = getelementptr inbounds i8*, i8** %340, i64 6, !dbg !2550
  %342 = load i8*, i8** %341, align 8, !dbg !2550
  %343 = load i8**, i8*** %19, align 8, !dbg !2551
  %344 = getelementptr inbounds i8*, i8** %343, i64 7, !dbg !2551
  %345 = load i8*, i8** %344, align 8, !dbg !2551
  %346 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %320, i8* %321, i8* %324, i8* %327, i8* %330, i8* %333, i8* %336, i8* %339, i8* %342, i8* %345), !dbg !2552
  %347 = load i32, i32* @x.33
  %348 = load i32, i32* @y.34
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %449, !dbg !2553

355:                                              ; preds = %originalBBpart212
  %356 = load i32, i32* @x.33
  %357 = load i32, i32* @y.34
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %355, %originalBB42alteredBB
  %364 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2554
  %365 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.89, i64 0, i64 0)) #10, !dbg !2555
  %366 = load i8**, i8*** %19, align 8, !dbg !2556
  %367 = getelementptr inbounds i8*, i8** %366, i64 0, !dbg !2556
  %368 = load i8*, i8** %367, align 8, !dbg !2556
  %369 = load i8**, i8*** %19, align 8, !dbg !2557
  %370 = getelementptr inbounds i8*, i8** %369, i64 1, !dbg !2557
  %371 = load i8*, i8** %370, align 8, !dbg !2557
  %372 = load i8**, i8*** %19, align 8, !dbg !2558
  %373 = getelementptr inbounds i8*, i8** %372, i64 2, !dbg !2558
  %374 = load i8*, i8** %373, align 8, !dbg !2558
  %375 = load i8**, i8*** %19, align 8, !dbg !2559
  %376 = getelementptr inbounds i8*, i8** %375, i64 3, !dbg !2559
  %377 = load i8*, i8** %376, align 8, !dbg !2559
  %378 = load i8**, i8*** %19, align 8, !dbg !2560
  %379 = getelementptr inbounds i8*, i8** %378, i64 4, !dbg !2560
  %380 = load i8*, i8** %379, align 8, !dbg !2560
  %381 = load i8**, i8*** %19, align 8, !dbg !2561
  %382 = getelementptr inbounds i8*, i8** %381, i64 5, !dbg !2561
  %383 = load i8*, i8** %382, align 8, !dbg !2561
  %384 = load i8**, i8*** %19, align 8, !dbg !2562
  %385 = getelementptr inbounds i8*, i8** %384, i64 6, !dbg !2562
  %386 = load i8*, i8** %385, align 8, !dbg !2562
  %387 = load i8**, i8*** %19, align 8, !dbg !2563
  %388 = getelementptr inbounds i8*, i8** %387, i64 7, !dbg !2563
  %389 = load i8*, i8** %388, align 8, !dbg !2563
  %390 = load i8**, i8*** %19, align 8, !dbg !2564
  %391 = getelementptr inbounds i8*, i8** %390, i64 8, !dbg !2564
  %392 = load i8*, i8** %391, align 8, !dbg !2564
  %393 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %364, i8* %365, i8* %368, i8* %371, i8* %374, i8* %377, i8* %380, i8* %383, i8* %386, i8* %389, i8* %392), !dbg !2565
  %394 = load i32, i32* @x.33
  %395 = load i32, i32* @y.34
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %449, !dbg !2566

402:                                              ; preds = %originalBBpart212
  %403 = load i32, i32* @x.33
  %404 = load i32, i32* @y.34
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %402, %originalBB46alteredBB
  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2567
  %412 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.90, i64 0, i64 0)) #10, !dbg !2568
  %413 = load i8**, i8*** %19, align 8, !dbg !2569
  %414 = getelementptr inbounds i8*, i8** %413, i64 0, !dbg !2569
  %415 = load i8*, i8** %414, align 8, !dbg !2569
  %416 = load i8**, i8*** %19, align 8, !dbg !2570
  %417 = getelementptr inbounds i8*, i8** %416, i64 1, !dbg !2570
  %418 = load i8*, i8** %417, align 8, !dbg !2570
  %419 = load i8**, i8*** %19, align 8, !dbg !2571
  %420 = getelementptr inbounds i8*, i8** %419, i64 2, !dbg !2571
  %421 = load i8*, i8** %420, align 8, !dbg !2571
  %422 = load i8**, i8*** %19, align 8, !dbg !2572
  %423 = getelementptr inbounds i8*, i8** %422, i64 3, !dbg !2572
  %424 = load i8*, i8** %423, align 8, !dbg !2572
  %425 = load i8**, i8*** %19, align 8, !dbg !2573
  %426 = getelementptr inbounds i8*, i8** %425, i64 4, !dbg !2573
  %427 = load i8*, i8** %426, align 8, !dbg !2573
  %428 = load i8**, i8*** %19, align 8, !dbg !2574
  %429 = getelementptr inbounds i8*, i8** %428, i64 5, !dbg !2574
  %430 = load i8*, i8** %429, align 8, !dbg !2574
  %431 = load i8**, i8*** %19, align 8, !dbg !2575
  %432 = getelementptr inbounds i8*, i8** %431, i64 6, !dbg !2575
  %433 = load i8*, i8** %432, align 8, !dbg !2575
  %434 = load i8**, i8*** %19, align 8, !dbg !2576
  %435 = getelementptr inbounds i8*, i8** %434, i64 7, !dbg !2576
  %436 = load i8*, i8** %435, align 8, !dbg !2576
  %437 = load i8**, i8*** %19, align 8, !dbg !2577
  %438 = getelementptr inbounds i8*, i8** %437, i64 8, !dbg !2577
  %439 = load i8*, i8** %438, align 8, !dbg !2577
  %440 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %411, i8* %412, i8* %415, i8* %418, i8* %421, i8* %424, i8* %427, i8* %430, i8* %433, i8* %436, i8* %439), !dbg !2578
  %441 = load i32, i32* @x.33
  %442 = load i32, i32* @y.34
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %449, !dbg !2579

449:                                              ; preds = %originalBBpart248, %originalBBpart244, %originalBBpart240, %286, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart220, %119, %originalBBpart216
  %450 = load i32, i32* @x.33
  %451 = load i32, i32* @y.34
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %449, %originalBB50alteredBB
  %458 = load i32, i32* @x.33
  %459 = load i32, i32* @y.34
  %460 = sub i32 %458, 1
  %461 = mul i32 %458, %460
  %462 = urem i32 %461, 2
  %463 = icmp eq i32 %462, 0
  %464 = icmp slt i32 %459, 10
  %465 = or i1 %463, %464
  br i1 %465, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  ret void, !dbg !2580

originalBBalteredBB:                              ; preds = %originalBB, %6
  %466 = alloca %struct._IO_FILE*, align 8
  %467 = alloca i8*, align 8
  %468 = alloca i8*, align 8
  %469 = alloca i8*, align 8
  %470 = alloca i8**, align 8
  %471 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %466, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %466, metadata !2581, metadata !DIExpression()), !dbg !2451
  store i8* %1, i8** %467, align 8
  call void @llvm.dbg.declare(metadata i8** %467, metadata !2620, metadata !DIExpression()), !dbg !2453
  store i8* %2, i8** %468, align 8
  call void @llvm.dbg.declare(metadata i8** %468, metadata !2621, metadata !DIExpression()), !dbg !2455
  store i8* %3, i8** %469, align 8
  call void @llvm.dbg.declare(metadata i8** %469, metadata !2622, metadata !DIExpression()), !dbg !2457
  store i8** %4, i8*** %470, align 8
  call void @llvm.dbg.declare(metadata i8*** %470, metadata !2623, metadata !DIExpression()), !dbg !2459
  store i64 %5, i64* %471, align 8
  call void @llvm.dbg.declare(metadata i64* %471, metadata !2624, metadata !DIExpression()), !dbg !2461
  %472 = load i8*, i8** %467, align 8, !dbg !2462
  %473 = icmp ne i8* %472, null, !dbg !2462
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %474 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2465
  %475 = load i8*, i8** %16, align 8, !dbg !2466
  %476 = load i8*, i8** %17, align 8, !dbg !2467
  %477 = load i8*, i8** %18, align 8, !dbg !2468
  %478 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %474, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.75, i64 0, i64 0), i8* %475, i8* %476, i8* %477), !dbg !2469
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %479 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2470
  %480 = load i8*, i8** %17, align 8, !dbg !2471
  %481 = load i8*, i8** %18, align 8, !dbg !2472
  %482 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %479, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.76, i64 0, i64 0), i8* %480, i8* %481), !dbg !2473
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %483 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2474
  %484 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.77, i64 0, i64 0)) #10, !dbg !2475
  %485 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %483, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %484, i32 2020), !dbg !2476
  %486 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2477
  %487 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %486), !dbg !2477
  %488 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2478
  %489 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.79, i64 0, i64 0)) #10, !dbg !2479
  %490 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %488, i8* %489, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.80, i64 0, i64 0)), !dbg !2480
  %491 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2481
  %492 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %491), !dbg !2481
  %493 = load i64, i64* %20, align 8, !dbg !2482
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %126
  %494 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2491
  %495 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.82, i64 0, i64 0)) #10, !dbg !2492
  %496 = load i8**, i8*** %19, align 8, !dbg !2493
  %497 = getelementptr inbounds i8*, i8** %496, i64 0, !dbg !2493
  %498 = load i8*, i8** %497, align 8, !dbg !2493
  %499 = load i8**, i8*** %19, align 8, !dbg !2494
  %500 = getelementptr inbounds i8*, i8** %499, i64 1, !dbg !2494
  %501 = load i8*, i8** %500, align 8, !dbg !2494
  %502 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %494, i8* %495, i8* %498, i8* %501), !dbg !2495
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %152
  %503 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2497
  %504 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.83, i64 0, i64 0)) #10, !dbg !2498
  %505 = load i8**, i8*** %19, align 8, !dbg !2499
  %506 = getelementptr inbounds i8*, i8** %505, i64 0, !dbg !2499
  %507 = load i8*, i8** %506, align 8, !dbg !2499
  %508 = load i8**, i8*** %19, align 8, !dbg !2500
  %509 = getelementptr inbounds i8*, i8** %508, i64 1, !dbg !2500
  %510 = load i8*, i8** %509, align 8, !dbg !2500
  %511 = load i8**, i8*** %19, align 8, !dbg !2501
  %512 = getelementptr inbounds i8*, i8** %511, i64 2, !dbg !2501
  %513 = load i8*, i8** %512, align 8, !dbg !2501
  %514 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %503, i8* %504, i8* %507, i8* %510, i8* %513), !dbg !2502
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %181
  %515 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2504
  %516 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.84, i64 0, i64 0)) #10, !dbg !2505
  %517 = load i8**, i8*** %19, align 8, !dbg !2506
  %518 = getelementptr inbounds i8*, i8** %517, i64 0, !dbg !2506
  %519 = load i8*, i8** %518, align 8, !dbg !2506
  %520 = load i8**, i8*** %19, align 8, !dbg !2507
  %521 = getelementptr inbounds i8*, i8** %520, i64 1, !dbg !2507
  %522 = load i8*, i8** %521, align 8, !dbg !2507
  %523 = load i8**, i8*** %19, align 8, !dbg !2508
  %524 = getelementptr inbounds i8*, i8** %523, i64 2, !dbg !2508
  %525 = load i8*, i8** %524, align 8, !dbg !2508
  %526 = load i8**, i8*** %19, align 8, !dbg !2509
  %527 = getelementptr inbounds i8*, i8** %526, i64 3, !dbg !2509
  %528 = load i8*, i8** %527, align 8, !dbg !2509
  %529 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %515, i8* %516, i8* %519, i8* %522, i8* %525, i8* %528), !dbg !2510
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %213
  %530 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2512
  %531 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.85, i64 0, i64 0)) #10, !dbg !2513
  %532 = load i8**, i8*** %19, align 8, !dbg !2514
  %533 = getelementptr inbounds i8*, i8** %532, i64 0, !dbg !2514
  %534 = load i8*, i8** %533, align 8, !dbg !2514
  %535 = load i8**, i8*** %19, align 8, !dbg !2515
  %536 = getelementptr inbounds i8*, i8** %535, i64 1, !dbg !2515
  %537 = load i8*, i8** %536, align 8, !dbg !2515
  %538 = load i8**, i8*** %19, align 8, !dbg !2516
  %539 = getelementptr inbounds i8*, i8** %538, i64 2, !dbg !2516
  %540 = load i8*, i8** %539, align 8, !dbg !2516
  %541 = load i8**, i8*** %19, align 8, !dbg !2517
  %542 = getelementptr inbounds i8*, i8** %541, i64 3, !dbg !2517
  %543 = load i8*, i8** %542, align 8, !dbg !2517
  %544 = load i8**, i8*** %19, align 8, !dbg !2518
  %545 = getelementptr inbounds i8*, i8** %544, i64 4, !dbg !2518
  %546 = load i8*, i8** %545, align 8, !dbg !2518
  %547 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %530, i8* %531, i8* %534, i8* %537, i8* %540, i8* %543, i8* %546), !dbg !2519
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %248
  %548 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2521
  %549 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.86, i64 0, i64 0)) #10, !dbg !2522
  %550 = load i8**, i8*** %19, align 8, !dbg !2523
  %551 = getelementptr inbounds i8*, i8** %550, i64 0, !dbg !2523
  %552 = load i8*, i8** %551, align 8, !dbg !2523
  %553 = load i8**, i8*** %19, align 8, !dbg !2524
  %554 = getelementptr inbounds i8*, i8** %553, i64 1, !dbg !2524
  %555 = load i8*, i8** %554, align 8, !dbg !2524
  %556 = load i8**, i8*** %19, align 8, !dbg !2525
  %557 = getelementptr inbounds i8*, i8** %556, i64 2, !dbg !2525
  %558 = load i8*, i8** %557, align 8, !dbg !2525
  %559 = load i8**, i8*** %19, align 8, !dbg !2526
  %560 = getelementptr inbounds i8*, i8** %559, i64 3, !dbg !2526
  %561 = load i8*, i8** %560, align 8, !dbg !2526
  %562 = load i8**, i8*** %19, align 8, !dbg !2527
  %563 = getelementptr inbounds i8*, i8** %562, i64 4, !dbg !2527
  %564 = load i8*, i8** %563, align 8, !dbg !2527
  %565 = load i8**, i8*** %19, align 8, !dbg !2528
  %566 = getelementptr inbounds i8*, i8** %565, i64 5, !dbg !2528
  %567 = load i8*, i8** %566, align 8, !dbg !2528
  %568 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %548, i8* %549, i8* %552, i8* %555, i8* %558, i8* %561, i8* %564, i8* %567), !dbg !2529
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %311
  %569 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2542
  %570 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.88, i64 0, i64 0)) #10, !dbg !2543
  %571 = load i8**, i8*** %19, align 8, !dbg !2544
  %572 = getelementptr inbounds i8*, i8** %571, i64 0, !dbg !2544
  %573 = load i8*, i8** %572, align 8, !dbg !2544
  %574 = load i8**, i8*** %19, align 8, !dbg !2545
  %575 = getelementptr inbounds i8*, i8** %574, i64 1, !dbg !2545
  %576 = load i8*, i8** %575, align 8, !dbg !2545
  %577 = load i8**, i8*** %19, align 8, !dbg !2546
  %578 = getelementptr inbounds i8*, i8** %577, i64 2, !dbg !2546
  %579 = load i8*, i8** %578, align 8, !dbg !2546
  %580 = load i8**, i8*** %19, align 8, !dbg !2547
  %581 = getelementptr inbounds i8*, i8** %580, i64 3, !dbg !2547
  %582 = load i8*, i8** %581, align 8, !dbg !2547
  %583 = load i8**, i8*** %19, align 8, !dbg !2548
  %584 = getelementptr inbounds i8*, i8** %583, i64 4, !dbg !2548
  %585 = load i8*, i8** %584, align 8, !dbg !2548
  %586 = load i8**, i8*** %19, align 8, !dbg !2549
  %587 = getelementptr inbounds i8*, i8** %586, i64 5, !dbg !2549
  %588 = load i8*, i8** %587, align 8, !dbg !2549
  %589 = load i8**, i8*** %19, align 8, !dbg !2550
  %590 = getelementptr inbounds i8*, i8** %589, i64 6, !dbg !2550
  %591 = load i8*, i8** %590, align 8, !dbg !2550
  %592 = load i8**, i8*** %19, align 8, !dbg !2551
  %593 = getelementptr inbounds i8*, i8** %592, i64 7, !dbg !2551
  %594 = load i8*, i8** %593, align 8, !dbg !2551
  %595 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %569, i8* %570, i8* %573, i8* %576, i8* %579, i8* %582, i8* %585, i8* %588, i8* %591, i8* %594), !dbg !2552
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %355
  %596 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2554
  %597 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.89, i64 0, i64 0)) #10, !dbg !2555
  %598 = load i8**, i8*** %19, align 8, !dbg !2556
  %599 = getelementptr inbounds i8*, i8** %598, i64 0, !dbg !2556
  %600 = load i8*, i8** %599, align 8, !dbg !2556
  %601 = load i8**, i8*** %19, align 8, !dbg !2557
  %602 = getelementptr inbounds i8*, i8** %601, i64 1, !dbg !2557
  %603 = load i8*, i8** %602, align 8, !dbg !2557
  %604 = load i8**, i8*** %19, align 8, !dbg !2558
  %605 = getelementptr inbounds i8*, i8** %604, i64 2, !dbg !2558
  %606 = load i8*, i8** %605, align 8, !dbg !2558
  %607 = load i8**, i8*** %19, align 8, !dbg !2559
  %608 = getelementptr inbounds i8*, i8** %607, i64 3, !dbg !2559
  %609 = load i8*, i8** %608, align 8, !dbg !2559
  %610 = load i8**, i8*** %19, align 8, !dbg !2560
  %611 = getelementptr inbounds i8*, i8** %610, i64 4, !dbg !2560
  %612 = load i8*, i8** %611, align 8, !dbg !2560
  %613 = load i8**, i8*** %19, align 8, !dbg !2561
  %614 = getelementptr inbounds i8*, i8** %613, i64 5, !dbg !2561
  %615 = load i8*, i8** %614, align 8, !dbg !2561
  %616 = load i8**, i8*** %19, align 8, !dbg !2562
  %617 = getelementptr inbounds i8*, i8** %616, i64 6, !dbg !2562
  %618 = load i8*, i8** %617, align 8, !dbg !2562
  %619 = load i8**, i8*** %19, align 8, !dbg !2563
  %620 = getelementptr inbounds i8*, i8** %619, i64 7, !dbg !2563
  %621 = load i8*, i8** %620, align 8, !dbg !2563
  %622 = load i8**, i8*** %19, align 8, !dbg !2564
  %623 = getelementptr inbounds i8*, i8** %622, i64 8, !dbg !2564
  %624 = load i8*, i8** %623, align 8, !dbg !2564
  %625 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %596, i8* %597, i8* %600, i8* %603, i8* %606, i8* %609, i8* %612, i8* %615, i8* %618, i8* %621, i8* %624), !dbg !2565
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %402
  %626 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2567
  %627 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.90, i64 0, i64 0)) #10, !dbg !2568
  %628 = load i8**, i8*** %19, align 8, !dbg !2569
  %629 = getelementptr inbounds i8*, i8** %628, i64 0, !dbg !2569
  %630 = load i8*, i8** %629, align 8, !dbg !2569
  %631 = load i8**, i8*** %19, align 8, !dbg !2570
  %632 = getelementptr inbounds i8*, i8** %631, i64 1, !dbg !2570
  %633 = load i8*, i8** %632, align 8, !dbg !2570
  %634 = load i8**, i8*** %19, align 8, !dbg !2571
  %635 = getelementptr inbounds i8*, i8** %634, i64 2, !dbg !2571
  %636 = load i8*, i8** %635, align 8, !dbg !2571
  %637 = load i8**, i8*** %19, align 8, !dbg !2572
  %638 = getelementptr inbounds i8*, i8** %637, i64 3, !dbg !2572
  %639 = load i8*, i8** %638, align 8, !dbg !2572
  %640 = load i8**, i8*** %19, align 8, !dbg !2573
  %641 = getelementptr inbounds i8*, i8** %640, i64 4, !dbg !2573
  %642 = load i8*, i8** %641, align 8, !dbg !2573
  %643 = load i8**, i8*** %19, align 8, !dbg !2574
  %644 = getelementptr inbounds i8*, i8** %643, i64 5, !dbg !2574
  %645 = load i8*, i8** %644, align 8, !dbg !2574
  %646 = load i8**, i8*** %19, align 8, !dbg !2575
  %647 = getelementptr inbounds i8*, i8** %646, i64 6, !dbg !2575
  %648 = load i8*, i8** %647, align 8, !dbg !2575
  %649 = load i8**, i8*** %19, align 8, !dbg !2576
  %650 = getelementptr inbounds i8*, i8** %649, i64 7, !dbg !2576
  %651 = load i8*, i8** %650, align 8, !dbg !2576
  %652 = load i8**, i8*** %19, align 8, !dbg !2577
  %653 = getelementptr inbounds i8*, i8** %652, i64 8, !dbg !2577
  %654 = load i8*, i8** %653, align 8, !dbg !2577
  %655 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %626, i8* %627, i8* %630, i8* %633, i8* %636, i8* %639, i8* %642, i8* %645, i8* %648, i8* %651, i8* %654), !dbg !2578
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %449
  br label %originalBB50
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !2625 {
  %6 = load i32, i32* @x.35
  %7 = load i32, i32* @y.36
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !2635, metadata !DIExpression()), !dbg !2636
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2637, metadata !DIExpression()), !dbg !2638
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2639, metadata !DIExpression()), !dbg !2640
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2641, metadata !DIExpression()), !dbg !2642
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !2643, metadata !DIExpression()), !dbg !2644
  call void @llvm.dbg.declare(metadata i64* %19, metadata !2645, metadata !DIExpression()), !dbg !2646
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !2647, metadata !DIExpression()), !dbg !2649
  store i64 0, i64* %19, align 8, !dbg !2650
  %21 = load i32, i32* @x.35
  %22 = load i32, i32* @y.36
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !2652

29:                                               ; preds = %originalBBpart245, %originalBBpart2
  %30 = load i32, i32* @x.35
  %31 = load i32, i32* @y.36
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !2653
  %39 = icmp ult i64 %38, 10, !dbg !2655
  %40 = load i32, i32* @x.35
  %41 = load i32, i32* @y.36
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %134, !dbg !2656

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.35
  %50 = load i32, i32* @y.36
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2657
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !2657
  %59 = load i32, i32* %58, align 8, !dbg !2657
  %60 = icmp ule i32 %59, 40, !dbg !2657
  %61 = load i32, i32* @x.35
  %62 = load i32, i32* @y.36
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !2657

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.35
  %71 = load i32, i32* @y.36
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2657
  %79 = load i8*, i8** %78, align 8, !dbg !2657
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !2657
  %81 = bitcast i8* %80 to i8**, !dbg !2657
  %82 = add i32 %59, 8, !dbg !2657
  store i32 %82, i32* %58, align 8, !dbg !2657
  %83 = load i32, i32* @x.35
  %84 = load i32, i32* @y.36
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart216, label %originalBB10alteredBB

originalBBpart216:                                ; preds = %originalBB10
  br label %112, !dbg !2657

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.35
  %93 = load i32, i32* @y.36
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %91, %originalBB18alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2657
  %101 = load i8*, i8** %100, align 8, !dbg !2657
  %102 = bitcast i8* %101 to i8**, !dbg !2657
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !2657
  store i8* %103, i8** %100, align 8, !dbg !2657
  %104 = load i32, i32* @x.35
  %105 = load i32, i32* @y.36
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %112, !dbg !2657

112:                                              ; preds = %originalBBpart220, %originalBBpart216
  %113 = phi i8** [ %81, %originalBBpart216 ], [ %102, %originalBBpart220 ], !dbg !2657
  %114 = load i32, i32* @x.35
  %115 = load i32, i32* @y.36
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %112, %originalBB22alteredBB
  %122 = load i8*, i8** %113, align 8, !dbg !2657
  %123 = load i64, i64* %19, align 8, !dbg !2658
  %124 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %123, !dbg !2659
  store i8* %122, i8** %124, align 8, !dbg !2660
  %125 = icmp ne i8* %122, null, !dbg !2661
  %126 = load i32, i32* @x.35
  %127 = load i32, i32* @y.36
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %134

134:                                              ; preds = %originalBBpart224, %originalBBpart24
  %135 = phi i1 [ false, %originalBBpart24 ], [ %125, %originalBBpart224 ], !dbg !2662
  %136 = load i32, i32* @x.35
  %137 = load i32, i32* @y.36
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %134, %originalBB26alteredBB
  %144 = load i32, i32* @x.35
  %145 = load i32, i32* @y.36
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %135, label %152, label %188, !dbg !2663

152:                                              ; preds = %originalBBpart228
  %153 = load i32, i32* @x.35
  %154 = load i32, i32* @y.36
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %152, %originalBB30alteredBB
  %161 = load i32, i32* @x.35
  %162 = load i32, i32* @y.36
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %169, !dbg !2663

169:                                              ; preds = %originalBBpart232
  %170 = load i32, i32* @x.35
  %171 = load i32, i32* @y.36
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %169, %originalBB34alteredBB
  %178 = load i64, i64* %19, align 8, !dbg !2664
  %179 = add i64 %178, 1, !dbg !2664
  store i64 %179, i64* %19, align 8, !dbg !2664
  %180 = load i32, i32* @x.35
  %181 = load i32, i32* @y.36
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart245, label %originalBB34alteredBB

originalBBpart245:                                ; preds = %originalBB34
  br label %29, !dbg !2665, !llvm.loop !2666

188:                                              ; preds = %originalBBpart228
  %189 = load i32, i32* @x.35
  %190 = load i32, i32* @y.36
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %188, %originalBB47alteredBB
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2668
  %198 = load i8*, i8** %15, align 8, !dbg !2669
  %199 = load i8*, i8** %16, align 8, !dbg !2670
  %200 = load i8*, i8** %17, align 8, !dbg !2671
  %201 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2672
  %202 = load i64, i64* %19, align 8, !dbg !2673
  call void @version_etc_arn(%struct._IO_FILE* %197, i8* %198, i8* %199, i8* %200, i8** %201, i64 %202), !dbg !2674
  %203 = load i32, i32* @x.35
  %204 = load i32, i32* @y.36
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  ret void, !dbg !2675

originalBBalteredBB:                              ; preds = %originalBB, %5
  %211 = alloca %struct._IO_FILE*, align 8
  %212 = alloca i8*, align 8
  %213 = alloca i8*, align 8
  %214 = alloca i8*, align 8
  %215 = alloca %struct.__va_list_tag*, align 8
  %216 = alloca i64, align 8
  %217 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %211, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %211, metadata !2676, metadata !DIExpression()), !dbg !2636
  store i8* %1, i8** %212, align 8
  call void @llvm.dbg.declare(metadata i8** %212, metadata !2722, metadata !DIExpression()), !dbg !2638
  store i8* %2, i8** %213, align 8
  call void @llvm.dbg.declare(metadata i8** %213, metadata !2723, metadata !DIExpression()), !dbg !2640
  store i8* %3, i8** %214, align 8
  call void @llvm.dbg.declare(metadata i8** %214, metadata !2724, metadata !DIExpression()), !dbg !2642
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %215, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %215, metadata !2725, metadata !DIExpression()), !dbg !2644
  call void @llvm.dbg.declare(metadata i64* %216, metadata !2726, metadata !DIExpression()), !dbg !2646
  call void @llvm.dbg.declare(metadata [10 x i8*]* %217, metadata !2727, metadata !DIExpression()), !dbg !2649
  store i64 0, i64* %216, align 8, !dbg !2650
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %218 = load i64, i64* %19, align 8, !dbg !2653
  %219 = icmp ult i64 %218, 10, !dbg !2655
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %220 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2657
  %221 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %220, i32 0, i32 0, !dbg !2657
  %222 = load i32, i32* %221, align 8, !dbg !2657
  %223 = icmp ule i32 %222, 40, !dbg !2657
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %224 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2657
  %225 = load i8*, i8** %224, align 8, !dbg !2657
  %226 = getelementptr i8, i8* %225, i32 %59, !dbg !2657
  %227 = bitcast i8* %226 to i8**, !dbg !2657
  %_ = sub i32 %59, 8
  %gen = mul i32 %_, 8
  %_11 = shl i32 %59, 8
  %_12 = shl i32 %59, 8
  %_13 = sub i32 0, %59
  %gen14 = add i32 %_13, 8
  %228 = add i32 %59, 8, !dbg !2657
  store i32 %228, i32* %58, align 8, !dbg !2657
  br label %originalBB10

originalBB18alteredBB:                            ; preds = %originalBB18, %91
  %229 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2657
  %230 = load i8*, i8** %229, align 8, !dbg !2657
  %231 = bitcast i8* %230 to i8**, !dbg !2657
  %232 = getelementptr i8, i8* %230, i32 8, !dbg !2657
  store i8* %232, i8** %229, align 8, !dbg !2657
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %112
  %233 = load i8*, i8** %113, align 8, !dbg !2657
  %234 = load i64, i64* %19, align 8, !dbg !2658
  %235 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %234, !dbg !2659
  store i8* %233, i8** %235, align 8, !dbg !2660
  %236 = icmp ne i8* %233, null, !dbg !2661
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %134
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %152
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %169
  %237 = load i64, i64* %19, align 8, !dbg !2664
  %_35 = shl i64 %237, 1
  %_36 = sub i64 0, %237
  %gen37 = add i64 %_36, 1
  %_38 = sub i64 %237, 1
  %gen39 = mul i64 %_38, 1
  %_40 = sub i64 0, %237
  %gen41 = add i64 %_40, 1
  %_42 = sub i64 0, %237
  %gen43 = add i64 %_42, 1
  %238 = add i64 %237, 1, !dbg !2664
  store i64 %238, i64* %19, align 8, !dbg !2664
  br label %originalBB34

originalBB47alteredBB:                            ; preds = %originalBB47, %188
  %239 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2668
  %240 = load i8*, i8** %15, align 8, !dbg !2669
  %241 = load i8*, i8** %16, align 8, !dbg !2670
  %242 = load i8*, i8** %17, align 8, !dbg !2671
  %243 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2672
  %244 = load i64, i64* %19, align 8, !dbg !2673
  call void @version_etc_arn(%struct._IO_FILE* %239, i8* %240, i8* %241, i8* %242, i8** %243, i64 %244), !dbg !2674
  br label %originalBB47
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !2728 {
  %5 = load i32, i32* @x.37
  %6 = load i32, i32* @y.38
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !2731, metadata !DIExpression()), !dbg !2732
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2733, metadata !DIExpression()), !dbg !2734
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2735, metadata !DIExpression()), !dbg !2736
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2737, metadata !DIExpression()), !dbg !2738
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !2739, metadata !DIExpression()), !dbg !2746
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2747
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !2747
  call void @llvm.va_start(i8* %19), !dbg !2747
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !2748
  %21 = load i8*, i8** %14, align 8, !dbg !2749
  %22 = load i8*, i8** %15, align 8, !dbg !2750
  %23 = load i8*, i8** %16, align 8, !dbg !2751
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2752
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !2753
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2754
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !2754
  call void @llvm.va_end(i8* %26), !dbg !2754
  %27 = load i32, i32* @x.37
  %28 = load i32, i32* @y.38
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2755

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !2756, metadata !DIExpression()), !dbg !2732
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !2795, metadata !DIExpression()), !dbg !2734
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !2796, metadata !DIExpression()), !dbg !2736
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !2797, metadata !DIExpression()), !dbg !2738
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !2798, metadata !DIExpression()), !dbg !2746
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2747
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !2747
  call void @llvm.va_start(i8* %41), !dbg !2747
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !2748
  %43 = load i8*, i8** %36, align 8, !dbg !2749
  %44 = load i8*, i8** %37, align 8, !dbg !2750
  %45 = load i8*, i8** %38, align 8, !dbg !2751
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2752
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !2753
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2754
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !2754
  call void @llvm.va_end(i8* %48), !dbg !2754
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !2809 {
  %2 = load i32, i32* @x.39
  %3 = load i32, i32* @y.40
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2813, metadata !DIExpression()), !dbg !2814
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2815, metadata !DIExpression()), !dbg !2816
  %12 = load i64, i64* %10, align 8, !dbg !2817
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !2818
  store i8* %13, i8** %11, align 8, !dbg !2816
  %14 = load i8*, i8** %11, align 8, !dbg !2819
  %15 = icmp ne i8* %14, null, !dbg !2819
  %16 = load i32, i32* @x.39
  %17 = load i32, i32* @y.40
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %60, label %24, !dbg !2821

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.39
  %26 = load i32, i32* @y.40
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !2822
  %34 = icmp ne i64 %33, 0, !dbg !2823
  %35 = load i32, i32* @x.39
  %36 = load i32, i32* @y.40
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %60, !dbg !2824

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.39
  %45 = load i32, i32* @y.40
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  call void @xalloc_die() #15, !dbg !2825
  %52 = load i32, i32* @x.39
  %53 = load i32, i32* @y.40
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !2825

60:                                               ; preds = %originalBBpart24, %originalBBpart2
  %61 = load i32, i32* @x.39
  %62 = load i32, i32* @y.40
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = load i8*, i8** %11, align 8, !dbg !2826
  %70 = load i32, i32* @x.39
  %71 = load i32, i32* @y.40
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %69, !dbg !2827

originalBBalteredBB:                              ; preds = %originalBB, %1
  %78 = alloca i64, align 8
  %79 = alloca i8*, align 8
  store i64 %0, i64* %78, align 8
  call void @llvm.dbg.declare(metadata i64* %78, metadata !2828, metadata !DIExpression()), !dbg !2814
  call void @llvm.dbg.declare(metadata i8** %79, metadata !2831, metadata !DIExpression()), !dbg !2816
  %80 = load i64, i64* %78, align 8, !dbg !2817
  %81 = call noalias i8* @malloc(i64 %80) #10, !dbg !2818
  store i8* %81, i8** %79, align 8, !dbg !2816
  %82 = load i8*, i8** %79, align 8, !dbg !2819
  %83 = icmp ne i8* %82, null, !dbg !2819
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %84 = load i64, i64* %10, align 8, !dbg !2822
  %85 = icmp ne i64 %84, 0, !dbg !2823
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  call void @xalloc_die() #15, !dbg !2825
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %86 = load i8*, i8** %11, align 8, !dbg !2826
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !2832 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2835, metadata !DIExpression()), !dbg !2836
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !2837, metadata !DIExpression()), !dbg !2838
  %6 = load i64, i64* %5, align 8, !dbg !2839
  %7 = icmp ne i64 %6, 0, !dbg !2839
  br i1 %7, label %45, label %8, !dbg !2841

8:                                                ; preds = %2
  %9 = load i32, i32* @x.41
  %10 = load i32, i32* @y.42
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load i8*, i8** %4, align 8, !dbg !2842
  %18 = icmp ne i8* %17, null, !dbg !2842
  %19 = load i32, i32* @x.41
  %20 = load i32, i32* @y.42
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %45, !dbg !2843

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.41
  %29 = load i32, i32* @y.42
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i8*, i8** %4, align 8, !dbg !2844
  call void @free(i8* %36) #10, !dbg !2846
  store i8* null, i8** %3, align 8, !dbg !2847
  %37 = load i32, i32* @x.41
  %38 = load i32, i32* @y.42
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %105, !dbg !2847

45:                                               ; preds = %originalBBpart2, %2
  %46 = load i8*, i8** %4, align 8, !dbg !2848
  %47 = load i64, i64* %5, align 8, !dbg !2849
  %48 = call i8* @realloc(i8* %46, i64 %47) #10, !dbg !2850
  store i8* %48, i8** %4, align 8, !dbg !2851
  %49 = load i8*, i8** %4, align 8, !dbg !2852
  %50 = icmp ne i8* %49, null, !dbg !2852
  br i1 %50, label %87, label %51, !dbg !2854

51:                                               ; preds = %45
  %52 = load i32, i32* @x.41
  %53 = load i32, i32* @y.42
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %51, %originalBB6alteredBB
  %60 = load i64, i64* %5, align 8, !dbg !2855
  %61 = icmp ne i64 %60, 0, !dbg !2855
  %62 = load i32, i32* @x.41
  %63 = load i32, i32* @y.42
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %61, label %70, label %87, !dbg !2856

70:                                               ; preds = %originalBBpart28
  %71 = load i32, i32* @x.41
  %72 = load i32, i32* @y.42
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %70, %originalBB10alteredBB
  call void @xalloc_die() #15, !dbg !2857
  %79 = load i32, i32* @x.41
  %80 = load i32, i32* @y.42
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !2857

87:                                               ; preds = %originalBBpart28, %45
  %88 = load i32, i32* @x.41
  %89 = load i32, i32* @y.42
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load i8*, i8** %4, align 8, !dbg !2858
  store i8* %96, i8** %3, align 8, !dbg !2859
  %97 = load i32, i32* @x.41
  %98 = load i32, i32* @y.42
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %105, !dbg !2859

105:                                              ; preds = %originalBBpart216, %originalBBpart24
  %106 = load i32, i32* @x.41
  %107 = load i32, i32* @y.42
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %105, %originalBB18alteredBB
  %114 = load i8*, i8** %3, align 8, !dbg !2860
  %115 = load i32, i32* @x.41
  %116 = load i32, i32* @y.42
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i8* %114, !dbg !2860

originalBBalteredBB:                              ; preds = %originalBB, %8
  %123 = load i8*, i8** %4, align 8, !dbg !2842
  %124 = icmp ne i8* %123, null, !dbg !2842
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %125 = load i8*, i8** %4, align 8, !dbg !2844
  call void @free(i8* %125) #10, !dbg !2846
  store i8* null, i8** %3, align 8, !dbg !2847
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %51
  %126 = load i64, i64* %5, align 8, !dbg !2855
  %127 = icmp ne i64 %126, 0, !dbg !2855
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %70
  call void @xalloc_die() #15, !dbg !2857
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %128 = load i8*, i8** %4, align 8, !dbg !2858
  store i8* %128, i8** %3, align 8, !dbg !2859
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %105
  %129 = load i8*, i8** %3, align 8, !dbg !2860
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !2861 {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2865, metadata !DIExpression()), !dbg !2866
  %11 = load i64, i64* %10, align 8, !dbg !2867
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !2867
  %13 = load i32, i32* @x.43
  %14 = load i32, i32* @y.44
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2868

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !2869, metadata !DIExpression()), !dbg !2866
  %22 = load i64, i64* %21, align 8, !dbg !2867
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !2867
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !2872 {
  %1 = load i32, i32* @x.45
  %2 = load i32, i32* @y.46
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !2874
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.101, i64 0, i64 0)) #10, !dbg !2875
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.102, i64 0, i64 0), i8* %10), !dbg !2876
  call void @abort() #12, !dbg !2877
  %11 = load i32, i32* @x.45
  %12 = load i32, i32* @y.46
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !2877

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !2874
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.101, i64 0, i64 0)) #10, !dbg !2875
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.102, i64 0, i64 0), i8* %20), !dbg !2876
  call void @abort() #12, !dbg !2877
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !2878 {
  %5 = load i32, i32* @x.47
  %6 = load i32, i32* @y.48
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !2894, metadata !DIExpression()), !dbg !2895
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2896, metadata !DIExpression()), !dbg !2897
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !2898, metadata !DIExpression()), !dbg !2899
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !2900, metadata !DIExpression()), !dbg !2901
  call void @llvm.dbg.declare(metadata i64* %18, metadata !2902, metadata !DIExpression()), !dbg !2903
  call void @llvm.dbg.declare(metadata i32* %19, metadata !2904, metadata !DIExpression()), !dbg !2905
  %21 = load i32*, i32** %14, align 8, !dbg !2906
  %22 = icmp ne i32* %21, null, !dbg !2906
  %23 = load i32, i32* @x.47
  %24 = load i32, i32* @y.48
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !2908

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.47
  %33 = load i32, i32* @y.48
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !2909
  %40 = load i32, i32* @x.47
  %41 = load i32, i32* @y.48
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !2910

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.47
  %50 = load i32, i32* @y.48
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !2911
  %58 = load i8*, i8** %15, align 8, !dbg !2912
  %59 = load i64, i64* %16, align 8, !dbg !2913
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2914
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !2915
  store i64 %61, i64* %18, align 8, !dbg !2916
  %62 = load i64, i64* %18, align 8, !dbg !2917
  %63 = icmp ule i64 -2, %62, !dbg !2919
  %64 = load i32, i32* @x.47
  %65 = load i32, i32* @y.48
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %131, !dbg !2920

72:                                               ; preds = %originalBBpart28
  %73 = load i32, i32* @x.47
  %74 = load i32, i32* @y.48
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %72, %originalBB10alteredBB
  %81 = load i64, i64* %16, align 8, !dbg !2921
  %82 = icmp ne i64 %81, 0, !dbg !2922
  %83 = load i32, i32* @x.47
  %84 = load i32, i32* @y.48
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %131, !dbg !2923

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.47
  %93 = load i32, i32* @y.48
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call zeroext i1 @hard_locale(i32 0), !dbg !2924
  %101 = load i32, i32* @x.47
  %102 = load i32, i32* @y.48
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %100, label %131, label %109, !dbg !2925

109:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8* %20, metadata !2926, metadata !DIExpression()), !dbg !2928
  %110 = load i32, i32* @x.47
  %111 = load i32, i32* @y.48
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = load i8*, i8** %15, align 8, !dbg !2929
  %119 = load i8, i8* %118, align 1, !dbg !2930
  store i8 %119, i8* %20, align 1, !dbg !2928
  %120 = load i8, i8* %20, align 1, !dbg !2931
  %121 = zext i8 %120 to i32, !dbg !2931
  %122 = load i32*, i32** %14, align 8, !dbg !2932
  store i32 %121, i32* %122, align 4, !dbg !2933
  store i64 1, i64* %13, align 8, !dbg !2934
  %123 = load i32, i32* @x.47
  %124 = load i32, i32* @y.48
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %149, !dbg !2934

131:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %132 = load i32, i32* @x.47
  %133 = load i32, i32* @y.48
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i64, i64* %18, align 8, !dbg !2935
  store i64 %140, i64* %13, align 8, !dbg !2936
  %141 = load i32, i32* @x.47
  %142 = load i32, i32* @y.48
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %149, !dbg !2936

149:                                              ; preds = %originalBBpart224, %originalBBpart220
  %150 = load i32, i32* @x.47
  %151 = load i32, i32* @y.48
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  %158 = load i64, i64* %13, align 8, !dbg !2937
  %159 = load i32, i32* @x.47
  %160 = load i32, i32* @y.48
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i64 %158, !dbg !2937

originalBBalteredBB:                              ; preds = %originalBB, %4
  %167 = alloca i64, align 8
  %168 = alloca i32*, align 8
  %169 = alloca i8*, align 8
  %170 = alloca i64, align 8
  %171 = alloca %struct.__mbstate_t*, align 8
  %172 = alloca i64, align 8
  %173 = alloca i32, align 4
  %174 = alloca i8, align 1
  store i32* %0, i32** %168, align 8
  call void @llvm.dbg.declare(metadata i32** %168, metadata !2938, metadata !DIExpression()), !dbg !2895
  store i8* %1, i8** %169, align 8
  call void @llvm.dbg.declare(metadata i8** %169, metadata !2954, metadata !DIExpression()), !dbg !2897
  store i64 %2, i64* %170, align 8
  call void @llvm.dbg.declare(metadata i64* %170, metadata !2955, metadata !DIExpression()), !dbg !2899
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %171, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %171, metadata !2956, metadata !DIExpression()), !dbg !2901
  call void @llvm.dbg.declare(metadata i64* %172, metadata !2957, metadata !DIExpression()), !dbg !2903
  call void @llvm.dbg.declare(metadata i32* %173, metadata !2958, metadata !DIExpression()), !dbg !2905
  %175 = load i32*, i32** %168, align 8, !dbg !2906
  %176 = icmp ne i32* %175, null, !dbg !2906
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !2909
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %177 = load i32*, i32** %14, align 8, !dbg !2911
  %178 = load i8*, i8** %15, align 8, !dbg !2912
  %179 = load i64, i64* %16, align 8, !dbg !2913
  %180 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2914
  %181 = call i64 @mbrtowc(i32* %177, i8* %178, i64 %179, %struct.__mbstate_t* %180) #10, !dbg !2915
  store i64 %181, i64* %18, align 8, !dbg !2916
  %182 = load i64, i64* %18, align 8, !dbg !2917
  %183 = icmp ule i64 -2, %182, !dbg !2919
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %72
  %184 = load i64, i64* %16, align 8, !dbg !2921
  %185 = icmp ne i64 %184, 0, !dbg !2922
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %186 = call zeroext i1 @hard_locale(i32 0), !dbg !2924
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %187 = load i8*, i8** %15, align 8, !dbg !2929
  %188 = load i8, i8* %187, align 1, !dbg !2930
  store i8 %188, i8* %20, align 1, !dbg !2928
  %189 = load i8, i8* %20, align 1, !dbg !2931
  %190 = zext i8 %189 to i32, !dbg !2931
  %191 = load i32*, i32** %14, align 8, !dbg !2932
  store i32 %190, i32* %191, align 4, !dbg !2933
  store i64 1, i64* %13, align 8, !dbg !2934
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %192 = load i64, i64* %18, align 8, !dbg !2935
  store i64 %192, i64* %13, align 8, !dbg !2936
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  %193 = load i64, i64* %13, align 8, !dbg !2937
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !2959 {
  %3 = load i32, i32* @x.49
  %4 = load i32, i32* @y.50
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2963, metadata !DIExpression()), !dbg !2964
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2965, metadata !DIExpression()), !dbg !2966
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2967, metadata !DIExpression()), !dbg !2968
  %18 = load i8*, i8** %12, align 8, !dbg !2969
  store i8* %18, i8** %14, align 8, !dbg !2968
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2970, metadata !DIExpression()), !dbg !2971
  %19 = load i8*, i8** %13, align 8, !dbg !2972
  store i8* %19, i8** %15, align 8, !dbg !2971
  call void @llvm.dbg.declare(metadata i8* %16, metadata !2973, metadata !DIExpression()), !dbg !2974
  call void @llvm.dbg.declare(metadata i8* %17, metadata !2975, metadata !DIExpression()), !dbg !2976
  %20 = load i8*, i8** %14, align 8, !dbg !2977
  %21 = load i8*, i8** %15, align 8, !dbg !2979
  %22 = icmp eq i8* %20, %21, !dbg !2980
  %23 = load i32, i32* @x.49
  %24 = load i32, i32* @y.50
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !2981

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.49
  %33 = load i32, i32* @y.50
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !2982
  %40 = load i32, i32* @x.49
  %41 = load i32, i32* @y.50
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %177, !dbg !2982

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.49
  %50 = load i32, i32* @y.50
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.49
  %58 = load i32, i32* @y.50
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !2983

65:                                               ; preds = %originalBBpart224, %originalBBpart28
  %66 = load i32, i32* @x.49
  %67 = load i32, i32* @y.50
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8*, i8** %14, align 8, !dbg !2984
  %75 = load i8, i8* %74, align 1, !dbg !2986
  %76 = zext i8 %75 to i32, !dbg !2986
  %77 = call i32 @c_tolower(i32 %76), !dbg !2987
  %78 = trunc i32 %77 to i8, !dbg !2987
  store i8 %78, i8* %16, align 1, !dbg !2988
  %79 = load i8*, i8** %15, align 8, !dbg !2989
  %80 = load i8, i8* %79, align 1, !dbg !2990
  %81 = zext i8 %80 to i32, !dbg !2990
  %82 = call i32 @c_tolower(i32 %81), !dbg !2991
  %83 = trunc i32 %82 to i8, !dbg !2991
  store i8 %83, i8* %17, align 1, !dbg !2992
  %84 = load i8, i8* %16, align 1, !dbg !2993
  %85 = zext i8 %84 to i32, !dbg !2993
  %86 = icmp eq i32 %85, 0, !dbg !2995
  %87 = load i32, i32* @x.49
  %88 = load i32, i32* @y.50
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %112, !dbg !2996

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.49
  %97 = load i32, i32* @y.50
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* @x.49
  %105 = load i32, i32* @y.50
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %155, !dbg !2997

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.49
  %114 = load i32, i32* @y.50
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %14, align 8, !dbg !2998
  %122 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !2998
  store i8* %122, i8** %14, align 8, !dbg !2998
  %123 = load i8*, i8** %15, align 8, !dbg !2999
  %124 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !2999
  store i8* %124, i8** %15, align 8, !dbg !2999
  %125 = load i32, i32* @x.49
  %126 = load i32, i32* @y.50
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !3000

133:                                              ; preds = %originalBBpart220
  %134 = load i32, i32* @x.49
  %135 = load i32, i32* @y.50
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i8, i8* %16, align 1, !dbg !3001
  %143 = zext i8 %142 to i32, !dbg !3001
  %144 = load i8, i8* %17, align 1, !dbg !3002
  %145 = zext i8 %144 to i32, !dbg !3002
  %146 = icmp eq i32 %143, %145, !dbg !3003
  %147 = load i32, i32* @x.49
  %148 = load i32, i32* @y.50
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %146, label %65, label %155, !dbg !3000, !llvm.loop !3004

155:                                              ; preds = %originalBBpart224, %originalBBpart216
  %156 = load i32, i32* @x.49
  %157 = load i32, i32* @y.50
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %155, %originalBB26alteredBB
  %164 = load i8, i8* %16, align 1, !dbg !3006
  %165 = zext i8 %164 to i32, !dbg !3006
  %166 = load i8, i8* %17, align 1, !dbg !3008
  %167 = zext i8 %166 to i32, !dbg !3008
  %168 = sub nsw i32 %165, %167, !dbg !3009
  store i32 %168, i32* %11, align 4, !dbg !3010
  %169 = load i32, i32* @x.49
  %170 = load i32, i32* @y.50
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %177, !dbg !3010

177:                                              ; preds = %originalBBpart228, %originalBBpart24
  %178 = load i32, i32* @x.49
  %179 = load i32, i32* @y.50
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %177, %originalBB30alteredBB
  %186 = load i32, i32* %11, align 4, !dbg !3011
  %187 = load i32, i32* @x.49
  %188 = load i32, i32* @y.50
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %186, !dbg !3011

originalBBalteredBB:                              ; preds = %originalBB, %2
  %195 = alloca i32, align 4
  %196 = alloca i8*, align 8
  %197 = alloca i8*, align 8
  %198 = alloca i8*, align 8
  %199 = alloca i8*, align 8
  %200 = alloca i8, align 1
  %201 = alloca i8, align 1
  store i8* %0, i8** %196, align 8
  call void @llvm.dbg.declare(metadata i8** %196, metadata !3012, metadata !DIExpression()), !dbg !2964
  store i8* %1, i8** %197, align 8
  call void @llvm.dbg.declare(metadata i8** %197, metadata !3015, metadata !DIExpression()), !dbg !2966
  call void @llvm.dbg.declare(metadata i8** %198, metadata !3016, metadata !DIExpression()), !dbg !2968
  %202 = load i8*, i8** %196, align 8, !dbg !2969
  store i8* %202, i8** %198, align 8, !dbg !2968
  call void @llvm.dbg.declare(metadata i8** %199, metadata !3017, metadata !DIExpression()), !dbg !2971
  %203 = load i8*, i8** %197, align 8, !dbg !2972
  store i8* %203, i8** %199, align 8, !dbg !2971
  call void @llvm.dbg.declare(metadata i8* %200, metadata !3018, metadata !DIExpression()), !dbg !2974
  call void @llvm.dbg.declare(metadata i8* %201, metadata !3019, metadata !DIExpression()), !dbg !2976
  %204 = load i8*, i8** %198, align 8, !dbg !2977
  %205 = load i8*, i8** %199, align 8, !dbg !2979
  %206 = icmp eq i8* %204, %205, !dbg !2980
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !2982
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %207 = load i8*, i8** %14, align 8, !dbg !2984
  %208 = load i8, i8* %207, align 1, !dbg !2986
  %209 = zext i8 %208 to i32, !dbg !2986
  %210 = call i32 @c_tolower(i32 %209), !dbg !2987
  %211 = trunc i32 %210 to i8, !dbg !2987
  store i8 %211, i8* %16, align 1, !dbg !2988
  %212 = load i8*, i8** %15, align 8, !dbg !2989
  %213 = load i8, i8* %212, align 1, !dbg !2990
  %214 = zext i8 %213 to i32, !dbg !2990
  %215 = call i32 @c_tolower(i32 %214), !dbg !2991
  %216 = trunc i32 %215 to i8, !dbg !2991
  store i8 %216, i8* %17, align 1, !dbg !2992
  %217 = load i8, i8* %16, align 1, !dbg !2993
  %218 = zext i8 %217 to i32, !dbg !2993
  %219 = icmp eq i32 %218, 0, !dbg !2995
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %220 = load i8*, i8** %14, align 8, !dbg !2998
  %221 = getelementptr inbounds i8, i8* %220, i32 1, !dbg !2998
  store i8* %221, i8** %14, align 8, !dbg !2998
  %222 = load i8*, i8** %15, align 8, !dbg !2999
  %223 = getelementptr inbounds i8, i8* %222, i32 1, !dbg !2999
  store i8* %223, i8** %15, align 8, !dbg !2999
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %224 = load i8, i8* %16, align 1, !dbg !3001
  %225 = zext i8 %224 to i32, !dbg !3001
  %226 = load i8, i8* %17, align 1, !dbg !3002
  %227 = zext i8 %226 to i32, !dbg !3002
  %228 = icmp eq i32 %225, %227, !dbg !3003
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %155
  %229 = load i8, i8* %16, align 1, !dbg !3006
  %230 = zext i8 %229 to i32, !dbg !3006
  %231 = load i8, i8* %17, align 1, !dbg !3008
  %232 = zext i8 %231 to i32, !dbg !3008
  %_ = sub i32 0, %230
  %gen = add i32 %_, %232
  %233 = sub nsw i32 %230, %232, !dbg !3009
  store i32 %233, i32* %11, align 4, !dbg !3010
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %177
  %234 = load i32, i32* %11, align 4, !dbg !3011
  br label %originalBB30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !3020 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3058, metadata !DIExpression()), !dbg !3059
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3060, metadata !DIExpression()), !dbg !3062
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3063
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !3064
  %17 = icmp ne i64 %16, 0, !dbg !3065
  %18 = zext i1 %17 to i8, !dbg !3062
  store i8 %18, i8* %12, align 1, !dbg !3062
  call void @llvm.dbg.declare(metadata i8* %13, metadata !3066, metadata !DIExpression()), !dbg !3067
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3068
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !3068
  %21 = icmp ne i32 %20, 0, !dbg !3069
  %22 = zext i1 %21 to i8, !dbg !3067
  store i8 %22, i8* %13, align 1, !dbg !3067
  call void @llvm.dbg.declare(metadata i8* %14, metadata !3070, metadata !DIExpression()), !dbg !3071
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3072
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !3073
  %25 = icmp ne i32 %24, 0, !dbg !3074
  %26 = zext i1 %25 to i8, !dbg !3071
  store i8 %26, i8* %14, align 1, !dbg !3071
  %27 = load i8, i8* %13, align 1, !dbg !3075
  %28 = trunc i8 %27 to i1, !dbg !3075
  %29 = load i32, i32* @x.51
  %30 = load i32, i32* @y.52
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %95, label %37, !dbg !3077

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.51
  %39 = load i32, i32* @y.52
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !3078
  %47 = trunc i8 %46 to i1, !dbg !3078
  %48 = load i32, i32* @x.51
  %49 = load i32, i32* @y.52
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %149, !dbg !3079

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.51
  %58 = load i32, i32* @y.52
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !3080
  %66 = trunc i8 %65 to i1, !dbg !3080
  %67 = load i32, i32* @x.51
  %68 = load i32, i32* @y.52
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %95, label %75, !dbg !3081

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.51
  %77 = load i32, i32* @y.52
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call i32* @__errno_location() #14, !dbg !3082
  %85 = load i32, i32* %84, align 4, !dbg !3082
  %86 = icmp ne i32 %85, 9, !dbg !3083
  %87 = load i32, i32* @x.51
  %88 = load i32, i32* @y.52
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %149, !dbg !3084

95:                                               ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart2
  %96 = load i32, i32* @x.51
  %97 = load i32, i32* @y.52
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i8, i8* %14, align 1, !dbg !3085
  %105 = trunc i8 %104 to i1, !dbg !3085
  %106 = load i32, i32* @x.51
  %107 = load i32, i32* @y.52
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %105, label %132, label %114, !dbg !3088

114:                                              ; preds = %originalBBpart216
  %115 = load i32, i32* @x.51
  %116 = load i32, i32* @y.52
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  %123 = call i32* @__errno_location() #14, !dbg !3089
  store i32 0, i32* %123, align 4, !dbg !3090
  %124 = load i32, i32* @x.51
  %125 = load i32, i32* @y.52
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %132, !dbg !3089

132:                                              ; preds = %originalBBpart220, %originalBBpart216
  %133 = load i32, i32* @x.51
  %134 = load i32, i32* @y.52
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %132, %originalBB22alteredBB
  store i32 -1, i32* %10, align 4, !dbg !3091
  %141 = load i32, i32* @x.51
  %142 = load i32, i32* @y.52
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %166, !dbg !3091

149:                                              ; preds = %originalBBpart212, %originalBBpart24
  %150 = load i32, i32* @x.51
  %151 = load i32, i32* @y.52
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  store i32 0, i32* %10, align 4, !dbg !3092
  %158 = load i32, i32* @x.51
  %159 = load i32, i32* @y.52
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !3092

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.51
  %168 = load i32, i32* @y.52
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %10, align 4, !dbg !3093
  %176 = load i32, i32* @x.51
  %177 = load i32, i32* @y.52
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %175, !dbg !3093

originalBBalteredBB:                              ; preds = %originalBB, %1
  %184 = alloca i32, align 4
  %185 = alloca %struct._IO_FILE*, align 8
  %186 = alloca i8, align 1
  %187 = alloca i8, align 1
  %188 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %185, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %185, metadata !3094, metadata !DIExpression()), !dbg !3059
  call void @llvm.dbg.declare(metadata i8* %186, metadata !3133, metadata !DIExpression()), !dbg !3062
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3063
  %190 = call i64 @__fpending(%struct._IO_FILE* %189) #10, !dbg !3064
  %191 = icmp ne i64 %190, 0, !dbg !3065
  %192 = zext i1 %191 to i8, !dbg !3062
  store i8 %192, i8* %186, align 1, !dbg !3062
  call void @llvm.dbg.declare(metadata i8* %187, metadata !3134, metadata !DIExpression()), !dbg !3067
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3068
  %194 = call i32 @ferror_unlocked(%struct._IO_FILE* %193) #10, !dbg !3068
  %195 = icmp ne i32 %194, 0, !dbg !3069
  %196 = zext i1 %195 to i8, !dbg !3067
  store i8 %196, i8* %187, align 1, !dbg !3067
  call void @llvm.dbg.declare(metadata i8* %188, metadata !3135, metadata !DIExpression()), !dbg !3071
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3072
  %198 = call i32 @rpl_fclose(%struct._IO_FILE* %197), !dbg !3073
  %199 = icmp ne i32 %198, 0, !dbg !3074
  %200 = zext i1 %199 to i8, !dbg !3071
  store i8 %200, i8* %188, align 1, !dbg !3071
  %201 = load i8, i8* %187, align 1, !dbg !3075
  %202 = trunc i8 %201 to i1, !dbg !3075
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %203 = load i8, i8* %14, align 1, !dbg !3078
  %204 = trunc i8 %203 to i1, !dbg !3078
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %205 = load i8, i8* %12, align 1, !dbg !3080
  %206 = trunc i8 %205 to i1, !dbg !3080
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %207 = call i32* @__errno_location() #14, !dbg !3082
  %208 = load i32, i32* %207, align 4, !dbg !3082
  %209 = icmp ne i32 %208, 9, !dbg !3083
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %210 = load i8, i8* %14, align 1, !dbg !3085
  %211 = trunc i8 %210 to i1, !dbg !3085
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  %212 = call i32* @__errno_location() #14, !dbg !3089
  store i32 0, i32* %212, align 4, !dbg !3090
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %132
  store i32 -1, i32* %10, align 4, !dbg !3091
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  store i32 0, i32* %10, align 4, !dbg !3092
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %213 = load i32, i32* %10, align 4, !dbg !3093
  br label %originalBB30
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !3136 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3140, metadata !DIExpression()), !dbg !3141
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !3142, metadata !DIExpression()), !dbg !3146
  %13 = load i32, i32* %11, align 4, !dbg !3147
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3149
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !3150
  %16 = icmp ne i32 %15, 0, !dbg !3150
  %17 = load i32, i32* @x.53
  %18 = load i32, i32* @y.54
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !3151

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.53
  %27 = load i32, i32* @y.54
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !3152
  %34 = load i32, i32* @x.53
  %35 = load i32, i32* @y.54
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %101, !dbg !3152

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.53
  %44 = load i32, i32* @y.54
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3153
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i64 0, i64 0)) #13, !dbg !3154
  %53 = icmp eq i32 %52, 0, !dbg !3155
  %54 = load i32, i32* @x.53
  %55 = load i32, i32* @y.54
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %82, label %62, !dbg !3156

62:                                               ; preds = %originalBBpart28
  %63 = load i32, i32* @x.53
  %64 = load i32, i32* @y.54
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %62, %originalBB10alteredBB
  %71 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3157
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.112, i64 0, i64 0)) #13, !dbg !3158
  %73 = icmp eq i32 %72, 0, !dbg !3159
  %74 = load i32, i32* @x.53
  %75 = load i32, i32* @y.54
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %82, !dbg !3156

82:                                               ; preds = %originalBBpart212, %originalBBpart28
  %83 = phi i1 [ true, %originalBBpart28 ], [ %73, %originalBBpart212 ]
  %84 = load i32, i32* @x.53
  %85 = load i32, i32* @y.54
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %92 = xor i1 %83, true, !dbg !3160
  store i1 %92, i1* %10, align 1, !dbg !3161
  %93 = load i32, i32* @x.53
  %94 = load i32, i32* @y.54
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart223, label %originalBB14alteredBB

originalBBpart223:                                ; preds = %originalBB14
  br label %101, !dbg !3161

101:                                              ; preds = %originalBBpart223, %originalBBpart24
  %102 = load i32, i32* @x.53
  %103 = load i32, i32* @y.54
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %101, %originalBB25alteredBB
  %110 = load i1, i1* %10, align 1, !dbg !3162
  %111 = load i32, i32* @x.53
  %112 = load i32, i32* @y.54
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  ret i1 %110, !dbg !3162

originalBBalteredBB:                              ; preds = %originalBB, %1
  %119 = alloca i1, align 1
  %120 = alloca i32, align 4
  %121 = alloca [257 x i8], align 16
  store i32 %0, i32* %120, align 4
  call void @llvm.dbg.declare(metadata i32* %120, metadata !3163, metadata !DIExpression()), !dbg !3141
  call void @llvm.dbg.declare(metadata [257 x i8]* %121, metadata !3166, metadata !DIExpression()), !dbg !3146
  %122 = load i32, i32* %120, align 4, !dbg !3147
  %123 = getelementptr inbounds [257 x i8], [257 x i8]* %121, i64 0, i64 0, !dbg !3149
  %124 = call i32 @setlocale_null_r(i32 %122, i8* %123, i64 257), !dbg !3150
  %125 = icmp ne i32 %124, 0, !dbg !3150
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  store i1 false, i1* %10, align 1, !dbg !3152
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %126 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3153
  %127 = call i32 @strcmp(i8* %126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i64 0, i64 0)) #13, !dbg !3154
  %128 = icmp eq i32 %127, 0, !dbg !3155
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %62
  %129 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3157
  %130 = call i32 @strcmp(i8* %129, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.112, i64 0, i64 0)) #13, !dbg !3158
  %131 = icmp eq i32 %130, 0, !dbg !3159
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %_ = sub i1 %83, true
  %gen = mul i1 %_, true
  %_15 = shl i1 %83, true
  %_16 = sub i1 false, %83
  %gen17 = add i1 %_16, true
  %_18 = shl i1 %83, true
  %_19 = sub i1 false, %83
  %gen20 = add i1 %_19, true
  %_21 = shl i1 %83, true
  %132 = xor i1 %83, true, !dbg !3160
  store i1 %132, i1* %10, align 1, !dbg !3161
  br label %originalBB14

originalBB25alteredBB:                            ; preds = %originalBB25, %101
  %133 = load i1, i1* %10, align 1, !dbg !3162
  br label %originalBB25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !3167 {
  %1 = load i32, i32* @x.55
  %2 = load i32, i32* @y.56
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3171, metadata !DIExpression()), !dbg !3172
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !3173
  store i8* %10, i8** %9, align 8, !dbg !3174
  %11 = load i8*, i8** %9, align 8, !dbg !3175
  %12 = icmp eq i8* %11, null, !dbg !3177
  %13 = load i32, i32* @x.55
  %14 = load i32, i32* @y.56
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !3178

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.55
  %23 = load i32, i32* @y.56
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.115, i64 0, i64 0), i8** %9, align 8, !dbg !3179
  %30 = load i32, i32* @x.55
  %31 = load i32, i32* @y.56
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !3180

38:                                               ; preds = %originalBBpart24, %originalBBpart2
  %39 = load i32, i32* @x.55
  %40 = load i32, i32* @y.56
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load i8*, i8** %9, align 8, !dbg !3181
  %48 = getelementptr inbounds i8, i8* %47, i64 0, !dbg !3181
  %49 = load i8, i8* %48, align 1, !dbg !3181
  %50 = sext i8 %49 to i32, !dbg !3181
  %51 = icmp eq i32 %50, 0, !dbg !3185
  %52 = load i32, i32* @x.55
  %53 = load i32, i32* @y.56
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %60, label %77, !dbg !3186

60:                                               ; preds = %originalBBpart28
  %61 = load i32, i32* @x.55
  %62 = load i32, i32* @y.56
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.116, i64 0, i64 0), i8** %9, align 8, !dbg !3187
  %69 = load i32, i32* @x.55
  %70 = load i32, i32* @y.56
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %77, !dbg !3188

77:                                               ; preds = %originalBBpart212, %originalBBpart28
  %78 = load i32, i32* @x.55
  %79 = load i32, i32* @y.56
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %77, %originalBB14alteredBB
  %86 = load i8*, i8** %9, align 8, !dbg !3189
  %87 = load i32, i32* @x.55
  %88 = load i32, i32* @y.56
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %86, !dbg !3190

originalBBalteredBB:                              ; preds = %originalBB, %0
  %95 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %95, metadata !3191, metadata !DIExpression()), !dbg !3172
  %96 = call i8* @nl_langinfo(i32 14) #10, !dbg !3173
  store i8* %96, i8** %95, align 8, !dbg !3174
  %97 = load i8*, i8** %95, align 8, !dbg !3175
  %98 = icmp eq i8* %97, null, !dbg !3177
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.115, i64 0, i64 0), i8** %9, align 8, !dbg !3179
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %99 = load i8*, i8** %9, align 8, !dbg !3181
  %100 = getelementptr inbounds i8, i8* %99, i64 0, !dbg !3181
  %101 = load i8, i8* %100, align 1, !dbg !3181
  %102 = sext i8 %101 to i32, !dbg !3181
  %103 = icmp eq i32 %102, 0, !dbg !3185
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.116, i64 0, i64 0), i8** %9, align 8, !dbg !3187
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %77
  %104 = load i8*, i8** %9, align 8, !dbg !3189
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !3194 {
  %4 = load i32, i32* @x.57
  %5 = load i32, i32* @y.58
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3198, metadata !DIExpression()), !dbg !3199
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3200, metadata !DIExpression()), !dbg !3201
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3202, metadata !DIExpression()), !dbg !3203
  %15 = load i32, i32* %12, align 4, !dbg !3204
  %16 = load i8*, i8** %13, align 8, !dbg !3205
  %17 = load i64, i64* %14, align 8, !dbg !3206
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !3207
  %19 = load i32, i32* @x.57
  %20 = load i32, i32* @y.58
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !3208

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3209, metadata !DIExpression()), !dbg !3199
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !3212, metadata !DIExpression()), !dbg !3201
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3213, metadata !DIExpression()), !dbg !3203
  %30 = load i32, i32* %27, align 4, !dbg !3204
  %31 = load i8*, i8** %28, align 8, !dbg !3205
  %32 = load i64, i64* %29, align 8, !dbg !3206
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !3207
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !3214 {
  %4 = load i32, i32* @x.59
  %5 = load i32, i32* @y.60
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3215, metadata !DIExpression()), !dbg !3216
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3217, metadata !DIExpression()), !dbg !3218
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !3219, metadata !DIExpression()), !dbg !3220
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3221, metadata !DIExpression()), !dbg !3222
  %18 = load i32, i32* %13, align 4, !dbg !3223
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !3224
  store i8* %19, i8** %16, align 8, !dbg !3222
  %20 = load i8*, i8** %16, align 8, !dbg !3225
  %21 = icmp eq i8* %20, null, !dbg !3227
  %22 = load i32, i32* @x.59
  %23 = load i32, i32* @y.60
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %53, !dbg !3228

30:                                               ; preds = %originalBBpart2
  %31 = load i64, i64* %15, align 8, !dbg !3229
  %32 = icmp ugt i64 %31, 0, !dbg !3232
  br i1 %32, label %33, label %36, !dbg !3233

33:                                               ; preds = %30
  %34 = load i8*, i8** %14, align 8, !dbg !3234
  %35 = getelementptr inbounds i8, i8* %34, i64 0, !dbg !3234
  store i8 0, i8* %35, align 1, !dbg !3235
  br label %36, !dbg !3234

36:                                               ; preds = %33, %30
  %37 = load i32, i32* @x.59
  %38 = load i32, i32* @y.60
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  store i32 22, i32* %12, align 4, !dbg !3236
  %45 = load i32, i32* @x.59
  %46 = load i32, i32* @y.60
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %157, !dbg !3236

53:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !3237, metadata !DIExpression()), !dbg !3239
  %54 = load i32, i32* @x.59
  %55 = load i32, i32* @y.60
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i8*, i8** %16, align 8, !dbg !3240
  %63 = call i64 @strlen(i8* %62) #13, !dbg !3241
  store i64 %63, i64* %17, align 8, !dbg !3239
  %64 = load i64, i64* %17, align 8, !dbg !3242
  %65 = load i64, i64* %15, align 8, !dbg !3244
  %66 = icmp ult i64 %64, %65, !dbg !3245
  %67 = load i32, i32* @x.59
  %68 = load i32, i32* @y.60
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %96, !dbg !3246

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.59
  %77 = load i32, i32* @y.60
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = load i8*, i8** %14, align 8, !dbg !3247
  %85 = load i8*, i8** %16, align 8, !dbg !3249
  %86 = load i64, i64* %17, align 8, !dbg !3250
  %87 = add i64 %86, 1, !dbg !3251
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %85, i64 %87, i1 false), !dbg !3252
  store i32 0, i32* %12, align 4, !dbg !3253
  %88 = load i32, i32* @x.59
  %89 = load i32, i32* @y.60
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart222, label %originalBB10alteredBB

originalBBpart222:                                ; preds = %originalBB10
  br label %157, !dbg !3253

96:                                               ; preds = %originalBBpart28
  %97 = load i32, i32* @x.59
  %98 = load i32, i32* @y.60
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %96, %originalBB24alteredBB
  %105 = load i64, i64* %15, align 8, !dbg !3254
  %106 = icmp ugt i64 %105, 0, !dbg !3257
  %107 = load i32, i32* @x.59
  %108 = load i32, i32* @y.60
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  br i1 %106, label %115, label %140, !dbg !3258

115:                                              ; preds = %originalBBpart227
  %116 = load i32, i32* @x.59
  %117 = load i32, i32* @y.60
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %115, %originalBB29alteredBB
  %124 = load i8*, i8** %14, align 8, !dbg !3259
  %125 = load i8*, i8** %16, align 8, !dbg !3261
  %126 = load i64, i64* %15, align 8, !dbg !3262
  %127 = sub i64 %126, 1, !dbg !3263
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %124, i8* align 1 %125, i64 %127, i1 false), !dbg !3264
  %128 = load i8*, i8** %14, align 8, !dbg !3265
  %129 = load i64, i64* %15, align 8, !dbg !3266
  %130 = sub i64 %129, 1, !dbg !3267
  %131 = getelementptr inbounds i8, i8* %128, i64 %130, !dbg !3265
  store i8 0, i8* %131, align 1, !dbg !3268
  %132 = load i32, i32* @x.59
  %133 = load i32, i32* @y.60
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart247, label %originalBB29alteredBB

originalBBpart247:                                ; preds = %originalBB29
  br label %140, !dbg !3269

140:                                              ; preds = %originalBBpart247, %originalBBpart227
  %141 = load i32, i32* @x.59
  %142 = load i32, i32* @y.60
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %140, %originalBB49alteredBB
  store i32 34, i32* %12, align 4, !dbg !3270
  %149 = load i32, i32* @x.59
  %150 = load i32, i32* @y.60
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br label %157, !dbg !3270

157:                                              ; preds = %originalBBpart251, %originalBBpart222, %originalBBpart24
  %158 = load i32, i32* %12, align 4, !dbg !3271
  ret i32 %158, !dbg !3271

originalBBalteredBB:                              ; preds = %originalBB, %3
  %159 = alloca i32, align 4
  %160 = alloca i32, align 4
  %161 = alloca i8*, align 8
  %162 = alloca i64, align 8
  %163 = alloca i8*, align 8
  %164 = alloca i64, align 8
  store i32 %0, i32* %160, align 4
  call void @llvm.dbg.declare(metadata i32* %160, metadata !3272, metadata !DIExpression()), !dbg !3216
  store i8* %1, i8** %161, align 8
  call void @llvm.dbg.declare(metadata i8** %161, metadata !3275, metadata !DIExpression()), !dbg !3218
  store i64 %2, i64* %162, align 8
  call void @llvm.dbg.declare(metadata i64* %162, metadata !3276, metadata !DIExpression()), !dbg !3220
  call void @llvm.dbg.declare(metadata i8** %163, metadata !3277, metadata !DIExpression()), !dbg !3222
  %165 = load i32, i32* %160, align 4, !dbg !3223
  %166 = call i8* @setlocale_null_androidfix(i32 %165), !dbg !3224
  store i8* %166, i8** %163, align 8, !dbg !3222
  %167 = load i8*, i8** %163, align 8, !dbg !3225
  %168 = icmp eq i8* %167, null, !dbg !3227
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  store i32 22, i32* %12, align 4, !dbg !3236
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %169 = load i8*, i8** %16, align 8, !dbg !3240
  %170 = call i64 @strlen(i8* %169) #13, !dbg !3241
  store i64 %170, i64* %17, align 8, !dbg !3239
  %171 = load i64, i64* %17, align 8, !dbg !3242
  %172 = load i64, i64* %15, align 8, !dbg !3244
  %173 = icmp ult i64 %171, %172, !dbg !3245
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %174 = load i8*, i8** %14, align 8, !dbg !3247
  %175 = load i8*, i8** %16, align 8, !dbg !3249
  %176 = load i64, i64* %17, align 8, !dbg !3250
  %_ = sub i64 %176, 1
  %gen = mul i64 %_, 1
  %_11 = sub i64 0, %176
  %gen12 = add i64 %_11, 1
  %_13 = sub i64 %176, 1
  %gen14 = mul i64 %_13, 1
  %_15 = sub i64 0, %176
  %gen16 = add i64 %_15, 1
  %_17 = sub i64 0, %176
  %gen18 = add i64 %_17, 1
  %_19 = sub i64 0, %176
  %gen20 = add i64 %_19, 1
  %177 = add i64 %176, 1, !dbg !3251
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %174, i8* align 1 %175, i64 %177, i1 false), !dbg !3252
  store i32 0, i32* %12, align 4, !dbg !3253
  br label %originalBB10

originalBB24alteredBB:                            ; preds = %originalBB24, %96
  %178 = load i64, i64* %15, align 8, !dbg !3254
  %179 = icmp ugt i64 %178, 0, !dbg !3257
  br label %originalBB24

originalBB29alteredBB:                            ; preds = %originalBB29, %115
  %180 = load i8*, i8** %14, align 8, !dbg !3259
  %181 = load i8*, i8** %16, align 8, !dbg !3261
  %182 = load i64, i64* %15, align 8, !dbg !3262
  %_30 = sub i64 %182, 1
  %gen31 = mul i64 %_30, 1
  %_32 = sub i64 0, %182
  %gen33 = add i64 %_32, 1
  %183 = sub i64 %182, 1, !dbg !3263
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %180, i8* align 1 %181, i64 %183, i1 false), !dbg !3264
  %184 = load i8*, i8** %14, align 8, !dbg !3265
  %185 = load i64, i64* %15, align 8, !dbg !3266
  %_34 = sub i64 0, %185
  %gen35 = add i64 %_34, 1
  %_36 = sub i64 %185, 1
  %gen37 = mul i64 %_36, 1
  %_38 = sub i64 %185, 1
  %gen39 = mul i64 %_38, 1
  %_40 = sub i64 %185, 1
  %gen41 = mul i64 %_40, 1
  %_42 = sub i64 %185, 1
  %gen43 = mul i64 %_42, 1
  %_44 = sub i64 %185, 1
  %gen45 = mul i64 %_44, 1
  %186 = sub i64 %185, 1, !dbg !3267
  %187 = getelementptr inbounds i8, i8* %184, i64 %186, !dbg !3265
  store i8 0, i8* %187, align 1, !dbg !3268
  br label %originalBB29

originalBB49alteredBB:                            ; preds = %originalBB49, %140
  store i32 34, i32* %12, align 4, !dbg !3270
  br label %originalBB49
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !3278 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !3281, metadata !DIExpression()), !dbg !3282
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3283, metadata !DIExpression()), !dbg !3284
  %4 = load i32, i32* %2, align 4, !dbg !3285
  %5 = call i8* @setlocale(i32 %4, i8* null) #10, !dbg !3286
  store i8* %5, i8** %3, align 8, !dbg !3284
  %6 = load i8*, i8** %3, align 8, !dbg !3287
  ret i8* %6, !dbg !3288
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !3289 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3327, metadata !DIExpression()), !dbg !3328
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3329, metadata !DIExpression()), !dbg !3330
  store i32 0, i32* %12, align 4, !dbg !3330
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3331, metadata !DIExpression()), !dbg !3332
  call void @llvm.dbg.declare(metadata i32* %14, metadata !3333, metadata !DIExpression()), !dbg !3334
  store i32 0, i32* %14, align 4, !dbg !3334
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3335
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !3336
  store i32 %16, i32* %13, align 4, !dbg !3337
  %17 = load i32, i32* %13, align 4, !dbg !3338
  %18 = icmp slt i32 %17, 0, !dbg !3340
  %19 = load i32, i32* @x.63
  %20 = load i32, i32* @y.64
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %46, !dbg !3341

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.63
  %29 = load i32, i32* @y.64
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3342
  %37 = call i32 @fclose(%struct._IO_FILE* %36), !dbg !3343
  store i32 %37, i32* %10, align 4, !dbg !3344
  %38 = load i32, i32* @x.63
  %39 = load i32, i32* @y.64
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %184, !dbg !3344

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.63
  %48 = load i32, i32* @y.64
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3345
  %56 = call i32 @__freading(%struct._IO_FILE* %55) #10, !dbg !3345
  %57 = icmp ne i32 %56, 0, !dbg !3345
  %58 = load i32, i32* @x.63
  %59 = load i32, i32* @y.64
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !3347

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.63
  %68 = load i32, i32* @y.64
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3348
  %76 = call i32 @fileno(%struct._IO_FILE* %75) #10, !dbg !3349
  %77 = call i64 @lseek(i32 %76, i64 0, i32 1) #10, !dbg !3350
  %78 = icmp ne i64 %77, -1, !dbg !3351
  %79 = load i32, i32* @x.63
  %80 = load i32, i32* @y.64
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %78, label %87, label %126, !dbg !3352

87:                                               ; preds = %originalBBpart212, %originalBBpart28
  %88 = load i32, i32* @x.63
  %89 = load i32, i32* @y.64
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3353
  %97 = call i32 @rpl_fflush(%struct._IO_FILE* %96), !dbg !3354
  %98 = icmp ne i32 %97, 0, !dbg !3354
  %99 = load i32, i32* @x.63
  %100 = load i32, i32* @y.64
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %126, !dbg !3355

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.63
  %109 = load i32, i32* @y.64
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = call i32* @__errno_location() #14, !dbg !3356
  %117 = load i32, i32* %116, align 4, !dbg !3356
  store i32 %117, i32* %12, align 4, !dbg !3357
  %118 = load i32, i32* @x.63
  %119 = load i32, i32* @y.64
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %126, !dbg !3358

126:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart212
  %127 = load i32, i32* @x.63
  %128 = load i32, i32* @y.64
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %126, %originalBB22alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3359
  %136 = call i32 @fclose(%struct._IO_FILE* %135), !dbg !3360
  store i32 %136, i32* %14, align 4, !dbg !3361
  %137 = load i32, i32* %12, align 4, !dbg !3362
  %138 = icmp ne i32 %137, 0, !dbg !3364
  %139 = load i32, i32* @x.63
  %140 = load i32, i32* @y.64
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %138, label %147, label %166, !dbg !3365

147:                                              ; preds = %originalBBpart224
  %148 = load i32, i32* @x.63
  %149 = load i32, i32* @y.64
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %147, %originalBB26alteredBB
  %156 = load i32, i32* %12, align 4, !dbg !3366
  %157 = call i32* @__errno_location() #14, !dbg !3368
  store i32 %156, i32* %157, align 4, !dbg !3369
  store i32 -1, i32* %14, align 4, !dbg !3370
  %158 = load i32, i32* @x.63
  %159 = load i32, i32* @y.64
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !3371

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.63
  %168 = load i32, i32* @y.64
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %14, align 4, !dbg !3372
  store i32 %175, i32* %10, align 4, !dbg !3373
  %176 = load i32, i32* @x.63
  %177 = load i32, i32* @y.64
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %184, !dbg !3373

184:                                              ; preds = %originalBBpart232, %originalBBpart24
  %185 = load i32, i32* @x.63
  %186 = load i32, i32* @y.64
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %184, %originalBB34alteredBB
  %193 = load i32, i32* %10, align 4, !dbg !3374
  %194 = load i32, i32* @x.63
  %195 = load i32, i32* @y.64
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret i32 %193, !dbg !3374

originalBBalteredBB:                              ; preds = %originalBB, %1
  %202 = alloca i32, align 4
  %203 = alloca %struct._IO_FILE*, align 8
  %204 = alloca i32, align 4
  %205 = alloca i32, align 4
  %206 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %203, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %203, metadata !3375, metadata !DIExpression()), !dbg !3328
  call void @llvm.dbg.declare(metadata i32* %204, metadata !3414, metadata !DIExpression()), !dbg !3330
  store i32 0, i32* %204, align 4, !dbg !3330
  call void @llvm.dbg.declare(metadata i32* %205, metadata !3415, metadata !DIExpression()), !dbg !3332
  call void @llvm.dbg.declare(metadata i32* %206, metadata !3416, metadata !DIExpression()), !dbg !3334
  store i32 0, i32* %206, align 4, !dbg !3334
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** %203, align 8, !dbg !3335
  %208 = call i32 @fileno(%struct._IO_FILE* %207) #10, !dbg !3336
  store i32 %208, i32* %205, align 4, !dbg !3337
  %209 = load i32, i32* %205, align 4, !dbg !3338
  %210 = icmp slt i32 %209, 0, !dbg !3340
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3342
  %212 = call i32 @fclose(%struct._IO_FILE* %211), !dbg !3343
  store i32 %212, i32* %10, align 4, !dbg !3344
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3345
  %214 = call i32 @__freading(%struct._IO_FILE* %213) #10, !dbg !3345
  %215 = icmp ne i32 %214, 0, !dbg !3345
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3348
  %217 = call i32 @fileno(%struct._IO_FILE* %216) #10, !dbg !3349
  %218 = call i64 @lseek(i32 %217, i64 0, i32 1) #10, !dbg !3350
  %219 = icmp ne i64 %218, -1, !dbg !3351
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3353
  %221 = call i32 @rpl_fflush(%struct._IO_FILE* %220), !dbg !3354
  %222 = icmp ne i32 %221, 0, !dbg !3354
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %223 = call i32* @__errno_location() #14, !dbg !3356
  %224 = load i32, i32* %223, align 4, !dbg !3356
  store i32 %224, i32* %12, align 4, !dbg !3357
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %126
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3359
  %226 = call i32 @fclose(%struct._IO_FILE* %225), !dbg !3360
  store i32 %226, i32* %14, align 4, !dbg !3361
  %227 = load i32, i32* %12, align 4, !dbg !3362
  %228 = icmp ne i32 %227, 0, !dbg !3364
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %147
  %229 = load i32, i32* %12, align 4, !dbg !3366
  %230 = call i32* @__errno_location() #14, !dbg !3368
  store i32 %229, i32* %230, align 4, !dbg !3369
  store i32 -1, i32* %14, align 4, !dbg !3370
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %231 = load i32, i32* %14, align 4, !dbg !3372
  store i32 %231, i32* %10, align 4, !dbg !3373
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %184
  %232 = load i32, i32* %10, align 4, !dbg !3374
  br label %originalBB34
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !3417 {
  %2 = load i32, i32* @x.65
  %3 = load i32, i32* @y.66
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3455, metadata !DIExpression()), !dbg !3456
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3457
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !3459
  %14 = load i32, i32* @x.65
  %15 = load i32, i32* @y.66
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !3460

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.65
  %24 = load i32, i32* @y.66
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3461
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !3461
  %33 = icmp ne i32 %32, 0, !dbg !3461
  %34 = load i32, i32* @x.65
  %35 = load i32, i32* @y.66
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !3462

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.65
  %44 = load i32, i32* @y.66
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3463
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !3464
  store i32 %52, i32* %10, align 4, !dbg !3465
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !3465

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3466
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !3467
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3468
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !3469
  store i32 %72, i32* %10, align 4, !dbg !3470
  %73 = load i32, i32* @x.65
  %74 = load i32, i32* @y.66
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !3470

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* @x.65
  %83 = load i32, i32* @y.66
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* %10, align 4, !dbg !3471
  %91 = load i32, i32* @x.65
  %92 = load i32, i32* @y.66
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %90, !dbg !3471

originalBBalteredBB:                              ; preds = %originalBB, %1
  %99 = alloca i32, align 4
  %100 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %100, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %100, metadata !3472, metadata !DIExpression()), !dbg !3456
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %100, align 8, !dbg !3457
  %102 = icmp eq %struct._IO_FILE* %101, null, !dbg !3459
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3461
  %104 = call i32 @__freading(%struct._IO_FILE* %103) #10, !dbg !3461
  %105 = icmp ne i32 %104, 0, !dbg !3461
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3463
  %107 = call i32 @fflush(%struct._IO_FILE* %106), !dbg !3464
  store i32 %107, i32* %10, align 4, !dbg !3465
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3466
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %108), !dbg !3467
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3468
  %110 = call i32 @fflush(%struct._IO_FILE* %109), !dbg !3469
  store i32 %110, i32* %10, align 4, !dbg !3470
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %111 = load i32, i32* %10, align 4, !dbg !3471
  br label %originalBB14
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !3511 {
  %2 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %2, metadata !3514, metadata !DIExpression()), !dbg !3515
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !3516
  %4 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %3, i32 0, i32 0, !dbg !3518
  %5 = load i32, i32* %4, align 8, !dbg !3518
  %6 = and i32 %5, 256, !dbg !3519
  %7 = icmp ne i32 %6, 0, !dbg !3519
  br i1 %7, label %8, label %27, !dbg !3520

8:                                                ; preds = %1
  %9 = load i32, i32* @x.67
  %10 = load i32, i32* @y.68
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !3521
  %18 = call i32 @rpl_fseeko(%struct._IO_FILE* %17, i64 0, i32 1), !dbg !3522
  %19 = load i32, i32* @x.67
  %20 = load i32, i32* @y.68
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %27, !dbg !3522

27:                                               ; preds = %originalBBpart2, %1
  %28 = load i32, i32* @x.67
  %29 = load i32, i32* @y.68
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* @x.67
  %37 = load i32, i32* @y.68
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret void, !dbg !3523

originalBBalteredBB:                              ; preds = %originalBB, %8
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !3521
  %45 = call i32 @rpl_fseeko(%struct._IO_FILE* %44, i64 0, i32 1), !dbg !3522
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !3524 {
  %4 = load i32, i32* @x.69
  %5 = load i32, i32* @y.70
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3563, metadata !DIExpression()), !dbg !3564
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3565, metadata !DIExpression()), !dbg !3566
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3567, metadata !DIExpression()), !dbg !3568
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3569
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !3571
  %19 = load i8*, i8** %18, align 8, !dbg !3571
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3572
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !3573
  %22 = load i8*, i8** %21, align 8, !dbg !3573
  %23 = icmp eq i8* %19, %22, !dbg !3574
  %24 = load i32, i32* @x.69
  %25 = load i32, i32* @y.70
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %142, !dbg !3575

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.69
  %34 = load i32, i32* @y.70
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3576
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !3577
  %43 = load i8*, i8** %42, align 8, !dbg !3577
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3578
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !3579
  %46 = load i8*, i8** %45, align 8, !dbg !3579
  %47 = icmp eq i8* %43, %46, !dbg !3580
  %48 = load i32, i32* @x.69
  %49 = load i32, i32* @y.70
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %142, !dbg !3581

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.69
  %58 = load i32, i32* @y.70
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3582
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !3583
  %67 = load i8*, i8** %66, align 8, !dbg !3583
  %68 = icmp eq i8* %67, null, !dbg !3584
  %69 = load i32, i32* @x.69
  %70 = load i32, i32* @y.70
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %142, !dbg !3585

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !3586, metadata !DIExpression()), !dbg !3588
  %78 = load i32, i32* @x.69
  %79 = load i32, i32* @y.70
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3589
  %87 = call i32 @fileno(%struct._IO_FILE* %86) #10, !dbg !3590
  %88 = load i64, i64* %14, align 8, !dbg !3591
  %89 = load i32, i32* %15, align 4, !dbg !3592
  %90 = call i64 @lseek(i32 %87, i64 %88, i32 %89) #10, !dbg !3593
  store i64 %90, i64* %16, align 8, !dbg !3588
  %91 = load i64, i64* %16, align 8, !dbg !3594
  %92 = icmp eq i64 %91, -1, !dbg !3596
  %93 = load i32, i32* @x.69
  %94 = load i32, i32* @y.70
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %92, label %101, label %118, !dbg !3597

101:                                              ; preds = %originalBBpart212
  %102 = load i32, i32* @x.69
  %103 = load i32, i32* @y.70
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  store i32 -1, i32* %12, align 4, !dbg !3598
  %110 = load i32, i32* @x.69
  %111 = load i32, i32* @y.70
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %163, !dbg !3598

118:                                              ; preds = %originalBBpart212
  %119 = load i32, i32* @x.69
  %120 = load i32, i32* @y.70
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3600
  %128 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %127, i32 0, i32 0, !dbg !3601
  %129 = load i32, i32* %128, align 8, !dbg !3602
  %130 = and i32 %129, -17, !dbg !3602
  store i32 %130, i32* %128, align 8, !dbg !3602
  %131 = load i64, i64* %16, align 8, !dbg !3603
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3604
  %133 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %132, i32 0, i32 21, !dbg !3605
  store i64 %131, i64* %133, align 8, !dbg !3606
  store i32 0, i32* %12, align 4, !dbg !3607
  %134 = load i32, i32* @x.69
  %135 = load i32, i32* @y.70
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart221, label %originalBB18alteredBB

originalBBpart221:                                ; preds = %originalBB18
  br label %163, !dbg !3607

142:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %143 = load i32, i32* @x.69
  %144 = load i32, i32* @y.70
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %142, %originalBB23alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3608
  %152 = load i64, i64* %14, align 8, !dbg !3609
  %153 = load i32, i32* %15, align 4, !dbg !3610
  %154 = call i32 @fseeko(%struct._IO_FILE* %151, i64 %152, i32 %153), !dbg !3611
  store i32 %154, i32* %12, align 4, !dbg !3612
  %155 = load i32, i32* @x.69
  %156 = load i32, i32* @y.70
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %163, !dbg !3612

163:                                              ; preds = %originalBBpart225, %originalBBpart221, %originalBBpart216
  %164 = load i32, i32* @x.69
  %165 = load i32, i32* @y.70
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %163, %originalBB27alteredBB
  %172 = load i32, i32* %12, align 4, !dbg !3613
  %173 = load i32, i32* @x.69
  %174 = load i32, i32* @y.70
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  ret i32 %172, !dbg !3613

originalBBalteredBB:                              ; preds = %originalBB, %3
  %181 = alloca i32, align 4
  %182 = alloca %struct._IO_FILE*, align 8
  %183 = alloca i64, align 8
  %184 = alloca i32, align 4
  %185 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %182, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %182, metadata !3614, metadata !DIExpression()), !dbg !3564
  store i64 %1, i64* %183, align 8
  call void @llvm.dbg.declare(metadata i64* %183, metadata !3653, metadata !DIExpression()), !dbg !3566
  store i32 %2, i32* %184, align 4
  call void @llvm.dbg.declare(metadata i32* %184, metadata !3654, metadata !DIExpression()), !dbg !3568
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !3569
  %187 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %186, i32 0, i32 2, !dbg !3571
  %188 = load i8*, i8** %187, align 8, !dbg !3571
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !3572
  %190 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %189, i32 0, i32 1, !dbg !3573
  %191 = load i8*, i8** %190, align 8, !dbg !3573
  %192 = icmp eq i8* %188, %191, !dbg !3574
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3576
  %194 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %193, i32 0, i32 5, !dbg !3577
  %195 = load i8*, i8** %194, align 8, !dbg !3577
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3578
  %197 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %196, i32 0, i32 4, !dbg !3579
  %198 = load i8*, i8** %197, align 8, !dbg !3579
  %199 = icmp eq i8* %195, %198, !dbg !3580
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3582
  %201 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %200, i32 0, i32 9, !dbg !3583
  %202 = load i8*, i8** %201, align 8, !dbg !3583
  %203 = icmp eq i8* %202, null, !dbg !3584
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %204 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3589
  %205 = call i32 @fileno(%struct._IO_FILE* %204) #10, !dbg !3590
  %206 = load i64, i64* %14, align 8, !dbg !3591
  %207 = load i32, i32* %15, align 4, !dbg !3592
  %208 = call i64 @lseek(i32 %205, i64 %206, i32 %207) #10, !dbg !3593
  store i64 %208, i64* %16, align 8, !dbg !3588
  %209 = load i64, i64* %16, align 8, !dbg !3594
  %210 = icmp eq i64 %209, -1, !dbg !3596
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  store i32 -1, i32* %12, align 4, !dbg !3598
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3600
  %212 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %211, i32 0, i32 0, !dbg !3601
  %213 = load i32, i32* %212, align 8, !dbg !3602
  %_ = shl i32 %213, -17
  %_19 = sub i32 %213, -17
  %gen = mul i32 %_19, -17
  %214 = and i32 %213, -17, !dbg !3602
  store i32 %214, i32* %212, align 8, !dbg !3602
  %215 = load i64, i64* %16, align 8, !dbg !3603
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3604
  %217 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %216, i32 0, i32 21, !dbg !3605
  store i64 %215, i64* %217, align 8, !dbg !3606
  store i32 0, i32* %12, align 4, !dbg !3607
  br label %originalBB18

originalBB23alteredBB:                            ; preds = %originalBB23, %142
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3608
  %219 = load i64, i64* %14, align 8, !dbg !3609
  %220 = load i32, i32* %15, align 4, !dbg !3610
  %221 = call i32 @fseeko(%struct._IO_FILE* %218, i64 %219, i32 %220), !dbg !3611
  store i32 %221, i32* %12, align 4, !dbg !3612
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %163
  %222 = load i32, i32* %12, align 4, !dbg !3613
  br label %originalBB27
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !3655 {
  %2 = load i32, i32* @x.71
  %3 = load i32, i32* @y.72
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3659, metadata !DIExpression()), !dbg !3660
  %12 = load i32, i32* %11, align 4, !dbg !3661
  %13 = load i32, i32* @x.71
  %14 = load i32, i32* @y.72
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %25 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3662

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* %11, align 4, !dbg !3663
  %23 = sub nsw i32 %22, 65, !dbg !3665
  %24 = add nsw i32 %23, 97, !dbg !3666
  store i32 %24, i32* %10, align 4, !dbg !3667
  br label %43, !dbg !3667

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.71
  %27 = load i32, i32* @y.72
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = load i32, i32* %11, align 4, !dbg !3668
  store i32 %34, i32* %10, align 4, !dbg !3669
  %35 = load i32, i32* @x.71
  %36 = load i32, i32* @y.72
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !3669

43:                                               ; preds = %originalBBpart24, %21
  %44 = load i32, i32* @x.71
  %45 = load i32, i32* @y.72
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* %10, align 4, !dbg !3670
  %53 = load i32, i32* @x.71
  %54 = load i32, i32* @y.72
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i32 %52, !dbg !3670

originalBBalteredBB:                              ; preds = %originalBB, %1
  %61 = alloca i32, align 4
  %62 = alloca i32, align 4
  store i32 %0, i32* %62, align 4
  call void @llvm.dbg.declare(metadata i32* %62, metadata !3671, metadata !DIExpression()), !dbg !3660
  %63 = load i32, i32* %62, align 4, !dbg !3661
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  %64 = load i32, i32* %11, align 4, !dbg !3668
  store i32 %64, i32* %10, align 4, !dbg !3669
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %65 = load i32, i32* %10, align 4, !dbg !3670
  br label %originalBB6
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.73
  %4 = load i32, i32* @y.74
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.73
  %14 = load i32, i32* @y.74
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.73
  %23 = load i32, i32* @y.74
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.73
  %34 = load i32, i32* @y.74
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart213, label %originalBB1alteredBB

originalBBpart213:                                ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.73
  %43 = load i32, i32* @y.74
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %41, %originalBB15alteredBB
  %50 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %50, i8* %0)
  %52 = icmp eq i32 %51, 0
  %53 = load i32, i32* @x.73
  %54 = load i32, i32* @y.74
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %52, label %61, label %96

61:                                               ; preds = %originalBBpart217
  %62 = load i32, i32* @x.73
  %63 = load i32, i32* @y.74
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %61, %originalBB19alteredBB
  %70 = icmp eq i32 %1, -1
  %71 = load i32, i32* @x.73
  %72 = load i32, i32* @y.74
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %70, label %79, label %96

79:                                               ; preds = %originalBBpart221
  %80 = load i32, i32* @x.73
  %81 = load i32, i32* @y.74
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %79, %originalBB23alteredBB
  %88 = load i32, i32* @x.73
  %89 = load i32, i32* @y.74
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  ret i32 5

96:                                               ; preds = %originalBBpart221, %originalBBpart217
  %97 = load i32, i32* @x.73
  %98 = load i32, i32* @y.74
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %96, %originalBB27alteredBB
  %105 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %106 = call i32 @strcmp(i8* %105, i8* %0)
  %107 = icmp eq i32 %106, 0
  %108 = load i32, i32* @x.73
  %109 = load i32, i32* @y.74
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %107, label %116, label %151

116:                                              ; preds = %originalBBpart229
  %117 = load i32, i32* @x.73
  %118 = load i32, i32* @y.74
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %116, %originalBB31alteredBB
  %125 = icmp eq i32 %1, -1
  %126 = load i32, i32* @x.73
  %127 = load i32, i32* @y.74
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br i1 %125, label %134, label %151

134:                                              ; preds = %originalBBpart233
  %135 = load i32, i32* @x.73
  %136 = load i32, i32* @y.74
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %134, %originalBB35alteredBB
  %143 = load i32, i32* @x.73
  %144 = load i32, i32* @y.74
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  ret i32 3

151:                                              ; preds = %originalBBpart233, %originalBBpart229
  %152 = load i32, i32* @x.73
  %153 = load i32, i32* @y.74
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %151, %originalBB39alteredBB
  %160 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %161 = call i32 @strcmp(i8* %160, i8* %0)
  %162 = icmp eq i32 %161, 0
  %163 = load i32, i32* @x.73
  %164 = load i32, i32* @y.74
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br i1 %162, label %171, label %206

171:                                              ; preds = %originalBBpart241
  %172 = load i32, i32* @x.73
  %173 = load i32, i32* @y.74
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %171, %originalBB43alteredBB
  %180 = icmp eq i32 %1, -1
  %181 = load i32, i32* @x.73
  %182 = load i32, i32* @y.74
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br i1 %180, label %189, label %206

189:                                              ; preds = %originalBBpart245
  %190 = load i32, i32* @x.73
  %191 = load i32, i32* @y.74
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %189, %originalBB47alteredBB
  %198 = load i32, i32* @x.73
  %199 = load i32, i32* @y.74
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  ret i32 3

206:                                              ; preds = %originalBBpart245, %originalBBpart241
  %207 = load i32, i32* @x.73
  %208 = load i32, i32* @y.74
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %206, %originalBB51alteredBB
  %215 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %216 = call i32 @strcmp(i8* %215, i8* %0)
  %217 = icmp eq i32 %216, 0
  %218 = load i32, i32* @x.73
  %219 = load i32, i32* @y.74
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br i1 %217, label %226, label %261

226:                                              ; preds = %originalBBpart253
  %227 = load i32, i32* @x.73
  %228 = load i32, i32* @y.74
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %226, %originalBB55alteredBB
  %235 = icmp eq i32 %1, 0
  %236 = load i32, i32* @x.73
  %237 = load i32, i32* @y.74
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br i1 %235, label %244, label %261

244:                                              ; preds = %originalBBpart257
  %245 = load i32, i32* @x.73
  %246 = load i32, i32* @y.74
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %244, %originalBB59alteredBB
  %253 = load i32, i32* @x.73
  %254 = load i32, i32* @y.74
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  ret i32 5

261:                                              ; preds = %originalBBpart257, %originalBBpart253
  %262 = load i32, i32* @x.73
  %263 = load i32, i32* @y.74
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %261, %originalBB63alteredBB
  call void @srand(i32 %1)
  %270 = call i32 @rand()
  %271 = srem i32 %270, 50000
  %272 = add i32 %271, 2
  %273 = load i32, i32* @x.73
  %274 = load i32, i32* @y.74
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart285, label %originalBB63alteredBB

originalBBpart285:                                ; preds = %originalBB63
  ret i32 %272

originalBBalteredBB:                              ; preds = %originalBB, %2
  %281 = load i32, i32* @inVal0
  %282 = icmp sgt i32 %281, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %283 = call i32 @rand()
  %_ = shl i32 %283, 50000
  %_2 = shl i32 %283, 50000
  %_3 = sub i32 %283, 50000
  %gen = mul i32 %_3, 50000
  %_4 = sub i32 %283, 50000
  %gen5 = mul i32 %_4, 50000
  %_6 = sub i32 0, %283
  %gen7 = add i32 %_6, 50000
  %_8 = shl i32 %283, 50000
  %284 = srem i32 %283, 50000
  %_9 = sub i32 0, %284
  %gen10 = add i32 %_9, 2
  %_11 = shl i32 %284, 2
  %285 = add i32 %284, 2
  br label %originalBB1

originalBB15alteredBB:                            ; preds = %originalBB15, %41
  %286 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %287 = call i32 @strcmp(i8* %286, i8* %0)
  %288 = icmp eq i32 %287, 0
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %61
  %289 = icmp eq i32 %1, -1
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %79
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %96
  %290 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %291 = call i32 @strcmp(i8* %290, i8* %0)
  %292 = icmp eq i32 %291, 0
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %116
  %293 = icmp eq i32 %1, -1
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %134
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %151
  %294 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %295 = call i32 @strcmp(i8* %294, i8* %0)
  %296 = icmp eq i32 %295, 0
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %171
  %297 = icmp eq i32 %1, -1
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %189
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %206
  %298 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %299 = call i32 @strcmp(i8* %298, i8* %0)
  %300 = icmp eq i32 %299, 0
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %226
  %301 = icmp eq i32 %1, 0
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %244
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %261
  call void @srand(i32 %1)
  %302 = call i32 @rand()
  %_64 = shl i32 %302, 50000
  %_65 = sub i32 0, %302
  %gen66 = add i32 %_65, 50000
  %_67 = shl i32 %302, 50000
  %_68 = sub i32 0, %302
  %gen69 = add i32 %_68, 50000
  %_70 = shl i32 %302, 50000
  %303 = srem i32 %302, 50000
  %_71 = sub i32 0, %303
  %gen72 = add i32 %_71, 2
  %_73 = shl i32 %303, 2
  %_74 = sub i32 0, %303
  %gen75 = add i32 %_74, 2
  %_76 = sub i32 0, %303
  %gen77 = add i32 %_76, 2
  %_78 = sub i32 0, %303
  %gen79 = add i32 %_78, 2
  %_80 = sub i32 0, %303
  %gen81 = add i32 %_80, 2
  %_82 = sub i32 0, %303
  %gen83 = add i32 %_82, 2
  %304 = add i32 %303, 2
  br label %originalBB63
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { nounwind readnone }
attributes #15 = { noreturn }

!llvm.dbg.cu = !{!10, !47, !52, !57, !65, !72, !79, !151, !144, !154, !157, !159, !162, !168, !170, !172, !174, !176, !178, !180, !182}
!llvm.ident = !{!184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184}
!llvm.module.flags = !{!185, !186, !187, !188, !189}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "unknown", scope: !2, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !11)
!3 = !DIFile(filename: "src/uname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !6, !7}
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!10 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !14, nameTableKind: None)
!11 = !{}
!12 = !{!8, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!14 = !{!0, !15, !31, !36}
!15 = !DIGlobalVariableExpression(var: !16, expr: !DIExpression())
!16 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !10, file: !3, line: 107, type: !17, isLocal: true, isDefinition: true)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 768, elements: !29)
!18 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!19 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !21)
!20 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!21 = !{!22, !25, !26, !28}
!22 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !19, file: !20, line: 52, baseType: !23, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !19, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !19, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !19, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!29 = !{!30}
!30 = !DISubrange(count: 3)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !10, file: !3, line: 89, type: !33, isLocal: true, isDefinition: true)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 3584, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 14)
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "printed", scope: !38, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!38 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!39 = !DISubroutineType(types: !40)
!40 = !{null, !23}
!41 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!42 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 64, elements: !43)
!43 = !{!44}
!44 = !DISubrange(count: 8)
!45 = !DIGlobalVariableExpression(var: !46, expr: !DIExpression())
!46 = distinct !DIGlobalVariable(name: "uname_mode", scope: !47, file: !48, line: 2, type: !6, isLocal: false, isDefinition: true)
!47 = distinct !DICompileUnit(language: DW_LANG_C99, file: !48, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !49, nameTableKind: None)
!48 = !DIFile(filename: "src/uname-uname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!49 = !{!45}
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(name: "Version", scope: !52, file: !53, line: 2, type: !23, isLocal: false, isDefinition: true)
!52 = distinct !DICompileUnit(language: DW_LANG_C99, file: !53, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !54, nameTableKind: None)
!53 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!54 = !{!50}
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !57, file: !62, line: 56, type: !41, isLocal: true, isDefinition: true)
!57 = distinct !DICompileUnit(language: DW_LANG_C99, file: !58, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !59, nameTableKind: None)
!58 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!59 = !{!60, !55}
!60 = !DIGlobalVariableExpression(var: !61, expr: !DIExpression())
!61 = distinct !DIGlobalVariable(name: "file_name", scope: !57, file: !62, line: 46, type: !23, isLocal: true, isDefinition: true)
!62 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!63 = !DIGlobalVariableExpression(var: !64, expr: !DIExpression())
!64 = distinct !DIGlobalVariable(name: "exit_failure", scope: !65, file: !68, line: 24, type: !69, isLocal: false, isDefinition: true)
!65 = distinct !DICompileUnit(language: DW_LANG_C99, file: !66, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !67, nameTableKind: None)
!66 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!67 = !{!63}
!68 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!69 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !6)
!70 = !DIGlobalVariableExpression(var: !71, expr: !DIExpression())
!71 = distinct !DIGlobalVariable(name: "program_name", scope: !72, file: !76, line: 33, type: !23, isLocal: false, isDefinition: true)
!72 = distinct !DICompileUnit(language: DW_LANG_C99, file: !73, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !74, globals: !75, nameTableKind: None)
!73 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!74 = !{!13, !8}
!75 = !{!70}
!76 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!77 = !DIGlobalVariableExpression(var: !78, expr: !DIExpression())
!78 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !79, file: !105, line: 116, type: !118, isLocal: true, isDefinition: true)
!79 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !102, nameTableKind: None)
!80 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!81 = !{!82}
!82 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !83, line: 32, baseType: !84, size: 32, elements: !85)
!83 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!84 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!85 = !{!86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96}
!86 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!87 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!88 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!89 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!90 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!91 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!92 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!93 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!94 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!95 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!96 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!97 = !{!6, !98, !99}
!98 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!99 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !100, line: 46, baseType: !101)
!100 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!101 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!102 = !{!103, !110, !116, !77, !126, !131, !138, !140}
!103 = !DIGlobalVariableExpression(var: !104, expr: !DIExpression())
!104 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !79, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!105 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!106 = !DICompositeType(tag: DW_TAG_array_type, baseType: !107, size: 704, elements: !108)
!107 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !23)
!108 = !{!109}
!109 = !DISubrange(count: 11)
!110 = !DIGlobalVariableExpression(var: !111, expr: !DIExpression())
!111 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !79, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!112 = !DICompositeType(tag: DW_TAG_array_type, baseType: !113, size: 320, elements: !114)
!113 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !82)
!114 = !{!115}
!115 = !DISubrange(count: 10)
!116 = !DIGlobalVariableExpression(var: !117, expr: !DIExpression())
!117 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !79, file: !105, line: 1052, type: !118, isLocal: false, isDefinition: true)
!118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !119)
!119 = !{!120, !121, !122, !124, !125}
!120 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !118, file: !105, line: 68, baseType: !82, size: 32)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !118, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!122 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !118, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!123 = !DICompositeType(tag: DW_TAG_array_type, baseType: !84, size: 256, elements: !43)
!124 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !118, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !118, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!126 = !DIGlobalVariableExpression(var: !127, expr: !DIExpression())
!127 = distinct !DIGlobalVariable(name: "slot0", scope: !79, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!128 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 2048, elements: !129)
!129 = !{!130}
!130 = !DISubrange(count: 256)
!131 = !DIGlobalVariableExpression(var: !132, expr: !DIExpression())
!132 = distinct !DIGlobalVariable(name: "slotvec", scope: !79, file: !105, line: 845, type: !133, isLocal: true, isDefinition: true)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !135)
!135 = !{!136, !137}
!136 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !134, file: !105, line: 836, baseType: !99, size: 64)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !134, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!138 = !DIGlobalVariableExpression(var: !139, expr: !DIExpression())
!139 = distinct !DIGlobalVariable(name: "nslots", scope: !79, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!140 = !DIGlobalVariableExpression(var: !141, expr: !DIExpression())
!141 = distinct !DIGlobalVariable(name: "slotvec0", scope: !79, file: !105, line: 844, type: !134, isLocal: true, isDefinition: true)
!142 = !DIGlobalVariableExpression(var: !143, expr: !DIExpression())
!143 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !144, file: !147, line: 26, type: !148, isLocal: false, isDefinition: true)
!144 = distinct !DICompileUnit(language: DW_LANG_C99, file: !145, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !146, nameTableKind: None)
!145 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!146 = !{!142}
!147 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!148 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 376, elements: !149)
!149 = !{!150}
!150 = !DISubrange(count: 47)
!151 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!152 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!153 = !{!13}
!154 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!155 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!156 = !{!99, !8, !13}
!157 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!158 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!159 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !161, nameTableKind: None)
!160 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!161 = !{!99}
!162 = distinct !DICompileUnit(language: DW_LANG_C99, file: !163, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !164, nameTableKind: None)
!163 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!164 = !{!165}
!165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !166, size: 64)
!166 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !167)
!167 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!168 = distinct !DICompileUnit(language: DW_LANG_C99, file: !169, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!169 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!170 = distinct !DICompileUnit(language: DW_LANG_C99, file: !171, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!171 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!172 = distinct !DICompileUnit(language: DW_LANG_C99, file: !173, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!173 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!174 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!175 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!176 = distinct !DICompileUnit(language: DW_LANG_C99, file: !177, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!177 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!178 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!179 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!180 = distinct !DICompileUnit(language: DW_LANG_C99, file: !181, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!181 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!182 = distinct !DICompileUnit(language: DW_LANG_C99, file: !183, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!183 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!184 = !{!"clang version 9.0.1-12 "}
!185 = !{i32 2, !"Dwarf Version", i32 4}
!186 = !{i32 2, !"Debug Info Version", i32 3}
!187 = !{i32 1, !"wchar_size", i32 4}
!188 = !{i32 1, !"ThinLTO", i32 0}
!189 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!190 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 115, type: !191, scopeLine: 116, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !11)
!191 = !DISubroutineType(types: !192)
!192 = !{null, !6}
!193 = !DILocalVariable(name: "status", arg: 1, scope: !190, file: !3, line: 115, type: !6)
!194 = !DILocation(line: 115, column: 12, scope: !190)
!195 = !DILocation(line: 117, column: 7, scope: !196)
!196 = distinct !DILexicalBlock(scope: !190, file: !3, line: 117, column: 7)
!197 = !DILocation(line: 117, column: 14, scope: !196)
!198 = !DILocation(line: 117, column: 7, scope: !190)
!199 = !DILocation(line: 118, column: 5, scope: !196)
!200 = !DILocation(line: 118, column: 5, scope: !201)
!201 = distinct !DILexicalBlock(scope: !196, file: !3, line: 118, column: 5)
!202 = !DILocation(line: 121, column: 15, scope: !203)
!203 = distinct !DILexicalBlock(scope: !196, file: !3, line: 120, column: 5)
!204 = !DILocation(line: 121, column: 45, scope: !203)
!205 = !DILocation(line: 121, column: 7, scope: !203)
!206 = !DILocation(line: 123, column: 11, scope: !207)
!207 = distinct !DILexicalBlock(scope: !203, file: !3, line: 123, column: 11)
!208 = !DILocation(line: 123, column: 22, scope: !207)
!209 = !DILocation(line: 123, column: 11, scope: !203)
!210 = !DILocation(line: 125, column: 11, scope: !211)
!211 = distinct !DILexicalBlock(scope: !207, file: !3, line: 124, column: 9)
!212 = !DILocation(line: 134, column: 11, scope: !211)
!213 = !DILocation(line: 141, column: 9, scope: !211)
!214 = !DILocation(line: 144, column: 11, scope: !215)
!215 = distinct !DILexicalBlock(scope: !207, file: !3, line: 143, column: 9)
!216 = !DILocation(line: 150, column: 7, scope: !203)
!217 = !DILocation(line: 151, column: 7, scope: !203)
!218 = !DILocation(line: 152, column: 28, scope: !203)
!219 = !DILocation(line: 152, column: 7, scope: !203)
!220 = !DILocation(line: 154, column: 9, scope: !190)
!221 = !DILocation(line: 154, column: 3, scope: !190)
!222 = !DILocalVariable(name: "status", arg: 1, scope: !223, file: !3, line: 115, type: !6)
!223 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 115, type: !191, scopeLine: 116, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !224, retainedNodes: !11)
!224 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !225, nameTableKind: None)
!225 = !{!226, !229, !239, !242}
!226 = !DIGlobalVariableExpression(var: !227, expr: !DIExpression())
!227 = distinct !DIGlobalVariable(name: "unknown", scope: !228, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!228 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !224, retainedNodes: !11)
!229 = !DIGlobalVariableExpression(var: !230, expr: !DIExpression())
!230 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !224, file: !3, line: 107, type: !231, isLocal: true, isDefinition: true)
!231 = !DICompositeType(tag: DW_TAG_array_type, baseType: !232, size: 768, elements: !29)
!232 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !233)
!233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !234)
!234 = !{!235, !236, !237, !238}
!235 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !233, file: !20, line: 52, baseType: !23, size: 64)
!236 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !233, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!237 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !233, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!238 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !233, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!239 = !DIGlobalVariableExpression(var: !240, expr: !DIExpression())
!240 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !224, file: !3, line: 89, type: !241, isLocal: true, isDefinition: true)
!241 = !DICompositeType(tag: DW_TAG_array_type, baseType: !232, size: 3584, elements: !34)
!242 = !DIGlobalVariableExpression(var: !243, expr: !DIExpression())
!243 = distinct !DIGlobalVariable(name: "printed", scope: !244, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!244 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !224, retainedNodes: !11)
!245 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !246, file: !246, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!246 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!247 = !DILocalVariable(name: "program", arg: 1, scope: !245, file: !246, line: 634, type: !23)
!248 = !DILocation(line: 634, column: 34, scope: !245)
!249 = !DILocalVariable(name: "infomap", scope: !245, file: !246, line: 636, type: !250)
!250 = !DICompositeType(tag: DW_TAG_array_type, baseType: !251, size: 896, elements: !256)
!251 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !252)
!252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !245, file: !246, line: 636, size: 128, elements: !253)
!253 = !{!254, !255}
!254 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !252, file: !246, line: 636, baseType: !23, size: 64)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !252, file: !246, line: 636, baseType: !23, size: 64, offset: 64)
!256 = !{!257}
!257 = !DISubrange(count: 7)
!258 = !DILocation(line: 636, column: 67, scope: !245)
!259 = !DILocalVariable(name: "node", scope: !245, file: !246, line: 646, type: !23)
!260 = !DILocation(line: 646, column: 15, scope: !245)
!261 = !DILocation(line: 646, column: 22, scope: !245)
!262 = !DILocalVariable(name: "map_prog", scope: !245, file: !246, line: 647, type: !263)
!263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !251, size: 64)
!264 = !DILocation(line: 647, column: 25, scope: !245)
!265 = !DILocation(line: 647, column: 36, scope: !245)
!266 = !DILocation(line: 649, column: 3, scope: !245)
!267 = !DILocation(line: 649, column: 10, scope: !245)
!268 = !DILocation(line: 649, column: 20, scope: !245)
!269 = !DILocation(line: 649, column: 28, scope: !245)
!270 = !DILocation(line: 649, column: 33, scope: !245)
!271 = !DILocation(line: 649, column: 31, scope: !245)
!272 = !DILocation(line: 0, scope: !245)
!273 = !DILocation(line: 650, column: 13, scope: !245)
!274 = distinct !{!274, !266, !273}
!275 = !DILocation(line: 652, column: 7, scope: !276)
!276 = distinct !DILexicalBlock(scope: !245, file: !246, line: 652, column: 7)
!277 = !DILocation(line: 652, column: 17, scope: !276)
!278 = !DILocation(line: 652, column: 7, scope: !245)
!279 = !DILocation(line: 653, column: 12, scope: !276)
!280 = !DILocation(line: 653, column: 22, scope: !276)
!281 = !DILocation(line: 653, column: 10, scope: !276)
!282 = !DILocation(line: 653, column: 5, scope: !276)
!283 = !DILocation(line: 655, column: 11, scope: !245)
!284 = !DILocation(line: 655, column: 3, scope: !245)
!285 = !DILocalVariable(name: "lc_messages", scope: !245, file: !246, line: 659, type: !23)
!286 = !DILocation(line: 659, column: 15, scope: !245)
!287 = !DILocation(line: 659, column: 29, scope: !245)
!288 = !DILocation(line: 660, column: 7, scope: !289)
!289 = distinct !DILexicalBlock(scope: !245, file: !246, line: 660, column: 7)
!290 = !DILocation(line: 660, column: 19, scope: !289)
!291 = !DILocation(line: 660, column: 22, scope: !289)
!292 = !DILocation(line: 660, column: 7, scope: !245)
!293 = !DILocation(line: 666, column: 7, scope: !294)
!294 = distinct !DILexicalBlock(scope: !289, file: !246, line: 661, column: 5)
!295 = !DILocation(line: 668, column: 5, scope: !294)
!296 = !DILocation(line: 669, column: 11, scope: !245)
!297 = !DILocation(line: 670, column: 24, scope: !245)
!298 = !DILocation(line: 669, column: 3, scope: !245)
!299 = !DILocation(line: 671, column: 11, scope: !245)
!300 = !DILocation(line: 672, column: 11, scope: !245)
!301 = !DILocation(line: 672, column: 17, scope: !245)
!302 = !DILocation(line: 672, column: 25, scope: !245)
!303 = !DILocation(line: 672, column: 22, scope: !245)
!304 = !DILocation(line: 671, column: 3, scope: !245)
!305 = !DILocation(line: 673, column: 1, scope: !245)
!306 = !DILocalVariable(name: "program", arg: 1, scope: !307, file: !246, line: 634, type: !23)
!307 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !246, file: !246, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !308, retainedNodes: !11)
!308 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !309, nameTableKind: None)
!309 = !{!310, !313, !323, !326}
!310 = !DIGlobalVariableExpression(var: !311, expr: !DIExpression())
!311 = distinct !DIGlobalVariable(name: "unknown", scope: !312, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!312 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !308, retainedNodes: !11)
!313 = !DIGlobalVariableExpression(var: !314, expr: !DIExpression())
!314 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !308, file: !3, line: 107, type: !315, isLocal: true, isDefinition: true)
!315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !316, size: 768, elements: !29)
!316 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !317)
!317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !318)
!318 = !{!319, !320, !321, !322}
!319 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !317, file: !20, line: 52, baseType: !23, size: 64)
!320 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !317, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !317, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !317, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!323 = !DIGlobalVariableExpression(var: !324, expr: !DIExpression())
!324 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !308, file: !3, line: 89, type: !325, isLocal: true, isDefinition: true)
!325 = !DICompositeType(tag: DW_TAG_array_type, baseType: !316, size: 3584, elements: !34)
!326 = !DIGlobalVariableExpression(var: !327, expr: !DIExpression())
!327 = distinct !DIGlobalVariable(name: "printed", scope: !328, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!328 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !308, retainedNodes: !11)
!329 = !DILocalVariable(name: "infomap", scope: !307, file: !246, line: 636, type: !330)
!330 = !DICompositeType(tag: DW_TAG_array_type, baseType: !331, size: 896, elements: !256)
!331 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !332)
!332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !307, file: !246, line: 636, size: 128, elements: !333)
!333 = !{!334, !335}
!334 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !332, file: !246, line: 636, baseType: !23, size: 64)
!335 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !332, file: !246, line: 636, baseType: !23, size: 64, offset: 64)
!336 = !DILocalVariable(name: "node", scope: !307, file: !246, line: 646, type: !23)
!337 = !DILocalVariable(name: "map_prog", scope: !307, file: !246, line: 647, type: !338)
!338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !331, size: 64)
!339 = !DILocalVariable(name: "lc_messages", scope: !340, file: !246, line: 659, type: !23)
!340 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !246, file: !246, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !341, retainedNodes: !11)
!341 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !342, nameTableKind: None)
!342 = !{!343, !346, !356, !359}
!343 = !DIGlobalVariableExpression(var: !344, expr: !DIExpression())
!344 = distinct !DIGlobalVariable(name: "unknown", scope: !345, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!345 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !341, retainedNodes: !11)
!346 = !DIGlobalVariableExpression(var: !347, expr: !DIExpression())
!347 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !341, file: !3, line: 107, type: !348, isLocal: true, isDefinition: true)
!348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !349, size: 768, elements: !29)
!349 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !350)
!350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !351)
!351 = !{!352, !353, !354, !355}
!352 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !350, file: !20, line: 52, baseType: !23, size: 64)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !350, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!354 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !350, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!355 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !350, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!356 = !DIGlobalVariableExpression(var: !357, expr: !DIExpression())
!357 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !341, file: !3, line: 89, type: !358, isLocal: true, isDefinition: true)
!358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !349, size: 3584, elements: !34)
!359 = !DIGlobalVariableExpression(var: !360, expr: !DIExpression())
!360 = distinct !DIGlobalVariable(name: "printed", scope: !361, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!361 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !341, retainedNodes: !11)
!362 = !DILocalVariable(name: "argc", arg: 1, scope: !2, file: !3, line: 260, type: !6)
!363 = !DILocation(line: 260, column: 11, scope: !2)
!364 = !DILocalVariable(name: "argv", arg: 2, scope: !2, file: !3, line: 260, type: !7)
!365 = !DILocation(line: 260, column: 24, scope: !2)
!366 = !DILocalVariable(name: "toprint", scope: !2, file: !3, line: 265, type: !84)
!367 = !DILocation(line: 265, column: 16, scope: !2)
!368 = !DILocation(line: 268, column: 21, scope: !2)
!369 = !DILocation(line: 268, column: 3, scope: !2)
!370 = !DILocation(line: 269, column: 3, scope: !2)
!371 = !DILocation(line: 270, column: 3, scope: !2)
!372 = !DILocation(line: 271, column: 3, scope: !2)
!373 = !DILocation(line: 273, column: 3, scope: !2)
!374 = !DILocation(line: 275, column: 30, scope: !2)
!375 = !DILocation(line: 275, column: 36, scope: !2)
!376 = !DILocation(line: 275, column: 13, scope: !2)
!377 = !DILocation(line: 275, column: 11, scope: !2)
!378 = !DILocation(line: 277, column: 7, scope: !379)
!379 = distinct !DILexicalBlock(scope: !2, file: !3, line: 277, column: 7)
!380 = !DILocation(line: 277, column: 15, scope: !379)
!381 = !DILocation(line: 278, column: 13, scope: !379)
!382 = !DILocation(line: 278, column: 5, scope: !379)
!383 = !DILocation(line: 280, column: 7, scope: !384)
!384 = distinct !DILexicalBlock(scope: !2, file: !3, line: 280, column: 7)
!385 = !DILocation(line: 281, column: 8, scope: !384)
!386 = !DILocation(line: 280, column: 7, scope: !2)
!387 = !DILocalVariable(name: "name", scope: !388, file: !3, line: 284, type: !389)
!388 = distinct !DILexicalBlock(scope: !384, file: !3, line: 283, column: 5)
!389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utsname", file: !390, line: 48, size: 3120, elements: !391)
!390 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/utsname.h", directory: "")
!391 = !{!392, !396, !397, !398, !399, !400}
!392 = !DIDerivedType(tag: DW_TAG_member, name: "sysname", scope: !389, file: !390, line: 51, baseType: !393, size: 520)
!393 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 520, elements: !394)
!394 = !{!395}
!395 = !DISubrange(count: 65)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "nodename", scope: !389, file: !390, line: 54, baseType: !393, size: 520, offset: 520)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !389, file: !390, line: 57, baseType: !393, size: 520, offset: 1040)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !389, file: !390, line: 59, baseType: !393, size: 520, offset: 1560)
!399 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !389, file: !390, line: 62, baseType: !393, size: 520, offset: 2080)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "domainname", scope: !389, file: !390, line: 67, baseType: !393, size: 520, offset: 2600)
!401 = !DILocation(line: 284, column: 22, scope: !388)
!402 = !DILocation(line: 286, column: 11, scope: !403)
!403 = distinct !DILexicalBlock(scope: !388, file: !3, line: 286, column: 11)
!404 = !DILocation(line: 286, column: 25, scope: !403)
!405 = !DILocation(line: 287, column: 9, scope: !403)
!406 = !DILocation(line: 289, column: 11, scope: !407)
!407 = distinct !DILexicalBlock(scope: !388, file: !3, line: 289, column: 11)
!408 = !DILocation(line: 289, column: 19, scope: !407)
!409 = !DILocation(line: 289, column: 11, scope: !388)
!410 = !DILocation(line: 290, column: 29, scope: !407)
!411 = !DILocation(line: 290, column: 24, scope: !407)
!412 = !DILocation(line: 290, column: 9, scope: !407)
!413 = !DILocation(line: 291, column: 11, scope: !414)
!414 = distinct !DILexicalBlock(scope: !388, file: !3, line: 291, column: 11)
!415 = !DILocation(line: 291, column: 19, scope: !414)
!416 = !DILocation(line: 291, column: 11, scope: !388)
!417 = !DILocation(line: 292, column: 29, scope: !414)
!418 = !DILocation(line: 292, column: 24, scope: !414)
!419 = !DILocation(line: 292, column: 9, scope: !414)
!420 = !DILocation(line: 293, column: 11, scope: !421)
!421 = distinct !DILexicalBlock(scope: !388, file: !3, line: 293, column: 11)
!422 = !DILocation(line: 293, column: 19, scope: !421)
!423 = !DILocation(line: 293, column: 11, scope: !388)
!424 = !DILocation(line: 294, column: 29, scope: !421)
!425 = !DILocation(line: 294, column: 24, scope: !421)
!426 = !DILocation(line: 294, column: 9, scope: !421)
!427 = !DILocation(line: 295, column: 11, scope: !428)
!428 = distinct !DILexicalBlock(scope: !388, file: !3, line: 295, column: 11)
!429 = !DILocation(line: 295, column: 19, scope: !428)
!430 = !DILocation(line: 295, column: 11, scope: !388)
!431 = !DILocation(line: 296, column: 29, scope: !428)
!432 = !DILocation(line: 296, column: 24, scope: !428)
!433 = !DILocation(line: 296, column: 9, scope: !428)
!434 = !DILocation(line: 297, column: 11, scope: !435)
!435 = distinct !DILexicalBlock(scope: !388, file: !3, line: 297, column: 11)
!436 = !DILocation(line: 297, column: 19, scope: !435)
!437 = !DILocation(line: 297, column: 11, scope: !388)
!438 = !DILocation(line: 298, column: 29, scope: !435)
!439 = !DILocation(line: 298, column: 24, scope: !435)
!440 = !DILocation(line: 298, column: 9, scope: !435)
!441 = !DILocation(line: 299, column: 5, scope: !388)
!442 = !DILocation(line: 301, column: 7, scope: !443)
!443 = distinct !DILexicalBlock(scope: !2, file: !3, line: 301, column: 7)
!444 = !DILocation(line: 301, column: 15, scope: !443)
!445 = !DILocation(line: 301, column: 7, scope: !2)
!446 = !DILocalVariable(name: "element", scope: !447, file: !3, line: 303, type: !23)
!447 = distinct !DILexicalBlock(scope: !443, file: !3, line: 302, column: 5)
!448 = !DILocation(line: 303, column: 19, scope: !447)
!449 = !DILocation(line: 341, column: 14, scope: !450)
!450 = distinct !DILexicalBlock(scope: !447, file: !3, line: 341, column: 11)
!451 = !DILocation(line: 341, column: 22, scope: !450)
!452 = !DILocation(line: 341, column: 37, scope: !450)
!453 = !DILocation(line: 341, column: 45, scope: !450)
!454 = !DILocation(line: 341, column: 11, scope: !447)
!455 = !DILocation(line: 342, column: 24, scope: !450)
!456 = !DILocation(line: 342, column: 9, scope: !450)
!457 = !DILocation(line: 343, column: 5, scope: !447)
!458 = !DILocation(line: 345, column: 7, scope: !459)
!459 = distinct !DILexicalBlock(scope: !2, file: !3, line: 345, column: 7)
!460 = !DILocation(line: 345, column: 15, scope: !459)
!461 = !DILocation(line: 345, column: 7, scope: !2)
!462 = !DILocalVariable(name: "element", scope: !463, file: !3, line: 347, type: !23)
!463 = distinct !DILexicalBlock(scope: !459, file: !3, line: 346, column: 5)
!464 = !DILocation(line: 347, column: 19, scope: !463)
!465 = !DILocation(line: 366, column: 14, scope: !466)
!466 = distinct !DILexicalBlock(scope: !463, file: !3, line: 366, column: 11)
!467 = !DILocation(line: 366, column: 22, scope: !466)
!468 = !DILocation(line: 366, column: 37, scope: !466)
!469 = !DILocation(line: 366, column: 45, scope: !466)
!470 = !DILocation(line: 366, column: 11, scope: !463)
!471 = !DILocation(line: 367, column: 24, scope: !466)
!472 = !DILocation(line: 367, column: 9, scope: !466)
!473 = !DILocation(line: 368, column: 5, scope: !463)
!474 = !DILocation(line: 370, column: 7, scope: !475)
!475 = distinct !DILexicalBlock(scope: !2, file: !3, line: 370, column: 7)
!476 = !DILocation(line: 370, column: 15, scope: !475)
!477 = !DILocation(line: 370, column: 7, scope: !2)
!478 = !DILocation(line: 371, column: 5, scope: !475)
!479 = !DILocation(line: 373, column: 3, scope: !2)
!480 = !DILocation(line: 375, column: 3, scope: !2)
!481 = !DILocalVariable(name: "argc", arg: 1, scope: !482, file: !3, line: 260, type: !6)
!482 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !483, retainedNodes: !11)
!483 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !484, nameTableKind: None)
!484 = !{!485, !487, !497, !500}
!485 = !DIGlobalVariableExpression(var: !486, expr: !DIExpression())
!486 = distinct !DIGlobalVariable(name: "unknown", scope: !482, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!487 = !DIGlobalVariableExpression(var: !488, expr: !DIExpression())
!488 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !483, file: !3, line: 107, type: !489, isLocal: true, isDefinition: true)
!489 = !DICompositeType(tag: DW_TAG_array_type, baseType: !490, size: 768, elements: !29)
!490 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !491)
!491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !492)
!492 = !{!493, !494, !495, !496}
!493 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !491, file: !20, line: 52, baseType: !23, size: 64)
!494 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !491, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!495 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !491, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!496 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !491, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!497 = !DIGlobalVariableExpression(var: !498, expr: !DIExpression())
!498 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !483, file: !3, line: 89, type: !499, isLocal: true, isDefinition: true)
!499 = !DICompositeType(tag: DW_TAG_array_type, baseType: !490, size: 3584, elements: !34)
!500 = !DIGlobalVariableExpression(var: !501, expr: !DIExpression())
!501 = distinct !DIGlobalVariable(name: "printed", scope: !502, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!502 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !483, retainedNodes: !11)
!503 = !DILocalVariable(name: "argv", arg: 2, scope: !482, file: !3, line: 260, type: !7)
!504 = !DILocalVariable(name: "toprint", scope: !482, file: !3, line: 265, type: !84)
!505 = distinct !DISubprogram(name: "decode_switches", scope: !3, file: !3, line: 175, type: !4, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!506 = !DILocalVariable(name: "argc", arg: 1, scope: !505, file: !3, line: 175, type: !6)
!507 = !DILocation(line: 175, column: 22, scope: !505)
!508 = !DILocalVariable(name: "argv", arg: 2, scope: !505, file: !3, line: 175, type: !7)
!509 = !DILocation(line: 175, column: 35, scope: !505)
!510 = !DILocalVariable(name: "c", scope: !505, file: !3, line: 177, type: !6)
!511 = !DILocation(line: 177, column: 7, scope: !505)
!512 = !DILocalVariable(name: "toprint", scope: !505, file: !3, line: 178, type: !84)
!513 = !DILocation(line: 178, column: 16, scope: !505)
!514 = !DILocation(line: 180, column: 7, scope: !515)
!515 = distinct !DILexicalBlock(scope: !505, file: !3, line: 180, column: 7)
!516 = !DILocation(line: 180, column: 18, scope: !515)
!517 = !DILocation(line: 180, column: 7, scope: !505)
!518 = !DILocation(line: 182, column: 7, scope: !519)
!519 = distinct !DILexicalBlock(scope: !515, file: !3, line: 181, column: 5)
!520 = !DILocation(line: 182, column: 32, scope: !519)
!521 = !DILocation(line: 182, column: 38, scope: !519)
!522 = !DILocation(line: 182, column: 19, scope: !519)
!523 = !DILocation(line: 182, column: 17, scope: !519)
!524 = !DILocation(line: 183, column: 58, scope: !519)
!525 = !DILocation(line: 185, column: 19, scope: !526)
!526 = distinct !DILexicalBlock(scope: !519, file: !3, line: 184, column: 9)
!527 = !DILocation(line: 185, column: 11, scope: !526)
!528 = !DILocation(line: 187, column: 13, scope: !529)
!529 = distinct !DILexicalBlock(scope: !526, file: !3, line: 186, column: 13)
!530 = !DILocation(line: 189, column: 13, scope: !529)
!531 = !DILocation(line: 192, column: 15, scope: !529)
!532 = !DILocation(line: 195, column: 15, scope: !519)
!533 = !DILocation(line: 196, column: 5, scope: !519)
!534 = !DILocation(line: 199, column: 7, scope: !535)
!535 = distinct !DILexicalBlock(scope: !515, file: !3, line: 198, column: 5)
!536 = !DILocation(line: 199, column: 32, scope: !535)
!537 = !DILocation(line: 199, column: 38, scope: !535)
!538 = !DILocation(line: 199, column: 19, scope: !535)
!539 = !DILocation(line: 199, column: 17, scope: !535)
!540 = !DILocation(line: 200, column: 59, scope: !535)
!541 = !DILocation(line: 202, column: 19, scope: !542)
!542 = distinct !DILexicalBlock(scope: !535, file: !3, line: 201, column: 9)
!543 = !DILocation(line: 202, column: 11, scope: !542)
!544 = !DILocation(line: 205, column: 23, scope: !545)
!545 = distinct !DILexicalBlock(scope: !542, file: !3, line: 203, column: 13)
!546 = !DILocation(line: 206, column: 15, scope: !545)
!547 = !DILocation(line: 209, column: 23, scope: !545)
!548 = !DILocation(line: 210, column: 15, scope: !545)
!549 = !DILocation(line: 213, column: 23, scope: !545)
!550 = !DILocation(line: 214, column: 15, scope: !545)
!551 = !DILocation(line: 217, column: 23, scope: !545)
!552 = !DILocation(line: 218, column: 15, scope: !545)
!553 = !DILocation(line: 221, column: 23, scope: !545)
!554 = !DILocation(line: 222, column: 15, scope: !545)
!555 = !DILocation(line: 225, column: 23, scope: !545)
!556 = !DILocation(line: 226, column: 15, scope: !545)
!557 = !DILocation(line: 229, column: 23, scope: !545)
!558 = !DILocation(line: 230, column: 15, scope: !545)
!559 = !DILocation(line: 233, column: 23, scope: !545)
!560 = !DILocation(line: 234, column: 15, scope: !545)
!561 = !DILocation(line: 237, column: 23, scope: !545)
!562 = !DILocation(line: 238, column: 15, scope: !545)
!563 = !DILocation(line: 240, column: 13, scope: !545)
!564 = !DILocation(line: 242, column: 13, scope: !545)
!565 = !DILocation(line: 245, column: 15, scope: !545)
!566 = distinct !{!566, !534, !567}
!567 = !DILocation(line: 247, column: 9, scope: !535)
!568 = !DILocation(line: 250, column: 7, scope: !569)
!569 = distinct !DILexicalBlock(scope: !505, file: !3, line: 250, column: 7)
!570 = !DILocation(line: 250, column: 15, scope: !569)
!571 = !DILocation(line: 250, column: 12, scope: !569)
!572 = !DILocation(line: 250, column: 7, scope: !505)
!573 = !DILocation(line: 252, column: 20, scope: !574)
!574 = distinct !DILexicalBlock(scope: !569, file: !3, line: 251, column: 5)
!575 = !DILocation(line: 252, column: 50, scope: !574)
!576 = !DILocation(line: 252, column: 55, scope: !574)
!577 = !DILocation(line: 252, column: 43, scope: !574)
!578 = !DILocation(line: 252, column: 7, scope: !574)
!579 = !DILocation(line: 253, column: 7, scope: !574)
!580 = !DILocation(line: 256, column: 10, scope: !505)
!581 = !DILocation(line: 256, column: 3, scope: !505)
!582 = !DILocalVariable(name: "argc", arg: 1, scope: !583, file: !3, line: 175, type: !6)
!583 = distinct !DISubprogram(name: "decode_switches", scope: !3, file: !3, line: 175, type: !4, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !584, retainedNodes: !11)
!584 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !585, nameTableKind: None)
!585 = !{!586, !589, !599, !602}
!586 = !DIGlobalVariableExpression(var: !587, expr: !DIExpression())
!587 = distinct !DIGlobalVariable(name: "unknown", scope: !588, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!588 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !584, retainedNodes: !11)
!589 = !DIGlobalVariableExpression(var: !590, expr: !DIExpression())
!590 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !584, file: !3, line: 107, type: !591, isLocal: true, isDefinition: true)
!591 = !DICompositeType(tag: DW_TAG_array_type, baseType: !592, size: 768, elements: !29)
!592 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !593)
!593 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !594)
!594 = !{!595, !596, !597, !598}
!595 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !593, file: !20, line: 52, baseType: !23, size: 64)
!596 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !593, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!597 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !593, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!598 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !593, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!599 = !DIGlobalVariableExpression(var: !600, expr: !DIExpression())
!600 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !584, file: !3, line: 89, type: !601, isLocal: true, isDefinition: true)
!601 = !DICompositeType(tag: DW_TAG_array_type, baseType: !592, size: 3584, elements: !34)
!602 = !DIGlobalVariableExpression(var: !603, expr: !DIExpression())
!603 = distinct !DIGlobalVariable(name: "printed", scope: !604, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!604 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !584, retainedNodes: !11)
!605 = !DILocalVariable(name: "argv", arg: 2, scope: !583, file: !3, line: 175, type: !7)
!606 = !DILocalVariable(name: "c", scope: !583, file: !3, line: 177, type: !6)
!607 = !DILocalVariable(name: "toprint", scope: !583, file: !3, line: 178, type: !84)
!608 = !DILocalVariable(name: "element", arg: 1, scope: !38, file: !3, line: 161, type: !23)
!609 = !DILocation(line: 161, column: 28, scope: !38)
!610 = !DILocation(line: 164, column: 7, scope: !611)
!611 = distinct !DILexicalBlock(scope: !38, file: !3, line: 164, column: 7)
!612 = !DILocation(line: 164, column: 7, scope: !38)
!613 = !DILocation(line: 165, column: 5, scope: !611)
!614 = !DILocation(line: 166, column: 11, scope: !38)
!615 = !DILocation(line: 167, column: 3, scope: !38)
!616 = !DILocation(line: 168, column: 1, scope: !38)
!617 = !DILocalVariable(name: "element", arg: 1, scope: !618, file: !3, line: 161, type: !23)
!618 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !619, retainedNodes: !11)
!619 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !620, nameTableKind: None)
!620 = !{!621, !624, !634, !637}
!621 = !DIGlobalVariableExpression(var: !622, expr: !DIExpression())
!622 = distinct !DIGlobalVariable(name: "unknown", scope: !623, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!623 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !619, retainedNodes: !11)
!624 = !DIGlobalVariableExpression(var: !625, expr: !DIExpression())
!625 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !619, file: !3, line: 107, type: !626, isLocal: true, isDefinition: true)
!626 = !DICompositeType(tag: DW_TAG_array_type, baseType: !627, size: 768, elements: !29)
!627 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !628)
!628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !629)
!629 = !{!630, !631, !632, !633}
!630 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !628, file: !20, line: 52, baseType: !23, size: 64)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !628, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !628, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !628, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!634 = !DIGlobalVariableExpression(var: !635, expr: !DIExpression())
!635 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !619, file: !3, line: 89, type: !636, isLocal: true, isDefinition: true)
!636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !627, size: 3584, elements: !34)
!637 = !DIGlobalVariableExpression(var: !638, expr: !DIExpression())
!638 = distinct !DIGlobalVariable(name: "printed", scope: !618, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!639 = distinct !DISubprogram(name: "close_stdout", scope: !62, file: !62, line: 117, type: !640, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !57, retainedNodes: !11)
!640 = !DISubroutineType(types: !641)
!641 = !{null}
!642 = !DILocation(line: 119, column: 21, scope: !643)
!643 = distinct !DILexicalBlock(scope: !639, file: !62, line: 119, column: 7)
!644 = !DILocation(line: 119, column: 7, scope: !643)
!645 = !DILocation(line: 119, column: 29, scope: !643)
!646 = !DILocation(line: 120, column: 7, scope: !643)
!647 = !DILocation(line: 120, column: 12, scope: !643)
!648 = !DILocation(line: 120, column: 25, scope: !643)
!649 = !DILocation(line: 120, column: 28, scope: !643)
!650 = !DILocation(line: 120, column: 34, scope: !643)
!651 = !DILocation(line: 119, column: 7, scope: !639)
!652 = !DILocalVariable(name: "write_error", scope: !653, file: !62, line: 122, type: !23)
!653 = distinct !DILexicalBlock(scope: !643, file: !62, line: 121, column: 5)
!654 = !DILocation(line: 122, column: 19, scope: !653)
!655 = !DILocation(line: 122, column: 33, scope: !653)
!656 = !DILocation(line: 123, column: 11, scope: !657)
!657 = distinct !DILexicalBlock(scope: !653, file: !62, line: 123, column: 11)
!658 = !DILocation(line: 123, column: 11, scope: !653)
!659 = !DILocation(line: 124, column: 19, scope: !657)
!660 = !DILocation(line: 124, column: 52, scope: !657)
!661 = !DILocation(line: 124, column: 36, scope: !657)
!662 = !DILocation(line: 125, column: 16, scope: !657)
!663 = !DILocation(line: 124, column: 9, scope: !657)
!664 = !DILocation(line: 127, column: 19, scope: !657)
!665 = !DILocation(line: 127, column: 32, scope: !657)
!666 = !DILocation(line: 127, column: 9, scope: !657)
!667 = !DILocation(line: 129, column: 14, scope: !653)
!668 = !DILocation(line: 129, column: 7, scope: !653)
!669 = !DILocation(line: 134, column: 42, scope: !670)
!670 = distinct !DILexicalBlock(scope: !639, file: !62, line: 134, column: 7)
!671 = !DILocation(line: 134, column: 28, scope: !670)
!672 = !DILocation(line: 134, column: 50, scope: !670)
!673 = !DILocation(line: 134, column: 7, scope: !639)
!674 = !DILocation(line: 135, column: 12, scope: !670)
!675 = !DILocation(line: 135, column: 5, scope: !670)
!676 = !DILocation(line: 136, column: 1, scope: !639)
!677 = distinct !DISubprogram(name: "set_program_name", scope: !76, file: !76, line: 39, type: !39, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !72, retainedNodes: !11)
!678 = !DILocalVariable(name: "argv0", arg: 1, scope: !677, file: !76, line: 39, type: !23)
!679 = !DILocation(line: 39, column: 31, scope: !677)
!680 = !DILocalVariable(name: "slash", scope: !677, file: !76, line: 46, type: !23)
!681 = !DILocation(line: 46, column: 15, scope: !677)
!682 = !DILocalVariable(name: "base", scope: !677, file: !76, line: 47, type: !23)
!683 = !DILocation(line: 47, column: 15, scope: !677)
!684 = !DILocation(line: 51, column: 7, scope: !685)
!685 = distinct !DILexicalBlock(scope: !677, file: !76, line: 51, column: 7)
!686 = !DILocation(line: 51, column: 13, scope: !685)
!687 = !DILocation(line: 51, column: 7, scope: !677)
!688 = !DILocation(line: 55, column: 14, scope: !689)
!689 = distinct !DILexicalBlock(scope: !685, file: !76, line: 52, column: 5)
!690 = !DILocation(line: 54, column: 7, scope: !689)
!691 = !DILocation(line: 56, column: 7, scope: !689)
!692 = !DILocation(line: 59, column: 20, scope: !677)
!693 = !DILocation(line: 59, column: 11, scope: !677)
!694 = !DILocation(line: 59, column: 9, scope: !677)
!695 = !DILocation(line: 60, column: 11, scope: !677)
!696 = !DILocation(line: 60, column: 17, scope: !677)
!697 = !DILocation(line: 60, column: 27, scope: !677)
!698 = !DILocation(line: 60, column: 33, scope: !677)
!699 = !DILocation(line: 60, column: 39, scope: !677)
!700 = !DILocation(line: 60, column: 8, scope: !677)
!701 = !DILocation(line: 61, column: 7, scope: !702)
!702 = distinct !DILexicalBlock(scope: !677, file: !76, line: 61, column: 7)
!703 = !DILocation(line: 61, column: 14, scope: !702)
!704 = !DILocation(line: 61, column: 12, scope: !702)
!705 = !DILocation(line: 61, column: 20, scope: !702)
!706 = !DILocation(line: 61, column: 25, scope: !702)
!707 = !DILocation(line: 61, column: 37, scope: !702)
!708 = !DILocation(line: 61, column: 42, scope: !702)
!709 = !DILocation(line: 61, column: 28, scope: !702)
!710 = !DILocation(line: 61, column: 61, scope: !702)
!711 = !DILocation(line: 61, column: 7, scope: !677)
!712 = !DILocation(line: 63, column: 15, scope: !713)
!713 = distinct !DILexicalBlock(scope: !702, file: !76, line: 62, column: 5)
!714 = !DILocation(line: 63, column: 13, scope: !713)
!715 = !DILocation(line: 64, column: 20, scope: !716)
!716 = distinct !DILexicalBlock(scope: !713, file: !76, line: 64, column: 11)
!717 = !DILocation(line: 64, column: 11, scope: !716)
!718 = !DILocation(line: 64, column: 36, scope: !716)
!719 = !DILocation(line: 64, column: 11, scope: !713)
!720 = !DILocation(line: 66, column: 19, scope: !721)
!721 = distinct !DILexicalBlock(scope: !716, file: !76, line: 65, column: 9)
!722 = !DILocation(line: 66, column: 24, scope: !721)
!723 = !DILocation(line: 66, column: 17, scope: !721)
!724 = !DILocation(line: 70, column: 52, scope: !721)
!725 = !DILocation(line: 70, column: 41, scope: !721)
!726 = !DILocation(line: 72, column: 9, scope: !721)
!727 = !DILocation(line: 73, column: 5, scope: !713)
!728 = !DILocation(line: 84, column: 18, scope: !677)
!729 = !DILocation(line: 84, column: 16, scope: !677)
!730 = !DILocation(line: 90, column: 38, scope: !677)
!731 = !DILocation(line: 90, column: 27, scope: !677)
!732 = !DILocation(line: 92, column: 1, scope: !677)
!733 = !DILocalVariable(name: "argv0", arg: 1, scope: !734, file: !76, line: 39, type: !23)
!734 = distinct !DISubprogram(name: "set_program_name", scope: !76, file: !76, line: 39, type: !39, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !735, retainedNodes: !11)
!735 = distinct !DICompileUnit(language: DW_LANG_C99, file: !73, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !74, globals: !736, nameTableKind: None)
!736 = !{!737}
!737 = !DIGlobalVariableExpression(var: !738, expr: !DIExpression())
!738 = distinct !DIGlobalVariable(name: "program_name", scope: !735, file: !76, line: 33, type: !23, isLocal: false, isDefinition: true)
!739 = !DILocalVariable(name: "slash", scope: !734, file: !76, line: 46, type: !23)
!740 = !DILocalVariable(name: "base", scope: !734, file: !76, line: 47, type: !23)
!741 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !742, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!742 = !DISubroutineType(types: !743)
!743 = !{!6, !744, !9, !6}
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !118, size: 64)
!745 = !DILocalVariable(name: "o", arg: 1, scope: !741, file: !105, line: 152, type: !744)
!746 = !DILocation(line: 152, column: 43, scope: !741)
!747 = !DILocalVariable(name: "c", arg: 2, scope: !741, file: !105, line: 152, type: !9)
!748 = !DILocation(line: 152, column: 51, scope: !741)
!749 = !DILocalVariable(name: "i", arg: 3, scope: !741, file: !105, line: 152, type: !6)
!750 = !DILocation(line: 152, column: 58, scope: !741)
!751 = !DILocalVariable(name: "uc", scope: !741, file: !105, line: 154, type: !167)
!752 = !DILocation(line: 154, column: 17, scope: !741)
!753 = !DILocation(line: 154, column: 22, scope: !741)
!754 = !DILocalVariable(name: "p", scope: !741, file: !105, line: 155, type: !755)
!755 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !84, size: 64)
!756 = !DILocation(line: 155, column: 17, scope: !741)
!757 = !DILocation(line: 156, column: 6, scope: !741)
!758 = !DILocation(line: 156, column: 10, scope: !741)
!759 = !DILocation(line: 156, column: 41, scope: !741)
!760 = !DILocation(line: 156, column: 5, scope: !741)
!761 = !DILocation(line: 156, column: 59, scope: !741)
!762 = !DILocation(line: 156, column: 62, scope: !741)
!763 = !DILocation(line: 156, column: 57, scope: !741)
!764 = !DILocalVariable(name: "shift", scope: !741, file: !105, line: 157, type: !6)
!765 = !DILocation(line: 157, column: 7, scope: !741)
!766 = !DILocation(line: 157, column: 15, scope: !741)
!767 = !DILocation(line: 157, column: 18, scope: !741)
!768 = !DILocalVariable(name: "r", scope: !741, file: !105, line: 158, type: !6)
!769 = !DILocation(line: 158, column: 7, scope: !741)
!770 = !DILocation(line: 158, column: 13, scope: !741)
!771 = !DILocation(line: 158, column: 12, scope: !741)
!772 = !DILocation(line: 158, column: 18, scope: !741)
!773 = !DILocation(line: 158, column: 15, scope: !741)
!774 = !DILocation(line: 158, column: 25, scope: !741)
!775 = !DILocation(line: 159, column: 11, scope: !741)
!776 = !DILocation(line: 159, column: 13, scope: !741)
!777 = !DILocation(line: 159, column: 20, scope: !741)
!778 = !DILocation(line: 159, column: 18, scope: !741)
!779 = !DILocation(line: 159, column: 26, scope: !741)
!780 = !DILocation(line: 159, column: 23, scope: !741)
!781 = !DILocation(line: 159, column: 4, scope: !741)
!782 = !DILocation(line: 159, column: 6, scope: !741)
!783 = !DILocation(line: 160, column: 10, scope: !741)
!784 = !DILocation(line: 160, column: 3, scope: !741)
!785 = !DILocalVariable(name: "o", arg: 1, scope: !786, file: !105, line: 152, type: !789)
!786 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !787, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !797, retainedNodes: !11)
!787 = !DISubroutineType(types: !788)
!788 = !{!6, !789, !9, !6}
!789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !790, size: 64)
!790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !791)
!791 = !{!792, !793, !794, !795, !796}
!792 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !790, file: !105, line: 68, baseType: !82, size: 32)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !790, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !790, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !790, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !790, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!797 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !798, nameTableKind: None)
!798 = !{!799, !801, !803, !805, !807, !809, !816, !818}
!799 = !DIGlobalVariableExpression(var: !800, expr: !DIExpression())
!800 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !797, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!801 = !DIGlobalVariableExpression(var: !802, expr: !DIExpression())
!802 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !797, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!803 = !DIGlobalVariableExpression(var: !804, expr: !DIExpression())
!804 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !797, file: !105, line: 1052, type: !790, isLocal: false, isDefinition: true)
!805 = !DIGlobalVariableExpression(var: !806, expr: !DIExpression())
!806 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !797, file: !105, line: 116, type: !790, isLocal: true, isDefinition: true)
!807 = !DIGlobalVariableExpression(var: !808, expr: !DIExpression())
!808 = distinct !DIGlobalVariable(name: "slot0", scope: !797, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!809 = !DIGlobalVariableExpression(var: !810, expr: !DIExpression())
!810 = distinct !DIGlobalVariable(name: "slotvec", scope: !797, file: !105, line: 845, type: !811, isLocal: true, isDefinition: true)
!811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !812, size: 64)
!812 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !813)
!813 = !{!814, !815}
!814 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !812, file: !105, line: 836, baseType: !99, size: 64)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !812, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!816 = !DIGlobalVariableExpression(var: !817, expr: !DIExpression())
!817 = distinct !DIGlobalVariable(name: "nslots", scope: !797, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!818 = !DIGlobalVariableExpression(var: !819, expr: !DIExpression())
!819 = distinct !DIGlobalVariable(name: "slotvec0", scope: !797, file: !105, line: 844, type: !812, isLocal: true, isDefinition: true)
!820 = !DILocalVariable(name: "c", arg: 2, scope: !786, file: !105, line: 152, type: !9)
!821 = !DILocalVariable(name: "i", arg: 3, scope: !786, file: !105, line: 152, type: !6)
!822 = !DILocalVariable(name: "uc", scope: !786, file: !105, line: 154, type: !167)
!823 = !DILocalVariable(name: "p", scope: !786, file: !105, line: 155, type: !755)
!824 = !DILocalVariable(name: "shift", scope: !825, file: !105, line: 157, type: !6)
!825 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !826, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !836, retainedNodes: !11)
!826 = !DISubroutineType(types: !827)
!827 = !{!6, !828, !9, !6}
!828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !829, size: 64)
!829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !830)
!830 = !{!831, !832, !833, !834, !835}
!831 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !829, file: !105, line: 68, baseType: !82, size: 32)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !829, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !829, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !829, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !829, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!836 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !837, nameTableKind: None)
!837 = !{!838, !840, !842, !844, !846, !848, !855, !857}
!838 = !DIGlobalVariableExpression(var: !839, expr: !DIExpression())
!839 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !836, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!840 = !DIGlobalVariableExpression(var: !841, expr: !DIExpression())
!841 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !836, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!842 = !DIGlobalVariableExpression(var: !843, expr: !DIExpression())
!843 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !836, file: !105, line: 1052, type: !829, isLocal: false, isDefinition: true)
!844 = !DIGlobalVariableExpression(var: !845, expr: !DIExpression())
!845 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !836, file: !105, line: 116, type: !829, isLocal: true, isDefinition: true)
!846 = !DIGlobalVariableExpression(var: !847, expr: !DIExpression())
!847 = distinct !DIGlobalVariable(name: "slot0", scope: !836, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!848 = !DIGlobalVariableExpression(var: !849, expr: !DIExpression())
!849 = distinct !DIGlobalVariable(name: "slotvec", scope: !836, file: !105, line: 845, type: !850, isLocal: true, isDefinition: true)
!850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !851, size: 64)
!851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !852)
!852 = !{!853, !854}
!853 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !851, file: !105, line: 836, baseType: !99, size: 64)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !851, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!855 = !DIGlobalVariableExpression(var: !856, expr: !DIExpression())
!856 = distinct !DIGlobalVariable(name: "nslots", scope: !836, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!857 = !DIGlobalVariableExpression(var: !858, expr: !DIExpression())
!858 = distinct !DIGlobalVariable(name: "slotvec0", scope: !836, file: !105, line: 844, type: !851, isLocal: true, isDefinition: true)
!859 = !DILocalVariable(name: "r", scope: !825, file: !105, line: 158, type: !6)
!860 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !105, file: !105, line: 982, type: !861, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!861 = !DISubroutineType(types: !862)
!862 = !{!8, !23, !99, !9}
!863 = !DILocalVariable(name: "arg", arg: 1, scope: !860, file: !105, line: 982, type: !23)
!864 = !DILocation(line: 982, column: 32, scope: !860)
!865 = !DILocalVariable(name: "argsize", arg: 2, scope: !860, file: !105, line: 982, type: !99)
!866 = !DILocation(line: 982, column: 44, scope: !860)
!867 = !DILocalVariable(name: "ch", arg: 3, scope: !860, file: !105, line: 982, type: !9)
!868 = !DILocation(line: 982, column: 58, scope: !860)
!869 = !DILocalVariable(name: "options", scope: !860, file: !105, line: 984, type: !118)
!870 = !DILocation(line: 984, column: 26, scope: !860)
!871 = !DILocation(line: 985, column: 13, scope: !860)
!872 = !DILocation(line: 986, column: 31, scope: !860)
!873 = !DILocation(line: 986, column: 3, scope: !860)
!874 = !DILocation(line: 987, column: 33, scope: !860)
!875 = !DILocation(line: 987, column: 38, scope: !860)
!876 = !DILocation(line: 987, column: 10, scope: !860)
!877 = !DILocation(line: 987, column: 3, scope: !860)
!878 = !DILocalVariable(name: "arg", arg: 1, scope: !879, file: !105, line: 982, type: !23)
!879 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !105, file: !105, line: 982, type: !861, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !880, retainedNodes: !11)
!880 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !881, nameTableKind: None)
!881 = !{!882, !884, !886, !895, !897, !899, !906, !908}
!882 = !DIGlobalVariableExpression(var: !883, expr: !DIExpression())
!883 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !880, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!884 = !DIGlobalVariableExpression(var: !885, expr: !DIExpression())
!885 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !880, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!886 = !DIGlobalVariableExpression(var: !887, expr: !DIExpression())
!887 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !880, file: !105, line: 1052, type: !888, isLocal: false, isDefinition: true)
!888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !889)
!889 = !{!890, !891, !892, !893, !894}
!890 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !888, file: !105, line: 68, baseType: !82, size: 32)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !888, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !888, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !888, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !888, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!895 = !DIGlobalVariableExpression(var: !896, expr: !DIExpression())
!896 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !880, file: !105, line: 116, type: !888, isLocal: true, isDefinition: true)
!897 = !DIGlobalVariableExpression(var: !898, expr: !DIExpression())
!898 = distinct !DIGlobalVariable(name: "slot0", scope: !880, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!899 = !DIGlobalVariableExpression(var: !900, expr: !DIExpression())
!900 = distinct !DIGlobalVariable(name: "slotvec", scope: !880, file: !105, line: 845, type: !901, isLocal: true, isDefinition: true)
!901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !902, size: 64)
!902 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !903)
!903 = !{!904, !905}
!904 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !902, file: !105, line: 836, baseType: !99, size: 64)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !902, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!906 = !DIGlobalVariableExpression(var: !907, expr: !DIExpression())
!907 = distinct !DIGlobalVariable(name: "nslots", scope: !880, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!908 = !DIGlobalVariableExpression(var: !909, expr: !DIExpression())
!909 = distinct !DIGlobalVariable(name: "slotvec0", scope: !880, file: !105, line: 844, type: !902, isLocal: true, isDefinition: true)
!910 = !DILocalVariable(name: "argsize", arg: 2, scope: !879, file: !105, line: 982, type: !99)
!911 = !DILocalVariable(name: "ch", arg: 3, scope: !879, file: !105, line: 982, type: !9)
!912 = !DILocalVariable(name: "options", scope: !879, file: !105, line: 984, type: !888)
!913 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !914, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!914 = !DISubroutineType(types: !915)
!915 = !{!8, !6, !23, !99, !916}
!916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !917, size: 64)
!917 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !118)
!918 = !DILocalVariable(name: "n", arg: 1, scope: !913, file: !105, line: 877, type: !6)
!919 = !DILocation(line: 877, column: 25, scope: !913)
!920 = !DILocalVariable(name: "arg", arg: 2, scope: !913, file: !105, line: 877, type: !23)
!921 = !DILocation(line: 877, column: 40, scope: !913)
!922 = !DILocalVariable(name: "argsize", arg: 3, scope: !913, file: !105, line: 877, type: !99)
!923 = !DILocation(line: 877, column: 52, scope: !913)
!924 = !DILocalVariable(name: "options", arg: 4, scope: !913, file: !105, line: 878, type: !916)
!925 = !DILocation(line: 878, column: 51, scope: !913)
!926 = !DILocalVariable(name: "e", scope: !913, file: !105, line: 880, type: !6)
!927 = !DILocation(line: 880, column: 7, scope: !913)
!928 = !DILocation(line: 880, column: 11, scope: !913)
!929 = !DILocalVariable(name: "sv", scope: !913, file: !105, line: 882, type: !133)
!930 = !DILocation(line: 882, column: 19, scope: !913)
!931 = !DILocation(line: 882, column: 24, scope: !913)
!932 = !DILocation(line: 884, column: 7, scope: !933)
!933 = distinct !DILexicalBlock(scope: !913, file: !105, line: 884, column: 7)
!934 = !DILocation(line: 884, column: 9, scope: !933)
!935 = !DILocation(line: 884, column: 7, scope: !913)
!936 = !DILocation(line: 885, column: 5, scope: !933)
!937 = !DILocation(line: 887, column: 7, scope: !938)
!938 = distinct !DILexicalBlock(scope: !913, file: !105, line: 887, column: 7)
!939 = !DILocation(line: 887, column: 17, scope: !938)
!940 = !DILocation(line: 887, column: 14, scope: !938)
!941 = !DILocation(line: 887, column: 7, scope: !913)
!942 = !DILocalVariable(name: "preallocated", scope: !943, file: !105, line: 889, type: !41)
!943 = distinct !DILexicalBlock(scope: !938, file: !105, line: 888, column: 5)
!944 = !DILocation(line: 889, column: 12, scope: !943)
!945 = !DILocation(line: 889, column: 28, scope: !943)
!946 = !DILocation(line: 889, column: 31, scope: !943)
!947 = !DILocalVariable(name: "nmax", scope: !943, file: !105, line: 890, type: !6)
!948 = !DILocation(line: 890, column: 11, scope: !943)
!949 = !DILocation(line: 892, column: 11, scope: !950)
!950 = distinct !DILexicalBlock(scope: !943, file: !105, line: 892, column: 11)
!951 = !DILocation(line: 892, column: 18, scope: !950)
!952 = !DILocation(line: 892, column: 16, scope: !950)
!953 = !DILocation(line: 892, column: 11, scope: !943)
!954 = !DILocation(line: 893, column: 9, scope: !950)
!955 = !DILocation(line: 895, column: 32, scope: !943)
!956 = !DILocation(line: 895, column: 54, scope: !943)
!957 = !DILocation(line: 895, column: 59, scope: !943)
!958 = !DILocation(line: 895, column: 61, scope: !943)
!959 = !DILocation(line: 895, column: 58, scope: !943)
!960 = !DILocation(line: 895, column: 66, scope: !943)
!961 = !DILocation(line: 895, column: 22, scope: !943)
!962 = !DILocation(line: 895, column: 20, scope: !943)
!963 = !DILocation(line: 895, column: 15, scope: !943)
!964 = !DILocation(line: 896, column: 11, scope: !965)
!965 = distinct !DILexicalBlock(scope: !943, file: !105, line: 896, column: 11)
!966 = !DILocation(line: 896, column: 11, scope: !943)
!967 = !DILocation(line: 897, column: 10, scope: !965)
!968 = !DILocation(line: 897, column: 15, scope: !965)
!969 = !DILocation(line: 897, column: 9, scope: !965)
!970 = !DILocation(line: 898, column: 15, scope: !943)
!971 = !DILocation(line: 898, column: 20, scope: !943)
!972 = !DILocation(line: 898, column: 18, scope: !943)
!973 = !DILocation(line: 898, column: 7, scope: !943)
!974 = !DILocation(line: 898, column: 32, scope: !943)
!975 = !DILocation(line: 898, column: 34, scope: !943)
!976 = !DILocation(line: 898, column: 40, scope: !943)
!977 = !DILocation(line: 898, column: 38, scope: !943)
!978 = !DILocation(line: 898, column: 31, scope: !943)
!979 = !DILocation(line: 898, column: 48, scope: !943)
!980 = !DILocation(line: 899, column: 16, scope: !943)
!981 = !DILocation(line: 899, column: 18, scope: !943)
!982 = !DILocation(line: 899, column: 14, scope: !943)
!983 = !DILocation(line: 900, column: 5, scope: !943)
!984 = !DILocalVariable(name: "size", scope: !985, file: !105, line: 903, type: !99)
!985 = distinct !DILexicalBlock(scope: !913, file: !105, line: 902, column: 3)
!986 = !DILocation(line: 903, column: 12, scope: !985)
!987 = !DILocation(line: 903, column: 19, scope: !985)
!988 = !DILocation(line: 903, column: 22, scope: !985)
!989 = !DILocation(line: 903, column: 25, scope: !985)
!990 = !DILocalVariable(name: "val", scope: !985, file: !105, line: 904, type: !8)
!991 = !DILocation(line: 904, column: 11, scope: !985)
!992 = !DILocation(line: 904, column: 17, scope: !985)
!993 = !DILocation(line: 904, column: 20, scope: !985)
!994 = !DILocation(line: 904, column: 23, scope: !985)
!995 = !DILocalVariable(name: "flags", scope: !985, file: !105, line: 906, type: !6)
!996 = !DILocation(line: 906, column: 9, scope: !985)
!997 = !DILocation(line: 906, column: 17, scope: !985)
!998 = !DILocation(line: 906, column: 26, scope: !985)
!999 = !DILocation(line: 906, column: 32, scope: !985)
!1000 = !DILocalVariable(name: "qsize", scope: !985, file: !105, line: 907, type: !99)
!1001 = !DILocation(line: 907, column: 12, scope: !985)
!1002 = !DILocation(line: 907, column: 46, scope: !985)
!1003 = !DILocation(line: 907, column: 51, scope: !985)
!1004 = !DILocation(line: 907, column: 57, scope: !985)
!1005 = !DILocation(line: 907, column: 62, scope: !985)
!1006 = !DILocation(line: 908, column: 46, scope: !985)
!1007 = !DILocation(line: 908, column: 55, scope: !985)
!1008 = !DILocation(line: 908, column: 62, scope: !985)
!1009 = !DILocation(line: 909, column: 46, scope: !985)
!1010 = !DILocation(line: 909, column: 55, scope: !985)
!1011 = !DILocation(line: 910, column: 46, scope: !985)
!1012 = !DILocation(line: 910, column: 55, scope: !985)
!1013 = !DILocation(line: 911, column: 46, scope: !985)
!1014 = !DILocation(line: 911, column: 55, scope: !985)
!1015 = !DILocation(line: 907, column: 20, scope: !985)
!1016 = !DILocation(line: 913, column: 9, scope: !1017)
!1017 = distinct !DILexicalBlock(scope: !985, file: !105, line: 913, column: 9)
!1018 = !DILocation(line: 913, column: 17, scope: !1017)
!1019 = !DILocation(line: 913, column: 14, scope: !1017)
!1020 = !DILocation(line: 913, column: 9, scope: !985)
!1021 = !DILocation(line: 915, column: 29, scope: !1022)
!1022 = distinct !DILexicalBlock(scope: !1017, file: !105, line: 914, column: 7)
!1023 = !DILocation(line: 915, column: 35, scope: !1022)
!1024 = !DILocation(line: 915, column: 27, scope: !1022)
!1025 = !DILocation(line: 915, column: 9, scope: !1022)
!1026 = !DILocation(line: 915, column: 12, scope: !1022)
!1027 = !DILocation(line: 915, column: 15, scope: !1022)
!1028 = !DILocation(line: 915, column: 20, scope: !1022)
!1029 = !DILocation(line: 916, column: 13, scope: !1030)
!1030 = distinct !DILexicalBlock(scope: !1022, file: !105, line: 916, column: 13)
!1031 = !DILocation(line: 916, column: 17, scope: !1030)
!1032 = !DILocation(line: 916, column: 13, scope: !1022)
!1033 = !DILocation(line: 917, column: 17, scope: !1030)
!1034 = !DILocation(line: 917, column: 11, scope: !1030)
!1035 = !DILocation(line: 918, column: 39, scope: !1022)
!1036 = !DILocation(line: 918, column: 27, scope: !1022)
!1037 = !DILocation(line: 918, column: 25, scope: !1022)
!1038 = !DILocation(line: 918, column: 9, scope: !1022)
!1039 = !DILocation(line: 918, column: 12, scope: !1022)
!1040 = !DILocation(line: 918, column: 15, scope: !1022)
!1041 = !DILocation(line: 918, column: 19, scope: !1022)
!1042 = !DILocation(line: 919, column: 35, scope: !1022)
!1043 = !DILocation(line: 919, column: 40, scope: !1022)
!1044 = !DILocation(line: 919, column: 46, scope: !1022)
!1045 = !DILocation(line: 919, column: 51, scope: !1022)
!1046 = !DILocation(line: 919, column: 60, scope: !1022)
!1047 = !DILocation(line: 919, column: 69, scope: !1022)
!1048 = !DILocation(line: 920, column: 35, scope: !1022)
!1049 = !DILocation(line: 920, column: 42, scope: !1022)
!1050 = !DILocation(line: 920, column: 51, scope: !1022)
!1051 = !DILocation(line: 921, column: 35, scope: !1022)
!1052 = !DILocation(line: 921, column: 44, scope: !1022)
!1053 = !DILocation(line: 922, column: 35, scope: !1022)
!1054 = !DILocation(line: 922, column: 44, scope: !1022)
!1055 = !DILocation(line: 919, column: 9, scope: !1022)
!1056 = !DILocation(line: 923, column: 7, scope: !1022)
!1057 = !DILocation(line: 925, column: 13, scope: !985)
!1058 = !DILocation(line: 925, column: 5, scope: !985)
!1059 = !DILocation(line: 925, column: 11, scope: !985)
!1060 = !DILocation(line: 926, column: 12, scope: !985)
!1061 = !DILocation(line: 926, column: 5, scope: !985)
!1062 = !DILocalVariable(name: "n", arg: 1, scope: !1063, file: !105, line: 877, type: !6)
!1063 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1064, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1075, retainedNodes: !11)
!1064 = !DISubroutineType(types: !1065)
!1065 = !{!8, !6, !23, !99, !1066}
!1066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1067, size: 64)
!1067 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1068)
!1068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1069)
!1069 = !{!1070, !1071, !1072, !1073, !1074}
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1068, file: !105, line: 68, baseType: !82, size: 32)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1068, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1068, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1068, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1068, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1075 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1076, nameTableKind: None)
!1076 = !{!1077, !1079, !1081, !1083, !1085, !1087, !1094, !1096}
!1077 = !DIGlobalVariableExpression(var: !1078, expr: !DIExpression())
!1078 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1075, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1079 = !DIGlobalVariableExpression(var: !1080, expr: !DIExpression())
!1080 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1075, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1081 = !DIGlobalVariableExpression(var: !1082, expr: !DIExpression())
!1082 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1075, file: !105, line: 1052, type: !1068, isLocal: false, isDefinition: true)
!1083 = !DIGlobalVariableExpression(var: !1084, expr: !DIExpression())
!1084 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1075, file: !105, line: 116, type: !1068, isLocal: true, isDefinition: true)
!1085 = !DIGlobalVariableExpression(var: !1086, expr: !DIExpression())
!1086 = distinct !DIGlobalVariable(name: "slot0", scope: !1075, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1087 = !DIGlobalVariableExpression(var: !1088, expr: !DIExpression())
!1088 = distinct !DIGlobalVariable(name: "slotvec", scope: !1075, file: !105, line: 845, type: !1089, isLocal: true, isDefinition: true)
!1089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1090, size: 64)
!1090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1091)
!1091 = !{!1092, !1093}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1090, file: !105, line: 836, baseType: !99, size: 64)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1090, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1094 = !DIGlobalVariableExpression(var: !1095, expr: !DIExpression())
!1095 = distinct !DIGlobalVariable(name: "nslots", scope: !1075, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1096 = !DIGlobalVariableExpression(var: !1097, expr: !DIExpression())
!1097 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1075, file: !105, line: 844, type: !1090, isLocal: true, isDefinition: true)
!1098 = !DILocalVariable(name: "arg", arg: 2, scope: !1063, file: !105, line: 877, type: !23)
!1099 = !DILocalVariable(name: "argsize", arg: 3, scope: !1063, file: !105, line: 877, type: !99)
!1100 = !DILocalVariable(name: "options", arg: 4, scope: !1063, file: !105, line: 878, type: !1066)
!1101 = !DILocalVariable(name: "e", scope: !1063, file: !105, line: 880, type: !6)
!1102 = !DILocalVariable(name: "sv", scope: !1063, file: !105, line: 882, type: !1089)
!1103 = !DILocalVariable(name: "nmax", scope: !1104, file: !105, line: 890, type: !6)
!1104 = distinct !DILexicalBlock(scope: !1105, file: !105, line: 888, column: 5)
!1105 = distinct !DILexicalBlock(scope: !1106, file: !105, line: 887, column: 7)
!1106 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1107, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1118, retainedNodes: !11)
!1107 = !DISubroutineType(types: !1108)
!1108 = !{!8, !6, !23, !99, !1109}
!1109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1110, size: 64)
!1110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1111)
!1111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1112)
!1112 = !{!1113, !1114, !1115, !1116, !1117}
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1111, file: !105, line: 68, baseType: !82, size: 32)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1111, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1111, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1111, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1111, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1118 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1119, nameTableKind: None)
!1119 = !{!1120, !1122, !1124, !1126, !1128, !1130, !1137, !1139}
!1120 = !DIGlobalVariableExpression(var: !1121, expr: !DIExpression())
!1121 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1118, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1122 = !DIGlobalVariableExpression(var: !1123, expr: !DIExpression())
!1123 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1118, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1124 = !DIGlobalVariableExpression(var: !1125, expr: !DIExpression())
!1125 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1118, file: !105, line: 1052, type: !1111, isLocal: false, isDefinition: true)
!1126 = !DIGlobalVariableExpression(var: !1127, expr: !DIExpression())
!1127 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1118, file: !105, line: 116, type: !1111, isLocal: true, isDefinition: true)
!1128 = !DIGlobalVariableExpression(var: !1129, expr: !DIExpression())
!1129 = distinct !DIGlobalVariable(name: "slot0", scope: !1118, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1130 = !DIGlobalVariableExpression(var: !1131, expr: !DIExpression())
!1131 = distinct !DIGlobalVariable(name: "slotvec", scope: !1118, file: !105, line: 845, type: !1132, isLocal: true, isDefinition: true)
!1132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1133, size: 64)
!1133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1134)
!1134 = !{!1135, !1136}
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1133, file: !105, line: 836, baseType: !99, size: 64)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1133, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1137 = !DIGlobalVariableExpression(var: !1138, expr: !DIExpression())
!1138 = distinct !DIGlobalVariable(name: "nslots", scope: !1118, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1139 = !DIGlobalVariableExpression(var: !1140, expr: !DIExpression())
!1140 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1118, file: !105, line: 844, type: !1133, isLocal: true, isDefinition: true)
!1141 = !DILocalVariable(name: "val", scope: !1142, file: !105, line: 904, type: !8)
!1142 = distinct !DILexicalBlock(scope: !1143, file: !105, line: 902, column: 3)
!1143 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1144, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1155, retainedNodes: !11)
!1144 = !DISubroutineType(types: !1145)
!1145 = !{!8, !6, !23, !99, !1146}
!1146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1147, size: 64)
!1147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1148)
!1148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1149)
!1149 = !{!1150, !1151, !1152, !1153, !1154}
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1148, file: !105, line: 68, baseType: !82, size: 32)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1148, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1148, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1148, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1148, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1156, nameTableKind: None)
!1156 = !{!1157, !1159, !1161, !1163, !1165, !1167, !1174, !1176}
!1157 = !DIGlobalVariableExpression(var: !1158, expr: !DIExpression())
!1158 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1155, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1159 = !DIGlobalVariableExpression(var: !1160, expr: !DIExpression())
!1160 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1155, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1161 = !DIGlobalVariableExpression(var: !1162, expr: !DIExpression())
!1162 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1155, file: !105, line: 1052, type: !1148, isLocal: false, isDefinition: true)
!1163 = !DIGlobalVariableExpression(var: !1164, expr: !DIExpression())
!1164 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1155, file: !105, line: 116, type: !1148, isLocal: true, isDefinition: true)
!1165 = !DIGlobalVariableExpression(var: !1166, expr: !DIExpression())
!1166 = distinct !DIGlobalVariable(name: "slot0", scope: !1155, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1167 = !DIGlobalVariableExpression(var: !1168, expr: !DIExpression())
!1168 = distinct !DIGlobalVariable(name: "slotvec", scope: !1155, file: !105, line: 845, type: !1169, isLocal: true, isDefinition: true)
!1169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1170, size: 64)
!1170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1171)
!1171 = !{!1172, !1173}
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1170, file: !105, line: 836, baseType: !99, size: 64)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1170, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1174 = !DIGlobalVariableExpression(var: !1175, expr: !DIExpression())
!1175 = distinct !DIGlobalVariable(name: "nslots", scope: !1155, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1176 = !DIGlobalVariableExpression(var: !1177, expr: !DIExpression())
!1177 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1155, file: !105, line: 844, type: !1170, isLocal: true, isDefinition: true)
!1178 = !DILocalVariable(name: "flags", scope: !1142, file: !105, line: 906, type: !6)
!1179 = !DILocalVariable(name: "qsize", scope: !1142, file: !105, line: 907, type: !99)
!1180 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !105, file: !105, line: 256, type: !1181, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!1181 = !DISubroutineType(types: !1182)
!1182 = !{!99, !8, !99, !23, !99, !82, !6, !1183, !23, !23}
!1183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1184, size: 64)
!1184 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !84)
!1185 = !DILocalVariable(name: "buffer", arg: 1, scope: !1180, file: !105, line: 256, type: !8)
!1186 = !DILocation(line: 256, column: 33, scope: !1180)
!1187 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1180, file: !105, line: 256, type: !99)
!1188 = !DILocation(line: 256, column: 48, scope: !1180)
!1189 = !DILocalVariable(name: "arg", arg: 3, scope: !1180, file: !105, line: 257, type: !23)
!1190 = !DILocation(line: 257, column: 39, scope: !1180)
!1191 = !DILocalVariable(name: "argsize", arg: 4, scope: !1180, file: !105, line: 257, type: !99)
!1192 = !DILocation(line: 257, column: 51, scope: !1180)
!1193 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1180, file: !105, line: 258, type: !82)
!1194 = !DILocation(line: 258, column: 46, scope: !1180)
!1195 = !DILocalVariable(name: "flags", arg: 6, scope: !1180, file: !105, line: 258, type: !6)
!1196 = !DILocation(line: 258, column: 65, scope: !1180)
!1197 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1180, file: !105, line: 259, type: !1183)
!1198 = !DILocation(line: 259, column: 47, scope: !1180)
!1199 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1180, file: !105, line: 260, type: !23)
!1200 = !DILocation(line: 260, column: 39, scope: !1180)
!1201 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1180, file: !105, line: 261, type: !23)
!1202 = !DILocation(line: 261, column: 39, scope: !1180)
!1203 = !DILocalVariable(name: "i", scope: !1180, file: !105, line: 263, type: !99)
!1204 = !DILocation(line: 263, column: 10, scope: !1180)
!1205 = !DILocalVariable(name: "len", scope: !1180, file: !105, line: 264, type: !99)
!1206 = !DILocation(line: 264, column: 10, scope: !1180)
!1207 = !DILocalVariable(name: "orig_buffersize", scope: !1180, file: !105, line: 265, type: !99)
!1208 = !DILocation(line: 265, column: 10, scope: !1180)
!1209 = !DILocalVariable(name: "quote_string", scope: !1180, file: !105, line: 266, type: !23)
!1210 = !DILocation(line: 266, column: 15, scope: !1180)
!1211 = !DILocalVariable(name: "quote_string_len", scope: !1180, file: !105, line: 267, type: !99)
!1212 = !DILocation(line: 267, column: 10, scope: !1180)
!1213 = !DILocalVariable(name: "backslash_escapes", scope: !1180, file: !105, line: 268, type: !41)
!1214 = !DILocation(line: 268, column: 8, scope: !1180)
!1215 = !DILocalVariable(name: "unibyte_locale", scope: !1180, file: !105, line: 269, type: !41)
!1216 = !DILocation(line: 269, column: 8, scope: !1180)
!1217 = !DILocation(line: 269, column: 25, scope: !1180)
!1218 = !DILocation(line: 269, column: 36, scope: !1180)
!1219 = !DILocalVariable(name: "elide_outer_quotes", scope: !1180, file: !105, line: 270, type: !41)
!1220 = !DILocation(line: 270, column: 8, scope: !1180)
!1221 = !DILocation(line: 270, column: 30, scope: !1180)
!1222 = !DILocation(line: 270, column: 36, scope: !1180)
!1223 = !DILocation(line: 270, column: 61, scope: !1180)
!1224 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1180, file: !105, line: 271, type: !41)
!1225 = !DILocation(line: 271, column: 8, scope: !1180)
!1226 = !DILocalVariable(name: "encountered_single_quote", scope: !1180, file: !105, line: 272, type: !41)
!1227 = !DILocation(line: 272, column: 8, scope: !1180)
!1228 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1180, file: !105, line: 273, type: !41)
!1229 = !DILocation(line: 273, column: 8, scope: !1180)
!1230 = !DILocation(line: 273, column: 3, scope: !1180)
!1231 = !DILabel(scope: !1180, name: "process_input", file: !105, line: 314)
!1232 = !DILocation(line: 314, column: 2, scope: !1180)
!1233 = !DILocation(line: 316, column: 11, scope: !1180)
!1234 = !DILocation(line: 316, column: 3, scope: !1180)
!1235 = !DILocation(line: 319, column: 21, scope: !1236)
!1236 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 317, column: 5)
!1237 = !DILocation(line: 320, column: 26, scope: !1236)
!1238 = !DILocation(line: 321, column: 7, scope: !1236)
!1239 = !DILocation(line: 323, column: 12, scope: !1240)
!1240 = distinct !DILexicalBlock(scope: !1236, file: !105, line: 323, column: 11)
!1241 = !DILocation(line: 323, column: 11, scope: !1236)
!1242 = !DILocation(line: 324, column: 9, scope: !1240)
!1243 = !DILocation(line: 324, column: 9, scope: !1244)
!1244 = distinct !DILexicalBlock(scope: !1245, file: !105, line: 324, column: 9)
!1245 = distinct !DILexicalBlock(scope: !1240, file: !105, line: 324, column: 9)
!1246 = !DILocation(line: 324, column: 9, scope: !1245)
!1247 = !DILocation(line: 325, column: 25, scope: !1236)
!1248 = !DILocation(line: 326, column: 20, scope: !1236)
!1249 = !DILocation(line: 327, column: 24, scope: !1236)
!1250 = !DILocation(line: 328, column: 7, scope: !1236)
!1251 = !DILocation(line: 331, column: 25, scope: !1236)
!1252 = !DILocation(line: 332, column: 26, scope: !1236)
!1253 = !DILocation(line: 333, column: 7, scope: !1236)
!1254 = !DILocation(line: 339, column: 13, scope: !1255)
!1255 = distinct !DILexicalBlock(scope: !1256, file: !105, line: 339, column: 13)
!1256 = distinct !DILexicalBlock(scope: !1236, file: !105, line: 338, column: 7)
!1257 = !DILocation(line: 339, column: 27, scope: !1255)
!1258 = !DILocation(line: 339, column: 13, scope: !1256)
!1259 = !DILocation(line: 362, column: 50, scope: !1260)
!1260 = distinct !DILexicalBlock(scope: !1255, file: !105, line: 340, column: 11)
!1261 = !DILocation(line: 362, column: 26, scope: !1260)
!1262 = !DILocation(line: 362, column: 24, scope: !1260)
!1263 = !DILocation(line: 363, column: 51, scope: !1260)
!1264 = !DILocation(line: 363, column: 27, scope: !1260)
!1265 = !DILocation(line: 363, column: 25, scope: !1260)
!1266 = !DILocation(line: 364, column: 11, scope: !1260)
!1267 = !DILocation(line: 365, column: 14, scope: !1268)
!1268 = distinct !DILexicalBlock(scope: !1256, file: !105, line: 365, column: 13)
!1269 = !DILocation(line: 365, column: 13, scope: !1256)
!1270 = !DILocation(line: 366, column: 31, scope: !1271)
!1271 = distinct !DILexicalBlock(scope: !1268, file: !105, line: 366, column: 11)
!1272 = !DILocation(line: 366, column: 29, scope: !1271)
!1273 = !DILocation(line: 366, column: 16, scope: !1271)
!1274 = !DILocation(line: 366, column: 44, scope: !1275)
!1275 = distinct !DILexicalBlock(scope: !1271, file: !105, line: 366, column: 11)
!1276 = !DILocation(line: 366, column: 43, scope: !1275)
!1277 = !DILocation(line: 366, column: 11, scope: !1271)
!1278 = !DILocation(line: 367, column: 13, scope: !1275)
!1279 = !DILocation(line: 367, column: 13, scope: !1280)
!1280 = distinct !DILexicalBlock(scope: !1281, file: !105, line: 367, column: 13)
!1281 = distinct !DILexicalBlock(scope: !1275, file: !105, line: 367, column: 13)
!1282 = !DILocation(line: 367, column: 13, scope: !1281)
!1283 = !DILocation(line: 366, column: 70, scope: !1275)
!1284 = !DILocation(line: 366, column: 11, scope: !1275)
!1285 = distinct !{!1285, !1277, !1286}
!1286 = !DILocation(line: 367, column: 13, scope: !1271)
!1287 = !DILocation(line: 368, column: 27, scope: !1256)
!1288 = !DILocation(line: 369, column: 24, scope: !1256)
!1289 = !DILocation(line: 369, column: 22, scope: !1256)
!1290 = !DILocation(line: 370, column: 36, scope: !1256)
!1291 = !DILocation(line: 370, column: 28, scope: !1256)
!1292 = !DILocation(line: 370, column: 26, scope: !1256)
!1293 = !DILocation(line: 372, column: 7, scope: !1236)
!1294 = !DILocation(line: 375, column: 25, scope: !1236)
!1295 = !DILocation(line: 376, column: 7, scope: !1236)
!1296 = !DILocation(line: 378, column: 26, scope: !1236)
!1297 = !DILocation(line: 379, column: 7, scope: !1236)
!1298 = !DILocation(line: 381, column: 12, scope: !1299)
!1299 = distinct !DILexicalBlock(scope: !1236, file: !105, line: 381, column: 11)
!1300 = !DILocation(line: 381, column: 11, scope: !1236)
!1301 = !DILocation(line: 382, column: 27, scope: !1299)
!1302 = !DILocation(line: 382, column: 9, scope: !1299)
!1303 = !DILocation(line: 383, column: 7, scope: !1236)
!1304 = !DILocation(line: 385, column: 21, scope: !1236)
!1305 = !DILocation(line: 386, column: 12, scope: !1306)
!1306 = distinct !DILexicalBlock(scope: !1236, file: !105, line: 386, column: 11)
!1307 = !DILocation(line: 386, column: 11, scope: !1236)
!1308 = !DILocation(line: 387, column: 9, scope: !1306)
!1309 = !DILocation(line: 387, column: 9, scope: !1310)
!1310 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 387, column: 9)
!1311 = distinct !DILexicalBlock(scope: !1306, file: !105, line: 387, column: 9)
!1312 = !DILocation(line: 387, column: 9, scope: !1311)
!1313 = !DILocation(line: 388, column: 20, scope: !1236)
!1314 = !DILocation(line: 389, column: 24, scope: !1236)
!1315 = !DILocation(line: 390, column: 7, scope: !1236)
!1316 = !DILocation(line: 393, column: 26, scope: !1236)
!1317 = !DILocation(line: 394, column: 7, scope: !1236)
!1318 = !DILocation(line: 397, column: 7, scope: !1236)
!1319 = !DILocation(line: 400, column: 10, scope: !1320)
!1320 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 400, column: 3)
!1321 = !DILocation(line: 400, column: 8, scope: !1320)
!1322 = !DILocation(line: 400, column: 19, scope: !1323)
!1323 = distinct !DILexicalBlock(scope: !1320, file: !105, line: 400, column: 3)
!1324 = !DILocation(line: 400, column: 27, scope: !1323)
!1325 = !DILocation(line: 400, column: 41, scope: !1323)
!1326 = !DILocation(line: 400, column: 45, scope: !1323)
!1327 = !DILocation(line: 400, column: 48, scope: !1323)
!1328 = !DILocation(line: 400, column: 58, scope: !1323)
!1329 = !DILocation(line: 400, column: 63, scope: !1323)
!1330 = !DILocation(line: 400, column: 60, scope: !1323)
!1331 = !DILocation(line: 400, column: 16, scope: !1323)
!1332 = !DILocation(line: 400, column: 3, scope: !1320)
!1333 = !DILocalVariable(name: "c", scope: !1334, file: !105, line: 402, type: !167)
!1334 = distinct !DILexicalBlock(scope: !1323, file: !105, line: 401, column: 5)
!1335 = !DILocation(line: 402, column: 21, scope: !1334)
!1336 = !DILocalVariable(name: "esc", scope: !1334, file: !105, line: 403, type: !167)
!1337 = !DILocation(line: 403, column: 21, scope: !1334)
!1338 = !DILocalVariable(name: "is_right_quote", scope: !1334, file: !105, line: 404, type: !41)
!1339 = !DILocation(line: 404, column: 12, scope: !1334)
!1340 = !DILocalVariable(name: "escaping", scope: !1334, file: !105, line: 405, type: !41)
!1341 = !DILocation(line: 405, column: 12, scope: !1334)
!1342 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1334, file: !105, line: 406, type: !41)
!1343 = !DILocation(line: 406, column: 12, scope: !1334)
!1344 = !DILocation(line: 408, column: 11, scope: !1345)
!1345 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 408, column: 11)
!1346 = !DILocation(line: 409, column: 11, scope: !1345)
!1347 = !DILocation(line: 409, column: 14, scope: !1345)
!1348 = !DILocation(line: 409, column: 28, scope: !1345)
!1349 = !DILocation(line: 410, column: 11, scope: !1345)
!1350 = !DILocation(line: 410, column: 14, scope: !1345)
!1351 = !DILocation(line: 411, column: 11, scope: !1345)
!1352 = !DILocation(line: 411, column: 15, scope: !1345)
!1353 = !DILocation(line: 411, column: 19, scope: !1345)
!1354 = !DILocation(line: 411, column: 17, scope: !1345)
!1355 = !DILocation(line: 412, column: 19, scope: !1345)
!1356 = !DILocation(line: 412, column: 27, scope: !1345)
!1357 = !DILocation(line: 412, column: 39, scope: !1345)
!1358 = !DILocation(line: 412, column: 46, scope: !1345)
!1359 = !DILocation(line: 412, column: 44, scope: !1345)
!1360 = !DILocation(line: 416, column: 40, scope: !1345)
!1361 = !DILocation(line: 416, column: 32, scope: !1345)
!1362 = !DILocation(line: 416, column: 30, scope: !1345)
!1363 = !DILocation(line: 416, column: 48, scope: !1345)
!1364 = !DILocation(line: 412, column: 15, scope: !1345)
!1365 = !DILocation(line: 417, column: 11, scope: !1345)
!1366 = !DILocation(line: 417, column: 22, scope: !1345)
!1367 = !DILocation(line: 417, column: 28, scope: !1345)
!1368 = !DILocation(line: 417, column: 26, scope: !1345)
!1369 = !DILocation(line: 417, column: 31, scope: !1345)
!1370 = !DILocation(line: 417, column: 45, scope: !1345)
!1371 = !DILocation(line: 417, column: 14, scope: !1345)
!1372 = !DILocation(line: 417, column: 63, scope: !1345)
!1373 = !DILocation(line: 408, column: 11, scope: !1334)
!1374 = !DILocation(line: 419, column: 15, scope: !1375)
!1375 = distinct !DILexicalBlock(scope: !1376, file: !105, line: 419, column: 15)
!1376 = distinct !DILexicalBlock(scope: !1345, file: !105, line: 418, column: 9)
!1377 = !DILocation(line: 419, column: 15, scope: !1376)
!1378 = !DILocation(line: 420, column: 13, scope: !1375)
!1379 = !DILocation(line: 421, column: 26, scope: !1376)
!1380 = !DILocation(line: 422, column: 9, scope: !1376)
!1381 = !DILocation(line: 424, column: 11, scope: !1334)
!1382 = !DILocation(line: 424, column: 15, scope: !1334)
!1383 = !DILocation(line: 424, column: 9, scope: !1334)
!1384 = !DILocation(line: 425, column: 15, scope: !1334)
!1385 = !DILocation(line: 425, column: 7, scope: !1334)
!1386 = !DILocation(line: 428, column: 15, scope: !1387)
!1387 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 428, column: 15)
!1388 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 426, column: 9)
!1389 = !DILocation(line: 428, column: 15, scope: !1388)
!1390 = !DILocation(line: 430, column: 15, scope: !1391)
!1391 = distinct !DILexicalBlock(scope: !1387, file: !105, line: 429, column: 13)
!1392 = !DILocation(line: 430, column: 15, scope: !1393)
!1393 = distinct !DILexicalBlock(scope: !1394, file: !105, line: 430, column: 15)
!1394 = distinct !DILexicalBlock(scope: !1391, file: !105, line: 430, column: 15)
!1395 = !DILocation(line: 430, column: 15, scope: !1394)
!1396 = !DILocation(line: 430, column: 15, scope: !1397)
!1397 = distinct !DILexicalBlock(scope: !1394, file: !105, line: 430, column: 15)
!1398 = !DILocation(line: 430, column: 15, scope: !1399)
!1399 = distinct !DILexicalBlock(scope: !1397, file: !105, line: 430, column: 15)
!1400 = !DILocation(line: 430, column: 15, scope: !1401)
!1401 = distinct !DILexicalBlock(scope: !1402, file: !105, line: 430, column: 15)
!1402 = distinct !DILexicalBlock(scope: !1399, file: !105, line: 430, column: 15)
!1403 = !DILocation(line: 430, column: 15, scope: !1402)
!1404 = !DILocation(line: 430, column: 15, scope: !1405)
!1405 = distinct !DILexicalBlock(scope: !1406, file: !105, line: 430, column: 15)
!1406 = distinct !DILexicalBlock(scope: !1399, file: !105, line: 430, column: 15)
!1407 = !DILocation(line: 430, column: 15, scope: !1406)
!1408 = !DILocation(line: 430, column: 15, scope: !1409)
!1409 = distinct !DILexicalBlock(scope: !1410, file: !105, line: 430, column: 15)
!1410 = distinct !DILexicalBlock(scope: !1399, file: !105, line: 430, column: 15)
!1411 = !DILocation(line: 430, column: 15, scope: !1410)
!1412 = !DILocation(line: 430, column: 15, scope: !1413)
!1413 = distinct !DILexicalBlock(scope: !1414, file: !105, line: 430, column: 15)
!1414 = distinct !DILexicalBlock(scope: !1394, file: !105, line: 430, column: 15)
!1415 = !DILocation(line: 430, column: 15, scope: !1414)
!1416 = !DILocation(line: 437, column: 19, scope: !1417)
!1417 = distinct !DILexicalBlock(scope: !1391, file: !105, line: 437, column: 19)
!1418 = !DILocation(line: 437, column: 33, scope: !1417)
!1419 = !DILocation(line: 438, column: 19, scope: !1417)
!1420 = !DILocation(line: 438, column: 22, scope: !1417)
!1421 = !DILocation(line: 438, column: 24, scope: !1417)
!1422 = !DILocation(line: 438, column: 30, scope: !1417)
!1423 = !DILocation(line: 438, column: 28, scope: !1417)
!1424 = !DILocation(line: 438, column: 38, scope: !1417)
!1425 = !DILocation(line: 438, column: 48, scope: !1417)
!1426 = !DILocation(line: 438, column: 52, scope: !1417)
!1427 = !DILocation(line: 438, column: 54, scope: !1417)
!1428 = !DILocation(line: 438, column: 45, scope: !1417)
!1429 = !DILocation(line: 438, column: 59, scope: !1417)
!1430 = !DILocation(line: 438, column: 62, scope: !1417)
!1431 = !DILocation(line: 438, column: 66, scope: !1417)
!1432 = !DILocation(line: 438, column: 68, scope: !1417)
!1433 = !DILocation(line: 438, column: 73, scope: !1417)
!1434 = !DILocation(line: 437, column: 19, scope: !1391)
!1435 = !DILocation(line: 440, column: 19, scope: !1436)
!1436 = distinct !DILexicalBlock(scope: !1417, file: !105, line: 439, column: 17)
!1437 = !DILocation(line: 440, column: 19, scope: !1438)
!1438 = distinct !DILexicalBlock(scope: !1439, file: !105, line: 440, column: 19)
!1439 = distinct !DILexicalBlock(scope: !1436, file: !105, line: 440, column: 19)
!1440 = !DILocation(line: 440, column: 19, scope: !1439)
!1441 = !DILocation(line: 441, column: 19, scope: !1436)
!1442 = !DILocation(line: 441, column: 19, scope: !1443)
!1443 = distinct !DILexicalBlock(scope: !1444, file: !105, line: 441, column: 19)
!1444 = distinct !DILexicalBlock(scope: !1436, file: !105, line: 441, column: 19)
!1445 = !DILocation(line: 441, column: 19, scope: !1444)
!1446 = !DILocation(line: 442, column: 17, scope: !1436)
!1447 = !DILocation(line: 443, column: 17, scope: !1391)
!1448 = !DILocation(line: 448, column: 13, scope: !1391)
!1449 = !DILocation(line: 449, column: 20, scope: !1450)
!1450 = distinct !DILexicalBlock(scope: !1387, file: !105, line: 449, column: 20)
!1451 = !DILocation(line: 449, column: 26, scope: !1450)
!1452 = !DILocation(line: 449, column: 20, scope: !1387)
!1453 = !DILocation(line: 450, column: 13, scope: !1450)
!1454 = !DILocation(line: 451, column: 11, scope: !1388)
!1455 = !DILocation(line: 454, column: 19, scope: !1388)
!1456 = !DILocation(line: 454, column: 11, scope: !1388)
!1457 = !DILocation(line: 457, column: 19, scope: !1458)
!1458 = distinct !DILexicalBlock(scope: !1459, file: !105, line: 457, column: 19)
!1459 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 455, column: 13)
!1460 = !DILocation(line: 457, column: 19, scope: !1459)
!1461 = !DILocation(line: 458, column: 17, scope: !1458)
!1462 = !DILocation(line: 459, column: 15, scope: !1459)
!1463 = !DILocation(line: 462, column: 20, scope: !1464)
!1464 = distinct !DILexicalBlock(scope: !1459, file: !105, line: 462, column: 19)
!1465 = !DILocation(line: 462, column: 26, scope: !1464)
!1466 = !DILocation(line: 463, column: 19, scope: !1464)
!1467 = !DILocation(line: 463, column: 22, scope: !1464)
!1468 = !DILocation(line: 463, column: 24, scope: !1464)
!1469 = !DILocation(line: 463, column: 30, scope: !1464)
!1470 = !DILocation(line: 463, column: 28, scope: !1464)
!1471 = !DILocation(line: 463, column: 38, scope: !1464)
!1472 = !DILocation(line: 463, column: 41, scope: !1464)
!1473 = !DILocation(line: 463, column: 45, scope: !1464)
!1474 = !DILocation(line: 463, column: 47, scope: !1464)
!1475 = !DILocation(line: 463, column: 52, scope: !1464)
!1476 = !DILocation(line: 462, column: 19, scope: !1459)
!1477 = !DILocation(line: 464, column: 25, scope: !1464)
!1478 = !DILocation(line: 464, column: 29, scope: !1464)
!1479 = !DILocation(line: 464, column: 31, scope: !1464)
!1480 = !DILocation(line: 464, column: 17, scope: !1464)
!1481 = !DILocation(line: 471, column: 25, scope: !1482)
!1482 = distinct !DILexicalBlock(scope: !1483, file: !105, line: 471, column: 25)
!1483 = distinct !DILexicalBlock(scope: !1464, file: !105, line: 465, column: 19)
!1484 = !DILocation(line: 471, column: 25, scope: !1483)
!1485 = !DILocation(line: 472, column: 23, scope: !1482)
!1486 = !DILocation(line: 473, column: 25, scope: !1483)
!1487 = !DILocation(line: 473, column: 29, scope: !1483)
!1488 = !DILocation(line: 473, column: 31, scope: !1483)
!1489 = !DILocation(line: 473, column: 23, scope: !1483)
!1490 = !DILocation(line: 474, column: 23, scope: !1483)
!1491 = !DILocation(line: 475, column: 21, scope: !1483)
!1492 = !DILocation(line: 475, column: 21, scope: !1493)
!1493 = distinct !DILexicalBlock(scope: !1494, file: !105, line: 475, column: 21)
!1494 = distinct !DILexicalBlock(scope: !1483, file: !105, line: 475, column: 21)
!1495 = !DILocation(line: 475, column: 21, scope: !1494)
!1496 = !DILocation(line: 476, column: 21, scope: !1483)
!1497 = !DILocation(line: 476, column: 21, scope: !1498)
!1498 = distinct !DILexicalBlock(scope: !1499, file: !105, line: 476, column: 21)
!1499 = distinct !DILexicalBlock(scope: !1483, file: !105, line: 476, column: 21)
!1500 = !DILocation(line: 476, column: 21, scope: !1499)
!1501 = !DILocation(line: 477, column: 21, scope: !1483)
!1502 = !DILocation(line: 477, column: 21, scope: !1503)
!1503 = distinct !DILexicalBlock(scope: !1504, file: !105, line: 477, column: 21)
!1504 = distinct !DILexicalBlock(scope: !1483, file: !105, line: 477, column: 21)
!1505 = !DILocation(line: 477, column: 21, scope: !1504)
!1506 = !DILocation(line: 478, column: 21, scope: !1483)
!1507 = !DILocation(line: 478, column: 21, scope: !1508)
!1508 = distinct !DILexicalBlock(scope: !1509, file: !105, line: 478, column: 21)
!1509 = distinct !DILexicalBlock(scope: !1483, file: !105, line: 478, column: 21)
!1510 = !DILocation(line: 478, column: 21, scope: !1509)
!1511 = !DILocation(line: 479, column: 21, scope: !1483)
!1512 = !DILocation(line: 482, column: 21, scope: !1483)
!1513 = !DILocation(line: 483, column: 19, scope: !1483)
!1514 = !DILocation(line: 484, column: 15, scope: !1459)
!1515 = !DILocation(line: 487, column: 15, scope: !1459)
!1516 = !DILocation(line: 489, column: 11, scope: !1388)
!1517 = !DILocation(line: 491, column: 24, scope: !1388)
!1518 = !DILocation(line: 491, column: 31, scope: !1388)
!1519 = !DILocation(line: 492, column: 24, scope: !1388)
!1520 = !DILocation(line: 492, column: 31, scope: !1388)
!1521 = !DILocation(line: 493, column: 24, scope: !1388)
!1522 = !DILocation(line: 493, column: 31, scope: !1388)
!1523 = !DILocation(line: 494, column: 24, scope: !1388)
!1524 = !DILocation(line: 494, column: 31, scope: !1388)
!1525 = !DILocation(line: 495, column: 24, scope: !1388)
!1526 = !DILocation(line: 495, column: 31, scope: !1388)
!1527 = !DILocation(line: 496, column: 24, scope: !1388)
!1528 = !DILocation(line: 496, column: 31, scope: !1388)
!1529 = !DILocation(line: 497, column: 24, scope: !1388)
!1530 = !DILocation(line: 497, column: 31, scope: !1388)
!1531 = !DILocation(line: 498, column: 26, scope: !1388)
!1532 = !DILocation(line: 498, column: 24, scope: !1388)
!1533 = !DILocation(line: 500, column: 15, scope: !1534)
!1534 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 500, column: 15)
!1535 = !DILocation(line: 500, column: 29, scope: !1534)
!1536 = !DILocation(line: 500, column: 15, scope: !1388)
!1537 = !DILocation(line: 502, column: 19, scope: !1538)
!1538 = distinct !DILexicalBlock(scope: !1539, file: !105, line: 502, column: 19)
!1539 = distinct !DILexicalBlock(scope: !1534, file: !105, line: 501, column: 13)
!1540 = !DILocation(line: 502, column: 19, scope: !1539)
!1541 = !DILocation(line: 503, column: 17, scope: !1538)
!1542 = !DILocation(line: 504, column: 15, scope: !1539)
!1543 = !DILocation(line: 509, column: 15, scope: !1544)
!1544 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 509, column: 15)
!1545 = !DILocation(line: 509, column: 33, scope: !1544)
!1546 = !DILocation(line: 509, column: 36, scope: !1544)
!1547 = !DILocation(line: 509, column: 55, scope: !1544)
!1548 = !DILocation(line: 509, column: 58, scope: !1544)
!1549 = !DILocation(line: 509, column: 15, scope: !1388)
!1550 = !DILocation(line: 510, column: 13, scope: !1544)
!1551 = !DILabel(scope: !1388, name: "c_and_shell_escape", file: !105, line: 512)
!1552 = !DILocation(line: 512, column: 9, scope: !1388)
!1553 = !DILocation(line: 513, column: 15, scope: !1554)
!1554 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 513, column: 15)
!1555 = !DILocation(line: 513, column: 29, scope: !1554)
!1556 = !DILocation(line: 514, column: 15, scope: !1554)
!1557 = !DILocation(line: 514, column: 18, scope: !1554)
!1558 = !DILocation(line: 513, column: 15, scope: !1388)
!1559 = !DILocation(line: 515, column: 13, scope: !1554)
!1560 = !DILabel(scope: !1388, name: "c_escape", file: !105, line: 517)
!1561 = !DILocation(line: 517, column: 9, scope: !1388)
!1562 = !DILocation(line: 518, column: 15, scope: !1563)
!1563 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 518, column: 15)
!1564 = !DILocation(line: 518, column: 15, scope: !1388)
!1565 = !DILocation(line: 520, column: 19, scope: !1566)
!1566 = distinct !DILexicalBlock(scope: !1563, file: !105, line: 519, column: 13)
!1567 = !DILocation(line: 520, column: 17, scope: !1566)
!1568 = !DILocation(line: 521, column: 15, scope: !1566)
!1569 = !DILocation(line: 523, column: 11, scope: !1388)
!1570 = !DILocation(line: 526, column: 18, scope: !1571)
!1571 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 526, column: 15)
!1572 = !DILocation(line: 526, column: 26, scope: !1571)
!1573 = !DILocation(line: 526, column: 15, scope: !1388)
!1574 = !DILocation(line: 526, column: 40, scope: !1571)
!1575 = !DILocation(line: 526, column: 47, scope: !1571)
!1576 = !DILocation(line: 526, column: 57, scope: !1571)
!1577 = !DILocation(line: 526, column: 65, scope: !1571)
!1578 = !DILocation(line: 527, column: 13, scope: !1571)
!1579 = !DILocation(line: 528, column: 11, scope: !1388)
!1580 = !DILocation(line: 530, column: 15, scope: !1581)
!1581 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 530, column: 15)
!1582 = !DILocation(line: 530, column: 17, scope: !1581)
!1583 = !DILocation(line: 530, column: 15, scope: !1388)
!1584 = !DILocation(line: 531, column: 13, scope: !1581)
!1585 = !DILocation(line: 532, column: 11, scope: !1388)
!1586 = !DILocation(line: 534, column: 36, scope: !1388)
!1587 = !DILocation(line: 535, column: 11, scope: !1388)
!1588 = !DILocation(line: 548, column: 15, scope: !1589)
!1589 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 548, column: 15)
!1590 = !DILocation(line: 548, column: 29, scope: !1589)
!1591 = !DILocation(line: 549, column: 15, scope: !1589)
!1592 = !DILocation(line: 549, column: 18, scope: !1589)
!1593 = !DILocation(line: 548, column: 15, scope: !1388)
!1594 = !DILocation(line: 550, column: 13, scope: !1589)
!1595 = !DILocation(line: 551, column: 11, scope: !1388)
!1596 = !DILocation(line: 554, column: 36, scope: !1388)
!1597 = !DILocation(line: 555, column: 36, scope: !1388)
!1598 = !DILocation(line: 556, column: 15, scope: !1599)
!1599 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 556, column: 15)
!1600 = !DILocation(line: 556, column: 29, scope: !1599)
!1601 = !DILocation(line: 556, column: 15, scope: !1388)
!1602 = !DILocation(line: 558, column: 19, scope: !1603)
!1603 = distinct !DILexicalBlock(scope: !1604, file: !105, line: 558, column: 19)
!1604 = distinct !DILexicalBlock(scope: !1599, file: !105, line: 557, column: 13)
!1605 = !DILocation(line: 558, column: 19, scope: !1604)
!1606 = !DILocation(line: 559, column: 17, scope: !1603)
!1607 = !DILocation(line: 561, column: 19, scope: !1608)
!1608 = distinct !DILexicalBlock(scope: !1604, file: !105, line: 561, column: 19)
!1609 = !DILocation(line: 561, column: 30, scope: !1608)
!1610 = !DILocation(line: 561, column: 35, scope: !1608)
!1611 = !DILocation(line: 561, column: 19, scope: !1604)
!1612 = !DILocation(line: 566, column: 37, scope: !1613)
!1613 = distinct !DILexicalBlock(scope: !1608, file: !105, line: 562, column: 17)
!1614 = !DILocation(line: 566, column: 35, scope: !1613)
!1615 = !DILocation(line: 567, column: 30, scope: !1613)
!1616 = !DILocation(line: 568, column: 17, scope: !1613)
!1617 = !DILocation(line: 570, column: 15, scope: !1604)
!1618 = !DILocation(line: 570, column: 15, scope: !1619)
!1619 = distinct !DILexicalBlock(scope: !1620, file: !105, line: 570, column: 15)
!1620 = distinct !DILexicalBlock(scope: !1604, file: !105, line: 570, column: 15)
!1621 = !DILocation(line: 570, column: 15, scope: !1620)
!1622 = !DILocation(line: 571, column: 15, scope: !1604)
!1623 = !DILocation(line: 571, column: 15, scope: !1624)
!1624 = distinct !DILexicalBlock(scope: !1625, file: !105, line: 571, column: 15)
!1625 = distinct !DILexicalBlock(scope: !1604, file: !105, line: 571, column: 15)
!1626 = !DILocation(line: 571, column: 15, scope: !1625)
!1627 = !DILocation(line: 572, column: 15, scope: !1604)
!1628 = !DILocation(line: 572, column: 15, scope: !1629)
!1629 = distinct !DILexicalBlock(scope: !1630, file: !105, line: 572, column: 15)
!1630 = distinct !DILexicalBlock(scope: !1604, file: !105, line: 572, column: 15)
!1631 = !DILocation(line: 572, column: 15, scope: !1630)
!1632 = !DILocation(line: 573, column: 40, scope: !1604)
!1633 = !DILocation(line: 574, column: 13, scope: !1604)
!1634 = !DILocation(line: 575, column: 11, scope: !1388)
!1635 = !DILocation(line: 599, column: 36, scope: !1388)
!1636 = !DILocation(line: 600, column: 11, scope: !1388)
!1637 = !DILocalVariable(name: "m", scope: !1638, file: !105, line: 610, type: !99)
!1638 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 608, column: 11)
!1639 = !DILocation(line: 610, column: 20, scope: !1638)
!1640 = !DILocalVariable(name: "printable", scope: !1638, file: !105, line: 612, type: !41)
!1641 = !DILocation(line: 612, column: 18, scope: !1638)
!1642 = !DILocation(line: 614, column: 17, scope: !1643)
!1643 = distinct !DILexicalBlock(scope: !1638, file: !105, line: 614, column: 17)
!1644 = !DILocation(line: 614, column: 17, scope: !1638)
!1645 = !DILocation(line: 616, column: 19, scope: !1646)
!1646 = distinct !DILexicalBlock(scope: !1643, file: !105, line: 615, column: 15)
!1647 = !DILocation(line: 617, column: 29, scope: !1646)
!1648 = !DILocation(line: 617, column: 41, scope: !1646)
!1649 = !DILocation(line: 617, column: 27, scope: !1646)
!1650 = !DILocation(line: 618, column: 15, scope: !1646)
!1651 = !DILocalVariable(name: "mbstate", scope: !1652, file: !105, line: 621, type: !1653)
!1652 = distinct !DILexicalBlock(scope: !1643, file: !105, line: 620, column: 15)
!1653 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1654, line: 6, baseType: !1655)
!1654 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!1655 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1656, line: 21, baseType: !1657)
!1656 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!1657 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1656, line: 13, size: 64, elements: !1658)
!1658 = !{!1659, !1660}
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1657, file: !1656, line: 15, baseType: !6, size: 32)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1657, file: !1656, line: 20, baseType: !1661, size: 32, offset: 32)
!1661 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1657, file: !1656, line: 16, size: 32, elements: !1662)
!1662 = !{!1663, !1664}
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1661, file: !1656, line: 18, baseType: !84, size: 32)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1661, file: !1656, line: 19, baseType: !1665, size: 32)
!1665 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 32, elements: !1666)
!1666 = !{!1667}
!1667 = !DISubrange(count: 4)
!1668 = !DILocation(line: 621, column: 27, scope: !1652)
!1669 = !DILocation(line: 622, column: 17, scope: !1652)
!1670 = !DILocation(line: 624, column: 19, scope: !1652)
!1671 = !DILocation(line: 625, column: 27, scope: !1652)
!1672 = !DILocation(line: 626, column: 21, scope: !1673)
!1673 = distinct !DILexicalBlock(scope: !1652, file: !105, line: 626, column: 21)
!1674 = !DILocation(line: 626, column: 29, scope: !1673)
!1675 = !DILocation(line: 626, column: 21, scope: !1652)
!1676 = !DILocation(line: 627, column: 37, scope: !1673)
!1677 = !DILocation(line: 627, column: 29, scope: !1673)
!1678 = !DILocation(line: 627, column: 27, scope: !1673)
!1679 = !DILocation(line: 627, column: 19, scope: !1673)
!1680 = !DILocation(line: 629, column: 17, scope: !1652)
!1681 = !DILocalVariable(name: "w", scope: !1682, file: !105, line: 631, type: !1683)
!1682 = distinct !DILexicalBlock(scope: !1652, file: !105, line: 630, column: 19)
!1683 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !100, line: 74, baseType: !6)
!1684 = !DILocation(line: 631, column: 29, scope: !1682)
!1685 = !DILocalVariable(name: "bytes", scope: !1682, file: !105, line: 632, type: !99)
!1686 = !DILocation(line: 632, column: 28, scope: !1682)
!1687 = !DILocation(line: 632, column: 50, scope: !1682)
!1688 = !DILocation(line: 632, column: 54, scope: !1682)
!1689 = !DILocation(line: 632, column: 58, scope: !1682)
!1690 = !DILocation(line: 632, column: 56, scope: !1682)
!1691 = !DILocation(line: 633, column: 45, scope: !1682)
!1692 = !DILocation(line: 633, column: 56, scope: !1682)
!1693 = !DILocation(line: 633, column: 60, scope: !1682)
!1694 = !DILocation(line: 633, column: 58, scope: !1682)
!1695 = !DILocation(line: 633, column: 53, scope: !1682)
!1696 = !DILocation(line: 632, column: 36, scope: !1682)
!1697 = !DILocation(line: 634, column: 25, scope: !1698)
!1698 = distinct !DILexicalBlock(scope: !1682, file: !105, line: 634, column: 25)
!1699 = !DILocation(line: 634, column: 31, scope: !1698)
!1700 = !DILocation(line: 634, column: 25, scope: !1682)
!1701 = !DILocation(line: 635, column: 23, scope: !1698)
!1702 = !DILocation(line: 636, column: 30, scope: !1703)
!1703 = distinct !DILexicalBlock(scope: !1698, file: !105, line: 636, column: 30)
!1704 = !DILocation(line: 636, column: 36, scope: !1703)
!1705 = !DILocation(line: 636, column: 30, scope: !1698)
!1706 = !DILocation(line: 638, column: 35, scope: !1707)
!1707 = distinct !DILexicalBlock(scope: !1703, file: !105, line: 637, column: 23)
!1708 = !DILocation(line: 639, column: 25, scope: !1707)
!1709 = !DILocation(line: 641, column: 30, scope: !1710)
!1710 = distinct !DILexicalBlock(scope: !1703, file: !105, line: 641, column: 30)
!1711 = !DILocation(line: 641, column: 36, scope: !1710)
!1712 = !DILocation(line: 641, column: 30, scope: !1703)
!1713 = !DILocation(line: 643, column: 35, scope: !1714)
!1714 = distinct !DILexicalBlock(scope: !1710, file: !105, line: 642, column: 23)
!1715 = !DILocation(line: 644, column: 25, scope: !1714)
!1716 = !DILocation(line: 644, column: 32, scope: !1714)
!1717 = !DILocation(line: 644, column: 36, scope: !1714)
!1718 = !DILocation(line: 644, column: 34, scope: !1714)
!1719 = !DILocation(line: 644, column: 40, scope: !1714)
!1720 = !DILocation(line: 644, column: 38, scope: !1714)
!1721 = !DILocation(line: 644, column: 48, scope: !1714)
!1722 = !DILocation(line: 644, column: 51, scope: !1714)
!1723 = !DILocation(line: 644, column: 55, scope: !1714)
!1724 = !DILocation(line: 644, column: 59, scope: !1714)
!1725 = !DILocation(line: 644, column: 57, scope: !1714)
!1726 = !DILocation(line: 0, scope: !1714)
!1727 = !DILocation(line: 645, column: 28, scope: !1714)
!1728 = distinct !{!1728, !1715, !1727}
!1729 = !DILocation(line: 646, column: 25, scope: !1714)
!1730 = !DILocation(line: 654, column: 44, scope: !1731)
!1731 = distinct !DILexicalBlock(scope: !1732, file: !105, line: 654, column: 29)
!1732 = distinct !DILexicalBlock(scope: !1710, file: !105, line: 649, column: 23)
!1733 = !DILocation(line: 655, column: 29, scope: !1731)
!1734 = !DILocation(line: 655, column: 32, scope: !1731)
!1735 = !DILocation(line: 655, column: 46, scope: !1731)
!1736 = !DILocation(line: 654, column: 29, scope: !1732)
!1737 = !DILocalVariable(name: "j", scope: !1738, file: !105, line: 657, type: !99)
!1738 = distinct !DILexicalBlock(scope: !1731, file: !105, line: 656, column: 27)
!1739 = !DILocation(line: 657, column: 36, scope: !1738)
!1740 = !DILocation(line: 658, column: 36, scope: !1741)
!1741 = distinct !DILexicalBlock(scope: !1738, file: !105, line: 658, column: 29)
!1742 = !DILocation(line: 658, column: 34, scope: !1741)
!1743 = !DILocation(line: 658, column: 41, scope: !1744)
!1744 = distinct !DILexicalBlock(scope: !1741, file: !105, line: 658, column: 29)
!1745 = !DILocation(line: 658, column: 45, scope: !1744)
!1746 = !DILocation(line: 658, column: 43, scope: !1744)
!1747 = !DILocation(line: 658, column: 29, scope: !1741)
!1748 = !DILocation(line: 659, column: 39, scope: !1744)
!1749 = !DILocation(line: 659, column: 43, scope: !1744)
!1750 = !DILocation(line: 659, column: 47, scope: !1744)
!1751 = !DILocation(line: 659, column: 45, scope: !1744)
!1752 = !DILocation(line: 659, column: 51, scope: !1744)
!1753 = !DILocation(line: 659, column: 49, scope: !1744)
!1754 = !DILocation(line: 659, column: 31, scope: !1744)
!1755 = !DILocation(line: 663, column: 35, scope: !1756)
!1756 = distinct !DILexicalBlock(scope: !1744, file: !105, line: 660, column: 33)
!1757 = !DILocation(line: 666, column: 35, scope: !1756)
!1758 = !DILocation(line: 667, column: 33, scope: !1756)
!1759 = !DILocation(line: 658, column: 53, scope: !1744)
!1760 = !DILocation(line: 658, column: 29, scope: !1744)
!1761 = distinct !{!1761, !1747, !1762}
!1762 = !DILocation(line: 667, column: 33, scope: !1741)
!1763 = !DILocation(line: 668, column: 27, scope: !1738)
!1764 = !DILocation(line: 670, column: 41, scope: !1765)
!1765 = distinct !DILexicalBlock(scope: !1732, file: !105, line: 670, column: 29)
!1766 = !DILocation(line: 670, column: 31, scope: !1765)
!1767 = !DILocation(line: 670, column: 29, scope: !1732)
!1768 = !DILocation(line: 671, column: 37, scope: !1765)
!1769 = !DILocation(line: 671, column: 27, scope: !1765)
!1770 = !DILocation(line: 672, column: 30, scope: !1732)
!1771 = !DILocation(line: 672, column: 27, scope: !1732)
!1772 = !DILocation(line: 674, column: 19, scope: !1682)
!1773 = !DILocation(line: 675, column: 26, scope: !1652)
!1774 = !DILocation(line: 675, column: 24, scope: !1652)
!1775 = distinct !{!1775, !1680, !1776}
!1776 = !DILocation(line: 675, column: 44, scope: !1652)
!1777 = !DILocation(line: 678, column: 40, scope: !1638)
!1778 = !DILocation(line: 678, column: 38, scope: !1638)
!1779 = !DILocation(line: 680, column: 21, scope: !1780)
!1780 = distinct !DILexicalBlock(scope: !1638, file: !105, line: 680, column: 17)
!1781 = !DILocation(line: 680, column: 19, scope: !1780)
!1782 = !DILocation(line: 680, column: 23, scope: !1780)
!1783 = !DILocation(line: 680, column: 27, scope: !1780)
!1784 = !DILocation(line: 680, column: 45, scope: !1780)
!1785 = !DILocation(line: 680, column: 50, scope: !1780)
!1786 = !DILocation(line: 680, column: 17, scope: !1638)
!1787 = !DILocalVariable(name: "ilim", scope: !1788, file: !105, line: 684, type: !99)
!1788 = distinct !DILexicalBlock(scope: !1780, file: !105, line: 681, column: 15)
!1789 = !DILocation(line: 684, column: 24, scope: !1788)
!1790 = !DILocation(line: 684, column: 31, scope: !1788)
!1791 = !DILocation(line: 684, column: 35, scope: !1788)
!1792 = !DILocation(line: 684, column: 33, scope: !1788)
!1793 = !DILocation(line: 686, column: 17, scope: !1788)
!1794 = !DILocation(line: 688, column: 25, scope: !1795)
!1795 = distinct !DILexicalBlock(scope: !1796, file: !105, line: 688, column: 25)
!1796 = distinct !DILexicalBlock(scope: !1797, file: !105, line: 687, column: 19)
!1797 = distinct !DILexicalBlock(scope: !1798, file: !105, line: 686, column: 17)
!1798 = distinct !DILexicalBlock(scope: !1788, file: !105, line: 686, column: 17)
!1799 = !DILocation(line: 688, column: 43, scope: !1795)
!1800 = !DILocation(line: 688, column: 48, scope: !1795)
!1801 = !DILocation(line: 688, column: 25, scope: !1796)
!1802 = !DILocation(line: 690, column: 25, scope: !1803)
!1803 = distinct !DILexicalBlock(scope: !1795, file: !105, line: 689, column: 23)
!1804 = !DILocation(line: 690, column: 25, scope: !1805)
!1805 = distinct !DILexicalBlock(scope: !1806, file: !105, line: 690, column: 25)
!1806 = distinct !DILexicalBlock(scope: !1803, file: !105, line: 690, column: 25)
!1807 = !DILocation(line: 690, column: 25, scope: !1806)
!1808 = !DILocation(line: 690, column: 25, scope: !1809)
!1809 = distinct !DILexicalBlock(scope: !1806, file: !105, line: 690, column: 25)
!1810 = !DILocation(line: 690, column: 25, scope: !1811)
!1811 = distinct !DILexicalBlock(scope: !1809, file: !105, line: 690, column: 25)
!1812 = !DILocation(line: 690, column: 25, scope: !1813)
!1813 = distinct !DILexicalBlock(scope: !1814, file: !105, line: 690, column: 25)
!1814 = distinct !DILexicalBlock(scope: !1811, file: !105, line: 690, column: 25)
!1815 = !DILocation(line: 690, column: 25, scope: !1814)
!1816 = !DILocation(line: 690, column: 25, scope: !1817)
!1817 = distinct !DILexicalBlock(scope: !1818, file: !105, line: 690, column: 25)
!1818 = distinct !DILexicalBlock(scope: !1811, file: !105, line: 690, column: 25)
!1819 = !DILocation(line: 690, column: 25, scope: !1818)
!1820 = !DILocation(line: 690, column: 25, scope: !1821)
!1821 = distinct !DILexicalBlock(scope: !1822, file: !105, line: 690, column: 25)
!1822 = distinct !DILexicalBlock(scope: !1811, file: !105, line: 690, column: 25)
!1823 = !DILocation(line: 690, column: 25, scope: !1822)
!1824 = !DILocation(line: 690, column: 25, scope: !1825)
!1825 = distinct !DILexicalBlock(scope: !1826, file: !105, line: 690, column: 25)
!1826 = distinct !DILexicalBlock(scope: !1806, file: !105, line: 690, column: 25)
!1827 = !DILocation(line: 690, column: 25, scope: !1826)
!1828 = !DILocation(line: 691, column: 25, scope: !1803)
!1829 = !DILocation(line: 691, column: 25, scope: !1830)
!1830 = distinct !DILexicalBlock(scope: !1831, file: !105, line: 691, column: 25)
!1831 = distinct !DILexicalBlock(scope: !1803, file: !105, line: 691, column: 25)
!1832 = !DILocation(line: 691, column: 25, scope: !1831)
!1833 = !DILocation(line: 692, column: 25, scope: !1803)
!1834 = !DILocation(line: 692, column: 25, scope: !1835)
!1835 = distinct !DILexicalBlock(scope: !1836, file: !105, line: 692, column: 25)
!1836 = distinct !DILexicalBlock(scope: !1803, file: !105, line: 692, column: 25)
!1837 = !DILocation(line: 692, column: 25, scope: !1836)
!1838 = !DILocation(line: 693, column: 36, scope: !1803)
!1839 = !DILocation(line: 693, column: 38, scope: !1803)
!1840 = !DILocation(line: 693, column: 33, scope: !1803)
!1841 = !DILocation(line: 693, column: 29, scope: !1803)
!1842 = !DILocation(line: 693, column: 27, scope: !1803)
!1843 = !DILocation(line: 694, column: 23, scope: !1803)
!1844 = !DILocation(line: 695, column: 30, scope: !1845)
!1845 = distinct !DILexicalBlock(scope: !1795, file: !105, line: 695, column: 30)
!1846 = !DILocation(line: 695, column: 30, scope: !1795)
!1847 = !DILocation(line: 697, column: 25, scope: !1848)
!1848 = distinct !DILexicalBlock(scope: !1845, file: !105, line: 696, column: 23)
!1849 = !DILocation(line: 697, column: 25, scope: !1850)
!1850 = distinct !DILexicalBlock(scope: !1851, file: !105, line: 697, column: 25)
!1851 = distinct !DILexicalBlock(scope: !1848, file: !105, line: 697, column: 25)
!1852 = !DILocation(line: 697, column: 25, scope: !1851)
!1853 = !DILocation(line: 698, column: 40, scope: !1848)
!1854 = !DILocation(line: 699, column: 23, scope: !1848)
!1855 = !DILocation(line: 700, column: 25, scope: !1856)
!1856 = distinct !DILexicalBlock(scope: !1796, file: !105, line: 700, column: 25)
!1857 = !DILocation(line: 700, column: 33, scope: !1856)
!1858 = !DILocation(line: 700, column: 35, scope: !1856)
!1859 = !DILocation(line: 700, column: 30, scope: !1856)
!1860 = !DILocation(line: 700, column: 25, scope: !1796)
!1861 = !DILocation(line: 701, column: 23, scope: !1856)
!1862 = !DILocation(line: 702, column: 21, scope: !1796)
!1863 = !DILocation(line: 702, column: 21, scope: !1864)
!1864 = distinct !DILexicalBlock(scope: !1865, file: !105, line: 702, column: 21)
!1865 = distinct !DILexicalBlock(scope: !1796, file: !105, line: 702, column: 21)
!1866 = !DILocation(line: 702, column: 21, scope: !1865)
!1867 = !DILocation(line: 702, column: 21, scope: !1868)
!1868 = distinct !DILexicalBlock(scope: !1864, file: !105, line: 702, column: 21)
!1869 = !DILocation(line: 702, column: 21, scope: !1870)
!1870 = distinct !DILexicalBlock(scope: !1871, file: !105, line: 702, column: 21)
!1871 = distinct !DILexicalBlock(scope: !1868, file: !105, line: 702, column: 21)
!1872 = !DILocation(line: 702, column: 21, scope: !1871)
!1873 = !DILocation(line: 702, column: 21, scope: !1874)
!1874 = distinct !DILexicalBlock(scope: !1875, file: !105, line: 702, column: 21)
!1875 = distinct !DILexicalBlock(scope: !1868, file: !105, line: 702, column: 21)
!1876 = !DILocation(line: 702, column: 21, scope: !1875)
!1877 = !DILocation(line: 703, column: 21, scope: !1796)
!1878 = !DILocation(line: 703, column: 21, scope: !1879)
!1879 = distinct !DILexicalBlock(scope: !1880, file: !105, line: 703, column: 21)
!1880 = distinct !DILexicalBlock(scope: !1796, file: !105, line: 703, column: 21)
!1881 = !DILocation(line: 703, column: 21, scope: !1880)
!1882 = !DILocation(line: 704, column: 25, scope: !1796)
!1883 = !DILocation(line: 704, column: 29, scope: !1796)
!1884 = !DILocation(line: 704, column: 23, scope: !1796)
!1885 = !DILocation(line: 686, column: 17, scope: !1797)
!1886 = distinct !{!1886, !1887, !1888}
!1887 = !DILocation(line: 686, column: 17, scope: !1798)
!1888 = !DILocation(line: 705, column: 19, scope: !1798)
!1889 = !DILocation(line: 707, column: 17, scope: !1788)
!1890 = !DILocation(line: 710, column: 9, scope: !1388)
!1891 = !DILocation(line: 712, column: 16, scope: !1892)
!1892 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 712, column: 11)
!1893 = !DILocation(line: 712, column: 34, scope: !1892)
!1894 = !DILocation(line: 712, column: 37, scope: !1892)
!1895 = !DILocation(line: 712, column: 51, scope: !1892)
!1896 = !DILocation(line: 713, column: 15, scope: !1892)
!1897 = !DILocation(line: 713, column: 18, scope: !1892)
!1898 = !DILocation(line: 714, column: 14, scope: !1892)
!1899 = !DILocation(line: 714, column: 17, scope: !1892)
!1900 = !DILocation(line: 715, column: 14, scope: !1892)
!1901 = !DILocation(line: 715, column: 17, scope: !1892)
!1902 = !DILocation(line: 715, column: 33, scope: !1892)
!1903 = !DILocation(line: 715, column: 35, scope: !1892)
!1904 = !DILocation(line: 715, column: 51, scope: !1892)
!1905 = !DILocation(line: 715, column: 53, scope: !1892)
!1906 = !DILocation(line: 715, column: 47, scope: !1892)
!1907 = !DILocation(line: 715, column: 65, scope: !1892)
!1908 = !DILocation(line: 716, column: 11, scope: !1892)
!1909 = !DILocation(line: 716, column: 15, scope: !1892)
!1910 = !DILocation(line: 712, column: 11, scope: !1334)
!1911 = !DILocation(line: 717, column: 9, scope: !1892)
!1912 = !DILabel(scope: !1334, name: "store_escape", file: !105, line: 719)
!1913 = !DILocation(line: 719, column: 5, scope: !1334)
!1914 = !DILocation(line: 720, column: 7, scope: !1334)
!1915 = !DILocation(line: 720, column: 7, scope: !1916)
!1916 = distinct !DILexicalBlock(scope: !1917, file: !105, line: 720, column: 7)
!1917 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 720, column: 7)
!1918 = !DILocation(line: 720, column: 7, scope: !1917)
!1919 = !DILocation(line: 720, column: 7, scope: !1920)
!1920 = distinct !DILexicalBlock(scope: !1917, file: !105, line: 720, column: 7)
!1921 = !DILocation(line: 720, column: 7, scope: !1922)
!1922 = distinct !DILexicalBlock(scope: !1920, file: !105, line: 720, column: 7)
!1923 = !DILocation(line: 720, column: 7, scope: !1924)
!1924 = distinct !DILexicalBlock(scope: !1925, file: !105, line: 720, column: 7)
!1925 = distinct !DILexicalBlock(scope: !1922, file: !105, line: 720, column: 7)
!1926 = !DILocation(line: 720, column: 7, scope: !1925)
!1927 = !DILocation(line: 720, column: 7, scope: !1928)
!1928 = distinct !DILexicalBlock(scope: !1929, file: !105, line: 720, column: 7)
!1929 = distinct !DILexicalBlock(scope: !1922, file: !105, line: 720, column: 7)
!1930 = !DILocation(line: 720, column: 7, scope: !1929)
!1931 = !DILocation(line: 720, column: 7, scope: !1932)
!1932 = distinct !DILexicalBlock(scope: !1933, file: !105, line: 720, column: 7)
!1933 = distinct !DILexicalBlock(scope: !1922, file: !105, line: 720, column: 7)
!1934 = !DILocation(line: 720, column: 7, scope: !1933)
!1935 = !DILocation(line: 720, column: 7, scope: !1936)
!1936 = distinct !DILexicalBlock(scope: !1937, file: !105, line: 720, column: 7)
!1937 = distinct !DILexicalBlock(scope: !1917, file: !105, line: 720, column: 7)
!1938 = !DILocation(line: 720, column: 7, scope: !1937)
!1939 = !DILabel(scope: !1334, name: "store_c", file: !105, line: 722)
!1940 = !DILocation(line: 722, column: 5, scope: !1334)
!1941 = !DILocation(line: 723, column: 7, scope: !1334)
!1942 = !DILocation(line: 723, column: 7, scope: !1943)
!1943 = distinct !DILexicalBlock(scope: !1944, file: !105, line: 723, column: 7)
!1944 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 723, column: 7)
!1945 = !DILocation(line: 723, column: 7, scope: !1944)
!1946 = !DILocation(line: 723, column: 7, scope: !1947)
!1947 = distinct !DILexicalBlock(scope: !1943, file: !105, line: 723, column: 7)
!1948 = !DILocation(line: 723, column: 7, scope: !1949)
!1949 = distinct !DILexicalBlock(scope: !1950, file: !105, line: 723, column: 7)
!1950 = distinct !DILexicalBlock(scope: !1947, file: !105, line: 723, column: 7)
!1951 = !DILocation(line: 723, column: 7, scope: !1950)
!1952 = !DILocation(line: 723, column: 7, scope: !1953)
!1953 = distinct !DILexicalBlock(scope: !1954, file: !105, line: 723, column: 7)
!1954 = distinct !DILexicalBlock(scope: !1947, file: !105, line: 723, column: 7)
!1955 = !DILocation(line: 723, column: 7, scope: !1954)
!1956 = !DILocation(line: 724, column: 7, scope: !1334)
!1957 = !DILocation(line: 724, column: 7, scope: !1958)
!1958 = distinct !DILexicalBlock(scope: !1959, file: !105, line: 724, column: 7)
!1959 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 724, column: 7)
!1960 = !DILocation(line: 724, column: 7, scope: !1959)
!1961 = !DILocation(line: 726, column: 13, scope: !1962)
!1962 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 726, column: 11)
!1963 = !DILocation(line: 726, column: 11, scope: !1334)
!1964 = !DILocation(line: 727, column: 38, scope: !1962)
!1965 = !DILocation(line: 727, column: 9, scope: !1962)
!1966 = !DILocation(line: 728, column: 5, scope: !1334)
!1967 = !DILocation(line: 400, column: 75, scope: !1323)
!1968 = !DILocation(line: 400, column: 3, scope: !1323)
!1969 = distinct !{!1969, !1332, !1970}
!1970 = !DILocation(line: 728, column: 5, scope: !1320)
!1971 = !DILocation(line: 730, column: 7, scope: !1972)
!1972 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 730, column: 7)
!1973 = !DILocation(line: 730, column: 11, scope: !1972)
!1974 = !DILocation(line: 730, column: 16, scope: !1972)
!1975 = !DILocation(line: 730, column: 19, scope: !1972)
!1976 = !DILocation(line: 730, column: 33, scope: !1972)
!1977 = !DILocation(line: 731, column: 7, scope: !1972)
!1978 = !DILocation(line: 731, column: 10, scope: !1972)
!1979 = !DILocation(line: 730, column: 7, scope: !1180)
!1980 = !DILocation(line: 732, column: 5, scope: !1972)
!1981 = !DILocation(line: 738, column: 7, scope: !1982)
!1982 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 738, column: 7)
!1983 = !DILocation(line: 738, column: 21, scope: !1982)
!1984 = !DILocation(line: 738, column: 51, scope: !1982)
!1985 = !DILocation(line: 738, column: 56, scope: !1982)
!1986 = !DILocation(line: 739, column: 7, scope: !1982)
!1987 = !DILocation(line: 739, column: 10, scope: !1982)
!1988 = !DILocation(line: 738, column: 7, scope: !1180)
!1989 = !DILocation(line: 741, column: 11, scope: !1990)
!1990 = distinct !DILexicalBlock(scope: !1991, file: !105, line: 741, column: 11)
!1991 = distinct !DILexicalBlock(scope: !1982, file: !105, line: 740, column: 5)
!1992 = !DILocation(line: 741, column: 11, scope: !1991)
!1993 = !DILocation(line: 742, column: 42, scope: !1990)
!1994 = !DILocation(line: 742, column: 50, scope: !1990)
!1995 = !DILocation(line: 742, column: 67, scope: !1990)
!1996 = !DILocation(line: 742, column: 72, scope: !1990)
!1997 = !DILocation(line: 744, column: 42, scope: !1990)
!1998 = !DILocation(line: 744, column: 49, scope: !1990)
!1999 = !DILocation(line: 745, column: 42, scope: !1990)
!2000 = !DILocation(line: 745, column: 54, scope: !1990)
!2001 = !DILocation(line: 742, column: 16, scope: !1990)
!2002 = !DILocation(line: 742, column: 9, scope: !1990)
!2003 = !DILocation(line: 746, column: 18, scope: !2004)
!2004 = distinct !DILexicalBlock(scope: !1990, file: !105, line: 746, column: 16)
!2005 = !DILocation(line: 746, column: 29, scope: !2004)
!2006 = !DILocation(line: 746, column: 32, scope: !2004)
!2007 = !DILocation(line: 746, column: 16, scope: !1990)
!2008 = !DILocation(line: 749, column: 24, scope: !2009)
!2009 = distinct !DILexicalBlock(scope: !2004, file: !105, line: 747, column: 9)
!2010 = !DILocation(line: 749, column: 22, scope: !2009)
!2011 = !DILocation(line: 750, column: 15, scope: !2009)
!2012 = !DILocation(line: 751, column: 11, scope: !2009)
!2013 = !DILocation(line: 753, column: 5, scope: !1991)
!2014 = !DILocation(line: 755, column: 7, scope: !2015)
!2015 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 755, column: 7)
!2016 = !DILocation(line: 755, column: 20, scope: !2015)
!2017 = !DILocation(line: 755, column: 24, scope: !2015)
!2018 = !DILocation(line: 755, column: 7, scope: !1180)
!2019 = !DILocation(line: 756, column: 5, scope: !2015)
!2020 = !DILocation(line: 756, column: 13, scope: !2021)
!2021 = distinct !DILexicalBlock(scope: !2022, file: !105, line: 756, column: 5)
!2022 = distinct !DILexicalBlock(scope: !2015, file: !105, line: 756, column: 5)
!2023 = !DILocation(line: 756, column: 12, scope: !2021)
!2024 = !DILocation(line: 756, column: 5, scope: !2022)
!2025 = !DILocation(line: 757, column: 7, scope: !2021)
!2026 = !DILocation(line: 757, column: 7, scope: !2027)
!2027 = distinct !DILexicalBlock(scope: !2028, file: !105, line: 757, column: 7)
!2028 = distinct !DILexicalBlock(scope: !2021, file: !105, line: 757, column: 7)
!2029 = !DILocation(line: 757, column: 7, scope: !2028)
!2030 = !DILocation(line: 756, column: 39, scope: !2021)
!2031 = !DILocation(line: 756, column: 5, scope: !2021)
!2032 = distinct !{!2032, !2024, !2033}
!2033 = !DILocation(line: 757, column: 7, scope: !2022)
!2034 = !DILocation(line: 759, column: 7, scope: !2035)
!2035 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 759, column: 7)
!2036 = !DILocation(line: 759, column: 13, scope: !2035)
!2037 = !DILocation(line: 759, column: 11, scope: !2035)
!2038 = !DILocation(line: 759, column: 7, scope: !1180)
!2039 = !DILocation(line: 760, column: 5, scope: !2035)
!2040 = !DILocation(line: 760, column: 12, scope: !2035)
!2041 = !DILocation(line: 760, column: 17, scope: !2035)
!2042 = !DILocation(line: 761, column: 10, scope: !1180)
!2043 = !DILocation(line: 761, column: 3, scope: !1180)
!2044 = !DILabel(scope: !1180, name: "force_outer_quoting_style", file: !105, line: 763)
!2045 = !DILocation(line: 763, column: 2, scope: !1180)
!2046 = !DILocation(line: 766, column: 7, scope: !2047)
!2047 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 766, column: 7)
!2048 = !DILocation(line: 766, column: 21, scope: !2047)
!2049 = !DILocation(line: 766, column: 51, scope: !2047)
!2050 = !DILocation(line: 766, column: 54, scope: !2047)
!2051 = !DILocation(line: 766, column: 7, scope: !1180)
!2052 = !DILocation(line: 767, column: 19, scope: !2047)
!2053 = !DILocation(line: 767, column: 5, scope: !2047)
!2054 = !DILocation(line: 768, column: 36, scope: !1180)
!2055 = !DILocation(line: 768, column: 44, scope: !1180)
!2056 = !DILocation(line: 768, column: 56, scope: !1180)
!2057 = !DILocation(line: 768, column: 61, scope: !1180)
!2058 = !DILocation(line: 769, column: 36, scope: !1180)
!2059 = !DILocation(line: 770, column: 36, scope: !1180)
!2060 = !DILocation(line: 770, column: 42, scope: !1180)
!2061 = !DILocation(line: 771, column: 36, scope: !1180)
!2062 = !DILocation(line: 771, column: 48, scope: !1180)
!2063 = !DILocation(line: 768, column: 10, scope: !1180)
!2064 = !DILocation(line: 768, column: 3, scope: !1180)
!2065 = !DILocation(line: 772, column: 1, scope: !1180)
!2066 = !DILocalVariable(name: "escaping", scope: !2067, file: !105, line: 405, type: !41)
!2067 = distinct !DILexicalBlock(scope: !2068, file: !105, line: 401, column: 5)
!2068 = distinct !DILexicalBlock(scope: !2069, file: !105, line: 400, column: 3)
!2069 = distinct !DILexicalBlock(scope: !2070, file: !105, line: 400, column: 3)
!2070 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !105, file: !105, line: 256, type: !1181, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2071, retainedNodes: !11)
!2071 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2072, nameTableKind: None)
!2072 = !{!2073, !2075, !2077, !2086, !2088, !2090, !2097, !2099}
!2073 = !DIGlobalVariableExpression(var: !2074, expr: !DIExpression())
!2074 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2071, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2075 = !DIGlobalVariableExpression(var: !2076, expr: !DIExpression())
!2076 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2071, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2077 = !DIGlobalVariableExpression(var: !2078, expr: !DIExpression())
!2078 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2071, file: !105, line: 1052, type: !2079, isLocal: false, isDefinition: true)
!2079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2080)
!2080 = !{!2081, !2082, !2083, !2084, !2085}
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2079, file: !105, line: 68, baseType: !82, size: 32)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2079, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2079, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2079, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2079, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2086 = !DIGlobalVariableExpression(var: !2087, expr: !DIExpression())
!2087 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2071, file: !105, line: 116, type: !2079, isLocal: true, isDefinition: true)
!2088 = !DIGlobalVariableExpression(var: !2089, expr: !DIExpression())
!2089 = distinct !DIGlobalVariable(name: "slot0", scope: !2071, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2090 = !DIGlobalVariableExpression(var: !2091, expr: !DIExpression())
!2091 = distinct !DIGlobalVariable(name: "slotvec", scope: !2071, file: !105, line: 845, type: !2092, isLocal: true, isDefinition: true)
!2092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2093, size: 64)
!2093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2094)
!2094 = !{!2095, !2096}
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2093, file: !105, line: 836, baseType: !99, size: 64)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2093, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2097 = !DIGlobalVariableExpression(var: !2098, expr: !DIExpression())
!2098 = distinct !DIGlobalVariable(name: "nslots", scope: !2071, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2099 = !DIGlobalVariableExpression(var: !2100, expr: !DIExpression())
!2100 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2071, file: !105, line: 844, type: !2093, isLocal: true, isDefinition: true)
!2101 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2067, file: !105, line: 406, type: !41)
!2102 = distinct !DISubprogram(name: "gettext_quote", scope: !105, file: !105, line: 207, type: !2103, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2103 = !DISubroutineType(types: !2104)
!2104 = !{!23, !23, !82}
!2105 = !DILocalVariable(name: "msgid", arg: 1, scope: !2102, file: !105, line: 207, type: !23)
!2106 = !DILocation(line: 207, column: 28, scope: !2102)
!2107 = !DILocalVariable(name: "s", arg: 2, scope: !2102, file: !105, line: 207, type: !82)
!2108 = !DILocation(line: 207, column: 54, scope: !2102)
!2109 = !DILocalVariable(name: "translation", scope: !2102, file: !105, line: 209, type: !23)
!2110 = !DILocation(line: 209, column: 15, scope: !2102)
!2111 = !DILocation(line: 209, column: 29, scope: !2102)
!2112 = !DILocalVariable(name: "locale_code", scope: !2102, file: !105, line: 210, type: !23)
!2113 = !DILocation(line: 210, column: 15, scope: !2102)
!2114 = !DILocation(line: 212, column: 7, scope: !2115)
!2115 = distinct !DILexicalBlock(scope: !2102, file: !105, line: 212, column: 7)
!2116 = !DILocation(line: 212, column: 22, scope: !2115)
!2117 = !DILocation(line: 212, column: 19, scope: !2115)
!2118 = !DILocation(line: 212, column: 7, scope: !2102)
!2119 = !DILocation(line: 213, column: 12, scope: !2115)
!2120 = !DILocation(line: 213, column: 5, scope: !2115)
!2121 = !DILocation(line: 233, column: 17, scope: !2102)
!2122 = !DILocation(line: 233, column: 15, scope: !2102)
!2123 = !DILocation(line: 234, column: 7, scope: !2124)
!2124 = distinct !DILexicalBlock(scope: !2102, file: !105, line: 234, column: 7)
!2125 = !DILocation(line: 234, column: 7, scope: !2102)
!2126 = !DILocation(line: 235, column: 12, scope: !2124)
!2127 = !DILocation(line: 235, column: 21, scope: !2124)
!2128 = !DILocation(line: 235, column: 5, scope: !2124)
!2129 = !DILocation(line: 236, column: 7, scope: !2130)
!2130 = distinct !DILexicalBlock(scope: !2102, file: !105, line: 236, column: 7)
!2131 = !DILocation(line: 236, column: 7, scope: !2102)
!2132 = !DILocation(line: 237, column: 12, scope: !2130)
!2133 = !DILocation(line: 237, column: 21, scope: !2130)
!2134 = !DILocation(line: 237, column: 5, scope: !2130)
!2135 = !DILocation(line: 239, column: 11, scope: !2102)
!2136 = !DILocation(line: 239, column: 13, scope: !2102)
!2137 = !DILocation(line: 239, column: 3, scope: !2102)
!2138 = !DILocation(line: 240, column: 1, scope: !2102)
!2139 = !DILocalVariable(name: "msgid", arg: 1, scope: !2140, file: !105, line: 207, type: !23)
!2140 = distinct !DISubprogram(name: "gettext_quote", scope: !105, file: !105, line: 207, type: !2103, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2141, retainedNodes: !11)
!2141 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2142, nameTableKind: None)
!2142 = !{!2143, !2145, !2147, !2156, !2158, !2160, !2167, !2169}
!2143 = !DIGlobalVariableExpression(var: !2144, expr: !DIExpression())
!2144 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2141, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2145 = !DIGlobalVariableExpression(var: !2146, expr: !DIExpression())
!2146 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2141, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2147 = !DIGlobalVariableExpression(var: !2148, expr: !DIExpression())
!2148 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2141, file: !105, line: 1052, type: !2149, isLocal: false, isDefinition: true)
!2149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2150)
!2150 = !{!2151, !2152, !2153, !2154, !2155}
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2149, file: !105, line: 68, baseType: !82, size: 32)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2149, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2149, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2149, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2149, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2156 = !DIGlobalVariableExpression(var: !2157, expr: !DIExpression())
!2157 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2141, file: !105, line: 116, type: !2149, isLocal: true, isDefinition: true)
!2158 = !DIGlobalVariableExpression(var: !2159, expr: !DIExpression())
!2159 = distinct !DIGlobalVariable(name: "slot0", scope: !2141, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2160 = !DIGlobalVariableExpression(var: !2161, expr: !DIExpression())
!2161 = distinct !DIGlobalVariable(name: "slotvec", scope: !2141, file: !105, line: 845, type: !2162, isLocal: true, isDefinition: true)
!2162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2163, size: 64)
!2163 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2164)
!2164 = !{!2165, !2166}
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2163, file: !105, line: 836, baseType: !99, size: 64)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2163, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2167 = !DIGlobalVariableExpression(var: !2168, expr: !DIExpression())
!2168 = distinct !DIGlobalVariable(name: "nslots", scope: !2141, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2169 = !DIGlobalVariableExpression(var: !2170, expr: !DIExpression())
!2170 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2141, file: !105, line: 844, type: !2163, isLocal: true, isDefinition: true)
!2171 = !DILocalVariable(name: "s", arg: 2, scope: !2140, file: !105, line: 207, type: !82)
!2172 = !DILocalVariable(name: "translation", scope: !2140, file: !105, line: 209, type: !23)
!2173 = !DILocalVariable(name: "locale_code", scope: !2140, file: !105, line: 210, type: !23)
!2174 = distinct !DISubprogram(name: "quotearg_char", scope: !105, file: !105, line: 991, type: !2175, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2175 = !DISubroutineType(types: !2176)
!2176 = !{!8, !23, !9}
!2177 = !DILocalVariable(name: "arg", arg: 1, scope: !2174, file: !105, line: 991, type: !23)
!2178 = !DILocation(line: 991, column: 28, scope: !2174)
!2179 = !DILocalVariable(name: "ch", arg: 2, scope: !2174, file: !105, line: 991, type: !9)
!2180 = !DILocation(line: 991, column: 38, scope: !2174)
!2181 = !DILocation(line: 993, column: 29, scope: !2174)
!2182 = !DILocation(line: 993, column: 44, scope: !2174)
!2183 = !DILocation(line: 993, column: 10, scope: !2174)
!2184 = !DILocation(line: 993, column: 3, scope: !2174)
!2185 = !DILocalVariable(name: "arg", arg: 1, scope: !2186, file: !105, line: 991, type: !23)
!2186 = distinct !DISubprogram(name: "quotearg_char", scope: !105, file: !105, line: 991, type: !2175, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2187, retainedNodes: !11)
!2187 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2188, nameTableKind: None)
!2188 = !{!2189, !2191, !2193, !2202, !2204, !2206, !2213, !2215}
!2189 = !DIGlobalVariableExpression(var: !2190, expr: !DIExpression())
!2190 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2187, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2191 = !DIGlobalVariableExpression(var: !2192, expr: !DIExpression())
!2192 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2187, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2193 = !DIGlobalVariableExpression(var: !2194, expr: !DIExpression())
!2194 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2187, file: !105, line: 1052, type: !2195, isLocal: false, isDefinition: true)
!2195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2196)
!2196 = !{!2197, !2198, !2199, !2200, !2201}
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2195, file: !105, line: 68, baseType: !82, size: 32)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2195, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2195, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2195, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2195, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2202 = !DIGlobalVariableExpression(var: !2203, expr: !DIExpression())
!2203 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2187, file: !105, line: 116, type: !2195, isLocal: true, isDefinition: true)
!2204 = !DIGlobalVariableExpression(var: !2205, expr: !DIExpression())
!2205 = distinct !DIGlobalVariable(name: "slot0", scope: !2187, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2206 = !DIGlobalVariableExpression(var: !2207, expr: !DIExpression())
!2207 = distinct !DIGlobalVariable(name: "slotvec", scope: !2187, file: !105, line: 845, type: !2208, isLocal: true, isDefinition: true)
!2208 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2209, size: 64)
!2209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2210)
!2210 = !{!2211, !2212}
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2209, file: !105, line: 836, baseType: !99, size: 64)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2209, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2213 = !DIGlobalVariableExpression(var: !2214, expr: !DIExpression())
!2214 = distinct !DIGlobalVariable(name: "nslots", scope: !2187, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2215 = !DIGlobalVariableExpression(var: !2216, expr: !DIExpression())
!2216 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2187, file: !105, line: 844, type: !2209, isLocal: true, isDefinition: true)
!2217 = !DILocalVariable(name: "ch", arg: 2, scope: !2186, file: !105, line: 991, type: !9)
!2218 = distinct !DISubprogram(name: "quotearg_colon", scope: !105, file: !105, line: 997, type: !2219, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2219 = !DISubroutineType(types: !2220)
!2220 = !{!8, !23}
!2221 = !DILocalVariable(name: "arg", arg: 1, scope: !2218, file: !105, line: 997, type: !23)
!2222 = !DILocation(line: 997, column: 29, scope: !2218)
!2223 = !DILocation(line: 999, column: 25, scope: !2218)
!2224 = !DILocation(line: 999, column: 10, scope: !2218)
!2225 = !DILocation(line: 999, column: 3, scope: !2218)
!2226 = !DILocalVariable(name: "arg", arg: 1, scope: !2227, file: !105, line: 997, type: !23)
!2227 = distinct !DISubprogram(name: "quotearg_colon", scope: !105, file: !105, line: 997, type: !2219, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2228, retainedNodes: !11)
!2228 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2229, nameTableKind: None)
!2229 = !{!2230, !2232, !2234, !2243, !2245, !2247, !2254, !2256}
!2230 = !DIGlobalVariableExpression(var: !2231, expr: !DIExpression())
!2231 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2228, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2232 = !DIGlobalVariableExpression(var: !2233, expr: !DIExpression())
!2233 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2228, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2234 = !DIGlobalVariableExpression(var: !2235, expr: !DIExpression())
!2235 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2228, file: !105, line: 1052, type: !2236, isLocal: false, isDefinition: true)
!2236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2237)
!2237 = !{!2238, !2239, !2240, !2241, !2242}
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2236, file: !105, line: 68, baseType: !82, size: 32)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2236, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2236, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2236, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2236, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2243 = !DIGlobalVariableExpression(var: !2244, expr: !DIExpression())
!2244 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2228, file: !105, line: 116, type: !2236, isLocal: true, isDefinition: true)
!2245 = !DIGlobalVariableExpression(var: !2246, expr: !DIExpression())
!2246 = distinct !DIGlobalVariable(name: "slot0", scope: !2228, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2247 = !DIGlobalVariableExpression(var: !2248, expr: !DIExpression())
!2248 = distinct !DIGlobalVariable(name: "slotvec", scope: !2228, file: !105, line: 845, type: !2249, isLocal: true, isDefinition: true)
!2249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2250, size: 64)
!2250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2251)
!2251 = !{!2252, !2253}
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2250, file: !105, line: 836, baseType: !99, size: 64)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2250, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2254 = !DIGlobalVariableExpression(var: !2255, expr: !DIExpression())
!2255 = distinct !DIGlobalVariable(name: "nslots", scope: !2228, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2256 = !DIGlobalVariableExpression(var: !2257, expr: !DIExpression())
!2257 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2228, file: !105, line: 844, type: !2250, isLocal: true, isDefinition: true)
!2258 = distinct !DISubprogram(name: "quote_n_mem", scope: !105, file: !105, line: 1061, type: !2259, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2259 = !DISubroutineType(types: !2260)
!2260 = !{!23, !6, !23, !99}
!2261 = !DILocalVariable(name: "n", arg: 1, scope: !2258, file: !105, line: 1061, type: !6)
!2262 = !DILocation(line: 1061, column: 18, scope: !2258)
!2263 = !DILocalVariable(name: "arg", arg: 2, scope: !2258, file: !105, line: 1061, type: !23)
!2264 = !DILocation(line: 1061, column: 33, scope: !2258)
!2265 = !DILocalVariable(name: "argsize", arg: 3, scope: !2258, file: !105, line: 1061, type: !99)
!2266 = !DILocation(line: 1061, column: 45, scope: !2258)
!2267 = !DILocation(line: 1063, column: 30, scope: !2258)
!2268 = !DILocation(line: 1063, column: 33, scope: !2258)
!2269 = !DILocation(line: 1063, column: 38, scope: !2258)
!2270 = !DILocation(line: 1063, column: 10, scope: !2258)
!2271 = !DILocation(line: 1063, column: 3, scope: !2258)
!2272 = !DILocalVariable(name: "n", arg: 1, scope: !2273, file: !105, line: 1061, type: !6)
!2273 = distinct !DISubprogram(name: "quote_n_mem", scope: !105, file: !105, line: 1061, type: !2259, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2274, retainedNodes: !11)
!2274 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2275, nameTableKind: None)
!2275 = !{!2276, !2278, !2280, !2289, !2291, !2293, !2300, !2302}
!2276 = !DIGlobalVariableExpression(var: !2277, expr: !DIExpression())
!2277 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2274, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2278 = !DIGlobalVariableExpression(var: !2279, expr: !DIExpression())
!2279 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2274, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2280 = !DIGlobalVariableExpression(var: !2281, expr: !DIExpression())
!2281 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2274, file: !105, line: 1052, type: !2282, isLocal: false, isDefinition: true)
!2282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2283)
!2283 = !{!2284, !2285, !2286, !2287, !2288}
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2282, file: !105, line: 68, baseType: !82, size: 32)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2282, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2282, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2282, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2282, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2289 = !DIGlobalVariableExpression(var: !2290, expr: !DIExpression())
!2290 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2274, file: !105, line: 116, type: !2282, isLocal: true, isDefinition: true)
!2291 = !DIGlobalVariableExpression(var: !2292, expr: !DIExpression())
!2292 = distinct !DIGlobalVariable(name: "slot0", scope: !2274, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2293 = !DIGlobalVariableExpression(var: !2294, expr: !DIExpression())
!2294 = distinct !DIGlobalVariable(name: "slotvec", scope: !2274, file: !105, line: 845, type: !2295, isLocal: true, isDefinition: true)
!2295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2296, size: 64)
!2296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2297)
!2297 = !{!2298, !2299}
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2296, file: !105, line: 836, baseType: !99, size: 64)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2296, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2300 = !DIGlobalVariableExpression(var: !2301, expr: !DIExpression())
!2301 = distinct !DIGlobalVariable(name: "nslots", scope: !2274, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2302 = !DIGlobalVariableExpression(var: !2303, expr: !DIExpression())
!2303 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2274, file: !105, line: 844, type: !2296, isLocal: true, isDefinition: true)
!2304 = !DILocalVariable(name: "arg", arg: 2, scope: !2273, file: !105, line: 1061, type: !23)
!2305 = !DILocalVariable(name: "argsize", arg: 3, scope: !2273, file: !105, line: 1061, type: !99)
!2306 = distinct !DISubprogram(name: "quote_n", scope: !105, file: !105, line: 1073, type: !2307, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2307 = !DISubroutineType(types: !2308)
!2308 = !{!23, !6, !23}
!2309 = !DILocalVariable(name: "n", arg: 1, scope: !2306, file: !105, line: 1073, type: !6)
!2310 = !DILocation(line: 1073, column: 14, scope: !2306)
!2311 = !DILocalVariable(name: "arg", arg: 2, scope: !2306, file: !105, line: 1073, type: !23)
!2312 = !DILocation(line: 1073, column: 29, scope: !2306)
!2313 = !DILocation(line: 1075, column: 23, scope: !2306)
!2314 = !DILocation(line: 1075, column: 26, scope: !2306)
!2315 = !DILocation(line: 1075, column: 10, scope: !2306)
!2316 = !DILocation(line: 1075, column: 3, scope: !2306)
!2317 = !DILocalVariable(name: "n", arg: 1, scope: !2318, file: !105, line: 1073, type: !6)
!2318 = distinct !DISubprogram(name: "quote_n", scope: !105, file: !105, line: 1073, type: !2307, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2319, retainedNodes: !11)
!2319 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2320, nameTableKind: None)
!2320 = !{!2321, !2323, !2325, !2334, !2336, !2338, !2345, !2347}
!2321 = !DIGlobalVariableExpression(var: !2322, expr: !DIExpression())
!2322 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2319, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2323 = !DIGlobalVariableExpression(var: !2324, expr: !DIExpression())
!2324 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2319, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2325 = !DIGlobalVariableExpression(var: !2326, expr: !DIExpression())
!2326 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2319, file: !105, line: 1052, type: !2327, isLocal: false, isDefinition: true)
!2327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2328)
!2328 = !{!2329, !2330, !2331, !2332, !2333}
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2327, file: !105, line: 68, baseType: !82, size: 32)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2327, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2327, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2327, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2327, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2334 = !DIGlobalVariableExpression(var: !2335, expr: !DIExpression())
!2335 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2319, file: !105, line: 116, type: !2327, isLocal: true, isDefinition: true)
!2336 = !DIGlobalVariableExpression(var: !2337, expr: !DIExpression())
!2337 = distinct !DIGlobalVariable(name: "slot0", scope: !2319, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2338 = !DIGlobalVariableExpression(var: !2339, expr: !DIExpression())
!2339 = distinct !DIGlobalVariable(name: "slotvec", scope: !2319, file: !105, line: 845, type: !2340, isLocal: true, isDefinition: true)
!2340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2341, size: 64)
!2341 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2342)
!2342 = !{!2343, !2344}
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2341, file: !105, line: 836, baseType: !99, size: 64)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2341, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2345 = !DIGlobalVariableExpression(var: !2346, expr: !DIExpression())
!2346 = distinct !DIGlobalVariable(name: "nslots", scope: !2319, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2347 = !DIGlobalVariableExpression(var: !2348, expr: !DIExpression())
!2348 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2319, file: !105, line: 844, type: !2341, isLocal: true, isDefinition: true)
!2349 = !DILocalVariable(name: "arg", arg: 2, scope: !2318, file: !105, line: 1073, type: !23)
!2350 = distinct !DISubprogram(name: "quote", scope: !105, file: !105, line: 1079, type: !2351, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2351 = !DISubroutineType(types: !2352)
!2352 = !{!23, !23}
!2353 = !DILocalVariable(name: "arg", arg: 1, scope: !2350, file: !105, line: 1079, type: !23)
!2354 = !DILocation(line: 1079, column: 20, scope: !2350)
!2355 = !DILocation(line: 1081, column: 22, scope: !2350)
!2356 = !DILocation(line: 1081, column: 10, scope: !2350)
!2357 = !DILocation(line: 1081, column: 3, scope: !2350)
!2358 = !DILocalVariable(name: "arg", arg: 1, scope: !2359, file: !105, line: 1079, type: !23)
!2359 = distinct !DISubprogram(name: "quote", scope: !105, file: !105, line: 1079, type: !2351, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2360, retainedNodes: !11)
!2360 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2361, nameTableKind: None)
!2361 = !{!2362, !2364, !2366, !2375, !2377, !2379, !2386, !2388}
!2362 = !DIGlobalVariableExpression(var: !2363, expr: !DIExpression())
!2363 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2360, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2364 = !DIGlobalVariableExpression(var: !2365, expr: !DIExpression())
!2365 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2360, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2366 = !DIGlobalVariableExpression(var: !2367, expr: !DIExpression())
!2367 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2360, file: !105, line: 1052, type: !2368, isLocal: false, isDefinition: true)
!2368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2369)
!2369 = !{!2370, !2371, !2372, !2373, !2374}
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2368, file: !105, line: 68, baseType: !82, size: 32)
!2371 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2368, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2368, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2368, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2374 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2368, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2375 = !DIGlobalVariableExpression(var: !2376, expr: !DIExpression())
!2376 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2360, file: !105, line: 116, type: !2368, isLocal: true, isDefinition: true)
!2377 = !DIGlobalVariableExpression(var: !2378, expr: !DIExpression())
!2378 = distinct !DIGlobalVariable(name: "slot0", scope: !2360, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2379 = !DIGlobalVariableExpression(var: !2380, expr: !DIExpression())
!2380 = distinct !DIGlobalVariable(name: "slotvec", scope: !2360, file: !105, line: 845, type: !2381, isLocal: true, isDefinition: true)
!2381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2382, size: 64)
!2382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2383)
!2383 = !{!2384, !2385}
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2382, file: !105, line: 836, baseType: !99, size: 64)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2382, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2386 = !DIGlobalVariableExpression(var: !2387, expr: !DIExpression())
!2387 = distinct !DIGlobalVariable(name: "nslots", scope: !2360, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2388 = !DIGlobalVariableExpression(var: !2389, expr: !DIExpression())
!2389 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2360, file: !105, line: 844, type: !2382, isLocal: true, isDefinition: true)
!2390 = distinct !DISubprogram(name: "version_etc_arn", scope: !2391, file: !2391, line: 61, type: !2392, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2391 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2392 = !DISubroutineType(types: !2393)
!2393 = !{null, !2394, !23, !23, !23, !2449, !99}
!2394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2395, size: 64)
!2395 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !2397)
!2396 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !2399)
!2398 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2399 = !{!2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2415, !2417, !2418, !2419, !2423, !2424, !2426, !2430, !2433, !2435, !2438, !2441, !2442, !2443, !2444, !2445}
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2397, file: !2398, line: 51, baseType: !6, size: 32)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2397, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2397, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!2403 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2397, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2397, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2397, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2397, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2397, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2397, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2397, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2397, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2397, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2397, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!2413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2414, size: 64)
!2414 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2398, line: 36, flags: DIFlagFwdDecl)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2397, file: !2398, line: 70, baseType: !2416, size: 64, offset: 832)
!2416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2397, size: 64)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2397, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2397, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2397, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!2420 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2421, line: 152, baseType: !2422)
!2421 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2422 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2397, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2397, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!2425 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2397, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!2427 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 8, elements: !2428)
!2428 = !{!2429}
!2429 = !DISubrange(count: 1)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2397, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!2431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2432, size: 64)
!2432 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2398, line: 43, baseType: null)
!2433 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2397, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!2434 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2421, line: 153, baseType: !2422)
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2397, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!2436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2437, size: 64)
!2437 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2398, line: 37, flags: DIFlagFwdDecl)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2397, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!2439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2440, size: 64)
!2440 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2398, line: 38, flags: DIFlagFwdDecl)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2397, file: !2398, line: 93, baseType: !2416, size: 64, offset: 1344)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2397, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2397, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!2444 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2397, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2397, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!2446 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 160, elements: !2447)
!2447 = !{!2448}
!2448 = !DISubrange(count: 20)
!2449 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!2450 = !DILocalVariable(name: "stream", arg: 1, scope: !2390, file: !2391, line: 61, type: !2394)
!2451 = !DILocation(line: 61, column: 24, scope: !2390)
!2452 = !DILocalVariable(name: "command_name", arg: 2, scope: !2390, file: !2391, line: 62, type: !23)
!2453 = !DILocation(line: 62, column: 30, scope: !2390)
!2454 = !DILocalVariable(name: "package", arg: 3, scope: !2390, file: !2391, line: 62, type: !23)
!2455 = !DILocation(line: 62, column: 56, scope: !2390)
!2456 = !DILocalVariable(name: "version", arg: 4, scope: !2390, file: !2391, line: 63, type: !23)
!2457 = !DILocation(line: 63, column: 30, scope: !2390)
!2458 = !DILocalVariable(name: "authors", arg: 5, scope: !2390, file: !2391, line: 64, type: !2449)
!2459 = !DILocation(line: 64, column: 39, scope: !2390)
!2460 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2390, file: !2391, line: 64, type: !99)
!2461 = !DILocation(line: 64, column: 55, scope: !2390)
!2462 = !DILocation(line: 66, column: 7, scope: !2463)
!2463 = distinct !DILexicalBlock(scope: !2390, file: !2391, line: 66, column: 7)
!2464 = !DILocation(line: 66, column: 7, scope: !2390)
!2465 = !DILocation(line: 67, column: 14, scope: !2463)
!2466 = !DILocation(line: 67, column: 38, scope: !2463)
!2467 = !DILocation(line: 67, column: 52, scope: !2463)
!2468 = !DILocation(line: 67, column: 61, scope: !2463)
!2469 = !DILocation(line: 67, column: 5, scope: !2463)
!2470 = !DILocation(line: 69, column: 14, scope: !2463)
!2471 = !DILocation(line: 69, column: 33, scope: !2463)
!2472 = !DILocation(line: 69, column: 42, scope: !2463)
!2473 = !DILocation(line: 69, column: 5, scope: !2463)
!2474 = !DILocation(line: 83, column: 12, scope: !2390)
!2475 = !DILocation(line: 83, column: 43, scope: !2390)
!2476 = !DILocation(line: 83, column: 3, scope: !2390)
!2477 = !DILocation(line: 85, column: 3, scope: !2390)
!2478 = !DILocation(line: 88, column: 12, scope: !2390)
!2479 = !DILocation(line: 88, column: 20, scope: !2390)
!2480 = !DILocation(line: 88, column: 3, scope: !2390)
!2481 = !DILocation(line: 95, column: 3, scope: !2390)
!2482 = !DILocation(line: 97, column: 11, scope: !2390)
!2483 = !DILocation(line: 97, column: 3, scope: !2390)
!2484 = !DILocation(line: 102, column: 7, scope: !2485)
!2485 = distinct !DILexicalBlock(scope: !2390, file: !2391, line: 98, column: 5)
!2486 = !DILocation(line: 105, column: 16, scope: !2485)
!2487 = !DILocation(line: 105, column: 24, scope: !2485)
!2488 = !DILocation(line: 105, column: 47, scope: !2485)
!2489 = !DILocation(line: 105, column: 7, scope: !2485)
!2490 = !DILocation(line: 106, column: 7, scope: !2485)
!2491 = !DILocation(line: 109, column: 16, scope: !2485)
!2492 = !DILocation(line: 109, column: 24, scope: !2485)
!2493 = !DILocation(line: 109, column: 54, scope: !2485)
!2494 = !DILocation(line: 109, column: 66, scope: !2485)
!2495 = !DILocation(line: 109, column: 7, scope: !2485)
!2496 = !DILocation(line: 110, column: 7, scope: !2485)
!2497 = !DILocation(line: 113, column: 16, scope: !2485)
!2498 = !DILocation(line: 113, column: 24, scope: !2485)
!2499 = !DILocation(line: 114, column: 16, scope: !2485)
!2500 = !DILocation(line: 114, column: 28, scope: !2485)
!2501 = !DILocation(line: 114, column: 40, scope: !2485)
!2502 = !DILocation(line: 113, column: 7, scope: !2485)
!2503 = !DILocation(line: 115, column: 7, scope: !2485)
!2504 = !DILocation(line: 120, column: 16, scope: !2485)
!2505 = !DILocation(line: 120, column: 24, scope: !2485)
!2506 = !DILocation(line: 121, column: 16, scope: !2485)
!2507 = !DILocation(line: 121, column: 28, scope: !2485)
!2508 = !DILocation(line: 121, column: 40, scope: !2485)
!2509 = !DILocation(line: 121, column: 52, scope: !2485)
!2510 = !DILocation(line: 120, column: 7, scope: !2485)
!2511 = !DILocation(line: 122, column: 7, scope: !2485)
!2512 = !DILocation(line: 127, column: 16, scope: !2485)
!2513 = !DILocation(line: 127, column: 24, scope: !2485)
!2514 = !DILocation(line: 128, column: 16, scope: !2485)
!2515 = !DILocation(line: 128, column: 28, scope: !2485)
!2516 = !DILocation(line: 128, column: 40, scope: !2485)
!2517 = !DILocation(line: 128, column: 52, scope: !2485)
!2518 = !DILocation(line: 128, column: 64, scope: !2485)
!2519 = !DILocation(line: 127, column: 7, scope: !2485)
!2520 = !DILocation(line: 129, column: 7, scope: !2485)
!2521 = !DILocation(line: 134, column: 16, scope: !2485)
!2522 = !DILocation(line: 134, column: 24, scope: !2485)
!2523 = !DILocation(line: 135, column: 16, scope: !2485)
!2524 = !DILocation(line: 135, column: 28, scope: !2485)
!2525 = !DILocation(line: 135, column: 40, scope: !2485)
!2526 = !DILocation(line: 135, column: 52, scope: !2485)
!2527 = !DILocation(line: 135, column: 64, scope: !2485)
!2528 = !DILocation(line: 136, column: 16, scope: !2485)
!2529 = !DILocation(line: 134, column: 7, scope: !2485)
!2530 = !DILocation(line: 137, column: 7, scope: !2485)
!2531 = !DILocation(line: 142, column: 16, scope: !2485)
!2532 = !DILocation(line: 142, column: 24, scope: !2485)
!2533 = !DILocation(line: 143, column: 16, scope: !2485)
!2534 = !DILocation(line: 143, column: 28, scope: !2485)
!2535 = !DILocation(line: 143, column: 40, scope: !2485)
!2536 = !DILocation(line: 143, column: 52, scope: !2485)
!2537 = !DILocation(line: 143, column: 64, scope: !2485)
!2538 = !DILocation(line: 144, column: 16, scope: !2485)
!2539 = !DILocation(line: 144, column: 28, scope: !2485)
!2540 = !DILocation(line: 142, column: 7, scope: !2485)
!2541 = !DILocation(line: 145, column: 7, scope: !2485)
!2542 = !DILocation(line: 150, column: 16, scope: !2485)
!2543 = !DILocation(line: 150, column: 24, scope: !2485)
!2544 = !DILocation(line: 152, column: 17, scope: !2485)
!2545 = !DILocation(line: 152, column: 29, scope: !2485)
!2546 = !DILocation(line: 152, column: 41, scope: !2485)
!2547 = !DILocation(line: 152, column: 53, scope: !2485)
!2548 = !DILocation(line: 152, column: 65, scope: !2485)
!2549 = !DILocation(line: 153, column: 17, scope: !2485)
!2550 = !DILocation(line: 153, column: 29, scope: !2485)
!2551 = !DILocation(line: 153, column: 41, scope: !2485)
!2552 = !DILocation(line: 150, column: 7, scope: !2485)
!2553 = !DILocation(line: 154, column: 7, scope: !2485)
!2554 = !DILocation(line: 159, column: 16, scope: !2485)
!2555 = !DILocation(line: 159, column: 24, scope: !2485)
!2556 = !DILocation(line: 161, column: 16, scope: !2485)
!2557 = !DILocation(line: 161, column: 28, scope: !2485)
!2558 = !DILocation(line: 161, column: 40, scope: !2485)
!2559 = !DILocation(line: 161, column: 52, scope: !2485)
!2560 = !DILocation(line: 161, column: 64, scope: !2485)
!2561 = !DILocation(line: 162, column: 16, scope: !2485)
!2562 = !DILocation(line: 162, column: 28, scope: !2485)
!2563 = !DILocation(line: 162, column: 40, scope: !2485)
!2564 = !DILocation(line: 162, column: 52, scope: !2485)
!2565 = !DILocation(line: 159, column: 7, scope: !2485)
!2566 = !DILocation(line: 163, column: 7, scope: !2485)
!2567 = !DILocation(line: 170, column: 16, scope: !2485)
!2568 = !DILocation(line: 170, column: 24, scope: !2485)
!2569 = !DILocation(line: 172, column: 17, scope: !2485)
!2570 = !DILocation(line: 172, column: 29, scope: !2485)
!2571 = !DILocation(line: 172, column: 41, scope: !2485)
!2572 = !DILocation(line: 172, column: 53, scope: !2485)
!2573 = !DILocation(line: 172, column: 65, scope: !2485)
!2574 = !DILocation(line: 173, column: 17, scope: !2485)
!2575 = !DILocation(line: 173, column: 29, scope: !2485)
!2576 = !DILocation(line: 173, column: 41, scope: !2485)
!2577 = !DILocation(line: 173, column: 53, scope: !2485)
!2578 = !DILocation(line: 170, column: 7, scope: !2485)
!2579 = !DILocation(line: 174, column: 7, scope: !2485)
!2580 = !DILocation(line: 176, column: 1, scope: !2390)
!2581 = !DILocalVariable(name: "stream", arg: 1, scope: !2582, file: !2391, line: 61, type: !2585)
!2582 = distinct !DISubprogram(name: "version_etc_arn", scope: !2391, file: !2391, line: 61, type: !2583, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2619, retainedNodes: !11)
!2583 = !DISubroutineType(types: !2584)
!2584 = !{null, !2585, !23, !23, !23, !2449, !99}
!2585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2586, size: 64)
!2586 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !2587)
!2587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !2588)
!2588 = !{!2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618}
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2587, file: !2398, line: 51, baseType: !6, size: 32)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2587, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2587, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2587, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2587, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2587, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2587, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2587, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2587, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2587, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2587, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2587, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2587, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2587, file: !2398, line: 70, baseType: !2603, size: 64, offset: 832)
!2603 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2587, size: 64)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2587, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2587, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2587, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2587, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2587, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2587, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2587, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2587, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2587, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2587, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2587, file: !2398, line: 93, baseType: !2603, size: 64, offset: 1344)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2587, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2587, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2587, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2587, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!2619 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2620 = !DILocalVariable(name: "command_name", arg: 2, scope: !2582, file: !2391, line: 62, type: !23)
!2621 = !DILocalVariable(name: "package", arg: 3, scope: !2582, file: !2391, line: 62, type: !23)
!2622 = !DILocalVariable(name: "version", arg: 4, scope: !2582, file: !2391, line: 63, type: !23)
!2623 = !DILocalVariable(name: "authors", arg: 5, scope: !2582, file: !2391, line: 64, type: !2449)
!2624 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2582, file: !2391, line: 64, type: !99)
!2625 = distinct !DISubprogram(name: "version_etc_va", scope: !2391, file: !2391, line: 199, type: !2626, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2626 = !DISubroutineType(types: !2627)
!2627 = !{null, !2394, !23, !23, !23, !2628}
!2628 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2629, size: 64)
!2629 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2630)
!2630 = !{!2631, !2632, !2633, !2634}
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2629, file: !152, line: 192, baseType: !84, size: 32)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2629, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2633 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2629, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2629, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2635 = !DILocalVariable(name: "stream", arg: 1, scope: !2625, file: !2391, line: 199, type: !2394)
!2636 = !DILocation(line: 199, column: 23, scope: !2625)
!2637 = !DILocalVariable(name: "command_name", arg: 2, scope: !2625, file: !2391, line: 200, type: !23)
!2638 = !DILocation(line: 200, column: 29, scope: !2625)
!2639 = !DILocalVariable(name: "package", arg: 3, scope: !2625, file: !2391, line: 200, type: !23)
!2640 = !DILocation(line: 200, column: 55, scope: !2625)
!2641 = !DILocalVariable(name: "version", arg: 4, scope: !2625, file: !2391, line: 201, type: !23)
!2642 = !DILocation(line: 201, column: 29, scope: !2625)
!2643 = !DILocalVariable(name: "authors", arg: 5, scope: !2625, file: !2391, line: 201, type: !2628)
!2644 = !DILocation(line: 201, column: 46, scope: !2625)
!2645 = !DILocalVariable(name: "n_authors", scope: !2625, file: !2391, line: 203, type: !99)
!2646 = !DILocation(line: 203, column: 10, scope: !2625)
!2647 = !DILocalVariable(name: "authtab", scope: !2625, file: !2391, line: 204, type: !2648)
!2648 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 640, elements: !114)
!2649 = !DILocation(line: 204, column: 15, scope: !2625)
!2650 = !DILocation(line: 206, column: 18, scope: !2651)
!2651 = distinct !DILexicalBlock(scope: !2625, file: !2391, line: 206, column: 3)
!2652 = !DILocation(line: 206, column: 8, scope: !2651)
!2653 = !DILocation(line: 207, column: 8, scope: !2654)
!2654 = distinct !DILexicalBlock(scope: !2651, file: !2391, line: 206, column: 3)
!2655 = !DILocation(line: 207, column: 18, scope: !2654)
!2656 = !DILocation(line: 208, column: 10, scope: !2654)
!2657 = !DILocation(line: 208, column: 35, scope: !2654)
!2658 = !DILocation(line: 208, column: 22, scope: !2654)
!2659 = !DILocation(line: 208, column: 14, scope: !2654)
!2660 = !DILocation(line: 208, column: 33, scope: !2654)
!2661 = !DILocation(line: 208, column: 67, scope: !2654)
!2662 = !DILocation(line: 0, scope: !2654)
!2663 = !DILocation(line: 206, column: 3, scope: !2651)
!2664 = !DILocation(line: 209, column: 17, scope: !2654)
!2665 = !DILocation(line: 206, column: 3, scope: !2654)
!2666 = distinct !{!2666, !2663, !2667}
!2667 = !DILocation(line: 210, column: 5, scope: !2651)
!2668 = !DILocation(line: 211, column: 20, scope: !2625)
!2669 = !DILocation(line: 211, column: 28, scope: !2625)
!2670 = !DILocation(line: 211, column: 42, scope: !2625)
!2671 = !DILocation(line: 211, column: 51, scope: !2625)
!2672 = !DILocation(line: 212, column: 20, scope: !2625)
!2673 = !DILocation(line: 212, column: 29, scope: !2625)
!2674 = !DILocation(line: 211, column: 3, scope: !2625)
!2675 = !DILocation(line: 213, column: 1, scope: !2625)
!2676 = !DILocalVariable(name: "stream", arg: 1, scope: !2677, file: !2391, line: 199, type: !2680)
!2677 = distinct !DISubprogram(name: "version_etc_va", scope: !2391, file: !2391, line: 199, type: !2678, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2721, retainedNodes: !11)
!2678 = !DISubroutineType(types: !2679)
!2679 = !{null, !2680, !23, !23, !23, !2714}
!2680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2681, size: 64)
!2681 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !2682)
!2682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !2683)
!2683 = !{!2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713}
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2682, file: !2398, line: 51, baseType: !6, size: 32)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2682, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2682, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2682, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2682, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2682, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!2690 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2682, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2682, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2682, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2682, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2682, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2682, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2682, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2682, file: !2398, line: 70, baseType: !2698, size: 64, offset: 832)
!2698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2682, size: 64)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2682, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2682, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2682, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2682, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2682, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2682, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2682, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2682, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2682, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2682, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2682, file: !2398, line: 93, baseType: !2698, size: 64, offset: 1344)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2682, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2682, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2682, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2682, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!2714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2715, size: 64)
!2715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2716)
!2716 = !{!2717, !2718, !2719, !2720}
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2715, file: !152, line: 192, baseType: !84, size: 32)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2715, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2715, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2715, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2721 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2722 = !DILocalVariable(name: "command_name", arg: 2, scope: !2677, file: !2391, line: 200, type: !23)
!2723 = !DILocalVariable(name: "package", arg: 3, scope: !2677, file: !2391, line: 200, type: !23)
!2724 = !DILocalVariable(name: "version", arg: 4, scope: !2677, file: !2391, line: 201, type: !23)
!2725 = !DILocalVariable(name: "authors", arg: 5, scope: !2677, file: !2391, line: 201, type: !2714)
!2726 = !DILocalVariable(name: "n_authors", scope: !2677, file: !2391, line: 203, type: !99)
!2727 = !DILocalVariable(name: "authtab", scope: !2677, file: !2391, line: 204, type: !2648)
!2728 = distinct !DISubprogram(name: "version_etc", scope: !2391, file: !2391, line: 230, type: !2729, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2729 = !DISubroutineType(types: !2730)
!2730 = !{null, !2394, !23, !23, !23, null}
!2731 = !DILocalVariable(name: "stream", arg: 1, scope: !2728, file: !2391, line: 230, type: !2394)
!2732 = !DILocation(line: 230, column: 20, scope: !2728)
!2733 = !DILocalVariable(name: "command_name", arg: 2, scope: !2728, file: !2391, line: 231, type: !23)
!2734 = !DILocation(line: 231, column: 26, scope: !2728)
!2735 = !DILocalVariable(name: "package", arg: 3, scope: !2728, file: !2391, line: 231, type: !23)
!2736 = !DILocation(line: 231, column: 52, scope: !2728)
!2737 = !DILocalVariable(name: "version", arg: 4, scope: !2728, file: !2391, line: 232, type: !23)
!2738 = !DILocation(line: 232, column: 26, scope: !2728)
!2739 = !DILocalVariable(name: "authors", scope: !2728, file: !2391, line: 234, type: !2740)
!2740 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2741, line: 52, baseType: !2742)
!2741 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!2742 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2743, line: 32, baseType: !2744)
!2743 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!2744 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !152, line: 234, baseType: !2745)
!2745 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2629, size: 192, elements: !2428)
!2746 = !DILocation(line: 234, column: 11, scope: !2728)
!2747 = !DILocation(line: 236, column: 3, scope: !2728)
!2748 = !DILocation(line: 237, column: 19, scope: !2728)
!2749 = !DILocation(line: 237, column: 27, scope: !2728)
!2750 = !DILocation(line: 237, column: 41, scope: !2728)
!2751 = !DILocation(line: 237, column: 50, scope: !2728)
!2752 = !DILocation(line: 237, column: 59, scope: !2728)
!2753 = !DILocation(line: 237, column: 3, scope: !2728)
!2754 = !DILocation(line: 238, column: 3, scope: !2728)
!2755 = !DILocation(line: 239, column: 1, scope: !2728)
!2756 = !DILocalVariable(name: "stream", arg: 1, scope: !2757, file: !2391, line: 230, type: !2760)
!2757 = distinct !DISubprogram(name: "version_etc", scope: !2391, file: !2391, line: 230, type: !2758, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2794, retainedNodes: !11)
!2758 = !DISubroutineType(types: !2759)
!2759 = !{null, !2760, !23, !23, !23, null}
!2760 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2761, size: 64)
!2761 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !2762)
!2762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !2763)
!2763 = !{!2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793}
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2762, file: !2398, line: 51, baseType: !6, size: 32)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2762, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2762, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2762, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2762, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2762, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2762, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2762, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2762, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2762, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2762, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2762, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2762, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2762, file: !2398, line: 70, baseType: !2778, size: 64, offset: 832)
!2778 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2762, size: 64)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2762, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2762, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2762, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2762, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2762, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2762, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2762, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2762, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2762, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2762, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2762, file: !2398, line: 93, baseType: !2778, size: 64, offset: 1344)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2762, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2762, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2762, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2762, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!2794 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2795 = !DILocalVariable(name: "command_name", arg: 2, scope: !2757, file: !2391, line: 231, type: !23)
!2796 = !DILocalVariable(name: "package", arg: 3, scope: !2757, file: !2391, line: 231, type: !23)
!2797 = !DILocalVariable(name: "version", arg: 4, scope: !2757, file: !2391, line: 232, type: !23)
!2798 = !DILocalVariable(name: "authors", scope: !2757, file: !2391, line: 234, type: !2799)
!2799 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2741, line: 52, baseType: !2800)
!2800 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2743, line: 32, baseType: !2801)
!2801 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !152, line: 234, baseType: !2802)
!2802 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2803, size: 192, elements: !2428)
!2803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2804)
!2804 = !{!2805, !2806, !2807, !2808}
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2803, file: !152, line: 192, baseType: !84, size: 32)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2803, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2803, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2803, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2809 = distinct !DISubprogram(name: "xmalloc", scope: !2810, file: !2810, line: 39, type: !2811, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2810 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2811 = !DISubroutineType(types: !2812)
!2812 = !{!13, !99}
!2813 = !DILocalVariable(name: "n", arg: 1, scope: !2809, file: !2810, line: 39, type: !99)
!2814 = !DILocation(line: 39, column: 17, scope: !2809)
!2815 = !DILocalVariable(name: "p", scope: !2809, file: !2810, line: 41, type: !13)
!2816 = !DILocation(line: 41, column: 9, scope: !2809)
!2817 = !DILocation(line: 41, column: 21, scope: !2809)
!2818 = !DILocation(line: 41, column: 13, scope: !2809)
!2819 = !DILocation(line: 42, column: 8, scope: !2820)
!2820 = distinct !DILexicalBlock(scope: !2809, file: !2810, line: 42, column: 7)
!2821 = !DILocation(line: 42, column: 10, scope: !2820)
!2822 = !DILocation(line: 42, column: 13, scope: !2820)
!2823 = !DILocation(line: 42, column: 15, scope: !2820)
!2824 = !DILocation(line: 42, column: 7, scope: !2809)
!2825 = !DILocation(line: 43, column: 5, scope: !2820)
!2826 = !DILocation(line: 44, column: 10, scope: !2809)
!2827 = !DILocation(line: 44, column: 3, scope: !2809)
!2828 = !DILocalVariable(name: "n", arg: 1, scope: !2829, file: !2810, line: 39, type: !99)
!2829 = distinct !DISubprogram(name: "xmalloc", scope: !2810, file: !2810, line: 39, type: !2811, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2830, retainedNodes: !11)
!2830 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!2831 = !DILocalVariable(name: "p", scope: !2829, file: !2810, line: 41, type: !13)
!2832 = distinct !DISubprogram(name: "xrealloc", scope: !2810, file: !2810, line: 51, type: !2833, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2833 = !DISubroutineType(types: !2834)
!2834 = !{!13, !13, !99}
!2835 = !DILocalVariable(name: "p", arg: 1, scope: !2832, file: !2810, line: 51, type: !13)
!2836 = !DILocation(line: 51, column: 17, scope: !2832)
!2837 = !DILocalVariable(name: "n", arg: 2, scope: !2832, file: !2810, line: 51, type: !99)
!2838 = !DILocation(line: 51, column: 27, scope: !2832)
!2839 = !DILocation(line: 53, column: 8, scope: !2840)
!2840 = distinct !DILexicalBlock(scope: !2832, file: !2810, line: 53, column: 7)
!2841 = !DILocation(line: 53, column: 10, scope: !2840)
!2842 = !DILocation(line: 53, column: 13, scope: !2840)
!2843 = !DILocation(line: 53, column: 7, scope: !2832)
!2844 = !DILocation(line: 57, column: 13, scope: !2845)
!2845 = distinct !DILexicalBlock(scope: !2840, file: !2810, line: 54, column: 5)
!2846 = !DILocation(line: 57, column: 7, scope: !2845)
!2847 = !DILocation(line: 58, column: 7, scope: !2845)
!2848 = !DILocation(line: 61, column: 16, scope: !2832)
!2849 = !DILocation(line: 61, column: 19, scope: !2832)
!2850 = !DILocation(line: 61, column: 7, scope: !2832)
!2851 = !DILocation(line: 61, column: 5, scope: !2832)
!2852 = !DILocation(line: 62, column: 8, scope: !2853)
!2853 = distinct !DILexicalBlock(scope: !2832, file: !2810, line: 62, column: 7)
!2854 = !DILocation(line: 62, column: 10, scope: !2853)
!2855 = !DILocation(line: 62, column: 13, scope: !2853)
!2856 = !DILocation(line: 62, column: 7, scope: !2832)
!2857 = !DILocation(line: 63, column: 5, scope: !2853)
!2858 = !DILocation(line: 64, column: 10, scope: !2832)
!2859 = !DILocation(line: 64, column: 3, scope: !2832)
!2860 = !DILocation(line: 65, column: 1, scope: !2832)
!2861 = distinct !DISubprogram(name: "xcharalloc", scope: !2862, file: !2862, line: 216, type: !2863, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2862 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2863 = !DISubroutineType(types: !2864)
!2864 = !{!8, !99}
!2865 = !DILocalVariable(name: "n", arg: 1, scope: !2861, file: !2862, line: 216, type: !99)
!2866 = !DILocation(line: 216, column: 20, scope: !2861)
!2867 = !DILocation(line: 218, column: 10, scope: !2861)
!2868 = !DILocation(line: 218, column: 3, scope: !2861)
!2869 = !DILocalVariable(name: "n", arg: 1, scope: !2870, file: !2862, line: 216, type: !99)
!2870 = distinct !DISubprogram(name: "xcharalloc", scope: !2862, file: !2862, line: 216, type: !2863, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2871, retainedNodes: !11)
!2871 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!2872 = distinct !DISubprogram(name: "xalloc_die", scope: !2873, file: !2873, line: 32, type: !640, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !157, retainedNodes: !11)
!2873 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2874 = !DILocation(line: 34, column: 10, scope: !2872)
!2875 = !DILocation(line: 34, column: 33, scope: !2872)
!2876 = !DILocation(line: 34, column: 3, scope: !2872)
!2877 = !DILocation(line: 40, column: 3, scope: !2872)
!2878 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2879, file: !2879, line: 86, type: !2880, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !159, retainedNodes: !11)
!2879 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2880 = !DISubroutineType(types: !2881)
!2881 = !{!99, !2882, !23, !99, !2883}
!2882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1683, size: 64)
!2883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2884, size: 64)
!2884 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1654, line: 6, baseType: !2885)
!2885 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1656, line: 21, baseType: !2886)
!2886 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1656, line: 13, size: 64, elements: !2887)
!2887 = !{!2888, !2889}
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2886, file: !1656, line: 15, baseType: !6, size: 32)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2886, file: !1656, line: 20, baseType: !2890, size: 32, offset: 32)
!2890 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2886, file: !1656, line: 16, size: 32, elements: !2891)
!2891 = !{!2892, !2893}
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2890, file: !1656, line: 18, baseType: !84, size: 32)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2890, file: !1656, line: 19, baseType: !1665, size: 32)
!2894 = !DILocalVariable(name: "pwc", arg: 1, scope: !2878, file: !2879, line: 86, type: !2882)
!2895 = !DILocation(line: 86, column: 23, scope: !2878)
!2896 = !DILocalVariable(name: "s", arg: 2, scope: !2878, file: !2879, line: 86, type: !23)
!2897 = !DILocation(line: 86, column: 40, scope: !2878)
!2898 = !DILocalVariable(name: "n", arg: 3, scope: !2878, file: !2879, line: 86, type: !99)
!2899 = !DILocation(line: 86, column: 50, scope: !2878)
!2900 = !DILocalVariable(name: "ps", arg: 4, scope: !2878, file: !2879, line: 86, type: !2883)
!2901 = !DILocation(line: 86, column: 64, scope: !2878)
!2902 = !DILocalVariable(name: "ret", scope: !2878, file: !2879, line: 88, type: !99)
!2903 = !DILocation(line: 88, column: 10, scope: !2878)
!2904 = !DILocalVariable(name: "wc", scope: !2878, file: !2879, line: 89, type: !1683)
!2905 = !DILocation(line: 89, column: 11, scope: !2878)
!2906 = !DILocation(line: 105, column: 9, scope: !2907)
!2907 = distinct !DILexicalBlock(scope: !2878, file: !2879, line: 105, column: 7)
!2908 = !DILocation(line: 105, column: 7, scope: !2878)
!2909 = !DILocation(line: 106, column: 9, scope: !2907)
!2910 = !DILocation(line: 106, column: 5, scope: !2907)
!2911 = !DILocation(line: 145, column: 18, scope: !2878)
!2912 = !DILocation(line: 145, column: 23, scope: !2878)
!2913 = !DILocation(line: 145, column: 26, scope: !2878)
!2914 = !DILocation(line: 145, column: 29, scope: !2878)
!2915 = !DILocation(line: 145, column: 9, scope: !2878)
!2916 = !DILocation(line: 145, column: 7, scope: !2878)
!2917 = !DILocation(line: 154, column: 22, scope: !2918)
!2918 = distinct !DILexicalBlock(scope: !2878, file: !2879, line: 154, column: 7)
!2919 = !DILocation(line: 154, column: 19, scope: !2918)
!2920 = !DILocation(line: 154, column: 26, scope: !2918)
!2921 = !DILocation(line: 154, column: 29, scope: !2918)
!2922 = !DILocation(line: 154, column: 31, scope: !2918)
!2923 = !DILocation(line: 154, column: 36, scope: !2918)
!2924 = !DILocation(line: 154, column: 41, scope: !2918)
!2925 = !DILocation(line: 154, column: 7, scope: !2878)
!2926 = !DILocalVariable(name: "uc", scope: !2927, file: !2879, line: 156, type: !167)
!2927 = distinct !DILexicalBlock(scope: !2918, file: !2879, line: 155, column: 5)
!2928 = !DILocation(line: 156, column: 21, scope: !2927)
!2929 = !DILocation(line: 156, column: 27, scope: !2927)
!2930 = !DILocation(line: 156, column: 26, scope: !2927)
!2931 = !DILocation(line: 157, column: 14, scope: !2927)
!2932 = !DILocation(line: 157, column: 8, scope: !2927)
!2933 = !DILocation(line: 157, column: 12, scope: !2927)
!2934 = !DILocation(line: 158, column: 7, scope: !2927)
!2935 = !DILocation(line: 162, column: 10, scope: !2878)
!2936 = !DILocation(line: 162, column: 3, scope: !2878)
!2937 = !DILocation(line: 163, column: 1, scope: !2878)
!2938 = !DILocalVariable(name: "pwc", arg: 1, scope: !2939, file: !2879, line: 86, type: !2882)
!2939 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2879, file: !2879, line: 86, type: !2940, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2953, retainedNodes: !11)
!2940 = !DISubroutineType(types: !2941)
!2941 = !{!99, !2882, !23, !99, !2942}
!2942 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2943, size: 64)
!2943 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1654, line: 6, baseType: !2944)
!2944 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1656, line: 21, baseType: !2945)
!2945 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1656, line: 13, size: 64, elements: !2946)
!2946 = !{!2947, !2948}
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2945, file: !1656, line: 15, baseType: !6, size: 32)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2945, file: !1656, line: 20, baseType: !2949, size: 32, offset: 32)
!2949 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2945, file: !1656, line: 16, size: 32, elements: !2950)
!2950 = !{!2951, !2952}
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2949, file: !1656, line: 18, baseType: !84, size: 32)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2949, file: !1656, line: 19, baseType: !1665, size: 32)
!2953 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !161, nameTableKind: None)
!2954 = !DILocalVariable(name: "s", arg: 2, scope: !2939, file: !2879, line: 86, type: !23)
!2955 = !DILocalVariable(name: "n", arg: 3, scope: !2939, file: !2879, line: 86, type: !99)
!2956 = !DILocalVariable(name: "ps", arg: 4, scope: !2939, file: !2879, line: 86, type: !2942)
!2957 = !DILocalVariable(name: "ret", scope: !2939, file: !2879, line: 88, type: !99)
!2958 = !DILocalVariable(name: "wc", scope: !2939, file: !2879, line: 89, type: !1683)
!2959 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2960, file: !2960, line: 27, type: !2961, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !162, retainedNodes: !11)
!2960 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2961 = !DISubroutineType(types: !2962)
!2962 = !{!6, !23, !23}
!2963 = !DILocalVariable(name: "s1", arg: 1, scope: !2959, file: !2960, line: 27, type: !23)
!2964 = !DILocation(line: 27, column: 27, scope: !2959)
!2965 = !DILocalVariable(name: "s2", arg: 2, scope: !2959, file: !2960, line: 27, type: !23)
!2966 = !DILocation(line: 27, column: 43, scope: !2959)
!2967 = !DILocalVariable(name: "p1", scope: !2959, file: !2960, line: 29, type: !165)
!2968 = !DILocation(line: 29, column: 33, scope: !2959)
!2969 = !DILocation(line: 29, column: 62, scope: !2959)
!2970 = !DILocalVariable(name: "p2", scope: !2959, file: !2960, line: 30, type: !165)
!2971 = !DILocation(line: 30, column: 33, scope: !2959)
!2972 = !DILocation(line: 30, column: 62, scope: !2959)
!2973 = !DILocalVariable(name: "c1", scope: !2959, file: !2960, line: 31, type: !167)
!2974 = !DILocation(line: 31, column: 17, scope: !2959)
!2975 = !DILocalVariable(name: "c2", scope: !2959, file: !2960, line: 31, type: !167)
!2976 = !DILocation(line: 31, column: 21, scope: !2959)
!2977 = !DILocation(line: 33, column: 7, scope: !2978)
!2978 = distinct !DILexicalBlock(scope: !2959, file: !2960, line: 33, column: 7)
!2979 = !DILocation(line: 33, column: 13, scope: !2978)
!2980 = !DILocation(line: 33, column: 10, scope: !2978)
!2981 = !DILocation(line: 33, column: 7, scope: !2959)
!2982 = !DILocation(line: 34, column: 5, scope: !2978)
!2983 = !DILocation(line: 36, column: 3, scope: !2959)
!2984 = !DILocation(line: 38, column: 24, scope: !2985)
!2985 = distinct !DILexicalBlock(scope: !2959, file: !2960, line: 37, column: 5)
!2986 = !DILocation(line: 38, column: 23, scope: !2985)
!2987 = !DILocation(line: 38, column: 12, scope: !2985)
!2988 = !DILocation(line: 38, column: 10, scope: !2985)
!2989 = !DILocation(line: 39, column: 24, scope: !2985)
!2990 = !DILocation(line: 39, column: 23, scope: !2985)
!2991 = !DILocation(line: 39, column: 12, scope: !2985)
!2992 = !DILocation(line: 39, column: 10, scope: !2985)
!2993 = !DILocation(line: 41, column: 11, scope: !2994)
!2994 = distinct !DILexicalBlock(scope: !2985, file: !2960, line: 41, column: 11)
!2995 = !DILocation(line: 41, column: 14, scope: !2994)
!2996 = !DILocation(line: 41, column: 11, scope: !2985)
!2997 = !DILocation(line: 42, column: 9, scope: !2994)
!2998 = !DILocation(line: 44, column: 7, scope: !2985)
!2999 = !DILocation(line: 45, column: 7, scope: !2985)
!3000 = !DILocation(line: 46, column: 5, scope: !2985)
!3001 = !DILocation(line: 47, column: 10, scope: !2959)
!3002 = !DILocation(line: 47, column: 16, scope: !2959)
!3003 = !DILocation(line: 47, column: 13, scope: !2959)
!3004 = distinct !{!3004, !2983, !3005}
!3005 = !DILocation(line: 47, column: 18, scope: !2959)
!3006 = !DILocation(line: 50, column: 12, scope: !3007)
!3007 = distinct !DILexicalBlock(scope: !2959, file: !2960, line: 49, column: 7)
!3008 = !DILocation(line: 50, column: 17, scope: !3007)
!3009 = !DILocation(line: 50, column: 15, scope: !3007)
!3010 = !DILocation(line: 50, column: 5, scope: !3007)
!3011 = !DILocation(line: 56, column: 1, scope: !2959)
!3012 = !DILocalVariable(name: "s1", arg: 1, scope: !3013, file: !2960, line: 27, type: !23)
!3013 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2960, file: !2960, line: 27, type: !2961, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3014, retainedNodes: !11)
!3014 = distinct !DICompileUnit(language: DW_LANG_C99, file: !163, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !164, nameTableKind: None)
!3015 = !DILocalVariable(name: "s2", arg: 2, scope: !3013, file: !2960, line: 27, type: !23)
!3016 = !DILocalVariable(name: "p1", scope: !3013, file: !2960, line: 29, type: !165)
!3017 = !DILocalVariable(name: "p2", scope: !3013, file: !2960, line: 30, type: !165)
!3018 = !DILocalVariable(name: "c1", scope: !3013, file: !2960, line: 31, type: !167)
!3019 = !DILocalVariable(name: "c2", scope: !3013, file: !2960, line: 31, type: !167)
!3020 = distinct !DISubprogram(name: "close_stream", scope: !3021, file: !3021, line: 56, type: !3022, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !168, retainedNodes: !11)
!3021 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3022 = !DISubroutineType(types: !3023)
!3023 = !{!6, !3024}
!3024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3025, size: 64)
!3025 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !3026)
!3026 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !3027)
!3027 = !{!3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057}
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3026, file: !2398, line: 51, baseType: !6, size: 32)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3026, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3026, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3026, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3026, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3026, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3026, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3026, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3026, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3026, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3026, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3026, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3026, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3026, file: !2398, line: 70, baseType: !3042, size: 64, offset: 832)
!3042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3026, size: 64)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3026, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3026, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3026, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3026, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3026, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3026, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3026, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3026, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3026, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3026, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3026, file: !2398, line: 93, baseType: !3042, size: 64, offset: 1344)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3026, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3026, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3026, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3026, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!3058 = !DILocalVariable(name: "stream", arg: 1, scope: !3020, file: !3021, line: 56, type: !3024)
!3059 = !DILocation(line: 56, column: 21, scope: !3020)
!3060 = !DILocalVariable(name: "some_pending", scope: !3020, file: !3021, line: 58, type: !3061)
!3061 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !41)
!3062 = !DILocation(line: 58, column: 14, scope: !3020)
!3063 = !DILocation(line: 58, column: 42, scope: !3020)
!3064 = !DILocation(line: 58, column: 30, scope: !3020)
!3065 = !DILocation(line: 58, column: 50, scope: !3020)
!3066 = !DILocalVariable(name: "prev_fail", scope: !3020, file: !3021, line: 59, type: !3061)
!3067 = !DILocation(line: 59, column: 14, scope: !3020)
!3068 = !DILocation(line: 59, column: 27, scope: !3020)
!3069 = !DILocation(line: 59, column: 43, scope: !3020)
!3070 = !DILocalVariable(name: "fclose_fail", scope: !3020, file: !3021, line: 60, type: !3061)
!3071 = !DILocation(line: 60, column: 14, scope: !3020)
!3072 = !DILocation(line: 60, column: 37, scope: !3020)
!3073 = !DILocation(line: 60, column: 29, scope: !3020)
!3074 = !DILocation(line: 60, column: 45, scope: !3020)
!3075 = !DILocation(line: 70, column: 7, scope: !3076)
!3076 = distinct !DILexicalBlock(scope: !3020, file: !3021, line: 70, column: 7)
!3077 = !DILocation(line: 70, column: 17, scope: !3076)
!3078 = !DILocation(line: 70, column: 21, scope: !3076)
!3079 = !DILocation(line: 70, column: 33, scope: !3076)
!3080 = !DILocation(line: 70, column: 37, scope: !3076)
!3081 = !DILocation(line: 70, column: 50, scope: !3076)
!3082 = !DILocation(line: 70, column: 53, scope: !3076)
!3083 = !DILocation(line: 70, column: 59, scope: !3076)
!3084 = !DILocation(line: 70, column: 7, scope: !3020)
!3085 = !DILocation(line: 72, column: 13, scope: !3086)
!3086 = distinct !DILexicalBlock(scope: !3087, file: !3021, line: 72, column: 11)
!3087 = distinct !DILexicalBlock(scope: !3076, file: !3021, line: 71, column: 5)
!3088 = !DILocation(line: 72, column: 11, scope: !3087)
!3089 = !DILocation(line: 73, column: 9, scope: !3086)
!3090 = !DILocation(line: 73, column: 15, scope: !3086)
!3091 = !DILocation(line: 74, column: 7, scope: !3087)
!3092 = !DILocation(line: 77, column: 3, scope: !3020)
!3093 = !DILocation(line: 78, column: 1, scope: !3020)
!3094 = !DILocalVariable(name: "stream", arg: 1, scope: !3095, file: !3021, line: 56, type: !3098)
!3095 = distinct !DISubprogram(name: "close_stream", scope: !3021, file: !3021, line: 56, type: !3096, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3132, retainedNodes: !11)
!3096 = !DISubroutineType(types: !3097)
!3097 = !{!6, !3098}
!3098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3099, size: 64)
!3099 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !3100)
!3100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !3101)
!3101 = !{!3102, !3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115, !3117, !3118, !3119, !3120, !3121, !3122, !3123, !3124, !3125, !3126, !3127, !3128, !3129, !3130, !3131}
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3100, file: !2398, line: 51, baseType: !6, size: 32)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3100, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3100, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3100, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3100, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3100, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3100, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3100, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3100, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3100, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3100, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3100, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3100, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3100, file: !2398, line: 70, baseType: !3116, size: 64, offset: 832)
!3116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3100, size: 64)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3100, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3100, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3100, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3100, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3100, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3100, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3100, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3100, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3100, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3100, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3100, file: !2398, line: 93, baseType: !3116, size: 64, offset: 1344)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3100, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3100, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3100, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3100, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!3132 = distinct !DICompileUnit(language: DW_LANG_C99, file: !169, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!3133 = !DILocalVariable(name: "some_pending", scope: !3095, file: !3021, line: 58, type: !3061)
!3134 = !DILocalVariable(name: "prev_fail", scope: !3095, file: !3021, line: 59, type: !3061)
!3135 = !DILocalVariable(name: "fclose_fail", scope: !3095, file: !3021, line: 60, type: !3061)
!3136 = distinct !DISubprogram(name: "hard_locale", scope: !3137, file: !3137, line: 27, type: !3138, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !170, retainedNodes: !11)
!3137 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3138 = !DISubroutineType(types: !3139)
!3139 = !{!41, !6}
!3140 = !DILocalVariable(name: "category", arg: 1, scope: !3136, file: !3137, line: 27, type: !6)
!3141 = !DILocation(line: 27, column: 18, scope: !3136)
!3142 = !DILocalVariable(name: "locale", scope: !3136, file: !3137, line: 29, type: !3143)
!3143 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 2056, elements: !3144)
!3144 = !{!3145}
!3145 = !DISubrange(count: 257)
!3146 = !DILocation(line: 29, column: 8, scope: !3136)
!3147 = !DILocation(line: 31, column: 25, scope: !3148)
!3148 = distinct !DILexicalBlock(scope: !3136, file: !3137, line: 31, column: 7)
!3149 = !DILocation(line: 31, column: 35, scope: !3148)
!3150 = !DILocation(line: 31, column: 7, scope: !3148)
!3151 = !DILocation(line: 31, column: 7, scope: !3136)
!3152 = !DILocation(line: 32, column: 5, scope: !3148)
!3153 = !DILocation(line: 34, column: 20, scope: !3136)
!3154 = !DILocation(line: 34, column: 12, scope: !3136)
!3155 = !DILocation(line: 34, column: 33, scope: !3136)
!3156 = !DILocation(line: 34, column: 38, scope: !3136)
!3157 = !DILocation(line: 34, column: 49, scope: !3136)
!3158 = !DILocation(line: 34, column: 41, scope: !3136)
!3159 = !DILocation(line: 34, column: 66, scope: !3136)
!3160 = !DILocation(line: 34, column: 10, scope: !3136)
!3161 = !DILocation(line: 34, column: 3, scope: !3136)
!3162 = !DILocation(line: 35, column: 1, scope: !3136)
!3163 = !DILocalVariable(name: "category", arg: 1, scope: !3164, file: !3137, line: 27, type: !6)
!3164 = distinct !DISubprogram(name: "hard_locale", scope: !3137, file: !3137, line: 27, type: !3138, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3165, retainedNodes: !11)
!3165 = distinct !DICompileUnit(language: DW_LANG_C99, file: !171, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!3166 = !DILocalVariable(name: "locale", scope: !3164, file: !3137, line: 29, type: !3143)
!3167 = distinct !DISubprogram(name: "locale_charset", scope: !3168, file: !3168, line: 831, type: !3169, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !172, retainedNodes: !11)
!3168 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3169 = !DISubroutineType(types: !3170)
!3170 = !{!23}
!3171 = !DILocalVariable(name: "codeset", scope: !3167, file: !3168, line: 833, type: !23)
!3172 = !DILocation(line: 833, column: 15, scope: !3167)
!3173 = !DILocation(line: 847, column: 13, scope: !3167)
!3174 = !DILocation(line: 847, column: 11, scope: !3167)
!3175 = !DILocation(line: 911, column: 7, scope: !3176)
!3176 = distinct !DILexicalBlock(scope: !3167, file: !3168, line: 911, column: 7)
!3177 = !DILocation(line: 911, column: 15, scope: !3176)
!3178 = !DILocation(line: 911, column: 7, scope: !3167)
!3179 = !DILocation(line: 913, column: 13, scope: !3176)
!3180 = !DILocation(line: 913, column: 5, scope: !3176)
!3181 = !DILocation(line: 1070, column: 13, scope: !3182)
!3182 = distinct !DILexicalBlock(scope: !3183, file: !3168, line: 1070, column: 13)
!3183 = distinct !DILexicalBlock(scope: !3184, file: !3168, line: 1060, column: 7)
!3184 = distinct !DILexicalBlock(scope: !3167, file: !3168, line: 1019, column: 3)
!3185 = !DILocation(line: 1070, column: 24, scope: !3182)
!3186 = !DILocation(line: 1070, column: 13, scope: !3183)
!3187 = !DILocation(line: 1071, column: 19, scope: !3182)
!3188 = !DILocation(line: 1071, column: 11, scope: !3182)
!3189 = !DILocation(line: 1158, column: 10, scope: !3167)
!3190 = !DILocation(line: 1158, column: 3, scope: !3167)
!3191 = !DILocalVariable(name: "codeset", scope: !3192, file: !3168, line: 833, type: !23)
!3192 = distinct !DISubprogram(name: "locale_charset", scope: !3168, file: !3168, line: 831, type: !3169, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3193, retainedNodes: !11)
!3193 = distinct !DICompileUnit(language: DW_LANG_C99, file: !173, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3194 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3195, file: !3195, line: 269, type: !3196, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3195 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3196 = !DISubroutineType(types: !3197)
!3197 = !{!6, !6, !8, !99}
!3198 = !DILocalVariable(name: "category", arg: 1, scope: !3194, file: !3195, line: 269, type: !6)
!3199 = !DILocation(line: 269, column: 23, scope: !3194)
!3200 = !DILocalVariable(name: "buf", arg: 2, scope: !3194, file: !3195, line: 269, type: !8)
!3201 = !DILocation(line: 269, column: 39, scope: !3194)
!3202 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3194, file: !3195, line: 269, type: !99)
!3203 = !DILocation(line: 269, column: 51, scope: !3194)
!3204 = !DILocation(line: 274, column: 35, scope: !3194)
!3205 = !DILocation(line: 274, column: 45, scope: !3194)
!3206 = !DILocation(line: 274, column: 50, scope: !3194)
!3207 = !DILocation(line: 274, column: 10, scope: !3194)
!3208 = !DILocation(line: 274, column: 3, scope: !3194)
!3209 = !DILocalVariable(name: "category", arg: 1, scope: !3210, file: !3195, line: 269, type: !6)
!3210 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3195, file: !3195, line: 269, type: !3196, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3211, retainedNodes: !11)
!3211 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3212 = !DILocalVariable(name: "buf", arg: 2, scope: !3210, file: !3195, line: 269, type: !8)
!3213 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3210, file: !3195, line: 269, type: !99)
!3214 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3195, file: !3195, line: 91, type: !3196, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3215 = !DILocalVariable(name: "category", arg: 1, scope: !3214, file: !3195, line: 91, type: !6)
!3216 = !DILocation(line: 91, column: 30, scope: !3214)
!3217 = !DILocalVariable(name: "buf", arg: 2, scope: !3214, file: !3195, line: 91, type: !8)
!3218 = !DILocation(line: 91, column: 46, scope: !3214)
!3219 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3214, file: !3195, line: 91, type: !99)
!3220 = !DILocation(line: 91, column: 58, scope: !3214)
!3221 = !DILocalVariable(name: "result", scope: !3214, file: !3195, line: 140, type: !23)
!3222 = !DILocation(line: 140, column: 15, scope: !3214)
!3223 = !DILocation(line: 140, column: 51, scope: !3214)
!3224 = !DILocation(line: 140, column: 24, scope: !3214)
!3225 = !DILocation(line: 142, column: 7, scope: !3226)
!3226 = distinct !DILexicalBlock(scope: !3214, file: !3195, line: 142, column: 7)
!3227 = !DILocation(line: 142, column: 14, scope: !3226)
!3228 = !DILocation(line: 142, column: 7, scope: !3214)
!3229 = !DILocation(line: 145, column: 11, scope: !3230)
!3230 = distinct !DILexicalBlock(scope: !3231, file: !3195, line: 145, column: 11)
!3231 = distinct !DILexicalBlock(scope: !3226, file: !3195, line: 143, column: 5)
!3232 = !DILocation(line: 145, column: 19, scope: !3230)
!3233 = !DILocation(line: 145, column: 11, scope: !3231)
!3234 = !DILocation(line: 149, column: 9, scope: !3230)
!3235 = !DILocation(line: 149, column: 16, scope: !3230)
!3236 = !DILocation(line: 150, column: 7, scope: !3231)
!3237 = !DILocalVariable(name: "length", scope: !3238, file: !3195, line: 154, type: !99)
!3238 = distinct !DILexicalBlock(scope: !3226, file: !3195, line: 153, column: 5)
!3239 = !DILocation(line: 154, column: 14, scope: !3238)
!3240 = !DILocation(line: 154, column: 31, scope: !3238)
!3241 = !DILocation(line: 154, column: 23, scope: !3238)
!3242 = !DILocation(line: 155, column: 11, scope: !3243)
!3243 = distinct !DILexicalBlock(scope: !3238, file: !3195, line: 155, column: 11)
!3244 = !DILocation(line: 155, column: 20, scope: !3243)
!3245 = !DILocation(line: 155, column: 18, scope: !3243)
!3246 = !DILocation(line: 155, column: 11, scope: !3238)
!3247 = !DILocation(line: 157, column: 19, scope: !3248)
!3248 = distinct !DILexicalBlock(scope: !3243, file: !3195, line: 156, column: 9)
!3249 = !DILocation(line: 157, column: 24, scope: !3248)
!3250 = !DILocation(line: 157, column: 32, scope: !3248)
!3251 = !DILocation(line: 157, column: 39, scope: !3248)
!3252 = !DILocation(line: 157, column: 11, scope: !3248)
!3253 = !DILocation(line: 158, column: 11, scope: !3248)
!3254 = !DILocation(line: 162, column: 15, scope: !3255)
!3255 = distinct !DILexicalBlock(scope: !3256, file: !3195, line: 162, column: 15)
!3256 = distinct !DILexicalBlock(scope: !3243, file: !3195, line: 161, column: 9)
!3257 = !DILocation(line: 162, column: 23, scope: !3255)
!3258 = !DILocation(line: 162, column: 15, scope: !3256)
!3259 = !DILocation(line: 167, column: 23, scope: !3260)
!3260 = distinct !DILexicalBlock(scope: !3255, file: !3195, line: 163, column: 13)
!3261 = !DILocation(line: 167, column: 28, scope: !3260)
!3262 = !DILocation(line: 167, column: 36, scope: !3260)
!3263 = !DILocation(line: 167, column: 44, scope: !3260)
!3264 = !DILocation(line: 167, column: 15, scope: !3260)
!3265 = !DILocation(line: 168, column: 15, scope: !3260)
!3266 = !DILocation(line: 168, column: 19, scope: !3260)
!3267 = !DILocation(line: 168, column: 27, scope: !3260)
!3268 = !DILocation(line: 168, column: 32, scope: !3260)
!3269 = !DILocation(line: 169, column: 13, scope: !3260)
!3270 = !DILocation(line: 170, column: 11, scope: !3256)
!3271 = !DILocation(line: 174, column: 1, scope: !3214)
!3272 = !DILocalVariable(name: "category", arg: 1, scope: !3273, file: !3195, line: 91, type: !6)
!3273 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3195, file: !3195, line: 91, type: !3196, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3274, retainedNodes: !11)
!3274 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3275 = !DILocalVariable(name: "buf", arg: 2, scope: !3273, file: !3195, line: 91, type: !8)
!3276 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3273, file: !3195, line: 91, type: !99)
!3277 = !DILocalVariable(name: "result", scope: !3273, file: !3195, line: 140, type: !23)
!3278 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3195, file: !3195, line: 60, type: !3279, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3279 = !DISubroutineType(types: !3280)
!3280 = !{!23, !6}
!3281 = !DILocalVariable(name: "category", arg: 1, scope: !3278, file: !3195, line: 60, type: !6)
!3282 = !DILocation(line: 60, column: 32, scope: !3278)
!3283 = !DILocalVariable(name: "result", scope: !3278, file: !3195, line: 62, type: !23)
!3284 = !DILocation(line: 62, column: 15, scope: !3278)
!3285 = !DILocation(line: 62, column: 35, scope: !3278)
!3286 = !DILocation(line: 62, column: 24, scope: !3278)
!3287 = !DILocation(line: 87, column: 10, scope: !3278)
!3288 = !DILocation(line: 87, column: 3, scope: !3278)
!3289 = distinct !DISubprogram(name: "rpl_fclose", scope: !3290, file: !3290, line: 58, type: !3291, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !176, retainedNodes: !11)
!3290 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3291 = !DISubroutineType(types: !3292)
!3292 = !{!6, !3293}
!3293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3294, size: 64)
!3294 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !3295)
!3295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !3296)
!3296 = !{!3297, !3298, !3299, !3300, !3301, !3302, !3303, !3304, !3305, !3306, !3307, !3308, !3309, !3310, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322, !3323, !3324, !3325, !3326}
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3295, file: !2398, line: 51, baseType: !6, size: 32)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3295, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3295, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3295, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3295, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3295, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3295, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3295, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3295, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3295, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3295, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3295, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3295, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3295, file: !2398, line: 70, baseType: !3311, size: 64, offset: 832)
!3311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3295, size: 64)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3295, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3295, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3295, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3295, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3295, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3295, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3295, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3295, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3295, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3295, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3295, file: !2398, line: 93, baseType: !3311, size: 64, offset: 1344)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3295, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3295, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3295, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3295, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!3327 = !DILocalVariable(name: "fp", arg: 1, scope: !3289, file: !3290, line: 58, type: !3293)
!3328 = !DILocation(line: 58, column: 19, scope: !3289)
!3329 = !DILocalVariable(name: "saved_errno", scope: !3289, file: !3290, line: 60, type: !6)
!3330 = !DILocation(line: 60, column: 7, scope: !3289)
!3331 = !DILocalVariable(name: "fd", scope: !3289, file: !3290, line: 61, type: !6)
!3332 = !DILocation(line: 61, column: 7, scope: !3289)
!3333 = !DILocalVariable(name: "result", scope: !3289, file: !3290, line: 62, type: !6)
!3334 = !DILocation(line: 62, column: 7, scope: !3289)
!3335 = !DILocation(line: 65, column: 16, scope: !3289)
!3336 = !DILocation(line: 65, column: 8, scope: !3289)
!3337 = !DILocation(line: 65, column: 6, scope: !3289)
!3338 = !DILocation(line: 66, column: 7, scope: !3339)
!3339 = distinct !DILexicalBlock(scope: !3289, file: !3290, line: 66, column: 7)
!3340 = !DILocation(line: 66, column: 10, scope: !3339)
!3341 = !DILocation(line: 66, column: 7, scope: !3289)
!3342 = !DILocation(line: 67, column: 28, scope: !3339)
!3343 = !DILocation(line: 67, column: 12, scope: !3339)
!3344 = !DILocation(line: 67, column: 5, scope: !3339)
!3345 = !DILocation(line: 72, column: 9, scope: !3346)
!3346 = distinct !DILexicalBlock(scope: !3289, file: !3290, line: 72, column: 7)
!3347 = !DILocation(line: 72, column: 23, scope: !3346)
!3348 = !DILocation(line: 72, column: 41, scope: !3346)
!3349 = !DILocation(line: 72, column: 33, scope: !3346)
!3350 = !DILocation(line: 72, column: 26, scope: !3346)
!3351 = !DILocation(line: 72, column: 59, scope: !3346)
!3352 = !DILocation(line: 73, column: 7, scope: !3346)
!3353 = !DILocation(line: 73, column: 18, scope: !3346)
!3354 = !DILocation(line: 73, column: 10, scope: !3346)
!3355 = !DILocation(line: 72, column: 7, scope: !3289)
!3356 = !DILocation(line: 74, column: 19, scope: !3346)
!3357 = !DILocation(line: 74, column: 17, scope: !3346)
!3358 = !DILocation(line: 74, column: 5, scope: !3346)
!3359 = !DILocation(line: 100, column: 28, scope: !3289)
!3360 = !DILocation(line: 100, column: 12, scope: !3289)
!3361 = !DILocation(line: 100, column: 10, scope: !3289)
!3362 = !DILocation(line: 105, column: 7, scope: !3363)
!3363 = distinct !DILexicalBlock(scope: !3289, file: !3290, line: 105, column: 7)
!3364 = !DILocation(line: 105, column: 19, scope: !3363)
!3365 = !DILocation(line: 105, column: 7, scope: !3289)
!3366 = !DILocation(line: 107, column: 15, scope: !3367)
!3367 = distinct !DILexicalBlock(scope: !3363, file: !3290, line: 106, column: 5)
!3368 = !DILocation(line: 107, column: 7, scope: !3367)
!3369 = !DILocation(line: 107, column: 13, scope: !3367)
!3370 = !DILocation(line: 108, column: 14, scope: !3367)
!3371 = !DILocation(line: 109, column: 5, scope: !3367)
!3372 = !DILocation(line: 111, column: 10, scope: !3289)
!3373 = !DILocation(line: 111, column: 3, scope: !3289)
!3374 = !DILocation(line: 112, column: 1, scope: !3289)
!3375 = !DILocalVariable(name: "fp", arg: 1, scope: !3376, file: !3290, line: 58, type: !3379)
!3376 = distinct !DISubprogram(name: "rpl_fclose", scope: !3290, file: !3290, line: 58, type: !3377, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3413, retainedNodes: !11)
!3377 = !DISubroutineType(types: !3378)
!3378 = !{!6, !3379}
!3379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3380, size: 64)
!3380 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !3381)
!3381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !3382)
!3382 = !{!3383, !3384, !3385, !3386, !3387, !3388, !3389, !3390, !3391, !3392, !3393, !3394, !3395, !3396, !3398, !3399, !3400, !3401, !3402, !3403, !3404, !3405, !3406, !3407, !3408, !3409, !3410, !3411, !3412}
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3381, file: !2398, line: 51, baseType: !6, size: 32)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3381, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3381, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3381, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3381, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3381, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3381, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3381, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3381, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3381, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3381, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3381, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3381, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3381, file: !2398, line: 70, baseType: !3397, size: 64, offset: 832)
!3397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3381, size: 64)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3381, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3381, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3381, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3381, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3381, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3381, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3381, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3381, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3381, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3381, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3381, file: !2398, line: 93, baseType: !3397, size: 64, offset: 1344)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3381, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3381, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3381, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3381, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!3413 = distinct !DICompileUnit(language: DW_LANG_C99, file: !177, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!3414 = !DILocalVariable(name: "saved_errno", scope: !3376, file: !3290, line: 60, type: !6)
!3415 = !DILocalVariable(name: "fd", scope: !3376, file: !3290, line: 61, type: !6)
!3416 = !DILocalVariable(name: "result", scope: !3376, file: !3290, line: 62, type: !6)
!3417 = distinct !DISubprogram(name: "rpl_fflush", scope: !3418, file: !3418, line: 129, type: !3419, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !178, retainedNodes: !11)
!3418 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3419 = !DISubroutineType(types: !3420)
!3420 = !{!6, !3421}
!3421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3422, size: 64)
!3422 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !3423)
!3423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !3424)
!3424 = !{!3425, !3426, !3427, !3428, !3429, !3430, !3431, !3432, !3433, !3434, !3435, !3436, !3437, !3438, !3440, !3441, !3442, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450, !3451, !3452, !3453, !3454}
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3423, file: !2398, line: 51, baseType: !6, size: 32)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3423, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3423, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3423, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3423, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3423, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3423, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3423, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3423, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3423, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3423, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3423, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!3437 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3423, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3423, file: !2398, line: 70, baseType: !3439, size: 64, offset: 832)
!3439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3423, size: 64)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3423, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3423, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3423, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3423, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3423, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3423, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3423, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3423, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3423, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3423, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3423, file: !2398, line: 93, baseType: !3439, size: 64, offset: 1344)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3423, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3423, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3423, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3423, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!3455 = !DILocalVariable(name: "stream", arg: 1, scope: !3417, file: !3418, line: 129, type: !3421)
!3456 = !DILocation(line: 129, column: 19, scope: !3417)
!3457 = !DILocation(line: 150, column: 7, scope: !3458)
!3458 = distinct !DILexicalBlock(scope: !3417, file: !3418, line: 150, column: 7)
!3459 = !DILocation(line: 150, column: 14, scope: !3458)
!3460 = !DILocation(line: 150, column: 22, scope: !3458)
!3461 = !DILocation(line: 150, column: 27, scope: !3458)
!3462 = !DILocation(line: 150, column: 7, scope: !3417)
!3463 = !DILocation(line: 151, column: 20, scope: !3458)
!3464 = !DILocation(line: 151, column: 12, scope: !3458)
!3465 = !DILocation(line: 151, column: 5, scope: !3458)
!3466 = !DILocation(line: 156, column: 44, scope: !3417)
!3467 = !DILocation(line: 156, column: 3, scope: !3417)
!3468 = !DILocation(line: 158, column: 18, scope: !3417)
!3469 = !DILocation(line: 158, column: 10, scope: !3417)
!3470 = !DILocation(line: 158, column: 3, scope: !3417)
!3471 = !DILocation(line: 235, column: 1, scope: !3417)
!3472 = !DILocalVariable(name: "stream", arg: 1, scope: !3473, file: !3418, line: 129, type: !3476)
!3473 = distinct !DISubprogram(name: "rpl_fflush", scope: !3418, file: !3418, line: 129, type: !3474, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3510, retainedNodes: !11)
!3474 = !DISubroutineType(types: !3475)
!3475 = !{!6, !3476}
!3476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3477, size: 64)
!3477 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !3478)
!3478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !3479)
!3479 = !{!3480, !3481, !3482, !3483, !3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491, !3492, !3493, !3495, !3496, !3497, !3498, !3499, !3500, !3501, !3502, !3503, !3504, !3505, !3506, !3507, !3508, !3509}
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3478, file: !2398, line: 51, baseType: !6, size: 32)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3478, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3478, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3478, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3478, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3478, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3478, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3478, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3478, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3478, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3478, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3478, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3478, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3478, file: !2398, line: 70, baseType: !3494, size: 64, offset: 832)
!3494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3478, size: 64)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3478, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3478, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3478, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3478, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3478, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3478, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3478, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3478, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3478, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3478, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3478, file: !2398, line: 93, baseType: !3494, size: 64, offset: 1344)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3478, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3478, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3478, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3478, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!3510 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3511 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3418, file: !3418, line: 41, type: !3512, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !178, retainedNodes: !11)
!3512 = !DISubroutineType(types: !3513)
!3513 = !{null, !3421}
!3514 = !DILocalVariable(name: "fp", arg: 1, scope: !3511, file: !3418, line: 41, type: !3421)
!3515 = !DILocation(line: 41, column: 48, scope: !3511)
!3516 = !DILocation(line: 43, column: 7, scope: !3517)
!3517 = distinct !DILexicalBlock(scope: !3511, file: !3418, line: 43, column: 7)
!3518 = !DILocation(line: 43, column: 11, scope: !3517)
!3519 = !DILocation(line: 43, column: 18, scope: !3517)
!3520 = !DILocation(line: 43, column: 7, scope: !3511)
!3521 = !DILocation(line: 45, column: 13, scope: !3517)
!3522 = !DILocation(line: 45, column: 5, scope: !3517)
!3523 = !DILocation(line: 46, column: 1, scope: !3511)
!3524 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3525, file: !3525, line: 28, type: !3526, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !180, retainedNodes: !11)
!3525 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3526 = !DISubroutineType(types: !3527)
!3527 = !{!6, !3528, !3562, !6}
!3528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3529, size: 64)
!3529 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !3530)
!3530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !3531)
!3531 = !{!3532, !3533, !3534, !3535, !3536, !3537, !3538, !3539, !3540, !3541, !3542, !3543, !3544, !3545, !3547, !3548, !3549, !3550, !3551, !3552, !3553, !3554, !3555, !3556, !3557, !3558, !3559, !3560, !3561}
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3530, file: !2398, line: 51, baseType: !6, size: 32)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3530, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3530, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!3535 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3530, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3530, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!3537 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3530, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3530, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3530, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3530, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3530, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3530, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3530, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3530, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3530, file: !2398, line: 70, baseType: !3546, size: 64, offset: 832)
!3546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3530, size: 64)
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3530, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!3548 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3530, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!3549 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3530, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3530, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3530, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3530, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3530, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3530, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!3555 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3530, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!3556 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3530, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3530, file: !2398, line: 93, baseType: !3546, size: 64, offset: 1344)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3530, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3530, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3530, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!3561 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3530, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!3562 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !2741, line: 63, baseType: !2420)
!3563 = !DILocalVariable(name: "fp", arg: 1, scope: !3524, file: !3525, line: 28, type: !3528)
!3564 = !DILocation(line: 28, column: 15, scope: !3524)
!3565 = !DILocalVariable(name: "offset", arg: 2, scope: !3524, file: !3525, line: 28, type: !3562)
!3566 = !DILocation(line: 28, column: 25, scope: !3524)
!3567 = !DILocalVariable(name: "whence", arg: 3, scope: !3524, file: !3525, line: 28, type: !6)
!3568 = !DILocation(line: 28, column: 37, scope: !3524)
!3569 = !DILocation(line: 52, column: 7, scope: !3570)
!3570 = distinct !DILexicalBlock(scope: !3524, file: !3525, line: 52, column: 7)
!3571 = !DILocation(line: 52, column: 11, scope: !3570)
!3572 = !DILocation(line: 52, column: 27, scope: !3570)
!3573 = !DILocation(line: 52, column: 31, scope: !3570)
!3574 = !DILocation(line: 52, column: 24, scope: !3570)
!3575 = !DILocation(line: 53, column: 7, scope: !3570)
!3576 = !DILocation(line: 53, column: 10, scope: !3570)
!3577 = !DILocation(line: 53, column: 14, scope: !3570)
!3578 = !DILocation(line: 53, column: 31, scope: !3570)
!3579 = !DILocation(line: 53, column: 35, scope: !3570)
!3580 = !DILocation(line: 53, column: 28, scope: !3570)
!3581 = !DILocation(line: 54, column: 7, scope: !3570)
!3582 = !DILocation(line: 54, column: 10, scope: !3570)
!3583 = !DILocation(line: 54, column: 14, scope: !3570)
!3584 = !DILocation(line: 54, column: 28, scope: !3570)
!3585 = !DILocation(line: 52, column: 7, scope: !3524)
!3586 = !DILocalVariable(name: "pos", scope: !3587, file: !3525, line: 117, type: !3562)
!3587 = distinct !DILexicalBlock(scope: !3570, file: !3525, line: 113, column: 5)
!3588 = !DILocation(line: 117, column: 13, scope: !3587)
!3589 = !DILocation(line: 117, column: 34, scope: !3587)
!3590 = !DILocation(line: 117, column: 26, scope: !3587)
!3591 = !DILocation(line: 117, column: 39, scope: !3587)
!3592 = !DILocation(line: 117, column: 47, scope: !3587)
!3593 = !DILocation(line: 117, column: 19, scope: !3587)
!3594 = !DILocation(line: 118, column: 11, scope: !3595)
!3595 = distinct !DILexicalBlock(scope: !3587, file: !3525, line: 118, column: 11)
!3596 = !DILocation(line: 118, column: 15, scope: !3595)
!3597 = !DILocation(line: 118, column: 11, scope: !3587)
!3598 = !DILocation(line: 124, column: 11, scope: !3599)
!3599 = distinct !DILexicalBlock(scope: !3595, file: !3525, line: 119, column: 9)
!3600 = !DILocation(line: 129, column: 7, scope: !3587)
!3601 = !DILocation(line: 129, column: 11, scope: !3587)
!3602 = !DILocation(line: 129, column: 18, scope: !3587)
!3603 = !DILocation(line: 130, column: 21, scope: !3587)
!3604 = !DILocation(line: 130, column: 7, scope: !3587)
!3605 = !DILocation(line: 130, column: 11, scope: !3587)
!3606 = !DILocation(line: 130, column: 19, scope: !3587)
!3607 = !DILocation(line: 161, column: 7, scope: !3587)
!3608 = !DILocation(line: 163, column: 18, scope: !3524)
!3609 = !DILocation(line: 163, column: 22, scope: !3524)
!3610 = !DILocation(line: 163, column: 30, scope: !3524)
!3611 = !DILocation(line: 163, column: 10, scope: !3524)
!3612 = !DILocation(line: 163, column: 3, scope: !3524)
!3613 = !DILocation(line: 164, column: 1, scope: !3524)
!3614 = !DILocalVariable(name: "fp", arg: 1, scope: !3615, file: !3525, line: 28, type: !3618)
!3615 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3525, file: !3525, line: 28, type: !3616, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3652, retainedNodes: !11)
!3616 = !DISubroutineType(types: !3617)
!3617 = !{!6, !3618, !3562, !6}
!3618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3619, size: 64)
!3619 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2396, line: 7, baseType: !3620)
!3620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2398, line: 49, size: 1728, elements: !3621)
!3621 = !{!3622, !3623, !3624, !3625, !3626, !3627, !3628, !3629, !3630, !3631, !3632, !3633, !3634, !3635, !3637, !3638, !3639, !3640, !3641, !3642, !3643, !3644, !3645, !3646, !3647, !3648, !3649, !3650, !3651}
!3622 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3620, file: !2398, line: 51, baseType: !6, size: 32)
!3623 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3620, file: !2398, line: 54, baseType: !8, size: 64, offset: 64)
!3624 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3620, file: !2398, line: 55, baseType: !8, size: 64, offset: 128)
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3620, file: !2398, line: 56, baseType: !8, size: 64, offset: 192)
!3626 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3620, file: !2398, line: 57, baseType: !8, size: 64, offset: 256)
!3627 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3620, file: !2398, line: 58, baseType: !8, size: 64, offset: 320)
!3628 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3620, file: !2398, line: 59, baseType: !8, size: 64, offset: 384)
!3629 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3620, file: !2398, line: 60, baseType: !8, size: 64, offset: 448)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3620, file: !2398, line: 61, baseType: !8, size: 64, offset: 512)
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3620, file: !2398, line: 64, baseType: !8, size: 64, offset: 576)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3620, file: !2398, line: 65, baseType: !8, size: 64, offset: 640)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3620, file: !2398, line: 66, baseType: !8, size: 64, offset: 704)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3620, file: !2398, line: 68, baseType: !2413, size: 64, offset: 768)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3620, file: !2398, line: 70, baseType: !3636, size: 64, offset: 832)
!3636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3620, size: 64)
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3620, file: !2398, line: 72, baseType: !6, size: 32, offset: 896)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3620, file: !2398, line: 73, baseType: !6, size: 32, offset: 928)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3620, file: !2398, line: 74, baseType: !2420, size: 64, offset: 960)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3620, file: !2398, line: 77, baseType: !98, size: 16, offset: 1024)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3620, file: !2398, line: 78, baseType: !2425, size: 8, offset: 1040)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3620, file: !2398, line: 79, baseType: !2427, size: 8, offset: 1048)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3620, file: !2398, line: 81, baseType: !2431, size: 64, offset: 1088)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3620, file: !2398, line: 89, baseType: !2434, size: 64, offset: 1152)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3620, file: !2398, line: 91, baseType: !2436, size: 64, offset: 1216)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3620, file: !2398, line: 92, baseType: !2439, size: 64, offset: 1280)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3620, file: !2398, line: 93, baseType: !3636, size: 64, offset: 1344)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3620, file: !2398, line: 94, baseType: !13, size: 64, offset: 1408)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3620, file: !2398, line: 95, baseType: !99, size: 64, offset: 1472)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3620, file: !2398, line: 96, baseType: !6, size: 32, offset: 1536)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3620, file: !2398, line: 98, baseType: !2446, size: 160, offset: 1568)
!3652 = distinct !DICompileUnit(language: DW_LANG_C99, file: !181, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3653 = !DILocalVariable(name: "offset", arg: 2, scope: !3615, file: !3525, line: 28, type: !3562)
!3654 = !DILocalVariable(name: "whence", arg: 3, scope: !3615, file: !3525, line: 28, type: !6)
!3655 = distinct !DISubprogram(name: "c_tolower", scope: !3656, file: !3656, line: 337, type: !3657, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !182, retainedNodes: !11)
!3656 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3657 = !DISubroutineType(types: !3658)
!3658 = !{!6, !6}
!3659 = !DILocalVariable(name: "c", arg: 1, scope: !3655, file: !3656, line: 337, type: !6)
!3660 = !DILocation(line: 337, column: 16, scope: !3655)
!3661 = !DILocation(line: 339, column: 11, scope: !3655)
!3662 = !DILocation(line: 339, column: 3, scope: !3655)
!3663 = !DILocation(line: 342, column: 14, scope: !3664)
!3664 = distinct !DILexicalBlock(scope: !3655, file: !3656, line: 340, column: 5)
!3665 = !DILocation(line: 342, column: 16, scope: !3664)
!3666 = !DILocation(line: 342, column: 22, scope: !3664)
!3667 = !DILocation(line: 342, column: 7, scope: !3664)
!3668 = !DILocation(line: 344, column: 14, scope: !3664)
!3669 = !DILocation(line: 344, column: 7, scope: !3664)
!3670 = !DILocation(line: 346, column: 1, scope: !3655)
!3671 = !DILocalVariable(name: "c", arg: 1, scope: !3672, file: !3656, line: 337, type: !6)
!3672 = distinct !DISubprogram(name: "c_tolower", scope: !3656, file: !3656, line: 337, type: !3657, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3673, retainedNodes: !11)
!3673 = distinct !DICompileUnit(language: DW_LANG_C99, file: !183, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
