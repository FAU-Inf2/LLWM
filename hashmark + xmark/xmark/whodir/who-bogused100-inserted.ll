; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.utmpx = type { i16, i32, [32 x i8], [4 x i8], [32 x i8], [256 x i8], %struct.__exit_status, i32, %struct.anon, [4 x i32], [20 x i8] }
%struct.__exit_status = type { i16, i16 }
%struct.anon = type { i32, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"Usage: %s [OPTION]... [ FILE | ARG1 ARG2 ]\0A\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"Print information about users who are currently logged in.\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [195 x i8] c"\0A  -a, --all         same as -b -d --login -p -r -t -T -u\0A  -b, --boot        time of last system boot\0A  -d, --dead        print dead processes\0A  -H, --heading     print line of column headings\0A\00", align 1
@.str.4 = private unnamed_addr constant [50 x i8] c"  -l, --login       print system login processes\0A\00", align 1
@.str.5 = private unnamed_addr constant [187 x i8] c"      --lookup      attempt to canonicalize hostnames via DNS\0A  -m                only hostname and user associated with stdin\0A  -p, --process     print active processes spawned by init\0A\00", align 1
@.str.6 = private unnamed_addr constant [223 x i8] c"  -q, --count       all login names and number of users logged on\0A  -r, --runlevel    print current runlevel\0A  -s, --short       print only name, line, and time (default)\0A  -t, --time        print last system clock change\0A\00", align 1
@.str.7 = private unnamed_addr constant [163 x i8] c"  -T, -w, --mesg    add user's message status as +, - or ?\0A  -u, --users       list users logged in\0A      --message     same as -T\0A      --writable    same as -T\0A\00", align 1
@.str.8 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.9 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.10 = private unnamed_addr constant [125 x i8] c"\0AIf FILE is not specified, use %s.  %s as FILE is common.\0AIf ARG1 ARG2 given, -m presumed: 'am i' or 'mom likes' are usual.\0A\00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"/var/run/utmp\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"/var/log/wtmp\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"who\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.33 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.34 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.36 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.37 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.38 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.25 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.26 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.29 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.30 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"abdlmpqrstuwHT\00", align 1
@longopts = internal constant [18 x %struct.option] [%struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0), i32 0, i32* null, i32 98 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), i32 0, i32* null, i32 72 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i32 0, i32 0), i32 0, i32* null, i32 108 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46, i32 0, i32 0), i32 0, i32* null, i32 128 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i32 0, i32* null, i32 112 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0), i32 0, i32* null, i32 116 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0), i32 0, i32* null, i32 117 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.56, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@need_boottime = internal global i8 0, align 1, !dbg !31
@need_deadprocs = internal global i8 0, align 1, !dbg !33
@need_login = internal global i8 0, align 1, !dbg !35
@need_initspawn = internal global i8 0, align 1, !dbg !37
@need_runlevel = internal global i8 0, align 1, !dbg !41
@need_clockchange = internal global i8 0, align 1, !dbg !39
@need_users = internal global i8 0, align 1, !dbg !43
@include_mesg = internal global i8 0, align 1, !dbg !27
@include_idle = internal global i8 0, align 1, !dbg !23
@include_exit = internal global i8 0, align 1, !dbg !29
@include_heading = internal global i8 0, align 1, !dbg !25
@my_line_only = internal global i8 0, align 1, !dbg !45
@short_list = internal global i8 0, align 1, !dbg !19
@short_output = internal global i8 0, align 1, !dbg !21
@do_lookup = internal global i8 0, align 1, !dbg !16
@.str.19 = private unnamed_addr constant [17 x i8] c"Joseph Arceneaux\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"Michael Stone\00", align 1
@.str.22 = private unnamed_addr constant [15 x i8] c"%Y-%m-%d %H:%M\00", align 1
@time_format = internal global i8* null, align 8, !dbg !47
@time_format_width = internal global i32 0, align 4, !dbg !51
@.str.23 = private unnamed_addr constant [12 x i8] c"%b %e %H:%M\00", align 1
@optind = external dso_local global i32, align 4
@.str.24 = private unnamed_addr constant [17 x i8] c"extra operand %s\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.61 = private unnamed_addr constant [6 x i8] c"/dev/\00", align 1
@.str.74 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@print_deadprocs.exitstr = internal global i8* null, align 8, !dbg !138
@.str.92 = private unnamed_addr constant [6 x i8] c"term=\00", align 1
@.str.93 = private unnamed_addr constant [6 x i8] c"exit=\00", align 1
@.str.94 = private unnamed_addr constant [10 x i8] c"%s%d %s%d\00", align 1
@print_line.mesg = internal global [3 x i8] c" x\00", align 1, !dbg !54
@.str.69 = private unnamed_addr constant [6 x i8] c" %-6s\00", align 1
@.str.70 = private unnamed_addr constant [6 x i8] c" %10s\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c" %-12s\00", align 1
@.str.73 = private unnamed_addr constant [5 x i8] c"   .\00", align 1
@.str.72 = private unnamed_addr constant [33 x i8] c"%-8.*s%s %-12.*s %-*s%s%s %-8s%s\00", align 1
@time_string.buf = internal global [33 x i8] zeroinitializer, align 16, !dbg !123
@.str.90 = private unnamed_addr constant [4 x i8] c"id=\00", align 1
@.str.91 = private unnamed_addr constant [6 x i8] c"LOGIN\00", align 1
@.str.89 = private unnamed_addr constant [13 x i8] c"clock change\00", align 1
@.str.88 = private unnamed_addr constant [12 x i8] c"system boot\00", align 1
@print_runlevel.runlevline = internal global i8* null, align 8, !dbg !131
@.str.84 = private unnamed_addr constant [10 x i8] c"run-level\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"%s %c\00", align 1
@print_runlevel.comment = internal global i8* null, align 8, !dbg !136
@.str.86 = private unnamed_addr constant [6 x i8] c"last=\00", align 1
@.str.87 = private unnamed_addr constant [5 x i8] c"%s%c\00", align 1
@.str.75 = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@.str.76 = private unnamed_addr constant [4 x i8] c"  ?\00", align 1
@print_user.hostlen = internal global i64 0, align 8, !dbg !108
@print_user.hoststr = internal global i8* null, align 8, !dbg !62
@.str.77 = private unnamed_addr constant [8 x i8] c"(%s:%s)\00", align 1
@.str.78 = private unnamed_addr constant [5 x i8] c"(%s)\00", align 1
@idle_string.now = internal global i64 -9223372036854775808, align 8, !dbg !113
@.str.79 = private unnamed_addr constant [6 x i8] c"  .  \00", align 1
@.str.80 = private unnamed_addr constant [30 x i8] c"seconds_idle / (60 * 60) < 24\00", align 1
@.str.81 = private unnamed_addr constant [10 x i8] c"src/who.c\00", align 1
@__PRETTY_FUNCTION__.idle_string = private unnamed_addr constant [40 x i8] c"const char *idle_string(time_t, time_t)\00", align 1
@idle_string.idle_hhmm = internal global [6 x i8] zeroinitializer, align 1, !dbg !118
@.str.82 = private unnamed_addr constant [10 x i8] c"%02d:%02d\00", align 1
@.str.83 = private unnamed_addr constant [6 x i8] c" old \00", align 1
@.str.62 = private unnamed_addr constant [5 x i8] c"NAME\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"LINE\00", align 1
@.str.64 = private unnamed_addr constant [5 x i8] c"TIME\00", align 1
@.str.65 = private unnamed_addr constant [5 x i8] c"IDLE\00", align 1
@.str.66 = private unnamed_addr constant [4 x i8] c"PID\00", align 1
@.str.67 = private unnamed_addr constant [8 x i8] c"COMMENT\00", align 1
@.str.68 = private unnamed_addr constant [5 x i8] c"EXIT\00", align 1
@.str.58 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.59 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.60 = private unnamed_addr constant [14 x i8] c"\0A# users=%lu\0A\00", align 1
@.str.40 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.41 = private unnamed_addr constant [5 x i8] c"boot\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"count\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"dead\00", align 1
@.str.44 = private unnamed_addr constant [8 x i8] c"heading\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"login\00", align 1
@.str.46 = private unnamed_addr constant [7 x i8] c"lookup\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"message\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"mesg\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"process\00", align 1
@.str.50 = private unnamed_addr constant [9 x i8] c"runlevel\00", align 1
@.str.51 = private unnamed_addr constant [6 x i8] c"short\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"users\00", align 1
@.str.54 = private unnamed_addr constant [9 x i8] c"writable\00", align 1
@.str.55 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.56 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), align 8, !dbg !153
@.str.95 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@last_cherror = internal global i32 0, align 4, !dbg !158
@canon_host_r.hints = internal global %struct.addrinfo zeroinitializer, align 8, !dbg !163
@ignore_EPIPE = internal global i8 0, align 1, !dbg !196
@.str.102 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !201
@.str.1.103 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.104 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !204
@.str.109 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.110 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.115 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.116 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.117 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !211
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !218
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !266
@nslots = internal global i32 1, align 4, !dbg !273
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !275
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !264
@.str.10.120 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.121 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.122 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.123 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.124 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.125 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.126 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.127 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.128 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !252
@.str.137 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.138 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.139 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.140 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.141 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.142 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.143 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.144 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.145 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.146 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.147 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.148 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.149 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.150 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.151 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.152 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !277
@.str.1.165 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.166 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.179 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.180 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [3 x i8] c"-m\00"
@.compVal1 = private global [4 x i8] c"-ma\00"
@.compVal2 = private global [4 x i8] c"-Hm\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0
@x.101 = common global i32 0
@y.102 = common global i32 0
@x.103 = common global i32 0
@y.104 = common global i32 0
@x.105 = common global i32 0
@y.106 = common global i32 0
@x.107 = common global i32 0
@y.108 = common global i32 0
@x.109 = common global i32 0
@y.110 = common global i32 0
@x.111 = common global i32 0
@y.112 = common global i32 0
@x.113 = common global i32 0
@y.114 = common global i32 0
@x.115 = common global i32 0
@y.116 = common global i32 0
@x.117 = common global i32 0
@y.118 = common global i32 0
@x.119 = common global i32 0
@y.120 = common global i32 0
@x.121 = common global i32 0
@y.122 = common global i32 0
@x.123 = common global i32 0
@y.124 = common global i32 0
@x.125 = common global i32 0
@y.126 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !334 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !337, metadata !DIExpression()), !dbg !338
  %11 = load i32, i32* %10, align 4, !dbg !339
  %12 = icmp ne i32 %11, 0, !dbg !341
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %76, !dbg !342

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x
  %23 = load i32, i32* @y
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* @x
  %31 = load i32, i32* @y
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !343

38:                                               ; preds = %originalBBpart24
  %39 = load i32, i32* @x
  %40 = load i32, i32* @y
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !344
  %48 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !344
  %49 = load i8*, i8** @program_name, align 8, !dbg !344
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* %48, i8* %49), !dbg !344
  %51 = load i32, i32* @x
  %52 = load i32, i32* @y
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %59, !dbg !344

59:                                               ; preds = %originalBBpart28
  %60 = load i32, i32* @x
  %61 = load i32, i32* @y
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %59, %originalBB10alteredBB
  %68 = load i32, i32* @x
  %69 = load i32, i32* @y
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %122, !dbg !344

76:                                               ; preds = %originalBBpart2
  %77 = load i32, i32* @x
  %78 = load i32, i32* @y
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %76, %originalBB14alteredBB
  %85 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !346
  %86 = load i8*, i8** @program_name, align 8, !dbg !348
  %87 = call i32 (i8*, ...) @printf(i8* %85, i8* %86), !dbg !349
  %88 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !350
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !350
  %90 = call i32 @fputs_unlocked(i8* %88, %struct._IO_FILE* %89), !dbg !350
  %91 = call i8* @gettext(i8* getelementptr inbounds ([195 x i8], [195 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !351
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !351
  %93 = call i32 @fputs_unlocked(i8* %91, %struct._IO_FILE* %92), !dbg !351
  %94 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !352
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !352
  %96 = call i32 @fputs_unlocked(i8* %94, %struct._IO_FILE* %95), !dbg !352
  %97 = call i8* @gettext(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !353
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !353
  %99 = call i32 @fputs_unlocked(i8* %97, %struct._IO_FILE* %98), !dbg !353
  %100 = call i8* @gettext(i8* getelementptr inbounds ([223 x i8], [223 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !354
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !354
  %102 = call i32 @fputs_unlocked(i8* %100, %struct._IO_FILE* %101), !dbg !354
  %103 = call i8* @gettext(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !355
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !355
  %105 = call i32 @fputs_unlocked(i8* %103, %struct._IO_FILE* %104), !dbg !355
  %106 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !356
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !356
  %108 = call i32 @fputs_unlocked(i8* %106, %struct._IO_FILE* %107), !dbg !356
  %109 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !357
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !357
  %111 = call i32 @fputs_unlocked(i8* %109, %struct._IO_FILE* %110), !dbg !357
  %112 = call i8* @gettext(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !358
  %113 = call i32 (i8*, ...) @printf(i8* %112, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0)), !dbg !359
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0)), !dbg !360
  %114 = load i32, i32* @x
  %115 = load i32, i32* @y
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %122

122:                                              ; preds = %originalBBpart216, %originalBBpart212
  %123 = load i32, i32* @x
  %124 = load i32, i32* @y
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %122, %originalBB18alteredBB
  %131 = load i32, i32* %10, align 4, !dbg !361
  call void @exit(i32 %131) #12, !dbg !362
  %132 = load i32, i32* @x
  %133 = load i32, i32* @y
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !362

originalBBalteredBB:                              ; preds = %originalBB, %1
  %140 = alloca i32, align 4
  store i32 %0, i32* %140, align 4
  call void @llvm.dbg.declare(metadata i32* %140, metadata !363, metadata !DIExpression()), !dbg !338
  %141 = load i32, i32* %140, align 4, !dbg !339
  %142 = icmp ne i32 %141, 0, !dbg !341
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %143 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !344
  %144 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !344
  %145 = load i8*, i8** @program_name, align 8, !dbg !344
  %146 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %143, i8* %144, i8* %145), !dbg !344
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %59
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %76
  %147 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !346
  %148 = load i8*, i8** @program_name, align 8, !dbg !348
  %149 = call i32 (i8*, ...) @printf(i8* %147, i8* %148), !dbg !349
  %150 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !350
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !350
  %152 = call i32 @fputs_unlocked(i8* %150, %struct._IO_FILE* %151), !dbg !350
  %153 = call i8* @gettext(i8* getelementptr inbounds ([195 x i8], [195 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !351
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !351
  %155 = call i32 @fputs_unlocked(i8* %153, %struct._IO_FILE* %154), !dbg !351
  %156 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !352
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !352
  %158 = call i32 @fputs_unlocked(i8* %156, %struct._IO_FILE* %157), !dbg !352
  %159 = call i8* @gettext(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !353
  %160 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !353
  %161 = call i32 @fputs_unlocked(i8* %159, %struct._IO_FILE* %160), !dbg !353
  %162 = call i8* @gettext(i8* getelementptr inbounds ([223 x i8], [223 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !354
  %163 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !354
  %164 = call i32 @fputs_unlocked(i8* %162, %struct._IO_FILE* %163), !dbg !354
  %165 = call i8* @gettext(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !355
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !355
  %167 = call i32 @fputs_unlocked(i8* %165, %struct._IO_FILE* %166), !dbg !355
  %168 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !356
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !356
  %170 = call i32 @fputs_unlocked(i8* %168, %struct._IO_FILE* %169), !dbg !356
  %171 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !357
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !357
  %173 = call i32 @fputs_unlocked(i8* %171, %struct._IO_FILE* %172), !dbg !357
  %174 = call i8* @gettext(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !358
  %175 = call i32 (i8*, ...) @printf(i8* %174, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0)), !dbg !359
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0)), !dbg !360
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %122
  %176 = load i32, i32* %10, align 4, !dbg !361
  call void @exit(i32 %176) #12, !dbg !362
  br label %originalBB18
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !465 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !469, metadata !DIExpression()), !dbg !470
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !471, metadata !DIExpression()), !dbg !480
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !480
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !480
  call void @llvm.dbg.declare(metadata i8** %12, metadata !481, metadata !DIExpression()), !dbg !482
  %16 = load i8*, i8** %10, align 8, !dbg !483
  store i8* %16, i8** %12, align 8, !dbg !482
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !484, metadata !DIExpression()), !dbg !486
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !487
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !486
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !488

26:                                               ; preds = %originalBBpart220, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !489
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !490
  %37 = load i8*, i8** %36, align 8, !dbg !490
  %38 = icmp ne i8* %37, null, !dbg !489
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !491

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !492
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !492
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !492
  %59 = load i8*, i8** %58, align 8, !dbg !492
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !492
  %61 = icmp eq i32 %60, 0, !dbg !492
  %62 = xor i1 %61, true, !dbg !493
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart212, label %originalBB6alteredBB

originalBBpart212:                                ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart212, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart212 ], !dbg !494
  %73 = load i32, i32* @x.1
  %74 = load i32, i32* @y.2
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %71, %originalBB14alteredBB
  %81 = load i32, i32* @x.1
  %82 = load i32, i32* @y.2
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %72, label %89, label %108, !dbg !488

89:                                               ; preds = %originalBBpart216
  %90 = load i32, i32* @x.1
  %91 = load i32, i32* @y.2
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %89, %originalBB18alteredBB
  %98 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !495
  %99 = getelementptr inbounds %struct.infomap, %struct.infomap* %98, i32 1, !dbg !495
  store %struct.infomap* %99, %struct.infomap** %13, align 8, !dbg !495
  %100 = load i32, i32* @x.1
  %101 = load i32, i32* @y.2
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %26, !dbg !488, !llvm.loop !496

108:                                              ; preds = %originalBBpart216
  %109 = load i32, i32* @x.1
  %110 = load i32, i32* @y.2
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %108, %originalBB22alteredBB
  %117 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !497
  %118 = getelementptr inbounds %struct.infomap, %struct.infomap* %117, i32 0, i32 1, !dbg !499
  %119 = load i8*, i8** %118, align 8, !dbg !499
  %120 = icmp ne i8* %119, null, !dbg !497
  %121 = load i32, i32* @x.1
  %122 = load i32, i32* @y.2
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %120, label %129, label %149, !dbg !500

129:                                              ; preds = %originalBBpart224
  %130 = load i32, i32* @x.1
  %131 = load i32, i32* @y.2
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %129, %originalBB26alteredBB
  %138 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !501
  %139 = getelementptr inbounds %struct.infomap, %struct.infomap* %138, i32 0, i32 1, !dbg !502
  %140 = load i8*, i8** %139, align 8, !dbg !502
  store i8* %140, i8** %12, align 8, !dbg !503
  %141 = load i32, i32* @x.1
  %142 = load i32, i32* @y.2
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %149, !dbg !504

149:                                              ; preds = %originalBBpart228, %originalBBpart224
  %150 = load i32, i32* @x.1
  %151 = load i32, i32* @y.2
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %149, %originalBB30alteredBB
  %158 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !505
  %159 = call i32 (i8*, ...) @printf(i8* %158, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0)), !dbg !506
  call void @llvm.dbg.declare(metadata i8** %14, metadata !507, metadata !DIExpression()), !dbg !508
  %160 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !509
  store i8* %160, i8** %14, align 8, !dbg !508
  %161 = load i8*, i8** %14, align 8, !dbg !510
  %162 = icmp ne i8* %161, null, !dbg !510
  %163 = load i32, i32* @x.1
  %164 = load i32, i32* @y.2
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %162, label %171, label %211, !dbg !512

171:                                              ; preds = %originalBBpart232
  %172 = load i32, i32* @x.1
  %173 = load i32, i32* @y.2
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %171, %originalBB34alteredBB
  %180 = load i8*, i8** %14, align 8, !dbg !513
  %181 = call i32 @strncmp(i8* %180, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i64 0, i64 0), i64 3) #13, !dbg !513
  %182 = icmp ne i32 %181, 0, !dbg !513
  %183 = load i32, i32* @x.1
  %184 = load i32, i32* @y.2
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %182, label %191, label %211, !dbg !514

191:                                              ; preds = %originalBBpart236
  %192 = load i32, i32* @x.1
  %193 = load i32, i32* @y.2
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %191, %originalBB38alteredBB
  %200 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !515
  %201 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !515
  %202 = call i32 @fputs_unlocked(i8* %200, %struct._IO_FILE* %201), !dbg !515
  %203 = load i32, i32* @x.1
  %204 = load i32, i32* @y.2
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %211, !dbg !517

211:                                              ; preds = %originalBBpart240, %originalBBpart236, %originalBBpart232
  %212 = load i32, i32* @x.1
  %213 = load i32, i32* @y.2
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %211, %originalBB42alteredBB
  %220 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.37, i64 0, i64 0)) #10, !dbg !518
  %221 = load i8*, i8** %10, align 8, !dbg !519
  %222 = call i32 (i8*, ...) @printf(i8* %220, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0), i8* %221), !dbg !520
  %223 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !521
  %224 = load i8*, i8** %12, align 8, !dbg !522
  %225 = load i8*, i8** %12, align 8, !dbg !523
  %226 = load i8*, i8** %10, align 8, !dbg !524
  %227 = icmp eq i8* %225, %226, !dbg !525
  %228 = zext i1 %227 to i64, !dbg !523
  %229 = select i1 %227, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !523
  %230 = call i32 (i8*, ...) @printf(i8* %223, i8* %224, i8* %229), !dbg !526
  %231 = load i32, i32* @x.1
  %232 = load i32, i32* @y.2
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  ret void, !dbg !527

originalBBalteredBB:                              ; preds = %originalBB, %1
  %239 = alloca i8*, align 8
  %240 = alloca [7 x %struct.infomap], align 16
  %241 = alloca i8*, align 8
  %242 = alloca %struct.infomap*, align 8
  %243 = alloca i8*, align 8
  store i8* %0, i8** %239, align 8
  call void @llvm.dbg.declare(metadata i8** %239, metadata !528, metadata !DIExpression()), !dbg !470
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %240, metadata !630, metadata !DIExpression()), !dbg !480
  %244 = bitcast [7 x %struct.infomap]* %240 to i8*, !dbg !480
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %244, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !480
  call void @llvm.dbg.declare(metadata i8** %241, metadata !637, metadata !DIExpression()), !dbg !482
  %245 = load i8*, i8** %239, align 8, !dbg !483
  store i8* %245, i8** %241, align 8, !dbg !482
  call void @llvm.dbg.declare(metadata %struct.infomap** %242, metadata !638, metadata !DIExpression()), !dbg !486
  %246 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %240, i64 0, i64 0, !dbg !487
  store %struct.infomap* %246, %struct.infomap** %242, align 8, !dbg !486
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %247 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !489
  %248 = getelementptr inbounds %struct.infomap, %struct.infomap* %247, i32 0, i32 0, !dbg !490
  %249 = load i8*, i8** %248, align 8, !dbg !490
  %250 = icmp ne i8* %249, null, !dbg !489
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %251 = load i8*, i8** %10, align 8, !dbg !492
  %252 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !492
  %253 = getelementptr inbounds %struct.infomap, %struct.infomap* %252, i32 0, i32 0, !dbg !492
  %254 = load i8*, i8** %253, align 8, !dbg !492
  %255 = call i32 @strcmp(i8* %251, i8* %254) #13, !dbg !492
  %256 = icmp eq i32 %255, 0, !dbg !492
  %_ = shl i1 %256, true
  %_7 = sub i1 false, %256
  %gen = add i1 %_7, true
  %_8 = shl i1 %256, true
  %_9 = shl i1 %256, true
  %_10 = shl i1 %256, true
  %257 = xor i1 %256, true, !dbg !493
  br label %originalBB6

originalBB14alteredBB:                            ; preds = %originalBB14, %71
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %89
  %258 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !495
  %259 = getelementptr inbounds %struct.infomap, %struct.infomap* %258, i32 1, !dbg !495
  store %struct.infomap* %259, %struct.infomap** %13, align 8, !dbg !495
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %108
  %260 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !497
  %261 = getelementptr inbounds %struct.infomap, %struct.infomap* %260, i32 0, i32 1, !dbg !499
  %262 = load i8*, i8** %261, align 8, !dbg !499
  %263 = icmp ne i8* %262, null, !dbg !497
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %129
  %264 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !501
  %265 = getelementptr inbounds %struct.infomap, %struct.infomap* %264, i32 0, i32 1, !dbg !502
  %266 = load i8*, i8** %265, align 8, !dbg !502
  store i8* %266, i8** %12, align 8, !dbg !503
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %149
  %267 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !505
  %268 = call i32 (i8*, ...) @printf(i8* %267, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0)), !dbg !506
  call void @llvm.dbg.declare(metadata !4, metadata !640, metadata !DIExpression()), !dbg !508
  %269 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !509
  store i8* %269, i8** %14, align 8, !dbg !508
  %270 = load i8*, i8** %14, align 8, !dbg !510
  %271 = icmp ne i8* %270, null, !dbg !510
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %171
  %272 = load i8*, i8** %14, align 8, !dbg !513
  %273 = call i32 @strncmp(i8* %272, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i64 0, i64 0), i64 3) #13, !dbg !513
  %274 = icmp ne i32 %273, 0, !dbg !513
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %191
  %275 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !515
  %276 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !515
  %277 = call i32 @fputs_unlocked(i8* %275, %struct._IO_FILE* %276), !dbg !515
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %211
  %278 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.37, i64 0, i64 0)) #10, !dbg !518
  %279 = load i8*, i8** %10, align 8, !dbg !519
  %280 = call i32 (i8*, ...) @printf(i8* %278, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0), i8* %279), !dbg !520
  %281 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !521
  %282 = load i8*, i8** %12, align 8, !dbg !522
  %283 = load i8*, i8** %12, align 8, !dbg !523
  %284 = load i8*, i8** %10, align 8, !dbg !524
  %285 = icmp eq i8* %283, %284, !dbg !525
  %286 = zext i1 %285 to i64, !dbg !523
  %287 = select i1 %285, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !523
  %288 = call i32 (i8*, ...) @printf(i8* %281, i8* %282, i8* %287), !dbg !526
  br label %originalBB42
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !742 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !746, metadata !DIExpression()), !dbg !747
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !748, metadata !DIExpression()), !dbg !749
  call void @llvm.dbg.declare(metadata i32* %14, metadata !750, metadata !DIExpression()), !dbg !751
  call void @llvm.dbg.declare(metadata i8* %15, metadata !752, metadata !DIExpression()), !dbg !753
  store i8 1, i8* %15, align 1, !dbg !753
  %16 = load i8**, i8*** %13, align 8, !dbg !754
  %17 = getelementptr inbounds i8*, i8** %16, i64 0, !dbg !754
  %18 = load i8*, i8** %17, align 8, !dbg !754
  call void @set_program_name(i8* %18), !dbg !755
  %19 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !756
  %20 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !757
  %21 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !758
  %22 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !759
  %23 = load i32, i32* @x.3
  %24 = load i32, i32* @y.4
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %31, !dbg !760

31:                                               ; preds = %originalBBpart280, %originalBBpart2
  %32 = load i32, i32* @x.3
  %33 = load i32, i32* @y.4
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load i32, i32* %12, align 4, !dbg !761
  %41 = load i8**, i8*** %13, align 8, !dbg !762
  %42 = call i32 @getopt_long(i32 %40, i8** %41, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0), %struct.option* getelementptr inbounds ([18 x %struct.option], [18 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !763
  store i32 %42, i32* %14, align 4, !dbg !764
  %43 = icmp ne i32 %42, -1, !dbg !765
  %44 = load i32, i32* @x.3
  %45 = load i32, i32* @y.4
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %43, label %52, label %378, !dbg !760

52:                                               ; preds = %originalBBpart24
  %53 = load i32, i32* @x.3
  %54 = load i32, i32* @y.4
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  %61 = load i32, i32* %14, align 4, !dbg !766
  %62 = load i32, i32* @x.3
  %63 = load i32, i32* @y.4
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  switch i32 %61, label %344 [
    i32 97, label %70
    i32 98, label %87
    i32 100, label %104
    i32 72, label %121
    i32 108, label %138
    i32 109, label %155
    i32 112, label %172
    i32 113, label %189
    i32 114, label %206
    i32 115, label %223
    i32 116, label %240
    i32 84, label %257
    i32 119, label %257
    i32 117, label %274
    i32 128, label %291
    i32 -130, label %308
    i32 -131, label %325
  ], !dbg !768

70:                                               ; preds = %originalBBpart28
  %71 = load i32, i32* @x.3
  %72 = load i32, i32* @y.4
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %70, %originalBB10alteredBB
  store i8 1, i8* @need_boottime, align 1, !dbg !769
  store i8 1, i8* @need_deadprocs, align 1, !dbg !771
  store i8 1, i8* @need_login, align 1, !dbg !772
  store i8 1, i8* @need_initspawn, align 1, !dbg !773
  store i8 1, i8* @need_runlevel, align 1, !dbg !774
  store i8 1, i8* @need_clockchange, align 1, !dbg !775
  store i8 1, i8* @need_users, align 1, !dbg !776
  store i8 1, i8* @include_mesg, align 1, !dbg !777
  store i8 1, i8* @include_idle, align 1, !dbg !778
  store i8 1, i8* @include_exit, align 1, !dbg !779
  store i8 0, i8* %15, align 1, !dbg !780
  %79 = load i32, i32* @x.3
  %80 = load i32, i32* @y.4
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %361, !dbg !781

87:                                               ; preds = %originalBBpart28
  %88 = load i32, i32* @x.3
  %89 = load i32, i32* @y.4
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  store i8 1, i8* @need_boottime, align 1, !dbg !782
  store i8 0, i8* %15, align 1, !dbg !783
  %96 = load i32, i32* @x.3
  %97 = load i32, i32* @y.4
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %361, !dbg !784

104:                                              ; preds = %originalBBpart28
  %105 = load i32, i32* @x.3
  %106 = load i32, i32* @y.4
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %104, %originalBB18alteredBB
  store i8 1, i8* @need_deadprocs, align 1, !dbg !785
  store i8 1, i8* @include_idle, align 1, !dbg !786
  store i8 1, i8* @include_exit, align 1, !dbg !787
  store i8 0, i8* %15, align 1, !dbg !788
  %113 = load i32, i32* @x.3
  %114 = load i32, i32* @y.4
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %361, !dbg !789

121:                                              ; preds = %originalBBpart28
  %122 = load i32, i32* @x.3
  %123 = load i32, i32* @y.4
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %121, %originalBB22alteredBB
  store i8 1, i8* @include_heading, align 1, !dbg !790
  %130 = load i32, i32* @x.3
  %131 = load i32, i32* @y.4
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %361, !dbg !791

138:                                              ; preds = %originalBBpart28
  %139 = load i32, i32* @x.3
  %140 = load i32, i32* @y.4
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %138, %originalBB26alteredBB
  store i8 1, i8* @need_login, align 1, !dbg !792
  store i8 1, i8* @include_idle, align 1, !dbg !793
  store i8 0, i8* %15, align 1, !dbg !794
  %147 = load i32, i32* @x.3
  %148 = load i32, i32* @y.4
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %361, !dbg !795

155:                                              ; preds = %originalBBpart28
  %156 = load i32, i32* @x.3
  %157 = load i32, i32* @y.4
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %155, %originalBB30alteredBB
  store i8 1, i8* @my_line_only, align 1, !dbg !796
  %164 = load i32, i32* @x.3
  %165 = load i32, i32* @y.4
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %361, !dbg !797

172:                                              ; preds = %originalBBpart28
  %173 = load i32, i32* @x.3
  %174 = load i32, i32* @y.4
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %172, %originalBB34alteredBB
  store i8 1, i8* @need_initspawn, align 1, !dbg !798
  store i8 0, i8* %15, align 1, !dbg !799
  %181 = load i32, i32* @x.3
  %182 = load i32, i32* @y.4
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %361, !dbg !800

189:                                              ; preds = %originalBBpart28
  %190 = load i32, i32* @x.3
  %191 = load i32, i32* @y.4
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %189, %originalBB38alteredBB
  store i8 1, i8* @short_list, align 1, !dbg !801
  %198 = load i32, i32* @x.3
  %199 = load i32, i32* @y.4
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %361, !dbg !802

206:                                              ; preds = %originalBBpart28
  %207 = load i32, i32* @x.3
  %208 = load i32, i32* @y.4
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %206, %originalBB42alteredBB
  store i8 1, i8* @need_runlevel, align 1, !dbg !803
  store i8 1, i8* @include_idle, align 1, !dbg !804
  store i8 0, i8* %15, align 1, !dbg !805
  %215 = load i32, i32* @x.3
  %216 = load i32, i32* @y.4
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %361, !dbg !806

223:                                              ; preds = %originalBBpart28
  %224 = load i32, i32* @x.3
  %225 = load i32, i32* @y.4
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %223, %originalBB46alteredBB
  store i8 1, i8* @short_output, align 1, !dbg !807
  %232 = load i32, i32* @x.3
  %233 = load i32, i32* @y.4
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %361, !dbg !808

240:                                              ; preds = %originalBBpart28
  %241 = load i32, i32* @x.3
  %242 = load i32, i32* @y.4
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %240, %originalBB50alteredBB
  store i8 1, i8* @need_clockchange, align 1, !dbg !809
  store i8 0, i8* %15, align 1, !dbg !810
  %249 = load i32, i32* @x.3
  %250 = load i32, i32* @y.4
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %361, !dbg !811

257:                                              ; preds = %originalBBpart28, %originalBBpart28
  %258 = load i32, i32* @x.3
  %259 = load i32, i32* @y.4
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %257, %originalBB54alteredBB
  store i8 1, i8* @include_mesg, align 1, !dbg !812
  %266 = load i32, i32* @x.3
  %267 = load i32, i32* @y.4
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %361, !dbg !813

274:                                              ; preds = %originalBBpart28
  %275 = load i32, i32* @x.3
  %276 = load i32, i32* @y.4
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %274, %originalBB58alteredBB
  store i8 1, i8* @need_users, align 1, !dbg !814
  store i8 1, i8* @include_idle, align 1, !dbg !815
  store i8 0, i8* %15, align 1, !dbg !816
  %283 = load i32, i32* @x.3
  %284 = load i32, i32* @y.4
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %361, !dbg !817

291:                                              ; preds = %originalBBpart28
  %292 = load i32, i32* @x.3
  %293 = load i32, i32* @y.4
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %291, %originalBB62alteredBB
  store i8 1, i8* @do_lookup, align 1, !dbg !818
  %300 = load i32, i32* @x.3
  %301 = load i32, i32* @y.4
  %302 = sub i32 %300, 1
  %303 = mul i32 %300, %302
  %304 = urem i32 %303, 2
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %305, %306
  br i1 %307, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %361, !dbg !819

308:                                              ; preds = %originalBBpart28
  %309 = load i32, i32* @x.3
  %310 = load i32, i32* @y.4
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %308, %originalBB66alteredBB
  call void @usage(i32 0) #14, !dbg !820
  %317 = load i32, i32* @x.3
  %318 = load i32, i32* @y.4
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  unreachable, !dbg !820

325:                                              ; preds = %originalBBpart28
  %326 = load i32, i32* @x.3
  %327 = load i32, i32* @y.4
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %325, %originalBB70alteredBB
  %334 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !821
  %335 = load i8*, i8** @Version, align 8, !dbg !821
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %334, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* %335, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0), i8* null), !dbg !821
  call void @exit(i32 0) #12, !dbg !821
  %336 = load i32, i32* @x.3
  %337 = load i32, i32* @y.4
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  unreachable, !dbg !821

344:                                              ; preds = %originalBBpart28
  %345 = load i32, i32* @x.3
  %346 = load i32, i32* @y.4
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %344, %originalBB74alteredBB
  call void @usage(i32 1) #14, !dbg !822
  %353 = load i32, i32* @x.3
  %354 = load i32, i32* @y.4
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  unreachable, !dbg !822

361:                                              ; preds = %originalBBpart264, %originalBBpart260, %originalBBpart256, %originalBBpart252, %originalBBpart248, %originalBBpart244, %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216, %originalBBpart212
  %362 = load i32, i32* @x.3
  %363 = load i32, i32* @y.4
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %361, %originalBB78alteredBB
  %370 = load i32, i32* @x.3
  %371 = load i32, i32* @y.4
  %372 = sub i32 %370, 1
  %373 = mul i32 %370, %372
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %375, %376
  br i1 %377, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %31, !dbg !760, !llvm.loop !823

378:                                              ; preds = %originalBBpart24
  %379 = load i32, i32* @x.3
  %380 = load i32, i32* @y.4
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %378, %originalBB82alteredBB
  %387 = load i8, i8* %15, align 1, !dbg !825
  %388 = trunc i8 %387 to i1, !dbg !825
  %389 = load i32, i32* @x.3
  %390 = load i32, i32* @y.4
  %391 = sub i32 %389, 1
  %392 = mul i32 %389, %391
  %393 = urem i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %394, %395
  br i1 %396, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %388, label %397, label %414, !dbg !827

397:                                              ; preds = %originalBBpart284
  %398 = load i32, i32* @x.3
  %399 = load i32, i32* @y.4
  %400 = sub i32 %398, 1
  %401 = mul i32 %398, %400
  %402 = urem i32 %401, 2
  %403 = icmp eq i32 %402, 0
  %404 = icmp slt i32 %399, 10
  %405 = or i1 %403, %404
  br i1 %405, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %397, %originalBB86alteredBB
  store i8 1, i8* @need_users, align 1, !dbg !828
  store i8 1, i8* @short_output, align 1, !dbg !830
  %406 = load i32, i32* @x.3
  %407 = load i32, i32* @y.4
  %408 = sub i32 %406, 1
  %409 = mul i32 %406, %408
  %410 = urem i32 %409, 2
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %411, %412
  br i1 %413, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br label %414, !dbg !831

414:                                              ; preds = %originalBBpart288, %originalBBpart284
  %415 = load i32, i32* @x.3
  %416 = load i32, i32* @y.4
  %417 = sub i32 %415, 1
  %418 = mul i32 %415, %417
  %419 = urem i32 %418, 2
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %420, %421
  br i1 %422, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %414, %originalBB90alteredBB
  %423 = load i8, i8* @include_exit, align 1, !dbg !832
  %424 = trunc i8 %423 to i1, !dbg !832
  %425 = load i32, i32* @x.3
  %426 = load i32, i32* @y.4
  %427 = sub i32 %425, 1
  %428 = mul i32 %425, %427
  %429 = urem i32 %428, 2
  %430 = icmp eq i32 %429, 0
  %431 = icmp slt i32 %426, 10
  %432 = or i1 %430, %431
  br i1 %432, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br i1 %424, label %433, label %450, !dbg !834

433:                                              ; preds = %originalBBpart292
  %434 = load i32, i32* @x.3
  %435 = load i32, i32* @y.4
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %433, %originalBB94alteredBB
  store i8 0, i8* @short_output, align 1, !dbg !835
  %442 = load i32, i32* @x.3
  %443 = load i32, i32* @y.4
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br label %450, !dbg !837

450:                                              ; preds = %originalBBpart296, %originalBBpart292
  %451 = load i32, i32* @x.3
  %452 = load i32, i32* @y.4
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %450, %originalBB98alteredBB
  %459 = call zeroext i1 @hard_locale(i32 2), !dbg !838
  %460 = load i32, i32* @x.3
  %461 = load i32, i32* @y.4
  %462 = sub i32 %460, 1
  %463 = mul i32 %460, %462
  %464 = urem i32 %463, 2
  %465 = icmp eq i32 %464, 0
  %466 = icmp slt i32 %461, 10
  %467 = or i1 %465, %466
  br i1 %467, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br i1 %459, label %468, label %485, !dbg !840

468:                                              ; preds = %originalBBpart2100
  %469 = load i32, i32* @x.3
  %470 = load i32, i32* @y.4
  %471 = sub i32 %469, 1
  %472 = mul i32 %469, %471
  %473 = urem i32 %472, 2
  %474 = icmp eq i32 %473, 0
  %475 = icmp slt i32 %470, 10
  %476 = or i1 %474, %475
  br i1 %476, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %468, %originalBB102alteredBB
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0), i8** @time_format, align 8, !dbg !841
  store i32 16, i32* @time_format_width, align 4, !dbg !843
  %477 = load i32, i32* @x.3
  %478 = load i32, i32* @y.4
  %479 = sub i32 %477, 1
  %480 = mul i32 %477, %479
  %481 = urem i32 %480, 2
  %482 = icmp eq i32 %481, 0
  %483 = icmp slt i32 %478, 10
  %484 = or i1 %482, %483
  br i1 %484, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br label %502, !dbg !844

485:                                              ; preds = %originalBBpart2100
  %486 = load i32, i32* @x.3
  %487 = load i32, i32* @y.4
  %488 = sub i32 %486, 1
  %489 = mul i32 %486, %488
  %490 = urem i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %491, %492
  br i1 %493, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %485, %originalBB106alteredBB
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0), i8** @time_format, align 8, !dbg !845
  store i32 12, i32* @time_format_width, align 4, !dbg !847
  %494 = load i32, i32* @x.3
  %495 = load i32, i32* @y.4
  %496 = sub i32 %494, 1
  %497 = mul i32 %494, %496
  %498 = urem i32 %497, 2
  %499 = icmp eq i32 %498, 0
  %500 = icmp slt i32 %495, 10
  %501 = or i1 %499, %500
  br i1 %501, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %502

502:                                              ; preds = %originalBBpart2108, %originalBBpart2104
  %503 = load i32, i32* @x.3
  %504 = load i32, i32* @y.4
  %505 = sub i32 %503, 1
  %506 = mul i32 %503, %505
  %507 = urem i32 %506, 2
  %508 = icmp eq i32 %507, 0
  %509 = icmp slt i32 %504, 10
  %510 = or i1 %508, %509
  br i1 %510, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %502, %originalBB110alteredBB
  %511 = load i32, i32* %12, align 4, !dbg !848
  %512 = load i32, i32* @optind, align 4, !dbg !849
  %513 = sub nsw i32 %511, %512, !dbg !850
  %514 = load i32, i32* @x.3
  %515 = load i32, i32* @y.4
  %516 = sub i32 %514, 1
  %517 = mul i32 %514, %516
  %518 = urem i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %519, %520
  br i1 %521, label %originalBBpart2114, label %originalBB110alteredBB

originalBBpart2114:                               ; preds = %originalBB110
  switch i32 %513, label %578 [
    i32 2, label %522
    i32 -1, label %539
    i32 0, label %539
    i32 1, label %556
  ], !dbg !851

522:                                              ; preds = %originalBBpart2114
  %523 = load i32, i32* @x.3
  %524 = load i32, i32* @y.4
  %525 = sub i32 %523, 1
  %526 = mul i32 %523, %525
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %524, 10
  %530 = or i1 %528, %529
  br i1 %530, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %522, %originalBB116alteredBB
  store i8 1, i8* @my_line_only, align 1, !dbg !852
  %531 = load i32, i32* @x.3
  %532 = load i32, i32* @y.4
  %533 = sub i32 %531, 1
  %534 = mul i32 %531, %533
  %535 = urem i32 %534, 2
  %536 = icmp eq i32 %535, 0
  %537 = icmp slt i32 %532, 10
  %538 = or i1 %536, %537
  br i1 %538, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  br label %539, !dbg !854

539:                                              ; preds = %originalBBpart2118, %originalBBpart2114, %originalBBpart2114
  %540 = load i32, i32* @x.3
  %541 = load i32, i32* @y.4
  %542 = sub i32 %540, 1
  %543 = mul i32 %540, %542
  %544 = urem i32 %543, 2
  %545 = icmp eq i32 %544, 0
  %546 = icmp slt i32 %541, 10
  %547 = or i1 %545, %546
  br i1 %547, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %539, %originalBB120alteredBB
  call void @who(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i32 1), !dbg !855
  %548 = load i32, i32* @x.3
  %549 = load i32, i32* @y.4
  %550 = sub i32 %548, 1
  %551 = mul i32 %548, %550
  %552 = urem i32 %551, 2
  %553 = icmp eq i32 %552, 0
  %554 = icmp slt i32 %549, 10
  %555 = or i1 %553, %554
  br i1 %555, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br label %603, !dbg !856

556:                                              ; preds = %originalBBpart2114
  %557 = load i32, i32* @x.3
  %558 = load i32, i32* @y.4
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %556, %originalBB124alteredBB
  %565 = load i8**, i8*** %13, align 8, !dbg !857
  %566 = load i32, i32* @optind, align 4, !dbg !858
  %567 = sext i32 %566 to i64, !dbg !857
  %568 = getelementptr inbounds i8*, i8** %565, i64 %567, !dbg !857
  %569 = load i8*, i8** %568, align 8, !dbg !857
  call void @who(i8* %569, i32 0), !dbg !859
  %570 = load i32, i32* @x.3
  %571 = load i32, i32* @y.4
  %572 = sub i32 %570, 1
  %573 = mul i32 %570, %572
  %574 = urem i32 %573, 2
  %575 = icmp eq i32 %574, 0
  %576 = icmp slt i32 %571, 10
  %577 = or i1 %575, %576
  br i1 %577, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br label %603, !dbg !860

578:                                              ; preds = %originalBBpart2114
  %579 = load i32, i32* @x.3
  %580 = load i32, i32* @y.4
  %581 = sub i32 %579, 1
  %582 = mul i32 %579, %581
  %583 = urem i32 %582, 2
  %584 = icmp eq i32 %583, 0
  %585 = icmp slt i32 %580, 10
  %586 = or i1 %584, %585
  br i1 %586, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %578, %originalBB128alteredBB
  %587 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #10, !dbg !861
  %588 = load i8**, i8*** %13, align 8, !dbg !862
  %589 = load i32, i32* @optind, align 4, !dbg !863
  %590 = add nsw i32 %589, 2, !dbg !864
  %591 = sext i32 %590 to i64, !dbg !862
  %592 = getelementptr inbounds i8*, i8** %588, i64 %591, !dbg !862
  %593 = load i8*, i8** %592, align 8, !dbg !862
  %594 = call i8* @quote(i8* %593), !dbg !865
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %587, i8* %594), !dbg !866
  call void @usage(i32 1) #14, !dbg !867
  %595 = load i32, i32* @x.3
  %596 = load i32, i32* @y.4
  %597 = sub i32 %595, 1
  %598 = mul i32 %595, %597
  %599 = urem i32 %598, 2
  %600 = icmp eq i32 %599, 0
  %601 = icmp slt i32 %596, 10
  %602 = or i1 %600, %601
  br i1 %602, label %originalBBpart2140, label %originalBB128alteredBB

originalBBpart2140:                               ; preds = %originalBB128
  unreachable, !dbg !867

603:                                              ; preds = %originalBBpart2126, %originalBBpart2122
  %604 = load i32, i32* @x.3
  %605 = load i32, i32* @y.4
  %606 = sub i32 %604, 1
  %607 = mul i32 %604, %606
  %608 = urem i32 %607, 2
  %609 = icmp eq i32 %608, 0
  %610 = icmp slt i32 %605, 10
  %611 = or i1 %609, %610
  br i1 %611, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %603, %originalBB142alteredBB
  %612 = load i32, i32* @x.3
  %613 = load i32, i32* @y.4
  %614 = sub i32 %612, 1
  %615 = mul i32 %612, %614
  %616 = urem i32 %615, 2
  %617 = icmp eq i32 %616, 0
  %618 = icmp slt i32 %613, 10
  %619 = or i1 %617, %618
  br i1 %619, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  ret i32 0, !dbg !868

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %620 = alloca i32, align 4
  %621 = alloca i32, align 4
  %622 = alloca i8**, align 8
  %623 = alloca i32, align 4
  %624 = alloca i8, align 1
  store i32 0, i32* %620, align 4
  store i32 %0, i32* %621, align 4
  call void @llvm.dbg.declare(metadata i32* %621, metadata !869, metadata !DIExpression()), !dbg !747
  store i8** %1, i8*** %622, align 8
  call void @llvm.dbg.declare(metadata i8*** %622, metadata !971, metadata !DIExpression()), !dbg !749
  call void @llvm.dbg.declare(metadata i32* %623, metadata !972, metadata !DIExpression()), !dbg !751
  call void @llvm.dbg.declare(metadata i8* %624, metadata !973, metadata !DIExpression()), !dbg !753
  store i8 1, i8* %624, align 1, !dbg !753
  %625 = load i8**, i8*** %622, align 8, !dbg !754
  %626 = getelementptr inbounds i8*, i8** %625, i64 0, !dbg !754
  %627 = load i8*, i8** %626, align 8, !dbg !754
  call void @set_program_name(i8* %627), !dbg !755
  %628 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !756
  %629 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !757
  %630 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !758
  %631 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !759
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %632 = load i32, i32* %12, align 4, !dbg !761
  %633 = load i8**, i8*** %13, align 8, !dbg !762
  %634 = call i32 @getopt_long(i32 %632, i8** %633, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0), %struct.option* getelementptr inbounds ([18 x %struct.option], [18 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !763
  store i32 %634, i32* %14, align 4, !dbg !764
  %635 = icmp ne i32 %634, -1, !dbg !765
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  %636 = load i32, i32* %14, align 4, !dbg !766
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %70
  store i8 1, i8* @need_boottime, align 1, !dbg !769
  store i8 1, i8* @need_deadprocs, align 1, !dbg !771
  store i8 1, i8* @need_login, align 1, !dbg !772
  store i8 1, i8* @need_initspawn, align 1, !dbg !773
  store i8 1, i8* @need_runlevel, align 1, !dbg !774
  store i8 1, i8* @need_clockchange, align 1, !dbg !775
  store i8 1, i8* @need_users, align 1, !dbg !776
  store i8 1, i8* @include_mesg, align 1, !dbg !777
  store i8 1, i8* @include_idle, align 1, !dbg !778
  store i8 1, i8* @include_exit, align 1, !dbg !779
  store i8 0, i8* %15, align 1, !dbg !780
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  store i8 1, i8* @need_boottime, align 1, !dbg !782
  store i8 0, i8* %15, align 1, !dbg !783
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %104
  store i8 1, i8* @need_deadprocs, align 1, !dbg !785
  store i8 1, i8* @include_idle, align 1, !dbg !786
  store i8 1, i8* @include_exit, align 1, !dbg !787
  store i8 0, i8* %15, align 1, !dbg !788
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %121
  store i8 1, i8* @include_heading, align 1, !dbg !790
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %138
  store i8 1, i8* @need_login, align 1, !dbg !792
  store i8 1, i8* @include_idle, align 1, !dbg !793
  store i8 0, i8* %15, align 1, !dbg !794
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %155
  store i8 1, i8* @my_line_only, align 1, !dbg !796
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %172
  store i8 1, i8* @need_initspawn, align 1, !dbg !798
  store i8 0, i8* %15, align 1, !dbg !799
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %189
  store i8 1, i8* @short_list, align 1, !dbg !801
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %206
  store i8 1, i8* @need_runlevel, align 1, !dbg !803
  store i8 1, i8* @include_idle, align 1, !dbg !804
  store i8 0, i8* %15, align 1, !dbg !805
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %223
  store i8 1, i8* @short_output, align 1, !dbg !807
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %240
  store i8 1, i8* @need_clockchange, align 1, !dbg !809
  store i8 0, i8* %15, align 1, !dbg !810
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %257
  store i8 1, i8* @include_mesg, align 1, !dbg !812
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %274
  store i8 1, i8* @need_users, align 1, !dbg !814
  store i8 1, i8* @include_idle, align 1, !dbg !815
  store i8 0, i8* %15, align 1, !dbg !816
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %291
  store i8 1, i8* @do_lookup, align 1, !dbg !818
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %308
  call void @usage(i32 0) #14, !dbg !820
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %325
  %637 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !821
  %638 = load i8*, i8** @Version, align 8, !dbg !821
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %637, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* %638, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0), i8* null), !dbg !821
  call void @exit(i32 0) #12, !dbg !821
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %344
  call void @usage(i32 1) #14, !dbg !822
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %361
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %378
  %639 = load i8, i8* %15, align 1, !dbg !825
  %640 = trunc i8 %639 to i1, !dbg !825
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %397
  store i8 1, i8* @need_users, align 1, !dbg !828
  store i8 1, i8* @short_output, align 1, !dbg !830
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %414
  %641 = load i8, i8* @include_exit, align 1, !dbg !832
  %642 = trunc i8 %641 to i1, !dbg !832
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %433
  store i8 0, i8* @short_output, align 1, !dbg !835
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %450
  %643 = call zeroext i1 @hard_locale(i32 2), !dbg !838
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %468
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0), i8** @time_format, align 8, !dbg !841
  store i32 16, i32* @time_format_width, align 4, !dbg !843
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %485
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0), i8** @time_format, align 8, !dbg !845
  store i32 12, i32* @time_format_width, align 4, !dbg !847
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %502
  %644 = load i32, i32* %12, align 4, !dbg !848
  %645 = load i32, i32* @optind, align 4, !dbg !849
  %_ = sub i32 0, %644
  %gen = add i32 %_, %645
  %_111 = sub i32 0, %644
  %gen112 = add i32 %_111, %645
  %646 = sub nsw i32 %644, %645, !dbg !850
  br label %originalBB110

originalBB116alteredBB:                           ; preds = %originalBB116, %522
  store i8 1, i8* @my_line_only, align 1, !dbg !852
  br label %originalBB116

originalBB120alteredBB:                           ; preds = %originalBB120, %539
  call void @who(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i32 1), !dbg !855
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %556
  %647 = load i8**, i8*** %13, align 8, !dbg !857
  %648 = load i32, i32* @optind, align 4, !dbg !858
  %649 = sext i32 %648 to i64, !dbg !857
  %650 = getelementptr inbounds i8*, i8** %647, i64 %649, !dbg !857
  %651 = load i8*, i8** %650, align 8, !dbg !857
  call void @who(i8* %651, i32 0), !dbg !859
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %578
  %652 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #10, !dbg !861
  %653 = load i8**, i8*** %13, align 8, !dbg !862
  %654 = load i32, i32* @optind, align 4, !dbg !863
  %_129 = sub i32 0, %654
  %gen130 = add i32 %_129, 2
  %_131 = shl i32 %654, 2
  %_132 = sub i32 %654, 2
  %gen133 = mul i32 %_132, 2
  %_134 = sub i32 0, %654
  %gen135 = add i32 %_134, 2
  %_136 = sub i32 0, %654
  %gen137 = add i32 %_136, 2
  %_138 = shl i32 %654, 2
  %655 = add nsw i32 %654, 2, !dbg !864
  %656 = sext i32 %655 to i64, !dbg !862
  %657 = getelementptr inbounds i8*, i8** %653, i64 %656, !dbg !862
  %658 = load i8*, i8** %657, align 8, !dbg !862
  %659 = call i8* @quote(i8* %658), !dbg !865
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %652, i8* %659), !dbg !866
  call void @usage(i32 1) #14, !dbg !867
  br label %originalBB128

originalBB142alteredBB:                           ; preds = %originalBB142, %603
  br label %originalBB142
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @who(i8*, i32) #4 !dbg !974 {
  %3 = load i32, i32* @x.5
  %4 = load i32, i32* @y.6
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca %struct.utmpx*, align 8
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !977, metadata !DIExpression()), !dbg !978
  store i32 %1, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !979, metadata !DIExpression()), !dbg !980
  call void @llvm.dbg.declare(metadata i64* %13, metadata !981, metadata !DIExpression()), !dbg !982
  call void @llvm.dbg.declare(metadata %struct.utmpx** %14, metadata !983, metadata !DIExpression()), !dbg !985
  %15 = load i8*, i8** %11, align 8, !dbg !986
  %16 = load i32, i32* %12, align 4, !dbg !988
  %17 = call i32 @read_utmp(i8* %15, i64* %13, %struct.utmpx** %14, i32 %16), !dbg !989
  %18 = icmp ne i32 %17, 0, !dbg !990
  %19 = load i32, i32* @x.5
  %20 = load i32, i32* @y.6
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %48, !dbg !991

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.5
  %29 = load i32, i32* @y.6
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = call i32* @__errno_location() #15, !dbg !992
  %37 = load i32, i32* %36, align 4, !dbg !992
  %38 = load i8*, i8** %11, align 8, !dbg !992
  %39 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %38), !dbg !992
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i64 0, i64 0), i8* %39), !dbg !992
  %40 = load i32, i32* @x.5
  %41 = load i32, i32* @y.6
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !992

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.5
  %50 = load i32, i32* @y.6
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i8, i8* @short_list, align 1, !dbg !993
  %58 = trunc i8 %57 to i1, !dbg !993
  %59 = load i32, i32* @x.5
  %60 = load i32, i32* @y.6
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %58, label %67, label %86, !dbg !995

67:                                               ; preds = %originalBBpart28
  %68 = load i32, i32* @x.5
  %69 = load i32, i32* @y.6
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %76 = load i64, i64* %13, align 8, !dbg !996
  %77 = load %struct.utmpx*, %struct.utmpx** %14, align 8, !dbg !997
  call void @list_entries_who(i64 %76, %struct.utmpx* %77), !dbg !998
  %78 = load i32, i32* @x.5
  %79 = load i32, i32* @y.6
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %105, !dbg !998

86:                                               ; preds = %originalBBpart28
  %87 = load i32, i32* @x.5
  %88 = load i32, i32* @y.6
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %86, %originalBB14alteredBB
  %95 = load i64, i64* %13, align 8, !dbg !999
  %96 = load %struct.utmpx*, %struct.utmpx** %14, align 8, !dbg !1000
  call void @scan_entries(i64 %95, %struct.utmpx* %96), !dbg !1001
  %97 = load i32, i32* @x.5
  %98 = load i32, i32* @y.6
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %105

105:                                              ; preds = %originalBBpart216, %originalBBpart212
  %106 = load i32, i32* @x.5
  %107 = load i32, i32* @y.6
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %105, %originalBB18alteredBB
  %114 = load %struct.utmpx*, %struct.utmpx** %14, align 8, !dbg !1002
  %115 = bitcast %struct.utmpx* %114 to i8*, !dbg !1002
  call void @free(i8* %115) #10, !dbg !1003
  %116 = load i32, i32* @x.5
  %117 = load i32, i32* @y.6
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret void, !dbg !1004

originalBBalteredBB:                              ; preds = %originalBB, %2
  %124 = alloca i8*, align 8
  %125 = alloca i32, align 4
  %126 = alloca i64, align 8
  %127 = alloca %struct.utmpx*, align 8
  store i8* %0, i8** %124, align 8
  call void @llvm.dbg.declare(metadata i8** %124, metadata !1005, metadata !DIExpression()), !dbg !978
  store i32 %1, i32* %125, align 4
  call void @llvm.dbg.declare(metadata i32* %125, metadata !1107, metadata !DIExpression()), !dbg !980
  call void @llvm.dbg.declare(metadata i64* %126, metadata !1108, metadata !DIExpression()), !dbg !982
  call void @llvm.dbg.declare(metadata %struct.utmpx** %127, metadata !1109, metadata !DIExpression()), !dbg !985
  %128 = load i8*, i8** %124, align 8, !dbg !986
  %129 = load i32, i32* %125, align 4, !dbg !988
  %130 = call i32 @read_utmp(i8* %128, i64* %126, %struct.utmpx** %127, i32 %129), !dbg !989
  %131 = icmp ne i32 %130, 0, !dbg !990
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %132 = call i32* @__errno_location() #15, !dbg !992
  %133 = load i32, i32* %132, align 4, !dbg !992
  %134 = load i8*, i8** %11, align 8, !dbg !992
  %135 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %134), !dbg !992
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %133, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i64 0, i64 0), i8* %135), !dbg !992
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %136 = load i8, i8* @short_list, align 1, !dbg !993
  %137 = trunc i8 %136 to i1, !dbg !993
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %138 = load i64, i64* %13, align 8, !dbg !996
  %139 = load %struct.utmpx*, %struct.utmpx** %14, align 8, !dbg !997
  call void @list_entries_who(i64 %138, %struct.utmpx* %139), !dbg !998
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %86
  %140 = load i64, i64* %13, align 8, !dbg !999
  %141 = load %struct.utmpx*, %struct.utmpx** %14, align 8, !dbg !1000
  call void @scan_entries(i64 %140, %struct.utmpx* %141), !dbg !1001
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %105
  %142 = load %struct.utmpx*, %struct.utmpx** %14, align 8, !dbg !1002
  %143 = bitcast %struct.utmpx* %142 to i8*, !dbg !1002
  call void @free(i8* %143) #10, !dbg !1003
  br label %originalBB18
}

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal void @list_entries_who(i64, %struct.utmpx*) #4 !dbg !1111 {
  %3 = load i32, i32* @x.7
  %4 = load i32, i32* @y.8
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca %struct.utmpx*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !1114, metadata !DIExpression()), !dbg !1115
  store %struct.utmpx* %1, %struct.utmpx** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %12, metadata !1116, metadata !DIExpression()), !dbg !1117
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1118, metadata !DIExpression()), !dbg !1119
  store i64 0, i64* %13, align 8, !dbg !1119
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1120, metadata !DIExpression()), !dbg !1121
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8** %14, align 8, !dbg !1121
  %16 = load i32, i32* @x.7
  %17 = load i32, i32* @y.8
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %24, !dbg !1122

24:                                               ; preds = %originalBBpart231, %originalBBpart2
  %25 = load i32, i32* @x.7
  %26 = load i32, i32* @y.8
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %11, align 8, !dbg !1123
  %34 = add i64 %33, -1, !dbg !1123
  store i64 %34, i64* %11, align 8, !dbg !1123
  %35 = icmp ne i64 %33, 0, !dbg !1122
  %36 = load i32, i32* @x.7
  %37 = load i32, i32* @y.8
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart28, label %originalBB1alteredBB

originalBBpart28:                                 ; preds = %originalBB1
  br i1 %35, label %44, label %133, !dbg !1122

44:                                               ; preds = %originalBBpart28
  %45 = load i32, i32* @x.7
  %46 = load i32, i32* @y.8
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %44, %originalBB10alteredBB
  %53 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1124
  %54 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %53, i32 0, i32 4, !dbg !1124
  %55 = getelementptr inbounds [32 x i8], [32 x i8]* %54, i64 0, i64 0, !dbg !1124
  %56 = load i8, i8* %55, align 4, !dbg !1124
  %57 = sext i8 %56 to i32, !dbg !1124
  %58 = icmp ne i32 %57, 0, !dbg !1124
  %59 = load i32, i32* @x.7
  %60 = load i32, i32* @y.8
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %58, label %67, label %114, !dbg !1124

67:                                               ; preds = %originalBBpart212
  %68 = load i32, i32* @x.7
  %69 = load i32, i32* @y.8
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %67, %originalBB14alteredBB
  %76 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1124
  %77 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %76, i32 0, i32 0, !dbg !1124
  %78 = load i16, i16* %77, align 4, !dbg !1124
  %79 = sext i16 %78 to i32, !dbg !1124
  %80 = icmp eq i32 %79, 7, !dbg !1124
  %81 = load i32, i32* @x.7
  %82 = load i32, i32* @y.8
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %80, label %89, label %114, !dbg !1127

89:                                               ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8** %15, metadata !1128, metadata !DIExpression()), !dbg !1130
  %90 = load i32, i32* @x.7
  %91 = load i32, i32* @y.8
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %89, %originalBB18alteredBB
  %98 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1131
  %99 = call i8* @extract_trimmed_name(%struct.utmpx* %98), !dbg !1132
  store i8* %99, i8** %15, align 8, !dbg !1133
  %100 = load i8*, i8** %14, align 8, !dbg !1134
  %101 = load i8*, i8** %15, align 8, !dbg !1135
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i64 0, i64 0), i8* %100, i8* %101), !dbg !1136
  %103 = load i8*, i8** %15, align 8, !dbg !1137
  call void @free(i8* %103) #10, !dbg !1138
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i64 0, i64 0), i8** %14, align 8, !dbg !1139
  %104 = load i64, i64* %13, align 8, !dbg !1140
  %105 = add i64 %104, 1, !dbg !1140
  store i64 %105, i64* %13, align 8, !dbg !1140
  %106 = load i32, i32* @x.7
  %107 = load i32, i32* @y.8
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart226, label %originalBB18alteredBB

originalBBpart226:                                ; preds = %originalBB18
  br label %114, !dbg !1141

114:                                              ; preds = %originalBBpart226, %originalBBpart216, %originalBBpart212
  %115 = load i32, i32* @x.7
  %116 = load i32, i32* @y.8
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB28, label %originalBB28alteredBB

originalBB28:                                     ; preds = %114, %originalBB28alteredBB
  %123 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1142
  %124 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %123, i32 1, !dbg !1142
  store %struct.utmpx* %124, %struct.utmpx** %12, align 8, !dbg !1142
  %125 = load i32, i32* @x.7
  %126 = load i32, i32* @y.8
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart231, label %originalBB28alteredBB

originalBBpart231:                                ; preds = %originalBB28
  br label %24, !dbg !1122, !llvm.loop !1143

133:                                              ; preds = %originalBBpart28
  %134 = load i32, i32* @x.7
  %135 = load i32, i32* @y.8
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %133, %originalBB33alteredBB
  %142 = call i8* @gettext(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.60, i64 0, i64 0)) #10, !dbg !1145
  %143 = load i64, i64* %13, align 8, !dbg !1146
  %144 = call i32 (i8*, ...) @printf(i8* %142, i64 %143), !dbg !1147
  %145 = load i32, i32* @x.7
  %146 = load i32, i32* @y.8
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  ret void, !dbg !1148

originalBBalteredBB:                              ; preds = %originalBB, %2
  %153 = alloca i64, align 8
  %154 = alloca %struct.utmpx*, align 8
  %155 = alloca i64, align 8
  %156 = alloca i8*, align 8
  %157 = alloca i8*, align 8
  store i64 %0, i64* %153, align 8
  call void @llvm.dbg.declare(metadata i64* %153, metadata !1149, metadata !DIExpression()), !dbg !1115
  store %struct.utmpx* %1, %struct.utmpx** %154, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %154, metadata !1253, metadata !DIExpression()), !dbg !1117
  call void @llvm.dbg.declare(metadata i64* %155, metadata !1254, metadata !DIExpression()), !dbg !1119
  store i64 0, i64* %155, align 8, !dbg !1119
  call void @llvm.dbg.declare(metadata i8** %156, metadata !1255, metadata !DIExpression()), !dbg !1121
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8** %156, align 8, !dbg !1121
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %158 = load i64, i64* %11, align 8, !dbg !1123
  %_ = sub i64 0, %158
  %gen = add i64 %_, -1
  %_2 = shl i64 %158, -1
  %_3 = sub i64 0, %158
  %gen4 = add i64 %_3, -1
  %_5 = sub i64 0, %158
  %gen6 = add i64 %_5, -1
  %159 = add i64 %158, -1, !dbg !1123
  store i64 %159, i64* %11, align 8, !dbg !1123
  %160 = icmp ne i64 %158, 0, !dbg !1122
  br label %originalBB1

originalBB10alteredBB:                            ; preds = %originalBB10, %44
  %161 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1124
  %162 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %161, i32 0, i32 4, !dbg !1124
  %163 = getelementptr inbounds [32 x i8], [32 x i8]* %162, i64 0, i64 0, !dbg !1124
  %164 = load i8, i8* %163, align 4, !dbg !1124
  %165 = sext i8 %164 to i32, !dbg !1124
  %166 = icmp ne i32 %165, 0, !dbg !1124
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %67
  %167 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1124
  %168 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %167, i32 0, i32 0, !dbg !1124
  %169 = load i16, i16* %168, align 4, !dbg !1124
  %170 = sext i16 %169 to i32, !dbg !1124
  %171 = icmp eq i32 %170, 7, !dbg !1124
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %89
  %172 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1131
  %173 = call i8* @extract_trimmed_name(%struct.utmpx* %172), !dbg !1132
  store i8* %173, i8** %15, align 8, !dbg !1133
  %174 = load i8*, i8** %14, align 8, !dbg !1134
  %175 = load i8*, i8** %15, align 8, !dbg !1135
  %176 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i64 0, i64 0), i8* %174, i8* %175), !dbg !1136
  %177 = load i8*, i8** %15, align 8, !dbg !1137
  call void @free(i8* %177) #10, !dbg !1138
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i64 0, i64 0), i8** %14, align 8, !dbg !1139
  %178 = load i64, i64* %13, align 8, !dbg !1140
  %_19 = sub i64 %178, 1
  %gen20 = mul i64 %_19, 1
  %_21 = sub i64 0, %178
  %gen22 = add i64 %_21, 1
  %_23 = sub i64 0, %178
  %gen24 = add i64 %_23, 1
  %179 = add i64 %178, 1, !dbg !1140
  store i64 %179, i64* %13, align 8, !dbg !1140
  br label %originalBB18

originalBB28alteredBB:                            ; preds = %originalBB28, %114
  %180 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1142
  %181 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %180, i32 1, !dbg !1142
  store %struct.utmpx* %181, %struct.utmpx** %12, align 8, !dbg !1142
  br label %originalBB28

originalBB33alteredBB:                            ; preds = %originalBB33, %133
  %182 = call i8* @gettext(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.60, i64 0, i64 0)) #10, !dbg !1145
  %183 = load i64, i64* %13, align 8, !dbg !1146
  %184 = call i32 (i8*, ...) @printf(i8* %182, i64 %183), !dbg !1147
  br label %originalBB33
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @scan_entries(i64, %struct.utmpx*) #4 !dbg !1256 {
  %3 = load i32, i32* @x.9
  %4 = load i32, i32* @y.10
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca %struct.utmpx*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !1257, metadata !DIExpression()), !dbg !1258
  store %struct.utmpx* %1, %struct.utmpx** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %12, metadata !1259, metadata !DIExpression()), !dbg !1260
  call void @llvm.dbg.declare(metadata i8** %13, metadata !1261, metadata !DIExpression()), !dbg !1262
  call void @llvm.dbg.declare(metadata i64* %14, metadata !1263, metadata !DIExpression()), !dbg !1264
  store i64 -9223372036854775808, i64* %14, align 8, !dbg !1264
  %15 = load i8, i8* @include_heading, align 1, !dbg !1265
  %16 = trunc i8 %15 to i1, !dbg !1265
  %17 = load i32, i32* @x.9
  %18 = load i32, i32* @y.10
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !1267

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.9
  %27 = load i32, i32* @y.10
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  call void @print_heading(), !dbg !1268
  %34 = load i32, i32* @x.9
  %35 = load i32, i32* @y.10
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %42, !dbg !1268

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.9
  %44 = load i32, i32* @y.10
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8, i8* @my_line_only, align 1, !dbg !1269
  %52 = trunc i8 %51 to i1, !dbg !1269
  %53 = load i32, i32* @x.9
  %54 = load i32, i32* @y.10
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %52, label %61, label %344, !dbg !1271

61:                                               ; preds = %originalBBpart28
  %62 = load i32, i32* @x.9
  %63 = load i32, i32* @y.10
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = call i8* @ttyname(i32 0) #10, !dbg !1272
  store i8* %70, i8** %13, align 8, !dbg !1274
  %71 = load i8*, i8** %13, align 8, !dbg !1275
  %72 = icmp ne i8* %71, null, !dbg !1275
  %73 = load i32, i32* @x.9
  %74 = load i32, i32* @y.10
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %72, label %98, label %81, !dbg !1277

81:                                               ; preds = %originalBBpart212
  %82 = load i32, i32* @x.9
  %83 = load i32, i32* @y.10
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* @x.9
  %91 = load i32, i32* @y.10
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %1042, !dbg !1278

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.9
  %100 = load i32, i32* @y.10
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %98, %originalBB18alteredBB
  %107 = load i8*, i8** %13, align 8, !dbg !1279
  %108 = call i32 @strncmp(i8* %107, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0), i64 5) #13, !dbg !1279
  %109 = load i32, i32* @x.9
  %110 = load i32, i32* @y.10
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %117, !dbg !1281

117:                                              ; preds = %originalBBpart220
  %118 = load i32, i32* @x.9
  %119 = load i32, i32* @y.10
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %117, %originalBB22alteredBB
  %collatzVar = alloca i32
  %126 = load i32, i32* @x.9
  %127 = load i32, i32* @y.10
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %134

134:                                              ; preds = %originalBBpart224
  %135 = load i32, i32* @x.9
  %136 = load i32, i32* @y.10
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %134, %originalBB26alteredBB
  %143 = load i32, i32* @inVal0
  %144 = icmp sgt i32 %143, 1
  %145 = load i32, i32* @x.9
  %146 = load i32, i32* @y.10
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %144, label %170, label %153

153:                                              ; preds = %originalBBpart228
  %154 = load i32, i32* @x.9
  %155 = load i32, i32* @y.10
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %153, %originalBB30alteredBB
  store i32 45, i32* %collatzVar
  %162 = load i32, i32* @x.9
  %163 = load i32, i32* @y.10
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %170

170:                                              ; preds = %originalBBpart232, %originalBBpart228
  %171 = load i32, i32* @x.9
  %172 = load i32, i32* @y.10
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %170, %originalBB34alteredBB
  %179 = load i8**, i8*** @inVal1
  %180 = getelementptr inbounds i8*, i8** %179, i64 1
  %181 = load i8*, i8** %180
  %controle = call i32 @controle(i8* %181, i32 0)
  store i32 %controle, i32* %collatzVar
  %182 = load i32, i32* @x.9
  %183 = load i32, i32* @y.10
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %190

190:                                              ; preds = %originalBBpart2104, %originalBBpart291, %originalBBpart236
  %191 = load i32, i32* @x.9
  %192 = load i32, i32* @y.10
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %190, %originalBB38alteredBB
  %199 = load i32, i32* %collatzVar
  %200 = icmp sgt i32 %199, 1
  %201 = load i32, i32* @x.9
  %202 = load i32, i32* @y.10
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %200, label %209, label %327

209:                                              ; preds = %originalBBpart240
  %210 = load i32, i32* @x.9
  %211 = load i32, i32* @y.10
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %209, %originalBB42alteredBB
  %218 = load i32, i32* %collatzVar
  %219 = srem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = load i32, i32* @x.9
  %222 = load i32, i32* @y.10
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart249, label %originalBB42alteredBB

originalBBpart249:                                ; preds = %originalBB42
  br i1 %220, label %229, label %248

229:                                              ; preds = %originalBBpart249
  %230 = load i32, i32* @x.9
  %231 = load i32, i32* @y.10
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %229, %originalBB51alteredBB
  %238 = load i32, i32* %collatzVar
  %239 = sdiv i32 %238, 2
  store i32 %239, i32* %collatzVar
  %240 = load i32, i32* @x.9
  %241 = load i32, i32* @y.10
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart262, label %originalBB51alteredBB

originalBBpart262:                                ; preds = %originalBB51
  br label %268

248:                                              ; preds = %originalBBpart249
  %249 = load i32, i32* @x.9
  %250 = load i32, i32* @y.10
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBB64, label %originalBB64alteredBB

originalBB64:                                     ; preds = %248, %originalBB64alteredBB
  %257 = load i32, i32* %collatzVar
  %258 = mul i32 %257, 3
  %259 = add i32 %258, 1
  store i32 %259, i32* %collatzVar
  %260 = load i32, i32* @x.9
  %261 = load i32, i32* @y.10
  %262 = sub i32 %260, 1
  %263 = mul i32 %260, %262
  %264 = urem i32 %263, 2
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %265, %266
  br i1 %267, label %originalBBpart281, label %originalBB64alteredBB

originalBBpart281:                                ; preds = %originalBB64
  br label %268

268:                                              ; preds = %originalBBpart281, %originalBBpart262
  %269 = load i32, i32* @x.9
  %270 = load i32, i32* @y.10
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %268, %originalBB83alteredBB
  %277 = load i32, i32* %collatzVar
  %278 = sub i32 %108, %277
  %279 = icmp sgt i32 %278, -2
  %280 = load i32, i32* @x.9
  %281 = load i32, i32* @y.10
  %282 = sub i32 %280, 1
  %283 = mul i32 %280, %282
  %284 = urem i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %285, %286
  br i1 %287, label %originalBBpart291, label %originalBB83alteredBB

originalBBpart291:                                ; preds = %originalBB83
  br i1 %279, label %288, label %190

288:                                              ; preds = %originalBBpart291
  %289 = load i32, i32* @x.9
  %290 = load i32, i32* @y.10
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %288, %originalBB93alteredBB
  %297 = load i32, i32* %collatzVar
  %298 = add i32 %108, %297
  %299 = icmp slt i32 %298, 2
  %300 = load i32, i32* @x.9
  %301 = load i32, i32* @y.10
  %302 = sub i32 %300, 1
  %303 = mul i32 %300, %302
  %304 = urem i32 %303, 2
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %305, %306
  br i1 %307, label %originalBBpart2104, label %originalBB93alteredBB

originalBBpart2104:                               ; preds = %originalBB93
  br i1 %299, label %308, label %190

308:                                              ; preds = %originalBBpart2104
  %309 = load i32, i32* @x.9
  %310 = load i32, i32* @y.10
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %308, %originalBB106alteredBB
  %317 = load i8*, i8** %13, align 8, !dbg !1282
  %318 = getelementptr inbounds i8, i8* %317, i64 5, !dbg !1282
  store i8* %318, i8** %13, align 8, !dbg !1282
  %319 = load i32, i32* @x.9
  %320 = load i32, i32* @y.10
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %327, !dbg !1283

327:                                              ; preds = %originalBBpart2108, %originalBBpart240
  %328 = load i32, i32* @x.9
  %329 = load i32, i32* @y.10
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %327, %originalBB110alteredBB
  %336 = load i32, i32* @x.9
  %337 = load i32, i32* @y.10
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %344, !dbg !1284

344:                                              ; preds = %originalBBpart2112, %originalBBpart28
  %345 = load i32, i32* @x.9
  %346 = load i32, i32* @y.10
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %344, %originalBB114alteredBB
  %353 = load i32, i32* @x.9
  %354 = load i32, i32* @y.10
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %361, !dbg !1285

361:                                              ; preds = %originalBBpart2260, %originalBBpart2116
  %362 = load i32, i32* @x.9
  %363 = load i32, i32* @y.10
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %361, %originalBB118alteredBB
  %370 = load i64, i64* %11, align 8, !dbg !1286
  %371 = add i64 %370, -1, !dbg !1286
  store i64 %371, i64* %11, align 8, !dbg !1286
  %372 = icmp ne i64 %370, 0, !dbg !1285
  %373 = load i32, i32* @x.9
  %374 = load i32, i32* @y.10
  %375 = sub i32 %373, 1
  %376 = mul i32 %373, %375
  %377 = urem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %378, %379
  br i1 %380, label %originalBBpart2122, label %originalBB118alteredBB

originalBBpart2122:                               ; preds = %originalBB118
  br i1 %372, label %381, label %1042, !dbg !1285

381:                                              ; preds = %originalBBpart2122
  %382 = load i32, i32* @x.9
  %383 = load i32, i32* @y.10
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %381, %originalBB124alteredBB
  %390 = load i8, i8* @my_line_only, align 1, !dbg !1287
  %391 = trunc i8 %390 to i1, !dbg !1287
  %392 = load i32, i32* @x.9
  %393 = load i32, i32* @y.10
  %394 = sub i32 %392, 1
  %395 = mul i32 %392, %394
  %396 = urem i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %397, %398
  br i1 %399, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br i1 %391, label %400, label %423, !dbg !1290

400:                                              ; preds = %originalBBpart2126
  %401 = load i32, i32* @x.9
  %402 = load i32, i32* @y.10
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %400, %originalBB128alteredBB
  %409 = load i8*, i8** %13, align 8, !dbg !1291
  %410 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1291
  %411 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %410, i32 0, i32 2, !dbg !1291
  %412 = getelementptr inbounds [32 x i8], [32 x i8]* %411, i64 0, i64 0, !dbg !1291
  %413 = call i32 @strncmp(i8* %409, i8* %412, i64 32) #13, !dbg !1291
  %414 = icmp eq i32 %413, 0, !dbg !1291
  %415 = load i32, i32* @x.9
  %416 = load i32, i32* @y.10
  %417 = sub i32 %415, 1
  %418 = mul i32 %415, %417
  %419 = urem i32 %418, 2
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %420, %421
  br i1 %422, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  br i1 %414, label %423, label %979, !dbg !1292

423:                                              ; preds = %originalBBpart2130, %originalBBpart2126
  %424 = load i32, i32* @x.9
  %425 = load i32, i32* @y.10
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %423, %originalBB132alteredBB
  %432 = load i8, i8* @need_users, align 1, !dbg !1293
  %433 = trunc i8 %432 to i1, !dbg !1293
  %434 = load i32, i32* @x.9
  %435 = load i32, i32* @y.10
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  br i1 %433, label %442, label %506, !dbg !1296

442:                                              ; preds = %originalBBpart2134
  %443 = load i32, i32* @x.9
  %444 = load i32, i32* @y.10
  %445 = sub i32 %443, 1
  %446 = mul i32 %443, %445
  %447 = urem i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %448, %449
  br i1 %450, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %442, %originalBB136alteredBB
  %451 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1297
  %452 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %451, i32 0, i32 4, !dbg !1297
  %453 = getelementptr inbounds [32 x i8], [32 x i8]* %452, i64 0, i64 0, !dbg !1297
  %454 = load i8, i8* %453, align 4, !dbg !1297
  %455 = sext i8 %454 to i32, !dbg !1297
  %456 = icmp ne i32 %455, 0, !dbg !1297
  %457 = load i32, i32* @x.9
  %458 = load i32, i32* @y.10
  %459 = sub i32 %457, 1
  %460 = mul i32 %457, %459
  %461 = urem i32 %460, 2
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %462, %463
  br i1 %464, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br i1 %456, label %465, label %506, !dbg !1297

465:                                              ; preds = %originalBBpart2138
  %466 = load i32, i32* @x.9
  %467 = load i32, i32* @y.10
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %465, %originalBB140alteredBB
  %474 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1297
  %475 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %474, i32 0, i32 0, !dbg !1297
  %476 = load i16, i16* %475, align 4, !dbg !1297
  %477 = sext i16 %476 to i32, !dbg !1297
  %478 = icmp eq i32 %477, 7, !dbg !1297
  %479 = load i32, i32* @x.9
  %480 = load i32, i32* @y.10
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBBpart2142, label %originalBB140alteredBB

originalBBpart2142:                               ; preds = %originalBB140
  br i1 %478, label %487, label %506, !dbg !1298

487:                                              ; preds = %originalBBpart2142
  %488 = load i32, i32* @x.9
  %489 = load i32, i32* @y.10
  %490 = sub i32 %488, 1
  %491 = mul i32 %488, %490
  %492 = urem i32 %491, 2
  %493 = icmp eq i32 %492, 0
  %494 = icmp slt i32 %489, 10
  %495 = or i1 %493, %494
  br i1 %495, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %487, %originalBB144alteredBB
  %496 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1299
  %497 = load i64, i64* %14, align 8, !dbg !1300
  call void @print_user(%struct.utmpx* %496, i64 %497), !dbg !1301
  %498 = load i32, i32* @x.9
  %499 = load i32, i32* @y.10
  %500 = sub i32 %498, 1
  %501 = mul i32 %498, %500
  %502 = urem i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = icmp slt i32 %499, 10
  %505 = or i1 %503, %504
  br i1 %505, label %originalBBpart2146, label %originalBB144alteredBB

originalBBpart2146:                               ; preds = %originalBB144
  br label %962, !dbg !1301

506:                                              ; preds = %originalBBpart2142, %originalBBpart2138, %originalBBpart2134
  %507 = load i32, i32* @x.9
  %508 = load i32, i32* @y.10
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBB148, label %originalBB148alteredBB

originalBB148:                                    ; preds = %506, %originalBB148alteredBB
  %515 = load i8, i8* @need_runlevel, align 1, !dbg !1302
  %516 = trunc i8 %515 to i1, !dbg !1302
  %517 = load i32, i32* @x.9
  %518 = load i32, i32* @y.10
  %519 = sub i32 %517, 1
  %520 = mul i32 %517, %519
  %521 = urem i32 %520, 2
  %522 = icmp eq i32 %521, 0
  %523 = icmp slt i32 %518, 10
  %524 = or i1 %522, %523
  br i1 %524, label %originalBBpart2150, label %originalBB148alteredBB

originalBBpart2150:                               ; preds = %originalBB148
  br i1 %516, label %525, label %565, !dbg !1304

525:                                              ; preds = %originalBBpart2150
  %526 = load i32, i32* @x.9
  %527 = load i32, i32* @y.10
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBB152, label %originalBB152alteredBB

originalBB152:                                    ; preds = %525, %originalBB152alteredBB
  %534 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1305
  %535 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %534, i32 0, i32 0, !dbg !1305
  %536 = load i16, i16* %535, align 4, !dbg !1305
  %537 = sext i16 %536 to i32, !dbg !1305
  %538 = icmp eq i32 %537, 1, !dbg !1305
  %539 = load i32, i32* @x.9
  %540 = load i32, i32* @y.10
  %541 = sub i32 %539, 1
  %542 = mul i32 %539, %541
  %543 = urem i32 %542, 2
  %544 = icmp eq i32 %543, 0
  %545 = icmp slt i32 %540, 10
  %546 = or i1 %544, %545
  br i1 %546, label %originalBBpart2154, label %originalBB152alteredBB

originalBBpart2154:                               ; preds = %originalBB152
  br i1 %538, label %547, label %565, !dbg !1306

547:                                              ; preds = %originalBBpart2154
  %548 = load i32, i32* @x.9
  %549 = load i32, i32* @y.10
  %550 = sub i32 %548, 1
  %551 = mul i32 %548, %550
  %552 = urem i32 %551, 2
  %553 = icmp eq i32 %552, 0
  %554 = icmp slt i32 %549, 10
  %555 = or i1 %553, %554
  br i1 %555, label %originalBB156, label %originalBB156alteredBB

originalBB156:                                    ; preds = %547, %originalBB156alteredBB
  %556 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1307
  call void @print_runlevel(%struct.utmpx* %556), !dbg !1308
  %557 = load i32, i32* @x.9
  %558 = load i32, i32* @y.10
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2158, label %originalBB156alteredBB

originalBBpart2158:                               ; preds = %originalBB156
  br label %945, !dbg !1308

565:                                              ; preds = %originalBBpart2154, %originalBBpart2150
  %566 = load i32, i32* @x.9
  %567 = load i32, i32* @y.10
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBB160, label %originalBB160alteredBB

originalBB160:                                    ; preds = %565, %originalBB160alteredBB
  %574 = load i8, i8* @need_boottime, align 1, !dbg !1309
  %575 = trunc i8 %574 to i1, !dbg !1309
  %576 = load i32, i32* @x.9
  %577 = load i32, i32* @y.10
  %578 = sub i32 %576, 1
  %579 = mul i32 %576, %578
  %580 = urem i32 %579, 2
  %581 = icmp eq i32 %580, 0
  %582 = icmp slt i32 %577, 10
  %583 = or i1 %581, %582
  br i1 %583, label %originalBBpart2162, label %originalBB160alteredBB

originalBBpart2162:                               ; preds = %originalBB160
  br i1 %575, label %584, label %624, !dbg !1311

584:                                              ; preds = %originalBBpart2162
  %585 = load i32, i32* @x.9
  %586 = load i32, i32* @y.10
  %587 = sub i32 %585, 1
  %588 = mul i32 %585, %587
  %589 = urem i32 %588, 2
  %590 = icmp eq i32 %589, 0
  %591 = icmp slt i32 %586, 10
  %592 = or i1 %590, %591
  br i1 %592, label %originalBB164, label %originalBB164alteredBB

originalBB164:                                    ; preds = %584, %originalBB164alteredBB
  %593 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1312
  %594 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %593, i32 0, i32 0, !dbg !1312
  %595 = load i16, i16* %594, align 4, !dbg !1312
  %596 = sext i16 %595 to i32, !dbg !1312
  %597 = icmp eq i32 %596, 2, !dbg !1312
  %598 = load i32, i32* @x.9
  %599 = load i32, i32* @y.10
  %600 = sub i32 %598, 1
  %601 = mul i32 %598, %600
  %602 = urem i32 %601, 2
  %603 = icmp eq i32 %602, 0
  %604 = icmp slt i32 %599, 10
  %605 = or i1 %603, %604
  br i1 %605, label %originalBBpart2166, label %originalBB164alteredBB

originalBBpart2166:                               ; preds = %originalBB164
  br i1 %597, label %606, label %624, !dbg !1313

606:                                              ; preds = %originalBBpart2166
  %607 = load i32, i32* @x.9
  %608 = load i32, i32* @y.10
  %609 = sub i32 %607, 1
  %610 = mul i32 %607, %609
  %611 = urem i32 %610, 2
  %612 = icmp eq i32 %611, 0
  %613 = icmp slt i32 %608, 10
  %614 = or i1 %612, %613
  br i1 %614, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %606, %originalBB168alteredBB
  %615 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1314
  call void @print_boottime(%struct.utmpx* %615), !dbg !1315
  %616 = load i32, i32* @x.9
  %617 = load i32, i32* @y.10
  %618 = sub i32 %616, 1
  %619 = mul i32 %616, %618
  %620 = urem i32 %619, 2
  %621 = icmp eq i32 %620, 0
  %622 = icmp slt i32 %617, 10
  %623 = or i1 %621, %622
  br i1 %623, label %originalBBpart2170, label %originalBB168alteredBB

originalBBpart2170:                               ; preds = %originalBB168
  br label %928, !dbg !1315

624:                                              ; preds = %originalBBpart2166, %originalBBpart2162
  %625 = load i32, i32* @x.9
  %626 = load i32, i32* @y.10
  %627 = sub i32 %625, 1
  %628 = mul i32 %625, %627
  %629 = urem i32 %628, 2
  %630 = icmp eq i32 %629, 0
  %631 = icmp slt i32 %626, 10
  %632 = or i1 %630, %631
  br i1 %632, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %624, %originalBB172alteredBB
  %633 = load i8, i8* @need_clockchange, align 1, !dbg !1316
  %634 = trunc i8 %633 to i1, !dbg !1316
  %635 = load i32, i32* @x.9
  %636 = load i32, i32* @y.10
  %637 = sub i32 %635, 1
  %638 = mul i32 %635, %637
  %639 = urem i32 %638, 2
  %640 = icmp eq i32 %639, 0
  %641 = icmp slt i32 %636, 10
  %642 = or i1 %640, %641
  br i1 %642, label %originalBBpart2174, label %originalBB172alteredBB

originalBBpart2174:                               ; preds = %originalBB172
  br i1 %634, label %643, label %683, !dbg !1318

643:                                              ; preds = %originalBBpart2174
  %644 = load i32, i32* @x.9
  %645 = load i32, i32* @y.10
  %646 = sub i32 %644, 1
  %647 = mul i32 %644, %646
  %648 = urem i32 %647, 2
  %649 = icmp eq i32 %648, 0
  %650 = icmp slt i32 %645, 10
  %651 = or i1 %649, %650
  br i1 %651, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %643, %originalBB176alteredBB
  %652 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1319
  %653 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %652, i32 0, i32 0, !dbg !1319
  %654 = load i16, i16* %653, align 4, !dbg !1319
  %655 = sext i16 %654 to i32, !dbg !1319
  %656 = icmp eq i32 %655, 3, !dbg !1319
  %657 = load i32, i32* @x.9
  %658 = load i32, i32* @y.10
  %659 = sub i32 %657, 1
  %660 = mul i32 %657, %659
  %661 = urem i32 %660, 2
  %662 = icmp eq i32 %661, 0
  %663 = icmp slt i32 %658, 10
  %664 = or i1 %662, %663
  br i1 %664, label %originalBBpart2178, label %originalBB176alteredBB

originalBBpart2178:                               ; preds = %originalBB176
  br i1 %656, label %665, label %683, !dbg !1320

665:                                              ; preds = %originalBBpart2178
  %666 = load i32, i32* @x.9
  %667 = load i32, i32* @y.10
  %668 = sub i32 %666, 1
  %669 = mul i32 %666, %668
  %670 = urem i32 %669, 2
  %671 = icmp eq i32 %670, 0
  %672 = icmp slt i32 %667, 10
  %673 = or i1 %671, %672
  br i1 %673, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %665, %originalBB180alteredBB
  %674 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1321
  call void @print_clockchange(%struct.utmpx* %674), !dbg !1322
  %675 = load i32, i32* @x.9
  %676 = load i32, i32* @y.10
  %677 = sub i32 %675, 1
  %678 = mul i32 %675, %677
  %679 = urem i32 %678, 2
  %680 = icmp eq i32 %679, 0
  %681 = icmp slt i32 %676, 10
  %682 = or i1 %680, %681
  br i1 %682, label %originalBBpart2182, label %originalBB180alteredBB

originalBBpart2182:                               ; preds = %originalBB180
  br label %911, !dbg !1322

683:                                              ; preds = %originalBBpart2178, %originalBBpart2174
  %684 = load i32, i32* @x.9
  %685 = load i32, i32* @y.10
  %686 = sub i32 %684, 1
  %687 = mul i32 %684, %686
  %688 = urem i32 %687, 2
  %689 = icmp eq i32 %688, 0
  %690 = icmp slt i32 %685, 10
  %691 = or i1 %689, %690
  br i1 %691, label %originalBB184, label %originalBB184alteredBB

originalBB184:                                    ; preds = %683, %originalBB184alteredBB
  %692 = load i8, i8* @need_initspawn, align 1, !dbg !1323
  %693 = trunc i8 %692 to i1, !dbg !1323
  %694 = load i32, i32* @x.9
  %695 = load i32, i32* @y.10
  %696 = sub i32 %694, 1
  %697 = mul i32 %694, %696
  %698 = urem i32 %697, 2
  %699 = icmp eq i32 %698, 0
  %700 = icmp slt i32 %695, 10
  %701 = or i1 %699, %700
  br i1 %701, label %originalBBpart2186, label %originalBB184alteredBB

originalBBpart2186:                               ; preds = %originalBB184
  br i1 %693, label %702, label %742, !dbg !1325

702:                                              ; preds = %originalBBpart2186
  %703 = load i32, i32* @x.9
  %704 = load i32, i32* @y.10
  %705 = sub i32 %703, 1
  %706 = mul i32 %703, %705
  %707 = urem i32 %706, 2
  %708 = icmp eq i32 %707, 0
  %709 = icmp slt i32 %704, 10
  %710 = or i1 %708, %709
  br i1 %710, label %originalBB188, label %originalBB188alteredBB

originalBB188:                                    ; preds = %702, %originalBB188alteredBB
  %711 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1326
  %712 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %711, i32 0, i32 0, !dbg !1326
  %713 = load i16, i16* %712, align 4, !dbg !1326
  %714 = sext i16 %713 to i32, !dbg !1326
  %715 = icmp eq i32 %714, 5, !dbg !1326
  %716 = load i32, i32* @x.9
  %717 = load i32, i32* @y.10
  %718 = sub i32 %716, 1
  %719 = mul i32 %716, %718
  %720 = urem i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = icmp slt i32 %717, 10
  %723 = or i1 %721, %722
  br i1 %723, label %originalBBpart2190, label %originalBB188alteredBB

originalBBpart2190:                               ; preds = %originalBB188
  br i1 %715, label %724, label %742, !dbg !1327

724:                                              ; preds = %originalBBpart2190
  %725 = load i32, i32* @x.9
  %726 = load i32, i32* @y.10
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %724, %originalBB192alteredBB
  %733 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1328
  call void @print_initspawn(%struct.utmpx* %733), !dbg !1329
  %734 = load i32, i32* @x.9
  %735 = load i32, i32* @y.10
  %736 = sub i32 %734, 1
  %737 = mul i32 %734, %736
  %738 = urem i32 %737, 2
  %739 = icmp eq i32 %738, 0
  %740 = icmp slt i32 %735, 10
  %741 = or i1 %739, %740
  br i1 %741, label %originalBBpart2194, label %originalBB192alteredBB

originalBBpart2194:                               ; preds = %originalBB192
  br label %894, !dbg !1329

742:                                              ; preds = %originalBBpart2190, %originalBBpart2186
  %743 = load i32, i32* @x.9
  %744 = load i32, i32* @y.10
  %745 = sub i32 %743, 1
  %746 = mul i32 %743, %745
  %747 = urem i32 %746, 2
  %748 = icmp eq i32 %747, 0
  %749 = icmp slt i32 %744, 10
  %750 = or i1 %748, %749
  br i1 %750, label %originalBB196, label %originalBB196alteredBB

originalBB196:                                    ; preds = %742, %originalBB196alteredBB
  %751 = load i8, i8* @need_login, align 1, !dbg !1330
  %752 = trunc i8 %751 to i1, !dbg !1330
  %753 = load i32, i32* @x.9
  %754 = load i32, i32* @y.10
  %755 = sub i32 %753, 1
  %756 = mul i32 %753, %755
  %757 = urem i32 %756, 2
  %758 = icmp eq i32 %757, 0
  %759 = icmp slt i32 %754, 10
  %760 = or i1 %758, %759
  br i1 %760, label %originalBBpart2198, label %originalBB196alteredBB

originalBBpart2198:                               ; preds = %originalBB196
  br i1 %752, label %761, label %801, !dbg !1332

761:                                              ; preds = %originalBBpart2198
  %762 = load i32, i32* @x.9
  %763 = load i32, i32* @y.10
  %764 = sub i32 %762, 1
  %765 = mul i32 %762, %764
  %766 = urem i32 %765, 2
  %767 = icmp eq i32 %766, 0
  %768 = icmp slt i32 %763, 10
  %769 = or i1 %767, %768
  br i1 %769, label %originalBB200, label %originalBB200alteredBB

originalBB200:                                    ; preds = %761, %originalBB200alteredBB
  %770 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1333
  %771 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %770, i32 0, i32 0, !dbg !1333
  %772 = load i16, i16* %771, align 4, !dbg !1333
  %773 = sext i16 %772 to i32, !dbg !1333
  %774 = icmp eq i32 %773, 6, !dbg !1333
  %775 = load i32, i32* @x.9
  %776 = load i32, i32* @y.10
  %777 = sub i32 %775, 1
  %778 = mul i32 %775, %777
  %779 = urem i32 %778, 2
  %780 = icmp eq i32 %779, 0
  %781 = icmp slt i32 %776, 10
  %782 = or i1 %780, %781
  br i1 %782, label %originalBBpart2202, label %originalBB200alteredBB

originalBBpart2202:                               ; preds = %originalBB200
  br i1 %774, label %783, label %801, !dbg !1334

783:                                              ; preds = %originalBBpart2202
  %784 = load i32, i32* @x.9
  %785 = load i32, i32* @y.10
  %786 = sub i32 %784, 1
  %787 = mul i32 %784, %786
  %788 = urem i32 %787, 2
  %789 = icmp eq i32 %788, 0
  %790 = icmp slt i32 %785, 10
  %791 = or i1 %789, %790
  br i1 %791, label %originalBB204, label %originalBB204alteredBB

originalBB204:                                    ; preds = %783, %originalBB204alteredBB
  %792 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1335
  call void @print_login(%struct.utmpx* %792), !dbg !1336
  %793 = load i32, i32* @x.9
  %794 = load i32, i32* @y.10
  %795 = sub i32 %793, 1
  %796 = mul i32 %793, %795
  %797 = urem i32 %796, 2
  %798 = icmp eq i32 %797, 0
  %799 = icmp slt i32 %794, 10
  %800 = or i1 %798, %799
  br i1 %800, label %originalBBpart2206, label %originalBB204alteredBB

originalBBpart2206:                               ; preds = %originalBB204
  br label %877, !dbg !1336

801:                                              ; preds = %originalBBpart2202, %originalBBpart2198
  %802 = load i32, i32* @x.9
  %803 = load i32, i32* @y.10
  %804 = sub i32 %802, 1
  %805 = mul i32 %802, %804
  %806 = urem i32 %805, 2
  %807 = icmp eq i32 %806, 0
  %808 = icmp slt i32 %803, 10
  %809 = or i1 %807, %808
  br i1 %809, label %originalBB208, label %originalBB208alteredBB

originalBB208:                                    ; preds = %801, %originalBB208alteredBB
  %810 = load i8, i8* @need_deadprocs, align 1, !dbg !1337
  %811 = trunc i8 %810 to i1, !dbg !1337
  %812 = load i32, i32* @x.9
  %813 = load i32, i32* @y.10
  %814 = sub i32 %812, 1
  %815 = mul i32 %812, %814
  %816 = urem i32 %815, 2
  %817 = icmp eq i32 %816, 0
  %818 = icmp slt i32 %813, 10
  %819 = or i1 %817, %818
  br i1 %819, label %originalBBpart2210, label %originalBB208alteredBB

originalBBpart2210:                               ; preds = %originalBB208
  br i1 %811, label %820, label %860, !dbg !1339

820:                                              ; preds = %originalBBpart2210
  %821 = load i32, i32* @x.9
  %822 = load i32, i32* @y.10
  %823 = sub i32 %821, 1
  %824 = mul i32 %821, %823
  %825 = urem i32 %824, 2
  %826 = icmp eq i32 %825, 0
  %827 = icmp slt i32 %822, 10
  %828 = or i1 %826, %827
  br i1 %828, label %originalBB212, label %originalBB212alteredBB

originalBB212:                                    ; preds = %820, %originalBB212alteredBB
  %829 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1340
  %830 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %829, i32 0, i32 0, !dbg !1340
  %831 = load i16, i16* %830, align 4, !dbg !1340
  %832 = sext i16 %831 to i32, !dbg !1340
  %833 = icmp eq i32 %832, 8, !dbg !1340
  %834 = load i32, i32* @x.9
  %835 = load i32, i32* @y.10
  %836 = sub i32 %834, 1
  %837 = mul i32 %834, %836
  %838 = urem i32 %837, 2
  %839 = icmp eq i32 %838, 0
  %840 = icmp slt i32 %835, 10
  %841 = or i1 %839, %840
  br i1 %841, label %originalBBpart2215, label %originalBB212alteredBB

originalBBpart2215:                               ; preds = %originalBB212
  br i1 %833, label %842, label %860, !dbg !1341

842:                                              ; preds = %originalBBpart2215
  %843 = load i32, i32* @x.9
  %844 = load i32, i32* @y.10
  %845 = sub i32 %843, 1
  %846 = mul i32 %843, %845
  %847 = urem i32 %846, 2
  %848 = icmp eq i32 %847, 0
  %849 = icmp slt i32 %844, 10
  %850 = or i1 %848, %849
  br i1 %850, label %originalBB217, label %originalBB217alteredBB

originalBB217:                                    ; preds = %842, %originalBB217alteredBB
  %851 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1342
  call void @print_deadprocs(%struct.utmpx* %851), !dbg !1343
  %852 = load i32, i32* @x.9
  %853 = load i32, i32* @y.10
  %854 = sub i32 %852, 1
  %855 = mul i32 %852, %854
  %856 = urem i32 %855, 2
  %857 = icmp eq i32 %856, 0
  %858 = icmp slt i32 %853, 10
  %859 = or i1 %857, %858
  br i1 %859, label %originalBBpart2219, label %originalBB217alteredBB

originalBBpart2219:                               ; preds = %originalBB217
  br label %860, !dbg !1343

860:                                              ; preds = %originalBBpart2219, %originalBBpart2215, %originalBBpart2210
  %861 = load i32, i32* @x.9
  %862 = load i32, i32* @y.10
  %863 = sub i32 %861, 1
  %864 = mul i32 %861, %863
  %865 = urem i32 %864, 2
  %866 = icmp eq i32 %865, 0
  %867 = icmp slt i32 %862, 10
  %868 = or i1 %866, %867
  br i1 %868, label %originalBB221, label %originalBB221alteredBB

originalBB221:                                    ; preds = %860, %originalBB221alteredBB
  %869 = load i32, i32* @x.9
  %870 = load i32, i32* @y.10
  %871 = sub i32 %869, 1
  %872 = mul i32 %869, %871
  %873 = urem i32 %872, 2
  %874 = icmp eq i32 %873, 0
  %875 = icmp slt i32 %870, 10
  %876 = or i1 %874, %875
  br i1 %876, label %originalBBpart2223, label %originalBB221alteredBB

originalBBpart2223:                               ; preds = %originalBB221
  br label %877

877:                                              ; preds = %originalBBpart2223, %originalBBpart2206
  %878 = load i32, i32* @x.9
  %879 = load i32, i32* @y.10
  %880 = sub i32 %878, 1
  %881 = mul i32 %878, %880
  %882 = urem i32 %881, 2
  %883 = icmp eq i32 %882, 0
  %884 = icmp slt i32 %879, 10
  %885 = or i1 %883, %884
  br i1 %885, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %877, %originalBB225alteredBB
  %886 = load i32, i32* @x.9
  %887 = load i32, i32* @y.10
  %888 = sub i32 %886, 1
  %889 = mul i32 %886, %888
  %890 = urem i32 %889, 2
  %891 = icmp eq i32 %890, 0
  %892 = icmp slt i32 %887, 10
  %893 = or i1 %891, %892
  br i1 %893, label %originalBBpart2227, label %originalBB225alteredBB

originalBBpart2227:                               ; preds = %originalBB225
  br label %894

894:                                              ; preds = %originalBBpart2227, %originalBBpart2194
  %895 = load i32, i32* @x.9
  %896 = load i32, i32* @y.10
  %897 = sub i32 %895, 1
  %898 = mul i32 %895, %897
  %899 = urem i32 %898, 2
  %900 = icmp eq i32 %899, 0
  %901 = icmp slt i32 %896, 10
  %902 = or i1 %900, %901
  br i1 %902, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %894, %originalBB229alteredBB
  %903 = load i32, i32* @x.9
  %904 = load i32, i32* @y.10
  %905 = sub i32 %903, 1
  %906 = mul i32 %903, %905
  %907 = urem i32 %906, 2
  %908 = icmp eq i32 %907, 0
  %909 = icmp slt i32 %904, 10
  %910 = or i1 %908, %909
  br i1 %910, label %originalBBpart2231, label %originalBB229alteredBB

originalBBpart2231:                               ; preds = %originalBB229
  br label %911

911:                                              ; preds = %originalBBpart2231, %originalBBpart2182
  %912 = load i32, i32* @x.9
  %913 = load i32, i32* @y.10
  %914 = sub i32 %912, 1
  %915 = mul i32 %912, %914
  %916 = urem i32 %915, 2
  %917 = icmp eq i32 %916, 0
  %918 = icmp slt i32 %913, 10
  %919 = or i1 %917, %918
  br i1 %919, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %911, %originalBB233alteredBB
  %920 = load i32, i32* @x.9
  %921 = load i32, i32* @y.10
  %922 = sub i32 %920, 1
  %923 = mul i32 %920, %922
  %924 = urem i32 %923, 2
  %925 = icmp eq i32 %924, 0
  %926 = icmp slt i32 %921, 10
  %927 = or i1 %925, %926
  br i1 %927, label %originalBBpart2235, label %originalBB233alteredBB

originalBBpart2235:                               ; preds = %originalBB233
  br label %928

928:                                              ; preds = %originalBBpart2235, %originalBBpart2170
  %929 = load i32, i32* @x.9
  %930 = load i32, i32* @y.10
  %931 = sub i32 %929, 1
  %932 = mul i32 %929, %931
  %933 = urem i32 %932, 2
  %934 = icmp eq i32 %933, 0
  %935 = icmp slt i32 %930, 10
  %936 = or i1 %934, %935
  br i1 %936, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %928, %originalBB237alteredBB
  %937 = load i32, i32* @x.9
  %938 = load i32, i32* @y.10
  %939 = sub i32 %937, 1
  %940 = mul i32 %937, %939
  %941 = urem i32 %940, 2
  %942 = icmp eq i32 %941, 0
  %943 = icmp slt i32 %938, 10
  %944 = or i1 %942, %943
  br i1 %944, label %originalBBpart2239, label %originalBB237alteredBB

originalBBpart2239:                               ; preds = %originalBB237
  br label %945

945:                                              ; preds = %originalBBpart2239, %originalBBpart2158
  %946 = load i32, i32* @x.9
  %947 = load i32, i32* @y.10
  %948 = sub i32 %946, 1
  %949 = mul i32 %946, %948
  %950 = urem i32 %949, 2
  %951 = icmp eq i32 %950, 0
  %952 = icmp slt i32 %947, 10
  %953 = or i1 %951, %952
  br i1 %953, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %945, %originalBB241alteredBB
  %954 = load i32, i32* @x.9
  %955 = load i32, i32* @y.10
  %956 = sub i32 %954, 1
  %957 = mul i32 %954, %956
  %958 = urem i32 %957, 2
  %959 = icmp eq i32 %958, 0
  %960 = icmp slt i32 %955, 10
  %961 = or i1 %959, %960
  br i1 %961, label %originalBBpart2243, label %originalBB241alteredBB

originalBBpart2243:                               ; preds = %originalBB241
  br label %962

962:                                              ; preds = %originalBBpart2243, %originalBBpart2146
  %963 = load i32, i32* @x.9
  %964 = load i32, i32* @y.10
  %965 = sub i32 %963, 1
  %966 = mul i32 %963, %965
  %967 = urem i32 %966, 2
  %968 = icmp eq i32 %967, 0
  %969 = icmp slt i32 %964, 10
  %970 = or i1 %968, %969
  br i1 %970, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %962, %originalBB245alteredBB
  %971 = load i32, i32* @x.9
  %972 = load i32, i32* @y.10
  %973 = sub i32 %971, 1
  %974 = mul i32 %971, %973
  %975 = urem i32 %974, 2
  %976 = icmp eq i32 %975, 0
  %977 = icmp slt i32 %972, 10
  %978 = or i1 %976, %977
  br i1 %978, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br label %979, !dbg !1344

979:                                              ; preds = %originalBBpart2247, %originalBBpart2130
  %980 = load i32, i32* @x.9
  %981 = load i32, i32* @y.10
  %982 = sub i32 %980, 1
  %983 = mul i32 %980, %982
  %984 = urem i32 %983, 2
  %985 = icmp eq i32 %984, 0
  %986 = icmp slt i32 %981, 10
  %987 = or i1 %985, %986
  br i1 %987, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %979, %originalBB249alteredBB
  %988 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1345
  %989 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %988, i32 0, i32 0, !dbg !1345
  %990 = load i16, i16* %989, align 4, !dbg !1345
  %991 = sext i16 %990 to i32, !dbg !1345
  %992 = icmp eq i32 %991, 2, !dbg !1345
  %993 = load i32, i32* @x.9
  %994 = load i32, i32* @y.10
  %995 = sub i32 %993, 1
  %996 = mul i32 %993, %995
  %997 = urem i32 %996, 2
  %998 = icmp eq i32 %997, 0
  %999 = icmp slt i32 %994, 10
  %1000 = or i1 %998, %999
  br i1 %1000, label %originalBBpart2252, label %originalBB249alteredBB

originalBBpart2252:                               ; preds = %originalBB249
  br i1 %992, label %1001, label %1023, !dbg !1347

1001:                                             ; preds = %originalBBpart2252
  %1002 = load i32, i32* @x.9
  %1003 = load i32, i32* @y.10
  %1004 = sub i32 %1002, 1
  %1005 = mul i32 %1002, %1004
  %1006 = urem i32 %1005, 2
  %1007 = icmp eq i32 %1006, 0
  %1008 = icmp slt i32 %1003, 10
  %1009 = or i1 %1007, %1008
  br i1 %1009, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %1001, %originalBB254alteredBB
  %1010 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1348
  %1011 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1010, i32 0, i32 8, !dbg !1348
  %1012 = getelementptr inbounds %struct.anon, %struct.anon* %1011, i32 0, i32 0, !dbg !1348
  %1013 = load i32, i32* %1012, align 4, !dbg !1348
  %1014 = sext i32 %1013 to i64, !dbg !1348
  store i64 %1014, i64* %14, align 8, !dbg !1349
  %1015 = load i32, i32* @x.9
  %1016 = load i32, i32* @y.10
  %1017 = sub i32 %1015, 1
  %1018 = mul i32 %1015, %1017
  %1019 = urem i32 %1018, 2
  %1020 = icmp eq i32 %1019, 0
  %1021 = icmp slt i32 %1016, 10
  %1022 = or i1 %1020, %1021
  br i1 %1022, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  br label %1023, !dbg !1350

1023:                                             ; preds = %originalBBpart2256, %originalBBpart2252
  %1024 = load i32, i32* @x.9
  %1025 = load i32, i32* @y.10
  %1026 = sub i32 %1024, 1
  %1027 = mul i32 %1024, %1026
  %1028 = urem i32 %1027, 2
  %1029 = icmp eq i32 %1028, 0
  %1030 = icmp slt i32 %1025, 10
  %1031 = or i1 %1029, %1030
  br i1 %1031, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %1023, %originalBB258alteredBB
  %1032 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1351
  %1033 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1032, i32 1, !dbg !1351
  store %struct.utmpx* %1033, %struct.utmpx** %12, align 8, !dbg !1351
  %1034 = load i32, i32* @x.9
  %1035 = load i32, i32* @y.10
  %1036 = sub i32 %1034, 1
  %1037 = mul i32 %1034, %1036
  %1038 = urem i32 %1037, 2
  %1039 = icmp eq i32 %1038, 0
  %1040 = icmp slt i32 %1035, 10
  %1041 = or i1 %1039, %1040
  br i1 %1041, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br label %361, !dbg !1285, !llvm.loop !1352

1042:                                             ; preds = %originalBBpart2122, %originalBBpart216
  %1043 = load i32, i32* @x.9
  %1044 = load i32, i32* @y.10
  %1045 = sub i32 %1043, 1
  %1046 = mul i32 %1043, %1045
  %1047 = urem i32 %1046, 2
  %1048 = icmp eq i32 %1047, 0
  %1049 = icmp slt i32 %1044, 10
  %1050 = or i1 %1048, %1049
  br i1 %1050, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %1042, %originalBB262alteredBB
  %1051 = load i32, i32* @x.9
  %1052 = load i32, i32* @y.10
  %1053 = sub i32 %1051, 1
  %1054 = mul i32 %1051, %1053
  %1055 = urem i32 %1054, 2
  %1056 = icmp eq i32 %1055, 0
  %1057 = icmp slt i32 %1052, 10
  %1058 = or i1 %1056, %1057
  br i1 %1058, label %originalBBpart2265, label %originalBB262alteredBB

originalBBpart2265:                               ; preds = %originalBB262
  ret void, !dbg !1354

originalBBalteredBB:                              ; preds = %originalBB, %2
  %1059 = alloca i64, align 8
  %1060 = alloca %struct.utmpx*, align 8
  %1061 = alloca i8*, align 8
  %1062 = alloca i64, align 8
  store i64 %0, i64* %1059, align 8
  call void @llvm.dbg.declare(metadata i64* %1059, metadata !1355, metadata !DIExpression()), !dbg !1258
  store %struct.utmpx* %1, %struct.utmpx** %1060, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %1060, metadata !1459, metadata !DIExpression()), !dbg !1260
  call void @llvm.dbg.declare(metadata i8** %1061, metadata !1460, metadata !DIExpression()), !dbg !1262
  call void @llvm.dbg.declare(metadata i64* %1062, metadata !1461, metadata !DIExpression()), !dbg !1264
  store i64 -9223372036854775808, i64* %1062, align 8, !dbg !1264
  %1063 = load i8, i8* @include_heading, align 1, !dbg !1265
  %1064 = trunc i8 %1063 to i1, !dbg !1265
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  call void @print_heading(), !dbg !1268
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %1065 = load i8, i8* @my_line_only, align 1, !dbg !1269
  %1066 = trunc i8 %1065 to i1, !dbg !1269
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %1067 = call i8* @ttyname(i32 0) #10, !dbg !1272
  store i8* %1067, i8** %13, align 8, !dbg !1274
  %1068 = load i8*, i8** %13, align 8, !dbg !1275
  %1069 = icmp ne i8* %1068, null, !dbg !1275
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %98
  %1070 = load i8*, i8** %13, align 8, !dbg !1279
  %1071 = call i32 @strncmp(i8* %1070, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0), i64 5) #13, !dbg !1279
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %117
  %collatzVaralteredBB = alloca i32
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %134
  %1072 = load i32, i32* @inVal0
  %1073 = icmp sgt i32 %1072, 1
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %153
  store i32 45, i32* %collatzVar
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %170
  %1074 = load i8**, i8*** @inVal1
  %1075 = getelementptr inbounds i8*, i8** %1074, i64 1
  %1076 = load i8*, i8** %1075
  %controlealteredBB = call i32 @controle(i8* %1076, i32 0)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %190
  %1077 = load i32, i32* %collatzVar
  %1078 = icmp sgt i32 %1077, 1
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %209
  %1079 = load i32, i32* %collatzVar
  %_ = sub i32 %1079, 2
  %gen = mul i32 %_, 2
  %_43 = shl i32 %1079, 2
  %_44 = shl i32 %1079, 2
  %_45 = sub i32 0, %1079
  %gen46 = add i32 %_45, 2
  %_47 = shl i32 %1079, 2
  %1080 = srem i32 %1079, 2
  %1081 = icmp eq i32 %1080, 0
  br label %originalBB42

originalBB51alteredBB:                            ; preds = %originalBB51, %229
  %1082 = load i32, i32* %collatzVar
  %_52 = sub i32 %1082, 2
  %gen53 = mul i32 %_52, 2
  %_54 = shl i32 %1082, 2
  %_55 = shl i32 %1082, 2
  %_56 = shl i32 %1082, 2
  %_57 = shl i32 %1082, 2
  %_58 = shl i32 %1082, 2
  %_59 = sub i32 0, %1082
  %gen60 = add i32 %_59, 2
  %1083 = sdiv i32 %1082, 2
  store i32 %1083, i32* %collatzVar
  br label %originalBB51

originalBB64alteredBB:                            ; preds = %originalBB64, %248
  %1084 = load i32, i32* %collatzVar
  %_65 = sub i32 %1084, 3
  %gen66 = mul i32 %_65, 3
  %_67 = shl i32 %1084, 3
  %_68 = sub i32 0, %1084
  %gen69 = add i32 %_68, 3
  %_70 = shl i32 %1084, 3
  %_71 = sub i32 0, %1084
  %gen72 = add i32 %_71, 3
  %1085 = mul i32 %1084, 3
  %_73 = sub i32 %1085, 1
  %gen74 = mul i32 %_73, 1
  %_75 = sub i32 0, %1085
  %gen76 = add i32 %_75, 1
  %_77 = sub i32 %1085, 1
  %gen78 = mul i32 %_77, 1
  %_79 = shl i32 %1085, 1
  %1086 = add i32 %1085, 1
  store i32 %1086, i32* %collatzVar
  br label %originalBB64

originalBB83alteredBB:                            ; preds = %originalBB83, %268
  %1087 = load i32, i32* %collatzVar
  %_84 = shl i32 %108, %1087
  %_85 = shl i32 %108, %1087
  %_86 = sub i32 %108, %1087
  %gen87 = mul i32 %_86, %1087
  %_88 = sub i32 %108, %1087
  %gen89 = mul i32 %_88, %1087
  %1088 = sub i32 %108, %1087
  %1089 = icmp sgt i32 %1088, -2
  br label %originalBB83

originalBB93alteredBB:                            ; preds = %originalBB93, %288
  %1090 = load i32, i32* %collatzVar
  %_94 = shl i32 %108, %1090
  %_95 = shl i32 %108, %1090
  %_96 = shl i32 %108, %1090
  %_97 = shl i32 %108, %1090
  %_98 = shl i32 %108, %1090
  %_99 = shl i32 %108, %1090
  %_100 = shl i32 %108, %1090
  %_101 = sub i32 %108, %1090
  %gen102 = mul i32 %_101, %1090
  %1091 = add i32 %108, %1090
  %1092 = icmp slt i32 %1091, 2
  br label %originalBB93

originalBB106alteredBB:                           ; preds = %originalBB106, %308
  %1093 = load i8*, i8** %13, align 8, !dbg !1282
  %1094 = getelementptr inbounds i8, i8* %1093, i64 5, !dbg !1282
  store i8* %1094, i8** %13, align 8, !dbg !1282
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %327
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %344
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %361
  %1095 = load i64, i64* %11, align 8, !dbg !1286
  %_119 = sub i64 %1095, -1
  %gen120 = mul i64 %_119, -1
  %1096 = add i64 %1095, -1, !dbg !1286
  store i64 %1096, i64* %11, align 8, !dbg !1286
  %1097 = icmp ne i64 %1095, 0, !dbg !1285
  br label %originalBB118

originalBB124alteredBB:                           ; preds = %originalBB124, %381
  %1098 = load i8, i8* @my_line_only, align 1, !dbg !1287
  %1099 = trunc i8 %1098 to i1, !dbg !1287
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %400
  %1100 = load i8*, i8** %13, align 8, !dbg !1291
  %1101 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1291
  %1102 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1101, i32 0, i32 2, !dbg !1291
  %1103 = getelementptr inbounds [32 x i8], [32 x i8]* %1102, i64 0, i64 0, !dbg !1291
  %1104 = call i32 @strncmp(i8* %1100, i8* %1103, i64 32) #13, !dbg !1291
  %1105 = icmp eq i32 %1104, 0, !dbg !1291
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %423
  %1106 = load i8, i8* @need_users, align 1, !dbg !1293
  %1107 = trunc i8 %1106 to i1, !dbg !1293
  br label %originalBB132

originalBB136alteredBB:                           ; preds = %originalBB136, %442
  %1108 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1297
  %1109 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1108, i32 0, i32 4, !dbg !1297
  %1110 = getelementptr inbounds [32 x i8], [32 x i8]* %1109, i64 0, i64 0, !dbg !1297
  %1111 = load i8, i8* %1110, align 4, !dbg !1297
  %1112 = sext i8 %1111 to i32, !dbg !1297
  %1113 = icmp ne i32 %1112, 0, !dbg !1297
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %465
  %1114 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1297
  %1115 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1114, i32 0, i32 0, !dbg !1297
  %1116 = load i16, i16* %1115, align 4, !dbg !1297
  %1117 = sext i16 %1116 to i32, !dbg !1297
  %1118 = icmp eq i32 %1117, 7, !dbg !1297
  br label %originalBB140

originalBB144alteredBB:                           ; preds = %originalBB144, %487
  %1119 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1299
  %1120 = load i64, i64* %14, align 8, !dbg !1300
  call void @print_user(%struct.utmpx* %1119, i64 %1120), !dbg !1301
  br label %originalBB144

originalBB148alteredBB:                           ; preds = %originalBB148, %506
  %1121 = load i8, i8* @need_runlevel, align 1, !dbg !1302
  %1122 = trunc i8 %1121 to i1, !dbg !1302
  br label %originalBB148

originalBB152alteredBB:                           ; preds = %originalBB152, %525
  %1123 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1305
  %1124 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1123, i32 0, i32 0, !dbg !1305
  %1125 = load i16, i16* %1124, align 4, !dbg !1305
  %1126 = sext i16 %1125 to i32, !dbg !1305
  %1127 = icmp eq i32 %1126, 1, !dbg !1305
  br label %originalBB152

originalBB156alteredBB:                           ; preds = %originalBB156, %547
  %1128 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1307
  call void @print_runlevel(%struct.utmpx* %1128), !dbg !1308
  br label %originalBB156

originalBB160alteredBB:                           ; preds = %originalBB160, %565
  %1129 = load i8, i8* @need_boottime, align 1, !dbg !1309
  %1130 = trunc i8 %1129 to i1, !dbg !1309
  br label %originalBB160

originalBB164alteredBB:                           ; preds = %originalBB164, %584
  %1131 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1312
  %1132 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1131, i32 0, i32 0, !dbg !1312
  %1133 = load i16, i16* %1132, align 4, !dbg !1312
  %1134 = sext i16 %1133 to i32, !dbg !1312
  %1135 = icmp eq i32 %1134, 2, !dbg !1312
  br label %originalBB164

originalBB168alteredBB:                           ; preds = %originalBB168, %606
  %1136 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1314
  call void @print_boottime(%struct.utmpx* %1136), !dbg !1315
  br label %originalBB168

originalBB172alteredBB:                           ; preds = %originalBB172, %624
  %1137 = load i8, i8* @need_clockchange, align 1, !dbg !1316
  %1138 = trunc i8 %1137 to i1, !dbg !1316
  br label %originalBB172

originalBB176alteredBB:                           ; preds = %originalBB176, %643
  %1139 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1319
  %1140 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1139, i32 0, i32 0, !dbg !1319
  %1141 = load i16, i16* %1140, align 4, !dbg !1319
  %1142 = sext i16 %1141 to i32, !dbg !1319
  %1143 = icmp eq i32 %1142, 3, !dbg !1319
  br label %originalBB176

originalBB180alteredBB:                           ; preds = %originalBB180, %665
  %1144 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1321
  call void @print_clockchange(%struct.utmpx* %1144), !dbg !1322
  br label %originalBB180

originalBB184alteredBB:                           ; preds = %originalBB184, %683
  %1145 = load i8, i8* @need_initspawn, align 1, !dbg !1323
  %1146 = trunc i8 %1145 to i1, !dbg !1323
  br label %originalBB184

originalBB188alteredBB:                           ; preds = %originalBB188, %702
  %1147 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1326
  %1148 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1147, i32 0, i32 0, !dbg !1326
  %1149 = load i16, i16* %1148, align 4, !dbg !1326
  %1150 = sext i16 %1149 to i32, !dbg !1326
  %1151 = icmp eq i32 %1150, 5, !dbg !1326
  br label %originalBB188

originalBB192alteredBB:                           ; preds = %originalBB192, %724
  %1152 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1328
  call void @print_initspawn(%struct.utmpx* %1152), !dbg !1329
  br label %originalBB192

originalBB196alteredBB:                           ; preds = %originalBB196, %742
  %1153 = load i8, i8* @need_login, align 1, !dbg !1330
  %1154 = trunc i8 %1153 to i1, !dbg !1330
  br label %originalBB196

originalBB200alteredBB:                           ; preds = %originalBB200, %761
  %1155 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1333
  %1156 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1155, i32 0, i32 0, !dbg !1333
  %1157 = load i16, i16* %1156, align 4, !dbg !1333
  %1158 = sext i16 %1157 to i32, !dbg !1333
  %1159 = icmp eq i32 %1158, 6, !dbg !1333
  br label %originalBB200

originalBB204alteredBB:                           ; preds = %originalBB204, %783
  %1160 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1335
  call void @print_login(%struct.utmpx* %1160), !dbg !1336
  br label %originalBB204

originalBB208alteredBB:                           ; preds = %originalBB208, %801
  %1161 = load i8, i8* @need_deadprocs, align 1, !dbg !1337
  %1162 = trunc i8 %1161 to i1, !dbg !1337
  br label %originalBB208

originalBB212alteredBB:                           ; preds = %originalBB212, %820
  %1163 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1340
  %1164 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1163, i32 0, i32 0, !dbg !1340
  %1165 = load i16, i16* %1164, align 4, !dbg !1340
  %1166 = sext i16 %1165 to i32, !dbg !1340
  %1167 = icmp eq i32 %1166, 8, !dbg !1340
  br label %originalBB212

originalBB217alteredBB:                           ; preds = %originalBB217, %842
  %1168 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1342
  call void @print_deadprocs(%struct.utmpx* %1168), !dbg !1343
  br label %originalBB217

originalBB221alteredBB:                           ; preds = %originalBB221, %860
  br label %originalBB221

originalBB225alteredBB:                           ; preds = %originalBB225, %877
  br label %originalBB225

originalBB229alteredBB:                           ; preds = %originalBB229, %894
  br label %originalBB229

originalBB233alteredBB:                           ; preds = %originalBB233, %911
  br label %originalBB233

originalBB237alteredBB:                           ; preds = %originalBB237, %928
  br label %originalBB237

originalBB241alteredBB:                           ; preds = %originalBB241, %945
  br label %originalBB241

originalBB245alteredBB:                           ; preds = %originalBB245, %962
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %979
  %1169 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1345
  %1170 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1169, i32 0, i32 0, !dbg !1345
  %1171 = load i16, i16* %1170, align 4, !dbg !1345
  %1172 = sext i16 %1171 to i32, !dbg !1345
  %1173 = icmp eq i32 %1172, 2, !dbg !1345
  br label %originalBB249

originalBB254alteredBB:                           ; preds = %originalBB254, %1001
  %1174 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1348
  %1175 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1174, i32 0, i32 8, !dbg !1348
  %1176 = getelementptr inbounds %struct.anon, %struct.anon* %1175, i32 0, i32 0, !dbg !1348
  %1177 = load i32, i32* %1176, align 4, !dbg !1348
  %1178 = sext i32 %1177 to i64, !dbg !1348
  store i64 %1178, i64* %14, align 8, !dbg !1349
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1023
  %1179 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1351
  %1180 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %1179, i32 1, !dbg !1351
  store %struct.utmpx* %1180, %struct.utmpx** %12, align 8, !dbg !1351
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %1042
  br label %originalBB262
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_heading() #4 !dbg !1462 {
  %1 = load i32, i32* @x.11
  %2 = load i32, i32* @y.12
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.62, i64 0, i64 0)) #10, !dbg !1465
  %10 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i64 0, i64 0)) #10, !dbg !1466
  %11 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.64, i64 0, i64 0)) #10, !dbg !1467
  %12 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.65, i64 0, i64 0)) #10, !dbg !1468
  %13 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.66, i64 0, i64 0)) #10, !dbg !1469
  %14 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67, i64 0, i64 0)) #10, !dbg !1470
  %15 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i64 0, i64 0)) #10, !dbg !1471
  call void @print_line(i32 -1, i8* %9, i8 signext 32, i32 -1, i8* %10, i8* %11, i8* %12, i8* %13, i8* %14, i8* %15), !dbg !1472
  %16 = load i32, i32* @x.11
  %17 = load i32, i32* @y.12
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !1473

originalBBalteredBB:                              ; preds = %originalBB, %0
  %24 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.62, i64 0, i64 0)) #10, !dbg !1465
  %25 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i64 0, i64 0)) #10, !dbg !1466
  %26 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.64, i64 0, i64 0)) #10, !dbg !1467
  %27 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.65, i64 0, i64 0)) #10, !dbg !1468
  %28 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.66, i64 0, i64 0)) #10, !dbg !1469
  %29 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67, i64 0, i64 0)) #10, !dbg !1470
  %30 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i64 0, i64 0)) #10, !dbg !1471
  call void @print_line(i32 -1, i8* %24, i8 signext 32, i32 -1, i8* %25, i8* %26, i8* %27, i8* %28, i8* %29, i8* %30), !dbg !1472
  br label %originalBB
}

; Function Attrs: nounwind
declare dso_local i8* @ttyname(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_user(%struct.utmpx*, i64) #4 !dbg !64 {
  %3 = load i32, i32* @x.13
  %4 = load i32, i32* @y.14
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca %struct.utmpx*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.stat, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8, align 1
  %16 = alloca [7 x i8], align 1
  %17 = alloca [38 x i8], align 16
  %18 = alloca i8*, align 8
  %19 = alloca [12 x i8], align 1
  %20 = alloca [257 x i8], align 16
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %11, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %11, metadata !1474, metadata !DIExpression()), !dbg !1475
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !1476, metadata !DIExpression()), !dbg !1477
  call void @llvm.dbg.declare(metadata %struct.stat* %13, metadata !1478, metadata !DIExpression()), !dbg !1513
  call void @llvm.dbg.declare(metadata i64* %14, metadata !1514, metadata !DIExpression()), !dbg !1515
  call void @llvm.dbg.declare(metadata i8* %15, metadata !1516, metadata !DIExpression()), !dbg !1517
  call void @llvm.dbg.declare(metadata [7 x i8]* %16, metadata !1518, metadata !DIExpression()), !dbg !1520
  call void @llvm.dbg.declare(metadata [38 x i8]* %17, metadata !1521, metadata !DIExpression()), !dbg !1525
  call void @llvm.dbg.declare(metadata i8** %18, metadata !1526, metadata !DIExpression()), !dbg !1527
  %23 = getelementptr inbounds [38 x i8], [38 x i8]* %17, i64 0, i64 0, !dbg !1528
  store i8* %23, i8** %18, align 8, !dbg !1527
  call void @llvm.dbg.declare(metadata [12 x i8]* %19, metadata !1529, metadata !DIExpression()), !dbg !1533
  %24 = getelementptr inbounds [12 x i8], [12 x i8]* %19, i64 0, i64 0, !dbg !1533
  %25 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1533
  %26 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %25, i32 0, i32 1, !dbg !1533
  %27 = load i32, i32* %26, align 4, !dbg !1533
  %28 = sext i32 %27 to i64, !dbg !1533
  %29 = call i32 (i8*, i8*, ...) @sprintf(i8* %24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %28) #10, !dbg !1533
  %30 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1534
  %31 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %30, i32 0, i32 2, !dbg !1534
  %32 = getelementptr inbounds [32 x i8], [32 x i8]* %31, i64 0, i64 0, !dbg !1534
  %33 = load i8, i8* %32, align 4, !dbg !1534
  %34 = sext i8 %33 to i32, !dbg !1534
  %35 = icmp eq i32 %34, 47, !dbg !1534
  %36 = load i32, i32* @x.13
  %37 = load i32, i32* @y.14
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %35, label %63, label %44, !dbg !1536

44:                                               ; preds = %originalBBpart2
  %45 = load i32, i32* @x.13
  %46 = load i32, i32* @y.14
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %44, %originalBB1alteredBB
  %53 = load i8*, i8** %18, align 8, !dbg !1537
  %54 = call i8* @stpcpy(i8* %53, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0)) #10, !dbg !1538
  store i8* %54, i8** %18, align 8, !dbg !1539
  %55 = load i32, i32* @x.13
  %56 = load i32, i32* @y.14
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %63, !dbg !1540

63:                                               ; preds = %originalBBpart24, %originalBBpart2
  %64 = load i32, i32* @x.13
  %65 = load i32, i32* @y.14
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  %72 = load i8*, i8** %18, align 8, !dbg !1541
  %73 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1542
  %74 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %73, i32 0, i32 2, !dbg !1543
  %75 = getelementptr inbounds [32 x i8], [32 x i8]* %74, i64 0, i64 0, !dbg !1542
  %76 = call i8* @stzncpy(i8* %72, i8* %75, i64 32), !dbg !1544
  %77 = getelementptr inbounds [38 x i8], [38 x i8]* %17, i64 0, i64 0, !dbg !1545
  %78 = call i32 @stat(i8* %77, %struct.stat* %13) #10, !dbg !1547
  %79 = icmp eq i32 %78, 0, !dbg !1548
  %80 = load i32, i32* @x.13
  %81 = load i32, i32* @y.14
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %79, label %88, label %112, !dbg !1549

88:                                               ; preds = %originalBBpart28
  %89 = load i32, i32* @x.13
  %90 = load i32, i32* @y.14
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %88, %originalBB10alteredBB
  %97 = call zeroext i1 @is_tty_writable(%struct.stat* %13), !dbg !1550
  %98 = zext i1 %97 to i64, !dbg !1550
  %99 = select i1 %97, i32 43, i32 45, !dbg !1550
  %100 = trunc i32 %99 to i8, !dbg !1550
  store i8 %100, i8* %15, align 1, !dbg !1552
  %101 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 11, !dbg !1553
  %102 = getelementptr inbounds %struct.timespec, %struct.timespec* %101, i32 0, i32 0, !dbg !1553
  %103 = load i64, i64* %102, align 8, !dbg !1553
  store i64 %103, i64* %14, align 8, !dbg !1554
  %104 = load i32, i32* @x.13
  %105 = load i32, i32* @y.14
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %129, !dbg !1555

112:                                              ; preds = %originalBBpart28
  %113 = load i32, i32* @x.13
  %114 = load i32, i32* @y.14
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %112, %originalBB14alteredBB
  store i8 63, i8* %15, align 1, !dbg !1556
  store i64 0, i64* %14, align 8, !dbg !1558
  %121 = load i32, i32* @x.13
  %122 = load i32, i32* @y.14
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %129

129:                                              ; preds = %originalBBpart216, %originalBBpart212
  %130 = load i32, i32* @x.13
  %131 = load i32, i32* @y.14
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %129, %originalBB18alteredBB
  %138 = load i64, i64* %14, align 8, !dbg !1559
  %139 = icmp ne i64 %138, 0, !dbg !1559
  %140 = load i32, i32* @x.13
  %141 = load i32, i32* @y.14
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %139, label %148, label %170, !dbg !1561

148:                                              ; preds = %originalBBpart220
  %149 = load i32, i32* @x.13
  %150 = load i32, i32* @y.14
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %148, %originalBB22alteredBB
  %157 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1562
  %158 = load i64, i64* %14, align 8, !dbg !1563
  %159 = load i64, i64* %12, align 8, !dbg !1564
  %160 = call i8* @idle_string(i64 %158, i64 %159), !dbg !1565
  %161 = call i32 (i8*, i8*, ...) @sprintf(i8* %157, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i64 0, i64 0), i32 6, i8* %160) #10, !dbg !1566
  %162 = load i32, i32* @x.13
  %163 = load i32, i32* @y.14
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %189, !dbg !1566

170:                                              ; preds = %originalBBpart220
  %171 = load i32, i32* @x.13
  %172 = load i32, i32* @y.14
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %170, %originalBB26alteredBB
  %179 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1567
  %180 = call i32 (i8*, i8*, ...) @sprintf(i8* %179, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76, i64 0, i64 0)) #10, !dbg !1568
  %181 = load i32, i32* @x.13
  %182 = load i32, i32* @y.14
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %189

189:                                              ; preds = %originalBBpart228, %originalBBpart224
  %190 = load i32, i32* @x.13
  %191 = load i32, i32* @y.14
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %189, %originalBB30alteredBB
  %198 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1569
  %199 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %198, i32 0, i32 5, !dbg !1571
  %200 = getelementptr inbounds [256 x i8], [256 x i8]* %199, i64 0, i64 0, !dbg !1569
  %201 = load i8, i8* %200, align 4, !dbg !1569
  %202 = icmp ne i8 %201, 0, !dbg !1569
  %203 = load i32, i32* @x.13
  %204 = load i32, i32* @y.14
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %202, label %211, label %563, !dbg !1572

211:                                              ; preds = %originalBBpart232
  call void @llvm.dbg.declare(metadata [257 x i8]* %20, metadata !1573, metadata !DIExpression()), !dbg !1578
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1579, metadata !DIExpression()), !dbg !1580
  %212 = load i32, i32* @x.13
  %213 = load i32, i32* @y.14
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %211, %originalBB34alteredBB
  store i8* null, i8** %21, align 8, !dbg !1580
  call void @llvm.dbg.declare(metadata i8** %22, metadata !1581, metadata !DIExpression()), !dbg !1582
  store i8* null, i8** %22, align 8, !dbg !1582
  %220 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1583
  %221 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1584
  %222 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %221, i32 0, i32 5, !dbg !1585
  %223 = getelementptr inbounds [256 x i8], [256 x i8]* %222, i64 0, i64 0, !dbg !1584
  %224 = call i8* @stzncpy(i8* %220, i8* %223, i64 256), !dbg !1586
  %225 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1587
  %226 = call i8* @strchr(i8* %225, i32 58) #13, !dbg !1588
  store i8* %226, i8** %22, align 8, !dbg !1589
  %227 = load i8*, i8** %22, align 8, !dbg !1590
  %228 = icmp ne i8* %227, null, !dbg !1590
  %229 = load i32, i32* @x.13
  %230 = load i32, i32* @y.14
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %228, label %237, label %256, !dbg !1592

237:                                              ; preds = %originalBBpart236
  %238 = load i32, i32* @x.13
  %239 = load i32, i32* @y.14
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %237, %originalBB38alteredBB
  %246 = load i8*, i8** %22, align 8, !dbg !1593
  %247 = getelementptr inbounds i8, i8* %246, i32 1, !dbg !1593
  store i8* %247, i8** %22, align 8, !dbg !1593
  store i8 0, i8* %246, align 1, !dbg !1594
  %248 = load i32, i32* @x.13
  %249 = load i32, i32* @y.14
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %256, !dbg !1595

256:                                              ; preds = %originalBBpart240, %originalBBpart236
  %257 = load i32, i32* @x.13
  %258 = load i32, i32* @y.14
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %256, %originalBB42alteredBB
  %265 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1596
  %266 = load i8, i8* %265, align 16, !dbg !1596
  %267 = sext i8 %266 to i32, !dbg !1596
  %268 = icmp ne i32 %267, 0, !dbg !1596
  %269 = load i32, i32* @x.13
  %270 = load i32, i32* @y.14
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %268, label %277, label %315, !dbg !1598

277:                                              ; preds = %originalBBpart244
  %278 = load i32, i32* @x.13
  %279 = load i32, i32* @y.14
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %277, %originalBB46alteredBB
  %286 = load i8, i8* @do_lookup, align 1, !dbg !1599
  %287 = trunc i8 %286 to i1, !dbg !1599
  %288 = load i32, i32* @x.13
  %289 = load i32, i32* @y.14
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %287, label %296, label %315, !dbg !1600

296:                                              ; preds = %originalBBpart248
  %297 = load i32, i32* @x.13
  %298 = load i32, i32* @y.14
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %296, %originalBB50alteredBB
  %305 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1601
  %306 = call noalias i8* @canon_host(i8* %305), !dbg !1603
  store i8* %306, i8** %21, align 8, !dbg !1604
  %307 = load i32, i32* @x.13
  %308 = load i32, i32* @y.14
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %315, !dbg !1605

315:                                              ; preds = %originalBBpart252, %originalBBpart248, %originalBBpart244
  %316 = load i32, i32* @x.13
  %317 = load i32, i32* @y.14
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %315, %originalBB54alteredBB
  %324 = load i8*, i8** %21, align 8, !dbg !1606
  %325 = icmp ne i8* %324, null, !dbg !1606
  %326 = load i32, i32* @x.13
  %327 = load i32, i32* @y.14
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %325, label %352, label %334, !dbg !1608

334:                                              ; preds = %originalBBpart256
  %335 = load i32, i32* @x.13
  %336 = load i32, i32* @y.14
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %334, %originalBB58alteredBB
  %343 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1609
  store i8* %343, i8** %21, align 8, !dbg !1610
  %344 = load i32, i32* @x.13
  %345 = load i32, i32* @y.14
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %352, !dbg !1611

352:                                              ; preds = %originalBBpart260, %originalBBpart256
  %353 = load i32, i32* @x.13
  %354 = load i32, i32* @y.14
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %352, %originalBB62alteredBB
  %361 = load i8*, i8** %22, align 8, !dbg !1612
  %362 = icmp ne i8* %361, null, !dbg !1612
  %363 = load i32, i32* @x.13
  %364 = load i32, i32* @y.14
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %362, label %371, label %443, !dbg !1614

371:                                              ; preds = %originalBBpart264
  %372 = load i32, i32* @x.13
  %373 = load i32, i32* @y.14
  %374 = sub i32 %372, 1
  %375 = mul i32 %372, %374
  %376 = urem i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %377, %378
  br i1 %379, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %371, %originalBB66alteredBB
  %380 = load i64, i64* @print_user.hostlen, align 8, !dbg !1615
  %381 = load i8*, i8** %21, align 8, !dbg !1618
  %382 = call i64 @strlen(i8* %381) #13, !dbg !1619
  %383 = load i8*, i8** %22, align 8, !dbg !1620
  %384 = call i64 @strlen(i8* %383) #13, !dbg !1621
  %385 = add i64 %382, %384, !dbg !1622
  %386 = add i64 %385, 4, !dbg !1623
  %387 = icmp ult i64 %380, %386, !dbg !1624
  %388 = load i32, i32* @x.13
  %389 = load i32, i32* @y.14
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBBpart279, label %originalBB66alteredBB

originalBBpart279:                                ; preds = %originalBB66
  br i1 %387, label %396, label %422, !dbg !1625

396:                                              ; preds = %originalBBpart279
  %397 = load i32, i32* @x.13
  %398 = load i32, i32* @y.14
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %396, %originalBB81alteredBB
  %405 = load i8*, i8** %21, align 8, !dbg !1626
  %406 = call i64 @strlen(i8* %405) #13, !dbg !1628
  %407 = load i8*, i8** %22, align 8, !dbg !1629
  %408 = call i64 @strlen(i8* %407) #13, !dbg !1630
  %409 = add i64 %406, %408, !dbg !1631
  %410 = add i64 %409, 4, !dbg !1632
  store i64 %410, i64* @print_user.hostlen, align 8, !dbg !1633
  %411 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1634
  call void @free(i8* %411) #10, !dbg !1635
  %412 = load i64, i64* @print_user.hostlen, align 8, !dbg !1636
  %413 = call noalias i8* @xmalloc(i64 %412), !dbg !1637
  store i8* %413, i8** @print_user.hoststr, align 8, !dbg !1638
  %414 = load i32, i32* @x.13
  %415 = load i32, i32* @y.14
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart287, label %originalBB81alteredBB

originalBBpart287:                                ; preds = %originalBB81
  br label %422, !dbg !1639

422:                                              ; preds = %originalBBpart287, %originalBBpart279
  %423 = load i32, i32* @x.13
  %424 = load i32, i32* @y.14
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %422, %originalBB89alteredBB
  %431 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1640
  %432 = load i8*, i8** %21, align 8, !dbg !1641
  %433 = load i8*, i8** %22, align 8, !dbg !1642
  %434 = call i32 (i8*, i8*, ...) @sprintf(i8* %431, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i64 0, i64 0), i8* %432, i8* %433) #10, !dbg !1643
  %435 = load i32, i32* @x.13
  %436 = load i32, i32* @y.14
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %508, !dbg !1644

443:                                              ; preds = %originalBBpart264
  %444 = load i32, i32* @x.13
  %445 = load i32, i32* @y.14
  %446 = sub i32 %444, 1
  %447 = mul i32 %444, %446
  %448 = urem i32 %447, 2
  %449 = icmp eq i32 %448, 0
  %450 = icmp slt i32 %445, 10
  %451 = or i1 %449, %450
  br i1 %451, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %443, %originalBB93alteredBB
  %452 = load i64, i64* @print_user.hostlen, align 8, !dbg !1645
  %453 = load i8*, i8** %21, align 8, !dbg !1648
  %454 = call i64 @strlen(i8* %453) #13, !dbg !1649
  %455 = add i64 %454, 3, !dbg !1650
  %456 = icmp ult i64 %452, %455, !dbg !1651
  %457 = load i32, i32* @x.13
  %458 = load i32, i32* @y.14
  %459 = sub i32 %457, 1
  %460 = mul i32 %457, %459
  %461 = urem i32 %460, 2
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %462, %463
  br i1 %464, label %originalBBpart299, label %originalBB93alteredBB

originalBBpart299:                                ; preds = %originalBB93
  br i1 %456, label %465, label %488, !dbg !1652

465:                                              ; preds = %originalBBpart299
  %466 = load i32, i32* @x.13
  %467 = load i32, i32* @y.14
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %465, %originalBB101alteredBB
  %474 = load i8*, i8** %21, align 8, !dbg !1653
  %475 = call i64 @strlen(i8* %474) #13, !dbg !1655
  %476 = add i64 %475, 3, !dbg !1656
  store i64 %476, i64* @print_user.hostlen, align 8, !dbg !1657
  %477 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1658
  call void @free(i8* %477) #10, !dbg !1659
  %478 = load i64, i64* @print_user.hostlen, align 8, !dbg !1660
  %479 = call noalias i8* @xmalloc(i64 %478), !dbg !1661
  store i8* %479, i8** @print_user.hoststr, align 8, !dbg !1662
  %480 = load i32, i32* @x.13
  %481 = load i32, i32* @y.14
  %482 = sub i32 %480, 1
  %483 = mul i32 %480, %482
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %481, 10
  %487 = or i1 %485, %486
  br i1 %487, label %originalBBpart2106, label %originalBB101alteredBB

originalBBpart2106:                               ; preds = %originalBB101
  br label %488, !dbg !1663

488:                                              ; preds = %originalBBpart2106, %originalBBpart299
  %489 = load i32, i32* @x.13
  %490 = load i32, i32* @y.14
  %491 = sub i32 %489, 1
  %492 = mul i32 %489, %491
  %493 = urem i32 %492, 2
  %494 = icmp eq i32 %493, 0
  %495 = icmp slt i32 %490, 10
  %496 = or i1 %494, %495
  br i1 %496, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %488, %originalBB108alteredBB
  %497 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1664
  %498 = load i8*, i8** %21, align 8, !dbg !1665
  %499 = call i32 (i8*, i8*, ...) @sprintf(i8* %497, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i64 0, i64 0), i8* %498) #10, !dbg !1666
  %500 = load i32, i32* @x.13
  %501 = load i32, i32* @y.14
  %502 = sub i32 %500, 1
  %503 = mul i32 %500, %502
  %504 = urem i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = icmp slt i32 %501, 10
  %507 = or i1 %505, %506
  br i1 %507, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br label %508

508:                                              ; preds = %originalBBpart2110, %originalBBpart291
  %509 = load i32, i32* @x.13
  %510 = load i32, i32* @y.14
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %508, %originalBB112alteredBB
  %517 = load i8*, i8** %21, align 8, !dbg !1667
  %518 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1669
  %519 = icmp ne i8* %517, %518, !dbg !1670
  %520 = load i32, i32* @x.13
  %521 = load i32, i32* @y.14
  %522 = sub i32 %520, 1
  %523 = mul i32 %520, %522
  %524 = urem i32 %523, 2
  %525 = icmp eq i32 %524, 0
  %526 = icmp slt i32 %521, 10
  %527 = or i1 %525, %526
  br i1 %527, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br i1 %519, label %528, label %546, !dbg !1671

528:                                              ; preds = %originalBBpart2114
  %529 = load i32, i32* @x.13
  %530 = load i32, i32* @y.14
  %531 = sub i32 %529, 1
  %532 = mul i32 %529, %531
  %533 = urem i32 %532, 2
  %534 = icmp eq i32 %533, 0
  %535 = icmp slt i32 %530, 10
  %536 = or i1 %534, %535
  br i1 %536, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %528, %originalBB116alteredBB
  %537 = load i8*, i8** %21, align 8, !dbg !1672
  call void @free(i8* %537) #10, !dbg !1673
  %538 = load i32, i32* @x.13
  %539 = load i32, i32* @y.14
  %540 = sub i32 %538, 1
  %541 = mul i32 %538, %540
  %542 = urem i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = icmp slt i32 %539, 10
  %545 = or i1 %543, %544
  br i1 %545, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  br label %546, !dbg !1673

546:                                              ; preds = %originalBBpart2118, %originalBBpart2114
  %547 = load i32, i32* @x.13
  %548 = load i32, i32* @y.14
  %549 = sub i32 %547, 1
  %550 = mul i32 %547, %549
  %551 = urem i32 %550, 2
  %552 = icmp eq i32 %551, 0
  %553 = icmp slt i32 %548, 10
  %554 = or i1 %552, %553
  br i1 %554, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %546, %originalBB120alteredBB
  %555 = load i32, i32* @x.13
  %556 = load i32, i32* @y.14
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br label %620, !dbg !1674

563:                                              ; preds = %originalBBpart232
  %564 = load i32, i32* @x.13
  %565 = load i32, i32* @y.14
  %566 = sub i32 %564, 1
  %567 = mul i32 %564, %566
  %568 = urem i32 %567, 2
  %569 = icmp eq i32 %568, 0
  %570 = icmp slt i32 %565, 10
  %571 = or i1 %569, %570
  br i1 %571, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %563, %originalBB124alteredBB
  %572 = load i64, i64* @print_user.hostlen, align 8, !dbg !1675
  %573 = icmp ult i64 %572, 1, !dbg !1678
  %574 = load i32, i32* @x.13
  %575 = load i32, i32* @y.14
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br i1 %573, label %582, label %602, !dbg !1679

582:                                              ; preds = %originalBBpart2126
  %583 = load i32, i32* @x.13
  %584 = load i32, i32* @y.14
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %582, %originalBB128alteredBB
  store i64 1, i64* @print_user.hostlen, align 8, !dbg !1680
  %591 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1682
  call void @free(i8* %591) #10, !dbg !1683
  %592 = load i64, i64* @print_user.hostlen, align 8, !dbg !1684
  %593 = call noalias i8* @xmalloc(i64 %592), !dbg !1685
  store i8* %593, i8** @print_user.hoststr, align 8, !dbg !1686
  %594 = load i32, i32* @x.13
  %595 = load i32, i32* @y.14
  %596 = sub i32 %594, 1
  %597 = mul i32 %594, %596
  %598 = urem i32 %597, 2
  %599 = icmp eq i32 %598, 0
  %600 = icmp slt i32 %595, 10
  %601 = or i1 %599, %600
  br i1 %601, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  br label %602, !dbg !1687

602:                                              ; preds = %originalBBpart2130, %originalBBpart2126
  %603 = load i32, i32* @x.13
  %604 = load i32, i32* @y.14
  %605 = sub i32 %603, 1
  %606 = mul i32 %603, %605
  %607 = urem i32 %606, 2
  %608 = icmp eq i32 %607, 0
  %609 = icmp slt i32 %604, 10
  %610 = or i1 %608, %609
  br i1 %610, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %602, %originalBB132alteredBB
  %611 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1688
  store i8 0, i8* %611, align 1, !dbg !1689
  %612 = load i32, i32* @x.13
  %613 = load i32, i32* @y.14
  %614 = sub i32 %612, 1
  %615 = mul i32 %612, %614
  %616 = urem i32 %615, 2
  %617 = icmp eq i32 %616, 0
  %618 = icmp slt i32 %613, 10
  %619 = or i1 %617, %618
  br i1 %619, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  br label %620

620:                                              ; preds = %originalBBpart2134, %originalBBpart2122
  %621 = load i32, i32* @x.13
  %622 = load i32, i32* @y.14
  %623 = sub i32 %621, 1
  %624 = mul i32 %621, %623
  %625 = urem i32 %624, 2
  %626 = icmp eq i32 %625, 0
  %627 = icmp slt i32 %622, 10
  %628 = or i1 %626, %627
  br i1 %628, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %620, %originalBB136alteredBB
  %629 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1690
  %630 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %629, i32 0, i32 4, !dbg !1690
  %631 = getelementptr inbounds [32 x i8], [32 x i8]* %630, i64 0, i64 0, !dbg !1690
  %632 = load i8, i8* %15, align 1, !dbg !1691
  %633 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1692
  %634 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %633, i32 0, i32 2, !dbg !1693
  %635 = getelementptr inbounds [32 x i8], [32 x i8]* %634, i64 0, i64 0, !dbg !1692
  %636 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1694
  %637 = call i8* @time_string(%struct.utmpx* %636), !dbg !1695
  %638 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1696
  %639 = getelementptr inbounds [12 x i8], [12 x i8]* %19, i64 0, i64 0, !dbg !1697
  %640 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1698
  %641 = icmp ne i8* %640, null, !dbg !1698
  %642 = load i32, i32* @x.13
  %643 = load i32, i32* @y.14
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br i1 %641, label %650, label %668, !dbg !1698

650:                                              ; preds = %originalBBpart2138
  %651 = load i32, i32* @x.13
  %652 = load i32, i32* @y.14
  %653 = sub i32 %651, 1
  %654 = mul i32 %651, %653
  %655 = urem i32 %654, 2
  %656 = icmp eq i32 %655, 0
  %657 = icmp slt i32 %652, 10
  %658 = or i1 %656, %657
  br i1 %658, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %650, %originalBB140alteredBB
  %659 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1699
  %660 = load i32, i32* @x.13
  %661 = load i32, i32* @y.14
  %662 = sub i32 %660, 1
  %663 = mul i32 %660, %662
  %664 = urem i32 %663, 2
  %665 = icmp eq i32 %664, 0
  %666 = icmp slt i32 %661, 10
  %667 = or i1 %665, %666
  br i1 %667, label %originalBBpart2142, label %originalBB140alteredBB

originalBBpart2142:                               ; preds = %originalBB140
  br label %685, !dbg !1698

668:                                              ; preds = %originalBBpart2138
  %669 = load i32, i32* @x.13
  %670 = load i32, i32* @y.14
  %671 = sub i32 %669, 1
  %672 = mul i32 %669, %671
  %673 = urem i32 %672, 2
  %674 = icmp eq i32 %673, 0
  %675 = icmp slt i32 %670, 10
  %676 = or i1 %674, %675
  br i1 %676, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %668, %originalBB144alteredBB
  %677 = load i32, i32* @x.13
  %678 = load i32, i32* @y.14
  %679 = sub i32 %677, 1
  %680 = mul i32 %677, %679
  %681 = urem i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = icmp slt i32 %678, 10
  %684 = or i1 %682, %683
  br i1 %684, label %originalBBpart2146, label %originalBB144alteredBB

originalBBpart2146:                               ; preds = %originalBB144
  br label %685, !dbg !1698

685:                                              ; preds = %originalBBpart2146, %originalBBpart2142
  %686 = phi i8* [ %659, %originalBBpart2142 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), %originalBBpart2146 ], !dbg !1698
  %687 = load i32, i32* @x.13
  %688 = load i32, i32* @y.14
  %689 = sub i32 %687, 1
  %690 = mul i32 %687, %689
  %691 = urem i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = icmp slt i32 %688, 10
  %694 = or i1 %692, %693
  br i1 %694, label %originalBB148, label %originalBB148alteredBB

originalBB148:                                    ; preds = %685, %originalBB148alteredBB
  call void @print_line(i32 32, i8* %631, i8 signext %632, i32 32, i8* %635, i8* %637, i8* %638, i8* %639, i8* %686, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1700
  %695 = load i32, i32* @x.13
  %696 = load i32, i32* @y.14
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBBpart2150, label %originalBB148alteredBB

originalBBpart2150:                               ; preds = %originalBB148
  ret void, !dbg !1701

originalBBalteredBB:                              ; preds = %originalBB, %2
  %703 = alloca %struct.utmpx*, align 8
  %704 = alloca i64, align 8
  %705 = alloca %struct.stat, align 8
  %706 = alloca i64, align 8
  %707 = alloca i8, align 1
  %708 = alloca [7 x i8], align 1
  %709 = alloca [38 x i8], align 16
  %710 = alloca i8*, align 8
  %711 = alloca [12 x i8], align 1
  %712 = alloca [257 x i8], align 16
  %713 = alloca i8*, align 8
  %714 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %703, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %703, metadata !1702, metadata !DIExpression()), !dbg !1475
  store i64 %1, i64* %704, align 8
  call void @llvm.dbg.declare(metadata i64* %704, metadata !1803, metadata !DIExpression()), !dbg !1477
  call void @llvm.dbg.declare(metadata %struct.stat* %705, metadata !1804, metadata !DIExpression()), !dbg !1513
  call void @llvm.dbg.declare(metadata i64* %706, metadata !1826, metadata !DIExpression()), !dbg !1515
  call void @llvm.dbg.declare(metadata i8* %707, metadata !1827, metadata !DIExpression()), !dbg !1517
  call void @llvm.dbg.declare(metadata [7 x i8]* %708, metadata !1828, metadata !DIExpression()), !dbg !1520
  call void @llvm.dbg.declare(metadata [38 x i8]* %709, metadata !1829, metadata !DIExpression()), !dbg !1525
  call void @llvm.dbg.declare(metadata i8** %710, metadata !1830, metadata !DIExpression()), !dbg !1527
  %715 = getelementptr inbounds [38 x i8], [38 x i8]* %709, i64 0, i64 0, !dbg !1528
  store i8* %715, i8** %710, align 8, !dbg !1527
  call void @llvm.dbg.declare(metadata [12 x i8]* %711, metadata !1831, metadata !DIExpression()), !dbg !1533
  %716 = getelementptr inbounds [12 x i8], [12 x i8]* %711, i64 0, i64 0, !dbg !1533
  %717 = load %struct.utmpx*, %struct.utmpx** %703, align 8, !dbg !1533
  %718 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %717, i32 0, i32 1, !dbg !1533
  %719 = load i32, i32* %718, align 4, !dbg !1533
  %720 = sext i32 %719 to i64, !dbg !1533
  %721 = call i32 (i8*, i8*, ...) @sprintf(i8* %716, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %720) #10, !dbg !1533
  %722 = load %struct.utmpx*, %struct.utmpx** %703, align 8, !dbg !1534
  %723 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %722, i32 0, i32 2, !dbg !1534
  %724 = getelementptr inbounds [32 x i8], [32 x i8]* %723, i64 0, i64 0, !dbg !1534
  %725 = load i8, i8* %724, align 4, !dbg !1534
  %726 = sext i8 %725 to i32, !dbg !1534
  %727 = icmp eq i32 %726, 47, !dbg !1534
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %44
  %728 = load i8*, i8** %18, align 8, !dbg !1537
  %729 = call i8* @stpcpy(i8* %728, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0)) #10, !dbg !1538
  store i8* %729, i8** %18, align 8, !dbg !1539
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  %730 = load i8*, i8** %18, align 8, !dbg !1541
  %731 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1542
  %732 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %731, i32 0, i32 2, !dbg !1543
  %733 = getelementptr inbounds [32 x i8], [32 x i8]* %732, i64 0, i64 0, !dbg !1542
  %734 = call i8* @stzncpy(i8* %730, i8* %733, i64 32), !dbg !1544
  %735 = getelementptr inbounds [38 x i8], [38 x i8]* %17, i64 0, i64 0, !dbg !1545
  %736 = call i32 @stat(i8* %735, %struct.stat* %13) #10, !dbg !1547
  %737 = icmp eq i32 %736, 0, !dbg !1548
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %88
  %738 = call zeroext i1 @is_tty_writable(%struct.stat* %13), !dbg !1550
  %739 = zext i1 %738 to i64, !dbg !1550
  %740 = select i1 %738, i32 43, i32 45, !dbg !1550
  %741 = trunc i32 %740 to i8, !dbg !1550
  store i8 %741, i8* %15, align 1, !dbg !1552
  %742 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 11, !dbg !1553
  %743 = getelementptr inbounds %struct.timespec, %struct.timespec* %742, i32 0, i32 0, !dbg !1553
  %744 = load i64, i64* %743, align 8, !dbg !1553
  store i64 %744, i64* %14, align 8, !dbg !1554
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %112
  store i8 63, i8* %15, align 1, !dbg !1556
  store i64 0, i64* %14, align 8, !dbg !1558
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %129
  %745 = load i64, i64* %14, align 8, !dbg !1559
  %746 = icmp ne i64 %745, 0, !dbg !1559
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %148
  %747 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1562
  %748 = load i64, i64* %14, align 8, !dbg !1563
  %749 = load i64, i64* %12, align 8, !dbg !1564
  %750 = call i8* @idle_string(i64 %748, i64 %749), !dbg !1565
  %751 = call i32 (i8*, i8*, ...) @sprintf(i8* %747, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i64 0, i64 0), i32 6, i8* %750) #10, !dbg !1566
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %170
  %752 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1567
  %753 = call i32 (i8*, i8*, ...) @sprintf(i8* %752, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76, i64 0, i64 0)) #10, !dbg !1568
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %189
  %754 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1569
  %755 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %754, i32 0, i32 5, !dbg !1571
  %756 = getelementptr inbounds [256 x i8], [256 x i8]* %755, i64 0, i64 0, !dbg !1569
  %757 = load i8, i8* %756, align 4, !dbg !1569
  %758 = icmp ne i8 %757, 0, !dbg !1569
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %211
  store i8* null, i8** %21, align 8, !dbg !1580
  call void @llvm.dbg.declare(metadata !4, metadata !1832, metadata !DIExpression()), !dbg !1582
  store i8* null, i8** %22, align 8, !dbg !1582
  %759 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1583
  %760 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1584
  %761 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %760, i32 0, i32 5, !dbg !1585
  %762 = getelementptr inbounds [256 x i8], [256 x i8]* %761, i64 0, i64 0, !dbg !1584
  %763 = call i8* @stzncpy(i8* %759, i8* %762, i64 256), !dbg !1586
  %764 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1587
  %765 = call i8* @strchr(i8* %764, i32 58) #13, !dbg !1588
  store i8* %765, i8** %22, align 8, !dbg !1589
  %766 = load i8*, i8** %22, align 8, !dbg !1590
  %767 = icmp ne i8* %766, null, !dbg !1590
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %237
  %768 = load i8*, i8** %22, align 8, !dbg !1593
  %769 = getelementptr inbounds i8, i8* %768, i32 1, !dbg !1593
  store i8* %769, i8** %22, align 8, !dbg !1593
  store i8 0, i8* %768, align 1, !dbg !1594
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %256
  %770 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1596
  %771 = load i8, i8* %770, align 16, !dbg !1596
  %772 = sext i8 %771 to i32, !dbg !1596
  %773 = icmp ne i32 %772, 0, !dbg !1596
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %277
  %774 = load i8, i8* @do_lookup, align 1, !dbg !1599
  %775 = trunc i8 %774 to i1, !dbg !1599
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %296
  %776 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1601
  %777 = call noalias i8* @canon_host(i8* %776), !dbg !1603
  store i8* %777, i8** %21, align 8, !dbg !1604
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %315
  %778 = load i8*, i8** %21, align 8, !dbg !1606
  %779 = icmp ne i8* %778, null, !dbg !1606
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %334
  %780 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1609
  store i8* %780, i8** %21, align 8, !dbg !1610
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %352
  %781 = load i8*, i8** %22, align 8, !dbg !1612
  %782 = icmp ne i8* %781, null, !dbg !1612
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %371
  %783 = load i64, i64* @print_user.hostlen, align 8, !dbg !1615
  %784 = load i8*, i8** %21, align 8, !dbg !1618
  %785 = call i64 @strlen(i8* %784) #13, !dbg !1619
  %786 = load i8*, i8** %22, align 8, !dbg !1620
  %787 = call i64 @strlen(i8* %786) #13, !dbg !1621
  %_ = sub i64 %785, %787
  %gen = mul i64 %_, %787
  %_67 = sub i64 %785, %787
  %gen68 = mul i64 %_67, %787
  %788 = add i64 %785, %787, !dbg !1622
  %_69 = sub i64 %788, 4
  %gen70 = mul i64 %_69, 4
  %_71 = sub i64 0, %788
  %gen72 = add i64 %_71, 4
  %_73 = shl i64 %788, 4
  %_74 = sub i64 %788, 4
  %gen75 = mul i64 %_74, 4
  %_76 = sub i64 %788, 4
  %gen77 = mul i64 %_76, 4
  %789 = add i64 %788, 4, !dbg !1623
  %790 = icmp ult i64 %783, %789, !dbg !1624
  br label %originalBB66

originalBB81alteredBB:                            ; preds = %originalBB81, %396
  %791 = load i8*, i8** %21, align 8, !dbg !1626
  %792 = call i64 @strlen(i8* %791) #13, !dbg !1628
  %793 = load i8*, i8** %22, align 8, !dbg !1629
  %794 = call i64 @strlen(i8* %793) #13, !dbg !1630
  %_82 = sub i64 %792, %794
  %gen83 = mul i64 %_82, %794
  %795 = add i64 %792, %794, !dbg !1631
  %_84 = sub i64 0, %795
  %gen85 = add i64 %_84, 4
  %796 = add i64 %795, 4, !dbg !1632
  store i64 %796, i64* @print_user.hostlen, align 8, !dbg !1633
  %797 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1634
  call void @free(i8* %797) #10, !dbg !1635
  %798 = load i64, i64* @print_user.hostlen, align 8, !dbg !1636
  %799 = call noalias i8* @xmalloc(i64 %798), !dbg !1637
  store i8* %799, i8** @print_user.hoststr, align 8, !dbg !1638
  br label %originalBB81

originalBB89alteredBB:                            ; preds = %originalBB89, %422
  %800 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1640
  %801 = load i8*, i8** %21, align 8, !dbg !1641
  %802 = load i8*, i8** %22, align 8, !dbg !1642
  %803 = call i32 (i8*, i8*, ...) @sprintf(i8* %800, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i64 0, i64 0), i8* %801, i8* %802) #10, !dbg !1643
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %443
  %804 = load i64, i64* @print_user.hostlen, align 8, !dbg !1645
  %805 = load i8*, i8** %21, align 8, !dbg !1648
  %806 = call i64 @strlen(i8* %805) #13, !dbg !1649
  %_94 = sub i64 %806, 3
  %gen95 = mul i64 %_94, 3
  %_96 = sub i64 %806, 3
  %gen97 = mul i64 %_96, 3
  %807 = add i64 %806, 3, !dbg !1650
  %808 = icmp ult i64 %804, %807, !dbg !1651
  br label %originalBB93

originalBB101alteredBB:                           ; preds = %originalBB101, %465
  %809 = load i8*, i8** %21, align 8, !dbg !1653
  %810 = call i64 @strlen(i8* %809) #13, !dbg !1655
  %_102 = shl i64 %810, 3
  %_103 = sub i64 %810, 3
  %gen104 = mul i64 %_103, 3
  %811 = add i64 %810, 3, !dbg !1656
  store i64 %811, i64* @print_user.hostlen, align 8, !dbg !1657
  %812 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1658
  call void @free(i8* %812) #10, !dbg !1659
  %813 = load i64, i64* @print_user.hostlen, align 8, !dbg !1660
  %814 = call noalias i8* @xmalloc(i64 %813), !dbg !1661
  store i8* %814, i8** @print_user.hoststr, align 8, !dbg !1662
  br label %originalBB101

originalBB108alteredBB:                           ; preds = %originalBB108, %488
  %815 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1664
  %816 = load i8*, i8** %21, align 8, !dbg !1665
  %817 = call i32 (i8*, i8*, ...) @sprintf(i8* %815, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i64 0, i64 0), i8* %816) #10, !dbg !1666
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %508
  %818 = load i8*, i8** %21, align 8, !dbg !1667
  %819 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1669
  %820 = icmp ne i8* %818, %819, !dbg !1670
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %528
  %821 = load i8*, i8** %21, align 8, !dbg !1672
  call void @free(i8* %821) #10, !dbg !1673
  br label %originalBB116

originalBB120alteredBB:                           ; preds = %originalBB120, %546
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %563
  %822 = load i64, i64* @print_user.hostlen, align 8, !dbg !1675
  %823 = icmp ult i64 %822, 1, !dbg !1678
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %582
  store i64 1, i64* @print_user.hostlen, align 8, !dbg !1680
  %824 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1682
  call void @free(i8* %824) #10, !dbg !1683
  %825 = load i64, i64* @print_user.hostlen, align 8, !dbg !1684
  %826 = call noalias i8* @xmalloc(i64 %825), !dbg !1685
  store i8* %826, i8** @print_user.hoststr, align 8, !dbg !1686
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %602
  %827 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1688
  store i8 0, i8* %827, align 1, !dbg !1689
  br label %originalBB132

originalBB136alteredBB:                           ; preds = %originalBB136, %620
  %828 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1690
  %829 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %828, i32 0, i32 4, !dbg !1690
  %830 = getelementptr inbounds [32 x i8], [32 x i8]* %829, i64 0, i64 0, !dbg !1690
  %831 = load i8, i8* %15, align 1, !dbg !1691
  %832 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1692
  %833 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %832, i32 0, i32 2, !dbg !1693
  %834 = getelementptr inbounds [32 x i8], [32 x i8]* %833, i64 0, i64 0, !dbg !1692
  %835 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1694
  %836 = call i8* @time_string(%struct.utmpx* %835), !dbg !1695
  %837 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1696
  %838 = getelementptr inbounds [12 x i8], [12 x i8]* %19, i64 0, i64 0, !dbg !1697
  %839 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1698
  %840 = icmp ne i8* %839, null, !dbg !1698
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %650
  %841 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1699
  br label %originalBB140

originalBB144alteredBB:                           ; preds = %originalBB144, %668
  br label %originalBB144

originalBB148alteredBB:                           ; preds = %originalBB148, %685
  call void @print_line(i32 32, i8* %631, i8 signext %632, i32 32, i8* %635, i8* %637, i8* %638, i8* %639, i8* %686, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1700
  br label %originalBB148
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_runlevel(%struct.utmpx*) #4 !dbg !133 {
  %2 = load i32, i32* @x.15
  %3 = load i32, i32* @y.16
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !1935, metadata !DIExpression()), !dbg !1936
  call void @llvm.dbg.declare(metadata i8* %11, metadata !1937, metadata !DIExpression()), !dbg !1938
  %13 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1939
  %14 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %13, i32 0, i32 1, !dbg !1939
  %15 = load i32, i32* %14, align 4, !dbg !1939
  %16 = sdiv i32 %15, 256, !dbg !1940
  %17 = trunc i32 %16 to i8, !dbg !1939
  store i8 %17, i8* %11, align 1, !dbg !1938
  call void @llvm.dbg.declare(metadata i8* %12, metadata !1941, metadata !DIExpression()), !dbg !1942
  %18 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1943
  %19 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %18, i32 0, i32 1, !dbg !1943
  %20 = load i32, i32* %19, align 4, !dbg !1943
  %21 = srem i32 %20, 256, !dbg !1944
  %22 = trunc i32 %21 to i8, !dbg !1943
  store i8 %22, i8* %12, align 1, !dbg !1942
  %23 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1945
  %24 = icmp ne i8* %23, null, !dbg !1945
  %25 = load i32, i32* @x.15
  %26 = load i32, i32* @y.16
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %24, label %54, label %33, !dbg !1947

33:                                               ; preds = %originalBBpart2
  %34 = load i32, i32* @x.15
  %35 = load i32, i32* @y.16
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB5, label %originalBB5alteredBB

originalBB5:                                      ; preds = %33, %originalBB5alteredBB
  %42 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0)) #10, !dbg !1948
  %43 = call i64 @strlen(i8* %42) #13, !dbg !1949
  %44 = add i64 %43, 3, !dbg !1950
  %45 = call noalias i8* @xmalloc(i64 %44), !dbg !1951
  store i8* %45, i8** @print_runlevel.runlevline, align 8, !dbg !1952
  %46 = load i32, i32* @x.15
  %47 = load i32, i32* @y.16
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart218, label %originalBB5alteredBB

originalBBpart218:                                ; preds = %originalBB5
  br label %54, !dbg !1953

54:                                               ; preds = %originalBBpart218, %originalBBpart2
  %55 = load i32, i32* @x.15
  %56 = load i32, i32* @y.16
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %54, %originalBB20alteredBB
  %63 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1954
  %64 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0)) #10, !dbg !1955
  %65 = load i8, i8* %12, align 1, !dbg !1956
  %66 = zext i8 %65 to i32, !dbg !1956
  %67 = call i32 (i8*, i8*, ...) @sprintf(i8* %63, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i64 0, i64 0), i8* %64, i32 %66) #10, !dbg !1957
  %68 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1958
  %69 = icmp ne i8* %68, null, !dbg !1958
  %70 = load i32, i32* @x.15
  %71 = load i32, i32* @y.16
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br i1 %69, label %99, label %78, !dbg !1960

78:                                               ; preds = %originalBBpart222
  %79 = load i32, i32* @x.15
  %80 = load i32, i32* @y.16
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %78, %originalBB24alteredBB
  %87 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)) #10, !dbg !1961
  %88 = call i64 @strlen(i8* %87) #13, !dbg !1962
  %89 = add i64 %88, 2, !dbg !1963
  %90 = call noalias i8* @xmalloc(i64 %89), !dbg !1964
  store i8* %90, i8** @print_runlevel.comment, align 8, !dbg !1965
  %91 = load i32, i32* @x.15
  %92 = load i32, i32* @y.16
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart237, label %originalBB24alteredBB

originalBBpart237:                                ; preds = %originalBB24
  br label %99, !dbg !1966

99:                                               ; preds = %originalBBpart237, %originalBBpart222
  %100 = load i32, i32* @x.15
  %101 = load i32, i32* @y.16
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %99, %originalBB39alteredBB
  %108 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1967
  %109 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)) #10, !dbg !1968
  %110 = load i8, i8* %11, align 1, !dbg !1969
  %111 = zext i8 %110 to i32, !dbg !1969
  %112 = icmp eq i32 %111, 78, !dbg !1970
  %113 = load i32, i32* @x.15
  %114 = load i32, i32* @y.16
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br i1 %112, label %121, label %138, !dbg !1971

121:                                              ; preds = %originalBBpart241
  %122 = load i32, i32* @x.15
  %123 = load i32, i32* @y.16
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %121, %originalBB43alteredBB
  %130 = load i32, i32* @x.15
  %131 = load i32, i32* @y.16
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br label %157, !dbg !1971

138:                                              ; preds = %originalBBpart241
  %139 = load i32, i32* @x.15
  %140 = load i32, i32* @y.16
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %138, %originalBB47alteredBB
  %147 = load i8, i8* %11, align 1, !dbg !1972
  %148 = zext i8 %147 to i32, !dbg !1972
  %149 = load i32, i32* @x.15
  %150 = load i32, i32* @y.16
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %157, !dbg !1971

157:                                              ; preds = %originalBBpart249, %originalBBpart245
  %158 = phi i32 [ 83, %originalBBpart245 ], [ %148, %originalBBpart249 ], !dbg !1971
  %159 = load i32, i32* @x.15
  %160 = load i32, i32* @y.16
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %157, %originalBB51alteredBB
  %167 = call i32 (i8*, i8*, ...) @sprintf(i8* %108, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i64 0, i64 0), i8* %109, i32 %158) #10, !dbg !1973
  %168 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1974
  %169 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1975
  %170 = call i8* @time_string(%struct.utmpx* %169), !dbg !1976
  %171 = load i8, i8* %11, align 1, !dbg !1977
  %172 = zext i8 %171 to i32, !dbg !1977
  %173 = call zeroext i1 @c_isprint(i32 %172), !dbg !1978
  %174 = load i32, i32* @x.15
  %175 = load i32, i32* @y.16
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br i1 %173, label %182, label %200, !dbg !1978

182:                                              ; preds = %originalBBpart253
  %183 = load i32, i32* @x.15
  %184 = load i32, i32* @y.16
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %182, %originalBB55alteredBB
  %191 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1979
  %192 = load i32, i32* @x.15
  %193 = load i32, i32* @y.16
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br label %217, !dbg !1978

200:                                              ; preds = %originalBBpart253
  %201 = load i32, i32* @x.15
  %202 = load i32, i32* @y.16
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %200, %originalBB59alteredBB
  %209 = load i32, i32* @x.15
  %210 = load i32, i32* @y.16
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br label %217, !dbg !1978

217:                                              ; preds = %originalBBpart261, %originalBBpart257
  %218 = phi i8* [ %191, %originalBBpart257 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), %originalBBpart261 ], !dbg !1978
  %219 = load i32, i32* @x.15
  %220 = load i32, i32* @y.16
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %217, %originalBB63alteredBB
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %168, i8* %170, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %218, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1980
  %227 = load i32, i32* @x.15
  %228 = load i32, i32* @y.16
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  ret void, !dbg !1981

originalBBalteredBB:                              ; preds = %originalBB, %1
  %235 = alloca %struct.utmpx*, align 8
  %236 = alloca i8, align 1
  %237 = alloca i8, align 1
  store %struct.utmpx* %0, %struct.utmpx** %235, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %235, metadata !1982, metadata !DIExpression()), !dbg !1936
  call void @llvm.dbg.declare(metadata i8* %236, metadata !2083, metadata !DIExpression()), !dbg !1938
  %238 = load %struct.utmpx*, %struct.utmpx** %235, align 8, !dbg !1939
  %239 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %238, i32 0, i32 1, !dbg !1939
  %240 = load i32, i32* %239, align 4, !dbg !1939
  %_ = sub i32 %240, 256
  %gen = mul i32 %_, 256
  %241 = sdiv i32 %240, 256, !dbg !1940
  %242 = trunc i32 %241 to i8, !dbg !1939
  store i8 %242, i8* %236, align 1, !dbg !1938
  call void @llvm.dbg.declare(metadata i8* %237, metadata !2084, metadata !DIExpression()), !dbg !1942
  %243 = load %struct.utmpx*, %struct.utmpx** %235, align 8, !dbg !1943
  %244 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %243, i32 0, i32 1, !dbg !1943
  %245 = load i32, i32* %244, align 4, !dbg !1943
  %_1 = sub i32 %245, 256
  %gen2 = mul i32 %_1, 256
  %_3 = sub i32 %245, 256
  %gen4 = mul i32 %_3, 256
  %246 = srem i32 %245, 256, !dbg !1944
  %247 = trunc i32 %246 to i8, !dbg !1943
  store i8 %247, i8* %237, align 1, !dbg !1942
  %248 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1945
  %249 = icmp ne i8* %248, null, !dbg !1945
  br label %originalBB

originalBB5alteredBB:                             ; preds = %originalBB5, %33
  %250 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0)) #10, !dbg !1948
  %251 = call i64 @strlen(i8* %250) #13, !dbg !1949
  %_6 = shl i64 %251, 3
  %_7 = shl i64 %251, 3
  %_8 = sub i64 %251, 3
  %gen9 = mul i64 %_8, 3
  %_10 = shl i64 %251, 3
  %_11 = shl i64 %251, 3
  %_12 = shl i64 %251, 3
  %_13 = sub i64 %251, 3
  %gen14 = mul i64 %_13, 3
  %_15 = shl i64 %251, 3
  %_16 = shl i64 %251, 3
  %252 = add i64 %251, 3, !dbg !1950
  %253 = call noalias i8* @xmalloc(i64 %252), !dbg !1951
  store i8* %253, i8** @print_runlevel.runlevline, align 8, !dbg !1952
  br label %originalBB5

originalBB20alteredBB:                            ; preds = %originalBB20, %54
  %254 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1954
  %255 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0)) #10, !dbg !1955
  %256 = load i8, i8* %12, align 1, !dbg !1956
  %257 = zext i8 %256 to i32, !dbg !1956
  %258 = call i32 (i8*, i8*, ...) @sprintf(i8* %254, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i64 0, i64 0), i8* %255, i32 %257) #10, !dbg !1957
  %259 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1958
  %260 = icmp ne i8* %259, null, !dbg !1958
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %78
  %261 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)) #10, !dbg !1961
  %262 = call i64 @strlen(i8* %261) #13, !dbg !1962
  %_25 = shl i64 %262, 2
  %_26 = shl i64 %262, 2
  %_27 = shl i64 %262, 2
  %_28 = sub i64 %262, 2
  %gen29 = mul i64 %_28, 2
  %_30 = sub i64 %262, 2
  %gen31 = mul i64 %_30, 2
  %_32 = shl i64 %262, 2
  %_33 = shl i64 %262, 2
  %_34 = sub i64 %262, 2
  %gen35 = mul i64 %_34, 2
  %263 = add i64 %262, 2, !dbg !1963
  %264 = call noalias i8* @xmalloc(i64 %263), !dbg !1964
  store i8* %264, i8** @print_runlevel.comment, align 8, !dbg !1965
  br label %originalBB24

originalBB39alteredBB:                            ; preds = %originalBB39, %99
  %265 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1967
  %266 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)) #10, !dbg !1968
  %267 = load i8, i8* %11, align 1, !dbg !1969
  %268 = zext i8 %267 to i32, !dbg !1969
  %269 = icmp eq i32 %268, 78, !dbg !1970
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %121
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %138
  %270 = load i8, i8* %11, align 1, !dbg !1972
  %271 = zext i8 %270 to i32, !dbg !1972
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %157
  %272 = call i32 (i8*, i8*, ...) @sprintf(i8* %108, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i64 0, i64 0), i8* %109, i32 %158) #10, !dbg !1973
  %273 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1974
  %274 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1975
  %275 = call i8* @time_string(%struct.utmpx* %274), !dbg !1976
  %276 = load i8, i8* %11, align 1, !dbg !1977
  %277 = zext i8 %276 to i32, !dbg !1977
  %278 = call zeroext i1 @c_isprint(i32 %277), !dbg !1978
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %182
  %279 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1979
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %200
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %217
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %168, i8* %170, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %218, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1980
  br label %originalBB63
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_boottime(%struct.utmpx*) #4 !dbg !2085 {
  %2 = load i32, i32* @x.17
  %3 = load i32, i32* @y.18
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !2086, metadata !DIExpression()), !dbg !2087
  %11 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.88, i64 0, i64 0)) #10, !dbg !2088
  %12 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2089
  %13 = call i8* @time_string(%struct.utmpx* %12), !dbg !2090
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %11, i8* %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2091
  %14 = load i32, i32* @x.17
  %15 = load i32, i32* @y.18
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2092

originalBBalteredBB:                              ; preds = %originalBB, %1
  %22 = alloca %struct.utmpx*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %22, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %22, metadata !2093, metadata !DIExpression()), !dbg !2087
  %23 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.88, i64 0, i64 0)) #10, !dbg !2088
  %24 = load %struct.utmpx*, %struct.utmpx** %22, align 8, !dbg !2089
  %25 = call i8* @time_string(%struct.utmpx* %24), !dbg !2090
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %23, i8* %25, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2091
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_clockchange(%struct.utmpx*) #4 !dbg !2195 {
  %2 = load i32, i32* @x.19
  %3 = load i32, i32* @y.20
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !2196, metadata !DIExpression()), !dbg !2197
  %11 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.89, i64 0, i64 0)) #10, !dbg !2198
  %12 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2199
  %13 = call i8* @time_string(%struct.utmpx* %12), !dbg !2200
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %11, i8* %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2201
  %14 = load i32, i32* @x.19
  %15 = load i32, i32* @y.20
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2202

originalBBalteredBB:                              ; preds = %originalBB, %1
  %22 = alloca %struct.utmpx*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %22, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %22, metadata !2203, metadata !DIExpression()), !dbg !2197
  %23 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.89, i64 0, i64 0)) #10, !dbg !2198
  %24 = load %struct.utmpx*, %struct.utmpx** %22, align 8, !dbg !2199
  %25 = call i8* @time_string(%struct.utmpx* %24), !dbg !2200
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %23, i8* %25, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2201
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_initspawn(%struct.utmpx*) #4 !dbg !2305 {
  %2 = load i32, i32* @x.21
  %3 = load i32, i32* @y.22
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !2306, metadata !DIExpression()), !dbg !2307
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2308, metadata !DIExpression()), !dbg !2309
  %13 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2310
  %14 = call i8* @make_id_equals_comment(%struct.utmpx* %13), !dbg !2311
  store i8* %14, i8** %11, align 8, !dbg !2309
  call void @llvm.dbg.declare(metadata [12 x i8]* %12, metadata !2312, metadata !DIExpression()), !dbg !2313
  %15 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2313
  %16 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2313
  %17 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %16, i32 0, i32 1, !dbg !2313
  %18 = load i32, i32* %17, align 4, !dbg !2313
  %19 = sext i32 %18 to i64, !dbg !2313
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %19) #10, !dbg !2313
  %21 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2314
  %22 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %21, i32 0, i32 2, !dbg !2315
  %23 = getelementptr inbounds [32 x i8], [32 x i8]* %22, i64 0, i64 0, !dbg !2314
  %24 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2316
  %25 = call i8* @time_string(%struct.utmpx* %24), !dbg !2317
  %26 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2318
  %27 = load i8*, i8** %11, align 8, !dbg !2319
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 32, i8* %23, i8* %25, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %26, i8* %27, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2320
  %28 = load i8*, i8** %11, align 8, !dbg !2321
  call void @free(i8* %28) #10, !dbg !2322
  %29 = load i32, i32* @x.21
  %30 = load i32, i32* @y.22
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2323

originalBBalteredBB:                              ; preds = %originalBB, %1
  %37 = alloca %struct.utmpx*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %37, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %37, metadata !2324, metadata !DIExpression()), !dbg !2307
  call void @llvm.dbg.declare(metadata i8** %38, metadata !2426, metadata !DIExpression()), !dbg !2309
  %40 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !2310
  %41 = call i8* @make_id_equals_comment(%struct.utmpx* %40), !dbg !2311
  store i8* %41, i8** %38, align 8, !dbg !2309
  call void @llvm.dbg.declare(metadata [12 x i8]* %39, metadata !2427, metadata !DIExpression()), !dbg !2313
  %42 = getelementptr inbounds [12 x i8], [12 x i8]* %39, i64 0, i64 0, !dbg !2313
  %43 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !2313
  %44 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %43, i32 0, i32 1, !dbg !2313
  %45 = load i32, i32* %44, align 4, !dbg !2313
  %46 = sext i32 %45 to i64, !dbg !2313
  %47 = call i32 (i8*, i8*, ...) @sprintf(i8* %42, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %46) #10, !dbg !2313
  %48 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !2314
  %49 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %48, i32 0, i32 2, !dbg !2315
  %50 = getelementptr inbounds [32 x i8], [32 x i8]* %49, i64 0, i64 0, !dbg !2314
  %51 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !2316
  %52 = call i8* @time_string(%struct.utmpx* %51), !dbg !2317
  %53 = getelementptr inbounds [12 x i8], [12 x i8]* %39, i64 0, i64 0, !dbg !2318
  %54 = load i8*, i8** %38, align 8, !dbg !2319
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 32, i8* %50, i8* %52, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %53, i8* %54, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2320
  %55 = load i8*, i8** %38, align 8, !dbg !2321
  call void @free(i8* %55) #10, !dbg !2322
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_login(%struct.utmpx*) #4 !dbg !2428 {
  %2 = load i32, i32* @x.23
  %3 = load i32, i32* @y.24
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !2429, metadata !DIExpression()), !dbg !2430
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2431, metadata !DIExpression()), !dbg !2432
  %13 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2433
  %14 = call i8* @make_id_equals_comment(%struct.utmpx* %13), !dbg !2434
  store i8* %14, i8** %11, align 8, !dbg !2432
  call void @llvm.dbg.declare(metadata [12 x i8]* %12, metadata !2435, metadata !DIExpression()), !dbg !2436
  %15 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2436
  %16 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2436
  %17 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %16, i32 0, i32 1, !dbg !2436
  %18 = load i32, i32* %17, align 4, !dbg !2436
  %19 = sext i32 %18 to i64, !dbg !2436
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %19) #10, !dbg !2436
  %21 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.91, i64 0, i64 0)) #10, !dbg !2437
  %22 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2438
  %23 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %22, i32 0, i32 2, !dbg !2439
  %24 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 0, !dbg !2438
  %25 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2440
  %26 = call i8* @time_string(%struct.utmpx* %25), !dbg !2441
  %27 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2442
  %28 = load i8*, i8** %11, align 8, !dbg !2443
  call void @print_line(i32 -1, i8* %21, i8 signext 32, i32 32, i8* %24, i8* %26, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %27, i8* %28, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2444
  %29 = load i8*, i8** %11, align 8, !dbg !2445
  call void @free(i8* %29) #10, !dbg !2446
  %30 = load i32, i32* @x.23
  %31 = load i32, i32* @y.24
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2447

originalBBalteredBB:                              ; preds = %originalBB, %1
  %38 = alloca %struct.utmpx*, align 8
  %39 = alloca i8*, align 8
  %40 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %38, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %38, metadata !2448, metadata !DIExpression()), !dbg !2430
  call void @llvm.dbg.declare(metadata i8** %39, metadata !2550, metadata !DIExpression()), !dbg !2432
  %41 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !2433
  %42 = call i8* @make_id_equals_comment(%struct.utmpx* %41), !dbg !2434
  store i8* %42, i8** %39, align 8, !dbg !2432
  call void @llvm.dbg.declare(metadata [12 x i8]* %40, metadata !2551, metadata !DIExpression()), !dbg !2436
  %43 = getelementptr inbounds [12 x i8], [12 x i8]* %40, i64 0, i64 0, !dbg !2436
  %44 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !2436
  %45 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %44, i32 0, i32 1, !dbg !2436
  %46 = load i32, i32* %45, align 4, !dbg !2436
  %47 = sext i32 %46 to i64, !dbg !2436
  %48 = call i32 (i8*, i8*, ...) @sprintf(i8* %43, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %47) #10, !dbg !2436
  %49 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.91, i64 0, i64 0)) #10, !dbg !2437
  %50 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !2438
  %51 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %50, i32 0, i32 2, !dbg !2439
  %52 = getelementptr inbounds [32 x i8], [32 x i8]* %51, i64 0, i64 0, !dbg !2438
  %53 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !2440
  %54 = call i8* @time_string(%struct.utmpx* %53), !dbg !2441
  %55 = getelementptr inbounds [12 x i8], [12 x i8]* %40, i64 0, i64 0, !dbg !2442
  %56 = load i8*, i8** %39, align 8, !dbg !2443
  call void @print_line(i32 -1, i8* %49, i8 signext 32, i32 32, i8* %52, i8* %54, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %55, i8* %56, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2444
  %57 = load i8*, i8** %39, align 8, !dbg !2445
  call void @free(i8* %57) #10, !dbg !2446
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_deadprocs(%struct.utmpx*) #4 !dbg !140 {
  %2 = load i32, i32* @x.25
  %3 = load i32, i32* @y.26
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !2552, metadata !DIExpression()), !dbg !2553
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2554, metadata !DIExpression()), !dbg !2555
  %13 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2556
  %14 = call i8* @make_id_equals_comment(%struct.utmpx* %13), !dbg !2557
  store i8* %14, i8** %11, align 8, !dbg !2555
  call void @llvm.dbg.declare(metadata [12 x i8]* %12, metadata !2558, metadata !DIExpression()), !dbg !2559
  %15 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2559
  %16 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2559
  %17 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %16, i32 0, i32 1, !dbg !2559
  %18 = load i32, i32* %17, align 4, !dbg !2559
  %19 = sext i32 %18 to i64, !dbg !2559
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %19) #10, !dbg !2559
  %21 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !2560
  %22 = icmp ne i8* %21, null, !dbg !2560
  %23 = load i32, i32* @x.25
  %24 = load i32, i32* @y.26
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %58, label %31, !dbg !2562

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.25
  %33 = load i32, i32* @y.26
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i64 0, i64 0)) #10, !dbg !2563
  %41 = call i64 @strlen(i8* %40) #13, !dbg !2564
  %42 = add i64 %41, 6, !dbg !2565
  %43 = add i64 %42, 1, !dbg !2566
  %44 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i64 0, i64 0)) #10, !dbg !2567
  %45 = call i64 @strlen(i8* %44) #13, !dbg !2568
  %46 = add i64 %43, %45, !dbg !2569
  %47 = add i64 %46, 6, !dbg !2570
  %48 = add i64 %47, 1, !dbg !2571
  %49 = call noalias i8* @xmalloc(i64 %48), !dbg !2572
  store i8* %49, i8** @print_deadprocs.exitstr, align 8, !dbg !2573
  %50 = load i32, i32* @x.25
  %51 = load i32, i32* @y.26
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart232, label %originalBB1alteredBB

originalBBpart232:                                ; preds = %originalBB1
  br label %58, !dbg !2574

58:                                               ; preds = %originalBBpart232, %originalBBpart2
  %59 = load i32, i32* @x.25
  %60 = load i32, i32* @y.26
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %58, %originalBB34alteredBB
  %67 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !2575
  %68 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i64 0, i64 0)) #10, !dbg !2576
  %69 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2577
  %70 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %69, i32 0, i32 6, !dbg !2577
  %71 = getelementptr inbounds %struct.__exit_status, %struct.__exit_status* %70, i32 0, i32 0, !dbg !2577
  %72 = load i16, i16* %71, align 4, !dbg !2577
  %73 = sext i16 %72 to i32, !dbg !2577
  %74 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i64 0, i64 0)) #10, !dbg !2578
  %75 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2579
  %76 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %75, i32 0, i32 6, !dbg !2579
  %77 = getelementptr inbounds %struct.__exit_status, %struct.__exit_status* %76, i32 0, i32 1, !dbg !2579
  %78 = load i16, i16* %77, align 2, !dbg !2579
  %79 = sext i16 %78 to i32, !dbg !2579
  %80 = call i32 (i8*, i8*, ...) @sprintf(i8* %67, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94, i64 0, i64 0), i8* %68, i32 %73, i8* %74, i32 %79) #10, !dbg !2580
  %81 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2581
  %82 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %81, i32 0, i32 2, !dbg !2582
  %83 = getelementptr inbounds [32 x i8], [32 x i8]* %82, i64 0, i64 0, !dbg !2581
  %84 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2583
  %85 = call i8* @time_string(%struct.utmpx* %84), !dbg !2584
  %86 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2585
  %87 = load i8*, i8** %11, align 8, !dbg !2586
  %88 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !2587
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 32, i8* %83, i8* %85, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %86, i8* %87, i8* %88), !dbg !2588
  %89 = load i8*, i8** %11, align 8, !dbg !2589
  call void @free(i8* %89) #10, !dbg !2590
  %90 = load i32, i32* @x.25
  %91 = load i32, i32* @y.26
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !2591

originalBBalteredBB:                              ; preds = %originalBB, %1
  %98 = alloca %struct.utmpx*, align 8
  %99 = alloca i8*, align 8
  %100 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %98, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %98, metadata !2592, metadata !DIExpression()), !dbg !2553
  call void @llvm.dbg.declare(metadata i8** %99, metadata !2693, metadata !DIExpression()), !dbg !2555
  %101 = load %struct.utmpx*, %struct.utmpx** %98, align 8, !dbg !2556
  %102 = call i8* @make_id_equals_comment(%struct.utmpx* %101), !dbg !2557
  store i8* %102, i8** %99, align 8, !dbg !2555
  call void @llvm.dbg.declare(metadata [12 x i8]* %100, metadata !2694, metadata !DIExpression()), !dbg !2559
  %103 = getelementptr inbounds [12 x i8], [12 x i8]* %100, i64 0, i64 0, !dbg !2559
  %104 = load %struct.utmpx*, %struct.utmpx** %98, align 8, !dbg !2559
  %105 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %104, i32 0, i32 1, !dbg !2559
  %106 = load i32, i32* %105, align 4, !dbg !2559
  %107 = sext i32 %106 to i64, !dbg !2559
  %108 = call i32 (i8*, i8*, ...) @sprintf(i8* %103, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %107) #10, !dbg !2559
  %109 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !2560
  %110 = icmp ne i8* %109, null, !dbg !2560
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %111 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i64 0, i64 0)) #10, !dbg !2563
  %112 = call i64 @strlen(i8* %111) #13, !dbg !2564
  %_ = sub i64 %112, 6
  %gen = mul i64 %_, 6
  %_2 = sub i64 0, %112
  %gen3 = add i64 %_2, 6
  %_4 = sub i64 %112, 6
  %gen5 = mul i64 %_4, 6
  %_6 = shl i64 %112, 6
  %_7 = sub i64 0, %112
  %gen8 = add i64 %_7, 6
  %_9 = sub i64 %112, 6
  %gen10 = mul i64 %_9, 6
  %113 = add i64 %112, 6, !dbg !2565
  %_11 = sub i64 0, %113
  %gen12 = add i64 %_11, 1
  %_13 = shl i64 %113, 1
  %_14 = sub i64 0, %113
  %gen15 = add i64 %_14, 1
  %_16 = sub i64 %113, 1
  %gen17 = mul i64 %_16, 1
  %_18 = shl i64 %113, 1
  %114 = add i64 %113, 1, !dbg !2566
  %115 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i64 0, i64 0)) #10, !dbg !2567
  %116 = call i64 @strlen(i8* %115) #13, !dbg !2568
  %_19 = sub i64 %114, %116
  %gen20 = mul i64 %_19, %116
  %_21 = shl i64 %114, %116
  %_22 = shl i64 %114, %116
  %_23 = shl i64 %114, %116
  %_24 = shl i64 %114, %116
  %117 = add i64 %114, %116, !dbg !2569
  %_25 = sub i64 0, %117
  %gen26 = add i64 %_25, 6
  %118 = add i64 %117, 6, !dbg !2570
  %_27 = shl i64 %118, 1
  %_28 = shl i64 %118, 1
  %_29 = sub i64 0, %118
  %gen30 = add i64 %_29, 1
  %119 = add i64 %118, 1, !dbg !2571
  %120 = call noalias i8* @xmalloc(i64 %119), !dbg !2572
  store i8* %120, i8** @print_deadprocs.exitstr, align 8, !dbg !2573
  br label %originalBB1

originalBB34alteredBB:                            ; preds = %originalBB34, %58
  %121 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !2575
  %122 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i64 0, i64 0)) #10, !dbg !2576
  %123 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2577
  %124 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %123, i32 0, i32 6, !dbg !2577
  %125 = getelementptr inbounds %struct.__exit_status, %struct.__exit_status* %124, i32 0, i32 0, !dbg !2577
  %126 = load i16, i16* %125, align 4, !dbg !2577
  %127 = sext i16 %126 to i32, !dbg !2577
  %128 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i64 0, i64 0)) #10, !dbg !2578
  %129 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2579
  %130 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %129, i32 0, i32 6, !dbg !2579
  %131 = getelementptr inbounds %struct.__exit_status, %struct.__exit_status* %130, i32 0, i32 1, !dbg !2579
  %132 = load i16, i16* %131, align 2, !dbg !2579
  %133 = sext i16 %132 to i32, !dbg !2579
  %134 = call i32 (i8*, i8*, ...) @sprintf(i8* %121, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94, i64 0, i64 0), i8* %122, i32 %127, i8* %128, i32 %133) #10, !dbg !2580
  %135 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2581
  %136 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %135, i32 0, i32 2, !dbg !2582
  %137 = getelementptr inbounds [32 x i8], [32 x i8]* %136, i64 0, i64 0, !dbg !2581
  %138 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2583
  %139 = call i8* @time_string(%struct.utmpx* %138), !dbg !2584
  %140 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2585
  %141 = load i8*, i8** %11, align 8, !dbg !2586
  %142 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !2587
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 32, i8* %137, i8* %139, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %140, i8* %141, i8* %142), !dbg !2588
  %143 = load i8*, i8** %11, align 8, !dbg !2589
  call void @free(i8* %143) #10, !dbg !2590
  br label %originalBB34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @make_id_equals_comment(%struct.utmpx*) #4 !dbg !2695 {
  %2 = load i32, i32* @x.27
  %3 = load i32, i32* @y.28
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !2698, metadata !DIExpression()), !dbg !2699
  call void @llvm.dbg.declare(metadata i64* %11, metadata !2700, metadata !DIExpression()), !dbg !2701
  store i64 4, i64* %11, align 8, !dbg !2701
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2702, metadata !DIExpression()), !dbg !2703
  %13 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i64 0, i64 0)) #10, !dbg !2704
  %14 = call i64 @strlen(i8* %13) #13, !dbg !2705
  %15 = load i64, i64* %11, align 8, !dbg !2706
  %16 = add i64 %14, %15, !dbg !2707
  %17 = add i64 %16, 1, !dbg !2708
  %18 = call noalias i8* @xmalloc(i64 %17), !dbg !2709
  store i8* %18, i8** %12, align 8, !dbg !2703
  %19 = load i8*, i8** %12, align 8, !dbg !2710
  %20 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i64 0, i64 0)) #10, !dbg !2711
  %21 = call i8* @strcpy(i8* %19, i8* %20) #10, !dbg !2712
  %22 = load i8*, i8** %12, align 8, !dbg !2713
  %23 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2714
  %24 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %23, i32 0, i32 3, !dbg !2714
  %25 = getelementptr inbounds [4 x i8], [4 x i8]* %24, i64 0, i64 0, !dbg !2714
  %26 = load i64, i64* %11, align 8, !dbg !2715
  %27 = call i8* @strncat(i8* %22, i8* %25, i64 %26) #10, !dbg !2716
  %28 = load i8*, i8** %12, align 8, !dbg !2717
  %29 = load i32, i32* @x.27
  %30 = load i32, i32* @y.28
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %28, !dbg !2718

originalBBalteredBB:                              ; preds = %originalBB, %1
  %37 = alloca %struct.utmpx*, align 8
  %38 = alloca i64, align 8
  %39 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %37, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %37, metadata !2719, metadata !DIExpression()), !dbg !2699
  call void @llvm.dbg.declare(metadata i64* %38, metadata !2823, metadata !DIExpression()), !dbg !2701
  store i64 4, i64* %38, align 8, !dbg !2701
  call void @llvm.dbg.declare(metadata i8** %39, metadata !2824, metadata !DIExpression()), !dbg !2703
  %40 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i64 0, i64 0)) #10, !dbg !2704
  %41 = call i64 @strlen(i8* %40) #13, !dbg !2705
  %42 = load i64, i64* %38, align 8, !dbg !2706
  %_ = sub i64 0, %41
  %gen = add i64 %_, %42
  %_1 = shl i64 %41, %42
  %_2 = sub i64 %41, %42
  %gen3 = mul i64 %_2, %42
  %_4 = shl i64 %41, %42
  %_5 = shl i64 %41, %42
  %_6 = sub i64 0, %41
  %gen7 = add i64 %_6, %42
  %43 = add i64 %41, %42, !dbg !2707
  %_8 = shl i64 %43, 1
  %_9 = shl i64 %43, 1
  %_10 = sub i64 0, %43
  %gen11 = add i64 %_10, 1
  %_12 = sub i64 0, %43
  %gen13 = add i64 %_12, 1
  %44 = add i64 %43, 1, !dbg !2708
  %45 = call noalias i8* @xmalloc(i64 %44), !dbg !2709
  store i8* %45, i8** %39, align 8, !dbg !2703
  %46 = load i8*, i8** %39, align 8, !dbg !2710
  %47 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i64 0, i64 0)) #10, !dbg !2711
  %48 = call i8* @strcpy(i8* %46, i8* %47) #10, !dbg !2712
  %49 = load i8*, i8** %39, align 8, !dbg !2713
  %50 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !2714
  %51 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %50, i32 0, i32 3, !dbg !2714
  %52 = getelementptr inbounds [4 x i8], [4 x i8]* %51, i64 0, i64 0, !dbg !2714
  %53 = load i64, i64* %38, align 8, !dbg !2715
  %54 = call i8* @strncat(i8* %49, i8* %52, i64 %53) #10, !dbg !2716
  %55 = load i8*, i8** %39, align 8, !dbg !2717
  br label %originalBB
}

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @time_string(%struct.utmpx*) #4 !dbg !125 {
  %2 = load i32, i32* @x.29
  %3 = load i32, i32* @y.30
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca %struct.utmpx*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.tm*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %11, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %11, metadata !2825, metadata !DIExpression()), !dbg !2826
  call void @llvm.dbg.declare(metadata i64* %12, metadata !2827, metadata !DIExpression()), !dbg !2828
  %14 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !2829
  %15 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %14, i32 0, i32 8, !dbg !2829
  %16 = getelementptr inbounds %struct.anon, %struct.anon* %15, i32 0, i32 0, !dbg !2829
  %17 = load i32, i32* %16, align 4, !dbg !2829
  %18 = sext i32 %17 to i64, !dbg !2829
  store i64 %18, i64* %12, align 8, !dbg !2828
  call void @llvm.dbg.declare(metadata %struct.tm** %13, metadata !2830, metadata !DIExpression()), !dbg !2846
  %19 = call %struct.tm* @localtime(i64* %12) #10, !dbg !2847
  store %struct.tm* %19, %struct.tm** %13, align 8, !dbg !2846
  %20 = load %struct.tm*, %struct.tm** %13, align 8, !dbg !2848
  %21 = icmp ne %struct.tm* %20, null, !dbg !2848
  %22 = load i32, i32* @x.29
  %23 = load i32, i32* @y.30
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %50, !dbg !2850

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.29
  %32 = load i32, i32* @y.30
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load i8*, i8** @time_format, align 8, !dbg !2851
  %40 = load %struct.tm*, %struct.tm** %13, align 8, !dbg !2853
  %41 = call i64 @strftime(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i64 33, i8* %39, %struct.tm* %40) #10, !dbg !2854
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i8** %10, align 8, !dbg !2855
  %42 = load i32, i32* @x.29
  %43 = load i32, i32* @y.30
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %69, !dbg !2855

50:                                               ; preds = %originalBBpart2
  %51 = load i32, i32* @x.29
  %52 = load i32, i32* @y.30
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %59 = load i64, i64* %12, align 8, !dbg !2856
  %60 = call i8* @timetostr(i64 %59, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0)), !dbg !2857
  store i8* %60, i8** %10, align 8, !dbg !2858
  %61 = load i32, i32* @x.29
  %62 = load i32, i32* @y.30
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %69, !dbg !2858

69:                                               ; preds = %originalBBpart28, %originalBBpart24
  %70 = load i32, i32* @x.29
  %71 = load i32, i32* @y.30
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = load i8*, i8** %10, align 8, !dbg !2859
  %79 = load i32, i32* @x.29
  %80 = load i32, i32* @y.30
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %78, !dbg !2859

originalBBalteredBB:                              ; preds = %originalBB, %1
  %87 = alloca i8*, align 8
  %88 = alloca %struct.utmpx*, align 8
  %89 = alloca i64, align 8
  %90 = alloca %struct.tm*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %88, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %88, metadata !2860, metadata !DIExpression()), !dbg !2826
  call void @llvm.dbg.declare(metadata i64* %89, metadata !2961, metadata !DIExpression()), !dbg !2828
  %91 = load %struct.utmpx*, %struct.utmpx** %88, align 8, !dbg !2829
  %92 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %91, i32 0, i32 8, !dbg !2829
  %93 = getelementptr inbounds %struct.anon, %struct.anon* %92, i32 0, i32 0, !dbg !2829
  %94 = load i32, i32* %93, align 4, !dbg !2829
  %95 = sext i32 %94 to i64, !dbg !2829
  store i64 %95, i64* %89, align 8, !dbg !2828
  call void @llvm.dbg.declare(metadata %struct.tm** %90, metadata !2962, metadata !DIExpression()), !dbg !2846
  %96 = call %struct.tm* @localtime(i64* %89) #10, !dbg !2847
  store %struct.tm* %96, %struct.tm** %90, align 8, !dbg !2846
  %97 = load %struct.tm*, %struct.tm** %90, align 8, !dbg !2848
  %98 = icmp ne %struct.tm* %97, null, !dbg !2848
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %99 = load i8*, i8** @time_format, align 8, !dbg !2851
  %100 = load %struct.tm*, %struct.tm** %13, align 8, !dbg !2853
  %101 = call i64 @strftime(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i64 33, i8* %99, %struct.tm* %100) #10, !dbg !2854
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i8** %10, align 8, !dbg !2855
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %102 = load i64, i64* %12, align 8, !dbg !2856
  %103 = call i8* @timetostr(i64 %102, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0)), !dbg !2857
  store i8* %103, i8** %10, align 8, !dbg !2858
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %104 = load i8*, i8** %10, align 8, !dbg !2859
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_line(i32, i8*, i8 signext, i32, i8*, i8*, i8*, i8*, i8*, i8*) #4 !dbg !56 {
  %11 = load i32, i32* @x.31
  %12 = load i32, i32* @y.32
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %10, %originalBBalteredBB
  %19 = alloca i32, align 4
  %20 = alloca i8*, align 8
  %21 = alloca i8, align 1
  %22 = alloca i32, align 4
  %23 = alloca i8*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i8*, align 8
  %29 = alloca i8*, align 8
  %30 = alloca [8 x i8], align 1
  %31 = alloca [13 x i8], align 1
  %32 = alloca i8*, align 8
  %33 = alloca i32, align 4
  %34 = alloca i8*, align 8
  store i32 %0, i32* %19, align 4
  call void @llvm.dbg.declare(metadata i32* %19, metadata !2977, metadata !DIExpression()), !dbg !2978
  store i8* %1, i8** %20, align 8
  call void @llvm.dbg.declare(metadata i8** %20, metadata !2979, metadata !DIExpression()), !dbg !2980
  store i8 %2, i8* %21, align 1
  call void @llvm.dbg.declare(metadata i8* %21, metadata !2981, metadata !DIExpression()), !dbg !2982
  store i32 %3, i32* %22, align 4
  call void @llvm.dbg.declare(metadata i32* %22, metadata !2983, metadata !DIExpression()), !dbg !2984
  store i8* %4, i8** %23, align 8
  call void @llvm.dbg.declare(metadata i8** %23, metadata !2985, metadata !DIExpression()), !dbg !2986
  store i8* %5, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2987, metadata !DIExpression()), !dbg !2988
  store i8* %6, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !2989, metadata !DIExpression()), !dbg !2990
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !2991, metadata !DIExpression()), !dbg !2992
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !2993, metadata !DIExpression()), !dbg !2994
  store i8* %9, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2995, metadata !DIExpression()), !dbg !2996
  call void @llvm.dbg.declare(metadata i8** %29, metadata !2997, metadata !DIExpression()), !dbg !2998
  call void @llvm.dbg.declare(metadata [8 x i8]* %30, metadata !2999, metadata !DIExpression()), !dbg !3001
  call void @llvm.dbg.declare(metadata [13 x i8]* %31, metadata !3002, metadata !DIExpression()), !dbg !3006
  call void @llvm.dbg.declare(metadata i8** %32, metadata !3007, metadata !DIExpression()), !dbg !3008
  call void @llvm.dbg.declare(metadata i32* %33, metadata !3009, metadata !DIExpression()), !dbg !3010
  %35 = load i8, i8* %21, align 1, !dbg !3011
  store i8 %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 1), align 1, !dbg !3012
  %36 = load i8, i8* @include_idle, align 1, !dbg !3013
  %37 = trunc i8 %36 to i1, !dbg !3013
  %38 = load i32, i32* @x.31
  %39 = load i32, i32* @y.32
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %37, label %46, label %105, !dbg !3015

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.31
  %48 = load i32, i32* @y.32
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %46, %originalBB1alteredBB
  %55 = load i8, i8* @short_output, align 1, !dbg !3016
  %56 = trunc i8 %55 to i1, !dbg !3016
  %57 = load i32, i32* @x.31
  %58 = load i32, i32* @y.32
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %56, label %105, label %65, !dbg !3017

65:                                               ; preds = %originalBBpart24
  %66 = load i32, i32* @x.31
  %67 = load i32, i32* @y.32
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %65, %originalBB6alteredBB
  %74 = load i8*, i8** %25, align 8, !dbg !3018
  %75 = call i64 @strlen(i8* %74) #13, !dbg !3019
  %76 = icmp ult i64 %75, 7, !dbg !3020
  %77 = load i32, i32* @x.31
  %78 = load i32, i32* @y.32
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %76, label %85, label %105, !dbg !3021

85:                                               ; preds = %originalBBpart28
  %86 = load i32, i32* @x.31
  %87 = load i32, i32* @y.32
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %85, %originalBB10alteredBB
  %94 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !3022
  %95 = load i8*, i8** %25, align 8, !dbg !3023
  %96 = call i32 (i8*, i8*, ...) @sprintf(i8* %94, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i64 0, i64 0), i8* %95) #10, !dbg !3024
  %97 = load i32, i32* @x.31
  %98 = load i32, i32* @y.32
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %123, !dbg !3024

105:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %106 = load i32, i32* @x.31
  %107 = load i32, i32* @y.32
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %105, %originalBB14alteredBB
  %114 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !3025
  store i8 0, i8* %114, align 1, !dbg !3026
  %115 = load i32, i32* @x.31
  %116 = load i32, i32* @y.32
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %123

123:                                              ; preds = %originalBBpart216, %originalBBpart212
  %124 = load i32, i32* @x.31
  %125 = load i32, i32* @y.32
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %123, %originalBB18alteredBB
  %132 = load i8, i8* @short_output, align 1, !dbg !3027
  %133 = trunc i8 %132 to i1, !dbg !3027
  %134 = load i32, i32* @x.31
  %135 = load i32, i32* @y.32
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %133, label %182, label %142, !dbg !3029

142:                                              ; preds = %originalBBpart220
  %143 = load i32, i32* @x.31
  %144 = load i32, i32* @y.32
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load i8*, i8** %26, align 8, !dbg !3030
  %152 = call i64 @strlen(i8* %151) #13, !dbg !3031
  %153 = icmp ult i64 %152, 12, !dbg !3032
  %154 = load i32, i32* @x.31
  %155 = load i32, i32* @y.32
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %153, label %162, label %182, !dbg !3033

162:                                              ; preds = %originalBBpart224
  %163 = load i32, i32* @x.31
  %164 = load i32, i32* @y.32
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %162, %originalBB26alteredBB
  %171 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !3034
  %172 = load i8*, i8** %26, align 8, !dbg !3035
  %173 = call i32 (i8*, i8*, ...) @sprintf(i8* %171, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i64 0, i64 0), i8* %172) #10, !dbg !3036
  %174 = load i32, i32* @x.31
  %175 = load i32, i32* @y.32
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %200, !dbg !3036

182:                                              ; preds = %originalBBpart224, %originalBBpart220
  %183 = load i32, i32* @x.31
  %184 = load i32, i32* @y.32
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %182, %originalBB30alteredBB
  %191 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !3037
  store i8 0, i8* %191, align 1, !dbg !3038
  %192 = load i32, i32* @x.31
  %193 = load i32, i32* @y.32
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %200

200:                                              ; preds = %originalBBpart232, %originalBBpart228
  %201 = load i32, i32* @x.31
  %202 = load i32, i32* @y.32
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %200, %originalBB34alteredBB
  %209 = load i8, i8* @include_exit, align 1, !dbg !3039
  %210 = trunc i8 %209 to i1, !dbg !3039
  %211 = load i32, i32* @x.31
  %212 = load i32, i32* @y.32
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %210, label %219, label %295, !dbg !3039

219:                                              ; preds = %originalBBpart236
  %220 = load i32, i32* @x.31
  %221 = load i32, i32* @y.32
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %219, %originalBB38alteredBB
  %228 = load i8*, i8** %28, align 8, !dbg !3040
  %229 = call i64 @strlen(i8* %228) #13, !dbg !3040
  %230 = icmp ugt i64 12, %229, !dbg !3040
  %231 = load i32, i32* @x.31
  %232 = load i32, i32* @y.32
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %230, label %239, label %256, !dbg !3040

239:                                              ; preds = %originalBBpart240
  %240 = load i32, i32* @x.31
  %241 = load i32, i32* @y.32
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %239, %originalBB42alteredBB
  %248 = load i32, i32* @x.31
  %249 = load i32, i32* @y.32
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %275, !dbg !3040

256:                                              ; preds = %originalBBpart240
  %257 = load i32, i32* @x.31
  %258 = load i32, i32* @y.32
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %256, %originalBB46alteredBB
  %265 = load i8*, i8** %28, align 8, !dbg !3040
  %266 = call i64 @strlen(i8* %265) #13, !dbg !3040
  %267 = load i32, i32* @x.31
  %268 = load i32, i32* @y.32
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %275, !dbg !3040

275:                                              ; preds = %originalBBpart248, %originalBBpart244
  %276 = phi i64 [ 12, %originalBBpart244 ], [ %266, %originalBBpart248 ], !dbg !3040
  %277 = load i32, i32* @x.31
  %278 = load i32, i32* @y.32
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %275, %originalBB50alteredBB
  %285 = add i64 1, %276, !dbg !3041
  %286 = add i64 %285, 1, !dbg !3042
  %287 = load i32, i32* @x.31
  %288 = load i32, i32* @y.32
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart259, label %originalBB50alteredBB

originalBBpart259:                                ; preds = %originalBB50
  br label %312, !dbg !3039

295:                                              ; preds = %originalBBpart236
  %296 = load i32, i32* @x.31
  %297 = load i32, i32* @y.32
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %295, %originalBB61alteredBB
  %304 = load i32, i32* @x.31
  %305 = load i32, i32* @y.32
  %306 = sub i32 %304, 1
  %307 = mul i32 %304, %306
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %309, %310
  br i1 %311, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br label %312, !dbg !3039

312:                                              ; preds = %originalBBpart263, %originalBBpart259
  %313 = phi i64 [ %286, %originalBBpart259 ], [ 1, %originalBBpart263 ], !dbg !3039
  %314 = load i32, i32* @x.31
  %315 = load i32, i32* @y.32
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %312, %originalBB65alteredBB
  %322 = call noalias i8* @xmalloc(i64 %313), !dbg !3043
  store i8* %322, i8** %32, align 8, !dbg !3044
  %323 = load i8, i8* @include_exit, align 1, !dbg !3045
  %324 = trunc i8 %323 to i1, !dbg !3045
  %325 = load i32, i32* @x.31
  %326 = load i32, i32* @y.32
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br i1 %324, label %333, label %353, !dbg !3047

333:                                              ; preds = %originalBBpart267
  %334 = load i32, i32* @x.31
  %335 = load i32, i32* @y.32
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %333, %originalBB69alteredBB
  %342 = load i8*, i8** %32, align 8, !dbg !3048
  %343 = load i8*, i8** %28, align 8, !dbg !3049
  %344 = call i32 (i8*, i8*, ...) @sprintf(i8* %342, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i64 0, i64 0), i8* %343) #10, !dbg !3050
  %345 = load i32, i32* @x.31
  %346 = load i32, i32* @y.32
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %371, !dbg !3050

353:                                              ; preds = %originalBBpart267
  %354 = load i32, i32* @x.31
  %355 = load i32, i32* @y.32
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %353, %originalBB73alteredBB
  %362 = load i8*, i8** %32, align 8, !dbg !3051
  store i8 0, i8* %362, align 1, !dbg !3052
  %363 = load i32, i32* @x.31
  %364 = load i32, i32* @y.32
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br label %371

371:                                              ; preds = %originalBBpart275, %originalBBpart271
  %372 = load i32, i32* @x.31
  %373 = load i32, i32* @y.32
  %374 = sub i32 %372, 1
  %375 = mul i32 %372, %374
  %376 = urem i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %377, %378
  br i1 %379, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %371, %originalBB77alteredBB
  %380 = load i32, i32* %19, align 4, !dbg !3053
  %381 = load i8*, i8** %20, align 8, !dbg !3054
  %382 = icmp ne i8* %381, null, !dbg !3054
  %383 = load i32, i32* @x.31
  %384 = load i32, i32* @y.32
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br i1 %382, label %391, label %409, !dbg !3054

391:                                              ; preds = %originalBBpart279
  %392 = load i32, i32* @x.31
  %393 = load i32, i32* @y.32
  %394 = sub i32 %392, 1
  %395 = mul i32 %392, %394
  %396 = urem i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %397, %398
  br i1 %399, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %391, %originalBB81alteredBB
  %400 = load i8*, i8** %20, align 8, !dbg !3055
  %401 = load i32, i32* @x.31
  %402 = load i32, i32* @y.32
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %426, !dbg !3054

409:                                              ; preds = %originalBBpart279
  %410 = load i32, i32* @x.31
  %411 = load i32, i32* @y.32
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %409, %originalBB85alteredBB
  %418 = load i32, i32* @x.31
  %419 = load i32, i32* @y.32
  %420 = sub i32 %418, 1
  %421 = mul i32 %418, %420
  %422 = urem i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %423, %424
  br i1 %425, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br label %426, !dbg !3054

426:                                              ; preds = %originalBBpart287, %originalBBpart283
  %427 = phi i8* [ %400, %originalBBpart283 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73, i64 0, i64 0), %originalBBpart287 ], !dbg !3054
  %428 = load i32, i32* @x.31
  %429 = load i32, i32* @y.32
  %430 = sub i32 %428, 1
  %431 = mul i32 %428, %430
  %432 = urem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %433, %434
  br i1 %435, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %426, %originalBB89alteredBB
  %436 = load i8, i8* @include_mesg, align 1, !dbg !3056
  %437 = trunc i8 %436 to i1, !dbg !3056
  %438 = zext i1 %437 to i64, !dbg !3056
  %439 = select i1 %437, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !3056
  %440 = load i32, i32* %22, align 4, !dbg !3057
  %441 = load i8*, i8** %23, align 8, !dbg !3058
  %442 = load i32, i32* @time_format_width, align 4, !dbg !3059
  %443 = load i8*, i8** %24, align 8, !dbg !3060
  %444 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !3061
  %445 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !3062
  %446 = load i8*, i8** %27, align 8, !dbg !3063
  %447 = load i8*, i8** %32, align 8, !dbg !3064
  %448 = call i32 (i8**, i8*, ...) @asprintf(i8** %29, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.72, i64 0, i64 0), i32 %380, i8* %427, i8* %439, i32 %440, i8* %441, i32 %442, i8* %443, i8* %444, i8* %445, i8* %446, i8* %447) #10, !dbg !3065
  store i32 %448, i32* %33, align 4, !dbg !3066
  %449 = load i32, i32* %33, align 4, !dbg !3067
  %450 = load i32, i32* @x.31
  %451 = load i32, i32* @y.32
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %458, !dbg !3069

458:                                              ; preds = %originalBBpart291
  %459 = load i32, i32* @x.31
  %460 = load i32, i32* @y.32
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %458, %originalBB93alteredBB
  %collatzVar = alloca i32
  %467 = load i32, i32* @x.31
  %468 = load i32, i32* @y.32
  %469 = sub i32 %467, 1
  %470 = mul i32 %467, %469
  %471 = urem i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %472, %473
  br i1 %474, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %475

475:                                              ; preds = %originalBBpart295
  %476 = load i32, i32* @x.31
  %477 = load i32, i32* @y.32
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %475, %originalBB97alteredBB
  %484 = load i32, i32* @inVal0
  %485 = icmp sgt i32 %484, 1
  %486 = load i32, i32* @x.31
  %487 = load i32, i32* @y.32
  %488 = sub i32 %486, 1
  %489 = mul i32 %486, %488
  %490 = urem i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %491, %492
  br i1 %493, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br i1 %485, label %511, label %494

494:                                              ; preds = %originalBBpart299
  %495 = load i32, i32* @x.31
  %496 = load i32, i32* @y.32
  %497 = sub i32 %495, 1
  %498 = mul i32 %495, %497
  %499 = urem i32 %498, 2
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %500, %501
  br i1 %502, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %494, %originalBB101alteredBB
  store i32 21, i32* %collatzVar
  %503 = load i32, i32* @x.31
  %504 = load i32, i32* @y.32
  %505 = sub i32 %503, 1
  %506 = mul i32 %503, %505
  %507 = urem i32 %506, 2
  %508 = icmp eq i32 %507, 0
  %509 = icmp slt i32 %504, 10
  %510 = or i1 %508, %509
  br i1 %510, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br label %511

511:                                              ; preds = %originalBBpart2103, %originalBBpart299
  %512 = load i32, i32* @x.31
  %513 = load i32, i32* @y.32
  %514 = sub i32 %512, 1
  %515 = mul i32 %512, %514
  %516 = urem i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = icmp slt i32 %513, 10
  %519 = or i1 %517, %518
  br i1 %519, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %511, %originalBB105alteredBB
  %520 = load i8**, i8*** @inVal1
  %521 = getelementptr inbounds i8*, i8** %520, i64 1
  %522 = load i8*, i8** %521
  %controle = call i32 @controle(i8* %522, i32 -1)
  store i32 %controle, i32* %collatzVar
  %523 = load i32, i32* @x.31
  %524 = load i32, i32* @y.32
  %525 = sub i32 %523, 1
  %526 = mul i32 %523, %525
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %524, 10
  %530 = or i1 %528, %529
  br i1 %530, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br label %531

531:                                              ; preds = %originalBBpart2172, %originalBBpart2153, %originalBBpart2107
  %532 = load i32, i32* @x.31
  %533 = load i32, i32* @y.32
  %534 = sub i32 %532, 1
  %535 = mul i32 %532, %534
  %536 = urem i32 %535, 2
  %537 = icmp eq i32 %536, 0
  %538 = icmp slt i32 %533, 10
  %539 = or i1 %537, %538
  br i1 %539, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %531, %originalBB109alteredBB
  %540 = load i32, i32* %collatzVar
  %541 = icmp sgt i32 %540, 1
  %542 = load i32, i32* @x.31
  %543 = load i32, i32* @y.32
  %544 = sub i32 %542, 1
  %545 = mul i32 %542, %544
  %546 = urem i32 %545, 2
  %547 = icmp eq i32 %546, 0
  %548 = icmp slt i32 %543, 10
  %549 = or i1 %547, %548
  br i1 %549, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br i1 %541, label %550, label %666

550:                                              ; preds = %originalBBpart2111
  %551 = load i32, i32* @x.31
  %552 = load i32, i32* @y.32
  %553 = sub i32 %551, 1
  %554 = mul i32 %551, %553
  %555 = urem i32 %554, 2
  %556 = icmp eq i32 %555, 0
  %557 = icmp slt i32 %552, 10
  %558 = or i1 %556, %557
  br i1 %558, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %550, %originalBB113alteredBB
  %559 = load i32, i32* %collatzVar
  %560 = srem i32 %559, 2
  %561 = icmp eq i32 %560, 0
  %562 = load i32, i32* @x.31
  %563 = load i32, i32* @y.32
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBBpart2117, label %originalBB113alteredBB

originalBBpart2117:                               ; preds = %originalBB113
  br i1 %561, label %570, label %589

570:                                              ; preds = %originalBBpart2117
  %571 = load i32, i32* @x.31
  %572 = load i32, i32* @y.32
  %573 = sub i32 %571, 1
  %574 = mul i32 %571, %573
  %575 = urem i32 %574, 2
  %576 = icmp eq i32 %575, 0
  %577 = icmp slt i32 %572, 10
  %578 = or i1 %576, %577
  br i1 %578, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %570, %originalBB119alteredBB
  %579 = load i32, i32* %collatzVar
  %580 = sdiv i32 %579, 2
  store i32 %580, i32* %collatzVar
  %581 = load i32, i32* @x.31
  %582 = load i32, i32* @y.32
  %583 = sub i32 %581, 1
  %584 = mul i32 %581, %583
  %585 = urem i32 %584, 2
  %586 = icmp eq i32 %585, 0
  %587 = icmp slt i32 %582, 10
  %588 = or i1 %586, %587
  br i1 %588, label %originalBBpart2129, label %originalBB119alteredBB

originalBBpart2129:                               ; preds = %originalBB119
  br label %609

589:                                              ; preds = %originalBBpart2117
  %590 = load i32, i32* @x.31
  %591 = load i32, i32* @y.32
  %592 = sub i32 %590, 1
  %593 = mul i32 %590, %592
  %594 = urem i32 %593, 2
  %595 = icmp eq i32 %594, 0
  %596 = icmp slt i32 %591, 10
  %597 = or i1 %595, %596
  br i1 %597, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %589, %originalBB131alteredBB
  %598 = load i32, i32* %collatzVar
  %599 = mul i32 %598, 3
  %600 = add i32 %599, 1
  store i32 %600, i32* %collatzVar
  %601 = load i32, i32* @x.31
  %602 = load i32, i32* @y.32
  %603 = sub i32 %601, 1
  %604 = mul i32 %601, %603
  %605 = urem i32 %604, 2
  %606 = icmp eq i32 %605, 0
  %607 = icmp slt i32 %602, 10
  %608 = or i1 %606, %607
  br i1 %608, label %originalBBpart2149, label %originalBB131alteredBB

originalBBpart2149:                               ; preds = %originalBB131
  br label %609

609:                                              ; preds = %originalBBpart2149, %originalBBpart2129
  %610 = load i32, i32* @x.31
  %611 = load i32, i32* @y.32
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %609, %originalBB151alteredBB
  %618 = load i32, i32* %collatzVar
  %619 = sub i32 %449, %618
  %620 = icmp sgt i32 %619, -3
  %621 = load i32, i32* @x.31
  %622 = load i32, i32* @y.32
  %623 = sub i32 %621, 1
  %624 = mul i32 %621, %623
  %625 = urem i32 %624, 2
  %626 = icmp eq i32 %625, 0
  %627 = icmp slt i32 %622, 10
  %628 = or i1 %626, %627
  br i1 %628, label %originalBBpart2153, label %originalBB151alteredBB

originalBBpart2153:                               ; preds = %originalBB151
  br i1 %620, label %629, label %531

629:                                              ; preds = %originalBBpart2153
  %630 = load i32, i32* @x.31
  %631 = load i32, i32* @y.32
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %629, %originalBB155alteredBB
  %638 = load i32, i32* %collatzVar
  %639 = add i32 %449, %638
  %640 = icmp slt i32 %639, 1
  %641 = load i32, i32* @x.31
  %642 = load i32, i32* @y.32
  %643 = sub i32 %641, 1
  %644 = mul i32 %641, %643
  %645 = urem i32 %644, 2
  %646 = icmp eq i32 %645, 0
  %647 = icmp slt i32 %642, 10
  %648 = or i1 %646, %647
  br i1 %648, label %originalBBpart2172, label %originalBB155alteredBB

originalBBpart2172:                               ; preds = %originalBB155
  br i1 %640, label %649, label %531

649:                                              ; preds = %originalBBpart2172
  %650 = load i32, i32* @x.31
  %651 = load i32, i32* @y.32
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %649, %originalBB174alteredBB
  call void @xalloc_die() #14, !dbg !3070
  %658 = load i32, i32* @x.31
  %659 = load i32, i32* @y.32
  %660 = sub i32 %658, 1
  %661 = mul i32 %658, %660
  %662 = urem i32 %661, 2
  %663 = icmp eq i32 %662, 0
  %664 = icmp slt i32 %659, 10
  %665 = or i1 %663, %664
  br i1 %665, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  unreachable, !dbg !3070

666:                                              ; preds = %originalBBpart2111
  call void @llvm.dbg.declare(metadata i8** %34, metadata !3071, metadata !DIExpression()), !dbg !3073
  %667 = load i32, i32* @x.31
  %668 = load i32, i32* @y.32
  %669 = sub i32 %667, 1
  %670 = mul i32 %667, %669
  %671 = urem i32 %670, 2
  %672 = icmp eq i32 %671, 0
  %673 = icmp slt i32 %668, 10
  %674 = or i1 %672, %673
  br i1 %674, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %666, %originalBB178alteredBB
  %675 = load i8*, i8** %29, align 8, !dbg !3074
  %676 = load i8*, i8** %29, align 8, !dbg !3075
  %677 = call i64 @strlen(i8* %676) #13, !dbg !3076
  %678 = getelementptr inbounds i8, i8* %675, i64 %677, !dbg !3077
  store i8* %678, i8** %34, align 8, !dbg !3073
  %679 = load i32, i32* @x.31
  %680 = load i32, i32* @y.32
  %681 = sub i32 %679, 1
  %682 = mul i32 %679, %681
  %683 = urem i32 %682, 2
  %684 = icmp eq i32 %683, 0
  %685 = icmp slt i32 %680, 10
  %686 = or i1 %684, %685
  br i1 %686, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br label %687, !dbg !3078

687:                                              ; preds = %originalBBpart2188, %originalBBpart2180
  %688 = load i32, i32* @x.31
  %689 = load i32, i32* @y.32
  %690 = sub i32 %688, 1
  %691 = mul i32 %688, %690
  %692 = urem i32 %691, 2
  %693 = icmp eq i32 %692, 0
  %694 = icmp slt i32 %689, 10
  %695 = or i1 %693, %694
  br i1 %695, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %687, %originalBB182alteredBB
  %696 = load i8*, i8** %34, align 8, !dbg !3079
  %697 = getelementptr inbounds i8, i8* %696, i32 -1, !dbg !3079
  store i8* %697, i8** %34, align 8, !dbg !3079
  %698 = load i8, i8* %697, align 1, !dbg !3080
  %699 = sext i8 %698 to i32, !dbg !3080
  %700 = icmp eq i32 %699, 32, !dbg !3081
  %701 = load i32, i32* @x.31
  %702 = load i32, i32* @y.32
  %703 = sub i32 %701, 1
  %704 = mul i32 %701, %703
  %705 = urem i32 %704, 2
  %706 = icmp eq i32 %705, 0
  %707 = icmp slt i32 %702, 10
  %708 = or i1 %706, %707
  br i1 %708, label %originalBBpart2184, label %originalBB182alteredBB

originalBBpart2184:                               ; preds = %originalBB182
  br i1 %700, label %709, label %726, !dbg !3078

709:                                              ; preds = %originalBBpart2184
  %710 = load i32, i32* @x.31
  %711 = load i32, i32* @y.32
  %712 = sub i32 %710, 1
  %713 = mul i32 %710, %712
  %714 = urem i32 %713, 2
  %715 = icmp eq i32 %714, 0
  %716 = icmp slt i32 %711, 10
  %717 = or i1 %715, %716
  br i1 %717, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %709, %originalBB186alteredBB
  %718 = load i32, i32* @x.31
  %719 = load i32, i32* @y.32
  %720 = sub i32 %718, 1
  %721 = mul i32 %718, %720
  %722 = urem i32 %721, 2
  %723 = icmp eq i32 %722, 0
  %724 = icmp slt i32 %719, 10
  %725 = or i1 %723, %724
  br i1 %725, label %originalBBpart2188, label %originalBB186alteredBB

originalBBpart2188:                               ; preds = %originalBB186
  br label %687, !dbg !3078, !llvm.loop !3082

726:                                              ; preds = %originalBBpart2184
  %727 = load i32, i32* @x.31
  %728 = load i32, i32* @y.32
  %729 = sub i32 %727, 1
  %730 = mul i32 %727, %729
  %731 = urem i32 %730, 2
  %732 = icmp eq i32 %731, 0
  %733 = icmp slt i32 %728, 10
  %734 = or i1 %732, %733
  br i1 %734, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %726, %originalBB190alteredBB
  %735 = load i8*, i8** %34, align 8, !dbg !3084
  %736 = getelementptr inbounds i8, i8* %735, i64 1, !dbg !3085
  store i8 0, i8* %736, align 1, !dbg !3086
  %737 = load i8*, i8** %29, align 8, !dbg !3087
  %738 = call i32 @puts(i8* %737), !dbg !3088
  %739 = load i8*, i8** %29, align 8, !dbg !3089
  call void @free(i8* %739) #10, !dbg !3090
  %740 = load i8*, i8** %32, align 8, !dbg !3091
  call void @free(i8* %740) #10, !dbg !3092
  %741 = load i32, i32* @x.31
  %742 = load i32, i32* @y.32
  %743 = sub i32 %741, 1
  %744 = mul i32 %741, %743
  %745 = urem i32 %744, 2
  %746 = icmp eq i32 %745, 0
  %747 = icmp slt i32 %742, 10
  %748 = or i1 %746, %747
  br i1 %748, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  ret void, !dbg !3093

originalBBalteredBB:                              ; preds = %originalBB, %10
  %749 = alloca i32, align 4
  %750 = alloca i8*, align 8
  %751 = alloca i8, align 1
  %752 = alloca i32, align 4
  %753 = alloca i8*, align 8
  %754 = alloca i8*, align 8
  %755 = alloca i8*, align 8
  %756 = alloca i8*, align 8
  %757 = alloca i8*, align 8
  %758 = alloca i8*, align 8
  %759 = alloca i8*, align 8
  %760 = alloca [8 x i8], align 1
  %761 = alloca [13 x i8], align 1
  %762 = alloca i8*, align 8
  %763 = alloca i32, align 4
  %764 = alloca i8*, align 8
  store i32 %0, i32* %749, align 4
  call void @llvm.dbg.declare(metadata i32* %749, metadata !3094, metadata !DIExpression()), !dbg !2978
  store i8* %1, i8** %750, align 8
  call void @llvm.dbg.declare(metadata i8** %750, metadata !3195, metadata !DIExpression()), !dbg !2980
  store i8 %2, i8* %751, align 1
  call void @llvm.dbg.declare(metadata i8* %751, metadata !3196, metadata !DIExpression()), !dbg !2982
  store i32 %3, i32* %752, align 4
  call void @llvm.dbg.declare(metadata i32* %752, metadata !3197, metadata !DIExpression()), !dbg !2984
  store i8* %4, i8** %753, align 8
  call void @llvm.dbg.declare(metadata i8** %753, metadata !3198, metadata !DIExpression()), !dbg !2986
  store i8* %5, i8** %754, align 8
  call void @llvm.dbg.declare(metadata i8** %754, metadata !3199, metadata !DIExpression()), !dbg !2988
  store i8* %6, i8** %755, align 8
  call void @llvm.dbg.declare(metadata i8** %755, metadata !3200, metadata !DIExpression()), !dbg !2990
  store i8* %7, i8** %756, align 8
  call void @llvm.dbg.declare(metadata i8** %756, metadata !3201, metadata !DIExpression()), !dbg !2992
  store i8* %8, i8** %757, align 8
  call void @llvm.dbg.declare(metadata i8** %757, metadata !3202, metadata !DIExpression()), !dbg !2994
  store i8* %9, i8** %758, align 8
  call void @llvm.dbg.declare(metadata i8** %758, metadata !3203, metadata !DIExpression()), !dbg !2996
  call void @llvm.dbg.declare(metadata i8** %759, metadata !3204, metadata !DIExpression()), !dbg !2998
  call void @llvm.dbg.declare(metadata [8 x i8]* %760, metadata !3205, metadata !DIExpression()), !dbg !3001
  call void @llvm.dbg.declare(metadata [13 x i8]* %761, metadata !3206, metadata !DIExpression()), !dbg !3006
  call void @llvm.dbg.declare(metadata i8** %762, metadata !3207, metadata !DIExpression()), !dbg !3008
  call void @llvm.dbg.declare(metadata i32* %763, metadata !3208, metadata !DIExpression()), !dbg !3010
  %765 = load i8, i8* %751, align 1, !dbg !3011
  store i8 %765, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 1), align 1, !dbg !3012
  %766 = load i8, i8* @include_idle, align 1, !dbg !3013
  %767 = trunc i8 %766 to i1, !dbg !3013
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %46
  %768 = load i8, i8* @short_output, align 1, !dbg !3016
  %769 = trunc i8 %768 to i1, !dbg !3016
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %65
  %770 = load i8*, i8** %25, align 8, !dbg !3018
  %771 = call i64 @strlen(i8* %770) #13, !dbg !3019
  %772 = icmp ult i64 %771, 7, !dbg !3020
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %85
  %773 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !3022
  %774 = load i8*, i8** %25, align 8, !dbg !3023
  %775 = call i32 (i8*, i8*, ...) @sprintf(i8* %773, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i64 0, i64 0), i8* %774) #10, !dbg !3024
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %105
  %776 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !3025
  store i8 0, i8* %776, align 1, !dbg !3026
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %123
  %777 = load i8, i8* @short_output, align 1, !dbg !3027
  %778 = trunc i8 %777 to i1, !dbg !3027
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %779 = load i8*, i8** %26, align 8, !dbg !3030
  %780 = call i64 @strlen(i8* %779) #13, !dbg !3031
  %781 = icmp ult i64 %780, 12, !dbg !3032
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %162
  %782 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !3034
  %783 = load i8*, i8** %26, align 8, !dbg !3035
  %784 = call i32 (i8*, i8*, ...) @sprintf(i8* %782, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i64 0, i64 0), i8* %783) #10, !dbg !3036
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %182
  %785 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !3037
  store i8 0, i8* %785, align 1, !dbg !3038
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %200
  %786 = load i8, i8* @include_exit, align 1, !dbg !3039
  %787 = trunc i8 %786 to i1, !dbg !3039
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %219
  %788 = load i8*, i8** %28, align 8, !dbg !3040
  %789 = call i64 @strlen(i8* %788) #13, !dbg !3040
  %790 = icmp ugt i64 12, %789, !dbg !3040
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %239
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %256
  %791 = load i8*, i8** %28, align 8, !dbg !3040
  %792 = call i64 @strlen(i8* %791) #13, !dbg !3040
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %275
  %_ = sub i64 0, 1
  %gen = add i64 %_, %276
  %_51 = shl i64 1, %276
  %793 = add i64 1, %276, !dbg !3041
  %_52 = sub i64 %793, 1
  %gen53 = mul i64 %_52, 1
  %_54 = sub i64 0, %793
  %gen55 = add i64 %_54, 1
  %_56 = sub i64 %793, 1
  %gen57 = mul i64 %_56, 1
  %794 = add i64 %793, 1, !dbg !3042
  br label %originalBB50

originalBB61alteredBB:                            ; preds = %originalBB61, %295
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %312
  %795 = call noalias i8* @xmalloc(i64 %313), !dbg !3043
  store i8* %795, i8** %32, align 8, !dbg !3044
  %796 = load i8, i8* @include_exit, align 1, !dbg !3045
  %797 = trunc i8 %796 to i1, !dbg !3045
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %333
  %798 = load i8*, i8** %32, align 8, !dbg !3048
  %799 = load i8*, i8** %28, align 8, !dbg !3049
  %800 = call i32 (i8*, i8*, ...) @sprintf(i8* %798, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i64 0, i64 0), i8* %799) #10, !dbg !3050
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %353
  %801 = load i8*, i8** %32, align 8, !dbg !3051
  store i8 0, i8* %801, align 1, !dbg !3052
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %371
  %802 = load i32, i32* %19, align 4, !dbg !3053
  %803 = load i8*, i8** %20, align 8, !dbg !3054
  %804 = icmp ne i8* %803, null, !dbg !3054
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %391
  %805 = load i8*, i8** %20, align 8, !dbg !3055
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %409
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %426
  %806 = load i8, i8* @include_mesg, align 1, !dbg !3056
  %807 = trunc i8 %806 to i1, !dbg !3056
  %808 = zext i1 %807 to i64, !dbg !3056
  %809 = select i1 %807, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !3056
  %810 = load i32, i32* %22, align 4, !dbg !3057
  %811 = load i8*, i8** %23, align 8, !dbg !3058
  %812 = load i32, i32* @time_format_width, align 4, !dbg !3059
  %813 = load i8*, i8** %24, align 8, !dbg !3060
  %814 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !3061
  %815 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !3062
  %816 = load i8*, i8** %27, align 8, !dbg !3063
  %817 = load i8*, i8** %32, align 8, !dbg !3064
  %818 = call i32 (i8**, i8*, ...) @asprintf(i8** %29, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.72, i64 0, i64 0), i32 %380, i8* %427, i8* %809, i32 %810, i8* %811, i32 %812, i8* %813, i8* %814, i8* %815, i8* %816, i8* %817) #10, !dbg !3065
  store i32 %818, i32* %33, align 4, !dbg !3066
  %819 = load i32, i32* %33, align 4, !dbg !3067
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %458
  %collatzVaralteredBB = alloca i32
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %475
  %820 = load i32, i32* @inVal0
  %821 = icmp sgt i32 %820, 1
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %494
  store i32 21, i32* %collatzVar
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %511
  %822 = load i8**, i8*** @inVal1
  %823 = getelementptr inbounds i8*, i8** %822, i64 1
  %824 = load i8*, i8** %823
  %controlealteredBB = call i32 @controle(i8* %824, i32 -1)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %531
  %825 = load i32, i32* %collatzVar
  %826 = icmp sgt i32 %825, 1
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %550
  %827 = load i32, i32* %collatzVar
  %_114 = sub i32 0, %827
  %gen115 = add i32 %_114, 2
  %828 = srem i32 %827, 2
  %829 = icmp eq i32 %828, 0
  br label %originalBB113

originalBB119alteredBB:                           ; preds = %originalBB119, %570
  %830 = load i32, i32* %collatzVar
  %_120 = shl i32 %830, 2
  %_121 = shl i32 %830, 2
  %_122 = shl i32 %830, 2
  %_123 = shl i32 %830, 2
  %_124 = sub i32 %830, 2
  %gen125 = mul i32 %_124, 2
  %_126 = sub i32 %830, 2
  %gen127 = mul i32 %_126, 2
  %831 = sdiv i32 %830, 2
  store i32 %831, i32* %collatzVar
  br label %originalBB119

originalBB131alteredBB:                           ; preds = %originalBB131, %589
  %832 = load i32, i32* %collatzVar
  %_132 = sub i32 0, %832
  %gen133 = add i32 %_132, 3
  %_134 = shl i32 %832, 3
  %_135 = sub i32 0, %832
  %gen136 = add i32 %_135, 3
  %_137 = sub i32 0, %832
  %gen138 = add i32 %_137, 3
  %_139 = sub i32 %832, 3
  %gen140 = mul i32 %_139, 3
  %833 = mul i32 %832, 3
  %_141 = sub i32 %833, 1
  %gen142 = mul i32 %_141, 1
  %_143 = sub i32 %833, 1
  %gen144 = mul i32 %_143, 1
  %_145 = shl i32 %833, 1
  %_146 = shl i32 %833, 1
  %_147 = shl i32 %833, 1
  %834 = add i32 %833, 1
  store i32 %834, i32* %collatzVar
  br label %originalBB131

originalBB151alteredBB:                           ; preds = %originalBB151, %609
  %835 = load i32, i32* %collatzVar
  %836 = sub i32 %449, %835
  %837 = icmp sgt i32 %836, -3
  br label %originalBB151

originalBB155alteredBB:                           ; preds = %originalBB155, %629
  %838 = load i32, i32* %collatzVar
  %_156 = sub i32 0, %449
  %gen157 = add i32 %_156, %838
  %_158 = shl i32 %449, %838
  %_159 = sub i32 0, %449
  %gen160 = add i32 %_159, %838
  %_161 = sub i32 0, %449
  %gen162 = add i32 %_161, %838
  %_163 = sub i32 0, %449
  %gen164 = add i32 %_163, %838
  %_165 = sub i32 %449, %838
  %gen166 = mul i32 %_165, %838
  %_167 = shl i32 %449, %838
  %_168 = shl i32 %449, %838
  %_169 = sub i32 0, %449
  %gen170 = add i32 %_169, %838
  %839 = add i32 %449, %838
  %840 = icmp slt i32 %839, 1
  br label %originalBB155

originalBB174alteredBB:                           ; preds = %originalBB174, %649
  call void @xalloc_die() #14, !dbg !3070
  br label %originalBB174

originalBB178alteredBB:                           ; preds = %originalBB178, %666
  %841 = load i8*, i8** %29, align 8, !dbg !3074
  %842 = load i8*, i8** %29, align 8, !dbg !3075
  %843 = call i64 @strlen(i8* %842) #13, !dbg !3076
  %844 = getelementptr inbounds i8, i8* %841, i64 %843, !dbg !3077
  store i8* %844, i8** %34, align 8, !dbg !3073
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %687
  %845 = load i8*, i8** %34, align 8, !dbg !3079
  %846 = getelementptr inbounds i8, i8* %845, i32 -1, !dbg !3079
  store i8* %846, i8** %34, align 8, !dbg !3079
  %847 = load i8, i8* %846, align 1, !dbg !3080
  %848 = sext i8 %847 to i32, !dbg !3080
  %849 = icmp eq i32 %848, 32, !dbg !3081
  br label %originalBB182

originalBB186alteredBB:                           ; preds = %originalBB186, %709
  br label %originalBB186

originalBB190alteredBB:                           ; preds = %originalBB190, %726
  %850 = load i8*, i8** %34, align 8, !dbg !3084
  %851 = getelementptr inbounds i8, i8* %850, i64 1, !dbg !3085
  store i8 0, i8* %851, align 1, !dbg !3086
  %852 = load i8*, i8** %29, align 8, !dbg !3087
  %853 = call i32 @puts(i8* %852), !dbg !3088
  %854 = load i8*, i8** %29, align 8, !dbg !3089
  call void @free(i8* %854) #10, !dbg !3090
  %855 = load i8*, i8** %32, align 8, !dbg !3091
  call void @free(i8* %855) #10, !dbg !3092
  br label %originalBB190
}

; Function Attrs: nounwind
declare dso_local i32 @asprintf(i8**, i8*, ...) #2

declare dso_local i32 @puts(i8*) #3

; Function Attrs: nounwind
declare dso_local %struct.tm* @localtime(i64*) #2

; Function Attrs: nounwind
declare dso_local i64 @strftime(i8*, i64, i8*, %struct.tm*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @timetostr(i64, i8*) #4 !dbg !3209 {
  %3 = load i32, i32* @x.33
  %4 = load i32, i32* @y.34
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !3212, metadata !DIExpression()), !dbg !3213
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3214, metadata !DIExpression()), !dbg !3215
  %13 = load i64, i64* %11, align 8, !dbg !3216
  %14 = load i8*, i8** %12, align 8, !dbg !3217
  %15 = call i8* @imaxtostr(i64 %13, i8* %14), !dbg !3218
  %16 = load i32, i32* @x.33
  %17 = load i32, i32* @y.34
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !3219

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i64, align 8
  %25 = alloca i8*, align 8
  store i64 %0, i64* %24, align 8
  call void @llvm.dbg.declare(metadata i64* %24, metadata !3220, metadata !DIExpression()), !dbg !3213
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !3322, metadata !DIExpression()), !dbg !3215
  %26 = load i64, i64* %24, align 8, !dbg !3216
  %27 = load i8*, i8** %25, align 8, !dbg !3217
  %28 = call i8* @imaxtostr(i64 %26, i8* %27), !dbg !3218
  br label %originalBB
}

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @strncat(i8*, i8*, i64) #2

; Function Attrs: nounwind
declare dso_local i8* @stpcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @stzncpy(i8* noalias, i8* noalias, i64) #4 !dbg !3323 {
  %4 = load i32, i32* @x.35
  %5 = load i32, i32* @y.36
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3328, metadata !DIExpression()), !dbg !3329
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3330, metadata !DIExpression()), !dbg !3331
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3332, metadata !DIExpression()), !dbg !3333
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3334, metadata !DIExpression()), !dbg !3335
  %16 = load i8*, i8** %13, align 8, !dbg !3336
  %17 = load i64, i64* %14, align 8, !dbg !3337
  %18 = getelementptr inbounds i8, i8* %16, i64 %17, !dbg !3338
  store i8* %18, i8** %15, align 8, !dbg !3335
  %19 = load i32, i32* @x.35
  %20 = load i32, i32* @y.36
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %27, !dbg !3339

27:                                               ; preds = %originalBBpart216, %originalBBpart2
  %28 = load i32, i32* @x.35
  %29 = load i32, i32* @y.36
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i8*, i8** %13, align 8, !dbg !3340
  %37 = load i8*, i8** %15, align 8, !dbg !3341
  %38 = icmp ult i8* %36, %37, !dbg !3342
  %39 = load i32, i32* @x.35
  %40 = load i32, i32* @y.36
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %68, !dbg !3343

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.35
  %49 = load i32, i32* @y.36
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %13, align 8, !dbg !3344
  %57 = load i8, i8* %56, align 1, !dbg !3345
  %58 = sext i8 %57 to i32, !dbg !3345
  %59 = icmp ne i32 %58, 0, !dbg !3343
  %60 = load i32, i32* @x.35
  %61 = load i32, i32* @y.36
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68

68:                                               ; preds = %originalBBpart28, %originalBBpart24
  %69 = phi i1 [ false, %originalBBpart24 ], [ %59, %originalBBpart28 ], !dbg !3346
  %70 = load i32, i32* @x.35
  %71 = load i32, i32* @y.36
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %78 = load i32, i32* @x.35
  %79 = load i32, i32* @y.36
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %69, label %86, label %108, !dbg !3339

86:                                               ; preds = %originalBBpart212
  %87 = load i32, i32* @x.35
  %88 = load i32, i32* @y.36
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %86, %originalBB14alteredBB
  %95 = load i8*, i8** %13, align 8, !dbg !3347
  %96 = getelementptr inbounds i8, i8* %95, i32 1, !dbg !3347
  store i8* %96, i8** %13, align 8, !dbg !3347
  %97 = load i8, i8* %95, align 1, !dbg !3348
  %98 = load i8*, i8** %12, align 8, !dbg !3349
  %99 = getelementptr inbounds i8, i8* %98, i32 1, !dbg !3349
  store i8* %99, i8** %12, align 8, !dbg !3349
  store i8 %97, i8* %98, align 1, !dbg !3350
  %100 = load i32, i32* @x.35
  %101 = load i32, i32* @y.36
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %27, !dbg !3339, !llvm.loop !3351

108:                                              ; preds = %originalBBpart212
  %109 = load i32, i32* @x.35
  %110 = load i32, i32* @y.36
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %108, %originalBB18alteredBB
  %117 = load i8*, i8** %12, align 8, !dbg !3352
  store i8 0, i8* %117, align 1, !dbg !3353
  %118 = load i8*, i8** %12, align 8, !dbg !3354
  %119 = load i32, i32* @x.35
  %120 = load i32, i32* @y.36
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i8* %118, !dbg !3355

originalBBalteredBB:                              ; preds = %originalBB, %3
  %127 = alloca i8*, align 8
  %128 = alloca i8*, align 8
  %129 = alloca i64, align 8
  %130 = alloca i8*, align 8
  store i8* %0, i8** %127, align 8
  call void @llvm.dbg.declare(metadata i8** %127, metadata !3356, metadata !DIExpression()), !dbg !3329
  store i8* %1, i8** %128, align 8
  call void @llvm.dbg.declare(metadata i8** %128, metadata !3458, metadata !DIExpression()), !dbg !3331
  store i64 %2, i64* %129, align 8
  call void @llvm.dbg.declare(metadata i64* %129, metadata !3459, metadata !DIExpression()), !dbg !3333
  call void @llvm.dbg.declare(metadata i8** %130, metadata !3460, metadata !DIExpression()), !dbg !3335
  %131 = load i8*, i8** %128, align 8, !dbg !3336
  %132 = load i64, i64* %129, align 8, !dbg !3337
  %133 = getelementptr inbounds i8, i8* %131, i64 %132, !dbg !3338
  store i8* %133, i8** %130, align 8, !dbg !3335
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %134 = load i8*, i8** %13, align 8, !dbg !3340
  %135 = load i8*, i8** %15, align 8, !dbg !3341
  %136 = icmp ult i8* %134, %135, !dbg !3342
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %137 = load i8*, i8** %13, align 8, !dbg !3344
  %138 = load i8, i8* %137, align 1, !dbg !3345
  %139 = sext i8 %138 to i32, !dbg !3345
  %140 = icmp ne i32 %139, 0, !dbg !3343
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %86
  %141 = load i8*, i8** %13, align 8, !dbg !3347
  %142 = getelementptr inbounds i8, i8* %141, i32 1, !dbg !3347
  store i8* %142, i8** %13, align 8, !dbg !3347
  %143 = load i8, i8* %141, align 1, !dbg !3348
  %144 = load i8*, i8** %12, align 8, !dbg !3349
  %145 = getelementptr inbounds i8, i8* %144, i32 1, !dbg !3349
  store i8* %145, i8** %12, align 8, !dbg !3349
  store i8 %143, i8* %144, align 1, !dbg !3350
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %108
  %146 = load i8*, i8** %12, align 8, !dbg !3352
  store i8 0, i8* %146, align 1, !dbg !3353
  %147 = load i8*, i8** %12, align 8, !dbg !3354
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_tty_writable(%struct.stat*) #4 !dbg !3461 {
  %2 = load i32, i32* @x.37
  %3 = load i32, i32* @y.38
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %10, metadata !3466, metadata !DIExpression()), !dbg !3467
  %11 = load %struct.stat*, %struct.stat** %10, align 8, !dbg !3468
  %12 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 3, !dbg !3469
  %13 = load i32, i32* %12, align 8, !dbg !3469
  %14 = and i32 %13, 16, !dbg !3470
  %15 = icmp ne i32 %14, 0, !dbg !3468
  %16 = load i32, i32* @x.37
  %17 = load i32, i32* @y.38
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i1 %15, !dbg !3471

originalBBalteredBB:                              ; preds = %originalBB, %1
  %24 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %24, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %24, metadata !3472, metadata !DIExpression()), !dbg !3467
  %25 = load %struct.stat*, %struct.stat** %24, align 8, !dbg !3468
  %26 = getelementptr inbounds %struct.stat, %struct.stat* %25, i32 0, i32 3, !dbg !3469
  %27 = load i32, i32* %26, align 8, !dbg !3469
  %_ = sub i32 %27, 16
  %gen = mul i32 %_, 16
  %_1 = sub i32 0, %27
  %gen2 = add i32 %_1, 16
  %_3 = shl i32 %27, 16
  %_4 = sub i32 %27, 16
  %gen5 = mul i32 %_4, 16
  %_6 = shl i32 %27, 16
  %_7 = sub i32 %27, 16
  %gen8 = mul i32 %_7, 16
  %28 = and i32 %27, 16, !dbg !3470
  %29 = icmp ne i32 %28, 0, !dbg !3468
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @idle_string(i64, i64) #4 !dbg !115 {
  %3 = load i32, i32* @x.39
  %4 = load i32, i32* @y.40
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  store i64 %0, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !3599, metadata !DIExpression()), !dbg !3600
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !3601, metadata !DIExpression()), !dbg !3602
  %15 = load i64, i64* @idle_string.now, align 8, !dbg !3603
  %16 = icmp eq i64 %15, -9223372036854775808, !dbg !3605
  %17 = load i32, i32* @x.39
  %18 = load i32, i32* @y.40
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %43, !dbg !3606

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.39
  %27 = load i32, i32* @y.40
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = call i64 @time(i64* @idle_string.now) #10, !dbg !3607
  %35 = load i32, i32* @x.39
  %36 = load i32, i32* @y.40
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !3607

43:                                               ; preds = %originalBBpart24, %originalBBpart2
  %44 = load i32, i32* @x.39
  %45 = load i32, i32* @y.40
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i64, i64* %13, align 8, !dbg !3608
  %53 = load i64, i64* %12, align 8, !dbg !3610
  %54 = icmp slt i64 %52, %53, !dbg !3611
  %55 = load i32, i32* @x.39
  %56 = load i32, i32* @y.40
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %221, !dbg !3612

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.39
  %65 = load i32, i32* @y.40
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i64, i64* @idle_string.now, align 8, !dbg !3613
  %73 = sub nsw i64 %72, 86400, !dbg !3614
  %74 = load i64, i64* %12, align 8, !dbg !3615
  %75 = icmp slt i64 %73, %74, !dbg !3616
  %76 = load i32, i32* @x.39
  %77 = load i32, i32* @y.40
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart223, label %originalBB10alteredBB

originalBBpart223:                                ; preds = %originalBB10
  br i1 %75, label %84, label %221, !dbg !3617

84:                                               ; preds = %originalBBpart223
  %85 = load i32, i32* @x.39
  %86 = load i32, i32* @y.40
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %84, %originalBB25alteredBB
  %93 = load i64, i64* %12, align 8, !dbg !3618
  %94 = load i64, i64* @idle_string.now, align 8, !dbg !3619
  %95 = icmp sle i64 %93, %94, !dbg !3620
  %96 = load i32, i32* @x.39
  %97 = load i32, i32* @y.40
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %95, label %104, label %221, !dbg !3621

104:                                              ; preds = %originalBBpart227
  call void @llvm.dbg.declare(metadata i32* %14, metadata !3622, metadata !DIExpression()), !dbg !3624
  %105 = load i32, i32* @x.39
  %106 = load i32, i32* @y.40
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %104, %originalBB29alteredBB
  %113 = load i64, i64* @idle_string.now, align 8, !dbg !3625
  %114 = load i64, i64* %12, align 8, !dbg !3626
  %115 = sub nsw i64 %113, %114, !dbg !3627
  %116 = trunc i64 %115 to i32, !dbg !3625
  store i32 %116, i32* %14, align 4, !dbg !3624
  %117 = load i32, i32* %14, align 4, !dbg !3628
  %118 = icmp slt i32 %117, 60, !dbg !3630
  %119 = load i32, i32* @x.39
  %120 = load i32, i32* @y.40
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %118, label %127, label %144, !dbg !3631

127:                                              ; preds = %originalBBpart231
  %128 = load i32, i32* @x.39
  %129 = load i32, i32* @y.40
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %127, %originalBB33alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i64 0, i64 0), i8** %11, align 8, !dbg !3632
  %136 = load i32, i32* @x.39
  %137 = load i32, i32* @y.40
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %239, !dbg !3632

144:                                              ; preds = %originalBBpart231
  %145 = load i32, i32* @x.39
  %146 = load i32, i32* @y.40
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %144, %originalBB37alteredBB
  %153 = load i32, i32* %14, align 4, !dbg !3633
  %154 = sdiv i32 %153, 3600, !dbg !3633
  %155 = icmp slt i32 %154, 24, !dbg !3633
  %156 = load i32, i32* @x.39
  %157 = load i32, i32* @y.40
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart242, label %originalBB37alteredBB

originalBBpart242:                                ; preds = %originalBB37
  br i1 %155, label %164, label %181, !dbg !3637

164:                                              ; preds = %originalBBpart242
  %165 = load i32, i32* @x.39
  %166 = load i32, i32* @y.40
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %164, %originalBB44alteredBB
  %173 = load i32, i32* @x.39
  %174 = load i32, i32* @y.40
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  br label %198, !dbg !3637

181:                                              ; preds = %originalBBpart242
  %182 = load i32, i32* @x.39
  %183 = load i32, i32* @y.40
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %181, %originalBB48alteredBB
  call void @__assert_fail(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81, i64 0, i64 0), i32 205, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.idle_string, i64 0, i64 0)) #12, !dbg !3633
  %190 = load i32, i32* @x.39
  %191 = load i32, i32* @y.40
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  unreachable, !dbg !3633

198:                                              ; preds = %originalBBpart246
  %199 = load i32, i32* @x.39
  %200 = load i32, i32* @y.40
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %198, %originalBB52alteredBB
  %207 = load i32, i32* %14, align 4, !dbg !3638
  %208 = sdiv i32 %207, 3600, !dbg !3639
  %209 = load i32, i32* %14, align 4, !dbg !3640
  %210 = srem i32 %209, 3600, !dbg !3641
  %211 = sdiv i32 %210, 60, !dbg !3642
  %212 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i64 0, i64 0), i32 %208, i32 %211) #10, !dbg !3643
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8** %11, align 8, !dbg !3644
  %213 = load i32, i32* @x.39
  %214 = load i32, i32* @y.40
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBBpart269, label %originalBB52alteredBB

originalBBpart269:                                ; preds = %originalBB52
  br label %239, !dbg !3644

221:                                              ; preds = %originalBBpart227, %originalBBpart223, %originalBBpart28
  %222 = load i32, i32* @x.39
  %223 = load i32, i32* @y.40
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %221, %originalBB71alteredBB
  %230 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83, i64 0, i64 0)) #10, !dbg !3645
  store i8* %230, i8** %11, align 8, !dbg !3646
  %231 = load i32, i32* @x.39
  %232 = load i32, i32* @y.40
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br label %239, !dbg !3646

239:                                              ; preds = %originalBBpart273, %originalBBpart269, %originalBBpart235
  %240 = load i32, i32* @x.39
  %241 = load i32, i32* @y.40
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %239, %originalBB75alteredBB
  %248 = load i8*, i8** %11, align 8, !dbg !3647
  %249 = load i32, i32* @x.39
  %250 = load i32, i32* @y.40
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  ret i8* %248, !dbg !3647

originalBBalteredBB:                              ; preds = %originalBB, %2
  %257 = alloca i8*, align 8
  %258 = alloca i64, align 8
  %259 = alloca i64, align 8
  %260 = alloca i32, align 4
  store i64 %0, i64* %258, align 8
  call void @llvm.dbg.declare(metadata i64* %258, metadata !3648, metadata !DIExpression()), !dbg !3600
  store i64 %1, i64* %259, align 8
  call void @llvm.dbg.declare(metadata i64* %259, metadata !3749, metadata !DIExpression()), !dbg !3602
  %261 = load i64, i64* @idle_string.now, align 8, !dbg !3603
  %262 = icmp eq i64 %261, -9223372036854775808, !dbg !3605
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  %263 = call i64 @time(i64* @idle_string.now) #10, !dbg !3607
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %264 = load i64, i64* %13, align 8, !dbg !3608
  %265 = load i64, i64* %12, align 8, !dbg !3610
  %266 = icmp slt i64 %264, %265, !dbg !3611
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %267 = load i64, i64* @idle_string.now, align 8, !dbg !3613
  %_ = shl i64 %267, 86400
  %_11 = sub i64 %267, 86400
  %gen = mul i64 %_11, 86400
  %_12 = sub i64 %267, 86400
  %gen13 = mul i64 %_12, 86400
  %_14 = sub i64 %267, 86400
  %gen15 = mul i64 %_14, 86400
  %_16 = sub i64 %267, 86400
  %gen17 = mul i64 %_16, 86400
  %_18 = sub i64 %267, 86400
  %gen19 = mul i64 %_18, 86400
  %_20 = sub i64 0, %267
  %gen21 = add i64 %_20, 86400
  %268 = sub nsw i64 %267, 86400, !dbg !3614
  %269 = load i64, i64* %12, align 8, !dbg !3615
  %270 = icmp slt i64 %268, %269, !dbg !3616
  br label %originalBB10

originalBB25alteredBB:                            ; preds = %originalBB25, %84
  %271 = load i64, i64* %12, align 8, !dbg !3618
  %272 = load i64, i64* @idle_string.now, align 8, !dbg !3619
  %273 = icmp sle i64 %271, %272, !dbg !3620
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %104
  %274 = load i64, i64* @idle_string.now, align 8, !dbg !3625
  %275 = load i64, i64* %12, align 8, !dbg !3626
  %276 = sub nsw i64 %274, %275, !dbg !3627
  %277 = trunc i64 %276 to i32, !dbg !3625
  store i32 %277, i32* %14, align 4, !dbg !3624
  %278 = load i32, i32* %14, align 4, !dbg !3628
  %279 = icmp slt i32 %278, 60, !dbg !3630
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %127
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i64 0, i64 0), i8** %11, align 8, !dbg !3632
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %144
  %280 = load i32, i32* %14, align 4, !dbg !3633
  %_38 = shl i32 %280, 3600
  %_39 = sub i32 %280, 3600
  %gen40 = mul i32 %_39, 3600
  %281 = sdiv i32 %280, 3600, !dbg !3633
  %282 = icmp slt i32 %281, 24, !dbg !3633
  br label %originalBB37

originalBB44alteredBB:                            ; preds = %originalBB44, %164
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %181
  call void @__assert_fail(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81, i64 0, i64 0), i32 205, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.idle_string, i64 0, i64 0)) #12, !dbg !3633
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %198
  %283 = load i32, i32* %14, align 4, !dbg !3638
  %284 = sdiv i32 %283, 3600, !dbg !3639
  %285 = load i32, i32* %14, align 4, !dbg !3640
  %_53 = shl i32 %285, 3600
  %_54 = sub i32 0, %285
  %gen55 = add i32 %_54, 3600
  %_56 = sub i32 0, %285
  %gen57 = add i32 %_56, 3600
  %_58 = shl i32 %285, 3600
  %_59 = shl i32 %285, 3600
  %_60 = shl i32 %285, 3600
  %_61 = sub i32 %285, 3600
  %gen62 = mul i32 %_61, 3600
  %286 = srem i32 %285, 3600, !dbg !3641
  %_63 = shl i32 %286, 60
  %_64 = sub i32 %286, 60
  %gen65 = mul i32 %_64, 60
  %_66 = sub i32 0, %286
  %gen67 = add i32 %_66, 60
  %287 = sdiv i32 %286, 60, !dbg !3642
  %288 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i64 0, i64 0), i32 %284, i32 %287) #10, !dbg !3643
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8** %11, align 8, !dbg !3644
  br label %originalBB52

originalBB71alteredBB:                            ; preds = %originalBB71, %221
  %289 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83, i64 0, i64 0)) #10, !dbg !3645
  store i8* %289, i8** %11, align 8, !dbg !3646
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %239
  %290 = load i8*, i8** %11, align 8, !dbg !3647
  br label %originalBB75
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #7

; Function Attrs: nounwind
declare dso_local i64 @time(i64*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @c_isprint(i32) #4 !dbg !3750 {
  %2 = load i32, i32* @x.41
  %3 = load i32, i32* @y.42
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3754, metadata !DIExpression()), !dbg !3755
  %12 = load i32, i32* %11, align 4, !dbg !3756
  %13 = load i32, i32* @x.41
  %14 = load i32, i32* @y.42
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %38 [
    i32 32, label %21
    i32 48, label %21
    i32 49, label %21
    i32 50, label %21
    i32 51, label %21
    i32 52, label %21
    i32 53, label %21
    i32 54, label %21
    i32 55, label %21
    i32 56, label %21
    i32 57, label %21
    i32 97, label %21
    i32 98, label %21
    i32 99, label %21
    i32 100, label %21
    i32 101, label %21
    i32 102, label %21
    i32 103, label %21
    i32 104, label %21
    i32 105, label %21
    i32 106, label %21
    i32 107, label %21
    i32 108, label %21
    i32 109, label %21
    i32 110, label %21
    i32 111, label %21
    i32 112, label %21
    i32 113, label %21
    i32 114, label %21
    i32 115, label %21
    i32 116, label %21
    i32 117, label %21
    i32 118, label %21
    i32 119, label %21
    i32 120, label %21
    i32 121, label %21
    i32 122, label %21
    i32 33, label %21
    i32 34, label %21
    i32 35, label %21
    i32 36, label %21
    i32 37, label %21
    i32 38, label %21
    i32 39, label %21
    i32 40, label %21
    i32 41, label %21
    i32 42, label %21
    i32 43, label %21
    i32 44, label %21
    i32 45, label %21
    i32 46, label %21
    i32 47, label %21
    i32 58, label %21
    i32 59, label %21
    i32 60, label %21
    i32 61, label %21
    i32 62, label %21
    i32 63, label %21
    i32 64, label %21
    i32 91, label %21
    i32 92, label %21
    i32 93, label %21
    i32 94, label %21
    i32 95, label %21
    i32 96, label %21
    i32 123, label %21
    i32 124, label %21
    i32 125, label %21
    i32 126, label %21
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3757

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.41
  %23 = load i32, i32* @y.42
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i1 true, i1* %10, align 1, !dbg !3758
  %30 = load i32, i32* @x.41
  %31 = load i32, i32* @y.42
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %55, !dbg !3758

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x.41
  %40 = load i32, i32* @y.42
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  store i1 false, i1* %10, align 1, !dbg !3760
  %47 = load i32, i32* @x.41
  %48 = load i32, i32* @y.42
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %55, !dbg !3760

55:                                               ; preds = %originalBBpart28, %originalBBpart24
  %56 = load i32, i32* @x.41
  %57 = load i32, i32* @y.42
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %55, %originalBB10alteredBB
  %64 = load i1, i1* %10, align 1, !dbg !3761
  %65 = load i32, i32* @x.41
  %66 = load i32, i32* @y.42
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i1 %64, !dbg !3761

originalBBalteredBB:                              ; preds = %originalBB, %1
  %73 = alloca i1, align 1
  %74 = alloca i32, align 4
  store i32 %0, i32* %74, align 4
  call void @llvm.dbg.declare(metadata i32* %74, metadata !3762, metadata !DIExpression()), !dbg !3755
  %75 = load i32, i32* %74, align 4, !dbg !3756
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i1 true, i1* %10, align 1, !dbg !3758
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  store i1 false, i1* %10, align 1, !dbg !3760
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %55
  %76 = load i1, i1* %10, align 1, !dbg !3761
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !3765 {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3768, metadata !DIExpression()), !dbg !3769
  %12 = load i32, i32* %11, align 4, !dbg !3770
  %13 = load i32, i32* @x.43
  %14 = load i32, i32* @y.44
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3771

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.43
  %23 = load i32, i32* @y.44
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !3772
  %31 = sub nsw i32 %30, 65, !dbg !3774
  %32 = add nsw i32 %31, 97, !dbg !3775
  store i32 %32, i32* %10, align 4, !dbg !3776
  %33 = load i32, i32* @x.43
  %34 = load i32, i32* @y.44
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart217, label %originalBB1alteredBB

originalBBpart217:                                ; preds = %originalBB1
  br label %59, !dbg !3776

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.43
  %43 = load i32, i32* @y.44
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %41, %originalBB19alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !3777
  store i32 %50, i32* %10, align 4, !dbg !3778
  %51 = load i32, i32* @x.43
  %52 = load i32, i32* @y.44
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %59, !dbg !3778

59:                                               ; preds = %originalBBpart221, %originalBBpart217
  %60 = load i32, i32* @x.43
  %61 = load i32, i32* @y.44
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %59, %originalBB23alteredBB
  %68 = load i32, i32* %10, align 4, !dbg !3779
  %69 = load i32, i32* @x.43
  %70 = load i32, i32* @y.44
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  ret i32 %68, !dbg !3779

originalBBalteredBB:                              ; preds = %originalBB, %1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  store i32 %0, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !3780, metadata !DIExpression()), !dbg !3769
  %79 = load i32, i32* %78, align 4, !dbg !3770
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = load i32, i32* %11, align 4, !dbg !3772
  %_ = sub i32 %80, 65
  %gen = mul i32 %_, 65
  %_2 = shl i32 %80, 65
  %_3 = shl i32 %80, 65
  %81 = sub nsw i32 %80, 65, !dbg !3774
  %_4 = sub i32 0, %81
  %gen5 = add i32 %_4, 97
  %_6 = sub i32 0, %81
  %gen7 = add i32 %_6, 97
  %_8 = sub i32 0, %81
  %gen9 = add i32 %_8, 97
  %_10 = sub i32 0, %81
  %gen11 = add i32 %_10, 97
  %_12 = sub i32 %81, 97
  %gen13 = mul i32 %_12, 97
  %_14 = sub i32 0, %81
  %gen15 = add i32 %_14, 97
  %82 = add nsw i32 %81, 97, !dbg !3775
  store i32 %82, i32* %10, align 4, !dbg !3776
  br label %originalBB1

originalBB19alteredBB:                            ; preds = %originalBB19, %41
  %83 = load i32, i32* %11, align 4, !dbg !3777
  store i32 %83, i32* %10, align 4, !dbg !3778
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %59
  %84 = load i32, i32* %10, align 4, !dbg !3779
  br label %originalBB23
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @canon_host(i8*) #4 !dbg !3783 {
  %2 = load i32, i32* @x.45
  %3 = load i32, i32* @y.46
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !3786, metadata !DIExpression()), !dbg !3787
  %11 = load i8*, i8** %10, align 8, !dbg !3788
  %12 = call noalias i8* @canon_host_r(i8* %11, i32* @last_cherror), !dbg !3789
  %13 = load i32, i32* @x.45
  %14 = load i32, i32* @y.46
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3790

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !3791, metadata !DIExpression()), !dbg !3787
  %22 = load i8*, i8** %21, align 8, !dbg !3788
  %23 = call noalias i8* @canon_host_r(i8* %22, i32* @last_cherror), !dbg !3789
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @canon_host_r(i8*, i32*) #4 !dbg !165 {
  %3 = load i32, i32* @x.47
  %4 = load i32, i32* @y.48
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca %struct.addrinfo*, align 8
  %15 = alloca i32, align 4
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3816, metadata !DIExpression()), !dbg !3817
  store i32* %1, i32** %12, align 8
  call void @llvm.dbg.declare(metadata i32** %12, metadata !3818, metadata !DIExpression()), !dbg !3819
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3820, metadata !DIExpression()), !dbg !3821
  store i8* null, i8** %13, align 8, !dbg !3821
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %14, metadata !3822, metadata !DIExpression()), !dbg !3823
  store %struct.addrinfo* null, %struct.addrinfo** %14, align 8, !dbg !3823
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3824, metadata !DIExpression()), !dbg !3825
  store i32 2, i32* getelementptr inbounds (%struct.addrinfo, %struct.addrinfo* @canon_host_r.hints, i32 0, i32 0), align 8, !dbg !3826
  %16 = load i8*, i8** %11, align 8, !dbg !3827
  %17 = call i32 @getaddrinfo(i8* %16, i8* null, %struct.addrinfo* @canon_host_r.hints, %struct.addrinfo** %14), !dbg !3828
  store i32 %17, i32* %15, align 4, !dbg !3829
  %18 = load i32, i32* %15, align 4, !dbg !3830
  %19 = icmp ne i32 %18, 0, !dbg !3830
  %20 = load i32, i32* @x.47
  %21 = load i32, i32* @y.48
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %19, label %163, label %28, !dbg !3832

28:                                               ; preds = %originalBBpart2
  %29 = load i32, i32* @x.47
  %30 = load i32, i32* @y.48
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3833
  %38 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %37, i32 0, i32 6, !dbg !3835
  %39 = load i8*, i8** %38, align 8, !dbg !3835
  %40 = icmp ne i8* %39, null, !dbg !3833
  %41 = load i32, i32* @x.47
  %42 = load i32, i32* @y.48
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %40, label %49, label %69, !dbg !3833

49:                                               ; preds = %originalBBpart24
  %50 = load i32, i32* @x.47
  %51 = load i32, i32* @y.48
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3836
  %59 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %58, i32 0, i32 6, !dbg !3837
  %60 = load i8*, i8** %59, align 8, !dbg !3837
  %61 = load i32, i32* @x.47
  %62 = load i32, i32* @y.48
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %87, !dbg !3833

69:                                               ; preds = %originalBBpart24
  %70 = load i32, i32* @x.47
  %71 = load i32, i32* @y.48
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = load i8*, i8** %11, align 8, !dbg !3838
  %79 = load i32, i32* @x.47
  %80 = load i32, i32* @y.48
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %87, !dbg !3833

87:                                               ; preds = %originalBBpart212, %originalBBpart28
  %88 = phi i8* [ %60, %originalBBpart28 ], [ %78, %originalBBpart212 ], !dbg !3833
  %89 = load i32, i32* @x.47
  %90 = load i32, i32* @y.48
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %97 = call noalias i8* @strdup(i8* %88) #10, !dbg !3839
  store i8* %97, i8** %13, align 8, !dbg !3840
  %98 = load i8*, i8** %13, align 8, !dbg !3841
  %99 = icmp ne i8* %98, null, !dbg !3841
  %100 = load i32, i32* @x.47
  %101 = load i32, i32* @y.48
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %99, label %145, label %108, !dbg !3843

108:                                              ; preds = %originalBBpart216
  %109 = load i32, i32* @x.47
  %110 = load i32, i32* @y.48
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %108, %originalBB18alteredBB
  %117 = load i32*, i32** %12, align 8, !dbg !3844
  %118 = icmp ne i32* %117, null, !dbg !3844
  %119 = load i32, i32* @x.47
  %120 = load i32, i32* @y.48
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %118, label %127, label %145, !dbg !3845

127:                                              ; preds = %originalBBpart220
  %128 = load i32, i32* @x.47
  %129 = load i32, i32* @y.48
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %127, %originalBB22alteredBB
  %136 = load i32*, i32** %12, align 8, !dbg !3846
  store i32 -10, i32* %136, align 4, !dbg !3847
  %137 = load i32, i32* @x.47
  %138 = load i32, i32* @y.48
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %145, !dbg !3848

145:                                              ; preds = %originalBBpart224, %originalBBpart220, %originalBBpart216
  %146 = load i32, i32* @x.47
  %147 = load i32, i32* @y.48
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %145, %originalBB26alteredBB
  %154 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3849
  call void @freeaddrinfo(%struct.addrinfo* %154) #10, !dbg !3850
  %155 = load i32, i32* @x.47
  %156 = load i32, i32* @y.48
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %218, !dbg !3851

163:                                              ; preds = %originalBBpart2
  %164 = load i32, i32* @x.47
  %165 = load i32, i32* @y.48
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %163, %originalBB30alteredBB
  %172 = load i32*, i32** %12, align 8, !dbg !3852
  %173 = icmp ne i32* %172, null, !dbg !3852
  %174 = load i32, i32* @x.47
  %175 = load i32, i32* @y.48
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %173, label %182, label %201, !dbg !3854

182:                                              ; preds = %originalBBpart232
  %183 = load i32, i32* @x.47
  %184 = load i32, i32* @y.48
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %182, %originalBB34alteredBB
  %191 = load i32, i32* %15, align 4, !dbg !3855
  %192 = load i32*, i32** %12, align 8, !dbg !3856
  store i32 %191, i32* %192, align 4, !dbg !3857
  %193 = load i32, i32* @x.47
  %194 = load i32, i32* @y.48
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %201, !dbg !3858

201:                                              ; preds = %originalBBpart236, %originalBBpart232
  %202 = load i32, i32* @x.47
  %203 = load i32, i32* @y.48
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %201, %originalBB38alteredBB
  %210 = load i32, i32* @x.47
  %211 = load i32, i32* @y.48
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %218

218:                                              ; preds = %originalBBpart240, %originalBBpart228
  %219 = load i32, i32* @x.47
  %220 = load i32, i32* @y.48
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %218, %originalBB42alteredBB
  %227 = load i8*, i8** %13, align 8, !dbg !3859
  %228 = load i32, i32* @x.47
  %229 = load i32, i32* @y.48
  %230 = sub i32 %228, 1
  %231 = mul i32 %228, %230
  %232 = urem i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %233, %234
  br i1 %235, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  ret i8* %227, !dbg !3860

originalBBalteredBB:                              ; preds = %originalBB, %2
  %236 = alloca i8*, align 8
  %237 = alloca i32*, align 8
  %238 = alloca i8*, align 8
  %239 = alloca %struct.addrinfo*, align 8
  %240 = alloca i32, align 4
  store i8* %0, i8** %236, align 8
  call void @llvm.dbg.declare(metadata i8** %236, metadata !3861, metadata !DIExpression()), !dbg !3817
  store i32* %1, i32** %237, align 8
  call void @llvm.dbg.declare(metadata i32** %237, metadata !3885, metadata !DIExpression()), !dbg !3819
  call void @llvm.dbg.declare(metadata i8** %238, metadata !3886, metadata !DIExpression()), !dbg !3821
  store i8* null, i8** %238, align 8, !dbg !3821
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %239, metadata !3887, metadata !DIExpression()), !dbg !3823
  store %struct.addrinfo* null, %struct.addrinfo** %239, align 8, !dbg !3823
  call void @llvm.dbg.declare(metadata i32* %240, metadata !3888, metadata !DIExpression()), !dbg !3825
  store i32 2, i32* getelementptr inbounds (%struct.addrinfo, %struct.addrinfo* @canon_host_r.hints, i32 0, i32 0), align 8, !dbg !3826
  %241 = load i8*, i8** %236, align 8, !dbg !3827
  %242 = call i32 @getaddrinfo(i8* %241, i8* null, %struct.addrinfo* @canon_host_r.hints, %struct.addrinfo** %239), !dbg !3828
  store i32 %242, i32* %240, align 4, !dbg !3829
  %243 = load i32, i32* %240, align 4, !dbg !3830
  %244 = icmp ne i32 %243, 0, !dbg !3830
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %245 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3833
  %246 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %245, i32 0, i32 6, !dbg !3835
  %247 = load i8*, i8** %246, align 8, !dbg !3835
  %248 = icmp ne i8* %247, null, !dbg !3833
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %249 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3836
  %250 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %249, i32 0, i32 6, !dbg !3837
  %251 = load i8*, i8** %250, align 8, !dbg !3837
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %252 = load i8*, i8** %11, align 8, !dbg !3838
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %253 = call noalias i8* @strdup(i8* %88) #10, !dbg !3839
  store i8* %253, i8** %13, align 8, !dbg !3840
  %254 = load i8*, i8** %13, align 8, !dbg !3841
  %255 = icmp ne i8* %254, null, !dbg !3841
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %108
  %256 = load i32*, i32** %12, align 8, !dbg !3844
  %257 = icmp ne i32* %256, null, !dbg !3844
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %127
  %258 = load i32*, i32** %12, align 8, !dbg !3846
  store i32 -10, i32* %258, align 4, !dbg !3847
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %145
  %259 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3849
  call void @freeaddrinfo(%struct.addrinfo* %259) #10, !dbg !3850
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %163
  %260 = load i32*, i32** %12, align 8, !dbg !3852
  %261 = icmp ne i32* %260, null, !dbg !3852
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %182
  %262 = load i32, i32* %15, align 4, !dbg !3855
  %263 = load i32*, i32** %12, align 8, !dbg !3856
  store i32 %262, i32* %263, align 4, !dbg !3857
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %201
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %218
  %264 = load i8*, i8** %13, align 8, !dbg !3859
  br label %originalBB42
}

declare dso_local i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #3

; Function Attrs: nounwind
declare dso_local noalias i8* @strdup(i8*) #2

; Function Attrs: nounwind
declare dso_local void @freeaddrinfo(%struct.addrinfo*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !3889 {
  %1 = load i32, i32* @x.49
  %2 = load i32, i32* @y.50
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !3890
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !3892
  %12 = icmp ne i32 %11, 0, !dbg !3893
  %13 = load i32, i32* @x.49
  %14 = load i32, i32* @y.50
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %140, !dbg !3894

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.49
  %23 = load i32, i32* @y.50
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i8, i8* @ignore_EPIPE, align 1, !dbg !3895
  %31 = trunc i8 %30 to i1, !dbg !3895
  %32 = load i32, i32* @x.49
  %33 = load i32, i32* @y.50
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %31, label %40, label %60, !dbg !3896

40:                                               ; preds = %originalBBpart24
  %41 = load i32, i32* @x.49
  %42 = load i32, i32* @y.50
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = call i32* @__errno_location() #15, !dbg !3897
  %50 = load i32, i32* %49, align 4, !dbg !3897
  %51 = icmp eq i32 %50, 32, !dbg !3898
  %52 = load i32, i32* @x.49
  %53 = load i32, i32* @y.50
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %140, label %60, !dbg !3899

60:                                               ; preds = %originalBBpart28, %originalBBpart24
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3900, metadata !DIExpression()), !dbg !3902
  %61 = load i32, i32* @x.49
  %62 = load i32, i32* @y.50
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.102, i64 0, i64 0)) #10, !dbg !3903
  store i8* %69, i8** %9, align 8, !dbg !3902
  %70 = load i8*, i8** @file_name, align 8, !dbg !3904
  %71 = icmp ne i8* %70, null, !dbg !3904
  %72 = load i32, i32* @x.49
  %73 = load i32, i32* @y.50
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %71, label %80, label %102, !dbg !3906

80:                                               ; preds = %originalBBpart212
  %81 = load i32, i32* @x.49
  %82 = load i32, i32* @y.50
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %80, %originalBB14alteredBB
  %89 = call i32* @__errno_location() #15, !dbg !3907
  %90 = load i32, i32* %89, align 4, !dbg !3907
  %91 = load i8*, i8** @file_name, align 8, !dbg !3908
  %92 = call i8* @quotearg_colon(i8* %91), !dbg !3909
  %93 = load i8*, i8** %9, align 8, !dbg !3910
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.103, i64 0, i64 0), i8* %92, i8* %93), !dbg !3911
  %94 = load i32, i32* @x.49
  %95 = load i32, i32* @y.50
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %122, !dbg !3911

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.49
  %104 = load i32, i32* @y.50
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  %111 = call i32* @__errno_location() #15, !dbg !3912
  %112 = load i32, i32* %111, align 4, !dbg !3912
  %113 = load i8*, i8** %9, align 8, !dbg !3913
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.104, i64 0, i64 0), i8* %113), !dbg !3914
  %114 = load i32, i32* @x.49
  %115 = load i32, i32* @y.50
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %122

122:                                              ; preds = %originalBBpart220, %originalBBpart216
  %123 = load i32, i32* @x.49
  %124 = load i32, i32* @y.50
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %122, %originalBB22alteredBB
  %131 = load volatile i32, i32* @exit_failure, align 4, !dbg !3915
  call void @_exit(i32 %131) #14, !dbg !3916
  %132 = load i32, i32* @x.49
  %133 = load i32, i32* @y.50
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !3916

140:                                              ; preds = %originalBBpart28, %originalBBpart2
  %141 = load i32, i32* @x.49
  %142 = load i32, i32* @y.50
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %140, %originalBB26alteredBB
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3917
  %150 = call i32 @close_stream(%struct._IO_FILE* %149), !dbg !3919
  %151 = icmp ne i32 %150, 0, !dbg !3920
  %152 = load i32, i32* @x.49
  %153 = load i32, i32* @y.50
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %151, label %160, label %178, !dbg !3921

160:                                              ; preds = %originalBBpart228
  %161 = load i32, i32* @x.49
  %162 = load i32, i32* @y.50
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %160, %originalBB30alteredBB
  %169 = load volatile i32, i32* @exit_failure, align 4, !dbg !3922
  call void @_exit(i32 %169) #14, !dbg !3923
  %170 = load i32, i32* @x.49
  %171 = load i32, i32* @y.50
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  unreachable, !dbg !3923

178:                                              ; preds = %originalBBpart228
  %179 = load i32, i32* @x.49
  %180 = load i32, i32* @y.50
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %178, %originalBB34alteredBB
  %187 = load i32, i32* @x.49
  %188 = load i32, i32* @y.50
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !3924

originalBBalteredBB:                              ; preds = %originalBB, %0
  %195 = alloca i8*, align 8
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !3890
  %197 = call i32 @close_stream(%struct._IO_FILE* %196), !dbg !3892
  %198 = icmp ne i32 %197, 0, !dbg !3893
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %199 = load i8, i8* @ignore_EPIPE, align 1, !dbg !3895
  %200 = trunc i8 %199 to i1, !dbg !3895
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %201 = call i32* @__errno_location() #15, !dbg !3897
  %202 = load i32, i32* %201, align 4, !dbg !3897
  %203 = icmp eq i32 %202, 32, !dbg !3898
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %204 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.102, i64 0, i64 0)) #10, !dbg !3903
  store i8* %204, i8** %9, align 8, !dbg !3902
  %205 = load i8*, i8** @file_name, align 8, !dbg !3904
  %206 = icmp ne i8* %205, null, !dbg !3904
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %80
  %207 = call i32* @__errno_location() #15, !dbg !3907
  %208 = load i32, i32* %207, align 4, !dbg !3907
  %209 = load i8*, i8** @file_name, align 8, !dbg !3908
  %210 = call i8* @quotearg_colon(i8* %209), !dbg !3909
  %211 = load i8*, i8** %9, align 8, !dbg !3910
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %208, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.103, i64 0, i64 0), i8* %210, i8* %211), !dbg !3911
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  %212 = call i32* @__errno_location() #15, !dbg !3912
  %213 = load i32, i32* %212, align 4, !dbg !3912
  %214 = load i8*, i8** %9, align 8, !dbg !3913
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %213, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.104, i64 0, i64 0), i8* %214), !dbg !3914
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %122
  %215 = load volatile i32, i32* @exit_failure, align 4, !dbg !3915
  call void @_exit(i32 %215) #14, !dbg !3916
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %140
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3917
  %217 = call i32 @close_stream(%struct._IO_FILE* %216), !dbg !3919
  %218 = icmp ne i32 %217, 0, !dbg !3920
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %160
  %219 = load volatile i32, i32* @exit_failure, align 4, !dbg !3922
  call void @_exit(i32 %219) #14, !dbg !3923
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %178
  br label %originalBB34
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !3925 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3927, metadata !DIExpression()), !dbg !3928
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !3929, metadata !DIExpression()), !dbg !3930
  %13 = load i32, i32* %11, align 4, !dbg !3931
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3933
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !3934
  %16 = icmp ne i32 %15, 0, !dbg !3934
  %17 = load i32, i32* @x.51
  %18 = load i32, i32* @y.52
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !3935

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.51
  %27 = load i32, i32* @y.52
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !3936
  %34 = load i32, i32* @x.51
  %35 = load i32, i32* @y.52
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %292, !dbg !3936

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.51
  %44 = load i32, i32* @y.52
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3937
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.109, i64 0, i64 0)) #13, !dbg !3938
  %53 = load i32, i32* @x.51
  %54 = load i32, i32* @y.52
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %61, !dbg !3939

61:                                               ; preds = %originalBBpart28
  %62 = load i32, i32* @x.51
  %63 = load i32, i32* @y.52
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %collatzVar = alloca i32
  %70 = load i32, i32* @x.51
  %71 = load i32, i32* @y.52
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %78

78:                                               ; preds = %originalBBpart212
  %79 = load i32, i32* @x.51
  %80 = load i32, i32* @y.52
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %78, %originalBB14alteredBB
  %87 = load i32, i32* @inVal0
  %88 = icmp sgt i32 %87, 1
  %89 = load i32, i32* @x.51
  %90 = load i32, i32* @y.52
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %88, label %114, label %97

97:                                               ; preds = %originalBBpart216
  %98 = load i32, i32* @x.51
  %99 = load i32, i32* @y.52
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %97, %originalBB18alteredBB
  store i32 3, i32* %collatzVar
  %106 = load i32, i32* @x.51
  %107 = load i32, i32* @y.52
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %114

114:                                              ; preds = %originalBBpart220, %originalBBpart216
  %115 = load i32, i32* @x.51
  %116 = load i32, i32* @y.52
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %114, %originalBB22alteredBB
  %123 = load i8**, i8*** @inVal1
  %124 = getelementptr inbounds i8*, i8** %123, i64 1
  %125 = load i8*, i8** %124
  %126 = add i32 0, -3
  %controle = call i32 @controle(i8* %125, i32 %126)
  store i32 %controle, i32* %collatzVar
  %127 = load i32, i32* @x.51
  %128 = load i32, i32* @y.52
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart231, label %originalBB22alteredBB

originalBBpart231:                                ; preds = %originalBB22
  br label %135

135:                                              ; preds = %originalBBpart284, %originalBBpart278, %originalBBpart231
  %136 = load i32, i32* @x.51
  %137 = load i32, i32* @y.52
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %135, %originalBB33alteredBB
  %144 = load i32, i32* %collatzVar
  %145 = icmp sgt i32 %144, 1
  %146 = load i32, i32* @x.51
  %147 = load i32, i32* @y.52
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %145, label %154, label %253

154:                                              ; preds = %originalBBpart235
  %155 = load i32, i32* @x.51
  %156 = load i32, i32* @y.52
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %154, %originalBB37alteredBB
  %163 = load i32, i32* %collatzVar
  %164 = srem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = load i32, i32* @x.51
  %167 = load i32, i32* @y.52
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart243, label %originalBB37alteredBB

originalBBpart243:                                ; preds = %originalBB37
  br i1 %165, label %174, label %193

174:                                              ; preds = %originalBBpart243
  %175 = load i32, i32* @x.51
  %176 = load i32, i32* @y.52
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %174, %originalBB45alteredBB
  %183 = load i32, i32* %collatzVar
  %184 = sdiv i32 %183, 2
  store i32 %184, i32* %collatzVar
  %185 = load i32, i32* @x.51
  %186 = load i32, i32* @y.52
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBBpart252, label %originalBB45alteredBB

originalBBpart252:                                ; preds = %originalBB45
  br label %213

193:                                              ; preds = %originalBBpart243
  %194 = load i32, i32* @x.51
  %195 = load i32, i32* @y.52
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %193, %originalBB54alteredBB
  %202 = load i32, i32* %collatzVar
  %203 = mul i32 %202, 3
  %204 = add i32 %203, 1
  store i32 %204, i32* %collatzVar
  %205 = load i32, i32* @x.51
  %206 = load i32, i32* @y.52
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart264, label %originalBB54alteredBB

originalBBpart264:                                ; preds = %originalBB54
  br label %213

213:                                              ; preds = %originalBBpart264, %originalBBpart252
  %214 = load i32, i32* @x.51
  %215 = load i32, i32* @y.52
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %213, %originalBB66alteredBB
  %222 = load i32, i32* %collatzVar
  %223 = sub i32 %52, %222
  %224 = icmp sgt i32 %223, -2
  %225 = load i32, i32* @x.51
  %226 = load i32, i32* @y.52
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart278, label %originalBB66alteredBB

originalBBpart278:                                ; preds = %originalBB66
  br i1 %224, label %233, label %135

233:                                              ; preds = %originalBBpart278
  %234 = load i32, i32* @x.51
  %235 = load i32, i32* @y.52
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBB80, label %originalBB80alteredBB

originalBB80:                                     ; preds = %233, %originalBB80alteredBB
  %242 = load i32, i32* %collatzVar
  %243 = add i32 %52, %242
  %244 = icmp slt i32 %243, 2
  %245 = load i32, i32* @x.51
  %246 = load i32, i32* @y.52
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBBpart284, label %originalBB80alteredBB

originalBBpart284:                                ; preds = %originalBB80
  br i1 %244, label %273, label %135

253:                                              ; preds = %originalBBpart235
  %254 = load i32, i32* @x.51
  %255 = load i32, i32* @y.52
  %256 = sub i32 %254, 1
  %257 = mul i32 %254, %256
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %259, %260
  br i1 %261, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %253, %originalBB86alteredBB
  %262 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3940
  %263 = call i32 @strcmp(i8* %262, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.110, i64 0, i64 0)) #13, !dbg !3941
  %264 = icmp eq i32 %263, 0, !dbg !3942
  %265 = load i32, i32* @x.51
  %266 = load i32, i32* @y.52
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br label %273, !dbg !3943

273:                                              ; preds = %originalBBpart288, %originalBBpart284
  %274 = phi i1 [ true, %originalBBpart284 ], [ %264, %originalBBpart288 ]
  %275 = load i32, i32* @x.51
  %276 = load i32, i32* @y.52
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %273, %originalBB90alteredBB
  %283 = xor i1 %274, true, !dbg !3944
  store i1 %283, i1* %10, align 1, !dbg !3945
  %284 = load i32, i32* @x.51
  %285 = load i32, i32* @y.52
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart2103, label %originalBB90alteredBB

originalBBpart2103:                               ; preds = %originalBB90
  br label %292, !dbg !3945

292:                                              ; preds = %originalBBpart2103, %originalBBpart24
  %293 = load i32, i32* @x.51
  %294 = load i32, i32* @y.52
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %292, %originalBB105alteredBB
  %301 = load i1, i1* %10, align 1, !dbg !3946
  %302 = load i32, i32* @x.51
  %303 = load i32, i32* @y.52
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  ret i1 %301, !dbg !3946

originalBBalteredBB:                              ; preds = %originalBB, %1
  %310 = alloca i1, align 1
  %311 = alloca i32, align 4
  %312 = alloca [257 x i8], align 16
  store i32 %0, i32* %311, align 4
  call void @llvm.dbg.declare(metadata i32* %311, metadata !3947, metadata !DIExpression()), !dbg !3928
  call void @llvm.dbg.declare(metadata [257 x i8]* %312, metadata !3950, metadata !DIExpression()), !dbg !3930
  %313 = load i32, i32* %311, align 4, !dbg !3931
  %314 = getelementptr inbounds [257 x i8], [257 x i8]* %312, i64 0, i64 0, !dbg !3933
  %315 = call i32 @setlocale_null_r(i32 %313, i8* %314, i64 257), !dbg !3934
  %316 = icmp ne i32 %315, 0, !dbg !3934
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  store i1 false, i1* %10, align 1, !dbg !3936
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %317 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3937
  %318 = call i32 @strcmp(i8* %317, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.109, i64 0, i64 0)) #13, !dbg !3938
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %collatzVaralteredBB = alloca i32
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %78
  %319 = load i32, i32* @inVal0
  %320 = icmp sgt i32 %319, 1
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %97
  store i32 3, i32* %collatzVar
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %114
  %321 = load i8**, i8*** @inVal1
  %322 = getelementptr inbounds i8*, i8** %321, i64 1
  %323 = load i8*, i8** %322
  %_ = sub i32 0, -3
  %gen = mul i32 %_, -3
  %_23 = sub i32 0, -3
  %gen24 = mul i32 %_23, -3
  %_25 = sub i32 0, 0
  %gen26 = add i32 %_25, -3
  %_27 = sub i32 0, -3
  %gen28 = mul i32 %_27, -3
  %324 = add i32 0, -3
  %controlealteredBB = call i32 @controle(i8* %323, i32 %324)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB22

originalBB33alteredBB:                            ; preds = %originalBB33, %135
  %325 = load i32, i32* %collatzVar
  %326 = icmp sgt i32 %325, 1
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %154
  %327 = load i32, i32* %collatzVar
  %_38 = sub i32 0, %327
  %gen39 = add i32 %_38, 2
  %_40 = sub i32 0, %327
  %gen41 = add i32 %_40, 2
  %328 = srem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  br label %originalBB37

originalBB45alteredBB:                            ; preds = %originalBB45, %174
  %330 = load i32, i32* %collatzVar
  %_46 = shl i32 %330, 2
  %_47 = shl i32 %330, 2
  %_48 = shl i32 %330, 2
  %_49 = sub i32 %330, 2
  %gen50 = mul i32 %_49, 2
  %331 = sdiv i32 %330, 2
  store i32 %331, i32* %collatzVar
  br label %originalBB45

originalBB54alteredBB:                            ; preds = %originalBB54, %193
  %332 = load i32, i32* %collatzVar
  %_55 = sub i32 %332, 3
  %gen56 = mul i32 %_55, 3
  %_57 = sub i32 0, %332
  %gen58 = add i32 %_57, 3
  %333 = mul i32 %332, 3
  %_59 = sub i32 %333, 1
  %gen60 = mul i32 %_59, 1
  %_61 = sub i32 0, %333
  %gen62 = add i32 %_61, 1
  %334 = add i32 %333, 1
  store i32 %334, i32* %collatzVar
  br label %originalBB54

originalBB66alteredBB:                            ; preds = %originalBB66, %213
  %335 = load i32, i32* %collatzVar
  %_67 = sub i32 %52, %335
  %gen68 = mul i32 %_67, %335
  %_69 = shl i32 %52, %335
  %_70 = shl i32 %52, %335
  %_71 = sub i32 0, %52
  %gen72 = add i32 %_71, %335
  %_73 = sub i32 %52, %335
  %gen74 = mul i32 %_73, %335
  %_75 = sub i32 %52, %335
  %gen76 = mul i32 %_75, %335
  %336 = sub i32 %52, %335
  %337 = icmp sgt i32 %336, -2
  br label %originalBB66

originalBB80alteredBB:                            ; preds = %originalBB80, %233
  %338 = load i32, i32* %collatzVar
  %_81 = sub i32 %52, %338
  %gen82 = mul i32 %_81, %338
  %339 = add i32 %52, %338
  %340 = icmp slt i32 %339, 2
  br label %originalBB80

originalBB86alteredBB:                            ; preds = %originalBB86, %253
  %341 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3940
  %342 = call i32 @strcmp(i8* %341, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.110, i64 0, i64 0)) #13, !dbg !3941
  %343 = icmp eq i32 %342, 0, !dbg !3942
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %273
  %_91 = sub i1 false, %274
  %gen92 = add i1 %_91, true
  %_93 = sub i1 false, %274
  %gen94 = add i1 %_93, true
  %_95 = shl i1 %274, true
  %_96 = shl i1 %274, true
  %_97 = shl i1 %274, true
  %_98 = sub i1 false, %274
  %gen99 = add i1 %_98, true
  %_100 = sub i1 %274, true
  %gen101 = mul i1 %_100, true
  %344 = xor i1 %274, true, !dbg !3944
  store i1 %344, i1* %10, align 1, !dbg !3945
  br label %originalBB90

originalBB105alteredBB:                           ; preds = %originalBB105, %292
  %345 = load i1, i1* %10, align 1, !dbg !3946
  br label %originalBB105
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @imaxtostr(i64, i8*) #4 !dbg !3951 {
  %3 = load i32, i32* @x.53
  %4 = load i32, i32* @y.54
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !3955, metadata !DIExpression()), !dbg !3956
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3957, metadata !DIExpression()), !dbg !3958
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3959, metadata !DIExpression()), !dbg !3960
  %14 = load i8*, i8** %12, align 8, !dbg !3961
  %15 = getelementptr inbounds i8, i8* %14, i64 20, !dbg !3962
  store i8* %15, i8** %13, align 8, !dbg !3960
  %16 = load i8*, i8** %13, align 8, !dbg !3963
  store i8 0, i8* %16, align 1, !dbg !3964
  %17 = load i64, i64* %11, align 8, !dbg !3965
  %18 = icmp slt i64 %17, 0, !dbg !3967
  %19 = load i32, i32* @x.53
  %20 = load i32, i32* @y.54
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %106, !dbg !3968

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.53
  %29 = load i32, i32* @y.54
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* @x.53
  %37 = load i32, i32* @y.54
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %44, !dbg !3969

44:                                               ; preds = %originalBBpart227, %originalBBpart24
  %45 = load i32, i32* @x.53
  %46 = load i32, i32* @y.54
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = load i64, i64* %11, align 8, !dbg !3971
  %54 = srem i64 %53, 10, !dbg !3972
  %55 = sub nsw i64 48, %54, !dbg !3973
  %56 = trunc i64 %55 to i8, !dbg !3974
  %57 = load i8*, i8** %13, align 8, !dbg !3975
  %58 = getelementptr inbounds i8, i8* %57, i32 -1, !dbg !3975
  store i8* %58, i8** %13, align 8, !dbg !3975
  store i8 %56, i8* %58, align 1, !dbg !3976
  %59 = load i32, i32* @x.53
  %60 = load i32, i32* @y.54
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart218, label %originalBB6alteredBB

originalBBpart218:                                ; preds = %originalBB6
  br label %67, !dbg !3977

67:                                               ; preds = %originalBBpart218
  %68 = load i32, i32* @x.53
  %69 = load i32, i32* @y.54
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %67, %originalBB20alteredBB
  %76 = load i64, i64* %11, align 8, !dbg !3978
  %77 = sdiv i64 %76, 10, !dbg !3978
  store i64 %77, i64* %11, align 8, !dbg !3978
  %78 = icmp ne i64 %77, 0, !dbg !3979
  %79 = load i32, i32* @x.53
  %80 = load i32, i32* @y.54
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart227, label %originalBB20alteredBB

originalBBpart227:                                ; preds = %originalBB20
  br i1 %78, label %44, label %87, !dbg !3977, !llvm.loop !3980

87:                                               ; preds = %originalBBpart227
  %88 = load i32, i32* @x.53
  %89 = load i32, i32* @y.54
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %87, %originalBB29alteredBB
  %96 = load i8*, i8** %13, align 8, !dbg !3982
  %97 = getelementptr inbounds i8, i8* %96, i32 -1, !dbg !3982
  store i8* %97, i8** %13, align 8, !dbg !3982
  store i8 45, i8* %97, align 1, !dbg !3983
  %98 = load i32, i32* @x.53
  %99 = load i32, i32* @y.54
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %183, !dbg !3984

106:                                              ; preds = %originalBBpart2
  %107 = load i32, i32* @x.53
  %108 = load i32, i32* @y.54
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %106, %originalBB33alteredBB
  %115 = load i32, i32* @x.53
  %116 = load i32, i32* @y.54
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %123, !dbg !3985

123:                                              ; preds = %originalBBpart268, %originalBBpart235
  %124 = load i32, i32* @x.53
  %125 = load i32, i32* @y.54
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %123, %originalBB37alteredBB
  %132 = load i64, i64* %11, align 8, !dbg !3987
  %133 = srem i64 %132, 10, !dbg !3988
  %134 = add nsw i64 48, %133, !dbg !3989
  %135 = trunc i64 %134 to i8, !dbg !3990
  %136 = load i8*, i8** %13, align 8, !dbg !3991
  %137 = getelementptr inbounds i8, i8* %136, i32 -1, !dbg !3991
  store i8* %137, i8** %13, align 8, !dbg !3991
  store i8 %135, i8* %137, align 1, !dbg !3992
  %138 = load i32, i32* @x.53
  %139 = load i32, i32* @y.54
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart255, label %originalBB37alteredBB

originalBBpart255:                                ; preds = %originalBB37
  br label %146, !dbg !3993

146:                                              ; preds = %originalBBpart255
  %147 = load i32, i32* @x.53
  %148 = load i32, i32* @y.54
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %146, %originalBB57alteredBB
  %155 = load i64, i64* %11, align 8, !dbg !3994
  %156 = sdiv i64 %155, 10, !dbg !3994
  store i64 %156, i64* %11, align 8, !dbg !3994
  %157 = icmp ne i64 %156, 0, !dbg !3995
  %158 = load i32, i32* @x.53
  %159 = load i32, i32* @y.54
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart268, label %originalBB57alteredBB

originalBBpart268:                                ; preds = %originalBB57
  br i1 %157, label %123, label %166, !dbg !3993, !llvm.loop !3996

166:                                              ; preds = %originalBBpart268
  %167 = load i32, i32* @x.53
  %168 = load i32, i32* @y.54
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %166, %originalBB70alteredBB
  %175 = load i32, i32* @x.53
  %176 = load i32, i32* @y.54
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %183

183:                                              ; preds = %originalBBpart272, %originalBBpart231
  %184 = load i32, i32* @x.53
  %185 = load i32, i32* @y.54
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %183, %originalBB74alteredBB
  %192 = load i8*, i8** %13, align 8, !dbg !3998
  %193 = load i32, i32* @x.53
  %194 = load i32, i32* @y.54
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  ret i8* %192, !dbg !3999

originalBBalteredBB:                              ; preds = %originalBB, %2
  %201 = alloca i64, align 8
  %202 = alloca i8*, align 8
  %203 = alloca i8*, align 8
  store i64 %0, i64* %201, align 8
  call void @llvm.dbg.declare(metadata i64* %201, metadata !4000, metadata !DIExpression()), !dbg !3956
  store i8* %1, i8** %202, align 8
  call void @llvm.dbg.declare(metadata i8** %202, metadata !4003, metadata !DIExpression()), !dbg !3958
  call void @llvm.dbg.declare(metadata i8** %203, metadata !4004, metadata !DIExpression()), !dbg !3960
  %204 = load i8*, i8** %202, align 8, !dbg !3961
  %205 = getelementptr inbounds i8, i8* %204, i64 20, !dbg !3962
  store i8* %205, i8** %203, align 8, !dbg !3960
  %206 = load i8*, i8** %203, align 8, !dbg !3963
  store i8 0, i8* %206, align 1, !dbg !3964
  %207 = load i64, i64* %201, align 8, !dbg !3965
  %208 = icmp slt i64 %207, 0, !dbg !3967
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %209 = load i64, i64* %11, align 8, !dbg !3971
  %_ = sub i64 0, %209
  %gen = add i64 %_, 10
  %_7 = sub i64 %209, 10
  %gen8 = mul i64 %_7, 10
  %210 = srem i64 %209, 10, !dbg !3972
  %_9 = shl i64 48, %210
  %_10 = sub i64 48, %210
  %gen11 = mul i64 %_10, %210
  %_12 = sub i64 48, %210
  %gen13 = mul i64 %_12, %210
  %_14 = sub i64 48, %210
  %gen15 = mul i64 %_14, %210
  %_16 = shl i64 48, %210
  %211 = sub nsw i64 48, %210, !dbg !3973
  %212 = trunc i64 %211 to i8, !dbg !3974
  %213 = load i8*, i8** %13, align 8, !dbg !3975
  %214 = getelementptr inbounds i8, i8* %213, i32 -1, !dbg !3975
  store i8* %214, i8** %13, align 8, !dbg !3975
  store i8 %212, i8* %214, align 1, !dbg !3976
  br label %originalBB6

originalBB20alteredBB:                            ; preds = %originalBB20, %67
  %215 = load i64, i64* %11, align 8, !dbg !3978
  %_21 = shl i64 %215, 10
  %_22 = sub i64 0, %215
  %gen23 = add i64 %_22, 10
  %_24 = sub i64 %215, 10
  %gen25 = mul i64 %_24, 10
  %216 = sdiv i64 %215, 10, !dbg !3978
  store i64 %216, i64* %11, align 8, !dbg !3978
  %217 = icmp ne i64 %216, 0, !dbg !3979
  br label %originalBB20

originalBB29alteredBB:                            ; preds = %originalBB29, %87
  %218 = load i8*, i8** %13, align 8, !dbg !3982
  %219 = getelementptr inbounds i8, i8* %218, i32 -1, !dbg !3982
  store i8* %219, i8** %13, align 8, !dbg !3982
  store i8 45, i8* %219, align 1, !dbg !3983
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %106
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %123
  %220 = load i64, i64* %11, align 8, !dbg !3987
  %_38 = sub i64 %220, 10
  %gen39 = mul i64 %_38, 10
  %_40 = sub i64 %220, 10
  %gen41 = mul i64 %_40, 10
  %_42 = sub i64 0, %220
  %gen43 = add i64 %_42, 10
  %_44 = sub i64 0, %220
  %gen45 = add i64 %_44, 10
  %_46 = sub i64 %220, 10
  %gen47 = mul i64 %_46, 10
  %221 = srem i64 %220, 10, !dbg !3988
  %_48 = sub i64 48, %221
  %gen49 = mul i64 %_48, %221
  %_50 = sub i64 0, 48
  %gen51 = add i64 %_50, %221
  %_52 = sub i64 48, %221
  %gen53 = mul i64 %_52, %221
  %222 = add nsw i64 48, %221, !dbg !3989
  %223 = trunc i64 %222 to i8, !dbg !3990
  %224 = load i8*, i8** %13, align 8, !dbg !3991
  %225 = getelementptr inbounds i8, i8* %224, i32 -1, !dbg !3991
  store i8* %225, i8** %13, align 8, !dbg !3991
  store i8 %223, i8* %225, align 1, !dbg !3992
  br label %originalBB37

originalBB57alteredBB:                            ; preds = %originalBB57, %146
  %226 = load i64, i64* %11, align 8, !dbg !3994
  %_58 = sub i64 0, %226
  %gen59 = add i64 %_58, 10
  %_60 = sub i64 0, %226
  %gen61 = add i64 %_60, 10
  %_62 = sub i64 %226, 10
  %gen63 = mul i64 %_62, 10
  %_64 = shl i64 %226, 10
  %_65 = sub i64 %226, 10
  %gen66 = mul i64 %_65, 10
  %227 = sdiv i64 %226, 10, !dbg !3994
  store i64 %227, i64* %11, align 8, !dbg !3994
  %228 = icmp ne i64 %227, 0, !dbg !3995
  br label %originalBB57

originalBB70alteredBB:                            ; preds = %originalBB70, %166
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %183
  %229 = load i8*, i8** %13, align 8, !dbg !3998
  br label %originalBB74
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !4005 {
  %2 = load i32, i32* @x.55
  %3 = load i32, i32* @y.56
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !4006, metadata !DIExpression()), !dbg !4007
  call void @llvm.dbg.declare(metadata i8** %11, metadata !4008, metadata !DIExpression()), !dbg !4009
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4010, metadata !DIExpression()), !dbg !4011
  %13 = load i8*, i8** %10, align 8, !dbg !4012
  %14 = icmp eq i8* %13, null, !dbg !4014
  %15 = load i32, i32* @x.55
  %16 = load i32, i32* @y.56
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !4015

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.55
  %25 = load i32, i32* @y.56
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4016
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.115, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !4018
  call void @abort() #12, !dbg !4019
  %34 = load i32, i32* @x.55
  %35 = load i32, i32* @y.56
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !4019

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.55
  %44 = load i32, i32* @y.56
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !4020
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !4021
  store i8* %52, i8** %11, align 8, !dbg !4022
  %53 = load i8*, i8** %11, align 8, !dbg !4023
  %54 = icmp ne i8* %53, null, !dbg !4024
  %55 = load i32, i32* @x.55
  %56 = load i32, i32* @y.56
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %82, !dbg !4023

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.55
  %65 = load i32, i32* @y.56
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i8*, i8** %11, align 8, !dbg !4025
  %73 = getelementptr inbounds i8, i8* %72, i64 1, !dbg !4026
  %74 = load i32, i32* @x.55
  %75 = load i32, i32* @y.56
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !4023

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.55
  %84 = load i32, i32* @y.56
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load i8*, i8** %10, align 8, !dbg !4027
  %92 = load i32, i32* @x.55
  %93 = load i32, i32* @y.56
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %100, !dbg !4023

100:                                              ; preds = %originalBBpart216, %originalBBpart212
  %101 = phi i8* [ %73, %originalBBpart212 ], [ %91, %originalBBpart216 ], !dbg !4023
  %102 = load i32, i32* @x.55
  %103 = load i32, i32* @y.56
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %100, %originalBB18alteredBB
  store i8* %101, i8** %12, align 8, !dbg !4028
  %110 = load i8*, i8** %12, align 8, !dbg !4029
  %111 = load i8*, i8** %10, align 8, !dbg !4031
  %112 = ptrtoint i8* %110 to i64, !dbg !4032
  %113 = ptrtoint i8* %111 to i64, !dbg !4032
  %114 = sub i64 %112, %113, !dbg !4032
  %115 = icmp sge i64 %114, 7, !dbg !4033
  %116 = load i32, i32* @x.55
  %117 = load i32, i32* @y.56
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart225, label %originalBB18alteredBB

originalBBpart225:                                ; preds = %originalBB18
  br i1 %115, label %124, label %203, !dbg !4034

124:                                              ; preds = %originalBBpart225
  %125 = load i32, i32* @x.55
  %126 = load i32, i32* @y.56
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %124, %originalBB27alteredBB
  %133 = load i8*, i8** %12, align 8, !dbg !4035
  %134 = getelementptr inbounds i8, i8* %133, i64 -7, !dbg !4036
  %135 = call i32 @strncmp(i8* %134, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.116, i64 0, i64 0), i64 7) #13, !dbg !4037
  %136 = icmp eq i32 %135, 0, !dbg !4038
  %137 = load i32, i32* @x.55
  %138 = load i32, i32* @y.56
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %136, label %145, label %203, !dbg !4039

145:                                              ; preds = %originalBBpart229
  %146 = load i32, i32* @x.55
  %147 = load i32, i32* @y.56
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %145, %originalBB31alteredBB
  %154 = load i8*, i8** %12, align 8, !dbg !4040
  store i8* %154, i8** %10, align 8, !dbg !4042
  %155 = load i8*, i8** %12, align 8, !dbg !4043
  %156 = call i32 @strncmp(i8* %155, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.117, i64 0, i64 0), i64 3) #13, !dbg !4045
  %157 = icmp eq i32 %156, 0, !dbg !4046
  %158 = load i32, i32* @x.55
  %159 = load i32, i32* @y.56
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br i1 %157, label %166, label %186, !dbg !4047

166:                                              ; preds = %originalBBpart233
  %167 = load i32, i32* @x.55
  %168 = load i32, i32* @y.56
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %166, %originalBB35alteredBB
  %175 = load i8*, i8** %12, align 8, !dbg !4048
  %176 = getelementptr inbounds i8, i8* %175, i64 3, !dbg !4050
  store i8* %176, i8** %10, align 8, !dbg !4051
  %177 = load i8*, i8** %10, align 8, !dbg !4052
  store i8* %177, i8** @program_invocation_short_name, align 8, !dbg !4053
  %178 = load i32, i32* @x.55
  %179 = load i32, i32* @y.56
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %186, !dbg !4054

186:                                              ; preds = %originalBBpart237, %originalBBpart233
  %187 = load i32, i32* @x.55
  %188 = load i32, i32* @y.56
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %186, %originalBB39alteredBB
  %195 = load i32, i32* @x.55
  %196 = load i32, i32* @y.56
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br label %203, !dbg !4055

203:                                              ; preds = %originalBBpart241, %originalBBpart229, %originalBBpart225
  %204 = load i32, i32* @x.55
  %205 = load i32, i32* @y.56
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %203, %originalBB43alteredBB
  %212 = load i8*, i8** %10, align 8, !dbg !4056
  store i8* %212, i8** @program_name, align 8, !dbg !4057
  %213 = load i8*, i8** %10, align 8, !dbg !4058
  store i8* %213, i8** @program_invocation_name, align 8, !dbg !4059
  %214 = load i32, i32* @x.55
  %215 = load i32, i32* @y.56
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  ret void, !dbg !4060

originalBBalteredBB:                              ; preds = %originalBB, %1
  %222 = alloca i8*, align 8
  %223 = alloca i8*, align 8
  %224 = alloca i8*, align 8
  store i8* %0, i8** %222, align 8
  call void @llvm.dbg.declare(metadata i8** %222, metadata !4061, metadata !DIExpression()), !dbg !4007
  call void @llvm.dbg.declare(metadata i8** %223, metadata !4067, metadata !DIExpression()), !dbg !4009
  call void @llvm.dbg.declare(metadata i8** %224, metadata !4068, metadata !DIExpression()), !dbg !4011
  %225 = load i8*, i8** %222, align 8, !dbg !4012
  %226 = icmp eq i8* %225, null, !dbg !4014
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %227 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !4016
  %228 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.115, i64 0, i64 0), %struct._IO_FILE* %227), !dbg !4018
  call void @abort() #12, !dbg !4019
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %229 = load i8*, i8** %10, align 8, !dbg !4020
  %230 = call i8* @strrchr(i8* %229, i32 47) #13, !dbg !4021
  store i8* %230, i8** %11, align 8, !dbg !4022
  %231 = load i8*, i8** %11, align 8, !dbg !4023
  %232 = icmp ne i8* %231, null, !dbg !4024
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %233 = load i8*, i8** %11, align 8, !dbg !4025
  %234 = getelementptr inbounds i8, i8* %233, i64 1, !dbg !4026
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %235 = load i8*, i8** %10, align 8, !dbg !4027
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %100
  store i8* %101, i8** %12, align 8, !dbg !4028
  %236 = load i8*, i8** %12, align 8, !dbg !4029
  %237 = load i8*, i8** %10, align 8, !dbg !4031
  %238 = ptrtoint i8* %236 to i64, !dbg !4032
  %239 = ptrtoint i8* %237 to i64, !dbg !4032
  %_ = shl i64 %238, %239
  %_19 = sub i64 %238, %239
  %gen = mul i64 %_19, %239
  %_20 = sub i64 %238, %239
  %gen21 = mul i64 %_20, %239
  %_22 = shl i64 %238, %239
  %_23 = shl i64 %238, %239
  %240 = sub i64 %238, %239, !dbg !4032
  %241 = icmp sge i64 %240, 7, !dbg !4033
  br label %originalBB18

originalBB27alteredBB:                            ; preds = %originalBB27, %124
  %242 = load i8*, i8** %12, align 8, !dbg !4035
  %243 = getelementptr inbounds i8, i8* %242, i64 -7, !dbg !4036
  %244 = call i32 @strncmp(i8* %243, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.116, i64 0, i64 0), i64 7) #13, !dbg !4037
  %245 = icmp eq i32 %244, 0, !dbg !4038
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %145
  %246 = load i8*, i8** %12, align 8, !dbg !4040
  store i8* %246, i8** %10, align 8, !dbg !4042
  %247 = load i8*, i8** %12, align 8, !dbg !4043
  %248 = call i32 @strncmp(i8* %247, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.117, i64 0, i64 0), i64 3) #13, !dbg !4045
  %249 = icmp eq i32 %248, 0, !dbg !4046
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %166
  %250 = load i8*, i8** %12, align 8, !dbg !4048
  %251 = getelementptr inbounds i8, i8* %250, i64 3, !dbg !4050
  store i8* %251, i8** %10, align 8, !dbg !4051
  %252 = load i8*, i8** %10, align 8, !dbg !4052
  store i8* %252, i8** @program_invocation_short_name, align 8, !dbg !4053
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %186
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %203
  %253 = load i8*, i8** %10, align 8, !dbg !4056
  store i8* %253, i8** @program_name, align 8, !dbg !4057
  %254 = load i8*, i8** %10, align 8, !dbg !4058
  store i8* %254, i8** @program_invocation_name, align 8, !dbg !4059
  br label %originalBB43
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !4069 {
  %4 = load i32, i32* @x.57
  %5 = load i32, i32* @y.58
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !4073, metadata !DIExpression()), !dbg !4074
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !4075, metadata !DIExpression()), !dbg !4076
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !4077, metadata !DIExpression()), !dbg !4078
  call void @llvm.dbg.declare(metadata i8* %15, metadata !4079, metadata !DIExpression()), !dbg !4080
  %19 = load i8, i8* %13, align 1, !dbg !4081
  store i8 %19, i8* %15, align 1, !dbg !4080
  call void @llvm.dbg.declare(metadata i32** %16, metadata !4082, metadata !DIExpression()), !dbg !4084
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !4085
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !4085
  %22 = load i32, i32* @x.57
  %23 = load i32, i32* @y.58
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !4085

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.57
  %32 = load i32, i32* @y.58
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !4086
  %40 = load i32, i32* @x.57
  %41 = load i32, i32* @y.58
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !4085

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.57
  %50 = load i32, i32* @y.58
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.57
  %58 = load i32, i32* @y.58
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !4085

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !4085
  %67 = load i32, i32* @x.57
  %68 = load i32, i32* @y.58
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %75 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !4087
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* %75, i64 0, i64 0, !dbg !4088
  %77 = load i8, i8* %15, align 1, !dbg !4089
  %78 = zext i8 %77 to i64, !dbg !4089
  %79 = udiv i64 %78, 32, !dbg !4090
  %80 = getelementptr inbounds i32, i32* %76, i64 %79, !dbg !4091
  store i32* %80, i32** %16, align 8, !dbg !4084
  call void @llvm.dbg.declare(metadata i32* %17, metadata !4092, metadata !DIExpression()), !dbg !4093
  %81 = load i8, i8* %15, align 1, !dbg !4094
  %82 = zext i8 %81 to i64, !dbg !4094
  %83 = urem i64 %82, 32, !dbg !4095
  %84 = trunc i64 %83 to i32, !dbg !4094
  store i32 %84, i32* %17, align 4, !dbg !4093
  call void @llvm.dbg.declare(metadata i32* %18, metadata !4096, metadata !DIExpression()), !dbg !4097
  %85 = load i32*, i32** %16, align 8, !dbg !4098
  %86 = load i32, i32* %85, align 4, !dbg !4099
  %87 = load i32, i32* %17, align 4, !dbg !4100
  %88 = lshr i32 %86, %87, !dbg !4101
  %89 = and i32 %88, 1, !dbg !4102
  store i32 %89, i32* %18, align 4, !dbg !4097
  %90 = load i32, i32* %14, align 4, !dbg !4103
  %91 = and i32 %90, 1, !dbg !4104
  %92 = load i32, i32* %18, align 4, !dbg !4105
  %93 = xor i32 %91, %92, !dbg !4106
  %94 = load i32, i32* %17, align 4, !dbg !4107
  %95 = shl i32 %93, %94, !dbg !4108
  %96 = load i32*, i32** %16, align 8, !dbg !4109
  %97 = load i32, i32* %96, align 4, !dbg !4110
  %98 = xor i32 %97, %95, !dbg !4110
  store i32 %98, i32* %96, align 4, !dbg !4110
  %99 = load i32, i32* %18, align 4, !dbg !4111
  %100 = load i32, i32* @x.57
  %101 = load i32, i32* @y.58
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart256, label %originalBB10alteredBB

originalBBpart256:                                ; preds = %originalBB10
  ret i32 %99, !dbg !4112

originalBBalteredBB:                              ; preds = %originalBB, %3
  %108 = alloca %struct.quoting_options*, align 8
  %109 = alloca i8, align 1
  %110 = alloca i32, align 4
  %111 = alloca i8, align 1
  %112 = alloca i32*, align 8
  %113 = alloca i32, align 4
  %114 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %108, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %108, metadata !4113, metadata !DIExpression()), !dbg !4074
  store i8 %1, i8* %109, align 1
  call void @llvm.dbg.declare(metadata i8* %109, metadata !4148, metadata !DIExpression()), !dbg !4076
  store i32 %2, i32* %110, align 4
  call void @llvm.dbg.declare(metadata i32* %110, metadata !4149, metadata !DIExpression()), !dbg !4078
  call void @llvm.dbg.declare(metadata i8* %111, metadata !4150, metadata !DIExpression()), !dbg !4080
  %115 = load i8, i8* %109, align 1, !dbg !4081
  store i8 %115, i8* %111, align 1, !dbg !4080
  call void @llvm.dbg.declare(metadata i32** %112, metadata !4151, metadata !DIExpression()), !dbg !4084
  %116 = load %struct.quoting_options*, %struct.quoting_options** %108, align 8, !dbg !4085
  %117 = icmp ne %struct.quoting_options* %116, null, !dbg !4085
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %118 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !4086
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %119 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !4087
  %120 = getelementptr inbounds [8 x i32], [8 x i32]* %119, i64 0, i64 0, !dbg !4088
  %121 = load i8, i8* %15, align 1, !dbg !4089
  %122 = zext i8 %121 to i64, !dbg !4089
  %_ = shl i64 %122, 32
  %123 = udiv i64 %122, 32, !dbg !4090
  %124 = getelementptr inbounds i32, i32* %120, i64 %123, !dbg !4091
  store i32* %124, i32** %16, align 8, !dbg !4084
  call void @llvm.dbg.declare(metadata !4, metadata !4152, metadata !DIExpression()), !dbg !4093
  %125 = load i8, i8* %15, align 1, !dbg !4094
  %126 = zext i8 %125 to i64, !dbg !4094
  %_11 = sub i64 %126, 32
  %gen = mul i64 %_11, 32
  %_12 = sub i64 %126, 32
  %gen13 = mul i64 %_12, 32
  %_14 = shl i64 %126, 32
  %_15 = sub i64 %126, 32
  %gen16 = mul i64 %_15, 32
  %_17 = sub i64 %126, 32
  %gen18 = mul i64 %_17, 32
  %_19 = sub i64 0, %126
  %gen20 = add i64 %_19, 32
  %127 = urem i64 %126, 32, !dbg !4095
  %128 = trunc i64 %127 to i32, !dbg !4094
  store i32 %128, i32* %17, align 4, !dbg !4093
  call void @llvm.dbg.declare(metadata !4, metadata !4187, metadata !DIExpression()), !dbg !4097
  %129 = load i32*, i32** %16, align 8, !dbg !4098
  %130 = load i32, i32* %129, align 4, !dbg !4099
  %131 = load i32, i32* %17, align 4, !dbg !4100
  %_21 = sub i32 %130, %131
  %gen22 = mul i32 %_21, %131
  %_23 = sub i32 0, %130
  %gen24 = add i32 %_23, %131
  %_25 = shl i32 %130, %131
  %132 = lshr i32 %130, %131, !dbg !4101
  %_26 = shl i32 %132, 1
  %133 = and i32 %132, 1, !dbg !4102
  store i32 %133, i32* %18, align 4, !dbg !4097
  %134 = load i32, i32* %14, align 4, !dbg !4103
  %_27 = sub i32 0, %134
  %gen28 = add i32 %_27, 1
  %_29 = shl i32 %134, 1
  %_30 = shl i32 %134, 1
  %_31 = sub i32 0, %134
  %gen32 = add i32 %_31, 1
  %_33 = shl i32 %134, 1
  %_34 = shl i32 %134, 1
  %135 = and i32 %134, 1, !dbg !4104
  %136 = load i32, i32* %18, align 4, !dbg !4105
  %_35 = sub i32 0, %135
  %gen36 = add i32 %_35, %136
  %_37 = sub i32 0, %135
  %gen38 = add i32 %_37, %136
  %_39 = shl i32 %135, %136
  %137 = xor i32 %135, %136, !dbg !4106
  %138 = load i32, i32* %17, align 4, !dbg !4107
  %_40 = sub i32 0, %137
  %gen41 = add i32 %_40, %138
  %_42 = shl i32 %137, %138
  %139 = shl i32 %137, %138, !dbg !4108
  %140 = load i32*, i32** %16, align 8, !dbg !4109
  %141 = load i32, i32* %140, align 4, !dbg !4110
  %_43 = sub i32 0, %141
  %gen44 = add i32 %_43, %139
  %_45 = sub i32 0, %141
  %gen46 = add i32 %_45, %139
  %_47 = shl i32 %141, %139
  %_48 = shl i32 %141, %139
  %_49 = sub i32 0, %141
  %gen50 = add i32 %_49, %139
  %_51 = sub i32 0, %141
  %gen52 = add i32 %_51, %139
  %_53 = sub i32 0, %141
  %gen54 = add i32 %_53, %139
  %142 = xor i32 %141, %139, !dbg !4110
  store i32 %142, i32* %140, align 4, !dbg !4110
  %143 = load i32, i32* %18, align 4, !dbg !4111
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !4188 {
  %4 = load i32, i32* @x.59
  %5 = load i32, i32* @y.60
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4191, metadata !DIExpression()), !dbg !4192
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !4193, metadata !DIExpression()), !dbg !4194
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !4195, metadata !DIExpression()), !dbg !4196
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !4197, metadata !DIExpression()), !dbg !4198
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !4199
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !4199
  %17 = load i8, i8* %14, align 1, !dbg !4200
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !4201
  %19 = load i8*, i8** %12, align 8, !dbg !4202
  %20 = load i64, i64* %13, align 8, !dbg !4203
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !4204
  %22 = load i32, i32* @x.59
  %23 = load i32, i32* @y.60
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !4205

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !4206, metadata !DIExpression()), !dbg !4192
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !4238, metadata !DIExpression()), !dbg !4194
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !4239, metadata !DIExpression()), !dbg !4196
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !4240, metadata !DIExpression()), !dbg !4198
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !4199
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !4199
  %35 = load i8, i8* %32, align 1, !dbg !4200
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !4201
  %37 = load i8*, i8** %30, align 8, !dbg !4202
  %38 = load i64, i64* %31, align 8, !dbg !4203
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !4204
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !4241 {
  %5 = load i32, i32* @x.61
  %6 = load i32, i32* @y.62
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4246, metadata !DIExpression()), !dbg !4247
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4248, metadata !DIExpression()), !dbg !4249
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !4250, metadata !DIExpression()), !dbg !4251
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !4252, metadata !DIExpression()), !dbg !4253
  call void @llvm.dbg.declare(metadata i32* %17, metadata !4254, metadata !DIExpression()), !dbg !4255
  %25 = call i32* @__errno_location() #15, !dbg !4256
  %26 = load i32, i32* %25, align 4, !dbg !4256
  store i32 %26, i32* %17, align 4, !dbg !4255
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !4257, metadata !DIExpression()), !dbg !4258
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !4259
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !4258
  %28 = load i32, i32* %13, align 4, !dbg !4260
  %29 = icmp slt i32 %28, 0, !dbg !4262
  %30 = load i32, i32* @x.61
  %31 = load i32, i32* @y.62
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %55, !dbg !4263

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x.61
  %40 = load i32, i32* @y.62
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %38, %originalBB1alteredBB
  call void @abort() #12, !dbg !4264
  %47 = load i32, i32* @x.61
  %48 = load i32, i32* @y.62
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !4264

55:                                               ; preds = %originalBBpart2
  %56 = load i32, i32* @x.61
  %57 = load i32, i32* @y.62
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  %64 = load i32, i32* @nslots, align 4, !dbg !4265
  %65 = load i32, i32* %13, align 4, !dbg !4267
  %66 = icmp sle i32 %64, %65, !dbg !4268
  %67 = load i32, i32* @x.61
  %68 = load i32, i32* @y.62
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %245, !dbg !4269

75:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i8* %19, metadata !4270, metadata !DIExpression()), !dbg !4272
  %76 = load i32, i32* @x.61
  %77 = load i32, i32* @y.62
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4273
  %85 = icmp eq %struct.slotvec* %84, @slotvec0, !dbg !4274
  %86 = zext i1 %85 to i8, !dbg !4272
  store i8 %86, i8* %19, align 1, !dbg !4272
  call void @llvm.dbg.declare(metadata i32* %20, metadata !4275, metadata !DIExpression()), !dbg !4276
  store i32 2147483646, i32* %20, align 4, !dbg !4276
  %87 = load i32, i32* %20, align 4, !dbg !4277
  %88 = load i32, i32* %13, align 4, !dbg !4279
  %89 = icmp slt i32 %87, %88, !dbg !4280
  %90 = load i32, i32* @x.61
  %91 = load i32, i32* @y.62
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %89, label %98, label %115, !dbg !4281

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.61
  %100 = load i32, i32* @y.62
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  call void @xalloc_die() #14, !dbg !4282
  %107 = load i32, i32* @x.61
  %108 = load i32, i32* @y.62
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !4282

115:                                              ; preds = %originalBBpart212
  %116 = load i32, i32* @x.61
  %117 = load i32, i32* @y.62
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i8, i8* %19, align 1, !dbg !4283
  %125 = trunc i8 %124 to i1, !dbg !4283
  %126 = load i32, i32* @x.61
  %127 = load i32, i32* @y.62
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %125, label %134, label %151, !dbg !4283

134:                                              ; preds = %originalBBpart220
  %135 = load i32, i32* @x.61
  %136 = load i32, i32* @y.62
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %134, %originalBB22alteredBB
  %143 = load i32, i32* @x.61
  %144 = load i32, i32* @y.62
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %169, !dbg !4283

151:                                              ; preds = %originalBBpart220
  %152 = load i32, i32* @x.61
  %153 = load i32, i32* @y.62
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %151, %originalBB26alteredBB
  %160 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4284
  %161 = load i32, i32* @x.61
  %162 = load i32, i32* @y.62
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %169, !dbg !4283

169:                                              ; preds = %originalBBpart228, %originalBBpart224
  %170 = phi %struct.slotvec* [ null, %originalBBpart224 ], [ %160, %originalBBpart228 ], !dbg !4283
  %171 = load i32, i32* @x.61
  %172 = load i32, i32* @y.62
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %169, %originalBB30alteredBB
  %179 = bitcast %struct.slotvec* %170 to i8*, !dbg !4283
  %180 = load i32, i32* %13, align 4, !dbg !4285
  %181 = add nsw i32 %180, 1, !dbg !4286
  %182 = sext i32 %181 to i64, !dbg !4287
  %183 = mul i64 %182, 16, !dbg !4288
  %184 = call i8* @xrealloc(i8* %179, i64 %183), !dbg !4289
  %185 = bitcast i8* %184 to %struct.slotvec*, !dbg !4289
  store %struct.slotvec* %185, %struct.slotvec** %18, align 8, !dbg !4290
  store %struct.slotvec* %185, %struct.slotvec** @slotvec, align 8, !dbg !4291
  %186 = load i8, i8* %19, align 1, !dbg !4292
  %187 = trunc i8 %186 to i1, !dbg !4292
  %188 = load i32, i32* @x.61
  %189 = load i32, i32* @y.62
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart245, label %originalBB30alteredBB

originalBBpart245:                                ; preds = %originalBB30
  br i1 %187, label %196, label %215, !dbg !4294

196:                                              ; preds = %originalBBpart245
  %197 = load i32, i32* @x.61
  %198 = load i32, i32* @y.62
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %196, %originalBB47alteredBB
  %205 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4295
  %206 = bitcast %struct.slotvec* %205 to i8*, !dbg !4296
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %206, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !4296
  %207 = load i32, i32* @x.61
  %208 = load i32, i32* @y.62
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %215, !dbg !4297

215:                                              ; preds = %originalBBpart249, %originalBBpart245
  %216 = load i32, i32* @x.61
  %217 = load i32, i32* @y.62
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %215, %originalBB51alteredBB
  %224 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4298
  %225 = load i32, i32* @nslots, align 4, !dbg !4299
  %226 = sext i32 %225 to i64, !dbg !4300
  %227 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %224, i64 %226, !dbg !4300
  %228 = bitcast %struct.slotvec* %227 to i8*, !dbg !4301
  %229 = load i32, i32* %13, align 4, !dbg !4302
  %230 = add nsw i32 %229, 1, !dbg !4303
  %231 = load i32, i32* @nslots, align 4, !dbg !4304
  %232 = sub nsw i32 %230, %231, !dbg !4305
  %233 = sext i32 %232 to i64, !dbg !4306
  %234 = mul i64 %233, 16, !dbg !4307
  call void @llvm.memset.p0i8.i64(i8* align 8 %228, i8 0, i64 %234, i1 false), !dbg !4301
  %235 = load i32, i32* %13, align 4, !dbg !4308
  %236 = add nsw i32 %235, 1, !dbg !4309
  store i32 %236, i32* @nslots, align 4, !dbg !4310
  %237 = load i32, i32* @x.61
  %238 = load i32, i32* @y.62
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart274, label %originalBB51alteredBB

originalBBpart274:                                ; preds = %originalBB51
  br label %245, !dbg !4311

245:                                              ; preds = %originalBBpart274, %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %21, metadata !4312, metadata !DIExpression()), !dbg !4314
  %246 = load i32, i32* @x.61
  %247 = load i32, i32* @y.62
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %245, %originalBB76alteredBB
  %254 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4315
  %255 = load i32, i32* %13, align 4, !dbg !4316
  %256 = sext i32 %255 to i64, !dbg !4315
  %257 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %254, i64 %256, !dbg !4315
  %258 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %257, i32 0, i32 0, !dbg !4317
  %259 = load i64, i64* %258, align 8, !dbg !4317
  store i64 %259, i64* %21, align 8, !dbg !4314
  call void @llvm.dbg.declare(metadata i8** %22, metadata !4318, metadata !DIExpression()), !dbg !4319
  %260 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4320
  %261 = load i32, i32* %13, align 4, !dbg !4321
  %262 = sext i32 %261 to i64, !dbg !4320
  %263 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %260, i64 %262, !dbg !4320
  %264 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %263, i32 0, i32 1, !dbg !4322
  %265 = load i8*, i8** %264, align 8, !dbg !4322
  store i8* %265, i8** %22, align 8, !dbg !4319
  call void @llvm.dbg.declare(metadata i32* %23, metadata !4323, metadata !DIExpression()), !dbg !4324
  %266 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4325
  %267 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %266, i32 0, i32 1, !dbg !4326
  %268 = load i32, i32* %267, align 4, !dbg !4326
  %269 = or i32 %268, 1, !dbg !4327
  store i32 %269, i32* %23, align 4, !dbg !4324
  call void @llvm.dbg.declare(metadata i64* %24, metadata !4328, metadata !DIExpression()), !dbg !4329
  %270 = load i8*, i8** %22, align 8, !dbg !4330
  %271 = load i64, i64* %21, align 8, !dbg !4331
  %272 = load i8*, i8** %14, align 8, !dbg !4332
  %273 = load i64, i64* %15, align 8, !dbg !4333
  %274 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4334
  %275 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %274, i32 0, i32 0, !dbg !4335
  %276 = load i32, i32* %275, align 8, !dbg !4335
  %277 = load i32, i32* %23, align 4, !dbg !4336
  %278 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4337
  %279 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %278, i32 0, i32 2, !dbg !4338
  %280 = getelementptr inbounds [8 x i32], [8 x i32]* %279, i64 0, i64 0, !dbg !4337
  %281 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4339
  %282 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %281, i32 0, i32 3, !dbg !4340
  %283 = load i8*, i8** %282, align 8, !dbg !4340
  %284 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4341
  %285 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %284, i32 0, i32 4, !dbg !4342
  %286 = load i8*, i8** %285, align 8, !dbg !4342
  %287 = call i64 @quotearg_buffer_restyled(i8* %270, i64 %271, i8* %272, i64 %273, i32 %276, i32 %277, i32* %280, i8* %283, i8* %286), !dbg !4343
  store i64 %287, i64* %24, align 8, !dbg !4329
  %288 = load i64, i64* %21, align 8, !dbg !4344
  %289 = load i64, i64* %24, align 8, !dbg !4346
  %290 = icmp ule i64 %288, %289, !dbg !4347
  %291 = load i32, i32* @x.61
  %292 = load i32, i32* @y.62
  %293 = sub i32 %291, 1
  %294 = mul i32 %291, %293
  %295 = urem i32 %294, 2
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %296, %297
  br i1 %298, label %originalBBpart286, label %originalBB76alteredBB

originalBBpart286:                                ; preds = %originalBB76
  br i1 %290, label %299, label %385, !dbg !4348

299:                                              ; preds = %originalBBpart286
  %300 = load i32, i32* @x.61
  %301 = load i32, i32* @y.62
  %302 = sub i32 %300, 1
  %303 = mul i32 %300, %302
  %304 = urem i32 %303, 2
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %305, %306
  br i1 %307, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %299, %originalBB88alteredBB
  %308 = load i64, i64* %24, align 8, !dbg !4349
  %309 = add i64 %308, 1, !dbg !4351
  store i64 %309, i64* %21, align 8, !dbg !4352
  %310 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4353
  %311 = load i32, i32* %13, align 4, !dbg !4354
  %312 = sext i32 %311 to i64, !dbg !4353
  %313 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %310, i64 %312, !dbg !4353
  %314 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %313, i32 0, i32 0, !dbg !4355
  store i64 %309, i64* %314, align 8, !dbg !4356
  %315 = load i8*, i8** %22, align 8, !dbg !4357
  %316 = icmp ne i8* %315, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !4359
  %317 = load i32, i32* @x.61
  %318 = load i32, i32* @y.62
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBBpart294, label %originalBB88alteredBB

originalBBpart294:                                ; preds = %originalBB88
  br i1 %316, label %325, label %343, !dbg !4360

325:                                              ; preds = %originalBBpart294
  %326 = load i32, i32* @x.61
  %327 = load i32, i32* @y.62
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %325, %originalBB96alteredBB
  %334 = load i8*, i8** %22, align 8, !dbg !4361
  call void @free(i8* %334) #10, !dbg !4362
  %335 = load i32, i32* @x.61
  %336 = load i32, i32* @y.62
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %343, !dbg !4362

343:                                              ; preds = %originalBBpart298, %originalBBpart294
  %344 = load i32, i32* @x.61
  %345 = load i32, i32* @y.62
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %343, %originalBB100alteredBB
  %352 = load i64, i64* %21, align 8, !dbg !4363
  %353 = call noalias i8* @xcharalloc(i64 %352), !dbg !4364
  store i8* %353, i8** %22, align 8, !dbg !4365
  %354 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4366
  %355 = load i32, i32* %13, align 4, !dbg !4367
  %356 = sext i32 %355 to i64, !dbg !4366
  %357 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %354, i64 %356, !dbg !4366
  %358 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %357, i32 0, i32 1, !dbg !4368
  store i8* %353, i8** %358, align 8, !dbg !4369
  %359 = load i8*, i8** %22, align 8, !dbg !4370
  %360 = load i64, i64* %21, align 8, !dbg !4371
  %361 = load i8*, i8** %14, align 8, !dbg !4372
  %362 = load i64, i64* %15, align 8, !dbg !4373
  %363 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4374
  %364 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %363, i32 0, i32 0, !dbg !4375
  %365 = load i32, i32* %364, align 8, !dbg !4375
  %366 = load i32, i32* %23, align 4, !dbg !4376
  %367 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4377
  %368 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %367, i32 0, i32 2, !dbg !4378
  %369 = getelementptr inbounds [8 x i32], [8 x i32]* %368, i64 0, i64 0, !dbg !4377
  %370 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4379
  %371 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %370, i32 0, i32 3, !dbg !4380
  %372 = load i8*, i8** %371, align 8, !dbg !4380
  %373 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4381
  %374 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %373, i32 0, i32 4, !dbg !4382
  %375 = load i8*, i8** %374, align 8, !dbg !4382
  %376 = call i64 @quotearg_buffer_restyled(i8* %359, i64 %360, i8* %361, i64 %362, i32 %365, i32 %366, i32* %369, i8* %372, i8* %375), !dbg !4383
  %377 = load i32, i32* @x.61
  %378 = load i32, i32* @y.62
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br label %385, !dbg !4384

385:                                              ; preds = %originalBBpart2102, %originalBBpart286
  %386 = load i32, i32* @x.61
  %387 = load i32, i32* @y.62
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %385, %originalBB104alteredBB
  %394 = load i32, i32* %17, align 4, !dbg !4385
  %395 = call i32* @__errno_location() #15, !dbg !4386
  store i32 %394, i32* %395, align 4, !dbg !4387
  %396 = load i8*, i8** %22, align 8, !dbg !4388
  %397 = load i32, i32* @x.61
  %398 = load i32, i32* @y.62
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBBpart2106, label %originalBB104alteredBB

originalBBpart2106:                               ; preds = %originalBB104
  ret i8* %396, !dbg !4389

originalBBalteredBB:                              ; preds = %originalBB, %4
  %405 = alloca i32, align 4
  %406 = alloca i8*, align 8
  %407 = alloca i64, align 8
  %408 = alloca %struct.quoting_options*, align 8
  %409 = alloca i32, align 4
  %410 = alloca %struct.slotvec*, align 8
  %411 = alloca i8, align 1
  %412 = alloca i32, align 4
  %413 = alloca i64, align 8
  %414 = alloca i8*, align 8
  %415 = alloca i32, align 4
  %416 = alloca i64, align 8
  store i32 %0, i32* %405, align 4
  call void @llvm.dbg.declare(metadata i32* %405, metadata !4390, metadata !DIExpression()), !dbg !4247
  store i8* %1, i8** %406, align 8
  call void @llvm.dbg.declare(metadata i8** %406, metadata !4426, metadata !DIExpression()), !dbg !4249
  store i64 %2, i64* %407, align 8
  call void @llvm.dbg.declare(metadata i64* %407, metadata !4427, metadata !DIExpression()), !dbg !4251
  store %struct.quoting_options* %3, %struct.quoting_options** %408, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %408, metadata !4428, metadata !DIExpression()), !dbg !4253
  call void @llvm.dbg.declare(metadata i32* %409, metadata !4429, metadata !DIExpression()), !dbg !4255
  %417 = call i32* @__errno_location() #15, !dbg !4256
  %418 = load i32, i32* %417, align 4, !dbg !4256
  store i32 %418, i32* %409, align 4, !dbg !4255
  call void @llvm.dbg.declare(metadata %struct.slotvec** %410, metadata !4430, metadata !DIExpression()), !dbg !4258
  %419 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !4259
  store %struct.slotvec* %419, %struct.slotvec** %410, align 8, !dbg !4258
  %420 = load i32, i32* %405, align 4, !dbg !4260
  %421 = icmp slt i32 %420, 0, !dbg !4262
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  call void @abort() #12, !dbg !4264
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  %422 = load i32, i32* @nslots, align 4, !dbg !4265
  %423 = load i32, i32* %13, align 4, !dbg !4267
  %424 = icmp sle i32 %422, %423, !dbg !4268
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %425 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4273
  %426 = icmp eq %struct.slotvec* %425, @slotvec0, !dbg !4274
  %427 = zext i1 %426 to i8, !dbg !4272
  store i8 %427, i8* %19, align 1, !dbg !4272
  call void @llvm.dbg.declare(metadata !4, metadata !4431, metadata !DIExpression()), !dbg !4276
  store i32 2147483646, i32* %20, align 4, !dbg !4276
  %428 = load i32, i32* %20, align 4, !dbg !4277
  %429 = load i32, i32* %13, align 4, !dbg !4279
  %430 = icmp slt i32 %428, %429, !dbg !4280
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  call void @xalloc_die() #14, !dbg !4282
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %431 = load i8, i8* %19, align 1, !dbg !4283
  %432 = trunc i8 %431 to i1, !dbg !4283
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %134
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %151
  %433 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4284
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %169
  %434 = bitcast %struct.slotvec* %170 to i8*, !dbg !4283
  %435 = load i32, i32* %13, align 4, !dbg !4285
  %_ = sub i32 %435, 1
  %gen = mul i32 %_, 1
  %_31 = shl i32 %435, 1
  %_32 = shl i32 %435, 1
  %_33 = shl i32 %435, 1
  %436 = add nsw i32 %435, 1, !dbg !4286
  %437 = sext i32 %436 to i64, !dbg !4287
  %_34 = sub i64 0, %437
  %gen35 = add i64 %_34, 16
  %_36 = sub i64 %437, 16
  %gen37 = mul i64 %_36, 16
  %_38 = sub i64 %437, 16
  %gen39 = mul i64 %_38, 16
  %_40 = shl i64 %437, 16
  %_41 = shl i64 %437, 16
  %_42 = sub i64 %437, 16
  %gen43 = mul i64 %_42, 16
  %438 = mul i64 %437, 16, !dbg !4288
  %439 = call i8* @xrealloc(i8* %434, i64 %438), !dbg !4289
  %440 = bitcast i8* %439 to %struct.slotvec*, !dbg !4289
  store %struct.slotvec* %440, %struct.slotvec** %18, align 8, !dbg !4290
  store %struct.slotvec* %440, %struct.slotvec** @slotvec, align 8, !dbg !4291
  %441 = load i8, i8* %19, align 1, !dbg !4292
  %442 = trunc i8 %441 to i1, !dbg !4292
  br label %originalBB30

originalBB47alteredBB:                            ; preds = %originalBB47, %196
  %443 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4295
  %444 = bitcast %struct.slotvec* %443 to i8*, !dbg !4296
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %444, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !4296
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %215
  %445 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4298
  %446 = load i32, i32* @nslots, align 4, !dbg !4299
  %447 = sext i32 %446 to i64, !dbg !4300
  %448 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %445, i64 %447, !dbg !4300
  %449 = bitcast %struct.slotvec* %448 to i8*, !dbg !4301
  %450 = load i32, i32* %13, align 4, !dbg !4302
  %_52 = shl i32 %450, 1
  %_53 = shl i32 %450, 1
  %_54 = sub i32 0, %450
  %gen55 = add i32 %_54, 1
  %_56 = sub i32 %450, 1
  %gen57 = mul i32 %_56, 1
  %_58 = sub i32 0, %450
  %gen59 = add i32 %_58, 1
  %451 = add nsw i32 %450, 1, !dbg !4303
  %452 = load i32, i32* @nslots, align 4, !dbg !4304
  %_60 = sub i32 %451, %452
  %gen61 = mul i32 %_60, %452
  %_62 = sub i32 0, %451
  %gen63 = add i32 %_62, %452
  %_64 = shl i32 %451, %452
  %_65 = shl i32 %451, %452
  %453 = sub nsw i32 %451, %452, !dbg !4305
  %454 = sext i32 %453 to i64, !dbg !4306
  %_66 = shl i64 %454, 16
  %_67 = sub i64 0, %454
  %gen68 = add i64 %_67, 16
  %455 = mul i64 %454, 16, !dbg !4307
  call void @llvm.memset.p0i8.i64(i8* align 8 %449, i8 0, i64 %455, i1 false), !dbg !4301
  %456 = load i32, i32* %13, align 4, !dbg !4308
  %_69 = sub i32 %456, 1
  %gen70 = mul i32 %_69, 1
  %_71 = sub i32 %456, 1
  %gen72 = mul i32 %_71, 1
  %457 = add nsw i32 %456, 1, !dbg !4309
  store i32 %457, i32* @nslots, align 4, !dbg !4310
  br label %originalBB51

originalBB76alteredBB:                            ; preds = %originalBB76, %245
  %458 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4315
  %459 = load i32, i32* %13, align 4, !dbg !4316
  %460 = sext i32 %459 to i64, !dbg !4315
  %461 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %458, i64 %460, !dbg !4315
  %462 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %461, i32 0, i32 0, !dbg !4317
  %463 = load i64, i64* %462, align 8, !dbg !4317
  store i64 %463, i64* %21, align 8, !dbg !4314
  call void @llvm.dbg.declare(metadata !4, metadata !4469, metadata !DIExpression()), !dbg !4319
  %464 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4320
  %465 = load i32, i32* %13, align 4, !dbg !4321
  %466 = sext i32 %465 to i64, !dbg !4320
  %467 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %464, i64 %466, !dbg !4320
  %468 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %467, i32 0, i32 1, !dbg !4322
  %469 = load i8*, i8** %468, align 8, !dbg !4322
  store i8* %469, i8** %22, align 8, !dbg !4319
  call void @llvm.dbg.declare(metadata !4, metadata !4506, metadata !DIExpression()), !dbg !4324
  %470 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4325
  %471 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %470, i32 0, i32 1, !dbg !4326
  %472 = load i32, i32* %471, align 4, !dbg !4326
  %_77 = sub i32 %472, 1
  %gen78 = mul i32 %_77, 1
  %_79 = sub i32 0, %472
  %gen80 = add i32 %_79, 1
  %_81 = sub i32 0, %472
  %gen82 = add i32 %_81, 1
  %_83 = sub i32 %472, 1
  %gen84 = mul i32 %_83, 1
  %473 = or i32 %472, 1, !dbg !4327
  store i32 %473, i32* %23, align 4, !dbg !4324
  call void @llvm.dbg.declare(metadata !4, metadata !4507, metadata !DIExpression()), !dbg !4329
  %474 = load i8*, i8** %22, align 8, !dbg !4330
  %475 = load i64, i64* %21, align 8, !dbg !4331
  %476 = load i8*, i8** %14, align 8, !dbg !4332
  %477 = load i64, i64* %15, align 8, !dbg !4333
  %478 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4334
  %479 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %478, i32 0, i32 0, !dbg !4335
  %480 = load i32, i32* %479, align 8, !dbg !4335
  %481 = load i32, i32* %23, align 4, !dbg !4336
  %482 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4337
  %483 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %482, i32 0, i32 2, !dbg !4338
  %484 = getelementptr inbounds [8 x i32], [8 x i32]* %483, i64 0, i64 0, !dbg !4337
  %485 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4339
  %486 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %485, i32 0, i32 3, !dbg !4340
  %487 = load i8*, i8** %486, align 8, !dbg !4340
  %488 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4341
  %489 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %488, i32 0, i32 4, !dbg !4342
  %490 = load i8*, i8** %489, align 8, !dbg !4342
  %491 = call i64 @quotearg_buffer_restyled(i8* %474, i64 %475, i8* %476, i64 %477, i32 %480, i32 %481, i32* %484, i8* %487, i8* %490), !dbg !4343
  store i64 %491, i64* %24, align 8, !dbg !4329
  %492 = load i64, i64* %21, align 8, !dbg !4344
  %493 = load i64, i64* %24, align 8, !dbg !4346
  %494 = icmp ule i64 %492, %493, !dbg !4347
  br label %originalBB76

originalBB88alteredBB:                            ; preds = %originalBB88, %299
  %495 = load i64, i64* %24, align 8, !dbg !4349
  %_89 = sub i64 %495, 1
  %gen90 = mul i64 %_89, 1
  %_91 = sub i64 0, %495
  %gen92 = add i64 %_91, 1
  %496 = add i64 %495, 1, !dbg !4351
  store i64 %496, i64* %21, align 8, !dbg !4352
  %497 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4353
  %498 = load i32, i32* %13, align 4, !dbg !4354
  %499 = sext i32 %498 to i64, !dbg !4353
  %500 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %497, i64 %499, !dbg !4353
  %501 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %500, i32 0, i32 0, !dbg !4355
  store i64 %496, i64* %501, align 8, !dbg !4356
  %502 = load i8*, i8** %22, align 8, !dbg !4357
  %503 = icmp ne i8* %502, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !4359
  br label %originalBB88

originalBB96alteredBB:                            ; preds = %originalBB96, %325
  %504 = load i8*, i8** %22, align 8, !dbg !4361
  call void @free(i8* %504) #10, !dbg !4362
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %343
  %505 = load i64, i64* %21, align 8, !dbg !4363
  %506 = call noalias i8* @xcharalloc(i64 %505), !dbg !4364
  store i8* %506, i8** %22, align 8, !dbg !4365
  %507 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !4366
  %508 = load i32, i32* %13, align 4, !dbg !4367
  %509 = sext i32 %508 to i64, !dbg !4366
  %510 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %507, i64 %509, !dbg !4366
  %511 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %510, i32 0, i32 1, !dbg !4368
  store i8* %506, i8** %511, align 8, !dbg !4369
  %512 = load i8*, i8** %22, align 8, !dbg !4370
  %513 = load i64, i64* %21, align 8, !dbg !4371
  %514 = load i8*, i8** %14, align 8, !dbg !4372
  %515 = load i64, i64* %15, align 8, !dbg !4373
  %516 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4374
  %517 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %516, i32 0, i32 0, !dbg !4375
  %518 = load i32, i32* %517, align 8, !dbg !4375
  %519 = load i32, i32* %23, align 4, !dbg !4376
  %520 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4377
  %521 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %520, i32 0, i32 2, !dbg !4378
  %522 = getelementptr inbounds [8 x i32], [8 x i32]* %521, i64 0, i64 0, !dbg !4377
  %523 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4379
  %524 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %523, i32 0, i32 3, !dbg !4380
  %525 = load i8*, i8** %524, align 8, !dbg !4380
  %526 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !4381
  %527 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %526, i32 0, i32 4, !dbg !4382
  %528 = load i8*, i8** %527, align 8, !dbg !4382
  %529 = call i64 @quotearg_buffer_restyled(i8* %512, i64 %513, i8* %514, i64 %515, i32 %518, i32 %519, i32* %522, i8* %525, i8* %528), !dbg !4383
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %385
  %530 = load i32, i32* %17, align 4, !dbg !4385
  %531 = call i32* @__errno_location() #15, !dbg !4386
  store i32 %530, i32* %531, align 4, !dbg !4387
  %532 = load i8*, i8** %22, align 8, !dbg !4388
  br label %originalBB104
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !4508 {
  %10 = load i32, i32* @x.63
  %11 = load i32, i32* @y.64
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !4513, metadata !DIExpression()), !dbg !4514
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !4515, metadata !DIExpression()), !dbg !4516
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !4517, metadata !DIExpression()), !dbg !4518
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !4519, metadata !DIExpression()), !dbg !4520
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !4521, metadata !DIExpression()), !dbg !4522
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !4523, metadata !DIExpression()), !dbg !4524
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !4525, metadata !DIExpression()), !dbg !4526
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !4527, metadata !DIExpression()), !dbg !4528
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !4529, metadata !DIExpression()), !dbg !4530
  call void @llvm.dbg.declare(metadata i64* %28, metadata !4531, metadata !DIExpression()), !dbg !4532
  call void @llvm.dbg.declare(metadata i64* %29, metadata !4533, metadata !DIExpression()), !dbg !4534
  store i64 0, i64* %29, align 8, !dbg !4534
  call void @llvm.dbg.declare(metadata i64* %30, metadata !4535, metadata !DIExpression()), !dbg !4536
  store i64 0, i64* %30, align 8, !dbg !4536
  call void @llvm.dbg.declare(metadata i8** %31, metadata !4537, metadata !DIExpression()), !dbg !4538
  store i8* null, i8** %31, align 8, !dbg !4538
  call void @llvm.dbg.declare(metadata i64* %32, metadata !4539, metadata !DIExpression()), !dbg !4540
  store i64 0, i64* %32, align 8, !dbg !4540
  call void @llvm.dbg.declare(metadata i8* %33, metadata !4541, metadata !DIExpression()), !dbg !4542
  store i8 0, i8* %33, align 1, !dbg !4542
  call void @llvm.dbg.declare(metadata i8* %34, metadata !4543, metadata !DIExpression()), !dbg !4544
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !4545
  %52 = icmp eq i64 %51, 1, !dbg !4546
  %53 = zext i1 %52 to i8, !dbg !4544
  store i8 %53, i8* %34, align 1, !dbg !4544
  call void @llvm.dbg.declare(metadata i8* %35, metadata !4547, metadata !DIExpression()), !dbg !4548
  %54 = load i32, i32* %24, align 4, !dbg !4549
  %55 = and i32 %54, 2, !dbg !4550
  %56 = icmp ne i32 %55, 0, !dbg !4551
  %57 = zext i1 %56 to i8, !dbg !4548
  store i8 %57, i8* %35, align 1, !dbg !4548
  call void @llvm.dbg.declare(metadata i8* %36, metadata !4552, metadata !DIExpression()), !dbg !4553
  store i8 0, i8* %36, align 1, !dbg !4553
  call void @llvm.dbg.declare(metadata i8* %37, metadata !4554, metadata !DIExpression()), !dbg !4555
  store i8 0, i8* %37, align 1, !dbg !4555
  call void @llvm.dbg.declare(metadata i8* %38, metadata !4556, metadata !DIExpression()), !dbg !4557
  store i8 1, i8* %38, align 1, !dbg !4557
  %58 = load i32, i32* @x.63
  %59 = load i32, i32* @y.64
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !4558

66:                                               ; preds = %originalBBpart21983, %originalBBpart2
  call void @llvm.dbg.label(metadata !4559), !dbg !4560
  %67 = load i32, i32* @x.63
  %68 = load i32, i32* @y.64
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %66, %originalBB11alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !4561
  %76 = load i32, i32* @x.63
  %77 = load i32, i32* @y.64
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  switch i32 %75, label %728 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %230
    i32 8, label %247
    i32 9, label %247
    i32 10, label %247
    i32 3, label %495
    i32 1, label %512
    i32 4, label %529
    i32 2, label %582
    i32 0, label %711
  ], !dbg !4562

84:                                               ; preds = %originalBBpart213
  %85 = load i32, i32* @x.63
  %86 = load i32, i32* @y.64
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %84, %originalBB15alteredBB
  store i32 5, i32* %23, align 4, !dbg !4563
  store i8 1, i8* %35, align 1, !dbg !4565
  %93 = load i32, i32* @x.63
  %94 = load i32, i32* @y.64
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %101, !dbg !4566

101:                                              ; preds = %originalBBpart217, %originalBBpart213
  %102 = load i32, i32* @x.63
  %103 = load i32, i32* @y.64
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %101, %originalBB19alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !4567
  %111 = trunc i8 %110 to i1, !dbg !4567
  %112 = load i32, i32* @x.63
  %113 = load i32, i32* @y.64
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %111, label %213, label %120, !dbg !4569

120:                                              ; preds = %originalBBpart221
  %121 = load i32, i32* @x.63
  %122 = load i32, i32* @y.64
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %120, %originalBB23alteredBB
  %129 = load i32, i32* @x.63
  %130 = load i32, i32* @y.64
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %137, !dbg !4570

137:                                              ; preds = %originalBBpart225
  %138 = load i32, i32* @x.63
  %139 = load i32, i32* @y.64
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %137, %originalBB27alteredBB
  %146 = load i64, i64* %29, align 8, !dbg !4571
  %147 = load i64, i64* %20, align 8, !dbg !4571
  %148 = icmp ult i64 %146, %147, !dbg !4571
  %149 = load i32, i32* @x.63
  %150 = load i32, i32* @y.64
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %148, label %157, label %177, !dbg !4574

157:                                              ; preds = %originalBBpart229
  %158 = load i32, i32* @x.63
  %159 = load i32, i32* @y.64
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %157, %originalBB31alteredBB
  %166 = load i8*, i8** %19, align 8, !dbg !4571
  %167 = load i64, i64* %29, align 8, !dbg !4571
  %168 = getelementptr inbounds i8, i8* %166, i64 %167, !dbg !4571
  store i8 34, i8* %168, align 1, !dbg !4571
  %169 = load i32, i32* @x.63
  %170 = load i32, i32* @y.64
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br label %177, !dbg !4571

177:                                              ; preds = %originalBBpart233, %originalBBpart229
  %178 = load i32, i32* @x.63
  %179 = load i32, i32* @y.64
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %177, %originalBB35alteredBB
  %186 = load i64, i64* %29, align 8, !dbg !4574
  %187 = add i64 %186, 1, !dbg !4574
  store i64 %187, i64* %29, align 8, !dbg !4574
  %188 = load i32, i32* @x.63
  %189 = load i32, i32* @y.64
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart239, label %originalBB35alteredBB

originalBBpart239:                                ; preds = %originalBB35
  br label %196, !dbg !4574

196:                                              ; preds = %originalBBpart239
  %197 = load i32, i32* @x.63
  %198 = load i32, i32* @y.64
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %196, %originalBB41alteredBB
  %205 = load i32, i32* @x.63
  %206 = load i32, i32* @y.64
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br label %213, !dbg !4574

213:                                              ; preds = %originalBBpart243, %originalBBpart221
  %214 = load i32, i32* @x.63
  %215 = load i32, i32* @y.64
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %213, %originalBB45alteredBB
  store i8 1, i8* %33, align 1, !dbg !4575
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.120, i64 0, i64 0), i8** %31, align 8, !dbg !4576
  store i64 1, i64* %32, align 8, !dbg !4577
  %222 = load i32, i32* @x.63
  %223 = load i32, i32* @y.64
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br label %745, !dbg !4578

230:                                              ; preds = %originalBBpart213
  %231 = load i32, i32* @x.63
  %232 = load i32, i32* @y.64
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %230, %originalBB49alteredBB
  store i8 1, i8* %33, align 1, !dbg !4579
  store i8 0, i8* %35, align 1, !dbg !4580
  %239 = load i32, i32* @x.63
  %240 = load i32, i32* @y.64
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br label %745, !dbg !4581

247:                                              ; preds = %originalBBpart213, %originalBBpart213, %originalBBpart213
  %248 = load i32, i32* @x.63
  %249 = load i32, i32* @y.64
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %247, %originalBB53alteredBB
  %256 = load i32, i32* %23, align 4, !dbg !4582
  %257 = icmp ne i32 %256, 10, !dbg !4585
  %258 = load i32, i32* @x.63
  %259 = load i32, i32* @y.64
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br i1 %257, label %266, label %287, !dbg !4586

266:                                              ; preds = %originalBBpart255
  %267 = load i32, i32* @x.63
  %268 = load i32, i32* @y.64
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %266, %originalBB57alteredBB
  %275 = load i32, i32* %23, align 4, !dbg !4587
  %276 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.121, i64 0, i64 0), i32 %275), !dbg !4589
  store i8* %276, i8** %26, align 8, !dbg !4590
  %277 = load i32, i32* %23, align 4, !dbg !4591
  %278 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i32 %277), !dbg !4592
  store i8* %278, i8** %27, align 8, !dbg !4593
  %279 = load i32, i32* @x.63
  %280 = load i32, i32* @y.64
  %281 = sub i32 %279, 1
  %282 = mul i32 %279, %281
  %283 = urem i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %284, %285
  br i1 %286, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br label %287, !dbg !4594

287:                                              ; preds = %originalBBpart259, %originalBBpart255
  %288 = load i32, i32* @x.63
  %289 = load i32, i32* @y.64
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %287, %originalBB61alteredBB
  %296 = load i8, i8* %35, align 1, !dbg !4595
  %297 = trunc i8 %296 to i1, !dbg !4595
  %298 = load i32, i32* @x.63
  %299 = load i32, i32* @y.64
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br i1 %297, label %475, label %306, !dbg !4597

306:                                              ; preds = %originalBBpart263
  %307 = load i32, i32* @x.63
  %308 = load i32, i32* @y.64
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %306, %originalBB65alteredBB
  %315 = load i8*, i8** %26, align 8, !dbg !4598
  store i8* %315, i8** %31, align 8, !dbg !4600
  %316 = load i32, i32* @x.63
  %317 = load i32, i32* @y.64
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br label %324, !dbg !4601

324:                                              ; preds = %originalBBpart2113, %originalBBpart267
  %325 = load i32, i32* @x.63
  %326 = load i32, i32* @y.64
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %324, %originalBB69alteredBB
  %333 = load i8*, i8** %31, align 8, !dbg !4602
  %334 = load i8, i8* %333, align 1, !dbg !4604
  %335 = icmp ne i8 %334, 0, !dbg !4605
  %336 = load i32, i32* @x.63
  %337 = load i32, i32* @y.64
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br i1 %335, label %344, label %458, !dbg !4605

344:                                              ; preds = %originalBBpart271
  %345 = load i32, i32* @x.63
  %346 = load i32, i32* @y.64
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %344, %originalBB73alteredBB
  %353 = load i32, i32* @x.63
  %354 = load i32, i32* @y.64
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br label %361, !dbg !4606

361:                                              ; preds = %originalBBpart275
  %362 = load i32, i32* @x.63
  %363 = load i32, i32* @y.64
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %361, %originalBB77alteredBB
  %370 = load i64, i64* %29, align 8, !dbg !4607
  %371 = load i64, i64* %20, align 8, !dbg !4607
  %372 = icmp ult i64 %370, %371, !dbg !4607
  %373 = load i32, i32* @x.63
  %374 = load i32, i32* @y.64
  %375 = sub i32 %373, 1
  %376 = mul i32 %373, %375
  %377 = urem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %378, %379
  br i1 %380, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br i1 %372, label %381, label %403, !dbg !4610

381:                                              ; preds = %originalBBpart279
  %382 = load i32, i32* @x.63
  %383 = load i32, i32* @y.64
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %381, %originalBB81alteredBB
  %390 = load i8*, i8** %31, align 8, !dbg !4607
  %391 = load i8, i8* %390, align 1, !dbg !4607
  %392 = load i8*, i8** %19, align 8, !dbg !4607
  %393 = load i64, i64* %29, align 8, !dbg !4607
  %394 = getelementptr inbounds i8, i8* %392, i64 %393, !dbg !4607
  store i8 %391, i8* %394, align 1, !dbg !4607
  %395 = load i32, i32* @x.63
  %396 = load i32, i32* @y.64
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %403, !dbg !4607

403:                                              ; preds = %originalBBpart283, %originalBBpart279
  %404 = load i32, i32* @x.63
  %405 = load i32, i32* @y.64
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %403, %originalBB85alteredBB
  %412 = load i64, i64* %29, align 8, !dbg !4610
  %413 = add i64 %412, 1, !dbg !4610
  store i64 %413, i64* %29, align 8, !dbg !4610
  %414 = load i32, i32* @x.63
  %415 = load i32, i32* @y.64
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart2105, label %originalBB85alteredBB

originalBBpart2105:                               ; preds = %originalBB85
  br label %422, !dbg !4610

422:                                              ; preds = %originalBBpart2105
  %423 = load i32, i32* @x.63
  %424 = load i32, i32* @y.64
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %422, %originalBB107alteredBB
  %431 = load i32, i32* @x.63
  %432 = load i32, i32* @y.64
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br label %439, !dbg !4610

439:                                              ; preds = %originalBBpart2109
  %440 = load i32, i32* @x.63
  %441 = load i32, i32* @y.64
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %439, %originalBB111alteredBB
  %448 = load i8*, i8** %31, align 8, !dbg !4611
  %449 = getelementptr inbounds i8, i8* %448, i32 1, !dbg !4611
  store i8* %449, i8** %31, align 8, !dbg !4611
  %450 = load i32, i32* @x.63
  %451 = load i32, i32* @y.64
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br label %324, !dbg !4612, !llvm.loop !4613

458:                                              ; preds = %originalBBpart271
  %459 = load i32, i32* @x.63
  %460 = load i32, i32* @y.64
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %458, %originalBB115alteredBB
  %467 = load i32, i32* @x.63
  %468 = load i32, i32* @y.64
  %469 = sub i32 %467, 1
  %470 = mul i32 %467, %469
  %471 = urem i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %472, %473
  br i1 %474, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  br label %475, !dbg !4614

475:                                              ; preds = %originalBBpart2117, %originalBBpart263
  %476 = load i32, i32* @x.63
  %477 = load i32, i32* @y.64
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %475, %originalBB119alteredBB
  store i8 1, i8* %33, align 1, !dbg !4615
  %484 = load i8*, i8** %27, align 8, !dbg !4616
  store i8* %484, i8** %31, align 8, !dbg !4617
  %485 = load i8*, i8** %31, align 8, !dbg !4618
  %486 = call i64 @strlen(i8* %485) #13, !dbg !4619
  store i64 %486, i64* %32, align 8, !dbg !4620
  %487 = load i32, i32* @x.63
  %488 = load i32, i32* @y.64
  %489 = sub i32 %487, 1
  %490 = mul i32 %487, %489
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %492, %493
  br i1 %494, label %originalBBpart2121, label %originalBB119alteredBB

originalBBpart2121:                               ; preds = %originalBB119
  br label %745, !dbg !4621

495:                                              ; preds = %originalBBpart213
  %496 = load i32, i32* @x.63
  %497 = load i32, i32* @y.64
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %495, %originalBB123alteredBB
  store i8 1, i8* %33, align 1, !dbg !4622
  %504 = load i32, i32* @x.63
  %505 = load i32, i32* @y.64
  %506 = sub i32 %504, 1
  %507 = mul i32 %504, %506
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %509, %510
  br i1 %511, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  br label %512, !dbg !4623

512:                                              ; preds = %originalBBpart2125, %originalBBpart213
  %513 = load i32, i32* @x.63
  %514 = load i32, i32* @y.64
  %515 = sub i32 %513, 1
  %516 = mul i32 %513, %515
  %517 = urem i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = icmp slt i32 %514, 10
  %520 = or i1 %518, %519
  br i1 %520, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %512, %originalBB127alteredBB
  store i8 1, i8* %35, align 1, !dbg !4624
  %521 = load i32, i32* @x.63
  %522 = load i32, i32* @y.64
  %523 = sub i32 %521, 1
  %524 = mul i32 %521, %523
  %525 = urem i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = icmp slt i32 %522, 10
  %528 = or i1 %526, %527
  br i1 %528, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br label %529, !dbg !4625

529:                                              ; preds = %originalBBpart2129, %originalBBpart213
  %530 = load i32, i32* @x.63
  %531 = load i32, i32* @y.64
  %532 = sub i32 %530, 1
  %533 = mul i32 %530, %532
  %534 = urem i32 %533, 2
  %535 = icmp eq i32 %534, 0
  %536 = icmp slt i32 %531, 10
  %537 = or i1 %535, %536
  br i1 %537, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %529, %originalBB131alteredBB
  %538 = load i8, i8* %35, align 1, !dbg !4626
  %539 = trunc i8 %538 to i1, !dbg !4626
  %540 = load i32, i32* @x.63
  %541 = load i32, i32* @y.64
  %542 = sub i32 %540, 1
  %543 = mul i32 %540, %542
  %544 = urem i32 %543, 2
  %545 = icmp eq i32 %544, 0
  %546 = icmp slt i32 %541, 10
  %547 = or i1 %545, %546
  br i1 %547, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  br i1 %539, label %565, label %548, !dbg !4628

548:                                              ; preds = %originalBBpart2133
  %549 = load i32, i32* @x.63
  %550 = load i32, i32* @y.64
  %551 = sub i32 %549, 1
  %552 = mul i32 %549, %551
  %553 = urem i32 %552, 2
  %554 = icmp eq i32 %553, 0
  %555 = icmp slt i32 %550, 10
  %556 = or i1 %554, %555
  br i1 %556, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %548, %originalBB135alteredBB
  store i8 1, i8* %33, align 1, !dbg !4629
  %557 = load i32, i32* @x.63
  %558 = load i32, i32* @y.64
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  br label %565, !dbg !4630

565:                                              ; preds = %originalBBpart2137, %originalBBpart2133
  %566 = load i32, i32* @x.63
  %567 = load i32, i32* @y.64
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %565, %originalBB139alteredBB
  %574 = load i32, i32* @x.63
  %575 = load i32, i32* @y.64
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  br label %582, !dbg !4631

582:                                              ; preds = %originalBBpart2141, %originalBBpart213
  %583 = load i32, i32* @x.63
  %584 = load i32, i32* @y.64
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %582, %originalBB143alteredBB
  store i32 2, i32* %23, align 4, !dbg !4632
  %591 = load i8, i8* %35, align 1, !dbg !4633
  %592 = trunc i8 %591 to i1, !dbg !4633
  %593 = load i32, i32* @x.63
  %594 = load i32, i32* @y.64
  %595 = sub i32 %593, 1
  %596 = mul i32 %593, %595
  %597 = urem i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = icmp slt i32 %594, 10
  %600 = or i1 %598, %599
  br i1 %600, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br i1 %592, label %694, label %601, !dbg !4635

601:                                              ; preds = %originalBBpart2145
  %602 = load i32, i32* @x.63
  %603 = load i32, i32* @y.64
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %601, %originalBB147alteredBB
  %610 = load i32, i32* @x.63
  %611 = load i32, i32* @y.64
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBBpart2149, label %originalBB147alteredBB

originalBBpart2149:                               ; preds = %originalBB147
  br label %618, !dbg !4636

618:                                              ; preds = %originalBBpart2149
  %619 = load i32, i32* @x.63
  %620 = load i32, i32* @y.64
  %621 = sub i32 %619, 1
  %622 = mul i32 %619, %621
  %623 = urem i32 %622, 2
  %624 = icmp eq i32 %623, 0
  %625 = icmp slt i32 %620, 10
  %626 = or i1 %624, %625
  br i1 %626, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %618, %originalBB151alteredBB
  %627 = load i64, i64* %29, align 8, !dbg !4637
  %628 = load i64, i64* %20, align 8, !dbg !4637
  %629 = icmp ult i64 %627, %628, !dbg !4637
  %630 = load i32, i32* @x.63
  %631 = load i32, i32* @y.64
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBBpart2153, label %originalBB151alteredBB

originalBBpart2153:                               ; preds = %originalBB151
  br i1 %629, label %638, label %658, !dbg !4640

638:                                              ; preds = %originalBBpart2153
  %639 = load i32, i32* @x.63
  %640 = load i32, i32* @y.64
  %641 = sub i32 %639, 1
  %642 = mul i32 %639, %641
  %643 = urem i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = icmp slt i32 %640, 10
  %646 = or i1 %644, %645
  br i1 %646, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %638, %originalBB155alteredBB
  %647 = load i8*, i8** %19, align 8, !dbg !4637
  %648 = load i64, i64* %29, align 8, !dbg !4637
  %649 = getelementptr inbounds i8, i8* %647, i64 %648, !dbg !4637
  store i8 39, i8* %649, align 1, !dbg !4637
  %650 = load i32, i32* @x.63
  %651 = load i32, i32* @y.64
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  br label %658, !dbg !4637

658:                                              ; preds = %originalBBpart2157, %originalBBpart2153
  %659 = load i32, i32* @x.63
  %660 = load i32, i32* @y.64
  %661 = sub i32 %659, 1
  %662 = mul i32 %659, %661
  %663 = urem i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = icmp slt i32 %660, 10
  %666 = or i1 %664, %665
  br i1 %666, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %658, %originalBB159alteredBB
  %667 = load i64, i64* %29, align 8, !dbg !4640
  %668 = add i64 %667, 1, !dbg !4640
  store i64 %668, i64* %29, align 8, !dbg !4640
  %669 = load i32, i32* @x.63
  %670 = load i32, i32* @y.64
  %671 = sub i32 %669, 1
  %672 = mul i32 %669, %671
  %673 = urem i32 %672, 2
  %674 = icmp eq i32 %673, 0
  %675 = icmp slt i32 %670, 10
  %676 = or i1 %674, %675
  br i1 %676, label %originalBBpart2166, label %originalBB159alteredBB

originalBBpart2166:                               ; preds = %originalBB159
  br label %677, !dbg !4640

677:                                              ; preds = %originalBBpart2166
  %678 = load i32, i32* @x.63
  %679 = load i32, i32* @y.64
  %680 = sub i32 %678, 1
  %681 = mul i32 %678, %680
  %682 = urem i32 %681, 2
  %683 = icmp eq i32 %682, 0
  %684 = icmp slt i32 %679, 10
  %685 = or i1 %683, %684
  br i1 %685, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %677, %originalBB168alteredBB
  %686 = load i32, i32* @x.63
  %687 = load i32, i32* @y.64
  %688 = sub i32 %686, 1
  %689 = mul i32 %686, %688
  %690 = urem i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = icmp slt i32 %687, 10
  %693 = or i1 %691, %692
  br i1 %693, label %originalBBpart2170, label %originalBB168alteredBB

originalBBpart2170:                               ; preds = %originalBB168
  br label %694, !dbg !4640

694:                                              ; preds = %originalBBpart2170, %originalBBpart2145
  %695 = load i32, i32* @x.63
  %696 = load i32, i32* @y.64
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %694, %originalBB172alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i8** %31, align 8, !dbg !4641
  store i64 1, i64* %32, align 8, !dbg !4642
  %703 = load i32, i32* @x.63
  %704 = load i32, i32* @y.64
  %705 = sub i32 %703, 1
  %706 = mul i32 %703, %705
  %707 = urem i32 %706, 2
  %708 = icmp eq i32 %707, 0
  %709 = icmp slt i32 %704, 10
  %710 = or i1 %708, %709
  br i1 %710, label %originalBBpart2174, label %originalBB172alteredBB

originalBBpart2174:                               ; preds = %originalBB172
  br label %745, !dbg !4643

711:                                              ; preds = %originalBBpart213
  %712 = load i32, i32* @x.63
  %713 = load i32, i32* @y.64
  %714 = sub i32 %712, 1
  %715 = mul i32 %712, %714
  %716 = urem i32 %715, 2
  %717 = icmp eq i32 %716, 0
  %718 = icmp slt i32 %713, 10
  %719 = or i1 %717, %718
  br i1 %719, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %711, %originalBB176alteredBB
  store i8 0, i8* %35, align 1, !dbg !4644
  %720 = load i32, i32* @x.63
  %721 = load i32, i32* @y.64
  %722 = sub i32 %720, 1
  %723 = mul i32 %720, %722
  %724 = urem i32 %723, 2
  %725 = icmp eq i32 %724, 0
  %726 = icmp slt i32 %721, 10
  %727 = or i1 %725, %726
  br i1 %727, label %originalBBpart2178, label %originalBB176alteredBB

originalBBpart2178:                               ; preds = %originalBB176
  br label %745, !dbg !4645

728:                                              ; preds = %originalBBpart213
  %729 = load i32, i32* @x.63
  %730 = load i32, i32* @y.64
  %731 = sub i32 %729, 1
  %732 = mul i32 %729, %731
  %733 = urem i32 %732, 2
  %734 = icmp eq i32 %733, 0
  %735 = icmp slt i32 %730, 10
  %736 = or i1 %734, %735
  br i1 %736, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %728, %originalBB180alteredBB
  call void @abort() #12, !dbg !4646
  %737 = load i32, i32* @x.63
  %738 = load i32, i32* @y.64
  %739 = sub i32 %737, 1
  %740 = mul i32 %737, %739
  %741 = urem i32 %740, 2
  %742 = icmp eq i32 %741, 0
  %743 = icmp slt i32 %738, 10
  %744 = or i1 %742, %743
  br i1 %744, label %originalBBpart2182, label %originalBB180alteredBB

originalBBpart2182:                               ; preds = %originalBB180
  unreachable, !dbg !4646

745:                                              ; preds = %originalBBpart2178, %originalBBpart2174, %originalBBpart2121, %originalBBpart251, %originalBBpart247
  %746 = load i32, i32* @x.63
  %747 = load i32, i32* @y.64
  %748 = sub i32 %746, 1
  %749 = mul i32 %746, %748
  %750 = urem i32 %749, 2
  %751 = icmp eq i32 %750, 0
  %752 = icmp slt i32 %747, 10
  %753 = or i1 %751, %752
  br i1 %753, label %originalBB184, label %originalBB184alteredBB

originalBB184:                                    ; preds = %745, %originalBB184alteredBB
  store i64 0, i64* %28, align 8, !dbg !4647
  %754 = load i32, i32* @x.63
  %755 = load i32, i32* @y.64
  %756 = sub i32 %754, 1
  %757 = mul i32 %754, %756
  %758 = urem i32 %757, 2
  %759 = icmp eq i32 %758, 0
  %760 = icmp slt i32 %755, 10
  %761 = or i1 %759, %760
  br i1 %761, label %originalBBpart2186, label %originalBB184alteredBB

originalBBpart2186:                               ; preds = %originalBB184
  br label %762, !dbg !4649

762:                                              ; preds = %originalBBpart21935, %originalBBpart2186
  %763 = load i32, i32* @x.63
  %764 = load i32, i32* @y.64
  %765 = sub i32 %763, 1
  %766 = mul i32 %763, %765
  %767 = urem i32 %766, 2
  %768 = icmp eq i32 %767, 0
  %769 = icmp slt i32 %764, 10
  %770 = or i1 %768, %769
  br i1 %770, label %originalBB188, label %originalBB188alteredBB

originalBB188:                                    ; preds = %762, %originalBB188alteredBB
  %771 = load i64, i64* %22, align 8, !dbg !4650
  %772 = icmp eq i64 %771, -1, !dbg !4652
  %773 = load i32, i32* @x.63
  %774 = load i32, i32* @y.64
  %775 = sub i32 %773, 1
  %776 = mul i32 %773, %775
  %777 = urem i32 %776, 2
  %778 = icmp eq i32 %777, 0
  %779 = icmp slt i32 %774, 10
  %780 = or i1 %778, %779
  br i1 %780, label %originalBBpart2190, label %originalBB188alteredBB

originalBBpart2190:                               ; preds = %originalBB188
  br i1 %772, label %781, label %805, !dbg !4650

781:                                              ; preds = %originalBBpart2190
  %782 = load i32, i32* @x.63
  %783 = load i32, i32* @y.64
  %784 = sub i32 %782, 1
  %785 = mul i32 %782, %784
  %786 = urem i32 %785, 2
  %787 = icmp eq i32 %786, 0
  %788 = icmp slt i32 %783, 10
  %789 = or i1 %787, %788
  br i1 %789, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %781, %originalBB192alteredBB
  %790 = load i8*, i8** %21, align 8, !dbg !4653
  %791 = load i64, i64* %28, align 8, !dbg !4654
  %792 = getelementptr inbounds i8, i8* %790, i64 %791, !dbg !4653
  %793 = load i8, i8* %792, align 1, !dbg !4653
  %794 = sext i8 %793 to i32, !dbg !4653
  %795 = icmp eq i32 %794, 0, !dbg !4655
  %796 = zext i1 %795 to i32, !dbg !4655
  %797 = load i32, i32* @x.63
  %798 = load i32, i32* @y.64
  %799 = sub i32 %797, 1
  %800 = mul i32 %797, %799
  %801 = urem i32 %800, 2
  %802 = icmp eq i32 %801, 0
  %803 = icmp slt i32 %798, 10
  %804 = or i1 %802, %803
  br i1 %804, label %originalBBpart2194, label %originalBB192alteredBB

originalBBpart2194:                               ; preds = %originalBB192
  br label %826, !dbg !4650

805:                                              ; preds = %originalBBpart2190
  %806 = load i32, i32* @x.63
  %807 = load i32, i32* @y.64
  %808 = sub i32 %806, 1
  %809 = mul i32 %806, %808
  %810 = urem i32 %809, 2
  %811 = icmp eq i32 %810, 0
  %812 = icmp slt i32 %807, 10
  %813 = or i1 %811, %812
  br i1 %813, label %originalBB196, label %originalBB196alteredBB

originalBB196:                                    ; preds = %805, %originalBB196alteredBB
  %814 = load i64, i64* %28, align 8, !dbg !4656
  %815 = load i64, i64* %22, align 8, !dbg !4657
  %816 = icmp eq i64 %814, %815, !dbg !4658
  %817 = zext i1 %816 to i32, !dbg !4658
  %818 = load i32, i32* @x.63
  %819 = load i32, i32* @y.64
  %820 = sub i32 %818, 1
  %821 = mul i32 %818, %820
  %822 = urem i32 %821, 2
  %823 = icmp eq i32 %822, 0
  %824 = icmp slt i32 %819, 10
  %825 = or i1 %823, %824
  br i1 %825, label %originalBBpart2198, label %originalBB196alteredBB

originalBBpart2198:                               ; preds = %originalBB196
  br label %826, !dbg !4650

826:                                              ; preds = %originalBBpart2198, %originalBBpart2194
  %827 = phi i32 [ %796, %originalBBpart2194 ], [ %817, %originalBBpart2198 ], !dbg !4650
  %828 = load i32, i32* @x.63
  %829 = load i32, i32* @y.64
  %830 = sub i32 %828, 1
  %831 = mul i32 %828, %830
  %832 = urem i32 %831, 2
  %833 = icmp eq i32 %832, 0
  %834 = icmp slt i32 %829, 10
  %835 = or i1 %833, %834
  br i1 %835, label %originalBB200, label %originalBB200alteredBB

originalBB200:                                    ; preds = %826, %originalBB200alteredBB
  %836 = icmp ne i32 %827, 0, !dbg !4659
  %837 = xor i1 %836, true, !dbg !4659
  %838 = load i32, i32* @x.63
  %839 = load i32, i32* @y.64
  %840 = sub i32 %838, 1
  %841 = mul i32 %838, %840
  %842 = urem i32 %841, 2
  %843 = icmp eq i32 %842, 0
  %844 = icmp slt i32 %839, 10
  %845 = or i1 %843, %844
  br i1 %845, label %originalBBpart2211, label %originalBB200alteredBB

originalBBpart2211:                               ; preds = %originalBB200
  br i1 %837, label %846, label %6460, !dbg !4660

846:                                              ; preds = %originalBBpart2211
  call void @llvm.dbg.declare(metadata i8* %39, metadata !4661, metadata !DIExpression()), !dbg !4663
  call void @llvm.dbg.declare(metadata i8* %40, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.declare(metadata i8* %41, metadata !4666, metadata !DIExpression()), !dbg !4667
  %847 = load i32, i32* @x.63
  %848 = load i32, i32* @y.64
  %849 = sub i32 %847, 1
  %850 = mul i32 %847, %849
  %851 = urem i32 %850, 2
  %852 = icmp eq i32 %851, 0
  %853 = icmp slt i32 %848, 10
  %854 = or i1 %852, %853
  br i1 %854, label %originalBB213, label %originalBB213alteredBB

originalBB213:                                    ; preds = %846, %originalBB213alteredBB
  store i8 0, i8* %41, align 1, !dbg !4667
  call void @llvm.dbg.declare(metadata i8* %42, metadata !4668, metadata !DIExpression()), !dbg !4669
  store i8 0, i8* %42, align 1, !dbg !4669
  call void @llvm.dbg.declare(metadata i8* %43, metadata !4670, metadata !DIExpression()), !dbg !4671
  store i8 0, i8* %43, align 1, !dbg !4671
  %855 = load i8, i8* %33, align 1, !dbg !4672
  %856 = trunc i8 %855 to i1, !dbg !4672
  %857 = load i32, i32* @x.63
  %858 = load i32, i32* @y.64
  %859 = sub i32 %857, 1
  %860 = mul i32 %857, %859
  %861 = urem i32 %860, 2
  %862 = icmp eq i32 %861, 0
  %863 = icmp slt i32 %858, 10
  %864 = or i1 %862, %863
  br i1 %864, label %originalBBpart2216, label %originalBB213alteredBB

originalBBpart2216:                               ; preds = %originalBB213
  br i1 %856, label %865, label %1077, !dbg !4674

865:                                              ; preds = %originalBBpart2216
  %866 = load i32, i32* @x.63
  %867 = load i32, i32* @y.64
  %868 = sub i32 %866, 1
  %869 = mul i32 %866, %868
  %870 = urem i32 %869, 2
  %871 = icmp eq i32 %870, 0
  %872 = icmp slt i32 %867, 10
  %873 = or i1 %871, %872
  br i1 %873, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %865, %originalBB218alteredBB
  %874 = load i32, i32* %23, align 4, !dbg !4675
  %875 = icmp ne i32 %874, 2, !dbg !4676
  %876 = load i32, i32* @x.63
  %877 = load i32, i32* @y.64
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br i1 %875, label %884, label %1077, !dbg !4677

884:                                              ; preds = %originalBBpart2220
  %885 = load i32, i32* @x.63
  %886 = load i32, i32* @y.64
  %887 = sub i32 %885, 1
  %888 = mul i32 %885, %887
  %889 = urem i32 %888, 2
  %890 = icmp eq i32 %889, 0
  %891 = icmp slt i32 %886, 10
  %892 = or i1 %890, %891
  br i1 %892, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %884, %originalBB222alteredBB
  %893 = load i64, i64* %32, align 8, !dbg !4678
  %894 = icmp ne i64 %893, 0, !dbg !4678
  %895 = load i32, i32* @x.63
  %896 = load i32, i32* @y.64
  %897 = sub i32 %895, 1
  %898 = mul i32 %895, %897
  %899 = urem i32 %898, 2
  %900 = icmp eq i32 %899, 0
  %901 = icmp slt i32 %896, 10
  %902 = or i1 %900, %901
  br i1 %902, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br i1 %894, label %903, label %1077, !dbg !4679

903:                                              ; preds = %originalBBpart2224
  %904 = load i32, i32* @x.63
  %905 = load i32, i32* @y.64
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %903, %originalBB226alteredBB
  %912 = load i64, i64* %28, align 8, !dbg !4680
  %913 = load i64, i64* %32, align 8, !dbg !4681
  %914 = add i64 %912, %913, !dbg !4682
  %915 = load i64, i64* %22, align 8, !dbg !4683
  %916 = icmp eq i64 %915, -1, !dbg !4684
  %917 = load i32, i32* @x.63
  %918 = load i32, i32* @y.64
  %919 = sub i32 %917, 1
  %920 = mul i32 %917, %919
  %921 = urem i32 %920, 2
  %922 = icmp eq i32 %921, 0
  %923 = icmp slt i32 %918, 10
  %924 = or i1 %922, %923
  br i1 %924, label %originalBBpart2229, label %originalBB226alteredBB

originalBBpart2229:                               ; preds = %originalBB226
  br i1 %916, label %925, label %963, !dbg !4685

925:                                              ; preds = %originalBBpart2229
  %926 = load i32, i32* @x.63
  %927 = load i32, i32* @y.64
  %928 = sub i32 %926, 1
  %929 = mul i32 %926, %928
  %930 = urem i32 %929, 2
  %931 = icmp eq i32 %930, 0
  %932 = icmp slt i32 %927, 10
  %933 = or i1 %931, %932
  br i1 %933, label %originalBB231, label %originalBB231alteredBB

originalBB231:                                    ; preds = %925, %originalBB231alteredBB
  %934 = load i64, i64* %32, align 8, !dbg !4686
  %935 = icmp ult i64 1, %934, !dbg !4687
  %936 = load i32, i32* @x.63
  %937 = load i32, i32* @y.64
  %938 = sub i32 %936, 1
  %939 = mul i32 %936, %938
  %940 = urem i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = icmp slt i32 %937, 10
  %943 = or i1 %941, %942
  br i1 %943, label %originalBBpart2233, label %originalBB231alteredBB

originalBBpart2233:                               ; preds = %originalBB231
  br i1 %935, label %944, label %963, !dbg !4683

944:                                              ; preds = %originalBBpart2233
  %945 = load i32, i32* @x.63
  %946 = load i32, i32* @y.64
  %947 = sub i32 %945, 1
  %948 = mul i32 %945, %947
  %949 = urem i32 %948, 2
  %950 = icmp eq i32 %949, 0
  %951 = icmp slt i32 %946, 10
  %952 = or i1 %950, %951
  br i1 %952, label %originalBB235, label %originalBB235alteredBB

originalBB235:                                    ; preds = %944, %originalBB235alteredBB
  %953 = load i8*, i8** %21, align 8, !dbg !4688
  %954 = call i64 @strlen(i8* %953) #13, !dbg !4689
  store i64 %954, i64* %22, align 8, !dbg !4690
  %955 = load i32, i32* @x.63
  %956 = load i32, i32* @y.64
  %957 = sub i32 %955, 1
  %958 = mul i32 %955, %957
  %959 = urem i32 %958, 2
  %960 = icmp eq i32 %959, 0
  %961 = icmp slt i32 %956, 10
  %962 = or i1 %960, %961
  br i1 %962, label %originalBBpart2237, label %originalBB235alteredBB

originalBBpart2237:                               ; preds = %originalBB235
  br label %981, !dbg !4683

963:                                              ; preds = %originalBBpart2233, %originalBBpart2229
  %964 = load i32, i32* @x.63
  %965 = load i32, i32* @y.64
  %966 = sub i32 %964, 1
  %967 = mul i32 %964, %966
  %968 = urem i32 %967, 2
  %969 = icmp eq i32 %968, 0
  %970 = icmp slt i32 %965, 10
  %971 = or i1 %969, %970
  br i1 %971, label %originalBB239, label %originalBB239alteredBB

originalBB239:                                    ; preds = %963, %originalBB239alteredBB
  %972 = load i64, i64* %22, align 8, !dbg !4691
  %973 = load i32, i32* @x.63
  %974 = load i32, i32* @y.64
  %975 = sub i32 %973, 1
  %976 = mul i32 %973, %975
  %977 = urem i32 %976, 2
  %978 = icmp eq i32 %977, 0
  %979 = icmp slt i32 %974, 10
  %980 = or i1 %978, %979
  br i1 %980, label %originalBBpart2242, label %originalBB239alteredBB

originalBBpart2242:                               ; preds = %originalBB239
  br label %981, !dbg !4683

981:                                              ; preds = %originalBBpart2242, %originalBBpart2237
  %982 = phi i64 [ %954, %originalBBpart2237 ], [ %972, %originalBBpart2242 ], !dbg !4683
  %983 = load i32, i32* @x.63
  %984 = load i32, i32* @y.64
  %985 = sub i32 %983, 1
  %986 = mul i32 %983, %985
  %987 = urem i32 %986, 2
  %988 = icmp eq i32 %987, 0
  %989 = icmp slt i32 %984, 10
  %990 = or i1 %988, %989
  br i1 %990, label %originalBB244, label %originalBB244alteredBB

originalBB244:                                    ; preds = %981, %originalBB244alteredBB
  %991 = icmp ule i64 %914, %982, !dbg !4692
  %992 = load i32, i32* @x.63
  %993 = load i32, i32* @y.64
  %994 = sub i32 %992, 1
  %995 = mul i32 %992, %994
  %996 = urem i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = icmp slt i32 %993, 10
  %999 = or i1 %997, %998
  br i1 %999, label %originalBBpart2246, label %originalBB244alteredBB

originalBBpart2246:                               ; preds = %originalBB244
  br i1 %991, label %1000, label %1077, !dbg !4693

1000:                                             ; preds = %originalBBpart2246
  %1001 = load i32, i32* @x.63
  %1002 = load i32, i32* @y.64
  %1003 = sub i32 %1001, 1
  %1004 = mul i32 %1001, %1003
  %1005 = urem i32 %1004, 2
  %1006 = icmp eq i32 %1005, 0
  %1007 = icmp slt i32 %1002, 10
  %1008 = or i1 %1006, %1007
  br i1 %1008, label %originalBB248, label %originalBB248alteredBB

originalBB248:                                    ; preds = %1000, %originalBB248alteredBB
  %1009 = load i8*, i8** %21, align 8, !dbg !4694
  %1010 = load i64, i64* %28, align 8, !dbg !4695
  %1011 = getelementptr inbounds i8, i8* %1009, i64 %1010, !dbg !4696
  %1012 = load i8*, i8** %31, align 8, !dbg !4697
  %1013 = load i64, i64* %32, align 8, !dbg !4698
  %1014 = call i32 @memcmp(i8* %1011, i8* %1012, i64 %1013) #13, !dbg !4699
  %1015 = icmp eq i32 %1014, 0, !dbg !4700
  %1016 = load i32, i32* @x.63
  %1017 = load i32, i32* @y.64
  %1018 = sub i32 %1016, 1
  %1019 = mul i32 %1016, %1018
  %1020 = urem i32 %1019, 2
  %1021 = icmp eq i32 %1020, 0
  %1022 = icmp slt i32 %1017, 10
  %1023 = or i1 %1021, %1022
  br i1 %1023, label %originalBBpart2250, label %originalBB248alteredBB

originalBBpart2250:                               ; preds = %originalBB248
  br i1 %1015, label %1024, label %1077, !dbg !4701

1024:                                             ; preds = %originalBBpart2250
  %1025 = load i32, i32* @x.63
  %1026 = load i32, i32* @y.64
  %1027 = sub i32 %1025, 1
  %1028 = mul i32 %1025, %1027
  %1029 = urem i32 %1028, 2
  %1030 = icmp eq i32 %1029, 0
  %1031 = icmp slt i32 %1026, 10
  %1032 = or i1 %1030, %1031
  br i1 %1032, label %originalBB252, label %originalBB252alteredBB

originalBB252:                                    ; preds = %1024, %originalBB252alteredBB
  %1033 = load i8, i8* %35, align 1, !dbg !4702
  %1034 = trunc i8 %1033 to i1, !dbg !4702
  %1035 = load i32, i32* @x.63
  %1036 = load i32, i32* @y.64
  %1037 = sub i32 %1035, 1
  %1038 = mul i32 %1035, %1037
  %1039 = urem i32 %1038, 2
  %1040 = icmp eq i32 %1039, 0
  %1041 = icmp slt i32 %1036, 10
  %1042 = or i1 %1040, %1041
  br i1 %1042, label %originalBBpart2254, label %originalBB252alteredBB

originalBBpart2254:                               ; preds = %originalBB252
  br i1 %1034, label %1043, label %1060, !dbg !4705

1043:                                             ; preds = %originalBBpart2254
  %1044 = load i32, i32* @x.63
  %1045 = load i32, i32* @y.64
  %1046 = sub i32 %1044, 1
  %1047 = mul i32 %1044, %1046
  %1048 = urem i32 %1047, 2
  %1049 = icmp eq i32 %1048, 0
  %1050 = icmp slt i32 %1045, 10
  %1051 = or i1 %1049, %1050
  br i1 %1051, label %originalBB256, label %originalBB256alteredBB

originalBB256:                                    ; preds = %1043, %originalBB256alteredBB
  %1052 = load i32, i32* @x.63
  %1053 = load i32, i32* @y.64
  %1054 = sub i32 %1052, 1
  %1055 = mul i32 %1052, %1054
  %1056 = urem i32 %1055, 2
  %1057 = icmp eq i32 %1056, 0
  %1058 = icmp slt i32 %1053, 10
  %1059 = or i1 %1057, %1058
  br i1 %1059, label %originalBBpart2258, label %originalBB256alteredBB

originalBBpart2258:                               ; preds = %originalBB256
  br label %6990, !dbg !4706

1060:                                             ; preds = %originalBBpart2254
  %1061 = load i32, i32* @x.63
  %1062 = load i32, i32* @y.64
  %1063 = sub i32 %1061, 1
  %1064 = mul i32 %1061, %1063
  %1065 = urem i32 %1064, 2
  %1066 = icmp eq i32 %1065, 0
  %1067 = icmp slt i32 %1062, 10
  %1068 = or i1 %1066, %1067
  br i1 %1068, label %originalBB260, label %originalBB260alteredBB

originalBB260:                                    ; preds = %1060, %originalBB260alteredBB
  store i8 1, i8* %41, align 1, !dbg !4707
  %1069 = load i32, i32* @x.63
  %1070 = load i32, i32* @y.64
  %1071 = sub i32 %1069, 1
  %1072 = mul i32 %1069, %1071
  %1073 = urem i32 %1072, 2
  %1074 = icmp eq i32 %1073, 0
  %1075 = icmp slt i32 %1070, 10
  %1076 = or i1 %1074, %1075
  br i1 %1076, label %originalBBpart2262, label %originalBB260alteredBB

originalBBpart2262:                               ; preds = %originalBB260
  br label %1077, !dbg !4708

1077:                                             ; preds = %originalBBpart2262, %originalBBpart2250, %originalBBpart2246, %originalBBpart2224, %originalBBpart2220, %originalBBpart2216
  %1078 = load i32, i32* @x.63
  %1079 = load i32, i32* @y.64
  %1080 = sub i32 %1078, 1
  %1081 = mul i32 %1078, %1080
  %1082 = urem i32 %1081, 2
  %1083 = icmp eq i32 %1082, 0
  %1084 = icmp slt i32 %1079, 10
  %1085 = or i1 %1083, %1084
  br i1 %1085, label %originalBB264, label %originalBB264alteredBB

originalBB264:                                    ; preds = %1077, %originalBB264alteredBB
  %1086 = load i8*, i8** %21, align 8, !dbg !4709
  %1087 = load i64, i64* %28, align 8, !dbg !4710
  %1088 = getelementptr inbounds i8, i8* %1086, i64 %1087, !dbg !4709
  %1089 = load i8, i8* %1088, align 1, !dbg !4709
  store i8 %1089, i8* %39, align 1, !dbg !4711
  %1090 = load i8, i8* %39, align 1, !dbg !4712
  %1091 = zext i8 %1090 to i32, !dbg !4712
  %1092 = load i32, i32* @x.63
  %1093 = load i32, i32* @y.64
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBBpart2266, label %originalBB264alteredBB

originalBBpart2266:                               ; preds = %originalBB264
  switch i32 %1091, label %3536 [
    i32 0, label %1100
    i32 63, label %1893
    i32 7, label %2501
    i32 8, label %2518
    i32 12, label %2535
    i32 10, label %2552
    i32 13, label %2569
    i32 9, label %2586
    i32 11, label %2603
    i32 92, label %2620
    i32 123, label %2910
    i32 125, label %2910
    i32 35, label %3004
    i32 126, label %3004
    i32 32, label %3057
    i32 33, label %3074
    i32 34, label %3074
    i32 36, label %3074
    i32 38, label %3074
    i32 40, label %3074
    i32 41, label %3074
    i32 42, label %3074
    i32 59, label %3074
    i32 60, label %3074
    i32 61, label %3074
    i32 62, label %3074
    i32 91, label %3074
    i32 94, label %3074
    i32 96, label %3074
    i32 124, label %3074
    i32 39, label %3146
    i32 37, label %3519
    i32 43, label %3519
    i32 44, label %3519
    i32 45, label %3519
    i32 46, label %3519
    i32 47, label %3519
    i32 48, label %3519
    i32 49, label %3519
    i32 50, label %3519
    i32 51, label %3519
    i32 52, label %3519
    i32 53, label %3519
    i32 54, label %3519
    i32 55, label %3519
    i32 56, label %3519
    i32 57, label %3519
    i32 58, label %3519
    i32 65, label %3519
    i32 66, label %3519
    i32 67, label %3519
    i32 68, label %3519
    i32 69, label %3519
    i32 70, label %3519
    i32 71, label %3519
    i32 72, label %3519
    i32 73, label %3519
    i32 74, label %3519
    i32 75, label %3519
    i32 76, label %3519
    i32 77, label %3519
    i32 78, label %3519
    i32 79, label %3519
    i32 80, label %3519
    i32 81, label %3519
    i32 82, label %3519
    i32 83, label %3519
    i32 84, label %3519
    i32 85, label %3519
    i32 86, label %3519
    i32 87, label %3519
    i32 88, label %3519
    i32 89, label %3519
    i32 90, label %3519
    i32 93, label %3519
    i32 95, label %3519
    i32 97, label %3519
    i32 98, label %3519
    i32 99, label %3519
    i32 100, label %3519
    i32 101, label %3519
    i32 102, label %3519
    i32 103, label %3519
    i32 104, label %3519
    i32 105, label %3519
    i32 106, label %3519
    i32 107, label %3519
    i32 108, label %3519
    i32 109, label %3519
    i32 110, label %3519
    i32 111, label %3519
    i32 112, label %3519
    i32 113, label %3519
    i32 114, label %3519
    i32 115, label %3519
    i32 116, label %3519
    i32 117, label %3519
    i32 118, label %3519
    i32 119, label %3519
    i32 120, label %3519
    i32 121, label %3519
    i32 122, label %3519
  ], !dbg !4713

1100:                                             ; preds = %originalBBpart2266
  %1101 = load i32, i32* @x.63
  %1102 = load i32, i32* @y.64
  %1103 = sub i32 %1101, 1
  %1104 = mul i32 %1101, %1103
  %1105 = urem i32 %1104, 2
  %1106 = icmp eq i32 %1105, 0
  %1107 = icmp slt i32 %1102, 10
  %1108 = or i1 %1106, %1107
  br i1 %1108, label %originalBB268, label %originalBB268alteredBB

originalBB268:                                    ; preds = %1100, %originalBB268alteredBB
  %1109 = load i8, i8* %33, align 1, !dbg !4714
  %1110 = trunc i8 %1109 to i1, !dbg !4714
  %1111 = load i32, i32* @x.63
  %1112 = load i32, i32* @y.64
  %1113 = sub i32 %1111, 1
  %1114 = mul i32 %1111, %1113
  %1115 = urem i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  %1117 = icmp slt i32 %1112, 10
  %1118 = or i1 %1116, %1117
  br i1 %1118, label %originalBBpart2270, label %originalBB268alteredBB

originalBBpart2270:                               ; preds = %originalBB268
  br i1 %1110, label %1119, label %1822, !dbg !4717

1119:                                             ; preds = %originalBBpart2270
  %1120 = load i32, i32* @x.63
  %1121 = load i32, i32* @y.64
  %1122 = sub i32 %1120, 1
  %1123 = mul i32 %1120, %1122
  %1124 = urem i32 %1123, 2
  %1125 = icmp eq i32 %1124, 0
  %1126 = icmp slt i32 %1121, 10
  %1127 = or i1 %1125, %1126
  br i1 %1127, label %originalBB272, label %originalBB272alteredBB

originalBB272:                                    ; preds = %1119, %originalBB272alteredBB
  %1128 = load i32, i32* @x.63
  %1129 = load i32, i32* @y.64
  %1130 = sub i32 %1128, 1
  %1131 = mul i32 %1128, %1130
  %1132 = urem i32 %1131, 2
  %1133 = icmp eq i32 %1132, 0
  %1134 = icmp slt i32 %1129, 10
  %1135 = or i1 %1133, %1134
  br i1 %1135, label %originalBBpart2274, label %originalBB272alteredBB

originalBBpart2274:                               ; preds = %originalBB272
  br label %1136, !dbg !4718

1136:                                             ; preds = %originalBBpart2274
  %1137 = load i32, i32* @x.63
  %1138 = load i32, i32* @y.64
  %1139 = sub i32 %1137, 1
  %1140 = mul i32 %1137, %1139
  %1141 = urem i32 %1140, 2
  %1142 = icmp eq i32 %1141, 0
  %1143 = icmp slt i32 %1138, 10
  %1144 = or i1 %1142, %1143
  br i1 %1144, label %originalBB276, label %originalBB276alteredBB

originalBB276:                                    ; preds = %1136, %originalBB276alteredBB
  %1145 = load i8, i8* %35, align 1, !dbg !4720
  %1146 = trunc i8 %1145 to i1, !dbg !4720
  %1147 = load i32, i32* @x.63
  %1148 = load i32, i32* @y.64
  %1149 = sub i32 %1147, 1
  %1150 = mul i32 %1147, %1149
  %1151 = urem i32 %1150, 2
  %1152 = icmp eq i32 %1151, 0
  %1153 = icmp slt i32 %1148, 10
  %1154 = or i1 %1152, %1153
  br i1 %1154, label %originalBBpart2278, label %originalBB276alteredBB

originalBBpart2278:                               ; preds = %originalBB276
  br i1 %1146, label %1155, label %1172, !dbg !4723

1155:                                             ; preds = %originalBBpart2278
  %1156 = load i32, i32* @x.63
  %1157 = load i32, i32* @y.64
  %1158 = sub i32 %1156, 1
  %1159 = mul i32 %1156, %1158
  %1160 = urem i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = icmp slt i32 %1157, 10
  %1163 = or i1 %1161, %1162
  br i1 %1163, label %originalBB280, label %originalBB280alteredBB

originalBB280:                                    ; preds = %1155, %originalBB280alteredBB
  %1164 = load i32, i32* @x.63
  %1165 = load i32, i32* @y.64
  %1166 = sub i32 %1164, 1
  %1167 = mul i32 %1164, %1166
  %1168 = urem i32 %1167, 2
  %1169 = icmp eq i32 %1168, 0
  %1170 = icmp slt i32 %1165, 10
  %1171 = or i1 %1169, %1170
  br i1 %1171, label %originalBBpart2282, label %originalBB280alteredBB

originalBBpart2282:                               ; preds = %originalBB280
  br label %6990, !dbg !4720

1172:                                             ; preds = %originalBBpart2278
  %1173 = load i32, i32* @x.63
  %1174 = load i32, i32* @y.64
  %1175 = sub i32 %1173, 1
  %1176 = mul i32 %1173, %1175
  %1177 = urem i32 %1176, 2
  %1178 = icmp eq i32 %1177, 0
  %1179 = icmp slt i32 %1174, 10
  %1180 = or i1 %1178, %1179
  br i1 %1180, label %originalBB284, label %originalBB284alteredBB

originalBB284:                                    ; preds = %1172, %originalBB284alteredBB
  store i8 1, i8* %42, align 1, !dbg !4723
  %1181 = load i32, i32* %23, align 4, !dbg !4724
  %1182 = icmp eq i32 %1181, 2, !dbg !4724
  %1183 = load i32, i32* @x.63
  %1184 = load i32, i32* @y.64
  %1185 = sub i32 %1183, 1
  %1186 = mul i32 %1183, %1185
  %1187 = urem i32 %1186, 2
  %1188 = icmp eq i32 %1187, 0
  %1189 = icmp slt i32 %1184, 10
  %1190 = or i1 %1188, %1189
  br i1 %1190, label %originalBBpart2286, label %originalBB284alteredBB

originalBBpart2286:                               ; preds = %originalBB284
  br i1 %1182, label %1191, label %1455, !dbg !4724

1191:                                             ; preds = %originalBBpart2286
  %1192 = load i32, i32* @x.63
  %1193 = load i32, i32* @y.64
  %1194 = sub i32 %1192, 1
  %1195 = mul i32 %1192, %1194
  %1196 = urem i32 %1195, 2
  %1197 = icmp eq i32 %1196, 0
  %1198 = icmp slt i32 %1193, 10
  %1199 = or i1 %1197, %1198
  br i1 %1199, label %originalBB288, label %originalBB288alteredBB

originalBB288:                                    ; preds = %1191, %originalBB288alteredBB
  %1200 = load i8, i8* %36, align 1, !dbg !4724
  %1201 = trunc i8 %1200 to i1, !dbg !4724
  %1202 = load i32, i32* @x.63
  %1203 = load i32, i32* @y.64
  %1204 = sub i32 %1202, 1
  %1205 = mul i32 %1202, %1204
  %1206 = urem i32 %1205, 2
  %1207 = icmp eq i32 %1206, 0
  %1208 = icmp slt i32 %1203, 10
  %1209 = or i1 %1207, %1208
  br i1 %1209, label %originalBBpart2290, label %originalBB288alteredBB

originalBBpart2290:                               ; preds = %originalBB288
  br i1 %1201, label %1455, label %1210, !dbg !4723

1210:                                             ; preds = %originalBBpart2290
  %1211 = load i32, i32* @x.63
  %1212 = load i32, i32* @y.64
  %1213 = sub i32 %1211, 1
  %1214 = mul i32 %1211, %1213
  %1215 = urem i32 %1214, 2
  %1216 = icmp eq i32 %1215, 0
  %1217 = icmp slt i32 %1212, 10
  %1218 = or i1 %1216, %1217
  br i1 %1218, label %originalBB292, label %originalBB292alteredBB

originalBB292:                                    ; preds = %1210, %originalBB292alteredBB
  %1219 = load i32, i32* @x.63
  %1220 = load i32, i32* @y.64
  %1221 = sub i32 %1219, 1
  %1222 = mul i32 %1219, %1221
  %1223 = urem i32 %1222, 2
  %1224 = icmp eq i32 %1223, 0
  %1225 = icmp slt i32 %1220, 10
  %1226 = or i1 %1224, %1225
  br i1 %1226, label %originalBBpart2294, label %originalBB292alteredBB

originalBBpart2294:                               ; preds = %originalBB292
  br label %1227, !dbg !4726

1227:                                             ; preds = %originalBBpart2294
  %1228 = load i32, i32* @x.63
  %1229 = load i32, i32* @y.64
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBB296, label %originalBB296alteredBB

originalBB296:                                    ; preds = %1227, %originalBB296alteredBB
  %1236 = load i64, i64* %29, align 8, !dbg !4728
  %1237 = load i64, i64* %20, align 8, !dbg !4728
  %1238 = icmp ult i64 %1236, %1237, !dbg !4728
  %1239 = load i32, i32* @x.63
  %1240 = load i32, i32* @y.64
  %1241 = sub i32 %1239, 1
  %1242 = mul i32 %1239, %1241
  %1243 = urem i32 %1242, 2
  %1244 = icmp eq i32 %1243, 0
  %1245 = icmp slt i32 %1240, 10
  %1246 = or i1 %1244, %1245
  br i1 %1246, label %originalBBpart2298, label %originalBB296alteredBB

originalBBpart2298:                               ; preds = %originalBB296
  br i1 %1238, label %1247, label %1267, !dbg !4731

1247:                                             ; preds = %originalBBpart2298
  %1248 = load i32, i32* @x.63
  %1249 = load i32, i32* @y.64
  %1250 = sub i32 %1248, 1
  %1251 = mul i32 %1248, %1250
  %1252 = urem i32 %1251, 2
  %1253 = icmp eq i32 %1252, 0
  %1254 = icmp slt i32 %1249, 10
  %1255 = or i1 %1253, %1254
  br i1 %1255, label %originalBB300, label %originalBB300alteredBB

originalBB300:                                    ; preds = %1247, %originalBB300alteredBB
  %1256 = load i8*, i8** %19, align 8, !dbg !4728
  %1257 = load i64, i64* %29, align 8, !dbg !4728
  %1258 = getelementptr inbounds i8, i8* %1256, i64 %1257, !dbg !4728
  store i8 39, i8* %1258, align 1, !dbg !4728
  %1259 = load i32, i32* @x.63
  %1260 = load i32, i32* @y.64
  %1261 = sub i32 %1259, 1
  %1262 = mul i32 %1259, %1261
  %1263 = urem i32 %1262, 2
  %1264 = icmp eq i32 %1263, 0
  %1265 = icmp slt i32 %1260, 10
  %1266 = or i1 %1264, %1265
  br i1 %1266, label %originalBBpart2302, label %originalBB300alteredBB

originalBBpart2302:                               ; preds = %originalBB300
  br label %1267, !dbg !4728

1267:                                             ; preds = %originalBBpart2302, %originalBBpart2298
  %1268 = load i32, i32* @x.63
  %1269 = load i32, i32* @y.64
  %1270 = sub i32 %1268, 1
  %1271 = mul i32 %1268, %1270
  %1272 = urem i32 %1271, 2
  %1273 = icmp eq i32 %1272, 0
  %1274 = icmp slt i32 %1269, 10
  %1275 = or i1 %1273, %1274
  br i1 %1275, label %originalBB304, label %originalBB304alteredBB

originalBB304:                                    ; preds = %1267, %originalBB304alteredBB
  %1276 = load i64, i64* %29, align 8, !dbg !4731
  %1277 = add i64 %1276, 1, !dbg !4731
  store i64 %1277, i64* %29, align 8, !dbg !4731
  %1278 = load i32, i32* @x.63
  %1279 = load i32, i32* @y.64
  %1280 = sub i32 %1278, 1
  %1281 = mul i32 %1278, %1280
  %1282 = urem i32 %1281, 2
  %1283 = icmp eq i32 %1282, 0
  %1284 = icmp slt i32 %1279, 10
  %1285 = or i1 %1283, %1284
  br i1 %1285, label %originalBBpart2320, label %originalBB304alteredBB

originalBBpart2320:                               ; preds = %originalBB304
  br label %1286, !dbg !4731

1286:                                             ; preds = %originalBBpart2320
  %1287 = load i32, i32* @x.63
  %1288 = load i32, i32* @y.64
  %1289 = sub i32 %1287, 1
  %1290 = mul i32 %1287, %1289
  %1291 = urem i32 %1290, 2
  %1292 = icmp eq i32 %1291, 0
  %1293 = icmp slt i32 %1288, 10
  %1294 = or i1 %1292, %1293
  br i1 %1294, label %originalBB322, label %originalBB322alteredBB

originalBB322:                                    ; preds = %1286, %originalBB322alteredBB
  %1295 = load i32, i32* @x.63
  %1296 = load i32, i32* @y.64
  %1297 = sub i32 %1295, 1
  %1298 = mul i32 %1295, %1297
  %1299 = urem i32 %1298, 2
  %1300 = icmp eq i32 %1299, 0
  %1301 = icmp slt i32 %1296, 10
  %1302 = or i1 %1300, %1301
  br i1 %1302, label %originalBBpart2324, label %originalBB322alteredBB

originalBBpart2324:                               ; preds = %originalBB322
  br label %1303, !dbg !4726

1303:                                             ; preds = %originalBBpart2324
  %1304 = load i32, i32* @x.63
  %1305 = load i32, i32* @y.64
  %1306 = sub i32 %1304, 1
  %1307 = mul i32 %1304, %1306
  %1308 = urem i32 %1307, 2
  %1309 = icmp eq i32 %1308, 0
  %1310 = icmp slt i32 %1305, 10
  %1311 = or i1 %1309, %1310
  br i1 %1311, label %originalBB326, label %originalBB326alteredBB

originalBB326:                                    ; preds = %1303, %originalBB326alteredBB
  %1312 = load i64, i64* %29, align 8, !dbg !4732
  %1313 = load i64, i64* %20, align 8, !dbg !4732
  %1314 = icmp ult i64 %1312, %1313, !dbg !4732
  %1315 = load i32, i32* @x.63
  %1316 = load i32, i32* @y.64
  %1317 = sub i32 %1315, 1
  %1318 = mul i32 %1315, %1317
  %1319 = urem i32 %1318, 2
  %1320 = icmp eq i32 %1319, 0
  %1321 = icmp slt i32 %1316, 10
  %1322 = or i1 %1320, %1321
  br i1 %1322, label %originalBBpart2328, label %originalBB326alteredBB

originalBBpart2328:                               ; preds = %originalBB326
  br i1 %1314, label %1323, label %1343, !dbg !4735

1323:                                             ; preds = %originalBBpart2328
  %1324 = load i32, i32* @x.63
  %1325 = load i32, i32* @y.64
  %1326 = sub i32 %1324, 1
  %1327 = mul i32 %1324, %1326
  %1328 = urem i32 %1327, 2
  %1329 = icmp eq i32 %1328, 0
  %1330 = icmp slt i32 %1325, 10
  %1331 = or i1 %1329, %1330
  br i1 %1331, label %originalBB330, label %originalBB330alteredBB

originalBB330:                                    ; preds = %1323, %originalBB330alteredBB
  %1332 = load i8*, i8** %19, align 8, !dbg !4732
  %1333 = load i64, i64* %29, align 8, !dbg !4732
  %1334 = getelementptr inbounds i8, i8* %1332, i64 %1333, !dbg !4732
  store i8 36, i8* %1334, align 1, !dbg !4732
  %1335 = load i32, i32* @x.63
  %1336 = load i32, i32* @y.64
  %1337 = sub i32 %1335, 1
  %1338 = mul i32 %1335, %1337
  %1339 = urem i32 %1338, 2
  %1340 = icmp eq i32 %1339, 0
  %1341 = icmp slt i32 %1336, 10
  %1342 = or i1 %1340, %1341
  br i1 %1342, label %originalBBpart2332, label %originalBB330alteredBB

originalBBpart2332:                               ; preds = %originalBB330
  br label %1343, !dbg !4732

1343:                                             ; preds = %originalBBpart2332, %originalBBpart2328
  %1344 = load i32, i32* @x.63
  %1345 = load i32, i32* @y.64
  %1346 = sub i32 %1344, 1
  %1347 = mul i32 %1344, %1346
  %1348 = urem i32 %1347, 2
  %1349 = icmp eq i32 %1348, 0
  %1350 = icmp slt i32 %1345, 10
  %1351 = or i1 %1349, %1350
  br i1 %1351, label %originalBB334, label %originalBB334alteredBB

originalBB334:                                    ; preds = %1343, %originalBB334alteredBB
  %1352 = load i64, i64* %29, align 8, !dbg !4735
  %1353 = add i64 %1352, 1, !dbg !4735
  store i64 %1353, i64* %29, align 8, !dbg !4735
  %1354 = load i32, i32* @x.63
  %1355 = load i32, i32* @y.64
  %1356 = sub i32 %1354, 1
  %1357 = mul i32 %1354, %1356
  %1358 = urem i32 %1357, 2
  %1359 = icmp eq i32 %1358, 0
  %1360 = icmp slt i32 %1355, 10
  %1361 = or i1 %1359, %1360
  br i1 %1361, label %originalBBpart2349, label %originalBB334alteredBB

originalBBpart2349:                               ; preds = %originalBB334
  br label %1362, !dbg !4735

1362:                                             ; preds = %originalBBpart2349
  %1363 = load i32, i32* @x.63
  %1364 = load i32, i32* @y.64
  %1365 = sub i32 %1363, 1
  %1366 = mul i32 %1363, %1365
  %1367 = urem i32 %1366, 2
  %1368 = icmp eq i32 %1367, 0
  %1369 = icmp slt i32 %1364, 10
  %1370 = or i1 %1368, %1369
  br i1 %1370, label %originalBB351, label %originalBB351alteredBB

originalBB351:                                    ; preds = %1362, %originalBB351alteredBB
  %1371 = load i32, i32* @x.63
  %1372 = load i32, i32* @y.64
  %1373 = sub i32 %1371, 1
  %1374 = mul i32 %1371, %1373
  %1375 = urem i32 %1374, 2
  %1376 = icmp eq i32 %1375, 0
  %1377 = icmp slt i32 %1372, 10
  %1378 = or i1 %1376, %1377
  br i1 %1378, label %originalBBpart2353, label %originalBB351alteredBB

originalBBpart2353:                               ; preds = %originalBB351
  br label %1379, !dbg !4726

1379:                                             ; preds = %originalBBpart2353
  %1380 = load i32, i32* @x.63
  %1381 = load i32, i32* @y.64
  %1382 = sub i32 %1380, 1
  %1383 = mul i32 %1380, %1382
  %1384 = urem i32 %1383, 2
  %1385 = icmp eq i32 %1384, 0
  %1386 = icmp slt i32 %1381, 10
  %1387 = or i1 %1385, %1386
  br i1 %1387, label %originalBB355, label %originalBB355alteredBB

originalBB355:                                    ; preds = %1379, %originalBB355alteredBB
  %1388 = load i64, i64* %29, align 8, !dbg !4736
  %1389 = load i64, i64* %20, align 8, !dbg !4736
  %1390 = icmp ult i64 %1388, %1389, !dbg !4736
  %1391 = load i32, i32* @x.63
  %1392 = load i32, i32* @y.64
  %1393 = sub i32 %1391, 1
  %1394 = mul i32 %1391, %1393
  %1395 = urem i32 %1394, 2
  %1396 = icmp eq i32 %1395, 0
  %1397 = icmp slt i32 %1392, 10
  %1398 = or i1 %1396, %1397
  br i1 %1398, label %originalBBpart2357, label %originalBB355alteredBB

originalBBpart2357:                               ; preds = %originalBB355
  br i1 %1390, label %1399, label %1419, !dbg !4739

1399:                                             ; preds = %originalBBpart2357
  %1400 = load i32, i32* @x.63
  %1401 = load i32, i32* @y.64
  %1402 = sub i32 %1400, 1
  %1403 = mul i32 %1400, %1402
  %1404 = urem i32 %1403, 2
  %1405 = icmp eq i32 %1404, 0
  %1406 = icmp slt i32 %1401, 10
  %1407 = or i1 %1405, %1406
  br i1 %1407, label %originalBB359, label %originalBB359alteredBB

originalBB359:                                    ; preds = %1399, %originalBB359alteredBB
  %1408 = load i8*, i8** %19, align 8, !dbg !4736
  %1409 = load i64, i64* %29, align 8, !dbg !4736
  %1410 = getelementptr inbounds i8, i8* %1408, i64 %1409, !dbg !4736
  store i8 39, i8* %1410, align 1, !dbg !4736
  %1411 = load i32, i32* @x.63
  %1412 = load i32, i32* @y.64
  %1413 = sub i32 %1411, 1
  %1414 = mul i32 %1411, %1413
  %1415 = urem i32 %1414, 2
  %1416 = icmp eq i32 %1415, 0
  %1417 = icmp slt i32 %1412, 10
  %1418 = or i1 %1416, %1417
  br i1 %1418, label %originalBBpart2361, label %originalBB359alteredBB

originalBBpart2361:                               ; preds = %originalBB359
  br label %1419, !dbg !4736

1419:                                             ; preds = %originalBBpart2361, %originalBBpart2357
  %1420 = load i32, i32* @x.63
  %1421 = load i32, i32* @y.64
  %1422 = sub i32 %1420, 1
  %1423 = mul i32 %1420, %1422
  %1424 = urem i32 %1423, 2
  %1425 = icmp eq i32 %1424, 0
  %1426 = icmp slt i32 %1421, 10
  %1427 = or i1 %1425, %1426
  br i1 %1427, label %originalBB363, label %originalBB363alteredBB

originalBB363:                                    ; preds = %1419, %originalBB363alteredBB
  %1428 = load i64, i64* %29, align 8, !dbg !4739
  %1429 = add i64 %1428, 1, !dbg !4739
  store i64 %1429, i64* %29, align 8, !dbg !4739
  %1430 = load i32, i32* @x.63
  %1431 = load i32, i32* @y.64
  %1432 = sub i32 %1430, 1
  %1433 = mul i32 %1430, %1432
  %1434 = urem i32 %1433, 2
  %1435 = icmp eq i32 %1434, 0
  %1436 = icmp slt i32 %1431, 10
  %1437 = or i1 %1435, %1436
  br i1 %1437, label %originalBBpart2372, label %originalBB363alteredBB

originalBBpart2372:                               ; preds = %originalBB363
  br label %1438, !dbg !4739

1438:                                             ; preds = %originalBBpart2372
  %1439 = load i32, i32* @x.63
  %1440 = load i32, i32* @y.64
  %1441 = sub i32 %1439, 1
  %1442 = mul i32 %1439, %1441
  %1443 = urem i32 %1442, 2
  %1444 = icmp eq i32 %1443, 0
  %1445 = icmp slt i32 %1440, 10
  %1446 = or i1 %1444, %1445
  br i1 %1446, label %originalBB374, label %originalBB374alteredBB

originalBB374:                                    ; preds = %1438, %originalBB374alteredBB
  store i8 1, i8* %36, align 1, !dbg !4726
  %1447 = load i32, i32* @x.63
  %1448 = load i32, i32* @y.64
  %1449 = sub i32 %1447, 1
  %1450 = mul i32 %1447, %1449
  %1451 = urem i32 %1450, 2
  %1452 = icmp eq i32 %1451, 0
  %1453 = icmp slt i32 %1448, 10
  %1454 = or i1 %1452, %1453
  br i1 %1454, label %originalBBpart2376, label %originalBB374alteredBB

originalBBpart2376:                               ; preds = %originalBB374
  br label %1455, !dbg !4726

1455:                                             ; preds = %originalBBpart2376, %originalBBpart2290, %originalBBpart2286
  %1456 = load i32, i32* @x.63
  %1457 = load i32, i32* @y.64
  %1458 = sub i32 %1456, 1
  %1459 = mul i32 %1456, %1458
  %1460 = urem i32 %1459, 2
  %1461 = icmp eq i32 %1460, 0
  %1462 = icmp slt i32 %1457, 10
  %1463 = or i1 %1461, %1462
  br i1 %1463, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %1455, %originalBB378alteredBB
  %1464 = load i32, i32* @x.63
  %1465 = load i32, i32* @y.64
  %1466 = sub i32 %1464, 1
  %1467 = mul i32 %1464, %1466
  %1468 = urem i32 %1467, 2
  %1469 = icmp eq i32 %1468, 0
  %1470 = icmp slt i32 %1465, 10
  %1471 = or i1 %1469, %1470
  br i1 %1471, label %originalBBpart2380, label %originalBB378alteredBB

originalBBpart2380:                               ; preds = %originalBB378
  br label %1472, !dbg !4723

1472:                                             ; preds = %originalBBpart2380
  %1473 = load i32, i32* @x.63
  %1474 = load i32, i32* @y.64
  %1475 = sub i32 %1473, 1
  %1476 = mul i32 %1473, %1475
  %1477 = urem i32 %1476, 2
  %1478 = icmp eq i32 %1477, 0
  %1479 = icmp slt i32 %1474, 10
  %1480 = or i1 %1478, %1479
  br i1 %1480, label %originalBB382, label %originalBB382alteredBB

originalBB382:                                    ; preds = %1472, %originalBB382alteredBB
  %1481 = load i64, i64* %29, align 8, !dbg !4740
  %1482 = load i64, i64* %20, align 8, !dbg !4740
  %1483 = icmp ult i64 %1481, %1482, !dbg !4740
  %1484 = load i32, i32* @x.63
  %1485 = load i32, i32* @y.64
  %1486 = sub i32 %1484, 1
  %1487 = mul i32 %1484, %1486
  %1488 = urem i32 %1487, 2
  %1489 = icmp eq i32 %1488, 0
  %1490 = icmp slt i32 %1485, 10
  %1491 = or i1 %1489, %1490
  br i1 %1491, label %originalBBpart2384, label %originalBB382alteredBB

originalBBpart2384:                               ; preds = %originalBB382
  br i1 %1483, label %1492, label %1512, !dbg !4743

1492:                                             ; preds = %originalBBpart2384
  %1493 = load i32, i32* @x.63
  %1494 = load i32, i32* @y.64
  %1495 = sub i32 %1493, 1
  %1496 = mul i32 %1493, %1495
  %1497 = urem i32 %1496, 2
  %1498 = icmp eq i32 %1497, 0
  %1499 = icmp slt i32 %1494, 10
  %1500 = or i1 %1498, %1499
  br i1 %1500, label %originalBB386, label %originalBB386alteredBB

originalBB386:                                    ; preds = %1492, %originalBB386alteredBB
  %1501 = load i8*, i8** %19, align 8, !dbg !4740
  %1502 = load i64, i64* %29, align 8, !dbg !4740
  %1503 = getelementptr inbounds i8, i8* %1501, i64 %1502, !dbg !4740
  store i8 92, i8* %1503, align 1, !dbg !4740
  %1504 = load i32, i32* @x.63
  %1505 = load i32, i32* @y.64
  %1506 = sub i32 %1504, 1
  %1507 = mul i32 %1504, %1506
  %1508 = urem i32 %1507, 2
  %1509 = icmp eq i32 %1508, 0
  %1510 = icmp slt i32 %1505, 10
  %1511 = or i1 %1509, %1510
  br i1 %1511, label %originalBBpart2388, label %originalBB386alteredBB

originalBBpart2388:                               ; preds = %originalBB386
  br label %1512, !dbg !4740

1512:                                             ; preds = %originalBBpart2388, %originalBBpart2384
  %1513 = load i32, i32* @x.63
  %1514 = load i32, i32* @y.64
  %1515 = sub i32 %1513, 1
  %1516 = mul i32 %1513, %1515
  %1517 = urem i32 %1516, 2
  %1518 = icmp eq i32 %1517, 0
  %1519 = icmp slt i32 %1514, 10
  %1520 = or i1 %1518, %1519
  br i1 %1520, label %originalBB390, label %originalBB390alteredBB

originalBB390:                                    ; preds = %1512, %originalBB390alteredBB
  %1521 = load i64, i64* %29, align 8, !dbg !4743
  %1522 = add i64 %1521, 1, !dbg !4743
  store i64 %1522, i64* %29, align 8, !dbg !4743
  %1523 = load i32, i32* @x.63
  %1524 = load i32, i32* @y.64
  %1525 = sub i32 %1523, 1
  %1526 = mul i32 %1523, %1525
  %1527 = urem i32 %1526, 2
  %1528 = icmp eq i32 %1527, 0
  %1529 = icmp slt i32 %1524, 10
  %1530 = or i1 %1528, %1529
  br i1 %1530, label %originalBBpart2397, label %originalBB390alteredBB

originalBBpart2397:                               ; preds = %originalBB390
  br label %1531, !dbg !4743

1531:                                             ; preds = %originalBBpart2397
  %1532 = load i32, i32* @x.63
  %1533 = load i32, i32* @y.64
  %1534 = sub i32 %1532, 1
  %1535 = mul i32 %1532, %1534
  %1536 = urem i32 %1535, 2
  %1537 = icmp eq i32 %1536, 0
  %1538 = icmp slt i32 %1533, 10
  %1539 = or i1 %1537, %1538
  br i1 %1539, label %originalBB399, label %originalBB399alteredBB

originalBB399:                                    ; preds = %1531, %originalBB399alteredBB
  %1540 = load i32, i32* @x.63
  %1541 = load i32, i32* @y.64
  %1542 = sub i32 %1540, 1
  %1543 = mul i32 %1540, %1542
  %1544 = urem i32 %1543, 2
  %1545 = icmp eq i32 %1544, 0
  %1546 = icmp slt i32 %1541, 10
  %1547 = or i1 %1545, %1546
  br i1 %1547, label %originalBBpart2401, label %originalBB399alteredBB

originalBBpart2401:                               ; preds = %originalBB399
  br label %1548, !dbg !4723

1548:                                             ; preds = %originalBBpart2401
  %1549 = load i32, i32* @x.63
  %1550 = load i32, i32* @y.64
  %1551 = sub i32 %1549, 1
  %1552 = mul i32 %1549, %1551
  %1553 = urem i32 %1552, 2
  %1554 = icmp eq i32 %1553, 0
  %1555 = icmp slt i32 %1550, 10
  %1556 = or i1 %1554, %1555
  br i1 %1556, label %originalBB403, label %originalBB403alteredBB

originalBB403:                                    ; preds = %1548, %originalBB403alteredBB
  %1557 = load i32, i32* %23, align 4, !dbg !4744
  %1558 = icmp ne i32 %1557, 2, !dbg !4746
  %1559 = load i32, i32* @x.63
  %1560 = load i32, i32* @y.64
  %1561 = sub i32 %1559, 1
  %1562 = mul i32 %1559, %1561
  %1563 = urem i32 %1562, 2
  %1564 = icmp eq i32 %1563, 0
  %1565 = icmp slt i32 %1560, 10
  %1566 = or i1 %1564, %1565
  br i1 %1566, label %originalBBpart2405, label %originalBB403alteredBB

originalBBpart2405:                               ; preds = %originalBB403
  br i1 %1558, label %1567, label %1805, !dbg !4747

1567:                                             ; preds = %originalBBpart2405
  %1568 = load i32, i32* @x.63
  %1569 = load i32, i32* @y.64
  %1570 = sub i32 %1568, 1
  %1571 = mul i32 %1568, %1570
  %1572 = urem i32 %1571, 2
  %1573 = icmp eq i32 %1572, 0
  %1574 = icmp slt i32 %1569, 10
  %1575 = or i1 %1573, %1574
  br i1 %1575, label %originalBB407, label %originalBB407alteredBB

originalBB407:                                    ; preds = %1567, %originalBB407alteredBB
  %1576 = load i64, i64* %28, align 8, !dbg !4748
  %1577 = add i64 %1576, 1, !dbg !4749
  %1578 = load i64, i64* %22, align 8, !dbg !4750
  %1579 = icmp ult i64 %1577, %1578, !dbg !4751
  %1580 = load i32, i32* @x.63
  %1581 = load i32, i32* @y.64
  %1582 = sub i32 %1580, 1
  %1583 = mul i32 %1580, %1582
  %1584 = urem i32 %1583, 2
  %1585 = icmp eq i32 %1584, 0
  %1586 = icmp slt i32 %1581, 10
  %1587 = or i1 %1585, %1586
  br i1 %1587, label %originalBBpart2413, label %originalBB407alteredBB

originalBBpart2413:                               ; preds = %originalBB407
  br i1 %1579, label %1588, label %1805, !dbg !4752

1588:                                             ; preds = %originalBBpart2413
  %1589 = load i32, i32* @x.63
  %1590 = load i32, i32* @y.64
  %1591 = sub i32 %1589, 1
  %1592 = mul i32 %1589, %1591
  %1593 = urem i32 %1592, 2
  %1594 = icmp eq i32 %1593, 0
  %1595 = icmp slt i32 %1590, 10
  %1596 = or i1 %1594, %1595
  br i1 %1596, label %originalBB415, label %originalBB415alteredBB

originalBB415:                                    ; preds = %1588, %originalBB415alteredBB
  %1597 = load i8*, i8** %21, align 8, !dbg !4753
  %1598 = load i64, i64* %28, align 8, !dbg !4754
  %1599 = add i64 %1598, 1, !dbg !4755
  %1600 = getelementptr inbounds i8, i8* %1597, i64 %1599, !dbg !4753
  %1601 = load i8, i8* %1600, align 1, !dbg !4753
  %1602 = sext i8 %1601 to i32, !dbg !4753
  %1603 = icmp sle i32 48, %1602, !dbg !4756
  %1604 = load i32, i32* @x.63
  %1605 = load i32, i32* @y.64
  %1606 = sub i32 %1604, 1
  %1607 = mul i32 %1604, %1606
  %1608 = urem i32 %1607, 2
  %1609 = icmp eq i32 %1608, 0
  %1610 = icmp slt i32 %1605, 10
  %1611 = or i1 %1609, %1610
  br i1 %1611, label %originalBBpart2425, label %originalBB415alteredBB

originalBBpart2425:                               ; preds = %originalBB415
  br i1 %1603, label %1612, label %1805, !dbg !4757

1612:                                             ; preds = %originalBBpart2425
  %1613 = load i32, i32* @x.63
  %1614 = load i32, i32* @y.64
  %1615 = sub i32 %1613, 1
  %1616 = mul i32 %1613, %1615
  %1617 = urem i32 %1616, 2
  %1618 = icmp eq i32 %1617, 0
  %1619 = icmp slt i32 %1614, 10
  %1620 = or i1 %1618, %1619
  br i1 %1620, label %originalBB427, label %originalBB427alteredBB

originalBB427:                                    ; preds = %1612, %originalBB427alteredBB
  %1621 = load i8*, i8** %21, align 8, !dbg !4758
  %1622 = load i64, i64* %28, align 8, !dbg !4759
  %1623 = add i64 %1622, 1, !dbg !4760
  %1624 = getelementptr inbounds i8, i8* %1621, i64 %1623, !dbg !4758
  %1625 = load i8, i8* %1624, align 1, !dbg !4758
  %1626 = sext i8 %1625 to i32, !dbg !4758
  %1627 = icmp sle i32 %1626, 57, !dbg !4761
  %1628 = load i32, i32* @x.63
  %1629 = load i32, i32* @y.64
  %1630 = sub i32 %1628, 1
  %1631 = mul i32 %1628, %1630
  %1632 = urem i32 %1631, 2
  %1633 = icmp eq i32 %1632, 0
  %1634 = icmp slt i32 %1629, 10
  %1635 = or i1 %1633, %1634
  br i1 %1635, label %originalBBpart2431, label %originalBB427alteredBB

originalBBpart2431:                               ; preds = %originalBB427
  br i1 %1627, label %1636, label %1805, !dbg !4762

1636:                                             ; preds = %originalBBpart2431
  %1637 = load i32, i32* @x.63
  %1638 = load i32, i32* @y.64
  %1639 = sub i32 %1637, 1
  %1640 = mul i32 %1637, %1639
  %1641 = urem i32 %1640, 2
  %1642 = icmp eq i32 %1641, 0
  %1643 = icmp slt i32 %1638, 10
  %1644 = or i1 %1642, %1643
  br i1 %1644, label %originalBB433, label %originalBB433alteredBB

originalBB433:                                    ; preds = %1636, %originalBB433alteredBB
  %1645 = load i32, i32* @x.63
  %1646 = load i32, i32* @y.64
  %1647 = sub i32 %1645, 1
  %1648 = mul i32 %1645, %1647
  %1649 = urem i32 %1648, 2
  %1650 = icmp eq i32 %1649, 0
  %1651 = icmp slt i32 %1646, 10
  %1652 = or i1 %1650, %1651
  br i1 %1652, label %originalBBpart2435, label %originalBB433alteredBB

originalBBpart2435:                               ; preds = %originalBB433
  br label %1653, !dbg !4763

1653:                                             ; preds = %originalBBpart2435
  %1654 = load i32, i32* @x.63
  %1655 = load i32, i32* @y.64
  %1656 = sub i32 %1654, 1
  %1657 = mul i32 %1654, %1656
  %1658 = urem i32 %1657, 2
  %1659 = icmp eq i32 %1658, 0
  %1660 = icmp slt i32 %1655, 10
  %1661 = or i1 %1659, %1660
  br i1 %1661, label %originalBB437, label %originalBB437alteredBB

originalBB437:                                    ; preds = %1653, %originalBB437alteredBB
  %1662 = load i64, i64* %29, align 8, !dbg !4765
  %1663 = load i64, i64* %20, align 8, !dbg !4765
  %1664 = icmp ult i64 %1662, %1663, !dbg !4765
  %1665 = load i32, i32* @x.63
  %1666 = load i32, i32* @y.64
  %1667 = sub i32 %1665, 1
  %1668 = mul i32 %1665, %1667
  %1669 = urem i32 %1668, 2
  %1670 = icmp eq i32 %1669, 0
  %1671 = icmp slt i32 %1666, 10
  %1672 = or i1 %1670, %1671
  br i1 %1672, label %originalBBpart2439, label %originalBB437alteredBB

originalBBpart2439:                               ; preds = %originalBB437
  br i1 %1664, label %1673, label %1693, !dbg !4768

1673:                                             ; preds = %originalBBpart2439
  %1674 = load i32, i32* @x.63
  %1675 = load i32, i32* @y.64
  %1676 = sub i32 %1674, 1
  %1677 = mul i32 %1674, %1676
  %1678 = urem i32 %1677, 2
  %1679 = icmp eq i32 %1678, 0
  %1680 = icmp slt i32 %1675, 10
  %1681 = or i1 %1679, %1680
  br i1 %1681, label %originalBB441, label %originalBB441alteredBB

originalBB441:                                    ; preds = %1673, %originalBB441alteredBB
  %1682 = load i8*, i8** %19, align 8, !dbg !4765
  %1683 = load i64, i64* %29, align 8, !dbg !4765
  %1684 = getelementptr inbounds i8, i8* %1682, i64 %1683, !dbg !4765
  store i8 48, i8* %1684, align 1, !dbg !4765
  %1685 = load i32, i32* @x.63
  %1686 = load i32, i32* @y.64
  %1687 = sub i32 %1685, 1
  %1688 = mul i32 %1685, %1687
  %1689 = urem i32 %1688, 2
  %1690 = icmp eq i32 %1689, 0
  %1691 = icmp slt i32 %1686, 10
  %1692 = or i1 %1690, %1691
  br i1 %1692, label %originalBBpart2443, label %originalBB441alteredBB

originalBBpart2443:                               ; preds = %originalBB441
  br label %1693, !dbg !4765

1693:                                             ; preds = %originalBBpart2443, %originalBBpart2439
  %1694 = load i32, i32* @x.63
  %1695 = load i32, i32* @y.64
  %1696 = sub i32 %1694, 1
  %1697 = mul i32 %1694, %1696
  %1698 = urem i32 %1697, 2
  %1699 = icmp eq i32 %1698, 0
  %1700 = icmp slt i32 %1695, 10
  %1701 = or i1 %1699, %1700
  br i1 %1701, label %originalBB445, label %originalBB445alteredBB

originalBB445:                                    ; preds = %1693, %originalBB445alteredBB
  %1702 = load i64, i64* %29, align 8, !dbg !4768
  %1703 = add i64 %1702, 1, !dbg !4768
  store i64 %1703, i64* %29, align 8, !dbg !4768
  %1704 = load i32, i32* @x.63
  %1705 = load i32, i32* @y.64
  %1706 = sub i32 %1704, 1
  %1707 = mul i32 %1704, %1706
  %1708 = urem i32 %1707, 2
  %1709 = icmp eq i32 %1708, 0
  %1710 = icmp slt i32 %1705, 10
  %1711 = or i1 %1709, %1710
  br i1 %1711, label %originalBBpart2455, label %originalBB445alteredBB

originalBBpart2455:                               ; preds = %originalBB445
  br label %1712, !dbg !4768

1712:                                             ; preds = %originalBBpart2455
  %1713 = load i32, i32* @x.63
  %1714 = load i32, i32* @y.64
  %1715 = sub i32 %1713, 1
  %1716 = mul i32 %1713, %1715
  %1717 = urem i32 %1716, 2
  %1718 = icmp eq i32 %1717, 0
  %1719 = icmp slt i32 %1714, 10
  %1720 = or i1 %1718, %1719
  br i1 %1720, label %originalBB457, label %originalBB457alteredBB

originalBB457:                                    ; preds = %1712, %originalBB457alteredBB
  %1721 = load i32, i32* @x.63
  %1722 = load i32, i32* @y.64
  %1723 = sub i32 %1721, 1
  %1724 = mul i32 %1721, %1723
  %1725 = urem i32 %1724, 2
  %1726 = icmp eq i32 %1725, 0
  %1727 = icmp slt i32 %1722, 10
  %1728 = or i1 %1726, %1727
  br i1 %1728, label %originalBBpart2459, label %originalBB457alteredBB

originalBBpart2459:                               ; preds = %originalBB457
  br label %1729, !dbg !4769

1729:                                             ; preds = %originalBBpart2459
  %1730 = load i32, i32* @x.63
  %1731 = load i32, i32* @y.64
  %1732 = sub i32 %1730, 1
  %1733 = mul i32 %1730, %1732
  %1734 = urem i32 %1733, 2
  %1735 = icmp eq i32 %1734, 0
  %1736 = icmp slt i32 %1731, 10
  %1737 = or i1 %1735, %1736
  br i1 %1737, label %originalBB461, label %originalBB461alteredBB

originalBB461:                                    ; preds = %1729, %originalBB461alteredBB
  %1738 = load i64, i64* %29, align 8, !dbg !4770
  %1739 = load i64, i64* %20, align 8, !dbg !4770
  %1740 = icmp ult i64 %1738, %1739, !dbg !4770
  %1741 = load i32, i32* @x.63
  %1742 = load i32, i32* @y.64
  %1743 = sub i32 %1741, 1
  %1744 = mul i32 %1741, %1743
  %1745 = urem i32 %1744, 2
  %1746 = icmp eq i32 %1745, 0
  %1747 = icmp slt i32 %1742, 10
  %1748 = or i1 %1746, %1747
  br i1 %1748, label %originalBBpart2463, label %originalBB461alteredBB

originalBBpart2463:                               ; preds = %originalBB461
  br i1 %1740, label %1749, label %1769, !dbg !4773

1749:                                             ; preds = %originalBBpart2463
  %1750 = load i32, i32* @x.63
  %1751 = load i32, i32* @y.64
  %1752 = sub i32 %1750, 1
  %1753 = mul i32 %1750, %1752
  %1754 = urem i32 %1753, 2
  %1755 = icmp eq i32 %1754, 0
  %1756 = icmp slt i32 %1751, 10
  %1757 = or i1 %1755, %1756
  br i1 %1757, label %originalBB465, label %originalBB465alteredBB

originalBB465:                                    ; preds = %1749, %originalBB465alteredBB
  %1758 = load i8*, i8** %19, align 8, !dbg !4770
  %1759 = load i64, i64* %29, align 8, !dbg !4770
  %1760 = getelementptr inbounds i8, i8* %1758, i64 %1759, !dbg !4770
  store i8 48, i8* %1760, align 1, !dbg !4770
  %1761 = load i32, i32* @x.63
  %1762 = load i32, i32* @y.64
  %1763 = sub i32 %1761, 1
  %1764 = mul i32 %1761, %1763
  %1765 = urem i32 %1764, 2
  %1766 = icmp eq i32 %1765, 0
  %1767 = icmp slt i32 %1762, 10
  %1768 = or i1 %1766, %1767
  br i1 %1768, label %originalBBpart2467, label %originalBB465alteredBB

originalBBpart2467:                               ; preds = %originalBB465
  br label %1769, !dbg !4770

1769:                                             ; preds = %originalBBpart2467, %originalBBpart2463
  %1770 = load i32, i32* @x.63
  %1771 = load i32, i32* @y.64
  %1772 = sub i32 %1770, 1
  %1773 = mul i32 %1770, %1772
  %1774 = urem i32 %1773, 2
  %1775 = icmp eq i32 %1774, 0
  %1776 = icmp slt i32 %1771, 10
  %1777 = or i1 %1775, %1776
  br i1 %1777, label %originalBB469, label %originalBB469alteredBB

originalBB469:                                    ; preds = %1769, %originalBB469alteredBB
  %1778 = load i64, i64* %29, align 8, !dbg !4773
  %1779 = add i64 %1778, 1, !dbg !4773
  store i64 %1779, i64* %29, align 8, !dbg !4773
  %1780 = load i32, i32* @x.63
  %1781 = load i32, i32* @y.64
  %1782 = sub i32 %1780, 1
  %1783 = mul i32 %1780, %1782
  %1784 = urem i32 %1783, 2
  %1785 = icmp eq i32 %1784, 0
  %1786 = icmp slt i32 %1781, 10
  %1787 = or i1 %1785, %1786
  br i1 %1787, label %originalBBpart2481, label %originalBB469alteredBB

originalBBpart2481:                               ; preds = %originalBB469
  br label %1788, !dbg !4773

1788:                                             ; preds = %originalBBpart2481
  %1789 = load i32, i32* @x.63
  %1790 = load i32, i32* @y.64
  %1791 = sub i32 %1789, 1
  %1792 = mul i32 %1789, %1791
  %1793 = urem i32 %1792, 2
  %1794 = icmp eq i32 %1793, 0
  %1795 = icmp slt i32 %1790, 10
  %1796 = or i1 %1794, %1795
  br i1 %1796, label %originalBB483, label %originalBB483alteredBB

originalBB483:                                    ; preds = %1788, %originalBB483alteredBB
  %1797 = load i32, i32* @x.63
  %1798 = load i32, i32* @y.64
  %1799 = sub i32 %1797, 1
  %1800 = mul i32 %1797, %1799
  %1801 = urem i32 %1800, 2
  %1802 = icmp eq i32 %1801, 0
  %1803 = icmp slt i32 %1798, 10
  %1804 = or i1 %1802, %1803
  br i1 %1804, label %originalBBpart2485, label %originalBB483alteredBB

originalBBpart2485:                               ; preds = %originalBB483
  br label %1805, !dbg !4774

1805:                                             ; preds = %originalBBpart2485, %originalBBpart2431, %originalBBpart2425, %originalBBpart2413, %originalBBpart2405
  %1806 = load i32, i32* @x.63
  %1807 = load i32, i32* @y.64
  %1808 = sub i32 %1806, 1
  %1809 = mul i32 %1806, %1808
  %1810 = urem i32 %1809, 2
  %1811 = icmp eq i32 %1810, 0
  %1812 = icmp slt i32 %1807, 10
  %1813 = or i1 %1811, %1812
  br i1 %1813, label %originalBB487, label %originalBB487alteredBB

originalBB487:                                    ; preds = %1805, %originalBB487alteredBB
  store i8 48, i8* %39, align 1, !dbg !4775
  %1814 = load i32, i32* @x.63
  %1815 = load i32, i32* @y.64
  %1816 = sub i32 %1814, 1
  %1817 = mul i32 %1814, %1816
  %1818 = urem i32 %1817, 2
  %1819 = icmp eq i32 %1818, 0
  %1820 = icmp slt i32 %1815, 10
  %1821 = or i1 %1819, %1820
  br i1 %1821, label %originalBBpart2489, label %originalBB487alteredBB

originalBBpart2489:                               ; preds = %originalBB487
  br label %1876, !dbg !4776

1822:                                             ; preds = %originalBBpart2270
  %1823 = load i32, i32* @x.63
  %1824 = load i32, i32* @y.64
  %1825 = sub i32 %1823, 1
  %1826 = mul i32 %1823, %1825
  %1827 = urem i32 %1826, 2
  %1828 = icmp eq i32 %1827, 0
  %1829 = icmp slt i32 %1824, 10
  %1830 = or i1 %1828, %1829
  br i1 %1830, label %originalBB491, label %originalBB491alteredBB

originalBB491:                                    ; preds = %1822, %originalBB491alteredBB
  %1831 = load i32, i32* %24, align 4, !dbg !4777
  %1832 = and i32 %1831, 1, !dbg !4779
  %1833 = icmp ne i32 %1832, 0, !dbg !4779
  %1834 = load i32, i32* @x.63
  %1835 = load i32, i32* @y.64
  %1836 = sub i32 %1834, 1
  %1837 = mul i32 %1834, %1836
  %1838 = urem i32 %1837, 2
  %1839 = icmp eq i32 %1838, 0
  %1840 = icmp slt i32 %1835, 10
  %1841 = or i1 %1839, %1840
  br i1 %1841, label %originalBBpart2503, label %originalBB491alteredBB

originalBBpart2503:                               ; preds = %originalBB491
  br i1 %1833, label %1842, label %1859, !dbg !4780

1842:                                             ; preds = %originalBBpart2503
  %1843 = load i32, i32* @x.63
  %1844 = load i32, i32* @y.64
  %1845 = sub i32 %1843, 1
  %1846 = mul i32 %1843, %1845
  %1847 = urem i32 %1846, 2
  %1848 = icmp eq i32 %1847, 0
  %1849 = icmp slt i32 %1844, 10
  %1850 = or i1 %1848, %1849
  br i1 %1850, label %originalBB505, label %originalBB505alteredBB

originalBB505:                                    ; preds = %1842, %originalBB505alteredBB
  %1851 = load i32, i32* @x.63
  %1852 = load i32, i32* @y.64
  %1853 = sub i32 %1851, 1
  %1854 = mul i32 %1851, %1853
  %1855 = urem i32 %1854, 2
  %1856 = icmp eq i32 %1855, 0
  %1857 = icmp slt i32 %1852, 10
  %1858 = or i1 %1856, %1857
  br i1 %1858, label %originalBBpart2507, label %originalBB505alteredBB

originalBBpart2507:                               ; preds = %originalBB505
  br label %6441, !dbg !4781

1859:                                             ; preds = %originalBBpart2503
  %1860 = load i32, i32* @x.63
  %1861 = load i32, i32* @y.64
  %1862 = sub i32 %1860, 1
  %1863 = mul i32 %1860, %1862
  %1864 = urem i32 %1863, 2
  %1865 = icmp eq i32 %1864, 0
  %1866 = icmp slt i32 %1861, 10
  %1867 = or i1 %1865, %1866
  br i1 %1867, label %originalBB509, label %originalBB509alteredBB

originalBB509:                                    ; preds = %1859, %originalBB509alteredBB
  %1868 = load i32, i32* @x.63
  %1869 = load i32, i32* @y.64
  %1870 = sub i32 %1868, 1
  %1871 = mul i32 %1868, %1870
  %1872 = urem i32 %1871, 2
  %1873 = icmp eq i32 %1872, 0
  %1874 = icmp slt i32 %1869, 10
  %1875 = or i1 %1873, %1874
  br i1 %1875, label %originalBBpart2511, label %originalBB509alteredBB

originalBBpart2511:                               ; preds = %originalBB509
  br label %1876

1876:                                             ; preds = %originalBBpart2511, %originalBBpart2489
  %1877 = load i32, i32* @x.63
  %1878 = load i32, i32* @y.64
  %1879 = sub i32 %1877, 1
  %1880 = mul i32 %1877, %1879
  %1881 = urem i32 %1880, 2
  %1882 = icmp eq i32 %1881, 0
  %1883 = icmp slt i32 %1878, 10
  %1884 = or i1 %1882, %1883
  br i1 %1884, label %originalBB513, label %originalBB513alteredBB

originalBB513:                                    ; preds = %1876, %originalBB513alteredBB
  %1885 = load i32, i32* @x.63
  %1886 = load i32, i32* @y.64
  %1887 = sub i32 %1885, 1
  %1888 = mul i32 %1885, %1887
  %1889 = urem i32 %1888, 2
  %1890 = icmp eq i32 %1889, 0
  %1891 = icmp slt i32 %1886, 10
  %1892 = or i1 %1890, %1891
  br i1 %1892, label %originalBBpart2515, label %originalBB513alteredBB

originalBBpart2515:                               ; preds = %originalBB513
  br label %5465, !dbg !4782

1893:                                             ; preds = %originalBBpart2266
  %1894 = load i32, i32* @x.63
  %1895 = load i32, i32* @y.64
  %1896 = sub i32 %1894, 1
  %1897 = mul i32 %1894, %1896
  %1898 = urem i32 %1897, 2
  %1899 = icmp eq i32 %1898, 0
  %1900 = icmp slt i32 %1895, 10
  %1901 = or i1 %1899, %1900
  br i1 %1901, label %originalBB517, label %originalBB517alteredBB

originalBB517:                                    ; preds = %1893, %originalBB517alteredBB
  %1902 = load i32, i32* %23, align 4, !dbg !4783
  %1903 = load i32, i32* @x.63
  %1904 = load i32, i32* @y.64
  %1905 = sub i32 %1903, 1
  %1906 = mul i32 %1903, %1905
  %1907 = urem i32 %1906, 2
  %1908 = icmp eq i32 %1907, 0
  %1909 = icmp slt i32 %1904, 10
  %1910 = or i1 %1908, %1909
  br i1 %1910, label %originalBBpart2519, label %originalBB517alteredBB

originalBBpart2519:                               ; preds = %originalBB517
  switch i32 %1902, label %2467 [
    i32 2, label %1911
    i32 5, label %1964
  ], !dbg !4784

1911:                                             ; preds = %originalBBpart2519
  %1912 = load i32, i32* @x.63
  %1913 = load i32, i32* @y.64
  %1914 = sub i32 %1912, 1
  %1915 = mul i32 %1912, %1914
  %1916 = urem i32 %1915, 2
  %1917 = icmp eq i32 %1916, 0
  %1918 = icmp slt i32 %1913, 10
  %1919 = or i1 %1917, %1918
  br i1 %1919, label %originalBB521, label %originalBB521alteredBB

originalBB521:                                    ; preds = %1911, %originalBB521alteredBB
  %1920 = load i8, i8* %35, align 1, !dbg !4785
  %1921 = trunc i8 %1920 to i1, !dbg !4785
  %1922 = load i32, i32* @x.63
  %1923 = load i32, i32* @y.64
  %1924 = sub i32 %1922, 1
  %1925 = mul i32 %1922, %1924
  %1926 = urem i32 %1925, 2
  %1927 = icmp eq i32 %1926, 0
  %1928 = icmp slt i32 %1923, 10
  %1929 = or i1 %1927, %1928
  br i1 %1929, label %originalBBpart2523, label %originalBB521alteredBB

originalBBpart2523:                               ; preds = %originalBB521
  br i1 %1921, label %1930, label %1947, !dbg !4788

1930:                                             ; preds = %originalBBpart2523
  %1931 = load i32, i32* @x.63
  %1932 = load i32, i32* @y.64
  %1933 = sub i32 %1931, 1
  %1934 = mul i32 %1931, %1933
  %1935 = urem i32 %1934, 2
  %1936 = icmp eq i32 %1935, 0
  %1937 = icmp slt i32 %1932, 10
  %1938 = or i1 %1936, %1937
  br i1 %1938, label %originalBB525, label %originalBB525alteredBB

originalBB525:                                    ; preds = %1930, %originalBB525alteredBB
  %1939 = load i32, i32* @x.63
  %1940 = load i32, i32* @y.64
  %1941 = sub i32 %1939, 1
  %1942 = mul i32 %1939, %1941
  %1943 = urem i32 %1942, 2
  %1944 = icmp eq i32 %1943, 0
  %1945 = icmp slt i32 %1940, 10
  %1946 = or i1 %1944, %1945
  br i1 %1946, label %originalBBpart2527, label %originalBB525alteredBB

originalBBpart2527:                               ; preds = %originalBB525
  br label %6990, !dbg !4789

1947:                                             ; preds = %originalBBpart2523
  %1948 = load i32, i32* @x.63
  %1949 = load i32, i32* @y.64
  %1950 = sub i32 %1948, 1
  %1951 = mul i32 %1948, %1950
  %1952 = urem i32 %1951, 2
  %1953 = icmp eq i32 %1952, 0
  %1954 = icmp slt i32 %1949, 10
  %1955 = or i1 %1953, %1954
  br i1 %1955, label %originalBB529, label %originalBB529alteredBB

originalBB529:                                    ; preds = %1947, %originalBB529alteredBB
  %1956 = load i32, i32* @x.63
  %1957 = load i32, i32* @y.64
  %1958 = sub i32 %1956, 1
  %1959 = mul i32 %1956, %1958
  %1960 = urem i32 %1959, 2
  %1961 = icmp eq i32 %1960, 0
  %1962 = icmp slt i32 %1957, 10
  %1963 = or i1 %1961, %1962
  br i1 %1963, label %originalBBpart2531, label %originalBB529alteredBB

originalBBpart2531:                               ; preds = %originalBB529
  br label %2484, !dbg !4790

1964:                                             ; preds = %originalBBpart2519
  %1965 = load i32, i32* @x.63
  %1966 = load i32, i32* @y.64
  %1967 = sub i32 %1965, 1
  %1968 = mul i32 %1965, %1967
  %1969 = urem i32 %1968, 2
  %1970 = icmp eq i32 %1969, 0
  %1971 = icmp slt i32 %1966, 10
  %1972 = or i1 %1970, %1971
  br i1 %1972, label %originalBB533, label %originalBB533alteredBB

originalBB533:                                    ; preds = %1964, %originalBB533alteredBB
  %1973 = load i32, i32* %24, align 4, !dbg !4791
  %1974 = and i32 %1973, 4, !dbg !4793
  %1975 = icmp ne i32 %1974, 0, !dbg !4793
  %1976 = load i32, i32* @x.63
  %1977 = load i32, i32* @y.64
  %1978 = sub i32 %1976, 1
  %1979 = mul i32 %1976, %1978
  %1980 = urem i32 %1979, 2
  %1981 = icmp eq i32 %1980, 0
  %1982 = icmp slt i32 %1977, 10
  %1983 = or i1 %1981, %1982
  br i1 %1983, label %originalBBpart2537, label %originalBB533alteredBB

originalBBpart2537:                               ; preds = %originalBB533
  br i1 %1975, label %1984, label %2450, !dbg !4794

1984:                                             ; preds = %originalBBpart2537
  %1985 = load i32, i32* @x.63
  %1986 = load i32, i32* @y.64
  %1987 = sub i32 %1985, 1
  %1988 = mul i32 %1985, %1987
  %1989 = urem i32 %1988, 2
  %1990 = icmp eq i32 %1989, 0
  %1991 = icmp slt i32 %1986, 10
  %1992 = or i1 %1990, %1991
  br i1 %1992, label %originalBB539, label %originalBB539alteredBB

originalBB539:                                    ; preds = %1984, %originalBB539alteredBB
  %1993 = load i64, i64* %28, align 8, !dbg !4795
  %1994 = add i64 %1993, 2, !dbg !4796
  %1995 = load i64, i64* %22, align 8, !dbg !4797
  %1996 = icmp ult i64 %1994, %1995, !dbg !4798
  %1997 = load i32, i32* @x.63
  %1998 = load i32, i32* @y.64
  %1999 = sub i32 %1997, 1
  %2000 = mul i32 %1997, %1999
  %2001 = urem i32 %2000, 2
  %2002 = icmp eq i32 %2001, 0
  %2003 = icmp slt i32 %1998, 10
  %2004 = or i1 %2002, %2003
  br i1 %2004, label %originalBBpart2544, label %originalBB539alteredBB

originalBBpart2544:                               ; preds = %originalBB539
  br i1 %1996, label %2005, label %2450, !dbg !4799

2005:                                             ; preds = %originalBBpart2544
  %2006 = load i32, i32* @x.63
  %2007 = load i32, i32* @y.64
  %2008 = sub i32 %2006, 1
  %2009 = mul i32 %2006, %2008
  %2010 = urem i32 %2009, 2
  %2011 = icmp eq i32 %2010, 0
  %2012 = icmp slt i32 %2007, 10
  %2013 = or i1 %2011, %2012
  br i1 %2013, label %originalBB546, label %originalBB546alteredBB

originalBB546:                                    ; preds = %2005, %originalBB546alteredBB
  %2014 = load i8*, i8** %21, align 8, !dbg !4800
  %2015 = load i64, i64* %28, align 8, !dbg !4801
  %2016 = add i64 %2015, 1, !dbg !4802
  %2017 = getelementptr inbounds i8, i8* %2014, i64 %2016, !dbg !4800
  %2018 = load i8, i8* %2017, align 1, !dbg !4800
  %2019 = sext i8 %2018 to i32, !dbg !4800
  %2020 = icmp eq i32 %2019, 63, !dbg !4803
  %2021 = load i32, i32* @x.63
  %2022 = load i32, i32* @y.64
  %2023 = sub i32 %2021, 1
  %2024 = mul i32 %2021, %2023
  %2025 = urem i32 %2024, 2
  %2026 = icmp eq i32 %2025, 0
  %2027 = icmp slt i32 %2022, 10
  %2028 = or i1 %2026, %2027
  br i1 %2028, label %originalBBpart2560, label %originalBB546alteredBB

originalBBpart2560:                               ; preds = %originalBB546
  br i1 %2020, label %2029, label %2450, !dbg !4804

2029:                                             ; preds = %originalBBpart2560
  %2030 = load i32, i32* @x.63
  %2031 = load i32, i32* @y.64
  %2032 = sub i32 %2030, 1
  %2033 = mul i32 %2030, %2032
  %2034 = urem i32 %2033, 2
  %2035 = icmp eq i32 %2034, 0
  %2036 = icmp slt i32 %2031, 10
  %2037 = or i1 %2035, %2036
  br i1 %2037, label %originalBB562, label %originalBB562alteredBB

originalBB562:                                    ; preds = %2029, %originalBB562alteredBB
  %2038 = load i8*, i8** %21, align 8, !dbg !4805
  %2039 = load i64, i64* %28, align 8, !dbg !4806
  %2040 = add i64 %2039, 2, !dbg !4807
  %2041 = getelementptr inbounds i8, i8* %2038, i64 %2040, !dbg !4805
  %2042 = load i8, i8* %2041, align 1, !dbg !4805
  %2043 = sext i8 %2042 to i32, !dbg !4805
  %2044 = load i32, i32* @x.63
  %2045 = load i32, i32* @y.64
  %2046 = sub i32 %2044, 1
  %2047 = mul i32 %2044, %2046
  %2048 = urem i32 %2047, 2
  %2049 = icmp eq i32 %2048, 0
  %2050 = icmp slt i32 %2045, 10
  %2051 = or i1 %2049, %2050
  br i1 %2051, label %originalBBpart2574, label %originalBB562alteredBB

originalBBpart2574:                               ; preds = %originalBB562
  switch i32 %2043, label %2416 [
    i32 33, label %2052
    i32 39, label %2052
    i32 40, label %2052
    i32 41, label %2052
    i32 45, label %2052
    i32 47, label %2052
    i32 60, label %2052
    i32 61, label %2052
    i32 62, label %2052
  ], !dbg !4808

2052:                                             ; preds = %originalBBpart2574, %originalBBpart2574, %originalBBpart2574, %originalBBpart2574, %originalBBpart2574, %originalBBpart2574, %originalBBpart2574, %originalBBpart2574, %originalBBpart2574
  %2053 = load i32, i32* @x.63
  %2054 = load i32, i32* @y.64
  %2055 = sub i32 %2053, 1
  %2056 = mul i32 %2053, %2055
  %2057 = urem i32 %2056, 2
  %2058 = icmp eq i32 %2057, 0
  %2059 = icmp slt i32 %2054, 10
  %2060 = or i1 %2058, %2059
  br i1 %2060, label %originalBB576, label %originalBB576alteredBB

originalBB576:                                    ; preds = %2052, %originalBB576alteredBB
  %2061 = load i8, i8* %35, align 1, !dbg !4809
  %2062 = trunc i8 %2061 to i1, !dbg !4809
  %2063 = load i32, i32* @x.63
  %2064 = load i32, i32* @y.64
  %2065 = sub i32 %2063, 1
  %2066 = mul i32 %2063, %2065
  %2067 = urem i32 %2066, 2
  %2068 = icmp eq i32 %2067, 0
  %2069 = icmp slt i32 %2064, 10
  %2070 = or i1 %2068, %2069
  br i1 %2070, label %originalBBpart2578, label %originalBB576alteredBB

originalBBpart2578:                               ; preds = %originalBB576
  br i1 %2062, label %2071, label %2088, !dbg !4812

2071:                                             ; preds = %originalBBpart2578
  %2072 = load i32, i32* @x.63
  %2073 = load i32, i32* @y.64
  %2074 = sub i32 %2072, 1
  %2075 = mul i32 %2072, %2074
  %2076 = urem i32 %2075, 2
  %2077 = icmp eq i32 %2076, 0
  %2078 = icmp slt i32 %2073, 10
  %2079 = or i1 %2077, %2078
  br i1 %2079, label %originalBB580, label %originalBB580alteredBB

originalBB580:                                    ; preds = %2071, %originalBB580alteredBB
  %2080 = load i32, i32* @x.63
  %2081 = load i32, i32* @y.64
  %2082 = sub i32 %2080, 1
  %2083 = mul i32 %2080, %2082
  %2084 = urem i32 %2083, 2
  %2085 = icmp eq i32 %2084, 0
  %2086 = icmp slt i32 %2081, 10
  %2087 = or i1 %2085, %2086
  br i1 %2087, label %originalBBpart2582, label %originalBB580alteredBB

originalBBpart2582:                               ; preds = %originalBB580
  br label %6990, !dbg !4813

2088:                                             ; preds = %originalBBpart2578
  %2089 = load i32, i32* @x.63
  %2090 = load i32, i32* @y.64
  %2091 = sub i32 %2089, 1
  %2092 = mul i32 %2089, %2091
  %2093 = urem i32 %2092, 2
  %2094 = icmp eq i32 %2093, 0
  %2095 = icmp slt i32 %2090, 10
  %2096 = or i1 %2094, %2095
  br i1 %2096, label %originalBB584, label %originalBB584alteredBB

originalBB584:                                    ; preds = %2088, %originalBB584alteredBB
  %2097 = load i8*, i8** %21, align 8, !dbg !4814
  %2098 = load i64, i64* %28, align 8, !dbg !4815
  %2099 = add i64 %2098, 2, !dbg !4816
  %2100 = getelementptr inbounds i8, i8* %2097, i64 %2099, !dbg !4814
  %2101 = load i8, i8* %2100, align 1, !dbg !4814
  store i8 %2101, i8* %39, align 1, !dbg !4817
  %2102 = load i64, i64* %28, align 8, !dbg !4818
  %2103 = add i64 %2102, 2, !dbg !4818
  store i64 %2103, i64* %28, align 8, !dbg !4818
  %2104 = load i32, i32* @x.63
  %2105 = load i32, i32* @y.64
  %2106 = sub i32 %2104, 1
  %2107 = mul i32 %2104, %2106
  %2108 = urem i32 %2107, 2
  %2109 = icmp eq i32 %2108, 0
  %2110 = icmp slt i32 %2105, 10
  %2111 = or i1 %2109, %2110
  br i1 %2111, label %originalBBpart2601, label %originalBB584alteredBB

originalBBpart2601:                               ; preds = %originalBB584
  br label %2112, !dbg !4819

2112:                                             ; preds = %originalBBpart2601
  %2113 = load i32, i32* @x.63
  %2114 = load i32, i32* @y.64
  %2115 = sub i32 %2113, 1
  %2116 = mul i32 %2113, %2115
  %2117 = urem i32 %2116, 2
  %2118 = icmp eq i32 %2117, 0
  %2119 = icmp slt i32 %2114, 10
  %2120 = or i1 %2118, %2119
  br i1 %2120, label %originalBB603, label %originalBB603alteredBB

originalBB603:                                    ; preds = %2112, %originalBB603alteredBB
  %2121 = load i64, i64* %29, align 8, !dbg !4820
  %2122 = load i64, i64* %20, align 8, !dbg !4820
  %2123 = icmp ult i64 %2121, %2122, !dbg !4820
  %2124 = load i32, i32* @x.63
  %2125 = load i32, i32* @y.64
  %2126 = sub i32 %2124, 1
  %2127 = mul i32 %2124, %2126
  %2128 = urem i32 %2127, 2
  %2129 = icmp eq i32 %2128, 0
  %2130 = icmp slt i32 %2125, 10
  %2131 = or i1 %2129, %2130
  br i1 %2131, label %originalBBpart2605, label %originalBB603alteredBB

originalBBpart2605:                               ; preds = %originalBB603
  br i1 %2123, label %2132, label %2152, !dbg !4823

2132:                                             ; preds = %originalBBpart2605
  %2133 = load i32, i32* @x.63
  %2134 = load i32, i32* @y.64
  %2135 = sub i32 %2133, 1
  %2136 = mul i32 %2133, %2135
  %2137 = urem i32 %2136, 2
  %2138 = icmp eq i32 %2137, 0
  %2139 = icmp slt i32 %2134, 10
  %2140 = or i1 %2138, %2139
  br i1 %2140, label %originalBB607, label %originalBB607alteredBB

originalBB607:                                    ; preds = %2132, %originalBB607alteredBB
  %2141 = load i8*, i8** %19, align 8, !dbg !4820
  %2142 = load i64, i64* %29, align 8, !dbg !4820
  %2143 = getelementptr inbounds i8, i8* %2141, i64 %2142, !dbg !4820
  store i8 63, i8* %2143, align 1, !dbg !4820
  %2144 = load i32, i32* @x.63
  %2145 = load i32, i32* @y.64
  %2146 = sub i32 %2144, 1
  %2147 = mul i32 %2144, %2146
  %2148 = urem i32 %2147, 2
  %2149 = icmp eq i32 %2148, 0
  %2150 = icmp slt i32 %2145, 10
  %2151 = or i1 %2149, %2150
  br i1 %2151, label %originalBBpart2609, label %originalBB607alteredBB

originalBBpart2609:                               ; preds = %originalBB607
  br label %2152, !dbg !4820

2152:                                             ; preds = %originalBBpart2609, %originalBBpart2605
  %2153 = load i32, i32* @x.63
  %2154 = load i32, i32* @y.64
  %2155 = sub i32 %2153, 1
  %2156 = mul i32 %2153, %2155
  %2157 = urem i32 %2156, 2
  %2158 = icmp eq i32 %2157, 0
  %2159 = icmp slt i32 %2154, 10
  %2160 = or i1 %2158, %2159
  br i1 %2160, label %originalBB611, label %originalBB611alteredBB

originalBB611:                                    ; preds = %2152, %originalBB611alteredBB
  %2161 = load i64, i64* %29, align 8, !dbg !4823
  %2162 = add i64 %2161, 1, !dbg !4823
  store i64 %2162, i64* %29, align 8, !dbg !4823
  %2163 = load i32, i32* @x.63
  %2164 = load i32, i32* @y.64
  %2165 = sub i32 %2163, 1
  %2166 = mul i32 %2163, %2165
  %2167 = urem i32 %2166, 2
  %2168 = icmp eq i32 %2167, 0
  %2169 = icmp slt i32 %2164, 10
  %2170 = or i1 %2168, %2169
  br i1 %2170, label %originalBBpart2615, label %originalBB611alteredBB

originalBBpart2615:                               ; preds = %originalBB611
  br label %2171, !dbg !4823

2171:                                             ; preds = %originalBBpart2615
  %2172 = load i32, i32* @x.63
  %2173 = load i32, i32* @y.64
  %2174 = sub i32 %2172, 1
  %2175 = mul i32 %2172, %2174
  %2176 = urem i32 %2175, 2
  %2177 = icmp eq i32 %2176, 0
  %2178 = icmp slt i32 %2173, 10
  %2179 = or i1 %2177, %2178
  br i1 %2179, label %originalBB617, label %originalBB617alteredBB

originalBB617:                                    ; preds = %2171, %originalBB617alteredBB
  %2180 = load i32, i32* @x.63
  %2181 = load i32, i32* @y.64
  %2182 = sub i32 %2180, 1
  %2183 = mul i32 %2180, %2182
  %2184 = urem i32 %2183, 2
  %2185 = icmp eq i32 %2184, 0
  %2186 = icmp slt i32 %2181, 10
  %2187 = or i1 %2185, %2186
  br i1 %2187, label %originalBBpart2619, label %originalBB617alteredBB

originalBBpart2619:                               ; preds = %originalBB617
  br label %2188, !dbg !4824

2188:                                             ; preds = %originalBBpart2619
  %2189 = load i32, i32* @x.63
  %2190 = load i32, i32* @y.64
  %2191 = sub i32 %2189, 1
  %2192 = mul i32 %2189, %2191
  %2193 = urem i32 %2192, 2
  %2194 = icmp eq i32 %2193, 0
  %2195 = icmp slt i32 %2190, 10
  %2196 = or i1 %2194, %2195
  br i1 %2196, label %originalBB621, label %originalBB621alteredBB

originalBB621:                                    ; preds = %2188, %originalBB621alteredBB
  %2197 = load i64, i64* %29, align 8, !dbg !4825
  %2198 = load i64, i64* %20, align 8, !dbg !4825
  %2199 = icmp ult i64 %2197, %2198, !dbg !4825
  %2200 = load i32, i32* @x.63
  %2201 = load i32, i32* @y.64
  %2202 = sub i32 %2200, 1
  %2203 = mul i32 %2200, %2202
  %2204 = urem i32 %2203, 2
  %2205 = icmp eq i32 %2204, 0
  %2206 = icmp slt i32 %2201, 10
  %2207 = or i1 %2205, %2206
  br i1 %2207, label %originalBBpart2623, label %originalBB621alteredBB

originalBBpart2623:                               ; preds = %originalBB621
  br i1 %2199, label %2208, label %2228, !dbg !4828

2208:                                             ; preds = %originalBBpart2623
  %2209 = load i32, i32* @x.63
  %2210 = load i32, i32* @y.64
  %2211 = sub i32 %2209, 1
  %2212 = mul i32 %2209, %2211
  %2213 = urem i32 %2212, 2
  %2214 = icmp eq i32 %2213, 0
  %2215 = icmp slt i32 %2210, 10
  %2216 = or i1 %2214, %2215
  br i1 %2216, label %originalBB625, label %originalBB625alteredBB

originalBB625:                                    ; preds = %2208, %originalBB625alteredBB
  %2217 = load i8*, i8** %19, align 8, !dbg !4825
  %2218 = load i64, i64* %29, align 8, !dbg !4825
  %2219 = getelementptr inbounds i8, i8* %2217, i64 %2218, !dbg !4825
  store i8 34, i8* %2219, align 1, !dbg !4825
  %2220 = load i32, i32* @x.63
  %2221 = load i32, i32* @y.64
  %2222 = sub i32 %2220, 1
  %2223 = mul i32 %2220, %2222
  %2224 = urem i32 %2223, 2
  %2225 = icmp eq i32 %2224, 0
  %2226 = icmp slt i32 %2221, 10
  %2227 = or i1 %2225, %2226
  br i1 %2227, label %originalBBpart2627, label %originalBB625alteredBB

originalBBpart2627:                               ; preds = %originalBB625
  br label %2228, !dbg !4825

2228:                                             ; preds = %originalBBpart2627, %originalBBpart2623
  %2229 = load i32, i32* @x.63
  %2230 = load i32, i32* @y.64
  %2231 = sub i32 %2229, 1
  %2232 = mul i32 %2229, %2231
  %2233 = urem i32 %2232, 2
  %2234 = icmp eq i32 %2233, 0
  %2235 = icmp slt i32 %2230, 10
  %2236 = or i1 %2234, %2235
  br i1 %2236, label %originalBB629, label %originalBB629alteredBB

originalBB629:                                    ; preds = %2228, %originalBB629alteredBB
  %2237 = load i64, i64* %29, align 8, !dbg !4828
  %2238 = add i64 %2237, 1, !dbg !4828
  store i64 %2238, i64* %29, align 8, !dbg !4828
  %2239 = load i32, i32* @x.63
  %2240 = load i32, i32* @y.64
  %2241 = sub i32 %2239, 1
  %2242 = mul i32 %2239, %2241
  %2243 = urem i32 %2242, 2
  %2244 = icmp eq i32 %2243, 0
  %2245 = icmp slt i32 %2240, 10
  %2246 = or i1 %2244, %2245
  br i1 %2246, label %originalBBpart2637, label %originalBB629alteredBB

originalBBpart2637:                               ; preds = %originalBB629
  br label %2247, !dbg !4828

2247:                                             ; preds = %originalBBpart2637
  %2248 = load i32, i32* @x.63
  %2249 = load i32, i32* @y.64
  %2250 = sub i32 %2248, 1
  %2251 = mul i32 %2248, %2250
  %2252 = urem i32 %2251, 2
  %2253 = icmp eq i32 %2252, 0
  %2254 = icmp slt i32 %2249, 10
  %2255 = or i1 %2253, %2254
  br i1 %2255, label %originalBB639, label %originalBB639alteredBB

originalBB639:                                    ; preds = %2247, %originalBB639alteredBB
  %2256 = load i32, i32* @x.63
  %2257 = load i32, i32* @y.64
  %2258 = sub i32 %2256, 1
  %2259 = mul i32 %2256, %2258
  %2260 = urem i32 %2259, 2
  %2261 = icmp eq i32 %2260, 0
  %2262 = icmp slt i32 %2257, 10
  %2263 = or i1 %2261, %2262
  br i1 %2263, label %originalBBpart2641, label %originalBB639alteredBB

originalBBpart2641:                               ; preds = %originalBB639
  br label %2264, !dbg !4829

2264:                                             ; preds = %originalBBpart2641
  %2265 = load i32, i32* @x.63
  %2266 = load i32, i32* @y.64
  %2267 = sub i32 %2265, 1
  %2268 = mul i32 %2265, %2267
  %2269 = urem i32 %2268, 2
  %2270 = icmp eq i32 %2269, 0
  %2271 = icmp slt i32 %2266, 10
  %2272 = or i1 %2270, %2271
  br i1 %2272, label %originalBB643, label %originalBB643alteredBB

originalBB643:                                    ; preds = %2264, %originalBB643alteredBB
  %2273 = load i64, i64* %29, align 8, !dbg !4830
  %2274 = load i64, i64* %20, align 8, !dbg !4830
  %2275 = icmp ult i64 %2273, %2274, !dbg !4830
  %2276 = load i32, i32* @x.63
  %2277 = load i32, i32* @y.64
  %2278 = sub i32 %2276, 1
  %2279 = mul i32 %2276, %2278
  %2280 = urem i32 %2279, 2
  %2281 = icmp eq i32 %2280, 0
  %2282 = icmp slt i32 %2277, 10
  %2283 = or i1 %2281, %2282
  br i1 %2283, label %originalBBpart2645, label %originalBB643alteredBB

originalBBpart2645:                               ; preds = %originalBB643
  br i1 %2275, label %2284, label %2304, !dbg !4833

2284:                                             ; preds = %originalBBpart2645
  %2285 = load i32, i32* @x.63
  %2286 = load i32, i32* @y.64
  %2287 = sub i32 %2285, 1
  %2288 = mul i32 %2285, %2287
  %2289 = urem i32 %2288, 2
  %2290 = icmp eq i32 %2289, 0
  %2291 = icmp slt i32 %2286, 10
  %2292 = or i1 %2290, %2291
  br i1 %2292, label %originalBB647, label %originalBB647alteredBB

originalBB647:                                    ; preds = %2284, %originalBB647alteredBB
  %2293 = load i8*, i8** %19, align 8, !dbg !4830
  %2294 = load i64, i64* %29, align 8, !dbg !4830
  %2295 = getelementptr inbounds i8, i8* %2293, i64 %2294, !dbg !4830
  store i8 34, i8* %2295, align 1, !dbg !4830
  %2296 = load i32, i32* @x.63
  %2297 = load i32, i32* @y.64
  %2298 = sub i32 %2296, 1
  %2299 = mul i32 %2296, %2298
  %2300 = urem i32 %2299, 2
  %2301 = icmp eq i32 %2300, 0
  %2302 = icmp slt i32 %2297, 10
  %2303 = or i1 %2301, %2302
  br i1 %2303, label %originalBBpart2649, label %originalBB647alteredBB

originalBBpart2649:                               ; preds = %originalBB647
  br label %2304, !dbg !4830

2304:                                             ; preds = %originalBBpart2649, %originalBBpart2645
  %2305 = load i32, i32* @x.63
  %2306 = load i32, i32* @y.64
  %2307 = sub i32 %2305, 1
  %2308 = mul i32 %2305, %2307
  %2309 = urem i32 %2308, 2
  %2310 = icmp eq i32 %2309, 0
  %2311 = icmp slt i32 %2306, 10
  %2312 = or i1 %2310, %2311
  br i1 %2312, label %originalBB651, label %originalBB651alteredBB

originalBB651:                                    ; preds = %2304, %originalBB651alteredBB
  %2313 = load i64, i64* %29, align 8, !dbg !4833
  %2314 = add i64 %2313, 1, !dbg !4833
  store i64 %2314, i64* %29, align 8, !dbg !4833
  %2315 = load i32, i32* @x.63
  %2316 = load i32, i32* @y.64
  %2317 = sub i32 %2315, 1
  %2318 = mul i32 %2315, %2317
  %2319 = urem i32 %2318, 2
  %2320 = icmp eq i32 %2319, 0
  %2321 = icmp slt i32 %2316, 10
  %2322 = or i1 %2320, %2321
  br i1 %2322, label %originalBBpart2660, label %originalBB651alteredBB

originalBBpart2660:                               ; preds = %originalBB651
  br label %2323, !dbg !4833

2323:                                             ; preds = %originalBBpart2660
  %2324 = load i32, i32* @x.63
  %2325 = load i32, i32* @y.64
  %2326 = sub i32 %2324, 1
  %2327 = mul i32 %2324, %2326
  %2328 = urem i32 %2327, 2
  %2329 = icmp eq i32 %2328, 0
  %2330 = icmp slt i32 %2325, 10
  %2331 = or i1 %2329, %2330
  br i1 %2331, label %originalBB662, label %originalBB662alteredBB

originalBB662:                                    ; preds = %2323, %originalBB662alteredBB
  %2332 = load i32, i32* @x.63
  %2333 = load i32, i32* @y.64
  %2334 = sub i32 %2332, 1
  %2335 = mul i32 %2332, %2334
  %2336 = urem i32 %2335, 2
  %2337 = icmp eq i32 %2336, 0
  %2338 = icmp slt i32 %2333, 10
  %2339 = or i1 %2337, %2338
  br i1 %2339, label %originalBBpart2664, label %originalBB662alteredBB

originalBBpart2664:                               ; preds = %originalBB662
  br label %2340, !dbg !4834

2340:                                             ; preds = %originalBBpart2664
  %2341 = load i32, i32* @x.63
  %2342 = load i32, i32* @y.64
  %2343 = sub i32 %2341, 1
  %2344 = mul i32 %2341, %2343
  %2345 = urem i32 %2344, 2
  %2346 = icmp eq i32 %2345, 0
  %2347 = icmp slt i32 %2342, 10
  %2348 = or i1 %2346, %2347
  br i1 %2348, label %originalBB666, label %originalBB666alteredBB

originalBB666:                                    ; preds = %2340, %originalBB666alteredBB
  %2349 = load i64, i64* %29, align 8, !dbg !4835
  %2350 = load i64, i64* %20, align 8, !dbg !4835
  %2351 = icmp ult i64 %2349, %2350, !dbg !4835
  %2352 = load i32, i32* @x.63
  %2353 = load i32, i32* @y.64
  %2354 = sub i32 %2352, 1
  %2355 = mul i32 %2352, %2354
  %2356 = urem i32 %2355, 2
  %2357 = icmp eq i32 %2356, 0
  %2358 = icmp slt i32 %2353, 10
  %2359 = or i1 %2357, %2358
  br i1 %2359, label %originalBBpart2668, label %originalBB666alteredBB

originalBBpart2668:                               ; preds = %originalBB666
  br i1 %2351, label %2360, label %2380, !dbg !4838

2360:                                             ; preds = %originalBBpart2668
  %2361 = load i32, i32* @x.63
  %2362 = load i32, i32* @y.64
  %2363 = sub i32 %2361, 1
  %2364 = mul i32 %2361, %2363
  %2365 = urem i32 %2364, 2
  %2366 = icmp eq i32 %2365, 0
  %2367 = icmp slt i32 %2362, 10
  %2368 = or i1 %2366, %2367
  br i1 %2368, label %originalBB670, label %originalBB670alteredBB

originalBB670:                                    ; preds = %2360, %originalBB670alteredBB
  %2369 = load i8*, i8** %19, align 8, !dbg !4835
  %2370 = load i64, i64* %29, align 8, !dbg !4835
  %2371 = getelementptr inbounds i8, i8* %2369, i64 %2370, !dbg !4835
  store i8 63, i8* %2371, align 1, !dbg !4835
  %2372 = load i32, i32* @x.63
  %2373 = load i32, i32* @y.64
  %2374 = sub i32 %2372, 1
  %2375 = mul i32 %2372, %2374
  %2376 = urem i32 %2375, 2
  %2377 = icmp eq i32 %2376, 0
  %2378 = icmp slt i32 %2373, 10
  %2379 = or i1 %2377, %2378
  br i1 %2379, label %originalBBpart2672, label %originalBB670alteredBB

originalBBpart2672:                               ; preds = %originalBB670
  br label %2380, !dbg !4835

2380:                                             ; preds = %originalBBpart2672, %originalBBpart2668
  %2381 = load i32, i32* @x.63
  %2382 = load i32, i32* @y.64
  %2383 = sub i32 %2381, 1
  %2384 = mul i32 %2381, %2383
  %2385 = urem i32 %2384, 2
  %2386 = icmp eq i32 %2385, 0
  %2387 = icmp slt i32 %2382, 10
  %2388 = or i1 %2386, %2387
  br i1 %2388, label %originalBB674, label %originalBB674alteredBB

originalBB674:                                    ; preds = %2380, %originalBB674alteredBB
  %2389 = load i64, i64* %29, align 8, !dbg !4838
  %2390 = add i64 %2389, 1, !dbg !4838
  store i64 %2390, i64* %29, align 8, !dbg !4838
  %2391 = load i32, i32* @x.63
  %2392 = load i32, i32* @y.64
  %2393 = sub i32 %2391, 1
  %2394 = mul i32 %2391, %2393
  %2395 = urem i32 %2394, 2
  %2396 = icmp eq i32 %2395, 0
  %2397 = icmp slt i32 %2392, 10
  %2398 = or i1 %2396, %2397
  br i1 %2398, label %originalBBpart2690, label %originalBB674alteredBB

originalBBpart2690:                               ; preds = %originalBB674
  br label %2399, !dbg !4838

2399:                                             ; preds = %originalBBpart2690
  %2400 = load i32, i32* @x.63
  %2401 = load i32, i32* @y.64
  %2402 = sub i32 %2400, 1
  %2403 = mul i32 %2400, %2402
  %2404 = urem i32 %2403, 2
  %2405 = icmp eq i32 %2404, 0
  %2406 = icmp slt i32 %2401, 10
  %2407 = or i1 %2405, %2406
  br i1 %2407, label %originalBB692, label %originalBB692alteredBB

originalBB692:                                    ; preds = %2399, %originalBB692alteredBB
  %2408 = load i32, i32* @x.63
  %2409 = load i32, i32* @y.64
  %2410 = sub i32 %2408, 1
  %2411 = mul i32 %2408, %2410
  %2412 = urem i32 %2411, 2
  %2413 = icmp eq i32 %2412, 0
  %2414 = icmp slt i32 %2409, 10
  %2415 = or i1 %2413, %2414
  br i1 %2415, label %originalBBpart2694, label %originalBB692alteredBB

originalBBpart2694:                               ; preds = %originalBB692
  br label %2433, !dbg !4839

2416:                                             ; preds = %originalBBpart2574
  %2417 = load i32, i32* @x.63
  %2418 = load i32, i32* @y.64
  %2419 = sub i32 %2417, 1
  %2420 = mul i32 %2417, %2419
  %2421 = urem i32 %2420, 2
  %2422 = icmp eq i32 %2421, 0
  %2423 = icmp slt i32 %2418, 10
  %2424 = or i1 %2422, %2423
  br i1 %2424, label %originalBB696, label %originalBB696alteredBB

originalBB696:                                    ; preds = %2416, %originalBB696alteredBB
  %2425 = load i32, i32* @x.63
  %2426 = load i32, i32* @y.64
  %2427 = sub i32 %2425, 1
  %2428 = mul i32 %2425, %2427
  %2429 = urem i32 %2428, 2
  %2430 = icmp eq i32 %2429, 0
  %2431 = icmp slt i32 %2426, 10
  %2432 = or i1 %2430, %2431
  br i1 %2432, label %originalBBpart2698, label %originalBB696alteredBB

originalBBpart2698:                               ; preds = %originalBB696
  br label %2433, !dbg !4840

2433:                                             ; preds = %originalBBpart2698, %originalBBpart2694
  %2434 = load i32, i32* @x.63
  %2435 = load i32, i32* @y.64
  %2436 = sub i32 %2434, 1
  %2437 = mul i32 %2434, %2436
  %2438 = urem i32 %2437, 2
  %2439 = icmp eq i32 %2438, 0
  %2440 = icmp slt i32 %2435, 10
  %2441 = or i1 %2439, %2440
  br i1 %2441, label %originalBB700, label %originalBB700alteredBB

originalBB700:                                    ; preds = %2433, %originalBB700alteredBB
  %2442 = load i32, i32* @x.63
  %2443 = load i32, i32* @y.64
  %2444 = sub i32 %2442, 1
  %2445 = mul i32 %2442, %2444
  %2446 = urem i32 %2445, 2
  %2447 = icmp eq i32 %2446, 0
  %2448 = icmp slt i32 %2443, 10
  %2449 = or i1 %2447, %2448
  br i1 %2449, label %originalBBpart2702, label %originalBB700alteredBB

originalBBpart2702:                               ; preds = %originalBB700
  br label %2450, !dbg !4841

2450:                                             ; preds = %originalBBpart2702, %originalBBpart2560, %originalBBpart2544, %originalBBpart2537
  %2451 = load i32, i32* @x.63
  %2452 = load i32, i32* @y.64
  %2453 = sub i32 %2451, 1
  %2454 = mul i32 %2451, %2453
  %2455 = urem i32 %2454, 2
  %2456 = icmp eq i32 %2455, 0
  %2457 = icmp slt i32 %2452, 10
  %2458 = or i1 %2456, %2457
  br i1 %2458, label %originalBB704, label %originalBB704alteredBB

originalBB704:                                    ; preds = %2450, %originalBB704alteredBB
  %2459 = load i32, i32* @x.63
  %2460 = load i32, i32* @y.64
  %2461 = sub i32 %2459, 1
  %2462 = mul i32 %2459, %2461
  %2463 = urem i32 %2462, 2
  %2464 = icmp eq i32 %2463, 0
  %2465 = icmp slt i32 %2460, 10
  %2466 = or i1 %2464, %2465
  br i1 %2466, label %originalBBpart2706, label %originalBB704alteredBB

originalBBpart2706:                               ; preds = %originalBB704
  br label %2484, !dbg !4842

2467:                                             ; preds = %originalBBpart2519
  %2468 = load i32, i32* @x.63
  %2469 = load i32, i32* @y.64
  %2470 = sub i32 %2468, 1
  %2471 = mul i32 %2468, %2470
  %2472 = urem i32 %2471, 2
  %2473 = icmp eq i32 %2472, 0
  %2474 = icmp slt i32 %2469, 10
  %2475 = or i1 %2473, %2474
  br i1 %2475, label %originalBB708, label %originalBB708alteredBB

originalBB708:                                    ; preds = %2467, %originalBB708alteredBB
  %2476 = load i32, i32* @x.63
  %2477 = load i32, i32* @y.64
  %2478 = sub i32 %2476, 1
  %2479 = mul i32 %2476, %2478
  %2480 = urem i32 %2479, 2
  %2481 = icmp eq i32 %2480, 0
  %2482 = icmp slt i32 %2477, 10
  %2483 = or i1 %2481, %2482
  br i1 %2483, label %originalBBpart2710, label %originalBB708alteredBB

originalBBpart2710:                               ; preds = %originalBB708
  br label %2484, !dbg !4843

2484:                                             ; preds = %originalBBpart2710, %originalBBpart2706, %originalBBpart2531
  %2485 = load i32, i32* @x.63
  %2486 = load i32, i32* @y.64
  %2487 = sub i32 %2485, 1
  %2488 = mul i32 %2485, %2487
  %2489 = urem i32 %2488, 2
  %2490 = icmp eq i32 %2489, 0
  %2491 = icmp slt i32 %2486, 10
  %2492 = or i1 %2490, %2491
  br i1 %2492, label %originalBB712, label %originalBB712alteredBB

originalBB712:                                    ; preds = %2484, %originalBB712alteredBB
  %2493 = load i32, i32* @x.63
  %2494 = load i32, i32* @y.64
  %2495 = sub i32 %2493, 1
  %2496 = mul i32 %2493, %2495
  %2497 = urem i32 %2496, 2
  %2498 = icmp eq i32 %2497, 0
  %2499 = icmp slt i32 %2494, 10
  %2500 = or i1 %2498, %2499
  br i1 %2500, label %originalBBpart2714, label %originalBB712alteredBB

originalBBpart2714:                               ; preds = %originalBB712
  br label %5465, !dbg !4844

2501:                                             ; preds = %originalBBpart2266
  %2502 = load i32, i32* @x.63
  %2503 = load i32, i32* @y.64
  %2504 = sub i32 %2502, 1
  %2505 = mul i32 %2502, %2504
  %2506 = urem i32 %2505, 2
  %2507 = icmp eq i32 %2506, 0
  %2508 = icmp slt i32 %2503, 10
  %2509 = or i1 %2507, %2508
  br i1 %2509, label %originalBB716, label %originalBB716alteredBB

originalBB716:                                    ; preds = %2501, %originalBB716alteredBB
  store i8 97, i8* %40, align 1, !dbg !4845
  %2510 = load i32, i32* @x.63
  %2511 = load i32, i32* @y.64
  %2512 = sub i32 %2510, 1
  %2513 = mul i32 %2510, %2512
  %2514 = urem i32 %2513, 2
  %2515 = icmp eq i32 %2514, 0
  %2516 = icmp slt i32 %2511, 10
  %2517 = or i1 %2515, %2516
  br i1 %2517, label %originalBBpart2718, label %originalBB716alteredBB

originalBBpart2718:                               ; preds = %originalBB716
  br label %2856, !dbg !4846

2518:                                             ; preds = %originalBBpart2266
  %2519 = load i32, i32* @x.63
  %2520 = load i32, i32* @y.64
  %2521 = sub i32 %2519, 1
  %2522 = mul i32 %2519, %2521
  %2523 = urem i32 %2522, 2
  %2524 = icmp eq i32 %2523, 0
  %2525 = icmp slt i32 %2520, 10
  %2526 = or i1 %2524, %2525
  br i1 %2526, label %originalBB720, label %originalBB720alteredBB

originalBB720:                                    ; preds = %2518, %originalBB720alteredBB
  store i8 98, i8* %40, align 1, !dbg !4847
  %2527 = load i32, i32* @x.63
  %2528 = load i32, i32* @y.64
  %2529 = sub i32 %2527, 1
  %2530 = mul i32 %2527, %2529
  %2531 = urem i32 %2530, 2
  %2532 = icmp eq i32 %2531, 0
  %2533 = icmp slt i32 %2528, 10
  %2534 = or i1 %2532, %2533
  br i1 %2534, label %originalBBpart2722, label %originalBB720alteredBB

originalBBpart2722:                               ; preds = %originalBB720
  br label %2856, !dbg !4848

2535:                                             ; preds = %originalBBpart2266
  %2536 = load i32, i32* @x.63
  %2537 = load i32, i32* @y.64
  %2538 = sub i32 %2536, 1
  %2539 = mul i32 %2536, %2538
  %2540 = urem i32 %2539, 2
  %2541 = icmp eq i32 %2540, 0
  %2542 = icmp slt i32 %2537, 10
  %2543 = or i1 %2541, %2542
  br i1 %2543, label %originalBB724, label %originalBB724alteredBB

originalBB724:                                    ; preds = %2535, %originalBB724alteredBB
  store i8 102, i8* %40, align 1, !dbg !4849
  %2544 = load i32, i32* @x.63
  %2545 = load i32, i32* @y.64
  %2546 = sub i32 %2544, 1
  %2547 = mul i32 %2544, %2546
  %2548 = urem i32 %2547, 2
  %2549 = icmp eq i32 %2548, 0
  %2550 = icmp slt i32 %2545, 10
  %2551 = or i1 %2549, %2550
  br i1 %2551, label %originalBBpart2726, label %originalBB724alteredBB

originalBBpart2726:                               ; preds = %originalBB724
  br label %2856, !dbg !4850

2552:                                             ; preds = %originalBBpart2266
  %2553 = load i32, i32* @x.63
  %2554 = load i32, i32* @y.64
  %2555 = sub i32 %2553, 1
  %2556 = mul i32 %2553, %2555
  %2557 = urem i32 %2556, 2
  %2558 = icmp eq i32 %2557, 0
  %2559 = icmp slt i32 %2554, 10
  %2560 = or i1 %2558, %2559
  br i1 %2560, label %originalBB728, label %originalBB728alteredBB

originalBB728:                                    ; preds = %2552, %originalBB728alteredBB
  store i8 110, i8* %40, align 1, !dbg !4851
  %2561 = load i32, i32* @x.63
  %2562 = load i32, i32* @y.64
  %2563 = sub i32 %2561, 1
  %2564 = mul i32 %2561, %2563
  %2565 = urem i32 %2564, 2
  %2566 = icmp eq i32 %2565, 0
  %2567 = icmp slt i32 %2562, 10
  %2568 = or i1 %2566, %2567
  br i1 %2568, label %originalBBpart2730, label %originalBB728alteredBB

originalBBpart2730:                               ; preds = %originalBB728
  br label %2784, !dbg !4852

2569:                                             ; preds = %originalBBpart2266
  %2570 = load i32, i32* @x.63
  %2571 = load i32, i32* @y.64
  %2572 = sub i32 %2570, 1
  %2573 = mul i32 %2570, %2572
  %2574 = urem i32 %2573, 2
  %2575 = icmp eq i32 %2574, 0
  %2576 = icmp slt i32 %2571, 10
  %2577 = or i1 %2575, %2576
  br i1 %2577, label %originalBB732, label %originalBB732alteredBB

originalBB732:                                    ; preds = %2569, %originalBB732alteredBB
  store i8 114, i8* %40, align 1, !dbg !4853
  %2578 = load i32, i32* @x.63
  %2579 = load i32, i32* @y.64
  %2580 = sub i32 %2578, 1
  %2581 = mul i32 %2578, %2580
  %2582 = urem i32 %2581, 2
  %2583 = icmp eq i32 %2582, 0
  %2584 = icmp slt i32 %2579, 10
  %2585 = or i1 %2583, %2584
  br i1 %2585, label %originalBBpart2734, label %originalBB732alteredBB

originalBBpart2734:                               ; preds = %originalBB732
  br label %2784, !dbg !4854

2586:                                             ; preds = %originalBBpart2266
  %2587 = load i32, i32* @x.63
  %2588 = load i32, i32* @y.64
  %2589 = sub i32 %2587, 1
  %2590 = mul i32 %2587, %2589
  %2591 = urem i32 %2590, 2
  %2592 = icmp eq i32 %2591, 0
  %2593 = icmp slt i32 %2588, 10
  %2594 = or i1 %2592, %2593
  br i1 %2594, label %originalBB736, label %originalBB736alteredBB

originalBB736:                                    ; preds = %2586, %originalBB736alteredBB
  store i8 116, i8* %40, align 1, !dbg !4855
  %2595 = load i32, i32* @x.63
  %2596 = load i32, i32* @y.64
  %2597 = sub i32 %2595, 1
  %2598 = mul i32 %2595, %2597
  %2599 = urem i32 %2598, 2
  %2600 = icmp eq i32 %2599, 0
  %2601 = icmp slt i32 %2596, 10
  %2602 = or i1 %2600, %2601
  br i1 %2602, label %originalBBpart2738, label %originalBB736alteredBB

originalBBpart2738:                               ; preds = %originalBB736
  br label %2784, !dbg !4856

2603:                                             ; preds = %originalBBpart2266
  %2604 = load i32, i32* @x.63
  %2605 = load i32, i32* @y.64
  %2606 = sub i32 %2604, 1
  %2607 = mul i32 %2604, %2606
  %2608 = urem i32 %2607, 2
  %2609 = icmp eq i32 %2608, 0
  %2610 = icmp slt i32 %2605, 10
  %2611 = or i1 %2609, %2610
  br i1 %2611, label %originalBB740, label %originalBB740alteredBB

originalBB740:                                    ; preds = %2603, %originalBB740alteredBB
  store i8 118, i8* %40, align 1, !dbg !4857
  %2612 = load i32, i32* @x.63
  %2613 = load i32, i32* @y.64
  %2614 = sub i32 %2612, 1
  %2615 = mul i32 %2612, %2614
  %2616 = urem i32 %2615, 2
  %2617 = icmp eq i32 %2616, 0
  %2618 = icmp slt i32 %2613, 10
  %2619 = or i1 %2617, %2618
  br i1 %2619, label %originalBBpart2742, label %originalBB740alteredBB

originalBBpart2742:                               ; preds = %originalBB740
  br label %2856, !dbg !4858

2620:                                             ; preds = %originalBBpart2266
  %2621 = load i32, i32* @x.63
  %2622 = load i32, i32* @y.64
  %2623 = sub i32 %2621, 1
  %2624 = mul i32 %2621, %2623
  %2625 = urem i32 %2624, 2
  %2626 = icmp eq i32 %2625, 0
  %2627 = icmp slt i32 %2622, 10
  %2628 = or i1 %2626, %2627
  br i1 %2628, label %originalBB744, label %originalBB744alteredBB

originalBB744:                                    ; preds = %2620, %originalBB744alteredBB
  %2629 = load i8, i8* %39, align 1, !dbg !4859
  store i8 %2629, i8* %40, align 1, !dbg !4860
  %2630 = load i32, i32* %23, align 4, !dbg !4861
  %2631 = icmp eq i32 %2630, 2, !dbg !4863
  %2632 = load i32, i32* @x.63
  %2633 = load i32, i32* @y.64
  %2634 = sub i32 %2632, 1
  %2635 = mul i32 %2632, %2634
  %2636 = urem i32 %2635, 2
  %2637 = icmp eq i32 %2636, 0
  %2638 = icmp slt i32 %2633, 10
  %2639 = or i1 %2637, %2638
  br i1 %2639, label %originalBBpart2746, label %originalBB744alteredBB

originalBBpart2746:                               ; preds = %originalBB744
  br i1 %2631, label %2640, label %2693, !dbg !4864

2640:                                             ; preds = %originalBBpart2746
  %2641 = load i32, i32* @x.63
  %2642 = load i32, i32* @y.64
  %2643 = sub i32 %2641, 1
  %2644 = mul i32 %2641, %2643
  %2645 = urem i32 %2644, 2
  %2646 = icmp eq i32 %2645, 0
  %2647 = icmp slt i32 %2642, 10
  %2648 = or i1 %2646, %2647
  br i1 %2648, label %originalBB748, label %originalBB748alteredBB

originalBB748:                                    ; preds = %2640, %originalBB748alteredBB
  %2649 = load i8, i8* %35, align 1, !dbg !4865
  %2650 = trunc i8 %2649 to i1, !dbg !4865
  %2651 = load i32, i32* @x.63
  %2652 = load i32, i32* @y.64
  %2653 = sub i32 %2651, 1
  %2654 = mul i32 %2651, %2653
  %2655 = urem i32 %2654, 2
  %2656 = icmp eq i32 %2655, 0
  %2657 = icmp slt i32 %2652, 10
  %2658 = or i1 %2656, %2657
  br i1 %2658, label %originalBBpart2750, label %originalBB748alteredBB

originalBBpart2750:                               ; preds = %originalBB748
  br i1 %2650, label %2659, label %2676, !dbg !4868

2659:                                             ; preds = %originalBBpart2750
  %2660 = load i32, i32* @x.63
  %2661 = load i32, i32* @y.64
  %2662 = sub i32 %2660, 1
  %2663 = mul i32 %2660, %2662
  %2664 = urem i32 %2663, 2
  %2665 = icmp eq i32 %2664, 0
  %2666 = icmp slt i32 %2661, 10
  %2667 = or i1 %2665, %2666
  br i1 %2667, label %originalBB752, label %originalBB752alteredBB

originalBB752:                                    ; preds = %2659, %originalBB752alteredBB
  %2668 = load i32, i32* @x.63
  %2669 = load i32, i32* @y.64
  %2670 = sub i32 %2668, 1
  %2671 = mul i32 %2668, %2670
  %2672 = urem i32 %2671, 2
  %2673 = icmp eq i32 %2672, 0
  %2674 = icmp slt i32 %2669, 10
  %2675 = or i1 %2673, %2674
  br i1 %2675, label %originalBBpart2754, label %originalBB752alteredBB

originalBBpart2754:                               ; preds = %originalBB752
  br label %6990, !dbg !4869

2676:                                             ; preds = %originalBBpart2750
  %2677 = load i32, i32* @x.63
  %2678 = load i32, i32* @y.64
  %2679 = sub i32 %2677, 1
  %2680 = mul i32 %2677, %2679
  %2681 = urem i32 %2680, 2
  %2682 = icmp eq i32 %2681, 0
  %2683 = icmp slt i32 %2678, 10
  %2684 = or i1 %2682, %2683
  br i1 %2684, label %originalBB756, label %originalBB756alteredBB

originalBB756:                                    ; preds = %2676, %originalBB756alteredBB
  %2685 = load i32, i32* @x.63
  %2686 = load i32, i32* @y.64
  %2687 = sub i32 %2685, 1
  %2688 = mul i32 %2685, %2687
  %2689 = urem i32 %2688, 2
  %2690 = icmp eq i32 %2689, 0
  %2691 = icmp slt i32 %2686, 10
  %2692 = or i1 %2690, %2691
  br i1 %2692, label %originalBBpart2758, label %originalBB756alteredBB

originalBBpart2758:                               ; preds = %originalBB756
  br label %6070, !dbg !4870

2693:                                             ; preds = %originalBBpart2746
  %2694 = load i32, i32* @x.63
  %2695 = load i32, i32* @y.64
  %2696 = sub i32 %2694, 1
  %2697 = mul i32 %2694, %2696
  %2698 = urem i32 %2697, 2
  %2699 = icmp eq i32 %2698, 0
  %2700 = icmp slt i32 %2695, 10
  %2701 = or i1 %2699, %2700
  br i1 %2701, label %originalBB760, label %originalBB760alteredBB

originalBB760:                                    ; preds = %2693, %originalBB760alteredBB
  %2702 = load i8, i8* %33, align 1, !dbg !4871
  %2703 = trunc i8 %2702 to i1, !dbg !4871
  %2704 = load i32, i32* @x.63
  %2705 = load i32, i32* @y.64
  %2706 = sub i32 %2704, 1
  %2707 = mul i32 %2704, %2706
  %2708 = urem i32 %2707, 2
  %2709 = icmp eq i32 %2708, 0
  %2710 = icmp slt i32 %2705, 10
  %2711 = or i1 %2709, %2710
  br i1 %2711, label %originalBBpart2762, label %originalBB760alteredBB

originalBBpart2762:                               ; preds = %originalBB760
  br i1 %2703, label %2712, label %2767, !dbg !4873

2712:                                             ; preds = %originalBBpart2762
  %2713 = load i32, i32* @x.63
  %2714 = load i32, i32* @y.64
  %2715 = sub i32 %2713, 1
  %2716 = mul i32 %2713, %2715
  %2717 = urem i32 %2716, 2
  %2718 = icmp eq i32 %2717, 0
  %2719 = icmp slt i32 %2714, 10
  %2720 = or i1 %2718, %2719
  br i1 %2720, label %originalBB764, label %originalBB764alteredBB

originalBB764:                                    ; preds = %2712, %originalBB764alteredBB
  %2721 = load i8, i8* %35, align 1, !dbg !4874
  %2722 = trunc i8 %2721 to i1, !dbg !4874
  %2723 = load i32, i32* @x.63
  %2724 = load i32, i32* @y.64
  %2725 = sub i32 %2723, 1
  %2726 = mul i32 %2723, %2725
  %2727 = urem i32 %2726, 2
  %2728 = icmp eq i32 %2727, 0
  %2729 = icmp slt i32 %2724, 10
  %2730 = or i1 %2728, %2729
  br i1 %2730, label %originalBBpart2766, label %originalBB764alteredBB

originalBBpart2766:                               ; preds = %originalBB764
  br i1 %2722, label %2731, label %2767, !dbg !4875

2731:                                             ; preds = %originalBBpart2766
  %2732 = load i32, i32* @x.63
  %2733 = load i32, i32* @y.64
  %2734 = sub i32 %2732, 1
  %2735 = mul i32 %2732, %2734
  %2736 = urem i32 %2735, 2
  %2737 = icmp eq i32 %2736, 0
  %2738 = icmp slt i32 %2733, 10
  %2739 = or i1 %2737, %2738
  br i1 %2739, label %originalBB768, label %originalBB768alteredBB

originalBB768:                                    ; preds = %2731, %originalBB768alteredBB
  %2740 = load i64, i64* %32, align 8, !dbg !4876
  %2741 = icmp ne i64 %2740, 0, !dbg !4876
  %2742 = load i32, i32* @x.63
  %2743 = load i32, i32* @y.64
  %2744 = sub i32 %2742, 1
  %2745 = mul i32 %2742, %2744
  %2746 = urem i32 %2745, 2
  %2747 = icmp eq i32 %2746, 0
  %2748 = icmp slt i32 %2743, 10
  %2749 = or i1 %2747, %2748
  br i1 %2749, label %originalBBpart2770, label %originalBB768alteredBB

originalBBpart2770:                               ; preds = %originalBB768
  br i1 %2741, label %2750, label %2767, !dbg !4877

2750:                                             ; preds = %originalBBpart2770
  %2751 = load i32, i32* @x.63
  %2752 = load i32, i32* @y.64
  %2753 = sub i32 %2751, 1
  %2754 = mul i32 %2751, %2753
  %2755 = urem i32 %2754, 2
  %2756 = icmp eq i32 %2755, 0
  %2757 = icmp slt i32 %2752, 10
  %2758 = or i1 %2756, %2757
  br i1 %2758, label %originalBB772, label %originalBB772alteredBB

originalBB772:                                    ; preds = %2750, %originalBB772alteredBB
  %2759 = load i32, i32* @x.63
  %2760 = load i32, i32* @y.64
  %2761 = sub i32 %2759, 1
  %2762 = mul i32 %2759, %2761
  %2763 = urem i32 %2762, 2
  %2764 = icmp eq i32 %2763, 0
  %2765 = icmp slt i32 %2760, 10
  %2766 = or i1 %2764, %2765
  br i1 %2766, label %originalBBpart2774, label %originalBB772alteredBB

originalBBpart2774:                               ; preds = %originalBB772
  br label %6070, !dbg !4878

2767:                                             ; preds = %originalBBpart2770, %originalBBpart2766, %originalBBpart2762
  %2768 = load i32, i32* @x.63
  %2769 = load i32, i32* @y.64
  %2770 = sub i32 %2768, 1
  %2771 = mul i32 %2768, %2770
  %2772 = urem i32 %2771, 2
  %2773 = icmp eq i32 %2772, 0
  %2774 = icmp slt i32 %2769, 10
  %2775 = or i1 %2773, %2774
  br i1 %2775, label %originalBB776, label %originalBB776alteredBB

originalBB776:                                    ; preds = %2767, %originalBB776alteredBB
  %2776 = load i32, i32* @x.63
  %2777 = load i32, i32* @y.64
  %2778 = sub i32 %2776, 1
  %2779 = mul i32 %2776, %2778
  %2780 = urem i32 %2779, 2
  %2781 = icmp eq i32 %2780, 0
  %2782 = icmp slt i32 %2777, 10
  %2783 = or i1 %2781, %2782
  br i1 %2783, label %originalBBpart2778, label %originalBB776alteredBB

originalBBpart2778:                               ; preds = %originalBB776
  br label %2784, !dbg !4876

2784:                                             ; preds = %originalBBpart2778, %originalBBpart2738, %originalBBpart2734, %originalBBpart2730
  call void @llvm.dbg.label(metadata !4879), !dbg !4880
  %2785 = load i32, i32* @x.63
  %2786 = load i32, i32* @y.64
  %2787 = sub i32 %2785, 1
  %2788 = mul i32 %2785, %2787
  %2789 = urem i32 %2788, 2
  %2790 = icmp eq i32 %2789, 0
  %2791 = icmp slt i32 %2786, 10
  %2792 = or i1 %2790, %2791
  br i1 %2792, label %originalBB780, label %originalBB780alteredBB

originalBB780:                                    ; preds = %2784, %originalBB780alteredBB
  %2793 = load i32, i32* %23, align 4, !dbg !4881
  %2794 = icmp eq i32 %2793, 2, !dbg !4883
  %2795 = load i32, i32* @x.63
  %2796 = load i32, i32* @y.64
  %2797 = sub i32 %2795, 1
  %2798 = mul i32 %2795, %2797
  %2799 = urem i32 %2798, 2
  %2800 = icmp eq i32 %2799, 0
  %2801 = icmp slt i32 %2796, 10
  %2802 = or i1 %2800, %2801
  br i1 %2802, label %originalBBpart2782, label %originalBB780alteredBB

originalBBpart2782:                               ; preds = %originalBB780
  br i1 %2794, label %2803, label %2839, !dbg !4884

2803:                                             ; preds = %originalBBpart2782
  %2804 = load i32, i32* @x.63
  %2805 = load i32, i32* @y.64
  %2806 = sub i32 %2804, 1
  %2807 = mul i32 %2804, %2806
  %2808 = urem i32 %2807, 2
  %2809 = icmp eq i32 %2808, 0
  %2810 = icmp slt i32 %2805, 10
  %2811 = or i1 %2809, %2810
  br i1 %2811, label %originalBB784, label %originalBB784alteredBB

originalBB784:                                    ; preds = %2803, %originalBB784alteredBB
  %2812 = load i8, i8* %35, align 1, !dbg !4885
  %2813 = trunc i8 %2812 to i1, !dbg !4885
  %2814 = load i32, i32* @x.63
  %2815 = load i32, i32* @y.64
  %2816 = sub i32 %2814, 1
  %2817 = mul i32 %2814, %2816
  %2818 = urem i32 %2817, 2
  %2819 = icmp eq i32 %2818, 0
  %2820 = icmp slt i32 %2815, 10
  %2821 = or i1 %2819, %2820
  br i1 %2821, label %originalBBpart2786, label %originalBB784alteredBB

originalBBpart2786:                               ; preds = %originalBB784
  br i1 %2813, label %2822, label %2839, !dbg !4886

2822:                                             ; preds = %originalBBpart2786
  %2823 = load i32, i32* @x.63
  %2824 = load i32, i32* @y.64
  %2825 = sub i32 %2823, 1
  %2826 = mul i32 %2823, %2825
  %2827 = urem i32 %2826, 2
  %2828 = icmp eq i32 %2827, 0
  %2829 = icmp slt i32 %2824, 10
  %2830 = or i1 %2828, %2829
  br i1 %2830, label %originalBB788, label %originalBB788alteredBB

originalBB788:                                    ; preds = %2822, %originalBB788alteredBB
  %2831 = load i32, i32* @x.63
  %2832 = load i32, i32* @y.64
  %2833 = sub i32 %2831, 1
  %2834 = mul i32 %2831, %2833
  %2835 = urem i32 %2834, 2
  %2836 = icmp eq i32 %2835, 0
  %2837 = icmp slt i32 %2832, 10
  %2838 = or i1 %2836, %2837
  br i1 %2838, label %originalBBpart2790, label %originalBB788alteredBB

originalBBpart2790:                               ; preds = %originalBB788
  br label %6990, !dbg !4887

2839:                                             ; preds = %originalBBpart2786, %originalBBpart2782
  %2840 = load i32, i32* @x.63
  %2841 = load i32, i32* @y.64
  %2842 = sub i32 %2840, 1
  %2843 = mul i32 %2840, %2842
  %2844 = urem i32 %2843, 2
  %2845 = icmp eq i32 %2844, 0
  %2846 = icmp slt i32 %2841, 10
  %2847 = or i1 %2845, %2846
  br i1 %2847, label %originalBB792, label %originalBB792alteredBB

originalBB792:                                    ; preds = %2839, %originalBB792alteredBB
  %2848 = load i32, i32* @x.63
  %2849 = load i32, i32* @y.64
  %2850 = sub i32 %2848, 1
  %2851 = mul i32 %2848, %2850
  %2852 = urem i32 %2851, 2
  %2853 = icmp eq i32 %2852, 0
  %2854 = icmp slt i32 %2849, 10
  %2855 = or i1 %2853, %2854
  br i1 %2855, label %originalBBpart2794, label %originalBB792alteredBB

originalBBpart2794:                               ; preds = %originalBB792
  br label %2856, !dbg !4885

2856:                                             ; preds = %originalBBpart2794, %originalBBpart2742, %originalBBpart2726, %originalBBpart2722, %originalBBpart2718
  call void @llvm.dbg.label(metadata !4888), !dbg !4889
  %2857 = load i32, i32* @x.63
  %2858 = load i32, i32* @y.64
  %2859 = sub i32 %2857, 1
  %2860 = mul i32 %2857, %2859
  %2861 = urem i32 %2860, 2
  %2862 = icmp eq i32 %2861, 0
  %2863 = icmp slt i32 %2858, 10
  %2864 = or i1 %2862, %2863
  br i1 %2864, label %originalBB796, label %originalBB796alteredBB

originalBB796:                                    ; preds = %2856, %originalBB796alteredBB
  %2865 = load i8, i8* %33, align 1, !dbg !4890
  %2866 = trunc i8 %2865 to i1, !dbg !4890
  %2867 = load i32, i32* @x.63
  %2868 = load i32, i32* @y.64
  %2869 = sub i32 %2867, 1
  %2870 = mul i32 %2867, %2869
  %2871 = urem i32 %2870, 2
  %2872 = icmp eq i32 %2871, 0
  %2873 = icmp slt i32 %2868, 10
  %2874 = or i1 %2872, %2873
  br i1 %2874, label %originalBBpart2798, label %originalBB796alteredBB

originalBBpart2798:                               ; preds = %originalBB796
  br i1 %2866, label %2875, label %2893, !dbg !4892

2875:                                             ; preds = %originalBBpart2798
  %2876 = load i32, i32* @x.63
  %2877 = load i32, i32* @y.64
  %2878 = sub i32 %2876, 1
  %2879 = mul i32 %2876, %2878
  %2880 = urem i32 %2879, 2
  %2881 = icmp eq i32 %2880, 0
  %2882 = icmp slt i32 %2877, 10
  %2883 = or i1 %2881, %2882
  br i1 %2883, label %originalBB800, label %originalBB800alteredBB

originalBB800:                                    ; preds = %2875, %originalBB800alteredBB
  %2884 = load i8, i8* %40, align 1, !dbg !4893
  store i8 %2884, i8* %39, align 1, !dbg !4895
  %2885 = load i32, i32* @x.63
  %2886 = load i32, i32* @y.64
  %2887 = sub i32 %2885, 1
  %2888 = mul i32 %2885, %2887
  %2889 = urem i32 %2888, 2
  %2890 = icmp eq i32 %2889, 0
  %2891 = icmp slt i32 %2886, 10
  %2892 = or i1 %2890, %2891
  br i1 %2892, label %originalBBpart2802, label %originalBB800alteredBB

originalBBpart2802:                               ; preds = %originalBB800
  br label %5624, !dbg !4896

2893:                                             ; preds = %originalBBpart2798
  %2894 = load i32, i32* @x.63
  %2895 = load i32, i32* @y.64
  %2896 = sub i32 %2894, 1
  %2897 = mul i32 %2894, %2896
  %2898 = urem i32 %2897, 2
  %2899 = icmp eq i32 %2898, 0
  %2900 = icmp slt i32 %2895, 10
  %2901 = or i1 %2899, %2900
  br i1 %2901, label %originalBB804, label %originalBB804alteredBB

originalBB804:                                    ; preds = %2893, %originalBB804alteredBB
  %2902 = load i32, i32* @x.63
  %2903 = load i32, i32* @y.64
  %2904 = sub i32 %2902, 1
  %2905 = mul i32 %2902, %2904
  %2906 = urem i32 %2905, 2
  %2907 = icmp eq i32 %2906, 0
  %2908 = icmp slt i32 %2903, 10
  %2909 = or i1 %2907, %2908
  br i1 %2909, label %originalBBpart2806, label %originalBB804alteredBB

originalBBpart2806:                               ; preds = %originalBB804
  br label %5465, !dbg !4897

2910:                                             ; preds = %originalBBpart2266, %originalBBpart2266
  %2911 = load i32, i32* @x.63
  %2912 = load i32, i32* @y.64
  %2913 = sub i32 %2911, 1
  %2914 = mul i32 %2911, %2913
  %2915 = urem i32 %2914, 2
  %2916 = icmp eq i32 %2915, 0
  %2917 = icmp slt i32 %2912, 10
  %2918 = or i1 %2916, %2917
  br i1 %2918, label %originalBB808, label %originalBB808alteredBB

originalBB808:                                    ; preds = %2910, %originalBB808alteredBB
  %2919 = load i64, i64* %22, align 8, !dbg !4898
  %2920 = icmp eq i64 %2919, -1, !dbg !4900
  %2921 = load i32, i32* @x.63
  %2922 = load i32, i32* @y.64
  %2923 = sub i32 %2921, 1
  %2924 = mul i32 %2921, %2923
  %2925 = urem i32 %2924, 2
  %2926 = icmp eq i32 %2925, 0
  %2927 = icmp slt i32 %2922, 10
  %2928 = or i1 %2926, %2927
  br i1 %2928, label %originalBBpart2810, label %originalBB808alteredBB

originalBBpart2810:                               ; preds = %originalBB808
  br i1 %2920, label %2929, label %2951, !dbg !4901

2929:                                             ; preds = %originalBBpart2810
  %2930 = load i32, i32* @x.63
  %2931 = load i32, i32* @y.64
  %2932 = sub i32 %2930, 1
  %2933 = mul i32 %2930, %2932
  %2934 = urem i32 %2933, 2
  %2935 = icmp eq i32 %2934, 0
  %2936 = icmp slt i32 %2931, 10
  %2937 = or i1 %2935, %2936
  br i1 %2937, label %originalBB812, label %originalBB812alteredBB

originalBB812:                                    ; preds = %2929, %originalBB812alteredBB
  %2938 = load i8*, i8** %21, align 8, !dbg !4902
  %2939 = getelementptr inbounds i8, i8* %2938, i64 1, !dbg !4902
  %2940 = load i8, i8* %2939, align 1, !dbg !4902
  %2941 = sext i8 %2940 to i32, !dbg !4902
  %2942 = icmp eq i32 %2941, 0, !dbg !4903
  %2943 = load i32, i32* @x.63
  %2944 = load i32, i32* @y.64
  %2945 = sub i32 %2943, 1
  %2946 = mul i32 %2943, %2945
  %2947 = urem i32 %2946, 2
  %2948 = icmp eq i32 %2947, 0
  %2949 = icmp slt i32 %2944, 10
  %2950 = or i1 %2948, %2949
  br i1 %2950, label %originalBBpart2814, label %originalBB812alteredBB

originalBBpart2814:                               ; preds = %originalBB812
  br i1 %2942, label %2987, label %2970, !dbg !4898

2951:                                             ; preds = %originalBBpart2810
  %2952 = load i32, i32* @x.63
  %2953 = load i32, i32* @y.64
  %2954 = sub i32 %2952, 1
  %2955 = mul i32 %2952, %2954
  %2956 = urem i32 %2955, 2
  %2957 = icmp eq i32 %2956, 0
  %2958 = icmp slt i32 %2953, 10
  %2959 = or i1 %2957, %2958
  br i1 %2959, label %originalBB816, label %originalBB816alteredBB

originalBB816:                                    ; preds = %2951, %originalBB816alteredBB
  %2960 = load i64, i64* %22, align 8, !dbg !4904
  %2961 = icmp eq i64 %2960, 1, !dbg !4905
  %2962 = load i32, i32* @x.63
  %2963 = load i32, i32* @y.64
  %2964 = sub i32 %2962, 1
  %2965 = mul i32 %2962, %2964
  %2966 = urem i32 %2965, 2
  %2967 = icmp eq i32 %2966, 0
  %2968 = icmp slt i32 %2963, 10
  %2969 = or i1 %2967, %2968
  br i1 %2969, label %originalBBpart2818, label %originalBB816alteredBB

originalBBpart2818:                               ; preds = %originalBB816
  br i1 %2961, label %2987, label %2970, !dbg !4901

2970:                                             ; preds = %originalBBpart2818, %originalBBpart2814
  %2971 = load i32, i32* @x.63
  %2972 = load i32, i32* @y.64
  %2973 = sub i32 %2971, 1
  %2974 = mul i32 %2971, %2973
  %2975 = urem i32 %2974, 2
  %2976 = icmp eq i32 %2975, 0
  %2977 = icmp slt i32 %2972, 10
  %2978 = or i1 %2976, %2977
  br i1 %2978, label %originalBB820, label %originalBB820alteredBB

originalBB820:                                    ; preds = %2970, %originalBB820alteredBB
  %2979 = load i32, i32* @x.63
  %2980 = load i32, i32* @y.64
  %2981 = sub i32 %2979, 1
  %2982 = mul i32 %2979, %2981
  %2983 = urem i32 %2982, 2
  %2984 = icmp eq i32 %2983, 0
  %2985 = icmp slt i32 %2980, 10
  %2986 = or i1 %2984, %2985
  br i1 %2986, label %originalBBpart2822, label %originalBB820alteredBB

originalBBpart2822:                               ; preds = %originalBB820
  br label %5465, !dbg !4906

2987:                                             ; preds = %originalBBpart2818, %originalBBpart2814
  %2988 = load i32, i32* @x.63
  %2989 = load i32, i32* @y.64
  %2990 = sub i32 %2988, 1
  %2991 = mul i32 %2988, %2990
  %2992 = urem i32 %2991, 2
  %2993 = icmp eq i32 %2992, 0
  %2994 = icmp slt i32 %2989, 10
  %2995 = or i1 %2993, %2994
  br i1 %2995, label %originalBB824, label %originalBB824alteredBB

originalBB824:                                    ; preds = %2987, %originalBB824alteredBB
  %2996 = load i32, i32* @x.63
  %2997 = load i32, i32* @y.64
  %2998 = sub i32 %2996, 1
  %2999 = mul i32 %2996, %2998
  %3000 = urem i32 %2999, 2
  %3001 = icmp eq i32 %3000, 0
  %3002 = icmp slt i32 %2997, 10
  %3003 = or i1 %3001, %3002
  br i1 %3003, label %originalBBpart2826, label %originalBB824alteredBB

originalBBpart2826:                               ; preds = %originalBB824
  br label %3004, !dbg !4907

3004:                                             ; preds = %originalBBpart2826, %originalBBpart2266, %originalBBpart2266
  %3005 = load i32, i32* @x.63
  %3006 = load i32, i32* @y.64
  %3007 = sub i32 %3005, 1
  %3008 = mul i32 %3005, %3007
  %3009 = urem i32 %3008, 2
  %3010 = icmp eq i32 %3009, 0
  %3011 = icmp slt i32 %3006, 10
  %3012 = or i1 %3010, %3011
  br i1 %3012, label %originalBB828, label %originalBB828alteredBB

originalBB828:                                    ; preds = %3004, %originalBB828alteredBB
  %3013 = load i64, i64* %28, align 8, !dbg !4908
  %3014 = icmp ne i64 %3013, 0, !dbg !4910
  %3015 = load i32, i32* @x.63
  %3016 = load i32, i32* @y.64
  %3017 = sub i32 %3015, 1
  %3018 = mul i32 %3015, %3017
  %3019 = urem i32 %3018, 2
  %3020 = icmp eq i32 %3019, 0
  %3021 = icmp slt i32 %3016, 10
  %3022 = or i1 %3020, %3021
  br i1 %3022, label %originalBBpart2830, label %originalBB828alteredBB

originalBBpart2830:                               ; preds = %originalBB828
  br i1 %3014, label %3023, label %3040, !dbg !4911

3023:                                             ; preds = %originalBBpart2830
  %3024 = load i32, i32* @x.63
  %3025 = load i32, i32* @y.64
  %3026 = sub i32 %3024, 1
  %3027 = mul i32 %3024, %3026
  %3028 = urem i32 %3027, 2
  %3029 = icmp eq i32 %3028, 0
  %3030 = icmp slt i32 %3025, 10
  %3031 = or i1 %3029, %3030
  br i1 %3031, label %originalBB832, label %originalBB832alteredBB

originalBB832:                                    ; preds = %3023, %originalBB832alteredBB
  %3032 = load i32, i32* @x.63
  %3033 = load i32, i32* @y.64
  %3034 = sub i32 %3032, 1
  %3035 = mul i32 %3032, %3034
  %3036 = urem i32 %3035, 2
  %3037 = icmp eq i32 %3036, 0
  %3038 = icmp slt i32 %3033, 10
  %3039 = or i1 %3037, %3038
  br i1 %3039, label %originalBBpart2834, label %originalBB832alteredBB

originalBBpart2834:                               ; preds = %originalBB832
  br label %5465, !dbg !4912

3040:                                             ; preds = %originalBBpart2830
  %3041 = load i32, i32* @x.63
  %3042 = load i32, i32* @y.64
  %3043 = sub i32 %3041, 1
  %3044 = mul i32 %3041, %3043
  %3045 = urem i32 %3044, 2
  %3046 = icmp eq i32 %3045, 0
  %3047 = icmp slt i32 %3042, 10
  %3048 = or i1 %3046, %3047
  br i1 %3048, label %originalBB836, label %originalBB836alteredBB

originalBB836:                                    ; preds = %3040, %originalBB836alteredBB
  %3049 = load i32, i32* @x.63
  %3050 = load i32, i32* @y.64
  %3051 = sub i32 %3049, 1
  %3052 = mul i32 %3049, %3051
  %3053 = urem i32 %3052, 2
  %3054 = icmp eq i32 %3053, 0
  %3055 = icmp slt i32 %3050, 10
  %3056 = or i1 %3054, %3055
  br i1 %3056, label %originalBBpart2838, label %originalBB836alteredBB

originalBBpart2838:                               ; preds = %originalBB836
  br label %3057, !dbg !4913

3057:                                             ; preds = %originalBBpart2838, %originalBBpart2266
  %3058 = load i32, i32* @x.63
  %3059 = load i32, i32* @y.64
  %3060 = sub i32 %3058, 1
  %3061 = mul i32 %3058, %3060
  %3062 = urem i32 %3061, 2
  %3063 = icmp eq i32 %3062, 0
  %3064 = icmp slt i32 %3059, 10
  %3065 = or i1 %3063, %3064
  br i1 %3065, label %originalBB840, label %originalBB840alteredBB

originalBB840:                                    ; preds = %3057, %originalBB840alteredBB
  store i8 1, i8* %43, align 1, !dbg !4914
  %3066 = load i32, i32* @x.63
  %3067 = load i32, i32* @y.64
  %3068 = sub i32 %3066, 1
  %3069 = mul i32 %3066, %3068
  %3070 = urem i32 %3069, 2
  %3071 = icmp eq i32 %3070, 0
  %3072 = icmp slt i32 %3067, 10
  %3073 = or i1 %3071, %3072
  br i1 %3073, label %originalBBpart2842, label %originalBB840alteredBB

originalBBpart2842:                               ; preds = %originalBB840
  br label %3074, !dbg !4915

3074:                                             ; preds = %originalBBpart2842, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266
  %3075 = load i32, i32* @x.63
  %3076 = load i32, i32* @y.64
  %3077 = sub i32 %3075, 1
  %3078 = mul i32 %3075, %3077
  %3079 = urem i32 %3078, 2
  %3080 = icmp eq i32 %3079, 0
  %3081 = icmp slt i32 %3076, 10
  %3082 = or i1 %3080, %3081
  br i1 %3082, label %originalBB844, label %originalBB844alteredBB

originalBB844:                                    ; preds = %3074, %originalBB844alteredBB
  %3083 = load i32, i32* %23, align 4, !dbg !4916
  %3084 = icmp eq i32 %3083, 2, !dbg !4918
  %3085 = load i32, i32* @x.63
  %3086 = load i32, i32* @y.64
  %3087 = sub i32 %3085, 1
  %3088 = mul i32 %3085, %3087
  %3089 = urem i32 %3088, 2
  %3090 = icmp eq i32 %3089, 0
  %3091 = icmp slt i32 %3086, 10
  %3092 = or i1 %3090, %3091
  br i1 %3092, label %originalBBpart2846, label %originalBB844alteredBB

originalBBpart2846:                               ; preds = %originalBB844
  br i1 %3084, label %3093, label %3129, !dbg !4919

3093:                                             ; preds = %originalBBpart2846
  %3094 = load i32, i32* @x.63
  %3095 = load i32, i32* @y.64
  %3096 = sub i32 %3094, 1
  %3097 = mul i32 %3094, %3096
  %3098 = urem i32 %3097, 2
  %3099 = icmp eq i32 %3098, 0
  %3100 = icmp slt i32 %3095, 10
  %3101 = or i1 %3099, %3100
  br i1 %3101, label %originalBB848, label %originalBB848alteredBB

originalBB848:                                    ; preds = %3093, %originalBB848alteredBB
  %3102 = load i8, i8* %35, align 1, !dbg !4920
  %3103 = trunc i8 %3102 to i1, !dbg !4920
  %3104 = load i32, i32* @x.63
  %3105 = load i32, i32* @y.64
  %3106 = sub i32 %3104, 1
  %3107 = mul i32 %3104, %3106
  %3108 = urem i32 %3107, 2
  %3109 = icmp eq i32 %3108, 0
  %3110 = icmp slt i32 %3105, 10
  %3111 = or i1 %3109, %3110
  br i1 %3111, label %originalBBpart2850, label %originalBB848alteredBB

originalBBpart2850:                               ; preds = %originalBB848
  br i1 %3103, label %3112, label %3129, !dbg !4921

3112:                                             ; preds = %originalBBpart2850
  %3113 = load i32, i32* @x.63
  %3114 = load i32, i32* @y.64
  %3115 = sub i32 %3113, 1
  %3116 = mul i32 %3113, %3115
  %3117 = urem i32 %3116, 2
  %3118 = icmp eq i32 %3117, 0
  %3119 = icmp slt i32 %3114, 10
  %3120 = or i1 %3118, %3119
  br i1 %3120, label %originalBB852, label %originalBB852alteredBB

originalBB852:                                    ; preds = %3112, %originalBB852alteredBB
  %3121 = load i32, i32* @x.63
  %3122 = load i32, i32* @y.64
  %3123 = sub i32 %3121, 1
  %3124 = mul i32 %3121, %3123
  %3125 = urem i32 %3124, 2
  %3126 = icmp eq i32 %3125, 0
  %3127 = icmp slt i32 %3122, 10
  %3128 = or i1 %3126, %3127
  br i1 %3128, label %originalBBpart2854, label %originalBB852alteredBB

originalBBpart2854:                               ; preds = %originalBB852
  br label %6990, !dbg !4922

3129:                                             ; preds = %originalBBpart2850, %originalBBpart2846
  %3130 = load i32, i32* @x.63
  %3131 = load i32, i32* @y.64
  %3132 = sub i32 %3130, 1
  %3133 = mul i32 %3130, %3132
  %3134 = urem i32 %3133, 2
  %3135 = icmp eq i32 %3134, 0
  %3136 = icmp slt i32 %3131, 10
  %3137 = or i1 %3135, %3136
  br i1 %3137, label %originalBB856, label %originalBB856alteredBB

originalBB856:                                    ; preds = %3129, %originalBB856alteredBB
  %3138 = load i32, i32* @x.63
  %3139 = load i32, i32* @y.64
  %3140 = sub i32 %3138, 1
  %3141 = mul i32 %3138, %3140
  %3142 = urem i32 %3141, 2
  %3143 = icmp eq i32 %3142, 0
  %3144 = icmp slt i32 %3139, 10
  %3145 = or i1 %3143, %3144
  br i1 %3145, label %originalBBpart2858, label %originalBB856alteredBB

originalBBpart2858:                               ; preds = %originalBB856
  br label %5465, !dbg !4923

3146:                                             ; preds = %originalBBpart2266
  %3147 = load i32, i32* @x.63
  %3148 = load i32, i32* @y.64
  %3149 = sub i32 %3147, 1
  %3150 = mul i32 %3147, %3149
  %3151 = urem i32 %3150, 2
  %3152 = icmp eq i32 %3151, 0
  %3153 = icmp slt i32 %3148, 10
  %3154 = or i1 %3152, %3153
  br i1 %3154, label %originalBB860, label %originalBB860alteredBB

originalBB860:                                    ; preds = %3146, %originalBB860alteredBB
  store i8 1, i8* %37, align 1, !dbg !4924
  store i8 1, i8* %43, align 1, !dbg !4925
  %3155 = load i32, i32* %23, align 4, !dbg !4926
  %3156 = icmp eq i32 %3155, 2, !dbg !4928
  %3157 = load i32, i32* @x.63
  %3158 = load i32, i32* @y.64
  %3159 = sub i32 %3157, 1
  %3160 = mul i32 %3157, %3159
  %3161 = urem i32 %3160, 2
  %3162 = icmp eq i32 %3161, 0
  %3163 = icmp slt i32 %3158, 10
  %3164 = or i1 %3162, %3163
  br i1 %3164, label %originalBBpart2862, label %originalBB860alteredBB

originalBBpart2862:                               ; preds = %originalBB860
  br i1 %3156, label %3165, label %3502, !dbg !4929

3165:                                             ; preds = %originalBBpart2862
  %3166 = load i32, i32* @x.63
  %3167 = load i32, i32* @y.64
  %3168 = sub i32 %3166, 1
  %3169 = mul i32 %3166, %3168
  %3170 = urem i32 %3169, 2
  %3171 = icmp eq i32 %3170, 0
  %3172 = icmp slt i32 %3167, 10
  %3173 = or i1 %3171, %3172
  br i1 %3173, label %originalBB864, label %originalBB864alteredBB

originalBB864:                                    ; preds = %3165, %originalBB864alteredBB
  %3174 = load i8, i8* %35, align 1, !dbg !4930
  %3175 = trunc i8 %3174 to i1, !dbg !4930
  %3176 = load i32, i32* @x.63
  %3177 = load i32, i32* @y.64
  %3178 = sub i32 %3176, 1
  %3179 = mul i32 %3176, %3178
  %3180 = urem i32 %3179, 2
  %3181 = icmp eq i32 %3180, 0
  %3182 = icmp slt i32 %3177, 10
  %3183 = or i1 %3181, %3182
  br i1 %3183, label %originalBBpart2866, label %originalBB864alteredBB

originalBBpart2866:                               ; preds = %originalBB864
  br i1 %3175, label %3184, label %3201, !dbg !4933

3184:                                             ; preds = %originalBBpart2866
  %3185 = load i32, i32* @x.63
  %3186 = load i32, i32* @y.64
  %3187 = sub i32 %3185, 1
  %3188 = mul i32 %3185, %3187
  %3189 = urem i32 %3188, 2
  %3190 = icmp eq i32 %3189, 0
  %3191 = icmp slt i32 %3186, 10
  %3192 = or i1 %3190, %3191
  br i1 %3192, label %originalBB868, label %originalBB868alteredBB

originalBB868:                                    ; preds = %3184, %originalBB868alteredBB
  %3193 = load i32, i32* @x.63
  %3194 = load i32, i32* @y.64
  %3195 = sub i32 %3193, 1
  %3196 = mul i32 %3193, %3195
  %3197 = urem i32 %3196, 2
  %3198 = icmp eq i32 %3197, 0
  %3199 = icmp slt i32 %3194, 10
  %3200 = or i1 %3198, %3199
  br i1 %3200, label %originalBBpart2870, label %originalBB868alteredBB

originalBBpart2870:                               ; preds = %originalBB868
  br label %6990, !dbg !4934

3201:                                             ; preds = %originalBBpart2866
  %3202 = load i32, i32* @x.63
  %3203 = load i32, i32* @y.64
  %3204 = sub i32 %3202, 1
  %3205 = mul i32 %3202, %3204
  %3206 = urem i32 %3205, 2
  %3207 = icmp eq i32 %3206, 0
  %3208 = icmp slt i32 %3203, 10
  %3209 = or i1 %3207, %3208
  br i1 %3209, label %originalBB872, label %originalBB872alteredBB

originalBB872:                                    ; preds = %3201, %originalBB872alteredBB
  %3210 = load i64, i64* %20, align 8, !dbg !4935
  %3211 = icmp ne i64 %3210, 0, !dbg !4935
  %3212 = load i32, i32* @x.63
  %3213 = load i32, i32* @y.64
  %3214 = sub i32 %3212, 1
  %3215 = mul i32 %3212, %3214
  %3216 = urem i32 %3215, 2
  %3217 = icmp eq i32 %3216, 0
  %3218 = icmp slt i32 %3213, 10
  %3219 = or i1 %3217, %3218
  br i1 %3219, label %originalBBpart2874, label %originalBB872alteredBB

originalBBpart2874:                               ; preds = %originalBB872
  br i1 %3211, label %3220, label %3257, !dbg !4937

3220:                                             ; preds = %originalBBpart2874
  %3221 = load i32, i32* @x.63
  %3222 = load i32, i32* @y.64
  %3223 = sub i32 %3221, 1
  %3224 = mul i32 %3221, %3223
  %3225 = urem i32 %3224, 2
  %3226 = icmp eq i32 %3225, 0
  %3227 = icmp slt i32 %3222, 10
  %3228 = or i1 %3226, %3227
  br i1 %3228, label %originalBB876, label %originalBB876alteredBB

originalBB876:                                    ; preds = %3220, %originalBB876alteredBB
  %3229 = load i64, i64* %30, align 8, !dbg !4938
  %3230 = icmp ne i64 %3229, 0, !dbg !4938
  %3231 = load i32, i32* @x.63
  %3232 = load i32, i32* @y.64
  %3233 = sub i32 %3231, 1
  %3234 = mul i32 %3231, %3233
  %3235 = urem i32 %3234, 2
  %3236 = icmp eq i32 %3235, 0
  %3237 = icmp slt i32 %3232, 10
  %3238 = or i1 %3236, %3237
  br i1 %3238, label %originalBBpart2878, label %originalBB876alteredBB

originalBBpart2878:                               ; preds = %originalBB876
  br i1 %3230, label %3257, label %3239, !dbg !4939

3239:                                             ; preds = %originalBBpart2878
  %3240 = load i32, i32* @x.63
  %3241 = load i32, i32* @y.64
  %3242 = sub i32 %3240, 1
  %3243 = mul i32 %3240, %3242
  %3244 = urem i32 %3243, 2
  %3245 = icmp eq i32 %3244, 0
  %3246 = icmp slt i32 %3241, 10
  %3247 = or i1 %3245, %3246
  br i1 %3247, label %originalBB880, label %originalBB880alteredBB

originalBB880:                                    ; preds = %3239, %originalBB880alteredBB
  %3248 = load i64, i64* %20, align 8, !dbg !4940
  store i64 %3248, i64* %30, align 8, !dbg !4942
  store i64 0, i64* %20, align 8, !dbg !4943
  %3249 = load i32, i32* @x.63
  %3250 = load i32, i32* @y.64
  %3251 = sub i32 %3249, 1
  %3252 = mul i32 %3249, %3251
  %3253 = urem i32 %3252, 2
  %3254 = icmp eq i32 %3253, 0
  %3255 = icmp slt i32 %3250, 10
  %3256 = or i1 %3254, %3255
  br i1 %3256, label %originalBBpart2882, label %originalBB880alteredBB

originalBBpart2882:                               ; preds = %originalBB880
  br label %3257, !dbg !4944

3257:                                             ; preds = %originalBBpart2882, %originalBBpart2878, %originalBBpart2874
  %3258 = load i32, i32* @x.63
  %3259 = load i32, i32* @y.64
  %3260 = sub i32 %3258, 1
  %3261 = mul i32 %3258, %3260
  %3262 = urem i32 %3261, 2
  %3263 = icmp eq i32 %3262, 0
  %3264 = icmp slt i32 %3259, 10
  %3265 = or i1 %3263, %3264
  br i1 %3265, label %originalBB884, label %originalBB884alteredBB

originalBB884:                                    ; preds = %3257, %originalBB884alteredBB
  %3266 = load i32, i32* @x.63
  %3267 = load i32, i32* @y.64
  %3268 = sub i32 %3266, 1
  %3269 = mul i32 %3266, %3268
  %3270 = urem i32 %3269, 2
  %3271 = icmp eq i32 %3270, 0
  %3272 = icmp slt i32 %3267, 10
  %3273 = or i1 %3271, %3272
  br i1 %3273, label %originalBBpart2886, label %originalBB884alteredBB

originalBBpart2886:                               ; preds = %originalBB884
  br label %3274, !dbg !4945

3274:                                             ; preds = %originalBBpart2886
  %3275 = load i32, i32* @x.63
  %3276 = load i32, i32* @y.64
  %3277 = sub i32 %3275, 1
  %3278 = mul i32 %3275, %3277
  %3279 = urem i32 %3278, 2
  %3280 = icmp eq i32 %3279, 0
  %3281 = icmp slt i32 %3276, 10
  %3282 = or i1 %3280, %3281
  br i1 %3282, label %originalBB888, label %originalBB888alteredBB

originalBB888:                                    ; preds = %3274, %originalBB888alteredBB
  %3283 = load i64, i64* %29, align 8, !dbg !4946
  %3284 = load i64, i64* %20, align 8, !dbg !4946
  %3285 = icmp ult i64 %3283, %3284, !dbg !4946
  %3286 = load i32, i32* @x.63
  %3287 = load i32, i32* @y.64
  %3288 = sub i32 %3286, 1
  %3289 = mul i32 %3286, %3288
  %3290 = urem i32 %3289, 2
  %3291 = icmp eq i32 %3290, 0
  %3292 = icmp slt i32 %3287, 10
  %3293 = or i1 %3291, %3292
  br i1 %3293, label %originalBBpart2890, label %originalBB888alteredBB

originalBBpart2890:                               ; preds = %originalBB888
  br i1 %3285, label %3294, label %3314, !dbg !4949

3294:                                             ; preds = %originalBBpart2890
  %3295 = load i32, i32* @x.63
  %3296 = load i32, i32* @y.64
  %3297 = sub i32 %3295, 1
  %3298 = mul i32 %3295, %3297
  %3299 = urem i32 %3298, 2
  %3300 = icmp eq i32 %3299, 0
  %3301 = icmp slt i32 %3296, 10
  %3302 = or i1 %3300, %3301
  br i1 %3302, label %originalBB892, label %originalBB892alteredBB

originalBB892:                                    ; preds = %3294, %originalBB892alteredBB
  %3303 = load i8*, i8** %19, align 8, !dbg !4946
  %3304 = load i64, i64* %29, align 8, !dbg !4946
  %3305 = getelementptr inbounds i8, i8* %3303, i64 %3304, !dbg !4946
  store i8 39, i8* %3305, align 1, !dbg !4946
  %3306 = load i32, i32* @x.63
  %3307 = load i32, i32* @y.64
  %3308 = sub i32 %3306, 1
  %3309 = mul i32 %3306, %3308
  %3310 = urem i32 %3309, 2
  %3311 = icmp eq i32 %3310, 0
  %3312 = icmp slt i32 %3307, 10
  %3313 = or i1 %3311, %3312
  br i1 %3313, label %originalBBpart2894, label %originalBB892alteredBB

originalBBpart2894:                               ; preds = %originalBB892
  br label %3314, !dbg !4946

3314:                                             ; preds = %originalBBpart2894, %originalBBpart2890
  %3315 = load i32, i32* @x.63
  %3316 = load i32, i32* @y.64
  %3317 = sub i32 %3315, 1
  %3318 = mul i32 %3315, %3317
  %3319 = urem i32 %3318, 2
  %3320 = icmp eq i32 %3319, 0
  %3321 = icmp slt i32 %3316, 10
  %3322 = or i1 %3320, %3321
  br i1 %3322, label %originalBB896, label %originalBB896alteredBB

originalBB896:                                    ; preds = %3314, %originalBB896alteredBB
  %3323 = load i64, i64* %29, align 8, !dbg !4949
  %3324 = add i64 %3323, 1, !dbg !4949
  store i64 %3324, i64* %29, align 8, !dbg !4949
  %3325 = load i32, i32* @x.63
  %3326 = load i32, i32* @y.64
  %3327 = sub i32 %3325, 1
  %3328 = mul i32 %3325, %3327
  %3329 = urem i32 %3328, 2
  %3330 = icmp eq i32 %3329, 0
  %3331 = icmp slt i32 %3326, 10
  %3332 = or i1 %3330, %3331
  br i1 %3332, label %originalBBpart2900, label %originalBB896alteredBB

originalBBpart2900:                               ; preds = %originalBB896
  br label %3333, !dbg !4949

3333:                                             ; preds = %originalBBpart2900
  %3334 = load i32, i32* @x.63
  %3335 = load i32, i32* @y.64
  %3336 = sub i32 %3334, 1
  %3337 = mul i32 %3334, %3336
  %3338 = urem i32 %3337, 2
  %3339 = icmp eq i32 %3338, 0
  %3340 = icmp slt i32 %3335, 10
  %3341 = or i1 %3339, %3340
  br i1 %3341, label %originalBB902, label %originalBB902alteredBB

originalBB902:                                    ; preds = %3333, %originalBB902alteredBB
  %3342 = load i32, i32* @x.63
  %3343 = load i32, i32* @y.64
  %3344 = sub i32 %3342, 1
  %3345 = mul i32 %3342, %3344
  %3346 = urem i32 %3345, 2
  %3347 = icmp eq i32 %3346, 0
  %3348 = icmp slt i32 %3343, 10
  %3349 = or i1 %3347, %3348
  br i1 %3349, label %originalBBpart2904, label %originalBB902alteredBB

originalBBpart2904:                               ; preds = %originalBB902
  br label %3350, !dbg !4950

3350:                                             ; preds = %originalBBpart2904
  %3351 = load i32, i32* @x.63
  %3352 = load i32, i32* @y.64
  %3353 = sub i32 %3351, 1
  %3354 = mul i32 %3351, %3353
  %3355 = urem i32 %3354, 2
  %3356 = icmp eq i32 %3355, 0
  %3357 = icmp slt i32 %3352, 10
  %3358 = or i1 %3356, %3357
  br i1 %3358, label %originalBB906, label %originalBB906alteredBB

originalBB906:                                    ; preds = %3350, %originalBB906alteredBB
  %3359 = load i64, i64* %29, align 8, !dbg !4951
  %3360 = load i64, i64* %20, align 8, !dbg !4951
  %3361 = icmp ult i64 %3359, %3360, !dbg !4951
  %3362 = load i32, i32* @x.63
  %3363 = load i32, i32* @y.64
  %3364 = sub i32 %3362, 1
  %3365 = mul i32 %3362, %3364
  %3366 = urem i32 %3365, 2
  %3367 = icmp eq i32 %3366, 0
  %3368 = icmp slt i32 %3363, 10
  %3369 = or i1 %3367, %3368
  br i1 %3369, label %originalBBpart2908, label %originalBB906alteredBB

originalBBpart2908:                               ; preds = %originalBB906
  br i1 %3361, label %3370, label %3390, !dbg !4954

3370:                                             ; preds = %originalBBpart2908
  %3371 = load i32, i32* @x.63
  %3372 = load i32, i32* @y.64
  %3373 = sub i32 %3371, 1
  %3374 = mul i32 %3371, %3373
  %3375 = urem i32 %3374, 2
  %3376 = icmp eq i32 %3375, 0
  %3377 = icmp slt i32 %3372, 10
  %3378 = or i1 %3376, %3377
  br i1 %3378, label %originalBB910, label %originalBB910alteredBB

originalBB910:                                    ; preds = %3370, %originalBB910alteredBB
  %3379 = load i8*, i8** %19, align 8, !dbg !4951
  %3380 = load i64, i64* %29, align 8, !dbg !4951
  %3381 = getelementptr inbounds i8, i8* %3379, i64 %3380, !dbg !4951
  store i8 92, i8* %3381, align 1, !dbg !4951
  %3382 = load i32, i32* @x.63
  %3383 = load i32, i32* @y.64
  %3384 = sub i32 %3382, 1
  %3385 = mul i32 %3382, %3384
  %3386 = urem i32 %3385, 2
  %3387 = icmp eq i32 %3386, 0
  %3388 = icmp slt i32 %3383, 10
  %3389 = or i1 %3387, %3388
  br i1 %3389, label %originalBBpart2912, label %originalBB910alteredBB

originalBBpart2912:                               ; preds = %originalBB910
  br label %3390, !dbg !4951

3390:                                             ; preds = %originalBBpart2912, %originalBBpart2908
  %3391 = load i32, i32* @x.63
  %3392 = load i32, i32* @y.64
  %3393 = sub i32 %3391, 1
  %3394 = mul i32 %3391, %3393
  %3395 = urem i32 %3394, 2
  %3396 = icmp eq i32 %3395, 0
  %3397 = icmp slt i32 %3392, 10
  %3398 = or i1 %3396, %3397
  br i1 %3398, label %originalBB914, label %originalBB914alteredBB

originalBB914:                                    ; preds = %3390, %originalBB914alteredBB
  %3399 = load i64, i64* %29, align 8, !dbg !4954
  %3400 = add i64 %3399, 1, !dbg !4954
  store i64 %3400, i64* %29, align 8, !dbg !4954
  %3401 = load i32, i32* @x.63
  %3402 = load i32, i32* @y.64
  %3403 = sub i32 %3401, 1
  %3404 = mul i32 %3401, %3403
  %3405 = urem i32 %3404, 2
  %3406 = icmp eq i32 %3405, 0
  %3407 = icmp slt i32 %3402, 10
  %3408 = or i1 %3406, %3407
  br i1 %3408, label %originalBBpart2927, label %originalBB914alteredBB

originalBBpart2927:                               ; preds = %originalBB914
  br label %3409, !dbg !4954

3409:                                             ; preds = %originalBBpart2927
  %3410 = load i32, i32* @x.63
  %3411 = load i32, i32* @y.64
  %3412 = sub i32 %3410, 1
  %3413 = mul i32 %3410, %3412
  %3414 = urem i32 %3413, 2
  %3415 = icmp eq i32 %3414, 0
  %3416 = icmp slt i32 %3411, 10
  %3417 = or i1 %3415, %3416
  br i1 %3417, label %originalBB929, label %originalBB929alteredBB

originalBB929:                                    ; preds = %3409, %originalBB929alteredBB
  %3418 = load i32, i32* @x.63
  %3419 = load i32, i32* @y.64
  %3420 = sub i32 %3418, 1
  %3421 = mul i32 %3418, %3420
  %3422 = urem i32 %3421, 2
  %3423 = icmp eq i32 %3422, 0
  %3424 = icmp slt i32 %3419, 10
  %3425 = or i1 %3423, %3424
  br i1 %3425, label %originalBBpart2931, label %originalBB929alteredBB

originalBBpart2931:                               ; preds = %originalBB929
  br label %3426, !dbg !4955

3426:                                             ; preds = %originalBBpart2931
  %3427 = load i32, i32* @x.63
  %3428 = load i32, i32* @y.64
  %3429 = sub i32 %3427, 1
  %3430 = mul i32 %3427, %3429
  %3431 = urem i32 %3430, 2
  %3432 = icmp eq i32 %3431, 0
  %3433 = icmp slt i32 %3428, 10
  %3434 = or i1 %3432, %3433
  br i1 %3434, label %originalBB933, label %originalBB933alteredBB

originalBB933:                                    ; preds = %3426, %originalBB933alteredBB
  %3435 = load i64, i64* %29, align 8, !dbg !4956
  %3436 = load i64, i64* %20, align 8, !dbg !4956
  %3437 = icmp ult i64 %3435, %3436, !dbg !4956
  %3438 = load i32, i32* @x.63
  %3439 = load i32, i32* @y.64
  %3440 = sub i32 %3438, 1
  %3441 = mul i32 %3438, %3440
  %3442 = urem i32 %3441, 2
  %3443 = icmp eq i32 %3442, 0
  %3444 = icmp slt i32 %3439, 10
  %3445 = or i1 %3443, %3444
  br i1 %3445, label %originalBBpart2935, label %originalBB933alteredBB

originalBBpart2935:                               ; preds = %originalBB933
  br i1 %3437, label %3446, label %3466, !dbg !4959

3446:                                             ; preds = %originalBBpart2935
  %3447 = load i32, i32* @x.63
  %3448 = load i32, i32* @y.64
  %3449 = sub i32 %3447, 1
  %3450 = mul i32 %3447, %3449
  %3451 = urem i32 %3450, 2
  %3452 = icmp eq i32 %3451, 0
  %3453 = icmp slt i32 %3448, 10
  %3454 = or i1 %3452, %3453
  br i1 %3454, label %originalBB937, label %originalBB937alteredBB

originalBB937:                                    ; preds = %3446, %originalBB937alteredBB
  %3455 = load i8*, i8** %19, align 8, !dbg !4956
  %3456 = load i64, i64* %29, align 8, !dbg !4956
  %3457 = getelementptr inbounds i8, i8* %3455, i64 %3456, !dbg !4956
  store i8 39, i8* %3457, align 1, !dbg !4956
  %3458 = load i32, i32* @x.63
  %3459 = load i32, i32* @y.64
  %3460 = sub i32 %3458, 1
  %3461 = mul i32 %3458, %3460
  %3462 = urem i32 %3461, 2
  %3463 = icmp eq i32 %3462, 0
  %3464 = icmp slt i32 %3459, 10
  %3465 = or i1 %3463, %3464
  br i1 %3465, label %originalBBpart2939, label %originalBB937alteredBB

originalBBpart2939:                               ; preds = %originalBB937
  br label %3466, !dbg !4956

3466:                                             ; preds = %originalBBpart2939, %originalBBpart2935
  %3467 = load i32, i32* @x.63
  %3468 = load i32, i32* @y.64
  %3469 = sub i32 %3467, 1
  %3470 = mul i32 %3467, %3469
  %3471 = urem i32 %3470, 2
  %3472 = icmp eq i32 %3471, 0
  %3473 = icmp slt i32 %3468, 10
  %3474 = or i1 %3472, %3473
  br i1 %3474, label %originalBB941, label %originalBB941alteredBB

originalBB941:                                    ; preds = %3466, %originalBB941alteredBB
  %3475 = load i64, i64* %29, align 8, !dbg !4959
  %3476 = add i64 %3475, 1, !dbg !4959
  store i64 %3476, i64* %29, align 8, !dbg !4959
  %3477 = load i32, i32* @x.63
  %3478 = load i32, i32* @y.64
  %3479 = sub i32 %3477, 1
  %3480 = mul i32 %3477, %3479
  %3481 = urem i32 %3480, 2
  %3482 = icmp eq i32 %3481, 0
  %3483 = icmp slt i32 %3478, 10
  %3484 = or i1 %3482, %3483
  br i1 %3484, label %originalBBpart2948, label %originalBB941alteredBB

originalBBpart2948:                               ; preds = %originalBB941
  br label %3485, !dbg !4959

3485:                                             ; preds = %originalBBpart2948
  %3486 = load i32, i32* @x.63
  %3487 = load i32, i32* @y.64
  %3488 = sub i32 %3486, 1
  %3489 = mul i32 %3486, %3488
  %3490 = urem i32 %3489, 2
  %3491 = icmp eq i32 %3490, 0
  %3492 = icmp slt i32 %3487, 10
  %3493 = or i1 %3491, %3492
  br i1 %3493, label %originalBB950, label %originalBB950alteredBB

originalBB950:                                    ; preds = %3485, %originalBB950alteredBB
  store i8 0, i8* %36, align 1, !dbg !4960
  %3494 = load i32, i32* @x.63
  %3495 = load i32, i32* @y.64
  %3496 = sub i32 %3494, 1
  %3497 = mul i32 %3494, %3496
  %3498 = urem i32 %3497, 2
  %3499 = icmp eq i32 %3498, 0
  %3500 = icmp slt i32 %3495, 10
  %3501 = or i1 %3499, %3500
  br i1 %3501, label %originalBBpart2952, label %originalBB950alteredBB

originalBBpart2952:                               ; preds = %originalBB950
  br label %3502, !dbg !4961

3502:                                             ; preds = %originalBBpart2952, %originalBBpart2862
  %3503 = load i32, i32* @x.63
  %3504 = load i32, i32* @y.64
  %3505 = sub i32 %3503, 1
  %3506 = mul i32 %3503, %3505
  %3507 = urem i32 %3506, 2
  %3508 = icmp eq i32 %3507, 0
  %3509 = icmp slt i32 %3504, 10
  %3510 = or i1 %3508, %3509
  br i1 %3510, label %originalBB954, label %originalBB954alteredBB

originalBB954:                                    ; preds = %3502, %originalBB954alteredBB
  %3511 = load i32, i32* @x.63
  %3512 = load i32, i32* @y.64
  %3513 = sub i32 %3511, 1
  %3514 = mul i32 %3511, %3513
  %3515 = urem i32 %3514, 2
  %3516 = icmp eq i32 %3515, 0
  %3517 = icmp slt i32 %3512, 10
  %3518 = or i1 %3516, %3517
  br i1 %3518, label %originalBBpart2956, label %originalBB954alteredBB

originalBBpart2956:                               ; preds = %originalBB954
  br label %5465, !dbg !4962

3519:                                             ; preds = %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266, %originalBBpart2266
  %3520 = load i32, i32* @x.63
  %3521 = load i32, i32* @y.64
  %3522 = sub i32 %3520, 1
  %3523 = mul i32 %3520, %3522
  %3524 = urem i32 %3523, 2
  %3525 = icmp eq i32 %3524, 0
  %3526 = icmp slt i32 %3521, 10
  %3527 = or i1 %3525, %3526
  br i1 %3527, label %originalBB958, label %originalBB958alteredBB

originalBB958:                                    ; preds = %3519, %originalBB958alteredBB
  store i8 1, i8* %43, align 1, !dbg !4963
  %3528 = load i32, i32* @x.63
  %3529 = load i32, i32* @y.64
  %3530 = sub i32 %3528, 1
  %3531 = mul i32 %3528, %3530
  %3532 = urem i32 %3531, 2
  %3533 = icmp eq i32 %3532, 0
  %3534 = icmp slt i32 %3529, 10
  %3535 = or i1 %3533, %3534
  br i1 %3535, label %originalBBpart2960, label %originalBB958alteredBB

originalBBpart2960:                               ; preds = %originalBB958
  br label %5465, !dbg !4964

3536:                                             ; preds = %originalBBpart2266
  call void @llvm.dbg.declare(metadata i64* %44, metadata !4965, metadata !DIExpression()), !dbg !4967
  call void @llvm.dbg.declare(metadata i8* %45, metadata !4968, metadata !DIExpression()), !dbg !4969
  %3537 = load i32, i32* @x.63
  %3538 = load i32, i32* @y.64
  %3539 = sub i32 %3537, 1
  %3540 = mul i32 %3537, %3539
  %3541 = urem i32 %3540, 2
  %3542 = icmp eq i32 %3541, 0
  %3543 = icmp slt i32 %3538, 10
  %3544 = or i1 %3542, %3543
  br i1 %3544, label %originalBB962, label %originalBB962alteredBB

originalBB962:                                    ; preds = %3536, %originalBB962alteredBB
  %3545 = load i8, i8* %34, align 1, !dbg !4970
  %3546 = trunc i8 %3545 to i1, !dbg !4970
  %3547 = load i32, i32* @x.63
  %3548 = load i32, i32* @y.64
  %3549 = sub i32 %3547, 1
  %3550 = mul i32 %3547, %3549
  %3551 = urem i32 %3550, 2
  %3552 = icmp eq i32 %3551, 0
  %3553 = icmp slt i32 %3548, 10
  %3554 = or i1 %3552, %3553
  br i1 %3554, label %originalBBpart2964, label %originalBB962alteredBB

originalBBpart2964:                               ; preds = %originalBB962
  br i1 %3546, label %3555, label %3583, !dbg !4972

3555:                                             ; preds = %originalBBpart2964
  %3556 = load i32, i32* @x.63
  %3557 = load i32, i32* @y.64
  %3558 = sub i32 %3556, 1
  %3559 = mul i32 %3556, %3558
  %3560 = urem i32 %3559, 2
  %3561 = icmp eq i32 %3560, 0
  %3562 = icmp slt i32 %3557, 10
  %3563 = or i1 %3561, %3562
  br i1 %3563, label %originalBB966, label %originalBB966alteredBB

originalBB966:                                    ; preds = %3555, %originalBB966alteredBB
  store i64 1, i64* %44, align 8, !dbg !4973
  %3564 = call i16** @__ctype_b_loc() #15, !dbg !4975
  %3565 = load i16*, i16** %3564, align 8, !dbg !4975
  %3566 = load i8, i8* %39, align 1, !dbg !4975
  %3567 = zext i8 %3566 to i32, !dbg !4975
  %3568 = sext i32 %3567 to i64, !dbg !4975
  %3569 = getelementptr inbounds i16, i16* %3565, i64 %3568, !dbg !4975
  %3570 = load i16, i16* %3569, align 2, !dbg !4975
  %3571 = zext i16 %3570 to i32, !dbg !4975
  %3572 = and i32 %3571, 16384, !dbg !4975
  %3573 = icmp ne i32 %3572, 0, !dbg !4976
  %3574 = zext i1 %3573 to i8, !dbg !4977
  store i8 %3574, i8* %45, align 1, !dbg !4977
  %3575 = load i32, i32* @x.63
  %3576 = load i32, i32* @y.64
  %3577 = sub i32 %3575, 1
  %3578 = mul i32 %3575, %3577
  %3579 = urem i32 %3578, 2
  %3580 = icmp eq i32 %3579, 0
  %3581 = icmp slt i32 %3576, 10
  %3582 = or i1 %3580, %3581
  br i1 %3582, label %originalBBpart2983, label %originalBB966alteredBB

originalBBpart2983:                               ; preds = %originalBB966
  br label %4192, !dbg !4978

3583:                                             ; preds = %originalBBpart2964
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !4979, metadata !DIExpression()), !dbg !4993
  %3584 = load i32, i32* @x.63
  %3585 = load i32, i32* @y.64
  %3586 = sub i32 %3584, 1
  %3587 = mul i32 %3584, %3586
  %3588 = urem i32 %3587, 2
  %3589 = icmp eq i32 %3588, 0
  %3590 = icmp slt i32 %3585, 10
  %3591 = or i1 %3589, %3590
  br i1 %3591, label %originalBB985, label %originalBB985alteredBB

originalBB985:                                    ; preds = %3583, %originalBB985alteredBB
  %3592 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !4994
  call void @llvm.memset.p0i8.i64(i8* align 4 %3592, i8 0, i64 8, i1 false), !dbg !4994
  store i64 0, i64* %44, align 8, !dbg !4995
  store i8 1, i8* %45, align 1, !dbg !4996
  %3593 = load i64, i64* %22, align 8, !dbg !4997
  %3594 = icmp eq i64 %3593, -1, !dbg !4999
  %3595 = load i32, i32* @x.63
  %3596 = load i32, i32* @y.64
  %3597 = sub i32 %3595, 1
  %3598 = mul i32 %3595, %3597
  %3599 = urem i32 %3598, 2
  %3600 = icmp eq i32 %3599, 0
  %3601 = icmp slt i32 %3596, 10
  %3602 = or i1 %3600, %3601
  br i1 %3602, label %originalBBpart2987, label %originalBB985alteredBB

originalBBpart2987:                               ; preds = %originalBB985
  br i1 %3594, label %3603, label %3622, !dbg !5000

3603:                                             ; preds = %originalBBpart2987
  %3604 = load i32, i32* @x.63
  %3605 = load i32, i32* @y.64
  %3606 = sub i32 %3604, 1
  %3607 = mul i32 %3604, %3606
  %3608 = urem i32 %3607, 2
  %3609 = icmp eq i32 %3608, 0
  %3610 = icmp slt i32 %3605, 10
  %3611 = or i1 %3609, %3610
  br i1 %3611, label %originalBB989, label %originalBB989alteredBB

originalBB989:                                    ; preds = %3603, %originalBB989alteredBB
  %3612 = load i8*, i8** %21, align 8, !dbg !5001
  %3613 = call i64 @strlen(i8* %3612) #13, !dbg !5002
  store i64 %3613, i64* %22, align 8, !dbg !5003
  %3614 = load i32, i32* @x.63
  %3615 = load i32, i32* @y.64
  %3616 = sub i32 %3614, 1
  %3617 = mul i32 %3614, %3616
  %3618 = urem i32 %3617, 2
  %3619 = icmp eq i32 %3618, 0
  %3620 = icmp slt i32 %3615, 10
  %3621 = or i1 %3619, %3620
  br i1 %3621, label %originalBBpart2991, label %originalBB989alteredBB

originalBBpart2991:                               ; preds = %originalBB989
  br label %3622, !dbg !5004

3622:                                             ; preds = %originalBBpart2991, %originalBBpart2987
  %3623 = load i32, i32* @x.63
  %3624 = load i32, i32* @y.64
  %3625 = sub i32 %3623, 1
  %3626 = mul i32 %3623, %3625
  %3627 = urem i32 %3626, 2
  %3628 = icmp eq i32 %3627, 0
  %3629 = icmp slt i32 %3624, 10
  %3630 = or i1 %3628, %3629
  br i1 %3630, label %originalBB993, label %originalBB993alteredBB

originalBB993:                                    ; preds = %3622, %originalBB993alteredBB
  %3631 = load i32, i32* @x.63
  %3632 = load i32, i32* @y.64
  %3633 = sub i32 %3631, 1
  %3634 = mul i32 %3631, %3633
  %3635 = urem i32 %3634, 2
  %3636 = icmp eq i32 %3635, 0
  %3637 = icmp slt i32 %3632, 10
  %3638 = or i1 %3636, %3637
  br i1 %3638, label %originalBBpart2995, label %originalBB993alteredBB

originalBBpart2995:                               ; preds = %originalBB993
  br label %3639, !dbg !5005

3639:                                             ; preds = %originalBBpart21196, %originalBBpart2995
  call void @llvm.dbg.declare(metadata i32* %47, metadata !5006, metadata !DIExpression()), !dbg !5009
  call void @llvm.dbg.declare(metadata i64* %48, metadata !5010, metadata !DIExpression()), !dbg !5011
  %3640 = load i32, i32* @x.63
  %3641 = load i32, i32* @y.64
  %3642 = sub i32 %3640, 1
  %3643 = mul i32 %3640, %3642
  %3644 = urem i32 %3643, 2
  %3645 = icmp eq i32 %3644, 0
  %3646 = icmp slt i32 %3641, 10
  %3647 = or i1 %3645, %3646
  br i1 %3647, label %originalBB997, label %originalBB997alteredBB

originalBB997:                                    ; preds = %3639, %originalBB997alteredBB
  %3648 = load i8*, i8** %21, align 8, !dbg !5012
  %3649 = load i64, i64* %28, align 8, !dbg !5013
  %3650 = load i64, i64* %44, align 8, !dbg !5014
  %3651 = add i64 %3649, %3650, !dbg !5015
  %3652 = getelementptr inbounds i8, i8* %3648, i64 %3651, !dbg !5012
  %3653 = load i64, i64* %22, align 8, !dbg !5016
  %3654 = load i64, i64* %28, align 8, !dbg !5017
  %3655 = load i64, i64* %44, align 8, !dbg !5018
  %3656 = add i64 %3654, %3655, !dbg !5019
  %3657 = sub i64 %3653, %3656, !dbg !5020
  %3658 = call i64 @rpl_mbrtowc(i32* %47, i8* %3652, i64 %3657, %struct.__mbstate_t* %46), !dbg !5021
  store i64 %3658, i64* %48, align 8, !dbg !5011
  %3659 = load i64, i64* %48, align 8, !dbg !5022
  %3660 = icmp eq i64 %3659, 0, !dbg !5024
  %3661 = load i32, i32* @x.63
  %3662 = load i32, i32* @y.64
  %3663 = sub i32 %3661, 1
  %3664 = mul i32 %3661, %3663
  %3665 = urem i32 %3664, 2
  %3666 = icmp eq i32 %3665, 0
  %3667 = icmp slt i32 %3662, 10
  %3668 = or i1 %3666, %3667
  br i1 %3668, label %originalBBpart21016, label %originalBB997alteredBB

originalBBpart21016:                              ; preds = %originalBB997
  br i1 %3660, label %3669, label %3686, !dbg !5025

3669:                                             ; preds = %originalBBpart21016
  %3670 = load i32, i32* @x.63
  %3671 = load i32, i32* @y.64
  %3672 = sub i32 %3670, 1
  %3673 = mul i32 %3670, %3672
  %3674 = urem i32 %3673, 2
  %3675 = icmp eq i32 %3674, 0
  %3676 = icmp slt i32 %3671, 10
  %3677 = or i1 %3675, %3676
  br i1 %3677, label %originalBB1018, label %originalBB1018alteredBB

originalBB1018:                                   ; preds = %3669, %originalBB1018alteredBB
  %3678 = load i32, i32* @x.63
  %3679 = load i32, i32* @y.64
  %3680 = sub i32 %3678, 1
  %3681 = mul i32 %3678, %3680
  %3682 = urem i32 %3681, 2
  %3683 = icmp eq i32 %3682, 0
  %3684 = icmp slt i32 %3679, 10
  %3685 = or i1 %3683, %3684
  br i1 %3685, label %originalBBpart21020, label %originalBB1018alteredBB

originalBBpart21020:                              ; preds = %originalBB1018
  br label %4175, !dbg !5026

3686:                                             ; preds = %originalBBpart21016
  %3687 = load i32, i32* @x.63
  %3688 = load i32, i32* @y.64
  %3689 = sub i32 %3687, 1
  %3690 = mul i32 %3687, %3689
  %3691 = urem i32 %3690, 2
  %3692 = icmp eq i32 %3691, 0
  %3693 = icmp slt i32 %3688, 10
  %3694 = or i1 %3692, %3693
  br i1 %3694, label %originalBB1022, label %originalBB1022alteredBB

originalBB1022:                                   ; preds = %3686, %originalBB1022alteredBB
  %3695 = load i64, i64* %48, align 8, !dbg !5027
  %3696 = icmp eq i64 %3695, -1, !dbg !5029
  %3697 = load i32, i32* @x.63
  %3698 = load i32, i32* @y.64
  %3699 = sub i32 %3697, 1
  %3700 = mul i32 %3697, %3699
  %3701 = urem i32 %3700, 2
  %3702 = icmp eq i32 %3701, 0
  %3703 = icmp slt i32 %3698, 10
  %3704 = or i1 %3702, %3703
  br i1 %3704, label %originalBBpart21024, label %originalBB1022alteredBB

originalBBpart21024:                              ; preds = %originalBB1022
  br i1 %3696, label %3705, label %3722, !dbg !5030

3705:                                             ; preds = %originalBBpart21024
  %3706 = load i32, i32* @x.63
  %3707 = load i32, i32* @y.64
  %3708 = sub i32 %3706, 1
  %3709 = mul i32 %3706, %3708
  %3710 = urem i32 %3709, 2
  %3711 = icmp eq i32 %3710, 0
  %3712 = icmp slt i32 %3707, 10
  %3713 = or i1 %3711, %3712
  br i1 %3713, label %originalBB1026, label %originalBB1026alteredBB

originalBB1026:                                   ; preds = %3705, %originalBB1026alteredBB
  store i8 0, i8* %45, align 1, !dbg !5031
  %3714 = load i32, i32* @x.63
  %3715 = load i32, i32* @y.64
  %3716 = sub i32 %3714, 1
  %3717 = mul i32 %3714, %3716
  %3718 = urem i32 %3717, 2
  %3719 = icmp eq i32 %3718, 0
  %3720 = icmp slt i32 %3715, 10
  %3721 = or i1 %3719, %3720
  br i1 %3721, label %originalBBpart21028, label %originalBB1026alteredBB

originalBBpart21028:                              ; preds = %originalBB1026
  br label %4175, !dbg !5033

3722:                                             ; preds = %originalBBpart21024
  %3723 = load i32, i32* @x.63
  %3724 = load i32, i32* @y.64
  %3725 = sub i32 %3723, 1
  %3726 = mul i32 %3723, %3725
  %3727 = urem i32 %3726, 2
  %3728 = icmp eq i32 %3727, 0
  %3729 = icmp slt i32 %3724, 10
  %3730 = or i1 %3728, %3729
  br i1 %3730, label %originalBB1030, label %originalBB1030alteredBB

originalBB1030:                                   ; preds = %3722, %originalBB1030alteredBB
  %3731 = load i64, i64* %48, align 8, !dbg !5034
  %3732 = icmp eq i64 %3731, -2, !dbg !5036
  %3733 = load i32, i32* @x.63
  %3734 = load i32, i32* @y.64
  %3735 = sub i32 %3733, 1
  %3736 = mul i32 %3733, %3735
  %3737 = urem i32 %3736, 2
  %3738 = icmp eq i32 %3737, 0
  %3739 = icmp slt i32 %3734, 10
  %3740 = or i1 %3738, %3739
  br i1 %3740, label %originalBBpart21032, label %originalBB1030alteredBB

originalBBpart21032:                              ; preds = %originalBB1030
  br i1 %3732, label %3741, label %3859, !dbg !5037

3741:                                             ; preds = %originalBBpart21032
  %3742 = load i32, i32* @x.63
  %3743 = load i32, i32* @y.64
  %3744 = sub i32 %3742, 1
  %3745 = mul i32 %3742, %3744
  %3746 = urem i32 %3745, 2
  %3747 = icmp eq i32 %3746, 0
  %3748 = icmp slt i32 %3743, 10
  %3749 = or i1 %3747, %3748
  br i1 %3749, label %originalBB1034, label %originalBB1034alteredBB

originalBB1034:                                   ; preds = %3741, %originalBB1034alteredBB
  store i8 0, i8* %45, align 1, !dbg !5038
  %3750 = load i32, i32* @x.63
  %3751 = load i32, i32* @y.64
  %3752 = sub i32 %3750, 1
  %3753 = mul i32 %3750, %3752
  %3754 = urem i32 %3753, 2
  %3755 = icmp eq i32 %3754, 0
  %3756 = icmp slt i32 %3751, 10
  %3757 = or i1 %3755, %3756
  br i1 %3757, label %originalBBpart21036, label %originalBB1034alteredBB

originalBBpart21036:                              ; preds = %originalBB1034
  br label %3758, !dbg !5040

3758:                                             ; preds = %originalBBpart21082, %originalBBpart21036
  %3759 = load i32, i32* @x.63
  %3760 = load i32, i32* @y.64
  %3761 = sub i32 %3759, 1
  %3762 = mul i32 %3759, %3761
  %3763 = urem i32 %3762, 2
  %3764 = icmp eq i32 %3763, 0
  %3765 = icmp slt i32 %3760, 10
  %3766 = or i1 %3764, %3765
  br i1 %3766, label %originalBB1038, label %originalBB1038alteredBB

originalBB1038:                                   ; preds = %3758, %originalBB1038alteredBB
  %3767 = load i64, i64* %28, align 8, !dbg !5041
  %3768 = load i64, i64* %44, align 8, !dbg !5042
  %3769 = add i64 %3767, %3768, !dbg !5043
  %3770 = load i64, i64* %22, align 8, !dbg !5044
  %3771 = icmp ult i64 %3769, %3770, !dbg !5045
  %3772 = load i32, i32* @x.63
  %3773 = load i32, i32* @y.64
  %3774 = sub i32 %3772, 1
  %3775 = mul i32 %3772, %3774
  %3776 = urem i32 %3775, 2
  %3777 = icmp eq i32 %3776, 0
  %3778 = icmp slt i32 %3773, 10
  %3779 = or i1 %3777, %3778
  br i1 %3779, label %originalBBpart21052, label %originalBB1038alteredBB

originalBBpart21052:                              ; preds = %originalBB1038
  br i1 %3771, label %3780, label %3805, !dbg !5046

3780:                                             ; preds = %originalBBpart21052
  %3781 = load i32, i32* @x.63
  %3782 = load i32, i32* @y.64
  %3783 = sub i32 %3781, 1
  %3784 = mul i32 %3781, %3783
  %3785 = urem i32 %3784, 2
  %3786 = icmp eq i32 %3785, 0
  %3787 = icmp slt i32 %3782, 10
  %3788 = or i1 %3786, %3787
  br i1 %3788, label %originalBB1054, label %originalBB1054alteredBB

originalBB1054:                                   ; preds = %3780, %originalBB1054alteredBB
  %3789 = load i8*, i8** %21, align 8, !dbg !5047
  %3790 = load i64, i64* %28, align 8, !dbg !5048
  %3791 = load i64, i64* %44, align 8, !dbg !5049
  %3792 = add i64 %3790, %3791, !dbg !5050
  %3793 = getelementptr inbounds i8, i8* %3789, i64 %3792, !dbg !5047
  %3794 = load i8, i8* %3793, align 1, !dbg !5047
  %3795 = sext i8 %3794 to i32, !dbg !5047
  %3796 = icmp ne i32 %3795, 0, !dbg !5046
  %3797 = load i32, i32* @x.63
  %3798 = load i32, i32* @y.64
  %3799 = sub i32 %3797, 1
  %3800 = mul i32 %3797, %3799
  %3801 = urem i32 %3800, 2
  %3802 = icmp eq i32 %3801, 0
  %3803 = icmp slt i32 %3798, 10
  %3804 = or i1 %3802, %3803
  br i1 %3804, label %originalBBpart21063, label %originalBB1054alteredBB

originalBBpart21063:                              ; preds = %originalBB1054
  br label %3805

3805:                                             ; preds = %originalBBpart21063, %originalBBpart21052
  %3806 = phi i1 [ false, %originalBBpart21052 ], [ %3796, %originalBBpart21063 ], !dbg !5051
  %3807 = load i32, i32* @x.63
  %3808 = load i32, i32* @y.64
  %3809 = sub i32 %3807, 1
  %3810 = mul i32 %3807, %3809
  %3811 = urem i32 %3810, 2
  %3812 = icmp eq i32 %3811, 0
  %3813 = icmp slt i32 %3808, 10
  %3814 = or i1 %3812, %3813
  br i1 %3814, label %originalBB1065, label %originalBB1065alteredBB

originalBB1065:                                   ; preds = %3805, %originalBB1065alteredBB
  %3815 = load i32, i32* @x.63
  %3816 = load i32, i32* @y.64
  %3817 = sub i32 %3815, 1
  %3818 = mul i32 %3815, %3817
  %3819 = urem i32 %3818, 2
  %3820 = icmp eq i32 %3819, 0
  %3821 = icmp slt i32 %3816, 10
  %3822 = or i1 %3820, %3821
  br i1 %3822, label %originalBBpart21067, label %originalBB1065alteredBB

originalBBpart21067:                              ; preds = %originalBB1065
  br i1 %3806, label %3823, label %3842, !dbg !5040

3823:                                             ; preds = %originalBBpart21067
  %3824 = load i32, i32* @x.63
  %3825 = load i32, i32* @y.64
  %3826 = sub i32 %3824, 1
  %3827 = mul i32 %3824, %3826
  %3828 = urem i32 %3827, 2
  %3829 = icmp eq i32 %3828, 0
  %3830 = icmp slt i32 %3825, 10
  %3831 = or i1 %3829, %3830
  br i1 %3831, label %originalBB1069, label %originalBB1069alteredBB

originalBB1069:                                   ; preds = %3823, %originalBB1069alteredBB
  %3832 = load i64, i64* %44, align 8, !dbg !5052
  %3833 = add i64 %3832, 1, !dbg !5052
  store i64 %3833, i64* %44, align 8, !dbg !5052
  %3834 = load i32, i32* @x.63
  %3835 = load i32, i32* @y.64
  %3836 = sub i32 %3834, 1
  %3837 = mul i32 %3834, %3836
  %3838 = urem i32 %3837, 2
  %3839 = icmp eq i32 %3838, 0
  %3840 = icmp slt i32 %3835, 10
  %3841 = or i1 %3839, %3840
  br i1 %3841, label %originalBBpart21082, label %originalBB1069alteredBB

originalBBpart21082:                              ; preds = %originalBB1069
  br label %3758, !dbg !5040, !llvm.loop !5053

3842:                                             ; preds = %originalBBpart21067
  %3843 = load i32, i32* @x.63
  %3844 = load i32, i32* @y.64
  %3845 = sub i32 %3843, 1
  %3846 = mul i32 %3843, %3845
  %3847 = urem i32 %3846, 2
  %3848 = icmp eq i32 %3847, 0
  %3849 = icmp slt i32 %3844, 10
  %3850 = or i1 %3848, %3849
  br i1 %3850, label %originalBB1084, label %originalBB1084alteredBB

originalBB1084:                                   ; preds = %3842, %originalBB1084alteredBB
  %3851 = load i32, i32* @x.63
  %3852 = load i32, i32* @y.64
  %3853 = sub i32 %3851, 1
  %3854 = mul i32 %3851, %3853
  %3855 = urem i32 %3854, 2
  %3856 = icmp eq i32 %3855, 0
  %3857 = icmp slt i32 %3852, 10
  %3858 = or i1 %3856, %3857
  br i1 %3858, label %originalBBpart21086, label %originalBB1084alteredBB

originalBBpart21086:                              ; preds = %originalBB1084
  br label %4175, !dbg !5054

3859:                                             ; preds = %originalBBpart21032
  %3860 = load i32, i32* @x.63
  %3861 = load i32, i32* @y.64
  %3862 = sub i32 %3860, 1
  %3863 = mul i32 %3860, %3862
  %3864 = urem i32 %3863, 2
  %3865 = icmp eq i32 %3864, 0
  %3866 = icmp slt i32 %3861, 10
  %3867 = or i1 %3865, %3866
  br i1 %3867, label %originalBB1088, label %originalBB1088alteredBB

originalBB1088:                                   ; preds = %3859, %originalBB1088alteredBB
  %3868 = load i8, i8* %35, align 1, !dbg !5055
  %3869 = trunc i8 %3868 to i1, !dbg !5055
  %3870 = load i32, i32* @x.63
  %3871 = load i32, i32* @y.64
  %3872 = sub i32 %3870, 1
  %3873 = mul i32 %3870, %3872
  %3874 = urem i32 %3873, 2
  %3875 = icmp eq i32 %3874, 0
  %3876 = icmp slt i32 %3871, 10
  %3877 = or i1 %3875, %3876
  br i1 %3877, label %originalBBpart21090, label %originalBB1088alteredBB

originalBBpart21090:                              ; preds = %originalBB1088
  br i1 %3869, label %3878, label %4047, !dbg !5058

3878:                                             ; preds = %originalBBpart21090
  %3879 = load i32, i32* @x.63
  %3880 = load i32, i32* @y.64
  %3881 = sub i32 %3879, 1
  %3882 = mul i32 %3879, %3881
  %3883 = urem i32 %3882, 2
  %3884 = icmp eq i32 %3883, 0
  %3885 = icmp slt i32 %3880, 10
  %3886 = or i1 %3884, %3885
  br i1 %3886, label %originalBB1092, label %originalBB1092alteredBB

originalBB1092:                                   ; preds = %3878, %originalBB1092alteredBB
  %3887 = load i32, i32* %23, align 4, !dbg !5059
  %3888 = icmp eq i32 %3887, 2, !dbg !5060
  %3889 = load i32, i32* @x.63
  %3890 = load i32, i32* @y.64
  %3891 = sub i32 %3889, 1
  %3892 = mul i32 %3889, %3891
  %3893 = urem i32 %3892, 2
  %3894 = icmp eq i32 %3893, 0
  %3895 = icmp slt i32 %3890, 10
  %3896 = or i1 %3894, %3895
  br i1 %3896, label %originalBBpart21094, label %originalBB1092alteredBB

originalBBpart21094:                              ; preds = %originalBB1092
  br i1 %3888, label %3897, label %4047, !dbg !5061

3897:                                             ; preds = %originalBBpart21094
  call void @llvm.dbg.declare(metadata i64* %49, metadata !5062, metadata !DIExpression()), !dbg !5064
  %3898 = load i32, i32* @x.63
  %3899 = load i32, i32* @y.64
  %3900 = sub i32 %3898, 1
  %3901 = mul i32 %3898, %3900
  %3902 = urem i32 %3901, 2
  %3903 = icmp eq i32 %3902, 0
  %3904 = icmp slt i32 %3899, 10
  %3905 = or i1 %3903, %3904
  br i1 %3905, label %originalBB1096, label %originalBB1096alteredBB

originalBB1096:                                   ; preds = %3897, %originalBB1096alteredBB
  store i64 1, i64* %49, align 8, !dbg !5065
  %3906 = load i32, i32* @x.63
  %3907 = load i32, i32* @y.64
  %3908 = sub i32 %3906, 1
  %3909 = mul i32 %3906, %3908
  %3910 = urem i32 %3909, 2
  %3911 = icmp eq i32 %3910, 0
  %3912 = icmp slt i32 %3907, 10
  %3913 = or i1 %3911, %3912
  br i1 %3913, label %originalBBpart21098, label %originalBB1096alteredBB

originalBBpart21098:                              ; preds = %originalBB1096
  br label %3914, !dbg !5067

3914:                                             ; preds = %originalBBpart21147, %originalBBpart21098
  %3915 = load i32, i32* @x.63
  %3916 = load i32, i32* @y.64
  %3917 = sub i32 %3915, 1
  %3918 = mul i32 %3915, %3917
  %3919 = urem i32 %3918, 2
  %3920 = icmp eq i32 %3919, 0
  %3921 = icmp slt i32 %3916, 10
  %3922 = or i1 %3920, %3921
  br i1 %3922, label %originalBB1100, label %originalBB1100alteredBB

originalBB1100:                                   ; preds = %3914, %originalBB1100alteredBB
  %3923 = load i64, i64* %49, align 8, !dbg !5068
  %3924 = load i64, i64* %48, align 8, !dbg !5070
  %3925 = icmp ult i64 %3923, %3924, !dbg !5071
  %3926 = load i32, i32* @x.63
  %3927 = load i32, i32* @y.64
  %3928 = sub i32 %3926, 1
  %3929 = mul i32 %3926, %3928
  %3930 = urem i32 %3929, 2
  %3931 = icmp eq i32 %3930, 0
  %3932 = icmp slt i32 %3927, 10
  %3933 = or i1 %3931, %3932
  br i1 %3933, label %originalBBpart21102, label %originalBB1100alteredBB

originalBBpart21102:                              ; preds = %originalBB1100
  br i1 %3925, label %3934, label %4030, !dbg !5072

3934:                                             ; preds = %originalBBpart21102
  %3935 = load i32, i32* @x.63
  %3936 = load i32, i32* @y.64
  %3937 = sub i32 %3935, 1
  %3938 = mul i32 %3935, %3937
  %3939 = urem i32 %3938, 2
  %3940 = icmp eq i32 %3939, 0
  %3941 = icmp slt i32 %3936, 10
  %3942 = or i1 %3940, %3941
  br i1 %3942, label %originalBB1104, label %originalBB1104alteredBB

originalBB1104:                                   ; preds = %3934, %originalBB1104alteredBB
  %3943 = load i8*, i8** %21, align 8, !dbg !5073
  %3944 = load i64, i64* %28, align 8, !dbg !5074
  %3945 = load i64, i64* %44, align 8, !dbg !5075
  %3946 = add i64 %3944, %3945, !dbg !5076
  %3947 = load i64, i64* %49, align 8, !dbg !5077
  %3948 = add i64 %3946, %3947, !dbg !5078
  %3949 = getelementptr inbounds i8, i8* %3943, i64 %3948, !dbg !5073
  %3950 = load i8, i8* %3949, align 1, !dbg !5073
  %3951 = sext i8 %3950 to i32, !dbg !5073
  %3952 = load i32, i32* @x.63
  %3953 = load i32, i32* @y.64
  %3954 = sub i32 %3952, 1
  %3955 = mul i32 %3952, %3954
  %3956 = urem i32 %3955, 2
  %3957 = icmp eq i32 %3956, 0
  %3958 = icmp slt i32 %3953, 10
  %3959 = or i1 %3957, %3958
  br i1 %3959, label %originalBBpart21120, label %originalBB1104alteredBB

originalBBpart21120:                              ; preds = %originalBB1104
  switch i32 %3951, label %3977 [
    i32 91, label %3960
    i32 92, label %3960
    i32 94, label %3960
    i32 96, label %3960
    i32 124, label %3960
  ], !dbg !5079

3960:                                             ; preds = %originalBBpart21120, %originalBBpart21120, %originalBBpart21120, %originalBBpart21120, %originalBBpart21120
  %3961 = load i32, i32* @x.63
  %3962 = load i32, i32* @y.64
  %3963 = sub i32 %3961, 1
  %3964 = mul i32 %3961, %3963
  %3965 = urem i32 %3964, 2
  %3966 = icmp eq i32 %3965, 0
  %3967 = icmp slt i32 %3962, 10
  %3968 = or i1 %3966, %3967
  br i1 %3968, label %originalBB1122, label %originalBB1122alteredBB

originalBB1122:                                   ; preds = %3960, %originalBB1122alteredBB
  %3969 = load i32, i32* @x.63
  %3970 = load i32, i32* @y.64
  %3971 = sub i32 %3969, 1
  %3972 = mul i32 %3969, %3971
  %3973 = urem i32 %3972, 2
  %3974 = icmp eq i32 %3973, 0
  %3975 = icmp slt i32 %3970, 10
  %3976 = or i1 %3974, %3975
  br i1 %3976, label %originalBBpart21124, label %originalBB1122alteredBB

originalBBpart21124:                              ; preds = %originalBB1122
  br label %6990, !dbg !5080

3977:                                             ; preds = %originalBBpart21120
  %3978 = load i32, i32* @x.63
  %3979 = load i32, i32* @y.64
  %3980 = sub i32 %3978, 1
  %3981 = mul i32 %3978, %3980
  %3982 = urem i32 %3981, 2
  %3983 = icmp eq i32 %3982, 0
  %3984 = icmp slt i32 %3979, 10
  %3985 = or i1 %3983, %3984
  br i1 %3985, label %originalBB1126, label %originalBB1126alteredBB

originalBB1126:                                   ; preds = %3977, %originalBB1126alteredBB
  %3986 = load i32, i32* @x.63
  %3987 = load i32, i32* @y.64
  %3988 = sub i32 %3986, 1
  %3989 = mul i32 %3986, %3988
  %3990 = urem i32 %3989, 2
  %3991 = icmp eq i32 %3990, 0
  %3992 = icmp slt i32 %3987, 10
  %3993 = or i1 %3991, %3992
  br i1 %3993, label %originalBBpart21128, label %originalBB1126alteredBB

originalBBpart21128:                              ; preds = %originalBB1126
  br label %3994, !dbg !5082

3994:                                             ; preds = %originalBBpart21128
  %3995 = load i32, i32* @x.63
  %3996 = load i32, i32* @y.64
  %3997 = sub i32 %3995, 1
  %3998 = mul i32 %3995, %3997
  %3999 = urem i32 %3998, 2
  %4000 = icmp eq i32 %3999, 0
  %4001 = icmp slt i32 %3996, 10
  %4002 = or i1 %4000, %4001
  br i1 %4002, label %originalBB1130, label %originalBB1130alteredBB

originalBB1130:                                   ; preds = %3994, %originalBB1130alteredBB
  %4003 = load i32, i32* @x.63
  %4004 = load i32, i32* @y.64
  %4005 = sub i32 %4003, 1
  %4006 = mul i32 %4003, %4005
  %4007 = urem i32 %4006, 2
  %4008 = icmp eq i32 %4007, 0
  %4009 = icmp slt i32 %4004, 10
  %4010 = or i1 %4008, %4009
  br i1 %4010, label %originalBBpart21132, label %originalBB1130alteredBB

originalBBpart21132:                              ; preds = %originalBB1130
  br label %4011, !dbg !5083

4011:                                             ; preds = %originalBBpart21132
  %4012 = load i32, i32* @x.63
  %4013 = load i32, i32* @y.64
  %4014 = sub i32 %4012, 1
  %4015 = mul i32 %4012, %4014
  %4016 = urem i32 %4015, 2
  %4017 = icmp eq i32 %4016, 0
  %4018 = icmp slt i32 %4013, 10
  %4019 = or i1 %4017, %4018
  br i1 %4019, label %originalBB1134, label %originalBB1134alteredBB

originalBB1134:                                   ; preds = %4011, %originalBB1134alteredBB
  %4020 = load i64, i64* %49, align 8, !dbg !5084
  %4021 = add i64 %4020, 1, !dbg !5084
  store i64 %4021, i64* %49, align 8, !dbg !5084
  %4022 = load i32, i32* @x.63
  %4023 = load i32, i32* @y.64
  %4024 = sub i32 %4022, 1
  %4025 = mul i32 %4022, %4024
  %4026 = urem i32 %4025, 2
  %4027 = icmp eq i32 %4026, 0
  %4028 = icmp slt i32 %4023, 10
  %4029 = or i1 %4027, %4028
  br i1 %4029, label %originalBBpart21147, label %originalBB1134alteredBB

originalBBpart21147:                              ; preds = %originalBB1134
  br label %3914, !dbg !5085, !llvm.loop !5086

4030:                                             ; preds = %originalBBpart21102
  %4031 = load i32, i32* @x.63
  %4032 = load i32, i32* @y.64
  %4033 = sub i32 %4031, 1
  %4034 = mul i32 %4031, %4033
  %4035 = urem i32 %4034, 2
  %4036 = icmp eq i32 %4035, 0
  %4037 = icmp slt i32 %4032, 10
  %4038 = or i1 %4036, %4037
  br i1 %4038, label %originalBB1149, label %originalBB1149alteredBB

originalBB1149:                                   ; preds = %4030, %originalBB1149alteredBB
  %4039 = load i32, i32* @x.63
  %4040 = load i32, i32* @y.64
  %4041 = sub i32 %4039, 1
  %4042 = mul i32 %4039, %4041
  %4043 = urem i32 %4042, 2
  %4044 = icmp eq i32 %4043, 0
  %4045 = icmp slt i32 %4040, 10
  %4046 = or i1 %4044, %4045
  br i1 %4046, label %originalBBpart21151, label %originalBB1149alteredBB

originalBBpart21151:                              ; preds = %originalBB1149
  br label %4047, !dbg !5088

4047:                                             ; preds = %originalBBpart21151, %originalBBpart21094, %originalBBpart21090
  %4048 = load i32, i32* @x.63
  %4049 = load i32, i32* @y.64
  %4050 = sub i32 %4048, 1
  %4051 = mul i32 %4048, %4050
  %4052 = urem i32 %4051, 2
  %4053 = icmp eq i32 %4052, 0
  %4054 = icmp slt i32 %4049, 10
  %4055 = or i1 %4053, %4054
  br i1 %4055, label %originalBB1153, label %originalBB1153alteredBB

originalBB1153:                                   ; preds = %4047, %originalBB1153alteredBB
  %4056 = load i32, i32* %47, align 4, !dbg !5089
  %4057 = call i32 @iswprint(i32 %4056) #10, !dbg !5091
  %4058 = icmp ne i32 %4057, 0, !dbg !5091
  %4059 = load i32, i32* @x.63
  %4060 = load i32, i32* @y.64
  %4061 = sub i32 %4059, 1
  %4062 = mul i32 %4059, %4061
  %4063 = urem i32 %4062, 2
  %4064 = icmp eq i32 %4063, 0
  %4065 = icmp slt i32 %4060, 10
  %4066 = or i1 %4064, %4065
  br i1 %4066, label %originalBBpart21155, label %originalBB1153alteredBB

originalBBpart21155:                              ; preds = %originalBB1153
  br i1 %4058, label %4084, label %4067, !dbg !5092

4067:                                             ; preds = %originalBBpart21155
  %4068 = load i32, i32* @x.63
  %4069 = load i32, i32* @y.64
  %4070 = sub i32 %4068, 1
  %4071 = mul i32 %4068, %4070
  %4072 = urem i32 %4071, 2
  %4073 = icmp eq i32 %4072, 0
  %4074 = icmp slt i32 %4069, 10
  %4075 = or i1 %4073, %4074
  br i1 %4075, label %originalBB1157, label %originalBB1157alteredBB

originalBB1157:                                   ; preds = %4067, %originalBB1157alteredBB
  store i8 0, i8* %45, align 1, !dbg !5093
  %4076 = load i32, i32* @x.63
  %4077 = load i32, i32* @y.64
  %4078 = sub i32 %4076, 1
  %4079 = mul i32 %4076, %4078
  %4080 = urem i32 %4079, 2
  %4081 = icmp eq i32 %4080, 0
  %4082 = icmp slt i32 %4077, 10
  %4083 = or i1 %4081, %4082
  br i1 %4083, label %originalBBpart21159, label %originalBB1157alteredBB

originalBBpart21159:                              ; preds = %originalBB1157
  br label %4084, !dbg !5094

4084:                                             ; preds = %originalBBpart21159, %originalBBpart21155
  %4085 = load i32, i32* @x.63
  %4086 = load i32, i32* @y.64
  %4087 = sub i32 %4085, 1
  %4088 = mul i32 %4085, %4087
  %4089 = urem i32 %4088, 2
  %4090 = icmp eq i32 %4089, 0
  %4091 = icmp slt i32 %4086, 10
  %4092 = or i1 %4090, %4091
  br i1 %4092, label %originalBB1161, label %originalBB1161alteredBB

originalBB1161:                                   ; preds = %4084, %originalBB1161alteredBB
  %4093 = load i64, i64* %48, align 8, !dbg !5095
  %4094 = load i64, i64* %44, align 8, !dbg !5096
  %4095 = add i64 %4094, %4093, !dbg !5096
  store i64 %4095, i64* %44, align 8, !dbg !5096
  %4096 = load i32, i32* @x.63
  %4097 = load i32, i32* @y.64
  %4098 = sub i32 %4096, 1
  %4099 = mul i32 %4096, %4098
  %4100 = urem i32 %4099, 2
  %4101 = icmp eq i32 %4100, 0
  %4102 = icmp slt i32 %4097, 10
  %4103 = or i1 %4101, %4102
  br i1 %4103, label %originalBBpart21177, label %originalBB1161alteredBB

originalBBpart21177:                              ; preds = %originalBB1161
  br label %4104

4104:                                             ; preds = %originalBBpart21177
  %4105 = load i32, i32* @x.63
  %4106 = load i32, i32* @y.64
  %4107 = sub i32 %4105, 1
  %4108 = mul i32 %4105, %4107
  %4109 = urem i32 %4108, 2
  %4110 = icmp eq i32 %4109, 0
  %4111 = icmp slt i32 %4106, 10
  %4112 = or i1 %4110, %4111
  br i1 %4112, label %originalBB1179, label %originalBB1179alteredBB

originalBB1179:                                   ; preds = %4104, %originalBB1179alteredBB
  %4113 = load i32, i32* @x.63
  %4114 = load i32, i32* @y.64
  %4115 = sub i32 %4113, 1
  %4116 = mul i32 %4113, %4115
  %4117 = urem i32 %4116, 2
  %4118 = icmp eq i32 %4117, 0
  %4119 = icmp slt i32 %4114, 10
  %4120 = or i1 %4118, %4119
  br i1 %4120, label %originalBBpart21181, label %originalBB1179alteredBB

originalBBpart21181:                              ; preds = %originalBB1179
  br label %4121

4121:                                             ; preds = %originalBBpart21181
  %4122 = load i32, i32* @x.63
  %4123 = load i32, i32* @y.64
  %4124 = sub i32 %4122, 1
  %4125 = mul i32 %4122, %4124
  %4126 = urem i32 %4125, 2
  %4127 = icmp eq i32 %4126, 0
  %4128 = icmp slt i32 %4123, 10
  %4129 = or i1 %4127, %4128
  br i1 %4129, label %originalBB1183, label %originalBB1183alteredBB

originalBB1183:                                   ; preds = %4121, %originalBB1183alteredBB
  %4130 = load i32, i32* @x.63
  %4131 = load i32, i32* @y.64
  %4132 = sub i32 %4130, 1
  %4133 = mul i32 %4130, %4132
  %4134 = urem i32 %4133, 2
  %4135 = icmp eq i32 %4134, 0
  %4136 = icmp slt i32 %4131, 10
  %4137 = or i1 %4135, %4136
  br i1 %4137, label %originalBBpart21185, label %originalBB1183alteredBB

originalBBpart21185:                              ; preds = %originalBB1183
  br label %4138

4138:                                             ; preds = %originalBBpart21185
  %4139 = load i32, i32* @x.63
  %4140 = load i32, i32* @y.64
  %4141 = sub i32 %4139, 1
  %4142 = mul i32 %4139, %4141
  %4143 = urem i32 %4142, 2
  %4144 = icmp eq i32 %4143, 0
  %4145 = icmp slt i32 %4140, 10
  %4146 = or i1 %4144, %4145
  br i1 %4146, label %originalBB1187, label %originalBB1187alteredBB

originalBB1187:                                   ; preds = %4138, %originalBB1187alteredBB
  %4147 = load i32, i32* @x.63
  %4148 = load i32, i32* @y.64
  %4149 = sub i32 %4147, 1
  %4150 = mul i32 %4147, %4149
  %4151 = urem i32 %4150, 2
  %4152 = icmp eq i32 %4151, 0
  %4153 = icmp slt i32 %4148, 10
  %4154 = or i1 %4152, %4153
  br i1 %4154, label %originalBBpart21189, label %originalBB1187alteredBB

originalBBpart21189:                              ; preds = %originalBB1187
  br label %4155, !dbg !5097

4155:                                             ; preds = %originalBBpart21189
  %4156 = load i32, i32* @x.63
  %4157 = load i32, i32* @y.64
  %4158 = sub i32 %4156, 1
  %4159 = mul i32 %4156, %4158
  %4160 = urem i32 %4159, 2
  %4161 = icmp eq i32 %4160, 0
  %4162 = icmp slt i32 %4157, 10
  %4163 = or i1 %4161, %4162
  br i1 %4163, label %originalBB1191, label %originalBB1191alteredBB

originalBB1191:                                   ; preds = %4155, %originalBB1191alteredBB
  %4164 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !5098
  %4165 = icmp ne i32 %4164, 0, !dbg !5099
  %4166 = xor i1 %4165, true, !dbg !5099
  %4167 = load i32, i32* @x.63
  %4168 = load i32, i32* @y.64
  %4169 = sub i32 %4167, 1
  %4170 = mul i32 %4167, %4169
  %4171 = urem i32 %4170, 2
  %4172 = icmp eq i32 %4171, 0
  %4173 = icmp slt i32 %4168, 10
  %4174 = or i1 %4172, %4173
  br i1 %4174, label %originalBBpart21196, label %originalBB1191alteredBB

originalBBpart21196:                              ; preds = %originalBB1191
  br i1 %4166, label %3639, label %4175, !dbg !5097, !llvm.loop !5100

4175:                                             ; preds = %originalBBpart21196, %originalBBpart21086, %originalBBpart21028, %originalBBpart21020
  %4176 = load i32, i32* @x.63
  %4177 = load i32, i32* @y.64
  %4178 = sub i32 %4176, 1
  %4179 = mul i32 %4176, %4178
  %4180 = urem i32 %4179, 2
  %4181 = icmp eq i32 %4180, 0
  %4182 = icmp slt i32 %4177, 10
  %4183 = or i1 %4181, %4182
  br i1 %4183, label %originalBB1198, label %originalBB1198alteredBB

originalBB1198:                                   ; preds = %4175, %originalBB1198alteredBB
  %4184 = load i32, i32* @x.63
  %4185 = load i32, i32* @y.64
  %4186 = sub i32 %4184, 1
  %4187 = mul i32 %4184, %4186
  %4188 = urem i32 %4187, 2
  %4189 = icmp eq i32 %4188, 0
  %4190 = icmp slt i32 %4185, 10
  %4191 = or i1 %4189, %4190
  br i1 %4191, label %originalBBpart21200, label %originalBB1198alteredBB

originalBBpart21200:                              ; preds = %originalBB1198
  br label %4192

4192:                                             ; preds = %originalBBpart21200, %originalBBpart2983
  %4193 = load i32, i32* @x.63
  %4194 = load i32, i32* @y.64
  %4195 = sub i32 %4193, 1
  %4196 = mul i32 %4193, %4195
  %4197 = urem i32 %4196, 2
  %4198 = icmp eq i32 %4197, 0
  %4199 = icmp slt i32 %4194, 10
  %4200 = or i1 %4198, %4199
  br i1 %4200, label %originalBB1202, label %originalBB1202alteredBB

originalBB1202:                                   ; preds = %4192, %originalBB1202alteredBB
  %4201 = load i8, i8* %45, align 1, !dbg !5102
  %4202 = trunc i8 %4201 to i1, !dbg !5102
  %4203 = zext i1 %4202 to i8, !dbg !5103
  store i8 %4203, i8* %43, align 1, !dbg !5103
  %4204 = load i64, i64* %44, align 8, !dbg !5104
  %4205 = icmp ult i64 1, %4204, !dbg !5106
  %4206 = load i32, i32* @x.63
  %4207 = load i32, i32* @y.64
  %4208 = sub i32 %4206, 1
  %4209 = mul i32 %4206, %4208
  %4210 = urem i32 %4209, 2
  %4211 = icmp eq i32 %4210, 0
  %4212 = icmp slt i32 %4207, 10
  %4213 = or i1 %4211, %4212
  br i1 %4213, label %originalBBpart21204, label %originalBB1202alteredBB

originalBBpart21204:                              ; preds = %originalBB1202
  br i1 %4205, label %4252, label %4214, !dbg !5107

4214:                                             ; preds = %originalBBpart21204
  %4215 = load i32, i32* @x.63
  %4216 = load i32, i32* @y.64
  %4217 = sub i32 %4215, 1
  %4218 = mul i32 %4215, %4217
  %4219 = urem i32 %4218, 2
  %4220 = icmp eq i32 %4219, 0
  %4221 = icmp slt i32 %4216, 10
  %4222 = or i1 %4220, %4221
  br i1 %4222, label %originalBB1206, label %originalBB1206alteredBB

originalBB1206:                                   ; preds = %4214, %originalBB1206alteredBB
  %4223 = load i8, i8* %33, align 1, !dbg !5108
  %4224 = trunc i8 %4223 to i1, !dbg !5108
  %4225 = load i32, i32* @x.63
  %4226 = load i32, i32* @y.64
  %4227 = sub i32 %4225, 1
  %4228 = mul i32 %4225, %4227
  %4229 = urem i32 %4228, 2
  %4230 = icmp eq i32 %4229, 0
  %4231 = icmp slt i32 %4226, 10
  %4232 = or i1 %4230, %4231
  br i1 %4232, label %originalBBpart21208, label %originalBB1206alteredBB

originalBBpart21208:                              ; preds = %originalBB1206
  br i1 %4224, label %4233, label %5448, !dbg !5109

4233:                                             ; preds = %originalBBpart21208
  %4234 = load i32, i32* @x.63
  %4235 = load i32, i32* @y.64
  %4236 = sub i32 %4234, 1
  %4237 = mul i32 %4234, %4236
  %4238 = urem i32 %4237, 2
  %4239 = icmp eq i32 %4238, 0
  %4240 = icmp slt i32 %4235, 10
  %4241 = or i1 %4239, %4240
  br i1 %4241, label %originalBB1210, label %originalBB1210alteredBB

originalBB1210:                                   ; preds = %4233, %originalBB1210alteredBB
  %4242 = load i8, i8* %45, align 1, !dbg !5110
  %4243 = trunc i8 %4242 to i1, !dbg !5110
  %4244 = load i32, i32* @x.63
  %4245 = load i32, i32* @y.64
  %4246 = sub i32 %4244, 1
  %4247 = mul i32 %4244, %4246
  %4248 = urem i32 %4247, 2
  %4249 = icmp eq i32 %4248, 0
  %4250 = icmp slt i32 %4245, 10
  %4251 = or i1 %4249, %4250
  br i1 %4251, label %originalBBpart21212, label %originalBB1210alteredBB

originalBBpart21212:                              ; preds = %originalBB1210
  br i1 %4243, label %5448, label %4252, !dbg !5111

4252:                                             ; preds = %originalBBpart21212, %originalBBpart21204
  call void @llvm.dbg.declare(metadata i64* %50, metadata !5112, metadata !DIExpression()), !dbg !5114
  %4253 = load i32, i32* @x.63
  %4254 = load i32, i32* @y.64
  %4255 = sub i32 %4253, 1
  %4256 = mul i32 %4253, %4255
  %4257 = urem i32 %4256, 2
  %4258 = icmp eq i32 %4257, 0
  %4259 = icmp slt i32 %4254, 10
  %4260 = or i1 %4258, %4259
  br i1 %4260, label %originalBB1214, label %originalBB1214alteredBB

originalBB1214:                                   ; preds = %4252, %originalBB1214alteredBB
  %4261 = load i64, i64* %28, align 8, !dbg !5115
  %4262 = load i64, i64* %44, align 8, !dbg !5116
  %4263 = add i64 %4261, %4262, !dbg !5117
  store i64 %4263, i64* %50, align 8, !dbg !5114
  %4264 = load i32, i32* @x.63
  %4265 = load i32, i32* @y.64
  %4266 = sub i32 %4264, 1
  %4267 = mul i32 %4264, %4266
  %4268 = urem i32 %4267, 2
  %4269 = icmp eq i32 %4268, 0
  %4270 = icmp slt i32 %4265, 10
  %4271 = or i1 %4269, %4270
  br i1 %4271, label %originalBBpart21228, label %originalBB1214alteredBB

originalBBpart21228:                              ; preds = %originalBB1214
  br label %4272, !dbg !5118

4272:                                             ; preds = %originalBBpart21636, %originalBBpart21228
  %4273 = load i32, i32* @x.63
  %4274 = load i32, i32* @y.64
  %4275 = sub i32 %4273, 1
  %4276 = mul i32 %4273, %4275
  %4277 = urem i32 %4276, 2
  %4278 = icmp eq i32 %4277, 0
  %4279 = icmp slt i32 %4274, 10
  %4280 = or i1 %4278, %4279
  br i1 %4280, label %originalBB1230, label %originalBB1230alteredBB

originalBB1230:                                   ; preds = %4272, %originalBB1230alteredBB
  %4281 = load i8, i8* %33, align 1, !dbg !5119
  %4282 = trunc i8 %4281 to i1, !dbg !5119
  %4283 = load i32, i32* @x.63
  %4284 = load i32, i32* @y.64
  %4285 = sub i32 %4283, 1
  %4286 = mul i32 %4283, %4285
  %4287 = urem i32 %4286, 2
  %4288 = icmp eq i32 %4287, 0
  %4289 = icmp slt i32 %4284, 10
  %4290 = or i1 %4288, %4289
  br i1 %4290, label %originalBBpart21232, label %originalBB1230alteredBB

originalBBpart21232:                              ; preds = %originalBB1230
  br i1 %4282, label %4291, label %4924, !dbg !5124

4291:                                             ; preds = %originalBBpart21232
  %4292 = load i32, i32* @x.63
  %4293 = load i32, i32* @y.64
  %4294 = sub i32 %4292, 1
  %4295 = mul i32 %4292, %4294
  %4296 = urem i32 %4295, 2
  %4297 = icmp eq i32 %4296, 0
  %4298 = icmp slt i32 %4293, 10
  %4299 = or i1 %4297, %4298
  br i1 %4299, label %originalBB1234, label %originalBB1234alteredBB

originalBB1234:                                   ; preds = %4291, %originalBB1234alteredBB
  %4300 = load i8, i8* %45, align 1, !dbg !5125
  %4301 = trunc i8 %4300 to i1, !dbg !5125
  %4302 = load i32, i32* @x.63
  %4303 = load i32, i32* @y.64
  %4304 = sub i32 %4302, 1
  %4305 = mul i32 %4302, %4304
  %4306 = urem i32 %4305, 2
  %4307 = icmp eq i32 %4306, 0
  %4308 = icmp slt i32 %4303, 10
  %4309 = or i1 %4307, %4308
  br i1 %4309, label %originalBBpart21236, label %originalBB1234alteredBB

originalBBpart21236:                              ; preds = %originalBB1234
  br i1 %4301, label %4924, label %4310, !dbg !5126

4310:                                             ; preds = %originalBBpart21236
  %4311 = load i32, i32* @x.63
  %4312 = load i32, i32* @y.64
  %4313 = sub i32 %4311, 1
  %4314 = mul i32 %4311, %4313
  %4315 = urem i32 %4314, 2
  %4316 = icmp eq i32 %4315, 0
  %4317 = icmp slt i32 %4312, 10
  %4318 = or i1 %4316, %4317
  br i1 %4318, label %originalBB1238, label %originalBB1238alteredBB

originalBB1238:                                   ; preds = %4310, %originalBB1238alteredBB
  %4319 = load i32, i32* @x.63
  %4320 = load i32, i32* @y.64
  %4321 = sub i32 %4319, 1
  %4322 = mul i32 %4319, %4321
  %4323 = urem i32 %4322, 2
  %4324 = icmp eq i32 %4323, 0
  %4325 = icmp slt i32 %4320, 10
  %4326 = or i1 %4324, %4325
  br i1 %4326, label %originalBBpart21240, label %originalBB1238alteredBB

originalBBpart21240:                              ; preds = %originalBB1238
  br label %4327, !dbg !5127

4327:                                             ; preds = %originalBBpart21240
  %4328 = load i32, i32* @x.63
  %4329 = load i32, i32* @y.64
  %4330 = sub i32 %4328, 1
  %4331 = mul i32 %4328, %4330
  %4332 = urem i32 %4331, 2
  %4333 = icmp eq i32 %4332, 0
  %4334 = icmp slt i32 %4329, 10
  %4335 = or i1 %4333, %4334
  br i1 %4335, label %originalBB1242, label %originalBB1242alteredBB

originalBB1242:                                   ; preds = %4327, %originalBB1242alteredBB
  %4336 = load i8, i8* %35, align 1, !dbg !5129
  %4337 = trunc i8 %4336 to i1, !dbg !5129
  %4338 = load i32, i32* @x.63
  %4339 = load i32, i32* @y.64
  %4340 = sub i32 %4338, 1
  %4341 = mul i32 %4338, %4340
  %4342 = urem i32 %4341, 2
  %4343 = icmp eq i32 %4342, 0
  %4344 = icmp slt i32 %4339, 10
  %4345 = or i1 %4343, %4344
  br i1 %4345, label %originalBBpart21244, label %originalBB1242alteredBB

originalBBpart21244:                              ; preds = %originalBB1242
  br i1 %4337, label %4346, label %4363, !dbg !5132

4346:                                             ; preds = %originalBBpart21244
  %4347 = load i32, i32* @x.63
  %4348 = load i32, i32* @y.64
  %4349 = sub i32 %4347, 1
  %4350 = mul i32 %4347, %4349
  %4351 = urem i32 %4350, 2
  %4352 = icmp eq i32 %4351, 0
  %4353 = icmp slt i32 %4348, 10
  %4354 = or i1 %4352, %4353
  br i1 %4354, label %originalBB1246, label %originalBB1246alteredBB

originalBB1246:                                   ; preds = %4346, %originalBB1246alteredBB
  %4355 = load i32, i32* @x.63
  %4356 = load i32, i32* @y.64
  %4357 = sub i32 %4355, 1
  %4358 = mul i32 %4355, %4357
  %4359 = urem i32 %4358, 2
  %4360 = icmp eq i32 %4359, 0
  %4361 = icmp slt i32 %4356, 10
  %4362 = or i1 %4360, %4361
  br i1 %4362, label %originalBBpart21248, label %originalBB1246alteredBB

originalBBpart21248:                              ; preds = %originalBB1246
  br label %6990, !dbg !5129

4363:                                             ; preds = %originalBBpart21244
  %4364 = load i32, i32* @x.63
  %4365 = load i32, i32* @y.64
  %4366 = sub i32 %4364, 1
  %4367 = mul i32 %4364, %4366
  %4368 = urem i32 %4367, 2
  %4369 = icmp eq i32 %4368, 0
  %4370 = icmp slt i32 %4365, 10
  %4371 = or i1 %4369, %4370
  br i1 %4371, label %originalBB1250, label %originalBB1250alteredBB

originalBB1250:                                   ; preds = %4363, %originalBB1250alteredBB
  store i8 1, i8* %42, align 1, !dbg !5132
  %4372 = load i32, i32* %23, align 4, !dbg !5133
  %4373 = icmp eq i32 %4372, 2, !dbg !5133
  %4374 = load i32, i32* @x.63
  %4375 = load i32, i32* @y.64
  %4376 = sub i32 %4374, 1
  %4377 = mul i32 %4374, %4376
  %4378 = urem i32 %4377, 2
  %4379 = icmp eq i32 %4378, 0
  %4380 = icmp slt i32 %4375, 10
  %4381 = or i1 %4379, %4380
  br i1 %4381, label %originalBBpart21252, label %originalBB1250alteredBB

originalBBpart21252:                              ; preds = %originalBB1250
  br i1 %4373, label %4382, label %4646, !dbg !5133

4382:                                             ; preds = %originalBBpart21252
  %4383 = load i32, i32* @x.63
  %4384 = load i32, i32* @y.64
  %4385 = sub i32 %4383, 1
  %4386 = mul i32 %4383, %4385
  %4387 = urem i32 %4386, 2
  %4388 = icmp eq i32 %4387, 0
  %4389 = icmp slt i32 %4384, 10
  %4390 = or i1 %4388, %4389
  br i1 %4390, label %originalBB1254, label %originalBB1254alteredBB

originalBB1254:                                   ; preds = %4382, %originalBB1254alteredBB
  %4391 = load i8, i8* %36, align 1, !dbg !5133
  %4392 = trunc i8 %4391 to i1, !dbg !5133
  %4393 = load i32, i32* @x.63
  %4394 = load i32, i32* @y.64
  %4395 = sub i32 %4393, 1
  %4396 = mul i32 %4393, %4395
  %4397 = urem i32 %4396, 2
  %4398 = icmp eq i32 %4397, 0
  %4399 = icmp slt i32 %4394, 10
  %4400 = or i1 %4398, %4399
  br i1 %4400, label %originalBBpart21256, label %originalBB1254alteredBB

originalBBpart21256:                              ; preds = %originalBB1254
  br i1 %4392, label %4646, label %4401, !dbg !5132

4401:                                             ; preds = %originalBBpart21256
  %4402 = load i32, i32* @x.63
  %4403 = load i32, i32* @y.64
  %4404 = sub i32 %4402, 1
  %4405 = mul i32 %4402, %4404
  %4406 = urem i32 %4405, 2
  %4407 = icmp eq i32 %4406, 0
  %4408 = icmp slt i32 %4403, 10
  %4409 = or i1 %4407, %4408
  br i1 %4409, label %originalBB1258, label %originalBB1258alteredBB

originalBB1258:                                   ; preds = %4401, %originalBB1258alteredBB
  %4410 = load i32, i32* @x.63
  %4411 = load i32, i32* @y.64
  %4412 = sub i32 %4410, 1
  %4413 = mul i32 %4410, %4412
  %4414 = urem i32 %4413, 2
  %4415 = icmp eq i32 %4414, 0
  %4416 = icmp slt i32 %4411, 10
  %4417 = or i1 %4415, %4416
  br i1 %4417, label %originalBBpart21260, label %originalBB1258alteredBB

originalBBpart21260:                              ; preds = %originalBB1258
  br label %4418, !dbg !5135

4418:                                             ; preds = %originalBBpart21260
  %4419 = load i32, i32* @x.63
  %4420 = load i32, i32* @y.64
  %4421 = sub i32 %4419, 1
  %4422 = mul i32 %4419, %4421
  %4423 = urem i32 %4422, 2
  %4424 = icmp eq i32 %4423, 0
  %4425 = icmp slt i32 %4420, 10
  %4426 = or i1 %4424, %4425
  br i1 %4426, label %originalBB1262, label %originalBB1262alteredBB

originalBB1262:                                   ; preds = %4418, %originalBB1262alteredBB
  %4427 = load i64, i64* %29, align 8, !dbg !5137
  %4428 = load i64, i64* %20, align 8, !dbg !5137
  %4429 = icmp ult i64 %4427, %4428, !dbg !5137
  %4430 = load i32, i32* @x.63
  %4431 = load i32, i32* @y.64
  %4432 = sub i32 %4430, 1
  %4433 = mul i32 %4430, %4432
  %4434 = urem i32 %4433, 2
  %4435 = icmp eq i32 %4434, 0
  %4436 = icmp slt i32 %4431, 10
  %4437 = or i1 %4435, %4436
  br i1 %4437, label %originalBBpart21264, label %originalBB1262alteredBB

originalBBpart21264:                              ; preds = %originalBB1262
  br i1 %4429, label %4438, label %4458, !dbg !5140

4438:                                             ; preds = %originalBBpart21264
  %4439 = load i32, i32* @x.63
  %4440 = load i32, i32* @y.64
  %4441 = sub i32 %4439, 1
  %4442 = mul i32 %4439, %4441
  %4443 = urem i32 %4442, 2
  %4444 = icmp eq i32 %4443, 0
  %4445 = icmp slt i32 %4440, 10
  %4446 = or i1 %4444, %4445
  br i1 %4446, label %originalBB1266, label %originalBB1266alteredBB

originalBB1266:                                   ; preds = %4438, %originalBB1266alteredBB
  %4447 = load i8*, i8** %19, align 8, !dbg !5137
  %4448 = load i64, i64* %29, align 8, !dbg !5137
  %4449 = getelementptr inbounds i8, i8* %4447, i64 %4448, !dbg !5137
  store i8 39, i8* %4449, align 1, !dbg !5137
  %4450 = load i32, i32* @x.63
  %4451 = load i32, i32* @y.64
  %4452 = sub i32 %4450, 1
  %4453 = mul i32 %4450, %4452
  %4454 = urem i32 %4453, 2
  %4455 = icmp eq i32 %4454, 0
  %4456 = icmp slt i32 %4451, 10
  %4457 = or i1 %4455, %4456
  br i1 %4457, label %originalBBpart21268, label %originalBB1266alteredBB

originalBBpart21268:                              ; preds = %originalBB1266
  br label %4458, !dbg !5137

4458:                                             ; preds = %originalBBpart21268, %originalBBpart21264
  %4459 = load i32, i32* @x.63
  %4460 = load i32, i32* @y.64
  %4461 = sub i32 %4459, 1
  %4462 = mul i32 %4459, %4461
  %4463 = urem i32 %4462, 2
  %4464 = icmp eq i32 %4463, 0
  %4465 = icmp slt i32 %4460, 10
  %4466 = or i1 %4464, %4465
  br i1 %4466, label %originalBB1270, label %originalBB1270alteredBB

originalBB1270:                                   ; preds = %4458, %originalBB1270alteredBB
  %4467 = load i64, i64* %29, align 8, !dbg !5140
  %4468 = add i64 %4467, 1, !dbg !5140
  store i64 %4468, i64* %29, align 8, !dbg !5140
  %4469 = load i32, i32* @x.63
  %4470 = load i32, i32* @y.64
  %4471 = sub i32 %4469, 1
  %4472 = mul i32 %4469, %4471
  %4473 = urem i32 %4472, 2
  %4474 = icmp eq i32 %4473, 0
  %4475 = icmp slt i32 %4470, 10
  %4476 = or i1 %4474, %4475
  br i1 %4476, label %originalBBpart21279, label %originalBB1270alteredBB

originalBBpart21279:                              ; preds = %originalBB1270
  br label %4477, !dbg !5140

4477:                                             ; preds = %originalBBpart21279
  %4478 = load i32, i32* @x.63
  %4479 = load i32, i32* @y.64
  %4480 = sub i32 %4478, 1
  %4481 = mul i32 %4478, %4480
  %4482 = urem i32 %4481, 2
  %4483 = icmp eq i32 %4482, 0
  %4484 = icmp slt i32 %4479, 10
  %4485 = or i1 %4483, %4484
  br i1 %4485, label %originalBB1281, label %originalBB1281alteredBB

originalBB1281:                                   ; preds = %4477, %originalBB1281alteredBB
  %4486 = load i32, i32* @x.63
  %4487 = load i32, i32* @y.64
  %4488 = sub i32 %4486, 1
  %4489 = mul i32 %4486, %4488
  %4490 = urem i32 %4489, 2
  %4491 = icmp eq i32 %4490, 0
  %4492 = icmp slt i32 %4487, 10
  %4493 = or i1 %4491, %4492
  br i1 %4493, label %originalBBpart21283, label %originalBB1281alteredBB

originalBBpart21283:                              ; preds = %originalBB1281
  br label %4494, !dbg !5135

4494:                                             ; preds = %originalBBpart21283
  %4495 = load i32, i32* @x.63
  %4496 = load i32, i32* @y.64
  %4497 = sub i32 %4495, 1
  %4498 = mul i32 %4495, %4497
  %4499 = urem i32 %4498, 2
  %4500 = icmp eq i32 %4499, 0
  %4501 = icmp slt i32 %4496, 10
  %4502 = or i1 %4500, %4501
  br i1 %4502, label %originalBB1285, label %originalBB1285alteredBB

originalBB1285:                                   ; preds = %4494, %originalBB1285alteredBB
  %4503 = load i64, i64* %29, align 8, !dbg !5141
  %4504 = load i64, i64* %20, align 8, !dbg !5141
  %4505 = icmp ult i64 %4503, %4504, !dbg !5141
  %4506 = load i32, i32* @x.63
  %4507 = load i32, i32* @y.64
  %4508 = sub i32 %4506, 1
  %4509 = mul i32 %4506, %4508
  %4510 = urem i32 %4509, 2
  %4511 = icmp eq i32 %4510, 0
  %4512 = icmp slt i32 %4507, 10
  %4513 = or i1 %4511, %4512
  br i1 %4513, label %originalBBpart21287, label %originalBB1285alteredBB

originalBBpart21287:                              ; preds = %originalBB1285
  br i1 %4505, label %4514, label %4534, !dbg !5144

4514:                                             ; preds = %originalBBpart21287
  %4515 = load i32, i32* @x.63
  %4516 = load i32, i32* @y.64
  %4517 = sub i32 %4515, 1
  %4518 = mul i32 %4515, %4517
  %4519 = urem i32 %4518, 2
  %4520 = icmp eq i32 %4519, 0
  %4521 = icmp slt i32 %4516, 10
  %4522 = or i1 %4520, %4521
  br i1 %4522, label %originalBB1289, label %originalBB1289alteredBB

originalBB1289:                                   ; preds = %4514, %originalBB1289alteredBB
  %4523 = load i8*, i8** %19, align 8, !dbg !5141
  %4524 = load i64, i64* %29, align 8, !dbg !5141
  %4525 = getelementptr inbounds i8, i8* %4523, i64 %4524, !dbg !5141
  store i8 36, i8* %4525, align 1, !dbg !5141
  %4526 = load i32, i32* @x.63
  %4527 = load i32, i32* @y.64
  %4528 = sub i32 %4526, 1
  %4529 = mul i32 %4526, %4528
  %4530 = urem i32 %4529, 2
  %4531 = icmp eq i32 %4530, 0
  %4532 = icmp slt i32 %4527, 10
  %4533 = or i1 %4531, %4532
  br i1 %4533, label %originalBBpart21291, label %originalBB1289alteredBB

originalBBpart21291:                              ; preds = %originalBB1289
  br label %4534, !dbg !5141

4534:                                             ; preds = %originalBBpart21291, %originalBBpart21287
  %4535 = load i32, i32* @x.63
  %4536 = load i32, i32* @y.64
  %4537 = sub i32 %4535, 1
  %4538 = mul i32 %4535, %4537
  %4539 = urem i32 %4538, 2
  %4540 = icmp eq i32 %4539, 0
  %4541 = icmp slt i32 %4536, 10
  %4542 = or i1 %4540, %4541
  br i1 %4542, label %originalBB1293, label %originalBB1293alteredBB

originalBB1293:                                   ; preds = %4534, %originalBB1293alteredBB
  %4543 = load i64, i64* %29, align 8, !dbg !5144
  %4544 = add i64 %4543, 1, !dbg !5144
  store i64 %4544, i64* %29, align 8, !dbg !5144
  %4545 = load i32, i32* @x.63
  %4546 = load i32, i32* @y.64
  %4547 = sub i32 %4545, 1
  %4548 = mul i32 %4545, %4547
  %4549 = urem i32 %4548, 2
  %4550 = icmp eq i32 %4549, 0
  %4551 = icmp slt i32 %4546, 10
  %4552 = or i1 %4550, %4551
  br i1 %4552, label %originalBBpart21303, label %originalBB1293alteredBB

originalBBpart21303:                              ; preds = %originalBB1293
  br label %4553, !dbg !5144

4553:                                             ; preds = %originalBBpart21303
  %4554 = load i32, i32* @x.63
  %4555 = load i32, i32* @y.64
  %4556 = sub i32 %4554, 1
  %4557 = mul i32 %4554, %4556
  %4558 = urem i32 %4557, 2
  %4559 = icmp eq i32 %4558, 0
  %4560 = icmp slt i32 %4555, 10
  %4561 = or i1 %4559, %4560
  br i1 %4561, label %originalBB1305, label %originalBB1305alteredBB

originalBB1305:                                   ; preds = %4553, %originalBB1305alteredBB
  %4562 = load i32, i32* @x.63
  %4563 = load i32, i32* @y.64
  %4564 = sub i32 %4562, 1
  %4565 = mul i32 %4562, %4564
  %4566 = urem i32 %4565, 2
  %4567 = icmp eq i32 %4566, 0
  %4568 = icmp slt i32 %4563, 10
  %4569 = or i1 %4567, %4568
  br i1 %4569, label %originalBBpart21307, label %originalBB1305alteredBB

originalBBpart21307:                              ; preds = %originalBB1305
  br label %4570, !dbg !5135

4570:                                             ; preds = %originalBBpart21307
  %4571 = load i32, i32* @x.63
  %4572 = load i32, i32* @y.64
  %4573 = sub i32 %4571, 1
  %4574 = mul i32 %4571, %4573
  %4575 = urem i32 %4574, 2
  %4576 = icmp eq i32 %4575, 0
  %4577 = icmp slt i32 %4572, 10
  %4578 = or i1 %4576, %4577
  br i1 %4578, label %originalBB1309, label %originalBB1309alteredBB

originalBB1309:                                   ; preds = %4570, %originalBB1309alteredBB
  %4579 = load i64, i64* %29, align 8, !dbg !5145
  %4580 = load i64, i64* %20, align 8, !dbg !5145
  %4581 = icmp ult i64 %4579, %4580, !dbg !5145
  %4582 = load i32, i32* @x.63
  %4583 = load i32, i32* @y.64
  %4584 = sub i32 %4582, 1
  %4585 = mul i32 %4582, %4584
  %4586 = urem i32 %4585, 2
  %4587 = icmp eq i32 %4586, 0
  %4588 = icmp slt i32 %4583, 10
  %4589 = or i1 %4587, %4588
  br i1 %4589, label %originalBBpart21311, label %originalBB1309alteredBB

originalBBpart21311:                              ; preds = %originalBB1309
  br i1 %4581, label %4590, label %4610, !dbg !5148

4590:                                             ; preds = %originalBBpart21311
  %4591 = load i32, i32* @x.63
  %4592 = load i32, i32* @y.64
  %4593 = sub i32 %4591, 1
  %4594 = mul i32 %4591, %4593
  %4595 = urem i32 %4594, 2
  %4596 = icmp eq i32 %4595, 0
  %4597 = icmp slt i32 %4592, 10
  %4598 = or i1 %4596, %4597
  br i1 %4598, label %originalBB1313, label %originalBB1313alteredBB

originalBB1313:                                   ; preds = %4590, %originalBB1313alteredBB
  %4599 = load i8*, i8** %19, align 8, !dbg !5145
  %4600 = load i64, i64* %29, align 8, !dbg !5145
  %4601 = getelementptr inbounds i8, i8* %4599, i64 %4600, !dbg !5145
  store i8 39, i8* %4601, align 1, !dbg !5145
  %4602 = load i32, i32* @x.63
  %4603 = load i32, i32* @y.64
  %4604 = sub i32 %4602, 1
  %4605 = mul i32 %4602, %4604
  %4606 = urem i32 %4605, 2
  %4607 = icmp eq i32 %4606, 0
  %4608 = icmp slt i32 %4603, 10
  %4609 = or i1 %4607, %4608
  br i1 %4609, label %originalBBpart21315, label %originalBB1313alteredBB

originalBBpart21315:                              ; preds = %originalBB1313
  br label %4610, !dbg !5145

4610:                                             ; preds = %originalBBpart21315, %originalBBpart21311
  %4611 = load i32, i32* @x.63
  %4612 = load i32, i32* @y.64
  %4613 = sub i32 %4611, 1
  %4614 = mul i32 %4611, %4613
  %4615 = urem i32 %4614, 2
  %4616 = icmp eq i32 %4615, 0
  %4617 = icmp slt i32 %4612, 10
  %4618 = or i1 %4616, %4617
  br i1 %4618, label %originalBB1317, label %originalBB1317alteredBB

originalBB1317:                                   ; preds = %4610, %originalBB1317alteredBB
  %4619 = load i64, i64* %29, align 8, !dbg !5148
  %4620 = add i64 %4619, 1, !dbg !5148
  store i64 %4620, i64* %29, align 8, !dbg !5148
  %4621 = load i32, i32* @x.63
  %4622 = load i32, i32* @y.64
  %4623 = sub i32 %4621, 1
  %4624 = mul i32 %4621, %4623
  %4625 = urem i32 %4624, 2
  %4626 = icmp eq i32 %4625, 0
  %4627 = icmp slt i32 %4622, 10
  %4628 = or i1 %4626, %4627
  br i1 %4628, label %originalBBpart21327, label %originalBB1317alteredBB

originalBBpart21327:                              ; preds = %originalBB1317
  br label %4629, !dbg !5148

4629:                                             ; preds = %originalBBpart21327
  %4630 = load i32, i32* @x.63
  %4631 = load i32, i32* @y.64
  %4632 = sub i32 %4630, 1
  %4633 = mul i32 %4630, %4632
  %4634 = urem i32 %4633, 2
  %4635 = icmp eq i32 %4634, 0
  %4636 = icmp slt i32 %4631, 10
  %4637 = or i1 %4635, %4636
  br i1 %4637, label %originalBB1329, label %originalBB1329alteredBB

originalBB1329:                                   ; preds = %4629, %originalBB1329alteredBB
  store i8 1, i8* %36, align 1, !dbg !5135
  %4638 = load i32, i32* @x.63
  %4639 = load i32, i32* @y.64
  %4640 = sub i32 %4638, 1
  %4641 = mul i32 %4638, %4640
  %4642 = urem i32 %4641, 2
  %4643 = icmp eq i32 %4642, 0
  %4644 = icmp slt i32 %4639, 10
  %4645 = or i1 %4643, %4644
  br i1 %4645, label %originalBBpart21331, label %originalBB1329alteredBB

originalBBpart21331:                              ; preds = %originalBB1329
  br label %4646, !dbg !5135

4646:                                             ; preds = %originalBBpart21331, %originalBBpart21256, %originalBBpart21252
  %4647 = load i32, i32* @x.63
  %4648 = load i32, i32* @y.64
  %4649 = sub i32 %4647, 1
  %4650 = mul i32 %4647, %4649
  %4651 = urem i32 %4650, 2
  %4652 = icmp eq i32 %4651, 0
  %4653 = icmp slt i32 %4648, 10
  %4654 = or i1 %4652, %4653
  br i1 %4654, label %originalBB1333, label %originalBB1333alteredBB

originalBB1333:                                   ; preds = %4646, %originalBB1333alteredBB
  %4655 = load i32, i32* @x.63
  %4656 = load i32, i32* @y.64
  %4657 = sub i32 %4655, 1
  %4658 = mul i32 %4655, %4657
  %4659 = urem i32 %4658, 2
  %4660 = icmp eq i32 %4659, 0
  %4661 = icmp slt i32 %4656, 10
  %4662 = or i1 %4660, %4661
  br i1 %4662, label %originalBBpart21335, label %originalBB1333alteredBB

originalBBpart21335:                              ; preds = %originalBB1333
  br label %4663, !dbg !5132

4663:                                             ; preds = %originalBBpart21335
  %4664 = load i32, i32* @x.63
  %4665 = load i32, i32* @y.64
  %4666 = sub i32 %4664, 1
  %4667 = mul i32 %4664, %4666
  %4668 = urem i32 %4667, 2
  %4669 = icmp eq i32 %4668, 0
  %4670 = icmp slt i32 %4665, 10
  %4671 = or i1 %4669, %4670
  br i1 %4671, label %originalBB1337, label %originalBB1337alteredBB

originalBB1337:                                   ; preds = %4663, %originalBB1337alteredBB
  %4672 = load i64, i64* %29, align 8, !dbg !5149
  %4673 = load i64, i64* %20, align 8, !dbg !5149
  %4674 = icmp ult i64 %4672, %4673, !dbg !5149
  %4675 = load i32, i32* @x.63
  %4676 = load i32, i32* @y.64
  %4677 = sub i32 %4675, 1
  %4678 = mul i32 %4675, %4677
  %4679 = urem i32 %4678, 2
  %4680 = icmp eq i32 %4679, 0
  %4681 = icmp slt i32 %4676, 10
  %4682 = or i1 %4680, %4681
  br i1 %4682, label %originalBBpart21339, label %originalBB1337alteredBB

originalBBpart21339:                              ; preds = %originalBB1337
  br i1 %4674, label %4683, label %4703, !dbg !5152

4683:                                             ; preds = %originalBBpart21339
  %4684 = load i32, i32* @x.63
  %4685 = load i32, i32* @y.64
  %4686 = sub i32 %4684, 1
  %4687 = mul i32 %4684, %4686
  %4688 = urem i32 %4687, 2
  %4689 = icmp eq i32 %4688, 0
  %4690 = icmp slt i32 %4685, 10
  %4691 = or i1 %4689, %4690
  br i1 %4691, label %originalBB1341, label %originalBB1341alteredBB

originalBB1341:                                   ; preds = %4683, %originalBB1341alteredBB
  %4692 = load i8*, i8** %19, align 8, !dbg !5149
  %4693 = load i64, i64* %29, align 8, !dbg !5149
  %4694 = getelementptr inbounds i8, i8* %4692, i64 %4693, !dbg !5149
  store i8 92, i8* %4694, align 1, !dbg !5149
  %4695 = load i32, i32* @x.63
  %4696 = load i32, i32* @y.64
  %4697 = sub i32 %4695, 1
  %4698 = mul i32 %4695, %4697
  %4699 = urem i32 %4698, 2
  %4700 = icmp eq i32 %4699, 0
  %4701 = icmp slt i32 %4696, 10
  %4702 = or i1 %4700, %4701
  br i1 %4702, label %originalBBpart21343, label %originalBB1341alteredBB

originalBBpart21343:                              ; preds = %originalBB1341
  br label %4703, !dbg !5149

4703:                                             ; preds = %originalBBpart21343, %originalBBpart21339
  %4704 = load i32, i32* @x.63
  %4705 = load i32, i32* @y.64
  %4706 = sub i32 %4704, 1
  %4707 = mul i32 %4704, %4706
  %4708 = urem i32 %4707, 2
  %4709 = icmp eq i32 %4708, 0
  %4710 = icmp slt i32 %4705, 10
  %4711 = or i1 %4709, %4710
  br i1 %4711, label %originalBB1345, label %originalBB1345alteredBB

originalBB1345:                                   ; preds = %4703, %originalBB1345alteredBB
  %4712 = load i64, i64* %29, align 8, !dbg !5152
  %4713 = add i64 %4712, 1, !dbg !5152
  store i64 %4713, i64* %29, align 8, !dbg !5152
  %4714 = load i32, i32* @x.63
  %4715 = load i32, i32* @y.64
  %4716 = sub i32 %4714, 1
  %4717 = mul i32 %4714, %4716
  %4718 = urem i32 %4717, 2
  %4719 = icmp eq i32 %4718, 0
  %4720 = icmp slt i32 %4715, 10
  %4721 = or i1 %4719, %4720
  br i1 %4721, label %originalBBpart21365, label %originalBB1345alteredBB

originalBBpart21365:                              ; preds = %originalBB1345
  br label %4722, !dbg !5152

4722:                                             ; preds = %originalBBpart21365
  %4723 = load i32, i32* @x.63
  %4724 = load i32, i32* @y.64
  %4725 = sub i32 %4723, 1
  %4726 = mul i32 %4723, %4725
  %4727 = urem i32 %4726, 2
  %4728 = icmp eq i32 %4727, 0
  %4729 = icmp slt i32 %4724, 10
  %4730 = or i1 %4728, %4729
  br i1 %4730, label %originalBB1367, label %originalBB1367alteredBB

originalBB1367:                                   ; preds = %4722, %originalBB1367alteredBB
  %4731 = load i32, i32* @x.63
  %4732 = load i32, i32* @y.64
  %4733 = sub i32 %4731, 1
  %4734 = mul i32 %4731, %4733
  %4735 = urem i32 %4734, 2
  %4736 = icmp eq i32 %4735, 0
  %4737 = icmp slt i32 %4732, 10
  %4738 = or i1 %4736, %4737
  br i1 %4738, label %originalBBpart21369, label %originalBB1367alteredBB

originalBBpart21369:                              ; preds = %originalBB1367
  br label %4739, !dbg !5132

4739:                                             ; preds = %originalBBpart21369
  %4740 = load i32, i32* @x.63
  %4741 = load i32, i32* @y.64
  %4742 = sub i32 %4740, 1
  %4743 = mul i32 %4740, %4742
  %4744 = urem i32 %4743, 2
  %4745 = icmp eq i32 %4744, 0
  %4746 = icmp slt i32 %4741, 10
  %4747 = or i1 %4745, %4746
  br i1 %4747, label %originalBB1371, label %originalBB1371alteredBB

originalBB1371:                                   ; preds = %4739, %originalBB1371alteredBB
  %4748 = load i32, i32* @x.63
  %4749 = load i32, i32* @y.64
  %4750 = sub i32 %4748, 1
  %4751 = mul i32 %4748, %4750
  %4752 = urem i32 %4751, 2
  %4753 = icmp eq i32 %4752, 0
  %4754 = icmp slt i32 %4749, 10
  %4755 = or i1 %4753, %4754
  br i1 %4755, label %originalBBpart21373, label %originalBB1371alteredBB

originalBBpart21373:                              ; preds = %originalBB1371
  br label %4756, !dbg !5153

4756:                                             ; preds = %originalBBpart21373
  %4757 = load i32, i32* @x.63
  %4758 = load i32, i32* @y.64
  %4759 = sub i32 %4757, 1
  %4760 = mul i32 %4757, %4759
  %4761 = urem i32 %4760, 2
  %4762 = icmp eq i32 %4761, 0
  %4763 = icmp slt i32 %4758, 10
  %4764 = or i1 %4762, %4763
  br i1 %4764, label %originalBB1375, label %originalBB1375alteredBB

originalBB1375:                                   ; preds = %4756, %originalBB1375alteredBB
  %4765 = load i64, i64* %29, align 8, !dbg !5154
  %4766 = load i64, i64* %20, align 8, !dbg !5154
  %4767 = icmp ult i64 %4765, %4766, !dbg !5154
  %4768 = load i32, i32* @x.63
  %4769 = load i32, i32* @y.64
  %4770 = sub i32 %4768, 1
  %4771 = mul i32 %4768, %4770
  %4772 = urem i32 %4771, 2
  %4773 = icmp eq i32 %4772, 0
  %4774 = icmp slt i32 %4769, 10
  %4775 = or i1 %4773, %4774
  br i1 %4775, label %originalBBpart21377, label %originalBB1375alteredBB

originalBBpart21377:                              ; preds = %originalBB1375
  br i1 %4767, label %4776, label %4801, !dbg !5157

4776:                                             ; preds = %originalBBpart21377
  %4777 = load i32, i32* @x.63
  %4778 = load i32, i32* @y.64
  %4779 = sub i32 %4777, 1
  %4780 = mul i32 %4777, %4779
  %4781 = urem i32 %4780, 2
  %4782 = icmp eq i32 %4781, 0
  %4783 = icmp slt i32 %4778, 10
  %4784 = or i1 %4782, %4783
  br i1 %4784, label %originalBB1379, label %originalBB1379alteredBB

originalBB1379:                                   ; preds = %4776, %originalBB1379alteredBB
  %4785 = load i8, i8* %39, align 1, !dbg !5154
  %4786 = zext i8 %4785 to i32, !dbg !5154
  %4787 = ashr i32 %4786, 6, !dbg !5154
  %4788 = add nsw i32 48, %4787, !dbg !5154
  %4789 = trunc i32 %4788 to i8, !dbg !5154
  %4790 = load i8*, i8** %19, align 8, !dbg !5154
  %4791 = load i64, i64* %29, align 8, !dbg !5154
  %4792 = getelementptr inbounds i8, i8* %4790, i64 %4791, !dbg !5154
  store i8 %4789, i8* %4792, align 1, !dbg !5154
  %4793 = load i32, i32* @x.63
  %4794 = load i32, i32* @y.64
  %4795 = sub i32 %4793, 1
  %4796 = mul i32 %4793, %4795
  %4797 = urem i32 %4796, 2
  %4798 = icmp eq i32 %4797, 0
  %4799 = icmp slt i32 %4794, 10
  %4800 = or i1 %4798, %4799
  br i1 %4800, label %originalBBpart21398, label %originalBB1379alteredBB

originalBBpart21398:                              ; preds = %originalBB1379
  br label %4801, !dbg !5154

4801:                                             ; preds = %originalBBpart21398, %originalBBpart21377
  %4802 = load i32, i32* @x.63
  %4803 = load i32, i32* @y.64
  %4804 = sub i32 %4802, 1
  %4805 = mul i32 %4802, %4804
  %4806 = urem i32 %4805, 2
  %4807 = icmp eq i32 %4806, 0
  %4808 = icmp slt i32 %4803, 10
  %4809 = or i1 %4807, %4808
  br i1 %4809, label %originalBB1400, label %originalBB1400alteredBB

originalBB1400:                                   ; preds = %4801, %originalBB1400alteredBB
  %4810 = load i64, i64* %29, align 8, !dbg !5157
  %4811 = add i64 %4810, 1, !dbg !5157
  store i64 %4811, i64* %29, align 8, !dbg !5157
  %4812 = load i32, i32* @x.63
  %4813 = load i32, i32* @y.64
  %4814 = sub i32 %4812, 1
  %4815 = mul i32 %4812, %4814
  %4816 = urem i32 %4815, 2
  %4817 = icmp eq i32 %4816, 0
  %4818 = icmp slt i32 %4813, 10
  %4819 = or i1 %4817, %4818
  br i1 %4819, label %originalBBpart21415, label %originalBB1400alteredBB

originalBBpart21415:                              ; preds = %originalBB1400
  br label %4820, !dbg !5157

4820:                                             ; preds = %originalBBpart21415
  %4821 = load i32, i32* @x.63
  %4822 = load i32, i32* @y.64
  %4823 = sub i32 %4821, 1
  %4824 = mul i32 %4821, %4823
  %4825 = urem i32 %4824, 2
  %4826 = icmp eq i32 %4825, 0
  %4827 = icmp slt i32 %4822, 10
  %4828 = or i1 %4826, %4827
  br i1 %4828, label %originalBB1417, label %originalBB1417alteredBB

originalBB1417:                                   ; preds = %4820, %originalBB1417alteredBB
  %4829 = load i32, i32* @x.63
  %4830 = load i32, i32* @y.64
  %4831 = sub i32 %4829, 1
  %4832 = mul i32 %4829, %4831
  %4833 = urem i32 %4832, 2
  %4834 = icmp eq i32 %4833, 0
  %4835 = icmp slt i32 %4830, 10
  %4836 = or i1 %4834, %4835
  br i1 %4836, label %originalBBpart21419, label %originalBB1417alteredBB

originalBBpart21419:                              ; preds = %originalBB1417
  br label %4837, !dbg !5158

4837:                                             ; preds = %originalBBpart21419
  %4838 = load i32, i32* @x.63
  %4839 = load i32, i32* @y.64
  %4840 = sub i32 %4838, 1
  %4841 = mul i32 %4838, %4840
  %4842 = urem i32 %4841, 2
  %4843 = icmp eq i32 %4842, 0
  %4844 = icmp slt i32 %4839, 10
  %4845 = or i1 %4843, %4844
  br i1 %4845, label %originalBB1421, label %originalBB1421alteredBB

originalBB1421:                                   ; preds = %4837, %originalBB1421alteredBB
  %4846 = load i64, i64* %29, align 8, !dbg !5159
  %4847 = load i64, i64* %20, align 8, !dbg !5159
  %4848 = icmp ult i64 %4846, %4847, !dbg !5159
  %4849 = load i32, i32* @x.63
  %4850 = load i32, i32* @y.64
  %4851 = sub i32 %4849, 1
  %4852 = mul i32 %4849, %4851
  %4853 = urem i32 %4852, 2
  %4854 = icmp eq i32 %4853, 0
  %4855 = icmp slt i32 %4850, 10
  %4856 = or i1 %4854, %4855
  br i1 %4856, label %originalBBpart21423, label %originalBB1421alteredBB

originalBBpart21423:                              ; preds = %originalBB1421
  br i1 %4848, label %4857, label %4883, !dbg !5162

4857:                                             ; preds = %originalBBpart21423
  %4858 = load i32, i32* @x.63
  %4859 = load i32, i32* @y.64
  %4860 = sub i32 %4858, 1
  %4861 = mul i32 %4858, %4860
  %4862 = urem i32 %4861, 2
  %4863 = icmp eq i32 %4862, 0
  %4864 = icmp slt i32 %4859, 10
  %4865 = or i1 %4863, %4864
  br i1 %4865, label %originalBB1425, label %originalBB1425alteredBB

originalBB1425:                                   ; preds = %4857, %originalBB1425alteredBB
  %4866 = load i8, i8* %39, align 1, !dbg !5159
  %4867 = zext i8 %4866 to i32, !dbg !5159
  %4868 = ashr i32 %4867, 3, !dbg !5159
  %4869 = and i32 %4868, 7, !dbg !5159
  %4870 = add nsw i32 48, %4869, !dbg !5159
  %4871 = trunc i32 %4870 to i8, !dbg !5159
  %4872 = load i8*, i8** %19, align 8, !dbg !5159
  %4873 = load i64, i64* %29, align 8, !dbg !5159
  %4874 = getelementptr inbounds i8, i8* %4872, i64 %4873, !dbg !5159
  store i8 %4871, i8* %4874, align 1, !dbg !5159
  %4875 = load i32, i32* @x.63
  %4876 = load i32, i32* @y.64
  %4877 = sub i32 %4875, 1
  %4878 = mul i32 %4875, %4877
  %4879 = urem i32 %4878, 2
  %4880 = icmp eq i32 %4879, 0
  %4881 = icmp slt i32 %4876, 10
  %4882 = or i1 %4880, %4881
  br i1 %4882, label %originalBBpart21452, label %originalBB1425alteredBB

originalBBpart21452:                              ; preds = %originalBB1425
  br label %4883, !dbg !5159

4883:                                             ; preds = %originalBBpart21452, %originalBBpart21423
  %4884 = load i32, i32* @x.63
  %4885 = load i32, i32* @y.64
  %4886 = sub i32 %4884, 1
  %4887 = mul i32 %4884, %4886
  %4888 = urem i32 %4887, 2
  %4889 = icmp eq i32 %4888, 0
  %4890 = icmp slt i32 %4885, 10
  %4891 = or i1 %4889, %4890
  br i1 %4891, label %originalBB1454, label %originalBB1454alteredBB

originalBB1454:                                   ; preds = %4883, %originalBB1454alteredBB
  %4892 = load i64, i64* %29, align 8, !dbg !5162
  %4893 = add i64 %4892, 1, !dbg !5162
  store i64 %4893, i64* %29, align 8, !dbg !5162
  %4894 = load i32, i32* @x.63
  %4895 = load i32, i32* @y.64
  %4896 = sub i32 %4894, 1
  %4897 = mul i32 %4894, %4896
  %4898 = urem i32 %4897, 2
  %4899 = icmp eq i32 %4898, 0
  %4900 = icmp slt i32 %4895, 10
  %4901 = or i1 %4899, %4900
  br i1 %4901, label %originalBBpart21463, label %originalBB1454alteredBB

originalBBpart21463:                              ; preds = %originalBB1454
  br label %4902, !dbg !5162

4902:                                             ; preds = %originalBBpart21463
  %4903 = load i32, i32* @x.63
  %4904 = load i32, i32* @y.64
  %4905 = sub i32 %4903, 1
  %4906 = mul i32 %4903, %4905
  %4907 = urem i32 %4906, 2
  %4908 = icmp eq i32 %4907, 0
  %4909 = icmp slt i32 %4904, 10
  %4910 = or i1 %4908, %4909
  br i1 %4910, label %originalBB1465, label %originalBB1465alteredBB

originalBB1465:                                   ; preds = %4902, %originalBB1465alteredBB
  %4911 = load i8, i8* %39, align 1, !dbg !5163
  %4912 = zext i8 %4911 to i32, !dbg !5163
  %4913 = and i32 %4912, 7, !dbg !5164
  %4914 = add nsw i32 48, %4913, !dbg !5165
  %4915 = trunc i32 %4914 to i8, !dbg !5166
  store i8 %4915, i8* %39, align 1, !dbg !5167
  %4916 = load i32, i32* @x.63
  %4917 = load i32, i32* @y.64
  %4918 = sub i32 %4916, 1
  %4919 = mul i32 %4916, %4918
  %4920 = urem i32 %4919, 2
  %4921 = icmp eq i32 %4920, 0
  %4922 = icmp slt i32 %4917, 10
  %4923 = or i1 %4921, %4922
  br i1 %4923, label %originalBBpart21484, label %originalBB1465alteredBB

originalBBpart21484:                              ; preds = %originalBB1465
  br label %5053, !dbg !5168

4924:                                             ; preds = %originalBBpart21236, %originalBBpart21232
  %4925 = load i32, i32* @x.63
  %4926 = load i32, i32* @y.64
  %4927 = sub i32 %4925, 1
  %4928 = mul i32 %4925, %4927
  %4929 = urem i32 %4928, 2
  %4930 = icmp eq i32 %4929, 0
  %4931 = icmp slt i32 %4926, 10
  %4932 = or i1 %4930, %4931
  br i1 %4932, label %originalBB1486, label %originalBB1486alteredBB

originalBB1486:                                   ; preds = %4924, %originalBB1486alteredBB
  %4933 = load i8, i8* %41, align 1, !dbg !5169
  %4934 = trunc i8 %4933 to i1, !dbg !5169
  %4935 = load i32, i32* @x.63
  %4936 = load i32, i32* @y.64
  %4937 = sub i32 %4935, 1
  %4938 = mul i32 %4935, %4937
  %4939 = urem i32 %4938, 2
  %4940 = icmp eq i32 %4939, 0
  %4941 = icmp slt i32 %4936, 10
  %4942 = or i1 %4940, %4941
  br i1 %4942, label %originalBBpart21488, label %originalBB1486alteredBB

originalBBpart21488:                              ; preds = %originalBB1486
  br i1 %4934, label %4943, label %5036, !dbg !5171

4943:                                             ; preds = %originalBBpart21488
  %4944 = load i32, i32* @x.63
  %4945 = load i32, i32* @y.64
  %4946 = sub i32 %4944, 1
  %4947 = mul i32 %4944, %4946
  %4948 = urem i32 %4947, 2
  %4949 = icmp eq i32 %4948, 0
  %4950 = icmp slt i32 %4945, 10
  %4951 = or i1 %4949, %4950
  br i1 %4951, label %originalBB1490, label %originalBB1490alteredBB

originalBB1490:                                   ; preds = %4943, %originalBB1490alteredBB
  %4952 = load i32, i32* @x.63
  %4953 = load i32, i32* @y.64
  %4954 = sub i32 %4952, 1
  %4955 = mul i32 %4952, %4954
  %4956 = urem i32 %4955, 2
  %4957 = icmp eq i32 %4956, 0
  %4958 = icmp slt i32 %4953, 10
  %4959 = or i1 %4957, %4958
  br i1 %4959, label %originalBBpart21492, label %originalBB1490alteredBB

originalBBpart21492:                              ; preds = %originalBB1490
  br label %4960, !dbg !5172

4960:                                             ; preds = %originalBBpart21492
  %4961 = load i32, i32* @x.63
  %4962 = load i32, i32* @y.64
  %4963 = sub i32 %4961, 1
  %4964 = mul i32 %4961, %4963
  %4965 = urem i32 %4964, 2
  %4966 = icmp eq i32 %4965, 0
  %4967 = icmp slt i32 %4962, 10
  %4968 = or i1 %4966, %4967
  br i1 %4968, label %originalBB1494, label %originalBB1494alteredBB

originalBB1494:                                   ; preds = %4960, %originalBB1494alteredBB
  %4969 = load i64, i64* %29, align 8, !dbg !5174
  %4970 = load i64, i64* %20, align 8, !dbg !5174
  %4971 = icmp ult i64 %4969, %4970, !dbg !5174
  %4972 = load i32, i32* @x.63
  %4973 = load i32, i32* @y.64
  %4974 = sub i32 %4972, 1
  %4975 = mul i32 %4972, %4974
  %4976 = urem i32 %4975, 2
  %4977 = icmp eq i32 %4976, 0
  %4978 = icmp slt i32 %4973, 10
  %4979 = or i1 %4977, %4978
  br i1 %4979, label %originalBBpart21496, label %originalBB1494alteredBB

originalBBpart21496:                              ; preds = %originalBB1494
  br i1 %4971, label %4980, label %5000, !dbg !5177

4980:                                             ; preds = %originalBBpart21496
  %4981 = load i32, i32* @x.63
  %4982 = load i32, i32* @y.64
  %4983 = sub i32 %4981, 1
  %4984 = mul i32 %4981, %4983
  %4985 = urem i32 %4984, 2
  %4986 = icmp eq i32 %4985, 0
  %4987 = icmp slt i32 %4982, 10
  %4988 = or i1 %4986, %4987
  br i1 %4988, label %originalBB1498, label %originalBB1498alteredBB

originalBB1498:                                   ; preds = %4980, %originalBB1498alteredBB
  %4989 = load i8*, i8** %19, align 8, !dbg !5174
  %4990 = load i64, i64* %29, align 8, !dbg !5174
  %4991 = getelementptr inbounds i8, i8* %4989, i64 %4990, !dbg !5174
  store i8 92, i8* %4991, align 1, !dbg !5174
  %4992 = load i32, i32* @x.63
  %4993 = load i32, i32* @y.64
  %4994 = sub i32 %4992, 1
  %4995 = mul i32 %4992, %4994
  %4996 = urem i32 %4995, 2
  %4997 = icmp eq i32 %4996, 0
  %4998 = icmp slt i32 %4993, 10
  %4999 = or i1 %4997, %4998
  br i1 %4999, label %originalBBpart21500, label %originalBB1498alteredBB

originalBBpart21500:                              ; preds = %originalBB1498
  br label %5000, !dbg !5174

5000:                                             ; preds = %originalBBpart21500, %originalBBpart21496
  %5001 = load i32, i32* @x.63
  %5002 = load i32, i32* @y.64
  %5003 = sub i32 %5001, 1
  %5004 = mul i32 %5001, %5003
  %5005 = urem i32 %5004, 2
  %5006 = icmp eq i32 %5005, 0
  %5007 = icmp slt i32 %5002, 10
  %5008 = or i1 %5006, %5007
  br i1 %5008, label %originalBB1502, label %originalBB1502alteredBB

originalBB1502:                                   ; preds = %5000, %originalBB1502alteredBB
  %5009 = load i64, i64* %29, align 8, !dbg !5177
  %5010 = add i64 %5009, 1, !dbg !5177
  store i64 %5010, i64* %29, align 8, !dbg !5177
  %5011 = load i32, i32* @x.63
  %5012 = load i32, i32* @y.64
  %5013 = sub i32 %5011, 1
  %5014 = mul i32 %5011, %5013
  %5015 = urem i32 %5014, 2
  %5016 = icmp eq i32 %5015, 0
  %5017 = icmp slt i32 %5012, 10
  %5018 = or i1 %5016, %5017
  br i1 %5018, label %originalBBpart21520, label %originalBB1502alteredBB

originalBBpart21520:                              ; preds = %originalBB1502
  br label %5019, !dbg !5177

5019:                                             ; preds = %originalBBpart21520
  %5020 = load i32, i32* @x.63
  %5021 = load i32, i32* @y.64
  %5022 = sub i32 %5020, 1
  %5023 = mul i32 %5020, %5022
  %5024 = urem i32 %5023, 2
  %5025 = icmp eq i32 %5024, 0
  %5026 = icmp slt i32 %5021, 10
  %5027 = or i1 %5025, %5026
  br i1 %5027, label %originalBB1522, label %originalBB1522alteredBB

originalBB1522:                                   ; preds = %5019, %originalBB1522alteredBB
  store i8 0, i8* %41, align 1, !dbg !5178
  %5028 = load i32, i32* @x.63
  %5029 = load i32, i32* @y.64
  %5030 = sub i32 %5028, 1
  %5031 = mul i32 %5028, %5030
  %5032 = urem i32 %5031, 2
  %5033 = icmp eq i32 %5032, 0
  %5034 = icmp slt i32 %5029, 10
  %5035 = or i1 %5033, %5034
  br i1 %5035, label %originalBBpart21524, label %originalBB1522alteredBB

originalBBpart21524:                              ; preds = %originalBB1522
  br label %5036, !dbg !5179

5036:                                             ; preds = %originalBBpart21524, %originalBBpart21488
  %5037 = load i32, i32* @x.63
  %5038 = load i32, i32* @y.64
  %5039 = sub i32 %5037, 1
  %5040 = mul i32 %5037, %5039
  %5041 = urem i32 %5040, 2
  %5042 = icmp eq i32 %5041, 0
  %5043 = icmp slt i32 %5038, 10
  %5044 = or i1 %5042, %5043
  br i1 %5044, label %originalBB1526, label %originalBB1526alteredBB

originalBB1526:                                   ; preds = %5036, %originalBB1526alteredBB
  %5045 = load i32, i32* @x.63
  %5046 = load i32, i32* @y.64
  %5047 = sub i32 %5045, 1
  %5048 = mul i32 %5045, %5047
  %5049 = urem i32 %5048, 2
  %5050 = icmp eq i32 %5049, 0
  %5051 = icmp slt i32 %5046, 10
  %5052 = or i1 %5050, %5051
  br i1 %5052, label %originalBBpart21528, label %originalBB1526alteredBB

originalBBpart21528:                              ; preds = %originalBB1526
  br label %5053

5053:                                             ; preds = %originalBBpart21528, %originalBBpart21484
  %5054 = load i32, i32* @x.63
  %5055 = load i32, i32* @y.64
  %5056 = sub i32 %5054, 1
  %5057 = mul i32 %5054, %5056
  %5058 = urem i32 %5057, 2
  %5059 = icmp eq i32 %5058, 0
  %5060 = icmp slt i32 %5055, 10
  %5061 = or i1 %5059, %5060
  br i1 %5061, label %originalBB1530, label %originalBB1530alteredBB

originalBB1530:                                   ; preds = %5053, %originalBB1530alteredBB
  %5062 = load i64, i64* %50, align 8, !dbg !5180
  %5063 = load i64, i64* %28, align 8, !dbg !5182
  %5064 = add i64 %5063, 1, !dbg !5183
  %5065 = icmp ule i64 %5062, %5064, !dbg !5184
  %5066 = load i32, i32* @x.63
  %5067 = load i32, i32* @y.64
  %5068 = sub i32 %5066, 1
  %5069 = mul i32 %5066, %5068
  %5070 = urem i32 %5069, 2
  %5071 = icmp eq i32 %5070, 0
  %5072 = icmp slt i32 %5067, 10
  %5073 = or i1 %5071, %5072
  br i1 %5073, label %originalBBpart21536, label %originalBB1530alteredBB

originalBBpart21536:                              ; preds = %originalBB1530
  br i1 %5065, label %5074, label %5091, !dbg !5185

5074:                                             ; preds = %originalBBpart21536
  %5075 = load i32, i32* @x.63
  %5076 = load i32, i32* @y.64
  %5077 = sub i32 %5075, 1
  %5078 = mul i32 %5075, %5077
  %5079 = urem i32 %5078, 2
  %5080 = icmp eq i32 %5079, 0
  %5081 = icmp slt i32 %5076, 10
  %5082 = or i1 %5080, %5081
  br i1 %5082, label %originalBB1538, label %originalBB1538alteredBB

originalBB1538:                                   ; preds = %5074, %originalBB1538alteredBB
  %5083 = load i32, i32* @x.63
  %5084 = load i32, i32* @y.64
  %5085 = sub i32 %5083, 1
  %5086 = mul i32 %5083, %5085
  %5087 = urem i32 %5086, 2
  %5088 = icmp eq i32 %5087, 0
  %5089 = icmp slt i32 %5084, 10
  %5090 = or i1 %5088, %5089
  br i1 %5090, label %originalBBpart21540, label %originalBB1538alteredBB

originalBBpart21540:                              ; preds = %originalBB1538
  br label %5431, !dbg !5186

5091:                                             ; preds = %originalBBpart21536
  %5092 = load i32, i32* @x.63
  %5093 = load i32, i32* @y.64
  %5094 = sub i32 %5092, 1
  %5095 = mul i32 %5092, %5094
  %5096 = urem i32 %5095, 2
  %5097 = icmp eq i32 %5096, 0
  %5098 = icmp slt i32 %5093, 10
  %5099 = or i1 %5097, %5098
  br i1 %5099, label %originalBB1542, label %originalBB1542alteredBB

originalBB1542:                                   ; preds = %5091, %originalBB1542alteredBB
  %5100 = load i32, i32* @x.63
  %5101 = load i32, i32* @y.64
  %5102 = sub i32 %5100, 1
  %5103 = mul i32 %5100, %5102
  %5104 = urem i32 %5103, 2
  %5105 = icmp eq i32 %5104, 0
  %5106 = icmp slt i32 %5101, 10
  %5107 = or i1 %5105, %5106
  br i1 %5107, label %originalBBpart21544, label %originalBB1542alteredBB

originalBBpart21544:                              ; preds = %originalBB1542
  br label %5108, !dbg !5187

5108:                                             ; preds = %originalBBpart21544
  %5109 = load i32, i32* @x.63
  %5110 = load i32, i32* @y.64
  %5111 = sub i32 %5109, 1
  %5112 = mul i32 %5109, %5111
  %5113 = urem i32 %5112, 2
  %5114 = icmp eq i32 %5113, 0
  %5115 = icmp slt i32 %5110, 10
  %5116 = or i1 %5114, %5115
  br i1 %5116, label %originalBB1546, label %originalBB1546alteredBB

originalBB1546:                                   ; preds = %5108, %originalBB1546alteredBB
  %5117 = load i8, i8* %36, align 1, !dbg !5188
  %5118 = trunc i8 %5117 to i1, !dbg !5188
  %5119 = load i32, i32* @x.63
  %5120 = load i32, i32* @y.64
  %5121 = sub i32 %5119, 1
  %5122 = mul i32 %5119, %5121
  %5123 = urem i32 %5122, 2
  %5124 = icmp eq i32 %5123, 0
  %5125 = icmp slt i32 %5120, 10
  %5126 = or i1 %5124, %5125
  br i1 %5126, label %originalBBpart21548, label %originalBB1546alteredBB

originalBBpart21548:                              ; preds = %originalBB1546
  br i1 %5118, label %5127, label %5315, !dbg !5188

5127:                                             ; preds = %originalBBpart21548
  %5128 = load i32, i32* @x.63
  %5129 = load i32, i32* @y.64
  %5130 = sub i32 %5128, 1
  %5131 = mul i32 %5128, %5130
  %5132 = urem i32 %5131, 2
  %5133 = icmp eq i32 %5132, 0
  %5134 = icmp slt i32 %5129, 10
  %5135 = or i1 %5133, %5134
  br i1 %5135, label %originalBB1550, label %originalBB1550alteredBB

originalBB1550:                                   ; preds = %5127, %originalBB1550alteredBB
  %5136 = load i8, i8* %42, align 1, !dbg !5188
  %5137 = trunc i8 %5136 to i1, !dbg !5188
  %5138 = load i32, i32* @x.63
  %5139 = load i32, i32* @y.64
  %5140 = sub i32 %5138, 1
  %5141 = mul i32 %5138, %5140
  %5142 = urem i32 %5141, 2
  %5143 = icmp eq i32 %5142, 0
  %5144 = icmp slt i32 %5139, 10
  %5145 = or i1 %5143, %5144
  br i1 %5145, label %originalBBpart21552, label %originalBB1550alteredBB

originalBBpart21552:                              ; preds = %originalBB1550
  br i1 %5137, label %5315, label %5146, !dbg !5191

5146:                                             ; preds = %originalBBpart21552
  %5147 = load i32, i32* @x.63
  %5148 = load i32, i32* @y.64
  %5149 = sub i32 %5147, 1
  %5150 = mul i32 %5147, %5149
  %5151 = urem i32 %5150, 2
  %5152 = icmp eq i32 %5151, 0
  %5153 = icmp slt i32 %5148, 10
  %5154 = or i1 %5152, %5153
  br i1 %5154, label %originalBB1554, label %originalBB1554alteredBB

originalBB1554:                                   ; preds = %5146, %originalBB1554alteredBB
  %5155 = load i32, i32* @x.63
  %5156 = load i32, i32* @y.64
  %5157 = sub i32 %5155, 1
  %5158 = mul i32 %5155, %5157
  %5159 = urem i32 %5158, 2
  %5160 = icmp eq i32 %5159, 0
  %5161 = icmp slt i32 %5156, 10
  %5162 = or i1 %5160, %5161
  br i1 %5162, label %originalBBpart21556, label %originalBB1554alteredBB

originalBBpart21556:                              ; preds = %originalBB1554
  br label %5163, !dbg !5192

5163:                                             ; preds = %originalBBpart21556
  %5164 = load i32, i32* @x.63
  %5165 = load i32, i32* @y.64
  %5166 = sub i32 %5164, 1
  %5167 = mul i32 %5164, %5166
  %5168 = urem i32 %5167, 2
  %5169 = icmp eq i32 %5168, 0
  %5170 = icmp slt i32 %5165, 10
  %5171 = or i1 %5169, %5170
  br i1 %5171, label %originalBB1558, label %originalBB1558alteredBB

originalBB1558:                                   ; preds = %5163, %originalBB1558alteredBB
  %5172 = load i64, i64* %29, align 8, !dbg !5194
  %5173 = load i64, i64* %20, align 8, !dbg !5194
  %5174 = icmp ult i64 %5172, %5173, !dbg !5194
  %5175 = load i32, i32* @x.63
  %5176 = load i32, i32* @y.64
  %5177 = sub i32 %5175, 1
  %5178 = mul i32 %5175, %5177
  %5179 = urem i32 %5178, 2
  %5180 = icmp eq i32 %5179, 0
  %5181 = icmp slt i32 %5176, 10
  %5182 = or i1 %5180, %5181
  br i1 %5182, label %originalBBpart21560, label %originalBB1558alteredBB

originalBBpart21560:                              ; preds = %originalBB1558
  br i1 %5174, label %5183, label %5203, !dbg !5197

5183:                                             ; preds = %originalBBpart21560
  %5184 = load i32, i32* @x.63
  %5185 = load i32, i32* @y.64
  %5186 = sub i32 %5184, 1
  %5187 = mul i32 %5184, %5186
  %5188 = urem i32 %5187, 2
  %5189 = icmp eq i32 %5188, 0
  %5190 = icmp slt i32 %5185, 10
  %5191 = or i1 %5189, %5190
  br i1 %5191, label %originalBB1562, label %originalBB1562alteredBB

originalBB1562:                                   ; preds = %5183, %originalBB1562alteredBB
  %5192 = load i8*, i8** %19, align 8, !dbg !5194
  %5193 = load i64, i64* %29, align 8, !dbg !5194
  %5194 = getelementptr inbounds i8, i8* %5192, i64 %5193, !dbg !5194
  store i8 39, i8* %5194, align 1, !dbg !5194
  %5195 = load i32, i32* @x.63
  %5196 = load i32, i32* @y.64
  %5197 = sub i32 %5195, 1
  %5198 = mul i32 %5195, %5197
  %5199 = urem i32 %5198, 2
  %5200 = icmp eq i32 %5199, 0
  %5201 = icmp slt i32 %5196, 10
  %5202 = or i1 %5200, %5201
  br i1 %5202, label %originalBBpart21564, label %originalBB1562alteredBB

originalBBpart21564:                              ; preds = %originalBB1562
  br label %5203, !dbg !5194

5203:                                             ; preds = %originalBBpart21564, %originalBBpart21560
  %5204 = load i32, i32* @x.63
  %5205 = load i32, i32* @y.64
  %5206 = sub i32 %5204, 1
  %5207 = mul i32 %5204, %5206
  %5208 = urem i32 %5207, 2
  %5209 = icmp eq i32 %5208, 0
  %5210 = icmp slt i32 %5205, 10
  %5211 = or i1 %5209, %5210
  br i1 %5211, label %originalBB1566, label %originalBB1566alteredBB

originalBB1566:                                   ; preds = %5203, %originalBB1566alteredBB
  %5212 = load i64, i64* %29, align 8, !dbg !5197
  %5213 = add i64 %5212, 1, !dbg !5197
  store i64 %5213, i64* %29, align 8, !dbg !5197
  %5214 = load i32, i32* @x.63
  %5215 = load i32, i32* @y.64
  %5216 = sub i32 %5214, 1
  %5217 = mul i32 %5214, %5216
  %5218 = urem i32 %5217, 2
  %5219 = icmp eq i32 %5218, 0
  %5220 = icmp slt i32 %5215, 10
  %5221 = or i1 %5219, %5220
  br i1 %5221, label %originalBBpart21577, label %originalBB1566alteredBB

originalBBpart21577:                              ; preds = %originalBB1566
  br label %5222, !dbg !5197

5222:                                             ; preds = %originalBBpart21577
  %5223 = load i32, i32* @x.63
  %5224 = load i32, i32* @y.64
  %5225 = sub i32 %5223, 1
  %5226 = mul i32 %5223, %5225
  %5227 = urem i32 %5226, 2
  %5228 = icmp eq i32 %5227, 0
  %5229 = icmp slt i32 %5224, 10
  %5230 = or i1 %5228, %5229
  br i1 %5230, label %originalBB1579, label %originalBB1579alteredBB

originalBB1579:                                   ; preds = %5222, %originalBB1579alteredBB
  %5231 = load i32, i32* @x.63
  %5232 = load i32, i32* @y.64
  %5233 = sub i32 %5231, 1
  %5234 = mul i32 %5231, %5233
  %5235 = urem i32 %5234, 2
  %5236 = icmp eq i32 %5235, 0
  %5237 = icmp slt i32 %5232, 10
  %5238 = or i1 %5236, %5237
  br i1 %5238, label %originalBBpart21581, label %originalBB1579alteredBB

originalBBpart21581:                              ; preds = %originalBB1579
  br label %5239, !dbg !5192

5239:                                             ; preds = %originalBBpart21581
  %5240 = load i32, i32* @x.63
  %5241 = load i32, i32* @y.64
  %5242 = sub i32 %5240, 1
  %5243 = mul i32 %5240, %5242
  %5244 = urem i32 %5243, 2
  %5245 = icmp eq i32 %5244, 0
  %5246 = icmp slt i32 %5241, 10
  %5247 = or i1 %5245, %5246
  br i1 %5247, label %originalBB1583, label %originalBB1583alteredBB

originalBB1583:                                   ; preds = %5239, %originalBB1583alteredBB
  %5248 = load i64, i64* %29, align 8, !dbg !5198
  %5249 = load i64, i64* %20, align 8, !dbg !5198
  %5250 = icmp ult i64 %5248, %5249, !dbg !5198
  %5251 = load i32, i32* @x.63
  %5252 = load i32, i32* @y.64
  %5253 = sub i32 %5251, 1
  %5254 = mul i32 %5251, %5253
  %5255 = urem i32 %5254, 2
  %5256 = icmp eq i32 %5255, 0
  %5257 = icmp slt i32 %5252, 10
  %5258 = or i1 %5256, %5257
  br i1 %5258, label %originalBBpart21585, label %originalBB1583alteredBB

originalBBpart21585:                              ; preds = %originalBB1583
  br i1 %5250, label %5259, label %5279, !dbg !5201

5259:                                             ; preds = %originalBBpart21585
  %5260 = load i32, i32* @x.63
  %5261 = load i32, i32* @y.64
  %5262 = sub i32 %5260, 1
  %5263 = mul i32 %5260, %5262
  %5264 = urem i32 %5263, 2
  %5265 = icmp eq i32 %5264, 0
  %5266 = icmp slt i32 %5261, 10
  %5267 = or i1 %5265, %5266
  br i1 %5267, label %originalBB1587, label %originalBB1587alteredBB

originalBB1587:                                   ; preds = %5259, %originalBB1587alteredBB
  %5268 = load i8*, i8** %19, align 8, !dbg !5198
  %5269 = load i64, i64* %29, align 8, !dbg !5198
  %5270 = getelementptr inbounds i8, i8* %5268, i64 %5269, !dbg !5198
  store i8 39, i8* %5270, align 1, !dbg !5198
  %5271 = load i32, i32* @x.63
  %5272 = load i32, i32* @y.64
  %5273 = sub i32 %5271, 1
  %5274 = mul i32 %5271, %5273
  %5275 = urem i32 %5274, 2
  %5276 = icmp eq i32 %5275, 0
  %5277 = icmp slt i32 %5272, 10
  %5278 = or i1 %5276, %5277
  br i1 %5278, label %originalBBpart21589, label %originalBB1587alteredBB

originalBBpart21589:                              ; preds = %originalBB1587
  br label %5279, !dbg !5198

5279:                                             ; preds = %originalBBpart21589, %originalBBpart21585
  %5280 = load i32, i32* @x.63
  %5281 = load i32, i32* @y.64
  %5282 = sub i32 %5280, 1
  %5283 = mul i32 %5280, %5282
  %5284 = urem i32 %5283, 2
  %5285 = icmp eq i32 %5284, 0
  %5286 = icmp slt i32 %5281, 10
  %5287 = or i1 %5285, %5286
  br i1 %5287, label %originalBB1591, label %originalBB1591alteredBB

originalBB1591:                                   ; preds = %5279, %originalBB1591alteredBB
  %5288 = load i64, i64* %29, align 8, !dbg !5201
  %5289 = add i64 %5288, 1, !dbg !5201
  store i64 %5289, i64* %29, align 8, !dbg !5201
  %5290 = load i32, i32* @x.63
  %5291 = load i32, i32* @y.64
  %5292 = sub i32 %5290, 1
  %5293 = mul i32 %5290, %5292
  %5294 = urem i32 %5293, 2
  %5295 = icmp eq i32 %5294, 0
  %5296 = icmp slt i32 %5291, 10
  %5297 = or i1 %5295, %5296
  br i1 %5297, label %originalBBpart21599, label %originalBB1591alteredBB

originalBBpart21599:                              ; preds = %originalBB1591
  br label %5298, !dbg !5201

5298:                                             ; preds = %originalBBpart21599
  %5299 = load i32, i32* @x.63
  %5300 = load i32, i32* @y.64
  %5301 = sub i32 %5299, 1
  %5302 = mul i32 %5299, %5301
  %5303 = urem i32 %5302, 2
  %5304 = icmp eq i32 %5303, 0
  %5305 = icmp slt i32 %5300, 10
  %5306 = or i1 %5304, %5305
  br i1 %5306, label %originalBB1601, label %originalBB1601alteredBB

originalBB1601:                                   ; preds = %5298, %originalBB1601alteredBB
  store i8 0, i8* %36, align 1, !dbg !5192
  %5307 = load i32, i32* @x.63
  %5308 = load i32, i32* @y.64
  %5309 = sub i32 %5307, 1
  %5310 = mul i32 %5307, %5309
  %5311 = urem i32 %5310, 2
  %5312 = icmp eq i32 %5311, 0
  %5313 = icmp slt i32 %5308, 10
  %5314 = or i1 %5312, %5313
  br i1 %5314, label %originalBBpart21603, label %originalBB1601alteredBB

originalBBpart21603:                              ; preds = %originalBB1601
  br label %5315, !dbg !5192

5315:                                             ; preds = %originalBBpart21603, %originalBBpart21552, %originalBBpart21548
  %5316 = load i32, i32* @x.63
  %5317 = load i32, i32* @y.64
  %5318 = sub i32 %5316, 1
  %5319 = mul i32 %5316, %5318
  %5320 = urem i32 %5319, 2
  %5321 = icmp eq i32 %5320, 0
  %5322 = icmp slt i32 %5317, 10
  %5323 = or i1 %5321, %5322
  br i1 %5323, label %originalBB1605, label %originalBB1605alteredBB

originalBB1605:                                   ; preds = %5315, %originalBB1605alteredBB
  %5324 = load i32, i32* @x.63
  %5325 = load i32, i32* @y.64
  %5326 = sub i32 %5324, 1
  %5327 = mul i32 %5324, %5326
  %5328 = urem i32 %5327, 2
  %5329 = icmp eq i32 %5328, 0
  %5330 = icmp slt i32 %5325, 10
  %5331 = or i1 %5329, %5330
  br i1 %5331, label %originalBBpart21607, label %originalBB1605alteredBB

originalBBpart21607:                              ; preds = %originalBB1605
  br label %5332, !dbg !5191

5332:                                             ; preds = %originalBBpart21607
  %5333 = load i32, i32* @x.63
  %5334 = load i32, i32* @y.64
  %5335 = sub i32 %5333, 1
  %5336 = mul i32 %5333, %5335
  %5337 = urem i32 %5336, 2
  %5338 = icmp eq i32 %5337, 0
  %5339 = icmp slt i32 %5334, 10
  %5340 = or i1 %5338, %5339
  br i1 %5340, label %originalBB1609, label %originalBB1609alteredBB

originalBB1609:                                   ; preds = %5332, %originalBB1609alteredBB
  %5341 = load i32, i32* @x.63
  %5342 = load i32, i32* @y.64
  %5343 = sub i32 %5341, 1
  %5344 = mul i32 %5341, %5343
  %5345 = urem i32 %5344, 2
  %5346 = icmp eq i32 %5345, 0
  %5347 = icmp slt i32 %5342, 10
  %5348 = or i1 %5346, %5347
  br i1 %5348, label %originalBBpart21611, label %originalBB1609alteredBB

originalBBpart21611:                              ; preds = %originalBB1609
  br label %5349, !dbg !5202

5349:                                             ; preds = %originalBBpart21611
  %5350 = load i32, i32* @x.63
  %5351 = load i32, i32* @y.64
  %5352 = sub i32 %5350, 1
  %5353 = mul i32 %5350, %5352
  %5354 = urem i32 %5353, 2
  %5355 = icmp eq i32 %5354, 0
  %5356 = icmp slt i32 %5351, 10
  %5357 = or i1 %5355, %5356
  br i1 %5357, label %originalBB1613, label %originalBB1613alteredBB

originalBB1613:                                   ; preds = %5349, %originalBB1613alteredBB
  %5358 = load i64, i64* %29, align 8, !dbg !5203
  %5359 = load i64, i64* %20, align 8, !dbg !5203
  %5360 = icmp ult i64 %5358, %5359, !dbg !5203
  %5361 = load i32, i32* @x.63
  %5362 = load i32, i32* @y.64
  %5363 = sub i32 %5361, 1
  %5364 = mul i32 %5361, %5363
  %5365 = urem i32 %5364, 2
  %5366 = icmp eq i32 %5365, 0
  %5367 = icmp slt i32 %5362, 10
  %5368 = or i1 %5366, %5367
  br i1 %5368, label %originalBBpart21615, label %originalBB1613alteredBB

originalBBpart21615:                              ; preds = %originalBB1613
  br i1 %5360, label %5369, label %5390, !dbg !5206

5369:                                             ; preds = %originalBBpart21615
  %5370 = load i32, i32* @x.63
  %5371 = load i32, i32* @y.64
  %5372 = sub i32 %5370, 1
  %5373 = mul i32 %5370, %5372
  %5374 = urem i32 %5373, 2
  %5375 = icmp eq i32 %5374, 0
  %5376 = icmp slt i32 %5371, 10
  %5377 = or i1 %5375, %5376
  br i1 %5377, label %originalBB1617, label %originalBB1617alteredBB

originalBB1617:                                   ; preds = %5369, %originalBB1617alteredBB
  %5378 = load i8, i8* %39, align 1, !dbg !5203
  %5379 = load i8*, i8** %19, align 8, !dbg !5203
  %5380 = load i64, i64* %29, align 8, !dbg !5203
  %5381 = getelementptr inbounds i8, i8* %5379, i64 %5380, !dbg !5203
  store i8 %5378, i8* %5381, align 1, !dbg !5203
  %5382 = load i32, i32* @x.63
  %5383 = load i32, i32* @y.64
  %5384 = sub i32 %5382, 1
  %5385 = mul i32 %5382, %5384
  %5386 = urem i32 %5385, 2
  %5387 = icmp eq i32 %5386, 0
  %5388 = icmp slt i32 %5383, 10
  %5389 = or i1 %5387, %5388
  br i1 %5389, label %originalBBpart21619, label %originalBB1617alteredBB

originalBBpart21619:                              ; preds = %originalBB1617
  br label %5390, !dbg !5203

5390:                                             ; preds = %originalBBpart21619, %originalBBpart21615
  %5391 = load i32, i32* @x.63
  %5392 = load i32, i32* @y.64
  %5393 = sub i32 %5391, 1
  %5394 = mul i32 %5391, %5393
  %5395 = urem i32 %5394, 2
  %5396 = icmp eq i32 %5395, 0
  %5397 = icmp slt i32 %5392, 10
  %5398 = or i1 %5396, %5397
  br i1 %5398, label %originalBB1621, label %originalBB1621alteredBB

originalBB1621:                                   ; preds = %5390, %originalBB1621alteredBB
  %5399 = load i64, i64* %29, align 8, !dbg !5206
  %5400 = add i64 %5399, 1, !dbg !5206
  store i64 %5400, i64* %29, align 8, !dbg !5206
  %5401 = load i32, i32* @x.63
  %5402 = load i32, i32* @y.64
  %5403 = sub i32 %5401, 1
  %5404 = mul i32 %5401, %5403
  %5405 = urem i32 %5404, 2
  %5406 = icmp eq i32 %5405, 0
  %5407 = icmp slt i32 %5402, 10
  %5408 = or i1 %5406, %5407
  br i1 %5408, label %originalBBpart21625, label %originalBB1621alteredBB

originalBBpart21625:                              ; preds = %originalBB1621
  br label %5409, !dbg !5206

5409:                                             ; preds = %originalBBpart21625
  %5410 = load i32, i32* @x.63
  %5411 = load i32, i32* @y.64
  %5412 = sub i32 %5410, 1
  %5413 = mul i32 %5410, %5412
  %5414 = urem i32 %5413, 2
  %5415 = icmp eq i32 %5414, 0
  %5416 = icmp slt i32 %5411, 10
  %5417 = or i1 %5415, %5416
  br i1 %5417, label %originalBB1627, label %originalBB1627alteredBB

originalBB1627:                                   ; preds = %5409, %originalBB1627alteredBB
  %5418 = load i8*, i8** %21, align 8, !dbg !5207
  %5419 = load i64, i64* %28, align 8, !dbg !5208
  %5420 = add i64 %5419, 1, !dbg !5208
  store i64 %5420, i64* %28, align 8, !dbg !5208
  %5421 = getelementptr inbounds i8, i8* %5418, i64 %5420, !dbg !5207
  %5422 = load i8, i8* %5421, align 1, !dbg !5207
  store i8 %5422, i8* %39, align 1, !dbg !5209
  %5423 = load i32, i32* @x.63
  %5424 = load i32, i32* @y.64
  %5425 = sub i32 %5423, 1
  %5426 = mul i32 %5423, %5425
  %5427 = urem i32 %5426, 2
  %5428 = icmp eq i32 %5427, 0
  %5429 = icmp slt i32 %5424, 10
  %5430 = or i1 %5428, %5429
  br i1 %5430, label %originalBBpart21636, label %originalBB1627alteredBB

originalBBpart21636:                              ; preds = %originalBB1627
  br label %4272, !dbg !5210, !llvm.loop !5211

5431:                                             ; preds = %originalBBpart21540
  %5432 = load i32, i32* @x.63
  %5433 = load i32, i32* @y.64
  %5434 = sub i32 %5432, 1
  %5435 = mul i32 %5432, %5434
  %5436 = urem i32 %5435, 2
  %5437 = icmp eq i32 %5436, 0
  %5438 = icmp slt i32 %5433, 10
  %5439 = or i1 %5437, %5438
  br i1 %5439, label %originalBB1638, label %originalBB1638alteredBB

originalBB1638:                                   ; preds = %5431, %originalBB1638alteredBB
  %5440 = load i32, i32* @x.63
  %5441 = load i32, i32* @y.64
  %5442 = sub i32 %5440, 1
  %5443 = mul i32 %5440, %5442
  %5444 = urem i32 %5443, 2
  %5445 = icmp eq i32 %5444, 0
  %5446 = icmp slt i32 %5441, 10
  %5447 = or i1 %5445, %5446
  br i1 %5447, label %originalBBpart21640, label %originalBB1638alteredBB

originalBBpart21640:                              ; preds = %originalBB1638
  br label %6070, !dbg !5214

5448:                                             ; preds = %originalBBpart21212, %originalBBpart21208
  %5449 = load i32, i32* @x.63
  %5450 = load i32, i32* @y.64
  %5451 = sub i32 %5449, 1
  %5452 = mul i32 %5449, %5451
  %5453 = urem i32 %5452, 2
  %5454 = icmp eq i32 %5453, 0
  %5455 = icmp slt i32 %5450, 10
  %5456 = or i1 %5454, %5455
  br i1 %5456, label %originalBB1642, label %originalBB1642alteredBB

originalBB1642:                                   ; preds = %5448, %originalBB1642alteredBB
  %5457 = load i32, i32* @x.63
  %5458 = load i32, i32* @y.64
  %5459 = sub i32 %5457, 1
  %5460 = mul i32 %5457, %5459
  %5461 = urem i32 %5460, 2
  %5462 = icmp eq i32 %5461, 0
  %5463 = icmp slt i32 %5458, 10
  %5464 = or i1 %5462, %5463
  br i1 %5464, label %originalBBpart21644, label %originalBB1642alteredBB

originalBBpart21644:                              ; preds = %originalBB1642
  br label %5465, !dbg !5215

5465:                                             ; preds = %originalBBpart21644, %originalBBpart2960, %originalBBpart2956, %originalBBpart2858, %originalBBpart2834, %originalBBpart2822, %originalBBpart2806, %originalBBpart2714, %originalBBpart2515
  %5466 = load i32, i32* @x.63
  %5467 = load i32, i32* @y.64
  %5468 = sub i32 %5466, 1
  %5469 = mul i32 %5466, %5468
  %5470 = urem i32 %5469, 2
  %5471 = icmp eq i32 %5470, 0
  %5472 = icmp slt i32 %5467, 10
  %5473 = or i1 %5471, %5472
  br i1 %5473, label %originalBB1646, label %originalBB1646alteredBB

originalBB1646:                                   ; preds = %5465, %originalBB1646alteredBB
  %5474 = load i8, i8* %33, align 1, !dbg !5216
  %5475 = trunc i8 %5474 to i1, !dbg !5216
  %5476 = load i32, i32* @x.63
  %5477 = load i32, i32* @y.64
  %5478 = sub i32 %5476, 1
  %5479 = mul i32 %5476, %5478
  %5480 = urem i32 %5479, 2
  %5481 = icmp eq i32 %5480, 0
  %5482 = icmp slt i32 %5477, 10
  %5483 = or i1 %5481, %5482
  br i1 %5483, label %originalBBpart21648, label %originalBB1646alteredBB

originalBBpart21648:                              ; preds = %originalBB1646
  br i1 %5475, label %5484, label %5503, !dbg !5218

5484:                                             ; preds = %originalBBpart21648
  %5485 = load i32, i32* @x.63
  %5486 = load i32, i32* @y.64
  %5487 = sub i32 %5485, 1
  %5488 = mul i32 %5485, %5487
  %5489 = urem i32 %5488, 2
  %5490 = icmp eq i32 %5489, 0
  %5491 = icmp slt i32 %5486, 10
  %5492 = or i1 %5490, %5491
  br i1 %5492, label %originalBB1650, label %originalBB1650alteredBB

originalBB1650:                                   ; preds = %5484, %originalBB1650alteredBB
  %5493 = load i32, i32* %23, align 4, !dbg !5219
  %5494 = icmp ne i32 %5493, 2, !dbg !5220
  %5495 = load i32, i32* @x.63
  %5496 = load i32, i32* @y.64
  %5497 = sub i32 %5495, 1
  %5498 = mul i32 %5495, %5497
  %5499 = urem i32 %5498, 2
  %5500 = icmp eq i32 %5499, 0
  %5501 = icmp slt i32 %5496, 10
  %5502 = or i1 %5500, %5501
  br i1 %5502, label %originalBBpart21652, label %originalBB1650alteredBB

originalBBpart21652:                              ; preds = %originalBB1650
  br i1 %5494, label %5522, label %5503, !dbg !5221

5503:                                             ; preds = %originalBBpart21652, %originalBBpart21648
  %5504 = load i32, i32* @x.63
  %5505 = load i32, i32* @y.64
  %5506 = sub i32 %5504, 1
  %5507 = mul i32 %5504, %5506
  %5508 = urem i32 %5507, 2
  %5509 = icmp eq i32 %5508, 0
  %5510 = icmp slt i32 %5505, 10
  %5511 = or i1 %5509, %5510
  br i1 %5511, label %originalBB1654, label %originalBB1654alteredBB

originalBB1654:                                   ; preds = %5503, %originalBB1654alteredBB
  %5512 = load i8, i8* %35, align 1, !dbg !5222
  %5513 = trunc i8 %5512 to i1, !dbg !5222
  %5514 = load i32, i32* @x.63
  %5515 = load i32, i32* @y.64
  %5516 = sub i32 %5514, 1
  %5517 = mul i32 %5514, %5516
  %5518 = urem i32 %5517, 2
  %5519 = icmp eq i32 %5518, 0
  %5520 = icmp slt i32 %5515, 10
  %5521 = or i1 %5519, %5520
  br i1 %5521, label %originalBBpart21656, label %originalBB1654alteredBB

originalBBpart21656:                              ; preds = %originalBB1654
  br i1 %5513, label %5522, label %5571, !dbg !5223

5522:                                             ; preds = %originalBBpart21656, %originalBBpart21652
  %5523 = load i32, i32* @x.63
  %5524 = load i32, i32* @y.64
  %5525 = sub i32 %5523, 1
  %5526 = mul i32 %5523, %5525
  %5527 = urem i32 %5526, 2
  %5528 = icmp eq i32 %5527, 0
  %5529 = icmp slt i32 %5524, 10
  %5530 = or i1 %5528, %5529
  br i1 %5530, label %originalBB1658, label %originalBB1658alteredBB

originalBB1658:                                   ; preds = %5522, %originalBB1658alteredBB
  %5531 = load i32*, i32** %25, align 8, !dbg !5224
  %5532 = icmp ne i32* %5531, null, !dbg !5224
  %5533 = load i32, i32* @x.63
  %5534 = load i32, i32* @y.64
  %5535 = sub i32 %5533, 1
  %5536 = mul i32 %5533, %5535
  %5537 = urem i32 %5536, 2
  %5538 = icmp eq i32 %5537, 0
  %5539 = icmp slt i32 %5534, 10
  %5540 = or i1 %5538, %5539
  br i1 %5540, label %originalBBpart21660, label %originalBB1658alteredBB

originalBBpart21660:                              ; preds = %originalBB1658
  br i1 %5532, label %5541, label %5571, !dbg !5225

5541:                                             ; preds = %originalBBpart21660
  %5542 = load i32, i32* @x.63
  %5543 = load i32, i32* @y.64
  %5544 = sub i32 %5542, 1
  %5545 = mul i32 %5542, %5544
  %5546 = urem i32 %5545, 2
  %5547 = icmp eq i32 %5546, 0
  %5548 = icmp slt i32 %5543, 10
  %5549 = or i1 %5547, %5548
  br i1 %5549, label %originalBB1662, label %originalBB1662alteredBB

originalBB1662:                                   ; preds = %5541, %originalBB1662alteredBB
  %5550 = load i32*, i32** %25, align 8, !dbg !5226
  %5551 = load i8, i8* %39, align 1, !dbg !5227
  %5552 = zext i8 %5551 to i64, !dbg !5227
  %5553 = udiv i64 %5552, 32, !dbg !5228
  %5554 = getelementptr inbounds i32, i32* %5550, i64 %5553, !dbg !5226
  %5555 = load i32, i32* %5554, align 4, !dbg !5226
  %5556 = load i8, i8* %39, align 1, !dbg !5229
  %5557 = zext i8 %5556 to i64, !dbg !5229
  %5558 = urem i64 %5557, 32, !dbg !5230
  %5559 = trunc i64 %5558 to i32, !dbg !5231
  %5560 = lshr i32 %5555, %5559, !dbg !5231
  %5561 = and i32 %5560, 1, !dbg !5232
  %5562 = icmp ne i32 %5561, 0, !dbg !5232
  %5563 = load i32, i32* @x.63
  %5564 = load i32, i32* @y.64
  %5565 = sub i32 %5563, 1
  %5566 = mul i32 %5563, %5565
  %5567 = urem i32 %5566, 2
  %5568 = icmp eq i32 %5567, 0
  %5569 = icmp slt i32 %5564, 10
  %5570 = or i1 %5568, %5569
  br i1 %5570, label %originalBBpart21700, label %originalBB1662alteredBB

originalBBpart21700:                              ; preds = %originalBB1662
  br i1 %5562, label %5607, label %5571, !dbg !5233

5571:                                             ; preds = %originalBBpart21700, %originalBBpart21660, %originalBBpart21656
  %5572 = load i32, i32* @x.63
  %5573 = load i32, i32* @y.64
  %5574 = sub i32 %5572, 1
  %5575 = mul i32 %5572, %5574
  %5576 = urem i32 %5575, 2
  %5577 = icmp eq i32 %5576, 0
  %5578 = icmp slt i32 %5573, 10
  %5579 = or i1 %5577, %5578
  br i1 %5579, label %originalBB1702, label %originalBB1702alteredBB

originalBB1702:                                   ; preds = %5571, %originalBB1702alteredBB
  %5580 = load i8, i8* %41, align 1, !dbg !5234
  %5581 = trunc i8 %5580 to i1, !dbg !5234
  %5582 = load i32, i32* @x.63
  %5583 = load i32, i32* @y.64
  %5584 = sub i32 %5582, 1
  %5585 = mul i32 %5582, %5584
  %5586 = urem i32 %5585, 2
  %5587 = icmp eq i32 %5586, 0
  %5588 = icmp slt i32 %5583, 10
  %5589 = or i1 %5587, %5588
  br i1 %5589, label %originalBBpart21704, label %originalBB1702alteredBB

originalBBpart21704:                              ; preds = %originalBB1702
  br i1 %5581, label %5607, label %5590, !dbg !5235

5590:                                             ; preds = %originalBBpart21704
  %5591 = load i32, i32* @x.63
  %5592 = load i32, i32* @y.64
  %5593 = sub i32 %5591, 1
  %5594 = mul i32 %5591, %5593
  %5595 = urem i32 %5594, 2
  %5596 = icmp eq i32 %5595, 0
  %5597 = icmp slt i32 %5592, 10
  %5598 = or i1 %5596, %5597
  br i1 %5598, label %originalBB1706, label %originalBB1706alteredBB

originalBB1706:                                   ; preds = %5590, %originalBB1706alteredBB
  %5599 = load i32, i32* @x.63
  %5600 = load i32, i32* @y.64
  %5601 = sub i32 %5599, 1
  %5602 = mul i32 %5599, %5601
  %5603 = urem i32 %5602, 2
  %5604 = icmp eq i32 %5603, 0
  %5605 = icmp slt i32 %5600, 10
  %5606 = or i1 %5604, %5605
  br i1 %5606, label %originalBBpart21708, label %originalBB1706alteredBB

originalBBpart21708:                              ; preds = %originalBB1706
  br label %6070, !dbg !5236

5607:                                             ; preds = %originalBBpart21704, %originalBBpart21700
  %5608 = load i32, i32* @x.63
  %5609 = load i32, i32* @y.64
  %5610 = sub i32 %5608, 1
  %5611 = mul i32 %5608, %5610
  %5612 = urem i32 %5611, 2
  %5613 = icmp eq i32 %5612, 0
  %5614 = icmp slt i32 %5609, 10
  %5615 = or i1 %5613, %5614
  br i1 %5615, label %originalBB1710, label %originalBB1710alteredBB

originalBB1710:                                   ; preds = %5607, %originalBB1710alteredBB
  %5616 = load i32, i32* @x.63
  %5617 = load i32, i32* @y.64
  %5618 = sub i32 %5616, 1
  %5619 = mul i32 %5616, %5618
  %5620 = urem i32 %5619, 2
  %5621 = icmp eq i32 %5620, 0
  %5622 = icmp slt i32 %5617, 10
  %5623 = or i1 %5621, %5622
  br i1 %5623, label %originalBBpart21712, label %originalBB1710alteredBB

originalBBpart21712:                              ; preds = %originalBB1710
  br label %5624, !dbg !5234

5624:                                             ; preds = %originalBBpart21712, %originalBBpart2802
  call void @llvm.dbg.label(metadata !5237), !dbg !5238
  %5625 = load i32, i32* @x.63
  %5626 = load i32, i32* @y.64
  %5627 = sub i32 %5625, 1
  %5628 = mul i32 %5625, %5627
  %5629 = urem i32 %5628, 2
  %5630 = icmp eq i32 %5629, 0
  %5631 = icmp slt i32 %5626, 10
  %5632 = or i1 %5630, %5631
  br i1 %5632, label %originalBB1714, label %originalBB1714alteredBB

originalBB1714:                                   ; preds = %5624, %originalBB1714alteredBB
  %5633 = load i32, i32* @x.63
  %5634 = load i32, i32* @y.64
  %5635 = sub i32 %5633, 1
  %5636 = mul i32 %5633, %5635
  %5637 = urem i32 %5636, 2
  %5638 = icmp eq i32 %5637, 0
  %5639 = icmp slt i32 %5634, 10
  %5640 = or i1 %5638, %5639
  br i1 %5640, label %originalBBpart21716, label %originalBB1714alteredBB

originalBBpart21716:                              ; preds = %originalBB1714
  br label %5641, !dbg !5239

5641:                                             ; preds = %originalBBpart21716
  %5642 = load i32, i32* @x.63
  %5643 = load i32, i32* @y.64
  %5644 = sub i32 %5642, 1
  %5645 = mul i32 %5642, %5644
  %5646 = urem i32 %5645, 2
  %5647 = icmp eq i32 %5646, 0
  %5648 = icmp slt i32 %5643, 10
  %5649 = or i1 %5647, %5648
  br i1 %5649, label %originalBB1718, label %originalBB1718alteredBB

originalBB1718:                                   ; preds = %5641, %originalBB1718alteredBB
  %5650 = load i8, i8* %35, align 1, !dbg !5240
  %5651 = trunc i8 %5650 to i1, !dbg !5240
  %5652 = load i32, i32* @x.63
  %5653 = load i32, i32* @y.64
  %5654 = sub i32 %5652, 1
  %5655 = mul i32 %5652, %5654
  %5656 = urem i32 %5655, 2
  %5657 = icmp eq i32 %5656, 0
  %5658 = icmp slt i32 %5653, 10
  %5659 = or i1 %5657, %5658
  br i1 %5659, label %originalBBpart21720, label %originalBB1718alteredBB

originalBBpart21720:                              ; preds = %originalBB1718
  br i1 %5651, label %5660, label %5677, !dbg !5243

5660:                                             ; preds = %originalBBpart21720
  %5661 = load i32, i32* @x.63
  %5662 = load i32, i32* @y.64
  %5663 = sub i32 %5661, 1
  %5664 = mul i32 %5661, %5663
  %5665 = urem i32 %5664, 2
  %5666 = icmp eq i32 %5665, 0
  %5667 = icmp slt i32 %5662, 10
  %5668 = or i1 %5666, %5667
  br i1 %5668, label %originalBB1722, label %originalBB1722alteredBB

originalBB1722:                                   ; preds = %5660, %originalBB1722alteredBB
  %5669 = load i32, i32* @x.63
  %5670 = load i32, i32* @y.64
  %5671 = sub i32 %5669, 1
  %5672 = mul i32 %5669, %5671
  %5673 = urem i32 %5672, 2
  %5674 = icmp eq i32 %5673, 0
  %5675 = icmp slt i32 %5670, 10
  %5676 = or i1 %5674, %5675
  br i1 %5676, label %originalBBpart21724, label %originalBB1722alteredBB

originalBBpart21724:                              ; preds = %originalBB1722
  br label %6990, !dbg !5240

5677:                                             ; preds = %originalBBpart21720
  %5678 = load i32, i32* @x.63
  %5679 = load i32, i32* @y.64
  %5680 = sub i32 %5678, 1
  %5681 = mul i32 %5678, %5680
  %5682 = urem i32 %5681, 2
  %5683 = icmp eq i32 %5682, 0
  %5684 = icmp slt i32 %5679, 10
  %5685 = or i1 %5683, %5684
  br i1 %5685, label %originalBB1726, label %originalBB1726alteredBB

originalBB1726:                                   ; preds = %5677, %originalBB1726alteredBB
  store i8 1, i8* %42, align 1, !dbg !5243
  %5686 = load i32, i32* %23, align 4, !dbg !5244
  %5687 = icmp eq i32 %5686, 2, !dbg !5244
  %5688 = load i32, i32* @x.63
  %5689 = load i32, i32* @y.64
  %5690 = sub i32 %5688, 1
  %5691 = mul i32 %5688, %5690
  %5692 = urem i32 %5691, 2
  %5693 = icmp eq i32 %5692, 0
  %5694 = icmp slt i32 %5689, 10
  %5695 = or i1 %5693, %5694
  br i1 %5695, label %originalBBpart21728, label %originalBB1726alteredBB

originalBBpart21728:                              ; preds = %originalBB1726
  br i1 %5687, label %5696, label %5960, !dbg !5244

5696:                                             ; preds = %originalBBpart21728
  %5697 = load i32, i32* @x.63
  %5698 = load i32, i32* @y.64
  %5699 = sub i32 %5697, 1
  %5700 = mul i32 %5697, %5699
  %5701 = urem i32 %5700, 2
  %5702 = icmp eq i32 %5701, 0
  %5703 = icmp slt i32 %5698, 10
  %5704 = or i1 %5702, %5703
  br i1 %5704, label %originalBB1730, label %originalBB1730alteredBB

originalBB1730:                                   ; preds = %5696, %originalBB1730alteredBB
  %5705 = load i8, i8* %36, align 1, !dbg !5244
  %5706 = trunc i8 %5705 to i1, !dbg !5244
  %5707 = load i32, i32* @x.63
  %5708 = load i32, i32* @y.64
  %5709 = sub i32 %5707, 1
  %5710 = mul i32 %5707, %5709
  %5711 = urem i32 %5710, 2
  %5712 = icmp eq i32 %5711, 0
  %5713 = icmp slt i32 %5708, 10
  %5714 = or i1 %5712, %5713
  br i1 %5714, label %originalBBpart21732, label %originalBB1730alteredBB

originalBBpart21732:                              ; preds = %originalBB1730
  br i1 %5706, label %5960, label %5715, !dbg !5243

5715:                                             ; preds = %originalBBpart21732
  %5716 = load i32, i32* @x.63
  %5717 = load i32, i32* @y.64
  %5718 = sub i32 %5716, 1
  %5719 = mul i32 %5716, %5718
  %5720 = urem i32 %5719, 2
  %5721 = icmp eq i32 %5720, 0
  %5722 = icmp slt i32 %5717, 10
  %5723 = or i1 %5721, %5722
  br i1 %5723, label %originalBB1734, label %originalBB1734alteredBB

originalBB1734:                                   ; preds = %5715, %originalBB1734alteredBB
  %5724 = load i32, i32* @x.63
  %5725 = load i32, i32* @y.64
  %5726 = sub i32 %5724, 1
  %5727 = mul i32 %5724, %5726
  %5728 = urem i32 %5727, 2
  %5729 = icmp eq i32 %5728, 0
  %5730 = icmp slt i32 %5725, 10
  %5731 = or i1 %5729, %5730
  br i1 %5731, label %originalBBpart21736, label %originalBB1734alteredBB

originalBBpart21736:                              ; preds = %originalBB1734
  br label %5732, !dbg !5246

5732:                                             ; preds = %originalBBpart21736
  %5733 = load i32, i32* @x.63
  %5734 = load i32, i32* @y.64
  %5735 = sub i32 %5733, 1
  %5736 = mul i32 %5733, %5735
  %5737 = urem i32 %5736, 2
  %5738 = icmp eq i32 %5737, 0
  %5739 = icmp slt i32 %5734, 10
  %5740 = or i1 %5738, %5739
  br i1 %5740, label %originalBB1738, label %originalBB1738alteredBB

originalBB1738:                                   ; preds = %5732, %originalBB1738alteredBB
  %5741 = load i64, i64* %29, align 8, !dbg !5248
  %5742 = load i64, i64* %20, align 8, !dbg !5248
  %5743 = icmp ult i64 %5741, %5742, !dbg !5248
  %5744 = load i32, i32* @x.63
  %5745 = load i32, i32* @y.64
  %5746 = sub i32 %5744, 1
  %5747 = mul i32 %5744, %5746
  %5748 = urem i32 %5747, 2
  %5749 = icmp eq i32 %5748, 0
  %5750 = icmp slt i32 %5745, 10
  %5751 = or i1 %5749, %5750
  br i1 %5751, label %originalBBpart21740, label %originalBB1738alteredBB

originalBBpart21740:                              ; preds = %originalBB1738
  br i1 %5743, label %5752, label %5772, !dbg !5251

5752:                                             ; preds = %originalBBpart21740
  %5753 = load i32, i32* @x.63
  %5754 = load i32, i32* @y.64
  %5755 = sub i32 %5753, 1
  %5756 = mul i32 %5753, %5755
  %5757 = urem i32 %5756, 2
  %5758 = icmp eq i32 %5757, 0
  %5759 = icmp slt i32 %5754, 10
  %5760 = or i1 %5758, %5759
  br i1 %5760, label %originalBB1742, label %originalBB1742alteredBB

originalBB1742:                                   ; preds = %5752, %originalBB1742alteredBB
  %5761 = load i8*, i8** %19, align 8, !dbg !5248
  %5762 = load i64, i64* %29, align 8, !dbg !5248
  %5763 = getelementptr inbounds i8, i8* %5761, i64 %5762, !dbg !5248
  store i8 39, i8* %5763, align 1, !dbg !5248
  %5764 = load i32, i32* @x.63
  %5765 = load i32, i32* @y.64
  %5766 = sub i32 %5764, 1
  %5767 = mul i32 %5764, %5766
  %5768 = urem i32 %5767, 2
  %5769 = icmp eq i32 %5768, 0
  %5770 = icmp slt i32 %5765, 10
  %5771 = or i1 %5769, %5770
  br i1 %5771, label %originalBBpart21744, label %originalBB1742alteredBB

originalBBpart21744:                              ; preds = %originalBB1742
  br label %5772, !dbg !5248

5772:                                             ; preds = %originalBBpart21744, %originalBBpart21740
  %5773 = load i32, i32* @x.63
  %5774 = load i32, i32* @y.64
  %5775 = sub i32 %5773, 1
  %5776 = mul i32 %5773, %5775
  %5777 = urem i32 %5776, 2
  %5778 = icmp eq i32 %5777, 0
  %5779 = icmp slt i32 %5774, 10
  %5780 = or i1 %5778, %5779
  br i1 %5780, label %originalBB1746, label %originalBB1746alteredBB

originalBB1746:                                   ; preds = %5772, %originalBB1746alteredBB
  %5781 = load i64, i64* %29, align 8, !dbg !5251
  %5782 = add i64 %5781, 1, !dbg !5251
  store i64 %5782, i64* %29, align 8, !dbg !5251
  %5783 = load i32, i32* @x.63
  %5784 = load i32, i32* @y.64
  %5785 = sub i32 %5783, 1
  %5786 = mul i32 %5783, %5785
  %5787 = urem i32 %5786, 2
  %5788 = icmp eq i32 %5787, 0
  %5789 = icmp slt i32 %5784, 10
  %5790 = or i1 %5788, %5789
  br i1 %5790, label %originalBBpart21753, label %originalBB1746alteredBB

originalBBpart21753:                              ; preds = %originalBB1746
  br label %5791, !dbg !5251

5791:                                             ; preds = %originalBBpart21753
  %5792 = load i32, i32* @x.63
  %5793 = load i32, i32* @y.64
  %5794 = sub i32 %5792, 1
  %5795 = mul i32 %5792, %5794
  %5796 = urem i32 %5795, 2
  %5797 = icmp eq i32 %5796, 0
  %5798 = icmp slt i32 %5793, 10
  %5799 = or i1 %5797, %5798
  br i1 %5799, label %originalBB1755, label %originalBB1755alteredBB

originalBB1755:                                   ; preds = %5791, %originalBB1755alteredBB
  %5800 = load i32, i32* @x.63
  %5801 = load i32, i32* @y.64
  %5802 = sub i32 %5800, 1
  %5803 = mul i32 %5800, %5802
  %5804 = urem i32 %5803, 2
  %5805 = icmp eq i32 %5804, 0
  %5806 = icmp slt i32 %5801, 10
  %5807 = or i1 %5805, %5806
  br i1 %5807, label %originalBBpart21757, label %originalBB1755alteredBB

originalBBpart21757:                              ; preds = %originalBB1755
  br label %5808, !dbg !5246

5808:                                             ; preds = %originalBBpart21757
  %5809 = load i32, i32* @x.63
  %5810 = load i32, i32* @y.64
  %5811 = sub i32 %5809, 1
  %5812 = mul i32 %5809, %5811
  %5813 = urem i32 %5812, 2
  %5814 = icmp eq i32 %5813, 0
  %5815 = icmp slt i32 %5810, 10
  %5816 = or i1 %5814, %5815
  br i1 %5816, label %originalBB1759, label %originalBB1759alteredBB

originalBB1759:                                   ; preds = %5808, %originalBB1759alteredBB
  %5817 = load i64, i64* %29, align 8, !dbg !5252
  %5818 = load i64, i64* %20, align 8, !dbg !5252
  %5819 = icmp ult i64 %5817, %5818, !dbg !5252
  %5820 = load i32, i32* @x.63
  %5821 = load i32, i32* @y.64
  %5822 = sub i32 %5820, 1
  %5823 = mul i32 %5820, %5822
  %5824 = urem i32 %5823, 2
  %5825 = icmp eq i32 %5824, 0
  %5826 = icmp slt i32 %5821, 10
  %5827 = or i1 %5825, %5826
  br i1 %5827, label %originalBBpart21761, label %originalBB1759alteredBB

originalBBpart21761:                              ; preds = %originalBB1759
  br i1 %5819, label %5828, label %5848, !dbg !5255

5828:                                             ; preds = %originalBBpart21761
  %5829 = load i32, i32* @x.63
  %5830 = load i32, i32* @y.64
  %5831 = sub i32 %5829, 1
  %5832 = mul i32 %5829, %5831
  %5833 = urem i32 %5832, 2
  %5834 = icmp eq i32 %5833, 0
  %5835 = icmp slt i32 %5830, 10
  %5836 = or i1 %5834, %5835
  br i1 %5836, label %originalBB1763, label %originalBB1763alteredBB

originalBB1763:                                   ; preds = %5828, %originalBB1763alteredBB
  %5837 = load i8*, i8** %19, align 8, !dbg !5252
  %5838 = load i64, i64* %29, align 8, !dbg !5252
  %5839 = getelementptr inbounds i8, i8* %5837, i64 %5838, !dbg !5252
  store i8 36, i8* %5839, align 1, !dbg !5252
  %5840 = load i32, i32* @x.63
  %5841 = load i32, i32* @y.64
  %5842 = sub i32 %5840, 1
  %5843 = mul i32 %5840, %5842
  %5844 = urem i32 %5843, 2
  %5845 = icmp eq i32 %5844, 0
  %5846 = icmp slt i32 %5841, 10
  %5847 = or i1 %5845, %5846
  br i1 %5847, label %originalBBpart21765, label %originalBB1763alteredBB

originalBBpart21765:                              ; preds = %originalBB1763
  br label %5848, !dbg !5252

5848:                                             ; preds = %originalBBpart21765, %originalBBpart21761
  %5849 = load i32, i32* @x.63
  %5850 = load i32, i32* @y.64
  %5851 = sub i32 %5849, 1
  %5852 = mul i32 %5849, %5851
  %5853 = urem i32 %5852, 2
  %5854 = icmp eq i32 %5853, 0
  %5855 = icmp slt i32 %5850, 10
  %5856 = or i1 %5854, %5855
  br i1 %5856, label %originalBB1767, label %originalBB1767alteredBB

originalBB1767:                                   ; preds = %5848, %originalBB1767alteredBB
  %5857 = load i64, i64* %29, align 8, !dbg !5255
  %5858 = add i64 %5857, 1, !dbg !5255
  store i64 %5858, i64* %29, align 8, !dbg !5255
  %5859 = load i32, i32* @x.63
  %5860 = load i32, i32* @y.64
  %5861 = sub i32 %5859, 1
  %5862 = mul i32 %5859, %5861
  %5863 = urem i32 %5862, 2
  %5864 = icmp eq i32 %5863, 0
  %5865 = icmp slt i32 %5860, 10
  %5866 = or i1 %5864, %5865
  br i1 %5866, label %originalBBpart21769, label %originalBB1767alteredBB

originalBBpart21769:                              ; preds = %originalBB1767
  br label %5867, !dbg !5255

5867:                                             ; preds = %originalBBpart21769
  %5868 = load i32, i32* @x.63
  %5869 = load i32, i32* @y.64
  %5870 = sub i32 %5868, 1
  %5871 = mul i32 %5868, %5870
  %5872 = urem i32 %5871, 2
  %5873 = icmp eq i32 %5872, 0
  %5874 = icmp slt i32 %5869, 10
  %5875 = or i1 %5873, %5874
  br i1 %5875, label %originalBB1771, label %originalBB1771alteredBB

originalBB1771:                                   ; preds = %5867, %originalBB1771alteredBB
  %5876 = load i32, i32* @x.63
  %5877 = load i32, i32* @y.64
  %5878 = sub i32 %5876, 1
  %5879 = mul i32 %5876, %5878
  %5880 = urem i32 %5879, 2
  %5881 = icmp eq i32 %5880, 0
  %5882 = icmp slt i32 %5877, 10
  %5883 = or i1 %5881, %5882
  br i1 %5883, label %originalBBpart21773, label %originalBB1771alteredBB

originalBBpart21773:                              ; preds = %originalBB1771
  br label %5884, !dbg !5246

5884:                                             ; preds = %originalBBpart21773
  %5885 = load i32, i32* @x.63
  %5886 = load i32, i32* @y.64
  %5887 = sub i32 %5885, 1
  %5888 = mul i32 %5885, %5887
  %5889 = urem i32 %5888, 2
  %5890 = icmp eq i32 %5889, 0
  %5891 = icmp slt i32 %5886, 10
  %5892 = or i1 %5890, %5891
  br i1 %5892, label %originalBB1775, label %originalBB1775alteredBB

originalBB1775:                                   ; preds = %5884, %originalBB1775alteredBB
  %5893 = load i64, i64* %29, align 8, !dbg !5256
  %5894 = load i64, i64* %20, align 8, !dbg !5256
  %5895 = icmp ult i64 %5893, %5894, !dbg !5256
  %5896 = load i32, i32* @x.63
  %5897 = load i32, i32* @y.64
  %5898 = sub i32 %5896, 1
  %5899 = mul i32 %5896, %5898
  %5900 = urem i32 %5899, 2
  %5901 = icmp eq i32 %5900, 0
  %5902 = icmp slt i32 %5897, 10
  %5903 = or i1 %5901, %5902
  br i1 %5903, label %originalBBpart21777, label %originalBB1775alteredBB

originalBBpart21777:                              ; preds = %originalBB1775
  br i1 %5895, label %5904, label %5924, !dbg !5259

5904:                                             ; preds = %originalBBpart21777
  %5905 = load i32, i32* @x.63
  %5906 = load i32, i32* @y.64
  %5907 = sub i32 %5905, 1
  %5908 = mul i32 %5905, %5907
  %5909 = urem i32 %5908, 2
  %5910 = icmp eq i32 %5909, 0
  %5911 = icmp slt i32 %5906, 10
  %5912 = or i1 %5910, %5911
  br i1 %5912, label %originalBB1779, label %originalBB1779alteredBB

originalBB1779:                                   ; preds = %5904, %originalBB1779alteredBB
  %5913 = load i8*, i8** %19, align 8, !dbg !5256
  %5914 = load i64, i64* %29, align 8, !dbg !5256
  %5915 = getelementptr inbounds i8, i8* %5913, i64 %5914, !dbg !5256
  store i8 39, i8* %5915, align 1, !dbg !5256
  %5916 = load i32, i32* @x.63
  %5917 = load i32, i32* @y.64
  %5918 = sub i32 %5916, 1
  %5919 = mul i32 %5916, %5918
  %5920 = urem i32 %5919, 2
  %5921 = icmp eq i32 %5920, 0
  %5922 = icmp slt i32 %5917, 10
  %5923 = or i1 %5921, %5922
  br i1 %5923, label %originalBBpart21781, label %originalBB1779alteredBB

originalBBpart21781:                              ; preds = %originalBB1779
  br label %5924, !dbg !5256

5924:                                             ; preds = %originalBBpart21781, %originalBBpart21777
  %5925 = load i32, i32* @x.63
  %5926 = load i32, i32* @y.64
  %5927 = sub i32 %5925, 1
  %5928 = mul i32 %5925, %5927
  %5929 = urem i32 %5928, 2
  %5930 = icmp eq i32 %5929, 0
  %5931 = icmp slt i32 %5926, 10
  %5932 = or i1 %5930, %5931
  br i1 %5932, label %originalBB1783, label %originalBB1783alteredBB

originalBB1783:                                   ; preds = %5924, %originalBB1783alteredBB
  %5933 = load i64, i64* %29, align 8, !dbg !5259
  %5934 = add i64 %5933, 1, !dbg !5259
  store i64 %5934, i64* %29, align 8, !dbg !5259
  %5935 = load i32, i32* @x.63
  %5936 = load i32, i32* @y.64
  %5937 = sub i32 %5935, 1
  %5938 = mul i32 %5935, %5937
  %5939 = urem i32 %5938, 2
  %5940 = icmp eq i32 %5939, 0
  %5941 = icmp slt i32 %5936, 10
  %5942 = or i1 %5940, %5941
  br i1 %5942, label %originalBBpart21793, label %originalBB1783alteredBB

originalBBpart21793:                              ; preds = %originalBB1783
  br label %5943, !dbg !5259

5943:                                             ; preds = %originalBBpart21793
  %5944 = load i32, i32* @x.63
  %5945 = load i32, i32* @y.64
  %5946 = sub i32 %5944, 1
  %5947 = mul i32 %5944, %5946
  %5948 = urem i32 %5947, 2
  %5949 = icmp eq i32 %5948, 0
  %5950 = icmp slt i32 %5945, 10
  %5951 = or i1 %5949, %5950
  br i1 %5951, label %originalBB1795, label %originalBB1795alteredBB

originalBB1795:                                   ; preds = %5943, %originalBB1795alteredBB
  store i8 1, i8* %36, align 1, !dbg !5246
  %5952 = load i32, i32* @x.63
  %5953 = load i32, i32* @y.64
  %5954 = sub i32 %5952, 1
  %5955 = mul i32 %5952, %5954
  %5956 = urem i32 %5955, 2
  %5957 = icmp eq i32 %5956, 0
  %5958 = icmp slt i32 %5953, 10
  %5959 = or i1 %5957, %5958
  br i1 %5959, label %originalBBpart21797, label %originalBB1795alteredBB

originalBBpart21797:                              ; preds = %originalBB1795
  br label %5960, !dbg !5246

5960:                                             ; preds = %originalBBpart21797, %originalBBpart21732, %originalBBpart21728
  %5961 = load i32, i32* @x.63
  %5962 = load i32, i32* @y.64
  %5963 = sub i32 %5961, 1
  %5964 = mul i32 %5961, %5963
  %5965 = urem i32 %5964, 2
  %5966 = icmp eq i32 %5965, 0
  %5967 = icmp slt i32 %5962, 10
  %5968 = or i1 %5966, %5967
  br i1 %5968, label %originalBB1799, label %originalBB1799alteredBB

originalBB1799:                                   ; preds = %5960, %originalBB1799alteredBB
  %5969 = load i32, i32* @x.63
  %5970 = load i32, i32* @y.64
  %5971 = sub i32 %5969, 1
  %5972 = mul i32 %5969, %5971
  %5973 = urem i32 %5972, 2
  %5974 = icmp eq i32 %5973, 0
  %5975 = icmp slt i32 %5970, 10
  %5976 = or i1 %5974, %5975
  br i1 %5976, label %originalBBpart21801, label %originalBB1799alteredBB

originalBBpart21801:                              ; preds = %originalBB1799
  br label %5977, !dbg !5243

5977:                                             ; preds = %originalBBpart21801
  %5978 = load i32, i32* @x.63
  %5979 = load i32, i32* @y.64
  %5980 = sub i32 %5978, 1
  %5981 = mul i32 %5978, %5980
  %5982 = urem i32 %5981, 2
  %5983 = icmp eq i32 %5982, 0
  %5984 = icmp slt i32 %5979, 10
  %5985 = or i1 %5983, %5984
  br i1 %5985, label %originalBB1803, label %originalBB1803alteredBB

originalBB1803:                                   ; preds = %5977, %originalBB1803alteredBB
  %5986 = load i64, i64* %29, align 8, !dbg !5260
  %5987 = load i64, i64* %20, align 8, !dbg !5260
  %5988 = icmp ult i64 %5986, %5987, !dbg !5260
  %5989 = load i32, i32* @x.63
  %5990 = load i32, i32* @y.64
  %5991 = sub i32 %5989, 1
  %5992 = mul i32 %5989, %5991
  %5993 = urem i32 %5992, 2
  %5994 = icmp eq i32 %5993, 0
  %5995 = icmp slt i32 %5990, 10
  %5996 = or i1 %5994, %5995
  br i1 %5996, label %originalBBpart21805, label %originalBB1803alteredBB

originalBBpart21805:                              ; preds = %originalBB1803
  br i1 %5988, label %5997, label %6017, !dbg !5263

5997:                                             ; preds = %originalBBpart21805
  %5998 = load i32, i32* @x.63
  %5999 = load i32, i32* @y.64
  %6000 = sub i32 %5998, 1
  %6001 = mul i32 %5998, %6000
  %6002 = urem i32 %6001, 2
  %6003 = icmp eq i32 %6002, 0
  %6004 = icmp slt i32 %5999, 10
  %6005 = or i1 %6003, %6004
  br i1 %6005, label %originalBB1807, label %originalBB1807alteredBB

originalBB1807:                                   ; preds = %5997, %originalBB1807alteredBB
  %6006 = load i8*, i8** %19, align 8, !dbg !5260
  %6007 = load i64, i64* %29, align 8, !dbg !5260
  %6008 = getelementptr inbounds i8, i8* %6006, i64 %6007, !dbg !5260
  store i8 92, i8* %6008, align 1, !dbg !5260
  %6009 = load i32, i32* @x.63
  %6010 = load i32, i32* @y.64
  %6011 = sub i32 %6009, 1
  %6012 = mul i32 %6009, %6011
  %6013 = urem i32 %6012, 2
  %6014 = icmp eq i32 %6013, 0
  %6015 = icmp slt i32 %6010, 10
  %6016 = or i1 %6014, %6015
  br i1 %6016, label %originalBBpart21809, label %originalBB1807alteredBB

originalBBpart21809:                              ; preds = %originalBB1807
  br label %6017, !dbg !5260

6017:                                             ; preds = %originalBBpart21809, %originalBBpart21805
  %6018 = load i32, i32* @x.63
  %6019 = load i32, i32* @y.64
  %6020 = sub i32 %6018, 1
  %6021 = mul i32 %6018, %6020
  %6022 = urem i32 %6021, 2
  %6023 = icmp eq i32 %6022, 0
  %6024 = icmp slt i32 %6019, 10
  %6025 = or i1 %6023, %6024
  br i1 %6025, label %originalBB1811, label %originalBB1811alteredBB

originalBB1811:                                   ; preds = %6017, %originalBB1811alteredBB
  %6026 = load i64, i64* %29, align 8, !dbg !5263
  %6027 = add i64 %6026, 1, !dbg !5263
  store i64 %6027, i64* %29, align 8, !dbg !5263
  %6028 = load i32, i32* @x.63
  %6029 = load i32, i32* @y.64
  %6030 = sub i32 %6028, 1
  %6031 = mul i32 %6028, %6030
  %6032 = urem i32 %6031, 2
  %6033 = icmp eq i32 %6032, 0
  %6034 = icmp slt i32 %6029, 10
  %6035 = or i1 %6033, %6034
  br i1 %6035, label %originalBBpart21819, label %originalBB1811alteredBB

originalBBpart21819:                              ; preds = %originalBB1811
  br label %6036, !dbg !5263

6036:                                             ; preds = %originalBBpart21819
  %6037 = load i32, i32* @x.63
  %6038 = load i32, i32* @y.64
  %6039 = sub i32 %6037, 1
  %6040 = mul i32 %6037, %6039
  %6041 = urem i32 %6040, 2
  %6042 = icmp eq i32 %6041, 0
  %6043 = icmp slt i32 %6038, 10
  %6044 = or i1 %6042, %6043
  br i1 %6044, label %originalBB1821, label %originalBB1821alteredBB

originalBB1821:                                   ; preds = %6036, %originalBB1821alteredBB
  %6045 = load i32, i32* @x.63
  %6046 = load i32, i32* @y.64
  %6047 = sub i32 %6045, 1
  %6048 = mul i32 %6045, %6047
  %6049 = urem i32 %6048, 2
  %6050 = icmp eq i32 %6049, 0
  %6051 = icmp slt i32 %6046, 10
  %6052 = or i1 %6050, %6051
  br i1 %6052, label %originalBBpart21823, label %originalBB1821alteredBB

originalBBpart21823:                              ; preds = %originalBB1821
  br label %6053, !dbg !5243

6053:                                             ; preds = %originalBBpart21823
  %6054 = load i32, i32* @x.63
  %6055 = load i32, i32* @y.64
  %6056 = sub i32 %6054, 1
  %6057 = mul i32 %6054, %6056
  %6058 = urem i32 %6057, 2
  %6059 = icmp eq i32 %6058, 0
  %6060 = icmp slt i32 %6055, 10
  %6061 = or i1 %6059, %6060
  br i1 %6061, label %originalBB1825, label %originalBB1825alteredBB

originalBB1825:                                   ; preds = %6053, %originalBB1825alteredBB
  %6062 = load i32, i32* @x.63
  %6063 = load i32, i32* @y.64
  %6064 = sub i32 %6062, 1
  %6065 = mul i32 %6062, %6064
  %6066 = urem i32 %6065, 2
  %6067 = icmp eq i32 %6066, 0
  %6068 = icmp slt i32 %6063, 10
  %6069 = or i1 %6067, %6068
  br i1 %6069, label %originalBBpart21827, label %originalBB1825alteredBB

originalBBpart21827:                              ; preds = %originalBB1825
  br label %6070, !dbg !5243

6070:                                             ; preds = %originalBBpart21827, %originalBBpart21708, %originalBBpart21640, %originalBBpart2774, %originalBBpart2758
  call void @llvm.dbg.label(metadata !5264), !dbg !5265
  %6071 = load i32, i32* @x.63
  %6072 = load i32, i32* @y.64
  %6073 = sub i32 %6071, 1
  %6074 = mul i32 %6071, %6073
  %6075 = urem i32 %6074, 2
  %6076 = icmp eq i32 %6075, 0
  %6077 = icmp slt i32 %6072, 10
  %6078 = or i1 %6076, %6077
  br i1 %6078, label %originalBB1829, label %originalBB1829alteredBB

originalBB1829:                                   ; preds = %6070, %originalBB1829alteredBB
  %6079 = load i32, i32* @x.63
  %6080 = load i32, i32* @y.64
  %6081 = sub i32 %6079, 1
  %6082 = mul i32 %6079, %6081
  %6083 = urem i32 %6082, 2
  %6084 = icmp eq i32 %6083, 0
  %6085 = icmp slt i32 %6080, 10
  %6086 = or i1 %6084, %6085
  br i1 %6086, label %originalBBpart21831, label %originalBB1829alteredBB

originalBBpart21831:                              ; preds = %originalBB1829
  br label %6087, !dbg !5266

6087:                                             ; preds = %originalBBpart21831
  %6088 = load i32, i32* @x.63
  %6089 = load i32, i32* @y.64
  %6090 = sub i32 %6088, 1
  %6091 = mul i32 %6088, %6090
  %6092 = urem i32 %6091, 2
  %6093 = icmp eq i32 %6092, 0
  %6094 = icmp slt i32 %6089, 10
  %6095 = or i1 %6093, %6094
  br i1 %6095, label %originalBB1833, label %originalBB1833alteredBB

originalBB1833:                                   ; preds = %6087, %originalBB1833alteredBB
  %6096 = load i8, i8* %36, align 1, !dbg !5267
  %6097 = trunc i8 %6096 to i1, !dbg !5267
  %6098 = load i32, i32* @x.63
  %6099 = load i32, i32* @y.64
  %6100 = sub i32 %6098, 1
  %6101 = mul i32 %6098, %6100
  %6102 = urem i32 %6101, 2
  %6103 = icmp eq i32 %6102, 0
  %6104 = icmp slt i32 %6099, 10
  %6105 = or i1 %6103, %6104
  br i1 %6105, label %originalBBpart21835, label %originalBB1833alteredBB

originalBBpart21835:                              ; preds = %originalBB1833
  br i1 %6097, label %6106, label %6294, !dbg !5267

6106:                                             ; preds = %originalBBpart21835
  %6107 = load i32, i32* @x.63
  %6108 = load i32, i32* @y.64
  %6109 = sub i32 %6107, 1
  %6110 = mul i32 %6107, %6109
  %6111 = urem i32 %6110, 2
  %6112 = icmp eq i32 %6111, 0
  %6113 = icmp slt i32 %6108, 10
  %6114 = or i1 %6112, %6113
  br i1 %6114, label %originalBB1837, label %originalBB1837alteredBB

originalBB1837:                                   ; preds = %6106, %originalBB1837alteredBB
  %6115 = load i8, i8* %42, align 1, !dbg !5267
  %6116 = trunc i8 %6115 to i1, !dbg !5267
  %6117 = load i32, i32* @x.63
  %6118 = load i32, i32* @y.64
  %6119 = sub i32 %6117, 1
  %6120 = mul i32 %6117, %6119
  %6121 = urem i32 %6120, 2
  %6122 = icmp eq i32 %6121, 0
  %6123 = icmp slt i32 %6118, 10
  %6124 = or i1 %6122, %6123
  br i1 %6124, label %originalBBpart21839, label %originalBB1837alteredBB

originalBBpart21839:                              ; preds = %originalBB1837
  br i1 %6116, label %6294, label %6125, !dbg !5270

6125:                                             ; preds = %originalBBpart21839
  %6126 = load i32, i32* @x.63
  %6127 = load i32, i32* @y.64
  %6128 = sub i32 %6126, 1
  %6129 = mul i32 %6126, %6128
  %6130 = urem i32 %6129, 2
  %6131 = icmp eq i32 %6130, 0
  %6132 = icmp slt i32 %6127, 10
  %6133 = or i1 %6131, %6132
  br i1 %6133, label %originalBB1841, label %originalBB1841alteredBB

originalBB1841:                                   ; preds = %6125, %originalBB1841alteredBB
  %6134 = load i32, i32* @x.63
  %6135 = load i32, i32* @y.64
  %6136 = sub i32 %6134, 1
  %6137 = mul i32 %6134, %6136
  %6138 = urem i32 %6137, 2
  %6139 = icmp eq i32 %6138, 0
  %6140 = icmp slt i32 %6135, 10
  %6141 = or i1 %6139, %6140
  br i1 %6141, label %originalBBpart21843, label %originalBB1841alteredBB

originalBBpart21843:                              ; preds = %originalBB1841
  br label %6142, !dbg !5271

6142:                                             ; preds = %originalBBpart21843
  %6143 = load i32, i32* @x.63
  %6144 = load i32, i32* @y.64
  %6145 = sub i32 %6143, 1
  %6146 = mul i32 %6143, %6145
  %6147 = urem i32 %6146, 2
  %6148 = icmp eq i32 %6147, 0
  %6149 = icmp slt i32 %6144, 10
  %6150 = or i1 %6148, %6149
  br i1 %6150, label %originalBB1845, label %originalBB1845alteredBB

originalBB1845:                                   ; preds = %6142, %originalBB1845alteredBB
  %6151 = load i64, i64* %29, align 8, !dbg !5273
  %6152 = load i64, i64* %20, align 8, !dbg !5273
  %6153 = icmp ult i64 %6151, %6152, !dbg !5273
  %6154 = load i32, i32* @x.63
  %6155 = load i32, i32* @y.64
  %6156 = sub i32 %6154, 1
  %6157 = mul i32 %6154, %6156
  %6158 = urem i32 %6157, 2
  %6159 = icmp eq i32 %6158, 0
  %6160 = icmp slt i32 %6155, 10
  %6161 = or i1 %6159, %6160
  br i1 %6161, label %originalBBpart21847, label %originalBB1845alteredBB

originalBBpart21847:                              ; preds = %originalBB1845
  br i1 %6153, label %6162, label %6182, !dbg !5276

6162:                                             ; preds = %originalBBpart21847
  %6163 = load i32, i32* @x.63
  %6164 = load i32, i32* @y.64
  %6165 = sub i32 %6163, 1
  %6166 = mul i32 %6163, %6165
  %6167 = urem i32 %6166, 2
  %6168 = icmp eq i32 %6167, 0
  %6169 = icmp slt i32 %6164, 10
  %6170 = or i1 %6168, %6169
  br i1 %6170, label %originalBB1849, label %originalBB1849alteredBB

originalBB1849:                                   ; preds = %6162, %originalBB1849alteredBB
  %6171 = load i8*, i8** %19, align 8, !dbg !5273
  %6172 = load i64, i64* %29, align 8, !dbg !5273
  %6173 = getelementptr inbounds i8, i8* %6171, i64 %6172, !dbg !5273
  store i8 39, i8* %6173, align 1, !dbg !5273
  %6174 = load i32, i32* @x.63
  %6175 = load i32, i32* @y.64
  %6176 = sub i32 %6174, 1
  %6177 = mul i32 %6174, %6176
  %6178 = urem i32 %6177, 2
  %6179 = icmp eq i32 %6178, 0
  %6180 = icmp slt i32 %6175, 10
  %6181 = or i1 %6179, %6180
  br i1 %6181, label %originalBBpart21851, label %originalBB1849alteredBB

originalBBpart21851:                              ; preds = %originalBB1849
  br label %6182, !dbg !5273

6182:                                             ; preds = %originalBBpart21851, %originalBBpart21847
  %6183 = load i32, i32* @x.63
  %6184 = load i32, i32* @y.64
  %6185 = sub i32 %6183, 1
  %6186 = mul i32 %6183, %6185
  %6187 = urem i32 %6186, 2
  %6188 = icmp eq i32 %6187, 0
  %6189 = icmp slt i32 %6184, 10
  %6190 = or i1 %6188, %6189
  br i1 %6190, label %originalBB1853, label %originalBB1853alteredBB

originalBB1853:                                   ; preds = %6182, %originalBB1853alteredBB
  %6191 = load i64, i64* %29, align 8, !dbg !5276
  %6192 = add i64 %6191, 1, !dbg !5276
  store i64 %6192, i64* %29, align 8, !dbg !5276
  %6193 = load i32, i32* @x.63
  %6194 = load i32, i32* @y.64
  %6195 = sub i32 %6193, 1
  %6196 = mul i32 %6193, %6195
  %6197 = urem i32 %6196, 2
  %6198 = icmp eq i32 %6197, 0
  %6199 = icmp slt i32 %6194, 10
  %6200 = or i1 %6198, %6199
  br i1 %6200, label %originalBBpart21862, label %originalBB1853alteredBB

originalBBpart21862:                              ; preds = %originalBB1853
  br label %6201, !dbg !5276

6201:                                             ; preds = %originalBBpart21862
  %6202 = load i32, i32* @x.63
  %6203 = load i32, i32* @y.64
  %6204 = sub i32 %6202, 1
  %6205 = mul i32 %6202, %6204
  %6206 = urem i32 %6205, 2
  %6207 = icmp eq i32 %6206, 0
  %6208 = icmp slt i32 %6203, 10
  %6209 = or i1 %6207, %6208
  br i1 %6209, label %originalBB1864, label %originalBB1864alteredBB

originalBB1864:                                   ; preds = %6201, %originalBB1864alteredBB
  %6210 = load i32, i32* @x.63
  %6211 = load i32, i32* @y.64
  %6212 = sub i32 %6210, 1
  %6213 = mul i32 %6210, %6212
  %6214 = urem i32 %6213, 2
  %6215 = icmp eq i32 %6214, 0
  %6216 = icmp slt i32 %6211, 10
  %6217 = or i1 %6215, %6216
  br i1 %6217, label %originalBBpart21866, label %originalBB1864alteredBB

originalBBpart21866:                              ; preds = %originalBB1864
  br label %6218, !dbg !5271

6218:                                             ; preds = %originalBBpart21866
  %6219 = load i32, i32* @x.63
  %6220 = load i32, i32* @y.64
  %6221 = sub i32 %6219, 1
  %6222 = mul i32 %6219, %6221
  %6223 = urem i32 %6222, 2
  %6224 = icmp eq i32 %6223, 0
  %6225 = icmp slt i32 %6220, 10
  %6226 = or i1 %6224, %6225
  br i1 %6226, label %originalBB1868, label %originalBB1868alteredBB

originalBB1868:                                   ; preds = %6218, %originalBB1868alteredBB
  %6227 = load i64, i64* %29, align 8, !dbg !5277
  %6228 = load i64, i64* %20, align 8, !dbg !5277
  %6229 = icmp ult i64 %6227, %6228, !dbg !5277
  %6230 = load i32, i32* @x.63
  %6231 = load i32, i32* @y.64
  %6232 = sub i32 %6230, 1
  %6233 = mul i32 %6230, %6232
  %6234 = urem i32 %6233, 2
  %6235 = icmp eq i32 %6234, 0
  %6236 = icmp slt i32 %6231, 10
  %6237 = or i1 %6235, %6236
  br i1 %6237, label %originalBBpart21870, label %originalBB1868alteredBB

originalBBpart21870:                              ; preds = %originalBB1868
  br i1 %6229, label %6238, label %6258, !dbg !5280

6238:                                             ; preds = %originalBBpart21870
  %6239 = load i32, i32* @x.63
  %6240 = load i32, i32* @y.64
  %6241 = sub i32 %6239, 1
  %6242 = mul i32 %6239, %6241
  %6243 = urem i32 %6242, 2
  %6244 = icmp eq i32 %6243, 0
  %6245 = icmp slt i32 %6240, 10
  %6246 = or i1 %6244, %6245
  br i1 %6246, label %originalBB1872, label %originalBB1872alteredBB

originalBB1872:                                   ; preds = %6238, %originalBB1872alteredBB
  %6247 = load i8*, i8** %19, align 8, !dbg !5277
  %6248 = load i64, i64* %29, align 8, !dbg !5277
  %6249 = getelementptr inbounds i8, i8* %6247, i64 %6248, !dbg !5277
  store i8 39, i8* %6249, align 1, !dbg !5277
  %6250 = load i32, i32* @x.63
  %6251 = load i32, i32* @y.64
  %6252 = sub i32 %6250, 1
  %6253 = mul i32 %6250, %6252
  %6254 = urem i32 %6253, 2
  %6255 = icmp eq i32 %6254, 0
  %6256 = icmp slt i32 %6251, 10
  %6257 = or i1 %6255, %6256
  br i1 %6257, label %originalBBpart21874, label %originalBB1872alteredBB

originalBBpart21874:                              ; preds = %originalBB1872
  br label %6258, !dbg !5277

6258:                                             ; preds = %originalBBpart21874, %originalBBpart21870
  %6259 = load i32, i32* @x.63
  %6260 = load i32, i32* @y.64
  %6261 = sub i32 %6259, 1
  %6262 = mul i32 %6259, %6261
  %6263 = urem i32 %6262, 2
  %6264 = icmp eq i32 %6263, 0
  %6265 = icmp slt i32 %6260, 10
  %6266 = or i1 %6264, %6265
  br i1 %6266, label %originalBB1876, label %originalBB1876alteredBB

originalBB1876:                                   ; preds = %6258, %originalBB1876alteredBB
  %6267 = load i64, i64* %29, align 8, !dbg !5280
  %6268 = add i64 %6267, 1, !dbg !5280
  store i64 %6268, i64* %29, align 8, !dbg !5280
  %6269 = load i32, i32* @x.63
  %6270 = load i32, i32* @y.64
  %6271 = sub i32 %6269, 1
  %6272 = mul i32 %6269, %6271
  %6273 = urem i32 %6272, 2
  %6274 = icmp eq i32 %6273, 0
  %6275 = icmp slt i32 %6270, 10
  %6276 = or i1 %6274, %6275
  br i1 %6276, label %originalBBpart21880, label %originalBB1876alteredBB

originalBBpart21880:                              ; preds = %originalBB1876
  br label %6277, !dbg !5280

6277:                                             ; preds = %originalBBpart21880
  %6278 = load i32, i32* @x.63
  %6279 = load i32, i32* @y.64
  %6280 = sub i32 %6278, 1
  %6281 = mul i32 %6278, %6280
  %6282 = urem i32 %6281, 2
  %6283 = icmp eq i32 %6282, 0
  %6284 = icmp slt i32 %6279, 10
  %6285 = or i1 %6283, %6284
  br i1 %6285, label %originalBB1882, label %originalBB1882alteredBB

originalBB1882:                                   ; preds = %6277, %originalBB1882alteredBB
  store i8 0, i8* %36, align 1, !dbg !5271
  %6286 = load i32, i32* @x.63
  %6287 = load i32, i32* @y.64
  %6288 = sub i32 %6286, 1
  %6289 = mul i32 %6286, %6288
  %6290 = urem i32 %6289, 2
  %6291 = icmp eq i32 %6290, 0
  %6292 = icmp slt i32 %6287, 10
  %6293 = or i1 %6291, %6292
  br i1 %6293, label %originalBBpart21884, label %originalBB1882alteredBB

originalBBpart21884:                              ; preds = %originalBB1882
  br label %6294, !dbg !5271

6294:                                             ; preds = %originalBBpart21884, %originalBBpart21839, %originalBBpart21835
  %6295 = load i32, i32* @x.63
  %6296 = load i32, i32* @y.64
  %6297 = sub i32 %6295, 1
  %6298 = mul i32 %6295, %6297
  %6299 = urem i32 %6298, 2
  %6300 = icmp eq i32 %6299, 0
  %6301 = icmp slt i32 %6296, 10
  %6302 = or i1 %6300, %6301
  br i1 %6302, label %originalBB1886, label %originalBB1886alteredBB

originalBB1886:                                   ; preds = %6294, %originalBB1886alteredBB
  %6303 = load i32, i32* @x.63
  %6304 = load i32, i32* @y.64
  %6305 = sub i32 %6303, 1
  %6306 = mul i32 %6303, %6305
  %6307 = urem i32 %6306, 2
  %6308 = icmp eq i32 %6307, 0
  %6309 = icmp slt i32 %6304, 10
  %6310 = or i1 %6308, %6309
  br i1 %6310, label %originalBBpart21888, label %originalBB1886alteredBB

originalBBpart21888:                              ; preds = %originalBB1886
  br label %6311, !dbg !5270

6311:                                             ; preds = %originalBBpart21888
  %6312 = load i32, i32* @x.63
  %6313 = load i32, i32* @y.64
  %6314 = sub i32 %6312, 1
  %6315 = mul i32 %6312, %6314
  %6316 = urem i32 %6315, 2
  %6317 = icmp eq i32 %6316, 0
  %6318 = icmp slt i32 %6313, 10
  %6319 = or i1 %6317, %6318
  br i1 %6319, label %originalBB1890, label %originalBB1890alteredBB

originalBB1890:                                   ; preds = %6311, %originalBB1890alteredBB
  %6320 = load i32, i32* @x.63
  %6321 = load i32, i32* @y.64
  %6322 = sub i32 %6320, 1
  %6323 = mul i32 %6320, %6322
  %6324 = urem i32 %6323, 2
  %6325 = icmp eq i32 %6324, 0
  %6326 = icmp slt i32 %6321, 10
  %6327 = or i1 %6325, %6326
  br i1 %6327, label %originalBBpart21892, label %originalBB1890alteredBB

originalBBpart21892:                              ; preds = %originalBB1890
  br label %6328, !dbg !5281

6328:                                             ; preds = %originalBBpart21892
  %6329 = load i32, i32* @x.63
  %6330 = load i32, i32* @y.64
  %6331 = sub i32 %6329, 1
  %6332 = mul i32 %6329, %6331
  %6333 = urem i32 %6332, 2
  %6334 = icmp eq i32 %6333, 0
  %6335 = icmp slt i32 %6330, 10
  %6336 = or i1 %6334, %6335
  br i1 %6336, label %originalBB1894, label %originalBB1894alteredBB

originalBB1894:                                   ; preds = %6328, %originalBB1894alteredBB
  %6337 = load i64, i64* %29, align 8, !dbg !5282
  %6338 = load i64, i64* %20, align 8, !dbg !5282
  %6339 = icmp ult i64 %6337, %6338, !dbg !5282
  %6340 = load i32, i32* @x.63
  %6341 = load i32, i32* @y.64
  %6342 = sub i32 %6340, 1
  %6343 = mul i32 %6340, %6342
  %6344 = urem i32 %6343, 2
  %6345 = icmp eq i32 %6344, 0
  %6346 = icmp slt i32 %6341, 10
  %6347 = or i1 %6345, %6346
  br i1 %6347, label %originalBBpart21896, label %originalBB1894alteredBB

originalBBpart21896:                              ; preds = %originalBB1894
  br i1 %6339, label %6348, label %6369, !dbg !5285

6348:                                             ; preds = %originalBBpart21896
  %6349 = load i32, i32* @x.63
  %6350 = load i32, i32* @y.64
  %6351 = sub i32 %6349, 1
  %6352 = mul i32 %6349, %6351
  %6353 = urem i32 %6352, 2
  %6354 = icmp eq i32 %6353, 0
  %6355 = icmp slt i32 %6350, 10
  %6356 = or i1 %6354, %6355
  br i1 %6356, label %originalBB1898, label %originalBB1898alteredBB

originalBB1898:                                   ; preds = %6348, %originalBB1898alteredBB
  %6357 = load i8, i8* %39, align 1, !dbg !5282
  %6358 = load i8*, i8** %19, align 8, !dbg !5282
  %6359 = load i64, i64* %29, align 8, !dbg !5282
  %6360 = getelementptr inbounds i8, i8* %6358, i64 %6359, !dbg !5282
  store i8 %6357, i8* %6360, align 1, !dbg !5282
  %6361 = load i32, i32* @x.63
  %6362 = load i32, i32* @y.64
  %6363 = sub i32 %6361, 1
  %6364 = mul i32 %6361, %6363
  %6365 = urem i32 %6364, 2
  %6366 = icmp eq i32 %6365, 0
  %6367 = icmp slt i32 %6362, 10
  %6368 = or i1 %6366, %6367
  br i1 %6368, label %originalBBpart21900, label %originalBB1898alteredBB

originalBBpart21900:                              ; preds = %originalBB1898
  br label %6369, !dbg !5282

6369:                                             ; preds = %originalBBpart21900, %originalBBpart21896
  %6370 = load i32, i32* @x.63
  %6371 = load i32, i32* @y.64
  %6372 = sub i32 %6370, 1
  %6373 = mul i32 %6370, %6372
  %6374 = urem i32 %6373, 2
  %6375 = icmp eq i32 %6374, 0
  %6376 = icmp slt i32 %6371, 10
  %6377 = or i1 %6375, %6376
  br i1 %6377, label %originalBB1902, label %originalBB1902alteredBB

originalBB1902:                                   ; preds = %6369, %originalBB1902alteredBB
  %6378 = load i64, i64* %29, align 8, !dbg !5285
  %6379 = add i64 %6378, 1, !dbg !5285
  store i64 %6379, i64* %29, align 8, !dbg !5285
  %6380 = load i32, i32* @x.63
  %6381 = load i32, i32* @y.64
  %6382 = sub i32 %6380, 1
  %6383 = mul i32 %6380, %6382
  %6384 = urem i32 %6383, 2
  %6385 = icmp eq i32 %6384, 0
  %6386 = icmp slt i32 %6381, 10
  %6387 = or i1 %6385, %6386
  br i1 %6387, label %originalBBpart21913, label %originalBB1902alteredBB

originalBBpart21913:                              ; preds = %originalBB1902
  br label %6388, !dbg !5285

6388:                                             ; preds = %originalBBpart21913
  %6389 = load i32, i32* @x.63
  %6390 = load i32, i32* @y.64
  %6391 = sub i32 %6389, 1
  %6392 = mul i32 %6389, %6391
  %6393 = urem i32 %6392, 2
  %6394 = icmp eq i32 %6393, 0
  %6395 = icmp slt i32 %6390, 10
  %6396 = or i1 %6394, %6395
  br i1 %6396, label %originalBB1915, label %originalBB1915alteredBB

originalBB1915:                                   ; preds = %6388, %originalBB1915alteredBB
  %6397 = load i8, i8* %43, align 1, !dbg !5286
  %6398 = trunc i8 %6397 to i1, !dbg !5286
  %6399 = load i32, i32* @x.63
  %6400 = load i32, i32* @y.64
  %6401 = sub i32 %6399, 1
  %6402 = mul i32 %6399, %6401
  %6403 = urem i32 %6402, 2
  %6404 = icmp eq i32 %6403, 0
  %6405 = icmp slt i32 %6400, 10
  %6406 = or i1 %6404, %6405
  br i1 %6406, label %originalBBpart21917, label %originalBB1915alteredBB

originalBBpart21917:                              ; preds = %originalBB1915
  br i1 %6398, label %6424, label %6407, !dbg !5288

6407:                                             ; preds = %originalBBpart21917
  %6408 = load i32, i32* @x.63
  %6409 = load i32, i32* @y.64
  %6410 = sub i32 %6408, 1
  %6411 = mul i32 %6408, %6410
  %6412 = urem i32 %6411, 2
  %6413 = icmp eq i32 %6412, 0
  %6414 = icmp slt i32 %6409, 10
  %6415 = or i1 %6413, %6414
  br i1 %6415, label %originalBB1919, label %originalBB1919alteredBB

originalBB1919:                                   ; preds = %6407, %originalBB1919alteredBB
  store i8 0, i8* %38, align 1, !dbg !5289
  %6416 = load i32, i32* @x.63
  %6417 = load i32, i32* @y.64
  %6418 = sub i32 %6416, 1
  %6419 = mul i32 %6416, %6418
  %6420 = urem i32 %6419, 2
  %6421 = icmp eq i32 %6420, 0
  %6422 = icmp slt i32 %6417, 10
  %6423 = or i1 %6421, %6422
  br i1 %6423, label %originalBBpart21921, label %originalBB1919alteredBB

originalBBpart21921:                              ; preds = %originalBB1919
  br label %6424, !dbg !5290

6424:                                             ; preds = %originalBBpart21921, %originalBBpart21917
  %6425 = load i32, i32* @x.63
  %6426 = load i32, i32* @y.64
  %6427 = sub i32 %6425, 1
  %6428 = mul i32 %6425, %6427
  %6429 = urem i32 %6428, 2
  %6430 = icmp eq i32 %6429, 0
  %6431 = icmp slt i32 %6426, 10
  %6432 = or i1 %6430, %6431
  br i1 %6432, label %originalBB1923, label %originalBB1923alteredBB

originalBB1923:                                   ; preds = %6424, %originalBB1923alteredBB
  %6433 = load i32, i32* @x.63
  %6434 = load i32, i32* @y.64
  %6435 = sub i32 %6433, 1
  %6436 = mul i32 %6433, %6435
  %6437 = urem i32 %6436, 2
  %6438 = icmp eq i32 %6437, 0
  %6439 = icmp slt i32 %6434, 10
  %6440 = or i1 %6438, %6439
  br i1 %6440, label %originalBBpart21925, label %originalBB1923alteredBB

originalBBpart21925:                              ; preds = %originalBB1923
  br label %6441, !dbg !5291

6441:                                             ; preds = %originalBBpart21925, %originalBBpart2507
  %6442 = load i32, i32* @x.63
  %6443 = load i32, i32* @y.64
  %6444 = sub i32 %6442, 1
  %6445 = mul i32 %6442, %6444
  %6446 = urem i32 %6445, 2
  %6447 = icmp eq i32 %6446, 0
  %6448 = icmp slt i32 %6443, 10
  %6449 = or i1 %6447, %6448
  br i1 %6449, label %originalBB1927, label %originalBB1927alteredBB

originalBB1927:                                   ; preds = %6441, %originalBB1927alteredBB
  %6450 = load i64, i64* %28, align 8, !dbg !5292
  %6451 = add i64 %6450, 1, !dbg !5292
  store i64 %6451, i64* %28, align 8, !dbg !5292
  %6452 = load i32, i32* @x.63
  %6453 = load i32, i32* @y.64
  %6454 = sub i32 %6452, 1
  %6455 = mul i32 %6452, %6454
  %6456 = urem i32 %6455, 2
  %6457 = icmp eq i32 %6456, 0
  %6458 = icmp slt i32 %6453, 10
  %6459 = or i1 %6457, %6458
  br i1 %6459, label %originalBBpart21935, label %originalBB1927alteredBB

originalBBpart21935:                              ; preds = %originalBB1927
  br label %762, !dbg !5293, !llvm.loop !5294

6460:                                             ; preds = %originalBBpart2211
  %6461 = load i32, i32* @x.63
  %6462 = load i32, i32* @y.64
  %6463 = sub i32 %6461, 1
  %6464 = mul i32 %6461, %6463
  %6465 = urem i32 %6464, 2
  %6466 = icmp eq i32 %6465, 0
  %6467 = icmp slt i32 %6462, 10
  %6468 = or i1 %6466, %6467
  br i1 %6468, label %originalBB1937, label %originalBB1937alteredBB

originalBB1937:                                   ; preds = %6460, %originalBB1937alteredBB
  %6469 = load i64, i64* %29, align 8, !dbg !5296
  %6470 = icmp eq i64 %6469, 0, !dbg !5298
  %6471 = load i32, i32* @x.63
  %6472 = load i32, i32* @y.64
  %6473 = sub i32 %6471, 1
  %6474 = mul i32 %6471, %6473
  %6475 = urem i32 %6474, 2
  %6476 = icmp eq i32 %6475, 0
  %6477 = icmp slt i32 %6472, 10
  %6478 = or i1 %6476, %6477
  br i1 %6478, label %originalBBpart21939, label %originalBB1937alteredBB

originalBBpart21939:                              ; preds = %originalBB1937
  br i1 %6470, label %6479, label %6534, !dbg !5299

6479:                                             ; preds = %originalBBpart21939
  %6480 = load i32, i32* @x.63
  %6481 = load i32, i32* @y.64
  %6482 = sub i32 %6480, 1
  %6483 = mul i32 %6480, %6482
  %6484 = urem i32 %6483, 2
  %6485 = icmp eq i32 %6484, 0
  %6486 = icmp slt i32 %6481, 10
  %6487 = or i1 %6485, %6486
  br i1 %6487, label %originalBB1941, label %originalBB1941alteredBB

originalBB1941:                                   ; preds = %6479, %originalBB1941alteredBB
  %6488 = load i32, i32* %23, align 4, !dbg !5300
  %6489 = icmp eq i32 %6488, 2, !dbg !5301
  %6490 = load i32, i32* @x.63
  %6491 = load i32, i32* @y.64
  %6492 = sub i32 %6490, 1
  %6493 = mul i32 %6490, %6492
  %6494 = urem i32 %6493, 2
  %6495 = icmp eq i32 %6494, 0
  %6496 = icmp slt i32 %6491, 10
  %6497 = or i1 %6495, %6496
  br i1 %6497, label %originalBBpart21943, label %originalBB1941alteredBB

originalBBpart21943:                              ; preds = %originalBB1941
  br i1 %6489, label %6498, label %6534, !dbg !5302

6498:                                             ; preds = %originalBBpart21943
  %6499 = load i32, i32* @x.63
  %6500 = load i32, i32* @y.64
  %6501 = sub i32 %6499, 1
  %6502 = mul i32 %6499, %6501
  %6503 = urem i32 %6502, 2
  %6504 = icmp eq i32 %6503, 0
  %6505 = icmp slt i32 %6500, 10
  %6506 = or i1 %6504, %6505
  br i1 %6506, label %originalBB1945, label %originalBB1945alteredBB

originalBB1945:                                   ; preds = %6498, %originalBB1945alteredBB
  %6507 = load i8, i8* %35, align 1, !dbg !5303
  %6508 = trunc i8 %6507 to i1, !dbg !5303
  %6509 = load i32, i32* @x.63
  %6510 = load i32, i32* @y.64
  %6511 = sub i32 %6509, 1
  %6512 = mul i32 %6509, %6511
  %6513 = urem i32 %6512, 2
  %6514 = icmp eq i32 %6513, 0
  %6515 = icmp slt i32 %6510, 10
  %6516 = or i1 %6514, %6515
  br i1 %6516, label %originalBBpart21947, label %originalBB1945alteredBB

originalBBpart21947:                              ; preds = %originalBB1945
  br i1 %6508, label %6517, label %6534, !dbg !5304

6517:                                             ; preds = %originalBBpart21947
  %6518 = load i32, i32* @x.63
  %6519 = load i32, i32* @y.64
  %6520 = sub i32 %6518, 1
  %6521 = mul i32 %6518, %6520
  %6522 = urem i32 %6521, 2
  %6523 = icmp eq i32 %6522, 0
  %6524 = icmp slt i32 %6519, 10
  %6525 = or i1 %6523, %6524
  br i1 %6525, label %originalBB1949, label %originalBB1949alteredBB

originalBB1949:                                   ; preds = %6517, %originalBB1949alteredBB
  %6526 = load i32, i32* @x.63
  %6527 = load i32, i32* @y.64
  %6528 = sub i32 %6526, 1
  %6529 = mul i32 %6526, %6528
  %6530 = urem i32 %6529, 2
  %6531 = icmp eq i32 %6530, 0
  %6532 = icmp slt i32 %6527, 10
  %6533 = or i1 %6531, %6532
  br i1 %6533, label %originalBBpart21951, label %originalBB1949alteredBB

originalBBpart21951:                              ; preds = %originalBB1949
  br label %6990, !dbg !5305

6534:                                             ; preds = %originalBBpart21947, %originalBBpart21943, %originalBBpart21939
  %6535 = load i32, i32* @x.63
  %6536 = load i32, i32* @y.64
  %6537 = sub i32 %6535, 1
  %6538 = mul i32 %6535, %6537
  %6539 = urem i32 %6538, 2
  %6540 = icmp eq i32 %6539, 0
  %6541 = icmp slt i32 %6536, 10
  %6542 = or i1 %6540, %6541
  br i1 %6542, label %originalBB1953, label %originalBB1953alteredBB

originalBB1953:                                   ; preds = %6534, %originalBB1953alteredBB
  %6543 = load i32, i32* %23, align 4, !dbg !5306
  %6544 = icmp eq i32 %6543, 2, !dbg !5308
  %6545 = load i32, i32* @x.63
  %6546 = load i32, i32* @y.64
  %6547 = sub i32 %6545, 1
  %6548 = mul i32 %6545, %6547
  %6549 = urem i32 %6548, 2
  %6550 = icmp eq i32 %6549, 0
  %6551 = icmp slt i32 %6546, 10
  %6552 = or i1 %6550, %6551
  br i1 %6552, label %originalBBpart21955, label %originalBB1953alteredBB

originalBBpart21955:                              ; preds = %originalBB1953
  br i1 %6544, label %6553, label %6726, !dbg !5309

6553:                                             ; preds = %originalBBpart21955
  %6554 = load i32, i32* @x.63
  %6555 = load i32, i32* @y.64
  %6556 = sub i32 %6554, 1
  %6557 = mul i32 %6554, %6556
  %6558 = urem i32 %6557, 2
  %6559 = icmp eq i32 %6558, 0
  %6560 = icmp slt i32 %6555, 10
  %6561 = or i1 %6559, %6560
  br i1 %6561, label %originalBB1957, label %originalBB1957alteredBB

originalBB1957:                                   ; preds = %6553, %originalBB1957alteredBB
  %6562 = load i8, i8* %35, align 1, !dbg !5310
  %6563 = trunc i8 %6562 to i1, !dbg !5310
  %6564 = load i32, i32* @x.63
  %6565 = load i32, i32* @y.64
  %6566 = sub i32 %6564, 1
  %6567 = mul i32 %6564, %6566
  %6568 = urem i32 %6567, 2
  %6569 = icmp eq i32 %6568, 0
  %6570 = icmp slt i32 %6565, 10
  %6571 = or i1 %6569, %6570
  br i1 %6571, label %originalBBpart21959, label %originalBB1957alteredBB

originalBBpart21959:                              ; preds = %originalBB1957
  br i1 %6563, label %6726, label %6572, !dbg !5311

6572:                                             ; preds = %originalBBpart21959
  %6573 = load i32, i32* @x.63
  %6574 = load i32, i32* @y.64
  %6575 = sub i32 %6573, 1
  %6576 = mul i32 %6573, %6575
  %6577 = urem i32 %6576, 2
  %6578 = icmp eq i32 %6577, 0
  %6579 = icmp slt i32 %6574, 10
  %6580 = or i1 %6578, %6579
  br i1 %6580, label %originalBB1961, label %originalBB1961alteredBB

originalBB1961:                                   ; preds = %6572, %originalBB1961alteredBB
  %6581 = load i8, i8* %37, align 1, !dbg !5312
  %6582 = trunc i8 %6581 to i1, !dbg !5312
  %6583 = load i32, i32* @x.63
  %6584 = load i32, i32* @y.64
  %6585 = sub i32 %6583, 1
  %6586 = mul i32 %6583, %6585
  %6587 = urem i32 %6586, 2
  %6588 = icmp eq i32 %6587, 0
  %6589 = icmp slt i32 %6584, 10
  %6590 = or i1 %6588, %6589
  br i1 %6590, label %originalBBpart21963, label %originalBB1961alteredBB

originalBBpart21963:                              ; preds = %originalBB1961
  br i1 %6582, label %6591, label %6726, !dbg !5313

6591:                                             ; preds = %originalBBpart21963
  %6592 = load i32, i32* @x.63
  %6593 = load i32, i32* @y.64
  %6594 = sub i32 %6592, 1
  %6595 = mul i32 %6592, %6594
  %6596 = urem i32 %6595, 2
  %6597 = icmp eq i32 %6596, 0
  %6598 = icmp slt i32 %6593, 10
  %6599 = or i1 %6597, %6598
  br i1 %6599, label %originalBB1965, label %originalBB1965alteredBB

originalBB1965:                                   ; preds = %6591, %originalBB1965alteredBB
  %6600 = load i8, i8* %38, align 1, !dbg !5314
  %6601 = trunc i8 %6600 to i1, !dbg !5314
  %6602 = load i32, i32* @x.63
  %6603 = load i32, i32* @y.64
  %6604 = sub i32 %6602, 1
  %6605 = mul i32 %6602, %6604
  %6606 = urem i32 %6605, 2
  %6607 = icmp eq i32 %6606, 0
  %6608 = icmp slt i32 %6603, 10
  %6609 = or i1 %6607, %6608
  br i1 %6609, label %originalBBpart21967, label %originalBB1965alteredBB

originalBBpart21967:                              ; preds = %originalBB1965
  br i1 %6601, label %6610, label %6636, !dbg !5317

6610:                                             ; preds = %originalBBpart21967
  %6611 = load i32, i32* @x.63
  %6612 = load i32, i32* @y.64
  %6613 = sub i32 %6611, 1
  %6614 = mul i32 %6611, %6613
  %6615 = urem i32 %6614, 2
  %6616 = icmp eq i32 %6615, 0
  %6617 = icmp slt i32 %6612, 10
  %6618 = or i1 %6616, %6617
  br i1 %6618, label %originalBB1969, label %originalBB1969alteredBB

originalBB1969:                                   ; preds = %6610, %originalBB1969alteredBB
  %6619 = load i8*, i8** %19, align 8, !dbg !5318
  %6620 = load i64, i64* %30, align 8, !dbg !5319
  %6621 = load i8*, i8** %21, align 8, !dbg !5320
  %6622 = load i64, i64* %22, align 8, !dbg !5321
  %6623 = load i32, i32* %24, align 4, !dbg !5322
  %6624 = load i32*, i32** %25, align 8, !dbg !5323
  %6625 = load i8*, i8** %26, align 8, !dbg !5324
  %6626 = load i8*, i8** %27, align 8, !dbg !5325
  %6627 = call i64 @quotearg_buffer_restyled(i8* %6619, i64 %6620, i8* %6621, i64 %6622, i32 5, i32 %6623, i32* %6624, i8* %6625, i8* %6626), !dbg !5326
  store i64 %6627, i64* %18, align 8, !dbg !5327
  %6628 = load i32, i32* @x.63
  %6629 = load i32, i32* @y.64
  %6630 = sub i32 %6628, 1
  %6631 = mul i32 %6628, %6630
  %6632 = urem i32 %6631, 2
  %6633 = icmp eq i32 %6632, 0
  %6634 = icmp slt i32 %6629, 10
  %6635 = or i1 %6633, %6634
  br i1 %6635, label %originalBBpart21971, label %originalBB1969alteredBB

originalBBpart21971:                              ; preds = %originalBB1969
  br label %7072, !dbg !5327

6636:                                             ; preds = %originalBBpart21967
  %6637 = load i32, i32* @x.63
  %6638 = load i32, i32* @y.64
  %6639 = sub i32 %6637, 1
  %6640 = mul i32 %6637, %6639
  %6641 = urem i32 %6640, 2
  %6642 = icmp eq i32 %6641, 0
  %6643 = icmp slt i32 %6638, 10
  %6644 = or i1 %6642, %6643
  br i1 %6644, label %originalBB1973, label %originalBB1973alteredBB

originalBB1973:                                   ; preds = %6636, %originalBB1973alteredBB
  %6645 = load i64, i64* %20, align 8, !dbg !5328
  %6646 = icmp ne i64 %6645, 0, !dbg !5328
  %6647 = load i32, i32* @x.63
  %6648 = load i32, i32* @y.64
  %6649 = sub i32 %6647, 1
  %6650 = mul i32 %6647, %6649
  %6651 = urem i32 %6650, 2
  %6652 = icmp eq i32 %6651, 0
  %6653 = icmp slt i32 %6648, 10
  %6654 = or i1 %6652, %6653
  br i1 %6654, label %originalBBpart21975, label %originalBB1973alteredBB

originalBBpart21975:                              ; preds = %originalBB1973
  br i1 %6646, label %6692, label %6655, !dbg !5330

6655:                                             ; preds = %originalBBpart21975
  %6656 = load i32, i32* @x.63
  %6657 = load i32, i32* @y.64
  %6658 = sub i32 %6656, 1
  %6659 = mul i32 %6656, %6658
  %6660 = urem i32 %6659, 2
  %6661 = icmp eq i32 %6660, 0
  %6662 = icmp slt i32 %6657, 10
  %6663 = or i1 %6661, %6662
  br i1 %6663, label %originalBB1977, label %originalBB1977alteredBB

originalBB1977:                                   ; preds = %6655, %originalBB1977alteredBB
  %6664 = load i64, i64* %30, align 8, !dbg !5331
  %6665 = icmp ne i64 %6664, 0, !dbg !5331
  %6666 = load i32, i32* @x.63
  %6667 = load i32, i32* @y.64
  %6668 = sub i32 %6666, 1
  %6669 = mul i32 %6666, %6668
  %6670 = urem i32 %6669, 2
  %6671 = icmp eq i32 %6670, 0
  %6672 = icmp slt i32 %6667, 10
  %6673 = or i1 %6671, %6672
  br i1 %6673, label %originalBBpart21979, label %originalBB1977alteredBB

originalBBpart21979:                              ; preds = %originalBB1977
  br i1 %6665, label %6674, label %6692, !dbg !5332

6674:                                             ; preds = %originalBBpart21979
  %6675 = load i32, i32* @x.63
  %6676 = load i32, i32* @y.64
  %6677 = sub i32 %6675, 1
  %6678 = mul i32 %6675, %6677
  %6679 = urem i32 %6678, 2
  %6680 = icmp eq i32 %6679, 0
  %6681 = icmp slt i32 %6676, 10
  %6682 = or i1 %6680, %6681
  br i1 %6682, label %originalBB1981, label %originalBB1981alteredBB

originalBB1981:                                   ; preds = %6674, %originalBB1981alteredBB
  %6683 = load i64, i64* %30, align 8, !dbg !5333
  store i64 %6683, i64* %20, align 8, !dbg !5335
  store i64 0, i64* %29, align 8, !dbg !5336
  %6684 = load i32, i32* @x.63
  %6685 = load i32, i32* @y.64
  %6686 = sub i32 %6684, 1
  %6687 = mul i32 %6684, %6686
  %6688 = urem i32 %6687, 2
  %6689 = icmp eq i32 %6688, 0
  %6690 = icmp slt i32 %6685, 10
  %6691 = or i1 %6689, %6690
  br i1 %6691, label %originalBBpart21983, label %originalBB1981alteredBB

originalBBpart21983:                              ; preds = %originalBB1981
  br label %66, !dbg !5337

6692:                                             ; preds = %originalBBpart21979, %originalBBpart21975
  %6693 = load i32, i32* @x.63
  %6694 = load i32, i32* @y.64
  %6695 = sub i32 %6693, 1
  %6696 = mul i32 %6693, %6695
  %6697 = urem i32 %6696, 2
  %6698 = icmp eq i32 %6697, 0
  %6699 = icmp slt i32 %6694, 10
  %6700 = or i1 %6698, %6699
  br i1 %6700, label %originalBB1985, label %originalBB1985alteredBB

originalBB1985:                                   ; preds = %6692, %originalBB1985alteredBB
  %6701 = load i32, i32* @x.63
  %6702 = load i32, i32* @y.64
  %6703 = sub i32 %6701, 1
  %6704 = mul i32 %6701, %6703
  %6705 = urem i32 %6704, 2
  %6706 = icmp eq i32 %6705, 0
  %6707 = icmp slt i32 %6702, 10
  %6708 = or i1 %6706, %6707
  br i1 %6708, label %originalBBpart21987, label %originalBB1985alteredBB

originalBBpart21987:                              ; preds = %originalBB1985
  br label %6709

6709:                                             ; preds = %originalBBpart21987
  %6710 = load i32, i32* @x.63
  %6711 = load i32, i32* @y.64
  %6712 = sub i32 %6710, 1
  %6713 = mul i32 %6710, %6712
  %6714 = urem i32 %6713, 2
  %6715 = icmp eq i32 %6714, 0
  %6716 = icmp slt i32 %6711, 10
  %6717 = or i1 %6715, %6716
  br i1 %6717, label %originalBB1989, label %originalBB1989alteredBB

originalBB1989:                                   ; preds = %6709, %originalBB1989alteredBB
  %6718 = load i32, i32* @x.63
  %6719 = load i32, i32* @y.64
  %6720 = sub i32 %6718, 1
  %6721 = mul i32 %6718, %6720
  %6722 = urem i32 %6721, 2
  %6723 = icmp eq i32 %6722, 0
  %6724 = icmp slt i32 %6719, 10
  %6725 = or i1 %6723, %6724
  br i1 %6725, label %originalBBpart21991, label %originalBB1989alteredBB

originalBBpart21991:                              ; preds = %originalBB1989
  br label %6726, !dbg !5338

6726:                                             ; preds = %originalBBpart21991, %originalBBpart21963, %originalBBpart21959, %originalBBpart21955
  %6727 = load i32, i32* @x.63
  %6728 = load i32, i32* @y.64
  %6729 = sub i32 %6727, 1
  %6730 = mul i32 %6727, %6729
  %6731 = urem i32 %6730, 2
  %6732 = icmp eq i32 %6731, 0
  %6733 = icmp slt i32 %6728, 10
  %6734 = or i1 %6732, %6733
  br i1 %6734, label %originalBB1993, label %originalBB1993alteredBB

originalBB1993:                                   ; preds = %6726, %originalBB1993alteredBB
  %6735 = load i8*, i8** %31, align 8, !dbg !5339
  %6736 = icmp ne i8* %6735, null, !dbg !5339
  %6737 = load i32, i32* @x.63
  %6738 = load i32, i32* @y.64
  %6739 = sub i32 %6737, 1
  %6740 = mul i32 %6737, %6739
  %6741 = urem i32 %6740, 2
  %6742 = icmp eq i32 %6741, 0
  %6743 = icmp slt i32 %6738, 10
  %6744 = or i1 %6742, %6743
  br i1 %6744, label %originalBBpart21995, label %originalBB1993alteredBB

originalBBpart21995:                              ; preds = %originalBB1993
  br i1 %6736, label %6745, label %6932, !dbg !5341

6745:                                             ; preds = %originalBBpart21995
  %6746 = load i32, i32* @x.63
  %6747 = load i32, i32* @y.64
  %6748 = sub i32 %6746, 1
  %6749 = mul i32 %6746, %6748
  %6750 = urem i32 %6749, 2
  %6751 = icmp eq i32 %6750, 0
  %6752 = icmp slt i32 %6747, 10
  %6753 = or i1 %6751, %6752
  br i1 %6753, label %originalBB1997, label %originalBB1997alteredBB

originalBB1997:                                   ; preds = %6745, %originalBB1997alteredBB
  %6754 = load i8, i8* %35, align 1, !dbg !5342
  %6755 = trunc i8 %6754 to i1, !dbg !5342
  %6756 = load i32, i32* @x.63
  %6757 = load i32, i32* @y.64
  %6758 = sub i32 %6756, 1
  %6759 = mul i32 %6756, %6758
  %6760 = urem i32 %6759, 2
  %6761 = icmp eq i32 %6760, 0
  %6762 = icmp slt i32 %6757, 10
  %6763 = or i1 %6761, %6762
  br i1 %6763, label %originalBBpart21999, label %originalBB1997alteredBB

originalBBpart21999:                              ; preds = %originalBB1997
  br i1 %6755, label %6932, label %6764, !dbg !5343

6764:                                             ; preds = %originalBBpart21999
  %6765 = load i32, i32* @x.63
  %6766 = load i32, i32* @y.64
  %6767 = sub i32 %6765, 1
  %6768 = mul i32 %6765, %6767
  %6769 = urem i32 %6768, 2
  %6770 = icmp eq i32 %6769, 0
  %6771 = icmp slt i32 %6766, 10
  %6772 = or i1 %6770, %6771
  br i1 %6772, label %originalBB2001, label %originalBB2001alteredBB

originalBB2001:                                   ; preds = %6764, %originalBB2001alteredBB
  %6773 = load i32, i32* @x.63
  %6774 = load i32, i32* @y.64
  %6775 = sub i32 %6773, 1
  %6776 = mul i32 %6773, %6775
  %6777 = urem i32 %6776, 2
  %6778 = icmp eq i32 %6777, 0
  %6779 = icmp slt i32 %6774, 10
  %6780 = or i1 %6778, %6779
  br i1 %6780, label %originalBBpart22003, label %originalBB2001alteredBB

originalBBpart22003:                              ; preds = %originalBB2001
  br label %6781, !dbg !5344

6781:                                             ; preds = %originalBBpart22037, %originalBBpart22003
  %6782 = load i32, i32* @x.63
  %6783 = load i32, i32* @y.64
  %6784 = sub i32 %6782, 1
  %6785 = mul i32 %6782, %6784
  %6786 = urem i32 %6785, 2
  %6787 = icmp eq i32 %6786, 0
  %6788 = icmp slt i32 %6783, 10
  %6789 = or i1 %6787, %6788
  br i1 %6789, label %originalBB2005, label %originalBB2005alteredBB

originalBB2005:                                   ; preds = %6781, %originalBB2005alteredBB
  %6790 = load i8*, i8** %31, align 8, !dbg !5345
  %6791 = load i8, i8* %6790, align 1, !dbg !5348
  %6792 = icmp ne i8 %6791, 0, !dbg !5349
  %6793 = load i32, i32* @x.63
  %6794 = load i32, i32* @y.64
  %6795 = sub i32 %6793, 1
  %6796 = mul i32 %6793, %6795
  %6797 = urem i32 %6796, 2
  %6798 = icmp eq i32 %6797, 0
  %6799 = icmp slt i32 %6794, 10
  %6800 = or i1 %6798, %6799
  br i1 %6800, label %originalBBpart22007, label %originalBB2005alteredBB

originalBBpart22007:                              ; preds = %originalBB2005
  br i1 %6792, label %6801, label %6915, !dbg !5349

6801:                                             ; preds = %originalBBpart22007
  %6802 = load i32, i32* @x.63
  %6803 = load i32, i32* @y.64
  %6804 = sub i32 %6802, 1
  %6805 = mul i32 %6802, %6804
  %6806 = urem i32 %6805, 2
  %6807 = icmp eq i32 %6806, 0
  %6808 = icmp slt i32 %6803, 10
  %6809 = or i1 %6807, %6808
  br i1 %6809, label %originalBB2009, label %originalBB2009alteredBB

originalBB2009:                                   ; preds = %6801, %originalBB2009alteredBB
  %6810 = load i32, i32* @x.63
  %6811 = load i32, i32* @y.64
  %6812 = sub i32 %6810, 1
  %6813 = mul i32 %6810, %6812
  %6814 = urem i32 %6813, 2
  %6815 = icmp eq i32 %6814, 0
  %6816 = icmp slt i32 %6811, 10
  %6817 = or i1 %6815, %6816
  br i1 %6817, label %originalBBpart22011, label %originalBB2009alteredBB

originalBBpart22011:                              ; preds = %originalBB2009
  br label %6818, !dbg !5350

6818:                                             ; preds = %originalBBpart22011
  %6819 = load i32, i32* @x.63
  %6820 = load i32, i32* @y.64
  %6821 = sub i32 %6819, 1
  %6822 = mul i32 %6819, %6821
  %6823 = urem i32 %6822, 2
  %6824 = icmp eq i32 %6823, 0
  %6825 = icmp slt i32 %6820, 10
  %6826 = or i1 %6824, %6825
  br i1 %6826, label %originalBB2013, label %originalBB2013alteredBB

originalBB2013:                                   ; preds = %6818, %originalBB2013alteredBB
  %6827 = load i64, i64* %29, align 8, !dbg !5351
  %6828 = load i64, i64* %20, align 8, !dbg !5351
  %6829 = icmp ult i64 %6827, %6828, !dbg !5351
  %6830 = load i32, i32* @x.63
  %6831 = load i32, i32* @y.64
  %6832 = sub i32 %6830, 1
  %6833 = mul i32 %6830, %6832
  %6834 = urem i32 %6833, 2
  %6835 = icmp eq i32 %6834, 0
  %6836 = icmp slt i32 %6831, 10
  %6837 = or i1 %6835, %6836
  br i1 %6837, label %originalBBpart22015, label %originalBB2013alteredBB

originalBBpart22015:                              ; preds = %originalBB2013
  br i1 %6829, label %6838, label %6860, !dbg !5354

6838:                                             ; preds = %originalBBpart22015
  %6839 = load i32, i32* @x.63
  %6840 = load i32, i32* @y.64
  %6841 = sub i32 %6839, 1
  %6842 = mul i32 %6839, %6841
  %6843 = urem i32 %6842, 2
  %6844 = icmp eq i32 %6843, 0
  %6845 = icmp slt i32 %6840, 10
  %6846 = or i1 %6844, %6845
  br i1 %6846, label %originalBB2017, label %originalBB2017alteredBB

originalBB2017:                                   ; preds = %6838, %originalBB2017alteredBB
  %6847 = load i8*, i8** %31, align 8, !dbg !5351
  %6848 = load i8, i8* %6847, align 1, !dbg !5351
  %6849 = load i8*, i8** %19, align 8, !dbg !5351
  %6850 = load i64, i64* %29, align 8, !dbg !5351
  %6851 = getelementptr inbounds i8, i8* %6849, i64 %6850, !dbg !5351
  store i8 %6848, i8* %6851, align 1, !dbg !5351
  %6852 = load i32, i32* @x.63
  %6853 = load i32, i32* @y.64
  %6854 = sub i32 %6852, 1
  %6855 = mul i32 %6852, %6854
  %6856 = urem i32 %6855, 2
  %6857 = icmp eq i32 %6856, 0
  %6858 = icmp slt i32 %6853, 10
  %6859 = or i1 %6857, %6858
  br i1 %6859, label %originalBBpart22019, label %originalBB2017alteredBB

originalBBpart22019:                              ; preds = %originalBB2017
  br label %6860, !dbg !5351

6860:                                             ; preds = %originalBBpart22019, %originalBBpart22015
  %6861 = load i32, i32* @x.63
  %6862 = load i32, i32* @y.64
  %6863 = sub i32 %6861, 1
  %6864 = mul i32 %6861, %6863
  %6865 = urem i32 %6864, 2
  %6866 = icmp eq i32 %6865, 0
  %6867 = icmp slt i32 %6862, 10
  %6868 = or i1 %6866, %6867
  br i1 %6868, label %originalBB2021, label %originalBB2021alteredBB

originalBB2021:                                   ; preds = %6860, %originalBB2021alteredBB
  %6869 = load i64, i64* %29, align 8, !dbg !5354
  %6870 = add i64 %6869, 1, !dbg !5354
  store i64 %6870, i64* %29, align 8, !dbg !5354
  %6871 = load i32, i32* @x.63
  %6872 = load i32, i32* @y.64
  %6873 = sub i32 %6871, 1
  %6874 = mul i32 %6871, %6873
  %6875 = urem i32 %6874, 2
  %6876 = icmp eq i32 %6875, 0
  %6877 = icmp slt i32 %6872, 10
  %6878 = or i1 %6876, %6877
  br i1 %6878, label %originalBBpart22029, label %originalBB2021alteredBB

originalBBpart22029:                              ; preds = %originalBB2021
  br label %6879, !dbg !5354

6879:                                             ; preds = %originalBBpart22029
  %6880 = load i32, i32* @x.63
  %6881 = load i32, i32* @y.64
  %6882 = sub i32 %6880, 1
  %6883 = mul i32 %6880, %6882
  %6884 = urem i32 %6883, 2
  %6885 = icmp eq i32 %6884, 0
  %6886 = icmp slt i32 %6881, 10
  %6887 = or i1 %6885, %6886
  br i1 %6887, label %originalBB2031, label %originalBB2031alteredBB

originalBB2031:                                   ; preds = %6879, %originalBB2031alteredBB
  %6888 = load i32, i32* @x.63
  %6889 = load i32, i32* @y.64
  %6890 = sub i32 %6888, 1
  %6891 = mul i32 %6888, %6890
  %6892 = urem i32 %6891, 2
  %6893 = icmp eq i32 %6892, 0
  %6894 = icmp slt i32 %6889, 10
  %6895 = or i1 %6893, %6894
  br i1 %6895, label %originalBBpart22033, label %originalBB2031alteredBB

originalBBpart22033:                              ; preds = %originalBB2031
  br label %6896, !dbg !5354

6896:                                             ; preds = %originalBBpart22033
  %6897 = load i32, i32* @x.63
  %6898 = load i32, i32* @y.64
  %6899 = sub i32 %6897, 1
  %6900 = mul i32 %6897, %6899
  %6901 = urem i32 %6900, 2
  %6902 = icmp eq i32 %6901, 0
  %6903 = icmp slt i32 %6898, 10
  %6904 = or i1 %6902, %6903
  br i1 %6904, label %originalBB2035, label %originalBB2035alteredBB

originalBB2035:                                   ; preds = %6896, %originalBB2035alteredBB
  %6905 = load i8*, i8** %31, align 8, !dbg !5355
  %6906 = getelementptr inbounds i8, i8* %6905, i32 1, !dbg !5355
  store i8* %6906, i8** %31, align 8, !dbg !5355
  %6907 = load i32, i32* @x.63
  %6908 = load i32, i32* @y.64
  %6909 = sub i32 %6907, 1
  %6910 = mul i32 %6907, %6909
  %6911 = urem i32 %6910, 2
  %6912 = icmp eq i32 %6911, 0
  %6913 = icmp slt i32 %6908, 10
  %6914 = or i1 %6912, %6913
  br i1 %6914, label %originalBBpart22037, label %originalBB2035alteredBB

originalBBpart22037:                              ; preds = %originalBB2035
  br label %6781, !dbg !5356, !llvm.loop !5357

6915:                                             ; preds = %originalBBpart22007
  %6916 = load i32, i32* @x.63
  %6917 = load i32, i32* @y.64
  %6918 = sub i32 %6916, 1
  %6919 = mul i32 %6916, %6918
  %6920 = urem i32 %6919, 2
  %6921 = icmp eq i32 %6920, 0
  %6922 = icmp slt i32 %6917, 10
  %6923 = or i1 %6921, %6922
  br i1 %6923, label %originalBB2039, label %originalBB2039alteredBB

originalBB2039:                                   ; preds = %6915, %originalBB2039alteredBB
  %6924 = load i32, i32* @x.63
  %6925 = load i32, i32* @y.64
  %6926 = sub i32 %6924, 1
  %6927 = mul i32 %6924, %6926
  %6928 = urem i32 %6927, 2
  %6929 = icmp eq i32 %6928, 0
  %6930 = icmp slt i32 %6925, 10
  %6931 = or i1 %6929, %6930
  br i1 %6931, label %originalBBpart22041, label %originalBB2039alteredBB

originalBBpart22041:                              ; preds = %originalBB2039
  br label %6932, !dbg !5358

6932:                                             ; preds = %originalBBpart22041, %originalBBpart21999, %originalBBpart21995
  %6933 = load i32, i32* @x.63
  %6934 = load i32, i32* @y.64
  %6935 = sub i32 %6933, 1
  %6936 = mul i32 %6933, %6935
  %6937 = urem i32 %6936, 2
  %6938 = icmp eq i32 %6937, 0
  %6939 = icmp slt i32 %6934, 10
  %6940 = or i1 %6938, %6939
  br i1 %6940, label %originalBB2043, label %originalBB2043alteredBB

originalBB2043:                                   ; preds = %6932, %originalBB2043alteredBB
  %6941 = load i64, i64* %29, align 8, !dbg !5359
  %6942 = load i64, i64* %20, align 8, !dbg !5361
  %6943 = icmp ult i64 %6941, %6942, !dbg !5362
  %6944 = load i32, i32* @x.63
  %6945 = load i32, i32* @y.64
  %6946 = sub i32 %6944, 1
  %6947 = mul i32 %6944, %6946
  %6948 = urem i32 %6947, 2
  %6949 = icmp eq i32 %6948, 0
  %6950 = icmp slt i32 %6945, 10
  %6951 = or i1 %6949, %6950
  br i1 %6951, label %originalBBpart22045, label %originalBB2043alteredBB

originalBBpart22045:                              ; preds = %originalBB2043
  br i1 %6943, label %6952, label %6972, !dbg !5363

6952:                                             ; preds = %originalBBpart22045
  %6953 = load i32, i32* @x.63
  %6954 = load i32, i32* @y.64
  %6955 = sub i32 %6953, 1
  %6956 = mul i32 %6953, %6955
  %6957 = urem i32 %6956, 2
  %6958 = icmp eq i32 %6957, 0
  %6959 = icmp slt i32 %6954, 10
  %6960 = or i1 %6958, %6959
  br i1 %6960, label %originalBB2047, label %originalBB2047alteredBB

originalBB2047:                                   ; preds = %6952, %originalBB2047alteredBB
  %6961 = load i8*, i8** %19, align 8, !dbg !5364
  %6962 = load i64, i64* %29, align 8, !dbg !5365
  %6963 = getelementptr inbounds i8, i8* %6961, i64 %6962, !dbg !5364
  store i8 0, i8* %6963, align 1, !dbg !5366
  %6964 = load i32, i32* @x.63
  %6965 = load i32, i32* @y.64
  %6966 = sub i32 %6964, 1
  %6967 = mul i32 %6964, %6966
  %6968 = urem i32 %6967, 2
  %6969 = icmp eq i32 %6968, 0
  %6970 = icmp slt i32 %6965, 10
  %6971 = or i1 %6969, %6970
  br i1 %6971, label %originalBBpart22049, label %originalBB2047alteredBB

originalBBpart22049:                              ; preds = %originalBB2047
  br label %6972, !dbg !5364

6972:                                             ; preds = %originalBBpart22049, %originalBBpart22045
  %6973 = load i32, i32* @x.63
  %6974 = load i32, i32* @y.64
  %6975 = sub i32 %6973, 1
  %6976 = mul i32 %6973, %6975
  %6977 = urem i32 %6976, 2
  %6978 = icmp eq i32 %6977, 0
  %6979 = icmp slt i32 %6974, 10
  %6980 = or i1 %6978, %6979
  br i1 %6980, label %originalBB2051, label %originalBB2051alteredBB

originalBB2051:                                   ; preds = %6972, %originalBB2051alteredBB
  %6981 = load i64, i64* %29, align 8, !dbg !5367
  store i64 %6981, i64* %18, align 8, !dbg !5368
  %6982 = load i32, i32* @x.63
  %6983 = load i32, i32* @y.64
  %6984 = sub i32 %6982, 1
  %6985 = mul i32 %6982, %6984
  %6986 = urem i32 %6985, 2
  %6987 = icmp eq i32 %6986, 0
  %6988 = icmp slt i32 %6983, 10
  %6989 = or i1 %6987, %6988
  br i1 %6989, label %originalBBpart22053, label %originalBB2051alteredBB

originalBBpart22053:                              ; preds = %originalBB2051
  br label %7072, !dbg !5368

6990:                                             ; preds = %originalBBpart21951, %originalBBpart21724, %originalBBpart21248, %originalBBpart21124, %originalBBpart2870, %originalBBpart2854, %originalBBpart2790, %originalBBpart2754, %originalBBpart2582, %originalBBpart2527, %originalBBpart2282, %originalBBpart2258
  call void @llvm.dbg.label(metadata !5369), !dbg !5370
  %6991 = load i32, i32* @x.63
  %6992 = load i32, i32* @y.64
  %6993 = sub i32 %6991, 1
  %6994 = mul i32 %6991, %6993
  %6995 = urem i32 %6994, 2
  %6996 = icmp eq i32 %6995, 0
  %6997 = icmp slt i32 %6992, 10
  %6998 = or i1 %6996, %6997
  br i1 %6998, label %originalBB2055, label %originalBB2055alteredBB

originalBB2055:                                   ; preds = %6990, %originalBB2055alteredBB
  %6999 = load i32, i32* %23, align 4, !dbg !5371
  %7000 = icmp eq i32 %6999, 2, !dbg !5373
  %7001 = load i32, i32* @x.63
  %7002 = load i32, i32* @y.64
  %7003 = sub i32 %7001, 1
  %7004 = mul i32 %7001, %7003
  %7005 = urem i32 %7004, 2
  %7006 = icmp eq i32 %7005, 0
  %7007 = icmp slt i32 %7002, 10
  %7008 = or i1 %7006, %7007
  br i1 %7008, label %originalBBpart22057, label %originalBB2055alteredBB

originalBBpart22057:                              ; preds = %originalBB2055
  br i1 %7000, label %7009, label %7045, !dbg !5374

7009:                                             ; preds = %originalBBpart22057
  %7010 = load i32, i32* @x.63
  %7011 = load i32, i32* @y.64
  %7012 = sub i32 %7010, 1
  %7013 = mul i32 %7010, %7012
  %7014 = urem i32 %7013, 2
  %7015 = icmp eq i32 %7014, 0
  %7016 = icmp slt i32 %7011, 10
  %7017 = or i1 %7015, %7016
  br i1 %7017, label %originalBB2059, label %originalBB2059alteredBB

originalBB2059:                                   ; preds = %7009, %originalBB2059alteredBB
  %7018 = load i8, i8* %33, align 1, !dbg !5375
  %7019 = trunc i8 %7018 to i1, !dbg !5375
  %7020 = load i32, i32* @x.63
  %7021 = load i32, i32* @y.64
  %7022 = sub i32 %7020, 1
  %7023 = mul i32 %7020, %7022
  %7024 = urem i32 %7023, 2
  %7025 = icmp eq i32 %7024, 0
  %7026 = icmp slt i32 %7021, 10
  %7027 = or i1 %7025, %7026
  br i1 %7027, label %originalBBpart22061, label %originalBB2059alteredBB

originalBBpart22061:                              ; preds = %originalBB2059
  br i1 %7019, label %7028, label %7045, !dbg !5376

7028:                                             ; preds = %originalBBpart22061
  %7029 = load i32, i32* @x.63
  %7030 = load i32, i32* @y.64
  %7031 = sub i32 %7029, 1
  %7032 = mul i32 %7029, %7031
  %7033 = urem i32 %7032, 2
  %7034 = icmp eq i32 %7033, 0
  %7035 = icmp slt i32 %7030, 10
  %7036 = or i1 %7034, %7035
  br i1 %7036, label %originalBB2063, label %originalBB2063alteredBB

originalBB2063:                                   ; preds = %7028, %originalBB2063alteredBB
  store i32 4, i32* %23, align 4, !dbg !5377
  %7037 = load i32, i32* @x.63
  %7038 = load i32, i32* @y.64
  %7039 = sub i32 %7037, 1
  %7040 = mul i32 %7037, %7039
  %7041 = urem i32 %7040, 2
  %7042 = icmp eq i32 %7041, 0
  %7043 = icmp slt i32 %7038, 10
  %7044 = or i1 %7042, %7043
  br i1 %7044, label %originalBBpart22065, label %originalBB2063alteredBB

originalBBpart22065:                              ; preds = %originalBB2063
  br label %7045, !dbg !5378

7045:                                             ; preds = %originalBBpart22065, %originalBBpart22061, %originalBBpart22057
  %7046 = load i32, i32* @x.63
  %7047 = load i32, i32* @y.64
  %7048 = sub i32 %7046, 1
  %7049 = mul i32 %7046, %7048
  %7050 = urem i32 %7049, 2
  %7051 = icmp eq i32 %7050, 0
  %7052 = icmp slt i32 %7047, 10
  %7053 = or i1 %7051, %7052
  br i1 %7053, label %originalBB2067, label %originalBB2067alteredBB

originalBB2067:                                   ; preds = %7045, %originalBB2067alteredBB
  %7054 = load i8*, i8** %19, align 8, !dbg !5379
  %7055 = load i64, i64* %20, align 8, !dbg !5380
  %7056 = load i8*, i8** %21, align 8, !dbg !5381
  %7057 = load i64, i64* %22, align 8, !dbg !5382
  %7058 = load i32, i32* %23, align 4, !dbg !5383
  %7059 = load i32, i32* %24, align 4, !dbg !5384
  %7060 = and i32 %7059, -3, !dbg !5385
  %7061 = load i8*, i8** %26, align 8, !dbg !5386
  %7062 = load i8*, i8** %27, align 8, !dbg !5387
  %7063 = call i64 @quotearg_buffer_restyled(i8* %7054, i64 %7055, i8* %7056, i64 %7057, i32 %7058, i32 %7060, i32* null, i8* %7061, i8* %7062), !dbg !5388
  store i64 %7063, i64* %18, align 8, !dbg !5389
  %7064 = load i32, i32* @x.63
  %7065 = load i32, i32* @y.64
  %7066 = sub i32 %7064, 1
  %7067 = mul i32 %7064, %7066
  %7068 = urem i32 %7067, 2
  %7069 = icmp eq i32 %7068, 0
  %7070 = icmp slt i32 %7065, 10
  %7071 = or i1 %7069, %7070
  br i1 %7071, label %originalBBpart22079, label %originalBB2067alteredBB

originalBBpart22079:                              ; preds = %originalBB2067
  br label %7072, !dbg !5389

7072:                                             ; preds = %originalBBpart22079, %originalBBpart22053, %originalBBpart21971
  %7073 = load i32, i32* @x.63
  %7074 = load i32, i32* @y.64
  %7075 = sub i32 %7073, 1
  %7076 = mul i32 %7073, %7075
  %7077 = urem i32 %7076, 2
  %7078 = icmp eq i32 %7077, 0
  %7079 = icmp slt i32 %7074, 10
  %7080 = or i1 %7078, %7079
  br i1 %7080, label %originalBB2081, label %originalBB2081alteredBB

originalBB2081:                                   ; preds = %7072, %originalBB2081alteredBB
  %7081 = load i64, i64* %18, align 8, !dbg !5390
  %7082 = load i32, i32* @x.63
  %7083 = load i32, i32* @y.64
  %7084 = sub i32 %7082, 1
  %7085 = mul i32 %7082, %7084
  %7086 = urem i32 %7085, 2
  %7087 = icmp eq i32 %7086, 0
  %7088 = icmp slt i32 %7083, 10
  %7089 = or i1 %7087, %7088
  br i1 %7089, label %originalBBpart22083, label %originalBB2081alteredBB

originalBBpart22083:                              ; preds = %originalBB2081
  ret i64 %7081, !dbg !5390

originalBBalteredBB:                              ; preds = %originalBB, %9
  %7090 = alloca i64, align 8
  %7091 = alloca i8*, align 8
  %7092 = alloca i64, align 8
  %7093 = alloca i8*, align 8
  %7094 = alloca i64, align 8
  %7095 = alloca i32, align 4
  %7096 = alloca i32, align 4
  %7097 = alloca i32*, align 8
  %7098 = alloca i8*, align 8
  %7099 = alloca i8*, align 8
  %7100 = alloca i64, align 8
  %7101 = alloca i64, align 8
  %7102 = alloca i64, align 8
  %7103 = alloca i8*, align 8
  %7104 = alloca i64, align 8
  %7105 = alloca i8, align 1
  %7106 = alloca i8, align 1
  %7107 = alloca i8, align 1
  %7108 = alloca i8, align 1
  %7109 = alloca i8, align 1
  %7110 = alloca i8, align 1
  %7111 = alloca i8, align 1
  %7112 = alloca i8, align 1
  %7113 = alloca i8, align 1
  %7114 = alloca i8, align 1
  %7115 = alloca i8, align 1
  %7116 = alloca i64, align 8
  %7117 = alloca i8, align 1
  %7118 = alloca %struct.__mbstate_t, align 4
  %7119 = alloca i32, align 4
  %7120 = alloca i64, align 8
  %7121 = alloca i64, align 8
  %7122 = alloca i64, align 8
  store i8* %0, i8** %7091, align 8
  call void @llvm.dbg.declare(metadata i8** %7091, metadata !5391, metadata !DIExpression()), !dbg !4514
  store i64 %1, i64* %7092, align 8
  call void @llvm.dbg.declare(metadata i64* %7092, metadata !5423, metadata !DIExpression()), !dbg !4516
  store i8* %2, i8** %7093, align 8
  call void @llvm.dbg.declare(metadata i8** %7093, metadata !5424, metadata !DIExpression()), !dbg !4518
  store i64 %3, i64* %7094, align 8
  call void @llvm.dbg.declare(metadata i64* %7094, metadata !5425, metadata !DIExpression()), !dbg !4520
  store i32 %4, i32* %7095, align 4
  call void @llvm.dbg.declare(metadata i32* %7095, metadata !5426, metadata !DIExpression()), !dbg !4522
  store i32 %5, i32* %7096, align 4
  call void @llvm.dbg.declare(metadata i32* %7096, metadata !5427, metadata !DIExpression()), !dbg !4524
  store i32* %6, i32** %7097, align 8
  call void @llvm.dbg.declare(metadata i32** %7097, metadata !5428, metadata !DIExpression()), !dbg !4526
  store i8* %7, i8** %7098, align 8
  call void @llvm.dbg.declare(metadata i8** %7098, metadata !5429, metadata !DIExpression()), !dbg !4528
  store i8* %8, i8** %7099, align 8
  call void @llvm.dbg.declare(metadata i8** %7099, metadata !5430, metadata !DIExpression()), !dbg !4530
  call void @llvm.dbg.declare(metadata i64* %7100, metadata !5431, metadata !DIExpression()), !dbg !4532
  call void @llvm.dbg.declare(metadata i64* %7101, metadata !5432, metadata !DIExpression()), !dbg !4534
  store i64 0, i64* %7101, align 8, !dbg !4534
  call void @llvm.dbg.declare(metadata i64* %7102, metadata !5433, metadata !DIExpression()), !dbg !4536
  store i64 0, i64* %7102, align 8, !dbg !4536
  call void @llvm.dbg.declare(metadata i8** %7103, metadata !5434, metadata !DIExpression()), !dbg !4538
  store i8* null, i8** %7103, align 8, !dbg !4538
  call void @llvm.dbg.declare(metadata i64* %7104, metadata !5435, metadata !DIExpression()), !dbg !4540
  store i64 0, i64* %7104, align 8, !dbg !4540
  call void @llvm.dbg.declare(metadata i8* %7105, metadata !5436, metadata !DIExpression()), !dbg !4542
  store i8 0, i8* %7105, align 1, !dbg !4542
  call void @llvm.dbg.declare(metadata i8* %7106, metadata !5437, metadata !DIExpression()), !dbg !4544
  %7123 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !4545
  %7124 = icmp eq i64 %7123, 1, !dbg !4546
  %7125 = zext i1 %7124 to i8, !dbg !4544
  store i8 %7125, i8* %7106, align 1, !dbg !4544
  call void @llvm.dbg.declare(metadata i8* %7107, metadata !5438, metadata !DIExpression()), !dbg !4548
  %7126 = load i32, i32* %7096, align 4, !dbg !4549
  %_ = sub i32 %7126, 2
  %gen = mul i32 %_, 2
  %_1 = shl i32 %7126, 2
  %_2 = sub i32 0, %7126
  %gen3 = add i32 %_2, 2
  %_4 = sub i32 0, %7126
  %gen5 = add i32 %_4, 2
  %_6 = sub i32 0, %7126
  %gen7 = add i32 %_6, 2
  %_8 = shl i32 %7126, 2
  %_9 = sub i32 0, %7126
  %gen10 = add i32 %_9, 2
  %7127 = and i32 %7126, 2, !dbg !4550
  %7128 = icmp ne i32 %7127, 0, !dbg !4551
  %7129 = zext i1 %7128 to i8, !dbg !4548
  store i8 %7129, i8* %7107, align 1, !dbg !4548
  call void @llvm.dbg.declare(metadata i8* %7108, metadata !5439, metadata !DIExpression()), !dbg !4553
  store i8 0, i8* %7108, align 1, !dbg !4553
  call void @llvm.dbg.declare(metadata i8* %7109, metadata !5440, metadata !DIExpression()), !dbg !4555
  store i8 0, i8* %7109, align 1, !dbg !4555
  call void @llvm.dbg.declare(metadata i8* %7110, metadata !5441, metadata !DIExpression()), !dbg !4557
  store i8 1, i8* %7110, align 1, !dbg !4557
  br label %originalBB

originalBB11alteredBB:                            ; preds = %originalBB11, %66
  %7130 = load i32, i32* %23, align 4, !dbg !4561
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %84
  store i32 5, i32* %23, align 4, !dbg !4563
  store i8 1, i8* %35, align 1, !dbg !4565
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %101
  %7131 = load i8, i8* %35, align 1, !dbg !4567
  %7132 = trunc i8 %7131 to i1, !dbg !4567
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %120
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %137
  %7133 = load i64, i64* %29, align 8, !dbg !4571
  %7134 = load i64, i64* %20, align 8, !dbg !4571
  %7135 = icmp ult i64 %7133, %7134, !dbg !4571
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %157
  %7136 = load i8*, i8** %19, align 8, !dbg !4571
  %7137 = load i64, i64* %29, align 8, !dbg !4571
  %7138 = getelementptr inbounds i8, i8* %7136, i64 %7137, !dbg !4571
  store i8 34, i8* %7138, align 1, !dbg !4571
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %177
  %7139 = load i64, i64* %29, align 8, !dbg !4574
  %_36 = sub i64 %7139, 1
  %gen37 = mul i64 %_36, 1
  %7140 = add i64 %7139, 1, !dbg !4574
  store i64 %7140, i64* %29, align 8, !dbg !4574
  br label %originalBB35

originalBB41alteredBB:                            ; preds = %originalBB41, %196
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %213
  store i8 1, i8* %33, align 1, !dbg !4575
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.120, i64 0, i64 0), i8** %31, align 8, !dbg !4576
  store i64 1, i64* %32, align 8, !dbg !4577
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %230
  store i8 1, i8* %33, align 1, !dbg !4579
  store i8 0, i8* %35, align 1, !dbg !4580
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %247
  %7141 = load i32, i32* %23, align 4, !dbg !4582
  %7142 = icmp ne i32 %7141, 10, !dbg !4585
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %266
  %7143 = load i32, i32* %23, align 4, !dbg !4587
  %7144 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.121, i64 0, i64 0), i32 %7143), !dbg !4589
  store i8* %7144, i8** %26, align 8, !dbg !4590
  %7145 = load i32, i32* %23, align 4, !dbg !4591
  %7146 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i32 %7145), !dbg !4592
  store i8* %7146, i8** %27, align 8, !dbg !4593
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %287
  %7147 = load i8, i8* %35, align 1, !dbg !4595
  %7148 = trunc i8 %7147 to i1, !dbg !4595
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %306
  %7149 = load i8*, i8** %26, align 8, !dbg !4598
  store i8* %7149, i8** %31, align 8, !dbg !4600
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %324
  %7150 = load i8*, i8** %31, align 8, !dbg !4602
  %7151 = load i8, i8* %7150, align 1, !dbg !4604
  %7152 = icmp ne i8 %7151, 0, !dbg !4605
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %344
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %361
  %7153 = load i64, i64* %29, align 8, !dbg !4607
  %7154 = load i64, i64* %20, align 8, !dbg !4607
  %7155 = icmp ult i64 %7153, %7154, !dbg !4607
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %381
  %7156 = load i8*, i8** %31, align 8, !dbg !4607
  %7157 = load i8, i8* %7156, align 1, !dbg !4607
  %7158 = load i8*, i8** %19, align 8, !dbg !4607
  %7159 = load i64, i64* %29, align 8, !dbg !4607
  %7160 = getelementptr inbounds i8, i8* %7158, i64 %7159, !dbg !4607
  store i8 %7157, i8* %7160, align 1, !dbg !4607
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %403
  %7161 = load i64, i64* %29, align 8, !dbg !4610
  %_86 = sub i64 %7161, 1
  %gen87 = mul i64 %_86, 1
  %_88 = sub i64 0, %7161
  %gen89 = add i64 %_88, 1
  %_90 = sub i64 %7161, 1
  %gen91 = mul i64 %_90, 1
  %_92 = sub i64 0, %7161
  %gen93 = add i64 %_92, 1
  %_94 = sub i64 0, %7161
  %gen95 = add i64 %_94, 1
  %_96 = sub i64 0, %7161
  %gen97 = add i64 %_96, 1
  %_98 = sub i64 %7161, 1
  %gen99 = mul i64 %_98, 1
  %_100 = sub i64 %7161, 1
  %gen101 = mul i64 %_100, 1
  %_102 = sub i64 0, %7161
  %gen103 = add i64 %_102, 1
  %7162 = add i64 %7161, 1, !dbg !4610
  store i64 %7162, i64* %29, align 8, !dbg !4610
  br label %originalBB85

originalBB107alteredBB:                           ; preds = %originalBB107, %422
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %439
  %7163 = load i8*, i8** %31, align 8, !dbg !4611
  %7164 = getelementptr inbounds i8, i8* %7163, i32 1, !dbg !4611
  store i8* %7164, i8** %31, align 8, !dbg !4611
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %458
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %475
  store i8 1, i8* %33, align 1, !dbg !4615
  %7165 = load i8*, i8** %27, align 8, !dbg !4616
  store i8* %7165, i8** %31, align 8, !dbg !4617
  %7166 = load i8*, i8** %31, align 8, !dbg !4618
  %7167 = call i64 @strlen(i8* %7166) #13, !dbg !4619
  store i64 %7167, i64* %32, align 8, !dbg !4620
  br label %originalBB119

originalBB123alteredBB:                           ; preds = %originalBB123, %495
  store i8 1, i8* %33, align 1, !dbg !4622
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %512
  store i8 1, i8* %35, align 1, !dbg !4624
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %529
  %7168 = load i8, i8* %35, align 1, !dbg !4626
  %7169 = trunc i8 %7168 to i1, !dbg !4626
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %548
  store i8 1, i8* %33, align 1, !dbg !4629
  br label %originalBB135

originalBB139alteredBB:                           ; preds = %originalBB139, %565
  br label %originalBB139

originalBB143alteredBB:                           ; preds = %originalBB143, %582
  store i32 2, i32* %23, align 4, !dbg !4632
  %7170 = load i8, i8* %35, align 1, !dbg !4633
  %7171 = trunc i8 %7170 to i1, !dbg !4633
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %601
  br label %originalBB147

originalBB151alteredBB:                           ; preds = %originalBB151, %618
  %7172 = load i64, i64* %29, align 8, !dbg !4637
  %7173 = load i64, i64* %20, align 8, !dbg !4637
  %7174 = icmp ult i64 %7172, %7173, !dbg !4637
  br label %originalBB151

originalBB155alteredBB:                           ; preds = %originalBB155, %638
  %7175 = load i8*, i8** %19, align 8, !dbg !4637
  %7176 = load i64, i64* %29, align 8, !dbg !4637
  %7177 = getelementptr inbounds i8, i8* %7175, i64 %7176, !dbg !4637
  store i8 39, i8* %7177, align 1, !dbg !4637
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %658
  %7178 = load i64, i64* %29, align 8, !dbg !4640
  %_160 = shl i64 %7178, 1
  %_161 = sub i64 %7178, 1
  %gen162 = mul i64 %_161, 1
  %_163 = sub i64 0, %7178
  %gen164 = add i64 %_163, 1
  %7179 = add i64 %7178, 1, !dbg !4640
  store i64 %7179, i64* %29, align 8, !dbg !4640
  br label %originalBB159

originalBB168alteredBB:                           ; preds = %originalBB168, %677
  br label %originalBB168

originalBB172alteredBB:                           ; preds = %originalBB172, %694
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i8** %31, align 8, !dbg !4641
  store i64 1, i64* %32, align 8, !dbg !4642
  br label %originalBB172

originalBB176alteredBB:                           ; preds = %originalBB176, %711
  store i8 0, i8* %35, align 1, !dbg !4644
  br label %originalBB176

originalBB180alteredBB:                           ; preds = %originalBB180, %728
  call void @abort() #12, !dbg !4646
  br label %originalBB180

originalBB184alteredBB:                           ; preds = %originalBB184, %745
  store i64 0, i64* %28, align 8, !dbg !4647
  br label %originalBB184

originalBB188alteredBB:                           ; preds = %originalBB188, %762
  %7180 = load i64, i64* %22, align 8, !dbg !4650
  %7181 = icmp eq i64 %7180, -1, !dbg !4652
  br label %originalBB188

originalBB192alteredBB:                           ; preds = %originalBB192, %781
  %7182 = load i8*, i8** %21, align 8, !dbg !4653
  %7183 = load i64, i64* %28, align 8, !dbg !4654
  %7184 = getelementptr inbounds i8, i8* %7182, i64 %7183, !dbg !4653
  %7185 = load i8, i8* %7184, align 1, !dbg !4653
  %7186 = sext i8 %7185 to i32, !dbg !4653
  %7187 = icmp eq i32 %7186, 0, !dbg !4655
  %7188 = zext i1 %7187 to i32, !dbg !4655
  br label %originalBB192

originalBB196alteredBB:                           ; preds = %originalBB196, %805
  %7189 = load i64, i64* %28, align 8, !dbg !4656
  %7190 = load i64, i64* %22, align 8, !dbg !4657
  %7191 = icmp eq i64 %7189, %7190, !dbg !4658
  %7192 = zext i1 %7191 to i32, !dbg !4658
  br label %originalBB196

originalBB200alteredBB:                           ; preds = %originalBB200, %826
  %7193 = icmp ne i32 %827, 0, !dbg !4659
  %_201 = shl i1 %7193, true
  %_202 = shl i1 %7193, true
  %_203 = sub i1 %7193, true
  %gen204 = mul i1 %_203, true
  %_205 = sub i1 false, %7193
  %gen206 = add i1 %_205, true
  %_207 = shl i1 %7193, true
  %_208 = sub i1 %7193, true
  %gen209 = mul i1 %_208, true
  %7194 = xor i1 %7193, true, !dbg !4659
  br label %originalBB200

originalBB213alteredBB:                           ; preds = %originalBB213, %846
  store i8 0, i8* %41, align 1, !dbg !4667
  call void @llvm.dbg.declare(metadata !4, metadata !5442, metadata !DIExpression()), !dbg !4669
  store i8 0, i8* %42, align 1, !dbg !4669
  call void @llvm.dbg.declare(metadata !4, metadata !5477, metadata !DIExpression()), !dbg !4671
  store i8 0, i8* %43, align 1, !dbg !4671
  %7195 = load i8, i8* %33, align 1, !dbg !4672
  %7196 = trunc i8 %7195 to i1, !dbg !4672
  br label %originalBB213

originalBB218alteredBB:                           ; preds = %originalBB218, %865
  %7197 = load i32, i32* %23, align 4, !dbg !4675
  %7198 = icmp ne i32 %7197, 2, !dbg !4676
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %884
  %7199 = load i64, i64* %32, align 8, !dbg !4678
  %7200 = icmp ne i64 %7199, 0, !dbg !4678
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %903
  %7201 = load i64, i64* %28, align 8, !dbg !4680
  %7202 = load i64, i64* %32, align 8, !dbg !4681
  %_227 = shl i64 %7201, %7202
  %7203 = add i64 %7201, %7202, !dbg !4682
  %7204 = load i64, i64* %22, align 8, !dbg !4683
  %7205 = icmp eq i64 %7204, -1, !dbg !4684
  br label %originalBB226

originalBB231alteredBB:                           ; preds = %originalBB231, %925
  %7206 = load i64, i64* %32, align 8, !dbg !4686
  %7207 = icmp ult i64 1, %7206, !dbg !4687
  br label %originalBB231

originalBB235alteredBB:                           ; preds = %originalBB235, %944
  %7208 = load i8*, i8** %21, align 8, !dbg !4688
  %7209 = call i64 @strlen(i8* %7208) #13, !dbg !4689
  store i64 %7209, i64* %22, align 8, !dbg !4690
  br label %originalBB235

originalBB239alteredBB:                           ; preds = %originalBB239, %963
  %7210 = load i64, i64* %22, align 8, !dbg !4691
  br label %originalBB239

originalBB244alteredBB:                           ; preds = %originalBB244, %981
  %7211 = icmp ule i64 %914, %982, !dbg !4692
  br label %originalBB244

originalBB248alteredBB:                           ; preds = %originalBB248, %1000
  %7212 = load i8*, i8** %21, align 8, !dbg !4694
  %7213 = load i64, i64* %28, align 8, !dbg !4695
  %7214 = getelementptr inbounds i8, i8* %7212, i64 %7213, !dbg !4696
  %7215 = load i8*, i8** %31, align 8, !dbg !4697
  %7216 = load i64, i64* %32, align 8, !dbg !4698
  %7217 = call i32 @memcmp(i8* %7214, i8* %7215, i64 %7216) #13, !dbg !4699
  %7218 = icmp eq i32 %7217, 0, !dbg !4700
  br label %originalBB248

originalBB252alteredBB:                           ; preds = %originalBB252, %1024
  %7219 = load i8, i8* %35, align 1, !dbg !4702
  %7220 = trunc i8 %7219 to i1, !dbg !4702
  br label %originalBB252

originalBB256alteredBB:                           ; preds = %originalBB256, %1043
  br label %originalBB256

originalBB260alteredBB:                           ; preds = %originalBB260, %1060
  store i8 1, i8* %41, align 1, !dbg !4707
  br label %originalBB260

originalBB264alteredBB:                           ; preds = %originalBB264, %1077
  %7221 = load i8*, i8** %21, align 8, !dbg !4709
  %7222 = load i64, i64* %28, align 8, !dbg !4710
  %7223 = getelementptr inbounds i8, i8* %7221, i64 %7222, !dbg !4709
  %7224 = load i8, i8* %7223, align 1, !dbg !4709
  store i8 %7224, i8* %39, align 1, !dbg !4711
  %7225 = load i8, i8* %39, align 1, !dbg !4712
  %7226 = zext i8 %7225 to i32, !dbg !4712
  br label %originalBB264

originalBB268alteredBB:                           ; preds = %originalBB268, %1100
  %7227 = load i8, i8* %33, align 1, !dbg !4714
  %7228 = trunc i8 %7227 to i1, !dbg !4714
  br label %originalBB268

originalBB272alteredBB:                           ; preds = %originalBB272, %1119
  br label %originalBB272

originalBB276alteredBB:                           ; preds = %originalBB276, %1136
  %7229 = load i8, i8* %35, align 1, !dbg !4720
  %7230 = trunc i8 %7229 to i1, !dbg !4720
  br label %originalBB276

originalBB280alteredBB:                           ; preds = %originalBB280, %1155
  br label %originalBB280

originalBB284alteredBB:                           ; preds = %originalBB284, %1172
  store i8 1, i8* %42, align 1, !dbg !4723
  %7231 = load i32, i32* %23, align 4, !dbg !4724
  %7232 = icmp eq i32 %7231, 2, !dbg !4724
  br label %originalBB284

originalBB288alteredBB:                           ; preds = %originalBB288, %1191
  %7233 = load i8, i8* %36, align 1, !dbg !4724
  %7234 = trunc i8 %7233 to i1, !dbg !4724
  br label %originalBB288

originalBB292alteredBB:                           ; preds = %originalBB292, %1210
  br label %originalBB292

originalBB296alteredBB:                           ; preds = %originalBB296, %1227
  %7235 = load i64, i64* %29, align 8, !dbg !4728
  %7236 = load i64, i64* %20, align 8, !dbg !4728
  %7237 = icmp ult i64 %7235, %7236, !dbg !4728
  br label %originalBB296

originalBB300alteredBB:                           ; preds = %originalBB300, %1247
  %7238 = load i8*, i8** %19, align 8, !dbg !4728
  %7239 = load i64, i64* %29, align 8, !dbg !4728
  %7240 = getelementptr inbounds i8, i8* %7238, i64 %7239, !dbg !4728
  store i8 39, i8* %7240, align 1, !dbg !4728
  br label %originalBB300

originalBB304alteredBB:                           ; preds = %originalBB304, %1267
  %7241 = load i64, i64* %29, align 8, !dbg !4731
  %_305 = sub i64 0, %7241
  %gen306 = add i64 %_305, 1
  %_307 = sub i64 0, %7241
  %gen308 = add i64 %_307, 1
  %_309 = sub i64 0, %7241
  %gen310 = add i64 %_309, 1
  %_311 = sub i64 %7241, 1
  %gen312 = mul i64 %_311, 1
  %_313 = shl i64 %7241, 1
  %_314 = sub i64 %7241, 1
  %gen315 = mul i64 %_314, 1
  %_316 = sub i64 0, %7241
  %gen317 = add i64 %_316, 1
  %_318 = shl i64 %7241, 1
  %7242 = add i64 %7241, 1, !dbg !4731
  store i64 %7242, i64* %29, align 8, !dbg !4731
  br label %originalBB304

originalBB322alteredBB:                           ; preds = %originalBB322, %1286
  br label %originalBB322

originalBB326alteredBB:                           ; preds = %originalBB326, %1303
  %7243 = load i64, i64* %29, align 8, !dbg !4732
  %7244 = load i64, i64* %20, align 8, !dbg !4732
  %7245 = icmp ult i64 %7243, %7244, !dbg !4732
  br label %originalBB326

originalBB330alteredBB:                           ; preds = %originalBB330, %1323
  %7246 = load i8*, i8** %19, align 8, !dbg !4732
  %7247 = load i64, i64* %29, align 8, !dbg !4732
  %7248 = getelementptr inbounds i8, i8* %7246, i64 %7247, !dbg !4732
  store i8 36, i8* %7248, align 1, !dbg !4732
  br label %originalBB330

originalBB334alteredBB:                           ; preds = %originalBB334, %1343
  %7249 = load i64, i64* %29, align 8, !dbg !4735
  %_335 = sub i64 %7249, 1
  %gen336 = mul i64 %_335, 1
  %_337 = sub i64 %7249, 1
  %gen338 = mul i64 %_337, 1
  %_339 = shl i64 %7249, 1
  %_340 = sub i64 0, %7249
  %gen341 = add i64 %_340, 1
  %_342 = sub i64 %7249, 1
  %gen343 = mul i64 %_342, 1
  %_344 = sub i64 0, %7249
  %gen345 = add i64 %_344, 1
  %_346 = sub i64 %7249, 1
  %gen347 = mul i64 %_346, 1
  %7250 = add i64 %7249, 1, !dbg !4735
  store i64 %7250, i64* %29, align 8, !dbg !4735
  br label %originalBB334

originalBB351alteredBB:                           ; preds = %originalBB351, %1362
  br label %originalBB351

originalBB355alteredBB:                           ; preds = %originalBB355, %1379
  %7251 = load i64, i64* %29, align 8, !dbg !4736
  %7252 = load i64, i64* %20, align 8, !dbg !4736
  %7253 = icmp ult i64 %7251, %7252, !dbg !4736
  br label %originalBB355

originalBB359alteredBB:                           ; preds = %originalBB359, %1399
  %7254 = load i8*, i8** %19, align 8, !dbg !4736
  %7255 = load i64, i64* %29, align 8, !dbg !4736
  %7256 = getelementptr inbounds i8, i8* %7254, i64 %7255, !dbg !4736
  store i8 39, i8* %7256, align 1, !dbg !4736
  br label %originalBB359

originalBB363alteredBB:                           ; preds = %originalBB363, %1419
  %7257 = load i64, i64* %29, align 8, !dbg !4739
  %_364 = sub i64 0, %7257
  %gen365 = add i64 %_364, 1
  %_366 = shl i64 %7257, 1
  %_367 = sub i64 %7257, 1
  %gen368 = mul i64 %_367, 1
  %_369 = sub i64 %7257, 1
  %gen370 = mul i64 %_369, 1
  %7258 = add i64 %7257, 1, !dbg !4739
  store i64 %7258, i64* %29, align 8, !dbg !4739
  br label %originalBB363

originalBB374alteredBB:                           ; preds = %originalBB374, %1438
  store i8 1, i8* %36, align 1, !dbg !4726
  br label %originalBB374

originalBB378alteredBB:                           ; preds = %originalBB378, %1455
  br label %originalBB378

originalBB382alteredBB:                           ; preds = %originalBB382, %1472
  %7259 = load i64, i64* %29, align 8, !dbg !4740
  %7260 = load i64, i64* %20, align 8, !dbg !4740
  %7261 = icmp ult i64 %7259, %7260, !dbg !4740
  br label %originalBB382

originalBB386alteredBB:                           ; preds = %originalBB386, %1492
  %7262 = load i8*, i8** %19, align 8, !dbg !4740
  %7263 = load i64, i64* %29, align 8, !dbg !4740
  %7264 = getelementptr inbounds i8, i8* %7262, i64 %7263, !dbg !4740
  store i8 92, i8* %7264, align 1, !dbg !4740
  br label %originalBB386

originalBB390alteredBB:                           ; preds = %originalBB390, %1512
  %7265 = load i64, i64* %29, align 8, !dbg !4743
  %_391 = sub i64 %7265, 1
  %gen392 = mul i64 %_391, 1
  %_393 = sub i64 0, %7265
  %gen394 = add i64 %_393, 1
  %_395 = shl i64 %7265, 1
  %7266 = add i64 %7265, 1, !dbg !4743
  store i64 %7266, i64* %29, align 8, !dbg !4743
  br label %originalBB390

originalBB399alteredBB:                           ; preds = %originalBB399, %1531
  br label %originalBB399

originalBB403alteredBB:                           ; preds = %originalBB403, %1548
  %7267 = load i32, i32* %23, align 4, !dbg !4744
  %7268 = icmp ne i32 %7267, 2, !dbg !4746
  br label %originalBB403

originalBB407alteredBB:                           ; preds = %originalBB407, %1567
  %7269 = load i64, i64* %28, align 8, !dbg !4748
  %_408 = shl i64 %7269, 1
  %_409 = shl i64 %7269, 1
  %_410 = shl i64 %7269, 1
  %_411 = shl i64 %7269, 1
  %7270 = add i64 %7269, 1, !dbg !4749
  %7271 = load i64, i64* %22, align 8, !dbg !4750
  %7272 = icmp ult i64 %7270, %7271, !dbg !4751
  br label %originalBB407

originalBB415alteredBB:                           ; preds = %originalBB415, %1588
  %7273 = load i8*, i8** %21, align 8, !dbg !4753
  %7274 = load i64, i64* %28, align 8, !dbg !4754
  %_416 = sub i64 0, %7274
  %gen417 = add i64 %_416, 1
  %_418 = shl i64 %7274, 1
  %_419 = sub i64 %7274, 1
  %gen420 = mul i64 %_419, 1
  %_421 = sub i64 0, %7274
  %gen422 = add i64 %_421, 1
  %_423 = shl i64 %7274, 1
  %7275 = add i64 %7274, 1, !dbg !4755
  %7276 = getelementptr inbounds i8, i8* %7273, i64 %7275, !dbg !4753
  %7277 = load i8, i8* %7276, align 1, !dbg !4753
  %7278 = sext i8 %7277 to i32, !dbg !4753
  %7279 = icmp sle i32 48, %7278, !dbg !4756
  br label %originalBB415

originalBB427alteredBB:                           ; preds = %originalBB427, %1612
  %7280 = load i8*, i8** %21, align 8, !dbg !4758
  %7281 = load i64, i64* %28, align 8, !dbg !4759
  %_428 = sub i64 %7281, 1
  %gen429 = mul i64 %_428, 1
  %7282 = add i64 %7281, 1, !dbg !4760
  %7283 = getelementptr inbounds i8, i8* %7280, i64 %7282, !dbg !4758
  %7284 = load i8, i8* %7283, align 1, !dbg !4758
  %7285 = sext i8 %7284 to i32, !dbg !4758
  %7286 = icmp sle i32 %7285, 57, !dbg !4761
  br label %originalBB427

originalBB433alteredBB:                           ; preds = %originalBB433, %1636
  br label %originalBB433

originalBB437alteredBB:                           ; preds = %originalBB437, %1653
  %7287 = load i64, i64* %29, align 8, !dbg !4765
  %7288 = load i64, i64* %20, align 8, !dbg !4765
  %7289 = icmp ult i64 %7287, %7288, !dbg !4765
  br label %originalBB437

originalBB441alteredBB:                           ; preds = %originalBB441, %1673
  %7290 = load i8*, i8** %19, align 8, !dbg !4765
  %7291 = load i64, i64* %29, align 8, !dbg !4765
  %7292 = getelementptr inbounds i8, i8* %7290, i64 %7291, !dbg !4765
  store i8 48, i8* %7292, align 1, !dbg !4765
  br label %originalBB441

originalBB445alteredBB:                           ; preds = %originalBB445, %1693
  %7293 = load i64, i64* %29, align 8, !dbg !4768
  %_446 = sub i64 0, %7293
  %gen447 = add i64 %_446, 1
  %_448 = shl i64 %7293, 1
  %_449 = shl i64 %7293, 1
  %_450 = sub i64 %7293, 1
  %gen451 = mul i64 %_450, 1
  %_452 = sub i64 %7293, 1
  %gen453 = mul i64 %_452, 1
  %7294 = add i64 %7293, 1, !dbg !4768
  store i64 %7294, i64* %29, align 8, !dbg !4768
  br label %originalBB445

originalBB457alteredBB:                           ; preds = %originalBB457, %1712
  br label %originalBB457

originalBB461alteredBB:                           ; preds = %originalBB461, %1729
  %7295 = load i64, i64* %29, align 8, !dbg !4770
  %7296 = load i64, i64* %20, align 8, !dbg !4770
  %7297 = icmp ult i64 %7295, %7296, !dbg !4770
  br label %originalBB461

originalBB465alteredBB:                           ; preds = %originalBB465, %1749
  %7298 = load i8*, i8** %19, align 8, !dbg !4770
  %7299 = load i64, i64* %29, align 8, !dbg !4770
  %7300 = getelementptr inbounds i8, i8* %7298, i64 %7299, !dbg !4770
  store i8 48, i8* %7300, align 1, !dbg !4770
  br label %originalBB465

originalBB469alteredBB:                           ; preds = %originalBB469, %1769
  %7301 = load i64, i64* %29, align 8, !dbg !4773
  %_470 = sub i64 %7301, 1
  %gen471 = mul i64 %_470, 1
  %_472 = shl i64 %7301, 1
  %_473 = sub i64 0, %7301
  %gen474 = add i64 %_473, 1
  %_475 = shl i64 %7301, 1
  %_476 = sub i64 %7301, 1
  %gen477 = mul i64 %_476, 1
  %_478 = sub i64 %7301, 1
  %gen479 = mul i64 %_478, 1
  %7302 = add i64 %7301, 1, !dbg !4773
  store i64 %7302, i64* %29, align 8, !dbg !4773
  br label %originalBB469

originalBB483alteredBB:                           ; preds = %originalBB483, %1788
  br label %originalBB483

originalBB487alteredBB:                           ; preds = %originalBB487, %1805
  store i8 48, i8* %39, align 1, !dbg !4775
  br label %originalBB487

originalBB491alteredBB:                           ; preds = %originalBB491, %1822
  %7303 = load i32, i32* %24, align 4, !dbg !4777
  %_492 = sub i32 0, %7303
  %gen493 = add i32 %_492, 1
  %_494 = sub i32 %7303, 1
  %gen495 = mul i32 %_494, 1
  %_496 = sub i32 %7303, 1
  %gen497 = mul i32 %_496, 1
  %_498 = shl i32 %7303, 1
  %_499 = sub i32 0, %7303
  %gen500 = add i32 %_499, 1
  %_501 = shl i32 %7303, 1
  %7304 = and i32 %7303, 1, !dbg !4779
  %7305 = icmp ne i32 %7304, 0, !dbg !4779
  br label %originalBB491

originalBB505alteredBB:                           ; preds = %originalBB505, %1842
  br label %originalBB505

originalBB509alteredBB:                           ; preds = %originalBB509, %1859
  br label %originalBB509

originalBB513alteredBB:                           ; preds = %originalBB513, %1876
  br label %originalBB513

originalBB517alteredBB:                           ; preds = %originalBB517, %1893
  %7306 = load i32, i32* %23, align 4, !dbg !4783
  br label %originalBB517

originalBB521alteredBB:                           ; preds = %originalBB521, %1911
  %7307 = load i8, i8* %35, align 1, !dbg !4785
  %7308 = trunc i8 %7307 to i1, !dbg !4785
  br label %originalBB521

originalBB525alteredBB:                           ; preds = %originalBB525, %1930
  br label %originalBB525

originalBB529alteredBB:                           ; preds = %originalBB529, %1947
  br label %originalBB529

originalBB533alteredBB:                           ; preds = %originalBB533, %1964
  %7309 = load i32, i32* %24, align 4, !dbg !4791
  %_534 = sub i32 %7309, 4
  %gen535 = mul i32 %_534, 4
  %7310 = and i32 %7309, 4, !dbg !4793
  %7311 = icmp ne i32 %7310, 0, !dbg !4793
  br label %originalBB533

originalBB539alteredBB:                           ; preds = %originalBB539, %1984
  %7312 = load i64, i64* %28, align 8, !dbg !4795
  %_540 = shl i64 %7312, 2
  %_541 = sub i64 0, %7312
  %gen542 = add i64 %_541, 2
  %7313 = add i64 %7312, 2, !dbg !4796
  %7314 = load i64, i64* %22, align 8, !dbg !4797
  %7315 = icmp ult i64 %7313, %7314, !dbg !4798
  br label %originalBB539

originalBB546alteredBB:                           ; preds = %originalBB546, %2005
  %7316 = load i8*, i8** %21, align 8, !dbg !4800
  %7317 = load i64, i64* %28, align 8, !dbg !4801
  %_547 = sub i64 %7317, 1
  %gen548 = mul i64 %_547, 1
  %_549 = sub i64 0, %7317
  %gen550 = add i64 %_549, 1
  %_551 = sub i64 0, %7317
  %gen552 = add i64 %_551, 1
  %_553 = sub i64 %7317, 1
  %gen554 = mul i64 %_553, 1
  %_555 = sub i64 %7317, 1
  %gen556 = mul i64 %_555, 1
  %_557 = sub i64 0, %7317
  %gen558 = add i64 %_557, 1
  %7318 = add i64 %7317, 1, !dbg !4802
  %7319 = getelementptr inbounds i8, i8* %7316, i64 %7318, !dbg !4800
  %7320 = load i8, i8* %7319, align 1, !dbg !4800
  %7321 = sext i8 %7320 to i32, !dbg !4800
  %7322 = icmp eq i32 %7321, 63, !dbg !4803
  br label %originalBB546

originalBB562alteredBB:                           ; preds = %originalBB562, %2029
  %7323 = load i8*, i8** %21, align 8, !dbg !4805
  %7324 = load i64, i64* %28, align 8, !dbg !4806
  %_563 = shl i64 %7324, 2
  %_564 = sub i64 0, %7324
  %gen565 = add i64 %_564, 2
  %_566 = shl i64 %7324, 2
  %_567 = shl i64 %7324, 2
  %_568 = shl i64 %7324, 2
  %_569 = sub i64 %7324, 2
  %gen570 = mul i64 %_569, 2
  %_571 = sub i64 %7324, 2
  %gen572 = mul i64 %_571, 2
  %7325 = add i64 %7324, 2, !dbg !4807
  %7326 = getelementptr inbounds i8, i8* %7323, i64 %7325, !dbg !4805
  %7327 = load i8, i8* %7326, align 1, !dbg !4805
  %7328 = sext i8 %7327 to i32, !dbg !4805
  br label %originalBB562

originalBB576alteredBB:                           ; preds = %originalBB576, %2052
  %7329 = load i8, i8* %35, align 1, !dbg !4809
  %7330 = trunc i8 %7329 to i1, !dbg !4809
  br label %originalBB576

originalBB580alteredBB:                           ; preds = %originalBB580, %2071
  br label %originalBB580

originalBB584alteredBB:                           ; preds = %originalBB584, %2088
  %7331 = load i8*, i8** %21, align 8, !dbg !4814
  %7332 = load i64, i64* %28, align 8, !dbg !4815
  %_585 = sub i64 %7332, 2
  %gen586 = mul i64 %_585, 2
  %_587 = sub i64 0, %7332
  %gen588 = add i64 %_587, 2
  %_589 = sub i64 0, %7332
  %gen590 = add i64 %_589, 2
  %_591 = shl i64 %7332, 2
  %_592 = sub i64 0, %7332
  %gen593 = add i64 %_592, 2
  %_594 = shl i64 %7332, 2
  %7333 = add i64 %7332, 2, !dbg !4816
  %7334 = getelementptr inbounds i8, i8* %7331, i64 %7333, !dbg !4814
  %7335 = load i8, i8* %7334, align 1, !dbg !4814
  store i8 %7335, i8* %39, align 1, !dbg !4817
  %7336 = load i64, i64* %28, align 8, !dbg !4818
  %_595 = shl i64 %7336, 2
  %_596 = shl i64 %7336, 2
  %_597 = sub i64 0, %7336
  %gen598 = add i64 %_597, 2
  %_599 = shl i64 %7336, 2
  %7337 = add i64 %7336, 2, !dbg !4818
  store i64 %7337, i64* %28, align 8, !dbg !4818
  br label %originalBB584

originalBB603alteredBB:                           ; preds = %originalBB603, %2112
  %7338 = load i64, i64* %29, align 8, !dbg !4820
  %7339 = load i64, i64* %20, align 8, !dbg !4820
  %7340 = icmp ult i64 %7338, %7339, !dbg !4820
  br label %originalBB603

originalBB607alteredBB:                           ; preds = %originalBB607, %2132
  %7341 = load i8*, i8** %19, align 8, !dbg !4820
  %7342 = load i64, i64* %29, align 8, !dbg !4820
  %7343 = getelementptr inbounds i8, i8* %7341, i64 %7342, !dbg !4820
  store i8 63, i8* %7343, align 1, !dbg !4820
  br label %originalBB607

originalBB611alteredBB:                           ; preds = %originalBB611, %2152
  %7344 = load i64, i64* %29, align 8, !dbg !4823
  %_612 = sub i64 0, %7344
  %gen613 = add i64 %_612, 1
  %7345 = add i64 %7344, 1, !dbg !4823
  store i64 %7345, i64* %29, align 8, !dbg !4823
  br label %originalBB611

originalBB617alteredBB:                           ; preds = %originalBB617, %2171
  br label %originalBB617

originalBB621alteredBB:                           ; preds = %originalBB621, %2188
  %7346 = load i64, i64* %29, align 8, !dbg !4825
  %7347 = load i64, i64* %20, align 8, !dbg !4825
  %7348 = icmp ult i64 %7346, %7347, !dbg !4825
  br label %originalBB621

originalBB625alteredBB:                           ; preds = %originalBB625, %2208
  %7349 = load i8*, i8** %19, align 8, !dbg !4825
  %7350 = load i64, i64* %29, align 8, !dbg !4825
  %7351 = getelementptr inbounds i8, i8* %7349, i64 %7350, !dbg !4825
  store i8 34, i8* %7351, align 1, !dbg !4825
  br label %originalBB625

originalBB629alteredBB:                           ; preds = %originalBB629, %2228
  %7352 = load i64, i64* %29, align 8, !dbg !4828
  %_630 = sub i64 0, %7352
  %gen631 = add i64 %_630, 1
  %_632 = sub i64 %7352, 1
  %gen633 = mul i64 %_632, 1
  %_634 = sub i64 0, %7352
  %gen635 = add i64 %_634, 1
  %7353 = add i64 %7352, 1, !dbg !4828
  store i64 %7353, i64* %29, align 8, !dbg !4828
  br label %originalBB629

originalBB639alteredBB:                           ; preds = %originalBB639, %2247
  br label %originalBB639

originalBB643alteredBB:                           ; preds = %originalBB643, %2264
  %7354 = load i64, i64* %29, align 8, !dbg !4830
  %7355 = load i64, i64* %20, align 8, !dbg !4830
  %7356 = icmp ult i64 %7354, %7355, !dbg !4830
  br label %originalBB643

originalBB647alteredBB:                           ; preds = %originalBB647, %2284
  %7357 = load i8*, i8** %19, align 8, !dbg !4830
  %7358 = load i64, i64* %29, align 8, !dbg !4830
  %7359 = getelementptr inbounds i8, i8* %7357, i64 %7358, !dbg !4830
  store i8 34, i8* %7359, align 1, !dbg !4830
  br label %originalBB647

originalBB651alteredBB:                           ; preds = %originalBB651, %2304
  %7360 = load i64, i64* %29, align 8, !dbg !4833
  %_652 = sub i64 %7360, 1
  %gen653 = mul i64 %_652, 1
  %_654 = shl i64 %7360, 1
  %_655 = sub i64 %7360, 1
  %gen656 = mul i64 %_655, 1
  %_657 = sub i64 0, %7360
  %gen658 = add i64 %_657, 1
  %7361 = add i64 %7360, 1, !dbg !4833
  store i64 %7361, i64* %29, align 8, !dbg !4833
  br label %originalBB651

originalBB662alteredBB:                           ; preds = %originalBB662, %2323
  br label %originalBB662

originalBB666alteredBB:                           ; preds = %originalBB666, %2340
  %7362 = load i64, i64* %29, align 8, !dbg !4835
  %7363 = load i64, i64* %20, align 8, !dbg !4835
  %7364 = icmp ult i64 %7362, %7363, !dbg !4835
  br label %originalBB666

originalBB670alteredBB:                           ; preds = %originalBB670, %2360
  %7365 = load i8*, i8** %19, align 8, !dbg !4835
  %7366 = load i64, i64* %29, align 8, !dbg !4835
  %7367 = getelementptr inbounds i8, i8* %7365, i64 %7366, !dbg !4835
  store i8 63, i8* %7367, align 1, !dbg !4835
  br label %originalBB670

originalBB674alteredBB:                           ; preds = %originalBB674, %2380
  %7368 = load i64, i64* %29, align 8, !dbg !4838
  %_675 = shl i64 %7368, 1
  %_676 = sub i64 %7368, 1
  %gen677 = mul i64 %_676, 1
  %_678 = sub i64 %7368, 1
  %gen679 = mul i64 %_678, 1
  %_680 = sub i64 0, %7368
  %gen681 = add i64 %_680, 1
  %_682 = shl i64 %7368, 1
  %_683 = sub i64 0, %7368
  %gen684 = add i64 %_683, 1
  %_685 = sub i64 0, %7368
  %gen686 = add i64 %_685, 1
  %_687 = sub i64 %7368, 1
  %gen688 = mul i64 %_687, 1
  %7369 = add i64 %7368, 1, !dbg !4838
  store i64 %7369, i64* %29, align 8, !dbg !4838
  br label %originalBB674

originalBB692alteredBB:                           ; preds = %originalBB692, %2399
  br label %originalBB692

originalBB696alteredBB:                           ; preds = %originalBB696, %2416
  br label %originalBB696

originalBB700alteredBB:                           ; preds = %originalBB700, %2433
  br label %originalBB700

originalBB704alteredBB:                           ; preds = %originalBB704, %2450
  br label %originalBB704

originalBB708alteredBB:                           ; preds = %originalBB708, %2467
  br label %originalBB708

originalBB712alteredBB:                           ; preds = %originalBB712, %2484
  br label %originalBB712

originalBB716alteredBB:                           ; preds = %originalBB716, %2501
  store i8 97, i8* %40, align 1, !dbg !4845
  br label %originalBB716

originalBB720alteredBB:                           ; preds = %originalBB720, %2518
  store i8 98, i8* %40, align 1, !dbg !4847
  br label %originalBB720

originalBB724alteredBB:                           ; preds = %originalBB724, %2535
  store i8 102, i8* %40, align 1, !dbg !4849
  br label %originalBB724

originalBB728alteredBB:                           ; preds = %originalBB728, %2552
  store i8 110, i8* %40, align 1, !dbg !4851
  br label %originalBB728

originalBB732alteredBB:                           ; preds = %originalBB732, %2569
  store i8 114, i8* %40, align 1, !dbg !4853
  br label %originalBB732

originalBB736alteredBB:                           ; preds = %originalBB736, %2586
  store i8 116, i8* %40, align 1, !dbg !4855
  br label %originalBB736

originalBB740alteredBB:                           ; preds = %originalBB740, %2603
  store i8 118, i8* %40, align 1, !dbg !4857
  br label %originalBB740

originalBB744alteredBB:                           ; preds = %originalBB744, %2620
  %7370 = load i8, i8* %39, align 1, !dbg !4859
  store i8 %7370, i8* %40, align 1, !dbg !4860
  %7371 = load i32, i32* %23, align 4, !dbg !4861
  %7372 = icmp eq i32 %7371, 2, !dbg !4863
  br label %originalBB744

originalBB748alteredBB:                           ; preds = %originalBB748, %2640
  %7373 = load i8, i8* %35, align 1, !dbg !4865
  %7374 = trunc i8 %7373 to i1, !dbg !4865
  br label %originalBB748

originalBB752alteredBB:                           ; preds = %originalBB752, %2659
  br label %originalBB752

originalBB756alteredBB:                           ; preds = %originalBB756, %2676
  br label %originalBB756

originalBB760alteredBB:                           ; preds = %originalBB760, %2693
  %7375 = load i8, i8* %33, align 1, !dbg !4871
  %7376 = trunc i8 %7375 to i1, !dbg !4871
  br label %originalBB760

originalBB764alteredBB:                           ; preds = %originalBB764, %2712
  %7377 = load i8, i8* %35, align 1, !dbg !4874
  %7378 = trunc i8 %7377 to i1, !dbg !4874
  br label %originalBB764

originalBB768alteredBB:                           ; preds = %originalBB768, %2731
  %7379 = load i64, i64* %32, align 8, !dbg !4876
  %7380 = icmp ne i64 %7379, 0, !dbg !4876
  br label %originalBB768

originalBB772alteredBB:                           ; preds = %originalBB772, %2750
  br label %originalBB772

originalBB776alteredBB:                           ; preds = %originalBB776, %2767
  br label %originalBB776

originalBB780alteredBB:                           ; preds = %originalBB780, %2784
  %7381 = load i32, i32* %23, align 4, !dbg !4881
  %7382 = icmp eq i32 %7381, 2, !dbg !4883
  br label %originalBB780

originalBB784alteredBB:                           ; preds = %originalBB784, %2803
  %7383 = load i8, i8* %35, align 1, !dbg !4885
  %7384 = trunc i8 %7383 to i1, !dbg !4885
  br label %originalBB784

originalBB788alteredBB:                           ; preds = %originalBB788, %2822
  br label %originalBB788

originalBB792alteredBB:                           ; preds = %originalBB792, %2839
  br label %originalBB792

originalBB796alteredBB:                           ; preds = %originalBB796, %2856
  %7385 = load i8, i8* %33, align 1, !dbg !4890
  %7386 = trunc i8 %7385 to i1, !dbg !4890
  br label %originalBB796

originalBB800alteredBB:                           ; preds = %originalBB800, %2875
  %7387 = load i8, i8* %40, align 1, !dbg !4893
  store i8 %7387, i8* %39, align 1, !dbg !4895
  br label %originalBB800

originalBB804alteredBB:                           ; preds = %originalBB804, %2893
  br label %originalBB804

originalBB808alteredBB:                           ; preds = %originalBB808, %2910
  %7388 = load i64, i64* %22, align 8, !dbg !4898
  %7389 = icmp eq i64 %7388, -1, !dbg !4900
  br label %originalBB808

originalBB812alteredBB:                           ; preds = %originalBB812, %2929
  %7390 = load i8*, i8** %21, align 8, !dbg !4902
  %7391 = getelementptr inbounds i8, i8* %7390, i64 1, !dbg !4902
  %7392 = load i8, i8* %7391, align 1, !dbg !4902
  %7393 = sext i8 %7392 to i32, !dbg !4902
  %7394 = icmp eq i32 %7393, 0, !dbg !4903
  br label %originalBB812

originalBB816alteredBB:                           ; preds = %originalBB816, %2951
  %7395 = load i64, i64* %22, align 8, !dbg !4904
  %7396 = icmp eq i64 %7395, 1, !dbg !4905
  br label %originalBB816

originalBB820alteredBB:                           ; preds = %originalBB820, %2970
  br label %originalBB820

originalBB824alteredBB:                           ; preds = %originalBB824, %2987
  br label %originalBB824

originalBB828alteredBB:                           ; preds = %originalBB828, %3004
  %7397 = load i64, i64* %28, align 8, !dbg !4908
  %7398 = icmp ne i64 %7397, 0, !dbg !4910
  br label %originalBB828

originalBB832alteredBB:                           ; preds = %originalBB832, %3023
  br label %originalBB832

originalBB836alteredBB:                           ; preds = %originalBB836, %3040
  br label %originalBB836

originalBB840alteredBB:                           ; preds = %originalBB840, %3057
  store i8 1, i8* %43, align 1, !dbg !4914
  br label %originalBB840

originalBB844alteredBB:                           ; preds = %originalBB844, %3074
  %7399 = load i32, i32* %23, align 4, !dbg !4916
  %7400 = icmp eq i32 %7399, 2, !dbg !4918
  br label %originalBB844

originalBB848alteredBB:                           ; preds = %originalBB848, %3093
  %7401 = load i8, i8* %35, align 1, !dbg !4920
  %7402 = trunc i8 %7401 to i1, !dbg !4920
  br label %originalBB848

originalBB852alteredBB:                           ; preds = %originalBB852, %3112
  br label %originalBB852

originalBB856alteredBB:                           ; preds = %originalBB856, %3129
  br label %originalBB856

originalBB860alteredBB:                           ; preds = %originalBB860, %3146
  store i8 1, i8* %37, align 1, !dbg !4924
  store i8 1, i8* %43, align 1, !dbg !4925
  %7403 = load i32, i32* %23, align 4, !dbg !4926
  %7404 = icmp eq i32 %7403, 2, !dbg !4928
  br label %originalBB860

originalBB864alteredBB:                           ; preds = %originalBB864, %3165
  %7405 = load i8, i8* %35, align 1, !dbg !4930
  %7406 = trunc i8 %7405 to i1, !dbg !4930
  br label %originalBB864

originalBB868alteredBB:                           ; preds = %originalBB868, %3184
  br label %originalBB868

originalBB872alteredBB:                           ; preds = %originalBB872, %3201
  %7407 = load i64, i64* %20, align 8, !dbg !4935
  %7408 = icmp ne i64 %7407, 0, !dbg !4935
  br label %originalBB872

originalBB876alteredBB:                           ; preds = %originalBB876, %3220
  %7409 = load i64, i64* %30, align 8, !dbg !4938
  %7410 = icmp ne i64 %7409, 0, !dbg !4938
  br label %originalBB876

originalBB880alteredBB:                           ; preds = %originalBB880, %3239
  %7411 = load i64, i64* %20, align 8, !dbg !4940
  store i64 %7411, i64* %30, align 8, !dbg !4942
  store i64 0, i64* %20, align 8, !dbg !4943
  br label %originalBB880

originalBB884alteredBB:                           ; preds = %originalBB884, %3257
  br label %originalBB884

originalBB888alteredBB:                           ; preds = %originalBB888, %3274
  %7412 = load i64, i64* %29, align 8, !dbg !4946
  %7413 = load i64, i64* %20, align 8, !dbg !4946
  %7414 = icmp ult i64 %7412, %7413, !dbg !4946
  br label %originalBB888

originalBB892alteredBB:                           ; preds = %originalBB892, %3294
  %7415 = load i8*, i8** %19, align 8, !dbg !4946
  %7416 = load i64, i64* %29, align 8, !dbg !4946
  %7417 = getelementptr inbounds i8, i8* %7415, i64 %7416, !dbg !4946
  store i8 39, i8* %7417, align 1, !dbg !4946
  br label %originalBB892

originalBB896alteredBB:                           ; preds = %originalBB896, %3314
  %7418 = load i64, i64* %29, align 8, !dbg !4949
  %_897 = sub i64 %7418, 1
  %gen898 = mul i64 %_897, 1
  %7419 = add i64 %7418, 1, !dbg !4949
  store i64 %7419, i64* %29, align 8, !dbg !4949
  br label %originalBB896

originalBB902alteredBB:                           ; preds = %originalBB902, %3333
  br label %originalBB902

originalBB906alteredBB:                           ; preds = %originalBB906, %3350
  %7420 = load i64, i64* %29, align 8, !dbg !4951
  %7421 = load i64, i64* %20, align 8, !dbg !4951
  %7422 = icmp ult i64 %7420, %7421, !dbg !4951
  br label %originalBB906

originalBB910alteredBB:                           ; preds = %originalBB910, %3370
  %7423 = load i8*, i8** %19, align 8, !dbg !4951
  %7424 = load i64, i64* %29, align 8, !dbg !4951
  %7425 = getelementptr inbounds i8, i8* %7423, i64 %7424, !dbg !4951
  store i8 92, i8* %7425, align 1, !dbg !4951
  br label %originalBB910

originalBB914alteredBB:                           ; preds = %originalBB914, %3390
  %7426 = load i64, i64* %29, align 8, !dbg !4954
  %_915 = shl i64 %7426, 1
  %_916 = sub i64 %7426, 1
  %gen917 = mul i64 %_916, 1
  %_918 = shl i64 %7426, 1
  %_919 = sub i64 %7426, 1
  %gen920 = mul i64 %_919, 1
  %_921 = sub i64 0, %7426
  %gen922 = add i64 %_921, 1
  %_923 = sub i64 0, %7426
  %gen924 = add i64 %_923, 1
  %_925 = shl i64 %7426, 1
  %7427 = add i64 %7426, 1, !dbg !4954
  store i64 %7427, i64* %29, align 8, !dbg !4954
  br label %originalBB914

originalBB929alteredBB:                           ; preds = %originalBB929, %3409
  br label %originalBB929

originalBB933alteredBB:                           ; preds = %originalBB933, %3426
  %7428 = load i64, i64* %29, align 8, !dbg !4956
  %7429 = load i64, i64* %20, align 8, !dbg !4956
  %7430 = icmp ult i64 %7428, %7429, !dbg !4956
  br label %originalBB933

originalBB937alteredBB:                           ; preds = %originalBB937, %3446
  %7431 = load i8*, i8** %19, align 8, !dbg !4956
  %7432 = load i64, i64* %29, align 8, !dbg !4956
  %7433 = getelementptr inbounds i8, i8* %7431, i64 %7432, !dbg !4956
  store i8 39, i8* %7433, align 1, !dbg !4956
  br label %originalBB937

originalBB941alteredBB:                           ; preds = %originalBB941, %3466
  %7434 = load i64, i64* %29, align 8, !dbg !4959
  %_942 = sub i64 %7434, 1
  %gen943 = mul i64 %_942, 1
  %_944 = sub i64 0, %7434
  %gen945 = add i64 %_944, 1
  %_946 = shl i64 %7434, 1
  %7435 = add i64 %7434, 1, !dbg !4959
  store i64 %7435, i64* %29, align 8, !dbg !4959
  br label %originalBB941

originalBB950alteredBB:                           ; preds = %originalBB950, %3485
  store i8 0, i8* %36, align 1, !dbg !4960
  br label %originalBB950

originalBB954alteredBB:                           ; preds = %originalBB954, %3502
  br label %originalBB954

originalBB958alteredBB:                           ; preds = %originalBB958, %3519
  store i8 1, i8* %43, align 1, !dbg !4963
  br label %originalBB958

originalBB962alteredBB:                           ; preds = %originalBB962, %3536
  %7436 = load i8, i8* %34, align 1, !dbg !4970
  %7437 = trunc i8 %7436 to i1, !dbg !4970
  br label %originalBB962

originalBB966alteredBB:                           ; preds = %originalBB966, %3555
  store i64 1, i64* %44, align 8, !dbg !4973
  %7438 = call i16** @__ctype_b_loc() #15, !dbg !4975
  %7439 = load i16*, i16** %7438, align 8, !dbg !4975
  %7440 = load i8, i8* %39, align 1, !dbg !4975
  %7441 = zext i8 %7440 to i32, !dbg !4975
  %7442 = sext i32 %7441 to i64, !dbg !4975
  %7443 = getelementptr inbounds i16, i16* %7439, i64 %7442, !dbg !4975
  %7444 = load i16, i16* %7443, align 2, !dbg !4975
  %7445 = zext i16 %7444 to i32, !dbg !4975
  %_967 = sub i32 %7445, 16384
  %gen968 = mul i32 %_967, 16384
  %_969 = shl i32 %7445, 16384
  %_970 = sub i32 %7445, 16384
  %gen971 = mul i32 %_970, 16384
  %_972 = sub i32 %7445, 16384
  %gen973 = mul i32 %_972, 16384
  %_974 = sub i32 0, %7445
  %gen975 = add i32 %_974, 16384
  %_976 = sub i32 0, %7445
  %gen977 = add i32 %_976, 16384
  %_978 = sub i32 %7445, 16384
  %gen979 = mul i32 %_978, 16384
  %_980 = shl i32 %7445, 16384
  %_981 = shl i32 %7445, 16384
  %7446 = and i32 %7445, 16384, !dbg !4975
  %7447 = icmp ne i32 %7446, 0, !dbg !4976
  %7448 = zext i1 %7447 to i8, !dbg !4977
  store i8 %7448, i8* %45, align 1, !dbg !4977
  br label %originalBB966

originalBB985alteredBB:                           ; preds = %originalBB985, %3583
  %7449 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !4994
  call void @llvm.memset.p0i8.i64(i8* align 4 %7449, i8 0, i64 8, i1 false), !dbg !4994
  store i64 0, i64* %44, align 8, !dbg !4995
  store i8 1, i8* %45, align 1, !dbg !4996
  %7450 = load i64, i64* %22, align 8, !dbg !4997
  %7451 = icmp eq i64 %7450, -1, !dbg !4999
  br label %originalBB985

originalBB989alteredBB:                           ; preds = %originalBB989, %3603
  %7452 = load i8*, i8** %21, align 8, !dbg !5001
  %7453 = call i64 @strlen(i8* %7452) #13, !dbg !5002
  store i64 %7453, i64* %22, align 8, !dbg !5003
  br label %originalBB989

originalBB993alteredBB:                           ; preds = %originalBB993, %3622
  br label %originalBB993

originalBB997alteredBB:                           ; preds = %originalBB997, %3639
  %7454 = load i8*, i8** %21, align 8, !dbg !5012
  %7455 = load i64, i64* %28, align 8, !dbg !5013
  %7456 = load i64, i64* %44, align 8, !dbg !5014
  %_998 = shl i64 %7455, %7456
  %_999 = sub i64 0, %7455
  %gen1000 = add i64 %_999, %7456
  %_1001 = sub i64 %7455, %7456
  %gen1002 = mul i64 %_1001, %7456
  %_1003 = sub i64 0, %7455
  %gen1004 = add i64 %_1003, %7456
  %_1005 = sub i64 0, %7455
  %gen1006 = add i64 %_1005, %7456
  %_1007 = shl i64 %7455, %7456
  %7457 = add i64 %7455, %7456, !dbg !5015
  %7458 = getelementptr inbounds i8, i8* %7454, i64 %7457, !dbg !5012
  %7459 = load i64, i64* %22, align 8, !dbg !5016
  %7460 = load i64, i64* %28, align 8, !dbg !5017
  %7461 = load i64, i64* %44, align 8, !dbg !5018
  %_1008 = shl i64 %7460, %7461
  %_1009 = sub i64 0, %7460
  %gen1010 = add i64 %_1009, %7461
  %_1011 = shl i64 %7460, %7461
  %_1012 = shl i64 %7460, %7461
  %7462 = add i64 %7460, %7461, !dbg !5019
  %_1013 = sub i64 0, %7459
  %gen1014 = add i64 %_1013, %7462
  %7463 = sub i64 %7459, %7462, !dbg !5020
  %7464 = call i64 @rpl_mbrtowc(i32* %47, i8* %7458, i64 %7463, %struct.__mbstate_t* %46), !dbg !5021
  store i64 %7464, i64* %48, align 8, !dbg !5011
  %7465 = load i64, i64* %48, align 8, !dbg !5022
  %7466 = icmp eq i64 %7465, 0, !dbg !5024
  br label %originalBB997

originalBB1018alteredBB:                          ; preds = %originalBB1018, %3669
  br label %originalBB1018

originalBB1022alteredBB:                          ; preds = %originalBB1022, %3686
  %7467 = load i64, i64* %48, align 8, !dbg !5027
  %7468 = icmp eq i64 %7467, -1, !dbg !5029
  br label %originalBB1022

originalBB1026alteredBB:                          ; preds = %originalBB1026, %3705
  store i8 0, i8* %45, align 1, !dbg !5031
  br label %originalBB1026

originalBB1030alteredBB:                          ; preds = %originalBB1030, %3722
  %7469 = load i64, i64* %48, align 8, !dbg !5034
  %7470 = icmp eq i64 %7469, -2, !dbg !5036
  br label %originalBB1030

originalBB1034alteredBB:                          ; preds = %originalBB1034, %3741
  store i8 0, i8* %45, align 1, !dbg !5038
  br label %originalBB1034

originalBB1038alteredBB:                          ; preds = %originalBB1038, %3758
  %7471 = load i64, i64* %28, align 8, !dbg !5041
  %7472 = load i64, i64* %44, align 8, !dbg !5042
  %_1039 = sub i64 0, %7471
  %gen1040 = add i64 %_1039, %7472
  %_1041 = sub i64 %7471, %7472
  %gen1042 = mul i64 %_1041, %7472
  %_1043 = sub i64 %7471, %7472
  %gen1044 = mul i64 %_1043, %7472
  %_1045 = sub i64 %7471, %7472
  %gen1046 = mul i64 %_1045, %7472
  %_1047 = sub i64 %7471, %7472
  %gen1048 = mul i64 %_1047, %7472
  %_1049 = sub i64 0, %7471
  %gen1050 = add i64 %_1049, %7472
  %7473 = add i64 %7471, %7472, !dbg !5043
  %7474 = load i64, i64* %22, align 8, !dbg !5044
  %7475 = icmp ult i64 %7473, %7474, !dbg !5045
  br label %originalBB1038

originalBB1054alteredBB:                          ; preds = %originalBB1054, %3780
  %7476 = load i8*, i8** %21, align 8, !dbg !5047
  %7477 = load i64, i64* %28, align 8, !dbg !5048
  %7478 = load i64, i64* %44, align 8, !dbg !5049
  %_1055 = shl i64 %7477, %7478
  %_1056 = sub i64 %7477, %7478
  %gen1057 = mul i64 %_1056, %7478
  %_1058 = sub i64 0, %7477
  %gen1059 = add i64 %_1058, %7478
  %_1060 = sub i64 0, %7477
  %gen1061 = add i64 %_1060, %7478
  %7479 = add i64 %7477, %7478, !dbg !5050
  %7480 = getelementptr inbounds i8, i8* %7476, i64 %7479, !dbg !5047
  %7481 = load i8, i8* %7480, align 1, !dbg !5047
  %7482 = sext i8 %7481 to i32, !dbg !5047
  %7483 = icmp ne i32 %7482, 0, !dbg !5046
  br label %originalBB1054

originalBB1065alteredBB:                          ; preds = %originalBB1065, %3805
  br label %originalBB1065

originalBB1069alteredBB:                          ; preds = %originalBB1069, %3823
  %7484 = load i64, i64* %44, align 8, !dbg !5052
  %_1070 = sub i64 0, %7484
  %gen1071 = add i64 %_1070, 1
  %_1072 = shl i64 %7484, 1
  %_1073 = sub i64 0, %7484
  %gen1074 = add i64 %_1073, 1
  %_1075 = sub i64 0, %7484
  %gen1076 = add i64 %_1075, 1
  %_1077 = sub i64 0, %7484
  %gen1078 = add i64 %_1077, 1
  %_1079 = sub i64 0, %7484
  %gen1080 = add i64 %_1079, 1
  %7485 = add i64 %7484, 1, !dbg !5052
  store i64 %7485, i64* %44, align 8, !dbg !5052
  br label %originalBB1069

originalBB1084alteredBB:                          ; preds = %originalBB1084, %3842
  br label %originalBB1084

originalBB1088alteredBB:                          ; preds = %originalBB1088, %3859
  %7486 = load i8, i8* %35, align 1, !dbg !5055
  %7487 = trunc i8 %7486 to i1, !dbg !5055
  br label %originalBB1088

originalBB1092alteredBB:                          ; preds = %originalBB1092, %3878
  %7488 = load i32, i32* %23, align 4, !dbg !5059
  %7489 = icmp eq i32 %7488, 2, !dbg !5060
  br label %originalBB1092

originalBB1096alteredBB:                          ; preds = %originalBB1096, %3897
  store i64 1, i64* %49, align 8, !dbg !5065
  br label %originalBB1096

originalBB1100alteredBB:                          ; preds = %originalBB1100, %3914
  %7490 = load i64, i64* %49, align 8, !dbg !5068
  %7491 = load i64, i64* %48, align 8, !dbg !5070
  %7492 = icmp ult i64 %7490, %7491, !dbg !5071
  br label %originalBB1100

originalBB1104alteredBB:                          ; preds = %originalBB1104, %3934
  %7493 = load i8*, i8** %21, align 8, !dbg !5073
  %7494 = load i64, i64* %28, align 8, !dbg !5074
  %7495 = load i64, i64* %44, align 8, !dbg !5075
  %_1105 = sub i64 0, %7494
  %gen1106 = add i64 %_1105, %7495
  %7496 = add i64 %7494, %7495, !dbg !5076
  %7497 = load i64, i64* %49, align 8, !dbg !5077
  %_1107 = sub i64 0, %7496
  %gen1108 = add i64 %_1107, %7497
  %_1109 = shl i64 %7496, %7497
  %_1110 = sub i64 %7496, %7497
  %gen1111 = mul i64 %_1110, %7497
  %_1112 = sub i64 %7496, %7497
  %gen1113 = mul i64 %_1112, %7497
  %_1114 = shl i64 %7496, %7497
  %_1115 = sub i64 0, %7496
  %gen1116 = add i64 %_1115, %7497
  %_1117 = sub i64 0, %7496
  %gen1118 = add i64 %_1117, %7497
  %7498 = add i64 %7496, %7497, !dbg !5078
  %7499 = getelementptr inbounds i8, i8* %7493, i64 %7498, !dbg !5073
  %7500 = load i8, i8* %7499, align 1, !dbg !5073
  %7501 = sext i8 %7500 to i32, !dbg !5073
  br label %originalBB1104

originalBB1122alteredBB:                          ; preds = %originalBB1122, %3960
  br label %originalBB1122

originalBB1126alteredBB:                          ; preds = %originalBB1126, %3977
  br label %originalBB1126

originalBB1130alteredBB:                          ; preds = %originalBB1130, %3994
  br label %originalBB1130

originalBB1134alteredBB:                          ; preds = %originalBB1134, %4011
  %7502 = load i64, i64* %49, align 8, !dbg !5084
  %_1135 = sub i64 %7502, 1
  %gen1136 = mul i64 %_1135, 1
  %_1137 = sub i64 0, %7502
  %gen1138 = add i64 %_1137, 1
  %_1139 = sub i64 %7502, 1
  %gen1140 = mul i64 %_1139, 1
  %_1141 = sub i64 %7502, 1
  %gen1142 = mul i64 %_1141, 1
  %_1143 = sub i64 0, %7502
  %gen1144 = add i64 %_1143, 1
  %_1145 = shl i64 %7502, 1
  %7503 = add i64 %7502, 1, !dbg !5084
  store i64 %7503, i64* %49, align 8, !dbg !5084
  br label %originalBB1134

originalBB1149alteredBB:                          ; preds = %originalBB1149, %4030
  br label %originalBB1149

originalBB1153alteredBB:                          ; preds = %originalBB1153, %4047
  %7504 = load i32, i32* %47, align 4, !dbg !5089
  %7505 = call i32 @iswprint(i32 %7504) #10, !dbg !5091
  %7506 = icmp ne i32 %7505, 0, !dbg !5091
  br label %originalBB1153

originalBB1157alteredBB:                          ; preds = %originalBB1157, %4067
  store i8 0, i8* %45, align 1, !dbg !5093
  br label %originalBB1157

originalBB1161alteredBB:                          ; preds = %originalBB1161, %4084
  %7507 = load i64, i64* %48, align 8, !dbg !5095
  %7508 = load i64, i64* %44, align 8, !dbg !5096
  %_1162 = sub i64 0, %7508
  %gen1163 = add i64 %_1162, %7507
  %_1164 = sub i64 %7508, %7507
  %gen1165 = mul i64 %_1164, %7507
  %_1166 = sub i64 %7508, %7507
  %gen1167 = mul i64 %_1166, %7507
  %_1168 = sub i64 0, %7508
  %gen1169 = add i64 %_1168, %7507
  %_1170 = sub i64 %7508, %7507
  %gen1171 = mul i64 %_1170, %7507
  %_1172 = sub i64 0, %7508
  %gen1173 = add i64 %_1172, %7507
  %_1174 = sub i64 0, %7508
  %gen1175 = add i64 %_1174, %7507
  %7509 = add i64 %7508, %7507, !dbg !5096
  store i64 %7509, i64* %44, align 8, !dbg !5096
  br label %originalBB1161

originalBB1179alteredBB:                          ; preds = %originalBB1179, %4104
  br label %originalBB1179

originalBB1183alteredBB:                          ; preds = %originalBB1183, %4121
  br label %originalBB1183

originalBB1187alteredBB:                          ; preds = %originalBB1187, %4138
  br label %originalBB1187

originalBB1191alteredBB:                          ; preds = %originalBB1191, %4155
  %7510 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !5098
  %7511 = icmp ne i32 %7510, 0, !dbg !5099
  %_1192 = shl i1 %7511, true
  %_1193 = sub i1 false, %7511
  %gen1194 = add i1 %_1193, true
  %7512 = xor i1 %7511, true, !dbg !5099
  br label %originalBB1191

originalBB1198alteredBB:                          ; preds = %originalBB1198, %4175
  br label %originalBB1198

originalBB1202alteredBB:                          ; preds = %originalBB1202, %4192
  %7513 = load i8, i8* %45, align 1, !dbg !5102
  %7514 = trunc i8 %7513 to i1, !dbg !5102
  %7515 = zext i1 %7514 to i8, !dbg !5103
  store i8 %7515, i8* %43, align 1, !dbg !5103
  %7516 = load i64, i64* %44, align 8, !dbg !5104
  %7517 = icmp ult i64 1, %7516, !dbg !5106
  br label %originalBB1202

originalBB1206alteredBB:                          ; preds = %originalBB1206, %4214
  %7518 = load i8, i8* %33, align 1, !dbg !5108
  %7519 = trunc i8 %7518 to i1, !dbg !5108
  br label %originalBB1206

originalBB1210alteredBB:                          ; preds = %originalBB1210, %4233
  %7520 = load i8, i8* %45, align 1, !dbg !5110
  %7521 = trunc i8 %7520 to i1, !dbg !5110
  br label %originalBB1210

originalBB1214alteredBB:                          ; preds = %originalBB1214, %4252
  %7522 = load i64, i64* %28, align 8, !dbg !5115
  %7523 = load i64, i64* %44, align 8, !dbg !5116
  %_1215 = sub i64 %7522, %7523
  %gen1216 = mul i64 %_1215, %7523
  %_1217 = sub i64 %7522, %7523
  %gen1218 = mul i64 %_1217, %7523
  %_1219 = sub i64 0, %7522
  %gen1220 = add i64 %_1219, %7523
  %_1221 = sub i64 %7522, %7523
  %gen1222 = mul i64 %_1221, %7523
  %_1223 = sub i64 %7522, %7523
  %gen1224 = mul i64 %_1223, %7523
  %_1225 = sub i64 %7522, %7523
  %gen1226 = mul i64 %_1225, %7523
  %7524 = add i64 %7522, %7523, !dbg !5117
  store i64 %7524, i64* %50, align 8, !dbg !5114
  br label %originalBB1214

originalBB1230alteredBB:                          ; preds = %originalBB1230, %4272
  %7525 = load i8, i8* %33, align 1, !dbg !5119
  %7526 = trunc i8 %7525 to i1, !dbg !5119
  br label %originalBB1230

originalBB1234alteredBB:                          ; preds = %originalBB1234, %4291
  %7527 = load i8, i8* %45, align 1, !dbg !5125
  %7528 = trunc i8 %7527 to i1, !dbg !5125
  br label %originalBB1234

originalBB1238alteredBB:                          ; preds = %originalBB1238, %4310
  br label %originalBB1238

originalBB1242alteredBB:                          ; preds = %originalBB1242, %4327
  %7529 = load i8, i8* %35, align 1, !dbg !5129
  %7530 = trunc i8 %7529 to i1, !dbg !5129
  br label %originalBB1242

originalBB1246alteredBB:                          ; preds = %originalBB1246, %4346
  br label %originalBB1246

originalBB1250alteredBB:                          ; preds = %originalBB1250, %4363
  store i8 1, i8* %42, align 1, !dbg !5132
  %7531 = load i32, i32* %23, align 4, !dbg !5133
  %7532 = icmp eq i32 %7531, 2, !dbg !5133
  br label %originalBB1250

originalBB1254alteredBB:                          ; preds = %originalBB1254, %4382
  %7533 = load i8, i8* %36, align 1, !dbg !5133
  %7534 = trunc i8 %7533 to i1, !dbg !5133
  br label %originalBB1254

originalBB1258alteredBB:                          ; preds = %originalBB1258, %4401
  br label %originalBB1258

originalBB1262alteredBB:                          ; preds = %originalBB1262, %4418
  %7535 = load i64, i64* %29, align 8, !dbg !5137
  %7536 = load i64, i64* %20, align 8, !dbg !5137
  %7537 = icmp ult i64 %7535, %7536, !dbg !5137
  br label %originalBB1262

originalBB1266alteredBB:                          ; preds = %originalBB1266, %4438
  %7538 = load i8*, i8** %19, align 8, !dbg !5137
  %7539 = load i64, i64* %29, align 8, !dbg !5137
  %7540 = getelementptr inbounds i8, i8* %7538, i64 %7539, !dbg !5137
  store i8 39, i8* %7540, align 1, !dbg !5137
  br label %originalBB1266

originalBB1270alteredBB:                          ; preds = %originalBB1270, %4458
  %7541 = load i64, i64* %29, align 8, !dbg !5140
  %_1271 = sub i64 0, %7541
  %gen1272 = add i64 %_1271, 1
  %_1273 = sub i64 0, %7541
  %gen1274 = add i64 %_1273, 1
  %_1275 = sub i64 0, %7541
  %gen1276 = add i64 %_1275, 1
  %_1277 = shl i64 %7541, 1
  %7542 = add i64 %7541, 1, !dbg !5140
  store i64 %7542, i64* %29, align 8, !dbg !5140
  br label %originalBB1270

originalBB1281alteredBB:                          ; preds = %originalBB1281, %4477
  br label %originalBB1281

originalBB1285alteredBB:                          ; preds = %originalBB1285, %4494
  %7543 = load i64, i64* %29, align 8, !dbg !5141
  %7544 = load i64, i64* %20, align 8, !dbg !5141
  %7545 = icmp ult i64 %7543, %7544, !dbg !5141
  br label %originalBB1285

originalBB1289alteredBB:                          ; preds = %originalBB1289, %4514
  %7546 = load i8*, i8** %19, align 8, !dbg !5141
  %7547 = load i64, i64* %29, align 8, !dbg !5141
  %7548 = getelementptr inbounds i8, i8* %7546, i64 %7547, !dbg !5141
  store i8 36, i8* %7548, align 1, !dbg !5141
  br label %originalBB1289

originalBB1293alteredBB:                          ; preds = %originalBB1293, %4534
  %7549 = load i64, i64* %29, align 8, !dbg !5144
  %_1294 = shl i64 %7549, 1
  %_1295 = shl i64 %7549, 1
  %_1296 = sub i64 %7549, 1
  %gen1297 = mul i64 %_1296, 1
  %_1298 = sub i64 %7549, 1
  %gen1299 = mul i64 %_1298, 1
  %_1300 = sub i64 0, %7549
  %gen1301 = add i64 %_1300, 1
  %7550 = add i64 %7549, 1, !dbg !5144
  store i64 %7550, i64* %29, align 8, !dbg !5144
  br label %originalBB1293

originalBB1305alteredBB:                          ; preds = %originalBB1305, %4553
  br label %originalBB1305

originalBB1309alteredBB:                          ; preds = %originalBB1309, %4570
  %7551 = load i64, i64* %29, align 8, !dbg !5145
  %7552 = load i64, i64* %20, align 8, !dbg !5145
  %7553 = icmp ult i64 %7551, %7552, !dbg !5145
  br label %originalBB1309

originalBB1313alteredBB:                          ; preds = %originalBB1313, %4590
  %7554 = load i8*, i8** %19, align 8, !dbg !5145
  %7555 = load i64, i64* %29, align 8, !dbg !5145
  %7556 = getelementptr inbounds i8, i8* %7554, i64 %7555, !dbg !5145
  store i8 39, i8* %7556, align 1, !dbg !5145
  br label %originalBB1313

originalBB1317alteredBB:                          ; preds = %originalBB1317, %4610
  %7557 = load i64, i64* %29, align 8, !dbg !5148
  %_1318 = shl i64 %7557, 1
  %_1319 = sub i64 %7557, 1
  %gen1320 = mul i64 %_1319, 1
  %_1321 = shl i64 %7557, 1
  %_1322 = sub i64 0, %7557
  %gen1323 = add i64 %_1322, 1
  %_1324 = shl i64 %7557, 1
  %_1325 = shl i64 %7557, 1
  %7558 = add i64 %7557, 1, !dbg !5148
  store i64 %7558, i64* %29, align 8, !dbg !5148
  br label %originalBB1317

originalBB1329alteredBB:                          ; preds = %originalBB1329, %4629
  store i8 1, i8* %36, align 1, !dbg !5135
  br label %originalBB1329

originalBB1333alteredBB:                          ; preds = %originalBB1333, %4646
  br label %originalBB1333

originalBB1337alteredBB:                          ; preds = %originalBB1337, %4663
  %7559 = load i64, i64* %29, align 8, !dbg !5149
  %7560 = load i64, i64* %20, align 8, !dbg !5149
  %7561 = icmp ult i64 %7559, %7560, !dbg !5149
  br label %originalBB1337

originalBB1341alteredBB:                          ; preds = %originalBB1341, %4683
  %7562 = load i8*, i8** %19, align 8, !dbg !5149
  %7563 = load i64, i64* %29, align 8, !dbg !5149
  %7564 = getelementptr inbounds i8, i8* %7562, i64 %7563, !dbg !5149
  store i8 92, i8* %7564, align 1, !dbg !5149
  br label %originalBB1341

originalBB1345alteredBB:                          ; preds = %originalBB1345, %4703
  %7565 = load i64, i64* %29, align 8, !dbg !5152
  %_1346 = sub i64 0, %7565
  %gen1347 = add i64 %_1346, 1
  %_1348 = sub i64 0, %7565
  %gen1349 = add i64 %_1348, 1
  %_1350 = sub i64 0, %7565
  %gen1351 = add i64 %_1350, 1
  %_1352 = sub i64 %7565, 1
  %gen1353 = mul i64 %_1352, 1
  %_1354 = sub i64 %7565, 1
  %gen1355 = mul i64 %_1354, 1
  %_1356 = sub i64 %7565, 1
  %gen1357 = mul i64 %_1356, 1
  %_1358 = sub i64 0, %7565
  %gen1359 = add i64 %_1358, 1
  %_1360 = sub i64 0, %7565
  %gen1361 = add i64 %_1360, 1
  %_1362 = sub i64 %7565, 1
  %gen1363 = mul i64 %_1362, 1
  %7566 = add i64 %7565, 1, !dbg !5152
  store i64 %7566, i64* %29, align 8, !dbg !5152
  br label %originalBB1345

originalBB1367alteredBB:                          ; preds = %originalBB1367, %4722
  br label %originalBB1367

originalBB1371alteredBB:                          ; preds = %originalBB1371, %4739
  br label %originalBB1371

originalBB1375alteredBB:                          ; preds = %originalBB1375, %4756
  %7567 = load i64, i64* %29, align 8, !dbg !5154
  %7568 = load i64, i64* %20, align 8, !dbg !5154
  %7569 = icmp ult i64 %7567, %7568, !dbg !5154
  br label %originalBB1375

originalBB1379alteredBB:                          ; preds = %originalBB1379, %4776
  %7570 = load i8, i8* %39, align 1, !dbg !5154
  %7571 = zext i8 %7570 to i32, !dbg !5154
  %_1380 = sub i32 0, %7571
  %gen1381 = add i32 %_1380, 6
  %_1382 = shl i32 %7571, 6
  %_1383 = shl i32 %7571, 6
  %_1384 = sub i32 0, %7571
  %gen1385 = add i32 %_1384, 6
  %_1386 = shl i32 %7571, 6
  %7572 = ashr i32 %7571, 6, !dbg !5154
  %_1387 = sub i32 48, %7572
  %gen1388 = mul i32 %_1387, %7572
  %_1389 = sub i32 48, %7572
  %gen1390 = mul i32 %_1389, %7572
  %_1391 = sub i32 48, %7572
  %gen1392 = mul i32 %_1391, %7572
  %_1393 = shl i32 48, %7572
  %_1394 = sub i32 0, 48
  %gen1395 = add i32 %_1394, %7572
  %_1396 = shl i32 48, %7572
  %7573 = add nsw i32 48, %7572, !dbg !5154
  %7574 = trunc i32 %7573 to i8, !dbg !5154
  %7575 = load i8*, i8** %19, align 8, !dbg !5154
  %7576 = load i64, i64* %29, align 8, !dbg !5154
  %7577 = getelementptr inbounds i8, i8* %7575, i64 %7576, !dbg !5154
  store i8 %7574, i8* %7577, align 1, !dbg !5154
  br label %originalBB1379

originalBB1400alteredBB:                          ; preds = %originalBB1400, %4801
  %7578 = load i64, i64* %29, align 8, !dbg !5157
  %_1401 = sub i64 0, %7578
  %gen1402 = add i64 %_1401, 1
  %_1403 = sub i64 %7578, 1
  %gen1404 = mul i64 %_1403, 1
  %_1405 = sub i64 0, %7578
  %gen1406 = add i64 %_1405, 1
  %_1407 = sub i64 0, %7578
  %gen1408 = add i64 %_1407, 1
  %_1409 = shl i64 %7578, 1
  %_1410 = shl i64 %7578, 1
  %_1411 = shl i64 %7578, 1
  %_1412 = sub i64 %7578, 1
  %gen1413 = mul i64 %_1412, 1
  %7579 = add i64 %7578, 1, !dbg !5157
  store i64 %7579, i64* %29, align 8, !dbg !5157
  br label %originalBB1400

originalBB1417alteredBB:                          ; preds = %originalBB1417, %4820
  br label %originalBB1417

originalBB1421alteredBB:                          ; preds = %originalBB1421, %4837
  %7580 = load i64, i64* %29, align 8, !dbg !5159
  %7581 = load i64, i64* %20, align 8, !dbg !5159
  %7582 = icmp ult i64 %7580, %7581, !dbg !5159
  br label %originalBB1421

originalBB1425alteredBB:                          ; preds = %originalBB1425, %4857
  %7583 = load i8, i8* %39, align 1, !dbg !5159
  %7584 = zext i8 %7583 to i32, !dbg !5159
  %_1426 = sub i32 %7584, 3
  %gen1427 = mul i32 %_1426, 3
  %_1428 = shl i32 %7584, 3
  %7585 = ashr i32 %7584, 3, !dbg !5159
  %_1429 = shl i32 %7585, 7
  %_1430 = shl i32 %7585, 7
  %_1431 = shl i32 %7585, 7
  %_1432 = shl i32 %7585, 7
  %_1433 = sub i32 %7585, 7
  %gen1434 = mul i32 %_1433, 7
  %_1435 = sub i32 %7585, 7
  %gen1436 = mul i32 %_1435, 7
  %_1437 = shl i32 %7585, 7
  %_1438 = shl i32 %7585, 7
  %7586 = and i32 %7585, 7, !dbg !5159
  %_1439 = sub i32 48, %7586
  %gen1440 = mul i32 %_1439, %7586
  %_1441 = sub i32 48, %7586
  %gen1442 = mul i32 %_1441, %7586
  %_1443 = sub i32 0, 48
  %gen1444 = add i32 %_1443, %7586
  %_1445 = sub i32 0, 48
  %gen1446 = add i32 %_1445, %7586
  %_1447 = sub i32 48, %7586
  %gen1448 = mul i32 %_1447, %7586
  %_1449 = sub i32 0, 48
  %gen1450 = add i32 %_1449, %7586
  %7587 = add nsw i32 48, %7586, !dbg !5159
  %7588 = trunc i32 %7587 to i8, !dbg !5159
  %7589 = load i8*, i8** %19, align 8, !dbg !5159
  %7590 = load i64, i64* %29, align 8, !dbg !5159
  %7591 = getelementptr inbounds i8, i8* %7589, i64 %7590, !dbg !5159
  store i8 %7588, i8* %7591, align 1, !dbg !5159
  br label %originalBB1425

originalBB1454alteredBB:                          ; preds = %originalBB1454, %4883
  %7592 = load i64, i64* %29, align 8, !dbg !5162
  %_1455 = sub i64 0, %7592
  %gen1456 = add i64 %_1455, 1
  %_1457 = sub i64 0, %7592
  %gen1458 = add i64 %_1457, 1
  %_1459 = shl i64 %7592, 1
  %_1460 = sub i64 0, %7592
  %gen1461 = add i64 %_1460, 1
  %7593 = add i64 %7592, 1, !dbg !5162
  store i64 %7593, i64* %29, align 8, !dbg !5162
  br label %originalBB1454

originalBB1465alteredBB:                          ; preds = %originalBB1465, %4902
  %7594 = load i8, i8* %39, align 1, !dbg !5163
  %7595 = zext i8 %7594 to i32, !dbg !5163
  %_1466 = sub i32 %7595, 7
  %gen1467 = mul i32 %_1466, 7
  %7596 = and i32 %7595, 7, !dbg !5164
  %_1468 = shl i32 48, %7596
  %_1469 = sub i32 0, 48
  %gen1470 = add i32 %_1469, %7596
  %_1471 = sub i32 48, %7596
  %gen1472 = mul i32 %_1471, %7596
  %_1473 = sub i32 48, %7596
  %gen1474 = mul i32 %_1473, %7596
  %_1475 = sub i32 0, 48
  %gen1476 = add i32 %_1475, %7596
  %_1477 = sub i32 48, %7596
  %gen1478 = mul i32 %_1477, %7596
  %_1479 = sub i32 48, %7596
  %gen1480 = mul i32 %_1479, %7596
  %_1481 = sub i32 0, 48
  %gen1482 = add i32 %_1481, %7596
  %7597 = add nsw i32 48, %7596, !dbg !5165
  %7598 = trunc i32 %7597 to i8, !dbg !5166
  store i8 %7598, i8* %39, align 1, !dbg !5167
  br label %originalBB1465

originalBB1486alteredBB:                          ; preds = %originalBB1486, %4924
  %7599 = load i8, i8* %41, align 1, !dbg !5169
  %7600 = trunc i8 %7599 to i1, !dbg !5169
  br label %originalBB1486

originalBB1490alteredBB:                          ; preds = %originalBB1490, %4943
  br label %originalBB1490

originalBB1494alteredBB:                          ; preds = %originalBB1494, %4960
  %7601 = load i64, i64* %29, align 8, !dbg !5174
  %7602 = load i64, i64* %20, align 8, !dbg !5174
  %7603 = icmp ult i64 %7601, %7602, !dbg !5174
  br label %originalBB1494

originalBB1498alteredBB:                          ; preds = %originalBB1498, %4980
  %7604 = load i8*, i8** %19, align 8, !dbg !5174
  %7605 = load i64, i64* %29, align 8, !dbg !5174
  %7606 = getelementptr inbounds i8, i8* %7604, i64 %7605, !dbg !5174
  store i8 92, i8* %7606, align 1, !dbg !5174
  br label %originalBB1498

originalBB1502alteredBB:                          ; preds = %originalBB1502, %5000
  %7607 = load i64, i64* %29, align 8, !dbg !5177
  %_1503 = sub i64 0, %7607
  %gen1504 = add i64 %_1503, 1
  %_1505 = shl i64 %7607, 1
  %_1506 = sub i64 0, %7607
  %gen1507 = add i64 %_1506, 1
  %_1508 = sub i64 %7607, 1
  %gen1509 = mul i64 %_1508, 1
  %_1510 = sub i64 %7607, 1
  %gen1511 = mul i64 %_1510, 1
  %_1512 = shl i64 %7607, 1
  %_1513 = sub i64 %7607, 1
  %gen1514 = mul i64 %_1513, 1
  %_1515 = sub i64 %7607, 1
  %gen1516 = mul i64 %_1515, 1
  %_1517 = sub i64 %7607, 1
  %gen1518 = mul i64 %_1517, 1
  %7608 = add i64 %7607, 1, !dbg !5177
  store i64 %7608, i64* %29, align 8, !dbg !5177
  br label %originalBB1502

originalBB1522alteredBB:                          ; preds = %originalBB1522, %5019
  store i8 0, i8* %41, align 1, !dbg !5178
  br label %originalBB1522

originalBB1526alteredBB:                          ; preds = %originalBB1526, %5036
  br label %originalBB1526

originalBB1530alteredBB:                          ; preds = %originalBB1530, %5053
  %7609 = load i64, i64* %50, align 8, !dbg !5180
  %7610 = load i64, i64* %28, align 8, !dbg !5182
  %_1531 = shl i64 %7610, 1
  %_1532 = sub i64 %7610, 1
  %gen1533 = mul i64 %_1532, 1
  %_1534 = shl i64 %7610, 1
  %7611 = add i64 %7610, 1, !dbg !5183
  %7612 = icmp ule i64 %7609, %7611, !dbg !5184
  br label %originalBB1530

originalBB1538alteredBB:                          ; preds = %originalBB1538, %5074
  br label %originalBB1538

originalBB1542alteredBB:                          ; preds = %originalBB1542, %5091
  br label %originalBB1542

originalBB1546alteredBB:                          ; preds = %originalBB1546, %5108
  %7613 = load i8, i8* %36, align 1, !dbg !5188
  %7614 = trunc i8 %7613 to i1, !dbg !5188
  br label %originalBB1546

originalBB1550alteredBB:                          ; preds = %originalBB1550, %5127
  %7615 = load i8, i8* %42, align 1, !dbg !5188
  %7616 = trunc i8 %7615 to i1, !dbg !5188
  br label %originalBB1550

originalBB1554alteredBB:                          ; preds = %originalBB1554, %5146
  br label %originalBB1554

originalBB1558alteredBB:                          ; preds = %originalBB1558, %5163
  %7617 = load i64, i64* %29, align 8, !dbg !5194
  %7618 = load i64, i64* %20, align 8, !dbg !5194
  %7619 = icmp ult i64 %7617, %7618, !dbg !5194
  br label %originalBB1558

originalBB1562alteredBB:                          ; preds = %originalBB1562, %5183
  %7620 = load i8*, i8** %19, align 8, !dbg !5194
  %7621 = load i64, i64* %29, align 8, !dbg !5194
  %7622 = getelementptr inbounds i8, i8* %7620, i64 %7621, !dbg !5194
  store i8 39, i8* %7622, align 1, !dbg !5194
  br label %originalBB1562

originalBB1566alteredBB:                          ; preds = %originalBB1566, %5203
  %7623 = load i64, i64* %29, align 8, !dbg !5197
  %_1567 = sub i64 %7623, 1
  %gen1568 = mul i64 %_1567, 1
  %_1569 = sub i64 0, %7623
  %gen1570 = add i64 %_1569, 1
  %_1571 = sub i64 %7623, 1
  %gen1572 = mul i64 %_1571, 1
  %_1573 = shl i64 %7623, 1
  %_1574 = sub i64 %7623, 1
  %gen1575 = mul i64 %_1574, 1
  %7624 = add i64 %7623, 1, !dbg !5197
  store i64 %7624, i64* %29, align 8, !dbg !5197
  br label %originalBB1566

originalBB1579alteredBB:                          ; preds = %originalBB1579, %5222
  br label %originalBB1579

originalBB1583alteredBB:                          ; preds = %originalBB1583, %5239
  %7625 = load i64, i64* %29, align 8, !dbg !5198
  %7626 = load i64, i64* %20, align 8, !dbg !5198
  %7627 = icmp ult i64 %7625, %7626, !dbg !5198
  br label %originalBB1583

originalBB1587alteredBB:                          ; preds = %originalBB1587, %5259
  %7628 = load i8*, i8** %19, align 8, !dbg !5198
  %7629 = load i64, i64* %29, align 8, !dbg !5198
  %7630 = getelementptr inbounds i8, i8* %7628, i64 %7629, !dbg !5198
  store i8 39, i8* %7630, align 1, !dbg !5198
  br label %originalBB1587

originalBB1591alteredBB:                          ; preds = %originalBB1591, %5279
  %7631 = load i64, i64* %29, align 8, !dbg !5201
  %_1592 = shl i64 %7631, 1
  %_1593 = sub i64 0, %7631
  %gen1594 = add i64 %_1593, 1
  %_1595 = shl i64 %7631, 1
  %_1596 = sub i64 0, %7631
  %gen1597 = add i64 %_1596, 1
  %7632 = add i64 %7631, 1, !dbg !5201
  store i64 %7632, i64* %29, align 8, !dbg !5201
  br label %originalBB1591

originalBB1601alteredBB:                          ; preds = %originalBB1601, %5298
  store i8 0, i8* %36, align 1, !dbg !5192
  br label %originalBB1601

originalBB1605alteredBB:                          ; preds = %originalBB1605, %5315
  br label %originalBB1605

originalBB1609alteredBB:                          ; preds = %originalBB1609, %5332
  br label %originalBB1609

originalBB1613alteredBB:                          ; preds = %originalBB1613, %5349
  %7633 = load i64, i64* %29, align 8, !dbg !5203
  %7634 = load i64, i64* %20, align 8, !dbg !5203
  %7635 = icmp ult i64 %7633, %7634, !dbg !5203
  br label %originalBB1613

originalBB1617alteredBB:                          ; preds = %originalBB1617, %5369
  %7636 = load i8, i8* %39, align 1, !dbg !5203
  %7637 = load i8*, i8** %19, align 8, !dbg !5203
  %7638 = load i64, i64* %29, align 8, !dbg !5203
  %7639 = getelementptr inbounds i8, i8* %7637, i64 %7638, !dbg !5203
  store i8 %7636, i8* %7639, align 1, !dbg !5203
  br label %originalBB1617

originalBB1621alteredBB:                          ; preds = %originalBB1621, %5390
  %7640 = load i64, i64* %29, align 8, !dbg !5206
  %_1622 = sub i64 %7640, 1
  %gen1623 = mul i64 %_1622, 1
  %7641 = add i64 %7640, 1, !dbg !5206
  store i64 %7641, i64* %29, align 8, !dbg !5206
  br label %originalBB1621

originalBB1627alteredBB:                          ; preds = %originalBB1627, %5409
  %7642 = load i8*, i8** %21, align 8, !dbg !5207
  %7643 = load i64, i64* %28, align 8, !dbg !5208
  %_1628 = shl i64 %7643, 1
  %_1629 = sub i64 0, %7643
  %gen1630 = add i64 %_1629, 1
  %_1631 = sub i64 0, %7643
  %gen1632 = add i64 %_1631, 1
  %_1633 = sub i64 0, %7643
  %gen1634 = add i64 %_1633, 1
  %7644 = add i64 %7643, 1, !dbg !5208
  store i64 %7644, i64* %28, align 8, !dbg !5208
  %7645 = getelementptr inbounds i8, i8* %7642, i64 %7644, !dbg !5207
  %7646 = load i8, i8* %7645, align 1, !dbg !5207
  store i8 %7646, i8* %39, align 1, !dbg !5209
  br label %originalBB1627

originalBB1638alteredBB:                          ; preds = %originalBB1638, %5431
  br label %originalBB1638

originalBB1642alteredBB:                          ; preds = %originalBB1642, %5448
  br label %originalBB1642

originalBB1646alteredBB:                          ; preds = %originalBB1646, %5465
  %7647 = load i8, i8* %33, align 1, !dbg !5216
  %7648 = trunc i8 %7647 to i1, !dbg !5216
  br label %originalBB1646

originalBB1650alteredBB:                          ; preds = %originalBB1650, %5484
  %7649 = load i32, i32* %23, align 4, !dbg !5219
  %7650 = icmp ne i32 %7649, 2, !dbg !5220
  br label %originalBB1650

originalBB1654alteredBB:                          ; preds = %originalBB1654, %5503
  %7651 = load i8, i8* %35, align 1, !dbg !5222
  %7652 = trunc i8 %7651 to i1, !dbg !5222
  br label %originalBB1654

originalBB1658alteredBB:                          ; preds = %originalBB1658, %5522
  %7653 = load i32*, i32** %25, align 8, !dbg !5224
  %7654 = icmp ne i32* %7653, null, !dbg !5224
  br label %originalBB1658

originalBB1662alteredBB:                          ; preds = %originalBB1662, %5541
  %7655 = load i32*, i32** %25, align 8, !dbg !5226
  %7656 = load i8, i8* %39, align 1, !dbg !5227
  %7657 = zext i8 %7656 to i64, !dbg !5227
  %_1663 = sub i64 %7657, 32
  %gen1664 = mul i64 %_1663, 32
  %7658 = udiv i64 %7657, 32, !dbg !5228
  %7659 = getelementptr inbounds i32, i32* %7655, i64 %7658, !dbg !5226
  %7660 = load i32, i32* %7659, align 4, !dbg !5226
  %7661 = load i8, i8* %39, align 1, !dbg !5229
  %7662 = zext i8 %7661 to i64, !dbg !5229
  %_1665 = sub i64 %7662, 32
  %gen1666 = mul i64 %_1665, 32
  %_1667 = sub i64 0, %7662
  %gen1668 = add i64 %_1667, 32
  %_1669 = shl i64 %7662, 32
  %_1670 = sub i64 0, %7662
  %gen1671 = add i64 %_1670, 32
  %_1672 = sub i64 0, %7662
  %gen1673 = add i64 %_1672, 32
  %_1674 = shl i64 %7662, 32
  %_1675 = sub i64 %7662, 32
  %gen1676 = mul i64 %_1675, 32
  %_1677 = sub i64 %7662, 32
  %gen1678 = mul i64 %_1677, 32
  %7663 = urem i64 %7662, 32, !dbg !5230
  %7664 = trunc i64 %7663 to i32, !dbg !5231
  %_1679 = sub i32 %7660, %7664
  %gen1680 = mul i32 %_1679, %7664
  %_1681 = sub i32 %7660, %7664
  %gen1682 = mul i32 %_1681, %7664
  %_1683 = sub i32 %7660, %7664
  %gen1684 = mul i32 %_1683, %7664
  %_1685 = sub i32 %7660, %7664
  %gen1686 = mul i32 %_1685, %7664
  %_1687 = sub i32 %7660, %7664
  %gen1688 = mul i32 %_1687, %7664
  %_1689 = shl i32 %7660, %7664
  %7665 = lshr i32 %7660, %7664, !dbg !5231
  %_1690 = sub i32 %7665, 1
  %gen1691 = mul i32 %_1690, 1
  %_1692 = shl i32 %7665, 1
  %_1693 = shl i32 %7665, 1
  %_1694 = shl i32 %7665, 1
  %_1695 = sub i32 %7665, 1
  %gen1696 = mul i32 %_1695, 1
  %_1697 = sub i32 0, %7665
  %gen1698 = add i32 %_1697, 1
  %7666 = and i32 %7665, 1, !dbg !5232
  %7667 = icmp ne i32 %7666, 0, !dbg !5232
  br label %originalBB1662

originalBB1702alteredBB:                          ; preds = %originalBB1702, %5571
  %7668 = load i8, i8* %41, align 1, !dbg !5234
  %7669 = trunc i8 %7668 to i1, !dbg !5234
  br label %originalBB1702

originalBB1706alteredBB:                          ; preds = %originalBB1706, %5590
  br label %originalBB1706

originalBB1710alteredBB:                          ; preds = %originalBB1710, %5607
  br label %originalBB1710

originalBB1714alteredBB:                          ; preds = %originalBB1714, %5624
  br label %originalBB1714

originalBB1718alteredBB:                          ; preds = %originalBB1718, %5641
  %7670 = load i8, i8* %35, align 1, !dbg !5240
  %7671 = trunc i8 %7670 to i1, !dbg !5240
  br label %originalBB1718

originalBB1722alteredBB:                          ; preds = %originalBB1722, %5660
  br label %originalBB1722

originalBB1726alteredBB:                          ; preds = %originalBB1726, %5677
  store i8 1, i8* %42, align 1, !dbg !5243
  %7672 = load i32, i32* %23, align 4, !dbg !5244
  %7673 = icmp eq i32 %7672, 2, !dbg !5244
  br label %originalBB1726

originalBB1730alteredBB:                          ; preds = %originalBB1730, %5696
  %7674 = load i8, i8* %36, align 1, !dbg !5244
  %7675 = trunc i8 %7674 to i1, !dbg !5244
  br label %originalBB1730

originalBB1734alteredBB:                          ; preds = %originalBB1734, %5715
  br label %originalBB1734

originalBB1738alteredBB:                          ; preds = %originalBB1738, %5732
  %7676 = load i64, i64* %29, align 8, !dbg !5248
  %7677 = load i64, i64* %20, align 8, !dbg !5248
  %7678 = icmp ult i64 %7676, %7677, !dbg !5248
  br label %originalBB1738

originalBB1742alteredBB:                          ; preds = %originalBB1742, %5752
  %7679 = load i8*, i8** %19, align 8, !dbg !5248
  %7680 = load i64, i64* %29, align 8, !dbg !5248
  %7681 = getelementptr inbounds i8, i8* %7679, i64 %7680, !dbg !5248
  store i8 39, i8* %7681, align 1, !dbg !5248
  br label %originalBB1742

originalBB1746alteredBB:                          ; preds = %originalBB1746, %5772
  %7682 = load i64, i64* %29, align 8, !dbg !5251
  %_1747 = sub i64 %7682, 1
  %gen1748 = mul i64 %_1747, 1
  %_1749 = shl i64 %7682, 1
  %_1750 = sub i64 %7682, 1
  %gen1751 = mul i64 %_1750, 1
  %7683 = add i64 %7682, 1, !dbg !5251
  store i64 %7683, i64* %29, align 8, !dbg !5251
  br label %originalBB1746

originalBB1755alteredBB:                          ; preds = %originalBB1755, %5791
  br label %originalBB1755

originalBB1759alteredBB:                          ; preds = %originalBB1759, %5808
  %7684 = load i64, i64* %29, align 8, !dbg !5252
  %7685 = load i64, i64* %20, align 8, !dbg !5252
  %7686 = icmp ult i64 %7684, %7685, !dbg !5252
  br label %originalBB1759

originalBB1763alteredBB:                          ; preds = %originalBB1763, %5828
  %7687 = load i8*, i8** %19, align 8, !dbg !5252
  %7688 = load i64, i64* %29, align 8, !dbg !5252
  %7689 = getelementptr inbounds i8, i8* %7687, i64 %7688, !dbg !5252
  store i8 36, i8* %7689, align 1, !dbg !5252
  br label %originalBB1763

originalBB1767alteredBB:                          ; preds = %originalBB1767, %5848
  %7690 = load i64, i64* %29, align 8, !dbg !5255
  %7691 = add i64 %7690, 1, !dbg !5255
  store i64 %7691, i64* %29, align 8, !dbg !5255
  br label %originalBB1767

originalBB1771alteredBB:                          ; preds = %originalBB1771, %5867
  br label %originalBB1771

originalBB1775alteredBB:                          ; preds = %originalBB1775, %5884
  %7692 = load i64, i64* %29, align 8, !dbg !5256
  %7693 = load i64, i64* %20, align 8, !dbg !5256
  %7694 = icmp ult i64 %7692, %7693, !dbg !5256
  br label %originalBB1775

originalBB1779alteredBB:                          ; preds = %originalBB1779, %5904
  %7695 = load i8*, i8** %19, align 8, !dbg !5256
  %7696 = load i64, i64* %29, align 8, !dbg !5256
  %7697 = getelementptr inbounds i8, i8* %7695, i64 %7696, !dbg !5256
  store i8 39, i8* %7697, align 1, !dbg !5256
  br label %originalBB1779

originalBB1783alteredBB:                          ; preds = %originalBB1783, %5924
  %7698 = load i64, i64* %29, align 8, !dbg !5259
  %_1784 = sub i64 %7698, 1
  %gen1785 = mul i64 %_1784, 1
  %_1786 = sub i64 0, %7698
  %gen1787 = add i64 %_1786, 1
  %_1788 = sub i64 %7698, 1
  %gen1789 = mul i64 %_1788, 1
  %_1790 = sub i64 %7698, 1
  %gen1791 = mul i64 %_1790, 1
  %7699 = add i64 %7698, 1, !dbg !5259
  store i64 %7699, i64* %29, align 8, !dbg !5259
  br label %originalBB1783

originalBB1795alteredBB:                          ; preds = %originalBB1795, %5943
  store i8 1, i8* %36, align 1, !dbg !5246
  br label %originalBB1795

originalBB1799alteredBB:                          ; preds = %originalBB1799, %5960
  br label %originalBB1799

originalBB1803alteredBB:                          ; preds = %originalBB1803, %5977
  %7700 = load i64, i64* %29, align 8, !dbg !5260
  %7701 = load i64, i64* %20, align 8, !dbg !5260
  %7702 = icmp ult i64 %7700, %7701, !dbg !5260
  br label %originalBB1803

originalBB1807alteredBB:                          ; preds = %originalBB1807, %5997
  %7703 = load i8*, i8** %19, align 8, !dbg !5260
  %7704 = load i64, i64* %29, align 8, !dbg !5260
  %7705 = getelementptr inbounds i8, i8* %7703, i64 %7704, !dbg !5260
  store i8 92, i8* %7705, align 1, !dbg !5260
  br label %originalBB1807

originalBB1811alteredBB:                          ; preds = %originalBB1811, %6017
  %7706 = load i64, i64* %29, align 8, !dbg !5263
  %_1812 = shl i64 %7706, 1
  %_1813 = sub i64 0, %7706
  %gen1814 = add i64 %_1813, 1
  %_1815 = shl i64 %7706, 1
  %_1816 = sub i64 0, %7706
  %gen1817 = add i64 %_1816, 1
  %7707 = add i64 %7706, 1, !dbg !5263
  store i64 %7707, i64* %29, align 8, !dbg !5263
  br label %originalBB1811

originalBB1821alteredBB:                          ; preds = %originalBB1821, %6036
  br label %originalBB1821

originalBB1825alteredBB:                          ; preds = %originalBB1825, %6053
  br label %originalBB1825

originalBB1829alteredBB:                          ; preds = %originalBB1829, %6070
  br label %originalBB1829

originalBB1833alteredBB:                          ; preds = %originalBB1833, %6087
  %7708 = load i8, i8* %36, align 1, !dbg !5267
  %7709 = trunc i8 %7708 to i1, !dbg !5267
  br label %originalBB1833

originalBB1837alteredBB:                          ; preds = %originalBB1837, %6106
  %7710 = load i8, i8* %42, align 1, !dbg !5267
  %7711 = trunc i8 %7710 to i1, !dbg !5267
  br label %originalBB1837

originalBB1841alteredBB:                          ; preds = %originalBB1841, %6125
  br label %originalBB1841

originalBB1845alteredBB:                          ; preds = %originalBB1845, %6142
  %7712 = load i64, i64* %29, align 8, !dbg !5273
  %7713 = load i64, i64* %20, align 8, !dbg !5273
  %7714 = icmp ult i64 %7712, %7713, !dbg !5273
  br label %originalBB1845

originalBB1849alteredBB:                          ; preds = %originalBB1849, %6162
  %7715 = load i8*, i8** %19, align 8, !dbg !5273
  %7716 = load i64, i64* %29, align 8, !dbg !5273
  %7717 = getelementptr inbounds i8, i8* %7715, i64 %7716, !dbg !5273
  store i8 39, i8* %7717, align 1, !dbg !5273
  br label %originalBB1849

originalBB1853alteredBB:                          ; preds = %originalBB1853, %6182
  %7718 = load i64, i64* %29, align 8, !dbg !5276
  %_1854 = shl i64 %7718, 1
  %_1855 = sub i64 %7718, 1
  %gen1856 = mul i64 %_1855, 1
  %_1857 = shl i64 %7718, 1
  %_1858 = shl i64 %7718, 1
  %_1859 = sub i64 %7718, 1
  %gen1860 = mul i64 %_1859, 1
  %7719 = add i64 %7718, 1, !dbg !5276
  store i64 %7719, i64* %29, align 8, !dbg !5276
  br label %originalBB1853

originalBB1864alteredBB:                          ; preds = %originalBB1864, %6201
  br label %originalBB1864

originalBB1868alteredBB:                          ; preds = %originalBB1868, %6218
  %7720 = load i64, i64* %29, align 8, !dbg !5277
  %7721 = load i64, i64* %20, align 8, !dbg !5277
  %7722 = icmp ult i64 %7720, %7721, !dbg !5277
  br label %originalBB1868

originalBB1872alteredBB:                          ; preds = %originalBB1872, %6238
  %7723 = load i8*, i8** %19, align 8, !dbg !5277
  %7724 = load i64, i64* %29, align 8, !dbg !5277
  %7725 = getelementptr inbounds i8, i8* %7723, i64 %7724, !dbg !5277
  store i8 39, i8* %7725, align 1, !dbg !5277
  br label %originalBB1872

originalBB1876alteredBB:                          ; preds = %originalBB1876, %6258
  %7726 = load i64, i64* %29, align 8, !dbg !5280
  %_1877 = sub i64 %7726, 1
  %gen1878 = mul i64 %_1877, 1
  %7727 = add i64 %7726, 1, !dbg !5280
  store i64 %7727, i64* %29, align 8, !dbg !5280
  br label %originalBB1876

originalBB1882alteredBB:                          ; preds = %originalBB1882, %6277
  store i8 0, i8* %36, align 1, !dbg !5271
  br label %originalBB1882

originalBB1886alteredBB:                          ; preds = %originalBB1886, %6294
  br label %originalBB1886

originalBB1890alteredBB:                          ; preds = %originalBB1890, %6311
  br label %originalBB1890

originalBB1894alteredBB:                          ; preds = %originalBB1894, %6328
  %7728 = load i64, i64* %29, align 8, !dbg !5282
  %7729 = load i64, i64* %20, align 8, !dbg !5282
  %7730 = icmp ult i64 %7728, %7729, !dbg !5282
  br label %originalBB1894

originalBB1898alteredBB:                          ; preds = %originalBB1898, %6348
  %7731 = load i8, i8* %39, align 1, !dbg !5282
  %7732 = load i8*, i8** %19, align 8, !dbg !5282
  %7733 = load i64, i64* %29, align 8, !dbg !5282
  %7734 = getelementptr inbounds i8, i8* %7732, i64 %7733, !dbg !5282
  store i8 %7731, i8* %7734, align 1, !dbg !5282
  br label %originalBB1898

originalBB1902alteredBB:                          ; preds = %originalBB1902, %6369
  %7735 = load i64, i64* %29, align 8, !dbg !5285
  %_1903 = sub i64 0, %7735
  %gen1904 = add i64 %_1903, 1
  %_1905 = sub i64 %7735, 1
  %gen1906 = mul i64 %_1905, 1
  %_1907 = sub i64 %7735, 1
  %gen1908 = mul i64 %_1907, 1
  %_1909 = shl i64 %7735, 1
  %_1910 = sub i64 0, %7735
  %gen1911 = add i64 %_1910, 1
  %7736 = add i64 %7735, 1, !dbg !5285
  store i64 %7736, i64* %29, align 8, !dbg !5285
  br label %originalBB1902

originalBB1915alteredBB:                          ; preds = %originalBB1915, %6388
  %7737 = load i8, i8* %43, align 1, !dbg !5286
  %7738 = trunc i8 %7737 to i1, !dbg !5286
  br label %originalBB1915

originalBB1919alteredBB:                          ; preds = %originalBB1919, %6407
  store i8 0, i8* %38, align 1, !dbg !5289
  br label %originalBB1919

originalBB1923alteredBB:                          ; preds = %originalBB1923, %6424
  br label %originalBB1923

originalBB1927alteredBB:                          ; preds = %originalBB1927, %6441
  %7739 = load i64, i64* %28, align 8, !dbg !5292
  %_1928 = sub i64 %7739, 1
  %gen1929 = mul i64 %_1928, 1
  %_1930 = sub i64 0, %7739
  %gen1931 = add i64 %_1930, 1
  %_1932 = sub i64 %7739, 1
  %gen1933 = mul i64 %_1932, 1
  %7740 = add i64 %7739, 1, !dbg !5292
  store i64 %7740, i64* %28, align 8, !dbg !5292
  br label %originalBB1927

originalBB1937alteredBB:                          ; preds = %originalBB1937, %6460
  %7741 = load i64, i64* %29, align 8, !dbg !5296
  %7742 = icmp eq i64 %7741, 0, !dbg !5298
  br label %originalBB1937

originalBB1941alteredBB:                          ; preds = %originalBB1941, %6479
  %7743 = load i32, i32* %23, align 4, !dbg !5300
  %7744 = icmp eq i32 %7743, 2, !dbg !5301
  br label %originalBB1941

originalBB1945alteredBB:                          ; preds = %originalBB1945, %6498
  %7745 = load i8, i8* %35, align 1, !dbg !5303
  %7746 = trunc i8 %7745 to i1, !dbg !5303
  br label %originalBB1945

originalBB1949alteredBB:                          ; preds = %originalBB1949, %6517
  br label %originalBB1949

originalBB1953alteredBB:                          ; preds = %originalBB1953, %6534
  %7747 = load i32, i32* %23, align 4, !dbg !5306
  %7748 = icmp eq i32 %7747, 2, !dbg !5308
  br label %originalBB1953

originalBB1957alteredBB:                          ; preds = %originalBB1957, %6553
  %7749 = load i8, i8* %35, align 1, !dbg !5310
  %7750 = trunc i8 %7749 to i1, !dbg !5310
  br label %originalBB1957

originalBB1961alteredBB:                          ; preds = %originalBB1961, %6572
  %7751 = load i8, i8* %37, align 1, !dbg !5312
  %7752 = trunc i8 %7751 to i1, !dbg !5312
  br label %originalBB1961

originalBB1965alteredBB:                          ; preds = %originalBB1965, %6591
  %7753 = load i8, i8* %38, align 1, !dbg !5314
  %7754 = trunc i8 %7753 to i1, !dbg !5314
  br label %originalBB1965

originalBB1969alteredBB:                          ; preds = %originalBB1969, %6610
  %7755 = load i8*, i8** %19, align 8, !dbg !5318
  %7756 = load i64, i64* %30, align 8, !dbg !5319
  %7757 = load i8*, i8** %21, align 8, !dbg !5320
  %7758 = load i64, i64* %22, align 8, !dbg !5321
  %7759 = load i32, i32* %24, align 4, !dbg !5322
  %7760 = load i32*, i32** %25, align 8, !dbg !5323
  %7761 = load i8*, i8** %26, align 8, !dbg !5324
  %7762 = load i8*, i8** %27, align 8, !dbg !5325
  %7763 = call i64 @quotearg_buffer_restyled(i8* %7755, i64 %7756, i8* %7757, i64 %7758, i32 5, i32 %7759, i32* %7760, i8* %7761, i8* %7762), !dbg !5326
  store i64 %7763, i64* %18, align 8, !dbg !5327
  br label %originalBB1969

originalBB1973alteredBB:                          ; preds = %originalBB1973, %6636
  %7764 = load i64, i64* %20, align 8, !dbg !5328
  %7765 = icmp ne i64 %7764, 0, !dbg !5328
  br label %originalBB1973

originalBB1977alteredBB:                          ; preds = %originalBB1977, %6655
  %7766 = load i64, i64* %30, align 8, !dbg !5331
  %7767 = icmp ne i64 %7766, 0, !dbg !5331
  br label %originalBB1977

originalBB1981alteredBB:                          ; preds = %originalBB1981, %6674
  %7768 = load i64, i64* %30, align 8, !dbg !5333
  store i64 %7768, i64* %20, align 8, !dbg !5335
  store i64 0, i64* %29, align 8, !dbg !5336
  br label %originalBB1981

originalBB1985alteredBB:                          ; preds = %originalBB1985, %6692
  br label %originalBB1985

originalBB1989alteredBB:                          ; preds = %originalBB1989, %6709
  br label %originalBB1989

originalBB1993alteredBB:                          ; preds = %originalBB1993, %6726
  %7769 = load i8*, i8** %31, align 8, !dbg !5339
  %7770 = icmp ne i8* %7769, null, !dbg !5339
  br label %originalBB1993

originalBB1997alteredBB:                          ; preds = %originalBB1997, %6745
  %7771 = load i8, i8* %35, align 1, !dbg !5342
  %7772 = trunc i8 %7771 to i1, !dbg !5342
  br label %originalBB1997

originalBB2001alteredBB:                          ; preds = %originalBB2001, %6764
  br label %originalBB2001

originalBB2005alteredBB:                          ; preds = %originalBB2005, %6781
  %7773 = load i8*, i8** %31, align 8, !dbg !5345
  %7774 = load i8, i8* %7773, align 1, !dbg !5348
  %7775 = icmp ne i8 %7774, 0, !dbg !5349
  br label %originalBB2005

originalBB2009alteredBB:                          ; preds = %originalBB2009, %6801
  br label %originalBB2009

originalBB2013alteredBB:                          ; preds = %originalBB2013, %6818
  %7776 = load i64, i64* %29, align 8, !dbg !5351
  %7777 = load i64, i64* %20, align 8, !dbg !5351
  %7778 = icmp ult i64 %7776, %7777, !dbg !5351
  br label %originalBB2013

originalBB2017alteredBB:                          ; preds = %originalBB2017, %6838
  %7779 = load i8*, i8** %31, align 8, !dbg !5351
  %7780 = load i8, i8* %7779, align 1, !dbg !5351
  %7781 = load i8*, i8** %19, align 8, !dbg !5351
  %7782 = load i64, i64* %29, align 8, !dbg !5351
  %7783 = getelementptr inbounds i8, i8* %7781, i64 %7782, !dbg !5351
  store i8 %7780, i8* %7783, align 1, !dbg !5351
  br label %originalBB2017

originalBB2021alteredBB:                          ; preds = %originalBB2021, %6860
  %7784 = load i64, i64* %29, align 8, !dbg !5354
  %_2022 = sub i64 %7784, 1
  %gen2023 = mul i64 %_2022, 1
  %_2024 = sub i64 0, %7784
  %gen2025 = add i64 %_2024, 1
  %_2026 = sub i64 %7784, 1
  %gen2027 = mul i64 %_2026, 1
  %7785 = add i64 %7784, 1, !dbg !5354
  store i64 %7785, i64* %29, align 8, !dbg !5354
  br label %originalBB2021

originalBB2031alteredBB:                          ; preds = %originalBB2031, %6879
  br label %originalBB2031

originalBB2035alteredBB:                          ; preds = %originalBB2035, %6896
  %7786 = load i8*, i8** %31, align 8, !dbg !5355
  %7787 = getelementptr inbounds i8, i8* %7786, i32 1, !dbg !5355
  store i8* %7787, i8** %31, align 8, !dbg !5355
  br label %originalBB2035

originalBB2039alteredBB:                          ; preds = %originalBB2039, %6915
  br label %originalBB2039

originalBB2043alteredBB:                          ; preds = %originalBB2043, %6932
  %7788 = load i64, i64* %29, align 8, !dbg !5359
  %7789 = load i64, i64* %20, align 8, !dbg !5361
  %7790 = icmp ult i64 %7788, %7789, !dbg !5362
  br label %originalBB2043

originalBB2047alteredBB:                          ; preds = %originalBB2047, %6952
  %7791 = load i8*, i8** %19, align 8, !dbg !5364
  %7792 = load i64, i64* %29, align 8, !dbg !5365
  %7793 = getelementptr inbounds i8, i8* %7791, i64 %7792, !dbg !5364
  store i8 0, i8* %7793, align 1, !dbg !5366
  br label %originalBB2047

originalBB2051alteredBB:                          ; preds = %originalBB2051, %6972
  %7794 = load i64, i64* %29, align 8, !dbg !5367
  store i64 %7794, i64* %18, align 8, !dbg !5368
  br label %originalBB2051

originalBB2055alteredBB:                          ; preds = %originalBB2055, %6990
  %7795 = load i32, i32* %23, align 4, !dbg !5371
  %7796 = icmp eq i32 %7795, 2, !dbg !5373
  br label %originalBB2055

originalBB2059alteredBB:                          ; preds = %originalBB2059, %7009
  %7797 = load i8, i8* %33, align 1, !dbg !5375
  %7798 = trunc i8 %7797 to i1, !dbg !5375
  br label %originalBB2059

originalBB2063alteredBB:                          ; preds = %originalBB2063, %7028
  store i32 4, i32* %23, align 4, !dbg !5377
  br label %originalBB2063

originalBB2067alteredBB:                          ; preds = %originalBB2067, %7045
  %7799 = load i8*, i8** %19, align 8, !dbg !5379
  %7800 = load i64, i64* %20, align 8, !dbg !5380
  %7801 = load i8*, i8** %21, align 8, !dbg !5381
  %7802 = load i64, i64* %22, align 8, !dbg !5382
  %7803 = load i32, i32* %23, align 4, !dbg !5383
  %7804 = load i32, i32* %24, align 4, !dbg !5384
  %_2068 = shl i32 %7804, -3
  %_2069 = sub i32 0, %7804
  %gen2070 = add i32 %_2069, -3
  %_2071 = sub i32 %7804, -3
  %gen2072 = mul i32 %_2071, -3
  %_2073 = sub i32 %7804, -3
  %gen2074 = mul i32 %_2073, -3
  %_2075 = shl i32 %7804, -3
  %_2076 = sub i32 %7804, -3
  %gen2077 = mul i32 %_2076, -3
  %7805 = and i32 %7804, -3, !dbg !5385
  %7806 = load i8*, i8** %26, align 8, !dbg !5386
  %7807 = load i8*, i8** %27, align 8, !dbg !5387
  %7808 = call i64 @quotearg_buffer_restyled(i8* %7799, i64 %7800, i8* %7801, i64 %7802, i32 %7803, i32 %7805, i32* null, i8* %7806, i8* %7807), !dbg !5388
  store i64 %7808, i64* %18, align 8, !dbg !5389
  br label %originalBB2067

originalBB2081alteredBB:                          ; preds = %originalBB2081, %7072
  %7809 = load i64, i64* %18, align 8, !dbg !5390
  br label %originalBB2081
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !5478 {
  %3 = load i32, i32* @x.65
  %4 = load i32, i32* @y.66
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !5481, metadata !DIExpression()), !dbg !5482
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5483, metadata !DIExpression()), !dbg !5484
  call void @llvm.dbg.declare(metadata i8** %14, metadata !5485, metadata !DIExpression()), !dbg !5486
  %16 = load i8*, i8** %12, align 8, !dbg !5487
  %17 = call i8* @gettext(i8* %16) #10, !dbg !5487
  store i8* %17, i8** %14, align 8, !dbg !5486
  call void @llvm.dbg.declare(metadata i8** %15, metadata !5488, metadata !DIExpression()), !dbg !5489
  %18 = load i8*, i8** %14, align 8, !dbg !5490
  %19 = load i8*, i8** %12, align 8, !dbg !5492
  %20 = icmp ne i8* %18, %19, !dbg !5493
  %21 = load i32, i32* @x.65
  %22 = load i32, i32* @y.66
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !5494

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.65
  %31 = load i32, i32* @y.66
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !5495
  store i8* %38, i8** %11, align 8, !dbg !5496
  %39 = load i32, i32* @x.65
  %40 = load i32, i32* @y.66
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %157, !dbg !5496

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.65
  %49 = load i32, i32* @y.66
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !5497
  store i8* %56, i8** %15, align 8, !dbg !5498
  %57 = load i8*, i8** %15, align 8, !dbg !5499
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.123, i64 0, i64 0)) #13, !dbg !5499
  %59 = icmp eq i32 %58, 0, !dbg !5499
  %60 = load i32, i32* @x.65
  %61 = load i32, i32* @y.66
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %92, !dbg !5501

68:                                               ; preds = %originalBBpart28
  %69 = load i32, i32* @x.65
  %70 = load i32, i32* @y.66
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %77 = load i8*, i8** %12, align 8, !dbg !5502
  %78 = getelementptr inbounds i8, i8* %77, i64 0, !dbg !5502
  %79 = load i8, i8* %78, align 1, !dbg !5502
  %80 = sext i8 %79 to i32, !dbg !5502
  %81 = icmp eq i32 %80, 96, !dbg !5503
  %82 = zext i1 %81 to i64, !dbg !5502
  %83 = select i1 %81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.124, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.125, i64 0, i64 0), !dbg !5502
  store i8* %83, i8** %11, align 8, !dbg !5504
  %84 = load i32, i32* @x.65
  %85 = load i32, i32* @y.66
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %157, !dbg !5504

92:                                               ; preds = %originalBBpart28
  %93 = load i32, i32* @x.65
  %94 = load i32, i32* @y.66
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %92, %originalBB14alteredBB
  %101 = load i8*, i8** %15, align 8, !dbg !5505
  %102 = call i32 @c_strcasecmp(i8* %101, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.126, i64 0, i64 0)) #13, !dbg !5505
  %103 = icmp eq i32 %102, 0, !dbg !5505
  %104 = load i32, i32* @x.65
  %105 = load i32, i32* @y.66
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %103, label %112, label %136, !dbg !5507

112:                                              ; preds = %originalBBpart216
  %113 = load i32, i32* @x.65
  %114 = load i32, i32* @y.66
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %12, align 8, !dbg !5508
  %122 = getelementptr inbounds i8, i8* %121, i64 0, !dbg !5508
  %123 = load i8, i8* %122, align 1, !dbg !5508
  %124 = sext i8 %123 to i32, !dbg !5508
  %125 = icmp eq i32 %124, 96, !dbg !5509
  %126 = zext i1 %125 to i64, !dbg !5508
  %127 = select i1 %125, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.127, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.128, i64 0, i64 0), !dbg !5508
  store i8* %127, i8** %11, align 8, !dbg !5510
  %128 = load i32, i32* @x.65
  %129 = load i32, i32* @y.66
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %157, !dbg !5510

136:                                              ; preds = %originalBBpart216
  %137 = load i32, i32* @x.65
  %138 = load i32, i32* @y.66
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  %145 = load i32, i32* %13, align 4, !dbg !5511
  %146 = icmp eq i32 %145, 9, !dbg !5512
  %147 = zext i1 %146 to i64, !dbg !5511
  %148 = select i1 %146, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.120, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), !dbg !5511
  store i8* %148, i8** %11, align 8, !dbg !5513
  %149 = load i32, i32* @x.65
  %150 = load i32, i32* @y.66
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %157, !dbg !5513

157:                                              ; preds = %originalBBpart224, %originalBBpart220, %originalBBpart212, %originalBBpart24
  %158 = load i32, i32* @x.65
  %159 = load i32, i32* @y.66
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %157, %originalBB26alteredBB
  %166 = load i8*, i8** %11, align 8, !dbg !5514
  %167 = load i32, i32* @x.65
  %168 = load i32, i32* @y.66
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %166, !dbg !5514

originalBBalteredBB:                              ; preds = %originalBB, %2
  %175 = alloca i8*, align 8
  %176 = alloca i8*, align 8
  %177 = alloca i32, align 4
  %178 = alloca i8*, align 8
  %179 = alloca i8*, align 8
  store i8* %0, i8** %176, align 8
  call void @llvm.dbg.declare(metadata i8** %176, metadata !5515, metadata !DIExpression()), !dbg !5482
  store i32 %1, i32* %177, align 4
  call void @llvm.dbg.declare(metadata i32* %177, metadata !5547, metadata !DIExpression()), !dbg !5484
  call void @llvm.dbg.declare(metadata i8** %178, metadata !5548, metadata !DIExpression()), !dbg !5486
  %180 = load i8*, i8** %176, align 8, !dbg !5487
  %181 = call i8* @gettext(i8* %180) #10, !dbg !5487
  store i8* %181, i8** %178, align 8, !dbg !5486
  call void @llvm.dbg.declare(metadata i8** %179, metadata !5549, metadata !DIExpression()), !dbg !5489
  %182 = load i8*, i8** %178, align 8, !dbg !5490
  %183 = load i8*, i8** %176, align 8, !dbg !5492
  %184 = icmp ne i8* %182, %183, !dbg !5493
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %185 = load i8*, i8** %14, align 8, !dbg !5495
  store i8* %185, i8** %11, align 8, !dbg !5496
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %186 = call i8* @locale_charset(), !dbg !5497
  store i8* %186, i8** %15, align 8, !dbg !5498
  %187 = load i8*, i8** %15, align 8, !dbg !5499
  %188 = call i32 @c_strcasecmp(i8* %187, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.123, i64 0, i64 0)) #13, !dbg !5499
  %189 = icmp eq i32 %188, 0, !dbg !5499
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  %190 = load i8*, i8** %12, align 8, !dbg !5502
  %191 = getelementptr inbounds i8, i8* %190, i64 0, !dbg !5502
  %192 = load i8, i8* %191, align 1, !dbg !5502
  %193 = sext i8 %192 to i32, !dbg !5502
  %194 = icmp eq i32 %193, 96, !dbg !5503
  %195 = zext i1 %194 to i64, !dbg !5502
  %196 = select i1 %194, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.124, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.125, i64 0, i64 0), !dbg !5502
  store i8* %196, i8** %11, align 8, !dbg !5504
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %92
  %197 = load i8*, i8** %15, align 8, !dbg !5505
  %198 = call i32 @c_strcasecmp(i8* %197, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.126, i64 0, i64 0)) #13, !dbg !5505
  %199 = icmp eq i32 %198, 0, !dbg !5505
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %200 = load i8*, i8** %12, align 8, !dbg !5508
  %201 = getelementptr inbounds i8, i8* %200, i64 0, !dbg !5508
  %202 = load i8, i8* %201, align 1, !dbg !5508
  %203 = sext i8 %202 to i32, !dbg !5508
  %204 = icmp eq i32 %203, 96, !dbg !5509
  %205 = zext i1 %204 to i64, !dbg !5508
  %206 = select i1 %204, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.127, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.128, i64 0, i64 0), !dbg !5508
  store i8* %206, i8** %11, align 8, !dbg !5510
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  %207 = load i32, i32* %13, align 4, !dbg !5511
  %208 = icmp eq i32 %207, 9, !dbg !5512
  %209 = zext i1 %208 to i64, !dbg !5511
  %210 = select i1 %208, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.120, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), !dbg !5511
  store i8* %210, i8** %11, align 8, !dbg !5513
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %157
  %211 = load i8*, i8** %11, align 8, !dbg !5514
  br label %originalBB26
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !5550 {
  %3 = load i32, i32* @x.67
  %4 = load i32, i32* @y.68
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !5553, metadata !DIExpression()), !dbg !5554
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !5555, metadata !DIExpression()), !dbg !5556
  %13 = load i8*, i8** %11, align 8, !dbg !5557
  %14 = load i8, i8* %12, align 1, !dbg !5558
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !5559
  %16 = load i32, i32* @x.67
  %17 = load i32, i32* @y.68
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !5560

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !5561, metadata !DIExpression()), !dbg !5554
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !5593, metadata !DIExpression()), !dbg !5556
  %26 = load i8*, i8** %24, align 8, !dbg !5557
  %27 = load i8, i8* %25, align 1, !dbg !5558
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !5559
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !5594 {
  %2 = load i32, i32* @x.69
  %3 = load i32, i32* @y.70
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !5595, metadata !DIExpression()), !dbg !5596
  %11 = load i8*, i8** %10, align 8, !dbg !5597
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !5598
  %13 = load i32, i32* @x.69
  %14 = load i32, i32* @y.70
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !5599

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !5600, metadata !DIExpression()), !dbg !5596
  %22 = load i8*, i8** %21, align 8, !dbg !5597
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !5598
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_style_colon(i32, i32, i8*) #4 !dbg !5632 {
  %4 = load i32, i32* @x.71
  %5 = load i32, i32* @y.72
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca %struct.quoting_options, align 8
  %16 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !5635, metadata !DIExpression()), !dbg !5636
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5637, metadata !DIExpression()), !dbg !5638
  store i8* %2, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !5639, metadata !DIExpression()), !dbg !5640
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !5641, metadata !DIExpression()), !dbg !5642
  %17 = load i32, i32* %13, align 4, !dbg !5643
  call void @quoting_options_from_style(%struct.quoting_options* sret %16, i32 %17), !dbg !5644
  %18 = bitcast %struct.quoting_options* %15 to i8*, !dbg !5644
  %19 = bitcast %struct.quoting_options* %16 to i8*, !dbg !5644
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 56, i1 false), !dbg !5644
  %20 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext 58, i32 1), !dbg !5645
  %21 = load i32, i32* %12, align 4, !dbg !5646
  %22 = load i8*, i8** %14, align 8, !dbg !5647
  %23 = call i8* @quotearg_n_options(i32 %21, i8* %22, i64 -1, %struct.quoting_options* %15), !dbg !5648
  %24 = load i32, i32* @x.71
  %25 = load i32, i32* @y.72
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %23, !dbg !5649

originalBBalteredBB:                              ; preds = %originalBB, %3
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i8*, align 8
  %35 = alloca %struct.quoting_options, align 8
  %36 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %32, align 4
  call void @llvm.dbg.declare(metadata i32* %32, metadata !5650, metadata !DIExpression()), !dbg !5636
  store i32 %1, i32* %33, align 4
  call void @llvm.dbg.declare(metadata i32* %33, metadata !5682, metadata !DIExpression()), !dbg !5638
  store i8* %2, i8** %34, align 8
  call void @llvm.dbg.declare(metadata i8** %34, metadata !5683, metadata !DIExpression()), !dbg !5640
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %35, metadata !5684, metadata !DIExpression()), !dbg !5642
  %37 = load i32, i32* %33, align 4, !dbg !5643
  call void @quoting_options_from_style(%struct.quoting_options* sret %36, i32 %37), !dbg !5644
  %38 = bitcast %struct.quoting_options* %35 to i8*, !dbg !5644
  %39 = bitcast %struct.quoting_options* %36 to i8*, !dbg !5644
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 56, i1 false), !dbg !5644
  %40 = call i32 @set_char_quoting(%struct.quoting_options* %35, i8 signext 58, i32 1), !dbg !5645
  %41 = load i32, i32* %32, align 4, !dbg !5646
  %42 = load i8*, i8** %34, align 8, !dbg !5647
  %43 = call i8* @quotearg_n_options(i32 %41, i8* %42, i64 -1, %struct.quoting_options* %35), !dbg !5648
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret, i32) #4 !dbg !5685 {
  %3 = load i32, i32* @x.73
  %4 = load i32, i32* @y.74
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  store i32 %1, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !5688, metadata !DIExpression()), !dbg !5689
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %0, metadata !5690, metadata !DIExpression()), !dbg !5691
  %12 = bitcast %struct.quoting_options* %0 to i8*, !dbg !5691
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 56, i1 false), !dbg !5691
  %13 = load i32, i32* %11, align 4, !dbg !5692
  %14 = icmp eq i32 %13, 10, !dbg !5694
  %15 = load i32, i32* @x.73
  %16 = load i32, i32* @y.74
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %40, !dbg !5695

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.73
  %25 = load i32, i32* @y.74
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  call void @abort() #12, !dbg !5696
  %32 = load i32, i32* @x.73
  %33 = load i32, i32* @y.74
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !5696

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.73
  %42 = load i32, i32* @y.74
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = load i32, i32* %11, align 4, !dbg !5697
  %50 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !5698
  store i32 %49, i32* %50, align 8, !dbg !5699
  %51 = load i32, i32* @x.73
  %52 = load i32, i32* @y.74
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !5700

originalBBalteredBB:                              ; preds = %originalBB, %2
  %59 = alloca i32, align 4
  store i32 %1, i32* %59, align 4
  call void @llvm.dbg.declare(metadata i32* %59, metadata !5701, metadata !DIExpression()), !dbg !5689
  call void @llvm.dbg.declare(metadata !4, metadata !5735, metadata !DIExpression()), !dbg !5691
  %60 = bitcast %struct.quoting_options* %0 to i8*, !dbg !5691
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 56, i1 false), !dbg !5691
  %61 = load i32, i32* %59, align 4, !dbg !5692
  %62 = icmp eq i32 %61, 10, !dbg !5694
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  call void @abort() #12, !dbg !5696
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %63 = load i32, i32* %11, align 4, !dbg !5697
  %64 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !5698
  store i32 %63, i32* %64, align 8, !dbg !5699
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !5736 {
  %4 = load i32, i32* @x.75
  %5 = load i32, i32* @y.76
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !5739, metadata !DIExpression()), !dbg !5740
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !5741, metadata !DIExpression()), !dbg !5742
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !5743, metadata !DIExpression()), !dbg !5744
  %15 = load i32, i32* %12, align 4, !dbg !5745
  %16 = load i8*, i8** %13, align 8, !dbg !5746
  %17 = load i64, i64* %14, align 8, !dbg !5747
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !5748
  %19 = load i32, i32* @x.75
  %20 = load i32, i32* @y.76
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !5749

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !5750, metadata !DIExpression()), !dbg !5740
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !5782, metadata !DIExpression()), !dbg !5742
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !5783, metadata !DIExpression()), !dbg !5744
  %30 = load i32, i32* %27, align 4, !dbg !5745
  %31 = load i8*, i8** %28, align 8, !dbg !5746
  %32 = load i64, i64* %29, align 8, !dbg !5747
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !5748
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !5784 {
  %3 = load i32, i32* @x.77
  %4 = load i32, i32* @y.78
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !5787, metadata !DIExpression()), !dbg !5788
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !5789, metadata !DIExpression()), !dbg !5790
  %13 = load i32, i32* %11, align 4, !dbg !5791
  %14 = load i8*, i8** %12, align 8, !dbg !5792
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !5793
  %16 = load i32, i32* @x.77
  %17 = load i32, i32* @y.78
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !5794

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !5795, metadata !DIExpression()), !dbg !5788
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !5827, metadata !DIExpression()), !dbg !5790
  %26 = load i32, i32* %24, align 4, !dbg !5791
  %27 = load i8*, i8** %25, align 8, !dbg !5792
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !5793
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !5828 {
  %2 = load i32, i32* @x.79
  %3 = load i32, i32* @y.80
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !5831, metadata !DIExpression()), !dbg !5832
  %11 = load i8*, i8** %10, align 8, !dbg !5833
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !5834
  %13 = load i32, i32* @x.79
  %14 = load i32, i32* @y.80
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !5835

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !5836, metadata !DIExpression()), !dbg !5832
  %22 = load i8*, i8** %21, align 8, !dbg !5833
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !5834
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !5868 {
  %4 = load i32, i32* @x.81
  %5 = load i32, i32* @y.82
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !5872, metadata !DIExpression()), !dbg !5873
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !5874, metadata !DIExpression()), !dbg !5875
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !5876, metadata !DIExpression()), !dbg !5877
  %15 = load i32, i32* %12, align 4, !dbg !5878
  %16 = load i8*, i8** %13, align 8, !dbg !5879
  %17 = load i64, i64* %14, align 8, !dbg !5880
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !5881
  %19 = load i32, i32* @x.81
  %20 = load i32, i32* @y.82
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !5882

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !5883, metadata !DIExpression()), !dbg !5873
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !5886, metadata !DIExpression()), !dbg !5875
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !5887, metadata !DIExpression()), !dbg !5877
  %30 = load i32, i32* %27, align 4, !dbg !5878
  %31 = load i8*, i8** %28, align 8, !dbg !5879
  %32 = load i64, i64* %29, align 8, !dbg !5880
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !5881
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !5888 {
  %4 = load i32, i32* @x.83
  %5 = load i32, i32* @y.84
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5889, metadata !DIExpression()), !dbg !5890
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !5891, metadata !DIExpression()), !dbg !5892
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !5893, metadata !DIExpression()), !dbg !5894
  call void @llvm.dbg.declare(metadata i8** %16, metadata !5895, metadata !DIExpression()), !dbg !5896
  %18 = load i32, i32* %13, align 4, !dbg !5897
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !5898
  store i8* %19, i8** %16, align 8, !dbg !5896
  %20 = load i8*, i8** %16, align 8, !dbg !5899
  %21 = icmp eq i8* %20, null, !dbg !5901
  %22 = load i32, i32* @x.83
  %23 = load i32, i32* @y.84
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %85, !dbg !5902

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.83
  %32 = load i32, i32* @y.84
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load i64, i64* %15, align 8, !dbg !5903
  %40 = icmp ugt i64 %39, 0, !dbg !5906
  %41 = load i32, i32* @x.83
  %42 = load i32, i32* @y.84
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %40, label %49, label %68, !dbg !5907

49:                                               ; preds = %originalBBpart24
  %50 = load i32, i32* @x.83
  %51 = load i32, i32* @y.84
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load i8*, i8** %14, align 8, !dbg !5908
  %59 = getelementptr inbounds i8, i8* %58, i64 0, !dbg !5908
  store i8 0, i8* %59, align 1, !dbg !5909
  %60 = load i32, i32* @x.83
  %61 = load i32, i32* @y.84
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68, !dbg !5908

68:                                               ; preds = %originalBBpart28, %originalBBpart24
  %69 = load i32, i32* @x.83
  %70 = load i32, i32* @y.84
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  store i32 22, i32* %12, align 4, !dbg !5910
  %77 = load i32, i32* @x.83
  %78 = load i32, i32* @y.84
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %189, !dbg !5910

85:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !5911, metadata !DIExpression()), !dbg !5913
  %86 = load i32, i32* @x.83
  %87 = load i32, i32* @y.84
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %85, %originalBB14alteredBB
  %94 = load i8*, i8** %16, align 8, !dbg !5914
  %95 = call i64 @strlen(i8* %94) #13, !dbg !5915
  store i64 %95, i64* %17, align 8, !dbg !5913
  %96 = load i64, i64* %17, align 8, !dbg !5916
  %97 = load i64, i64* %15, align 8, !dbg !5918
  %98 = icmp ult i64 %96, %97, !dbg !5919
  %99 = load i32, i32* @x.83
  %100 = load i32, i32* @y.84
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %128, !dbg !5920

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.83
  %109 = load i32, i32* @y.84
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = load i8*, i8** %14, align 8, !dbg !5921
  %117 = load i8*, i8** %16, align 8, !dbg !5923
  %118 = load i64, i64* %17, align 8, !dbg !5924
  %119 = add i64 %118, 1, !dbg !5925
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %117, i64 %119, i1 false), !dbg !5926
  store i32 0, i32* %12, align 4, !dbg !5927
  %120 = load i32, i32* @x.83
  %121 = load i32, i32* @y.84
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart221, label %originalBB18alteredBB

originalBBpart221:                                ; preds = %originalBB18
  br label %189, !dbg !5927

128:                                              ; preds = %originalBBpart216
  %129 = load i32, i32* @x.83
  %130 = load i32, i32* @y.84
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %128, %originalBB23alteredBB
  %137 = load i64, i64* %15, align 8, !dbg !5928
  %138 = icmp ugt i64 %137, 0, !dbg !5931
  %139 = load i32, i32* @x.83
  %140 = load i32, i32* @y.84
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br i1 %138, label %147, label %172, !dbg !5932

147:                                              ; preds = %originalBBpart225
  %148 = load i32, i32* @x.83
  %149 = load i32, i32* @y.84
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %147, %originalBB27alteredBB
  %156 = load i8*, i8** %14, align 8, !dbg !5933
  %157 = load i8*, i8** %16, align 8, !dbg !5935
  %158 = load i64, i64* %15, align 8, !dbg !5936
  %159 = sub i64 %158, 1, !dbg !5937
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %157, i64 %159, i1 false), !dbg !5938
  %160 = load i8*, i8** %14, align 8, !dbg !5939
  %161 = load i64, i64* %15, align 8, !dbg !5940
  %162 = sub i64 %161, 1, !dbg !5941
  %163 = getelementptr inbounds i8, i8* %160, i64 %162, !dbg !5939
  store i8 0, i8* %163, align 1, !dbg !5942
  %164 = load i32, i32* @x.83
  %165 = load i32, i32* @y.84
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBBpart246, label %originalBB27alteredBB

originalBBpart246:                                ; preds = %originalBB27
  br label %172, !dbg !5943

172:                                              ; preds = %originalBBpart246, %originalBBpart225
  %173 = load i32, i32* @x.83
  %174 = load i32, i32* @y.84
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %172, %originalBB48alteredBB
  store i32 34, i32* %12, align 4, !dbg !5944
  %181 = load i32, i32* @x.83
  %182 = load i32, i32* @y.84
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br label %189, !dbg !5944

189:                                              ; preds = %originalBBpart250, %originalBBpart221, %originalBBpart212
  %190 = load i32, i32* @x.83
  %191 = load i32, i32* @y.84
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %189, %originalBB52alteredBB
  %198 = load i32, i32* %12, align 4, !dbg !5945
  %199 = load i32, i32* @x.83
  %200 = load i32, i32* @y.84
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  ret i32 %198, !dbg !5945

originalBBalteredBB:                              ; preds = %originalBB, %3
  %207 = alloca i32, align 4
  %208 = alloca i32, align 4
  %209 = alloca i8*, align 8
  %210 = alloca i64, align 8
  %211 = alloca i8*, align 8
  %212 = alloca i64, align 8
  store i32 %0, i32* %208, align 4
  call void @llvm.dbg.declare(metadata i32* %208, metadata !5946, metadata !DIExpression()), !dbg !5890
  store i8* %1, i8** %209, align 8
  call void @llvm.dbg.declare(metadata i8** %209, metadata !5949, metadata !DIExpression()), !dbg !5892
  store i64 %2, i64* %210, align 8
  call void @llvm.dbg.declare(metadata i64* %210, metadata !5950, metadata !DIExpression()), !dbg !5894
  call void @llvm.dbg.declare(metadata i8** %211, metadata !5951, metadata !DIExpression()), !dbg !5896
  %213 = load i32, i32* %208, align 4, !dbg !5897
  %214 = call i8* @setlocale_null_androidfix(i32 %213), !dbg !5898
  store i8* %214, i8** %211, align 8, !dbg !5896
  %215 = load i8*, i8** %211, align 8, !dbg !5899
  %216 = icmp eq i8* %215, null, !dbg !5901
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %217 = load i64, i64* %15, align 8, !dbg !5903
  %218 = icmp ugt i64 %217, 0, !dbg !5906
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %219 = load i8*, i8** %14, align 8, !dbg !5908
  %220 = getelementptr inbounds i8, i8* %219, i64 0, !dbg !5908
  store i8 0, i8* %220, align 1, !dbg !5909
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  store i32 22, i32* %12, align 4, !dbg !5910
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %85
  %221 = load i8*, i8** %16, align 8, !dbg !5914
  %222 = call i64 @strlen(i8* %221) #13, !dbg !5915
  store i64 %222, i64* %17, align 8, !dbg !5913
  %223 = load i64, i64* %17, align 8, !dbg !5916
  %224 = load i64, i64* %15, align 8, !dbg !5918
  %225 = icmp ult i64 %223, %224, !dbg !5919
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %226 = load i8*, i8** %14, align 8, !dbg !5921
  %227 = load i8*, i8** %16, align 8, !dbg !5923
  %228 = load i64, i64* %17, align 8, !dbg !5924
  %_ = shl i64 %228, 1
  %_19 = sub i64 %228, 1
  %gen = mul i64 %_19, 1
  %229 = add i64 %228, 1, !dbg !5925
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %226, i8* align 1 %227, i64 %229, i1 false), !dbg !5926
  store i32 0, i32* %12, align 4, !dbg !5927
  br label %originalBB18

originalBB23alteredBB:                            ; preds = %originalBB23, %128
  %230 = load i64, i64* %15, align 8, !dbg !5928
  %231 = icmp ugt i64 %230, 0, !dbg !5931
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %147
  %232 = load i8*, i8** %14, align 8, !dbg !5933
  %233 = load i8*, i8** %16, align 8, !dbg !5935
  %234 = load i64, i64* %15, align 8, !dbg !5936
  %_28 = sub i64 %234, 1
  %gen29 = mul i64 %_28, 1
  %_30 = shl i64 %234, 1
  %_31 = sub i64 0, %234
  %gen32 = add i64 %_31, 1
  %_33 = sub i64 0, %234
  %gen34 = add i64 %_33, 1
  %_35 = sub i64 %234, 1
  %gen36 = mul i64 %_35, 1
  %_37 = sub i64 %234, 1
  %gen38 = mul i64 %_37, 1
  %_39 = sub i64 0, %234
  %gen40 = add i64 %_39, 1
  %235 = sub i64 %234, 1, !dbg !5937
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %232, i8* align 1 %233, i64 %235, i1 false), !dbg !5938
  %236 = load i8*, i8** %14, align 8, !dbg !5939
  %237 = load i64, i64* %15, align 8, !dbg !5940
  %_41 = sub i64 0, %237
  %gen42 = add i64 %_41, 1
  %_43 = sub i64 %237, 1
  %gen44 = mul i64 %_43, 1
  %238 = sub i64 %237, 1, !dbg !5941
  %239 = getelementptr inbounds i8, i8* %236, i64 %238, !dbg !5939
  store i8 0, i8* %239, align 1, !dbg !5942
  br label %originalBB27

originalBB48alteredBB:                            ; preds = %originalBB48, %172
  store i32 34, i32* %12, align 4, !dbg !5944
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %189
  %240 = load i32, i32* %12, align 4, !dbg !5945
  br label %originalBB52
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !5952 {
  %2 = load i32, i32* @x.85
  %3 = load i32, i32* @y.86
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !5955, metadata !DIExpression()), !dbg !5956
  call void @llvm.dbg.declare(metadata i8** %11, metadata !5957, metadata !DIExpression()), !dbg !5958
  %12 = load i32, i32* %10, align 4, !dbg !5959
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !5960
  store i8* %13, i8** %11, align 8, !dbg !5958
  %14 = load i8*, i8** %11, align 8, !dbg !5961
  %15 = load i32, i32* @x.85
  %16 = load i32, i32* @y.86
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !5962

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !5963, metadata !DIExpression()), !dbg !5956
  call void @llvm.dbg.declare(metadata i8** %24, metadata !5966, metadata !DIExpression()), !dbg !5958
  %25 = load i32, i32* %23, align 4, !dbg !5959
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !5960
  store i8* %26, i8** %24, align 8, !dbg !5958
  %27 = load i8*, i8** %24, align 8, !dbg !5961
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !5967 {
  %7 = load i32, i32* @x.87
  %8 = load i32, i32* @y.88
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !6021, metadata !DIExpression()), !dbg !6022
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !6023, metadata !DIExpression()), !dbg !6024
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !6025, metadata !DIExpression()), !dbg !6026
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !6027, metadata !DIExpression()), !dbg !6028
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !6029, metadata !DIExpression()), !dbg !6030
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !6031, metadata !DIExpression()), !dbg !6032
  %21 = load i8*, i8** %16, align 8, !dbg !6033
  %22 = icmp ne i8* %21, null, !dbg !6033
  %23 = load i32, i32* @x.87
  %24 = load i32, i32* @y.88
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %53, !dbg !6035

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.87
  %33 = load i32, i32* @y.88
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6036
  %41 = load i8*, i8** %16, align 8, !dbg !6037
  %42 = load i8*, i8** %17, align 8, !dbg !6038
  %43 = load i8*, i8** %18, align 8, !dbg !6039
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137, i64 0, i64 0), i8* %41, i8* %42, i8* %43), !dbg !6040
  %45 = load i32, i32* @x.87
  %46 = load i32, i32* @y.88
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74, !dbg !6040

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* @x.87
  %55 = load i32, i32* @y.88
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6041
  %63 = load i8*, i8** %17, align 8, !dbg !6042
  %64 = load i8*, i8** %18, align 8, !dbg !6043
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.138, i64 0, i64 0), i8* %63, i8* %64), !dbg !6044
  %66 = load i32, i32* @x.87
  %67 = load i32, i32* @y.88
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28, %originalBBpart24
  %75 = load i32, i32* @x.87
  %76 = load i32, i32* @y.88
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6045
  %84 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.139, i64 0, i64 0)) #10, !dbg !6046
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %84, i32 2020), !dbg !6047
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6048
  %87 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.140, i64 0, i64 0), %struct._IO_FILE* %86), !dbg !6048
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6049
  %89 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.141, i64 0, i64 0)) #10, !dbg !6050
  %90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* %89, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.142, i64 0, i64 0)), !dbg !6051
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6052
  %92 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.140, i64 0, i64 0), %struct._IO_FILE* %91), !dbg !6052
  %93 = load i64, i64* %20, align 8, !dbg !6053
  %94 = load i32, i32* @x.87
  %95 = load i32, i32* @y.88
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i64 %93, label %434 [
    i64 0, label %102
    i64 1, label %119
    i64 2, label %142
    i64 3, label %168
    i64 4, label %197
    i64 5, label %229
    i64 6, label %264
    i64 7, label %302
    i64 8, label %343
    i64 9, label %387
  ], !dbg !6054

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.87
  %104 = load i32, i32* @y.88
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.87
  %112 = load i32, i32* @y.88
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %481, !dbg !6055

119:                                              ; preds = %originalBBpart212
  %120 = load i32, i32* @x.87
  %121 = load i32, i32* @y.88
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6057
  %129 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.143, i64 0, i64 0)) #10, !dbg !6058
  %130 = load i8**, i8*** %19, align 8, !dbg !6059
  %131 = getelementptr inbounds i8*, i8** %130, i64 0, !dbg !6059
  %132 = load i8*, i8** %131, align 8, !dbg !6059
  %133 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %128, i8* %129, i8* %132), !dbg !6060
  %134 = load i32, i32* @x.87
  %135 = load i32, i32* @y.88
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %481, !dbg !6061

142:                                              ; preds = %originalBBpart212
  %143 = load i32, i32* @x.87
  %144 = load i32, i32* @y.88
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6062
  %152 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.144, i64 0, i64 0)) #10, !dbg !6063
  %153 = load i8**, i8*** %19, align 8, !dbg !6064
  %154 = getelementptr inbounds i8*, i8** %153, i64 0, !dbg !6064
  %155 = load i8*, i8** %154, align 8, !dbg !6064
  %156 = load i8**, i8*** %19, align 8, !dbg !6065
  %157 = getelementptr inbounds i8*, i8** %156, i64 1, !dbg !6065
  %158 = load i8*, i8** %157, align 8, !dbg !6065
  %159 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %151, i8* %152, i8* %155, i8* %158), !dbg !6066
  %160 = load i32, i32* @x.87
  %161 = load i32, i32* @y.88
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %481, !dbg !6067

168:                                              ; preds = %originalBBpart212
  %169 = load i32, i32* @x.87
  %170 = load i32, i32* @y.88
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %168, %originalBB26alteredBB
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6068
  %178 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.145, i64 0, i64 0)) #10, !dbg !6069
  %179 = load i8**, i8*** %19, align 8, !dbg !6070
  %180 = getelementptr inbounds i8*, i8** %179, i64 0, !dbg !6070
  %181 = load i8*, i8** %180, align 8, !dbg !6070
  %182 = load i8**, i8*** %19, align 8, !dbg !6071
  %183 = getelementptr inbounds i8*, i8** %182, i64 1, !dbg !6071
  %184 = load i8*, i8** %183, align 8, !dbg !6071
  %185 = load i8**, i8*** %19, align 8, !dbg !6072
  %186 = getelementptr inbounds i8*, i8** %185, i64 2, !dbg !6072
  %187 = load i8*, i8** %186, align 8, !dbg !6072
  %188 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %177, i8* %178, i8* %181, i8* %184, i8* %187), !dbg !6073
  %189 = load i32, i32* @x.87
  %190 = load i32, i32* @y.88
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %481, !dbg !6074

197:                                              ; preds = %originalBBpart212
  %198 = load i32, i32* @x.87
  %199 = load i32, i32* @y.88
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %197, %originalBB30alteredBB
  %206 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6075
  %207 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.146, i64 0, i64 0)) #10, !dbg !6076
  %208 = load i8**, i8*** %19, align 8, !dbg !6077
  %209 = getelementptr inbounds i8*, i8** %208, i64 0, !dbg !6077
  %210 = load i8*, i8** %209, align 8, !dbg !6077
  %211 = load i8**, i8*** %19, align 8, !dbg !6078
  %212 = getelementptr inbounds i8*, i8** %211, i64 1, !dbg !6078
  %213 = load i8*, i8** %212, align 8, !dbg !6078
  %214 = load i8**, i8*** %19, align 8, !dbg !6079
  %215 = getelementptr inbounds i8*, i8** %214, i64 2, !dbg !6079
  %216 = load i8*, i8** %215, align 8, !dbg !6079
  %217 = load i8**, i8*** %19, align 8, !dbg !6080
  %218 = getelementptr inbounds i8*, i8** %217, i64 3, !dbg !6080
  %219 = load i8*, i8** %218, align 8, !dbg !6080
  %220 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %206, i8* %207, i8* %210, i8* %213, i8* %216, i8* %219), !dbg !6081
  %221 = load i32, i32* @x.87
  %222 = load i32, i32* @y.88
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %481, !dbg !6082

229:                                              ; preds = %originalBBpart212
  %230 = load i32, i32* @x.87
  %231 = load i32, i32* @y.88
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %229, %originalBB34alteredBB
  %238 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6083
  %239 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.147, i64 0, i64 0)) #10, !dbg !6084
  %240 = load i8**, i8*** %19, align 8, !dbg !6085
  %241 = getelementptr inbounds i8*, i8** %240, i64 0, !dbg !6085
  %242 = load i8*, i8** %241, align 8, !dbg !6085
  %243 = load i8**, i8*** %19, align 8, !dbg !6086
  %244 = getelementptr inbounds i8*, i8** %243, i64 1, !dbg !6086
  %245 = load i8*, i8** %244, align 8, !dbg !6086
  %246 = load i8**, i8*** %19, align 8, !dbg !6087
  %247 = getelementptr inbounds i8*, i8** %246, i64 2, !dbg !6087
  %248 = load i8*, i8** %247, align 8, !dbg !6087
  %249 = load i8**, i8*** %19, align 8, !dbg !6088
  %250 = getelementptr inbounds i8*, i8** %249, i64 3, !dbg !6088
  %251 = load i8*, i8** %250, align 8, !dbg !6088
  %252 = load i8**, i8*** %19, align 8, !dbg !6089
  %253 = getelementptr inbounds i8*, i8** %252, i64 4, !dbg !6089
  %254 = load i8*, i8** %253, align 8, !dbg !6089
  %255 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %238, i8* %239, i8* %242, i8* %245, i8* %248, i8* %251, i8* %254), !dbg !6090
  %256 = load i32, i32* @x.87
  %257 = load i32, i32* @y.88
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %481, !dbg !6091

264:                                              ; preds = %originalBBpart212
  %265 = load i32, i32* @x.87
  %266 = load i32, i32* @y.88
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %264, %originalBB38alteredBB
  %273 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6092
  %274 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.148, i64 0, i64 0)) #10, !dbg !6093
  %275 = load i8**, i8*** %19, align 8, !dbg !6094
  %276 = getelementptr inbounds i8*, i8** %275, i64 0, !dbg !6094
  %277 = load i8*, i8** %276, align 8, !dbg !6094
  %278 = load i8**, i8*** %19, align 8, !dbg !6095
  %279 = getelementptr inbounds i8*, i8** %278, i64 1, !dbg !6095
  %280 = load i8*, i8** %279, align 8, !dbg !6095
  %281 = load i8**, i8*** %19, align 8, !dbg !6096
  %282 = getelementptr inbounds i8*, i8** %281, i64 2, !dbg !6096
  %283 = load i8*, i8** %282, align 8, !dbg !6096
  %284 = load i8**, i8*** %19, align 8, !dbg !6097
  %285 = getelementptr inbounds i8*, i8** %284, i64 3, !dbg !6097
  %286 = load i8*, i8** %285, align 8, !dbg !6097
  %287 = load i8**, i8*** %19, align 8, !dbg !6098
  %288 = getelementptr inbounds i8*, i8** %287, i64 4, !dbg !6098
  %289 = load i8*, i8** %288, align 8, !dbg !6098
  %290 = load i8**, i8*** %19, align 8, !dbg !6099
  %291 = getelementptr inbounds i8*, i8** %290, i64 5, !dbg !6099
  %292 = load i8*, i8** %291, align 8, !dbg !6099
  %293 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %273, i8* %274, i8* %277, i8* %280, i8* %283, i8* %286, i8* %289, i8* %292), !dbg !6100
  %294 = load i32, i32* @x.87
  %295 = load i32, i32* @y.88
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %481, !dbg !6101

302:                                              ; preds = %originalBBpart212
  %303 = load i32, i32* @x.87
  %304 = load i32, i32* @y.88
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %302, %originalBB42alteredBB
  %311 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6102
  %312 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.149, i64 0, i64 0)) #10, !dbg !6103
  %313 = load i8**, i8*** %19, align 8, !dbg !6104
  %314 = getelementptr inbounds i8*, i8** %313, i64 0, !dbg !6104
  %315 = load i8*, i8** %314, align 8, !dbg !6104
  %316 = load i8**, i8*** %19, align 8, !dbg !6105
  %317 = getelementptr inbounds i8*, i8** %316, i64 1, !dbg !6105
  %318 = load i8*, i8** %317, align 8, !dbg !6105
  %319 = load i8**, i8*** %19, align 8, !dbg !6106
  %320 = getelementptr inbounds i8*, i8** %319, i64 2, !dbg !6106
  %321 = load i8*, i8** %320, align 8, !dbg !6106
  %322 = load i8**, i8*** %19, align 8, !dbg !6107
  %323 = getelementptr inbounds i8*, i8** %322, i64 3, !dbg !6107
  %324 = load i8*, i8** %323, align 8, !dbg !6107
  %325 = load i8**, i8*** %19, align 8, !dbg !6108
  %326 = getelementptr inbounds i8*, i8** %325, i64 4, !dbg !6108
  %327 = load i8*, i8** %326, align 8, !dbg !6108
  %328 = load i8**, i8*** %19, align 8, !dbg !6109
  %329 = getelementptr inbounds i8*, i8** %328, i64 5, !dbg !6109
  %330 = load i8*, i8** %329, align 8, !dbg !6109
  %331 = load i8**, i8*** %19, align 8, !dbg !6110
  %332 = getelementptr inbounds i8*, i8** %331, i64 6, !dbg !6110
  %333 = load i8*, i8** %332, align 8, !dbg !6110
  %334 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %311, i8* %312, i8* %315, i8* %318, i8* %321, i8* %324, i8* %327, i8* %330, i8* %333), !dbg !6111
  %335 = load i32, i32* @x.87
  %336 = load i32, i32* @y.88
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %481, !dbg !6112

343:                                              ; preds = %originalBBpart212
  %344 = load i32, i32* @x.87
  %345 = load i32, i32* @y.88
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %343, %originalBB46alteredBB
  %352 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6113
  %353 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.150, i64 0, i64 0)) #10, !dbg !6114
  %354 = load i8**, i8*** %19, align 8, !dbg !6115
  %355 = getelementptr inbounds i8*, i8** %354, i64 0, !dbg !6115
  %356 = load i8*, i8** %355, align 8, !dbg !6115
  %357 = load i8**, i8*** %19, align 8, !dbg !6116
  %358 = getelementptr inbounds i8*, i8** %357, i64 1, !dbg !6116
  %359 = load i8*, i8** %358, align 8, !dbg !6116
  %360 = load i8**, i8*** %19, align 8, !dbg !6117
  %361 = getelementptr inbounds i8*, i8** %360, i64 2, !dbg !6117
  %362 = load i8*, i8** %361, align 8, !dbg !6117
  %363 = load i8**, i8*** %19, align 8, !dbg !6118
  %364 = getelementptr inbounds i8*, i8** %363, i64 3, !dbg !6118
  %365 = load i8*, i8** %364, align 8, !dbg !6118
  %366 = load i8**, i8*** %19, align 8, !dbg !6119
  %367 = getelementptr inbounds i8*, i8** %366, i64 4, !dbg !6119
  %368 = load i8*, i8** %367, align 8, !dbg !6119
  %369 = load i8**, i8*** %19, align 8, !dbg !6120
  %370 = getelementptr inbounds i8*, i8** %369, i64 5, !dbg !6120
  %371 = load i8*, i8** %370, align 8, !dbg !6120
  %372 = load i8**, i8*** %19, align 8, !dbg !6121
  %373 = getelementptr inbounds i8*, i8** %372, i64 6, !dbg !6121
  %374 = load i8*, i8** %373, align 8, !dbg !6121
  %375 = load i8**, i8*** %19, align 8, !dbg !6122
  %376 = getelementptr inbounds i8*, i8** %375, i64 7, !dbg !6122
  %377 = load i8*, i8** %376, align 8, !dbg !6122
  %378 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %352, i8* %353, i8* %356, i8* %359, i8* %362, i8* %365, i8* %368, i8* %371, i8* %374, i8* %377), !dbg !6123
  %379 = load i32, i32* @x.87
  %380 = load i32, i32* @y.88
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %481, !dbg !6124

387:                                              ; preds = %originalBBpart212
  %388 = load i32, i32* @x.87
  %389 = load i32, i32* @y.88
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %387, %originalBB50alteredBB
  %396 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6125
  %397 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.151, i64 0, i64 0)) #10, !dbg !6126
  %398 = load i8**, i8*** %19, align 8, !dbg !6127
  %399 = getelementptr inbounds i8*, i8** %398, i64 0, !dbg !6127
  %400 = load i8*, i8** %399, align 8, !dbg !6127
  %401 = load i8**, i8*** %19, align 8, !dbg !6128
  %402 = getelementptr inbounds i8*, i8** %401, i64 1, !dbg !6128
  %403 = load i8*, i8** %402, align 8, !dbg !6128
  %404 = load i8**, i8*** %19, align 8, !dbg !6129
  %405 = getelementptr inbounds i8*, i8** %404, i64 2, !dbg !6129
  %406 = load i8*, i8** %405, align 8, !dbg !6129
  %407 = load i8**, i8*** %19, align 8, !dbg !6130
  %408 = getelementptr inbounds i8*, i8** %407, i64 3, !dbg !6130
  %409 = load i8*, i8** %408, align 8, !dbg !6130
  %410 = load i8**, i8*** %19, align 8, !dbg !6131
  %411 = getelementptr inbounds i8*, i8** %410, i64 4, !dbg !6131
  %412 = load i8*, i8** %411, align 8, !dbg !6131
  %413 = load i8**, i8*** %19, align 8, !dbg !6132
  %414 = getelementptr inbounds i8*, i8** %413, i64 5, !dbg !6132
  %415 = load i8*, i8** %414, align 8, !dbg !6132
  %416 = load i8**, i8*** %19, align 8, !dbg !6133
  %417 = getelementptr inbounds i8*, i8** %416, i64 6, !dbg !6133
  %418 = load i8*, i8** %417, align 8, !dbg !6133
  %419 = load i8**, i8*** %19, align 8, !dbg !6134
  %420 = getelementptr inbounds i8*, i8** %419, i64 7, !dbg !6134
  %421 = load i8*, i8** %420, align 8, !dbg !6134
  %422 = load i8**, i8*** %19, align 8, !dbg !6135
  %423 = getelementptr inbounds i8*, i8** %422, i64 8, !dbg !6135
  %424 = load i8*, i8** %423, align 8, !dbg !6135
  %425 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %396, i8* %397, i8* %400, i8* %403, i8* %406, i8* %409, i8* %412, i8* %415, i8* %418, i8* %421, i8* %424), !dbg !6136
  %426 = load i32, i32* @x.87
  %427 = load i32, i32* @y.88
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %481, !dbg !6137

434:                                              ; preds = %originalBBpart212
  %435 = load i32, i32* @x.87
  %436 = load i32, i32* @y.88
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %434, %originalBB54alteredBB
  %443 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6138
  %444 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.152, i64 0, i64 0)) #10, !dbg !6139
  %445 = load i8**, i8*** %19, align 8, !dbg !6140
  %446 = getelementptr inbounds i8*, i8** %445, i64 0, !dbg !6140
  %447 = load i8*, i8** %446, align 8, !dbg !6140
  %448 = load i8**, i8*** %19, align 8, !dbg !6141
  %449 = getelementptr inbounds i8*, i8** %448, i64 1, !dbg !6141
  %450 = load i8*, i8** %449, align 8, !dbg !6141
  %451 = load i8**, i8*** %19, align 8, !dbg !6142
  %452 = getelementptr inbounds i8*, i8** %451, i64 2, !dbg !6142
  %453 = load i8*, i8** %452, align 8, !dbg !6142
  %454 = load i8**, i8*** %19, align 8, !dbg !6143
  %455 = getelementptr inbounds i8*, i8** %454, i64 3, !dbg !6143
  %456 = load i8*, i8** %455, align 8, !dbg !6143
  %457 = load i8**, i8*** %19, align 8, !dbg !6144
  %458 = getelementptr inbounds i8*, i8** %457, i64 4, !dbg !6144
  %459 = load i8*, i8** %458, align 8, !dbg !6144
  %460 = load i8**, i8*** %19, align 8, !dbg !6145
  %461 = getelementptr inbounds i8*, i8** %460, i64 5, !dbg !6145
  %462 = load i8*, i8** %461, align 8, !dbg !6145
  %463 = load i8**, i8*** %19, align 8, !dbg !6146
  %464 = getelementptr inbounds i8*, i8** %463, i64 6, !dbg !6146
  %465 = load i8*, i8** %464, align 8, !dbg !6146
  %466 = load i8**, i8*** %19, align 8, !dbg !6147
  %467 = getelementptr inbounds i8*, i8** %466, i64 7, !dbg !6147
  %468 = load i8*, i8** %467, align 8, !dbg !6147
  %469 = load i8**, i8*** %19, align 8, !dbg !6148
  %470 = getelementptr inbounds i8*, i8** %469, i64 8, !dbg !6148
  %471 = load i8*, i8** %470, align 8, !dbg !6148
  %472 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %443, i8* %444, i8* %447, i8* %450, i8* %453, i8* %456, i8* %459, i8* %462, i8* %465, i8* %468, i8* %471), !dbg !6149
  %473 = load i32, i32* @x.87
  %474 = load i32, i32* @y.88
  %475 = sub i32 %473, 1
  %476 = mul i32 %473, %475
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %478, %479
  br i1 %480, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %481, !dbg !6150

481:                                              ; preds = %originalBBpart256, %originalBBpart252, %originalBBpart248, %originalBBpart244, %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216
  %482 = load i32, i32* @x.87
  %483 = load i32, i32* @y.88
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %481, %originalBB58alteredBB
  %490 = load i32, i32* @x.87
  %491 = load i32, i32* @y.88
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  ret void, !dbg !6151

originalBBalteredBB:                              ; preds = %originalBB, %6
  %498 = alloca %struct._IO_FILE*, align 8
  %499 = alloca i8*, align 8
  %500 = alloca i8*, align 8
  %501 = alloca i8*, align 8
  %502 = alloca i8**, align 8
  %503 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %498, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %498, metadata !6152, metadata !DIExpression()), !dbg !6022
  store i8* %1, i8** %499, align 8
  call void @llvm.dbg.declare(metadata i8** %499, metadata !6191, metadata !DIExpression()), !dbg !6024
  store i8* %2, i8** %500, align 8
  call void @llvm.dbg.declare(metadata i8** %500, metadata !6192, metadata !DIExpression()), !dbg !6026
  store i8* %3, i8** %501, align 8
  call void @llvm.dbg.declare(metadata i8** %501, metadata !6193, metadata !DIExpression()), !dbg !6028
  store i8** %4, i8*** %502, align 8
  call void @llvm.dbg.declare(metadata i8*** %502, metadata !6194, metadata !DIExpression()), !dbg !6030
  store i64 %5, i64* %503, align 8
  call void @llvm.dbg.declare(metadata i64* %503, metadata !6195, metadata !DIExpression()), !dbg !6032
  %504 = load i8*, i8** %499, align 8, !dbg !6033
  %505 = icmp ne i8* %504, null, !dbg !6033
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %506 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6036
  %507 = load i8*, i8** %16, align 8, !dbg !6037
  %508 = load i8*, i8** %17, align 8, !dbg !6038
  %509 = load i8*, i8** %18, align 8, !dbg !6039
  %510 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %506, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137, i64 0, i64 0), i8* %507, i8* %508, i8* %509), !dbg !6040
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %511 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6041
  %512 = load i8*, i8** %17, align 8, !dbg !6042
  %513 = load i8*, i8** %18, align 8, !dbg !6043
  %514 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %511, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.138, i64 0, i64 0), i8* %512, i8* %513), !dbg !6044
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %515 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6045
  %516 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.139, i64 0, i64 0)) #10, !dbg !6046
  %517 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %515, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %516, i32 2020), !dbg !6047
  %518 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6048
  %519 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.140, i64 0, i64 0), %struct._IO_FILE* %518), !dbg !6048
  %520 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6049
  %521 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.141, i64 0, i64 0)) #10, !dbg !6050
  %522 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %520, i8* %521, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.142, i64 0, i64 0)), !dbg !6051
  %523 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6052
  %524 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.140, i64 0, i64 0), %struct._IO_FILE* %523), !dbg !6052
  %525 = load i64, i64* %20, align 8, !dbg !6053
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %526 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6057
  %527 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.143, i64 0, i64 0)) #10, !dbg !6058
  %528 = load i8**, i8*** %19, align 8, !dbg !6059
  %529 = getelementptr inbounds i8*, i8** %528, i64 0, !dbg !6059
  %530 = load i8*, i8** %529, align 8, !dbg !6059
  %531 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %526, i8* %527, i8* %530), !dbg !6060
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %532 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6062
  %533 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.144, i64 0, i64 0)) #10, !dbg !6063
  %534 = load i8**, i8*** %19, align 8, !dbg !6064
  %535 = getelementptr inbounds i8*, i8** %534, i64 0, !dbg !6064
  %536 = load i8*, i8** %535, align 8, !dbg !6064
  %537 = load i8**, i8*** %19, align 8, !dbg !6065
  %538 = getelementptr inbounds i8*, i8** %537, i64 1, !dbg !6065
  %539 = load i8*, i8** %538, align 8, !dbg !6065
  %540 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %532, i8* %533, i8* %536, i8* %539), !dbg !6066
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %168
  %541 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6068
  %542 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.145, i64 0, i64 0)) #10, !dbg !6069
  %543 = load i8**, i8*** %19, align 8, !dbg !6070
  %544 = getelementptr inbounds i8*, i8** %543, i64 0, !dbg !6070
  %545 = load i8*, i8** %544, align 8, !dbg !6070
  %546 = load i8**, i8*** %19, align 8, !dbg !6071
  %547 = getelementptr inbounds i8*, i8** %546, i64 1, !dbg !6071
  %548 = load i8*, i8** %547, align 8, !dbg !6071
  %549 = load i8**, i8*** %19, align 8, !dbg !6072
  %550 = getelementptr inbounds i8*, i8** %549, i64 2, !dbg !6072
  %551 = load i8*, i8** %550, align 8, !dbg !6072
  %552 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %541, i8* %542, i8* %545, i8* %548, i8* %551), !dbg !6073
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %197
  %553 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6075
  %554 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.146, i64 0, i64 0)) #10, !dbg !6076
  %555 = load i8**, i8*** %19, align 8, !dbg !6077
  %556 = getelementptr inbounds i8*, i8** %555, i64 0, !dbg !6077
  %557 = load i8*, i8** %556, align 8, !dbg !6077
  %558 = load i8**, i8*** %19, align 8, !dbg !6078
  %559 = getelementptr inbounds i8*, i8** %558, i64 1, !dbg !6078
  %560 = load i8*, i8** %559, align 8, !dbg !6078
  %561 = load i8**, i8*** %19, align 8, !dbg !6079
  %562 = getelementptr inbounds i8*, i8** %561, i64 2, !dbg !6079
  %563 = load i8*, i8** %562, align 8, !dbg !6079
  %564 = load i8**, i8*** %19, align 8, !dbg !6080
  %565 = getelementptr inbounds i8*, i8** %564, i64 3, !dbg !6080
  %566 = load i8*, i8** %565, align 8, !dbg !6080
  %567 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %553, i8* %554, i8* %557, i8* %560, i8* %563, i8* %566), !dbg !6081
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %229
  %568 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6083
  %569 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.147, i64 0, i64 0)) #10, !dbg !6084
  %570 = load i8**, i8*** %19, align 8, !dbg !6085
  %571 = getelementptr inbounds i8*, i8** %570, i64 0, !dbg !6085
  %572 = load i8*, i8** %571, align 8, !dbg !6085
  %573 = load i8**, i8*** %19, align 8, !dbg !6086
  %574 = getelementptr inbounds i8*, i8** %573, i64 1, !dbg !6086
  %575 = load i8*, i8** %574, align 8, !dbg !6086
  %576 = load i8**, i8*** %19, align 8, !dbg !6087
  %577 = getelementptr inbounds i8*, i8** %576, i64 2, !dbg !6087
  %578 = load i8*, i8** %577, align 8, !dbg !6087
  %579 = load i8**, i8*** %19, align 8, !dbg !6088
  %580 = getelementptr inbounds i8*, i8** %579, i64 3, !dbg !6088
  %581 = load i8*, i8** %580, align 8, !dbg !6088
  %582 = load i8**, i8*** %19, align 8, !dbg !6089
  %583 = getelementptr inbounds i8*, i8** %582, i64 4, !dbg !6089
  %584 = load i8*, i8** %583, align 8, !dbg !6089
  %585 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %568, i8* %569, i8* %572, i8* %575, i8* %578, i8* %581, i8* %584), !dbg !6090
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %264
  %586 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6092
  %587 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.148, i64 0, i64 0)) #10, !dbg !6093
  %588 = load i8**, i8*** %19, align 8, !dbg !6094
  %589 = getelementptr inbounds i8*, i8** %588, i64 0, !dbg !6094
  %590 = load i8*, i8** %589, align 8, !dbg !6094
  %591 = load i8**, i8*** %19, align 8, !dbg !6095
  %592 = getelementptr inbounds i8*, i8** %591, i64 1, !dbg !6095
  %593 = load i8*, i8** %592, align 8, !dbg !6095
  %594 = load i8**, i8*** %19, align 8, !dbg !6096
  %595 = getelementptr inbounds i8*, i8** %594, i64 2, !dbg !6096
  %596 = load i8*, i8** %595, align 8, !dbg !6096
  %597 = load i8**, i8*** %19, align 8, !dbg !6097
  %598 = getelementptr inbounds i8*, i8** %597, i64 3, !dbg !6097
  %599 = load i8*, i8** %598, align 8, !dbg !6097
  %600 = load i8**, i8*** %19, align 8, !dbg !6098
  %601 = getelementptr inbounds i8*, i8** %600, i64 4, !dbg !6098
  %602 = load i8*, i8** %601, align 8, !dbg !6098
  %603 = load i8**, i8*** %19, align 8, !dbg !6099
  %604 = getelementptr inbounds i8*, i8** %603, i64 5, !dbg !6099
  %605 = load i8*, i8** %604, align 8, !dbg !6099
  %606 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %586, i8* %587, i8* %590, i8* %593, i8* %596, i8* %599, i8* %602, i8* %605), !dbg !6100
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %302
  %607 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6102
  %608 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.149, i64 0, i64 0)) #10, !dbg !6103
  %609 = load i8**, i8*** %19, align 8, !dbg !6104
  %610 = getelementptr inbounds i8*, i8** %609, i64 0, !dbg !6104
  %611 = load i8*, i8** %610, align 8, !dbg !6104
  %612 = load i8**, i8*** %19, align 8, !dbg !6105
  %613 = getelementptr inbounds i8*, i8** %612, i64 1, !dbg !6105
  %614 = load i8*, i8** %613, align 8, !dbg !6105
  %615 = load i8**, i8*** %19, align 8, !dbg !6106
  %616 = getelementptr inbounds i8*, i8** %615, i64 2, !dbg !6106
  %617 = load i8*, i8** %616, align 8, !dbg !6106
  %618 = load i8**, i8*** %19, align 8, !dbg !6107
  %619 = getelementptr inbounds i8*, i8** %618, i64 3, !dbg !6107
  %620 = load i8*, i8** %619, align 8, !dbg !6107
  %621 = load i8**, i8*** %19, align 8, !dbg !6108
  %622 = getelementptr inbounds i8*, i8** %621, i64 4, !dbg !6108
  %623 = load i8*, i8** %622, align 8, !dbg !6108
  %624 = load i8**, i8*** %19, align 8, !dbg !6109
  %625 = getelementptr inbounds i8*, i8** %624, i64 5, !dbg !6109
  %626 = load i8*, i8** %625, align 8, !dbg !6109
  %627 = load i8**, i8*** %19, align 8, !dbg !6110
  %628 = getelementptr inbounds i8*, i8** %627, i64 6, !dbg !6110
  %629 = load i8*, i8** %628, align 8, !dbg !6110
  %630 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %607, i8* %608, i8* %611, i8* %614, i8* %617, i8* %620, i8* %623, i8* %626, i8* %629), !dbg !6111
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %343
  %631 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6113
  %632 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.150, i64 0, i64 0)) #10, !dbg !6114
  %633 = load i8**, i8*** %19, align 8, !dbg !6115
  %634 = getelementptr inbounds i8*, i8** %633, i64 0, !dbg !6115
  %635 = load i8*, i8** %634, align 8, !dbg !6115
  %636 = load i8**, i8*** %19, align 8, !dbg !6116
  %637 = getelementptr inbounds i8*, i8** %636, i64 1, !dbg !6116
  %638 = load i8*, i8** %637, align 8, !dbg !6116
  %639 = load i8**, i8*** %19, align 8, !dbg !6117
  %640 = getelementptr inbounds i8*, i8** %639, i64 2, !dbg !6117
  %641 = load i8*, i8** %640, align 8, !dbg !6117
  %642 = load i8**, i8*** %19, align 8, !dbg !6118
  %643 = getelementptr inbounds i8*, i8** %642, i64 3, !dbg !6118
  %644 = load i8*, i8** %643, align 8, !dbg !6118
  %645 = load i8**, i8*** %19, align 8, !dbg !6119
  %646 = getelementptr inbounds i8*, i8** %645, i64 4, !dbg !6119
  %647 = load i8*, i8** %646, align 8, !dbg !6119
  %648 = load i8**, i8*** %19, align 8, !dbg !6120
  %649 = getelementptr inbounds i8*, i8** %648, i64 5, !dbg !6120
  %650 = load i8*, i8** %649, align 8, !dbg !6120
  %651 = load i8**, i8*** %19, align 8, !dbg !6121
  %652 = getelementptr inbounds i8*, i8** %651, i64 6, !dbg !6121
  %653 = load i8*, i8** %652, align 8, !dbg !6121
  %654 = load i8**, i8*** %19, align 8, !dbg !6122
  %655 = getelementptr inbounds i8*, i8** %654, i64 7, !dbg !6122
  %656 = load i8*, i8** %655, align 8, !dbg !6122
  %657 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %631, i8* %632, i8* %635, i8* %638, i8* %641, i8* %644, i8* %647, i8* %650, i8* %653, i8* %656), !dbg !6123
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %387
  %658 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6125
  %659 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.151, i64 0, i64 0)) #10, !dbg !6126
  %660 = load i8**, i8*** %19, align 8, !dbg !6127
  %661 = getelementptr inbounds i8*, i8** %660, i64 0, !dbg !6127
  %662 = load i8*, i8** %661, align 8, !dbg !6127
  %663 = load i8**, i8*** %19, align 8, !dbg !6128
  %664 = getelementptr inbounds i8*, i8** %663, i64 1, !dbg !6128
  %665 = load i8*, i8** %664, align 8, !dbg !6128
  %666 = load i8**, i8*** %19, align 8, !dbg !6129
  %667 = getelementptr inbounds i8*, i8** %666, i64 2, !dbg !6129
  %668 = load i8*, i8** %667, align 8, !dbg !6129
  %669 = load i8**, i8*** %19, align 8, !dbg !6130
  %670 = getelementptr inbounds i8*, i8** %669, i64 3, !dbg !6130
  %671 = load i8*, i8** %670, align 8, !dbg !6130
  %672 = load i8**, i8*** %19, align 8, !dbg !6131
  %673 = getelementptr inbounds i8*, i8** %672, i64 4, !dbg !6131
  %674 = load i8*, i8** %673, align 8, !dbg !6131
  %675 = load i8**, i8*** %19, align 8, !dbg !6132
  %676 = getelementptr inbounds i8*, i8** %675, i64 5, !dbg !6132
  %677 = load i8*, i8** %676, align 8, !dbg !6132
  %678 = load i8**, i8*** %19, align 8, !dbg !6133
  %679 = getelementptr inbounds i8*, i8** %678, i64 6, !dbg !6133
  %680 = load i8*, i8** %679, align 8, !dbg !6133
  %681 = load i8**, i8*** %19, align 8, !dbg !6134
  %682 = getelementptr inbounds i8*, i8** %681, i64 7, !dbg !6134
  %683 = load i8*, i8** %682, align 8, !dbg !6134
  %684 = load i8**, i8*** %19, align 8, !dbg !6135
  %685 = getelementptr inbounds i8*, i8** %684, i64 8, !dbg !6135
  %686 = load i8*, i8** %685, align 8, !dbg !6135
  %687 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %658, i8* %659, i8* %662, i8* %665, i8* %668, i8* %671, i8* %674, i8* %677, i8* %680, i8* %683, i8* %686), !dbg !6136
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %434
  %688 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !6138
  %689 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.152, i64 0, i64 0)) #10, !dbg !6139
  %690 = load i8**, i8*** %19, align 8, !dbg !6140
  %691 = getelementptr inbounds i8*, i8** %690, i64 0, !dbg !6140
  %692 = load i8*, i8** %691, align 8, !dbg !6140
  %693 = load i8**, i8*** %19, align 8, !dbg !6141
  %694 = getelementptr inbounds i8*, i8** %693, i64 1, !dbg !6141
  %695 = load i8*, i8** %694, align 8, !dbg !6141
  %696 = load i8**, i8*** %19, align 8, !dbg !6142
  %697 = getelementptr inbounds i8*, i8** %696, i64 2, !dbg !6142
  %698 = load i8*, i8** %697, align 8, !dbg !6142
  %699 = load i8**, i8*** %19, align 8, !dbg !6143
  %700 = getelementptr inbounds i8*, i8** %699, i64 3, !dbg !6143
  %701 = load i8*, i8** %700, align 8, !dbg !6143
  %702 = load i8**, i8*** %19, align 8, !dbg !6144
  %703 = getelementptr inbounds i8*, i8** %702, i64 4, !dbg !6144
  %704 = load i8*, i8** %703, align 8, !dbg !6144
  %705 = load i8**, i8*** %19, align 8, !dbg !6145
  %706 = getelementptr inbounds i8*, i8** %705, i64 5, !dbg !6145
  %707 = load i8*, i8** %706, align 8, !dbg !6145
  %708 = load i8**, i8*** %19, align 8, !dbg !6146
  %709 = getelementptr inbounds i8*, i8** %708, i64 6, !dbg !6146
  %710 = load i8*, i8** %709, align 8, !dbg !6146
  %711 = load i8**, i8*** %19, align 8, !dbg !6147
  %712 = getelementptr inbounds i8*, i8** %711, i64 7, !dbg !6147
  %713 = load i8*, i8** %712, align 8, !dbg !6147
  %714 = load i8**, i8*** %19, align 8, !dbg !6148
  %715 = getelementptr inbounds i8*, i8** %714, i64 8, !dbg !6148
  %716 = load i8*, i8** %715, align 8, !dbg !6148
  %717 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %688, i8* %689, i8* %692, i8* %695, i8* %698, i8* %701, i8* %704, i8* %707, i8* %710, i8* %713, i8* %716), !dbg !6149
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %481
  br label %originalBB58
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !6196 {
  %6 = load i32, i32* @x.89
  %7 = load i32, i32* @y.90
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !6206, metadata !DIExpression()), !dbg !6207
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !6208, metadata !DIExpression()), !dbg !6209
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !6210, metadata !DIExpression()), !dbg !6211
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !6212, metadata !DIExpression()), !dbg !6213
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !6214, metadata !DIExpression()), !dbg !6215
  call void @llvm.dbg.declare(metadata i64* %19, metadata !6216, metadata !DIExpression()), !dbg !6217
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !6218, metadata !DIExpression()), !dbg !6220
  store i64 0, i64* %19, align 8, !dbg !6221
  %21 = load i32, i32* @x.89
  %22 = load i32, i32* @y.90
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !6223

29:                                               ; preds = %originalBBpart244, %originalBBpart2
  %30 = load i32, i32* @x.89
  %31 = load i32, i32* @y.90
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !6224
  %39 = icmp ult i64 %38, 10, !dbg !6226
  %40 = load i32, i32* @x.89
  %41 = load i32, i32* @y.90
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %134, !dbg !6227

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.89
  %50 = load i32, i32* @y.90
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !6228
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !6228
  %59 = load i32, i32* %58, align 8, !dbg !6228
  %60 = icmp ule i32 %59, 40, !dbg !6228
  %61 = load i32, i32* @x.89
  %62 = load i32, i32* @y.90
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !6228

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.89
  %71 = load i32, i32* @y.90
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !6228
  %79 = load i8*, i8** %78, align 8, !dbg !6228
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !6228
  %81 = bitcast i8* %80 to i8**, !dbg !6228
  %82 = add i32 %59, 8, !dbg !6228
  store i32 %82, i32* %58, align 8, !dbg !6228
  %83 = load i32, i32* @x.89
  %84 = load i32, i32* @y.90
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart220, label %originalBB10alteredBB

originalBBpart220:                                ; preds = %originalBB10
  br label %112, !dbg !6228

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.89
  %93 = load i32, i32* @y.90
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %91, %originalBB22alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !6228
  %101 = load i8*, i8** %100, align 8, !dbg !6228
  %102 = bitcast i8* %101 to i8**, !dbg !6228
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !6228
  store i8* %103, i8** %100, align 8, !dbg !6228
  %104 = load i32, i32* @x.89
  %105 = load i32, i32* @y.90
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %112, !dbg !6228

112:                                              ; preds = %originalBBpart224, %originalBBpart220
  %113 = phi i8** [ %81, %originalBBpart220 ], [ %102, %originalBBpart224 ], !dbg !6228
  %114 = load i32, i32* @x.89
  %115 = load i32, i32* @y.90
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %112, %originalBB26alteredBB
  %122 = load i8*, i8** %113, align 8, !dbg !6228
  %123 = load i64, i64* %19, align 8, !dbg !6229
  %124 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %123, !dbg !6230
  store i8* %122, i8** %124, align 8, !dbg !6231
  %125 = icmp ne i8* %122, null, !dbg !6232
  %126 = load i32, i32* @x.89
  %127 = load i32, i32* @y.90
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %134

134:                                              ; preds = %originalBBpart228, %originalBBpart24
  %135 = phi i1 [ false, %originalBBpart24 ], [ %125, %originalBBpart228 ], !dbg !6233
  %136 = load i32, i32* @x.89
  %137 = load i32, i32* @y.90
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %134, %originalBB30alteredBB
  %144 = load i32, i32* @x.89
  %145 = load i32, i32* @y.90
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %135, label %152, label %188, !dbg !6234

152:                                              ; preds = %originalBBpart232
  %153 = load i32, i32* @x.89
  %154 = load i32, i32* @y.90
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %152, %originalBB34alteredBB
  %161 = load i32, i32* @x.89
  %162 = load i32, i32* @y.90
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %169, !dbg !6234

169:                                              ; preds = %originalBBpart236
  %170 = load i32, i32* @x.89
  %171 = load i32, i32* @y.90
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %169, %originalBB38alteredBB
  %178 = load i64, i64* %19, align 8, !dbg !6235
  %179 = add i64 %178, 1, !dbg !6235
  store i64 %179, i64* %19, align 8, !dbg !6235
  %180 = load i32, i32* @x.89
  %181 = load i32, i32* @y.90
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart244, label %originalBB38alteredBB

originalBBpart244:                                ; preds = %originalBB38
  br label %29, !dbg !6236, !llvm.loop !6237

188:                                              ; preds = %originalBBpart232
  %189 = load i32, i32* @x.89
  %190 = load i32, i32* @y.90
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %188, %originalBB46alteredBB
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !6239
  %198 = load i8*, i8** %15, align 8, !dbg !6240
  %199 = load i8*, i8** %16, align 8, !dbg !6241
  %200 = load i8*, i8** %17, align 8, !dbg !6242
  %201 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !6243
  %202 = load i64, i64* %19, align 8, !dbg !6244
  call void @version_etc_arn(%struct._IO_FILE* %197, i8* %198, i8* %199, i8* %200, i8** %201, i64 %202), !dbg !6245
  %203 = load i32, i32* @x.89
  %204 = load i32, i32* @y.90
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  ret void, !dbg !6246

originalBBalteredBB:                              ; preds = %originalBB, %5
  %211 = alloca %struct._IO_FILE*, align 8
  %212 = alloca i8*, align 8
  %213 = alloca i8*, align 8
  %214 = alloca i8*, align 8
  %215 = alloca %struct.__va_list_tag*, align 8
  %216 = alloca i64, align 8
  %217 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %211, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %211, metadata !6247, metadata !DIExpression()), !dbg !6207
  store i8* %1, i8** %212, align 8
  call void @llvm.dbg.declare(metadata i8** %212, metadata !6293, metadata !DIExpression()), !dbg !6209
  store i8* %2, i8** %213, align 8
  call void @llvm.dbg.declare(metadata i8** %213, metadata !6294, metadata !DIExpression()), !dbg !6211
  store i8* %3, i8** %214, align 8
  call void @llvm.dbg.declare(metadata i8** %214, metadata !6295, metadata !DIExpression()), !dbg !6213
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %215, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %215, metadata !6296, metadata !DIExpression()), !dbg !6215
  call void @llvm.dbg.declare(metadata i64* %216, metadata !6297, metadata !DIExpression()), !dbg !6217
  call void @llvm.dbg.declare(metadata [10 x i8*]* %217, metadata !6298, metadata !DIExpression()), !dbg !6220
  store i64 0, i64* %216, align 8, !dbg !6221
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %218 = load i64, i64* %19, align 8, !dbg !6224
  %219 = icmp ult i64 %218, 10, !dbg !6226
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %220 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !6228
  %221 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %220, i32 0, i32 0, !dbg !6228
  %222 = load i32, i32* %221, align 8, !dbg !6228
  %223 = icmp ule i32 %222, 40, !dbg !6228
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %224 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !6228
  %225 = load i8*, i8** %224, align 8, !dbg !6228
  %226 = getelementptr i8, i8* %225, i32 %59, !dbg !6228
  %227 = bitcast i8* %226 to i8**, !dbg !6228
  %_ = sub i32 0, %59
  %gen = add i32 %_, 8
  %_11 = shl i32 %59, 8
  %_12 = shl i32 %59, 8
  %_13 = sub i32 0, %59
  %gen14 = add i32 %_13, 8
  %_15 = sub i32 0, %59
  %gen16 = add i32 %_15, 8
  %_17 = sub i32 %59, 8
  %gen18 = mul i32 %_17, 8
  %228 = add i32 %59, 8, !dbg !6228
  store i32 %228, i32* %58, align 8, !dbg !6228
  br label %originalBB10

originalBB22alteredBB:                            ; preds = %originalBB22, %91
  %229 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !6228
  %230 = load i8*, i8** %229, align 8, !dbg !6228
  %231 = bitcast i8* %230 to i8**, !dbg !6228
  %232 = getelementptr i8, i8* %230, i32 8, !dbg !6228
  store i8* %232, i8** %229, align 8, !dbg !6228
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %112
  %233 = load i8*, i8** %113, align 8, !dbg !6228
  %234 = load i64, i64* %19, align 8, !dbg !6229
  %235 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %234, !dbg !6230
  store i8* %233, i8** %235, align 8, !dbg !6231
  %236 = icmp ne i8* %233, null, !dbg !6232
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %134
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %152
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %169
  %237 = load i64, i64* %19, align 8, !dbg !6235
  %_39 = sub i64 %237, 1
  %gen40 = mul i64 %_39, 1
  %_41 = sub i64 0, %237
  %gen42 = add i64 %_41, 1
  %238 = add i64 %237, 1, !dbg !6235
  store i64 %238, i64* %19, align 8, !dbg !6235
  br label %originalBB38

originalBB46alteredBB:                            ; preds = %originalBB46, %188
  %239 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !6239
  %240 = load i8*, i8** %15, align 8, !dbg !6240
  %241 = load i8*, i8** %16, align 8, !dbg !6241
  %242 = load i8*, i8** %17, align 8, !dbg !6242
  %243 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !6243
  %244 = load i64, i64* %19, align 8, !dbg !6244
  call void @version_etc_arn(%struct._IO_FILE* %239, i8* %240, i8* %241, i8* %242, i8** %243, i64 %244), !dbg !6245
  br label %originalBB46
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !6299 {
  %5 = load i32, i32* @x.91
  %6 = load i32, i32* @y.92
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !6302, metadata !DIExpression()), !dbg !6303
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !6304, metadata !DIExpression()), !dbg !6305
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !6306, metadata !DIExpression()), !dbg !6307
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !6308, metadata !DIExpression()), !dbg !6309
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !6310, metadata !DIExpression()), !dbg !6317
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !6318
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !6318
  call void @llvm.va_start(i8* %19), !dbg !6318
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6319
  %21 = load i8*, i8** %14, align 8, !dbg !6320
  %22 = load i8*, i8** %15, align 8, !dbg !6321
  %23 = load i8*, i8** %16, align 8, !dbg !6322
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !6323
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !6324
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !6325
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !6325
  call void @llvm.va_end(i8* %26), !dbg !6325
  %27 = load i32, i32* @x.91
  %28 = load i32, i32* @y.92
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !6326

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !6327, metadata !DIExpression()), !dbg !6303
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !6366, metadata !DIExpression()), !dbg !6305
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !6367, metadata !DIExpression()), !dbg !6307
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !6368, metadata !DIExpression()), !dbg !6309
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !6369, metadata !DIExpression()), !dbg !6317
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !6318
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !6318
  call void @llvm.va_start(i8* %41), !dbg !6318
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !6319
  %43 = load i8*, i8** %36, align 8, !dbg !6320
  %44 = load i8*, i8** %37, align 8, !dbg !6321
  %45 = load i8*, i8** %38, align 8, !dbg !6322
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !6323
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !6324
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !6325
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !6325
  call void @llvm.va_end(i8* %48), !dbg !6325
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !6380 {
  %2 = load i32, i32* @x.93
  %3 = load i32, i32* @y.94
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !6384, metadata !DIExpression()), !dbg !6385
  call void @llvm.dbg.declare(metadata i8** %11, metadata !6386, metadata !DIExpression()), !dbg !6387
  %12 = load i64, i64* %10, align 8, !dbg !6388
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !6389
  store i8* %13, i8** %11, align 8, !dbg !6387
  %14 = load i8*, i8** %11, align 8, !dbg !6390
  %15 = icmp ne i8* %14, null, !dbg !6390
  %16 = load i32, i32* @x.93
  %17 = load i32, i32* @y.94
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %60, label %24, !dbg !6392

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.93
  %26 = load i32, i32* @y.94
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !6393
  %34 = icmp ne i64 %33, 0, !dbg !6394
  %35 = load i32, i32* @x.93
  %36 = load i32, i32* @y.94
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %60, !dbg !6395

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.93
  %45 = load i32, i32* @y.94
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !6396
  %52 = load i32, i32* @x.93
  %53 = load i32, i32* @y.94
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !6396

60:                                               ; preds = %originalBBpart24, %originalBBpart2
  %61 = load i32, i32* @x.93
  %62 = load i32, i32* @y.94
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = load i8*, i8** %11, align 8, !dbg !6397
  %70 = load i32, i32* @x.93
  %71 = load i32, i32* @y.94
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %69, !dbg !6398

originalBBalteredBB:                              ; preds = %originalBB, %1
  %78 = alloca i64, align 8
  %79 = alloca i8*, align 8
  store i64 %0, i64* %78, align 8
  call void @llvm.dbg.declare(metadata i64* %78, metadata !6399, metadata !DIExpression()), !dbg !6385
  call void @llvm.dbg.declare(metadata i8** %79, metadata !6402, metadata !DIExpression()), !dbg !6387
  %80 = load i64, i64* %78, align 8, !dbg !6388
  %81 = call noalias i8* @malloc(i64 %80) #10, !dbg !6389
  store i8* %81, i8** %79, align 8, !dbg !6387
  %82 = load i8*, i8** %79, align 8, !dbg !6390
  %83 = icmp ne i8* %82, null, !dbg !6390
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %84 = load i64, i64* %10, align 8, !dbg !6393
  %85 = icmp ne i64 %84, 0, !dbg !6394
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  call void @xalloc_die() #14, !dbg !6396
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %86 = load i8*, i8** %11, align 8, !dbg !6397
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !6403 {
  %3 = load i32, i32* @x.95
  %4 = load i32, i32* @y.96
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !6406, metadata !DIExpression()), !dbg !6407
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !6408, metadata !DIExpression()), !dbg !6409
  %14 = load i64, i64* %13, align 8, !dbg !6410
  %15 = icmp ne i64 %14, 0, !dbg !6410
  %16 = load i32, i32* @x.95
  %17 = load i32, i32* @y.96
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %61, label %24, !dbg !6412

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.95
  %26 = load i32, i32* @y.96
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !6413
  %34 = icmp ne i8* %33, null, !dbg !6413
  %35 = load i32, i32* @x.95
  %36 = load i32, i32* @y.96
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %61, !dbg !6414

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.95
  %45 = load i32, i32* @y.96
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i8*, i8** %12, align 8, !dbg !6415
  call void @free(i8* %52) #10, !dbg !6417
  store i8* null, i8** %11, align 8, !dbg !6418
  %53 = load i32, i32* @x.95
  %54 = load i32, i32* @y.96
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %137, !dbg !6418

61:                                               ; preds = %originalBBpart24, %originalBBpart2
  %62 = load i32, i32* @x.95
  %63 = load i32, i32* @y.96
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %12, align 8, !dbg !6419
  %71 = load i64, i64* %13, align 8, !dbg !6420
  %72 = call i8* @realloc(i8* %70, i64 %71) #10, !dbg !6421
  store i8* %72, i8** %12, align 8, !dbg !6422
  %73 = load i8*, i8** %12, align 8, !dbg !6423
  %74 = icmp ne i8* %73, null, !dbg !6423
  %75 = load i32, i32* @x.95
  %76 = load i32, i32* @y.96
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %74, label %119, label %83, !dbg !6425

83:                                               ; preds = %originalBBpart212
  %84 = load i32, i32* @x.95
  %85 = load i32, i32* @y.96
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %83, %originalBB14alteredBB
  %92 = load i64, i64* %13, align 8, !dbg !6426
  %93 = icmp ne i64 %92, 0, !dbg !6426
  %94 = load i32, i32* @x.95
  %95 = load i32, i32* @y.96
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %93, label %102, label %119, !dbg !6427

102:                                              ; preds = %originalBBpart216
  %103 = load i32, i32* @x.95
  %104 = load i32, i32* @y.96
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  call void @xalloc_die() #14, !dbg !6428
  %111 = load i32, i32* @x.95
  %112 = load i32, i32* @y.96
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !6428

119:                                              ; preds = %originalBBpart216, %originalBBpart212
  %120 = load i32, i32* @x.95
  %121 = load i32, i32* @y.96
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %119, %originalBB22alteredBB
  %128 = load i8*, i8** %12, align 8, !dbg !6429
  store i8* %128, i8** %11, align 8, !dbg !6430
  %129 = load i32, i32* @x.95
  %130 = load i32, i32* @y.96
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %137, !dbg !6430

137:                                              ; preds = %originalBBpart224, %originalBBpart28
  %138 = load i32, i32* @x.95
  %139 = load i32, i32* @y.96
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %137, %originalBB26alteredBB
  %146 = load i8*, i8** %11, align 8, !dbg !6431
  %147 = load i32, i32* @x.95
  %148 = load i32, i32* @y.96
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %146, !dbg !6431

originalBBalteredBB:                              ; preds = %originalBB, %2
  %155 = alloca i8*, align 8
  %156 = alloca i8*, align 8
  %157 = alloca i64, align 8
  store i8* %0, i8** %156, align 8
  call void @llvm.dbg.declare(metadata i8** %156, metadata !6432, metadata !DIExpression()), !dbg !6407
  store i64 %1, i64* %157, align 8
  call void @llvm.dbg.declare(metadata i64* %157, metadata !6435, metadata !DIExpression()), !dbg !6409
  %158 = load i64, i64* %157, align 8, !dbg !6410
  %159 = icmp ne i64 %158, 0, !dbg !6410
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %160 = load i8*, i8** %12, align 8, !dbg !6413
  %161 = icmp ne i8* %160, null, !dbg !6413
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %162 = load i8*, i8** %12, align 8, !dbg !6415
  call void @free(i8* %162) #10, !dbg !6417
  store i8* null, i8** %11, align 8, !dbg !6418
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %163 = load i8*, i8** %12, align 8, !dbg !6419
  %164 = load i64, i64* %13, align 8, !dbg !6420
  %165 = call i8* @realloc(i8* %163, i64 %164) #10, !dbg !6421
  store i8* %165, i8** %12, align 8, !dbg !6422
  %166 = load i8*, i8** %12, align 8, !dbg !6423
  %167 = icmp ne i8* %166, null, !dbg !6423
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %83
  %168 = load i64, i64* %13, align 8, !dbg !6426
  %169 = icmp ne i64 %168, 0, !dbg !6426
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  call void @xalloc_die() #14, !dbg !6428
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %119
  %170 = load i8*, i8** %12, align 8, !dbg !6429
  store i8* %170, i8** %11, align 8, !dbg !6430
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %137
  %171 = load i8*, i8** %11, align 8, !dbg !6431
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @x2nrealloc(i8*, i64*, i64) #4 !dbg !6436 {
  %4 = load i32, i32* @x.97
  %5 = load i32, i32* @y.98
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !6441, metadata !DIExpression()), !dbg !6442
  store i64* %1, i64** %13, align 8
  call void @llvm.dbg.declare(metadata i64** %13, metadata !6443, metadata !DIExpression()), !dbg !6444
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !6445, metadata !DIExpression()), !dbg !6446
  call void @llvm.dbg.declare(metadata i64* %15, metadata !6447, metadata !DIExpression()), !dbg !6448
  %16 = load i64*, i64** %13, align 8, !dbg !6449
  %17 = load i64, i64* %16, align 8, !dbg !6450
  store i64 %17, i64* %15, align 8, !dbg !6448
  %18 = load i8*, i8** %12, align 8, !dbg !6451
  %19 = icmp ne i8* %18, null, !dbg !6451
  %20 = load i32, i32* @x.97
  %21 = load i32, i32* @y.98
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %19, label %128, label %28, !dbg !6453

28:                                               ; preds = %originalBBpart2
  %29 = load i32, i32* @x.97
  %30 = load i32, i32* @y.98
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = load i64, i64* %15, align 8, !dbg !6454
  %38 = icmp ne i64 %37, 0, !dbg !6454
  %39 = load i32, i32* @x.97
  %40 = load i32, i32* @y.98
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %73, label %47, !dbg !6457

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.97
  %49 = load i32, i32* @y.98
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i64, i64* %14, align 8, !dbg !6458
  %57 = udiv i64 128, %56, !dbg !6460
  store i64 %57, i64* %15, align 8, !dbg !6461
  %58 = load i64, i64* %15, align 8, !dbg !6462
  %59 = icmp ne i64 %58, 0, !dbg !6463
  %60 = xor i1 %59, true, !dbg !6463
  %61 = zext i1 %60 to i32, !dbg !6463
  %62 = sext i32 %61 to i64, !dbg !6463
  %63 = load i64, i64* %15, align 8, !dbg !6464
  %64 = add i64 %63, %62, !dbg !6464
  store i64 %64, i64* %15, align 8, !dbg !6464
  %65 = load i32, i32* @x.97
  %66 = load i32, i32* @y.98
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart232, label %originalBB6alteredBB

originalBBpart232:                                ; preds = %originalBB6
  br label %73, !dbg !6465

73:                                               ; preds = %originalBBpart232, %originalBBpart24
  %74 = load i32, i32* @x.97
  %75 = load i32, i32* @y.98
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %73, %originalBB34alteredBB
  %82 = load i64, i64* %14, align 8, !dbg !6466
  %83 = udiv i64 9223372036854775807, %82, !dbg !6466
  %84 = load i64, i64* %15, align 8, !dbg !6466
  %85 = icmp ult i64 %83, %84, !dbg !6466
  %86 = load i32, i32* @x.97
  %87 = load i32, i32* @y.98
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBBpart248, label %originalBB34alteredBB

originalBBpart248:                                ; preds = %originalBB34
  br i1 %85, label %94, label %111, !dbg !6468

94:                                               ; preds = %originalBBpart248
  %95 = load i32, i32* @x.97
  %96 = load i32, i32* @y.98
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %94, %originalBB50alteredBB
  call void @xalloc_die() #14, !dbg !6469
  %103 = load i32, i32* @x.97
  %104 = load i32, i32* @y.98
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  unreachable, !dbg !6469

111:                                              ; preds = %originalBBpart248
  %112 = load i32, i32* @x.97
  %113 = load i32, i32* @y.98
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %111, %originalBB54alteredBB
  %120 = load i32, i32* @x.97
  %121 = load i32, i32* @y.98
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %188, !dbg !6470

128:                                              ; preds = %originalBBpart2
  %129 = load i32, i32* @x.97
  %130 = load i32, i32* @y.98
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %128, %originalBB58alteredBB
  %137 = load i64, i64* %14, align 8, !dbg !6471
  %138 = udiv i64 6148914691236517204, %137, !dbg !6474
  %139 = load i64, i64* %15, align 8, !dbg !6475
  %140 = icmp ule i64 %138, %139, !dbg !6476
  %141 = load i32, i32* @x.97
  %142 = load i32, i32* @y.98
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart272, label %originalBB58alteredBB

originalBBpart272:                                ; preds = %originalBB58
  br i1 %140, label %149, label %166, !dbg !6477

149:                                              ; preds = %originalBBpart272
  %150 = load i32, i32* @x.97
  %151 = load i32, i32* @y.98
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %149, %originalBB74alteredBB
  call void @xalloc_die() #14, !dbg !6478
  %158 = load i32, i32* @x.97
  %159 = load i32, i32* @y.98
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  unreachable, !dbg !6478

166:                                              ; preds = %originalBBpart272
  %167 = load i32, i32* @x.97
  %168 = load i32, i32* @y.98
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %166, %originalBB78alteredBB
  %175 = load i64, i64* %15, align 8, !dbg !6479
  %176 = udiv i64 %175, 2, !dbg !6480
  %177 = add i64 %176, 1, !dbg !6481
  %178 = load i64, i64* %15, align 8, !dbg !6482
  %179 = add i64 %178, %177, !dbg !6482
  store i64 %179, i64* %15, align 8, !dbg !6482
  %180 = load i32, i32* @x.97
  %181 = load i32, i32* @y.98
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart2100, label %originalBB78alteredBB

originalBBpart2100:                               ; preds = %originalBB78
  br label %188

188:                                              ; preds = %originalBBpart2100, %originalBBpart256
  %189 = load i32, i32* @x.97
  %190 = load i32, i32* @y.98
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %188, %originalBB102alteredBB
  %197 = load i64, i64* %15, align 8, !dbg !6483
  %198 = load i64*, i64** %13, align 8, !dbg !6484
  store i64 %197, i64* %198, align 8, !dbg !6485
  %199 = load i8*, i8** %12, align 8, !dbg !6486
  %200 = load i64, i64* %15, align 8, !dbg !6487
  %201 = load i64, i64* %14, align 8, !dbg !6488
  %202 = mul i64 %200, %201, !dbg !6489
  %203 = call i8* @xrealloc(i8* %199, i64 %202), !dbg !6490
  %204 = load i32, i32* @x.97
  %205 = load i32, i32* @y.98
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBBpart2106, label %originalBB102alteredBB

originalBBpart2106:                               ; preds = %originalBB102
  ret i8* %203, !dbg !6491

originalBBalteredBB:                              ; preds = %originalBB, %3
  %212 = alloca i8*, align 8
  %213 = alloca i64*, align 8
  %214 = alloca i64, align 8
  %215 = alloca i64, align 8
  store i8* %0, i8** %212, align 8
  call void @llvm.dbg.declare(metadata i8** %212, metadata !6492, metadata !DIExpression()), !dbg !6442
  store i64* %1, i64** %213, align 8
  call void @llvm.dbg.declare(metadata i64** %213, metadata !6495, metadata !DIExpression()), !dbg !6444
  store i64 %2, i64* %214, align 8
  call void @llvm.dbg.declare(metadata i64* %214, metadata !6496, metadata !DIExpression()), !dbg !6446
  call void @llvm.dbg.declare(metadata i64* %215, metadata !6497, metadata !DIExpression()), !dbg !6448
  %216 = load i64*, i64** %213, align 8, !dbg !6449
  %217 = load i64, i64* %216, align 8, !dbg !6450
  store i64 %217, i64* %215, align 8, !dbg !6448
  %218 = load i8*, i8** %212, align 8, !dbg !6451
  %219 = icmp ne i8* %218, null, !dbg !6451
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %220 = load i64, i64* %15, align 8, !dbg !6454
  %221 = icmp ne i64 %220, 0, !dbg !6454
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %222 = load i64, i64* %14, align 8, !dbg !6458
  %_ = shl i64 128, %222
  %_7 = sub i64 128, %222
  %gen = mul i64 %_7, %222
  %_8 = sub i64 0, 128
  %gen9 = add i64 %_8, %222
  %_10 = shl i64 128, %222
  %_11 = sub i64 0, 128
  %gen12 = add i64 %_11, %222
  %_13 = sub i64 128, %222
  %gen14 = mul i64 %_13, %222
  %_15 = sub i64 0, 128
  %gen16 = add i64 %_15, %222
  %223 = udiv i64 128, %222, !dbg !6460
  store i64 %223, i64* %15, align 8, !dbg !6461
  %224 = load i64, i64* %15, align 8, !dbg !6462
  %225 = icmp ne i64 %224, 0, !dbg !6463
  %226 = xor i1 %225, true, !dbg !6463
  %227 = zext i1 %226 to i32, !dbg !6463
  %228 = sext i32 %227 to i64, !dbg !6463
  %229 = load i64, i64* %15, align 8, !dbg !6464
  %_17 = sub i64 0, %229
  %gen18 = add i64 %_17, %228
  %_19 = sub i64 %229, %228
  %gen20 = mul i64 %_19, %228
  %_21 = sub i64 0, %229
  %gen22 = add i64 %_21, %228
  %_23 = shl i64 %229, %228
  %_24 = shl i64 %229, %228
  %_25 = sub i64 %229, %228
  %gen26 = mul i64 %_25, %228
  %_27 = sub i64 %229, %228
  %gen28 = mul i64 %_27, %228
  %_29 = sub i64 0, %229
  %gen30 = add i64 %_29, %228
  %230 = add i64 %229, %228, !dbg !6464
  store i64 %230, i64* %15, align 8, !dbg !6464
  br label %originalBB6

originalBB34alteredBB:                            ; preds = %originalBB34, %73
  %231 = load i64, i64* %14, align 8, !dbg !6466
  %_35 = sub i64 0, 9223372036854775807
  %gen36 = add i64 %_35, %231
  %_37 = sub i64 0, 9223372036854775807
  %gen38 = add i64 %_37, %231
  %_39 = sub i64 0, 9223372036854775807
  %gen40 = add i64 %_39, %231
  %_41 = sub i64 0, 9223372036854775807
  %gen42 = add i64 %_41, %231
  %_43 = shl i64 9223372036854775807, %231
  %_44 = shl i64 9223372036854775807, %231
  %_45 = sub i64 9223372036854775807, %231
  %gen46 = mul i64 %_45, %231
  %232 = udiv i64 9223372036854775807, %231, !dbg !6466
  %233 = load i64, i64* %15, align 8, !dbg !6466
  %234 = icmp ult i64 %232, %233, !dbg !6466
  br label %originalBB34

originalBB50alteredBB:                            ; preds = %originalBB50, %94
  call void @xalloc_die() #14, !dbg !6469
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %111
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %128
  %235 = load i64, i64* %14, align 8, !dbg !6471
  %_59 = shl i64 6148914691236517204, %235
  %_60 = sub i64 0, 6148914691236517204
  %gen61 = add i64 %_60, %235
  %_62 = shl i64 6148914691236517204, %235
  %_63 = sub i64 6148914691236517204, %235
  %gen64 = mul i64 %_63, %235
  %_65 = sub i64 6148914691236517204, %235
  %gen66 = mul i64 %_65, %235
  %_67 = sub i64 0, 6148914691236517204
  %gen68 = add i64 %_67, %235
  %_69 = sub i64 6148914691236517204, %235
  %gen70 = mul i64 %_69, %235
  %236 = udiv i64 6148914691236517204, %235, !dbg !6474
  %237 = load i64, i64* %15, align 8, !dbg !6475
  %238 = icmp ule i64 %236, %237, !dbg !6476
  br label %originalBB58

originalBB74alteredBB:                            ; preds = %originalBB74, %149
  call void @xalloc_die() #14, !dbg !6478
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %166
  %239 = load i64, i64* %15, align 8, !dbg !6479
  %_79 = sub i64 0, %239
  %gen80 = add i64 %_79, 2
  %_81 = sub i64 0, %239
  %gen82 = add i64 %_81, 2
  %_83 = sub i64 %239, 2
  %gen84 = mul i64 %_83, 2
  %_85 = sub i64 %239, 2
  %gen86 = mul i64 %_85, 2
  %_87 = shl i64 %239, 2
  %240 = udiv i64 %239, 2, !dbg !6480
  %_88 = sub i64 0, %240
  %gen89 = add i64 %_88, 1
  %_90 = sub i64 0, %240
  %gen91 = add i64 %_90, 1
  %_92 = sub i64 %240, 1
  %gen93 = mul i64 %_92, 1
  %_94 = sub i64 %240, 1
  %gen95 = mul i64 %_94, 1
  %_96 = shl i64 %240, 1
  %241 = add i64 %240, 1, !dbg !6481
  %242 = load i64, i64* %15, align 8, !dbg !6482
  %_97 = sub i64 0, %242
  %gen98 = add i64 %_97, %241
  %243 = add i64 %242, %241, !dbg !6482
  store i64 %243, i64* %15, align 8, !dbg !6482
  br label %originalBB78

originalBB102alteredBB:                           ; preds = %originalBB102, %188
  %244 = load i64, i64* %15, align 8, !dbg !6483
  %245 = load i64*, i64** %13, align 8, !dbg !6484
  store i64 %244, i64* %245, align 8, !dbg !6485
  %246 = load i8*, i8** %12, align 8, !dbg !6486
  %247 = load i64, i64* %15, align 8, !dbg !6487
  %248 = load i64, i64* %14, align 8, !dbg !6488
  %_103 = sub i64 %247, %248
  %gen104 = mul i64 %_103, %248
  %249 = mul i64 %247, %248, !dbg !6489
  %250 = call i8* @xrealloc(i8* %246, i64 %249), !dbg !6490
  br label %originalBB102
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !6498 {
  %2 = load i32, i32* @x.99
  %3 = load i32, i32* @y.100
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !6501, metadata !DIExpression()), !dbg !6502
  %11 = load i64, i64* %10, align 8, !dbg !6503
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !6503
  %13 = load i32, i32* @x.99
  %14 = load i32, i32* @y.100
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !6504

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !6505, metadata !DIExpression()), !dbg !6502
  %22 = load i64, i64* %21, align 8, !dbg !6503
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !6503
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !6508 {
  %1 = load i32, i32* @x.101
  %2 = load i32, i32* @y.102
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !6510
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.165, i64 0, i64 0)) #10, !dbg !6511
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i64 0, i64 0), i8* %10), !dbg !6512
  call void @abort() #12, !dbg !6513
  %11 = load i32, i32* @x.101
  %12 = load i32, i32* @y.102
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !6513

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !6510
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.165, i64 0, i64 0)) #10, !dbg !6511
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i64 0, i64 0), i8* %20), !dbg !6512
  call void @abort() #12, !dbg !6513
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !6514 {
  %5 = load i32, i32* @x.103
  %6 = load i32, i32* @y.104
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !6530, metadata !DIExpression()), !dbg !6531
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !6532, metadata !DIExpression()), !dbg !6533
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !6534, metadata !DIExpression()), !dbg !6535
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !6536, metadata !DIExpression()), !dbg !6537
  call void @llvm.dbg.declare(metadata i64* %18, metadata !6538, metadata !DIExpression()), !dbg !6539
  call void @llvm.dbg.declare(metadata i32* %19, metadata !6540, metadata !DIExpression()), !dbg !6541
  %21 = load i32*, i32** %14, align 8, !dbg !6542
  %22 = icmp ne i32* %21, null, !dbg !6542
  %23 = load i32, i32* @x.103
  %24 = load i32, i32* @y.104
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !6544

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.103
  %33 = load i32, i32* @y.104
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !6545
  %40 = load i32, i32* @x.103
  %41 = load i32, i32* @y.104
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !6546

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.103
  %50 = load i32, i32* @y.104
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !6547
  %58 = load i8*, i8** %15, align 8, !dbg !6548
  %59 = load i64, i64* %16, align 8, !dbg !6549
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !6550
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !6551
  store i64 %61, i64* %18, align 8, !dbg !6552
  %62 = load i64, i64* %18, align 8, !dbg !6553
  %63 = icmp ule i64 -2, %62, !dbg !6555
  %64 = load i32, i32* @x.103
  %65 = load i32, i32* @y.104
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %131, !dbg !6556

72:                                               ; preds = %originalBBpart28
  %73 = load i32, i32* @x.103
  %74 = load i32, i32* @y.104
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %72, %originalBB10alteredBB
  %81 = load i64, i64* %16, align 8, !dbg !6557
  %82 = icmp ne i64 %81, 0, !dbg !6558
  %83 = load i32, i32* @x.103
  %84 = load i32, i32* @y.104
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %131, !dbg !6559

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.103
  %93 = load i32, i32* @y.104
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call zeroext i1 @hard_locale(i32 0), !dbg !6560
  %101 = load i32, i32* @x.103
  %102 = load i32, i32* @y.104
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %100, label %131, label %109, !dbg !6561

109:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8* %20, metadata !6562, metadata !DIExpression()), !dbg !6564
  %110 = load i32, i32* @x.103
  %111 = load i32, i32* @y.104
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = load i8*, i8** %15, align 8, !dbg !6565
  %119 = load i8, i8* %118, align 1, !dbg !6566
  store i8 %119, i8* %20, align 1, !dbg !6564
  %120 = load i8, i8* %20, align 1, !dbg !6567
  %121 = zext i8 %120 to i32, !dbg !6567
  %122 = load i32*, i32** %14, align 8, !dbg !6568
  store i32 %121, i32* %122, align 4, !dbg !6569
  store i64 1, i64* %13, align 8, !dbg !6570
  %123 = load i32, i32* @x.103
  %124 = load i32, i32* @y.104
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %149, !dbg !6570

131:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %132 = load i32, i32* @x.103
  %133 = load i32, i32* @y.104
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i64, i64* %18, align 8, !dbg !6571
  store i64 %140, i64* %13, align 8, !dbg !6572
  %141 = load i32, i32* @x.103
  %142 = load i32, i32* @y.104
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %149, !dbg !6572

149:                                              ; preds = %originalBBpart224, %originalBBpart220
  %150 = load i32, i32* @x.103
  %151 = load i32, i32* @y.104
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  %158 = load i64, i64* %13, align 8, !dbg !6573
  %159 = load i32, i32* @x.103
  %160 = load i32, i32* @y.104
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i64 %158, !dbg !6573

originalBBalteredBB:                              ; preds = %originalBB, %4
  %167 = alloca i64, align 8
  %168 = alloca i32*, align 8
  %169 = alloca i8*, align 8
  %170 = alloca i64, align 8
  %171 = alloca %struct.__mbstate_t*, align 8
  %172 = alloca i64, align 8
  %173 = alloca i32, align 4
  %174 = alloca i8, align 1
  store i32* %0, i32** %168, align 8
  call void @llvm.dbg.declare(metadata i32** %168, metadata !6574, metadata !DIExpression()), !dbg !6531
  store i8* %1, i8** %169, align 8
  call void @llvm.dbg.declare(metadata i8** %169, metadata !6590, metadata !DIExpression()), !dbg !6533
  store i64 %2, i64* %170, align 8
  call void @llvm.dbg.declare(metadata i64* %170, metadata !6591, metadata !DIExpression()), !dbg !6535
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %171, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %171, metadata !6592, metadata !DIExpression()), !dbg !6537
  call void @llvm.dbg.declare(metadata i64* %172, metadata !6593, metadata !DIExpression()), !dbg !6539
  call void @llvm.dbg.declare(metadata i32* %173, metadata !6594, metadata !DIExpression()), !dbg !6541
  %175 = load i32*, i32** %168, align 8, !dbg !6542
  %176 = icmp ne i32* %175, null, !dbg !6542
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !6545
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %177 = load i32*, i32** %14, align 8, !dbg !6547
  %178 = load i8*, i8** %15, align 8, !dbg !6548
  %179 = load i64, i64* %16, align 8, !dbg !6549
  %180 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !6550
  %181 = call i64 @mbrtowc(i32* %177, i8* %178, i64 %179, %struct.__mbstate_t* %180) #10, !dbg !6551
  store i64 %181, i64* %18, align 8, !dbg !6552
  %182 = load i64, i64* %18, align 8, !dbg !6553
  %183 = icmp ule i64 -2, %182, !dbg !6555
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %72
  %184 = load i64, i64* %16, align 8, !dbg !6557
  %185 = icmp ne i64 %184, 0, !dbg !6558
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %186 = call zeroext i1 @hard_locale(i32 0), !dbg !6560
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %187 = load i8*, i8** %15, align 8, !dbg !6565
  %188 = load i8, i8* %187, align 1, !dbg !6566
  store i8 %188, i8* %20, align 1, !dbg !6564
  %189 = load i8, i8* %20, align 1, !dbg !6567
  %190 = zext i8 %189 to i32, !dbg !6567
  %191 = load i32*, i32** %14, align 8, !dbg !6568
  store i32 %190, i32* %191, align 4, !dbg !6569
  store i64 1, i64* %13, align 8, !dbg !6570
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %192 = load i64, i64* %18, align 8, !dbg !6571
  store i64 %192, i64* %13, align 8, !dbg !6572
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  %193 = load i64, i64* %13, align 8, !dbg !6573
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @extract_trimmed_name(%struct.utmpx*) #4 !dbg !6595 {
  %2 = load i32, i32* @x.105
  %3 = load i32, i32* @y.106
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !6623, metadata !DIExpression()), !dbg !6624
  call void @llvm.dbg.declare(metadata i8** %11, metadata !6625, metadata !DIExpression()), !dbg !6626
  call void @llvm.dbg.declare(metadata i8** %12, metadata !6627, metadata !DIExpression()), !dbg !6628
  %13 = call noalias i8* @xmalloc(i64 33), !dbg !6629
  store i8* %13, i8** %12, align 8, !dbg !6630
  %14 = load i8*, i8** %12, align 8, !dbg !6631
  %15 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !6632
  %16 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %15, i32 0, i32 4, !dbg !6632
  %17 = getelementptr inbounds [32 x i8], [32 x i8]* %16, i64 0, i64 0, !dbg !6632
  %18 = call i8* @strncpy(i8* %14, i8* %17, i64 32) #10, !dbg !6633
  %19 = load i8*, i8** %12, align 8, !dbg !6634
  %20 = getelementptr inbounds i8, i8* %19, i64 32, !dbg !6634
  store i8 0, i8* %20, align 1, !dbg !6635
  %21 = load i8*, i8** %12, align 8, !dbg !6636
  %22 = load i8*, i8** %12, align 8, !dbg !6638
  %23 = call i64 @strlen(i8* %22) #13, !dbg !6639
  %24 = getelementptr inbounds i8, i8* %21, i64 %23, !dbg !6640
  store i8* %24, i8** %11, align 8, !dbg !6641
  %25 = load i32, i32* @x.105
  %26 = load i32, i32* @y.106
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %33, !dbg !6642

33:                                               ; preds = %originalBBpart220, %originalBBpart2
  %34 = load i32, i32* @x.105
  %35 = load i32, i32* @y.106
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %12, align 8, !dbg !6643
  %43 = load i8*, i8** %11, align 8, !dbg !6645
  %44 = icmp ult i8* %42, %43, !dbg !6646
  %45 = load i32, i32* @x.105
  %46 = load i32, i32* @y.106
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %44, label %53, label %75, !dbg !6647

53:                                               ; preds = %originalBBpart24
  %54 = load i32, i32* @x.105
  %55 = load i32, i32* @y.106
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i8*, i8** %11, align 8, !dbg !6648
  %63 = getelementptr inbounds i8, i8* %62, i64 -1, !dbg !6648
  %64 = load i8, i8* %63, align 1, !dbg !6648
  %65 = sext i8 %64 to i32, !dbg !6648
  %66 = icmp eq i32 %65, 32, !dbg !6649
  %67 = load i32, i32* @x.105
  %68 = load i32, i32* @y.106
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %75

75:                                               ; preds = %originalBBpart28, %originalBBpart24
  %76 = phi i1 [ false, %originalBBpart24 ], [ %66, %originalBBpart28 ], !dbg !6650
  %77 = load i32, i32* @x.105
  %78 = load i32, i32* @y.106
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %85 = load i32, i32* @x.105
  %86 = load i32, i32* @y.106
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %76, label %93, label %129, !dbg !6651

93:                                               ; preds = %originalBBpart212
  %94 = load i32, i32* @x.105
  %95 = load i32, i32* @y.106
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  %102 = load i32, i32* @x.105
  %103 = load i32, i32* @y.106
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %110, !dbg !6652

110:                                              ; preds = %originalBBpart216
  %111 = load i32, i32* @x.105
  %112 = load i32, i32* @y.106
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = load i8*, i8** %11, align 8, !dbg !6653
  %120 = getelementptr inbounds i8, i8* %119, i32 -1, !dbg !6653
  store i8* %120, i8** %11, align 8, !dbg !6653
  store i8 0, i8* %120, align 1, !dbg !6654
  %121 = load i32, i32* @x.105
  %122 = load i32, i32* @y.106
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %33, !dbg !6655, !llvm.loop !6656

129:                                              ; preds = %originalBBpart212
  %130 = load i32, i32* @x.105
  %131 = load i32, i32* @y.106
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %129, %originalBB22alteredBB
  %138 = load i8*, i8** %12, align 8, !dbg !6658
  %139 = load i32, i32* @x.105
  %140 = load i32, i32* @y.106
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i8* %138, !dbg !6659

originalBBalteredBB:                              ; preds = %originalBB, %1
  %147 = alloca %struct.utmpx*, align 8
  %148 = alloca i8*, align 8
  %149 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %147, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %147, metadata !6660, metadata !DIExpression()), !dbg !6624
  call void @llvm.dbg.declare(metadata i8** %148, metadata !6689, metadata !DIExpression()), !dbg !6626
  call void @llvm.dbg.declare(metadata i8** %149, metadata !6690, metadata !DIExpression()), !dbg !6628
  %150 = call noalias i8* @xmalloc(i64 33), !dbg !6629
  store i8* %150, i8** %149, align 8, !dbg !6630
  %151 = load i8*, i8** %149, align 8, !dbg !6631
  %152 = load %struct.utmpx*, %struct.utmpx** %147, align 8, !dbg !6632
  %153 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %152, i32 0, i32 4, !dbg !6632
  %154 = getelementptr inbounds [32 x i8], [32 x i8]* %153, i64 0, i64 0, !dbg !6632
  %155 = call i8* @strncpy(i8* %151, i8* %154, i64 32) #10, !dbg !6633
  %156 = load i8*, i8** %149, align 8, !dbg !6634
  %157 = getelementptr inbounds i8, i8* %156, i64 32, !dbg !6634
  store i8 0, i8* %157, align 1, !dbg !6635
  %158 = load i8*, i8** %149, align 8, !dbg !6636
  %159 = load i8*, i8** %149, align 8, !dbg !6638
  %160 = call i64 @strlen(i8* %159) #13, !dbg !6639
  %161 = getelementptr inbounds i8, i8* %158, i64 %160, !dbg !6640
  store i8* %161, i8** %148, align 8, !dbg !6641
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %162 = load i8*, i8** %12, align 8, !dbg !6643
  %163 = load i8*, i8** %11, align 8, !dbg !6645
  %164 = icmp ult i8* %162, %163, !dbg !6646
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %165 = load i8*, i8** %11, align 8, !dbg !6648
  %166 = getelementptr inbounds i8, i8* %165, i64 -1, !dbg !6648
  %167 = load i8, i8* %166, align 1, !dbg !6648
  %168 = sext i8 %167 to i32, !dbg !6648
  %169 = icmp eq i32 %168, 32, !dbg !6649
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %170 = load i8*, i8** %11, align 8, !dbg !6653
  %171 = getelementptr inbounds i8, i8* %170, i32 -1, !dbg !6653
  store i8* %171, i8** %11, align 8, !dbg !6653
  store i8 0, i8* %171, align 1, !dbg !6654
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %129
  %172 = load i8*, i8** %12, align 8, !dbg !6658
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i8* @strncpy(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @read_utmp(i8*, i64*, %struct.utmpx**, i32) #4 !dbg !6691 {
  %5 = load i32, i32* @x.107
  %6 = load i32, i32* @y.108
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i8*, align 8
  %14 = alloca i64*, align 8
  %15 = alloca %struct.utmpx**, align 8
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca %struct.utmpx*, align 8
  %20 = alloca %struct.utmpx*, align 8
  store i8* %0, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !6696, metadata !DIExpression()), !dbg !6697
  store i64* %1, i64** %14, align 8
  call void @llvm.dbg.declare(metadata i64** %14, metadata !6698, metadata !DIExpression()), !dbg !6699
  store %struct.utmpx** %2, %struct.utmpx*** %15, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx*** %15, metadata !6700, metadata !DIExpression()), !dbg !6701
  store i32 %3, i32* %16, align 4
  call void @llvm.dbg.declare(metadata i32* %16, metadata !6702, metadata !DIExpression()), !dbg !6703
  call void @llvm.dbg.declare(metadata i64* %17, metadata !6704, metadata !DIExpression()), !dbg !6705
  store i64 0, i64* %17, align 8, !dbg !6705
  call void @llvm.dbg.declare(metadata i64* %18, metadata !6706, metadata !DIExpression()), !dbg !6707
  store i64 0, i64* %18, align 8, !dbg !6707
  call void @llvm.dbg.declare(metadata %struct.utmpx** %19, metadata !6708, metadata !DIExpression()), !dbg !6709
  store %struct.utmpx* null, %struct.utmpx** %19, align 8, !dbg !6709
  call void @llvm.dbg.declare(metadata %struct.utmpx** %20, metadata !6710, metadata !DIExpression()), !dbg !6711
  %21 = load i8*, i8** %13, align 8, !dbg !6712
  %22 = call i32 @utmpxname(i8* %21), !dbg !6713
  call void @setutxent(), !dbg !6714
  %23 = load i32, i32* @x.107
  %24 = load i32, i32* @y.108
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %31, !dbg !6715

31:                                               ; preds = %originalBBpart238, %originalBBpart2
  %32 = load i32, i32* @x.107
  %33 = load i32, i32* @y.108
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = call %struct.utmpx* @getutxent(), !dbg !6716
  store %struct.utmpx* %40, %struct.utmpx** %20, align 8, !dbg !6717
  %41 = icmp ne %struct.utmpx* %40, null, !dbg !6718
  %42 = load i32, i32* @x.107
  %43 = load i32, i32* @y.108
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %41, label %50, label %152, !dbg !6715

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.107
  %52 = load i32, i32* @y.108
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %59 = load %struct.utmpx*, %struct.utmpx** %20, align 8, !dbg !6719
  %60 = load i32, i32* %16, align 4, !dbg !6721
  %61 = call zeroext i1 @desirable_utmp_entry(%struct.utmpx* %59, i32 %60), !dbg !6722
  %62 = load i32, i32* @x.107
  %63 = load i32, i32* @y.108
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %61, label %70, label %135, !dbg !6723

70:                                               ; preds = %originalBBpart28
  %71 = load i32, i32* @x.107
  %72 = load i32, i32* @y.108
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %70, %originalBB10alteredBB
  %79 = load i64, i64* %17, align 8, !dbg !6724
  %80 = load i64, i64* %18, align 8, !dbg !6727
  %81 = icmp eq i64 %79, %80, !dbg !6728
  %82 = load i32, i32* @x.107
  %83 = load i32, i32* @y.108
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %81, label %90, label %111, !dbg !6729

90:                                               ; preds = %originalBBpart212
  %91 = load i32, i32* @x.107
  %92 = load i32, i32* @y.108
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %90, %originalBB14alteredBB
  %99 = load %struct.utmpx*, %struct.utmpx** %19, align 8, !dbg !6730
  %100 = bitcast %struct.utmpx* %99 to i8*, !dbg !6730
  %101 = call i8* @x2nrealloc(i8* %100, i64* %18, i64 384), !dbg !6731
  %102 = bitcast i8* %101 to %struct.utmpx*, !dbg !6731
  store %struct.utmpx* %102, %struct.utmpx** %19, align 8, !dbg !6732
  %103 = load i32, i32* @x.107
  %104 = load i32, i32* @y.108
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %111, !dbg !6733

111:                                              ; preds = %originalBBpart216, %originalBBpart212
  %112 = load i32, i32* @x.107
  %113 = load i32, i32* @y.108
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %111, %originalBB18alteredBB
  %120 = load %struct.utmpx*, %struct.utmpx** %19, align 8, !dbg !6734
  %121 = load i64, i64* %17, align 8, !dbg !6735
  %122 = add i64 %121, 1, !dbg !6735
  store i64 %122, i64* %17, align 8, !dbg !6735
  %123 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %120, i64 %121, !dbg !6734
  %124 = load %struct.utmpx*, %struct.utmpx** %20, align 8, !dbg !6736
  %125 = bitcast %struct.utmpx* %123 to i8*, !dbg !6737
  %126 = bitcast %struct.utmpx* %124 to i8*, !dbg !6737
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %125, i8* align 4 %126, i64 384, i1 false), !dbg !6737
  %127 = load i32, i32* @x.107
  %128 = load i32, i32* @y.108
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart234, label %originalBB18alteredBB

originalBBpart234:                                ; preds = %originalBB18
  br label %135, !dbg !6738

135:                                              ; preds = %originalBBpart234, %originalBBpart28
  %136 = load i32, i32* @x.107
  %137 = load i32, i32* @y.108
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %135, %originalBB36alteredBB
  %144 = load i32, i32* @x.107
  %145 = load i32, i32* @y.108
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br label %31, !dbg !6715, !llvm.loop !6739

152:                                              ; preds = %originalBBpart24
  %153 = load i32, i32* @x.107
  %154 = load i32, i32* @y.108
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %152, %originalBB40alteredBB
  call void @endutxent(), !dbg !6741
  %161 = load i64, i64* %17, align 8, !dbg !6742
  %162 = load i64*, i64** %14, align 8, !dbg !6743
  store i64 %161, i64* %162, align 8, !dbg !6744
  %163 = load %struct.utmpx*, %struct.utmpx** %19, align 8, !dbg !6745
  %164 = load %struct.utmpx**, %struct.utmpx*** %15, align 8, !dbg !6746
  store %struct.utmpx* %163, %struct.utmpx** %164, align 8, !dbg !6747
  %165 = load i32, i32* @x.107
  %166 = load i32, i32* @y.108
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  ret i32 0, !dbg !6748

originalBBalteredBB:                              ; preds = %originalBB, %4
  %173 = alloca i8*, align 8
  %174 = alloca i64*, align 8
  %175 = alloca %struct.utmpx**, align 8
  %176 = alloca i32, align 4
  %177 = alloca i64, align 8
  %178 = alloca i64, align 8
  %179 = alloca %struct.utmpx*, align 8
  %180 = alloca %struct.utmpx*, align 8
  store i8* %0, i8** %173, align 8
  call void @llvm.dbg.declare(metadata i8** %173, metadata !6749, metadata !DIExpression()), !dbg !6697
  store i64* %1, i64** %174, align 8
  call void @llvm.dbg.declare(metadata i64** %174, metadata !6778, metadata !DIExpression()), !dbg !6699
  store %struct.utmpx** %2, %struct.utmpx*** %175, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx*** %175, metadata !6779, metadata !DIExpression()), !dbg !6701
  store i32 %3, i32* %176, align 4
  call void @llvm.dbg.declare(metadata i32* %176, metadata !6780, metadata !DIExpression()), !dbg !6703
  call void @llvm.dbg.declare(metadata i64* %177, metadata !6781, metadata !DIExpression()), !dbg !6705
  store i64 0, i64* %177, align 8, !dbg !6705
  call void @llvm.dbg.declare(metadata i64* %178, metadata !6782, metadata !DIExpression()), !dbg !6707
  store i64 0, i64* %178, align 8, !dbg !6707
  call void @llvm.dbg.declare(metadata %struct.utmpx** %179, metadata !6783, metadata !DIExpression()), !dbg !6709
  store %struct.utmpx* null, %struct.utmpx** %179, align 8, !dbg !6709
  call void @llvm.dbg.declare(metadata %struct.utmpx** %180, metadata !6784, metadata !DIExpression()), !dbg !6711
  %181 = load i8*, i8** %173, align 8, !dbg !6712
  %182 = call i32 @utmpxname(i8* %181), !dbg !6713
  call void @setutxent(), !dbg !6714
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %183 = call %struct.utmpx* @getutxent(), !dbg !6716
  store %struct.utmpx* %183, %struct.utmpx** %20, align 8, !dbg !6717
  %184 = icmp ne %struct.utmpx* %183, null, !dbg !6718
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %185 = load %struct.utmpx*, %struct.utmpx** %20, align 8, !dbg !6719
  %186 = load i32, i32* %16, align 4, !dbg !6721
  %187 = call zeroext i1 @desirable_utmp_entry(%struct.utmpx* %185, i32 %186), !dbg !6722
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %70
  %188 = load i64, i64* %17, align 8, !dbg !6724
  %189 = load i64, i64* %18, align 8, !dbg !6727
  %190 = icmp eq i64 %188, %189, !dbg !6728
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %90
  %191 = load %struct.utmpx*, %struct.utmpx** %19, align 8, !dbg !6730
  %192 = bitcast %struct.utmpx* %191 to i8*, !dbg !6730
  %193 = call i8* @x2nrealloc(i8* %192, i64* %18, i64 384), !dbg !6731
  %194 = bitcast i8* %193 to %struct.utmpx*, !dbg !6731
  store %struct.utmpx* %194, %struct.utmpx** %19, align 8, !dbg !6732
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %111
  %195 = load %struct.utmpx*, %struct.utmpx** %19, align 8, !dbg !6734
  %196 = load i64, i64* %17, align 8, !dbg !6735
  %_ = sub i64 0, %196
  %gen = add i64 %_, 1
  %_19 = sub i64 0, %196
  %gen20 = add i64 %_19, 1
  %_21 = sub i64 %196, 1
  %gen22 = mul i64 %_21, 1
  %_23 = sub i64 0, %196
  %gen24 = add i64 %_23, 1
  %_25 = sub i64 0, %196
  %gen26 = add i64 %_25, 1
  %_27 = sub i64 0, %196
  %gen28 = add i64 %_27, 1
  %_29 = sub i64 %196, 1
  %gen30 = mul i64 %_29, 1
  %_31 = sub i64 0, %196
  %gen32 = add i64 %_31, 1
  %197 = add i64 %196, 1, !dbg !6735
  store i64 %197, i64* %17, align 8, !dbg !6735
  %198 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %195, i64 %196, !dbg !6734
  %199 = load %struct.utmpx*, %struct.utmpx** %20, align 8, !dbg !6736
  %200 = bitcast %struct.utmpx* %198 to i8*, !dbg !6737
  %201 = bitcast %struct.utmpx* %199 to i8*, !dbg !6737
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %200, i8* align 4 %201, i64 384, i1 false), !dbg !6737
  br label %originalBB18

originalBB36alteredBB:                            ; preds = %originalBB36, %135
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %152
  call void @endutxent(), !dbg !6741
  %202 = load i64, i64* %17, align 8, !dbg !6742
  %203 = load i64*, i64** %14, align 8, !dbg !6743
  store i64 %202, i64* %203, align 8, !dbg !6744
  %204 = load %struct.utmpx*, %struct.utmpx** %19, align 8, !dbg !6745
  %205 = load %struct.utmpx**, %struct.utmpx*** %15, align 8, !dbg !6746
  store %struct.utmpx* %204, %struct.utmpx** %205, align 8, !dbg !6747
  br label %originalBB40
}

declare dso_local i32 @utmpxname(i8*) #3

declare dso_local void @setutxent() #3

declare dso_local %struct.utmpx* @getutxent() #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @desirable_utmp_entry(%struct.utmpx*, i32) #4 !dbg !6785 {
  %3 = load i32, i32* @x.109
  %4 = load i32, i32* @y.110
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i1, align 1
  %12 = alloca %struct.utmpx*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  store %struct.utmpx* %0, %struct.utmpx** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %12, metadata !6788, metadata !DIExpression()), !dbg !6789
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !6790, metadata !DIExpression()), !dbg !6791
  call void @llvm.dbg.declare(metadata i8* %14, metadata !6792, metadata !DIExpression()), !dbg !6793
  %15 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !6794
  %16 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %15, i32 0, i32 4, !dbg !6794
  %17 = getelementptr inbounds [32 x i8], [32 x i8]* %16, i64 0, i64 0, !dbg !6794
  %18 = load i8, i8* %17, align 4, !dbg !6794
  %19 = sext i8 %18 to i32, !dbg !6794
  %20 = icmp ne i32 %19, 0, !dbg !6794
  %21 = load i32, i32* @x.109
  %22 = load i32, i32* @y.110
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %276, !dbg !6794

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.109
  %31 = load i32, i32* @y.110
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !6794
  %39 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %38, i32 0, i32 0, !dbg !6794
  %40 = load i16, i16* %39, align 4, !dbg !6794
  %41 = sext i16 %40 to i32, !dbg !6794
  %42 = load i32, i32* @x.109
  %43 = load i32, i32* @y.110
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %50, !dbg !6794

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.109
  %52 = load i32, i32* @y.110
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %collatzVar = alloca i32
  %59 = load i32, i32* @x.109
  %60 = load i32, i32* @y.110
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %67

67:                                               ; preds = %originalBBpart28
  %68 = load i32, i32* @x.109
  %69 = load i32, i32* @y.110
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %76 = load i32, i32* @inVal0
  %77 = icmp sgt i32 %76, 1
  %78 = load i32, i32* @x.109
  %79 = load i32, i32* @y.110
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %77, label %103, label %86

86:                                               ; preds = %originalBBpart212
  %87 = load i32, i32* @x.109
  %88 = load i32, i32* @y.110
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %86, %originalBB14alteredBB
  store i32 52, i32* %collatzVar
  %95 = load i32, i32* @x.109
  %96 = load i32, i32* @y.110
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %103

103:                                              ; preds = %originalBBpart216, %originalBBpart212
  %104 = load i32, i32* @x.109
  %105 = load i32, i32* @y.110
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %103, %originalBB18alteredBB
  %112 = load i8**, i8*** @inVal1
  %113 = getelementptr inbounds i8*, i8** %112, i64 1
  %114 = load i8*, i8** %113
  %controle = call i32 @controle(i8* %114, i32 7)
  store i32 %controle, i32* %collatzVar
  %115 = load i32, i32* @x.109
  %116 = load i32, i32* @y.110
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %123

123:                                              ; preds = %originalBBpart280, %originalBBpart268, %originalBBpart220
  %124 = load i32, i32* @x.109
  %125 = load i32, i32* @y.110
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %123, %originalBB22alteredBB
  %132 = load i32, i32* %collatzVar
  %133 = icmp sgt i32 %132, 1
  %134 = load i32, i32* @x.109
  %135 = load i32, i32* @y.110
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %133, label %142, label %241

142:                                              ; preds = %originalBBpart224
  %143 = load i32, i32* @x.109
  %144 = load i32, i32* @y.110
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %142, %originalBB26alteredBB
  %151 = load i32, i32* %collatzVar
  %152 = srem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = load i32, i32* @x.109
  %155 = load i32, i32* @y.110
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %153, label %162, label %181

162:                                              ; preds = %originalBBpart228
  %163 = load i32, i32* @x.109
  %164 = load i32, i32* @y.110
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %162, %originalBB30alteredBB
  %171 = load i32, i32* %collatzVar
  %172 = sdiv i32 %171, 2
  store i32 %172, i32* %collatzVar
  %173 = load i32, i32* @x.109
  %174 = load i32, i32* @y.110
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart243, label %originalBB30alteredBB

originalBBpart243:                                ; preds = %originalBB30
  br label %201

181:                                              ; preds = %originalBBpart228
  %182 = load i32, i32* @x.109
  %183 = load i32, i32* @y.110
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %181, %originalBB45alteredBB
  %190 = load i32, i32* %collatzVar
  %191 = mul i32 %190, 3
  %192 = add i32 %191, 1
  store i32 %192, i32* %collatzVar
  %193 = load i32, i32* @x.109
  %194 = load i32, i32* @y.110
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart260, label %originalBB45alteredBB

originalBBpart260:                                ; preds = %originalBB45
  br label %201

201:                                              ; preds = %originalBBpart260, %originalBBpart243
  %202 = load i32, i32* @x.109
  %203 = load i32, i32* @y.110
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %201, %originalBB62alteredBB
  %210 = load i32, i32* %collatzVar
  %211 = sub i32 %41, %210
  %212 = icmp sgt i32 %211, 5
  %213 = load i32, i32* @x.109
  %214 = load i32, i32* @y.110
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBBpart268, label %originalBB62alteredBB

originalBBpart268:                                ; preds = %originalBB62
  br i1 %212, label %221, label %123

221:                                              ; preds = %originalBBpart268
  %222 = load i32, i32* @x.109
  %223 = load i32, i32* @y.110
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %221, %originalBB70alteredBB
  %230 = load i32, i32* %collatzVar
  %231 = add i32 %41, %230
  %232 = icmp slt i32 %231, 9
  %233 = load i32, i32* @x.109
  %234 = load i32, i32* @y.110
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBBpart280, label %originalBB70alteredBB

originalBBpart280:                                ; preds = %originalBB70
  br i1 %232, label %258, label %123

241:                                              ; preds = %originalBBpart224
  %242 = load i32, i32* @x.109
  %243 = load i32, i32* @y.110
  %244 = sub i32 %242, 1
  %245 = mul i32 %242, %244
  %246 = urem i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %243, 10
  %249 = or i1 %247, %248
  br i1 %249, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %241, %originalBB82alteredBB
  %250 = load i32, i32* @x.109
  %251 = load i32, i32* @y.110
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br label %258, !dbg !6794

258:                                              ; preds = %originalBBpart284, %originalBBpart280
  %259 = phi i1 [ true, %originalBBpart280 ], [ false, %originalBBpart284 ]
  %260 = load i32, i32* @x.109
  %261 = load i32, i32* @y.110
  %262 = sub i32 %260, 1
  %263 = mul i32 %260, %262
  %264 = urem i32 %263, 2
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %265, %266
  br i1 %267, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %258, %originalBB86alteredBB
  %268 = load i32, i32* @x.109
  %269 = load i32, i32* @y.110
  %270 = sub i32 %268, 1
  %271 = mul i32 %268, %270
  %272 = urem i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %273, %274
  br i1 %275, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br label %276

276:                                              ; preds = %originalBBpart288, %originalBBpart2
  %277 = phi i1 [ false, %originalBBpart2 ], [ %259, %originalBBpart288 ], !dbg !6795
  %278 = load i32, i32* @x.109
  %279 = load i32, i32* @y.110
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %276, %originalBB90alteredBB
  %286 = zext i1 %277 to i8, !dbg !6793
  store i8 %286, i8* %14, align 1, !dbg !6793
  %287 = load i32, i32* %13, align 4, !dbg !6796
  %288 = and i32 %287, 2, !dbg !6798
  %289 = icmp ne i32 %288, 0, !dbg !6798
  %290 = load i32, i32* @x.109
  %291 = load i32, i32* @y.110
  %292 = sub i32 %290, 1
  %293 = mul i32 %290, %292
  %294 = urem i32 %293, 2
  %295 = icmp eq i32 %294, 0
  %296 = icmp slt i32 %291, 10
  %297 = or i1 %295, %296
  br i1 %297, label %originalBBpart2103, label %originalBB90alteredBB

originalBBpart2103:                               ; preds = %originalBB90
  br i1 %289, label %298, label %334, !dbg !6799

298:                                              ; preds = %originalBBpart2103
  %299 = load i32, i32* @x.109
  %300 = load i32, i32* @y.110
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %298, %originalBB105alteredBB
  %307 = load i8, i8* %14, align 1, !dbg !6800
  %308 = trunc i8 %307 to i1, !dbg !6800
  %309 = load i32, i32* @x.109
  %310 = load i32, i32* @y.110
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br i1 %308, label %334, label %317, !dbg !6801

317:                                              ; preds = %originalBBpart2107
  %318 = load i32, i32* @x.109
  %319 = load i32, i32* @y.110
  %320 = sub i32 %318, 1
  %321 = mul i32 %318, %320
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %323, %324
  br i1 %325, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %317, %originalBB109alteredBB
  store i1 false, i1* %11, align 1, !dbg !6802
  %326 = load i32, i32* @x.109
  %327 = load i32, i32* @y.110
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %470, !dbg !6802

334:                                              ; preds = %originalBBpart2107, %originalBBpart2103
  %335 = load i32, i32* @x.109
  %336 = load i32, i32* @y.110
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %334, %originalBB113alteredBB
  %343 = load i32, i32* %13, align 4, !dbg !6803
  %344 = and i32 %343, 1, !dbg !6805
  %345 = icmp ne i32 %344, 0, !dbg !6805
  %346 = load i32, i32* @x.109
  %347 = load i32, i32* @y.110
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBBpart2123, label %originalBB113alteredBB

originalBBpart2123:                               ; preds = %originalBB113
  br i1 %345, label %354, label %453, !dbg !6806

354:                                              ; preds = %originalBBpart2123
  %355 = load i32, i32* @x.109
  %356 = load i32, i32* @y.110
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %354, %originalBB125alteredBB
  %363 = load i8, i8* %14, align 1, !dbg !6807
  %364 = trunc i8 %363 to i1, !dbg !6807
  %365 = load i32, i32* @x.109
  %366 = load i32, i32* @y.110
  %367 = sub i32 %365, 1
  %368 = mul i32 %365, %367
  %369 = urem i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %370, %371
  br i1 %372, label %originalBBpart2127, label %originalBB125alteredBB

originalBBpart2127:                               ; preds = %originalBB125
  br i1 %364, label %373, label %453, !dbg !6808

373:                                              ; preds = %originalBBpart2127
  %374 = load i32, i32* @x.109
  %375 = load i32, i32* @y.110
  %376 = sub i32 %374, 1
  %377 = mul i32 %374, %376
  %378 = urem i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %379, %380
  br i1 %381, label %originalBB129, label %originalBB129alteredBB

originalBB129:                                    ; preds = %373, %originalBB129alteredBB
  %382 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !6809
  %383 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %382, i32 0, i32 1, !dbg !6809
  %384 = load i32, i32* %383, align 4, !dbg !6809
  %385 = icmp slt i32 0, %384, !dbg !6810
  %386 = load i32, i32* @x.109
  %387 = load i32, i32* @y.110
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBBpart2131, label %originalBB129alteredBB

originalBBpart2131:                               ; preds = %originalBB129
  br i1 %385, label %394, label %453, !dbg !6811

394:                                              ; preds = %originalBBpart2131
  %395 = load i32, i32* @x.109
  %396 = load i32, i32* @y.110
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBB133, label %originalBB133alteredBB

originalBB133:                                    ; preds = %394, %originalBB133alteredBB
  %403 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !6812
  %404 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %403, i32 0, i32 1, !dbg !6812
  %405 = load i32, i32* %404, align 4, !dbg !6812
  %406 = call i32 @kill(i32 %405, i32 0) #10, !dbg !6813
  %407 = icmp slt i32 %406, 0, !dbg !6814
  %408 = load i32, i32* @x.109
  %409 = load i32, i32* @y.110
  %410 = sub i32 %408, 1
  %411 = mul i32 %408, %410
  %412 = urem i32 %411, 2
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %413, %414
  br i1 %415, label %originalBBpart2135, label %originalBB133alteredBB

originalBBpart2135:                               ; preds = %originalBB133
  br i1 %407, label %416, label %453, !dbg !6815

416:                                              ; preds = %originalBBpart2135
  %417 = load i32, i32* @x.109
  %418 = load i32, i32* @y.110
  %419 = sub i32 %417, 1
  %420 = mul i32 %417, %419
  %421 = urem i32 %420, 2
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %418, 10
  %424 = or i1 %422, %423
  br i1 %424, label %originalBB137, label %originalBB137alteredBB

originalBB137:                                    ; preds = %416, %originalBB137alteredBB
  %425 = call i32* @__errno_location() #15, !dbg !6816
  %426 = load i32, i32* %425, align 4, !dbg !6816
  %427 = icmp eq i32 %426, 3, !dbg !6817
  %428 = load i32, i32* @x.109
  %429 = load i32, i32* @y.110
  %430 = sub i32 %428, 1
  %431 = mul i32 %428, %430
  %432 = urem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %433, %434
  br i1 %435, label %originalBBpart2139, label %originalBB137alteredBB

originalBBpart2139:                               ; preds = %originalBB137
  br i1 %427, label %436, label %453, !dbg !6818

436:                                              ; preds = %originalBBpart2139
  %437 = load i32, i32* @x.109
  %438 = load i32, i32* @y.110
  %439 = sub i32 %437, 1
  %440 = mul i32 %437, %439
  %441 = urem i32 %440, 2
  %442 = icmp eq i32 %441, 0
  %443 = icmp slt i32 %438, 10
  %444 = or i1 %442, %443
  br i1 %444, label %originalBB141, label %originalBB141alteredBB

originalBB141:                                    ; preds = %436, %originalBB141alteredBB
  store i1 false, i1* %11, align 1, !dbg !6819
  %445 = load i32, i32* @x.109
  %446 = load i32, i32* @y.110
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBBpart2143, label %originalBB141alteredBB

originalBBpart2143:                               ; preds = %originalBB141
  br label %470, !dbg !6819

453:                                              ; preds = %originalBBpart2139, %originalBBpart2135, %originalBBpart2131, %originalBBpart2127, %originalBBpart2123
  %454 = load i32, i32* @x.109
  %455 = load i32, i32* @y.110
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBB145, label %originalBB145alteredBB

originalBB145:                                    ; preds = %453, %originalBB145alteredBB
  store i1 true, i1* %11, align 1, !dbg !6820
  %462 = load i32, i32* @x.109
  %463 = load i32, i32* @y.110
  %464 = sub i32 %462, 1
  %465 = mul i32 %462, %464
  %466 = urem i32 %465, 2
  %467 = icmp eq i32 %466, 0
  %468 = icmp slt i32 %463, 10
  %469 = or i1 %467, %468
  br i1 %469, label %originalBBpart2147, label %originalBB145alteredBB

originalBBpart2147:                               ; preds = %originalBB145
  br label %470, !dbg !6820

470:                                              ; preds = %originalBBpart2147, %originalBBpart2143, %originalBBpart2111
  %471 = load i32, i32* @x.109
  %472 = load i32, i32* @y.110
  %473 = sub i32 %471, 1
  %474 = mul i32 %471, %473
  %475 = urem i32 %474, 2
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %476, %477
  br i1 %478, label %originalBB149, label %originalBB149alteredBB

originalBB149:                                    ; preds = %470, %originalBB149alteredBB
  %479 = load i1, i1* %11, align 1, !dbg !6821
  %480 = load i32, i32* @x.109
  %481 = load i32, i32* @y.110
  %482 = sub i32 %480, 1
  %483 = mul i32 %480, %482
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %481, 10
  %487 = or i1 %485, %486
  br i1 %487, label %originalBBpart2151, label %originalBB149alteredBB

originalBBpart2151:                               ; preds = %originalBB149
  ret i1 %479, !dbg !6821

originalBBalteredBB:                              ; preds = %originalBB, %2
  %488 = alloca i1, align 1
  %489 = alloca %struct.utmpx*, align 8
  %490 = alloca i32, align 4
  %491 = alloca i8, align 1
  store %struct.utmpx* %0, %struct.utmpx** %489, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %489, metadata !6822, metadata !DIExpression()), !dbg !6789
  store i32 %1, i32* %490, align 4
  call void @llvm.dbg.declare(metadata i32* %490, metadata !6851, metadata !DIExpression()), !dbg !6791
  call void @llvm.dbg.declare(metadata i8* %491, metadata !6852, metadata !DIExpression()), !dbg !6793
  %492 = load %struct.utmpx*, %struct.utmpx** %489, align 8, !dbg !6794
  %493 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %492, i32 0, i32 4, !dbg !6794
  %494 = getelementptr inbounds [32 x i8], [32 x i8]* %493, i64 0, i64 0, !dbg !6794
  %495 = load i8, i8* %494, align 4, !dbg !6794
  %496 = sext i8 %495 to i32, !dbg !6794
  %497 = icmp ne i32 %496, 0, !dbg !6794
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %498 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !6794
  %499 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %498, i32 0, i32 0, !dbg !6794
  %500 = load i16, i16* %499, align 4, !dbg !6794
  %501 = sext i16 %500 to i32, !dbg !6794
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %collatzVaralteredBB = alloca i32
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %502 = load i32, i32* @inVal0
  %503 = icmp sgt i32 %502, 1
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %86
  store i32 52, i32* %collatzVar
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %103
  %504 = load i8**, i8*** @inVal1
  %505 = getelementptr inbounds i8*, i8** %504, i64 1
  %506 = load i8*, i8** %505
  %controlealteredBB = call i32 @controle(i8* %506, i32 7)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %123
  %507 = load i32, i32* %collatzVar
  %508 = icmp sgt i32 %507, 1
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %142
  %509 = load i32, i32* %collatzVar
  %_ = sub i32 0, %509
  %gen = add i32 %_, 2
  %510 = srem i32 %509, 2
  %511 = icmp eq i32 %510, 0
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %162
  %512 = load i32, i32* %collatzVar
  %_31 = shl i32 %512, 2
  %_32 = sub i32 0, %512
  %gen33 = add i32 %_32, 2
  %_34 = sub i32 %512, 2
  %gen35 = mul i32 %_34, 2
  %_36 = sub i32 0, %512
  %gen37 = add i32 %_36, 2
  %_38 = sub i32 %512, 2
  %gen39 = mul i32 %_38, 2
  %_40 = sub i32 %512, 2
  %gen41 = mul i32 %_40, 2
  %513 = sdiv i32 %512, 2
  store i32 %513, i32* %collatzVar
  br label %originalBB30

originalBB45alteredBB:                            ; preds = %originalBB45, %181
  %514 = load i32, i32* %collatzVar
  %_46 = sub i32 %514, 3
  %gen47 = mul i32 %_46, 3
  %_48 = sub i32 %514, 3
  %gen49 = mul i32 %_48, 3
  %_50 = sub i32 %514, 3
  %gen51 = mul i32 %_50, 3
  %_52 = sub i32 0, %514
  %gen53 = add i32 %_52, 3
  %515 = mul i32 %514, 3
  %_54 = sub i32 %515, 1
  %gen55 = mul i32 %_54, 1
  %_56 = shl i32 %515, 1
  %_57 = sub i32 %515, 1
  %gen58 = mul i32 %_57, 1
  %516 = add i32 %515, 1
  store i32 %516, i32* %collatzVar
  br label %originalBB45

originalBB62alteredBB:                            ; preds = %originalBB62, %201
  %517 = load i32, i32* %collatzVar
  %_63 = shl i32 %41, %517
  %_64 = sub i32 0, %41
  %gen65 = add i32 %_64, %517
  %_66 = shl i32 %41, %517
  %518 = sub i32 %41, %517
  %519 = icmp sgt i32 %518, 5
  br label %originalBB62

originalBB70alteredBB:                            ; preds = %originalBB70, %221
  %520 = load i32, i32* %collatzVar
  %_71 = sub i32 0, %41
  %gen72 = add i32 %_71, %520
  %_73 = sub i32 %41, %520
  %gen74 = mul i32 %_73, %520
  %_75 = sub i32 0, %41
  %gen76 = add i32 %_75, %520
  %_77 = sub i32 %41, %520
  %gen78 = mul i32 %_77, %520
  %521 = add i32 %41, %520
  %522 = icmp slt i32 %521, 9
  br label %originalBB70

originalBB82alteredBB:                            ; preds = %originalBB82, %241
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %258
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %276
  %523 = zext i1 %277 to i8, !dbg !6793
  store i8 %523, i8* %14, align 1, !dbg !6793
  %524 = load i32, i32* %13, align 4, !dbg !6796
  %_91 = shl i32 %524, 2
  %_92 = sub i32 %524, 2
  %gen93 = mul i32 %_92, 2
  %_94 = sub i32 0, %524
  %gen95 = add i32 %_94, 2
  %_96 = shl i32 %524, 2
  %_97 = shl i32 %524, 2
  %_98 = sub i32 %524, 2
  %gen99 = mul i32 %_98, 2
  %_100 = sub i32 %524, 2
  %gen101 = mul i32 %_100, 2
  %525 = and i32 %524, 2, !dbg !6798
  %526 = icmp ne i32 %525, 0, !dbg !6798
  br label %originalBB90

originalBB105alteredBB:                           ; preds = %originalBB105, %298
  %527 = load i8, i8* %14, align 1, !dbg !6800
  %528 = trunc i8 %527 to i1, !dbg !6800
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %317
  store i1 false, i1* %11, align 1, !dbg !6802
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %334
  %529 = load i32, i32* %13, align 4, !dbg !6803
  %_114 = sub i32 %529, 1
  %gen115 = mul i32 %_114, 1
  %_116 = sub i32 %529, 1
  %gen117 = mul i32 %_116, 1
  %_118 = sub i32 %529, 1
  %gen119 = mul i32 %_118, 1
  %_120 = sub i32 0, %529
  %gen121 = add i32 %_120, 1
  %530 = and i32 %529, 1, !dbg !6805
  %531 = icmp ne i32 %530, 0, !dbg !6805
  br label %originalBB113

originalBB125alteredBB:                           ; preds = %originalBB125, %354
  %532 = load i8, i8* %14, align 1, !dbg !6807
  %533 = trunc i8 %532 to i1, !dbg !6807
  br label %originalBB125

originalBB129alteredBB:                           ; preds = %originalBB129, %373
  %534 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !6809
  %535 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %534, i32 0, i32 1, !dbg !6809
  %536 = load i32, i32* %535, align 4, !dbg !6809
  %537 = icmp slt i32 0, %536, !dbg !6810
  br label %originalBB129

originalBB133alteredBB:                           ; preds = %originalBB133, %394
  %538 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !6812
  %539 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %538, i32 0, i32 1, !dbg !6812
  %540 = load i32, i32* %539, align 4, !dbg !6812
  %541 = call i32 @kill(i32 %540, i32 0) #10, !dbg !6813
  %542 = icmp slt i32 %541, 0, !dbg !6814
  br label %originalBB133

originalBB137alteredBB:                           ; preds = %originalBB137, %416
  %543 = call i32* @__errno_location() #15, !dbg !6816
  %544 = load i32, i32* %543, align 4, !dbg !6816
  %545 = icmp eq i32 %544, 3, !dbg !6817
  br label %originalBB137

originalBB141alteredBB:                           ; preds = %originalBB141, %436
  store i1 false, i1* %11, align 1, !dbg !6819
  br label %originalBB141

originalBB145alteredBB:                           ; preds = %originalBB145, %453
  store i1 true, i1* %11, align 1, !dbg !6820
  br label %originalBB145

originalBB149alteredBB:                           ; preds = %originalBB149, %470
  %546 = load i1, i1* %11, align 1, !dbg !6821
  br label %originalBB149
}

declare dso_local void @endutxent() #3

; Function Attrs: nounwind
declare dso_local i32 @kill(i32, i32) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !6853 {
  %3 = load i32, i32* @x.111
  %4 = load i32, i32* @y.112
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !6857, metadata !DIExpression()), !dbg !6858
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !6859, metadata !DIExpression()), !dbg !6860
  call void @llvm.dbg.declare(metadata i8** %14, metadata !6861, metadata !DIExpression()), !dbg !6862
  %18 = load i8*, i8** %12, align 8, !dbg !6863
  store i8* %18, i8** %14, align 8, !dbg !6862
  call void @llvm.dbg.declare(metadata i8** %15, metadata !6864, metadata !DIExpression()), !dbg !6865
  %19 = load i8*, i8** %13, align 8, !dbg !6866
  store i8* %19, i8** %15, align 8, !dbg !6865
  call void @llvm.dbg.declare(metadata i8* %16, metadata !6867, metadata !DIExpression()), !dbg !6868
  call void @llvm.dbg.declare(metadata i8* %17, metadata !6869, metadata !DIExpression()), !dbg !6870
  %20 = load i8*, i8** %14, align 8, !dbg !6871
  %21 = load i8*, i8** %15, align 8, !dbg !6873
  %22 = icmp eq i8* %20, %21, !dbg !6874
  %23 = load i32, i32* @x.111
  %24 = load i32, i32* @y.112
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !6875

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.111
  %33 = load i32, i32* @y.112
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !6876
  %40 = load i32, i32* @x.111
  %41 = load i32, i32* @y.112
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %177, !dbg !6876

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.111
  %50 = load i32, i32* @y.112
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.111
  %58 = load i32, i32* @y.112
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !6877

65:                                               ; preds = %originalBBpart224, %originalBBpart28
  %66 = load i32, i32* @x.111
  %67 = load i32, i32* @y.112
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8*, i8** %14, align 8, !dbg !6878
  %75 = load i8, i8* %74, align 1, !dbg !6880
  %76 = zext i8 %75 to i32, !dbg !6880
  %77 = call i32 @c_tolower(i32 %76), !dbg !6881
  %78 = trunc i32 %77 to i8, !dbg !6881
  store i8 %78, i8* %16, align 1, !dbg !6882
  %79 = load i8*, i8** %15, align 8, !dbg !6883
  %80 = load i8, i8* %79, align 1, !dbg !6884
  %81 = zext i8 %80 to i32, !dbg !6884
  %82 = call i32 @c_tolower(i32 %81), !dbg !6885
  %83 = trunc i32 %82 to i8, !dbg !6885
  store i8 %83, i8* %17, align 1, !dbg !6886
  %84 = load i8, i8* %16, align 1, !dbg !6887
  %85 = zext i8 %84 to i32, !dbg !6887
  %86 = icmp eq i32 %85, 0, !dbg !6889
  %87 = load i32, i32* @x.111
  %88 = load i32, i32* @y.112
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %112, !dbg !6890

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.111
  %97 = load i32, i32* @y.112
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* @x.111
  %105 = load i32, i32* @y.112
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %155, !dbg !6891

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.111
  %114 = load i32, i32* @y.112
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %14, align 8, !dbg !6892
  %122 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !6892
  store i8* %122, i8** %14, align 8, !dbg !6892
  %123 = load i8*, i8** %15, align 8, !dbg !6893
  %124 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !6893
  store i8* %124, i8** %15, align 8, !dbg !6893
  %125 = load i32, i32* @x.111
  %126 = load i32, i32* @y.112
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !6894

133:                                              ; preds = %originalBBpart220
  %134 = load i32, i32* @x.111
  %135 = load i32, i32* @y.112
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i8, i8* %16, align 1, !dbg !6895
  %143 = zext i8 %142 to i32, !dbg !6895
  %144 = load i8, i8* %17, align 1, !dbg !6896
  %145 = zext i8 %144 to i32, !dbg !6896
  %146 = icmp eq i32 %143, %145, !dbg !6897
  %147 = load i32, i32* @x.111
  %148 = load i32, i32* @y.112
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %146, label %65, label %155, !dbg !6894, !llvm.loop !6898

155:                                              ; preds = %originalBBpart224, %originalBBpart216
  %156 = load i32, i32* @x.111
  %157 = load i32, i32* @y.112
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %155, %originalBB26alteredBB
  %164 = load i8, i8* %16, align 1, !dbg !6900
  %165 = zext i8 %164 to i32, !dbg !6900
  %166 = load i8, i8* %17, align 1, !dbg !6902
  %167 = zext i8 %166 to i32, !dbg !6902
  %168 = sub nsw i32 %165, %167, !dbg !6903
  store i32 %168, i32* %11, align 4, !dbg !6904
  %169 = load i32, i32* @x.111
  %170 = load i32, i32* @y.112
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart231, label %originalBB26alteredBB

originalBBpart231:                                ; preds = %originalBB26
  br label %177, !dbg !6904

177:                                              ; preds = %originalBBpart231, %originalBBpart24
  %178 = load i32, i32* @x.111
  %179 = load i32, i32* @y.112
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %177, %originalBB33alteredBB
  %186 = load i32, i32* %11, align 4, !dbg !6905
  %187 = load i32, i32* @x.111
  %188 = load i32, i32* @y.112
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  ret i32 %186, !dbg !6905

originalBBalteredBB:                              ; preds = %originalBB, %2
  %195 = alloca i32, align 4
  %196 = alloca i8*, align 8
  %197 = alloca i8*, align 8
  %198 = alloca i8*, align 8
  %199 = alloca i8*, align 8
  %200 = alloca i8, align 1
  %201 = alloca i8, align 1
  store i8* %0, i8** %196, align 8
  call void @llvm.dbg.declare(metadata i8** %196, metadata !6906, metadata !DIExpression()), !dbg !6858
  store i8* %1, i8** %197, align 8
  call void @llvm.dbg.declare(metadata i8** %197, metadata !6909, metadata !DIExpression()), !dbg !6860
  call void @llvm.dbg.declare(metadata i8** %198, metadata !6910, metadata !DIExpression()), !dbg !6862
  %202 = load i8*, i8** %196, align 8, !dbg !6863
  store i8* %202, i8** %198, align 8, !dbg !6862
  call void @llvm.dbg.declare(metadata i8** %199, metadata !6911, metadata !DIExpression()), !dbg !6865
  %203 = load i8*, i8** %197, align 8, !dbg !6866
  store i8* %203, i8** %199, align 8, !dbg !6865
  call void @llvm.dbg.declare(metadata i8* %200, metadata !6912, metadata !DIExpression()), !dbg !6868
  call void @llvm.dbg.declare(metadata i8* %201, metadata !6913, metadata !DIExpression()), !dbg !6870
  %204 = load i8*, i8** %198, align 8, !dbg !6871
  %205 = load i8*, i8** %199, align 8, !dbg !6873
  %206 = icmp eq i8* %204, %205, !dbg !6874
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !6876
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %207 = load i8*, i8** %14, align 8, !dbg !6878
  %208 = load i8, i8* %207, align 1, !dbg !6880
  %209 = zext i8 %208 to i32, !dbg !6880
  %210 = call i32 @c_tolower(i32 %209), !dbg !6881
  %211 = trunc i32 %210 to i8, !dbg !6881
  store i8 %211, i8* %16, align 1, !dbg !6882
  %212 = load i8*, i8** %15, align 8, !dbg !6883
  %213 = load i8, i8* %212, align 1, !dbg !6884
  %214 = zext i8 %213 to i32, !dbg !6884
  %215 = call i32 @c_tolower(i32 %214), !dbg !6885
  %216 = trunc i32 %215 to i8, !dbg !6885
  store i8 %216, i8* %17, align 1, !dbg !6886
  %217 = load i8, i8* %16, align 1, !dbg !6887
  %218 = zext i8 %217 to i32, !dbg !6887
  %219 = icmp eq i32 %218, 0, !dbg !6889
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %220 = load i8*, i8** %14, align 8, !dbg !6892
  %221 = getelementptr inbounds i8, i8* %220, i32 1, !dbg !6892
  store i8* %221, i8** %14, align 8, !dbg !6892
  %222 = load i8*, i8** %15, align 8, !dbg !6893
  %223 = getelementptr inbounds i8, i8* %222, i32 1, !dbg !6893
  store i8* %223, i8** %15, align 8, !dbg !6893
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %224 = load i8, i8* %16, align 1, !dbg !6895
  %225 = zext i8 %224 to i32, !dbg !6895
  %226 = load i8, i8* %17, align 1, !dbg !6896
  %227 = zext i8 %226 to i32, !dbg !6896
  %228 = icmp eq i32 %225, %227, !dbg !6897
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %155
  %229 = load i8, i8* %16, align 1, !dbg !6900
  %230 = zext i8 %229 to i32, !dbg !6900
  %231 = load i8, i8* %17, align 1, !dbg !6902
  %232 = zext i8 %231 to i32, !dbg !6902
  %_ = sub i32 %230, %232
  %gen = mul i32 %_, %232
  %_27 = sub i32 0, %230
  %gen28 = add i32 %_27, %232
  %233 = sub nsw i32 %230, %232, !dbg !6903
  store i32 %233, i32* %11, align 4, !dbg !6904
  br label %originalBB26

originalBB33alteredBB:                            ; preds = %originalBB33, %177
  %234 = load i32, i32* %11, align 4, !dbg !6905
  br label %originalBB33
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !6914 {
  %2 = load i32, i32* @x.113
  %3 = load i32, i32* @y.114
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !6952, metadata !DIExpression()), !dbg !6953
  call void @llvm.dbg.declare(metadata i8* %12, metadata !6954, metadata !DIExpression()), !dbg !6956
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !6957
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !6958
  %17 = icmp ne i64 %16, 0, !dbg !6959
  %18 = zext i1 %17 to i8, !dbg !6956
  store i8 %18, i8* %12, align 1, !dbg !6956
  call void @llvm.dbg.declare(metadata i8* %13, metadata !6960, metadata !DIExpression()), !dbg !6961
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !6962
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !6962
  %21 = icmp ne i32 %20, 0, !dbg !6963
  %22 = zext i1 %21 to i8, !dbg !6961
  store i8 %22, i8* %13, align 1, !dbg !6961
  call void @llvm.dbg.declare(metadata i8* %14, metadata !6964, metadata !DIExpression()), !dbg !6965
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !6966
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !6967
  %25 = icmp ne i32 %24, 0, !dbg !6968
  %26 = zext i1 %25 to i8, !dbg !6965
  store i8 %26, i8* %14, align 1, !dbg !6965
  %27 = load i8, i8* %13, align 1, !dbg !6969
  %28 = trunc i8 %27 to i1, !dbg !6969
  %29 = load i32, i32* @x.113
  %30 = load i32, i32* @y.114
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %95, label %37, !dbg !6971

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.113
  %39 = load i32, i32* @y.114
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !6972
  %47 = trunc i8 %46 to i1, !dbg !6972
  %48 = load i32, i32* @x.113
  %49 = load i32, i32* @y.114
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %149, !dbg !6973

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.113
  %58 = load i32, i32* @y.114
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !6974
  %66 = trunc i8 %65 to i1, !dbg !6974
  %67 = load i32, i32* @x.113
  %68 = load i32, i32* @y.114
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %95, label %75, !dbg !6975

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.113
  %77 = load i32, i32* @y.114
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call i32* @__errno_location() #15, !dbg !6976
  %85 = load i32, i32* %84, align 4, !dbg !6976
  %86 = icmp ne i32 %85, 9, !dbg !6977
  %87 = load i32, i32* @x.113
  %88 = load i32, i32* @y.114
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %149, !dbg !6978

95:                                               ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart2
  %96 = load i32, i32* @x.113
  %97 = load i32, i32* @y.114
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i8, i8* %14, align 1, !dbg !6979
  %105 = trunc i8 %104 to i1, !dbg !6979
  %106 = load i32, i32* @x.113
  %107 = load i32, i32* @y.114
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %105, label %132, label %114, !dbg !6982

114:                                              ; preds = %originalBBpart216
  %115 = load i32, i32* @x.113
  %116 = load i32, i32* @y.114
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  %123 = call i32* @__errno_location() #15, !dbg !6983
  store i32 0, i32* %123, align 4, !dbg !6984
  %124 = load i32, i32* @x.113
  %125 = load i32, i32* @y.114
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %132, !dbg !6983

132:                                              ; preds = %originalBBpart220, %originalBBpart216
  %133 = load i32, i32* @x.113
  %134 = load i32, i32* @y.114
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %132, %originalBB22alteredBB
  store i32 -1, i32* %10, align 4, !dbg !6985
  %141 = load i32, i32* @x.113
  %142 = load i32, i32* @y.114
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %166, !dbg !6985

149:                                              ; preds = %originalBBpart212, %originalBBpart24
  %150 = load i32, i32* @x.113
  %151 = load i32, i32* @y.114
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  store i32 0, i32* %10, align 4, !dbg !6986
  %158 = load i32, i32* @x.113
  %159 = load i32, i32* @y.114
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !6986

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.113
  %168 = load i32, i32* @y.114
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %10, align 4, !dbg !6987
  %176 = load i32, i32* @x.113
  %177 = load i32, i32* @y.114
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %175, !dbg !6987

originalBBalteredBB:                              ; preds = %originalBB, %1
  %184 = alloca i32, align 4
  %185 = alloca %struct._IO_FILE*, align 8
  %186 = alloca i8, align 1
  %187 = alloca i8, align 1
  %188 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %185, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %185, metadata !6988, metadata !DIExpression()), !dbg !6953
  call void @llvm.dbg.declare(metadata i8* %186, metadata !7027, metadata !DIExpression()), !dbg !6956
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !6957
  %190 = call i64 @__fpending(%struct._IO_FILE* %189) #10, !dbg !6958
  %191 = icmp ne i64 %190, 0, !dbg !6959
  %192 = zext i1 %191 to i8, !dbg !6956
  store i8 %192, i8* %186, align 1, !dbg !6956
  call void @llvm.dbg.declare(metadata i8* %187, metadata !7028, metadata !DIExpression()), !dbg !6961
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !6962
  %194 = call i32 @ferror_unlocked(%struct._IO_FILE* %193) #10, !dbg !6962
  %195 = icmp ne i32 %194, 0, !dbg !6963
  %196 = zext i1 %195 to i8, !dbg !6961
  store i8 %196, i8* %187, align 1, !dbg !6961
  call void @llvm.dbg.declare(metadata i8* %188, metadata !7029, metadata !DIExpression()), !dbg !6965
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !6966
  %198 = call i32 @rpl_fclose(%struct._IO_FILE* %197), !dbg !6967
  %199 = icmp ne i32 %198, 0, !dbg !6968
  %200 = zext i1 %199 to i8, !dbg !6965
  store i8 %200, i8* %188, align 1, !dbg !6965
  %201 = load i8, i8* %187, align 1, !dbg !6969
  %202 = trunc i8 %201 to i1, !dbg !6969
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %203 = load i8, i8* %14, align 1, !dbg !6972
  %204 = trunc i8 %203 to i1, !dbg !6972
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %205 = load i8, i8* %12, align 1, !dbg !6974
  %206 = trunc i8 %205 to i1, !dbg !6974
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %207 = call i32* @__errno_location() #15, !dbg !6976
  %208 = load i32, i32* %207, align 4, !dbg !6976
  %209 = icmp ne i32 %208, 9, !dbg !6977
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %210 = load i8, i8* %14, align 1, !dbg !6979
  %211 = trunc i8 %210 to i1, !dbg !6979
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  %212 = call i32* @__errno_location() #15, !dbg !6983
  store i32 0, i32* %212, align 4, !dbg !6984
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %132
  store i32 -1, i32* %10, align 4, !dbg !6985
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  store i32 0, i32* %10, align 4, !dbg !6986
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %213 = load i32, i32* %10, align 4, !dbg !6987
  br label %originalBB30
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !7030 {
  %1 = load i32, i32* @x.115
  %2 = load i32, i32* @y.116
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !7034, metadata !DIExpression()), !dbg !7035
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !7036
  store i8* %10, i8** %9, align 8, !dbg !7037
  %11 = load i8*, i8** %9, align 8, !dbg !7038
  %12 = icmp eq i8* %11, null, !dbg !7040
  %13 = load i32, i32* @x.115
  %14 = load i32, i32* @y.116
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !7041

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.115
  %23 = load i32, i32* @y.116
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.179, i64 0, i64 0), i8** %9, align 8, !dbg !7042
  %30 = load i32, i32* @x.115
  %31 = load i32, i32* @y.116
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !7043

38:                                               ; preds = %originalBBpart24, %originalBBpart2
  %39 = load i32, i32* @x.115
  %40 = load i32, i32* @y.116
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load i8*, i8** %9, align 8, !dbg !7044
  %48 = getelementptr inbounds i8, i8* %47, i64 0, !dbg !7044
  %49 = load i8, i8* %48, align 1, !dbg !7044
  %50 = sext i8 %49 to i32, !dbg !7044
  %51 = icmp eq i32 %50, 0, !dbg !7048
  %52 = load i32, i32* @x.115
  %53 = load i32, i32* @y.116
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %60, label %77, !dbg !7049

60:                                               ; preds = %originalBBpart28
  %61 = load i32, i32* @x.115
  %62 = load i32, i32* @y.116
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.180, i64 0, i64 0), i8** %9, align 8, !dbg !7050
  %69 = load i32, i32* @x.115
  %70 = load i32, i32* @y.116
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %77, !dbg !7051

77:                                               ; preds = %originalBBpart212, %originalBBpart28
  %78 = load i32, i32* @x.115
  %79 = load i32, i32* @y.116
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %77, %originalBB14alteredBB
  %86 = load i8*, i8** %9, align 8, !dbg !7052
  %87 = load i32, i32* @x.115
  %88 = load i32, i32* @y.116
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %86, !dbg !7053

originalBBalteredBB:                              ; preds = %originalBB, %0
  %95 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %95, metadata !7054, metadata !DIExpression()), !dbg !7035
  %96 = call i8* @nl_langinfo(i32 14) #10, !dbg !7036
  store i8* %96, i8** %95, align 8, !dbg !7037
  %97 = load i8*, i8** %95, align 8, !dbg !7038
  %98 = icmp eq i8* %97, null, !dbg !7040
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.179, i64 0, i64 0), i8** %9, align 8, !dbg !7042
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %99 = load i8*, i8** %9, align 8, !dbg !7044
  %100 = getelementptr inbounds i8, i8* %99, i64 0, !dbg !7044
  %101 = load i8, i8* %100, align 1, !dbg !7044
  %102 = sext i8 %101 to i32, !dbg !7044
  %103 = icmp eq i32 %102, 0, !dbg !7048
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.180, i64 0, i64 0), i8** %9, align 8, !dbg !7050
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %77
  %104 = load i8*, i8** %9, align 8, !dbg !7052
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !7057 {
  %2 = load i32, i32* @x.117
  %3 = load i32, i32* @y.118
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !7095, metadata !DIExpression()), !dbg !7096
  call void @llvm.dbg.declare(metadata i32* %12, metadata !7097, metadata !DIExpression()), !dbg !7098
  store i32 0, i32* %12, align 4, !dbg !7098
  call void @llvm.dbg.declare(metadata i32* %13, metadata !7099, metadata !DIExpression()), !dbg !7100
  call void @llvm.dbg.declare(metadata i32* %14, metadata !7101, metadata !DIExpression()), !dbg !7102
  store i32 0, i32* %14, align 4, !dbg !7102
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7103
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !7104
  store i32 %16, i32* %13, align 4, !dbg !7105
  %17 = load i32, i32* %13, align 4, !dbg !7106
  %18 = icmp slt i32 %17, 0, !dbg !7108
  %19 = load i32, i32* @x.117
  %20 = load i32, i32* @y.118
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %46, !dbg !7109

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.117
  %29 = load i32, i32* @y.118
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7110
  %37 = call i32 @fclose(%struct._IO_FILE* %36), !dbg !7111
  store i32 %37, i32* %10, align 4, !dbg !7112
  %38 = load i32, i32* @x.117
  %39 = load i32, i32* @y.118
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %184, !dbg !7112

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.117
  %48 = load i32, i32* @y.118
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7113
  %56 = call i32 @__freading(%struct._IO_FILE* %55) #10, !dbg !7113
  %57 = icmp ne i32 %56, 0, !dbg !7113
  %58 = load i32, i32* @x.117
  %59 = load i32, i32* @y.118
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !7115

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.117
  %68 = load i32, i32* @y.118
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7116
  %76 = call i32 @fileno(%struct._IO_FILE* %75) #10, !dbg !7117
  %77 = call i64 @lseek(i32 %76, i64 0, i32 1) #10, !dbg !7118
  %78 = icmp ne i64 %77, -1, !dbg !7119
  %79 = load i32, i32* @x.117
  %80 = load i32, i32* @y.118
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %78, label %87, label %126, !dbg !7120

87:                                               ; preds = %originalBBpart212, %originalBBpart28
  %88 = load i32, i32* @x.117
  %89 = load i32, i32* @y.118
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7121
  %97 = call i32 @rpl_fflush(%struct._IO_FILE* %96), !dbg !7122
  %98 = icmp ne i32 %97, 0, !dbg !7122
  %99 = load i32, i32* @x.117
  %100 = load i32, i32* @y.118
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %126, !dbg !7123

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.117
  %109 = load i32, i32* @y.118
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = call i32* @__errno_location() #15, !dbg !7124
  %117 = load i32, i32* %116, align 4, !dbg !7124
  store i32 %117, i32* %12, align 4, !dbg !7125
  %118 = load i32, i32* @x.117
  %119 = load i32, i32* @y.118
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %126, !dbg !7126

126:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart212
  %127 = load i32, i32* @x.117
  %128 = load i32, i32* @y.118
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %126, %originalBB22alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7127
  %136 = call i32 @fclose(%struct._IO_FILE* %135), !dbg !7128
  store i32 %136, i32* %14, align 4, !dbg !7129
  %137 = load i32, i32* %12, align 4, !dbg !7130
  %138 = icmp ne i32 %137, 0, !dbg !7132
  %139 = load i32, i32* @x.117
  %140 = load i32, i32* @y.118
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %138, label %147, label %166, !dbg !7133

147:                                              ; preds = %originalBBpart224
  %148 = load i32, i32* @x.117
  %149 = load i32, i32* @y.118
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %147, %originalBB26alteredBB
  %156 = load i32, i32* %12, align 4, !dbg !7134
  %157 = call i32* @__errno_location() #15, !dbg !7136
  store i32 %156, i32* %157, align 4, !dbg !7137
  store i32 -1, i32* %14, align 4, !dbg !7138
  %158 = load i32, i32* @x.117
  %159 = load i32, i32* @y.118
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !7139

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.117
  %168 = load i32, i32* @y.118
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %14, align 4, !dbg !7140
  store i32 %175, i32* %10, align 4, !dbg !7141
  %176 = load i32, i32* @x.117
  %177 = load i32, i32* @y.118
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %184, !dbg !7141

184:                                              ; preds = %originalBBpart232, %originalBBpart24
  %185 = load i32, i32* @x.117
  %186 = load i32, i32* @y.118
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %184, %originalBB34alteredBB
  %193 = load i32, i32* %10, align 4, !dbg !7142
  %194 = load i32, i32* @x.117
  %195 = load i32, i32* @y.118
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret i32 %193, !dbg !7142

originalBBalteredBB:                              ; preds = %originalBB, %1
  %202 = alloca i32, align 4
  %203 = alloca %struct._IO_FILE*, align 8
  %204 = alloca i32, align 4
  %205 = alloca i32, align 4
  %206 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %203, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %203, metadata !7143, metadata !DIExpression()), !dbg !7096
  call void @llvm.dbg.declare(metadata i32* %204, metadata !7182, metadata !DIExpression()), !dbg !7098
  store i32 0, i32* %204, align 4, !dbg !7098
  call void @llvm.dbg.declare(metadata i32* %205, metadata !7183, metadata !DIExpression()), !dbg !7100
  call void @llvm.dbg.declare(metadata i32* %206, metadata !7184, metadata !DIExpression()), !dbg !7102
  store i32 0, i32* %206, align 4, !dbg !7102
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** %203, align 8, !dbg !7103
  %208 = call i32 @fileno(%struct._IO_FILE* %207) #10, !dbg !7104
  store i32 %208, i32* %205, align 4, !dbg !7105
  %209 = load i32, i32* %205, align 4, !dbg !7106
  %210 = icmp slt i32 %209, 0, !dbg !7108
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7110
  %212 = call i32 @fclose(%struct._IO_FILE* %211), !dbg !7111
  store i32 %212, i32* %10, align 4, !dbg !7112
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7113
  %214 = call i32 @__freading(%struct._IO_FILE* %213) #10, !dbg !7113
  %215 = icmp ne i32 %214, 0, !dbg !7113
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7116
  %217 = call i32 @fileno(%struct._IO_FILE* %216) #10, !dbg !7117
  %218 = call i64 @lseek(i32 %217, i64 0, i32 1) #10, !dbg !7118
  %219 = icmp ne i64 %218, -1, !dbg !7119
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7121
  %221 = call i32 @rpl_fflush(%struct._IO_FILE* %220), !dbg !7122
  %222 = icmp ne i32 %221, 0, !dbg !7122
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %223 = call i32* @__errno_location() #15, !dbg !7124
  %224 = load i32, i32* %223, align 4, !dbg !7124
  store i32 %224, i32* %12, align 4, !dbg !7125
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %126
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7127
  %226 = call i32 @fclose(%struct._IO_FILE* %225), !dbg !7128
  store i32 %226, i32* %14, align 4, !dbg !7129
  %227 = load i32, i32* %12, align 4, !dbg !7130
  %228 = icmp ne i32 %227, 0, !dbg !7132
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %147
  %229 = load i32, i32* %12, align 4, !dbg !7134
  %230 = call i32* @__errno_location() #15, !dbg !7136
  store i32 %229, i32* %230, align 4, !dbg !7137
  store i32 -1, i32* %14, align 4, !dbg !7138
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %231 = load i32, i32* %14, align 4, !dbg !7140
  store i32 %231, i32* %10, align 4, !dbg !7141
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %184
  %232 = load i32, i32* %10, align 4, !dbg !7142
  br label %originalBB34
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !7185 {
  %2 = load i32, i32* @x.119
  %3 = load i32, i32* @y.120
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !7223, metadata !DIExpression()), !dbg !7224
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7225
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !7227
  %14 = load i32, i32* @x.119
  %15 = load i32, i32* @y.120
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !7228

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.119
  %24 = load i32, i32* @y.120
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7229
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !7229
  %33 = icmp ne i32 %32, 0, !dbg !7229
  %34 = load i32, i32* @x.119
  %35 = load i32, i32* @y.120
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !7230

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.119
  %44 = load i32, i32* @y.120
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7231
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !7232
  store i32 %52, i32* %10, align 4, !dbg !7233
  %53 = load i32, i32* @x.119
  %54 = load i32, i32* @y.120
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !7233

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.119
  %63 = load i32, i32* @y.120
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7234
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !7235
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7236
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !7237
  store i32 %72, i32* %10, align 4, !dbg !7238
  %73 = load i32, i32* @x.119
  %74 = load i32, i32* @y.120
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !7238

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* @x.119
  %83 = load i32, i32* @y.120
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* %10, align 4, !dbg !7239
  %91 = load i32, i32* @x.119
  %92 = load i32, i32* @y.120
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %90, !dbg !7239

originalBBalteredBB:                              ; preds = %originalBB, %1
  %99 = alloca i32, align 4
  %100 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %100, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %100, metadata !7240, metadata !DIExpression()), !dbg !7224
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %100, align 8, !dbg !7225
  %102 = icmp eq %struct._IO_FILE* %101, null, !dbg !7227
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7229
  %104 = call i32 @__freading(%struct._IO_FILE* %103) #10, !dbg !7229
  %105 = icmp ne i32 %104, 0, !dbg !7229
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7231
  %107 = call i32 @fflush(%struct._IO_FILE* %106), !dbg !7232
  store i32 %107, i32* %10, align 4, !dbg !7233
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7234
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %108), !dbg !7235
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !7236
  %110 = call i32 @fflush(%struct._IO_FILE* %109), !dbg !7237
  store i32 %110, i32* %10, align 4, !dbg !7238
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %111 = load i32, i32* %10, align 4, !dbg !7239
  br label %originalBB14
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !7279 {
  %2 = load i32, i32* @x.121
  %3 = load i32, i32* @y.122
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !7282, metadata !DIExpression()), !dbg !7283
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !7284
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !7286
  %13 = load i32, i32* %12, align 8, !dbg !7286
  %14 = and i32 %13, 256, !dbg !7287
  %15 = icmp ne i32 %14, 0, !dbg !7287
  %16 = load i32, i32* @x.121
  %17 = load i32, i32* @y.122
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !7288

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.121
  %26 = load i32, i32* @y.122
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %24, %originalBB11alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !7289
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !7290
  %35 = load i32, i32* @x.121
  %36 = load i32, i32* @y.122
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %43, !dbg !7290

43:                                               ; preds = %originalBBpart213, %originalBBpart2
  %44 = load i32, i32* @x.121
  %45 = load i32, i32* @y.122
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %43, %originalBB15alteredBB
  %52 = load i32, i32* @x.121
  %53 = load i32, i32* @y.122
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  ret void, !dbg !7291

originalBBalteredBB:                              ; preds = %originalBB, %1
  %60 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %60, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %60, metadata !7292, metadata !DIExpression()), !dbg !7283
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %60, align 8, !dbg !7284
  %62 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %61, i32 0, i32 0, !dbg !7286
  %63 = load i32, i32* %62, align 8, !dbg !7286
  %_ = sub i32 0, %63
  %gen = add i32 %_, 256
  %_1 = shl i32 %63, 256
  %_2 = shl i32 %63, 256
  %_3 = sub i32 0, %63
  %gen4 = add i32 %_3, 256
  %_5 = sub i32 %63, 256
  %gen6 = mul i32 %_5, 256
  %_7 = sub i32 0, %63
  %gen8 = add i32 %_7, 256
  %_9 = shl i32 %63, 256
  %_10 = shl i32 %63, 256
  %64 = and i32 %63, 256, !dbg !7287
  %65 = icmp ne i32 %64, 0, !dbg !7287
  br label %originalBB

originalBB11alteredBB:                            ; preds = %originalBB11, %24
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !7289
  %67 = call i32 @rpl_fseeko(%struct._IO_FILE* %66, i64 0, i32 1), !dbg !7290
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %43
  br label %originalBB15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !7331 {
  %4 = load i32, i32* @x.123
  %5 = load i32, i32* @y.124
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !7370, metadata !DIExpression()), !dbg !7371
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !7372, metadata !DIExpression()), !dbg !7373
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !7374, metadata !DIExpression()), !dbg !7375
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7376
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !7378
  %19 = load i8*, i8** %18, align 8, !dbg !7378
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7379
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !7380
  %22 = load i8*, i8** %21, align 8, !dbg !7380
  %23 = icmp eq i8* %19, %22, !dbg !7381
  %24 = load i32, i32* @x.123
  %25 = load i32, i32* @y.124
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %142, !dbg !7382

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.123
  %34 = load i32, i32* @y.124
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7383
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !7384
  %43 = load i8*, i8** %42, align 8, !dbg !7384
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7385
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !7386
  %46 = load i8*, i8** %45, align 8, !dbg !7386
  %47 = icmp eq i8* %43, %46, !dbg !7387
  %48 = load i32, i32* @x.123
  %49 = load i32, i32* @y.124
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %142, !dbg !7388

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.123
  %58 = load i32, i32* @y.124
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7389
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !7390
  %67 = load i8*, i8** %66, align 8, !dbg !7390
  %68 = icmp eq i8* %67, null, !dbg !7391
  %69 = load i32, i32* @x.123
  %70 = load i32, i32* @y.124
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %142, !dbg !7392

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !7393, metadata !DIExpression()), !dbg !7395
  %78 = load i32, i32* @x.123
  %79 = load i32, i32* @y.124
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7396
  %87 = call i32 @fileno(%struct._IO_FILE* %86) #10, !dbg !7397
  %88 = load i64, i64* %14, align 8, !dbg !7398
  %89 = load i32, i32* %15, align 4, !dbg !7399
  %90 = call i64 @lseek(i32 %87, i64 %88, i32 %89) #10, !dbg !7400
  store i64 %90, i64* %16, align 8, !dbg !7395
  %91 = load i64, i64* %16, align 8, !dbg !7401
  %92 = icmp eq i64 %91, -1, !dbg !7403
  %93 = load i32, i32* @x.123
  %94 = load i32, i32* @y.124
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %92, label %101, label %118, !dbg !7404

101:                                              ; preds = %originalBBpart212
  %102 = load i32, i32* @x.123
  %103 = load i32, i32* @y.124
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  store i32 -1, i32* %12, align 4, !dbg !7405
  %110 = load i32, i32* @x.123
  %111 = load i32, i32* @y.124
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %163, !dbg !7405

118:                                              ; preds = %originalBBpart212
  %119 = load i32, i32* @x.123
  %120 = load i32, i32* @y.124
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7407
  %128 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %127, i32 0, i32 0, !dbg !7408
  %129 = load i32, i32* %128, align 8, !dbg !7409
  %130 = and i32 %129, -17, !dbg !7409
  store i32 %130, i32* %128, align 8, !dbg !7409
  %131 = load i64, i64* %16, align 8, !dbg !7410
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7411
  %133 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %132, i32 0, i32 21, !dbg !7412
  store i64 %131, i64* %133, align 8, !dbg !7413
  store i32 0, i32* %12, align 4, !dbg !7414
  %134 = load i32, i32* @x.123
  %135 = load i32, i32* @y.124
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart223, label %originalBB18alteredBB

originalBBpart223:                                ; preds = %originalBB18
  br label %163, !dbg !7414

142:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %143 = load i32, i32* @x.123
  %144 = load i32, i32* @y.124
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %142, %originalBB25alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7415
  %152 = load i64, i64* %14, align 8, !dbg !7416
  %153 = load i32, i32* %15, align 4, !dbg !7417
  %154 = call i32 @fseeko(%struct._IO_FILE* %151, i64 %152, i32 %153), !dbg !7418
  store i32 %154, i32* %12, align 4, !dbg !7419
  %155 = load i32, i32* @x.123
  %156 = load i32, i32* @y.124
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %163, !dbg !7419

163:                                              ; preds = %originalBBpart227, %originalBBpart223, %originalBBpart216
  %164 = load i32, i32* @x.123
  %165 = load i32, i32* @y.124
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %163, %originalBB29alteredBB
  %172 = load i32, i32* %12, align 4, !dbg !7420
  %173 = load i32, i32* @x.123
  %174 = load i32, i32* @y.124
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  ret i32 %172, !dbg !7420

originalBBalteredBB:                              ; preds = %originalBB, %3
  %181 = alloca i32, align 4
  %182 = alloca %struct._IO_FILE*, align 8
  %183 = alloca i64, align 8
  %184 = alloca i32, align 4
  %185 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %182, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %182, metadata !7421, metadata !DIExpression()), !dbg !7371
  store i64 %1, i64* %183, align 8
  call void @llvm.dbg.declare(metadata i64* %183, metadata !7460, metadata !DIExpression()), !dbg !7373
  store i32 %2, i32* %184, align 4
  call void @llvm.dbg.declare(metadata i32* %184, metadata !7461, metadata !DIExpression()), !dbg !7375
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !7376
  %187 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %186, i32 0, i32 2, !dbg !7378
  %188 = load i8*, i8** %187, align 8, !dbg !7378
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !7379
  %190 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %189, i32 0, i32 1, !dbg !7380
  %191 = load i8*, i8** %190, align 8, !dbg !7380
  %192 = icmp eq i8* %188, %191, !dbg !7381
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7383
  %194 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %193, i32 0, i32 5, !dbg !7384
  %195 = load i8*, i8** %194, align 8, !dbg !7384
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7385
  %197 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %196, i32 0, i32 4, !dbg !7386
  %198 = load i8*, i8** %197, align 8, !dbg !7386
  %199 = icmp eq i8* %195, %198, !dbg !7387
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7389
  %201 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %200, i32 0, i32 9, !dbg !7390
  %202 = load i8*, i8** %201, align 8, !dbg !7390
  %203 = icmp eq i8* %202, null, !dbg !7391
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %204 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7396
  %205 = call i32 @fileno(%struct._IO_FILE* %204) #10, !dbg !7397
  %206 = load i64, i64* %14, align 8, !dbg !7398
  %207 = load i32, i32* %15, align 4, !dbg !7399
  %208 = call i64 @lseek(i32 %205, i64 %206, i32 %207) #10, !dbg !7400
  store i64 %208, i64* %16, align 8, !dbg !7395
  %209 = load i64, i64* %16, align 8, !dbg !7401
  %210 = icmp eq i64 %209, -1, !dbg !7403
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  store i32 -1, i32* %12, align 4, !dbg !7405
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7407
  %212 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %211, i32 0, i32 0, !dbg !7408
  %213 = load i32, i32* %212, align 8, !dbg !7409
  %_ = sub i32 0, %213
  %gen = add i32 %_, -17
  %_19 = shl i32 %213, -17
  %_20 = sub i32 0, %213
  %gen21 = add i32 %_20, -17
  %214 = and i32 %213, -17, !dbg !7409
  store i32 %214, i32* %212, align 8, !dbg !7409
  %215 = load i64, i64* %16, align 8, !dbg !7410
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7411
  %217 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %216, i32 0, i32 21, !dbg !7412
  store i64 %215, i64* %217, align 8, !dbg !7413
  store i32 0, i32* %12, align 4, !dbg !7414
  br label %originalBB18

originalBB25alteredBB:                            ; preds = %originalBB25, %142
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !7415
  %219 = load i64, i64* %14, align 8, !dbg !7416
  %220 = load i32, i32* %15, align 4, !dbg !7417
  %221 = call i32 @fseeko(%struct._IO_FILE* %218, i64 %219, i32 %220), !dbg !7418
  store i32 %221, i32* %12, align 4, !dbg !7419
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %163
  %222 = load i32, i32* %12, align 4, !dbg !7420
  br label %originalBB29
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.125
  %4 = load i32, i32* @y.126
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.125
  %14 = load i32, i32* @y.126
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.125
  %23 = load i32, i32* @y.126
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.125
  %34 = load i32, i32* @y.126
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart210, label %originalBB1alteredBB

originalBBpart210:                                ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.125
  %43 = load i32, i32* @y.126
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %41, %originalBB12alteredBB
  %50 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal2, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %50, i8* %0)
  %52 = icmp eq i32 %51, 0
  %53 = load i32, i32* @x.125
  %54 = load i32, i32* @y.126
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br i1 %52, label %61, label %96

61:                                               ; preds = %originalBBpart214
  %62 = load i32, i32* @x.125
  %63 = load i32, i32* @y.126
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %61, %originalBB16alteredBB
  %70 = icmp eq i32 %1, -1
  %71 = load i32, i32* @x.125
  %72 = load i32, i32* @y.126
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br i1 %70, label %79, label %96

79:                                               ; preds = %originalBBpart218
  %80 = load i32, i32* @x.125
  %81 = load i32, i32* @y.126
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %79, %originalBB20alteredBB
  %88 = load i32, i32* @x.125
  %89 = load i32, i32* @y.126
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  ret i32 5

96:                                               ; preds = %originalBBpart218, %originalBBpart214
  %97 = load i32, i32* @x.125
  %98 = load i32, i32* @y.126
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %96, %originalBB24alteredBB
  %105 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %106 = call i32 @strcmp(i8* %105, i8* %0)
  %107 = icmp eq i32 %106, 0
  %108 = load i32, i32* @x.125
  %109 = load i32, i32* @y.126
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart226, label %originalBB24alteredBB

originalBBpart226:                                ; preds = %originalBB24
  br i1 %107, label %116, label %151

116:                                              ; preds = %originalBBpart226
  %117 = load i32, i32* @x.125
  %118 = load i32, i32* @y.126
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB28, label %originalBB28alteredBB

originalBB28:                                     ; preds = %116, %originalBB28alteredBB
  %125 = icmp eq i32 %1, 7
  %126 = load i32, i32* @x.125
  %127 = load i32, i32* @y.126
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart230, label %originalBB28alteredBB

originalBBpart230:                                ; preds = %originalBB28
  br i1 %125, label %134, label %151

134:                                              ; preds = %originalBBpart230
  %135 = load i32, i32* @x.125
  %136 = load i32, i32* @y.126
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB32, label %originalBB32alteredBB

originalBB32:                                     ; preds = %134, %originalBB32alteredBB
  %143 = load i32, i32* @x.125
  %144 = load i32, i32* @y.126
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart234, label %originalBB32alteredBB

originalBBpart234:                                ; preds = %originalBB32
  ret i32 3

151:                                              ; preds = %originalBBpart230, %originalBBpart226
  %152 = load i32, i32* @x.125
  %153 = load i32, i32* @y.126
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %151, %originalBB36alteredBB
  %160 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %161 = call i32 @strcmp(i8* %160, i8* %0)
  %162 = icmp eq i32 %161, 0
  %163 = load i32, i32* @x.125
  %164 = load i32, i32* @y.126
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br i1 %162, label %171, label %206

171:                                              ; preds = %originalBBpart238
  %172 = load i32, i32* @x.125
  %173 = load i32, i32* @y.126
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %171, %originalBB40alteredBB
  %180 = icmp eq i32 %1, -3
  %181 = load i32, i32* @x.125
  %182 = load i32, i32* @y.126
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br i1 %180, label %189, label %206

189:                                              ; preds = %originalBBpart242
  %190 = load i32, i32* @x.125
  %191 = load i32, i32* @y.126
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %189, %originalBB44alteredBB
  %198 = load i32, i32* @x.125
  %199 = load i32, i32* @y.126
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  ret i32 3

206:                                              ; preds = %originalBBpart242, %originalBBpart238
  %207 = load i32, i32* @x.125
  %208 = load i32, i32* @y.126
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %206, %originalBB48alteredBB
  %215 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %216 = call i32 @strcmp(i8* %215, i8* %0)
  %217 = icmp eq i32 %216, 0
  %218 = load i32, i32* @x.125
  %219 = load i32, i32* @y.126
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br i1 %217, label %226, label %261

226:                                              ; preds = %originalBBpart250
  %227 = load i32, i32* @x.125
  %228 = load i32, i32* @y.126
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %226, %originalBB52alteredBB
  %235 = icmp eq i32 %1, 0
  %236 = load i32, i32* @x.125
  %237 = load i32, i32* @y.126
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  br i1 %235, label %244, label %261

244:                                              ; preds = %originalBBpart254
  %245 = load i32, i32* @x.125
  %246 = load i32, i32* @y.126
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB56, label %originalBB56alteredBB

originalBB56:                                     ; preds = %244, %originalBB56alteredBB
  %253 = load i32, i32* @x.125
  %254 = load i32, i32* @y.126
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart258, label %originalBB56alteredBB

originalBBpart258:                                ; preds = %originalBB56
  ret i32 5

261:                                              ; preds = %originalBBpart254, %originalBBpart250
  %262 = load i32, i32* @x.125
  %263 = load i32, i32* @y.126
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBB60, label %originalBB60alteredBB

originalBB60:                                     ; preds = %261, %originalBB60alteredBB
  call void @srand(i32 %1)
  %270 = call i32 @rand()
  %271 = srem i32 %270, 50000
  %272 = add i32 %271, 2
  %273 = load i32, i32* @x.125
  %274 = load i32, i32* @y.126
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart275, label %originalBB60alteredBB

originalBBpart275:                                ; preds = %originalBB60
  ret i32 %272

originalBBalteredBB:                              ; preds = %originalBB, %2
  %281 = load i32, i32* @inVal0
  %282 = icmp sgt i32 %281, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %283 = call i32 @rand()
  %_ = shl i32 %283, 50000
  %_2 = shl i32 %283, 50000
  %_3 = shl i32 %283, 50000
  %284 = srem i32 %283, 50000
  %_4 = sub i32 0, %284
  %gen = add i32 %_4, 2
  %_5 = shl i32 %284, 2
  %_6 = shl i32 %284, 2
  %_7 = sub i32 0, %284
  %gen8 = add i32 %_7, 2
  %285 = add i32 %284, 2
  br label %originalBB1

originalBB12alteredBB:                            ; preds = %originalBB12, %41
  %286 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal2, i32 0, i32 0
  %287 = call i32 @strcmp(i8* %286, i8* %0)
  %288 = icmp eq i32 %287, 0
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %61
  %289 = icmp eq i32 %1, -1
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %79
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %96
  %290 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %291 = call i32 @strcmp(i8* %290, i8* %0)
  %292 = icmp eq i32 %291, 0
  br label %originalBB24

originalBB28alteredBB:                            ; preds = %originalBB28, %116
  %293 = icmp eq i32 %1, 7
  br label %originalBB28

originalBB32alteredBB:                            ; preds = %originalBB32, %134
  br label %originalBB32

originalBB36alteredBB:                            ; preds = %originalBB36, %151
  %294 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %295 = call i32 @strcmp(i8* %294, i8* %0)
  %296 = icmp eq i32 %295, 0
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %171
  %297 = icmp eq i32 %1, -3
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %189
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %206
  %298 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %299 = call i32 @strcmp(i8* %298, i8* %0)
  %300 = icmp eq i32 %299, 0
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %226
  %301 = icmp eq i32 %1, 0
  br label %originalBB52

originalBB56alteredBB:                            ; preds = %originalBB56, %244
  br label %originalBB56

originalBB60alteredBB:                            ; preds = %originalBB60, %261
  call void @srand(i32 %1)
  %302 = call i32 @rand()
  %_61 = sub i32 %302, 50000
  %gen62 = mul i32 %_61, 50000
  %_63 = sub i32 0, %302
  %gen64 = add i32 %_63, 50000
  %_65 = sub i32 0, %302
  %gen66 = add i32 %_65, 50000
  %_67 = shl i32 %302, 50000
  %303 = srem i32 %302, 50000
  %_68 = sub i32 %303, 2
  %gen69 = mul i32 %_68, 2
  %_70 = sub i32 %303, 2
  %gen71 = mul i32 %_70, 2
  %_72 = sub i32 0, %303
  %gen73 = add i32 %_72, 2
  %304 = add i32 %303, 2
  br label %originalBB60
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !155, !286, !160, !198, !206, !288, !290, !213, !220, !296, !299, !279, !301, !304, !306, !309, !312, !318, !320, !322, !324, !326}
!llvm.ident = !{!328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328}
!llvm.module.flags = !{!329, !330, !331, !332, !333}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 162, type: !141, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !15, nameTableKind: None)
!3 = !DIFile(filename: "src/who.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !8, !9, !13, !14}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !10, line: 7, baseType: !11)
!10 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/time_t.h", directory: "")
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !12, line: 160, baseType: !13)
!12 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!13 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!14 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!15 = !{!16, !19, !21, !23, !25, !27, !29, !31, !33, !35, !37, !39, !41, !43, !45, !47, !51, !0, !54, !62, !108, !113, !118, !123, !131, !136, !138}
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!18 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "short_list", scope: !2, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "short_output", scope: !2, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "include_idle", scope: !2, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "include_heading", scope: !2, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(name: "include_exit", scope: !2, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "need_login", scope: !2, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!43 = !DIGlobalVariableExpression(var: !44, expr: !DIExpression())
!44 = distinct !DIGlobalVariable(name: "need_users", scope: !2, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!45 = !DIGlobalVariableExpression(var: !46, expr: !DIExpression())
!46 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!47 = !DIGlobalVariableExpression(var: !48, expr: !DIExpression())
!48 = distinct !DIGlobalVariable(name: "time_format", scope: !2, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!49 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!50 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!51 = !DIGlobalVariableExpression(var: !52, expr: !DIExpression())
!52 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!53 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(name: "mesg", scope: !56, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!56 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!57 = !DISubroutineType(types: !58)
!58 = !{null, !53, !49, !50, !53, !49, !49, !49, !49, !49, !49}
!59 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 24, elements: !60)
!60 = !{!61}
!61 = !DISubrange(count: 3)
!62 = !DIGlobalVariableExpression(var: !63, expr: !DIExpression())
!63 = distinct !DIGlobalVariable(name: "hoststr", scope: !64, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!64 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !65, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!65 = !DISubroutineType(types: !66)
!66 = !{null, !67, !9}
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64)
!68 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !69)
!69 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !71)
!70 = !DIFile(filename: "./lib/readutmp.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!71 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !73)
!72 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/utmpx.h", directory: "")
!73 = !{!74, !75, !77, !81, !85, !86, !90, !95, !97, !102, !104}
!74 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !71, file: !72, line: 57, baseType: !14, size: 16)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !71, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!76 = !DIDerivedType(tag: DW_TAG_typedef, name: "__pid_t", file: !12, line: 154, baseType: !53)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !71, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!78 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 256, elements: !79)
!79 = !{!80}
!80 = !DISubrange(count: 32)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !71, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!82 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 32, elements: !83)
!83 = !{!84}
!84 = !DISubrange(count: 4)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !71, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !71, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2048, elements: !88)
!88 = !{!89}
!89 = !DISubrange(count: 256)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !71, file: !72, line: 67, baseType: !91, size: 32, offset: 2656)
!91 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !92)
!92 = !{!93, !94}
!93 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !91, file: !72, line: 45, baseType: !14, size: 16)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !91, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !71, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!96 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !12, line: 41, baseType: !53)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !71, file: !72, line: 79, baseType: !98, size: 64, offset: 2720)
!98 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !71, file: !72, line: 75, size: 64, elements: !99)
!99 = !{!100, !101}
!100 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !98, file: !72, line: 77, baseType: !96, size: 32)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !98, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !71, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!103 = !DICompositeType(tag: DW_TAG_array_type, baseType: !96, size: 128, elements: !83)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !71, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!105 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 160, elements: !106)
!106 = !{!107}
!107 = !DISubrange(count: 20)
!108 = !DIGlobalVariableExpression(var: !109, expr: !DIExpression())
!109 = distinct !DIGlobalVariable(name: "hostlen", scope: !64, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!110 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !111, line: 46, baseType: !112)
!111 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!112 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!113 = !DIGlobalVariableExpression(var: !114, expr: !DIExpression())
!114 = distinct !DIGlobalVariable(name: "now", scope: !115, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!115 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!116 = !DISubroutineType(types: !117)
!117 = !{!49, !9, !9}
!118 = !DIGlobalVariableExpression(var: !119, expr: !DIExpression())
!119 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !115, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!120 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 48, elements: !121)
!121 = !{!122}
!122 = !DISubrange(count: 6)
!123 = !DIGlobalVariableExpression(var: !124, expr: !DIExpression())
!124 = distinct !DIGlobalVariable(name: "buf", scope: !125, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!125 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !126, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!126 = !DISubroutineType(types: !127)
!127 = !{!49, !67}
!128 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 264, elements: !129)
!129 = !{!130}
!130 = !DISubrange(count: 33)
!131 = !DIGlobalVariableExpression(var: !132, expr: !DIExpression())
!132 = distinct !DIGlobalVariable(name: "runlevline", scope: !133, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!133 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !134, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!134 = !DISubroutineType(types: !135)
!135 = !{null, !67}
!136 = !DIGlobalVariableExpression(var: !137, expr: !DIExpression())
!137 = distinct !DIGlobalVariable(name: "comment", scope: !133, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!138 = !DIGlobalVariableExpression(var: !139, expr: !DIExpression())
!139 = distinct !DIGlobalVariable(name: "exitstr", scope: !140, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!140 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !134, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!141 = !DICompositeType(tag: DW_TAG_array_type, baseType: !142, size: 4608, elements: !151)
!142 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !143)
!143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !145)
!144 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!145 = !{!146, !147, !148, !150}
!146 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !143, file: !144, line: 52, baseType: !49, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !143, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !143, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !143, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!151 = !{!152}
!152 = !DISubrange(count: 18)
!153 = !DIGlobalVariableExpression(var: !154, expr: !DIExpression())
!154 = distinct !DIGlobalVariable(name: "Version", scope: !155, file: !156, line: 2, type: !49, isLocal: false, isDefinition: true)
!155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !157, nameTableKind: None)
!156 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!157 = !{!153}
!158 = !DIGlobalVariableExpression(var: !159, expr: !DIExpression())
!159 = distinct !DIGlobalVariable(name: "last_cherror", scope: !160, file: !166, line: 28, type: !53, isLocal: true, isDefinition: true)
!160 = distinct !DICompileUnit(language: DW_LANG_C99, file: !161, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !162, nameTableKind: None)
!161 = !DIFile(filename: "./lib/canon-host.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!162 = !{!163, !158}
!163 = !DIGlobalVariableExpression(var: !164, expr: !DIExpression())
!164 = distinct !DIGlobalVariable(name: "hints", scope: !165, file: !166, line: 64, type: !169, isLocal: true, isDefinition: true)
!165 = distinct !DISubprogram(name: "canon_host_r", scope: !166, file: !166, line: 61, type: !167, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !160, retainedNodes: !4)
!166 = !DIFile(filename: "lib/canon-host.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!167 = !DISubroutineType(types: !168)
!168 = !{!6, !49, !149}
!169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "addrinfo", file: !170, line: 565, size: 384, elements: !171)
!170 = !DIFile(filename: "/usr/include/netdb.h", directory: "")
!171 = !{!172, !173, !174, !175, !176, !181, !193, !194}
!172 = !DIDerivedType(tag: DW_TAG_member, name: "ai_flags", scope: !169, file: !170, line: 567, baseType: !53, size: 32)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "ai_family", scope: !169, file: !170, line: 568, baseType: !53, size: 32, offset: 32)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "ai_socktype", scope: !169, file: !170, line: 569, baseType: !53, size: 32, offset: 64)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "ai_protocol", scope: !169, file: !170, line: 570, baseType: !53, size: 32, offset: 96)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addrlen", scope: !169, file: !170, line: 571, baseType: !177, size: 32, offset: 128)
!177 = !DIDerivedType(tag: DW_TAG_typedef, name: "socklen_t", file: !178, line: 33, baseType: !179)
!178 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/socket.h", directory: "")
!179 = !DIDerivedType(tag: DW_TAG_typedef, name: "__socklen_t", file: !12, line: 209, baseType: !180)
!180 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!181 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addr", scope: !169, file: !170, line: 572, baseType: !182, size: 64, offset: 192)
!182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !183, size: 64)
!183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr", file: !178, line: 178, size: 128, elements: !184)
!184 = !{!185, !189}
!185 = !DIDerivedType(tag: DW_TAG_member, name: "sa_family", scope: !183, file: !178, line: 180, baseType: !186, size: 16)
!186 = !DIDerivedType(tag: DW_TAG_typedef, name: "sa_family_t", file: !187, line: 28, baseType: !188)
!187 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/sockaddr.h", directory: "")
!188 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "sa_data", scope: !183, file: !178, line: 181, baseType: !190, size: 112, offset: 16)
!190 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 112, elements: !191)
!191 = !{!192}
!192 = !DISubrange(count: 14)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "ai_canonname", scope: !169, file: !170, line: 573, baseType: !6, size: 64, offset: 256)
!194 = !DIDerivedType(tag: DW_TAG_member, name: "ai_next", scope: !169, file: !170, line: 574, baseType: !195, size: 64, offset: 320)
!195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !169, size: 64)
!196 = !DIGlobalVariableExpression(var: !197, expr: !DIExpression())
!197 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !198, file: !203, line: 56, type: !18, isLocal: true, isDefinition: true)
!198 = distinct !DICompileUnit(language: DW_LANG_C99, file: !199, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !200, nameTableKind: None)
!199 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!200 = !{!201, !196}
!201 = !DIGlobalVariableExpression(var: !202, expr: !DIExpression())
!202 = distinct !DIGlobalVariable(name: "file_name", scope: !198, file: !203, line: 46, type: !49, isLocal: true, isDefinition: true)
!203 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!204 = !DIGlobalVariableExpression(var: !205, expr: !DIExpression())
!205 = distinct !DIGlobalVariable(name: "exit_failure", scope: !206, file: !209, line: 24, type: !210, isLocal: false, isDefinition: true)
!206 = distinct !DICompileUnit(language: DW_LANG_C99, file: !207, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !208, nameTableKind: None)
!207 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!208 = !{!204}
!209 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!210 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !53)
!211 = !DIGlobalVariableExpression(var: !212, expr: !DIExpression())
!212 = distinct !DIGlobalVariable(name: "program_name", scope: !213, file: !217, line: 33, type: !49, isLocal: false, isDefinition: true)
!213 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, globals: !216, nameTableKind: None)
!214 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!215 = !{!8, !6}
!216 = !{!211}
!217 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!218 = !DIGlobalVariableExpression(var: !219, expr: !DIExpression())
!219 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !220, file: !241, line: 116, type: !254, isLocal: true, isDefinition: true)
!220 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !238, nameTableKind: None)
!221 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!222 = !{!223}
!223 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !224, line: 32, baseType: !180, size: 32, elements: !225)
!224 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!225 = !{!226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236}
!226 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!227 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!228 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!229 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!230 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!231 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!232 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!233 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!234 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!235 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!236 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!237 = !{!53, !188, !110}
!238 = !{!239, !246, !252, !218, !264, !266, !273, !275}
!239 = !DIGlobalVariableExpression(var: !240, expr: !DIExpression())
!240 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !220, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!241 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!242 = !DICompositeType(tag: DW_TAG_array_type, baseType: !243, size: 704, elements: !244)
!243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !49)
!244 = !{!245}
!245 = !DISubrange(count: 11)
!246 = !DIGlobalVariableExpression(var: !247, expr: !DIExpression())
!247 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !220, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!248 = !DICompositeType(tag: DW_TAG_array_type, baseType: !249, size: 320, elements: !250)
!249 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !223)
!250 = !{!251}
!251 = !DISubrange(count: 10)
!252 = !DIGlobalVariableExpression(var: !253, expr: !DIExpression())
!253 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !220, file: !241, line: 1052, type: !254, isLocal: false, isDefinition: true)
!254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !255)
!255 = !{!256, !257, !258, !262, !263}
!256 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !254, file: !241, line: 68, baseType: !223, size: 32)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !254, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !254, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!259 = !DICompositeType(tag: DW_TAG_array_type, baseType: !180, size: 256, elements: !260)
!260 = !{!261}
!261 = !DISubrange(count: 8)
!262 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !254, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !254, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!264 = !DIGlobalVariableExpression(var: !265, expr: !DIExpression())
!265 = distinct !DIGlobalVariable(name: "slot0", scope: !220, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!266 = !DIGlobalVariableExpression(var: !267, expr: !DIExpression())
!267 = distinct !DIGlobalVariable(name: "slotvec", scope: !220, file: !241, line: 845, type: !268, isLocal: true, isDefinition: true)
!268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !269, size: 64)
!269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !270)
!270 = !{!271, !272}
!271 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !269, file: !241, line: 836, baseType: !110, size: 64)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !269, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!273 = !DIGlobalVariableExpression(var: !274, expr: !DIExpression())
!274 = distinct !DIGlobalVariable(name: "nslots", scope: !220, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!275 = !DIGlobalVariableExpression(var: !276, expr: !DIExpression())
!276 = distinct !DIGlobalVariable(name: "slotvec0", scope: !220, file: !241, line: 844, type: !269, isLocal: true, isDefinition: true)
!277 = !DIGlobalVariableExpression(var: !278, expr: !DIExpression())
!278 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !279, file: !282, line: 26, type: !283, isLocal: false, isDefinition: true)
!279 = distinct !DICompileUnit(language: DW_LANG_C99, file: !280, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !281, nameTableKind: None)
!280 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!281 = !{!277}
!282 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 376, elements: !284)
!284 = !{!285}
!285 = !DISubrange(count: 47)
!286 = distinct !DICompileUnit(language: DW_LANG_C99, file: !287, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!287 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!288 = distinct !DICompileUnit(language: DW_LANG_C99, file: !289, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!289 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!290 = distinct !DICompileUnit(language: DW_LANG_C99, file: !291, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !292, nameTableKind: None)
!291 = !DIFile(filename: "./lib/imaxtostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!292 = !{!293}
!293 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !294, line: 101, baseType: !295)
!294 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!295 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !12, line: 72, baseType: !13)
!296 = distinct !DICompileUnit(language: DW_LANG_C99, file: !297, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!297 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!298 = !{!8}
!299 = distinct !DICompileUnit(language: DW_LANG_C99, file: !300, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!300 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!301 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!302 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!303 = !{!110, !6, !8}
!304 = distinct !DICompileUnit(language: DW_LANG_C99, file: !305, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!305 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!306 = distinct !DICompileUnit(language: DW_LANG_C99, file: !307, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !308, nameTableKind: None)
!307 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!308 = !{!110}
!309 = distinct !DICompileUnit(language: DW_LANG_C99, file: !310, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !311, nameTableKind: None)
!310 = !DIFile(filename: "./lib/readutmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!311 = !{!6, !8}
!312 = distinct !DICompileUnit(language: DW_LANG_C99, file: !313, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !314, nameTableKind: None)
!313 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!314 = !{!315}
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64)
!316 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !317)
!317 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!318 = distinct !DICompileUnit(language: DW_LANG_C99, file: !319, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!319 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!320 = distinct !DICompileUnit(language: DW_LANG_C99, file: !321, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!321 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!322 = distinct !DICompileUnit(language: DW_LANG_C99, file: !323, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!323 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!324 = distinct !DICompileUnit(language: DW_LANG_C99, file: !325, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!325 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!326 = distinct !DICompileUnit(language: DW_LANG_C99, file: !327, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!327 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!328 = !{!"clang version 9.0.1-12 "}
!329 = !{i32 2, !"Dwarf Version", i32 4}
!330 = !{i32 2, !"Debug Info Version", i32 3}
!331 = !{i32 1, !"wchar_size", i32 4}
!332 = !{i32 1, !"ThinLTO", i32 0}
!333 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!334 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 638, type: !335, scopeLine: 639, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!335 = !DISubroutineType(types: !336)
!336 = !{null, !53}
!337 = !DILocalVariable(name: "status", arg: 1, scope: !334, file: !3, line: 638, type: !53)
!338 = !DILocation(line: 638, column: 12, scope: !334)
!339 = !DILocation(line: 640, column: 7, scope: !340)
!340 = distinct !DILexicalBlock(scope: !334, file: !3, line: 640, column: 7)
!341 = !DILocation(line: 640, column: 14, scope: !340)
!342 = !DILocation(line: 640, column: 7, scope: !334)
!343 = !DILocation(line: 641, column: 5, scope: !340)
!344 = !DILocation(line: 641, column: 5, scope: !345)
!345 = distinct !DILexicalBlock(scope: !340, file: !3, line: 641, column: 5)
!346 = !DILocation(line: 644, column: 15, scope: !347)
!347 = distinct !DILexicalBlock(scope: !340, file: !3, line: 643, column: 5)
!348 = !DILocation(line: 644, column: 66, scope: !347)
!349 = !DILocation(line: 644, column: 7, scope: !347)
!350 = !DILocation(line: 645, column: 7, scope: !347)
!351 = !DILocation(line: 648, column: 7, scope: !347)
!352 = !DILocation(line: 655, column: 7, scope: !347)
!353 = !DILocation(line: 658, column: 7, scope: !347)
!354 = !DILocation(line: 663, column: 7, scope: !347)
!355 = !DILocation(line: 669, column: 7, scope: !347)
!356 = !DILocation(line: 675, column: 7, scope: !347)
!357 = !DILocation(line: 676, column: 7, scope: !347)
!358 = !DILocation(line: 677, column: 15, scope: !347)
!359 = !DILocation(line: 677, column: 7, scope: !347)
!360 = !DILocation(line: 682, column: 7, scope: !347)
!361 = !DILocation(line: 684, column: 9, scope: !334)
!362 = !DILocation(line: 684, column: 3, scope: !334)
!363 = !DILocalVariable(name: "status", arg: 1, scope: !364, file: !3, line: 638, type: !53)
!364 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 638, type: !335, scopeLine: 639, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !365, retainedNodes: !4)
!365 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !366, nameTableKind: None)
!366 = !{!367, !369, !371, !373, !375, !377, !379, !381, !383, !385, !387, !389, !391, !393, !395, !397, !399, !401, !411, !414, !443, !445, !448, !450, !455, !460, !462}
!367 = !DIGlobalVariableExpression(var: !368, expr: !DIExpression())
!368 = distinct !DIGlobalVariable(name: "do_lookup", scope: !365, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!369 = !DIGlobalVariableExpression(var: !370, expr: !DIExpression())
!370 = distinct !DIGlobalVariable(name: "short_list", scope: !365, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!371 = !DIGlobalVariableExpression(var: !372, expr: !DIExpression())
!372 = distinct !DIGlobalVariable(name: "short_output", scope: !365, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!373 = !DIGlobalVariableExpression(var: !374, expr: !DIExpression())
!374 = distinct !DIGlobalVariable(name: "include_idle", scope: !365, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!375 = !DIGlobalVariableExpression(var: !376, expr: !DIExpression())
!376 = distinct !DIGlobalVariable(name: "include_heading", scope: !365, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!377 = !DIGlobalVariableExpression(var: !378, expr: !DIExpression())
!378 = distinct !DIGlobalVariable(name: "include_mesg", scope: !365, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!379 = !DIGlobalVariableExpression(var: !380, expr: !DIExpression())
!380 = distinct !DIGlobalVariable(name: "include_exit", scope: !365, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!381 = !DIGlobalVariableExpression(var: !382, expr: !DIExpression())
!382 = distinct !DIGlobalVariable(name: "need_boottime", scope: !365, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!383 = !DIGlobalVariableExpression(var: !384, expr: !DIExpression())
!384 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !365, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!385 = !DIGlobalVariableExpression(var: !386, expr: !DIExpression())
!386 = distinct !DIGlobalVariable(name: "need_login", scope: !365, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!387 = !DIGlobalVariableExpression(var: !388, expr: !DIExpression())
!388 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !365, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!389 = !DIGlobalVariableExpression(var: !390, expr: !DIExpression())
!390 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !365, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!391 = !DIGlobalVariableExpression(var: !392, expr: !DIExpression())
!392 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !365, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!393 = !DIGlobalVariableExpression(var: !394, expr: !DIExpression())
!394 = distinct !DIGlobalVariable(name: "need_users", scope: !365, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!395 = !DIGlobalVariableExpression(var: !396, expr: !DIExpression())
!396 = distinct !DIGlobalVariable(name: "my_line_only", scope: !365, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!397 = !DIGlobalVariableExpression(var: !398, expr: !DIExpression())
!398 = distinct !DIGlobalVariable(name: "time_format", scope: !365, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!399 = !DIGlobalVariableExpression(var: !400, expr: !DIExpression())
!400 = distinct !DIGlobalVariable(name: "time_format_width", scope: !365, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!401 = !DIGlobalVariableExpression(var: !402, expr: !DIExpression())
!402 = distinct !DIGlobalVariable(name: "longopts", scope: !365, file: !3, line: 162, type: !403, isLocal: true, isDefinition: true)
!403 = !DICompositeType(tag: DW_TAG_array_type, baseType: !404, size: 4608, elements: !151)
!404 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !405)
!405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !406)
!406 = !{!407, !408, !409, !410}
!407 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !405, file: !144, line: 52, baseType: !49, size: 64)
!408 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !405, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!409 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !405, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !405, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!411 = !DIGlobalVariableExpression(var: !412, expr: !DIExpression())
!412 = distinct !DIGlobalVariable(name: "mesg", scope: !413, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!413 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!414 = !DIGlobalVariableExpression(var: !415, expr: !DIExpression())
!415 = distinct !DIGlobalVariable(name: "hoststr", scope: !416, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!416 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !417, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!417 = !DISubroutineType(types: !418)
!418 = !{null, !419, !9}
!419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !420, size: 64)
!420 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !422)
!422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !423)
!423 = !{!424, !425, !426, !427, !428, !429, !430, !435, !436, !441, !442}
!424 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !422, file: !72, line: 57, baseType: !14, size: 16)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !422, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!426 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !422, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!427 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !422, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !422, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !422, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!430 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !422, file: !72, line: 67, baseType: !431, size: 32, offset: 2656)
!431 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !432)
!432 = !{!433, !434}
!433 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !431, file: !72, line: 45, baseType: !14, size: 16)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !431, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !422, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !422, file: !72, line: 79, baseType: !437, size: 64, offset: 2720)
!437 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !422, file: !72, line: 75, size: 64, elements: !438)
!438 = !{!439, !440}
!439 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !437, file: !72, line: 77, baseType: !96, size: 32)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !437, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !422, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !422, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!443 = !DIGlobalVariableExpression(var: !444, expr: !DIExpression())
!444 = distinct !DIGlobalVariable(name: "hostlen", scope: !416, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!445 = !DIGlobalVariableExpression(var: !446, expr: !DIExpression())
!446 = distinct !DIGlobalVariable(name: "now", scope: !447, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!447 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!448 = !DIGlobalVariableExpression(var: !449, expr: !DIExpression())
!449 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !447, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!450 = !DIGlobalVariableExpression(var: !451, expr: !DIExpression())
!451 = distinct !DIGlobalVariable(name: "buf", scope: !452, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!452 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !453, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!453 = !DISubroutineType(types: !454)
!454 = !{!49, !419}
!455 = !DIGlobalVariableExpression(var: !456, expr: !DIExpression())
!456 = distinct !DIGlobalVariable(name: "runlevline", scope: !457, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!457 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !458, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!458 = !DISubroutineType(types: !459)
!459 = !{null, !419}
!460 = !DIGlobalVariableExpression(var: !461, expr: !DIExpression())
!461 = distinct !DIGlobalVariable(name: "comment", scope: !457, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!462 = !DIGlobalVariableExpression(var: !463, expr: !DIExpression())
!463 = distinct !DIGlobalVariable(name: "exitstr", scope: !464, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!464 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !458, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!465 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !466, file: !466, line: 634, type: !467, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!466 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!467 = !DISubroutineType(types: !468)
!468 = !{null, !49}
!469 = !DILocalVariable(name: "program", arg: 1, scope: !465, file: !466, line: 634, type: !49)
!470 = !DILocation(line: 634, column: 34, scope: !465)
!471 = !DILocalVariable(name: "infomap", scope: !465, file: !466, line: 636, type: !472)
!472 = !DICompositeType(tag: DW_TAG_array_type, baseType: !473, size: 896, elements: !478)
!473 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !474)
!474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !465, file: !466, line: 636, size: 128, elements: !475)
!475 = !{!476, !477}
!476 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !474, file: !466, line: 636, baseType: !49, size: 64)
!477 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !474, file: !466, line: 636, baseType: !49, size: 64, offset: 64)
!478 = !{!479}
!479 = !DISubrange(count: 7)
!480 = !DILocation(line: 636, column: 67, scope: !465)
!481 = !DILocalVariable(name: "node", scope: !465, file: !466, line: 646, type: !49)
!482 = !DILocation(line: 646, column: 15, scope: !465)
!483 = !DILocation(line: 646, column: 22, scope: !465)
!484 = !DILocalVariable(name: "map_prog", scope: !465, file: !466, line: 647, type: !485)
!485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !473, size: 64)
!486 = !DILocation(line: 647, column: 25, scope: !465)
!487 = !DILocation(line: 647, column: 36, scope: !465)
!488 = !DILocation(line: 649, column: 3, scope: !465)
!489 = !DILocation(line: 649, column: 10, scope: !465)
!490 = !DILocation(line: 649, column: 20, scope: !465)
!491 = !DILocation(line: 649, column: 28, scope: !465)
!492 = !DILocation(line: 649, column: 33, scope: !465)
!493 = !DILocation(line: 649, column: 31, scope: !465)
!494 = !DILocation(line: 0, scope: !465)
!495 = !DILocation(line: 650, column: 13, scope: !465)
!496 = distinct !{!496, !488, !495}
!497 = !DILocation(line: 652, column: 7, scope: !498)
!498 = distinct !DILexicalBlock(scope: !465, file: !466, line: 652, column: 7)
!499 = !DILocation(line: 652, column: 17, scope: !498)
!500 = !DILocation(line: 652, column: 7, scope: !465)
!501 = !DILocation(line: 653, column: 12, scope: !498)
!502 = !DILocation(line: 653, column: 22, scope: !498)
!503 = !DILocation(line: 653, column: 10, scope: !498)
!504 = !DILocation(line: 653, column: 5, scope: !498)
!505 = !DILocation(line: 655, column: 11, scope: !465)
!506 = !DILocation(line: 655, column: 3, scope: !465)
!507 = !DILocalVariable(name: "lc_messages", scope: !465, file: !466, line: 659, type: !49)
!508 = !DILocation(line: 659, column: 15, scope: !465)
!509 = !DILocation(line: 659, column: 29, scope: !465)
!510 = !DILocation(line: 660, column: 7, scope: !511)
!511 = distinct !DILexicalBlock(scope: !465, file: !466, line: 660, column: 7)
!512 = !DILocation(line: 660, column: 19, scope: !511)
!513 = !DILocation(line: 660, column: 22, scope: !511)
!514 = !DILocation(line: 660, column: 7, scope: !465)
!515 = !DILocation(line: 666, column: 7, scope: !516)
!516 = distinct !DILexicalBlock(scope: !511, file: !466, line: 661, column: 5)
!517 = !DILocation(line: 668, column: 5, scope: !516)
!518 = !DILocation(line: 669, column: 11, scope: !465)
!519 = !DILocation(line: 670, column: 24, scope: !465)
!520 = !DILocation(line: 669, column: 3, scope: !465)
!521 = !DILocation(line: 671, column: 11, scope: !465)
!522 = !DILocation(line: 672, column: 11, scope: !465)
!523 = !DILocation(line: 672, column: 17, scope: !465)
!524 = !DILocation(line: 672, column: 25, scope: !465)
!525 = !DILocation(line: 672, column: 22, scope: !465)
!526 = !DILocation(line: 671, column: 3, scope: !465)
!527 = !DILocation(line: 673, column: 1, scope: !465)
!528 = !DILocalVariable(name: "program", arg: 1, scope: !529, file: !466, line: 634, type: !49)
!529 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !466, file: !466, line: 634, type: !467, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!530 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !531, nameTableKind: None)
!531 = !{!532, !534, !536, !538, !540, !542, !544, !546, !548, !550, !552, !554, !556, !558, !560, !562, !564, !566, !576, !579, !608, !610, !613, !615, !620, !625, !627}
!532 = !DIGlobalVariableExpression(var: !533, expr: !DIExpression())
!533 = distinct !DIGlobalVariable(name: "do_lookup", scope: !530, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!534 = !DIGlobalVariableExpression(var: !535, expr: !DIExpression())
!535 = distinct !DIGlobalVariable(name: "short_list", scope: !530, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!536 = !DIGlobalVariableExpression(var: !537, expr: !DIExpression())
!537 = distinct !DIGlobalVariable(name: "short_output", scope: !530, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!538 = !DIGlobalVariableExpression(var: !539, expr: !DIExpression())
!539 = distinct !DIGlobalVariable(name: "include_idle", scope: !530, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!540 = !DIGlobalVariableExpression(var: !541, expr: !DIExpression())
!541 = distinct !DIGlobalVariable(name: "include_heading", scope: !530, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!542 = !DIGlobalVariableExpression(var: !543, expr: !DIExpression())
!543 = distinct !DIGlobalVariable(name: "include_mesg", scope: !530, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!544 = !DIGlobalVariableExpression(var: !545, expr: !DIExpression())
!545 = distinct !DIGlobalVariable(name: "include_exit", scope: !530, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!546 = !DIGlobalVariableExpression(var: !547, expr: !DIExpression())
!547 = distinct !DIGlobalVariable(name: "need_boottime", scope: !530, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!548 = !DIGlobalVariableExpression(var: !549, expr: !DIExpression())
!549 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !530, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!550 = !DIGlobalVariableExpression(var: !551, expr: !DIExpression())
!551 = distinct !DIGlobalVariable(name: "need_login", scope: !530, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!552 = !DIGlobalVariableExpression(var: !553, expr: !DIExpression())
!553 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !530, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!554 = !DIGlobalVariableExpression(var: !555, expr: !DIExpression())
!555 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !530, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!556 = !DIGlobalVariableExpression(var: !557, expr: !DIExpression())
!557 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !530, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!558 = !DIGlobalVariableExpression(var: !559, expr: !DIExpression())
!559 = distinct !DIGlobalVariable(name: "need_users", scope: !530, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!560 = !DIGlobalVariableExpression(var: !561, expr: !DIExpression())
!561 = distinct !DIGlobalVariable(name: "my_line_only", scope: !530, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!562 = !DIGlobalVariableExpression(var: !563, expr: !DIExpression())
!563 = distinct !DIGlobalVariable(name: "time_format", scope: !530, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!564 = !DIGlobalVariableExpression(var: !565, expr: !DIExpression())
!565 = distinct !DIGlobalVariable(name: "time_format_width", scope: !530, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!566 = !DIGlobalVariableExpression(var: !567, expr: !DIExpression())
!567 = distinct !DIGlobalVariable(name: "longopts", scope: !530, file: !3, line: 162, type: !568, isLocal: true, isDefinition: true)
!568 = !DICompositeType(tag: DW_TAG_array_type, baseType: !569, size: 4608, elements: !151)
!569 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !570)
!570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !571)
!571 = !{!572, !573, !574, !575}
!572 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !570, file: !144, line: 52, baseType: !49, size: 64)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !570, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !570, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !570, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!576 = !DIGlobalVariableExpression(var: !577, expr: !DIExpression())
!577 = distinct !DIGlobalVariable(name: "mesg", scope: !578, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!578 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!579 = !DIGlobalVariableExpression(var: !580, expr: !DIExpression())
!580 = distinct !DIGlobalVariable(name: "hoststr", scope: !581, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!581 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !582, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!582 = !DISubroutineType(types: !583)
!583 = !{null, !584, !9}
!584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !585, size: 64)
!585 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !586)
!586 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !587)
!587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !588)
!588 = !{!589, !590, !591, !592, !593, !594, !595, !600, !601, !606, !607}
!589 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !587, file: !72, line: 57, baseType: !14, size: 16)
!590 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !587, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !587, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!592 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !587, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!593 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !587, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !587, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!595 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !587, file: !72, line: 67, baseType: !596, size: 32, offset: 2656)
!596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !597)
!597 = !{!598, !599}
!598 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !596, file: !72, line: 45, baseType: !14, size: 16)
!599 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !596, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!600 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !587, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!601 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !587, file: !72, line: 79, baseType: !602, size: 64, offset: 2720)
!602 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !587, file: !72, line: 75, size: 64, elements: !603)
!603 = !{!604, !605}
!604 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !602, file: !72, line: 77, baseType: !96, size: 32)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !602, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !587, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !587, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!608 = !DIGlobalVariableExpression(var: !609, expr: !DIExpression())
!609 = distinct !DIGlobalVariable(name: "hostlen", scope: !581, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!610 = !DIGlobalVariableExpression(var: !611, expr: !DIExpression())
!611 = distinct !DIGlobalVariable(name: "now", scope: !612, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!612 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!613 = !DIGlobalVariableExpression(var: !614, expr: !DIExpression())
!614 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !612, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!615 = !DIGlobalVariableExpression(var: !616, expr: !DIExpression())
!616 = distinct !DIGlobalVariable(name: "buf", scope: !617, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!617 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !618, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!618 = !DISubroutineType(types: !619)
!619 = !{!49, !584}
!620 = !DIGlobalVariableExpression(var: !621, expr: !DIExpression())
!621 = distinct !DIGlobalVariable(name: "runlevline", scope: !622, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!622 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !623, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!623 = !DISubroutineType(types: !624)
!624 = !{null, !584}
!625 = !DIGlobalVariableExpression(var: !626, expr: !DIExpression())
!626 = distinct !DIGlobalVariable(name: "comment", scope: !622, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!627 = !DIGlobalVariableExpression(var: !628, expr: !DIExpression())
!628 = distinct !DIGlobalVariable(name: "exitstr", scope: !629, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!629 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !623, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!630 = !DILocalVariable(name: "infomap", scope: !529, file: !466, line: 636, type: !631)
!631 = !DICompositeType(tag: DW_TAG_array_type, baseType: !632, size: 896, elements: !478)
!632 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !633)
!633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !529, file: !466, line: 636, size: 128, elements: !634)
!634 = !{!635, !636}
!635 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !633, file: !466, line: 636, baseType: !49, size: 64)
!636 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !633, file: !466, line: 636, baseType: !49, size: 64, offset: 64)
!637 = !DILocalVariable(name: "node", scope: !529, file: !466, line: 646, type: !49)
!638 = !DILocalVariable(name: "map_prog", scope: !529, file: !466, line: 647, type: !639)
!639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !632, size: 64)
!640 = !DILocalVariable(name: "lc_messages", scope: !641, file: !466, line: 659, type: !49)
!641 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !466, file: !466, line: 634, type: !467, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!642 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !643, nameTableKind: None)
!643 = !{!644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !664, !666, !668, !670, !672, !674, !676, !678, !688, !691, !720, !722, !725, !727, !732, !737, !739}
!644 = !DIGlobalVariableExpression(var: !645, expr: !DIExpression())
!645 = distinct !DIGlobalVariable(name: "do_lookup", scope: !642, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!646 = !DIGlobalVariableExpression(var: !647, expr: !DIExpression())
!647 = distinct !DIGlobalVariable(name: "short_list", scope: !642, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!648 = !DIGlobalVariableExpression(var: !649, expr: !DIExpression())
!649 = distinct !DIGlobalVariable(name: "short_output", scope: !642, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!650 = !DIGlobalVariableExpression(var: !651, expr: !DIExpression())
!651 = distinct !DIGlobalVariable(name: "include_idle", scope: !642, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!652 = !DIGlobalVariableExpression(var: !653, expr: !DIExpression())
!653 = distinct !DIGlobalVariable(name: "include_heading", scope: !642, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!654 = !DIGlobalVariableExpression(var: !655, expr: !DIExpression())
!655 = distinct !DIGlobalVariable(name: "include_mesg", scope: !642, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!656 = !DIGlobalVariableExpression(var: !657, expr: !DIExpression())
!657 = distinct !DIGlobalVariable(name: "include_exit", scope: !642, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!658 = !DIGlobalVariableExpression(var: !659, expr: !DIExpression())
!659 = distinct !DIGlobalVariable(name: "need_boottime", scope: !642, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!660 = !DIGlobalVariableExpression(var: !661, expr: !DIExpression())
!661 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !642, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!662 = !DIGlobalVariableExpression(var: !663, expr: !DIExpression())
!663 = distinct !DIGlobalVariable(name: "need_login", scope: !642, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!664 = !DIGlobalVariableExpression(var: !665, expr: !DIExpression())
!665 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !642, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!666 = !DIGlobalVariableExpression(var: !667, expr: !DIExpression())
!667 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !642, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!668 = !DIGlobalVariableExpression(var: !669, expr: !DIExpression())
!669 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !642, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!670 = !DIGlobalVariableExpression(var: !671, expr: !DIExpression())
!671 = distinct !DIGlobalVariable(name: "need_users", scope: !642, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!672 = !DIGlobalVariableExpression(var: !673, expr: !DIExpression())
!673 = distinct !DIGlobalVariable(name: "my_line_only", scope: !642, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!674 = !DIGlobalVariableExpression(var: !675, expr: !DIExpression())
!675 = distinct !DIGlobalVariable(name: "time_format", scope: !642, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!676 = !DIGlobalVariableExpression(var: !677, expr: !DIExpression())
!677 = distinct !DIGlobalVariable(name: "time_format_width", scope: !642, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!678 = !DIGlobalVariableExpression(var: !679, expr: !DIExpression())
!679 = distinct !DIGlobalVariable(name: "longopts", scope: !642, file: !3, line: 162, type: !680, isLocal: true, isDefinition: true)
!680 = !DICompositeType(tag: DW_TAG_array_type, baseType: !681, size: 4608, elements: !151)
!681 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !682)
!682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !683)
!683 = !{!684, !685, !686, !687}
!684 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !682, file: !144, line: 52, baseType: !49, size: 64)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !682, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !682, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !682, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!688 = !DIGlobalVariableExpression(var: !689, expr: !DIExpression())
!689 = distinct !DIGlobalVariable(name: "mesg", scope: !690, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!690 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!691 = !DIGlobalVariableExpression(var: !692, expr: !DIExpression())
!692 = distinct !DIGlobalVariable(name: "hoststr", scope: !693, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!693 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !694, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!694 = !DISubroutineType(types: !695)
!695 = !{null, !696, !9}
!696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !697, size: 64)
!697 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !698)
!698 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !699)
!699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !700)
!700 = !{!701, !702, !703, !704, !705, !706, !707, !712, !713, !718, !719}
!701 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !699, file: !72, line: 57, baseType: !14, size: 16)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !699, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !699, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !699, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !699, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !699, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !699, file: !72, line: 67, baseType: !708, size: 32, offset: 2656)
!708 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !709)
!709 = !{!710, !711}
!710 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !708, file: !72, line: 45, baseType: !14, size: 16)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !708, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!712 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !699, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !699, file: !72, line: 79, baseType: !714, size: 64, offset: 2720)
!714 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !699, file: !72, line: 75, size: 64, elements: !715)
!715 = !{!716, !717}
!716 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !714, file: !72, line: 77, baseType: !96, size: 32)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !714, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !699, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !699, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!720 = !DIGlobalVariableExpression(var: !721, expr: !DIExpression())
!721 = distinct !DIGlobalVariable(name: "hostlen", scope: !693, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!722 = !DIGlobalVariableExpression(var: !723, expr: !DIExpression())
!723 = distinct !DIGlobalVariable(name: "now", scope: !724, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!724 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!725 = !DIGlobalVariableExpression(var: !726, expr: !DIExpression())
!726 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !724, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!727 = !DIGlobalVariableExpression(var: !728, expr: !DIExpression())
!728 = distinct !DIGlobalVariable(name: "buf", scope: !729, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!729 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !730, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!730 = !DISubroutineType(types: !731)
!731 = !{!49, !696}
!732 = !DIGlobalVariableExpression(var: !733, expr: !DIExpression())
!733 = distinct !DIGlobalVariable(name: "runlevline", scope: !734, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!734 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !735, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!735 = !DISubroutineType(types: !736)
!736 = !{null, !696}
!737 = !DIGlobalVariableExpression(var: !738, expr: !DIExpression())
!738 = distinct !DIGlobalVariable(name: "comment", scope: !734, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!739 = !DIGlobalVariableExpression(var: !740, expr: !DIExpression())
!740 = distinct !DIGlobalVariable(name: "exitstr", scope: !741, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!741 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !735, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!742 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 688, type: !743, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!743 = !DISubroutineType(types: !744)
!744 = !{!53, !53, !745}
!745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!746 = !DILocalVariable(name: "argc", arg: 1, scope: !742, file: !3, line: 688, type: !53)
!747 = !DILocation(line: 688, column: 11, scope: !742)
!748 = !DILocalVariable(name: "argv", arg: 2, scope: !742, file: !3, line: 688, type: !745)
!749 = !DILocation(line: 688, column: 24, scope: !742)
!750 = !DILocalVariable(name: "optc", scope: !742, file: !3, line: 690, type: !53)
!751 = !DILocation(line: 690, column: 7, scope: !742)
!752 = !DILocalVariable(name: "assumptions", scope: !742, file: !3, line: 691, type: !18)
!753 = !DILocation(line: 691, column: 8, scope: !742)
!754 = !DILocation(line: 694, column: 21, scope: !742)
!755 = !DILocation(line: 694, column: 3, scope: !742)
!756 = !DILocation(line: 695, column: 3, scope: !742)
!757 = !DILocation(line: 696, column: 3, scope: !742)
!758 = !DILocation(line: 697, column: 3, scope: !742)
!759 = !DILocation(line: 699, column: 3, scope: !742)
!760 = !DILocation(line: 701, column: 3, scope: !742)
!761 = !DILocation(line: 701, column: 31, scope: !742)
!762 = !DILocation(line: 701, column: 37, scope: !742)
!763 = !DILocation(line: 701, column: 18, scope: !742)
!764 = !DILocation(line: 701, column: 16, scope: !742)
!765 = !DILocation(line: 702, column: 10, scope: !742)
!766 = !DILocation(line: 704, column: 15, scope: !767)
!767 = distinct !DILexicalBlock(scope: !742, file: !3, line: 703, column: 5)
!768 = !DILocation(line: 704, column: 7, scope: !767)
!769 = !DILocation(line: 707, column: 25, scope: !770)
!770 = distinct !DILexicalBlock(scope: !767, file: !3, line: 705, column: 9)
!771 = !DILocation(line: 708, column: 26, scope: !770)
!772 = !DILocation(line: 709, column: 22, scope: !770)
!773 = !DILocation(line: 710, column: 26, scope: !770)
!774 = !DILocation(line: 711, column: 25, scope: !770)
!775 = !DILocation(line: 712, column: 28, scope: !770)
!776 = !DILocation(line: 713, column: 22, scope: !770)
!777 = !DILocation(line: 714, column: 24, scope: !770)
!778 = !DILocation(line: 715, column: 24, scope: !770)
!779 = !DILocation(line: 716, column: 24, scope: !770)
!780 = !DILocation(line: 717, column: 23, scope: !770)
!781 = !DILocation(line: 718, column: 11, scope: !770)
!782 = !DILocation(line: 721, column: 25, scope: !770)
!783 = !DILocation(line: 722, column: 23, scope: !770)
!784 = !DILocation(line: 723, column: 11, scope: !770)
!785 = !DILocation(line: 726, column: 26, scope: !770)
!786 = !DILocation(line: 727, column: 24, scope: !770)
!787 = !DILocation(line: 728, column: 24, scope: !770)
!788 = !DILocation(line: 729, column: 23, scope: !770)
!789 = !DILocation(line: 730, column: 11, scope: !770)
!790 = !DILocation(line: 733, column: 27, scope: !770)
!791 = !DILocation(line: 734, column: 11, scope: !770)
!792 = !DILocation(line: 737, column: 22, scope: !770)
!793 = !DILocation(line: 738, column: 24, scope: !770)
!794 = !DILocation(line: 739, column: 23, scope: !770)
!795 = !DILocation(line: 740, column: 11, scope: !770)
!796 = !DILocation(line: 743, column: 24, scope: !770)
!797 = !DILocation(line: 744, column: 11, scope: !770)
!798 = !DILocation(line: 747, column: 26, scope: !770)
!799 = !DILocation(line: 748, column: 23, scope: !770)
!800 = !DILocation(line: 749, column: 11, scope: !770)
!801 = !DILocation(line: 752, column: 22, scope: !770)
!802 = !DILocation(line: 753, column: 11, scope: !770)
!803 = !DILocation(line: 756, column: 25, scope: !770)
!804 = !DILocation(line: 757, column: 24, scope: !770)
!805 = !DILocation(line: 758, column: 23, scope: !770)
!806 = !DILocation(line: 759, column: 11, scope: !770)
!807 = !DILocation(line: 762, column: 24, scope: !770)
!808 = !DILocation(line: 763, column: 11, scope: !770)
!809 = !DILocation(line: 766, column: 28, scope: !770)
!810 = !DILocation(line: 767, column: 23, scope: !770)
!811 = !DILocation(line: 768, column: 11, scope: !770)
!812 = !DILocation(line: 772, column: 24, scope: !770)
!813 = !DILocation(line: 773, column: 11, scope: !770)
!814 = !DILocation(line: 776, column: 22, scope: !770)
!815 = !DILocation(line: 777, column: 24, scope: !770)
!816 = !DILocation(line: 778, column: 23, scope: !770)
!817 = !DILocation(line: 779, column: 11, scope: !770)
!818 = !DILocation(line: 782, column: 21, scope: !770)
!819 = !DILocation(line: 783, column: 11, scope: !770)
!820 = !DILocation(line: 785, column: 9, scope: !770)
!821 = !DILocation(line: 787, column: 9, scope: !770)
!822 = !DILocation(line: 790, column: 11, scope: !770)
!823 = distinct !{!823, !760, !824}
!824 = !DILocation(line: 792, column: 5, scope: !742)
!825 = !DILocation(line: 794, column: 7, scope: !826)
!826 = distinct !DILexicalBlock(scope: !742, file: !3, line: 794, column: 7)
!827 = !DILocation(line: 794, column: 7, scope: !742)
!828 = !DILocation(line: 796, column: 18, scope: !829)
!829 = distinct !DILexicalBlock(scope: !826, file: !3, line: 795, column: 5)
!830 = !DILocation(line: 797, column: 20, scope: !829)
!831 = !DILocation(line: 798, column: 5, scope: !829)
!832 = !DILocation(line: 800, column: 7, scope: !833)
!833 = distinct !DILexicalBlock(scope: !742, file: !3, line: 800, column: 7)
!834 = !DILocation(line: 800, column: 7, scope: !742)
!835 = !DILocation(line: 802, column: 20, scope: !836)
!836 = distinct !DILexicalBlock(scope: !833, file: !3, line: 801, column: 5)
!837 = !DILocation(line: 803, column: 5, scope: !836)
!838 = !DILocation(line: 805, column: 7, scope: !839)
!839 = distinct !DILexicalBlock(scope: !742, file: !3, line: 805, column: 7)
!840 = !DILocation(line: 805, column: 7, scope: !742)
!841 = !DILocation(line: 807, column: 19, scope: !842)
!842 = distinct !DILexicalBlock(scope: !839, file: !3, line: 806, column: 5)
!843 = !DILocation(line: 808, column: 25, scope: !842)
!844 = !DILocation(line: 809, column: 5, scope: !842)
!845 = !DILocation(line: 812, column: 19, scope: !846)
!846 = distinct !DILexicalBlock(scope: !839, file: !3, line: 811, column: 5)
!847 = !DILocation(line: 813, column: 25, scope: !846)
!848 = !DILocation(line: 816, column: 11, scope: !742)
!849 = !DILocation(line: 816, column: 18, scope: !742)
!850 = !DILocation(line: 816, column: 16, scope: !742)
!851 = !DILocation(line: 816, column: 3, scope: !742)
!852 = !DILocation(line: 819, column: 20, scope: !853)
!853 = distinct !DILexicalBlock(scope: !742, file: !3, line: 817, column: 5)
!854 = !DILocation(line: 820, column: 7, scope: !853)
!855 = !DILocation(line: 823, column: 7, scope: !853)
!856 = !DILocation(line: 824, column: 7, scope: !853)
!857 = !DILocation(line: 827, column: 12, scope: !853)
!858 = !DILocation(line: 827, column: 17, scope: !853)
!859 = !DILocation(line: 827, column: 7, scope: !853)
!860 = !DILocation(line: 828, column: 7, scope: !853)
!861 = !DILocation(line: 831, column: 20, scope: !853)
!862 = !DILocation(line: 831, column: 50, scope: !853)
!863 = !DILocation(line: 831, column: 55, scope: !853)
!864 = !DILocation(line: 831, column: 62, scope: !853)
!865 = !DILocation(line: 831, column: 43, scope: !853)
!866 = !DILocation(line: 831, column: 7, scope: !853)
!867 = !DILocation(line: 832, column: 7, scope: !853)
!868 = !DILocation(line: 835, column: 3, scope: !742)
!869 = !DILocalVariable(name: "argc", arg: 1, scope: !870, file: !3, line: 688, type: !53)
!870 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 688, type: !743, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !871, retainedNodes: !4)
!871 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !872, nameTableKind: None)
!872 = !{!873, !875, !877, !879, !881, !883, !885, !887, !889, !891, !893, !895, !897, !899, !901, !903, !905, !907, !917, !920, !949, !951, !954, !956, !961, !966, !968}
!873 = !DIGlobalVariableExpression(var: !874, expr: !DIExpression())
!874 = distinct !DIGlobalVariable(name: "do_lookup", scope: !871, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!875 = !DIGlobalVariableExpression(var: !876, expr: !DIExpression())
!876 = distinct !DIGlobalVariable(name: "short_list", scope: !871, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!877 = !DIGlobalVariableExpression(var: !878, expr: !DIExpression())
!878 = distinct !DIGlobalVariable(name: "short_output", scope: !871, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!879 = !DIGlobalVariableExpression(var: !880, expr: !DIExpression())
!880 = distinct !DIGlobalVariable(name: "include_idle", scope: !871, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!881 = !DIGlobalVariableExpression(var: !882, expr: !DIExpression())
!882 = distinct !DIGlobalVariable(name: "include_heading", scope: !871, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!883 = !DIGlobalVariableExpression(var: !884, expr: !DIExpression())
!884 = distinct !DIGlobalVariable(name: "include_mesg", scope: !871, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!885 = !DIGlobalVariableExpression(var: !886, expr: !DIExpression())
!886 = distinct !DIGlobalVariable(name: "include_exit", scope: !871, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!887 = !DIGlobalVariableExpression(var: !888, expr: !DIExpression())
!888 = distinct !DIGlobalVariable(name: "need_boottime", scope: !871, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!889 = !DIGlobalVariableExpression(var: !890, expr: !DIExpression())
!890 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !871, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!891 = !DIGlobalVariableExpression(var: !892, expr: !DIExpression())
!892 = distinct !DIGlobalVariable(name: "need_login", scope: !871, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!893 = !DIGlobalVariableExpression(var: !894, expr: !DIExpression())
!894 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !871, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!895 = !DIGlobalVariableExpression(var: !896, expr: !DIExpression())
!896 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !871, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!897 = !DIGlobalVariableExpression(var: !898, expr: !DIExpression())
!898 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !871, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!899 = !DIGlobalVariableExpression(var: !900, expr: !DIExpression())
!900 = distinct !DIGlobalVariable(name: "need_users", scope: !871, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!901 = !DIGlobalVariableExpression(var: !902, expr: !DIExpression())
!902 = distinct !DIGlobalVariable(name: "my_line_only", scope: !871, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!903 = !DIGlobalVariableExpression(var: !904, expr: !DIExpression())
!904 = distinct !DIGlobalVariable(name: "time_format", scope: !871, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!905 = !DIGlobalVariableExpression(var: !906, expr: !DIExpression())
!906 = distinct !DIGlobalVariable(name: "time_format_width", scope: !871, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!907 = !DIGlobalVariableExpression(var: !908, expr: !DIExpression())
!908 = distinct !DIGlobalVariable(name: "longopts", scope: !871, file: !3, line: 162, type: !909, isLocal: true, isDefinition: true)
!909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !910, size: 4608, elements: !151)
!910 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !911)
!911 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !912)
!912 = !{!913, !914, !915, !916}
!913 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !911, file: !144, line: 52, baseType: !49, size: 64)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !911, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !911, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !911, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!917 = !DIGlobalVariableExpression(var: !918, expr: !DIExpression())
!918 = distinct !DIGlobalVariable(name: "mesg", scope: !919, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!919 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!920 = !DIGlobalVariableExpression(var: !921, expr: !DIExpression())
!921 = distinct !DIGlobalVariable(name: "hoststr", scope: !922, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!922 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !923, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!923 = !DISubroutineType(types: !924)
!924 = !{null, !925, !9}
!925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !926, size: 64)
!926 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !927)
!927 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !928)
!928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !929)
!929 = !{!930, !931, !932, !933, !934, !935, !936, !941, !942, !947, !948}
!930 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !928, file: !72, line: 57, baseType: !14, size: 16)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !928, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !928, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !928, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !928, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !928, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !928, file: !72, line: 67, baseType: !937, size: 32, offset: 2656)
!937 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !938)
!938 = !{!939, !940}
!939 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !937, file: !72, line: 45, baseType: !14, size: 16)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !937, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !928, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !928, file: !72, line: 79, baseType: !943, size: 64, offset: 2720)
!943 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !928, file: !72, line: 75, size: 64, elements: !944)
!944 = !{!945, !946}
!945 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !943, file: !72, line: 77, baseType: !96, size: 32)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !943, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !928, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !928, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!949 = !DIGlobalVariableExpression(var: !950, expr: !DIExpression())
!950 = distinct !DIGlobalVariable(name: "hostlen", scope: !922, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!951 = !DIGlobalVariableExpression(var: !952, expr: !DIExpression())
!952 = distinct !DIGlobalVariable(name: "now", scope: !953, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!953 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!954 = !DIGlobalVariableExpression(var: !955, expr: !DIExpression())
!955 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !953, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!956 = !DIGlobalVariableExpression(var: !957, expr: !DIExpression())
!957 = distinct !DIGlobalVariable(name: "buf", scope: !958, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!958 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !959, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!959 = !DISubroutineType(types: !960)
!960 = !{!49, !925}
!961 = !DIGlobalVariableExpression(var: !962, expr: !DIExpression())
!962 = distinct !DIGlobalVariable(name: "runlevline", scope: !963, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!963 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !964, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!964 = !DISubroutineType(types: !965)
!965 = !{null, !925}
!966 = !DIGlobalVariableExpression(var: !967, expr: !DIExpression())
!967 = distinct !DIGlobalVariable(name: "comment", scope: !963, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!968 = !DIGlobalVariableExpression(var: !969, expr: !DIExpression())
!969 = distinct !DIGlobalVariable(name: "exitstr", scope: !970, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!970 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !964, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!971 = !DILocalVariable(name: "argv", arg: 2, scope: !870, file: !3, line: 688, type: !745)
!972 = !DILocalVariable(name: "optc", scope: !870, file: !3, line: 690, type: !53)
!973 = !DILocalVariable(name: "assumptions", scope: !870, file: !3, line: 691, type: !18)
!974 = distinct !DISubprogram(name: "who", scope: !3, file: !3, line: 621, type: !975, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!975 = !DISubroutineType(types: !976)
!976 = !{null, !49, !53}
!977 = !DILocalVariable(name: "filename", arg: 1, scope: !974, file: !3, line: 621, type: !49)
!978 = !DILocation(line: 621, column: 18, scope: !974)
!979 = !DILocalVariable(name: "options", arg: 2, scope: !974, file: !3, line: 621, type: !53)
!980 = !DILocation(line: 621, column: 32, scope: !974)
!981 = !DILocalVariable(name: "n_users", scope: !974, file: !3, line: 623, type: !110)
!982 = !DILocation(line: 623, column: 10, scope: !974)
!983 = !DILocalVariable(name: "utmp_buf", scope: !974, file: !3, line: 624, type: !984)
!984 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!985 = !DILocation(line: 624, column: 16, scope: !974)
!986 = !DILocation(line: 626, column: 18, scope: !987)
!987 = distinct !DILexicalBlock(scope: !974, file: !3, line: 626, column: 7)
!988 = !DILocation(line: 626, column: 49, scope: !987)
!989 = !DILocation(line: 626, column: 7, scope: !987)
!990 = !DILocation(line: 626, column: 58, scope: !987)
!991 = !DILocation(line: 626, column: 7, scope: !974)
!992 = !DILocation(line: 627, column: 5, scope: !987)
!993 = !DILocation(line: 629, column: 7, scope: !994)
!994 = distinct !DILexicalBlock(scope: !974, file: !3, line: 629, column: 7)
!995 = !DILocation(line: 629, column: 7, scope: !974)
!996 = !DILocation(line: 630, column: 23, scope: !994)
!997 = !DILocation(line: 630, column: 32, scope: !994)
!998 = !DILocation(line: 630, column: 5, scope: !994)
!999 = !DILocation(line: 632, column: 19, scope: !994)
!1000 = !DILocation(line: 632, column: 28, scope: !994)
!1001 = !DILocation(line: 632, column: 5, scope: !994)
!1002 = !DILocation(line: 634, column: 9, scope: !974)
!1003 = !DILocation(line: 634, column: 3, scope: !974)
!1004 = !DILocation(line: 635, column: 1, scope: !974)
!1005 = !DILocalVariable(name: "filename", arg: 1, scope: !1006, file: !3, line: 621, type: !49)
!1006 = distinct !DISubprogram(name: "who", scope: !3, file: !3, line: 621, type: !975, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1007 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1008, nameTableKind: None)
!1008 = !{!1009, !1011, !1013, !1015, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1037, !1039, !1041, !1043, !1053, !1056, !1085, !1087, !1090, !1092, !1097, !1102, !1104}
!1009 = !DIGlobalVariableExpression(var: !1010, expr: !DIExpression())
!1010 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1007, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1011 = !DIGlobalVariableExpression(var: !1012, expr: !DIExpression())
!1012 = distinct !DIGlobalVariable(name: "short_list", scope: !1007, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1013 = !DIGlobalVariableExpression(var: !1014, expr: !DIExpression())
!1014 = distinct !DIGlobalVariable(name: "short_output", scope: !1007, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1015 = !DIGlobalVariableExpression(var: !1016, expr: !DIExpression())
!1016 = distinct !DIGlobalVariable(name: "include_idle", scope: !1007, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1017 = !DIGlobalVariableExpression(var: !1018, expr: !DIExpression())
!1018 = distinct !DIGlobalVariable(name: "include_heading", scope: !1007, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1019 = !DIGlobalVariableExpression(var: !1020, expr: !DIExpression())
!1020 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1007, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1021 = !DIGlobalVariableExpression(var: !1022, expr: !DIExpression())
!1022 = distinct !DIGlobalVariable(name: "include_exit", scope: !1007, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1023 = !DIGlobalVariableExpression(var: !1024, expr: !DIExpression())
!1024 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1007, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1025 = !DIGlobalVariableExpression(var: !1026, expr: !DIExpression())
!1026 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1007, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1027 = !DIGlobalVariableExpression(var: !1028, expr: !DIExpression())
!1028 = distinct !DIGlobalVariable(name: "need_login", scope: !1007, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1029 = !DIGlobalVariableExpression(var: !1030, expr: !DIExpression())
!1030 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1007, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1031 = !DIGlobalVariableExpression(var: !1032, expr: !DIExpression())
!1032 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1007, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1033 = !DIGlobalVariableExpression(var: !1034, expr: !DIExpression())
!1034 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1007, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1035 = !DIGlobalVariableExpression(var: !1036, expr: !DIExpression())
!1036 = distinct !DIGlobalVariable(name: "need_users", scope: !1007, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1037 = !DIGlobalVariableExpression(var: !1038, expr: !DIExpression())
!1038 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1007, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1039 = !DIGlobalVariableExpression(var: !1040, expr: !DIExpression())
!1040 = distinct !DIGlobalVariable(name: "time_format", scope: !1007, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1041 = !DIGlobalVariableExpression(var: !1042, expr: !DIExpression())
!1042 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1007, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1043 = !DIGlobalVariableExpression(var: !1044, expr: !DIExpression())
!1044 = distinct !DIGlobalVariable(name: "longopts", scope: !1007, file: !3, line: 162, type: !1045, isLocal: true, isDefinition: true)
!1045 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1046, size: 4608, elements: !151)
!1046 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1047)
!1047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1048)
!1048 = !{!1049, !1050, !1051, !1052}
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1047, file: !144, line: 52, baseType: !49, size: 64)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1047, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1047, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1047, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1053 = !DIGlobalVariableExpression(var: !1054, expr: !DIExpression())
!1054 = distinct !DIGlobalVariable(name: "mesg", scope: !1055, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1055 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1056 = !DIGlobalVariableExpression(var: !1057, expr: !DIExpression())
!1057 = distinct !DIGlobalVariable(name: "hoststr", scope: !1058, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1058 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1059, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{null, !1061, !9}
!1061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1062, size: 64)
!1062 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1063)
!1063 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1064)
!1064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1065)
!1065 = !{!1066, !1067, !1068, !1069, !1070, !1071, !1072, !1077, !1078, !1083, !1084}
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1064, file: !72, line: 57, baseType: !14, size: 16)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1064, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1064, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1064, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1064, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1064, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1064, file: !72, line: 67, baseType: !1073, size: 32, offset: 2656)
!1073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1074)
!1074 = !{!1075, !1076}
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1073, file: !72, line: 45, baseType: !14, size: 16)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1073, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1064, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1064, file: !72, line: 79, baseType: !1079, size: 64, offset: 2720)
!1079 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1064, file: !72, line: 75, size: 64, elements: !1080)
!1080 = !{!1081, !1082}
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1079, file: !72, line: 77, baseType: !96, size: 32)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1079, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1064, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1064, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1085 = !DIGlobalVariableExpression(var: !1086, expr: !DIExpression())
!1086 = distinct !DIGlobalVariable(name: "hostlen", scope: !1058, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1087 = !DIGlobalVariableExpression(var: !1088, expr: !DIExpression())
!1088 = distinct !DIGlobalVariable(name: "now", scope: !1089, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1089 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1090 = !DIGlobalVariableExpression(var: !1091, expr: !DIExpression())
!1091 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1089, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1092 = !DIGlobalVariableExpression(var: !1093, expr: !DIExpression())
!1093 = distinct !DIGlobalVariable(name: "buf", scope: !1094, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1094 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1095, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!49, !1061}
!1097 = !DIGlobalVariableExpression(var: !1098, expr: !DIExpression())
!1098 = distinct !DIGlobalVariable(name: "runlevline", scope: !1099, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1099 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1100, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1100 = !DISubroutineType(types: !1101)
!1101 = !{null, !1061}
!1102 = !DIGlobalVariableExpression(var: !1103, expr: !DIExpression())
!1103 = distinct !DIGlobalVariable(name: "comment", scope: !1099, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1104 = !DIGlobalVariableExpression(var: !1105, expr: !DIExpression())
!1105 = distinct !DIGlobalVariable(name: "exitstr", scope: !1106, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1106 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1100, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1107 = !DILocalVariable(name: "options", arg: 2, scope: !1006, file: !3, line: 621, type: !53)
!1108 = !DILocalVariable(name: "n_users", scope: !1006, file: !3, line: 623, type: !110)
!1109 = !DILocalVariable(name: "utmp_buf", scope: !1006, file: !3, line: 624, type: !1110)
!1110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1063, size: 64)
!1111 = distinct !DISubprogram(name: "list_entries_who", scope: !3, file: !3, line: 537, type: !1112, scopeLine: 538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1112 = !DISubroutineType(types: !1113)
!1113 = !{null, !110, !67}
!1114 = !DILocalVariable(name: "n", arg: 1, scope: !1111, file: !3, line: 537, type: !110)
!1115 = !DILocation(line: 537, column: 26, scope: !1111)
!1116 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !1111, file: !3, line: 537, type: !67)
!1117 = !DILocation(line: 537, column: 48, scope: !1111)
!1118 = !DILocalVariable(name: "entries", scope: !1111, file: !3, line: 539, type: !112)
!1119 = !DILocation(line: 539, column: 21, scope: !1111)
!1120 = !DILocalVariable(name: "separator", scope: !1111, file: !3, line: 540, type: !49)
!1121 = !DILocation(line: 540, column: 15, scope: !1111)
!1122 = !DILocation(line: 542, column: 3, scope: !1111)
!1123 = !DILocation(line: 542, column: 11, scope: !1111)
!1124 = !DILocation(line: 544, column: 11, scope: !1125)
!1125 = distinct !DILexicalBlock(scope: !1126, file: !3, line: 544, column: 11)
!1126 = distinct !DILexicalBlock(scope: !1111, file: !3, line: 543, column: 5)
!1127 = !DILocation(line: 544, column: 11, scope: !1126)
!1128 = !DILocalVariable(name: "trimmed_name", scope: !1129, file: !3, line: 546, type: !6)
!1129 = distinct !DILexicalBlock(scope: !1125, file: !3, line: 545, column: 9)
!1130 = !DILocation(line: 546, column: 17, scope: !1129)
!1131 = !DILocation(line: 548, column: 48, scope: !1129)
!1132 = !DILocation(line: 548, column: 26, scope: !1129)
!1133 = !DILocation(line: 548, column: 24, scope: !1129)
!1134 = !DILocation(line: 550, column: 27, scope: !1129)
!1135 = !DILocation(line: 550, column: 38, scope: !1129)
!1136 = !DILocation(line: 550, column: 11, scope: !1129)
!1137 = !DILocation(line: 551, column: 17, scope: !1129)
!1138 = !DILocation(line: 551, column: 11, scope: !1129)
!1139 = !DILocation(line: 552, column: 21, scope: !1129)
!1140 = !DILocation(line: 553, column: 18, scope: !1129)
!1141 = !DILocation(line: 554, column: 9, scope: !1129)
!1142 = !DILocation(line: 555, column: 15, scope: !1126)
!1143 = distinct !{!1143, !1122, !1144}
!1144 = !DILocation(line: 556, column: 5, scope: !1111)
!1145 = !DILocation(line: 557, column: 11, scope: !1111)
!1146 = !DILocation(line: 557, column: 33, scope: !1111)
!1147 = !DILocation(line: 557, column: 3, scope: !1111)
!1148 = !DILocation(line: 558, column: 1, scope: !1111)
!1149 = !DILocalVariable(name: "n", arg: 1, scope: !1150, file: !3, line: 537, type: !110)
!1150 = distinct !DISubprogram(name: "list_entries_who", scope: !3, file: !3, line: 537, type: !1151, scopeLine: 538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1177, retainedNodes: !4)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{null, !110, !1153}
!1153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1154, size: 64)
!1154 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1155)
!1155 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1156)
!1156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1157)
!1157 = !{!1158, !1159, !1160, !1161, !1162, !1163, !1164, !1169, !1170, !1175, !1176}
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1156, file: !72, line: 57, baseType: !14, size: 16)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1156, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1156, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1156, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1156, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1156, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1156, file: !72, line: 67, baseType: !1165, size: 32, offset: 2656)
!1165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1166)
!1166 = !{!1167, !1168}
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1165, file: !72, line: 45, baseType: !14, size: 16)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1165, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1156, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1156, file: !72, line: 79, baseType: !1171, size: 64, offset: 2720)
!1171 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1156, file: !72, line: 75, size: 64, elements: !1172)
!1172 = !{!1173, !1174}
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1171, file: !72, line: 77, baseType: !96, size: 32)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1171, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1156, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1156, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1177 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1178, nameTableKind: None)
!1178 = !{!1179, !1181, !1183, !1185, !1187, !1189, !1191, !1193, !1195, !1197, !1199, !1201, !1203, !1205, !1207, !1209, !1211, !1213, !1223, !1226, !1231, !1233, !1236, !1238, !1243, !1248, !1250}
!1179 = !DIGlobalVariableExpression(var: !1180, expr: !DIExpression())
!1180 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1177, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1181 = !DIGlobalVariableExpression(var: !1182, expr: !DIExpression())
!1182 = distinct !DIGlobalVariable(name: "short_list", scope: !1177, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1183 = !DIGlobalVariableExpression(var: !1184, expr: !DIExpression())
!1184 = distinct !DIGlobalVariable(name: "short_output", scope: !1177, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1185 = !DIGlobalVariableExpression(var: !1186, expr: !DIExpression())
!1186 = distinct !DIGlobalVariable(name: "include_idle", scope: !1177, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1187 = !DIGlobalVariableExpression(var: !1188, expr: !DIExpression())
!1188 = distinct !DIGlobalVariable(name: "include_heading", scope: !1177, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1189 = !DIGlobalVariableExpression(var: !1190, expr: !DIExpression())
!1190 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1177, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1191 = !DIGlobalVariableExpression(var: !1192, expr: !DIExpression())
!1192 = distinct !DIGlobalVariable(name: "include_exit", scope: !1177, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1193 = !DIGlobalVariableExpression(var: !1194, expr: !DIExpression())
!1194 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1177, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1195 = !DIGlobalVariableExpression(var: !1196, expr: !DIExpression())
!1196 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1177, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1197 = !DIGlobalVariableExpression(var: !1198, expr: !DIExpression())
!1198 = distinct !DIGlobalVariable(name: "need_login", scope: !1177, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1199 = !DIGlobalVariableExpression(var: !1200, expr: !DIExpression())
!1200 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1177, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1201 = !DIGlobalVariableExpression(var: !1202, expr: !DIExpression())
!1202 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1177, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1203 = !DIGlobalVariableExpression(var: !1204, expr: !DIExpression())
!1204 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1177, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1205 = !DIGlobalVariableExpression(var: !1206, expr: !DIExpression())
!1206 = distinct !DIGlobalVariable(name: "need_users", scope: !1177, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1207 = !DIGlobalVariableExpression(var: !1208, expr: !DIExpression())
!1208 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1177, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1209 = !DIGlobalVariableExpression(var: !1210, expr: !DIExpression())
!1210 = distinct !DIGlobalVariable(name: "time_format", scope: !1177, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1211 = !DIGlobalVariableExpression(var: !1212, expr: !DIExpression())
!1212 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1177, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1213 = !DIGlobalVariableExpression(var: !1214, expr: !DIExpression())
!1214 = distinct !DIGlobalVariable(name: "longopts", scope: !1177, file: !3, line: 162, type: !1215, isLocal: true, isDefinition: true)
!1215 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1216, size: 4608, elements: !151)
!1216 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1217)
!1217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1218)
!1218 = !{!1219, !1220, !1221, !1222}
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1217, file: !144, line: 52, baseType: !49, size: 64)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1217, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1217, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1217, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1223 = !DIGlobalVariableExpression(var: !1224, expr: !DIExpression())
!1224 = distinct !DIGlobalVariable(name: "mesg", scope: !1225, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1225 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1177, retainedNodes: !4)
!1226 = !DIGlobalVariableExpression(var: !1227, expr: !DIExpression())
!1227 = distinct !DIGlobalVariable(name: "hoststr", scope: !1228, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1228 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1229, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1177, retainedNodes: !4)
!1229 = !DISubroutineType(types: !1230)
!1230 = !{null, !1153, !9}
!1231 = !DIGlobalVariableExpression(var: !1232, expr: !DIExpression())
!1232 = distinct !DIGlobalVariable(name: "hostlen", scope: !1228, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1233 = !DIGlobalVariableExpression(var: !1234, expr: !DIExpression())
!1234 = distinct !DIGlobalVariable(name: "now", scope: !1235, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1235 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1177, retainedNodes: !4)
!1236 = !DIGlobalVariableExpression(var: !1237, expr: !DIExpression())
!1237 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1235, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1238 = !DIGlobalVariableExpression(var: !1239, expr: !DIExpression())
!1239 = distinct !DIGlobalVariable(name: "buf", scope: !1240, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1240 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1241, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1177, retainedNodes: !4)
!1241 = !DISubroutineType(types: !1242)
!1242 = !{!49, !1153}
!1243 = !DIGlobalVariableExpression(var: !1244, expr: !DIExpression())
!1244 = distinct !DIGlobalVariable(name: "runlevline", scope: !1245, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1245 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1246, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1177, retainedNodes: !4)
!1246 = !DISubroutineType(types: !1247)
!1247 = !{null, !1153}
!1248 = !DIGlobalVariableExpression(var: !1249, expr: !DIExpression())
!1249 = distinct !DIGlobalVariable(name: "comment", scope: !1245, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1250 = !DIGlobalVariableExpression(var: !1251, expr: !DIExpression())
!1251 = distinct !DIGlobalVariable(name: "exitstr", scope: !1252, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1252 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1246, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1177, retainedNodes: !4)
!1253 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !1150, file: !3, line: 537, type: !1153)
!1254 = !DILocalVariable(name: "entries", scope: !1150, file: !3, line: 539, type: !112)
!1255 = !DILocalVariable(name: "separator", scope: !1150, file: !3, line: 540, type: !49)
!1256 = distinct !DISubprogram(name: "scan_entries", scope: !3, file: !3, line: 569, type: !1112, scopeLine: 570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1257 = !DILocalVariable(name: "n", arg: 1, scope: !1256, file: !3, line: 569, type: !110)
!1258 = !DILocation(line: 569, column: 22, scope: !1256)
!1259 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !1256, file: !3, line: 569, type: !67)
!1260 = !DILocation(line: 569, column: 44, scope: !1256)
!1261 = !DILocalVariable(name: "ttyname_b", scope: !1256, file: !3, line: 571, type: !6)
!1262 = !DILocation(line: 571, column: 9, scope: !1256)
!1263 = !DILocalVariable(name: "boottime", scope: !1256, file: !3, line: 572, type: !9)
!1264 = !DILocation(line: 572, column: 10, scope: !1256)
!1265 = !DILocation(line: 574, column: 7, scope: !1266)
!1266 = distinct !DILexicalBlock(scope: !1256, file: !3, line: 574, column: 7)
!1267 = !DILocation(line: 574, column: 7, scope: !1256)
!1268 = !DILocation(line: 575, column: 5, scope: !1266)
!1269 = !DILocation(line: 577, column: 7, scope: !1270)
!1270 = distinct !DILexicalBlock(scope: !1256, file: !3, line: 577, column: 7)
!1271 = !DILocation(line: 577, column: 7, scope: !1256)
!1272 = !DILocation(line: 579, column: 19, scope: !1273)
!1273 = distinct !DILexicalBlock(scope: !1270, file: !3, line: 578, column: 5)
!1274 = !DILocation(line: 579, column: 17, scope: !1273)
!1275 = !DILocation(line: 580, column: 12, scope: !1276)
!1276 = distinct !DILexicalBlock(scope: !1273, file: !3, line: 580, column: 11)
!1277 = !DILocation(line: 580, column: 11, scope: !1273)
!1278 = !DILocation(line: 581, column: 9, scope: !1276)
!1279 = !DILocation(line: 582, column: 11, scope: !1280)
!1280 = distinct !DILexicalBlock(scope: !1273, file: !3, line: 582, column: 11)
!1281 = !DILocation(line: 582, column: 64, scope: !1280)
!1282 = !DILocation(line: 583, column: 19, scope: !1280)
!1283 = !DILocation(line: 583, column: 9, scope: !1280)
!1284 = !DILocation(line: 584, column: 5, scope: !1273)
!1285 = !DILocation(line: 586, column: 3, scope: !1256)
!1286 = !DILocation(line: 586, column: 11, scope: !1256)
!1287 = !DILocation(line: 588, column: 12, scope: !1288)
!1288 = distinct !DILexicalBlock(scope: !1289, file: !3, line: 588, column: 11)
!1289 = distinct !DILexicalBlock(scope: !1256, file: !3, line: 587, column: 5)
!1290 = !DILocation(line: 589, column: 11, scope: !1288)
!1291 = !DILocation(line: 589, column: 14, scope: !1288)
!1292 = !DILocation(line: 588, column: 11, scope: !1289)
!1293 = !DILocation(line: 592, column: 15, scope: !1294)
!1294 = distinct !DILexicalBlock(scope: !1295, file: !3, line: 592, column: 15)
!1295 = distinct !DILexicalBlock(scope: !1288, file: !3, line: 591, column: 9)
!1296 = !DILocation(line: 592, column: 26, scope: !1294)
!1297 = !DILocation(line: 592, column: 29, scope: !1294)
!1298 = !DILocation(line: 592, column: 15, scope: !1295)
!1299 = !DILocation(line: 593, column: 25, scope: !1294)
!1300 = !DILocation(line: 593, column: 35, scope: !1294)
!1301 = !DILocation(line: 593, column: 13, scope: !1294)
!1302 = !DILocation(line: 594, column: 20, scope: !1303)
!1303 = distinct !DILexicalBlock(scope: !1294, file: !3, line: 594, column: 20)
!1304 = !DILocation(line: 594, column: 34, scope: !1303)
!1305 = !DILocation(line: 594, column: 37, scope: !1303)
!1306 = !DILocation(line: 594, column: 20, scope: !1294)
!1307 = !DILocation(line: 595, column: 29, scope: !1303)
!1308 = !DILocation(line: 595, column: 13, scope: !1303)
!1309 = !DILocation(line: 596, column: 20, scope: !1310)
!1310 = distinct !DILexicalBlock(scope: !1303, file: !3, line: 596, column: 20)
!1311 = !DILocation(line: 596, column: 34, scope: !1310)
!1312 = !DILocation(line: 596, column: 37, scope: !1310)
!1313 = !DILocation(line: 596, column: 20, scope: !1303)
!1314 = !DILocation(line: 597, column: 29, scope: !1310)
!1315 = !DILocation(line: 597, column: 13, scope: !1310)
!1316 = !DILocation(line: 601, column: 20, scope: !1317)
!1317 = distinct !DILexicalBlock(scope: !1310, file: !3, line: 601, column: 20)
!1318 = !DILocation(line: 601, column: 37, scope: !1317)
!1319 = !DILocation(line: 601, column: 40, scope: !1317)
!1320 = !DILocation(line: 601, column: 20, scope: !1310)
!1321 = !DILocation(line: 602, column: 32, scope: !1317)
!1322 = !DILocation(line: 602, column: 13, scope: !1317)
!1323 = !DILocation(line: 603, column: 20, scope: !1324)
!1324 = distinct !DILexicalBlock(scope: !1317, file: !3, line: 603, column: 20)
!1325 = !DILocation(line: 603, column: 35, scope: !1324)
!1326 = !DILocation(line: 603, column: 38, scope: !1324)
!1327 = !DILocation(line: 603, column: 20, scope: !1317)
!1328 = !DILocation(line: 604, column: 30, scope: !1324)
!1329 = !DILocation(line: 604, column: 13, scope: !1324)
!1330 = !DILocation(line: 605, column: 20, scope: !1331)
!1331 = distinct !DILexicalBlock(scope: !1324, file: !3, line: 605, column: 20)
!1332 = !DILocation(line: 605, column: 31, scope: !1331)
!1333 = !DILocation(line: 605, column: 34, scope: !1331)
!1334 = !DILocation(line: 605, column: 20, scope: !1324)
!1335 = !DILocation(line: 606, column: 26, scope: !1331)
!1336 = !DILocation(line: 606, column: 13, scope: !1331)
!1337 = !DILocation(line: 607, column: 20, scope: !1338)
!1338 = distinct !DILexicalBlock(scope: !1331, file: !3, line: 607, column: 20)
!1339 = !DILocation(line: 607, column: 35, scope: !1338)
!1340 = !DILocation(line: 607, column: 38, scope: !1338)
!1341 = !DILocation(line: 607, column: 20, scope: !1331)
!1342 = !DILocation(line: 608, column: 30, scope: !1338)
!1343 = !DILocation(line: 608, column: 13, scope: !1338)
!1344 = !DILocation(line: 609, column: 9, scope: !1295)
!1345 = !DILocation(line: 611, column: 11, scope: !1346)
!1346 = distinct !DILexicalBlock(scope: !1289, file: !3, line: 611, column: 11)
!1347 = !DILocation(line: 611, column: 11, scope: !1289)
!1348 = !DILocation(line: 612, column: 20, scope: !1346)
!1349 = !DILocation(line: 612, column: 18, scope: !1346)
!1350 = !DILocation(line: 612, column: 9, scope: !1346)
!1351 = !DILocation(line: 614, column: 15, scope: !1289)
!1352 = distinct !{!1352, !1285, !1353}
!1353 = !DILocation(line: 615, column: 5, scope: !1256)
!1354 = !DILocation(line: 616, column: 1, scope: !1256)
!1355 = !DILocalVariable(name: "n", arg: 1, scope: !1356, file: !3, line: 569, type: !110)
!1356 = distinct !DISubprogram(name: "scan_entries", scope: !3, file: !3, line: 569, type: !1357, scopeLine: 570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1383, retainedNodes: !4)
!1357 = !DISubroutineType(types: !1358)
!1358 = !{null, !110, !1359}
!1359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1360, size: 64)
!1360 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1361)
!1361 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1362)
!1362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1363)
!1363 = !{!1364, !1365, !1366, !1367, !1368, !1369, !1370, !1375, !1376, !1381, !1382}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1362, file: !72, line: 57, baseType: !14, size: 16)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1362, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1362, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1362, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1362, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1362, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1362, file: !72, line: 67, baseType: !1371, size: 32, offset: 2656)
!1371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1372)
!1372 = !{!1373, !1374}
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1371, file: !72, line: 45, baseType: !14, size: 16)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1371, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1362, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1362, file: !72, line: 79, baseType: !1377, size: 64, offset: 2720)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1362, file: !72, line: 75, size: 64, elements: !1378)
!1378 = !{!1379, !1380}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1377, file: !72, line: 77, baseType: !96, size: 32)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1377, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1362, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1362, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1383 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1384, nameTableKind: None)
!1384 = !{!1385, !1387, !1389, !1391, !1393, !1395, !1397, !1399, !1401, !1403, !1405, !1407, !1409, !1411, !1413, !1415, !1417, !1419, !1429, !1432, !1437, !1439, !1442, !1444, !1449, !1454, !1456}
!1385 = !DIGlobalVariableExpression(var: !1386, expr: !DIExpression())
!1386 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1383, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1387 = !DIGlobalVariableExpression(var: !1388, expr: !DIExpression())
!1388 = distinct !DIGlobalVariable(name: "short_list", scope: !1383, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1389 = !DIGlobalVariableExpression(var: !1390, expr: !DIExpression())
!1390 = distinct !DIGlobalVariable(name: "short_output", scope: !1383, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1391 = !DIGlobalVariableExpression(var: !1392, expr: !DIExpression())
!1392 = distinct !DIGlobalVariable(name: "include_idle", scope: !1383, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1393 = !DIGlobalVariableExpression(var: !1394, expr: !DIExpression())
!1394 = distinct !DIGlobalVariable(name: "include_heading", scope: !1383, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1395 = !DIGlobalVariableExpression(var: !1396, expr: !DIExpression())
!1396 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1383, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1397 = !DIGlobalVariableExpression(var: !1398, expr: !DIExpression())
!1398 = distinct !DIGlobalVariable(name: "include_exit", scope: !1383, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1399 = !DIGlobalVariableExpression(var: !1400, expr: !DIExpression())
!1400 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1383, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1401 = !DIGlobalVariableExpression(var: !1402, expr: !DIExpression())
!1402 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1383, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1403 = !DIGlobalVariableExpression(var: !1404, expr: !DIExpression())
!1404 = distinct !DIGlobalVariable(name: "need_login", scope: !1383, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1405 = !DIGlobalVariableExpression(var: !1406, expr: !DIExpression())
!1406 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1383, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1407 = !DIGlobalVariableExpression(var: !1408, expr: !DIExpression())
!1408 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1383, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1409 = !DIGlobalVariableExpression(var: !1410, expr: !DIExpression())
!1410 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1383, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1411 = !DIGlobalVariableExpression(var: !1412, expr: !DIExpression())
!1412 = distinct !DIGlobalVariable(name: "need_users", scope: !1383, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1413 = !DIGlobalVariableExpression(var: !1414, expr: !DIExpression())
!1414 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1383, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1415 = !DIGlobalVariableExpression(var: !1416, expr: !DIExpression())
!1416 = distinct !DIGlobalVariable(name: "time_format", scope: !1383, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1417 = !DIGlobalVariableExpression(var: !1418, expr: !DIExpression())
!1418 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1383, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1419 = !DIGlobalVariableExpression(var: !1420, expr: !DIExpression())
!1420 = distinct !DIGlobalVariable(name: "longopts", scope: !1383, file: !3, line: 162, type: !1421, isLocal: true, isDefinition: true)
!1421 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1422, size: 4608, elements: !151)
!1422 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1423)
!1423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1424)
!1424 = !{!1425, !1426, !1427, !1428}
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1423, file: !144, line: 52, baseType: !49, size: 64)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1423, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1423, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1423, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1429 = !DIGlobalVariableExpression(var: !1430, expr: !DIExpression())
!1430 = distinct !DIGlobalVariable(name: "mesg", scope: !1431, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1431 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1383, retainedNodes: !4)
!1432 = !DIGlobalVariableExpression(var: !1433, expr: !DIExpression())
!1433 = distinct !DIGlobalVariable(name: "hoststr", scope: !1434, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1434 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1435, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1383, retainedNodes: !4)
!1435 = !DISubroutineType(types: !1436)
!1436 = !{null, !1359, !9}
!1437 = !DIGlobalVariableExpression(var: !1438, expr: !DIExpression())
!1438 = distinct !DIGlobalVariable(name: "hostlen", scope: !1434, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1439 = !DIGlobalVariableExpression(var: !1440, expr: !DIExpression())
!1440 = distinct !DIGlobalVariable(name: "now", scope: !1441, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1441 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1383, retainedNodes: !4)
!1442 = !DIGlobalVariableExpression(var: !1443, expr: !DIExpression())
!1443 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1441, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1444 = !DIGlobalVariableExpression(var: !1445, expr: !DIExpression())
!1445 = distinct !DIGlobalVariable(name: "buf", scope: !1446, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1446 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1447, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1383, retainedNodes: !4)
!1447 = !DISubroutineType(types: !1448)
!1448 = !{!49, !1359}
!1449 = !DIGlobalVariableExpression(var: !1450, expr: !DIExpression())
!1450 = distinct !DIGlobalVariable(name: "runlevline", scope: !1451, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1451 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1452, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1383, retainedNodes: !4)
!1452 = !DISubroutineType(types: !1453)
!1453 = !{null, !1359}
!1454 = !DIGlobalVariableExpression(var: !1455, expr: !DIExpression())
!1455 = distinct !DIGlobalVariable(name: "comment", scope: !1451, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1456 = !DIGlobalVariableExpression(var: !1457, expr: !DIExpression())
!1457 = distinct !DIGlobalVariable(name: "exitstr", scope: !1458, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1458 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1452, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1383, retainedNodes: !4)
!1459 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !1356, file: !3, line: 569, type: !1359)
!1460 = !DILocalVariable(name: "ttyname_b", scope: !1356, file: !3, line: 571, type: !6)
!1461 = !DILocalVariable(name: "boottime", scope: !1356, file: !3, line: 572, type: !9)
!1462 = distinct !DISubprogram(name: "print_heading", scope: !3, file: !3, line: 561, type: !1463, scopeLine: 562, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1463 = !DISubroutineType(types: !1464)
!1464 = !{null}
!1465 = !DILocation(line: 563, column: 19, scope: !1462)
!1466 = !DILocation(line: 563, column: 39, scope: !1462)
!1467 = !DILocation(line: 563, column: 50, scope: !1462)
!1468 = !DILocation(line: 563, column: 61, scope: !1462)
!1469 = !DILocation(line: 564, column: 15, scope: !1462)
!1470 = !DILocation(line: 564, column: 25, scope: !1462)
!1471 = !DILocation(line: 564, column: 39, scope: !1462)
!1472 = !DILocation(line: 563, column: 3, scope: !1462)
!1473 = !DILocation(line: 565, column: 1, scope: !1462)
!1474 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !64, file: !3, line: 333, type: !67)
!1475 = !DILocation(line: 333, column: 32, scope: !64)
!1476 = !DILocalVariable(name: "boottime", arg: 2, scope: !64, file: !3, line: 333, type: !9)
!1477 = !DILocation(line: 333, column: 49, scope: !64)
!1478 = !DILocalVariable(name: "stats", scope: !64, file: !3, line: 335, type: !1479)
!1479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !1480, line: 46, size: 1152, elements: !1481)
!1480 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!1481 = !{!1482, !1484, !1486, !1488, !1490, !1492, !1494, !1495, !1496, !1498, !1500, !1502, !1509, !1510, !1511}
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !1479, file: !1480, line: 48, baseType: !1483, size: 64)
!1483 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !12, line: 145, baseType: !112)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !1479, file: !1480, line: 53, baseType: !1485, size: 64, offset: 64)
!1485 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !12, line: 148, baseType: !112)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !1479, file: !1480, line: 61, baseType: !1487, size: 64, offset: 128)
!1487 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !12, line: 151, baseType: !112)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !1479, file: !1480, line: 62, baseType: !1489, size: 32, offset: 192)
!1489 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !12, line: 150, baseType: !180)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !1479, file: !1480, line: 64, baseType: !1491, size: 32, offset: 224)
!1491 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !12, line: 146, baseType: !180)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !1479, file: !1480, line: 65, baseType: !1493, size: 32, offset: 256)
!1493 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !12, line: 147, baseType: !180)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !1479, file: !1480, line: 67, baseType: !53, size: 32, offset: 288)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !1479, file: !1480, line: 69, baseType: !1483, size: 64, offset: 320)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !1479, file: !1480, line: 74, baseType: !1497, size: 64, offset: 384)
!1497 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !12, line: 152, baseType: !13)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !1479, file: !1480, line: 78, baseType: !1499, size: 64, offset: 448)
!1499 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !12, line: 174, baseType: !13)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !1479, file: !1480, line: 80, baseType: !1501, size: 64, offset: 512)
!1501 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !12, line: 179, baseType: !13)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !1479, file: !1480, line: 91, baseType: !1503, size: 128, offset: 576)
!1503 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !1504, line: 10, size: 128, elements: !1505)
!1504 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!1505 = !{!1506, !1507}
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1503, file: !1504, line: 12, baseType: !11, size: 64)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1503, file: !1504, line: 16, baseType: !1508, size: 64, offset: 64)
!1508 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !12, line: 196, baseType: !13)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !1479, file: !1480, line: 92, baseType: !1503, size: 128, offset: 704)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !1479, file: !1480, line: 93, baseType: !1503, size: 128, offset: 832)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1479, file: !1480, line: 106, baseType: !1512, size: 192, offset: 960)
!1512 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1508, size: 192, elements: !60)
!1513 = !DILocation(line: 335, column: 15, scope: !64)
!1514 = !DILocalVariable(name: "last_change", scope: !64, file: !3, line: 336, type: !9)
!1515 = !DILocation(line: 336, column: 10, scope: !64)
!1516 = !DILocalVariable(name: "mesg", scope: !64, file: !3, line: 337, type: !7)
!1517 = !DILocation(line: 337, column: 8, scope: !64)
!1518 = !DILocalVariable(name: "idlestr", scope: !64, file: !3, line: 338, type: !1519)
!1519 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 56, elements: !478)
!1520 = !DILocation(line: 338, column: 8, scope: !64)
!1521 = !DILocalVariable(name: "line", scope: !64, file: !3, line: 347, type: !1522)
!1522 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 304, elements: !1523)
!1523 = !{!1524}
!1524 = !DISubrange(count: 38)
!1525 = !DILocation(line: 347, column: 8, scope: !64)
!1526 = !DILocalVariable(name: "p", scope: !64, file: !3, line: 348, type: !6)
!1527 = !DILocation(line: 348, column: 9, scope: !64)
!1528 = !DILocation(line: 348, column: 13, scope: !64)
!1529 = !DILocalVariable(name: "pidstr", scope: !64, file: !3, line: 349, type: !1530)
!1530 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 96, elements: !1531)
!1531 = !{!1532}
!1532 = !DISubrange(count: 12)
!1533 = !DILocation(line: 349, column: 3, scope: !64)
!1534 = !DILocation(line: 354, column: 10, scope: !1535)
!1535 = distinct !DILexicalBlock(scope: !64, file: !3, line: 354, column: 8)
!1536 = !DILocation(line: 354, column: 8, scope: !64)
!1537 = !DILocation(line: 355, column: 17, scope: !1535)
!1538 = !DILocation(line: 355, column: 9, scope: !1535)
!1539 = !DILocation(line: 355, column: 7, scope: !1535)
!1540 = !DILocation(line: 355, column: 5, scope: !1535)
!1541 = !DILocation(line: 356, column: 12, scope: !64)
!1542 = !DILocation(line: 356, column: 15, scope: !64)
!1543 = !DILocation(line: 356, column: 25, scope: !64)
!1544 = !DILocation(line: 356, column: 3, scope: !64)
!1545 = !DILocation(line: 358, column: 13, scope: !1546)
!1546 = distinct !DILexicalBlock(scope: !64, file: !3, line: 358, column: 7)
!1547 = !DILocation(line: 358, column: 7, scope: !1546)
!1548 = !DILocation(line: 358, column: 27, scope: !1546)
!1549 = !DILocation(line: 358, column: 7, scope: !64)
!1550 = !DILocation(line: 360, column: 14, scope: !1551)
!1551 = distinct !DILexicalBlock(scope: !1546, file: !3, line: 359, column: 5)
!1552 = !DILocation(line: 360, column: 12, scope: !1551)
!1553 = !DILocation(line: 361, column: 27, scope: !1551)
!1554 = !DILocation(line: 361, column: 19, scope: !1551)
!1555 = !DILocation(line: 362, column: 5, scope: !1551)
!1556 = !DILocation(line: 365, column: 12, scope: !1557)
!1557 = distinct !DILexicalBlock(scope: !1546, file: !3, line: 364, column: 5)
!1558 = !DILocation(line: 366, column: 19, scope: !1557)
!1559 = !DILocation(line: 369, column: 7, scope: !1560)
!1560 = distinct !DILexicalBlock(scope: !64, file: !3, line: 369, column: 7)
!1561 = !DILocation(line: 369, column: 7, scope: !64)
!1562 = !DILocation(line: 370, column: 14, scope: !1560)
!1563 = !DILocation(line: 370, column: 57, scope: !1560)
!1564 = !DILocation(line: 370, column: 70, scope: !1560)
!1565 = !DILocation(line: 370, column: 44, scope: !1560)
!1566 = !DILocation(line: 370, column: 5, scope: !1560)
!1567 = !DILocation(line: 372, column: 14, scope: !1560)
!1568 = !DILocation(line: 372, column: 5, scope: !1560)
!1569 = !DILocation(line: 375, column: 7, scope: !1570)
!1570 = distinct !DILexicalBlock(scope: !64, file: !3, line: 375, column: 7)
!1571 = !DILocation(line: 375, column: 17, scope: !1570)
!1572 = !DILocation(line: 375, column: 7, scope: !64)
!1573 = !DILocalVariable(name: "ut_host", scope: !1574, file: !3, line: 377, type: !1575)
!1574 = distinct !DILexicalBlock(scope: !1570, file: !3, line: 376, column: 5)
!1575 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2056, elements: !1576)
!1576 = !{!1577}
!1577 = !DISubrange(count: 257)
!1578 = !DILocation(line: 377, column: 12, scope: !1574)
!1579 = !DILocalVariable(name: "host", scope: !1574, file: !3, line: 378, type: !6)
!1580 = !DILocation(line: 378, column: 13, scope: !1574)
!1581 = !DILocalVariable(name: "display", scope: !1574, file: !3, line: 379, type: !6)
!1582 = !DILocation(line: 379, column: 13, scope: !1574)
!1583 = !DILocation(line: 382, column: 16, scope: !1574)
!1584 = !DILocation(line: 382, column: 25, scope: !1574)
!1585 = !DILocation(line: 382, column: 35, scope: !1574)
!1586 = !DILocation(line: 382, column: 7, scope: !1574)
!1587 = !DILocation(line: 385, column: 25, scope: !1574)
!1588 = !DILocation(line: 385, column: 17, scope: !1574)
!1589 = !DILocation(line: 385, column: 15, scope: !1574)
!1590 = !DILocation(line: 386, column: 11, scope: !1591)
!1591 = distinct !DILexicalBlock(scope: !1574, file: !3, line: 386, column: 11)
!1592 = !DILocation(line: 386, column: 11, scope: !1574)
!1593 = !DILocation(line: 387, column: 17, scope: !1591)
!1594 = !DILocation(line: 387, column: 20, scope: !1591)
!1595 = !DILocation(line: 387, column: 9, scope: !1591)
!1596 = !DILocation(line: 389, column: 11, scope: !1597)
!1597 = distinct !DILexicalBlock(scope: !1574, file: !3, line: 389, column: 11)
!1598 = !DILocation(line: 389, column: 20, scope: !1597)
!1599 = !DILocation(line: 389, column: 23, scope: !1597)
!1600 = !DILocation(line: 389, column: 11, scope: !1574)
!1601 = !DILocation(line: 392, column: 30, scope: !1602)
!1602 = distinct !DILexicalBlock(scope: !1597, file: !3, line: 390, column: 9)
!1603 = !DILocation(line: 392, column: 18, scope: !1602)
!1604 = !DILocation(line: 392, column: 16, scope: !1602)
!1605 = !DILocation(line: 393, column: 9, scope: !1602)
!1606 = !DILocation(line: 395, column: 13, scope: !1607)
!1607 = distinct !DILexicalBlock(scope: !1574, file: !3, line: 395, column: 11)
!1608 = !DILocation(line: 395, column: 11, scope: !1574)
!1609 = !DILocation(line: 396, column: 16, scope: !1607)
!1610 = !DILocation(line: 396, column: 14, scope: !1607)
!1611 = !DILocation(line: 396, column: 9, scope: !1607)
!1612 = !DILocation(line: 398, column: 11, scope: !1613)
!1613 = distinct !DILexicalBlock(scope: !1574, file: !3, line: 398, column: 11)
!1614 = !DILocation(line: 398, column: 11, scope: !1574)
!1615 = !DILocation(line: 400, column: 15, scope: !1616)
!1616 = distinct !DILexicalBlock(scope: !1617, file: !3, line: 400, column: 15)
!1617 = distinct !DILexicalBlock(scope: !1613, file: !3, line: 399, column: 9)
!1618 = !DILocation(line: 400, column: 33, scope: !1616)
!1619 = !DILocation(line: 400, column: 25, scope: !1616)
!1620 = !DILocation(line: 400, column: 49, scope: !1616)
!1621 = !DILocation(line: 400, column: 41, scope: !1616)
!1622 = !DILocation(line: 400, column: 39, scope: !1616)
!1623 = !DILocation(line: 400, column: 58, scope: !1616)
!1624 = !DILocation(line: 400, column: 23, scope: !1616)
!1625 = !DILocation(line: 400, column: 15, scope: !1617)
!1626 = !DILocation(line: 402, column: 33, scope: !1627)
!1627 = distinct !DILexicalBlock(scope: !1616, file: !3, line: 401, column: 13)
!1628 = !DILocation(line: 402, column: 25, scope: !1627)
!1629 = !DILocation(line: 402, column: 49, scope: !1627)
!1630 = !DILocation(line: 402, column: 41, scope: !1627)
!1631 = !DILocation(line: 402, column: 39, scope: !1627)
!1632 = !DILocation(line: 402, column: 58, scope: !1627)
!1633 = !DILocation(line: 402, column: 23, scope: !1627)
!1634 = !DILocation(line: 403, column: 21, scope: !1627)
!1635 = !DILocation(line: 403, column: 15, scope: !1627)
!1636 = !DILocation(line: 404, column: 34, scope: !1627)
!1637 = !DILocation(line: 404, column: 25, scope: !1627)
!1638 = !DILocation(line: 404, column: 23, scope: !1627)
!1639 = !DILocation(line: 405, column: 13, scope: !1627)
!1640 = !DILocation(line: 406, column: 20, scope: !1617)
!1641 = !DILocation(line: 406, column: 40, scope: !1617)
!1642 = !DILocation(line: 406, column: 46, scope: !1617)
!1643 = !DILocation(line: 406, column: 11, scope: !1617)
!1644 = !DILocation(line: 407, column: 9, scope: !1617)
!1645 = !DILocation(line: 410, column: 15, scope: !1646)
!1646 = distinct !DILexicalBlock(scope: !1647, file: !3, line: 410, column: 15)
!1647 = distinct !DILexicalBlock(scope: !1613, file: !3, line: 409, column: 9)
!1648 = !DILocation(line: 410, column: 33, scope: !1646)
!1649 = !DILocation(line: 410, column: 25, scope: !1646)
!1650 = !DILocation(line: 410, column: 39, scope: !1646)
!1651 = !DILocation(line: 410, column: 23, scope: !1646)
!1652 = !DILocation(line: 410, column: 15, scope: !1647)
!1653 = !DILocation(line: 412, column: 33, scope: !1654)
!1654 = distinct !DILexicalBlock(scope: !1646, file: !3, line: 411, column: 13)
!1655 = !DILocation(line: 412, column: 25, scope: !1654)
!1656 = !DILocation(line: 412, column: 39, scope: !1654)
!1657 = !DILocation(line: 412, column: 23, scope: !1654)
!1658 = !DILocation(line: 413, column: 21, scope: !1654)
!1659 = !DILocation(line: 413, column: 15, scope: !1654)
!1660 = !DILocation(line: 414, column: 34, scope: !1654)
!1661 = !DILocation(line: 414, column: 25, scope: !1654)
!1662 = !DILocation(line: 414, column: 23, scope: !1654)
!1663 = !DILocation(line: 415, column: 13, scope: !1654)
!1664 = !DILocation(line: 416, column: 20, scope: !1647)
!1665 = !DILocation(line: 416, column: 37, scope: !1647)
!1666 = !DILocation(line: 416, column: 11, scope: !1647)
!1667 = !DILocation(line: 419, column: 11, scope: !1668)
!1668 = distinct !DILexicalBlock(scope: !1574, file: !3, line: 419, column: 11)
!1669 = !DILocation(line: 419, column: 19, scope: !1668)
!1670 = !DILocation(line: 419, column: 16, scope: !1668)
!1671 = !DILocation(line: 419, column: 11, scope: !1574)
!1672 = !DILocation(line: 420, column: 15, scope: !1668)
!1673 = !DILocation(line: 420, column: 9, scope: !1668)
!1674 = !DILocation(line: 421, column: 5, scope: !1574)
!1675 = !DILocation(line: 424, column: 11, scope: !1676)
!1676 = distinct !DILexicalBlock(scope: !1677, file: !3, line: 424, column: 11)
!1677 = distinct !DILexicalBlock(scope: !1570, file: !3, line: 423, column: 5)
!1678 = !DILocation(line: 424, column: 19, scope: !1676)
!1679 = !DILocation(line: 424, column: 11, scope: !1677)
!1680 = !DILocation(line: 426, column: 19, scope: !1681)
!1681 = distinct !DILexicalBlock(scope: !1676, file: !3, line: 425, column: 9)
!1682 = !DILocation(line: 427, column: 17, scope: !1681)
!1683 = !DILocation(line: 427, column: 11, scope: !1681)
!1684 = !DILocation(line: 428, column: 30, scope: !1681)
!1685 = !DILocation(line: 428, column: 21, scope: !1681)
!1686 = !DILocation(line: 428, column: 19, scope: !1681)
!1687 = !DILocation(line: 429, column: 9, scope: !1681)
!1688 = !DILocation(line: 430, column: 8, scope: !1677)
!1689 = !DILocation(line: 430, column: 16, scope: !1677)
!1690 = !DILocation(line: 434, column: 42, scope: !64)
!1691 = !DILocation(line: 434, column: 62, scope: !64)
!1692 = !DILocation(line: 435, column: 41, scope: !64)
!1693 = !DILocation(line: 435, column: 51, scope: !64)
!1694 = !DILocation(line: 436, column: 28, scope: !64)
!1695 = !DILocation(line: 436, column: 15, scope: !64)
!1696 = !DILocation(line: 436, column: 39, scope: !64)
!1697 = !DILocation(line: 436, column: 48, scope: !64)
!1698 = !DILocation(line: 437, column: 15, scope: !64)
!1699 = !DILocation(line: 437, column: 25, scope: !64)
!1700 = !DILocation(line: 434, column: 3, scope: !64)
!1701 = !DILocation(line: 438, column: 1, scope: !64)
!1702 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1703, file: !3, line: 333, type: !1706)
!1703 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1704, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1730, retainedNodes: !4)
!1704 = !DISubroutineType(types: !1705)
!1705 = !{null, !1706, !9}
!1706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1707, size: 64)
!1707 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1708)
!1708 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1709)
!1709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1710)
!1710 = !{!1711, !1712, !1713, !1714, !1715, !1716, !1717, !1722, !1723, !1728, !1729}
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1709, file: !72, line: 57, baseType: !14, size: 16)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1709, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1709, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1709, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1709, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1709, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1709, file: !72, line: 67, baseType: !1718, size: 32, offset: 2656)
!1718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1719)
!1719 = !{!1720, !1721}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1718, file: !72, line: 45, baseType: !14, size: 16)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1718, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1709, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1709, file: !72, line: 79, baseType: !1724, size: 64, offset: 2720)
!1724 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1709, file: !72, line: 75, size: 64, elements: !1725)
!1725 = !{!1726, !1727}
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1724, file: !72, line: 77, baseType: !96, size: 32)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1724, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1709, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1709, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1730 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1731, nameTableKind: None)
!1731 = !{!1732, !1734, !1736, !1738, !1740, !1742, !1744, !1746, !1748, !1750, !1752, !1754, !1756, !1758, !1760, !1762, !1764, !1766, !1776, !1779, !1781, !1783, !1786, !1788, !1793, !1798, !1800}
!1732 = !DIGlobalVariableExpression(var: !1733, expr: !DIExpression())
!1733 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1730, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1734 = !DIGlobalVariableExpression(var: !1735, expr: !DIExpression())
!1735 = distinct !DIGlobalVariable(name: "short_list", scope: !1730, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1736 = !DIGlobalVariableExpression(var: !1737, expr: !DIExpression())
!1737 = distinct !DIGlobalVariable(name: "short_output", scope: !1730, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1738 = !DIGlobalVariableExpression(var: !1739, expr: !DIExpression())
!1739 = distinct !DIGlobalVariable(name: "include_idle", scope: !1730, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1740 = !DIGlobalVariableExpression(var: !1741, expr: !DIExpression())
!1741 = distinct !DIGlobalVariable(name: "include_heading", scope: !1730, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1742 = !DIGlobalVariableExpression(var: !1743, expr: !DIExpression())
!1743 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1730, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1744 = !DIGlobalVariableExpression(var: !1745, expr: !DIExpression())
!1745 = distinct !DIGlobalVariable(name: "include_exit", scope: !1730, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1746 = !DIGlobalVariableExpression(var: !1747, expr: !DIExpression())
!1747 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1730, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1748 = !DIGlobalVariableExpression(var: !1749, expr: !DIExpression())
!1749 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1730, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1750 = !DIGlobalVariableExpression(var: !1751, expr: !DIExpression())
!1751 = distinct !DIGlobalVariable(name: "need_login", scope: !1730, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1752 = !DIGlobalVariableExpression(var: !1753, expr: !DIExpression())
!1753 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1730, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1754 = !DIGlobalVariableExpression(var: !1755, expr: !DIExpression())
!1755 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1730, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1756 = !DIGlobalVariableExpression(var: !1757, expr: !DIExpression())
!1757 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1730, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1758 = !DIGlobalVariableExpression(var: !1759, expr: !DIExpression())
!1759 = distinct !DIGlobalVariable(name: "need_users", scope: !1730, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1760 = !DIGlobalVariableExpression(var: !1761, expr: !DIExpression())
!1761 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1730, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1762 = !DIGlobalVariableExpression(var: !1763, expr: !DIExpression())
!1763 = distinct !DIGlobalVariable(name: "time_format", scope: !1730, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1764 = !DIGlobalVariableExpression(var: !1765, expr: !DIExpression())
!1765 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1730, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1766 = !DIGlobalVariableExpression(var: !1767, expr: !DIExpression())
!1767 = distinct !DIGlobalVariable(name: "longopts", scope: !1730, file: !3, line: 162, type: !1768, isLocal: true, isDefinition: true)
!1768 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1769, size: 4608, elements: !151)
!1769 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1770)
!1770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1771)
!1771 = !{!1772, !1773, !1774, !1775}
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1770, file: !144, line: 52, baseType: !49, size: 64)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1770, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1770, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1770, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1776 = !DIGlobalVariableExpression(var: !1777, expr: !DIExpression())
!1777 = distinct !DIGlobalVariable(name: "mesg", scope: !1778, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1778 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1730, retainedNodes: !4)
!1779 = !DIGlobalVariableExpression(var: !1780, expr: !DIExpression())
!1780 = distinct !DIGlobalVariable(name: "hoststr", scope: !1703, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1781 = !DIGlobalVariableExpression(var: !1782, expr: !DIExpression())
!1782 = distinct !DIGlobalVariable(name: "hostlen", scope: !1703, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1783 = !DIGlobalVariableExpression(var: !1784, expr: !DIExpression())
!1784 = distinct !DIGlobalVariable(name: "now", scope: !1785, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1785 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1730, retainedNodes: !4)
!1786 = !DIGlobalVariableExpression(var: !1787, expr: !DIExpression())
!1787 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1785, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1788 = !DIGlobalVariableExpression(var: !1789, expr: !DIExpression())
!1789 = distinct !DIGlobalVariable(name: "buf", scope: !1790, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1790 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1791, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1730, retainedNodes: !4)
!1791 = !DISubroutineType(types: !1792)
!1792 = !{!49, !1706}
!1793 = !DIGlobalVariableExpression(var: !1794, expr: !DIExpression())
!1794 = distinct !DIGlobalVariable(name: "runlevline", scope: !1795, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1795 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1796, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1730, retainedNodes: !4)
!1796 = !DISubroutineType(types: !1797)
!1797 = !{null, !1706}
!1798 = !DIGlobalVariableExpression(var: !1799, expr: !DIExpression())
!1799 = distinct !DIGlobalVariable(name: "comment", scope: !1795, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1800 = !DIGlobalVariableExpression(var: !1801, expr: !DIExpression())
!1801 = distinct !DIGlobalVariable(name: "exitstr", scope: !1802, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1802 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1796, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1730, retainedNodes: !4)
!1803 = !DILocalVariable(name: "boottime", arg: 2, scope: !1703, file: !3, line: 333, type: !9)
!1804 = !DILocalVariable(name: "stats", scope: !1703, file: !3, line: 335, type: !1805)
!1805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !1480, line: 46, size: 1152, elements: !1806)
!1806 = !{!1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1823, !1824, !1825}
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !1805, file: !1480, line: 48, baseType: !1483, size: 64)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !1805, file: !1480, line: 53, baseType: !1485, size: 64, offset: 64)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !1805, file: !1480, line: 61, baseType: !1487, size: 64, offset: 128)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !1805, file: !1480, line: 62, baseType: !1489, size: 32, offset: 192)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !1805, file: !1480, line: 64, baseType: !1491, size: 32, offset: 224)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !1805, file: !1480, line: 65, baseType: !1493, size: 32, offset: 256)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !1805, file: !1480, line: 67, baseType: !53, size: 32, offset: 288)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !1805, file: !1480, line: 69, baseType: !1483, size: 64, offset: 320)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !1805, file: !1480, line: 74, baseType: !1497, size: 64, offset: 384)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !1805, file: !1480, line: 78, baseType: !1499, size: 64, offset: 448)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !1805, file: !1480, line: 80, baseType: !1501, size: 64, offset: 512)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !1805, file: !1480, line: 91, baseType: !1819, size: 128, offset: 576)
!1819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !1504, line: 10, size: 128, elements: !1820)
!1820 = !{!1821, !1822}
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1819, file: !1504, line: 12, baseType: !11, size: 64)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1819, file: !1504, line: 16, baseType: !1508, size: 64, offset: 64)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !1805, file: !1480, line: 92, baseType: !1819, size: 128, offset: 704)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !1805, file: !1480, line: 93, baseType: !1819, size: 128, offset: 832)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1805, file: !1480, line: 106, baseType: !1512, size: 192, offset: 960)
!1826 = !DILocalVariable(name: "last_change", scope: !1703, file: !3, line: 336, type: !9)
!1827 = !DILocalVariable(name: "mesg", scope: !1703, file: !3, line: 337, type: !7)
!1828 = !DILocalVariable(name: "idlestr", scope: !1703, file: !3, line: 338, type: !1519)
!1829 = !DILocalVariable(name: "line", scope: !1703, file: !3, line: 347, type: !1522)
!1830 = !DILocalVariable(name: "p", scope: !1703, file: !3, line: 348, type: !6)
!1831 = !DILocalVariable(name: "pidstr", scope: !1703, file: !3, line: 349, type: !1530)
!1832 = !DILocalVariable(name: "display", scope: !1833, file: !3, line: 379, type: !6)
!1833 = distinct !DILexicalBlock(scope: !1834, file: !3, line: 376, column: 5)
!1834 = distinct !DILexicalBlock(scope: !1835, file: !3, line: 375, column: 7)
!1835 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1836, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1862, retainedNodes: !4)
!1836 = !DISubroutineType(types: !1837)
!1837 = !{null, !1838, !9}
!1838 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1839, size: 64)
!1839 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1840)
!1840 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1841)
!1841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1842)
!1842 = !{!1843, !1844, !1845, !1846, !1847, !1848, !1849, !1854, !1855, !1860, !1861}
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1841, file: !72, line: 57, baseType: !14, size: 16)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1841, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1841, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1841, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1841, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1841, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1841, file: !72, line: 67, baseType: !1850, size: 32, offset: 2656)
!1850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1851)
!1851 = !{!1852, !1853}
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1850, file: !72, line: 45, baseType: !14, size: 16)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1850, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1841, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1841, file: !72, line: 79, baseType: !1856, size: 64, offset: 2720)
!1856 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1841, file: !72, line: 75, size: 64, elements: !1857)
!1857 = !{!1858, !1859}
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1856, file: !72, line: 77, baseType: !96, size: 32)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1856, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1841, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1841, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1862 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1863, nameTableKind: None)
!1863 = !{!1864, !1866, !1868, !1870, !1872, !1874, !1876, !1878, !1880, !1882, !1884, !1886, !1888, !1890, !1892, !1894, !1896, !1898, !1908, !1911, !1913, !1915, !1918, !1920, !1925, !1930, !1932}
!1864 = !DIGlobalVariableExpression(var: !1865, expr: !DIExpression())
!1865 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1862, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1866 = !DIGlobalVariableExpression(var: !1867, expr: !DIExpression())
!1867 = distinct !DIGlobalVariable(name: "short_list", scope: !1862, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1868 = !DIGlobalVariableExpression(var: !1869, expr: !DIExpression())
!1869 = distinct !DIGlobalVariable(name: "short_output", scope: !1862, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1870 = !DIGlobalVariableExpression(var: !1871, expr: !DIExpression())
!1871 = distinct !DIGlobalVariable(name: "include_idle", scope: !1862, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1872 = !DIGlobalVariableExpression(var: !1873, expr: !DIExpression())
!1873 = distinct !DIGlobalVariable(name: "include_heading", scope: !1862, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1874 = !DIGlobalVariableExpression(var: !1875, expr: !DIExpression())
!1875 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1862, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1876 = !DIGlobalVariableExpression(var: !1877, expr: !DIExpression())
!1877 = distinct !DIGlobalVariable(name: "include_exit", scope: !1862, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1878 = !DIGlobalVariableExpression(var: !1879, expr: !DIExpression())
!1879 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1862, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1880 = !DIGlobalVariableExpression(var: !1881, expr: !DIExpression())
!1881 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1862, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1882 = !DIGlobalVariableExpression(var: !1883, expr: !DIExpression())
!1883 = distinct !DIGlobalVariable(name: "need_login", scope: !1862, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1884 = !DIGlobalVariableExpression(var: !1885, expr: !DIExpression())
!1885 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1862, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1886 = !DIGlobalVariableExpression(var: !1887, expr: !DIExpression())
!1887 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1862, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1888 = !DIGlobalVariableExpression(var: !1889, expr: !DIExpression())
!1889 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1862, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1890 = !DIGlobalVariableExpression(var: !1891, expr: !DIExpression())
!1891 = distinct !DIGlobalVariable(name: "need_users", scope: !1862, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1892 = !DIGlobalVariableExpression(var: !1893, expr: !DIExpression())
!1893 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1862, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1894 = !DIGlobalVariableExpression(var: !1895, expr: !DIExpression())
!1895 = distinct !DIGlobalVariable(name: "time_format", scope: !1862, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1896 = !DIGlobalVariableExpression(var: !1897, expr: !DIExpression())
!1897 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1862, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1898 = !DIGlobalVariableExpression(var: !1899, expr: !DIExpression())
!1899 = distinct !DIGlobalVariable(name: "longopts", scope: !1862, file: !3, line: 162, type: !1900, isLocal: true, isDefinition: true)
!1900 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1901, size: 4608, elements: !151)
!1901 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1902)
!1902 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1903)
!1903 = !{!1904, !1905, !1906, !1907}
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1902, file: !144, line: 52, baseType: !49, size: 64)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1902, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1902, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1902, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1908 = !DIGlobalVariableExpression(var: !1909, expr: !DIExpression())
!1909 = distinct !DIGlobalVariable(name: "mesg", scope: !1910, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1910 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1862, retainedNodes: !4)
!1911 = !DIGlobalVariableExpression(var: !1912, expr: !DIExpression())
!1912 = distinct !DIGlobalVariable(name: "hoststr", scope: !1835, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1913 = !DIGlobalVariableExpression(var: !1914, expr: !DIExpression())
!1914 = distinct !DIGlobalVariable(name: "hostlen", scope: !1835, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1915 = !DIGlobalVariableExpression(var: !1916, expr: !DIExpression())
!1916 = distinct !DIGlobalVariable(name: "now", scope: !1917, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1917 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1862, retainedNodes: !4)
!1918 = !DIGlobalVariableExpression(var: !1919, expr: !DIExpression())
!1919 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1917, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1920 = !DIGlobalVariableExpression(var: !1921, expr: !DIExpression())
!1921 = distinct !DIGlobalVariable(name: "buf", scope: !1922, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1922 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1923, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1862, retainedNodes: !4)
!1923 = !DISubroutineType(types: !1924)
!1924 = !{!49, !1838}
!1925 = !DIGlobalVariableExpression(var: !1926, expr: !DIExpression())
!1926 = distinct !DIGlobalVariable(name: "runlevline", scope: !1927, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1927 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1928, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1862, retainedNodes: !4)
!1928 = !DISubroutineType(types: !1929)
!1929 = !{null, !1838}
!1930 = !DIGlobalVariableExpression(var: !1931, expr: !DIExpression())
!1931 = distinct !DIGlobalVariable(name: "comment", scope: !1927, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1932 = !DIGlobalVariableExpression(var: !1933, expr: !DIExpression())
!1933 = distinct !DIGlobalVariable(name: "exitstr", scope: !1934, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1934 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1928, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1862, retainedNodes: !4)
!1935 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !133, file: !3, line: 514, type: !67)
!1936 = !DILocation(line: 514, column: 36, scope: !133)
!1937 = !DILocalVariable(name: "last", scope: !133, file: !3, line: 517, type: !317)
!1938 = !DILocation(line: 517, column: 17, scope: !133)
!1939 = !DILocation(line: 517, column: 24, scope: !133)
!1940 = !DILocation(line: 517, column: 42, scope: !133)
!1941 = !DILocalVariable(name: "curr", scope: !133, file: !3, line: 518, type: !317)
!1942 = !DILocation(line: 518, column: 17, scope: !133)
!1943 = !DILocation(line: 518, column: 24, scope: !133)
!1944 = !DILocation(line: 518, column: 42, scope: !133)
!1945 = !DILocation(line: 520, column: 8, scope: !1946)
!1946 = distinct !DILexicalBlock(scope: !133, file: !3, line: 520, column: 7)
!1947 = !DILocation(line: 520, column: 7, scope: !133)
!1948 = !DILocation(line: 521, column: 35, scope: !1946)
!1949 = !DILocation(line: 521, column: 27, scope: !1946)
!1950 = !DILocation(line: 521, column: 51, scope: !1946)
!1951 = !DILocation(line: 521, column: 18, scope: !1946)
!1952 = !DILocation(line: 521, column: 16, scope: !1946)
!1953 = !DILocation(line: 521, column: 5, scope: !1946)
!1954 = !DILocation(line: 522, column: 12, scope: !133)
!1955 = !DILocation(line: 522, column: 33, scope: !133)
!1956 = !DILocation(line: 522, column: 49, scope: !133)
!1957 = !DILocation(line: 522, column: 3, scope: !133)
!1958 = !DILocation(line: 524, column: 8, scope: !1959)
!1959 = distinct !DILexicalBlock(scope: !133, file: !3, line: 524, column: 7)
!1960 = !DILocation(line: 524, column: 7, scope: !133)
!1961 = !DILocation(line: 525, column: 32, scope: !1959)
!1962 = !DILocation(line: 525, column: 24, scope: !1959)
!1963 = !DILocation(line: 525, column: 44, scope: !1959)
!1964 = !DILocation(line: 525, column: 15, scope: !1959)
!1965 = !DILocation(line: 525, column: 13, scope: !1959)
!1966 = !DILocation(line: 525, column: 5, scope: !1959)
!1967 = !DILocation(line: 526, column: 12, scope: !133)
!1968 = !DILocation(line: 526, column: 29, scope: !133)
!1969 = !DILocation(line: 526, column: 42, scope: !133)
!1970 = !DILocation(line: 526, column: 47, scope: !133)
!1971 = !DILocation(line: 526, column: 41, scope: !133)
!1972 = !DILocation(line: 526, column: 63, scope: !133)
!1973 = !DILocation(line: 526, column: 3, scope: !133)
!1974 = !DILocation(line: 528, column: 32, scope: !133)
!1975 = !DILocation(line: 528, column: 57, scope: !133)
!1976 = !DILocation(line: 528, column: 44, scope: !133)
!1977 = !DILocation(line: 529, column: 34, scope: !133)
!1978 = !DILocation(line: 529, column: 23, scope: !133)
!1979 = !DILocation(line: 529, column: 42, scope: !133)
!1980 = !DILocation(line: 528, column: 3, scope: !133)
!1981 = !DILocation(line: 531, column: 3, scope: !133)
!1982 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1983, file: !3, line: 514, type: !1986)
!1983 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1984, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2010, retainedNodes: !4)
!1984 = !DISubroutineType(types: !1985)
!1985 = !{null, !1986}
!1986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1987, size: 64)
!1987 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1988)
!1988 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1989)
!1989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1990)
!1990 = !{!1991, !1992, !1993, !1994, !1995, !1996, !1997, !2002, !2003, !2008, !2009}
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1989, file: !72, line: 57, baseType: !14, size: 16)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1989, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1989, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1989, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1989, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1989, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1989, file: !72, line: 67, baseType: !1998, size: 32, offset: 2656)
!1998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1999)
!1999 = !{!2000, !2001}
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1998, file: !72, line: 45, baseType: !14, size: 16)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1998, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1989, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1989, file: !72, line: 79, baseType: !2004, size: 64, offset: 2720)
!2004 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1989, file: !72, line: 75, size: 64, elements: !2005)
!2005 = !{!2006, !2007}
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2004, file: !72, line: 77, baseType: !96, size: 32)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2004, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1989, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1989, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2010 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2011, nameTableKind: None)
!2011 = !{!2012, !2014, !2016, !2018, !2020, !2022, !2024, !2026, !2028, !2030, !2032, !2034, !2036, !2038, !2040, !2042, !2044, !2046, !2056, !2059, !2064, !2066, !2069, !2071, !2076, !2078, !2080}
!2012 = !DIGlobalVariableExpression(var: !2013, expr: !DIExpression())
!2013 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2010, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2014 = !DIGlobalVariableExpression(var: !2015, expr: !DIExpression())
!2015 = distinct !DIGlobalVariable(name: "short_list", scope: !2010, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2016 = !DIGlobalVariableExpression(var: !2017, expr: !DIExpression())
!2017 = distinct !DIGlobalVariable(name: "short_output", scope: !2010, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2018 = !DIGlobalVariableExpression(var: !2019, expr: !DIExpression())
!2019 = distinct !DIGlobalVariable(name: "include_idle", scope: !2010, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2020 = !DIGlobalVariableExpression(var: !2021, expr: !DIExpression())
!2021 = distinct !DIGlobalVariable(name: "include_heading", scope: !2010, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2022 = !DIGlobalVariableExpression(var: !2023, expr: !DIExpression())
!2023 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2010, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2024 = !DIGlobalVariableExpression(var: !2025, expr: !DIExpression())
!2025 = distinct !DIGlobalVariable(name: "include_exit", scope: !2010, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2026 = !DIGlobalVariableExpression(var: !2027, expr: !DIExpression())
!2027 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2010, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2028 = !DIGlobalVariableExpression(var: !2029, expr: !DIExpression())
!2029 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2010, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2030 = !DIGlobalVariableExpression(var: !2031, expr: !DIExpression())
!2031 = distinct !DIGlobalVariable(name: "need_login", scope: !2010, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2032 = !DIGlobalVariableExpression(var: !2033, expr: !DIExpression())
!2033 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2010, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2034 = !DIGlobalVariableExpression(var: !2035, expr: !DIExpression())
!2035 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2010, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2036 = !DIGlobalVariableExpression(var: !2037, expr: !DIExpression())
!2037 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2010, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2038 = !DIGlobalVariableExpression(var: !2039, expr: !DIExpression())
!2039 = distinct !DIGlobalVariable(name: "need_users", scope: !2010, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2040 = !DIGlobalVariableExpression(var: !2041, expr: !DIExpression())
!2041 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2010, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2042 = !DIGlobalVariableExpression(var: !2043, expr: !DIExpression())
!2043 = distinct !DIGlobalVariable(name: "time_format", scope: !2010, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2044 = !DIGlobalVariableExpression(var: !2045, expr: !DIExpression())
!2045 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2010, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2046 = !DIGlobalVariableExpression(var: !2047, expr: !DIExpression())
!2047 = distinct !DIGlobalVariable(name: "longopts", scope: !2010, file: !3, line: 162, type: !2048, isLocal: true, isDefinition: true)
!2048 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2049, size: 4608, elements: !151)
!2049 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2050)
!2050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2051)
!2051 = !{!2052, !2053, !2054, !2055}
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2050, file: !144, line: 52, baseType: !49, size: 64)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2050, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2050, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2050, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2056 = !DIGlobalVariableExpression(var: !2057, expr: !DIExpression())
!2057 = distinct !DIGlobalVariable(name: "mesg", scope: !2058, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2058 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2010, retainedNodes: !4)
!2059 = !DIGlobalVariableExpression(var: !2060, expr: !DIExpression())
!2060 = distinct !DIGlobalVariable(name: "hoststr", scope: !2061, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2061 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2062, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2010, retainedNodes: !4)
!2062 = !DISubroutineType(types: !2063)
!2063 = !{null, !1986, !9}
!2064 = !DIGlobalVariableExpression(var: !2065, expr: !DIExpression())
!2065 = distinct !DIGlobalVariable(name: "hostlen", scope: !2061, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2066 = !DIGlobalVariableExpression(var: !2067, expr: !DIExpression())
!2067 = distinct !DIGlobalVariable(name: "now", scope: !2068, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2068 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2010, retainedNodes: !4)
!2069 = !DIGlobalVariableExpression(var: !2070, expr: !DIExpression())
!2070 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2068, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2071 = !DIGlobalVariableExpression(var: !2072, expr: !DIExpression())
!2072 = distinct !DIGlobalVariable(name: "buf", scope: !2073, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2073 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2074, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2010, retainedNodes: !4)
!2074 = !DISubroutineType(types: !2075)
!2075 = !{!49, !1986}
!2076 = !DIGlobalVariableExpression(var: !2077, expr: !DIExpression())
!2077 = distinct !DIGlobalVariable(name: "runlevline", scope: !1983, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2078 = !DIGlobalVariableExpression(var: !2079, expr: !DIExpression())
!2079 = distinct !DIGlobalVariable(name: "comment", scope: !1983, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2080 = !DIGlobalVariableExpression(var: !2081, expr: !DIExpression())
!2081 = distinct !DIGlobalVariable(name: "exitstr", scope: !2082, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2082 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1984, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2010, retainedNodes: !4)
!2083 = !DILocalVariable(name: "last", scope: !1983, file: !3, line: 517, type: !317)
!2084 = !DILocalVariable(name: "curr", scope: !1983, file: !3, line: 518, type: !317)
!2085 = distinct !DISubprogram(name: "print_boottime", scope: !3, file: !3, line: 441, type: !134, scopeLine: 442, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2086 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2085, file: !3, line: 441, type: !67)
!2087 = !DILocation(line: 441, column: 36, scope: !2085)
!2088 = !DILocation(line: 443, column: 32, scope: !2085)
!2089 = !DILocation(line: 444, column: 28, scope: !2085)
!2090 = !DILocation(line: 444, column: 15, scope: !2085)
!2091 = !DILocation(line: 443, column: 3, scope: !2085)
!2092 = !DILocation(line: 445, column: 1, scope: !2085)
!2093 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2094, file: !3, line: 441, type: !2097)
!2094 = distinct !DISubprogram(name: "print_boottime", scope: !3, file: !3, line: 441, type: !2095, scopeLine: 442, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2121, retainedNodes: !4)
!2095 = !DISubroutineType(types: !2096)
!2096 = !{null, !2097}
!2097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2098, size: 64)
!2098 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2099)
!2099 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2100)
!2100 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2101)
!2101 = !{!2102, !2103, !2104, !2105, !2106, !2107, !2108, !2113, !2114, !2119, !2120}
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2100, file: !72, line: 57, baseType: !14, size: 16)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2100, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2100, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2100, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2100, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2100, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2100, file: !72, line: 67, baseType: !2109, size: 32, offset: 2656)
!2109 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2110)
!2110 = !{!2111, !2112}
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2109, file: !72, line: 45, baseType: !14, size: 16)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2109, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2100, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2100, file: !72, line: 79, baseType: !2115, size: 64, offset: 2720)
!2115 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2100, file: !72, line: 75, size: 64, elements: !2116)
!2116 = !{!2117, !2118}
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2115, file: !72, line: 77, baseType: !96, size: 32)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2115, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2100, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2100, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2121 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2122, nameTableKind: None)
!2122 = !{!2123, !2125, !2127, !2129, !2131, !2133, !2135, !2137, !2139, !2141, !2143, !2145, !2147, !2149, !2151, !2153, !2155, !2157, !2167, !2170, !2175, !2177, !2180, !2182, !2187, !2190, !2192}
!2123 = !DIGlobalVariableExpression(var: !2124, expr: !DIExpression())
!2124 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2121, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2125 = !DIGlobalVariableExpression(var: !2126, expr: !DIExpression())
!2126 = distinct !DIGlobalVariable(name: "short_list", scope: !2121, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2127 = !DIGlobalVariableExpression(var: !2128, expr: !DIExpression())
!2128 = distinct !DIGlobalVariable(name: "short_output", scope: !2121, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2129 = !DIGlobalVariableExpression(var: !2130, expr: !DIExpression())
!2130 = distinct !DIGlobalVariable(name: "include_idle", scope: !2121, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2131 = !DIGlobalVariableExpression(var: !2132, expr: !DIExpression())
!2132 = distinct !DIGlobalVariable(name: "include_heading", scope: !2121, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2133 = !DIGlobalVariableExpression(var: !2134, expr: !DIExpression())
!2134 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2121, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2135 = !DIGlobalVariableExpression(var: !2136, expr: !DIExpression())
!2136 = distinct !DIGlobalVariable(name: "include_exit", scope: !2121, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2137 = !DIGlobalVariableExpression(var: !2138, expr: !DIExpression())
!2138 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2121, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2139 = !DIGlobalVariableExpression(var: !2140, expr: !DIExpression())
!2140 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2121, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2141 = !DIGlobalVariableExpression(var: !2142, expr: !DIExpression())
!2142 = distinct !DIGlobalVariable(name: "need_login", scope: !2121, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2143 = !DIGlobalVariableExpression(var: !2144, expr: !DIExpression())
!2144 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2121, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2145 = !DIGlobalVariableExpression(var: !2146, expr: !DIExpression())
!2146 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2121, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2147 = !DIGlobalVariableExpression(var: !2148, expr: !DIExpression())
!2148 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2121, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2149 = !DIGlobalVariableExpression(var: !2150, expr: !DIExpression())
!2150 = distinct !DIGlobalVariable(name: "need_users", scope: !2121, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2151 = !DIGlobalVariableExpression(var: !2152, expr: !DIExpression())
!2152 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2121, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2153 = !DIGlobalVariableExpression(var: !2154, expr: !DIExpression())
!2154 = distinct !DIGlobalVariable(name: "time_format", scope: !2121, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2155 = !DIGlobalVariableExpression(var: !2156, expr: !DIExpression())
!2156 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2121, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2157 = !DIGlobalVariableExpression(var: !2158, expr: !DIExpression())
!2158 = distinct !DIGlobalVariable(name: "longopts", scope: !2121, file: !3, line: 162, type: !2159, isLocal: true, isDefinition: true)
!2159 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2160, size: 4608, elements: !151)
!2160 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2161)
!2161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2162)
!2162 = !{!2163, !2164, !2165, !2166}
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2161, file: !144, line: 52, baseType: !49, size: 64)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2161, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2161, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2161, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2167 = !DIGlobalVariableExpression(var: !2168, expr: !DIExpression())
!2168 = distinct !DIGlobalVariable(name: "mesg", scope: !2169, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2169 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2121, retainedNodes: !4)
!2170 = !DIGlobalVariableExpression(var: !2171, expr: !DIExpression())
!2171 = distinct !DIGlobalVariable(name: "hoststr", scope: !2172, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2172 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2173, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2121, retainedNodes: !4)
!2173 = !DISubroutineType(types: !2174)
!2174 = !{null, !2097, !9}
!2175 = !DIGlobalVariableExpression(var: !2176, expr: !DIExpression())
!2176 = distinct !DIGlobalVariable(name: "hostlen", scope: !2172, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2177 = !DIGlobalVariableExpression(var: !2178, expr: !DIExpression())
!2178 = distinct !DIGlobalVariable(name: "now", scope: !2179, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2179 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2121, retainedNodes: !4)
!2180 = !DIGlobalVariableExpression(var: !2181, expr: !DIExpression())
!2181 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2179, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2182 = !DIGlobalVariableExpression(var: !2183, expr: !DIExpression())
!2183 = distinct !DIGlobalVariable(name: "buf", scope: !2184, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2184 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2185, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2121, retainedNodes: !4)
!2185 = !DISubroutineType(types: !2186)
!2186 = !{!49, !2097}
!2187 = !DIGlobalVariableExpression(var: !2188, expr: !DIExpression())
!2188 = distinct !DIGlobalVariable(name: "runlevline", scope: !2189, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2189 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2095, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2121, retainedNodes: !4)
!2190 = !DIGlobalVariableExpression(var: !2191, expr: !DIExpression())
!2191 = distinct !DIGlobalVariable(name: "comment", scope: !2189, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2192 = !DIGlobalVariableExpression(var: !2193, expr: !DIExpression())
!2193 = distinct !DIGlobalVariable(name: "exitstr", scope: !2194, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2194 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2095, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2121, retainedNodes: !4)
!2195 = distinct !DISubprogram(name: "print_clockchange", scope: !3, file: !3, line: 506, type: !134, scopeLine: 507, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2196 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2195, file: !3, line: 506, type: !67)
!2197 = !DILocation(line: 506, column: 39, scope: !2195)
!2198 = !DILocation(line: 509, column: 32, scope: !2195)
!2199 = !DILocation(line: 510, column: 28, scope: !2195)
!2200 = !DILocation(line: 510, column: 15, scope: !2195)
!2201 = !DILocation(line: 509, column: 3, scope: !2195)
!2202 = !DILocation(line: 511, column: 1, scope: !2195)
!2203 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2204, file: !3, line: 506, type: !2207)
!2204 = distinct !DISubprogram(name: "print_clockchange", scope: !3, file: !3, line: 506, type: !2205, scopeLine: 507, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2231, retainedNodes: !4)
!2205 = !DISubroutineType(types: !2206)
!2206 = !{null, !2207}
!2207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2208, size: 64)
!2208 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2209)
!2209 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2210)
!2210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2211)
!2211 = !{!2212, !2213, !2214, !2215, !2216, !2217, !2218, !2223, !2224, !2229, !2230}
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2210, file: !72, line: 57, baseType: !14, size: 16)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2210, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2210, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2210, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2210, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2210, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2210, file: !72, line: 67, baseType: !2219, size: 32, offset: 2656)
!2219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2220)
!2220 = !{!2221, !2222}
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2219, file: !72, line: 45, baseType: !14, size: 16)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2219, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2210, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2210, file: !72, line: 79, baseType: !2225, size: 64, offset: 2720)
!2225 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2210, file: !72, line: 75, size: 64, elements: !2226)
!2226 = !{!2227, !2228}
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2225, file: !72, line: 77, baseType: !96, size: 32)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2225, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2210, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2210, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2231 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2232, nameTableKind: None)
!2232 = !{!2233, !2235, !2237, !2239, !2241, !2243, !2245, !2247, !2249, !2251, !2253, !2255, !2257, !2259, !2261, !2263, !2265, !2267, !2277, !2280, !2285, !2287, !2290, !2292, !2297, !2300, !2302}
!2233 = !DIGlobalVariableExpression(var: !2234, expr: !DIExpression())
!2234 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2231, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2235 = !DIGlobalVariableExpression(var: !2236, expr: !DIExpression())
!2236 = distinct !DIGlobalVariable(name: "short_list", scope: !2231, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2237 = !DIGlobalVariableExpression(var: !2238, expr: !DIExpression())
!2238 = distinct !DIGlobalVariable(name: "short_output", scope: !2231, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2239 = !DIGlobalVariableExpression(var: !2240, expr: !DIExpression())
!2240 = distinct !DIGlobalVariable(name: "include_idle", scope: !2231, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2241 = !DIGlobalVariableExpression(var: !2242, expr: !DIExpression())
!2242 = distinct !DIGlobalVariable(name: "include_heading", scope: !2231, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2243 = !DIGlobalVariableExpression(var: !2244, expr: !DIExpression())
!2244 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2231, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2245 = !DIGlobalVariableExpression(var: !2246, expr: !DIExpression())
!2246 = distinct !DIGlobalVariable(name: "include_exit", scope: !2231, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2247 = !DIGlobalVariableExpression(var: !2248, expr: !DIExpression())
!2248 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2231, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2249 = !DIGlobalVariableExpression(var: !2250, expr: !DIExpression())
!2250 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2231, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2251 = !DIGlobalVariableExpression(var: !2252, expr: !DIExpression())
!2252 = distinct !DIGlobalVariable(name: "need_login", scope: !2231, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2253 = !DIGlobalVariableExpression(var: !2254, expr: !DIExpression())
!2254 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2231, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2255 = !DIGlobalVariableExpression(var: !2256, expr: !DIExpression())
!2256 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2231, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2257 = !DIGlobalVariableExpression(var: !2258, expr: !DIExpression())
!2258 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2231, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2259 = !DIGlobalVariableExpression(var: !2260, expr: !DIExpression())
!2260 = distinct !DIGlobalVariable(name: "need_users", scope: !2231, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2261 = !DIGlobalVariableExpression(var: !2262, expr: !DIExpression())
!2262 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2231, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2263 = !DIGlobalVariableExpression(var: !2264, expr: !DIExpression())
!2264 = distinct !DIGlobalVariable(name: "time_format", scope: !2231, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2265 = !DIGlobalVariableExpression(var: !2266, expr: !DIExpression())
!2266 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2231, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2267 = !DIGlobalVariableExpression(var: !2268, expr: !DIExpression())
!2268 = distinct !DIGlobalVariable(name: "longopts", scope: !2231, file: !3, line: 162, type: !2269, isLocal: true, isDefinition: true)
!2269 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2270, size: 4608, elements: !151)
!2270 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2271)
!2271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2272)
!2272 = !{!2273, !2274, !2275, !2276}
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2271, file: !144, line: 52, baseType: !49, size: 64)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2271, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2271, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2271, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2277 = !DIGlobalVariableExpression(var: !2278, expr: !DIExpression())
!2278 = distinct !DIGlobalVariable(name: "mesg", scope: !2279, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2279 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2231, retainedNodes: !4)
!2280 = !DIGlobalVariableExpression(var: !2281, expr: !DIExpression())
!2281 = distinct !DIGlobalVariable(name: "hoststr", scope: !2282, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2282 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2283, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2231, retainedNodes: !4)
!2283 = !DISubroutineType(types: !2284)
!2284 = !{null, !2207, !9}
!2285 = !DIGlobalVariableExpression(var: !2286, expr: !DIExpression())
!2286 = distinct !DIGlobalVariable(name: "hostlen", scope: !2282, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2287 = !DIGlobalVariableExpression(var: !2288, expr: !DIExpression())
!2288 = distinct !DIGlobalVariable(name: "now", scope: !2289, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2289 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2231, retainedNodes: !4)
!2290 = !DIGlobalVariableExpression(var: !2291, expr: !DIExpression())
!2291 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2289, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2292 = !DIGlobalVariableExpression(var: !2293, expr: !DIExpression())
!2293 = distinct !DIGlobalVariable(name: "buf", scope: !2294, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2294 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2295, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2231, retainedNodes: !4)
!2295 = !DISubroutineType(types: !2296)
!2296 = !{!49, !2207}
!2297 = !DIGlobalVariableExpression(var: !2298, expr: !DIExpression())
!2298 = distinct !DIGlobalVariable(name: "runlevline", scope: !2299, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2299 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2205, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2231, retainedNodes: !4)
!2300 = !DIGlobalVariableExpression(var: !2301, expr: !DIExpression())
!2301 = distinct !DIGlobalVariable(name: "comment", scope: !2299, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2302 = !DIGlobalVariableExpression(var: !2303, expr: !DIExpression())
!2303 = distinct !DIGlobalVariable(name: "exitstr", scope: !2304, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2304 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2205, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2231, retainedNodes: !4)
!2305 = distinct !DISubprogram(name: "print_initspawn", scope: !3, file: !3, line: 495, type: !134, scopeLine: 496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2306 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2305, file: !3, line: 495, type: !67)
!2307 = !DILocation(line: 495, column: 37, scope: !2305)
!2308 = !DILocalVariable(name: "comment", scope: !2305, file: !3, line: 497, type: !6)
!2309 = !DILocation(line: 497, column: 9, scope: !2305)
!2310 = !DILocation(line: 497, column: 43, scope: !2305)
!2311 = !DILocation(line: 497, column: 19, scope: !2305)
!2312 = !DILocalVariable(name: "pidstr", scope: !2305, file: !3, line: 498, type: !1530)
!2313 = !DILocation(line: 498, column: 3, scope: !2305)
!2314 = !DILocation(line: 500, column: 54, scope: !2305)
!2315 = !DILocation(line: 500, column: 64, scope: !2305)
!2316 = !DILocation(line: 501, column: 28, scope: !2305)
!2317 = !DILocation(line: 501, column: 15, scope: !2305)
!2318 = !DILocation(line: 501, column: 43, scope: !2305)
!2319 = !DILocation(line: 501, column: 51, scope: !2305)
!2320 = !DILocation(line: 500, column: 3, scope: !2305)
!2321 = !DILocation(line: 502, column: 9, scope: !2305)
!2322 = !DILocation(line: 502, column: 3, scope: !2305)
!2323 = !DILocation(line: 503, column: 1, scope: !2305)
!2324 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2325, file: !3, line: 495, type: !2328)
!2325 = distinct !DISubprogram(name: "print_initspawn", scope: !3, file: !3, line: 495, type: !2326, scopeLine: 496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2352, retainedNodes: !4)
!2326 = !DISubroutineType(types: !2327)
!2327 = !{null, !2328}
!2328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2329, size: 64)
!2329 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2330)
!2330 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2331)
!2331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2332)
!2332 = !{!2333, !2334, !2335, !2336, !2337, !2338, !2339, !2344, !2345, !2350, !2351}
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2331, file: !72, line: 57, baseType: !14, size: 16)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2331, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2331, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2331, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2331, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2331, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2331, file: !72, line: 67, baseType: !2340, size: 32, offset: 2656)
!2340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2341)
!2341 = !{!2342, !2343}
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2340, file: !72, line: 45, baseType: !14, size: 16)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2340, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2331, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2331, file: !72, line: 79, baseType: !2346, size: 64, offset: 2720)
!2346 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2331, file: !72, line: 75, size: 64, elements: !2347)
!2347 = !{!2348, !2349}
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2346, file: !72, line: 77, baseType: !96, size: 32)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2346, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2331, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2331, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2352 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2353, nameTableKind: None)
!2353 = !{!2354, !2356, !2358, !2360, !2362, !2364, !2366, !2368, !2370, !2372, !2374, !2376, !2378, !2380, !2382, !2384, !2386, !2388, !2398, !2401, !2406, !2408, !2411, !2413, !2418, !2421, !2423}
!2354 = !DIGlobalVariableExpression(var: !2355, expr: !DIExpression())
!2355 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2352, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2356 = !DIGlobalVariableExpression(var: !2357, expr: !DIExpression())
!2357 = distinct !DIGlobalVariable(name: "short_list", scope: !2352, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2358 = !DIGlobalVariableExpression(var: !2359, expr: !DIExpression())
!2359 = distinct !DIGlobalVariable(name: "short_output", scope: !2352, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2360 = !DIGlobalVariableExpression(var: !2361, expr: !DIExpression())
!2361 = distinct !DIGlobalVariable(name: "include_idle", scope: !2352, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2362 = !DIGlobalVariableExpression(var: !2363, expr: !DIExpression())
!2363 = distinct !DIGlobalVariable(name: "include_heading", scope: !2352, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2364 = !DIGlobalVariableExpression(var: !2365, expr: !DIExpression())
!2365 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2352, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2366 = !DIGlobalVariableExpression(var: !2367, expr: !DIExpression())
!2367 = distinct !DIGlobalVariable(name: "include_exit", scope: !2352, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2368 = !DIGlobalVariableExpression(var: !2369, expr: !DIExpression())
!2369 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2352, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2370 = !DIGlobalVariableExpression(var: !2371, expr: !DIExpression())
!2371 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2352, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2372 = !DIGlobalVariableExpression(var: !2373, expr: !DIExpression())
!2373 = distinct !DIGlobalVariable(name: "need_login", scope: !2352, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2374 = !DIGlobalVariableExpression(var: !2375, expr: !DIExpression())
!2375 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2352, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2376 = !DIGlobalVariableExpression(var: !2377, expr: !DIExpression())
!2377 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2352, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2378 = !DIGlobalVariableExpression(var: !2379, expr: !DIExpression())
!2379 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2352, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2380 = !DIGlobalVariableExpression(var: !2381, expr: !DIExpression())
!2381 = distinct !DIGlobalVariable(name: "need_users", scope: !2352, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2382 = !DIGlobalVariableExpression(var: !2383, expr: !DIExpression())
!2383 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2352, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2384 = !DIGlobalVariableExpression(var: !2385, expr: !DIExpression())
!2385 = distinct !DIGlobalVariable(name: "time_format", scope: !2352, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2386 = !DIGlobalVariableExpression(var: !2387, expr: !DIExpression())
!2387 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2352, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2388 = !DIGlobalVariableExpression(var: !2389, expr: !DIExpression())
!2389 = distinct !DIGlobalVariable(name: "longopts", scope: !2352, file: !3, line: 162, type: !2390, isLocal: true, isDefinition: true)
!2390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2391, size: 4608, elements: !151)
!2391 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2392)
!2392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2393)
!2393 = !{!2394, !2395, !2396, !2397}
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2392, file: !144, line: 52, baseType: !49, size: 64)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2392, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2396 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2392, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2392, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2398 = !DIGlobalVariableExpression(var: !2399, expr: !DIExpression())
!2399 = distinct !DIGlobalVariable(name: "mesg", scope: !2400, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2400 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2352, retainedNodes: !4)
!2401 = !DIGlobalVariableExpression(var: !2402, expr: !DIExpression())
!2402 = distinct !DIGlobalVariable(name: "hoststr", scope: !2403, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2403 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2404, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2352, retainedNodes: !4)
!2404 = !DISubroutineType(types: !2405)
!2405 = !{null, !2328, !9}
!2406 = !DIGlobalVariableExpression(var: !2407, expr: !DIExpression())
!2407 = distinct !DIGlobalVariable(name: "hostlen", scope: !2403, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2408 = !DIGlobalVariableExpression(var: !2409, expr: !DIExpression())
!2409 = distinct !DIGlobalVariable(name: "now", scope: !2410, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2410 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2352, retainedNodes: !4)
!2411 = !DIGlobalVariableExpression(var: !2412, expr: !DIExpression())
!2412 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2410, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2413 = !DIGlobalVariableExpression(var: !2414, expr: !DIExpression())
!2414 = distinct !DIGlobalVariable(name: "buf", scope: !2415, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2415 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2416, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2352, retainedNodes: !4)
!2416 = !DISubroutineType(types: !2417)
!2417 = !{!49, !2328}
!2418 = !DIGlobalVariableExpression(var: !2419, expr: !DIExpression())
!2419 = distinct !DIGlobalVariable(name: "runlevline", scope: !2420, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2420 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2326, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2352, retainedNodes: !4)
!2421 = !DIGlobalVariableExpression(var: !2422, expr: !DIExpression())
!2422 = distinct !DIGlobalVariable(name: "comment", scope: !2420, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2423 = !DIGlobalVariableExpression(var: !2424, expr: !DIExpression())
!2424 = distinct !DIGlobalVariable(name: "exitstr", scope: !2425, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2425 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2326, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2352, retainedNodes: !4)
!2426 = !DILocalVariable(name: "comment", scope: !2325, file: !3, line: 497, type: !6)
!2427 = !DILocalVariable(name: "pidstr", scope: !2325, file: !3, line: 498, type: !1530)
!2428 = distinct !DISubprogram(name: "print_login", scope: !3, file: !3, line: 482, type: !134, scopeLine: 483, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2429 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2428, file: !3, line: 482, type: !67)
!2430 = !DILocation(line: 482, column: 33, scope: !2428)
!2431 = !DILocalVariable(name: "comment", scope: !2428, file: !3, line: 484, type: !6)
!2432 = !DILocation(line: 484, column: 9, scope: !2428)
!2433 = !DILocation(line: 484, column: 43, scope: !2428)
!2434 = !DILocation(line: 484, column: 19, scope: !2428)
!2435 = !DILocalVariable(name: "pidstr", scope: !2428, file: !3, line: 485, type: !1530)
!2436 = !DILocation(line: 485, column: 3, scope: !2428)
!2437 = !DILocation(line: 489, column: 19, scope: !2428)
!2438 = !DILocation(line: 489, column: 62, scope: !2428)
!2439 = !DILocation(line: 489, column: 72, scope: !2428)
!2440 = !DILocation(line: 490, column: 28, scope: !2428)
!2441 = !DILocation(line: 490, column: 15, scope: !2428)
!2442 = !DILocation(line: 490, column: 43, scope: !2428)
!2443 = !DILocation(line: 490, column: 51, scope: !2428)
!2444 = !DILocation(line: 489, column: 3, scope: !2428)
!2445 = !DILocation(line: 491, column: 9, scope: !2428)
!2446 = !DILocation(line: 491, column: 3, scope: !2428)
!2447 = !DILocation(line: 492, column: 1, scope: !2428)
!2448 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2449, file: !3, line: 482, type: !2452)
!2449 = distinct !DISubprogram(name: "print_login", scope: !3, file: !3, line: 482, type: !2450, scopeLine: 483, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2476, retainedNodes: !4)
!2450 = !DISubroutineType(types: !2451)
!2451 = !{null, !2452}
!2452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2453, size: 64)
!2453 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2454)
!2454 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2455)
!2455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2456)
!2456 = !{!2457, !2458, !2459, !2460, !2461, !2462, !2463, !2468, !2469, !2474, !2475}
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2455, file: !72, line: 57, baseType: !14, size: 16)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2455, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2455, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2455, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2455, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2455, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2455, file: !72, line: 67, baseType: !2464, size: 32, offset: 2656)
!2464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2465)
!2465 = !{!2466, !2467}
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2464, file: !72, line: 45, baseType: !14, size: 16)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2464, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2455, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2455, file: !72, line: 79, baseType: !2470, size: 64, offset: 2720)
!2470 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2455, file: !72, line: 75, size: 64, elements: !2471)
!2471 = !{!2472, !2473}
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2470, file: !72, line: 77, baseType: !96, size: 32)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2470, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2455, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2455, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2476 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2477, nameTableKind: None)
!2477 = !{!2478, !2480, !2482, !2484, !2486, !2488, !2490, !2492, !2494, !2496, !2498, !2500, !2502, !2504, !2506, !2508, !2510, !2512, !2522, !2525, !2530, !2532, !2535, !2537, !2542, !2545, !2547}
!2478 = !DIGlobalVariableExpression(var: !2479, expr: !DIExpression())
!2479 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2476, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2480 = !DIGlobalVariableExpression(var: !2481, expr: !DIExpression())
!2481 = distinct !DIGlobalVariable(name: "short_list", scope: !2476, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2482 = !DIGlobalVariableExpression(var: !2483, expr: !DIExpression())
!2483 = distinct !DIGlobalVariable(name: "short_output", scope: !2476, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2484 = !DIGlobalVariableExpression(var: !2485, expr: !DIExpression())
!2485 = distinct !DIGlobalVariable(name: "include_idle", scope: !2476, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2486 = !DIGlobalVariableExpression(var: !2487, expr: !DIExpression())
!2487 = distinct !DIGlobalVariable(name: "include_heading", scope: !2476, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2488 = !DIGlobalVariableExpression(var: !2489, expr: !DIExpression())
!2489 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2476, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2490 = !DIGlobalVariableExpression(var: !2491, expr: !DIExpression())
!2491 = distinct !DIGlobalVariable(name: "include_exit", scope: !2476, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2492 = !DIGlobalVariableExpression(var: !2493, expr: !DIExpression())
!2493 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2476, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2494 = !DIGlobalVariableExpression(var: !2495, expr: !DIExpression())
!2495 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2476, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2496 = !DIGlobalVariableExpression(var: !2497, expr: !DIExpression())
!2497 = distinct !DIGlobalVariable(name: "need_login", scope: !2476, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2498 = !DIGlobalVariableExpression(var: !2499, expr: !DIExpression())
!2499 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2476, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2500 = !DIGlobalVariableExpression(var: !2501, expr: !DIExpression())
!2501 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2476, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2502 = !DIGlobalVariableExpression(var: !2503, expr: !DIExpression())
!2503 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2476, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2504 = !DIGlobalVariableExpression(var: !2505, expr: !DIExpression())
!2505 = distinct !DIGlobalVariable(name: "need_users", scope: !2476, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2506 = !DIGlobalVariableExpression(var: !2507, expr: !DIExpression())
!2507 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2476, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2508 = !DIGlobalVariableExpression(var: !2509, expr: !DIExpression())
!2509 = distinct !DIGlobalVariable(name: "time_format", scope: !2476, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2510 = !DIGlobalVariableExpression(var: !2511, expr: !DIExpression())
!2511 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2476, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2512 = !DIGlobalVariableExpression(var: !2513, expr: !DIExpression())
!2513 = distinct !DIGlobalVariable(name: "longopts", scope: !2476, file: !3, line: 162, type: !2514, isLocal: true, isDefinition: true)
!2514 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2515, size: 4608, elements: !151)
!2515 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2516)
!2516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2517)
!2517 = !{!2518, !2519, !2520, !2521}
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2516, file: !144, line: 52, baseType: !49, size: 64)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2516, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2516, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2516, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2522 = !DIGlobalVariableExpression(var: !2523, expr: !DIExpression())
!2523 = distinct !DIGlobalVariable(name: "mesg", scope: !2524, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2524 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2476, retainedNodes: !4)
!2525 = !DIGlobalVariableExpression(var: !2526, expr: !DIExpression())
!2526 = distinct !DIGlobalVariable(name: "hoststr", scope: !2527, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2527 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2528, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2476, retainedNodes: !4)
!2528 = !DISubroutineType(types: !2529)
!2529 = !{null, !2452, !9}
!2530 = !DIGlobalVariableExpression(var: !2531, expr: !DIExpression())
!2531 = distinct !DIGlobalVariable(name: "hostlen", scope: !2527, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2532 = !DIGlobalVariableExpression(var: !2533, expr: !DIExpression())
!2533 = distinct !DIGlobalVariable(name: "now", scope: !2534, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2534 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2476, retainedNodes: !4)
!2535 = !DIGlobalVariableExpression(var: !2536, expr: !DIExpression())
!2536 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2534, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2537 = !DIGlobalVariableExpression(var: !2538, expr: !DIExpression())
!2538 = distinct !DIGlobalVariable(name: "buf", scope: !2539, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2539 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2540, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2476, retainedNodes: !4)
!2540 = !DISubroutineType(types: !2541)
!2541 = !{!49, !2452}
!2542 = !DIGlobalVariableExpression(var: !2543, expr: !DIExpression())
!2543 = distinct !DIGlobalVariable(name: "runlevline", scope: !2544, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2544 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2450, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2476, retainedNodes: !4)
!2545 = !DIGlobalVariableExpression(var: !2546, expr: !DIExpression())
!2546 = distinct !DIGlobalVariable(name: "comment", scope: !2544, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2547 = !DIGlobalVariableExpression(var: !2548, expr: !DIExpression())
!2548 = distinct !DIGlobalVariable(name: "exitstr", scope: !2549, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2549 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2450, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2476, retainedNodes: !4)
!2550 = !DILocalVariable(name: "comment", scope: !2449, file: !3, line: 484, type: !6)
!2551 = !DILocalVariable(name: "pidstr", scope: !2449, file: !3, line: 485, type: !1530)
!2552 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !140, file: !3, line: 459, type: !67)
!2553 = !DILocation(line: 459, column: 37, scope: !140)
!2554 = !DILocalVariable(name: "comment", scope: !140, file: !3, line: 462, type: !6)
!2555 = !DILocation(line: 462, column: 9, scope: !140)
!2556 = !DILocation(line: 462, column: 43, scope: !140)
!2557 = !DILocation(line: 462, column: 19, scope: !140)
!2558 = !DILocalVariable(name: "pidstr", scope: !140, file: !3, line: 463, type: !1530)
!2559 = !DILocation(line: 463, column: 3, scope: !140)
!2560 = !DILocation(line: 465, column: 8, scope: !2561)
!2561 = distinct !DILexicalBlock(scope: !140, file: !3, line: 465, column: 7)
!2562 = !DILocation(line: 465, column: 7, scope: !140)
!2563 = !DILocation(line: 466, column: 32, scope: !2561)
!2564 = !DILocation(line: 466, column: 24, scope: !2561)
!2565 = !DILocation(line: 467, column: 24, scope: !2561)
!2566 = !DILocation(line: 467, column: 78, scope: !2561)
!2567 = !DILocation(line: 468, column: 34, scope: !2561)
!2568 = !DILocation(line: 468, column: 26, scope: !2561)
!2569 = !DILocation(line: 468, column: 24, scope: !2561)
!2570 = !DILocation(line: 469, column: 24, scope: !2561)
!2571 = !DILocation(line: 470, column: 24, scope: !2561)
!2572 = !DILocation(line: 466, column: 15, scope: !2561)
!2573 = !DILocation(line: 466, column: 13, scope: !2561)
!2574 = !DILocation(line: 466, column: 5, scope: !2561)
!2575 = !DILocation(line: 471, column: 12, scope: !140)
!2576 = !DILocation(line: 471, column: 34, scope: !140)
!2577 = !DILocation(line: 471, column: 46, scope: !140)
!2578 = !DILocation(line: 472, column: 12, scope: !140)
!2579 = !DILocation(line: 472, column: 24, scope: !140)
!2580 = !DILocation(line: 471, column: 3, scope: !140)
!2581 = !DILocation(line: 476, column: 54, scope: !140)
!2582 = !DILocation(line: 476, column: 64, scope: !140)
!2583 = !DILocation(line: 477, column: 28, scope: !140)
!2584 = !DILocation(line: 477, column: 15, scope: !140)
!2585 = !DILocation(line: 477, column: 43, scope: !140)
!2586 = !DILocation(line: 477, column: 51, scope: !140)
!2587 = !DILocation(line: 477, column: 60, scope: !140)
!2588 = !DILocation(line: 476, column: 3, scope: !140)
!2589 = !DILocation(line: 478, column: 9, scope: !140)
!2590 = !DILocation(line: 478, column: 3, scope: !140)
!2591 = !DILocation(line: 479, column: 1, scope: !140)
!2592 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2593, file: !3, line: 459, type: !2596)
!2593 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2594, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2620, retainedNodes: !4)
!2594 = !DISubroutineType(types: !2595)
!2595 = !{null, !2596}
!2596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2597, size: 64)
!2597 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2598)
!2598 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2599)
!2599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2600)
!2600 = !{!2601, !2602, !2603, !2604, !2605, !2606, !2607, !2612, !2613, !2618, !2619}
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2599, file: !72, line: 57, baseType: !14, size: 16)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2599, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2599, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2599, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2599, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2599, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2599, file: !72, line: 67, baseType: !2608, size: 32, offset: 2656)
!2608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2609)
!2609 = !{!2610, !2611}
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2608, file: !72, line: 45, baseType: !14, size: 16)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2608, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2599, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2599, file: !72, line: 79, baseType: !2614, size: 64, offset: 2720)
!2614 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2599, file: !72, line: 75, size: 64, elements: !2615)
!2615 = !{!2616, !2617}
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2614, file: !72, line: 77, baseType: !96, size: 32)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2614, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2599, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2599, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2620 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2621, nameTableKind: None)
!2621 = !{!2622, !2624, !2626, !2628, !2630, !2632, !2634, !2636, !2638, !2640, !2642, !2644, !2646, !2648, !2650, !2652, !2654, !2656, !2666, !2669, !2674, !2676, !2679, !2681, !2686, !2689, !2691}
!2622 = !DIGlobalVariableExpression(var: !2623, expr: !DIExpression())
!2623 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2620, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2624 = !DIGlobalVariableExpression(var: !2625, expr: !DIExpression())
!2625 = distinct !DIGlobalVariable(name: "short_list", scope: !2620, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2626 = !DIGlobalVariableExpression(var: !2627, expr: !DIExpression())
!2627 = distinct !DIGlobalVariable(name: "short_output", scope: !2620, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2628 = !DIGlobalVariableExpression(var: !2629, expr: !DIExpression())
!2629 = distinct !DIGlobalVariable(name: "include_idle", scope: !2620, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2630 = !DIGlobalVariableExpression(var: !2631, expr: !DIExpression())
!2631 = distinct !DIGlobalVariable(name: "include_heading", scope: !2620, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2632 = !DIGlobalVariableExpression(var: !2633, expr: !DIExpression())
!2633 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2620, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2634 = !DIGlobalVariableExpression(var: !2635, expr: !DIExpression())
!2635 = distinct !DIGlobalVariable(name: "include_exit", scope: !2620, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2636 = !DIGlobalVariableExpression(var: !2637, expr: !DIExpression())
!2637 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2620, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2638 = !DIGlobalVariableExpression(var: !2639, expr: !DIExpression())
!2639 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2620, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2640 = !DIGlobalVariableExpression(var: !2641, expr: !DIExpression())
!2641 = distinct !DIGlobalVariable(name: "need_login", scope: !2620, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2642 = !DIGlobalVariableExpression(var: !2643, expr: !DIExpression())
!2643 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2620, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2644 = !DIGlobalVariableExpression(var: !2645, expr: !DIExpression())
!2645 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2620, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2646 = !DIGlobalVariableExpression(var: !2647, expr: !DIExpression())
!2647 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2620, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2648 = !DIGlobalVariableExpression(var: !2649, expr: !DIExpression())
!2649 = distinct !DIGlobalVariable(name: "need_users", scope: !2620, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2650 = !DIGlobalVariableExpression(var: !2651, expr: !DIExpression())
!2651 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2620, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2652 = !DIGlobalVariableExpression(var: !2653, expr: !DIExpression())
!2653 = distinct !DIGlobalVariable(name: "time_format", scope: !2620, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2654 = !DIGlobalVariableExpression(var: !2655, expr: !DIExpression())
!2655 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2620, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2656 = !DIGlobalVariableExpression(var: !2657, expr: !DIExpression())
!2657 = distinct !DIGlobalVariable(name: "longopts", scope: !2620, file: !3, line: 162, type: !2658, isLocal: true, isDefinition: true)
!2658 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2659, size: 4608, elements: !151)
!2659 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2660)
!2660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2661)
!2661 = !{!2662, !2663, !2664, !2665}
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2660, file: !144, line: 52, baseType: !49, size: 64)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2660, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2660, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2660, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2666 = !DIGlobalVariableExpression(var: !2667, expr: !DIExpression())
!2667 = distinct !DIGlobalVariable(name: "mesg", scope: !2668, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2668 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2620, retainedNodes: !4)
!2669 = !DIGlobalVariableExpression(var: !2670, expr: !DIExpression())
!2670 = distinct !DIGlobalVariable(name: "hoststr", scope: !2671, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2671 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2672, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2620, retainedNodes: !4)
!2672 = !DISubroutineType(types: !2673)
!2673 = !{null, !2596, !9}
!2674 = !DIGlobalVariableExpression(var: !2675, expr: !DIExpression())
!2675 = distinct !DIGlobalVariable(name: "hostlen", scope: !2671, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2676 = !DIGlobalVariableExpression(var: !2677, expr: !DIExpression())
!2677 = distinct !DIGlobalVariable(name: "now", scope: !2678, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2678 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2620, retainedNodes: !4)
!2679 = !DIGlobalVariableExpression(var: !2680, expr: !DIExpression())
!2680 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2678, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2681 = !DIGlobalVariableExpression(var: !2682, expr: !DIExpression())
!2682 = distinct !DIGlobalVariable(name: "buf", scope: !2683, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2683 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2684, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2620, retainedNodes: !4)
!2684 = !DISubroutineType(types: !2685)
!2685 = !{!49, !2596}
!2686 = !DIGlobalVariableExpression(var: !2687, expr: !DIExpression())
!2687 = distinct !DIGlobalVariable(name: "runlevline", scope: !2688, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2688 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2594, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2620, retainedNodes: !4)
!2689 = !DIGlobalVariableExpression(var: !2690, expr: !DIExpression())
!2690 = distinct !DIGlobalVariable(name: "comment", scope: !2688, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2691 = !DIGlobalVariableExpression(var: !2692, expr: !DIExpression())
!2692 = distinct !DIGlobalVariable(name: "exitstr", scope: !2593, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2693 = !DILocalVariable(name: "comment", scope: !2593, file: !3, line: 462, type: !6)
!2694 = !DILocalVariable(name: "pidstr", scope: !2593, file: !3, line: 463, type: !1530)
!2695 = distinct !DISubprogram(name: "make_id_equals_comment", scope: !3, file: !3, line: 448, type: !2696, scopeLine: 449, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2696 = !DISubroutineType(types: !2697)
!2697 = !{!6, !67}
!2698 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2695, file: !3, line: 448, type: !67)
!2699 = !DILocation(line: 448, column: 44, scope: !2695)
!2700 = !DILocalVariable(name: "utmpsize", scope: !2695, file: !3, line: 450, type: !110)
!2701 = !DILocation(line: 450, column: 10, scope: !2695)
!2702 = !DILocalVariable(name: "comment", scope: !2695, file: !3, line: 451, type: !6)
!2703 = !DILocation(line: 451, column: 9, scope: !2695)
!2704 = !DILocation(line: 451, column: 36, scope: !2695)
!2705 = !DILocation(line: 451, column: 28, scope: !2695)
!2706 = !DILocation(line: 451, column: 48, scope: !2695)
!2707 = !DILocation(line: 451, column: 46, scope: !2695)
!2708 = !DILocation(line: 451, column: 57, scope: !2695)
!2709 = !DILocation(line: 451, column: 19, scope: !2695)
!2710 = !DILocation(line: 453, column: 11, scope: !2695)
!2711 = !DILocation(line: 453, column: 20, scope: !2695)
!2712 = !DILocation(line: 453, column: 3, scope: !2695)
!2713 = !DILocation(line: 454, column: 12, scope: !2695)
!2714 = !DILocation(line: 454, column: 21, scope: !2695)
!2715 = !DILocation(line: 454, column: 39, scope: !2695)
!2716 = !DILocation(line: 454, column: 3, scope: !2695)
!2717 = !DILocation(line: 455, column: 10, scope: !2695)
!2718 = !DILocation(line: 455, column: 3, scope: !2695)
!2719 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2720, file: !3, line: 448, type: !2723)
!2720 = distinct !DISubprogram(name: "make_id_equals_comment", scope: !3, file: !3, line: 448, type: !2721, scopeLine: 449, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2747, retainedNodes: !4)
!2721 = !DISubroutineType(types: !2722)
!2722 = !{!6, !2723}
!2723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2724, size: 64)
!2724 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2725)
!2725 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2726)
!2726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2727)
!2727 = !{!2728, !2729, !2730, !2731, !2732, !2733, !2734, !2739, !2740, !2745, !2746}
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2726, file: !72, line: 57, baseType: !14, size: 16)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2726, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2726, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2726, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2726, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2726, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2726, file: !72, line: 67, baseType: !2735, size: 32, offset: 2656)
!2735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2736)
!2736 = !{!2737, !2738}
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2735, file: !72, line: 45, baseType: !14, size: 16)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2735, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2726, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2726, file: !72, line: 79, baseType: !2741, size: 64, offset: 2720)
!2741 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2726, file: !72, line: 75, size: 64, elements: !2742)
!2742 = !{!2743, !2744}
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2741, file: !72, line: 77, baseType: !96, size: 32)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2741, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2726, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2726, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2747 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2748, nameTableKind: None)
!2748 = !{!2749, !2751, !2753, !2755, !2757, !2759, !2761, !2763, !2765, !2767, !2769, !2771, !2773, !2775, !2777, !2779, !2781, !2783, !2793, !2796, !2801, !2803, !2806, !2808, !2813, !2818, !2820}
!2749 = !DIGlobalVariableExpression(var: !2750, expr: !DIExpression())
!2750 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2747, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2751 = !DIGlobalVariableExpression(var: !2752, expr: !DIExpression())
!2752 = distinct !DIGlobalVariable(name: "short_list", scope: !2747, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2753 = !DIGlobalVariableExpression(var: !2754, expr: !DIExpression())
!2754 = distinct !DIGlobalVariable(name: "short_output", scope: !2747, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2755 = !DIGlobalVariableExpression(var: !2756, expr: !DIExpression())
!2756 = distinct !DIGlobalVariable(name: "include_idle", scope: !2747, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2757 = !DIGlobalVariableExpression(var: !2758, expr: !DIExpression())
!2758 = distinct !DIGlobalVariable(name: "include_heading", scope: !2747, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2759 = !DIGlobalVariableExpression(var: !2760, expr: !DIExpression())
!2760 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2747, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2761 = !DIGlobalVariableExpression(var: !2762, expr: !DIExpression())
!2762 = distinct !DIGlobalVariable(name: "include_exit", scope: !2747, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2763 = !DIGlobalVariableExpression(var: !2764, expr: !DIExpression())
!2764 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2747, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2765 = !DIGlobalVariableExpression(var: !2766, expr: !DIExpression())
!2766 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2747, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2767 = !DIGlobalVariableExpression(var: !2768, expr: !DIExpression())
!2768 = distinct !DIGlobalVariable(name: "need_login", scope: !2747, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2769 = !DIGlobalVariableExpression(var: !2770, expr: !DIExpression())
!2770 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2747, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2771 = !DIGlobalVariableExpression(var: !2772, expr: !DIExpression())
!2772 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2747, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2773 = !DIGlobalVariableExpression(var: !2774, expr: !DIExpression())
!2774 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2747, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2775 = !DIGlobalVariableExpression(var: !2776, expr: !DIExpression())
!2776 = distinct !DIGlobalVariable(name: "need_users", scope: !2747, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2777 = !DIGlobalVariableExpression(var: !2778, expr: !DIExpression())
!2778 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2747, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2779 = !DIGlobalVariableExpression(var: !2780, expr: !DIExpression())
!2780 = distinct !DIGlobalVariable(name: "time_format", scope: !2747, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2781 = !DIGlobalVariableExpression(var: !2782, expr: !DIExpression())
!2782 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2747, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2783 = !DIGlobalVariableExpression(var: !2784, expr: !DIExpression())
!2784 = distinct !DIGlobalVariable(name: "longopts", scope: !2747, file: !3, line: 162, type: !2785, isLocal: true, isDefinition: true)
!2785 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2786, size: 4608, elements: !151)
!2786 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2787)
!2787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2788)
!2788 = !{!2789, !2790, !2791, !2792}
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2787, file: !144, line: 52, baseType: !49, size: 64)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2787, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2787, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2787, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2793 = !DIGlobalVariableExpression(var: !2794, expr: !DIExpression())
!2794 = distinct !DIGlobalVariable(name: "mesg", scope: !2795, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2795 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2747, retainedNodes: !4)
!2796 = !DIGlobalVariableExpression(var: !2797, expr: !DIExpression())
!2797 = distinct !DIGlobalVariable(name: "hoststr", scope: !2798, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2798 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2799, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2747, retainedNodes: !4)
!2799 = !DISubroutineType(types: !2800)
!2800 = !{null, !2723, !9}
!2801 = !DIGlobalVariableExpression(var: !2802, expr: !DIExpression())
!2802 = distinct !DIGlobalVariable(name: "hostlen", scope: !2798, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2803 = !DIGlobalVariableExpression(var: !2804, expr: !DIExpression())
!2804 = distinct !DIGlobalVariable(name: "now", scope: !2805, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2805 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2747, retainedNodes: !4)
!2806 = !DIGlobalVariableExpression(var: !2807, expr: !DIExpression())
!2807 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2805, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2808 = !DIGlobalVariableExpression(var: !2809, expr: !DIExpression())
!2809 = distinct !DIGlobalVariable(name: "buf", scope: !2810, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2810 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2811, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2747, retainedNodes: !4)
!2811 = !DISubroutineType(types: !2812)
!2812 = !{!49, !2723}
!2813 = !DIGlobalVariableExpression(var: !2814, expr: !DIExpression())
!2814 = distinct !DIGlobalVariable(name: "runlevline", scope: !2815, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2815 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2816, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2747, retainedNodes: !4)
!2816 = !DISubroutineType(types: !2817)
!2817 = !{null, !2723}
!2818 = !DIGlobalVariableExpression(var: !2819, expr: !DIExpression())
!2819 = distinct !DIGlobalVariable(name: "comment", scope: !2815, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2820 = !DIGlobalVariableExpression(var: !2821, expr: !DIExpression())
!2821 = distinct !DIGlobalVariable(name: "exitstr", scope: !2822, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2822 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2816, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2747, retainedNodes: !4)
!2823 = !DILocalVariable(name: "utmpsize", scope: !2720, file: !3, line: 450, type: !110)
!2824 = !DILocalVariable(name: "comment", scope: !2720, file: !3, line: 451, type: !6)
!2825 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !125, file: !3, line: 218, type: !67)
!2826 = !DILocation(line: 218, column: 33, scope: !125)
!2827 = !DILocalVariable(name: "t", scope: !125, file: !3, line: 228, type: !9)
!2828 = !DILocation(line: 228, column: 10, scope: !125)
!2829 = !DILocation(line: 228, column: 14, scope: !125)
!2830 = !DILocalVariable(name: "tmp", scope: !125, file: !3, line: 229, type: !2831)
!2831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2832, size: 64)
!2832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !2833, line: 7, size: 448, elements: !2834)
!2833 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h", directory: "")
!2834 = !{!2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845}
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !2832, file: !2833, line: 9, baseType: !53, size: 32)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !2832, file: !2833, line: 10, baseType: !53, size: 32, offset: 32)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !2832, file: !2833, line: 11, baseType: !53, size: 32, offset: 64)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !2832, file: !2833, line: 12, baseType: !53, size: 32, offset: 96)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !2832, file: !2833, line: 13, baseType: !53, size: 32, offset: 128)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !2832, file: !2833, line: 14, baseType: !53, size: 32, offset: 160)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !2832, file: !2833, line: 15, baseType: !53, size: 32, offset: 192)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !2832, file: !2833, line: 16, baseType: !53, size: 32, offset: 224)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !2832, file: !2833, line: 17, baseType: !53, size: 32, offset: 256)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "tm_gmtoff", scope: !2832, file: !2833, line: 20, baseType: !13, size: 64, offset: 320)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "tm_zone", scope: !2832, file: !2833, line: 21, baseType: !49, size: 64, offset: 384)
!2846 = !DILocation(line: 229, column: 14, scope: !125)
!2847 = !DILocation(line: 229, column: 20, scope: !125)
!2848 = !DILocation(line: 231, column: 7, scope: !2849)
!2849 = distinct !DILexicalBlock(scope: !125, file: !3, line: 231, column: 7)
!2850 = !DILocation(line: 231, column: 7, scope: !125)
!2851 = !DILocation(line: 233, column: 34, scope: !2852)
!2852 = distinct !DILexicalBlock(scope: !2849, file: !3, line: 232, column: 5)
!2853 = !DILocation(line: 233, column: 47, scope: !2852)
!2854 = !DILocation(line: 233, column: 7, scope: !2852)
!2855 = !DILocation(line: 234, column: 7, scope: !2852)
!2856 = !DILocation(line: 237, column: 23, scope: !2849)
!2857 = !DILocation(line: 237, column: 12, scope: !2849)
!2858 = !DILocation(line: 237, column: 5, scope: !2849)
!2859 = !DILocation(line: 238, column: 1, scope: !125)
!2860 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2861, file: !3, line: 218, type: !2864)
!2861 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2862, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2888, retainedNodes: !4)
!2862 = !DISubroutineType(types: !2863)
!2863 = !{!49, !2864}
!2864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2865, size: 64)
!2865 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2866)
!2866 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2867)
!2867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2868)
!2868 = !{!2869, !2870, !2871, !2872, !2873, !2874, !2875, !2880, !2881, !2886, !2887}
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2867, file: !72, line: 57, baseType: !14, size: 16)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2867, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2867, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2867, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2867, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2867, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2867, file: !72, line: 67, baseType: !2876, size: 32, offset: 2656)
!2876 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2877)
!2877 = !{!2878, !2879}
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2876, file: !72, line: 45, baseType: !14, size: 16)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2876, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2867, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2867, file: !72, line: 79, baseType: !2882, size: 64, offset: 2720)
!2882 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2867, file: !72, line: 75, size: 64, elements: !2883)
!2883 = !{!2884, !2885}
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2882, file: !72, line: 77, baseType: !96, size: 32)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2882, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2867, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2867, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2888 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2889, nameTableKind: None)
!2889 = !{!2890, !2892, !2894, !2896, !2898, !2900, !2902, !2904, !2906, !2908, !2910, !2912, !2914, !2916, !2918, !2920, !2922, !2924, !2934, !2937, !2942, !2944, !2947, !2949, !2951, !2956, !2958}
!2890 = !DIGlobalVariableExpression(var: !2891, expr: !DIExpression())
!2891 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2888, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2892 = !DIGlobalVariableExpression(var: !2893, expr: !DIExpression())
!2893 = distinct !DIGlobalVariable(name: "short_list", scope: !2888, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2894 = !DIGlobalVariableExpression(var: !2895, expr: !DIExpression())
!2895 = distinct !DIGlobalVariable(name: "short_output", scope: !2888, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2896 = !DIGlobalVariableExpression(var: !2897, expr: !DIExpression())
!2897 = distinct !DIGlobalVariable(name: "include_idle", scope: !2888, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2898 = !DIGlobalVariableExpression(var: !2899, expr: !DIExpression())
!2899 = distinct !DIGlobalVariable(name: "include_heading", scope: !2888, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2900 = !DIGlobalVariableExpression(var: !2901, expr: !DIExpression())
!2901 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2888, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2902 = !DIGlobalVariableExpression(var: !2903, expr: !DIExpression())
!2903 = distinct !DIGlobalVariable(name: "include_exit", scope: !2888, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2904 = !DIGlobalVariableExpression(var: !2905, expr: !DIExpression())
!2905 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2888, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2906 = !DIGlobalVariableExpression(var: !2907, expr: !DIExpression())
!2907 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2888, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2908 = !DIGlobalVariableExpression(var: !2909, expr: !DIExpression())
!2909 = distinct !DIGlobalVariable(name: "need_login", scope: !2888, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2910 = !DIGlobalVariableExpression(var: !2911, expr: !DIExpression())
!2911 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2888, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2912 = !DIGlobalVariableExpression(var: !2913, expr: !DIExpression())
!2913 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2888, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2914 = !DIGlobalVariableExpression(var: !2915, expr: !DIExpression())
!2915 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2888, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2916 = !DIGlobalVariableExpression(var: !2917, expr: !DIExpression())
!2917 = distinct !DIGlobalVariable(name: "need_users", scope: !2888, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2918 = !DIGlobalVariableExpression(var: !2919, expr: !DIExpression())
!2919 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2888, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2920 = !DIGlobalVariableExpression(var: !2921, expr: !DIExpression())
!2921 = distinct !DIGlobalVariable(name: "time_format", scope: !2888, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2922 = !DIGlobalVariableExpression(var: !2923, expr: !DIExpression())
!2923 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2888, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2924 = !DIGlobalVariableExpression(var: !2925, expr: !DIExpression())
!2925 = distinct !DIGlobalVariable(name: "longopts", scope: !2888, file: !3, line: 162, type: !2926, isLocal: true, isDefinition: true)
!2926 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2927, size: 4608, elements: !151)
!2927 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2928)
!2928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2929)
!2929 = !{!2930, !2931, !2932, !2933}
!2930 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2928, file: !144, line: 52, baseType: !49, size: 64)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2928, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2928, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2928, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2934 = !DIGlobalVariableExpression(var: !2935, expr: !DIExpression())
!2935 = distinct !DIGlobalVariable(name: "mesg", scope: !2936, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2936 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2888, retainedNodes: !4)
!2937 = !DIGlobalVariableExpression(var: !2938, expr: !DIExpression())
!2938 = distinct !DIGlobalVariable(name: "hoststr", scope: !2939, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2939 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2940, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2888, retainedNodes: !4)
!2940 = !DISubroutineType(types: !2941)
!2941 = !{null, !2864, !9}
!2942 = !DIGlobalVariableExpression(var: !2943, expr: !DIExpression())
!2943 = distinct !DIGlobalVariable(name: "hostlen", scope: !2939, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2944 = !DIGlobalVariableExpression(var: !2945, expr: !DIExpression())
!2945 = distinct !DIGlobalVariable(name: "now", scope: !2946, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2946 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2888, retainedNodes: !4)
!2947 = !DIGlobalVariableExpression(var: !2948, expr: !DIExpression())
!2948 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2946, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2949 = !DIGlobalVariableExpression(var: !2950, expr: !DIExpression())
!2950 = distinct !DIGlobalVariable(name: "buf", scope: !2861, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2951 = !DIGlobalVariableExpression(var: !2952, expr: !DIExpression())
!2952 = distinct !DIGlobalVariable(name: "runlevline", scope: !2953, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2953 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2954, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2888, retainedNodes: !4)
!2954 = !DISubroutineType(types: !2955)
!2955 = !{null, !2864}
!2956 = !DIGlobalVariableExpression(var: !2957, expr: !DIExpression())
!2957 = distinct !DIGlobalVariable(name: "comment", scope: !2953, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2958 = !DIGlobalVariableExpression(var: !2959, expr: !DIExpression())
!2959 = distinct !DIGlobalVariable(name: "exitstr", scope: !2960, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2960 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2954, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2888, retainedNodes: !4)
!2961 = !DILocalVariable(name: "t", scope: !2861, file: !3, line: 228, type: !9)
!2962 = !DILocalVariable(name: "tmp", scope: !2861, file: !3, line: 229, type: !2963)
!2963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2964, size: 64)
!2964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !2833, line: 7, size: 448, elements: !2965)
!2965 = !{!2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976}
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !2964, file: !2833, line: 9, baseType: !53, size: 32)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !2964, file: !2833, line: 10, baseType: !53, size: 32, offset: 32)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !2964, file: !2833, line: 11, baseType: !53, size: 32, offset: 64)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !2964, file: !2833, line: 12, baseType: !53, size: 32, offset: 96)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !2964, file: !2833, line: 13, baseType: !53, size: 32, offset: 128)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !2964, file: !2833, line: 14, baseType: !53, size: 32, offset: 160)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !2964, file: !2833, line: 15, baseType: !53, size: 32, offset: 192)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !2964, file: !2833, line: 16, baseType: !53, size: 32, offset: 224)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !2964, file: !2833, line: 17, baseType: !53, size: 32, offset: 256)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "tm_gmtoff", scope: !2964, file: !2833, line: 20, baseType: !13, size: 64, offset: 320)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "tm_zone", scope: !2964, file: !2833, line: 21, baseType: !49, size: 64, offset: 384)
!2977 = !DILocalVariable(name: "userlen", arg: 1, scope: !56, file: !3, line: 244, type: !53)
!2978 = !DILocation(line: 244, column: 17, scope: !56)
!2979 = !DILocalVariable(name: "user", arg: 2, scope: !56, file: !3, line: 244, type: !49)
!2980 = !DILocation(line: 244, column: 38, scope: !56)
!2981 = !DILocalVariable(name: "state", arg: 3, scope: !56, file: !3, line: 244, type: !50)
!2982 = !DILocation(line: 244, column: 55, scope: !56)
!2983 = !DILocalVariable(name: "linelen", arg: 4, scope: !56, file: !3, line: 245, type: !53)
!2984 = !DILocation(line: 245, column: 17, scope: !56)
!2985 = !DILocalVariable(name: "line", arg: 5, scope: !56, file: !3, line: 245, type: !49)
!2986 = !DILocation(line: 245, column: 38, scope: !56)
!2987 = !DILocalVariable(name: "time_str", arg: 6, scope: !56, file: !3, line: 246, type: !49)
!2988 = !DILocation(line: 246, column: 25, scope: !56)
!2989 = !DILocalVariable(name: "idle", arg: 7, scope: !56, file: !3, line: 246, type: !49)
!2990 = !DILocation(line: 246, column: 47, scope: !56)
!2991 = !DILocalVariable(name: "pid", arg: 8, scope: !56, file: !3, line: 246, type: !49)
!2992 = !DILocation(line: 246, column: 65, scope: !56)
!2993 = !DILocalVariable(name: "comment", arg: 9, scope: !56, file: !3, line: 247, type: !49)
!2994 = !DILocation(line: 247, column: 25, scope: !56)
!2995 = !DILocalVariable(name: "exitstr", arg: 10, scope: !56, file: !3, line: 247, type: !49)
!2996 = !DILocation(line: 247, column: 46, scope: !56)
!2997 = !DILocalVariable(name: "buf", scope: !56, file: !3, line: 250, type: !6)
!2998 = !DILocation(line: 250, column: 9, scope: !56)
!2999 = !DILocalVariable(name: "x_idle", scope: !56, file: !3, line: 251, type: !3000)
!3000 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !260)
!3001 = !DILocation(line: 251, column: 8, scope: !56)
!3002 = !DILocalVariable(name: "x_pid", scope: !56, file: !3, line: 252, type: !3003)
!3003 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 104, elements: !3004)
!3004 = !{!3005}
!3005 = !DISubrange(count: 13)
!3006 = !DILocation(line: 252, column: 8, scope: !56)
!3007 = !DILocalVariable(name: "x_exitstr", scope: !56, file: !3, line: 253, type: !6)
!3008 = !DILocation(line: 253, column: 9, scope: !56)
!3009 = !DILocalVariable(name: "err", scope: !56, file: !3, line: 254, type: !53)
!3010 = !DILocation(line: 254, column: 7, scope: !56)
!3011 = !DILocation(line: 256, column: 13, scope: !56)
!3012 = !DILocation(line: 256, column: 11, scope: !56)
!3013 = !DILocation(line: 258, column: 7, scope: !3014)
!3014 = distinct !DILexicalBlock(scope: !56, file: !3, line: 258, column: 7)
!3015 = !DILocation(line: 258, column: 20, scope: !3014)
!3016 = !DILocation(line: 258, column: 24, scope: !3014)
!3017 = !DILocation(line: 258, column: 37, scope: !3014)
!3018 = !DILocation(line: 258, column: 48, scope: !3014)
!3019 = !DILocation(line: 258, column: 40, scope: !3014)
!3020 = !DILocation(line: 258, column: 54, scope: !3014)
!3021 = !DILocation(line: 258, column: 7, scope: !56)
!3022 = !DILocation(line: 259, column: 14, scope: !3014)
!3023 = !DILocation(line: 259, column: 31, scope: !3014)
!3024 = !DILocation(line: 259, column: 5, scope: !3014)
!3025 = !DILocation(line: 261, column: 5, scope: !3014)
!3026 = !DILocation(line: 261, column: 13, scope: !3014)
!3027 = !DILocation(line: 263, column: 8, scope: !3028)
!3028 = distinct !DILexicalBlock(scope: !56, file: !3, line: 263, column: 7)
!3029 = !DILocation(line: 263, column: 21, scope: !3028)
!3030 = !DILocation(line: 263, column: 32, scope: !3028)
!3031 = !DILocation(line: 263, column: 24, scope: !3028)
!3032 = !DILocation(line: 263, column: 37, scope: !3028)
!3033 = !DILocation(line: 263, column: 7, scope: !56)
!3034 = !DILocation(line: 264, column: 14, scope: !3028)
!3035 = !DILocation(line: 264, column: 30, scope: !3028)
!3036 = !DILocation(line: 264, column: 5, scope: !3028)
!3037 = !DILocation(line: 266, column: 5, scope: !3028)
!3038 = !DILocation(line: 266, column: 12, scope: !3028)
!3039 = !DILocation(line: 268, column: 24, scope: !56)
!3040 = !DILocation(line: 268, column: 43, scope: !56)
!3041 = !DILocation(line: 268, column: 41, scope: !56)
!3042 = !DILocation(line: 268, column: 70, scope: !56)
!3043 = !DILocation(line: 268, column: 15, scope: !56)
!3044 = !DILocation(line: 268, column: 13, scope: !56)
!3045 = !DILocation(line: 269, column: 7, scope: !3046)
!3046 = distinct !DILexicalBlock(scope: !56, file: !3, line: 269, column: 7)
!3047 = !DILocation(line: 269, column: 7, scope: !56)
!3048 = !DILocation(line: 270, column: 14, scope: !3046)
!3049 = !DILocation(line: 270, column: 35, scope: !3046)
!3050 = !DILocation(line: 270, column: 5, scope: !3046)
!3051 = !DILocation(line: 272, column: 6, scope: !3046)
!3052 = !DILocation(line: 272, column: 16, scope: !3046)
!3053 = !DILocation(line: 284, column: 19, scope: !56)
!3054 = !DILocation(line: 284, column: 28, scope: !56)
!3055 = !DILocation(line: 284, column: 35, scope: !56)
!3056 = !DILocation(line: 285, column: 19, scope: !56)
!3057 = !DILocation(line: 286, column: 19, scope: !56)
!3058 = !DILocation(line: 286, column: 28, scope: !56)
!3059 = !DILocation(line: 287, column: 19, scope: !56)
!3060 = !DILocation(line: 288, column: 19, scope: !56)
!3061 = !DILocation(line: 289, column: 19, scope: !56)
!3062 = !DILocation(line: 290, column: 19, scope: !56)
!3063 = !DILocation(line: 295, column: 19, scope: !56)
!3064 = !DILocation(line: 296, column: 19, scope: !56)
!3065 = !DILocation(line: 274, column: 9, scope: !56)
!3066 = !DILocation(line: 274, column: 7, scope: !56)
!3067 = !DILocation(line: 298, column: 7, scope: !3068)
!3068 = distinct !DILexicalBlock(scope: !56, file: !3, line: 298, column: 7)
!3069 = !DILocation(line: 298, column: 11, scope: !3068)
!3070 = !DILocation(line: 299, column: 5, scope: !3068)
!3071 = !DILocalVariable(name: "p", scope: !3072, file: !3, line: 303, type: !6)
!3072 = distinct !DILexicalBlock(scope: !56, file: !3, line: 301, column: 3)
!3073 = !DILocation(line: 303, column: 11, scope: !3072)
!3074 = !DILocation(line: 303, column: 15, scope: !3072)
!3075 = !DILocation(line: 303, column: 29, scope: !3072)
!3076 = !DILocation(line: 303, column: 21, scope: !3072)
!3077 = !DILocation(line: 303, column: 19, scope: !3072)
!3078 = !DILocation(line: 304, column: 5, scope: !3072)
!3079 = !DILocation(line: 304, column: 13, scope: !3072)
!3080 = !DILocation(line: 304, column: 12, scope: !3072)
!3081 = !DILocation(line: 304, column: 17, scope: !3072)
!3082 = distinct !{!3082, !3078, !3083}
!3083 = !DILocation(line: 305, column: 18, scope: !3072)
!3084 = !DILocation(line: 306, column: 7, scope: !3072)
!3085 = !DILocation(line: 306, column: 9, scope: !3072)
!3086 = !DILocation(line: 306, column: 14, scope: !3072)
!3087 = !DILocation(line: 309, column: 9, scope: !56)
!3088 = !DILocation(line: 309, column: 3, scope: !56)
!3089 = !DILocation(line: 310, column: 9, scope: !56)
!3090 = !DILocation(line: 310, column: 3, scope: !56)
!3091 = !DILocation(line: 311, column: 9, scope: !56)
!3092 = !DILocation(line: 311, column: 3, scope: !56)
!3093 = !DILocation(line: 312, column: 1, scope: !56)
!3094 = !DILocalVariable(name: "userlen", arg: 1, scope: !3095, file: !3, line: 244, type: !53)
!3095 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3096, retainedNodes: !4)
!3096 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !3097, nameTableKind: None)
!3097 = !{!3098, !3100, !3102, !3104, !3106, !3108, !3110, !3112, !3114, !3116, !3118, !3120, !3122, !3124, !3126, !3128, !3130, !3132, !3142, !3144, !3173, !3175, !3178, !3180, !3185, !3190, !3192}
!3098 = !DIGlobalVariableExpression(var: !3099, expr: !DIExpression())
!3099 = distinct !DIGlobalVariable(name: "do_lookup", scope: !3096, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!3100 = !DIGlobalVariableExpression(var: !3101, expr: !DIExpression())
!3101 = distinct !DIGlobalVariable(name: "short_list", scope: !3096, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!3102 = !DIGlobalVariableExpression(var: !3103, expr: !DIExpression())
!3103 = distinct !DIGlobalVariable(name: "short_output", scope: !3096, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!3104 = !DIGlobalVariableExpression(var: !3105, expr: !DIExpression())
!3105 = distinct !DIGlobalVariable(name: "include_idle", scope: !3096, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!3106 = !DIGlobalVariableExpression(var: !3107, expr: !DIExpression())
!3107 = distinct !DIGlobalVariable(name: "include_heading", scope: !3096, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!3108 = !DIGlobalVariableExpression(var: !3109, expr: !DIExpression())
!3109 = distinct !DIGlobalVariable(name: "include_mesg", scope: !3096, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!3110 = !DIGlobalVariableExpression(var: !3111, expr: !DIExpression())
!3111 = distinct !DIGlobalVariable(name: "include_exit", scope: !3096, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!3112 = !DIGlobalVariableExpression(var: !3113, expr: !DIExpression())
!3113 = distinct !DIGlobalVariable(name: "need_boottime", scope: !3096, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!3114 = !DIGlobalVariableExpression(var: !3115, expr: !DIExpression())
!3115 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !3096, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!3116 = !DIGlobalVariableExpression(var: !3117, expr: !DIExpression())
!3117 = distinct !DIGlobalVariable(name: "need_login", scope: !3096, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!3118 = !DIGlobalVariableExpression(var: !3119, expr: !DIExpression())
!3119 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !3096, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!3120 = !DIGlobalVariableExpression(var: !3121, expr: !DIExpression())
!3121 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !3096, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!3122 = !DIGlobalVariableExpression(var: !3123, expr: !DIExpression())
!3123 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !3096, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!3124 = !DIGlobalVariableExpression(var: !3125, expr: !DIExpression())
!3125 = distinct !DIGlobalVariable(name: "need_users", scope: !3096, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!3126 = !DIGlobalVariableExpression(var: !3127, expr: !DIExpression())
!3127 = distinct !DIGlobalVariable(name: "my_line_only", scope: !3096, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!3128 = !DIGlobalVariableExpression(var: !3129, expr: !DIExpression())
!3129 = distinct !DIGlobalVariable(name: "time_format", scope: !3096, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!3130 = !DIGlobalVariableExpression(var: !3131, expr: !DIExpression())
!3131 = distinct !DIGlobalVariable(name: "time_format_width", scope: !3096, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!3132 = !DIGlobalVariableExpression(var: !3133, expr: !DIExpression())
!3133 = distinct !DIGlobalVariable(name: "longopts", scope: !3096, file: !3, line: 162, type: !3134, isLocal: true, isDefinition: true)
!3134 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3135, size: 4608, elements: !151)
!3135 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3136)
!3136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !3137)
!3137 = !{!3138, !3139, !3140, !3141}
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3136, file: !144, line: 52, baseType: !49, size: 64)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !3136, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !3136, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3136, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!3142 = !DIGlobalVariableExpression(var: !3143, expr: !DIExpression())
!3143 = distinct !DIGlobalVariable(name: "mesg", scope: !3095, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!3144 = !DIGlobalVariableExpression(var: !3145, expr: !DIExpression())
!3145 = distinct !DIGlobalVariable(name: "hoststr", scope: !3146, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!3146 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !3147, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3096, retainedNodes: !4)
!3147 = !DISubroutineType(types: !3148)
!3148 = !{null, !3149, !9}
!3149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3150, size: 64)
!3150 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3151)
!3151 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !3152)
!3152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !3153)
!3153 = !{!3154, !3155, !3156, !3157, !3158, !3159, !3160, !3165, !3166, !3171, !3172}
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !3152, file: !72, line: 57, baseType: !14, size: 16)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !3152, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !3152, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !3152, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !3152, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !3152, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !3152, file: !72, line: 67, baseType: !3161, size: 32, offset: 2656)
!3161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !3162)
!3162 = !{!3163, !3164}
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !3161, file: !72, line: 45, baseType: !14, size: 16)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !3161, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !3152, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !3152, file: !72, line: 79, baseType: !3167, size: 64, offset: 2720)
!3167 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3152, file: !72, line: 75, size: 64, elements: !3168)
!3168 = !{!3169, !3170}
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3167, file: !72, line: 77, baseType: !96, size: 32)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !3167, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !3152, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !3152, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!3173 = !DIGlobalVariableExpression(var: !3174, expr: !DIExpression())
!3174 = distinct !DIGlobalVariable(name: "hostlen", scope: !3146, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!3175 = !DIGlobalVariableExpression(var: !3176, expr: !DIExpression())
!3176 = distinct !DIGlobalVariable(name: "now", scope: !3177, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!3177 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3096, retainedNodes: !4)
!3178 = !DIGlobalVariableExpression(var: !3179, expr: !DIExpression())
!3179 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !3177, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!3180 = !DIGlobalVariableExpression(var: !3181, expr: !DIExpression())
!3181 = distinct !DIGlobalVariable(name: "buf", scope: !3182, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!3182 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !3183, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3096, retainedNodes: !4)
!3183 = !DISubroutineType(types: !3184)
!3184 = !{!49, !3149}
!3185 = !DIGlobalVariableExpression(var: !3186, expr: !DIExpression())
!3186 = distinct !DIGlobalVariable(name: "runlevline", scope: !3187, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!3187 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !3188, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3096, retainedNodes: !4)
!3188 = !DISubroutineType(types: !3189)
!3189 = !{null, !3149}
!3190 = !DIGlobalVariableExpression(var: !3191, expr: !DIExpression())
!3191 = distinct !DIGlobalVariable(name: "comment", scope: !3187, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!3192 = !DIGlobalVariableExpression(var: !3193, expr: !DIExpression())
!3193 = distinct !DIGlobalVariable(name: "exitstr", scope: !3194, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!3194 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !3188, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3096, retainedNodes: !4)
!3195 = !DILocalVariable(name: "user", arg: 2, scope: !3095, file: !3, line: 244, type: !49)
!3196 = !DILocalVariable(name: "state", arg: 3, scope: !3095, file: !3, line: 244, type: !50)
!3197 = !DILocalVariable(name: "linelen", arg: 4, scope: !3095, file: !3, line: 245, type: !53)
!3198 = !DILocalVariable(name: "line", arg: 5, scope: !3095, file: !3, line: 245, type: !49)
!3199 = !DILocalVariable(name: "time_str", arg: 6, scope: !3095, file: !3, line: 246, type: !49)
!3200 = !DILocalVariable(name: "idle", arg: 7, scope: !3095, file: !3, line: 246, type: !49)
!3201 = !DILocalVariable(name: "pid", arg: 8, scope: !3095, file: !3, line: 246, type: !49)
!3202 = !DILocalVariable(name: "comment", arg: 9, scope: !3095, file: !3, line: 247, type: !49)
!3203 = !DILocalVariable(name: "exitstr", arg: 10, scope: !3095, file: !3, line: 247, type: !49)
!3204 = !DILocalVariable(name: "buf", scope: !3095, file: !3, line: 250, type: !6)
!3205 = !DILocalVariable(name: "x_idle", scope: !3095, file: !3, line: 251, type: !3000)
!3206 = !DILocalVariable(name: "x_pid", scope: !3095, file: !3, line: 252, type: !3003)
!3207 = !DILocalVariable(name: "x_exitstr", scope: !3095, file: !3, line: 253, type: !6)
!3208 = !DILocalVariable(name: "err", scope: !3095, file: !3, line: 254, type: !53)
!3209 = distinct !DISubprogram(name: "timetostr", scope: !466, file: !466, line: 690, type: !3210, scopeLine: 691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!3210 = !DISubroutineType(types: !3211)
!3211 = !{!6, !9, !6}
!3212 = !DILocalVariable(name: "t", arg: 1, scope: !3209, file: !466, line: 690, type: !9)
!3213 = !DILocation(line: 690, column: 19, scope: !3209)
!3214 = !DILocalVariable(name: "buf", arg: 2, scope: !3209, file: !466, line: 690, type: !6)
!3215 = !DILocation(line: 690, column: 28, scope: !3209)
!3216 = !DILocation(line: 693, column: 24, scope: !3209)
!3217 = !DILocation(line: 693, column: 27, scope: !3209)
!3218 = !DILocation(line: 693, column: 13, scope: !3209)
!3219 = !DILocation(line: 692, column: 3, scope: !3209)
!3220 = !DILocalVariable(name: "t", arg: 1, scope: !3221, file: !466, line: 690, type: !9)
!3221 = distinct !DISubprogram(name: "timetostr", scope: !466, file: !466, line: 690, type: !3210, scopeLine: 691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3222, retainedNodes: !4)
!3222 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !3223, nameTableKind: None)
!3223 = !{!3224, !3226, !3228, !3230, !3232, !3234, !3236, !3238, !3240, !3242, !3244, !3246, !3248, !3250, !3252, !3254, !3256, !3258, !3268, !3271, !3300, !3302, !3305, !3307, !3312, !3317, !3319}
!3224 = !DIGlobalVariableExpression(var: !3225, expr: !DIExpression())
!3225 = distinct !DIGlobalVariable(name: "do_lookup", scope: !3222, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!3226 = !DIGlobalVariableExpression(var: !3227, expr: !DIExpression())
!3227 = distinct !DIGlobalVariable(name: "short_list", scope: !3222, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!3228 = !DIGlobalVariableExpression(var: !3229, expr: !DIExpression())
!3229 = distinct !DIGlobalVariable(name: "short_output", scope: !3222, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!3230 = !DIGlobalVariableExpression(var: !3231, expr: !DIExpression())
!3231 = distinct !DIGlobalVariable(name: "include_idle", scope: !3222, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!3232 = !DIGlobalVariableExpression(var: !3233, expr: !DIExpression())
!3233 = distinct !DIGlobalVariable(name: "include_heading", scope: !3222, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!3234 = !DIGlobalVariableExpression(var: !3235, expr: !DIExpression())
!3235 = distinct !DIGlobalVariable(name: "include_mesg", scope: !3222, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!3236 = !DIGlobalVariableExpression(var: !3237, expr: !DIExpression())
!3237 = distinct !DIGlobalVariable(name: "include_exit", scope: !3222, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!3238 = !DIGlobalVariableExpression(var: !3239, expr: !DIExpression())
!3239 = distinct !DIGlobalVariable(name: "need_boottime", scope: !3222, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!3240 = !DIGlobalVariableExpression(var: !3241, expr: !DIExpression())
!3241 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !3222, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!3242 = !DIGlobalVariableExpression(var: !3243, expr: !DIExpression())
!3243 = distinct !DIGlobalVariable(name: "need_login", scope: !3222, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!3244 = !DIGlobalVariableExpression(var: !3245, expr: !DIExpression())
!3245 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !3222, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!3246 = !DIGlobalVariableExpression(var: !3247, expr: !DIExpression())
!3247 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !3222, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!3248 = !DIGlobalVariableExpression(var: !3249, expr: !DIExpression())
!3249 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !3222, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!3250 = !DIGlobalVariableExpression(var: !3251, expr: !DIExpression())
!3251 = distinct !DIGlobalVariable(name: "need_users", scope: !3222, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!3252 = !DIGlobalVariableExpression(var: !3253, expr: !DIExpression())
!3253 = distinct !DIGlobalVariable(name: "my_line_only", scope: !3222, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!3254 = !DIGlobalVariableExpression(var: !3255, expr: !DIExpression())
!3255 = distinct !DIGlobalVariable(name: "time_format", scope: !3222, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!3256 = !DIGlobalVariableExpression(var: !3257, expr: !DIExpression())
!3257 = distinct !DIGlobalVariable(name: "time_format_width", scope: !3222, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!3258 = !DIGlobalVariableExpression(var: !3259, expr: !DIExpression())
!3259 = distinct !DIGlobalVariable(name: "longopts", scope: !3222, file: !3, line: 162, type: !3260, isLocal: true, isDefinition: true)
!3260 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3261, size: 4608, elements: !151)
!3261 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3262)
!3262 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !3263)
!3263 = !{!3264, !3265, !3266, !3267}
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3262, file: !144, line: 52, baseType: !49, size: 64)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !3262, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !3262, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3262, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!3268 = !DIGlobalVariableExpression(var: !3269, expr: !DIExpression())
!3269 = distinct !DIGlobalVariable(name: "mesg", scope: !3270, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!3270 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3222, retainedNodes: !4)
!3271 = !DIGlobalVariableExpression(var: !3272, expr: !DIExpression())
!3272 = distinct !DIGlobalVariable(name: "hoststr", scope: !3273, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!3273 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !3274, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3222, retainedNodes: !4)
!3274 = !DISubroutineType(types: !3275)
!3275 = !{null, !3276, !9}
!3276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3277, size: 64)
!3277 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3278)
!3278 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !3279)
!3279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !3280)
!3280 = !{!3281, !3282, !3283, !3284, !3285, !3286, !3287, !3292, !3293, !3298, !3299}
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !3279, file: !72, line: 57, baseType: !14, size: 16)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !3279, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !3279, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !3279, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !3279, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !3279, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !3279, file: !72, line: 67, baseType: !3288, size: 32, offset: 2656)
!3288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !3289)
!3289 = !{!3290, !3291}
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !3288, file: !72, line: 45, baseType: !14, size: 16)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !3288, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !3279, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !3279, file: !72, line: 79, baseType: !3294, size: 64, offset: 2720)
!3294 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3279, file: !72, line: 75, size: 64, elements: !3295)
!3295 = !{!3296, !3297}
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3294, file: !72, line: 77, baseType: !96, size: 32)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !3294, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !3279, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !3279, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!3300 = !DIGlobalVariableExpression(var: !3301, expr: !DIExpression())
!3301 = distinct !DIGlobalVariable(name: "hostlen", scope: !3273, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!3302 = !DIGlobalVariableExpression(var: !3303, expr: !DIExpression())
!3303 = distinct !DIGlobalVariable(name: "now", scope: !3304, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!3304 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3222, retainedNodes: !4)
!3305 = !DIGlobalVariableExpression(var: !3306, expr: !DIExpression())
!3306 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !3304, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!3307 = !DIGlobalVariableExpression(var: !3308, expr: !DIExpression())
!3308 = distinct !DIGlobalVariable(name: "buf", scope: !3309, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!3309 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !3310, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3222, retainedNodes: !4)
!3310 = !DISubroutineType(types: !3311)
!3311 = !{!49, !3276}
!3312 = !DIGlobalVariableExpression(var: !3313, expr: !DIExpression())
!3313 = distinct !DIGlobalVariable(name: "runlevline", scope: !3314, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!3314 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !3315, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3222, retainedNodes: !4)
!3315 = !DISubroutineType(types: !3316)
!3316 = !{null, !3276}
!3317 = !DIGlobalVariableExpression(var: !3318, expr: !DIExpression())
!3318 = distinct !DIGlobalVariable(name: "comment", scope: !3314, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!3319 = !DIGlobalVariableExpression(var: !3320, expr: !DIExpression())
!3320 = distinct !DIGlobalVariable(name: "exitstr", scope: !3321, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!3321 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !3315, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3222, retainedNodes: !4)
!3322 = !DILocalVariable(name: "buf", arg: 2, scope: !3221, file: !466, line: 690, type: !6)
!3323 = distinct !DISubprogram(name: "stzncpy", scope: !466, file: !466, line: 741, type: !3324, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!3324 = !DISubroutineType(types: !3325)
!3325 = !{!6, !3326, !3327, !110}
!3326 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !6)
!3327 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !49)
!3328 = !DILocalVariable(name: "dest", arg: 1, scope: !3323, file: !466, line: 741, type: !3326)
!3329 = !DILocation(line: 741, column: 25, scope: !3323)
!3330 = !DILocalVariable(name: "src", arg: 2, scope: !3323, file: !466, line: 741, type: !3327)
!3331 = !DILocation(line: 741, column: 52, scope: !3323)
!3332 = !DILocalVariable(name: "len", arg: 3, scope: !3323, file: !466, line: 741, type: !110)
!3333 = !DILocation(line: 741, column: 64, scope: !3323)
!3334 = !DILocalVariable(name: "src_end", scope: !3323, file: !466, line: 743, type: !49)
!3335 = !DILocation(line: 743, column: 15, scope: !3323)
!3336 = !DILocation(line: 743, column: 25, scope: !3323)
!3337 = !DILocation(line: 743, column: 31, scope: !3323)
!3338 = !DILocation(line: 743, column: 29, scope: !3323)
!3339 = !DILocation(line: 744, column: 3, scope: !3323)
!3340 = !DILocation(line: 744, column: 10, scope: !3323)
!3341 = !DILocation(line: 744, column: 16, scope: !3323)
!3342 = !DILocation(line: 744, column: 14, scope: !3323)
!3343 = !DILocation(line: 744, column: 24, scope: !3323)
!3344 = !DILocation(line: 744, column: 28, scope: !3323)
!3345 = !DILocation(line: 744, column: 27, scope: !3323)
!3346 = !DILocation(line: 0, scope: !3323)
!3347 = !DILocation(line: 745, column: 19, scope: !3323)
!3348 = !DILocation(line: 745, column: 15, scope: !3323)
!3349 = !DILocation(line: 745, column: 10, scope: !3323)
!3350 = !DILocation(line: 745, column: 13, scope: !3323)
!3351 = distinct !{!3351, !3339, !3347}
!3352 = !DILocation(line: 746, column: 4, scope: !3323)
!3353 = !DILocation(line: 746, column: 9, scope: !3323)
!3354 = !DILocation(line: 747, column: 10, scope: !3323)
!3355 = !DILocation(line: 747, column: 3, scope: !3323)
!3356 = !DILocalVariable(name: "dest", arg: 1, scope: !3357, file: !466, line: 741, type: !3326)
!3357 = distinct !DISubprogram(name: "stzncpy", scope: !466, file: !466, line: 741, type: !3324, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3358, retainedNodes: !4)
!3358 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !3359, nameTableKind: None)
!3359 = !{!3360, !3362, !3364, !3366, !3368, !3370, !3372, !3374, !3376, !3378, !3380, !3382, !3384, !3386, !3388, !3390, !3392, !3394, !3404, !3407, !3436, !3438, !3441, !3443, !3448, !3453, !3455}
!3360 = !DIGlobalVariableExpression(var: !3361, expr: !DIExpression())
!3361 = distinct !DIGlobalVariable(name: "do_lookup", scope: !3358, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!3362 = !DIGlobalVariableExpression(var: !3363, expr: !DIExpression())
!3363 = distinct !DIGlobalVariable(name: "short_list", scope: !3358, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!3364 = !DIGlobalVariableExpression(var: !3365, expr: !DIExpression())
!3365 = distinct !DIGlobalVariable(name: "short_output", scope: !3358, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!3366 = !DIGlobalVariableExpression(var: !3367, expr: !DIExpression())
!3367 = distinct !DIGlobalVariable(name: "include_idle", scope: !3358, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!3368 = !DIGlobalVariableExpression(var: !3369, expr: !DIExpression())
!3369 = distinct !DIGlobalVariable(name: "include_heading", scope: !3358, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!3370 = !DIGlobalVariableExpression(var: !3371, expr: !DIExpression())
!3371 = distinct !DIGlobalVariable(name: "include_mesg", scope: !3358, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!3372 = !DIGlobalVariableExpression(var: !3373, expr: !DIExpression())
!3373 = distinct !DIGlobalVariable(name: "include_exit", scope: !3358, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!3374 = !DIGlobalVariableExpression(var: !3375, expr: !DIExpression())
!3375 = distinct !DIGlobalVariable(name: "need_boottime", scope: !3358, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!3376 = !DIGlobalVariableExpression(var: !3377, expr: !DIExpression())
!3377 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !3358, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!3378 = !DIGlobalVariableExpression(var: !3379, expr: !DIExpression())
!3379 = distinct !DIGlobalVariable(name: "need_login", scope: !3358, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!3380 = !DIGlobalVariableExpression(var: !3381, expr: !DIExpression())
!3381 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !3358, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!3382 = !DIGlobalVariableExpression(var: !3383, expr: !DIExpression())
!3383 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !3358, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!3384 = !DIGlobalVariableExpression(var: !3385, expr: !DIExpression())
!3385 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !3358, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!3386 = !DIGlobalVariableExpression(var: !3387, expr: !DIExpression())
!3387 = distinct !DIGlobalVariable(name: "need_users", scope: !3358, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!3388 = !DIGlobalVariableExpression(var: !3389, expr: !DIExpression())
!3389 = distinct !DIGlobalVariable(name: "my_line_only", scope: !3358, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!3390 = !DIGlobalVariableExpression(var: !3391, expr: !DIExpression())
!3391 = distinct !DIGlobalVariable(name: "time_format", scope: !3358, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!3392 = !DIGlobalVariableExpression(var: !3393, expr: !DIExpression())
!3393 = distinct !DIGlobalVariable(name: "time_format_width", scope: !3358, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!3394 = !DIGlobalVariableExpression(var: !3395, expr: !DIExpression())
!3395 = distinct !DIGlobalVariable(name: "longopts", scope: !3358, file: !3, line: 162, type: !3396, isLocal: true, isDefinition: true)
!3396 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3397, size: 4608, elements: !151)
!3397 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3398)
!3398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !3399)
!3399 = !{!3400, !3401, !3402, !3403}
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3398, file: !144, line: 52, baseType: !49, size: 64)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !3398, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !3398, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3398, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!3404 = !DIGlobalVariableExpression(var: !3405, expr: !DIExpression())
!3405 = distinct !DIGlobalVariable(name: "mesg", scope: !3406, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!3406 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3358, retainedNodes: !4)
!3407 = !DIGlobalVariableExpression(var: !3408, expr: !DIExpression())
!3408 = distinct !DIGlobalVariable(name: "hoststr", scope: !3409, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!3409 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !3410, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3358, retainedNodes: !4)
!3410 = !DISubroutineType(types: !3411)
!3411 = !{null, !3412, !9}
!3412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3413, size: 64)
!3413 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3414)
!3414 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !3415)
!3415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !3416)
!3416 = !{!3417, !3418, !3419, !3420, !3421, !3422, !3423, !3428, !3429, !3434, !3435}
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !3415, file: !72, line: 57, baseType: !14, size: 16)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !3415, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !3415, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !3415, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !3415, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !3415, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !3415, file: !72, line: 67, baseType: !3424, size: 32, offset: 2656)
!3424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !3425)
!3425 = !{!3426, !3427}
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !3424, file: !72, line: 45, baseType: !14, size: 16)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !3424, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !3415, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !3415, file: !72, line: 79, baseType: !3430, size: 64, offset: 2720)
!3430 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3415, file: !72, line: 75, size: 64, elements: !3431)
!3431 = !{!3432, !3433}
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3430, file: !72, line: 77, baseType: !96, size: 32)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !3430, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !3415, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !3415, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!3436 = !DIGlobalVariableExpression(var: !3437, expr: !DIExpression())
!3437 = distinct !DIGlobalVariable(name: "hostlen", scope: !3409, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!3438 = !DIGlobalVariableExpression(var: !3439, expr: !DIExpression())
!3439 = distinct !DIGlobalVariable(name: "now", scope: !3440, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!3440 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3358, retainedNodes: !4)
!3441 = !DIGlobalVariableExpression(var: !3442, expr: !DIExpression())
!3442 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !3440, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!3443 = !DIGlobalVariableExpression(var: !3444, expr: !DIExpression())
!3444 = distinct !DIGlobalVariable(name: "buf", scope: !3445, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!3445 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !3446, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3358, retainedNodes: !4)
!3446 = !DISubroutineType(types: !3447)
!3447 = !{!49, !3412}
!3448 = !DIGlobalVariableExpression(var: !3449, expr: !DIExpression())
!3449 = distinct !DIGlobalVariable(name: "runlevline", scope: !3450, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!3450 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !3451, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3358, retainedNodes: !4)
!3451 = !DISubroutineType(types: !3452)
!3452 = !{null, !3412}
!3453 = !DIGlobalVariableExpression(var: !3454, expr: !DIExpression())
!3454 = distinct !DIGlobalVariable(name: "comment", scope: !3450, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!3455 = !DIGlobalVariableExpression(var: !3456, expr: !DIExpression())
!3456 = distinct !DIGlobalVariable(name: "exitstr", scope: !3457, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!3457 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !3451, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3358, retainedNodes: !4)
!3458 = !DILocalVariable(name: "src", arg: 2, scope: !3357, file: !466, line: 741, type: !3327)
!3459 = !DILocalVariable(name: "len", arg: 3, scope: !3357, file: !466, line: 741, type: !110)
!3460 = !DILocalVariable(name: "src_end", scope: !3357, file: !466, line: 743, type: !49)
!3461 = distinct !DISubprogram(name: "is_tty_writable", scope: !3, file: !3, line: 317, type: !3462, scopeLine: 318, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!3462 = !DISubroutineType(types: !3463)
!3463 = !{!18, !3464}
!3464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3465, size: 64)
!3465 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1479)
!3466 = !DILocalVariable(name: "pstat", arg: 1, scope: !3461, file: !3, line: 317, type: !3464)
!3467 = !DILocation(line: 317, column: 37, scope: !3461)
!3468 = !DILocation(line: 327, column: 10, scope: !3461)
!3469 = !DILocation(line: 327, column: 17, scope: !3461)
!3470 = !DILocation(line: 327, column: 25, scope: !3461)
!3471 = !DILocation(line: 327, column: 3, scope: !3461)
!3472 = !DILocalVariable(name: "pstat", arg: 1, scope: !3473, file: !3, line: 317, type: !3476)
!3473 = distinct !DISubprogram(name: "is_tty_writable", scope: !3, file: !3, line: 317, type: !3474, scopeLine: 318, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3499, retainedNodes: !4)
!3474 = !DISubroutineType(types: !3475)
!3475 = !{!18, !3476}
!3476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3477, size: 64)
!3477 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3478)
!3478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !1480, line: 46, size: 1152, elements: !3479)
!3479 = !{!3480, !3481, !3482, !3483, !3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491, !3496, !3497, !3498}
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !3478, file: !1480, line: 48, baseType: !1483, size: 64)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !3478, file: !1480, line: 53, baseType: !1485, size: 64, offset: 64)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !3478, file: !1480, line: 61, baseType: !1487, size: 64, offset: 128)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !3478, file: !1480, line: 62, baseType: !1489, size: 32, offset: 192)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !3478, file: !1480, line: 64, baseType: !1491, size: 32, offset: 224)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !3478, file: !1480, line: 65, baseType: !1493, size: 32, offset: 256)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !3478, file: !1480, line: 67, baseType: !53, size: 32, offset: 288)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !3478, file: !1480, line: 69, baseType: !1483, size: 64, offset: 320)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !3478, file: !1480, line: 74, baseType: !1497, size: 64, offset: 384)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !3478, file: !1480, line: 78, baseType: !1499, size: 64, offset: 448)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !3478, file: !1480, line: 80, baseType: !1501, size: 64, offset: 512)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !3478, file: !1480, line: 91, baseType: !3492, size: 128, offset: 576)
!3492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !1504, line: 10, size: 128, elements: !3493)
!3493 = !{!3494, !3495}
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3492, file: !1504, line: 12, baseType: !11, size: 64)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !3492, file: !1504, line: 16, baseType: !1508, size: 64, offset: 64)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !3478, file: !1480, line: 92, baseType: !3492, size: 128, offset: 704)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !3478, file: !1480, line: 93, baseType: !3492, size: 128, offset: 832)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !3478, file: !1480, line: 106, baseType: !1512, size: 192, offset: 960)
!3499 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !3500, nameTableKind: None)
!3500 = !{!3501, !3503, !3505, !3507, !3509, !3511, !3513, !3515, !3517, !3519, !3521, !3523, !3525, !3527, !3529, !3531, !3533, !3535, !3545, !3548, !3577, !3579, !3582, !3584, !3589, !3594, !3596}
!3501 = !DIGlobalVariableExpression(var: !3502, expr: !DIExpression())
!3502 = distinct !DIGlobalVariable(name: "do_lookup", scope: !3499, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!3503 = !DIGlobalVariableExpression(var: !3504, expr: !DIExpression())
!3504 = distinct !DIGlobalVariable(name: "short_list", scope: !3499, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!3505 = !DIGlobalVariableExpression(var: !3506, expr: !DIExpression())
!3506 = distinct !DIGlobalVariable(name: "short_output", scope: !3499, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!3507 = !DIGlobalVariableExpression(var: !3508, expr: !DIExpression())
!3508 = distinct !DIGlobalVariable(name: "include_idle", scope: !3499, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!3509 = !DIGlobalVariableExpression(var: !3510, expr: !DIExpression())
!3510 = distinct !DIGlobalVariable(name: "include_heading", scope: !3499, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!3511 = !DIGlobalVariableExpression(var: !3512, expr: !DIExpression())
!3512 = distinct !DIGlobalVariable(name: "include_mesg", scope: !3499, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!3513 = !DIGlobalVariableExpression(var: !3514, expr: !DIExpression())
!3514 = distinct !DIGlobalVariable(name: "include_exit", scope: !3499, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!3515 = !DIGlobalVariableExpression(var: !3516, expr: !DIExpression())
!3516 = distinct !DIGlobalVariable(name: "need_boottime", scope: !3499, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!3517 = !DIGlobalVariableExpression(var: !3518, expr: !DIExpression())
!3518 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !3499, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!3519 = !DIGlobalVariableExpression(var: !3520, expr: !DIExpression())
!3520 = distinct !DIGlobalVariable(name: "need_login", scope: !3499, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!3521 = !DIGlobalVariableExpression(var: !3522, expr: !DIExpression())
!3522 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !3499, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!3523 = !DIGlobalVariableExpression(var: !3524, expr: !DIExpression())
!3524 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !3499, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!3525 = !DIGlobalVariableExpression(var: !3526, expr: !DIExpression())
!3526 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !3499, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!3527 = !DIGlobalVariableExpression(var: !3528, expr: !DIExpression())
!3528 = distinct !DIGlobalVariable(name: "need_users", scope: !3499, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!3529 = !DIGlobalVariableExpression(var: !3530, expr: !DIExpression())
!3530 = distinct !DIGlobalVariable(name: "my_line_only", scope: !3499, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!3531 = !DIGlobalVariableExpression(var: !3532, expr: !DIExpression())
!3532 = distinct !DIGlobalVariable(name: "time_format", scope: !3499, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!3533 = !DIGlobalVariableExpression(var: !3534, expr: !DIExpression())
!3534 = distinct !DIGlobalVariable(name: "time_format_width", scope: !3499, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!3535 = !DIGlobalVariableExpression(var: !3536, expr: !DIExpression())
!3536 = distinct !DIGlobalVariable(name: "longopts", scope: !3499, file: !3, line: 162, type: !3537, isLocal: true, isDefinition: true)
!3537 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3538, size: 4608, elements: !151)
!3538 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3539)
!3539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !3540)
!3540 = !{!3541, !3542, !3543, !3544}
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3539, file: !144, line: 52, baseType: !49, size: 64)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !3539, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !3539, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3539, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!3545 = !DIGlobalVariableExpression(var: !3546, expr: !DIExpression())
!3546 = distinct !DIGlobalVariable(name: "mesg", scope: !3547, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!3547 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3499, retainedNodes: !4)
!3548 = !DIGlobalVariableExpression(var: !3549, expr: !DIExpression())
!3549 = distinct !DIGlobalVariable(name: "hoststr", scope: !3550, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!3550 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !3551, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3499, retainedNodes: !4)
!3551 = !DISubroutineType(types: !3552)
!3552 = !{null, !3553, !9}
!3553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3554, size: 64)
!3554 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3555)
!3555 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !3556)
!3556 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !3557)
!3557 = !{!3558, !3559, !3560, !3561, !3562, !3563, !3564, !3569, !3570, !3575, !3576}
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !3556, file: !72, line: 57, baseType: !14, size: 16)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !3556, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !3556, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!3561 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !3556, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!3562 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !3556, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !3556, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !3556, file: !72, line: 67, baseType: !3565, size: 32, offset: 2656)
!3565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !3566)
!3566 = !{!3567, !3568}
!3567 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !3565, file: !72, line: 45, baseType: !14, size: 16)
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !3565, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!3569 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !3556, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !3556, file: !72, line: 79, baseType: !3571, size: 64, offset: 2720)
!3571 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3556, file: !72, line: 75, size: 64, elements: !3572)
!3572 = !{!3573, !3574}
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3571, file: !72, line: 77, baseType: !96, size: 32)
!3574 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !3571, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !3556, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !3556, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!3577 = !DIGlobalVariableExpression(var: !3578, expr: !DIExpression())
!3578 = distinct !DIGlobalVariable(name: "hostlen", scope: !3550, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!3579 = !DIGlobalVariableExpression(var: !3580, expr: !DIExpression())
!3580 = distinct !DIGlobalVariable(name: "now", scope: !3581, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!3581 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3499, retainedNodes: !4)
!3582 = !DIGlobalVariableExpression(var: !3583, expr: !DIExpression())
!3583 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !3581, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!3584 = !DIGlobalVariableExpression(var: !3585, expr: !DIExpression())
!3585 = distinct !DIGlobalVariable(name: "buf", scope: !3586, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!3586 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !3587, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3499, retainedNodes: !4)
!3587 = !DISubroutineType(types: !3588)
!3588 = !{!49, !3553}
!3589 = !DIGlobalVariableExpression(var: !3590, expr: !DIExpression())
!3590 = distinct !DIGlobalVariable(name: "runlevline", scope: !3591, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!3591 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !3592, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3499, retainedNodes: !4)
!3592 = !DISubroutineType(types: !3593)
!3593 = !{null, !3553}
!3594 = !DIGlobalVariableExpression(var: !3595, expr: !DIExpression())
!3595 = distinct !DIGlobalVariable(name: "comment", scope: !3591, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!3596 = !DIGlobalVariableExpression(var: !3597, expr: !DIExpression())
!3597 = distinct !DIGlobalVariable(name: "exitstr", scope: !3598, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!3598 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !3592, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3499, retainedNodes: !4)
!3599 = !DILocalVariable(name: "when", arg: 1, scope: !115, file: !3, line: 188, type: !9)
!3600 = !DILocation(line: 188, column: 21, scope: !115)
!3601 = !DILocalVariable(name: "boottime", arg: 2, scope: !115, file: !3, line: 188, type: !9)
!3602 = !DILocation(line: 188, column: 34, scope: !115)
!3603 = !DILocation(line: 192, column: 7, scope: !3604)
!3604 = distinct !DILexicalBlock(scope: !115, file: !3, line: 192, column: 7)
!3605 = !DILocation(line: 192, column: 11, scope: !3604)
!3606 = !DILocation(line: 192, column: 7, scope: !115)
!3607 = !DILocation(line: 193, column: 5, scope: !3604)
!3608 = !DILocation(line: 195, column: 7, scope: !3609)
!3609 = distinct !DILexicalBlock(scope: !115, file: !3, line: 195, column: 7)
!3610 = !DILocation(line: 195, column: 18, scope: !3609)
!3611 = !DILocation(line: 195, column: 16, scope: !3609)
!3612 = !DILocation(line: 195, column: 23, scope: !3609)
!3613 = !DILocation(line: 195, column: 26, scope: !3609)
!3614 = !DILocation(line: 195, column: 30, scope: !3609)
!3615 = !DILocation(line: 195, column: 47, scope: !3609)
!3616 = !DILocation(line: 195, column: 45, scope: !3609)
!3617 = !DILocation(line: 195, column: 52, scope: !3609)
!3618 = !DILocation(line: 195, column: 55, scope: !3609)
!3619 = !DILocation(line: 195, column: 63, scope: !3609)
!3620 = !DILocation(line: 195, column: 60, scope: !3609)
!3621 = !DILocation(line: 195, column: 7, scope: !115)
!3622 = !DILocalVariable(name: "seconds_idle", scope: !3623, file: !3, line: 197, type: !53)
!3623 = distinct !DILexicalBlock(scope: !3609, file: !3, line: 196, column: 5)
!3624 = !DILocation(line: 197, column: 11, scope: !3623)
!3625 = !DILocation(line: 197, column: 26, scope: !3623)
!3626 = !DILocation(line: 197, column: 32, scope: !3623)
!3627 = !DILocation(line: 197, column: 30, scope: !3623)
!3628 = !DILocation(line: 198, column: 11, scope: !3629)
!3629 = distinct !DILexicalBlock(scope: !3623, file: !3, line: 198, column: 11)
!3630 = !DILocation(line: 198, column: 24, scope: !3629)
!3631 = !DILocation(line: 198, column: 11, scope: !3623)
!3632 = !DILocation(line: 199, column: 9, scope: !3629)
!3633 = !DILocation(line: 205, column: 11, scope: !3634)
!3634 = distinct !DILexicalBlock(scope: !3635, file: !3, line: 205, column: 11)
!3635 = distinct !DILexicalBlock(scope: !3636, file: !3, line: 205, column: 11)
!3636 = distinct !DILexicalBlock(scope: !3629, file: !3, line: 201, column: 9)
!3637 = !DILocation(line: 205, column: 11, scope: !3635)
!3638 = !DILocation(line: 207, column: 20, scope: !3636)
!3639 = !DILocation(line: 207, column: 33, scope: !3636)
!3640 = !DILocation(line: 208, column: 21, scope: !3636)
!3641 = !DILocation(line: 208, column: 34, scope: !3636)
!3642 = !DILocation(line: 208, column: 47, scope: !3636)
!3643 = !DILocation(line: 206, column: 11, scope: !3636)
!3644 = !DILocation(line: 209, column: 11, scope: !3636)
!3645 = !DILocation(line: 213, column: 10, scope: !115)
!3646 = !DILocation(line: 213, column: 3, scope: !115)
!3647 = !DILocation(line: 214, column: 1, scope: !115)
!3648 = !DILocalVariable(name: "when", arg: 1, scope: !3649, file: !3, line: 188, type: !9)
!3649 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3650, retainedNodes: !4)
!3650 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !3651, nameTableKind: None)
!3651 = !{!3652, !3654, !3656, !3658, !3660, !3662, !3664, !3666, !3668, !3670, !3672, !3674, !3676, !3678, !3680, !3682, !3684, !3686, !3696, !3699, !3728, !3730, !3732, !3734, !3739, !3744, !3746}
!3652 = !DIGlobalVariableExpression(var: !3653, expr: !DIExpression())
!3653 = distinct !DIGlobalVariable(name: "do_lookup", scope: !3650, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!3654 = !DIGlobalVariableExpression(var: !3655, expr: !DIExpression())
!3655 = distinct !DIGlobalVariable(name: "short_list", scope: !3650, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!3656 = !DIGlobalVariableExpression(var: !3657, expr: !DIExpression())
!3657 = distinct !DIGlobalVariable(name: "short_output", scope: !3650, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!3658 = !DIGlobalVariableExpression(var: !3659, expr: !DIExpression())
!3659 = distinct !DIGlobalVariable(name: "include_idle", scope: !3650, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!3660 = !DIGlobalVariableExpression(var: !3661, expr: !DIExpression())
!3661 = distinct !DIGlobalVariable(name: "include_heading", scope: !3650, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!3662 = !DIGlobalVariableExpression(var: !3663, expr: !DIExpression())
!3663 = distinct !DIGlobalVariable(name: "include_mesg", scope: !3650, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!3664 = !DIGlobalVariableExpression(var: !3665, expr: !DIExpression())
!3665 = distinct !DIGlobalVariable(name: "include_exit", scope: !3650, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!3666 = !DIGlobalVariableExpression(var: !3667, expr: !DIExpression())
!3667 = distinct !DIGlobalVariable(name: "need_boottime", scope: !3650, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!3668 = !DIGlobalVariableExpression(var: !3669, expr: !DIExpression())
!3669 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !3650, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!3670 = !DIGlobalVariableExpression(var: !3671, expr: !DIExpression())
!3671 = distinct !DIGlobalVariable(name: "need_login", scope: !3650, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!3672 = !DIGlobalVariableExpression(var: !3673, expr: !DIExpression())
!3673 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !3650, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!3674 = !DIGlobalVariableExpression(var: !3675, expr: !DIExpression())
!3675 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !3650, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!3676 = !DIGlobalVariableExpression(var: !3677, expr: !DIExpression())
!3677 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !3650, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!3678 = !DIGlobalVariableExpression(var: !3679, expr: !DIExpression())
!3679 = distinct !DIGlobalVariable(name: "need_users", scope: !3650, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!3680 = !DIGlobalVariableExpression(var: !3681, expr: !DIExpression())
!3681 = distinct !DIGlobalVariable(name: "my_line_only", scope: !3650, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!3682 = !DIGlobalVariableExpression(var: !3683, expr: !DIExpression())
!3683 = distinct !DIGlobalVariable(name: "time_format", scope: !3650, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!3684 = !DIGlobalVariableExpression(var: !3685, expr: !DIExpression())
!3685 = distinct !DIGlobalVariable(name: "time_format_width", scope: !3650, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!3686 = !DIGlobalVariableExpression(var: !3687, expr: !DIExpression())
!3687 = distinct !DIGlobalVariable(name: "longopts", scope: !3650, file: !3, line: 162, type: !3688, isLocal: true, isDefinition: true)
!3688 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3689, size: 4608, elements: !151)
!3689 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3690)
!3690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !3691)
!3691 = !{!3692, !3693, !3694, !3695}
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3690, file: !144, line: 52, baseType: !49, size: 64)
!3693 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !3690, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!3694 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !3690, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!3695 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3690, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!3696 = !DIGlobalVariableExpression(var: !3697, expr: !DIExpression())
!3697 = distinct !DIGlobalVariable(name: "mesg", scope: !3698, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!3698 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3650, retainedNodes: !4)
!3699 = !DIGlobalVariableExpression(var: !3700, expr: !DIExpression())
!3700 = distinct !DIGlobalVariable(name: "hoststr", scope: !3701, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!3701 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !3702, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3650, retainedNodes: !4)
!3702 = !DISubroutineType(types: !3703)
!3703 = !{null, !3704, !9}
!3704 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3705, size: 64)
!3705 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3706)
!3706 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !3707)
!3707 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !3708)
!3708 = !{!3709, !3710, !3711, !3712, !3713, !3714, !3715, !3720, !3721, !3726, !3727}
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !3707, file: !72, line: 57, baseType: !14, size: 16)
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !3707, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !3707, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !3707, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!3713 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !3707, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !3707, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !3707, file: !72, line: 67, baseType: !3716, size: 32, offset: 2656)
!3716 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !3717)
!3717 = !{!3718, !3719}
!3718 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !3716, file: !72, line: 45, baseType: !14, size: 16)
!3719 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !3716, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !3707, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !3707, file: !72, line: 79, baseType: !3722, size: 64, offset: 2720)
!3722 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3707, file: !72, line: 75, size: 64, elements: !3723)
!3723 = !{!3724, !3725}
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3722, file: !72, line: 77, baseType: !96, size: 32)
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !3722, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !3707, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !3707, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!3728 = !DIGlobalVariableExpression(var: !3729, expr: !DIExpression())
!3729 = distinct !DIGlobalVariable(name: "hostlen", scope: !3701, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!3730 = !DIGlobalVariableExpression(var: !3731, expr: !DIExpression())
!3731 = distinct !DIGlobalVariable(name: "now", scope: !3649, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!3732 = !DIGlobalVariableExpression(var: !3733, expr: !DIExpression())
!3733 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !3649, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!3734 = !DIGlobalVariableExpression(var: !3735, expr: !DIExpression())
!3735 = distinct !DIGlobalVariable(name: "buf", scope: !3736, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!3736 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !3737, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3650, retainedNodes: !4)
!3737 = !DISubroutineType(types: !3738)
!3738 = !{!49, !3704}
!3739 = !DIGlobalVariableExpression(var: !3740, expr: !DIExpression())
!3740 = distinct !DIGlobalVariable(name: "runlevline", scope: !3741, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!3741 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !3742, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3650, retainedNodes: !4)
!3742 = !DISubroutineType(types: !3743)
!3743 = !{null, !3704}
!3744 = !DIGlobalVariableExpression(var: !3745, expr: !DIExpression())
!3745 = distinct !DIGlobalVariable(name: "comment", scope: !3741, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!3746 = !DIGlobalVariableExpression(var: !3747, expr: !DIExpression())
!3747 = distinct !DIGlobalVariable(name: "exitstr", scope: !3748, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!3748 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !3742, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3650, retainedNodes: !4)
!3749 = !DILocalVariable(name: "boottime", arg: 2, scope: !3649, file: !3, line: 188, type: !9)
!3750 = distinct !DISubprogram(name: "c_isprint", scope: !3751, file: !3751, line: 272, type: !3752, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !286, retainedNodes: !4)
!3751 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3752 = !DISubroutineType(types: !3753)
!3753 = !{!18, !53}
!3754 = !DILocalVariable(name: "c", arg: 1, scope: !3750, file: !3751, line: 272, type: !53)
!3755 = !DILocation(line: 272, column: 16, scope: !3750)
!3756 = !DILocation(line: 274, column: 11, scope: !3750)
!3757 = !DILocation(line: 274, column: 3, scope: !3750)
!3758 = !DILocation(line: 281, column: 7, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3750, file: !3751, line: 275, column: 5)
!3760 = !DILocation(line: 283, column: 7, scope: !3759)
!3761 = !DILocation(line: 285, column: 1, scope: !3750)
!3762 = !DILocalVariable(name: "c", arg: 1, scope: !3763, file: !3751, line: 272, type: !53)
!3763 = distinct !DISubprogram(name: "c_isprint", scope: !3751, file: !3751, line: 272, type: !3752, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3764, retainedNodes: !4)
!3764 = distinct !DICompileUnit(language: DW_LANG_C99, file: !287, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3765 = distinct !DISubprogram(name: "c_tolower", scope: !3751, file: !3751, line: 337, type: !3766, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !286, retainedNodes: !4)
!3766 = !DISubroutineType(types: !3767)
!3767 = !{!53, !53}
!3768 = !DILocalVariable(name: "c", arg: 1, scope: !3765, file: !3751, line: 337, type: !53)
!3769 = !DILocation(line: 337, column: 16, scope: !3765)
!3770 = !DILocation(line: 339, column: 11, scope: !3765)
!3771 = !DILocation(line: 339, column: 3, scope: !3765)
!3772 = !DILocation(line: 342, column: 14, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3765, file: !3751, line: 340, column: 5)
!3774 = !DILocation(line: 342, column: 16, scope: !3773)
!3775 = !DILocation(line: 342, column: 22, scope: !3773)
!3776 = !DILocation(line: 342, column: 7, scope: !3773)
!3777 = !DILocation(line: 344, column: 14, scope: !3773)
!3778 = !DILocation(line: 344, column: 7, scope: !3773)
!3779 = !DILocation(line: 346, column: 1, scope: !3765)
!3780 = !DILocalVariable(name: "c", arg: 1, scope: !3781, file: !3751, line: 337, type: !53)
!3781 = distinct !DISubprogram(name: "c_tolower", scope: !3751, file: !3751, line: 337, type: !3766, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3782, retainedNodes: !4)
!3782 = distinct !DICompileUnit(language: DW_LANG_C99, file: !287, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3783 = distinct !DISubprogram(name: "canon_host", scope: !166, file: !166, line: 33, type: !3784, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !160, retainedNodes: !4)
!3784 = !DISubroutineType(types: !3785)
!3785 = !{!6, !49}
!3786 = !DILocalVariable(name: "host", arg: 1, scope: !3783, file: !166, line: 33, type: !49)
!3787 = !DILocation(line: 33, column: 25, scope: !3783)
!3788 = !DILocation(line: 35, column: 24, scope: !3783)
!3789 = !DILocation(line: 35, column: 10, scope: !3783)
!3790 = !DILocation(line: 35, column: 3, scope: !3783)
!3791 = !DILocalVariable(name: "host", arg: 1, scope: !3792, file: !166, line: 33, type: !49)
!3792 = distinct !DISubprogram(name: "canon_host", scope: !166, file: !166, line: 33, type: !3784, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3793, retainedNodes: !4)
!3793 = distinct !DICompileUnit(language: DW_LANG_C99, file: !161, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !3794, nameTableKind: None)
!3794 = !{!3795, !3814}
!3795 = !DIGlobalVariableExpression(var: !3796, expr: !DIExpression())
!3796 = distinct !DIGlobalVariable(name: "hints", scope: !3797, file: !166, line: 64, type: !3798, isLocal: true, isDefinition: true)
!3797 = distinct !DISubprogram(name: "canon_host_r", scope: !166, file: !166, line: 61, type: !167, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3793, retainedNodes: !4)
!3798 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "addrinfo", file: !170, line: 565, size: 384, elements: !3799)
!3799 = !{!3800, !3801, !3802, !3803, !3804, !3805, !3811, !3812}
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "ai_flags", scope: !3798, file: !170, line: 567, baseType: !53, size: 32)
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "ai_family", scope: !3798, file: !170, line: 568, baseType: !53, size: 32, offset: 32)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "ai_socktype", scope: !3798, file: !170, line: 569, baseType: !53, size: 32, offset: 64)
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "ai_protocol", scope: !3798, file: !170, line: 570, baseType: !53, size: 32, offset: 96)
!3804 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addrlen", scope: !3798, file: !170, line: 571, baseType: !177, size: 32, offset: 128)
!3805 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addr", scope: !3798, file: !170, line: 572, baseType: !3806, size: 64, offset: 192)
!3806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3807, size: 64)
!3807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr", file: !178, line: 178, size: 128, elements: !3808)
!3808 = !{!3809, !3810}
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "sa_family", scope: !3807, file: !178, line: 180, baseType: !186, size: 16)
!3810 = !DIDerivedType(tag: DW_TAG_member, name: "sa_data", scope: !3807, file: !178, line: 181, baseType: !190, size: 112, offset: 16)
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "ai_canonname", scope: !3798, file: !170, line: 573, baseType: !6, size: 64, offset: 256)
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "ai_next", scope: !3798, file: !170, line: 574, baseType: !3813, size: 64, offset: 320)
!3813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3798, size: 64)
!3814 = !DIGlobalVariableExpression(var: !3815, expr: !DIExpression())
!3815 = distinct !DIGlobalVariable(name: "last_cherror", scope: !3793, file: !166, line: 28, type: !53, isLocal: true, isDefinition: true)
!3816 = !DILocalVariable(name: "host", arg: 1, scope: !165, file: !166, line: 61, type: !49)
!3817 = !DILocation(line: 61, column: 27, scope: !165)
!3818 = !DILocalVariable(name: "cherror", arg: 2, scope: !165, file: !166, line: 61, type: !149)
!3819 = !DILocation(line: 61, column: 38, scope: !165)
!3820 = !DILocalVariable(name: "retval", scope: !165, file: !166, line: 63, type: !6)
!3821 = !DILocation(line: 63, column: 9, scope: !165)
!3822 = !DILocalVariable(name: "res", scope: !165, file: !166, line: 65, type: !195)
!3823 = !DILocation(line: 65, column: 20, scope: !165)
!3824 = !DILocalVariable(name: "status", scope: !165, file: !166, line: 66, type: !53)
!3825 = !DILocation(line: 66, column: 7, scope: !165)
!3826 = !DILocation(line: 68, column: 18, scope: !165)
!3827 = !DILocation(line: 69, column: 25, scope: !165)
!3828 = !DILocation(line: 69, column: 12, scope: !165)
!3829 = !DILocation(line: 69, column: 10, scope: !165)
!3830 = !DILocation(line: 70, column: 8, scope: !3831)
!3831 = distinct !DILexicalBlock(scope: !165, file: !166, line: 70, column: 7)
!3832 = !DILocation(line: 70, column: 7, scope: !165)
!3833 = !DILocation(line: 75, column: 24, scope: !3834)
!3834 = distinct !DILexicalBlock(scope: !3831, file: !166, line: 71, column: 5)
!3835 = !DILocation(line: 75, column: 29, scope: !3834)
!3836 = !DILocation(line: 75, column: 44, scope: !3834)
!3837 = !DILocation(line: 75, column: 49, scope: !3834)
!3838 = !DILocation(line: 75, column: 64, scope: !3834)
!3839 = !DILocation(line: 75, column: 16, scope: !3834)
!3840 = !DILocation(line: 75, column: 14, scope: !3834)
!3841 = !DILocation(line: 76, column: 12, scope: !3842)
!3842 = distinct !DILexicalBlock(scope: !3834, file: !166, line: 76, column: 11)
!3843 = !DILocation(line: 76, column: 19, scope: !3842)
!3844 = !DILocation(line: 76, column: 22, scope: !3842)
!3845 = !DILocation(line: 76, column: 11, scope: !3834)
!3846 = !DILocation(line: 77, column: 10, scope: !3842)
!3847 = !DILocation(line: 77, column: 18, scope: !3842)
!3848 = !DILocation(line: 77, column: 9, scope: !3842)
!3849 = !DILocation(line: 78, column: 21, scope: !3834)
!3850 = !DILocation(line: 78, column: 7, scope: !3834)
!3851 = !DILocation(line: 79, column: 5, scope: !3834)
!3852 = !DILocation(line: 80, column: 12, scope: !3853)
!3853 = distinct !DILexicalBlock(scope: !3831, file: !166, line: 80, column: 12)
!3854 = !DILocation(line: 80, column: 12, scope: !3831)
!3855 = !DILocation(line: 81, column: 16, scope: !3853)
!3856 = !DILocation(line: 81, column: 6, scope: !3853)
!3857 = !DILocation(line: 81, column: 14, scope: !3853)
!3858 = !DILocation(line: 81, column: 5, scope: !3853)
!3859 = !DILocation(line: 83, column: 10, scope: !165)
!3860 = !DILocation(line: 83, column: 3, scope: !165)
!3861 = !DILocalVariable(name: "host", arg: 1, scope: !3862, file: !166, line: 61, type: !49)
!3862 = distinct !DISubprogram(name: "canon_host_r", scope: !166, file: !166, line: 61, type: !167, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3863, retainedNodes: !4)
!3863 = distinct !DICompileUnit(language: DW_LANG_C99, file: !161, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !3864, nameTableKind: None)
!3864 = !{!3865, !3883}
!3865 = !DIGlobalVariableExpression(var: !3866, expr: !DIExpression())
!3866 = distinct !DIGlobalVariable(name: "hints", scope: !3862, file: !166, line: 64, type: !3867, isLocal: true, isDefinition: true)
!3867 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "addrinfo", file: !170, line: 565, size: 384, elements: !3868)
!3868 = !{!3869, !3870, !3871, !3872, !3873, !3874, !3880, !3881}
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "ai_flags", scope: !3867, file: !170, line: 567, baseType: !53, size: 32)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "ai_family", scope: !3867, file: !170, line: 568, baseType: !53, size: 32, offset: 32)
!3871 = !DIDerivedType(tag: DW_TAG_member, name: "ai_socktype", scope: !3867, file: !170, line: 569, baseType: !53, size: 32, offset: 64)
!3872 = !DIDerivedType(tag: DW_TAG_member, name: "ai_protocol", scope: !3867, file: !170, line: 570, baseType: !53, size: 32, offset: 96)
!3873 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addrlen", scope: !3867, file: !170, line: 571, baseType: !177, size: 32, offset: 128)
!3874 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addr", scope: !3867, file: !170, line: 572, baseType: !3875, size: 64, offset: 192)
!3875 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3876, size: 64)
!3876 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr", file: !178, line: 178, size: 128, elements: !3877)
!3877 = !{!3878, !3879}
!3878 = !DIDerivedType(tag: DW_TAG_member, name: "sa_family", scope: !3876, file: !178, line: 180, baseType: !186, size: 16)
!3879 = !DIDerivedType(tag: DW_TAG_member, name: "sa_data", scope: !3876, file: !178, line: 181, baseType: !190, size: 112, offset: 16)
!3880 = !DIDerivedType(tag: DW_TAG_member, name: "ai_canonname", scope: !3867, file: !170, line: 573, baseType: !6, size: 64, offset: 256)
!3881 = !DIDerivedType(tag: DW_TAG_member, name: "ai_next", scope: !3867, file: !170, line: 574, baseType: !3882, size: 64, offset: 320)
!3882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3867, size: 64)
!3883 = !DIGlobalVariableExpression(var: !3884, expr: !DIExpression())
!3884 = distinct !DIGlobalVariable(name: "last_cherror", scope: !3863, file: !166, line: 28, type: !53, isLocal: true, isDefinition: true)
!3885 = !DILocalVariable(name: "cherror", arg: 2, scope: !3862, file: !166, line: 61, type: !149)
!3886 = !DILocalVariable(name: "retval", scope: !3862, file: !166, line: 63, type: !6)
!3887 = !DILocalVariable(name: "res", scope: !3862, file: !166, line: 65, type: !3882)
!3888 = !DILocalVariable(name: "status", scope: !3862, file: !166, line: 66, type: !53)
!3889 = distinct !DISubprogram(name: "close_stdout", scope: !203, file: !203, line: 117, type: !1463, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !198, retainedNodes: !4)
!3890 = !DILocation(line: 119, column: 21, scope: !3891)
!3891 = distinct !DILexicalBlock(scope: !3889, file: !203, line: 119, column: 7)
!3892 = !DILocation(line: 119, column: 7, scope: !3891)
!3893 = !DILocation(line: 119, column: 29, scope: !3891)
!3894 = !DILocation(line: 120, column: 7, scope: !3891)
!3895 = !DILocation(line: 120, column: 12, scope: !3891)
!3896 = !DILocation(line: 120, column: 25, scope: !3891)
!3897 = !DILocation(line: 120, column: 28, scope: !3891)
!3898 = !DILocation(line: 120, column: 34, scope: !3891)
!3899 = !DILocation(line: 119, column: 7, scope: !3889)
!3900 = !DILocalVariable(name: "write_error", scope: !3901, file: !203, line: 122, type: !49)
!3901 = distinct !DILexicalBlock(scope: !3891, file: !203, line: 121, column: 5)
!3902 = !DILocation(line: 122, column: 19, scope: !3901)
!3903 = !DILocation(line: 122, column: 33, scope: !3901)
!3904 = !DILocation(line: 123, column: 11, scope: !3905)
!3905 = distinct !DILexicalBlock(scope: !3901, file: !203, line: 123, column: 11)
!3906 = !DILocation(line: 123, column: 11, scope: !3901)
!3907 = !DILocation(line: 124, column: 19, scope: !3905)
!3908 = !DILocation(line: 124, column: 52, scope: !3905)
!3909 = !DILocation(line: 124, column: 36, scope: !3905)
!3910 = !DILocation(line: 125, column: 16, scope: !3905)
!3911 = !DILocation(line: 124, column: 9, scope: !3905)
!3912 = !DILocation(line: 127, column: 19, scope: !3905)
!3913 = !DILocation(line: 127, column: 32, scope: !3905)
!3914 = !DILocation(line: 127, column: 9, scope: !3905)
!3915 = !DILocation(line: 129, column: 14, scope: !3901)
!3916 = !DILocation(line: 129, column: 7, scope: !3901)
!3917 = !DILocation(line: 134, column: 42, scope: !3918)
!3918 = distinct !DILexicalBlock(scope: !3889, file: !203, line: 134, column: 7)
!3919 = !DILocation(line: 134, column: 28, scope: !3918)
!3920 = !DILocation(line: 134, column: 50, scope: !3918)
!3921 = !DILocation(line: 134, column: 7, scope: !3889)
!3922 = !DILocation(line: 135, column: 12, scope: !3918)
!3923 = !DILocation(line: 135, column: 5, scope: !3918)
!3924 = !DILocation(line: 136, column: 1, scope: !3889)
!3925 = distinct !DISubprogram(name: "hard_locale", scope: !3926, file: !3926, line: 27, type: !3752, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !288, retainedNodes: !4)
!3926 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3927 = !DILocalVariable(name: "category", arg: 1, scope: !3925, file: !3926, line: 27, type: !53)
!3928 = !DILocation(line: 27, column: 18, scope: !3925)
!3929 = !DILocalVariable(name: "locale", scope: !3925, file: !3926, line: 29, type: !1575)
!3930 = !DILocation(line: 29, column: 8, scope: !3925)
!3931 = !DILocation(line: 31, column: 25, scope: !3932)
!3932 = distinct !DILexicalBlock(scope: !3925, file: !3926, line: 31, column: 7)
!3933 = !DILocation(line: 31, column: 35, scope: !3932)
!3934 = !DILocation(line: 31, column: 7, scope: !3932)
!3935 = !DILocation(line: 31, column: 7, scope: !3925)
!3936 = !DILocation(line: 32, column: 5, scope: !3932)
!3937 = !DILocation(line: 34, column: 20, scope: !3925)
!3938 = !DILocation(line: 34, column: 12, scope: !3925)
!3939 = !DILocation(line: 34, column: 33, scope: !3925)
!3940 = !DILocation(line: 34, column: 49, scope: !3925)
!3941 = !DILocation(line: 34, column: 41, scope: !3925)
!3942 = !DILocation(line: 34, column: 66, scope: !3925)
!3943 = !DILocation(line: 34, column: 38, scope: !3925)
!3944 = !DILocation(line: 34, column: 10, scope: !3925)
!3945 = !DILocation(line: 34, column: 3, scope: !3925)
!3946 = !DILocation(line: 35, column: 1, scope: !3925)
!3947 = !DILocalVariable(name: "category", arg: 1, scope: !3948, file: !3926, line: 27, type: !53)
!3948 = distinct !DISubprogram(name: "hard_locale", scope: !3926, file: !3926, line: 27, type: !3752, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3949, retainedNodes: !4)
!3949 = distinct !DICompileUnit(language: DW_LANG_C99, file: !289, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3950 = !DILocalVariable(name: "locale", scope: !3948, file: !3926, line: 29, type: !1575)
!3951 = distinct !DISubprogram(name: "imaxtostr", scope: !3952, file: !3952, line: 36, type: !3953, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !290, retainedNodes: !4)
!3952 = !DIFile(filename: "./lib/anytostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3953 = !DISubroutineType(types: !3954)
!3954 = !{!6, !293, !6}
!3955 = !DILocalVariable(name: "i", arg: 1, scope: !3951, file: !3952, line: 36, type: !293)
!3956 = !DILocation(line: 36, column: 19, scope: !3951)
!3957 = !DILocalVariable(name: "buf", arg: 2, scope: !3951, file: !3952, line: 36, type: !6)
!3958 = !DILocation(line: 36, column: 28, scope: !3951)
!3959 = !DILocalVariable(name: "p", scope: !3951, file: !3952, line: 38, type: !6)
!3960 = !DILocation(line: 38, column: 9, scope: !3951)
!3961 = !DILocation(line: 38, column: 13, scope: !3951)
!3962 = !DILocation(line: 38, column: 17, scope: !3951)
!3963 = !DILocation(line: 39, column: 4, scope: !3951)
!3964 = !DILocation(line: 39, column: 6, scope: !3951)
!3965 = !DILocation(line: 41, column: 7, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3951, file: !3952, line: 41, column: 7)
!3967 = !DILocation(line: 41, column: 9, scope: !3966)
!3968 = !DILocation(line: 41, column: 7, scope: !3951)
!3969 = !DILocation(line: 43, column: 7, scope: !3970)
!3970 = distinct !DILexicalBlock(scope: !3966, file: !3952, line: 42, column: 5)
!3971 = !DILocation(line: 44, column: 22, scope: !3970)
!3972 = !DILocation(line: 44, column: 24, scope: !3970)
!3973 = !DILocation(line: 44, column: 20, scope: !3970)
!3974 = !DILocation(line: 44, column: 16, scope: !3970)
!3975 = !DILocation(line: 44, column: 10, scope: !3970)
!3976 = !DILocation(line: 44, column: 14, scope: !3970)
!3977 = !DILocation(line: 44, column: 9, scope: !3970)
!3978 = !DILocation(line: 45, column: 17, scope: !3970)
!3979 = !DILocation(line: 45, column: 24, scope: !3970)
!3980 = distinct !{!3980, !3969, !3981}
!3981 = !DILocation(line: 45, column: 28, scope: !3970)
!3982 = !DILocation(line: 47, column: 8, scope: !3970)
!3983 = !DILocation(line: 47, column: 12, scope: !3970)
!3984 = !DILocation(line: 48, column: 5, scope: !3970)
!3985 = !DILocation(line: 51, column: 7, scope: !3986)
!3986 = distinct !DILexicalBlock(scope: !3966, file: !3952, line: 50, column: 5)
!3987 = !DILocation(line: 52, column: 22, scope: !3986)
!3988 = !DILocation(line: 52, column: 24, scope: !3986)
!3989 = !DILocation(line: 52, column: 20, scope: !3986)
!3990 = !DILocation(line: 52, column: 16, scope: !3986)
!3991 = !DILocation(line: 52, column: 10, scope: !3986)
!3992 = !DILocation(line: 52, column: 14, scope: !3986)
!3993 = !DILocation(line: 52, column: 9, scope: !3986)
!3994 = !DILocation(line: 53, column: 17, scope: !3986)
!3995 = !DILocation(line: 53, column: 24, scope: !3986)
!3996 = distinct !{!3996, !3985, !3997}
!3997 = !DILocation(line: 53, column: 28, scope: !3986)
!3998 = !DILocation(line: 56, column: 10, scope: !3951)
!3999 = !DILocation(line: 56, column: 3, scope: !3951)
!4000 = !DILocalVariable(name: "i", arg: 1, scope: !4001, file: !3952, line: 36, type: !293)
!4001 = distinct !DISubprogram(name: "imaxtostr", scope: !3952, file: !3952, line: 36, type: !3953, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4002, retainedNodes: !4)
!4002 = distinct !DICompileUnit(language: DW_LANG_C99, file: !291, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !292, nameTableKind: None)
!4003 = !DILocalVariable(name: "buf", arg: 2, scope: !4001, file: !3952, line: 36, type: !6)
!4004 = !DILocalVariable(name: "p", scope: !4001, file: !3952, line: 38, type: !6)
!4005 = distinct !DISubprogram(name: "set_program_name", scope: !217, file: !217, line: 39, type: !467, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!4006 = !DILocalVariable(name: "argv0", arg: 1, scope: !4005, file: !217, line: 39, type: !49)
!4007 = !DILocation(line: 39, column: 31, scope: !4005)
!4008 = !DILocalVariable(name: "slash", scope: !4005, file: !217, line: 46, type: !49)
!4009 = !DILocation(line: 46, column: 15, scope: !4005)
!4010 = !DILocalVariable(name: "base", scope: !4005, file: !217, line: 47, type: !49)
!4011 = !DILocation(line: 47, column: 15, scope: !4005)
!4012 = !DILocation(line: 51, column: 7, scope: !4013)
!4013 = distinct !DILexicalBlock(scope: !4005, file: !217, line: 51, column: 7)
!4014 = !DILocation(line: 51, column: 13, scope: !4013)
!4015 = !DILocation(line: 51, column: 7, scope: !4005)
!4016 = !DILocation(line: 55, column: 14, scope: !4017)
!4017 = distinct !DILexicalBlock(scope: !4013, file: !217, line: 52, column: 5)
!4018 = !DILocation(line: 54, column: 7, scope: !4017)
!4019 = !DILocation(line: 56, column: 7, scope: !4017)
!4020 = !DILocation(line: 59, column: 20, scope: !4005)
!4021 = !DILocation(line: 59, column: 11, scope: !4005)
!4022 = !DILocation(line: 59, column: 9, scope: !4005)
!4023 = !DILocation(line: 60, column: 11, scope: !4005)
!4024 = !DILocation(line: 60, column: 17, scope: !4005)
!4025 = !DILocation(line: 60, column: 27, scope: !4005)
!4026 = !DILocation(line: 60, column: 33, scope: !4005)
!4027 = !DILocation(line: 60, column: 39, scope: !4005)
!4028 = !DILocation(line: 60, column: 8, scope: !4005)
!4029 = !DILocation(line: 61, column: 7, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !4005, file: !217, line: 61, column: 7)
!4031 = !DILocation(line: 61, column: 14, scope: !4030)
!4032 = !DILocation(line: 61, column: 12, scope: !4030)
!4033 = !DILocation(line: 61, column: 20, scope: !4030)
!4034 = !DILocation(line: 61, column: 25, scope: !4030)
!4035 = !DILocation(line: 61, column: 37, scope: !4030)
!4036 = !DILocation(line: 61, column: 42, scope: !4030)
!4037 = !DILocation(line: 61, column: 28, scope: !4030)
!4038 = !DILocation(line: 61, column: 61, scope: !4030)
!4039 = !DILocation(line: 61, column: 7, scope: !4005)
!4040 = !DILocation(line: 63, column: 15, scope: !4041)
!4041 = distinct !DILexicalBlock(scope: !4030, file: !217, line: 62, column: 5)
!4042 = !DILocation(line: 63, column: 13, scope: !4041)
!4043 = !DILocation(line: 64, column: 20, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4041, file: !217, line: 64, column: 11)
!4045 = !DILocation(line: 64, column: 11, scope: !4044)
!4046 = !DILocation(line: 64, column: 36, scope: !4044)
!4047 = !DILocation(line: 64, column: 11, scope: !4041)
!4048 = !DILocation(line: 66, column: 19, scope: !4049)
!4049 = distinct !DILexicalBlock(scope: !4044, file: !217, line: 65, column: 9)
!4050 = !DILocation(line: 66, column: 24, scope: !4049)
!4051 = !DILocation(line: 66, column: 17, scope: !4049)
!4052 = !DILocation(line: 70, column: 52, scope: !4049)
!4053 = !DILocation(line: 70, column: 41, scope: !4049)
!4054 = !DILocation(line: 72, column: 9, scope: !4049)
!4055 = !DILocation(line: 73, column: 5, scope: !4041)
!4056 = !DILocation(line: 84, column: 18, scope: !4005)
!4057 = !DILocation(line: 84, column: 16, scope: !4005)
!4058 = !DILocation(line: 90, column: 38, scope: !4005)
!4059 = !DILocation(line: 90, column: 27, scope: !4005)
!4060 = !DILocation(line: 92, column: 1, scope: !4005)
!4061 = !DILocalVariable(name: "argv0", arg: 1, scope: !4062, file: !217, line: 39, type: !49)
!4062 = distinct !DISubprogram(name: "set_program_name", scope: !217, file: !217, line: 39, type: !467, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4063, retainedNodes: !4)
!4063 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, globals: !4064, nameTableKind: None)
!4064 = !{!4065}
!4065 = !DIGlobalVariableExpression(var: !4066, expr: !DIExpression())
!4066 = distinct !DIGlobalVariable(name: "program_name", scope: !4063, file: !217, line: 33, type: !49, isLocal: false, isDefinition: true)
!4067 = !DILocalVariable(name: "slash", scope: !4062, file: !217, line: 46, type: !49)
!4068 = !DILocalVariable(name: "base", scope: !4062, file: !217, line: 47, type: !49)
!4069 = distinct !DISubprogram(name: "set_char_quoting", scope: !241, file: !241, line: 152, type: !4070, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4070 = !DISubroutineType(types: !4071)
!4071 = !{!53, !4072, !7, !53}
!4072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !254, size: 64)
!4073 = !DILocalVariable(name: "o", arg: 1, scope: !4069, file: !241, line: 152, type: !4072)
!4074 = !DILocation(line: 152, column: 43, scope: !4069)
!4075 = !DILocalVariable(name: "c", arg: 2, scope: !4069, file: !241, line: 152, type: !7)
!4076 = !DILocation(line: 152, column: 51, scope: !4069)
!4077 = !DILocalVariable(name: "i", arg: 3, scope: !4069, file: !241, line: 152, type: !53)
!4078 = !DILocation(line: 152, column: 58, scope: !4069)
!4079 = !DILocalVariable(name: "uc", scope: !4069, file: !241, line: 154, type: !317)
!4080 = !DILocation(line: 154, column: 17, scope: !4069)
!4081 = !DILocation(line: 154, column: 22, scope: !4069)
!4082 = !DILocalVariable(name: "p", scope: !4069, file: !241, line: 155, type: !4083)
!4083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !180, size: 64)
!4084 = !DILocation(line: 155, column: 17, scope: !4069)
!4085 = !DILocation(line: 156, column: 6, scope: !4069)
!4086 = !DILocation(line: 156, column: 10, scope: !4069)
!4087 = !DILocation(line: 156, column: 41, scope: !4069)
!4088 = !DILocation(line: 156, column: 5, scope: !4069)
!4089 = !DILocation(line: 156, column: 59, scope: !4069)
!4090 = !DILocation(line: 156, column: 62, scope: !4069)
!4091 = !DILocation(line: 156, column: 57, scope: !4069)
!4092 = !DILocalVariable(name: "shift", scope: !4069, file: !241, line: 157, type: !53)
!4093 = !DILocation(line: 157, column: 7, scope: !4069)
!4094 = !DILocation(line: 157, column: 15, scope: !4069)
!4095 = !DILocation(line: 157, column: 18, scope: !4069)
!4096 = !DILocalVariable(name: "r", scope: !4069, file: !241, line: 158, type: !53)
!4097 = !DILocation(line: 158, column: 7, scope: !4069)
!4098 = !DILocation(line: 158, column: 13, scope: !4069)
!4099 = !DILocation(line: 158, column: 12, scope: !4069)
!4100 = !DILocation(line: 158, column: 18, scope: !4069)
!4101 = !DILocation(line: 158, column: 15, scope: !4069)
!4102 = !DILocation(line: 158, column: 25, scope: !4069)
!4103 = !DILocation(line: 159, column: 11, scope: !4069)
!4104 = !DILocation(line: 159, column: 13, scope: !4069)
!4105 = !DILocation(line: 159, column: 20, scope: !4069)
!4106 = !DILocation(line: 159, column: 18, scope: !4069)
!4107 = !DILocation(line: 159, column: 26, scope: !4069)
!4108 = !DILocation(line: 159, column: 23, scope: !4069)
!4109 = !DILocation(line: 159, column: 4, scope: !4069)
!4110 = !DILocation(line: 159, column: 6, scope: !4069)
!4111 = !DILocation(line: 160, column: 10, scope: !4069)
!4112 = !DILocation(line: 160, column: 3, scope: !4069)
!4113 = !DILocalVariable(name: "o", arg: 1, scope: !4114, file: !241, line: 152, type: !4117)
!4114 = distinct !DISubprogram(name: "set_char_quoting", scope: !241, file: !241, line: 152, type: !4115, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4125, retainedNodes: !4)
!4115 = !DISubroutineType(types: !4116)
!4116 = !{!53, !4117, !7, !53}
!4117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4118, size: 64)
!4118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4119)
!4119 = !{!4120, !4121, !4122, !4123, !4124}
!4120 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4118, file: !241, line: 68, baseType: !223, size: 32)
!4121 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4118, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4122 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4118, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4123 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4118, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4124 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4118, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4125 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4126, nameTableKind: None)
!4126 = !{!4127, !4129, !4131, !4133, !4135, !4137, !4144, !4146}
!4127 = !DIGlobalVariableExpression(var: !4128, expr: !DIExpression())
!4128 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4125, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4129 = !DIGlobalVariableExpression(var: !4130, expr: !DIExpression())
!4130 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4125, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4131 = !DIGlobalVariableExpression(var: !4132, expr: !DIExpression())
!4132 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4125, file: !241, line: 1052, type: !4118, isLocal: false, isDefinition: true)
!4133 = !DIGlobalVariableExpression(var: !4134, expr: !DIExpression())
!4134 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4125, file: !241, line: 116, type: !4118, isLocal: true, isDefinition: true)
!4135 = !DIGlobalVariableExpression(var: !4136, expr: !DIExpression())
!4136 = distinct !DIGlobalVariable(name: "slot0", scope: !4125, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4137 = !DIGlobalVariableExpression(var: !4138, expr: !DIExpression())
!4138 = distinct !DIGlobalVariable(name: "slotvec", scope: !4125, file: !241, line: 845, type: !4139, isLocal: true, isDefinition: true)
!4139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4140, size: 64)
!4140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4141)
!4141 = !{!4142, !4143}
!4142 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4140, file: !241, line: 836, baseType: !110, size: 64)
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4140, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4144 = !DIGlobalVariableExpression(var: !4145, expr: !DIExpression())
!4145 = distinct !DIGlobalVariable(name: "nslots", scope: !4125, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4146 = !DIGlobalVariableExpression(var: !4147, expr: !DIExpression())
!4147 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4125, file: !241, line: 844, type: !4140, isLocal: true, isDefinition: true)
!4148 = !DILocalVariable(name: "c", arg: 2, scope: !4114, file: !241, line: 152, type: !7)
!4149 = !DILocalVariable(name: "i", arg: 3, scope: !4114, file: !241, line: 152, type: !53)
!4150 = !DILocalVariable(name: "uc", scope: !4114, file: !241, line: 154, type: !317)
!4151 = !DILocalVariable(name: "p", scope: !4114, file: !241, line: 155, type: !4083)
!4152 = !DILocalVariable(name: "shift", scope: !4153, file: !241, line: 157, type: !53)
!4153 = distinct !DISubprogram(name: "set_char_quoting", scope: !241, file: !241, line: 152, type: !4154, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4164, retainedNodes: !4)
!4154 = !DISubroutineType(types: !4155)
!4155 = !{!53, !4156, !7, !53}
!4156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4157, size: 64)
!4157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4158)
!4158 = !{!4159, !4160, !4161, !4162, !4163}
!4159 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4157, file: !241, line: 68, baseType: !223, size: 32)
!4160 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4157, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4161 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4157, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4162 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4157, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4163 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4157, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4164 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4165, nameTableKind: None)
!4165 = !{!4166, !4168, !4170, !4172, !4174, !4176, !4183, !4185}
!4166 = !DIGlobalVariableExpression(var: !4167, expr: !DIExpression())
!4167 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4164, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4168 = !DIGlobalVariableExpression(var: !4169, expr: !DIExpression())
!4169 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4164, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4170 = !DIGlobalVariableExpression(var: !4171, expr: !DIExpression())
!4171 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4164, file: !241, line: 1052, type: !4157, isLocal: false, isDefinition: true)
!4172 = !DIGlobalVariableExpression(var: !4173, expr: !DIExpression())
!4173 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4164, file: !241, line: 116, type: !4157, isLocal: true, isDefinition: true)
!4174 = !DIGlobalVariableExpression(var: !4175, expr: !DIExpression())
!4175 = distinct !DIGlobalVariable(name: "slot0", scope: !4164, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4176 = !DIGlobalVariableExpression(var: !4177, expr: !DIExpression())
!4177 = distinct !DIGlobalVariable(name: "slotvec", scope: !4164, file: !241, line: 845, type: !4178, isLocal: true, isDefinition: true)
!4178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4179, size: 64)
!4179 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4180)
!4180 = !{!4181, !4182}
!4181 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4179, file: !241, line: 836, baseType: !110, size: 64)
!4182 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4179, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4183 = !DIGlobalVariableExpression(var: !4184, expr: !DIExpression())
!4184 = distinct !DIGlobalVariable(name: "nslots", scope: !4164, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4185 = !DIGlobalVariableExpression(var: !4186, expr: !DIExpression())
!4186 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4164, file: !241, line: 844, type: !4179, isLocal: true, isDefinition: true)
!4187 = !DILocalVariable(name: "r", scope: !4153, file: !241, line: 158, type: !53)
!4188 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !241, file: !241, line: 982, type: !4189, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4189 = !DISubroutineType(types: !4190)
!4190 = !{!6, !49, !110, !7}
!4191 = !DILocalVariable(name: "arg", arg: 1, scope: !4188, file: !241, line: 982, type: !49)
!4192 = !DILocation(line: 982, column: 32, scope: !4188)
!4193 = !DILocalVariable(name: "argsize", arg: 2, scope: !4188, file: !241, line: 982, type: !110)
!4194 = !DILocation(line: 982, column: 44, scope: !4188)
!4195 = !DILocalVariable(name: "ch", arg: 3, scope: !4188, file: !241, line: 982, type: !7)
!4196 = !DILocation(line: 982, column: 58, scope: !4188)
!4197 = !DILocalVariable(name: "options", scope: !4188, file: !241, line: 984, type: !254)
!4198 = !DILocation(line: 984, column: 26, scope: !4188)
!4199 = !DILocation(line: 985, column: 13, scope: !4188)
!4200 = !DILocation(line: 986, column: 31, scope: !4188)
!4201 = !DILocation(line: 986, column: 3, scope: !4188)
!4202 = !DILocation(line: 987, column: 33, scope: !4188)
!4203 = !DILocation(line: 987, column: 38, scope: !4188)
!4204 = !DILocation(line: 987, column: 10, scope: !4188)
!4205 = !DILocation(line: 987, column: 3, scope: !4188)
!4206 = !DILocalVariable(name: "arg", arg: 1, scope: !4207, file: !241, line: 982, type: !49)
!4207 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !241, file: !241, line: 982, type: !4189, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4208, retainedNodes: !4)
!4208 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4209, nameTableKind: None)
!4209 = !{!4210, !4212, !4214, !4223, !4225, !4227, !4234, !4236}
!4210 = !DIGlobalVariableExpression(var: !4211, expr: !DIExpression())
!4211 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4208, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4212 = !DIGlobalVariableExpression(var: !4213, expr: !DIExpression())
!4213 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4208, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4214 = !DIGlobalVariableExpression(var: !4215, expr: !DIExpression())
!4215 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4208, file: !241, line: 1052, type: !4216, isLocal: false, isDefinition: true)
!4216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4217)
!4217 = !{!4218, !4219, !4220, !4221, !4222}
!4218 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4216, file: !241, line: 68, baseType: !223, size: 32)
!4219 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4216, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4216, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4221 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4216, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4222 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4216, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4223 = !DIGlobalVariableExpression(var: !4224, expr: !DIExpression())
!4224 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4208, file: !241, line: 116, type: !4216, isLocal: true, isDefinition: true)
!4225 = !DIGlobalVariableExpression(var: !4226, expr: !DIExpression())
!4226 = distinct !DIGlobalVariable(name: "slot0", scope: !4208, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4227 = !DIGlobalVariableExpression(var: !4228, expr: !DIExpression())
!4228 = distinct !DIGlobalVariable(name: "slotvec", scope: !4208, file: !241, line: 845, type: !4229, isLocal: true, isDefinition: true)
!4229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4230, size: 64)
!4230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4231)
!4231 = !{!4232, !4233}
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4230, file: !241, line: 836, baseType: !110, size: 64)
!4233 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4230, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4234 = !DIGlobalVariableExpression(var: !4235, expr: !DIExpression())
!4235 = distinct !DIGlobalVariable(name: "nslots", scope: !4208, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4236 = !DIGlobalVariableExpression(var: !4237, expr: !DIExpression())
!4237 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4208, file: !241, line: 844, type: !4230, isLocal: true, isDefinition: true)
!4238 = !DILocalVariable(name: "argsize", arg: 2, scope: !4207, file: !241, line: 982, type: !110)
!4239 = !DILocalVariable(name: "ch", arg: 3, scope: !4207, file: !241, line: 982, type: !7)
!4240 = !DILocalVariable(name: "options", scope: !4207, file: !241, line: 984, type: !4216)
!4241 = distinct !DISubprogram(name: "quotearg_n_options", scope: !241, file: !241, line: 877, type: !4242, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4242 = !DISubroutineType(types: !4243)
!4243 = !{!6, !53, !49, !110, !4244}
!4244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4245, size: 64)
!4245 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !254)
!4246 = !DILocalVariable(name: "n", arg: 1, scope: !4241, file: !241, line: 877, type: !53)
!4247 = !DILocation(line: 877, column: 25, scope: !4241)
!4248 = !DILocalVariable(name: "arg", arg: 2, scope: !4241, file: !241, line: 877, type: !49)
!4249 = !DILocation(line: 877, column: 40, scope: !4241)
!4250 = !DILocalVariable(name: "argsize", arg: 3, scope: !4241, file: !241, line: 877, type: !110)
!4251 = !DILocation(line: 877, column: 52, scope: !4241)
!4252 = !DILocalVariable(name: "options", arg: 4, scope: !4241, file: !241, line: 878, type: !4244)
!4253 = !DILocation(line: 878, column: 51, scope: !4241)
!4254 = !DILocalVariable(name: "e", scope: !4241, file: !241, line: 880, type: !53)
!4255 = !DILocation(line: 880, column: 7, scope: !4241)
!4256 = !DILocation(line: 880, column: 11, scope: !4241)
!4257 = !DILocalVariable(name: "sv", scope: !4241, file: !241, line: 882, type: !268)
!4258 = !DILocation(line: 882, column: 19, scope: !4241)
!4259 = !DILocation(line: 882, column: 24, scope: !4241)
!4260 = !DILocation(line: 884, column: 7, scope: !4261)
!4261 = distinct !DILexicalBlock(scope: !4241, file: !241, line: 884, column: 7)
!4262 = !DILocation(line: 884, column: 9, scope: !4261)
!4263 = !DILocation(line: 884, column: 7, scope: !4241)
!4264 = !DILocation(line: 885, column: 5, scope: !4261)
!4265 = !DILocation(line: 887, column: 7, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4241, file: !241, line: 887, column: 7)
!4267 = !DILocation(line: 887, column: 17, scope: !4266)
!4268 = !DILocation(line: 887, column: 14, scope: !4266)
!4269 = !DILocation(line: 887, column: 7, scope: !4241)
!4270 = !DILocalVariable(name: "preallocated", scope: !4271, file: !241, line: 889, type: !18)
!4271 = distinct !DILexicalBlock(scope: !4266, file: !241, line: 888, column: 5)
!4272 = !DILocation(line: 889, column: 12, scope: !4271)
!4273 = !DILocation(line: 889, column: 28, scope: !4271)
!4274 = !DILocation(line: 889, column: 31, scope: !4271)
!4275 = !DILocalVariable(name: "nmax", scope: !4271, file: !241, line: 890, type: !53)
!4276 = !DILocation(line: 890, column: 11, scope: !4271)
!4277 = !DILocation(line: 892, column: 11, scope: !4278)
!4278 = distinct !DILexicalBlock(scope: !4271, file: !241, line: 892, column: 11)
!4279 = !DILocation(line: 892, column: 18, scope: !4278)
!4280 = !DILocation(line: 892, column: 16, scope: !4278)
!4281 = !DILocation(line: 892, column: 11, scope: !4271)
!4282 = !DILocation(line: 893, column: 9, scope: !4278)
!4283 = !DILocation(line: 895, column: 32, scope: !4271)
!4284 = !DILocation(line: 895, column: 54, scope: !4271)
!4285 = !DILocation(line: 895, column: 59, scope: !4271)
!4286 = !DILocation(line: 895, column: 61, scope: !4271)
!4287 = !DILocation(line: 895, column: 58, scope: !4271)
!4288 = !DILocation(line: 895, column: 66, scope: !4271)
!4289 = !DILocation(line: 895, column: 22, scope: !4271)
!4290 = !DILocation(line: 895, column: 20, scope: !4271)
!4291 = !DILocation(line: 895, column: 15, scope: !4271)
!4292 = !DILocation(line: 896, column: 11, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4271, file: !241, line: 896, column: 11)
!4294 = !DILocation(line: 896, column: 11, scope: !4271)
!4295 = !DILocation(line: 897, column: 10, scope: !4293)
!4296 = !DILocation(line: 897, column: 15, scope: !4293)
!4297 = !DILocation(line: 897, column: 9, scope: !4293)
!4298 = !DILocation(line: 898, column: 15, scope: !4271)
!4299 = !DILocation(line: 898, column: 20, scope: !4271)
!4300 = !DILocation(line: 898, column: 18, scope: !4271)
!4301 = !DILocation(line: 898, column: 7, scope: !4271)
!4302 = !DILocation(line: 898, column: 32, scope: !4271)
!4303 = !DILocation(line: 898, column: 34, scope: !4271)
!4304 = !DILocation(line: 898, column: 40, scope: !4271)
!4305 = !DILocation(line: 898, column: 38, scope: !4271)
!4306 = !DILocation(line: 898, column: 31, scope: !4271)
!4307 = !DILocation(line: 898, column: 48, scope: !4271)
!4308 = !DILocation(line: 899, column: 16, scope: !4271)
!4309 = !DILocation(line: 899, column: 18, scope: !4271)
!4310 = !DILocation(line: 899, column: 14, scope: !4271)
!4311 = !DILocation(line: 900, column: 5, scope: !4271)
!4312 = !DILocalVariable(name: "size", scope: !4313, file: !241, line: 903, type: !110)
!4313 = distinct !DILexicalBlock(scope: !4241, file: !241, line: 902, column: 3)
!4314 = !DILocation(line: 903, column: 12, scope: !4313)
!4315 = !DILocation(line: 903, column: 19, scope: !4313)
!4316 = !DILocation(line: 903, column: 22, scope: !4313)
!4317 = !DILocation(line: 903, column: 25, scope: !4313)
!4318 = !DILocalVariable(name: "val", scope: !4313, file: !241, line: 904, type: !6)
!4319 = !DILocation(line: 904, column: 11, scope: !4313)
!4320 = !DILocation(line: 904, column: 17, scope: !4313)
!4321 = !DILocation(line: 904, column: 20, scope: !4313)
!4322 = !DILocation(line: 904, column: 23, scope: !4313)
!4323 = !DILocalVariable(name: "flags", scope: !4313, file: !241, line: 906, type: !53)
!4324 = !DILocation(line: 906, column: 9, scope: !4313)
!4325 = !DILocation(line: 906, column: 17, scope: !4313)
!4326 = !DILocation(line: 906, column: 26, scope: !4313)
!4327 = !DILocation(line: 906, column: 32, scope: !4313)
!4328 = !DILocalVariable(name: "qsize", scope: !4313, file: !241, line: 907, type: !110)
!4329 = !DILocation(line: 907, column: 12, scope: !4313)
!4330 = !DILocation(line: 907, column: 46, scope: !4313)
!4331 = !DILocation(line: 907, column: 51, scope: !4313)
!4332 = !DILocation(line: 907, column: 57, scope: !4313)
!4333 = !DILocation(line: 907, column: 62, scope: !4313)
!4334 = !DILocation(line: 908, column: 46, scope: !4313)
!4335 = !DILocation(line: 908, column: 55, scope: !4313)
!4336 = !DILocation(line: 908, column: 62, scope: !4313)
!4337 = !DILocation(line: 909, column: 46, scope: !4313)
!4338 = !DILocation(line: 909, column: 55, scope: !4313)
!4339 = !DILocation(line: 910, column: 46, scope: !4313)
!4340 = !DILocation(line: 910, column: 55, scope: !4313)
!4341 = !DILocation(line: 911, column: 46, scope: !4313)
!4342 = !DILocation(line: 911, column: 55, scope: !4313)
!4343 = !DILocation(line: 907, column: 20, scope: !4313)
!4344 = !DILocation(line: 913, column: 9, scope: !4345)
!4345 = distinct !DILexicalBlock(scope: !4313, file: !241, line: 913, column: 9)
!4346 = !DILocation(line: 913, column: 17, scope: !4345)
!4347 = !DILocation(line: 913, column: 14, scope: !4345)
!4348 = !DILocation(line: 913, column: 9, scope: !4313)
!4349 = !DILocation(line: 915, column: 29, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4345, file: !241, line: 914, column: 7)
!4351 = !DILocation(line: 915, column: 35, scope: !4350)
!4352 = !DILocation(line: 915, column: 27, scope: !4350)
!4353 = !DILocation(line: 915, column: 9, scope: !4350)
!4354 = !DILocation(line: 915, column: 12, scope: !4350)
!4355 = !DILocation(line: 915, column: 15, scope: !4350)
!4356 = !DILocation(line: 915, column: 20, scope: !4350)
!4357 = !DILocation(line: 916, column: 13, scope: !4358)
!4358 = distinct !DILexicalBlock(scope: !4350, file: !241, line: 916, column: 13)
!4359 = !DILocation(line: 916, column: 17, scope: !4358)
!4360 = !DILocation(line: 916, column: 13, scope: !4350)
!4361 = !DILocation(line: 917, column: 17, scope: !4358)
!4362 = !DILocation(line: 917, column: 11, scope: !4358)
!4363 = !DILocation(line: 918, column: 39, scope: !4350)
!4364 = !DILocation(line: 918, column: 27, scope: !4350)
!4365 = !DILocation(line: 918, column: 25, scope: !4350)
!4366 = !DILocation(line: 918, column: 9, scope: !4350)
!4367 = !DILocation(line: 918, column: 12, scope: !4350)
!4368 = !DILocation(line: 918, column: 15, scope: !4350)
!4369 = !DILocation(line: 918, column: 19, scope: !4350)
!4370 = !DILocation(line: 919, column: 35, scope: !4350)
!4371 = !DILocation(line: 919, column: 40, scope: !4350)
!4372 = !DILocation(line: 919, column: 46, scope: !4350)
!4373 = !DILocation(line: 919, column: 51, scope: !4350)
!4374 = !DILocation(line: 919, column: 60, scope: !4350)
!4375 = !DILocation(line: 919, column: 69, scope: !4350)
!4376 = !DILocation(line: 920, column: 35, scope: !4350)
!4377 = !DILocation(line: 920, column: 42, scope: !4350)
!4378 = !DILocation(line: 920, column: 51, scope: !4350)
!4379 = !DILocation(line: 921, column: 35, scope: !4350)
!4380 = !DILocation(line: 921, column: 44, scope: !4350)
!4381 = !DILocation(line: 922, column: 35, scope: !4350)
!4382 = !DILocation(line: 922, column: 44, scope: !4350)
!4383 = !DILocation(line: 919, column: 9, scope: !4350)
!4384 = !DILocation(line: 923, column: 7, scope: !4350)
!4385 = !DILocation(line: 925, column: 13, scope: !4313)
!4386 = !DILocation(line: 925, column: 5, scope: !4313)
!4387 = !DILocation(line: 925, column: 11, scope: !4313)
!4388 = !DILocation(line: 926, column: 12, scope: !4313)
!4389 = !DILocation(line: 926, column: 5, scope: !4313)
!4390 = !DILocalVariable(name: "n", arg: 1, scope: !4391, file: !241, line: 877, type: !53)
!4391 = distinct !DISubprogram(name: "quotearg_n_options", scope: !241, file: !241, line: 877, type: !4392, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4403, retainedNodes: !4)
!4392 = !DISubroutineType(types: !4393)
!4393 = !{!6, !53, !49, !110, !4394}
!4394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4395, size: 64)
!4395 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4396)
!4396 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4397)
!4397 = !{!4398, !4399, !4400, !4401, !4402}
!4398 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4396, file: !241, line: 68, baseType: !223, size: 32)
!4399 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4396, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4400 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4396, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4401 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4396, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4402 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4396, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4403 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4404, nameTableKind: None)
!4404 = !{!4405, !4407, !4409, !4411, !4413, !4415, !4422, !4424}
!4405 = !DIGlobalVariableExpression(var: !4406, expr: !DIExpression())
!4406 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4403, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4407 = !DIGlobalVariableExpression(var: !4408, expr: !DIExpression())
!4408 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4403, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4409 = !DIGlobalVariableExpression(var: !4410, expr: !DIExpression())
!4410 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4403, file: !241, line: 1052, type: !4396, isLocal: false, isDefinition: true)
!4411 = !DIGlobalVariableExpression(var: !4412, expr: !DIExpression())
!4412 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4403, file: !241, line: 116, type: !4396, isLocal: true, isDefinition: true)
!4413 = !DIGlobalVariableExpression(var: !4414, expr: !DIExpression())
!4414 = distinct !DIGlobalVariable(name: "slot0", scope: !4403, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4415 = !DIGlobalVariableExpression(var: !4416, expr: !DIExpression())
!4416 = distinct !DIGlobalVariable(name: "slotvec", scope: !4403, file: !241, line: 845, type: !4417, isLocal: true, isDefinition: true)
!4417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4418, size: 64)
!4418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4419)
!4419 = !{!4420, !4421}
!4420 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4418, file: !241, line: 836, baseType: !110, size: 64)
!4421 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4418, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4422 = !DIGlobalVariableExpression(var: !4423, expr: !DIExpression())
!4423 = distinct !DIGlobalVariable(name: "nslots", scope: !4403, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4424 = !DIGlobalVariableExpression(var: !4425, expr: !DIExpression())
!4425 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4403, file: !241, line: 844, type: !4418, isLocal: true, isDefinition: true)
!4426 = !DILocalVariable(name: "arg", arg: 2, scope: !4391, file: !241, line: 877, type: !49)
!4427 = !DILocalVariable(name: "argsize", arg: 3, scope: !4391, file: !241, line: 877, type: !110)
!4428 = !DILocalVariable(name: "options", arg: 4, scope: !4391, file: !241, line: 878, type: !4394)
!4429 = !DILocalVariable(name: "e", scope: !4391, file: !241, line: 880, type: !53)
!4430 = !DILocalVariable(name: "sv", scope: !4391, file: !241, line: 882, type: !4417)
!4431 = !DILocalVariable(name: "nmax", scope: !4432, file: !241, line: 890, type: !53)
!4432 = distinct !DILexicalBlock(scope: !4433, file: !241, line: 888, column: 5)
!4433 = distinct !DILexicalBlock(scope: !4434, file: !241, line: 887, column: 7)
!4434 = distinct !DISubprogram(name: "quotearg_n_options", scope: !241, file: !241, line: 877, type: !4435, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4446, retainedNodes: !4)
!4435 = !DISubroutineType(types: !4436)
!4436 = !{!6, !53, !49, !110, !4437}
!4437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4438, size: 64)
!4438 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4439)
!4439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4440)
!4440 = !{!4441, !4442, !4443, !4444, !4445}
!4441 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4439, file: !241, line: 68, baseType: !223, size: 32)
!4442 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4439, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4443 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4439, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4444 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4439, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4445 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4439, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4446 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4447, nameTableKind: None)
!4447 = !{!4448, !4450, !4452, !4454, !4456, !4458, !4465, !4467}
!4448 = !DIGlobalVariableExpression(var: !4449, expr: !DIExpression())
!4449 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4446, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4450 = !DIGlobalVariableExpression(var: !4451, expr: !DIExpression())
!4451 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4446, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4452 = !DIGlobalVariableExpression(var: !4453, expr: !DIExpression())
!4453 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4446, file: !241, line: 1052, type: !4439, isLocal: false, isDefinition: true)
!4454 = !DIGlobalVariableExpression(var: !4455, expr: !DIExpression())
!4455 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4446, file: !241, line: 116, type: !4439, isLocal: true, isDefinition: true)
!4456 = !DIGlobalVariableExpression(var: !4457, expr: !DIExpression())
!4457 = distinct !DIGlobalVariable(name: "slot0", scope: !4446, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4458 = !DIGlobalVariableExpression(var: !4459, expr: !DIExpression())
!4459 = distinct !DIGlobalVariable(name: "slotvec", scope: !4446, file: !241, line: 845, type: !4460, isLocal: true, isDefinition: true)
!4460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4461, size: 64)
!4461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4462)
!4462 = !{!4463, !4464}
!4463 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4461, file: !241, line: 836, baseType: !110, size: 64)
!4464 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4461, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4465 = !DIGlobalVariableExpression(var: !4466, expr: !DIExpression())
!4466 = distinct !DIGlobalVariable(name: "nslots", scope: !4446, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4467 = !DIGlobalVariableExpression(var: !4468, expr: !DIExpression())
!4468 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4446, file: !241, line: 844, type: !4461, isLocal: true, isDefinition: true)
!4469 = !DILocalVariable(name: "val", scope: !4470, file: !241, line: 904, type: !6)
!4470 = distinct !DILexicalBlock(scope: !4471, file: !241, line: 902, column: 3)
!4471 = distinct !DISubprogram(name: "quotearg_n_options", scope: !241, file: !241, line: 877, type: !4472, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4483, retainedNodes: !4)
!4472 = !DISubroutineType(types: !4473)
!4473 = !{!6, !53, !49, !110, !4474}
!4474 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4475, size: 64)
!4475 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4476)
!4476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4477)
!4477 = !{!4478, !4479, !4480, !4481, !4482}
!4478 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4476, file: !241, line: 68, baseType: !223, size: 32)
!4479 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4476, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4480 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4476, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4481 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4476, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4482 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4476, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4483 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4484, nameTableKind: None)
!4484 = !{!4485, !4487, !4489, !4491, !4493, !4495, !4502, !4504}
!4485 = !DIGlobalVariableExpression(var: !4486, expr: !DIExpression())
!4486 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4483, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4487 = !DIGlobalVariableExpression(var: !4488, expr: !DIExpression())
!4488 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4483, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4489 = !DIGlobalVariableExpression(var: !4490, expr: !DIExpression())
!4490 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4483, file: !241, line: 1052, type: !4476, isLocal: false, isDefinition: true)
!4491 = !DIGlobalVariableExpression(var: !4492, expr: !DIExpression())
!4492 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4483, file: !241, line: 116, type: !4476, isLocal: true, isDefinition: true)
!4493 = !DIGlobalVariableExpression(var: !4494, expr: !DIExpression())
!4494 = distinct !DIGlobalVariable(name: "slot0", scope: !4483, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4495 = !DIGlobalVariableExpression(var: !4496, expr: !DIExpression())
!4496 = distinct !DIGlobalVariable(name: "slotvec", scope: !4483, file: !241, line: 845, type: !4497, isLocal: true, isDefinition: true)
!4497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4498, size: 64)
!4498 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4499)
!4499 = !{!4500, !4501}
!4500 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4498, file: !241, line: 836, baseType: !110, size: 64)
!4501 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4498, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4502 = !DIGlobalVariableExpression(var: !4503, expr: !DIExpression())
!4503 = distinct !DIGlobalVariable(name: "nslots", scope: !4483, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4504 = !DIGlobalVariableExpression(var: !4505, expr: !DIExpression())
!4505 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4483, file: !241, line: 844, type: !4498, isLocal: true, isDefinition: true)
!4506 = !DILocalVariable(name: "flags", scope: !4470, file: !241, line: 906, type: !53)
!4507 = !DILocalVariable(name: "qsize", scope: !4470, file: !241, line: 907, type: !110)
!4508 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !241, file: !241, line: 256, type: !4509, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4509 = !DISubroutineType(types: !4510)
!4510 = !{!110, !6, !110, !49, !110, !223, !53, !4511, !49, !49}
!4511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4512, size: 64)
!4512 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !180)
!4513 = !DILocalVariable(name: "buffer", arg: 1, scope: !4508, file: !241, line: 256, type: !6)
!4514 = !DILocation(line: 256, column: 33, scope: !4508)
!4515 = !DILocalVariable(name: "buffersize", arg: 2, scope: !4508, file: !241, line: 256, type: !110)
!4516 = !DILocation(line: 256, column: 48, scope: !4508)
!4517 = !DILocalVariable(name: "arg", arg: 3, scope: !4508, file: !241, line: 257, type: !49)
!4518 = !DILocation(line: 257, column: 39, scope: !4508)
!4519 = !DILocalVariable(name: "argsize", arg: 4, scope: !4508, file: !241, line: 257, type: !110)
!4520 = !DILocation(line: 257, column: 51, scope: !4508)
!4521 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !4508, file: !241, line: 258, type: !223)
!4522 = !DILocation(line: 258, column: 46, scope: !4508)
!4523 = !DILocalVariable(name: "flags", arg: 6, scope: !4508, file: !241, line: 258, type: !53)
!4524 = !DILocation(line: 258, column: 65, scope: !4508)
!4525 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !4508, file: !241, line: 259, type: !4511)
!4526 = !DILocation(line: 259, column: 47, scope: !4508)
!4527 = !DILocalVariable(name: "left_quote", arg: 8, scope: !4508, file: !241, line: 260, type: !49)
!4528 = !DILocation(line: 260, column: 39, scope: !4508)
!4529 = !DILocalVariable(name: "right_quote", arg: 9, scope: !4508, file: !241, line: 261, type: !49)
!4530 = !DILocation(line: 261, column: 39, scope: !4508)
!4531 = !DILocalVariable(name: "i", scope: !4508, file: !241, line: 263, type: !110)
!4532 = !DILocation(line: 263, column: 10, scope: !4508)
!4533 = !DILocalVariable(name: "len", scope: !4508, file: !241, line: 264, type: !110)
!4534 = !DILocation(line: 264, column: 10, scope: !4508)
!4535 = !DILocalVariable(name: "orig_buffersize", scope: !4508, file: !241, line: 265, type: !110)
!4536 = !DILocation(line: 265, column: 10, scope: !4508)
!4537 = !DILocalVariable(name: "quote_string", scope: !4508, file: !241, line: 266, type: !49)
!4538 = !DILocation(line: 266, column: 15, scope: !4508)
!4539 = !DILocalVariable(name: "quote_string_len", scope: !4508, file: !241, line: 267, type: !110)
!4540 = !DILocation(line: 267, column: 10, scope: !4508)
!4541 = !DILocalVariable(name: "backslash_escapes", scope: !4508, file: !241, line: 268, type: !18)
!4542 = !DILocation(line: 268, column: 8, scope: !4508)
!4543 = !DILocalVariable(name: "unibyte_locale", scope: !4508, file: !241, line: 269, type: !18)
!4544 = !DILocation(line: 269, column: 8, scope: !4508)
!4545 = !DILocation(line: 269, column: 25, scope: !4508)
!4546 = !DILocation(line: 269, column: 36, scope: !4508)
!4547 = !DILocalVariable(name: "elide_outer_quotes", scope: !4508, file: !241, line: 270, type: !18)
!4548 = !DILocation(line: 270, column: 8, scope: !4508)
!4549 = !DILocation(line: 270, column: 30, scope: !4508)
!4550 = !DILocation(line: 270, column: 36, scope: !4508)
!4551 = !DILocation(line: 270, column: 61, scope: !4508)
!4552 = !DILocalVariable(name: "pending_shell_escape_end", scope: !4508, file: !241, line: 271, type: !18)
!4553 = !DILocation(line: 271, column: 8, scope: !4508)
!4554 = !DILocalVariable(name: "encountered_single_quote", scope: !4508, file: !241, line: 272, type: !18)
!4555 = !DILocation(line: 272, column: 8, scope: !4508)
!4556 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !4508, file: !241, line: 273, type: !18)
!4557 = !DILocation(line: 273, column: 8, scope: !4508)
!4558 = !DILocation(line: 273, column: 3, scope: !4508)
!4559 = !DILabel(scope: !4508, name: "process_input", file: !241, line: 314)
!4560 = !DILocation(line: 314, column: 2, scope: !4508)
!4561 = !DILocation(line: 316, column: 11, scope: !4508)
!4562 = !DILocation(line: 316, column: 3, scope: !4508)
!4563 = !DILocation(line: 319, column: 21, scope: !4564)
!4564 = distinct !DILexicalBlock(scope: !4508, file: !241, line: 317, column: 5)
!4565 = !DILocation(line: 320, column: 26, scope: !4564)
!4566 = !DILocation(line: 321, column: 7, scope: !4564)
!4567 = !DILocation(line: 323, column: 12, scope: !4568)
!4568 = distinct !DILexicalBlock(scope: !4564, file: !241, line: 323, column: 11)
!4569 = !DILocation(line: 323, column: 11, scope: !4564)
!4570 = !DILocation(line: 324, column: 9, scope: !4568)
!4571 = !DILocation(line: 324, column: 9, scope: !4572)
!4572 = distinct !DILexicalBlock(scope: !4573, file: !241, line: 324, column: 9)
!4573 = distinct !DILexicalBlock(scope: !4568, file: !241, line: 324, column: 9)
!4574 = !DILocation(line: 324, column: 9, scope: !4573)
!4575 = !DILocation(line: 325, column: 25, scope: !4564)
!4576 = !DILocation(line: 326, column: 20, scope: !4564)
!4577 = !DILocation(line: 327, column: 24, scope: !4564)
!4578 = !DILocation(line: 328, column: 7, scope: !4564)
!4579 = !DILocation(line: 331, column: 25, scope: !4564)
!4580 = !DILocation(line: 332, column: 26, scope: !4564)
!4581 = !DILocation(line: 333, column: 7, scope: !4564)
!4582 = !DILocation(line: 339, column: 13, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4584, file: !241, line: 339, column: 13)
!4584 = distinct !DILexicalBlock(scope: !4564, file: !241, line: 338, column: 7)
!4585 = !DILocation(line: 339, column: 27, scope: !4583)
!4586 = !DILocation(line: 339, column: 13, scope: !4584)
!4587 = !DILocation(line: 362, column: 50, scope: !4588)
!4588 = distinct !DILexicalBlock(scope: !4583, file: !241, line: 340, column: 11)
!4589 = !DILocation(line: 362, column: 26, scope: !4588)
!4590 = !DILocation(line: 362, column: 24, scope: !4588)
!4591 = !DILocation(line: 363, column: 51, scope: !4588)
!4592 = !DILocation(line: 363, column: 27, scope: !4588)
!4593 = !DILocation(line: 363, column: 25, scope: !4588)
!4594 = !DILocation(line: 364, column: 11, scope: !4588)
!4595 = !DILocation(line: 365, column: 14, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4584, file: !241, line: 365, column: 13)
!4597 = !DILocation(line: 365, column: 13, scope: !4584)
!4598 = !DILocation(line: 366, column: 31, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4596, file: !241, line: 366, column: 11)
!4600 = !DILocation(line: 366, column: 29, scope: !4599)
!4601 = !DILocation(line: 366, column: 16, scope: !4599)
!4602 = !DILocation(line: 366, column: 44, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4599, file: !241, line: 366, column: 11)
!4604 = !DILocation(line: 366, column: 43, scope: !4603)
!4605 = !DILocation(line: 366, column: 11, scope: !4599)
!4606 = !DILocation(line: 367, column: 13, scope: !4603)
!4607 = !DILocation(line: 367, column: 13, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4609, file: !241, line: 367, column: 13)
!4609 = distinct !DILexicalBlock(scope: !4603, file: !241, line: 367, column: 13)
!4610 = !DILocation(line: 367, column: 13, scope: !4609)
!4611 = !DILocation(line: 366, column: 70, scope: !4603)
!4612 = !DILocation(line: 366, column: 11, scope: !4603)
!4613 = distinct !{!4613, !4605, !4614}
!4614 = !DILocation(line: 367, column: 13, scope: !4599)
!4615 = !DILocation(line: 368, column: 27, scope: !4584)
!4616 = !DILocation(line: 369, column: 24, scope: !4584)
!4617 = !DILocation(line: 369, column: 22, scope: !4584)
!4618 = !DILocation(line: 370, column: 36, scope: !4584)
!4619 = !DILocation(line: 370, column: 28, scope: !4584)
!4620 = !DILocation(line: 370, column: 26, scope: !4584)
!4621 = !DILocation(line: 372, column: 7, scope: !4564)
!4622 = !DILocation(line: 375, column: 25, scope: !4564)
!4623 = !DILocation(line: 376, column: 7, scope: !4564)
!4624 = !DILocation(line: 378, column: 26, scope: !4564)
!4625 = !DILocation(line: 379, column: 7, scope: !4564)
!4626 = !DILocation(line: 381, column: 12, scope: !4627)
!4627 = distinct !DILexicalBlock(scope: !4564, file: !241, line: 381, column: 11)
!4628 = !DILocation(line: 381, column: 11, scope: !4564)
!4629 = !DILocation(line: 382, column: 27, scope: !4627)
!4630 = !DILocation(line: 382, column: 9, scope: !4627)
!4631 = !DILocation(line: 383, column: 7, scope: !4564)
!4632 = !DILocation(line: 385, column: 21, scope: !4564)
!4633 = !DILocation(line: 386, column: 12, scope: !4634)
!4634 = distinct !DILexicalBlock(scope: !4564, file: !241, line: 386, column: 11)
!4635 = !DILocation(line: 386, column: 11, scope: !4564)
!4636 = !DILocation(line: 387, column: 9, scope: !4634)
!4637 = !DILocation(line: 387, column: 9, scope: !4638)
!4638 = distinct !DILexicalBlock(scope: !4639, file: !241, line: 387, column: 9)
!4639 = distinct !DILexicalBlock(scope: !4634, file: !241, line: 387, column: 9)
!4640 = !DILocation(line: 387, column: 9, scope: !4639)
!4641 = !DILocation(line: 388, column: 20, scope: !4564)
!4642 = !DILocation(line: 389, column: 24, scope: !4564)
!4643 = !DILocation(line: 390, column: 7, scope: !4564)
!4644 = !DILocation(line: 393, column: 26, scope: !4564)
!4645 = !DILocation(line: 394, column: 7, scope: !4564)
!4646 = !DILocation(line: 397, column: 7, scope: !4564)
!4647 = !DILocation(line: 400, column: 10, scope: !4648)
!4648 = distinct !DILexicalBlock(scope: !4508, file: !241, line: 400, column: 3)
!4649 = !DILocation(line: 400, column: 8, scope: !4648)
!4650 = !DILocation(line: 400, column: 19, scope: !4651)
!4651 = distinct !DILexicalBlock(scope: !4648, file: !241, line: 400, column: 3)
!4652 = !DILocation(line: 400, column: 27, scope: !4651)
!4653 = !DILocation(line: 400, column: 41, scope: !4651)
!4654 = !DILocation(line: 400, column: 45, scope: !4651)
!4655 = !DILocation(line: 400, column: 48, scope: !4651)
!4656 = !DILocation(line: 400, column: 58, scope: !4651)
!4657 = !DILocation(line: 400, column: 63, scope: !4651)
!4658 = !DILocation(line: 400, column: 60, scope: !4651)
!4659 = !DILocation(line: 400, column: 16, scope: !4651)
!4660 = !DILocation(line: 400, column: 3, scope: !4648)
!4661 = !DILocalVariable(name: "c", scope: !4662, file: !241, line: 402, type: !317)
!4662 = distinct !DILexicalBlock(scope: !4651, file: !241, line: 401, column: 5)
!4663 = !DILocation(line: 402, column: 21, scope: !4662)
!4664 = !DILocalVariable(name: "esc", scope: !4662, file: !241, line: 403, type: !317)
!4665 = !DILocation(line: 403, column: 21, scope: !4662)
!4666 = !DILocalVariable(name: "is_right_quote", scope: !4662, file: !241, line: 404, type: !18)
!4667 = !DILocation(line: 404, column: 12, scope: !4662)
!4668 = !DILocalVariable(name: "escaping", scope: !4662, file: !241, line: 405, type: !18)
!4669 = !DILocation(line: 405, column: 12, scope: !4662)
!4670 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !4662, file: !241, line: 406, type: !18)
!4671 = !DILocation(line: 406, column: 12, scope: !4662)
!4672 = !DILocation(line: 408, column: 11, scope: !4673)
!4673 = distinct !DILexicalBlock(scope: !4662, file: !241, line: 408, column: 11)
!4674 = !DILocation(line: 409, column: 11, scope: !4673)
!4675 = !DILocation(line: 409, column: 14, scope: !4673)
!4676 = !DILocation(line: 409, column: 28, scope: !4673)
!4677 = !DILocation(line: 410, column: 11, scope: !4673)
!4678 = !DILocation(line: 410, column: 14, scope: !4673)
!4679 = !DILocation(line: 411, column: 11, scope: !4673)
!4680 = !DILocation(line: 411, column: 15, scope: !4673)
!4681 = !DILocation(line: 411, column: 19, scope: !4673)
!4682 = !DILocation(line: 411, column: 17, scope: !4673)
!4683 = !DILocation(line: 412, column: 19, scope: !4673)
!4684 = !DILocation(line: 412, column: 27, scope: !4673)
!4685 = !DILocation(line: 412, column: 39, scope: !4673)
!4686 = !DILocation(line: 412, column: 46, scope: !4673)
!4687 = !DILocation(line: 412, column: 44, scope: !4673)
!4688 = !DILocation(line: 416, column: 40, scope: !4673)
!4689 = !DILocation(line: 416, column: 32, scope: !4673)
!4690 = !DILocation(line: 416, column: 30, scope: !4673)
!4691 = !DILocation(line: 416, column: 48, scope: !4673)
!4692 = !DILocation(line: 412, column: 15, scope: !4673)
!4693 = !DILocation(line: 417, column: 11, scope: !4673)
!4694 = !DILocation(line: 417, column: 22, scope: !4673)
!4695 = !DILocation(line: 417, column: 28, scope: !4673)
!4696 = !DILocation(line: 417, column: 26, scope: !4673)
!4697 = !DILocation(line: 417, column: 31, scope: !4673)
!4698 = !DILocation(line: 417, column: 45, scope: !4673)
!4699 = !DILocation(line: 417, column: 14, scope: !4673)
!4700 = !DILocation(line: 417, column: 63, scope: !4673)
!4701 = !DILocation(line: 408, column: 11, scope: !4662)
!4702 = !DILocation(line: 419, column: 15, scope: !4703)
!4703 = distinct !DILexicalBlock(scope: !4704, file: !241, line: 419, column: 15)
!4704 = distinct !DILexicalBlock(scope: !4673, file: !241, line: 418, column: 9)
!4705 = !DILocation(line: 419, column: 15, scope: !4704)
!4706 = !DILocation(line: 420, column: 13, scope: !4703)
!4707 = !DILocation(line: 421, column: 26, scope: !4704)
!4708 = !DILocation(line: 422, column: 9, scope: !4704)
!4709 = !DILocation(line: 424, column: 11, scope: !4662)
!4710 = !DILocation(line: 424, column: 15, scope: !4662)
!4711 = !DILocation(line: 424, column: 9, scope: !4662)
!4712 = !DILocation(line: 425, column: 15, scope: !4662)
!4713 = !DILocation(line: 425, column: 7, scope: !4662)
!4714 = !DILocation(line: 428, column: 15, scope: !4715)
!4715 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 428, column: 15)
!4716 = distinct !DILexicalBlock(scope: !4662, file: !241, line: 426, column: 9)
!4717 = !DILocation(line: 428, column: 15, scope: !4716)
!4718 = !DILocation(line: 430, column: 15, scope: !4719)
!4719 = distinct !DILexicalBlock(scope: !4715, file: !241, line: 429, column: 13)
!4720 = !DILocation(line: 430, column: 15, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4722, file: !241, line: 430, column: 15)
!4722 = distinct !DILexicalBlock(scope: !4719, file: !241, line: 430, column: 15)
!4723 = !DILocation(line: 430, column: 15, scope: !4722)
!4724 = !DILocation(line: 430, column: 15, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !4722, file: !241, line: 430, column: 15)
!4726 = !DILocation(line: 430, column: 15, scope: !4727)
!4727 = distinct !DILexicalBlock(scope: !4725, file: !241, line: 430, column: 15)
!4728 = !DILocation(line: 430, column: 15, scope: !4729)
!4729 = distinct !DILexicalBlock(scope: !4730, file: !241, line: 430, column: 15)
!4730 = distinct !DILexicalBlock(scope: !4727, file: !241, line: 430, column: 15)
!4731 = !DILocation(line: 430, column: 15, scope: !4730)
!4732 = !DILocation(line: 430, column: 15, scope: !4733)
!4733 = distinct !DILexicalBlock(scope: !4734, file: !241, line: 430, column: 15)
!4734 = distinct !DILexicalBlock(scope: !4727, file: !241, line: 430, column: 15)
!4735 = !DILocation(line: 430, column: 15, scope: !4734)
!4736 = !DILocation(line: 430, column: 15, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !4738, file: !241, line: 430, column: 15)
!4738 = distinct !DILexicalBlock(scope: !4727, file: !241, line: 430, column: 15)
!4739 = !DILocation(line: 430, column: 15, scope: !4738)
!4740 = !DILocation(line: 430, column: 15, scope: !4741)
!4741 = distinct !DILexicalBlock(scope: !4742, file: !241, line: 430, column: 15)
!4742 = distinct !DILexicalBlock(scope: !4722, file: !241, line: 430, column: 15)
!4743 = !DILocation(line: 430, column: 15, scope: !4742)
!4744 = !DILocation(line: 437, column: 19, scope: !4745)
!4745 = distinct !DILexicalBlock(scope: !4719, file: !241, line: 437, column: 19)
!4746 = !DILocation(line: 437, column: 33, scope: !4745)
!4747 = !DILocation(line: 438, column: 19, scope: !4745)
!4748 = !DILocation(line: 438, column: 22, scope: !4745)
!4749 = !DILocation(line: 438, column: 24, scope: !4745)
!4750 = !DILocation(line: 438, column: 30, scope: !4745)
!4751 = !DILocation(line: 438, column: 28, scope: !4745)
!4752 = !DILocation(line: 438, column: 38, scope: !4745)
!4753 = !DILocation(line: 438, column: 48, scope: !4745)
!4754 = !DILocation(line: 438, column: 52, scope: !4745)
!4755 = !DILocation(line: 438, column: 54, scope: !4745)
!4756 = !DILocation(line: 438, column: 45, scope: !4745)
!4757 = !DILocation(line: 438, column: 59, scope: !4745)
!4758 = !DILocation(line: 438, column: 62, scope: !4745)
!4759 = !DILocation(line: 438, column: 66, scope: !4745)
!4760 = !DILocation(line: 438, column: 68, scope: !4745)
!4761 = !DILocation(line: 438, column: 73, scope: !4745)
!4762 = !DILocation(line: 437, column: 19, scope: !4719)
!4763 = !DILocation(line: 440, column: 19, scope: !4764)
!4764 = distinct !DILexicalBlock(scope: !4745, file: !241, line: 439, column: 17)
!4765 = !DILocation(line: 440, column: 19, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4767, file: !241, line: 440, column: 19)
!4767 = distinct !DILexicalBlock(scope: !4764, file: !241, line: 440, column: 19)
!4768 = !DILocation(line: 440, column: 19, scope: !4767)
!4769 = !DILocation(line: 441, column: 19, scope: !4764)
!4770 = !DILocation(line: 441, column: 19, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4772, file: !241, line: 441, column: 19)
!4772 = distinct !DILexicalBlock(scope: !4764, file: !241, line: 441, column: 19)
!4773 = !DILocation(line: 441, column: 19, scope: !4772)
!4774 = !DILocation(line: 442, column: 17, scope: !4764)
!4775 = !DILocation(line: 443, column: 17, scope: !4719)
!4776 = !DILocation(line: 448, column: 13, scope: !4719)
!4777 = !DILocation(line: 449, column: 20, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4715, file: !241, line: 449, column: 20)
!4779 = !DILocation(line: 449, column: 26, scope: !4778)
!4780 = !DILocation(line: 449, column: 20, scope: !4715)
!4781 = !DILocation(line: 450, column: 13, scope: !4778)
!4782 = !DILocation(line: 451, column: 11, scope: !4716)
!4783 = !DILocation(line: 454, column: 19, scope: !4716)
!4784 = !DILocation(line: 454, column: 11, scope: !4716)
!4785 = !DILocation(line: 457, column: 19, scope: !4786)
!4786 = distinct !DILexicalBlock(scope: !4787, file: !241, line: 457, column: 19)
!4787 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 455, column: 13)
!4788 = !DILocation(line: 457, column: 19, scope: !4787)
!4789 = !DILocation(line: 458, column: 17, scope: !4786)
!4790 = !DILocation(line: 459, column: 15, scope: !4787)
!4791 = !DILocation(line: 462, column: 20, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4787, file: !241, line: 462, column: 19)
!4793 = !DILocation(line: 462, column: 26, scope: !4792)
!4794 = !DILocation(line: 463, column: 19, scope: !4792)
!4795 = !DILocation(line: 463, column: 22, scope: !4792)
!4796 = !DILocation(line: 463, column: 24, scope: !4792)
!4797 = !DILocation(line: 463, column: 30, scope: !4792)
!4798 = !DILocation(line: 463, column: 28, scope: !4792)
!4799 = !DILocation(line: 463, column: 38, scope: !4792)
!4800 = !DILocation(line: 463, column: 41, scope: !4792)
!4801 = !DILocation(line: 463, column: 45, scope: !4792)
!4802 = !DILocation(line: 463, column: 47, scope: !4792)
!4803 = !DILocation(line: 463, column: 52, scope: !4792)
!4804 = !DILocation(line: 462, column: 19, scope: !4787)
!4805 = !DILocation(line: 464, column: 25, scope: !4792)
!4806 = !DILocation(line: 464, column: 29, scope: !4792)
!4807 = !DILocation(line: 464, column: 31, scope: !4792)
!4808 = !DILocation(line: 464, column: 17, scope: !4792)
!4809 = !DILocation(line: 471, column: 25, scope: !4810)
!4810 = distinct !DILexicalBlock(scope: !4811, file: !241, line: 471, column: 25)
!4811 = distinct !DILexicalBlock(scope: !4792, file: !241, line: 465, column: 19)
!4812 = !DILocation(line: 471, column: 25, scope: !4811)
!4813 = !DILocation(line: 472, column: 23, scope: !4810)
!4814 = !DILocation(line: 473, column: 25, scope: !4811)
!4815 = !DILocation(line: 473, column: 29, scope: !4811)
!4816 = !DILocation(line: 473, column: 31, scope: !4811)
!4817 = !DILocation(line: 473, column: 23, scope: !4811)
!4818 = !DILocation(line: 474, column: 23, scope: !4811)
!4819 = !DILocation(line: 475, column: 21, scope: !4811)
!4820 = !DILocation(line: 475, column: 21, scope: !4821)
!4821 = distinct !DILexicalBlock(scope: !4822, file: !241, line: 475, column: 21)
!4822 = distinct !DILexicalBlock(scope: !4811, file: !241, line: 475, column: 21)
!4823 = !DILocation(line: 475, column: 21, scope: !4822)
!4824 = !DILocation(line: 476, column: 21, scope: !4811)
!4825 = !DILocation(line: 476, column: 21, scope: !4826)
!4826 = distinct !DILexicalBlock(scope: !4827, file: !241, line: 476, column: 21)
!4827 = distinct !DILexicalBlock(scope: !4811, file: !241, line: 476, column: 21)
!4828 = !DILocation(line: 476, column: 21, scope: !4827)
!4829 = !DILocation(line: 477, column: 21, scope: !4811)
!4830 = !DILocation(line: 477, column: 21, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !4832, file: !241, line: 477, column: 21)
!4832 = distinct !DILexicalBlock(scope: !4811, file: !241, line: 477, column: 21)
!4833 = !DILocation(line: 477, column: 21, scope: !4832)
!4834 = !DILocation(line: 478, column: 21, scope: !4811)
!4835 = !DILocation(line: 478, column: 21, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4837, file: !241, line: 478, column: 21)
!4837 = distinct !DILexicalBlock(scope: !4811, file: !241, line: 478, column: 21)
!4838 = !DILocation(line: 478, column: 21, scope: !4837)
!4839 = !DILocation(line: 479, column: 21, scope: !4811)
!4840 = !DILocation(line: 482, column: 21, scope: !4811)
!4841 = !DILocation(line: 483, column: 19, scope: !4811)
!4842 = !DILocation(line: 484, column: 15, scope: !4787)
!4843 = !DILocation(line: 487, column: 15, scope: !4787)
!4844 = !DILocation(line: 489, column: 11, scope: !4716)
!4845 = !DILocation(line: 491, column: 24, scope: !4716)
!4846 = !DILocation(line: 491, column: 31, scope: !4716)
!4847 = !DILocation(line: 492, column: 24, scope: !4716)
!4848 = !DILocation(line: 492, column: 31, scope: !4716)
!4849 = !DILocation(line: 493, column: 24, scope: !4716)
!4850 = !DILocation(line: 493, column: 31, scope: !4716)
!4851 = !DILocation(line: 494, column: 24, scope: !4716)
!4852 = !DILocation(line: 494, column: 31, scope: !4716)
!4853 = !DILocation(line: 495, column: 24, scope: !4716)
!4854 = !DILocation(line: 495, column: 31, scope: !4716)
!4855 = !DILocation(line: 496, column: 24, scope: !4716)
!4856 = !DILocation(line: 496, column: 31, scope: !4716)
!4857 = !DILocation(line: 497, column: 24, scope: !4716)
!4858 = !DILocation(line: 497, column: 31, scope: !4716)
!4859 = !DILocation(line: 498, column: 26, scope: !4716)
!4860 = !DILocation(line: 498, column: 24, scope: !4716)
!4861 = !DILocation(line: 500, column: 15, scope: !4862)
!4862 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 500, column: 15)
!4863 = !DILocation(line: 500, column: 29, scope: !4862)
!4864 = !DILocation(line: 500, column: 15, scope: !4716)
!4865 = !DILocation(line: 502, column: 19, scope: !4866)
!4866 = distinct !DILexicalBlock(scope: !4867, file: !241, line: 502, column: 19)
!4867 = distinct !DILexicalBlock(scope: !4862, file: !241, line: 501, column: 13)
!4868 = !DILocation(line: 502, column: 19, scope: !4867)
!4869 = !DILocation(line: 503, column: 17, scope: !4866)
!4870 = !DILocation(line: 504, column: 15, scope: !4867)
!4871 = !DILocation(line: 509, column: 15, scope: !4872)
!4872 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 509, column: 15)
!4873 = !DILocation(line: 509, column: 33, scope: !4872)
!4874 = !DILocation(line: 509, column: 36, scope: !4872)
!4875 = !DILocation(line: 509, column: 55, scope: !4872)
!4876 = !DILocation(line: 509, column: 58, scope: !4872)
!4877 = !DILocation(line: 509, column: 15, scope: !4716)
!4878 = !DILocation(line: 510, column: 13, scope: !4872)
!4879 = !DILabel(scope: !4716, name: "c_and_shell_escape", file: !241, line: 512)
!4880 = !DILocation(line: 512, column: 9, scope: !4716)
!4881 = !DILocation(line: 513, column: 15, scope: !4882)
!4882 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 513, column: 15)
!4883 = !DILocation(line: 513, column: 29, scope: !4882)
!4884 = !DILocation(line: 514, column: 15, scope: !4882)
!4885 = !DILocation(line: 514, column: 18, scope: !4882)
!4886 = !DILocation(line: 513, column: 15, scope: !4716)
!4887 = !DILocation(line: 515, column: 13, scope: !4882)
!4888 = !DILabel(scope: !4716, name: "c_escape", file: !241, line: 517)
!4889 = !DILocation(line: 517, column: 9, scope: !4716)
!4890 = !DILocation(line: 518, column: 15, scope: !4891)
!4891 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 518, column: 15)
!4892 = !DILocation(line: 518, column: 15, scope: !4716)
!4893 = !DILocation(line: 520, column: 19, scope: !4894)
!4894 = distinct !DILexicalBlock(scope: !4891, file: !241, line: 519, column: 13)
!4895 = !DILocation(line: 520, column: 17, scope: !4894)
!4896 = !DILocation(line: 521, column: 15, scope: !4894)
!4897 = !DILocation(line: 523, column: 11, scope: !4716)
!4898 = !DILocation(line: 526, column: 18, scope: !4899)
!4899 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 526, column: 15)
!4900 = !DILocation(line: 526, column: 26, scope: !4899)
!4901 = !DILocation(line: 526, column: 15, scope: !4716)
!4902 = !DILocation(line: 526, column: 40, scope: !4899)
!4903 = !DILocation(line: 526, column: 47, scope: !4899)
!4904 = !DILocation(line: 526, column: 57, scope: !4899)
!4905 = !DILocation(line: 526, column: 65, scope: !4899)
!4906 = !DILocation(line: 527, column: 13, scope: !4899)
!4907 = !DILocation(line: 528, column: 11, scope: !4716)
!4908 = !DILocation(line: 530, column: 15, scope: !4909)
!4909 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 530, column: 15)
!4910 = !DILocation(line: 530, column: 17, scope: !4909)
!4911 = !DILocation(line: 530, column: 15, scope: !4716)
!4912 = !DILocation(line: 531, column: 13, scope: !4909)
!4913 = !DILocation(line: 532, column: 11, scope: !4716)
!4914 = !DILocation(line: 534, column: 36, scope: !4716)
!4915 = !DILocation(line: 535, column: 11, scope: !4716)
!4916 = !DILocation(line: 548, column: 15, scope: !4917)
!4917 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 548, column: 15)
!4918 = !DILocation(line: 548, column: 29, scope: !4917)
!4919 = !DILocation(line: 549, column: 15, scope: !4917)
!4920 = !DILocation(line: 549, column: 18, scope: !4917)
!4921 = !DILocation(line: 548, column: 15, scope: !4716)
!4922 = !DILocation(line: 550, column: 13, scope: !4917)
!4923 = !DILocation(line: 551, column: 11, scope: !4716)
!4924 = !DILocation(line: 554, column: 36, scope: !4716)
!4925 = !DILocation(line: 555, column: 36, scope: !4716)
!4926 = !DILocation(line: 556, column: 15, scope: !4927)
!4927 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 556, column: 15)
!4928 = !DILocation(line: 556, column: 29, scope: !4927)
!4929 = !DILocation(line: 556, column: 15, scope: !4716)
!4930 = !DILocation(line: 558, column: 19, scope: !4931)
!4931 = distinct !DILexicalBlock(scope: !4932, file: !241, line: 558, column: 19)
!4932 = distinct !DILexicalBlock(scope: !4927, file: !241, line: 557, column: 13)
!4933 = !DILocation(line: 558, column: 19, scope: !4932)
!4934 = !DILocation(line: 559, column: 17, scope: !4931)
!4935 = !DILocation(line: 561, column: 19, scope: !4936)
!4936 = distinct !DILexicalBlock(scope: !4932, file: !241, line: 561, column: 19)
!4937 = !DILocation(line: 561, column: 30, scope: !4936)
!4938 = !DILocation(line: 561, column: 35, scope: !4936)
!4939 = !DILocation(line: 561, column: 19, scope: !4932)
!4940 = !DILocation(line: 566, column: 37, scope: !4941)
!4941 = distinct !DILexicalBlock(scope: !4936, file: !241, line: 562, column: 17)
!4942 = !DILocation(line: 566, column: 35, scope: !4941)
!4943 = !DILocation(line: 567, column: 30, scope: !4941)
!4944 = !DILocation(line: 568, column: 17, scope: !4941)
!4945 = !DILocation(line: 570, column: 15, scope: !4932)
!4946 = !DILocation(line: 570, column: 15, scope: !4947)
!4947 = distinct !DILexicalBlock(scope: !4948, file: !241, line: 570, column: 15)
!4948 = distinct !DILexicalBlock(scope: !4932, file: !241, line: 570, column: 15)
!4949 = !DILocation(line: 570, column: 15, scope: !4948)
!4950 = !DILocation(line: 571, column: 15, scope: !4932)
!4951 = !DILocation(line: 571, column: 15, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4953, file: !241, line: 571, column: 15)
!4953 = distinct !DILexicalBlock(scope: !4932, file: !241, line: 571, column: 15)
!4954 = !DILocation(line: 571, column: 15, scope: !4953)
!4955 = !DILocation(line: 572, column: 15, scope: !4932)
!4956 = !DILocation(line: 572, column: 15, scope: !4957)
!4957 = distinct !DILexicalBlock(scope: !4958, file: !241, line: 572, column: 15)
!4958 = distinct !DILexicalBlock(scope: !4932, file: !241, line: 572, column: 15)
!4959 = !DILocation(line: 572, column: 15, scope: !4958)
!4960 = !DILocation(line: 573, column: 40, scope: !4932)
!4961 = !DILocation(line: 574, column: 13, scope: !4932)
!4962 = !DILocation(line: 575, column: 11, scope: !4716)
!4963 = !DILocation(line: 599, column: 36, scope: !4716)
!4964 = !DILocation(line: 600, column: 11, scope: !4716)
!4965 = !DILocalVariable(name: "m", scope: !4966, file: !241, line: 610, type: !110)
!4966 = distinct !DILexicalBlock(scope: !4716, file: !241, line: 608, column: 11)
!4967 = !DILocation(line: 610, column: 20, scope: !4966)
!4968 = !DILocalVariable(name: "printable", scope: !4966, file: !241, line: 612, type: !18)
!4969 = !DILocation(line: 612, column: 18, scope: !4966)
!4970 = !DILocation(line: 614, column: 17, scope: !4971)
!4971 = distinct !DILexicalBlock(scope: !4966, file: !241, line: 614, column: 17)
!4972 = !DILocation(line: 614, column: 17, scope: !4966)
!4973 = !DILocation(line: 616, column: 19, scope: !4974)
!4974 = distinct !DILexicalBlock(scope: !4971, file: !241, line: 615, column: 15)
!4975 = !DILocation(line: 617, column: 29, scope: !4974)
!4976 = !DILocation(line: 617, column: 41, scope: !4974)
!4977 = !DILocation(line: 617, column: 27, scope: !4974)
!4978 = !DILocation(line: 618, column: 15, scope: !4974)
!4979 = !DILocalVariable(name: "mbstate", scope: !4980, file: !241, line: 621, type: !4981)
!4980 = distinct !DILexicalBlock(scope: !4971, file: !241, line: 620, column: 15)
!4981 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !4982, line: 6, baseType: !4983)
!4982 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!4983 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !4984, line: 21, baseType: !4985)
!4984 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!4985 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4984, line: 13, size: 64, elements: !4986)
!4986 = !{!4987, !4988}
!4987 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !4985, file: !4984, line: 15, baseType: !53, size: 32)
!4988 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !4985, file: !4984, line: 20, baseType: !4989, size: 32, offset: 32)
!4989 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4985, file: !4984, line: 16, size: 32, elements: !4990)
!4990 = !{!4991, !4992}
!4991 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !4989, file: !4984, line: 18, baseType: !180, size: 32)
!4992 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !4989, file: !4984, line: 19, baseType: !82, size: 32)
!4993 = !DILocation(line: 621, column: 27, scope: !4980)
!4994 = !DILocation(line: 622, column: 17, scope: !4980)
!4995 = !DILocation(line: 624, column: 19, scope: !4980)
!4996 = !DILocation(line: 625, column: 27, scope: !4980)
!4997 = !DILocation(line: 626, column: 21, scope: !4998)
!4998 = distinct !DILexicalBlock(scope: !4980, file: !241, line: 626, column: 21)
!4999 = !DILocation(line: 626, column: 29, scope: !4998)
!5000 = !DILocation(line: 626, column: 21, scope: !4980)
!5001 = !DILocation(line: 627, column: 37, scope: !4998)
!5002 = !DILocation(line: 627, column: 29, scope: !4998)
!5003 = !DILocation(line: 627, column: 27, scope: !4998)
!5004 = !DILocation(line: 627, column: 19, scope: !4998)
!5005 = !DILocation(line: 629, column: 17, scope: !4980)
!5006 = !DILocalVariable(name: "w", scope: !5007, file: !241, line: 631, type: !5008)
!5007 = distinct !DILexicalBlock(scope: !4980, file: !241, line: 630, column: 19)
!5008 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !111, line: 74, baseType: !53)
!5009 = !DILocation(line: 631, column: 29, scope: !5007)
!5010 = !DILocalVariable(name: "bytes", scope: !5007, file: !241, line: 632, type: !110)
!5011 = !DILocation(line: 632, column: 28, scope: !5007)
!5012 = !DILocation(line: 632, column: 50, scope: !5007)
!5013 = !DILocation(line: 632, column: 54, scope: !5007)
!5014 = !DILocation(line: 632, column: 58, scope: !5007)
!5015 = !DILocation(line: 632, column: 56, scope: !5007)
!5016 = !DILocation(line: 633, column: 45, scope: !5007)
!5017 = !DILocation(line: 633, column: 56, scope: !5007)
!5018 = !DILocation(line: 633, column: 60, scope: !5007)
!5019 = !DILocation(line: 633, column: 58, scope: !5007)
!5020 = !DILocation(line: 633, column: 53, scope: !5007)
!5021 = !DILocation(line: 632, column: 36, scope: !5007)
!5022 = !DILocation(line: 634, column: 25, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !5007, file: !241, line: 634, column: 25)
!5024 = !DILocation(line: 634, column: 31, scope: !5023)
!5025 = !DILocation(line: 634, column: 25, scope: !5007)
!5026 = !DILocation(line: 635, column: 23, scope: !5023)
!5027 = !DILocation(line: 636, column: 30, scope: !5028)
!5028 = distinct !DILexicalBlock(scope: !5023, file: !241, line: 636, column: 30)
!5029 = !DILocation(line: 636, column: 36, scope: !5028)
!5030 = !DILocation(line: 636, column: 30, scope: !5023)
!5031 = !DILocation(line: 638, column: 35, scope: !5032)
!5032 = distinct !DILexicalBlock(scope: !5028, file: !241, line: 637, column: 23)
!5033 = !DILocation(line: 639, column: 25, scope: !5032)
!5034 = !DILocation(line: 641, column: 30, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !5028, file: !241, line: 641, column: 30)
!5036 = !DILocation(line: 641, column: 36, scope: !5035)
!5037 = !DILocation(line: 641, column: 30, scope: !5028)
!5038 = !DILocation(line: 643, column: 35, scope: !5039)
!5039 = distinct !DILexicalBlock(scope: !5035, file: !241, line: 642, column: 23)
!5040 = !DILocation(line: 644, column: 25, scope: !5039)
!5041 = !DILocation(line: 644, column: 32, scope: !5039)
!5042 = !DILocation(line: 644, column: 36, scope: !5039)
!5043 = !DILocation(line: 644, column: 34, scope: !5039)
!5044 = !DILocation(line: 644, column: 40, scope: !5039)
!5045 = !DILocation(line: 644, column: 38, scope: !5039)
!5046 = !DILocation(line: 644, column: 48, scope: !5039)
!5047 = !DILocation(line: 644, column: 51, scope: !5039)
!5048 = !DILocation(line: 644, column: 55, scope: !5039)
!5049 = !DILocation(line: 644, column: 59, scope: !5039)
!5050 = !DILocation(line: 644, column: 57, scope: !5039)
!5051 = !DILocation(line: 0, scope: !5039)
!5052 = !DILocation(line: 645, column: 28, scope: !5039)
!5053 = distinct !{!5053, !5040, !5052}
!5054 = !DILocation(line: 646, column: 25, scope: !5039)
!5055 = !DILocation(line: 654, column: 44, scope: !5056)
!5056 = distinct !DILexicalBlock(scope: !5057, file: !241, line: 654, column: 29)
!5057 = distinct !DILexicalBlock(scope: !5035, file: !241, line: 649, column: 23)
!5058 = !DILocation(line: 655, column: 29, scope: !5056)
!5059 = !DILocation(line: 655, column: 32, scope: !5056)
!5060 = !DILocation(line: 655, column: 46, scope: !5056)
!5061 = !DILocation(line: 654, column: 29, scope: !5057)
!5062 = !DILocalVariable(name: "j", scope: !5063, file: !241, line: 657, type: !110)
!5063 = distinct !DILexicalBlock(scope: !5056, file: !241, line: 656, column: 27)
!5064 = !DILocation(line: 657, column: 36, scope: !5063)
!5065 = !DILocation(line: 658, column: 36, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !5063, file: !241, line: 658, column: 29)
!5067 = !DILocation(line: 658, column: 34, scope: !5066)
!5068 = !DILocation(line: 658, column: 41, scope: !5069)
!5069 = distinct !DILexicalBlock(scope: !5066, file: !241, line: 658, column: 29)
!5070 = !DILocation(line: 658, column: 45, scope: !5069)
!5071 = !DILocation(line: 658, column: 43, scope: !5069)
!5072 = !DILocation(line: 658, column: 29, scope: !5066)
!5073 = !DILocation(line: 659, column: 39, scope: !5069)
!5074 = !DILocation(line: 659, column: 43, scope: !5069)
!5075 = !DILocation(line: 659, column: 47, scope: !5069)
!5076 = !DILocation(line: 659, column: 45, scope: !5069)
!5077 = !DILocation(line: 659, column: 51, scope: !5069)
!5078 = !DILocation(line: 659, column: 49, scope: !5069)
!5079 = !DILocation(line: 659, column: 31, scope: !5069)
!5080 = !DILocation(line: 663, column: 35, scope: !5081)
!5081 = distinct !DILexicalBlock(scope: !5069, file: !241, line: 660, column: 33)
!5082 = !DILocation(line: 666, column: 35, scope: !5081)
!5083 = !DILocation(line: 667, column: 33, scope: !5081)
!5084 = !DILocation(line: 658, column: 53, scope: !5069)
!5085 = !DILocation(line: 658, column: 29, scope: !5069)
!5086 = distinct !{!5086, !5072, !5087}
!5087 = !DILocation(line: 667, column: 33, scope: !5066)
!5088 = !DILocation(line: 668, column: 27, scope: !5063)
!5089 = !DILocation(line: 670, column: 41, scope: !5090)
!5090 = distinct !DILexicalBlock(scope: !5057, file: !241, line: 670, column: 29)
!5091 = !DILocation(line: 670, column: 31, scope: !5090)
!5092 = !DILocation(line: 670, column: 29, scope: !5057)
!5093 = !DILocation(line: 671, column: 37, scope: !5090)
!5094 = !DILocation(line: 671, column: 27, scope: !5090)
!5095 = !DILocation(line: 672, column: 30, scope: !5057)
!5096 = !DILocation(line: 672, column: 27, scope: !5057)
!5097 = !DILocation(line: 674, column: 19, scope: !5007)
!5098 = !DILocation(line: 675, column: 26, scope: !4980)
!5099 = !DILocation(line: 675, column: 24, scope: !4980)
!5100 = distinct !{!5100, !5005, !5101}
!5101 = !DILocation(line: 675, column: 44, scope: !4980)
!5102 = !DILocation(line: 678, column: 40, scope: !4966)
!5103 = !DILocation(line: 678, column: 38, scope: !4966)
!5104 = !DILocation(line: 680, column: 21, scope: !5105)
!5105 = distinct !DILexicalBlock(scope: !4966, file: !241, line: 680, column: 17)
!5106 = !DILocation(line: 680, column: 19, scope: !5105)
!5107 = !DILocation(line: 680, column: 23, scope: !5105)
!5108 = !DILocation(line: 680, column: 27, scope: !5105)
!5109 = !DILocation(line: 680, column: 45, scope: !5105)
!5110 = !DILocation(line: 680, column: 50, scope: !5105)
!5111 = !DILocation(line: 680, column: 17, scope: !4966)
!5112 = !DILocalVariable(name: "ilim", scope: !5113, file: !241, line: 684, type: !110)
!5113 = distinct !DILexicalBlock(scope: !5105, file: !241, line: 681, column: 15)
!5114 = !DILocation(line: 684, column: 24, scope: !5113)
!5115 = !DILocation(line: 684, column: 31, scope: !5113)
!5116 = !DILocation(line: 684, column: 35, scope: !5113)
!5117 = !DILocation(line: 684, column: 33, scope: !5113)
!5118 = !DILocation(line: 686, column: 17, scope: !5113)
!5119 = !DILocation(line: 688, column: 25, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5121, file: !241, line: 688, column: 25)
!5121 = distinct !DILexicalBlock(scope: !5122, file: !241, line: 687, column: 19)
!5122 = distinct !DILexicalBlock(scope: !5123, file: !241, line: 686, column: 17)
!5123 = distinct !DILexicalBlock(scope: !5113, file: !241, line: 686, column: 17)
!5124 = !DILocation(line: 688, column: 43, scope: !5120)
!5125 = !DILocation(line: 688, column: 48, scope: !5120)
!5126 = !DILocation(line: 688, column: 25, scope: !5121)
!5127 = !DILocation(line: 690, column: 25, scope: !5128)
!5128 = distinct !DILexicalBlock(scope: !5120, file: !241, line: 689, column: 23)
!5129 = !DILocation(line: 690, column: 25, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !5131, file: !241, line: 690, column: 25)
!5131 = distinct !DILexicalBlock(scope: !5128, file: !241, line: 690, column: 25)
!5132 = !DILocation(line: 690, column: 25, scope: !5131)
!5133 = !DILocation(line: 690, column: 25, scope: !5134)
!5134 = distinct !DILexicalBlock(scope: !5131, file: !241, line: 690, column: 25)
!5135 = !DILocation(line: 690, column: 25, scope: !5136)
!5136 = distinct !DILexicalBlock(scope: !5134, file: !241, line: 690, column: 25)
!5137 = !DILocation(line: 690, column: 25, scope: !5138)
!5138 = distinct !DILexicalBlock(scope: !5139, file: !241, line: 690, column: 25)
!5139 = distinct !DILexicalBlock(scope: !5136, file: !241, line: 690, column: 25)
!5140 = !DILocation(line: 690, column: 25, scope: !5139)
!5141 = !DILocation(line: 690, column: 25, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5143, file: !241, line: 690, column: 25)
!5143 = distinct !DILexicalBlock(scope: !5136, file: !241, line: 690, column: 25)
!5144 = !DILocation(line: 690, column: 25, scope: !5143)
!5145 = !DILocation(line: 690, column: 25, scope: !5146)
!5146 = distinct !DILexicalBlock(scope: !5147, file: !241, line: 690, column: 25)
!5147 = distinct !DILexicalBlock(scope: !5136, file: !241, line: 690, column: 25)
!5148 = !DILocation(line: 690, column: 25, scope: !5147)
!5149 = !DILocation(line: 690, column: 25, scope: !5150)
!5150 = distinct !DILexicalBlock(scope: !5151, file: !241, line: 690, column: 25)
!5151 = distinct !DILexicalBlock(scope: !5131, file: !241, line: 690, column: 25)
!5152 = !DILocation(line: 690, column: 25, scope: !5151)
!5153 = !DILocation(line: 691, column: 25, scope: !5128)
!5154 = !DILocation(line: 691, column: 25, scope: !5155)
!5155 = distinct !DILexicalBlock(scope: !5156, file: !241, line: 691, column: 25)
!5156 = distinct !DILexicalBlock(scope: !5128, file: !241, line: 691, column: 25)
!5157 = !DILocation(line: 691, column: 25, scope: !5156)
!5158 = !DILocation(line: 692, column: 25, scope: !5128)
!5159 = !DILocation(line: 692, column: 25, scope: !5160)
!5160 = distinct !DILexicalBlock(scope: !5161, file: !241, line: 692, column: 25)
!5161 = distinct !DILexicalBlock(scope: !5128, file: !241, line: 692, column: 25)
!5162 = !DILocation(line: 692, column: 25, scope: !5161)
!5163 = !DILocation(line: 693, column: 36, scope: !5128)
!5164 = !DILocation(line: 693, column: 38, scope: !5128)
!5165 = !DILocation(line: 693, column: 33, scope: !5128)
!5166 = !DILocation(line: 693, column: 29, scope: !5128)
!5167 = !DILocation(line: 693, column: 27, scope: !5128)
!5168 = !DILocation(line: 694, column: 23, scope: !5128)
!5169 = !DILocation(line: 695, column: 30, scope: !5170)
!5170 = distinct !DILexicalBlock(scope: !5120, file: !241, line: 695, column: 30)
!5171 = !DILocation(line: 695, column: 30, scope: !5120)
!5172 = !DILocation(line: 697, column: 25, scope: !5173)
!5173 = distinct !DILexicalBlock(scope: !5170, file: !241, line: 696, column: 23)
!5174 = !DILocation(line: 697, column: 25, scope: !5175)
!5175 = distinct !DILexicalBlock(scope: !5176, file: !241, line: 697, column: 25)
!5176 = distinct !DILexicalBlock(scope: !5173, file: !241, line: 697, column: 25)
!5177 = !DILocation(line: 697, column: 25, scope: !5176)
!5178 = !DILocation(line: 698, column: 40, scope: !5173)
!5179 = !DILocation(line: 699, column: 23, scope: !5173)
!5180 = !DILocation(line: 700, column: 25, scope: !5181)
!5181 = distinct !DILexicalBlock(scope: !5121, file: !241, line: 700, column: 25)
!5182 = !DILocation(line: 700, column: 33, scope: !5181)
!5183 = !DILocation(line: 700, column: 35, scope: !5181)
!5184 = !DILocation(line: 700, column: 30, scope: !5181)
!5185 = !DILocation(line: 700, column: 25, scope: !5121)
!5186 = !DILocation(line: 701, column: 23, scope: !5181)
!5187 = !DILocation(line: 702, column: 21, scope: !5121)
!5188 = !DILocation(line: 702, column: 21, scope: !5189)
!5189 = distinct !DILexicalBlock(scope: !5190, file: !241, line: 702, column: 21)
!5190 = distinct !DILexicalBlock(scope: !5121, file: !241, line: 702, column: 21)
!5191 = !DILocation(line: 702, column: 21, scope: !5190)
!5192 = !DILocation(line: 702, column: 21, scope: !5193)
!5193 = distinct !DILexicalBlock(scope: !5189, file: !241, line: 702, column: 21)
!5194 = !DILocation(line: 702, column: 21, scope: !5195)
!5195 = distinct !DILexicalBlock(scope: !5196, file: !241, line: 702, column: 21)
!5196 = distinct !DILexicalBlock(scope: !5193, file: !241, line: 702, column: 21)
!5197 = !DILocation(line: 702, column: 21, scope: !5196)
!5198 = !DILocation(line: 702, column: 21, scope: !5199)
!5199 = distinct !DILexicalBlock(scope: !5200, file: !241, line: 702, column: 21)
!5200 = distinct !DILexicalBlock(scope: !5193, file: !241, line: 702, column: 21)
!5201 = !DILocation(line: 702, column: 21, scope: !5200)
!5202 = !DILocation(line: 703, column: 21, scope: !5121)
!5203 = !DILocation(line: 703, column: 21, scope: !5204)
!5204 = distinct !DILexicalBlock(scope: !5205, file: !241, line: 703, column: 21)
!5205 = distinct !DILexicalBlock(scope: !5121, file: !241, line: 703, column: 21)
!5206 = !DILocation(line: 703, column: 21, scope: !5205)
!5207 = !DILocation(line: 704, column: 25, scope: !5121)
!5208 = !DILocation(line: 704, column: 29, scope: !5121)
!5209 = !DILocation(line: 704, column: 23, scope: !5121)
!5210 = !DILocation(line: 686, column: 17, scope: !5122)
!5211 = distinct !{!5211, !5212, !5213}
!5212 = !DILocation(line: 686, column: 17, scope: !5123)
!5213 = !DILocation(line: 705, column: 19, scope: !5123)
!5214 = !DILocation(line: 707, column: 17, scope: !5113)
!5215 = !DILocation(line: 710, column: 9, scope: !4716)
!5216 = !DILocation(line: 712, column: 16, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !4662, file: !241, line: 712, column: 11)
!5218 = !DILocation(line: 712, column: 34, scope: !5217)
!5219 = !DILocation(line: 712, column: 37, scope: !5217)
!5220 = !DILocation(line: 712, column: 51, scope: !5217)
!5221 = !DILocation(line: 713, column: 15, scope: !5217)
!5222 = !DILocation(line: 713, column: 18, scope: !5217)
!5223 = !DILocation(line: 714, column: 14, scope: !5217)
!5224 = !DILocation(line: 714, column: 17, scope: !5217)
!5225 = !DILocation(line: 715, column: 14, scope: !5217)
!5226 = !DILocation(line: 715, column: 17, scope: !5217)
!5227 = !DILocation(line: 715, column: 33, scope: !5217)
!5228 = !DILocation(line: 715, column: 35, scope: !5217)
!5229 = !DILocation(line: 715, column: 51, scope: !5217)
!5230 = !DILocation(line: 715, column: 53, scope: !5217)
!5231 = !DILocation(line: 715, column: 47, scope: !5217)
!5232 = !DILocation(line: 715, column: 65, scope: !5217)
!5233 = !DILocation(line: 716, column: 11, scope: !5217)
!5234 = !DILocation(line: 716, column: 15, scope: !5217)
!5235 = !DILocation(line: 712, column: 11, scope: !4662)
!5236 = !DILocation(line: 717, column: 9, scope: !5217)
!5237 = !DILabel(scope: !4662, name: "store_escape", file: !241, line: 719)
!5238 = !DILocation(line: 719, column: 5, scope: !4662)
!5239 = !DILocation(line: 720, column: 7, scope: !4662)
!5240 = !DILocation(line: 720, column: 7, scope: !5241)
!5241 = distinct !DILexicalBlock(scope: !5242, file: !241, line: 720, column: 7)
!5242 = distinct !DILexicalBlock(scope: !4662, file: !241, line: 720, column: 7)
!5243 = !DILocation(line: 720, column: 7, scope: !5242)
!5244 = !DILocation(line: 720, column: 7, scope: !5245)
!5245 = distinct !DILexicalBlock(scope: !5242, file: !241, line: 720, column: 7)
!5246 = !DILocation(line: 720, column: 7, scope: !5247)
!5247 = distinct !DILexicalBlock(scope: !5245, file: !241, line: 720, column: 7)
!5248 = !DILocation(line: 720, column: 7, scope: !5249)
!5249 = distinct !DILexicalBlock(scope: !5250, file: !241, line: 720, column: 7)
!5250 = distinct !DILexicalBlock(scope: !5247, file: !241, line: 720, column: 7)
!5251 = !DILocation(line: 720, column: 7, scope: !5250)
!5252 = !DILocation(line: 720, column: 7, scope: !5253)
!5253 = distinct !DILexicalBlock(scope: !5254, file: !241, line: 720, column: 7)
!5254 = distinct !DILexicalBlock(scope: !5247, file: !241, line: 720, column: 7)
!5255 = !DILocation(line: 720, column: 7, scope: !5254)
!5256 = !DILocation(line: 720, column: 7, scope: !5257)
!5257 = distinct !DILexicalBlock(scope: !5258, file: !241, line: 720, column: 7)
!5258 = distinct !DILexicalBlock(scope: !5247, file: !241, line: 720, column: 7)
!5259 = !DILocation(line: 720, column: 7, scope: !5258)
!5260 = !DILocation(line: 720, column: 7, scope: !5261)
!5261 = distinct !DILexicalBlock(scope: !5262, file: !241, line: 720, column: 7)
!5262 = distinct !DILexicalBlock(scope: !5242, file: !241, line: 720, column: 7)
!5263 = !DILocation(line: 720, column: 7, scope: !5262)
!5264 = !DILabel(scope: !4662, name: "store_c", file: !241, line: 722)
!5265 = !DILocation(line: 722, column: 5, scope: !4662)
!5266 = !DILocation(line: 723, column: 7, scope: !4662)
!5267 = !DILocation(line: 723, column: 7, scope: !5268)
!5268 = distinct !DILexicalBlock(scope: !5269, file: !241, line: 723, column: 7)
!5269 = distinct !DILexicalBlock(scope: !4662, file: !241, line: 723, column: 7)
!5270 = !DILocation(line: 723, column: 7, scope: !5269)
!5271 = !DILocation(line: 723, column: 7, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5268, file: !241, line: 723, column: 7)
!5273 = !DILocation(line: 723, column: 7, scope: !5274)
!5274 = distinct !DILexicalBlock(scope: !5275, file: !241, line: 723, column: 7)
!5275 = distinct !DILexicalBlock(scope: !5272, file: !241, line: 723, column: 7)
!5276 = !DILocation(line: 723, column: 7, scope: !5275)
!5277 = !DILocation(line: 723, column: 7, scope: !5278)
!5278 = distinct !DILexicalBlock(scope: !5279, file: !241, line: 723, column: 7)
!5279 = distinct !DILexicalBlock(scope: !5272, file: !241, line: 723, column: 7)
!5280 = !DILocation(line: 723, column: 7, scope: !5279)
!5281 = !DILocation(line: 724, column: 7, scope: !4662)
!5282 = !DILocation(line: 724, column: 7, scope: !5283)
!5283 = distinct !DILexicalBlock(scope: !5284, file: !241, line: 724, column: 7)
!5284 = distinct !DILexicalBlock(scope: !4662, file: !241, line: 724, column: 7)
!5285 = !DILocation(line: 724, column: 7, scope: !5284)
!5286 = !DILocation(line: 726, column: 13, scope: !5287)
!5287 = distinct !DILexicalBlock(scope: !4662, file: !241, line: 726, column: 11)
!5288 = !DILocation(line: 726, column: 11, scope: !4662)
!5289 = !DILocation(line: 727, column: 38, scope: !5287)
!5290 = !DILocation(line: 727, column: 9, scope: !5287)
!5291 = !DILocation(line: 728, column: 5, scope: !4662)
!5292 = !DILocation(line: 400, column: 75, scope: !4651)
!5293 = !DILocation(line: 400, column: 3, scope: !4651)
!5294 = distinct !{!5294, !4660, !5295}
!5295 = !DILocation(line: 728, column: 5, scope: !4648)
!5296 = !DILocation(line: 730, column: 7, scope: !5297)
!5297 = distinct !DILexicalBlock(scope: !4508, file: !241, line: 730, column: 7)
!5298 = !DILocation(line: 730, column: 11, scope: !5297)
!5299 = !DILocation(line: 730, column: 16, scope: !5297)
!5300 = !DILocation(line: 730, column: 19, scope: !5297)
!5301 = !DILocation(line: 730, column: 33, scope: !5297)
!5302 = !DILocation(line: 731, column: 7, scope: !5297)
!5303 = !DILocation(line: 731, column: 10, scope: !5297)
!5304 = !DILocation(line: 730, column: 7, scope: !4508)
!5305 = !DILocation(line: 732, column: 5, scope: !5297)
!5306 = !DILocation(line: 738, column: 7, scope: !5307)
!5307 = distinct !DILexicalBlock(scope: !4508, file: !241, line: 738, column: 7)
!5308 = !DILocation(line: 738, column: 21, scope: !5307)
!5309 = !DILocation(line: 738, column: 51, scope: !5307)
!5310 = !DILocation(line: 738, column: 56, scope: !5307)
!5311 = !DILocation(line: 739, column: 7, scope: !5307)
!5312 = !DILocation(line: 739, column: 10, scope: !5307)
!5313 = !DILocation(line: 738, column: 7, scope: !4508)
!5314 = !DILocation(line: 741, column: 11, scope: !5315)
!5315 = distinct !DILexicalBlock(scope: !5316, file: !241, line: 741, column: 11)
!5316 = distinct !DILexicalBlock(scope: !5307, file: !241, line: 740, column: 5)
!5317 = !DILocation(line: 741, column: 11, scope: !5316)
!5318 = !DILocation(line: 742, column: 42, scope: !5315)
!5319 = !DILocation(line: 742, column: 50, scope: !5315)
!5320 = !DILocation(line: 742, column: 67, scope: !5315)
!5321 = !DILocation(line: 742, column: 72, scope: !5315)
!5322 = !DILocation(line: 744, column: 42, scope: !5315)
!5323 = !DILocation(line: 744, column: 49, scope: !5315)
!5324 = !DILocation(line: 745, column: 42, scope: !5315)
!5325 = !DILocation(line: 745, column: 54, scope: !5315)
!5326 = !DILocation(line: 742, column: 16, scope: !5315)
!5327 = !DILocation(line: 742, column: 9, scope: !5315)
!5328 = !DILocation(line: 746, column: 18, scope: !5329)
!5329 = distinct !DILexicalBlock(scope: !5315, file: !241, line: 746, column: 16)
!5330 = !DILocation(line: 746, column: 29, scope: !5329)
!5331 = !DILocation(line: 746, column: 32, scope: !5329)
!5332 = !DILocation(line: 746, column: 16, scope: !5315)
!5333 = !DILocation(line: 749, column: 24, scope: !5334)
!5334 = distinct !DILexicalBlock(scope: !5329, file: !241, line: 747, column: 9)
!5335 = !DILocation(line: 749, column: 22, scope: !5334)
!5336 = !DILocation(line: 750, column: 15, scope: !5334)
!5337 = !DILocation(line: 751, column: 11, scope: !5334)
!5338 = !DILocation(line: 753, column: 5, scope: !5316)
!5339 = !DILocation(line: 755, column: 7, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !4508, file: !241, line: 755, column: 7)
!5341 = !DILocation(line: 755, column: 20, scope: !5340)
!5342 = !DILocation(line: 755, column: 24, scope: !5340)
!5343 = !DILocation(line: 755, column: 7, scope: !4508)
!5344 = !DILocation(line: 756, column: 5, scope: !5340)
!5345 = !DILocation(line: 756, column: 13, scope: !5346)
!5346 = distinct !DILexicalBlock(scope: !5347, file: !241, line: 756, column: 5)
!5347 = distinct !DILexicalBlock(scope: !5340, file: !241, line: 756, column: 5)
!5348 = !DILocation(line: 756, column: 12, scope: !5346)
!5349 = !DILocation(line: 756, column: 5, scope: !5347)
!5350 = !DILocation(line: 757, column: 7, scope: !5346)
!5351 = !DILocation(line: 757, column: 7, scope: !5352)
!5352 = distinct !DILexicalBlock(scope: !5353, file: !241, line: 757, column: 7)
!5353 = distinct !DILexicalBlock(scope: !5346, file: !241, line: 757, column: 7)
!5354 = !DILocation(line: 757, column: 7, scope: !5353)
!5355 = !DILocation(line: 756, column: 39, scope: !5346)
!5356 = !DILocation(line: 756, column: 5, scope: !5346)
!5357 = distinct !{!5357, !5349, !5358}
!5358 = !DILocation(line: 757, column: 7, scope: !5347)
!5359 = !DILocation(line: 759, column: 7, scope: !5360)
!5360 = distinct !DILexicalBlock(scope: !4508, file: !241, line: 759, column: 7)
!5361 = !DILocation(line: 759, column: 13, scope: !5360)
!5362 = !DILocation(line: 759, column: 11, scope: !5360)
!5363 = !DILocation(line: 759, column: 7, scope: !4508)
!5364 = !DILocation(line: 760, column: 5, scope: !5360)
!5365 = !DILocation(line: 760, column: 12, scope: !5360)
!5366 = !DILocation(line: 760, column: 17, scope: !5360)
!5367 = !DILocation(line: 761, column: 10, scope: !4508)
!5368 = !DILocation(line: 761, column: 3, scope: !4508)
!5369 = !DILabel(scope: !4508, name: "force_outer_quoting_style", file: !241, line: 763)
!5370 = !DILocation(line: 763, column: 2, scope: !4508)
!5371 = !DILocation(line: 766, column: 7, scope: !5372)
!5372 = distinct !DILexicalBlock(scope: !4508, file: !241, line: 766, column: 7)
!5373 = !DILocation(line: 766, column: 21, scope: !5372)
!5374 = !DILocation(line: 766, column: 51, scope: !5372)
!5375 = !DILocation(line: 766, column: 54, scope: !5372)
!5376 = !DILocation(line: 766, column: 7, scope: !4508)
!5377 = !DILocation(line: 767, column: 19, scope: !5372)
!5378 = !DILocation(line: 767, column: 5, scope: !5372)
!5379 = !DILocation(line: 768, column: 36, scope: !4508)
!5380 = !DILocation(line: 768, column: 44, scope: !4508)
!5381 = !DILocation(line: 768, column: 56, scope: !4508)
!5382 = !DILocation(line: 768, column: 61, scope: !4508)
!5383 = !DILocation(line: 769, column: 36, scope: !4508)
!5384 = !DILocation(line: 770, column: 36, scope: !4508)
!5385 = !DILocation(line: 770, column: 42, scope: !4508)
!5386 = !DILocation(line: 771, column: 36, scope: !4508)
!5387 = !DILocation(line: 771, column: 48, scope: !4508)
!5388 = !DILocation(line: 768, column: 10, scope: !4508)
!5389 = !DILocation(line: 768, column: 3, scope: !4508)
!5390 = !DILocation(line: 772, column: 1, scope: !4508)
!5391 = !DILocalVariable(name: "buffer", arg: 1, scope: !5392, file: !241, line: 256, type: !6)
!5392 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !241, file: !241, line: 256, type: !4509, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5393, retainedNodes: !4)
!5393 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !5394, nameTableKind: None)
!5394 = !{!5395, !5397, !5399, !5408, !5410, !5412, !5419, !5421}
!5395 = !DIGlobalVariableExpression(var: !5396, expr: !DIExpression())
!5396 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !5393, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!5397 = !DIGlobalVariableExpression(var: !5398, expr: !DIExpression())
!5398 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !5393, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!5399 = !DIGlobalVariableExpression(var: !5400, expr: !DIExpression())
!5400 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !5393, file: !241, line: 1052, type: !5401, isLocal: false, isDefinition: true)
!5401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !5402)
!5402 = !{!5403, !5404, !5405, !5406, !5407}
!5403 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !5401, file: !241, line: 68, baseType: !223, size: 32)
!5404 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5401, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!5405 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !5401, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!5406 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !5401, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!5407 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !5401, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!5408 = !DIGlobalVariableExpression(var: !5409, expr: !DIExpression())
!5409 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !5393, file: !241, line: 116, type: !5401, isLocal: true, isDefinition: true)
!5410 = !DIGlobalVariableExpression(var: !5411, expr: !DIExpression())
!5411 = distinct !DIGlobalVariable(name: "slot0", scope: !5393, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!5412 = !DIGlobalVariableExpression(var: !5413, expr: !DIExpression())
!5413 = distinct !DIGlobalVariable(name: "slotvec", scope: !5393, file: !241, line: 845, type: !5414, isLocal: true, isDefinition: true)
!5414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5415, size: 64)
!5415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !5416)
!5416 = !{!5417, !5418}
!5417 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5415, file: !241, line: 836, baseType: !110, size: 64)
!5418 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5415, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!5419 = !DIGlobalVariableExpression(var: !5420, expr: !DIExpression())
!5420 = distinct !DIGlobalVariable(name: "nslots", scope: !5393, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!5421 = !DIGlobalVariableExpression(var: !5422, expr: !DIExpression())
!5422 = distinct !DIGlobalVariable(name: "slotvec0", scope: !5393, file: !241, line: 844, type: !5415, isLocal: true, isDefinition: true)
!5423 = !DILocalVariable(name: "buffersize", arg: 2, scope: !5392, file: !241, line: 256, type: !110)
!5424 = !DILocalVariable(name: "arg", arg: 3, scope: !5392, file: !241, line: 257, type: !49)
!5425 = !DILocalVariable(name: "argsize", arg: 4, scope: !5392, file: !241, line: 257, type: !110)
!5426 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !5392, file: !241, line: 258, type: !223)
!5427 = !DILocalVariable(name: "flags", arg: 6, scope: !5392, file: !241, line: 258, type: !53)
!5428 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !5392, file: !241, line: 259, type: !4511)
!5429 = !DILocalVariable(name: "left_quote", arg: 8, scope: !5392, file: !241, line: 260, type: !49)
!5430 = !DILocalVariable(name: "right_quote", arg: 9, scope: !5392, file: !241, line: 261, type: !49)
!5431 = !DILocalVariable(name: "i", scope: !5392, file: !241, line: 263, type: !110)
!5432 = !DILocalVariable(name: "len", scope: !5392, file: !241, line: 264, type: !110)
!5433 = !DILocalVariable(name: "orig_buffersize", scope: !5392, file: !241, line: 265, type: !110)
!5434 = !DILocalVariable(name: "quote_string", scope: !5392, file: !241, line: 266, type: !49)
!5435 = !DILocalVariable(name: "quote_string_len", scope: !5392, file: !241, line: 267, type: !110)
!5436 = !DILocalVariable(name: "backslash_escapes", scope: !5392, file: !241, line: 268, type: !18)
!5437 = !DILocalVariable(name: "unibyte_locale", scope: !5392, file: !241, line: 269, type: !18)
!5438 = !DILocalVariable(name: "elide_outer_quotes", scope: !5392, file: !241, line: 270, type: !18)
!5439 = !DILocalVariable(name: "pending_shell_escape_end", scope: !5392, file: !241, line: 271, type: !18)
!5440 = !DILocalVariable(name: "encountered_single_quote", scope: !5392, file: !241, line: 272, type: !18)
!5441 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !5392, file: !241, line: 273, type: !18)
!5442 = !DILocalVariable(name: "escaping", scope: !5443, file: !241, line: 405, type: !18)
!5443 = distinct !DILexicalBlock(scope: !5444, file: !241, line: 401, column: 5)
!5444 = distinct !DILexicalBlock(scope: !5445, file: !241, line: 400, column: 3)
!5445 = distinct !DILexicalBlock(scope: !5446, file: !241, line: 400, column: 3)
!5446 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !241, file: !241, line: 256, type: !4509, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5447, retainedNodes: !4)
!5447 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !5448, nameTableKind: None)
!5448 = !{!5449, !5451, !5453, !5462, !5464, !5466, !5473, !5475}
!5449 = !DIGlobalVariableExpression(var: !5450, expr: !DIExpression())
!5450 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !5447, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!5451 = !DIGlobalVariableExpression(var: !5452, expr: !DIExpression())
!5452 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !5447, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!5453 = !DIGlobalVariableExpression(var: !5454, expr: !DIExpression())
!5454 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !5447, file: !241, line: 1052, type: !5455, isLocal: false, isDefinition: true)
!5455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !5456)
!5456 = !{!5457, !5458, !5459, !5460, !5461}
!5457 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !5455, file: !241, line: 68, baseType: !223, size: 32)
!5458 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5455, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!5459 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !5455, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!5460 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !5455, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!5461 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !5455, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!5462 = !DIGlobalVariableExpression(var: !5463, expr: !DIExpression())
!5463 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !5447, file: !241, line: 116, type: !5455, isLocal: true, isDefinition: true)
!5464 = !DIGlobalVariableExpression(var: !5465, expr: !DIExpression())
!5465 = distinct !DIGlobalVariable(name: "slot0", scope: !5447, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!5466 = !DIGlobalVariableExpression(var: !5467, expr: !DIExpression())
!5467 = distinct !DIGlobalVariable(name: "slotvec", scope: !5447, file: !241, line: 845, type: !5468, isLocal: true, isDefinition: true)
!5468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5469, size: 64)
!5469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !5470)
!5470 = !{!5471, !5472}
!5471 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5469, file: !241, line: 836, baseType: !110, size: 64)
!5472 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5469, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!5473 = !DIGlobalVariableExpression(var: !5474, expr: !DIExpression())
!5474 = distinct !DIGlobalVariable(name: "nslots", scope: !5447, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!5475 = !DIGlobalVariableExpression(var: !5476, expr: !DIExpression())
!5476 = distinct !DIGlobalVariable(name: "slotvec0", scope: !5447, file: !241, line: 844, type: !5469, isLocal: true, isDefinition: true)
!5477 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !5443, file: !241, line: 406, type: !18)
!5478 = distinct !DISubprogram(name: "gettext_quote", scope: !241, file: !241, line: 207, type: !5479, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!5479 = !DISubroutineType(types: !5480)
!5480 = !{!49, !49, !223}
!5481 = !DILocalVariable(name: "msgid", arg: 1, scope: !5478, file: !241, line: 207, type: !49)
!5482 = !DILocation(line: 207, column: 28, scope: !5478)
!5483 = !DILocalVariable(name: "s", arg: 2, scope: !5478, file: !241, line: 207, type: !223)
!5484 = !DILocation(line: 207, column: 54, scope: !5478)
!5485 = !DILocalVariable(name: "translation", scope: !5478, file: !241, line: 209, type: !49)
!5486 = !DILocation(line: 209, column: 15, scope: !5478)
!5487 = !DILocation(line: 209, column: 29, scope: !5478)
!5488 = !DILocalVariable(name: "locale_code", scope: !5478, file: !241, line: 210, type: !49)
!5489 = !DILocation(line: 210, column: 15, scope: !5478)
!5490 = !DILocation(line: 212, column: 7, scope: !5491)
!5491 = distinct !DILexicalBlock(scope: !5478, file: !241, line: 212, column: 7)
!5492 = !DILocation(line: 212, column: 22, scope: !5491)
!5493 = !DILocation(line: 212, column: 19, scope: !5491)
!5494 = !DILocation(line: 212, column: 7, scope: !5478)
!5495 = !DILocation(line: 213, column: 12, scope: !5491)
!5496 = !DILocation(line: 213, column: 5, scope: !5491)
!5497 = !DILocation(line: 233, column: 17, scope: !5478)
!5498 = !DILocation(line: 233, column: 15, scope: !5478)
!5499 = !DILocation(line: 234, column: 7, scope: !5500)
!5500 = distinct !DILexicalBlock(scope: !5478, file: !241, line: 234, column: 7)
!5501 = !DILocation(line: 234, column: 7, scope: !5478)
!5502 = !DILocation(line: 235, column: 12, scope: !5500)
!5503 = !DILocation(line: 235, column: 21, scope: !5500)
!5504 = !DILocation(line: 235, column: 5, scope: !5500)
!5505 = !DILocation(line: 236, column: 7, scope: !5506)
!5506 = distinct !DILexicalBlock(scope: !5478, file: !241, line: 236, column: 7)
!5507 = !DILocation(line: 236, column: 7, scope: !5478)
!5508 = !DILocation(line: 237, column: 12, scope: !5506)
!5509 = !DILocation(line: 237, column: 21, scope: !5506)
!5510 = !DILocation(line: 237, column: 5, scope: !5506)
!5511 = !DILocation(line: 239, column: 11, scope: !5478)
!5512 = !DILocation(line: 239, column: 13, scope: !5478)
!5513 = !DILocation(line: 239, column: 3, scope: !5478)
!5514 = !DILocation(line: 240, column: 1, scope: !5478)
!5515 = !DILocalVariable(name: "msgid", arg: 1, scope: !5516, file: !241, line: 207, type: !49)
!5516 = distinct !DISubprogram(name: "gettext_quote", scope: !241, file: !241, line: 207, type: !5479, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5517, retainedNodes: !4)
!5517 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !5518, nameTableKind: None)
!5518 = !{!5519, !5521, !5523, !5532, !5534, !5536, !5543, !5545}
!5519 = !DIGlobalVariableExpression(var: !5520, expr: !DIExpression())
!5520 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !5517, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!5521 = !DIGlobalVariableExpression(var: !5522, expr: !DIExpression())
!5522 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !5517, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!5523 = !DIGlobalVariableExpression(var: !5524, expr: !DIExpression())
!5524 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !5517, file: !241, line: 1052, type: !5525, isLocal: false, isDefinition: true)
!5525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !5526)
!5526 = !{!5527, !5528, !5529, !5530, !5531}
!5527 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !5525, file: !241, line: 68, baseType: !223, size: 32)
!5528 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5525, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!5529 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !5525, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!5530 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !5525, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!5531 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !5525, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!5532 = !DIGlobalVariableExpression(var: !5533, expr: !DIExpression())
!5533 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !5517, file: !241, line: 116, type: !5525, isLocal: true, isDefinition: true)
!5534 = !DIGlobalVariableExpression(var: !5535, expr: !DIExpression())
!5535 = distinct !DIGlobalVariable(name: "slot0", scope: !5517, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!5536 = !DIGlobalVariableExpression(var: !5537, expr: !DIExpression())
!5537 = distinct !DIGlobalVariable(name: "slotvec", scope: !5517, file: !241, line: 845, type: !5538, isLocal: true, isDefinition: true)
!5538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5539, size: 64)
!5539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !5540)
!5540 = !{!5541, !5542}
!5541 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5539, file: !241, line: 836, baseType: !110, size: 64)
!5542 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5539, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!5543 = !DIGlobalVariableExpression(var: !5544, expr: !DIExpression())
!5544 = distinct !DIGlobalVariable(name: "nslots", scope: !5517, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!5545 = !DIGlobalVariableExpression(var: !5546, expr: !DIExpression())
!5546 = distinct !DIGlobalVariable(name: "slotvec0", scope: !5517, file: !241, line: 844, type: !5539, isLocal: true, isDefinition: true)
!5547 = !DILocalVariable(name: "s", arg: 2, scope: !5516, file: !241, line: 207, type: !223)
!5548 = !DILocalVariable(name: "translation", scope: !5516, file: !241, line: 209, type: !49)
!5549 = !DILocalVariable(name: "locale_code", scope: !5516, file: !241, line: 210, type: !49)
!5550 = distinct !DISubprogram(name: "quotearg_char", scope: !241, file: !241, line: 991, type: !5551, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!5551 = !DISubroutineType(types: !5552)
!5552 = !{!6, !49, !7}
!5553 = !DILocalVariable(name: "arg", arg: 1, scope: !5550, file: !241, line: 991, type: !49)
!5554 = !DILocation(line: 991, column: 28, scope: !5550)
!5555 = !DILocalVariable(name: "ch", arg: 2, scope: !5550, file: !241, line: 991, type: !7)
!5556 = !DILocation(line: 991, column: 38, scope: !5550)
!5557 = !DILocation(line: 993, column: 29, scope: !5550)
!5558 = !DILocation(line: 993, column: 44, scope: !5550)
!5559 = !DILocation(line: 993, column: 10, scope: !5550)
!5560 = !DILocation(line: 993, column: 3, scope: !5550)
!5561 = !DILocalVariable(name: "arg", arg: 1, scope: !5562, file: !241, line: 991, type: !49)
!5562 = distinct !DISubprogram(name: "quotearg_char", scope: !241, file: !241, line: 991, type: !5551, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5563, retainedNodes: !4)
!5563 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !5564, nameTableKind: None)
!5564 = !{!5565, !5567, !5569, !5578, !5580, !5582, !5589, !5591}
!5565 = !DIGlobalVariableExpression(var: !5566, expr: !DIExpression())
!5566 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !5563, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!5567 = !DIGlobalVariableExpression(var: !5568, expr: !DIExpression())
!5568 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !5563, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!5569 = !DIGlobalVariableExpression(var: !5570, expr: !DIExpression())
!5570 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !5563, file: !241, line: 1052, type: !5571, isLocal: false, isDefinition: true)
!5571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !5572)
!5572 = !{!5573, !5574, !5575, !5576, !5577}
!5573 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !5571, file: !241, line: 68, baseType: !223, size: 32)
!5574 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5571, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!5575 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !5571, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!5576 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !5571, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!5577 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !5571, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!5578 = !DIGlobalVariableExpression(var: !5579, expr: !DIExpression())
!5579 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !5563, file: !241, line: 116, type: !5571, isLocal: true, isDefinition: true)
!5580 = !DIGlobalVariableExpression(var: !5581, expr: !DIExpression())
!5581 = distinct !DIGlobalVariable(name: "slot0", scope: !5563, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!5582 = !DIGlobalVariableExpression(var: !5583, expr: !DIExpression())
!5583 = distinct !DIGlobalVariable(name: "slotvec", scope: !5563, file: !241, line: 845, type: !5584, isLocal: true, isDefinition: true)
!5584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5585, size: 64)
!5585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !5586)
!5586 = !{!5587, !5588}
!5587 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5585, file: !241, line: 836, baseType: !110, size: 64)
!5588 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5585, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!5589 = !DIGlobalVariableExpression(var: !5590, expr: !DIExpression())
!5590 = distinct !DIGlobalVariable(name: "nslots", scope: !5563, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!5591 = !DIGlobalVariableExpression(var: !5592, expr: !DIExpression())
!5592 = distinct !DIGlobalVariable(name: "slotvec0", scope: !5563, file: !241, line: 844, type: !5585, isLocal: true, isDefinition: true)
!5593 = !DILocalVariable(name: "ch", arg: 2, scope: !5562, file: !241, line: 991, type: !7)
!5594 = distinct !DISubprogram(name: "quotearg_colon", scope: !241, file: !241, line: 997, type: !3784, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!5595 = !DILocalVariable(name: "arg", arg: 1, scope: !5594, file: !241, line: 997, type: !49)
!5596 = !DILocation(line: 997, column: 29, scope: !5594)
!5597 = !DILocation(line: 999, column: 25, scope: !5594)
!5598 = !DILocation(line: 999, column: 10, scope: !5594)
!5599 = !DILocation(line: 999, column: 3, scope: !5594)
!5600 = !DILocalVariable(name: "arg", arg: 1, scope: !5601, file: !241, line: 997, type: !49)
!5601 = distinct !DISubprogram(name: "quotearg_colon", scope: !241, file: !241, line: 997, type: !3784, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5602, retainedNodes: !4)
!5602 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !5603, nameTableKind: None)
!5603 = !{!5604, !5606, !5608, !5617, !5619, !5621, !5628, !5630}
!5604 = !DIGlobalVariableExpression(var: !5605, expr: !DIExpression())
!5605 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !5602, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!5606 = !DIGlobalVariableExpression(var: !5607, expr: !DIExpression())
!5607 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !5602, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!5608 = !DIGlobalVariableExpression(var: !5609, expr: !DIExpression())
!5609 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !5602, file: !241, line: 1052, type: !5610, isLocal: false, isDefinition: true)
!5610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !5611)
!5611 = !{!5612, !5613, !5614, !5615, !5616}
!5612 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !5610, file: !241, line: 68, baseType: !223, size: 32)
!5613 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5610, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!5614 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !5610, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!5615 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !5610, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!5616 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !5610, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!5617 = !DIGlobalVariableExpression(var: !5618, expr: !DIExpression())
!5618 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !5602, file: !241, line: 116, type: !5610, isLocal: true, isDefinition: true)
!5619 = !DIGlobalVariableExpression(var: !5620, expr: !DIExpression())
!5620 = distinct !DIGlobalVariable(name: "slot0", scope: !5602, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!5621 = !DIGlobalVariableExpression(var: !5622, expr: !DIExpression())
!5622 = distinct !DIGlobalVariable(name: "slotvec", scope: !5602, file: !241, line: 845, type: !5623, isLocal: true, isDefinition: true)
!5623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5624, size: 64)
!5624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !5625)
!5625 = !{!5626, !5627}
!5626 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5624, file: !241, line: 836, baseType: !110, size: 64)
!5627 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5624, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!5628 = !DIGlobalVariableExpression(var: !5629, expr: !DIExpression())
!5629 = distinct !DIGlobalVariable(name: "nslots", scope: !5602, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!5630 = !DIGlobalVariableExpression(var: !5631, expr: !DIExpression())
!5631 = distinct !DIGlobalVariable(name: "slotvec0", scope: !5602, file: !241, line: 844, type: !5624, isLocal: true, isDefinition: true)
!5632 = distinct !DISubprogram(name: "quotearg_n_style_colon", scope: !241, file: !241, line: 1009, type: !5633, scopeLine: 1010, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!5633 = !DISubroutineType(types: !5634)
!5634 = !{!6, !53, !223, !49}
!5635 = !DILocalVariable(name: "n", arg: 1, scope: !5632, file: !241, line: 1009, type: !53)
!5636 = !DILocation(line: 1009, column: 29, scope: !5632)
!5637 = !DILocalVariable(name: "s", arg: 2, scope: !5632, file: !241, line: 1009, type: !223)
!5638 = !DILocation(line: 1009, column: 51, scope: !5632)
!5639 = !DILocalVariable(name: "arg", arg: 3, scope: !5632, file: !241, line: 1009, type: !49)
!5640 = !DILocation(line: 1009, column: 66, scope: !5632)
!5641 = !DILocalVariable(name: "options", scope: !5632, file: !241, line: 1011, type: !254)
!5642 = !DILocation(line: 1011, column: 26, scope: !5632)
!5643 = !DILocation(line: 1012, column: 41, scope: !5632)
!5644 = !DILocation(line: 1012, column: 13, scope: !5632)
!5645 = !DILocation(line: 1013, column: 3, scope: !5632)
!5646 = !DILocation(line: 1014, column: 30, scope: !5632)
!5647 = !DILocation(line: 1014, column: 33, scope: !5632)
!5648 = !DILocation(line: 1014, column: 10, scope: !5632)
!5649 = !DILocation(line: 1014, column: 3, scope: !5632)
!5650 = !DILocalVariable(name: "n", arg: 1, scope: !5651, file: !241, line: 1009, type: !53)
!5651 = distinct !DISubprogram(name: "quotearg_n_style_colon", scope: !241, file: !241, line: 1009, type: !5633, scopeLine: 1010, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5652, retainedNodes: !4)
!5652 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !5653, nameTableKind: None)
!5653 = !{!5654, !5656, !5658, !5667, !5669, !5671, !5678, !5680}
!5654 = !DIGlobalVariableExpression(var: !5655, expr: !DIExpression())
!5655 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !5652, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!5656 = !DIGlobalVariableExpression(var: !5657, expr: !DIExpression())
!5657 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !5652, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!5658 = !DIGlobalVariableExpression(var: !5659, expr: !DIExpression())
!5659 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !5652, file: !241, line: 1052, type: !5660, isLocal: false, isDefinition: true)
!5660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !5661)
!5661 = !{!5662, !5663, !5664, !5665, !5666}
!5662 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !5660, file: !241, line: 68, baseType: !223, size: 32)
!5663 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5660, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!5664 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !5660, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!5665 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !5660, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!5666 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !5660, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!5667 = !DIGlobalVariableExpression(var: !5668, expr: !DIExpression())
!5668 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !5652, file: !241, line: 116, type: !5660, isLocal: true, isDefinition: true)
!5669 = !DIGlobalVariableExpression(var: !5670, expr: !DIExpression())
!5670 = distinct !DIGlobalVariable(name: "slot0", scope: !5652, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!5671 = !DIGlobalVariableExpression(var: !5672, expr: !DIExpression())
!5672 = distinct !DIGlobalVariable(name: "slotvec", scope: !5652, file: !241, line: 845, type: !5673, isLocal: true, isDefinition: true)
!5673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5674, size: 64)
!5674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !5675)
!5675 = !{!5676, !5677}
!5676 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5674, file: !241, line: 836, baseType: !110, size: 64)
!5677 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5674, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!5678 = !DIGlobalVariableExpression(var: !5679, expr: !DIExpression())
!5679 = distinct !DIGlobalVariable(name: "nslots", scope: !5652, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!5680 = !DIGlobalVariableExpression(var: !5681, expr: !DIExpression())
!5681 = distinct !DIGlobalVariable(name: "slotvec0", scope: !5652, file: !241, line: 844, type: !5674, isLocal: true, isDefinition: true)
!5682 = !DILocalVariable(name: "s", arg: 2, scope: !5651, file: !241, line: 1009, type: !223)
!5683 = !DILocalVariable(name: "arg", arg: 3, scope: !5651, file: !241, line: 1009, type: !49)
!5684 = !DILocalVariable(name: "options", scope: !5651, file: !241, line: 1011, type: !5660)
!5685 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !241, file: !241, line: 193, type: !5686, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!5686 = !DISubroutineType(types: !5687)
!5687 = !{!254, !223}
!5688 = !DILocalVariable(name: "style", arg: 1, scope: !5685, file: !241, line: 193, type: !223)
!5689 = !DILocation(line: 193, column: 48, scope: !5685)
!5690 = !DILocalVariable(name: "o", scope: !5685, file: !241, line: 195, type: !254)
!5691 = !DILocation(line: 195, column: 26, scope: !5685)
!5692 = !DILocation(line: 196, column: 7, scope: !5693)
!5693 = distinct !DILexicalBlock(scope: !5685, file: !241, line: 196, column: 7)
!5694 = !DILocation(line: 196, column: 13, scope: !5693)
!5695 = !DILocation(line: 196, column: 7, scope: !5685)
!5696 = !DILocation(line: 197, column: 5, scope: !5693)
!5697 = !DILocation(line: 198, column: 13, scope: !5685)
!5698 = !DILocation(line: 198, column: 5, scope: !5685)
!5699 = !DILocation(line: 198, column: 11, scope: !5685)
!5700 = !DILocation(line: 199, column: 3, scope: !5685)
!5701 = !DILocalVariable(name: "style", arg: 1, scope: !5702, file: !241, line: 193, type: !223)
!5702 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !241, file: !241, line: 193, type: !5703, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5712, retainedNodes: !4)
!5703 = !DISubroutineType(types: !5704)
!5704 = !{!5705, !223}
!5705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !5706)
!5706 = !{!5707, !5708, !5709, !5710, !5711}
!5707 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !5705, file: !241, line: 68, baseType: !223, size: 32)
!5708 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5705, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!5709 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !5705, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!5710 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !5705, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!5711 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !5705, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!5712 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !5713, nameTableKind: None)
!5713 = !{!5714, !5716, !5718, !5720, !5722, !5724, !5731, !5733}
!5714 = !DIGlobalVariableExpression(var: !5715, expr: !DIExpression())
!5715 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !5712, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!5716 = !DIGlobalVariableExpression(var: !5717, expr: !DIExpression())
!5717 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !5712, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!5718 = !DIGlobalVariableExpression(var: !5719, expr: !DIExpression())
!5719 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !5712, file: !241, line: 1052, type: !5705, isLocal: false, isDefinition: true)
!5720 = !DIGlobalVariableExpression(var: !5721, expr: !DIExpression())
!5721 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !5712, file: !241, line: 116, type: !5705, isLocal: true, isDefinition: true)
!5722 = !DIGlobalVariableExpression(var: !5723, expr: !DIExpression())
!5723 = distinct !DIGlobalVariable(name: "slot0", scope: !5712, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!5724 = !DIGlobalVariableExpression(var: !5725, expr: !DIExpression())
!5725 = distinct !DIGlobalVariable(name: "slotvec", scope: !5712, file: !241, line: 845, type: !5726, isLocal: true, isDefinition: true)
!5726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5727, size: 64)
!5727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !5728)
!5728 = !{!5729, !5730}
!5729 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5727, file: !241, line: 836, baseType: !110, size: 64)
!5730 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5727, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!5731 = !DIGlobalVariableExpression(var: !5732, expr: !DIExpression())
!5732 = distinct !DIGlobalVariable(name: "nslots", scope: !5712, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!5733 = !DIGlobalVariableExpression(var: !5734, expr: !DIExpression())
!5734 = distinct !DIGlobalVariable(name: "slotvec0", scope: !5712, file: !241, line: 844, type: !5727, isLocal: true, isDefinition: true)
!5735 = !DILocalVariable(name: "o", scope: !5702, file: !241, line: 195, type: !5705)
!5736 = distinct !DISubprogram(name: "quote_n_mem", scope: !241, file: !241, line: 1061, type: !5737, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!5737 = !DISubroutineType(types: !5738)
!5738 = !{!49, !53, !49, !110}
!5739 = !DILocalVariable(name: "n", arg: 1, scope: !5736, file: !241, line: 1061, type: !53)
!5740 = !DILocation(line: 1061, column: 18, scope: !5736)
!5741 = !DILocalVariable(name: "arg", arg: 2, scope: !5736, file: !241, line: 1061, type: !49)
!5742 = !DILocation(line: 1061, column: 33, scope: !5736)
!5743 = !DILocalVariable(name: "argsize", arg: 3, scope: !5736, file: !241, line: 1061, type: !110)
!5744 = !DILocation(line: 1061, column: 45, scope: !5736)
!5745 = !DILocation(line: 1063, column: 30, scope: !5736)
!5746 = !DILocation(line: 1063, column: 33, scope: !5736)
!5747 = !DILocation(line: 1063, column: 38, scope: !5736)
!5748 = !DILocation(line: 1063, column: 10, scope: !5736)
!5749 = !DILocation(line: 1063, column: 3, scope: !5736)
!5750 = !DILocalVariable(name: "n", arg: 1, scope: !5751, file: !241, line: 1061, type: !53)
!5751 = distinct !DISubprogram(name: "quote_n_mem", scope: !241, file: !241, line: 1061, type: !5737, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5752, retainedNodes: !4)
!5752 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !5753, nameTableKind: None)
!5753 = !{!5754, !5756, !5758, !5767, !5769, !5771, !5778, !5780}
!5754 = !DIGlobalVariableExpression(var: !5755, expr: !DIExpression())
!5755 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !5752, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!5756 = !DIGlobalVariableExpression(var: !5757, expr: !DIExpression())
!5757 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !5752, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!5758 = !DIGlobalVariableExpression(var: !5759, expr: !DIExpression())
!5759 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !5752, file: !241, line: 1052, type: !5760, isLocal: false, isDefinition: true)
!5760 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !5761)
!5761 = !{!5762, !5763, !5764, !5765, !5766}
!5762 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !5760, file: !241, line: 68, baseType: !223, size: 32)
!5763 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5760, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!5764 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !5760, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!5765 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !5760, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!5766 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !5760, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!5767 = !DIGlobalVariableExpression(var: !5768, expr: !DIExpression())
!5768 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !5752, file: !241, line: 116, type: !5760, isLocal: true, isDefinition: true)
!5769 = !DIGlobalVariableExpression(var: !5770, expr: !DIExpression())
!5770 = distinct !DIGlobalVariable(name: "slot0", scope: !5752, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!5771 = !DIGlobalVariableExpression(var: !5772, expr: !DIExpression())
!5772 = distinct !DIGlobalVariable(name: "slotvec", scope: !5752, file: !241, line: 845, type: !5773, isLocal: true, isDefinition: true)
!5773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5774, size: 64)
!5774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !5775)
!5775 = !{!5776, !5777}
!5776 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5774, file: !241, line: 836, baseType: !110, size: 64)
!5777 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5774, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!5778 = !DIGlobalVariableExpression(var: !5779, expr: !DIExpression())
!5779 = distinct !DIGlobalVariable(name: "nslots", scope: !5752, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!5780 = !DIGlobalVariableExpression(var: !5781, expr: !DIExpression())
!5781 = distinct !DIGlobalVariable(name: "slotvec0", scope: !5752, file: !241, line: 844, type: !5774, isLocal: true, isDefinition: true)
!5782 = !DILocalVariable(name: "arg", arg: 2, scope: !5751, file: !241, line: 1061, type: !49)
!5783 = !DILocalVariable(name: "argsize", arg: 3, scope: !5751, file: !241, line: 1061, type: !110)
!5784 = distinct !DISubprogram(name: "quote_n", scope: !241, file: !241, line: 1073, type: !5785, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!5785 = !DISubroutineType(types: !5786)
!5786 = !{!49, !53, !49}
!5787 = !DILocalVariable(name: "n", arg: 1, scope: !5784, file: !241, line: 1073, type: !53)
!5788 = !DILocation(line: 1073, column: 14, scope: !5784)
!5789 = !DILocalVariable(name: "arg", arg: 2, scope: !5784, file: !241, line: 1073, type: !49)
!5790 = !DILocation(line: 1073, column: 29, scope: !5784)
!5791 = !DILocation(line: 1075, column: 23, scope: !5784)
!5792 = !DILocation(line: 1075, column: 26, scope: !5784)
!5793 = !DILocation(line: 1075, column: 10, scope: !5784)
!5794 = !DILocation(line: 1075, column: 3, scope: !5784)
!5795 = !DILocalVariable(name: "n", arg: 1, scope: !5796, file: !241, line: 1073, type: !53)
!5796 = distinct !DISubprogram(name: "quote_n", scope: !241, file: !241, line: 1073, type: !5785, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5797, retainedNodes: !4)
!5797 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !5798, nameTableKind: None)
!5798 = !{!5799, !5801, !5803, !5812, !5814, !5816, !5823, !5825}
!5799 = !DIGlobalVariableExpression(var: !5800, expr: !DIExpression())
!5800 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !5797, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!5801 = !DIGlobalVariableExpression(var: !5802, expr: !DIExpression())
!5802 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !5797, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!5803 = !DIGlobalVariableExpression(var: !5804, expr: !DIExpression())
!5804 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !5797, file: !241, line: 1052, type: !5805, isLocal: false, isDefinition: true)
!5805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !5806)
!5806 = !{!5807, !5808, !5809, !5810, !5811}
!5807 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !5805, file: !241, line: 68, baseType: !223, size: 32)
!5808 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5805, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!5809 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !5805, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!5810 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !5805, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!5811 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !5805, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!5812 = !DIGlobalVariableExpression(var: !5813, expr: !DIExpression())
!5813 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !5797, file: !241, line: 116, type: !5805, isLocal: true, isDefinition: true)
!5814 = !DIGlobalVariableExpression(var: !5815, expr: !DIExpression())
!5815 = distinct !DIGlobalVariable(name: "slot0", scope: !5797, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!5816 = !DIGlobalVariableExpression(var: !5817, expr: !DIExpression())
!5817 = distinct !DIGlobalVariable(name: "slotvec", scope: !5797, file: !241, line: 845, type: !5818, isLocal: true, isDefinition: true)
!5818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5819, size: 64)
!5819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !5820)
!5820 = !{!5821, !5822}
!5821 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5819, file: !241, line: 836, baseType: !110, size: 64)
!5822 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5819, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!5823 = !DIGlobalVariableExpression(var: !5824, expr: !DIExpression())
!5824 = distinct !DIGlobalVariable(name: "nslots", scope: !5797, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!5825 = !DIGlobalVariableExpression(var: !5826, expr: !DIExpression())
!5826 = distinct !DIGlobalVariable(name: "slotvec0", scope: !5797, file: !241, line: 844, type: !5819, isLocal: true, isDefinition: true)
!5827 = !DILocalVariable(name: "arg", arg: 2, scope: !5796, file: !241, line: 1073, type: !49)
!5828 = distinct !DISubprogram(name: "quote", scope: !241, file: !241, line: 1079, type: !5829, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!5829 = !DISubroutineType(types: !5830)
!5830 = !{!49, !49}
!5831 = !DILocalVariable(name: "arg", arg: 1, scope: !5828, file: !241, line: 1079, type: !49)
!5832 = !DILocation(line: 1079, column: 20, scope: !5828)
!5833 = !DILocation(line: 1081, column: 22, scope: !5828)
!5834 = !DILocation(line: 1081, column: 10, scope: !5828)
!5835 = !DILocation(line: 1081, column: 3, scope: !5828)
!5836 = !DILocalVariable(name: "arg", arg: 1, scope: !5837, file: !241, line: 1079, type: !49)
!5837 = distinct !DISubprogram(name: "quote", scope: !241, file: !241, line: 1079, type: !5829, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5838, retainedNodes: !4)
!5838 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !5839, nameTableKind: None)
!5839 = !{!5840, !5842, !5844, !5853, !5855, !5857, !5864, !5866}
!5840 = !DIGlobalVariableExpression(var: !5841, expr: !DIExpression())
!5841 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !5838, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!5842 = !DIGlobalVariableExpression(var: !5843, expr: !DIExpression())
!5843 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !5838, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!5844 = !DIGlobalVariableExpression(var: !5845, expr: !DIExpression())
!5845 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !5838, file: !241, line: 1052, type: !5846, isLocal: false, isDefinition: true)
!5846 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !5847)
!5847 = !{!5848, !5849, !5850, !5851, !5852}
!5848 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !5846, file: !241, line: 68, baseType: !223, size: 32)
!5849 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !5846, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!5850 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !5846, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!5851 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !5846, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!5852 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !5846, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!5853 = !DIGlobalVariableExpression(var: !5854, expr: !DIExpression())
!5854 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !5838, file: !241, line: 116, type: !5846, isLocal: true, isDefinition: true)
!5855 = !DIGlobalVariableExpression(var: !5856, expr: !DIExpression())
!5856 = distinct !DIGlobalVariable(name: "slot0", scope: !5838, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!5857 = !DIGlobalVariableExpression(var: !5858, expr: !DIExpression())
!5858 = distinct !DIGlobalVariable(name: "slotvec", scope: !5838, file: !241, line: 845, type: !5859, isLocal: true, isDefinition: true)
!5859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5860, size: 64)
!5860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !5861)
!5861 = !{!5862, !5863}
!5862 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !5860, file: !241, line: 836, baseType: !110, size: 64)
!5863 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !5860, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!5864 = !DIGlobalVariableExpression(var: !5865, expr: !DIExpression())
!5865 = distinct !DIGlobalVariable(name: "nslots", scope: !5838, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!5866 = !DIGlobalVariableExpression(var: !5867, expr: !DIExpression())
!5867 = distinct !DIGlobalVariable(name: "slotvec0", scope: !5838, file: !241, line: 844, type: !5860, isLocal: true, isDefinition: true)
!5868 = distinct !DISubprogram(name: "setlocale_null_r", scope: !5869, file: !5869, line: 269, type: !5870, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !296, retainedNodes: !4)
!5869 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5870 = !DISubroutineType(types: !5871)
!5871 = !{!53, !53, !6, !110}
!5872 = !DILocalVariable(name: "category", arg: 1, scope: !5868, file: !5869, line: 269, type: !53)
!5873 = !DILocation(line: 269, column: 23, scope: !5868)
!5874 = !DILocalVariable(name: "buf", arg: 2, scope: !5868, file: !5869, line: 269, type: !6)
!5875 = !DILocation(line: 269, column: 39, scope: !5868)
!5876 = !DILocalVariable(name: "bufsize", arg: 3, scope: !5868, file: !5869, line: 269, type: !110)
!5877 = !DILocation(line: 269, column: 51, scope: !5868)
!5878 = !DILocation(line: 274, column: 35, scope: !5868)
!5879 = !DILocation(line: 274, column: 45, scope: !5868)
!5880 = !DILocation(line: 274, column: 50, scope: !5868)
!5881 = !DILocation(line: 274, column: 10, scope: !5868)
!5882 = !DILocation(line: 274, column: 3, scope: !5868)
!5883 = !DILocalVariable(name: "category", arg: 1, scope: !5884, file: !5869, line: 269, type: !53)
!5884 = distinct !DISubprogram(name: "setlocale_null_r", scope: !5869, file: !5869, line: 269, type: !5870, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5885, retainedNodes: !4)
!5885 = distinct !DICompileUnit(language: DW_LANG_C99, file: !297, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!5886 = !DILocalVariable(name: "buf", arg: 2, scope: !5884, file: !5869, line: 269, type: !6)
!5887 = !DILocalVariable(name: "bufsize", arg: 3, scope: !5884, file: !5869, line: 269, type: !110)
!5888 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !5869, file: !5869, line: 91, type: !5870, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !296, retainedNodes: !4)
!5889 = !DILocalVariable(name: "category", arg: 1, scope: !5888, file: !5869, line: 91, type: !53)
!5890 = !DILocation(line: 91, column: 30, scope: !5888)
!5891 = !DILocalVariable(name: "buf", arg: 2, scope: !5888, file: !5869, line: 91, type: !6)
!5892 = !DILocation(line: 91, column: 46, scope: !5888)
!5893 = !DILocalVariable(name: "bufsize", arg: 3, scope: !5888, file: !5869, line: 91, type: !110)
!5894 = !DILocation(line: 91, column: 58, scope: !5888)
!5895 = !DILocalVariable(name: "result", scope: !5888, file: !5869, line: 140, type: !49)
!5896 = !DILocation(line: 140, column: 15, scope: !5888)
!5897 = !DILocation(line: 140, column: 51, scope: !5888)
!5898 = !DILocation(line: 140, column: 24, scope: !5888)
!5899 = !DILocation(line: 142, column: 7, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5888, file: !5869, line: 142, column: 7)
!5901 = !DILocation(line: 142, column: 14, scope: !5900)
!5902 = !DILocation(line: 142, column: 7, scope: !5888)
!5903 = !DILocation(line: 145, column: 11, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !5905, file: !5869, line: 145, column: 11)
!5905 = distinct !DILexicalBlock(scope: !5900, file: !5869, line: 143, column: 5)
!5906 = !DILocation(line: 145, column: 19, scope: !5904)
!5907 = !DILocation(line: 145, column: 11, scope: !5905)
!5908 = !DILocation(line: 149, column: 9, scope: !5904)
!5909 = !DILocation(line: 149, column: 16, scope: !5904)
!5910 = !DILocation(line: 150, column: 7, scope: !5905)
!5911 = !DILocalVariable(name: "length", scope: !5912, file: !5869, line: 154, type: !110)
!5912 = distinct !DILexicalBlock(scope: !5900, file: !5869, line: 153, column: 5)
!5913 = !DILocation(line: 154, column: 14, scope: !5912)
!5914 = !DILocation(line: 154, column: 31, scope: !5912)
!5915 = !DILocation(line: 154, column: 23, scope: !5912)
!5916 = !DILocation(line: 155, column: 11, scope: !5917)
!5917 = distinct !DILexicalBlock(scope: !5912, file: !5869, line: 155, column: 11)
!5918 = !DILocation(line: 155, column: 20, scope: !5917)
!5919 = !DILocation(line: 155, column: 18, scope: !5917)
!5920 = !DILocation(line: 155, column: 11, scope: !5912)
!5921 = !DILocation(line: 157, column: 19, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5917, file: !5869, line: 156, column: 9)
!5923 = !DILocation(line: 157, column: 24, scope: !5922)
!5924 = !DILocation(line: 157, column: 32, scope: !5922)
!5925 = !DILocation(line: 157, column: 39, scope: !5922)
!5926 = !DILocation(line: 157, column: 11, scope: !5922)
!5927 = !DILocation(line: 158, column: 11, scope: !5922)
!5928 = !DILocation(line: 162, column: 15, scope: !5929)
!5929 = distinct !DILexicalBlock(scope: !5930, file: !5869, line: 162, column: 15)
!5930 = distinct !DILexicalBlock(scope: !5917, file: !5869, line: 161, column: 9)
!5931 = !DILocation(line: 162, column: 23, scope: !5929)
!5932 = !DILocation(line: 162, column: 15, scope: !5930)
!5933 = !DILocation(line: 167, column: 23, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5929, file: !5869, line: 163, column: 13)
!5935 = !DILocation(line: 167, column: 28, scope: !5934)
!5936 = !DILocation(line: 167, column: 36, scope: !5934)
!5937 = !DILocation(line: 167, column: 44, scope: !5934)
!5938 = !DILocation(line: 167, column: 15, scope: !5934)
!5939 = !DILocation(line: 168, column: 15, scope: !5934)
!5940 = !DILocation(line: 168, column: 19, scope: !5934)
!5941 = !DILocation(line: 168, column: 27, scope: !5934)
!5942 = !DILocation(line: 168, column: 32, scope: !5934)
!5943 = !DILocation(line: 169, column: 13, scope: !5934)
!5944 = !DILocation(line: 170, column: 11, scope: !5930)
!5945 = !DILocation(line: 174, column: 1, scope: !5888)
!5946 = !DILocalVariable(name: "category", arg: 1, scope: !5947, file: !5869, line: 91, type: !53)
!5947 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !5869, file: !5869, line: 91, type: !5870, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5948, retainedNodes: !4)
!5948 = distinct !DICompileUnit(language: DW_LANG_C99, file: !297, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!5949 = !DILocalVariable(name: "buf", arg: 2, scope: !5947, file: !5869, line: 91, type: !6)
!5950 = !DILocalVariable(name: "bufsize", arg: 3, scope: !5947, file: !5869, line: 91, type: !110)
!5951 = !DILocalVariable(name: "result", scope: !5947, file: !5869, line: 140, type: !49)
!5952 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !5869, file: !5869, line: 60, type: !5953, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !296, retainedNodes: !4)
!5953 = !DISubroutineType(types: !5954)
!5954 = !{!49, !53}
!5955 = !DILocalVariable(name: "category", arg: 1, scope: !5952, file: !5869, line: 60, type: !53)
!5956 = !DILocation(line: 60, column: 32, scope: !5952)
!5957 = !DILocalVariable(name: "result", scope: !5952, file: !5869, line: 62, type: !49)
!5958 = !DILocation(line: 62, column: 15, scope: !5952)
!5959 = !DILocation(line: 62, column: 35, scope: !5952)
!5960 = !DILocation(line: 62, column: 24, scope: !5952)
!5961 = !DILocation(line: 87, column: 10, scope: !5952)
!5962 = !DILocation(line: 87, column: 3, scope: !5952)
!5963 = !DILocalVariable(name: "category", arg: 1, scope: !5964, file: !5869, line: 60, type: !53)
!5964 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !5869, file: !5869, line: 60, type: !5953, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5965, retainedNodes: !4)
!5965 = distinct !DICompileUnit(language: DW_LANG_C99, file: !297, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!5966 = !DILocalVariable(name: "result", scope: !5964, file: !5869, line: 62, type: !49)
!5967 = distinct !DISubprogram(name: "version_etc_arn", scope: !5968, file: !5968, line: 61, type: !5969, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !299, retainedNodes: !4)
!5968 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5969 = !DISubroutineType(types: !5970)
!5970 = !{null, !5971, !49, !49, !49, !6020, !110}
!5971 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5972, size: 64)
!5972 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !5974)
!5973 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!5974 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !5976)
!5975 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!5976 = !{!5977, !5978, !5979, !5980, !5981, !5982, !5983, !5984, !5985, !5986, !5987, !5988, !5989, !5992, !5994, !5995, !5996, !5997, !5998, !6000, !6004, !6007, !6009, !6012, !6015, !6016, !6017, !6018, !6019}
!5977 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5974, file: !5975, line: 51, baseType: !53, size: 32)
!5978 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5974, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!5979 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5974, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!5980 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5974, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!5981 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5974, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!5982 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5974, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!5983 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5974, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!5984 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5974, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!5985 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5974, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!5986 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5974, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!5987 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5974, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!5988 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5974, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!5989 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5974, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!5990 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5991, size: 64)
!5991 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !5975, line: 36, flags: DIFlagFwdDecl)
!5992 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5974, file: !5975, line: 70, baseType: !5993, size: 64, offset: 832)
!5993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5974, size: 64)
!5994 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5974, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!5995 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5974, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!5996 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5974, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!5997 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5974, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!5998 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5974, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!5999 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!6000 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5974, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!6001 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 8, elements: !6002)
!6002 = !{!6003}
!6003 = !DISubrange(count: 1)
!6004 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5974, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!6005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6006, size: 64)
!6006 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !5975, line: 43, baseType: null)
!6007 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5974, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!6008 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !12, line: 153, baseType: !13)
!6009 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5974, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!6010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6011, size: 64)
!6011 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !5975, line: 37, flags: DIFlagFwdDecl)
!6012 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5974, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!6013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6014, size: 64)
!6014 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !5975, line: 38, flags: DIFlagFwdDecl)
!6015 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5974, file: !5975, line: 93, baseType: !5993, size: 64, offset: 1344)
!6016 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5974, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!6017 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5974, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!6018 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5974, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!6019 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5974, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!6020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !243, size: 64)
!6021 = !DILocalVariable(name: "stream", arg: 1, scope: !5967, file: !5968, line: 61, type: !5971)
!6022 = !DILocation(line: 61, column: 24, scope: !5967)
!6023 = !DILocalVariable(name: "command_name", arg: 2, scope: !5967, file: !5968, line: 62, type: !49)
!6024 = !DILocation(line: 62, column: 30, scope: !5967)
!6025 = !DILocalVariable(name: "package", arg: 3, scope: !5967, file: !5968, line: 62, type: !49)
!6026 = !DILocation(line: 62, column: 56, scope: !5967)
!6027 = !DILocalVariable(name: "version", arg: 4, scope: !5967, file: !5968, line: 63, type: !49)
!6028 = !DILocation(line: 63, column: 30, scope: !5967)
!6029 = !DILocalVariable(name: "authors", arg: 5, scope: !5967, file: !5968, line: 64, type: !6020)
!6030 = !DILocation(line: 64, column: 39, scope: !5967)
!6031 = !DILocalVariable(name: "n_authors", arg: 6, scope: !5967, file: !5968, line: 64, type: !110)
!6032 = !DILocation(line: 64, column: 55, scope: !5967)
!6033 = !DILocation(line: 66, column: 7, scope: !6034)
!6034 = distinct !DILexicalBlock(scope: !5967, file: !5968, line: 66, column: 7)
!6035 = !DILocation(line: 66, column: 7, scope: !5967)
!6036 = !DILocation(line: 67, column: 14, scope: !6034)
!6037 = !DILocation(line: 67, column: 38, scope: !6034)
!6038 = !DILocation(line: 67, column: 52, scope: !6034)
!6039 = !DILocation(line: 67, column: 61, scope: !6034)
!6040 = !DILocation(line: 67, column: 5, scope: !6034)
!6041 = !DILocation(line: 69, column: 14, scope: !6034)
!6042 = !DILocation(line: 69, column: 33, scope: !6034)
!6043 = !DILocation(line: 69, column: 42, scope: !6034)
!6044 = !DILocation(line: 69, column: 5, scope: !6034)
!6045 = !DILocation(line: 83, column: 12, scope: !5967)
!6046 = !DILocation(line: 83, column: 43, scope: !5967)
!6047 = !DILocation(line: 83, column: 3, scope: !5967)
!6048 = !DILocation(line: 85, column: 3, scope: !5967)
!6049 = !DILocation(line: 88, column: 12, scope: !5967)
!6050 = !DILocation(line: 88, column: 20, scope: !5967)
!6051 = !DILocation(line: 88, column: 3, scope: !5967)
!6052 = !DILocation(line: 95, column: 3, scope: !5967)
!6053 = !DILocation(line: 97, column: 11, scope: !5967)
!6054 = !DILocation(line: 97, column: 3, scope: !5967)
!6055 = !DILocation(line: 102, column: 7, scope: !6056)
!6056 = distinct !DILexicalBlock(scope: !5967, file: !5968, line: 98, column: 5)
!6057 = !DILocation(line: 105, column: 16, scope: !6056)
!6058 = !DILocation(line: 105, column: 24, scope: !6056)
!6059 = !DILocation(line: 105, column: 47, scope: !6056)
!6060 = !DILocation(line: 105, column: 7, scope: !6056)
!6061 = !DILocation(line: 106, column: 7, scope: !6056)
!6062 = !DILocation(line: 109, column: 16, scope: !6056)
!6063 = !DILocation(line: 109, column: 24, scope: !6056)
!6064 = !DILocation(line: 109, column: 54, scope: !6056)
!6065 = !DILocation(line: 109, column: 66, scope: !6056)
!6066 = !DILocation(line: 109, column: 7, scope: !6056)
!6067 = !DILocation(line: 110, column: 7, scope: !6056)
!6068 = !DILocation(line: 113, column: 16, scope: !6056)
!6069 = !DILocation(line: 113, column: 24, scope: !6056)
!6070 = !DILocation(line: 114, column: 16, scope: !6056)
!6071 = !DILocation(line: 114, column: 28, scope: !6056)
!6072 = !DILocation(line: 114, column: 40, scope: !6056)
!6073 = !DILocation(line: 113, column: 7, scope: !6056)
!6074 = !DILocation(line: 115, column: 7, scope: !6056)
!6075 = !DILocation(line: 120, column: 16, scope: !6056)
!6076 = !DILocation(line: 120, column: 24, scope: !6056)
!6077 = !DILocation(line: 121, column: 16, scope: !6056)
!6078 = !DILocation(line: 121, column: 28, scope: !6056)
!6079 = !DILocation(line: 121, column: 40, scope: !6056)
!6080 = !DILocation(line: 121, column: 52, scope: !6056)
!6081 = !DILocation(line: 120, column: 7, scope: !6056)
!6082 = !DILocation(line: 122, column: 7, scope: !6056)
!6083 = !DILocation(line: 127, column: 16, scope: !6056)
!6084 = !DILocation(line: 127, column: 24, scope: !6056)
!6085 = !DILocation(line: 128, column: 16, scope: !6056)
!6086 = !DILocation(line: 128, column: 28, scope: !6056)
!6087 = !DILocation(line: 128, column: 40, scope: !6056)
!6088 = !DILocation(line: 128, column: 52, scope: !6056)
!6089 = !DILocation(line: 128, column: 64, scope: !6056)
!6090 = !DILocation(line: 127, column: 7, scope: !6056)
!6091 = !DILocation(line: 129, column: 7, scope: !6056)
!6092 = !DILocation(line: 134, column: 16, scope: !6056)
!6093 = !DILocation(line: 134, column: 24, scope: !6056)
!6094 = !DILocation(line: 135, column: 16, scope: !6056)
!6095 = !DILocation(line: 135, column: 28, scope: !6056)
!6096 = !DILocation(line: 135, column: 40, scope: !6056)
!6097 = !DILocation(line: 135, column: 52, scope: !6056)
!6098 = !DILocation(line: 135, column: 64, scope: !6056)
!6099 = !DILocation(line: 136, column: 16, scope: !6056)
!6100 = !DILocation(line: 134, column: 7, scope: !6056)
!6101 = !DILocation(line: 137, column: 7, scope: !6056)
!6102 = !DILocation(line: 142, column: 16, scope: !6056)
!6103 = !DILocation(line: 142, column: 24, scope: !6056)
!6104 = !DILocation(line: 143, column: 16, scope: !6056)
!6105 = !DILocation(line: 143, column: 28, scope: !6056)
!6106 = !DILocation(line: 143, column: 40, scope: !6056)
!6107 = !DILocation(line: 143, column: 52, scope: !6056)
!6108 = !DILocation(line: 143, column: 64, scope: !6056)
!6109 = !DILocation(line: 144, column: 16, scope: !6056)
!6110 = !DILocation(line: 144, column: 28, scope: !6056)
!6111 = !DILocation(line: 142, column: 7, scope: !6056)
!6112 = !DILocation(line: 145, column: 7, scope: !6056)
!6113 = !DILocation(line: 150, column: 16, scope: !6056)
!6114 = !DILocation(line: 150, column: 24, scope: !6056)
!6115 = !DILocation(line: 152, column: 17, scope: !6056)
!6116 = !DILocation(line: 152, column: 29, scope: !6056)
!6117 = !DILocation(line: 152, column: 41, scope: !6056)
!6118 = !DILocation(line: 152, column: 53, scope: !6056)
!6119 = !DILocation(line: 152, column: 65, scope: !6056)
!6120 = !DILocation(line: 153, column: 17, scope: !6056)
!6121 = !DILocation(line: 153, column: 29, scope: !6056)
!6122 = !DILocation(line: 153, column: 41, scope: !6056)
!6123 = !DILocation(line: 150, column: 7, scope: !6056)
!6124 = !DILocation(line: 154, column: 7, scope: !6056)
!6125 = !DILocation(line: 159, column: 16, scope: !6056)
!6126 = !DILocation(line: 159, column: 24, scope: !6056)
!6127 = !DILocation(line: 161, column: 16, scope: !6056)
!6128 = !DILocation(line: 161, column: 28, scope: !6056)
!6129 = !DILocation(line: 161, column: 40, scope: !6056)
!6130 = !DILocation(line: 161, column: 52, scope: !6056)
!6131 = !DILocation(line: 161, column: 64, scope: !6056)
!6132 = !DILocation(line: 162, column: 16, scope: !6056)
!6133 = !DILocation(line: 162, column: 28, scope: !6056)
!6134 = !DILocation(line: 162, column: 40, scope: !6056)
!6135 = !DILocation(line: 162, column: 52, scope: !6056)
!6136 = !DILocation(line: 159, column: 7, scope: !6056)
!6137 = !DILocation(line: 163, column: 7, scope: !6056)
!6138 = !DILocation(line: 170, column: 16, scope: !6056)
!6139 = !DILocation(line: 170, column: 24, scope: !6056)
!6140 = !DILocation(line: 172, column: 17, scope: !6056)
!6141 = !DILocation(line: 172, column: 29, scope: !6056)
!6142 = !DILocation(line: 172, column: 41, scope: !6056)
!6143 = !DILocation(line: 172, column: 53, scope: !6056)
!6144 = !DILocation(line: 172, column: 65, scope: !6056)
!6145 = !DILocation(line: 173, column: 17, scope: !6056)
!6146 = !DILocation(line: 173, column: 29, scope: !6056)
!6147 = !DILocation(line: 173, column: 41, scope: !6056)
!6148 = !DILocation(line: 173, column: 53, scope: !6056)
!6149 = !DILocation(line: 170, column: 7, scope: !6056)
!6150 = !DILocation(line: 174, column: 7, scope: !6056)
!6151 = !DILocation(line: 176, column: 1, scope: !5967)
!6152 = !DILocalVariable(name: "stream", arg: 1, scope: !6153, file: !5968, line: 61, type: !6156)
!6153 = distinct !DISubprogram(name: "version_etc_arn", scope: !5968, file: !5968, line: 61, type: !6154, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6190, retainedNodes: !4)
!6154 = !DISubroutineType(types: !6155)
!6155 = !{null, !6156, !49, !49, !49, !6020, !110}
!6156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6157, size: 64)
!6157 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !6158)
!6158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !6159)
!6159 = !{!6160, !6161, !6162, !6163, !6164, !6165, !6166, !6167, !6168, !6169, !6170, !6171, !6172, !6173, !6175, !6176, !6177, !6178, !6179, !6180, !6181, !6182, !6183, !6184, !6185, !6186, !6187, !6188, !6189}
!6160 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6158, file: !5975, line: 51, baseType: !53, size: 32)
!6161 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6158, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!6162 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6158, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!6163 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6158, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!6164 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6158, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!6165 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6158, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!6166 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6158, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!6167 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6158, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!6168 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6158, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!6169 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6158, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!6170 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6158, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!6171 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6158, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!6172 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6158, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!6173 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6158, file: !5975, line: 70, baseType: !6174, size: 64, offset: 832)
!6174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6158, size: 64)
!6175 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6158, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!6176 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6158, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!6177 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6158, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!6178 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6158, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!6179 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6158, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!6180 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6158, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!6181 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6158, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!6182 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6158, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!6183 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6158, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!6184 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6158, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!6185 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6158, file: !5975, line: 93, baseType: !6174, size: 64, offset: 1344)
!6186 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6158, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!6187 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6158, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!6188 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6158, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!6189 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6158, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!6190 = distinct !DICompileUnit(language: DW_LANG_C99, file: !300, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!6191 = !DILocalVariable(name: "command_name", arg: 2, scope: !6153, file: !5968, line: 62, type: !49)
!6192 = !DILocalVariable(name: "package", arg: 3, scope: !6153, file: !5968, line: 62, type: !49)
!6193 = !DILocalVariable(name: "version", arg: 4, scope: !6153, file: !5968, line: 63, type: !49)
!6194 = !DILocalVariable(name: "authors", arg: 5, scope: !6153, file: !5968, line: 64, type: !6020)
!6195 = !DILocalVariable(name: "n_authors", arg: 6, scope: !6153, file: !5968, line: 64, type: !110)
!6196 = distinct !DISubprogram(name: "version_etc_va", scope: !5968, file: !5968, line: 199, type: !6197, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !299, retainedNodes: !4)
!6197 = !DISubroutineType(types: !6198)
!6198 = !{null, !5971, !49, !49, !49, !6199}
!6199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6200, size: 64)
!6200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !300, line: 192, size: 192, elements: !6201)
!6201 = !{!6202, !6203, !6204, !6205}
!6202 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !6200, file: !300, line: 192, baseType: !180, size: 32)
!6203 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !6200, file: !300, line: 192, baseType: !180, size: 32, offset: 32)
!6204 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !6200, file: !300, line: 192, baseType: !8, size: 64, offset: 64)
!6205 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !6200, file: !300, line: 192, baseType: !8, size: 64, offset: 128)
!6206 = !DILocalVariable(name: "stream", arg: 1, scope: !6196, file: !5968, line: 199, type: !5971)
!6207 = !DILocation(line: 199, column: 23, scope: !6196)
!6208 = !DILocalVariable(name: "command_name", arg: 2, scope: !6196, file: !5968, line: 200, type: !49)
!6209 = !DILocation(line: 200, column: 29, scope: !6196)
!6210 = !DILocalVariable(name: "package", arg: 3, scope: !6196, file: !5968, line: 200, type: !49)
!6211 = !DILocation(line: 200, column: 55, scope: !6196)
!6212 = !DILocalVariable(name: "version", arg: 4, scope: !6196, file: !5968, line: 201, type: !49)
!6213 = !DILocation(line: 201, column: 29, scope: !6196)
!6214 = !DILocalVariable(name: "authors", arg: 5, scope: !6196, file: !5968, line: 201, type: !6199)
!6215 = !DILocation(line: 201, column: 46, scope: !6196)
!6216 = !DILocalVariable(name: "n_authors", scope: !6196, file: !5968, line: 203, type: !110)
!6217 = !DILocation(line: 203, column: 10, scope: !6196)
!6218 = !DILocalVariable(name: "authtab", scope: !6196, file: !5968, line: 204, type: !6219)
!6219 = !DICompositeType(tag: DW_TAG_array_type, baseType: !49, size: 640, elements: !250)
!6220 = !DILocation(line: 204, column: 15, scope: !6196)
!6221 = !DILocation(line: 206, column: 18, scope: !6222)
!6222 = distinct !DILexicalBlock(scope: !6196, file: !5968, line: 206, column: 3)
!6223 = !DILocation(line: 206, column: 8, scope: !6222)
!6224 = !DILocation(line: 207, column: 8, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6222, file: !5968, line: 206, column: 3)
!6226 = !DILocation(line: 207, column: 18, scope: !6225)
!6227 = !DILocation(line: 208, column: 10, scope: !6225)
!6228 = !DILocation(line: 208, column: 35, scope: !6225)
!6229 = !DILocation(line: 208, column: 22, scope: !6225)
!6230 = !DILocation(line: 208, column: 14, scope: !6225)
!6231 = !DILocation(line: 208, column: 33, scope: !6225)
!6232 = !DILocation(line: 208, column: 67, scope: !6225)
!6233 = !DILocation(line: 0, scope: !6225)
!6234 = !DILocation(line: 206, column: 3, scope: !6222)
!6235 = !DILocation(line: 209, column: 17, scope: !6225)
!6236 = !DILocation(line: 206, column: 3, scope: !6225)
!6237 = distinct !{!6237, !6234, !6238}
!6238 = !DILocation(line: 210, column: 5, scope: !6222)
!6239 = !DILocation(line: 211, column: 20, scope: !6196)
!6240 = !DILocation(line: 211, column: 28, scope: !6196)
!6241 = !DILocation(line: 211, column: 42, scope: !6196)
!6242 = !DILocation(line: 211, column: 51, scope: !6196)
!6243 = !DILocation(line: 212, column: 20, scope: !6196)
!6244 = !DILocation(line: 212, column: 29, scope: !6196)
!6245 = !DILocation(line: 211, column: 3, scope: !6196)
!6246 = !DILocation(line: 213, column: 1, scope: !6196)
!6247 = !DILocalVariable(name: "stream", arg: 1, scope: !6248, file: !5968, line: 199, type: !6251)
!6248 = distinct !DISubprogram(name: "version_etc_va", scope: !5968, file: !5968, line: 199, type: !6249, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6292, retainedNodes: !4)
!6249 = !DISubroutineType(types: !6250)
!6250 = !{null, !6251, !49, !49, !49, !6285}
!6251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6252, size: 64)
!6252 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !6253)
!6253 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !6254)
!6254 = !{!6255, !6256, !6257, !6258, !6259, !6260, !6261, !6262, !6263, !6264, !6265, !6266, !6267, !6268, !6270, !6271, !6272, !6273, !6274, !6275, !6276, !6277, !6278, !6279, !6280, !6281, !6282, !6283, !6284}
!6255 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6253, file: !5975, line: 51, baseType: !53, size: 32)
!6256 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6253, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!6257 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6253, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!6258 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6253, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!6259 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6253, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!6260 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6253, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!6261 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6253, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!6262 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6253, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!6263 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6253, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!6264 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6253, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!6265 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6253, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!6266 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6253, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!6267 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6253, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!6268 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6253, file: !5975, line: 70, baseType: !6269, size: 64, offset: 832)
!6269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6253, size: 64)
!6270 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6253, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!6271 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6253, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!6272 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6253, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!6273 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6253, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!6274 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6253, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!6275 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6253, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!6276 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6253, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!6277 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6253, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!6278 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6253, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!6279 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6253, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!6280 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6253, file: !5975, line: 93, baseType: !6269, size: 64, offset: 1344)
!6281 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6253, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!6282 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6253, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!6283 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6253, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!6284 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6253, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!6285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6286, size: 64)
!6286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !300, line: 192, size: 192, elements: !6287)
!6287 = !{!6288, !6289, !6290, !6291}
!6288 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !6286, file: !300, line: 192, baseType: !180, size: 32)
!6289 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !6286, file: !300, line: 192, baseType: !180, size: 32, offset: 32)
!6290 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !6286, file: !300, line: 192, baseType: !8, size: 64, offset: 64)
!6291 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !6286, file: !300, line: 192, baseType: !8, size: 64, offset: 128)
!6292 = distinct !DICompileUnit(language: DW_LANG_C99, file: !300, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!6293 = !DILocalVariable(name: "command_name", arg: 2, scope: !6248, file: !5968, line: 200, type: !49)
!6294 = !DILocalVariable(name: "package", arg: 3, scope: !6248, file: !5968, line: 200, type: !49)
!6295 = !DILocalVariable(name: "version", arg: 4, scope: !6248, file: !5968, line: 201, type: !49)
!6296 = !DILocalVariable(name: "authors", arg: 5, scope: !6248, file: !5968, line: 201, type: !6285)
!6297 = !DILocalVariable(name: "n_authors", scope: !6248, file: !5968, line: 203, type: !110)
!6298 = !DILocalVariable(name: "authtab", scope: !6248, file: !5968, line: 204, type: !6219)
!6299 = distinct !DISubprogram(name: "version_etc", scope: !5968, file: !5968, line: 230, type: !6300, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !299, retainedNodes: !4)
!6300 = !DISubroutineType(types: !6301)
!6301 = !{null, !5971, !49, !49, !49, null}
!6302 = !DILocalVariable(name: "stream", arg: 1, scope: !6299, file: !5968, line: 230, type: !5971)
!6303 = !DILocation(line: 230, column: 20, scope: !6299)
!6304 = !DILocalVariable(name: "command_name", arg: 2, scope: !6299, file: !5968, line: 231, type: !49)
!6305 = !DILocation(line: 231, column: 26, scope: !6299)
!6306 = !DILocalVariable(name: "package", arg: 3, scope: !6299, file: !5968, line: 231, type: !49)
!6307 = !DILocation(line: 231, column: 52, scope: !6299)
!6308 = !DILocalVariable(name: "version", arg: 4, scope: !6299, file: !5968, line: 232, type: !49)
!6309 = !DILocation(line: 232, column: 26, scope: !6299)
!6310 = !DILocalVariable(name: "authors", scope: !6299, file: !5968, line: 234, type: !6311)
!6311 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !6312, line: 52, baseType: !6313)
!6312 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!6313 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !6314, line: 32, baseType: !6315)
!6314 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!6315 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !300, line: 234, baseType: !6316)
!6316 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6200, size: 192, elements: !6002)
!6317 = !DILocation(line: 234, column: 11, scope: !6299)
!6318 = !DILocation(line: 236, column: 3, scope: !6299)
!6319 = !DILocation(line: 237, column: 19, scope: !6299)
!6320 = !DILocation(line: 237, column: 27, scope: !6299)
!6321 = !DILocation(line: 237, column: 41, scope: !6299)
!6322 = !DILocation(line: 237, column: 50, scope: !6299)
!6323 = !DILocation(line: 237, column: 59, scope: !6299)
!6324 = !DILocation(line: 237, column: 3, scope: !6299)
!6325 = !DILocation(line: 238, column: 3, scope: !6299)
!6326 = !DILocation(line: 239, column: 1, scope: !6299)
!6327 = !DILocalVariable(name: "stream", arg: 1, scope: !6328, file: !5968, line: 230, type: !6331)
!6328 = distinct !DISubprogram(name: "version_etc", scope: !5968, file: !5968, line: 230, type: !6329, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6365, retainedNodes: !4)
!6329 = !DISubroutineType(types: !6330)
!6330 = !{null, !6331, !49, !49, !49, null}
!6331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6332, size: 64)
!6332 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !6333)
!6333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !6334)
!6334 = !{!6335, !6336, !6337, !6338, !6339, !6340, !6341, !6342, !6343, !6344, !6345, !6346, !6347, !6348, !6350, !6351, !6352, !6353, !6354, !6355, !6356, !6357, !6358, !6359, !6360, !6361, !6362, !6363, !6364}
!6335 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6333, file: !5975, line: 51, baseType: !53, size: 32)
!6336 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6333, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!6337 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6333, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!6338 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6333, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!6339 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6333, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!6340 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6333, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!6341 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6333, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!6342 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6333, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!6343 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6333, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!6344 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6333, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!6345 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6333, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!6346 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6333, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!6347 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6333, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!6348 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6333, file: !5975, line: 70, baseType: !6349, size: 64, offset: 832)
!6349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6333, size: 64)
!6350 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6333, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!6351 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6333, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!6352 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6333, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!6353 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6333, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!6354 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6333, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!6355 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6333, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!6356 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6333, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!6357 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6333, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!6358 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6333, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!6359 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6333, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!6360 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6333, file: !5975, line: 93, baseType: !6349, size: 64, offset: 1344)
!6361 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6333, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!6362 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6333, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!6363 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6333, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!6364 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6333, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!6365 = distinct !DICompileUnit(language: DW_LANG_C99, file: !300, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!6366 = !DILocalVariable(name: "command_name", arg: 2, scope: !6328, file: !5968, line: 231, type: !49)
!6367 = !DILocalVariable(name: "package", arg: 3, scope: !6328, file: !5968, line: 231, type: !49)
!6368 = !DILocalVariable(name: "version", arg: 4, scope: !6328, file: !5968, line: 232, type: !49)
!6369 = !DILocalVariable(name: "authors", scope: !6328, file: !5968, line: 234, type: !6370)
!6370 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !6312, line: 52, baseType: !6371)
!6371 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !6314, line: 32, baseType: !6372)
!6372 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !300, line: 234, baseType: !6373)
!6373 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6374, size: 192, elements: !6002)
!6374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !300, line: 192, size: 192, elements: !6375)
!6375 = !{!6376, !6377, !6378, !6379}
!6376 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !6374, file: !300, line: 192, baseType: !180, size: 32)
!6377 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !6374, file: !300, line: 192, baseType: !180, size: 32, offset: 32)
!6378 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !6374, file: !300, line: 192, baseType: !8, size: 64, offset: 64)
!6379 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !6374, file: !300, line: 192, baseType: !8, size: 64, offset: 128)
!6380 = distinct !DISubprogram(name: "xmalloc", scope: !6381, file: !6381, line: 39, type: !6382, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!6381 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!6382 = !DISubroutineType(types: !6383)
!6383 = !{!8, !110}
!6384 = !DILocalVariable(name: "n", arg: 1, scope: !6380, file: !6381, line: 39, type: !110)
!6385 = !DILocation(line: 39, column: 17, scope: !6380)
!6386 = !DILocalVariable(name: "p", scope: !6380, file: !6381, line: 41, type: !8)
!6387 = !DILocation(line: 41, column: 9, scope: !6380)
!6388 = !DILocation(line: 41, column: 21, scope: !6380)
!6389 = !DILocation(line: 41, column: 13, scope: !6380)
!6390 = !DILocation(line: 42, column: 8, scope: !6391)
!6391 = distinct !DILexicalBlock(scope: !6380, file: !6381, line: 42, column: 7)
!6392 = !DILocation(line: 42, column: 10, scope: !6391)
!6393 = !DILocation(line: 42, column: 13, scope: !6391)
!6394 = !DILocation(line: 42, column: 15, scope: !6391)
!6395 = !DILocation(line: 42, column: 7, scope: !6380)
!6396 = !DILocation(line: 43, column: 5, scope: !6391)
!6397 = !DILocation(line: 44, column: 10, scope: !6380)
!6398 = !DILocation(line: 44, column: 3, scope: !6380)
!6399 = !DILocalVariable(name: "n", arg: 1, scope: !6400, file: !6381, line: 39, type: !110)
!6400 = distinct !DISubprogram(name: "xmalloc", scope: !6381, file: !6381, line: 39, type: !6382, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6401, retainedNodes: !4)
!6401 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!6402 = !DILocalVariable(name: "p", scope: !6400, file: !6381, line: 41, type: !8)
!6403 = distinct !DISubprogram(name: "xrealloc", scope: !6381, file: !6381, line: 51, type: !6404, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!6404 = !DISubroutineType(types: !6405)
!6405 = !{!8, !8, !110}
!6406 = !DILocalVariable(name: "p", arg: 1, scope: !6403, file: !6381, line: 51, type: !8)
!6407 = !DILocation(line: 51, column: 17, scope: !6403)
!6408 = !DILocalVariable(name: "n", arg: 2, scope: !6403, file: !6381, line: 51, type: !110)
!6409 = !DILocation(line: 51, column: 27, scope: !6403)
!6410 = !DILocation(line: 53, column: 8, scope: !6411)
!6411 = distinct !DILexicalBlock(scope: !6403, file: !6381, line: 53, column: 7)
!6412 = !DILocation(line: 53, column: 10, scope: !6411)
!6413 = !DILocation(line: 53, column: 13, scope: !6411)
!6414 = !DILocation(line: 53, column: 7, scope: !6403)
!6415 = !DILocation(line: 57, column: 13, scope: !6416)
!6416 = distinct !DILexicalBlock(scope: !6411, file: !6381, line: 54, column: 5)
!6417 = !DILocation(line: 57, column: 7, scope: !6416)
!6418 = !DILocation(line: 58, column: 7, scope: !6416)
!6419 = !DILocation(line: 61, column: 16, scope: !6403)
!6420 = !DILocation(line: 61, column: 19, scope: !6403)
!6421 = !DILocation(line: 61, column: 7, scope: !6403)
!6422 = !DILocation(line: 61, column: 5, scope: !6403)
!6423 = !DILocation(line: 62, column: 8, scope: !6424)
!6424 = distinct !DILexicalBlock(scope: !6403, file: !6381, line: 62, column: 7)
!6425 = !DILocation(line: 62, column: 10, scope: !6424)
!6426 = !DILocation(line: 62, column: 13, scope: !6424)
!6427 = !DILocation(line: 62, column: 7, scope: !6403)
!6428 = !DILocation(line: 63, column: 5, scope: !6424)
!6429 = !DILocation(line: 64, column: 10, scope: !6403)
!6430 = !DILocation(line: 64, column: 3, scope: !6403)
!6431 = !DILocation(line: 65, column: 1, scope: !6403)
!6432 = !DILocalVariable(name: "p", arg: 1, scope: !6433, file: !6381, line: 51, type: !8)
!6433 = distinct !DISubprogram(name: "xrealloc", scope: !6381, file: !6381, line: 51, type: !6404, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6434, retainedNodes: !4)
!6434 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!6435 = !DILocalVariable(name: "n", arg: 2, scope: !6433, file: !6381, line: 51, type: !110)
!6436 = distinct !DISubprogram(name: "x2nrealloc", scope: !6437, file: !6437, line: 174, type: !6438, scopeLine: 175, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!6437 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!6438 = !DISubroutineType(types: !6439)
!6439 = !{!8, !8, !6440, !110}
!6440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!6441 = !DILocalVariable(name: "p", arg: 1, scope: !6436, file: !6437, line: 174, type: !8)
!6442 = !DILocation(line: 174, column: 19, scope: !6436)
!6443 = !DILocalVariable(name: "pn", arg: 2, scope: !6436, file: !6437, line: 174, type: !6440)
!6444 = !DILocation(line: 174, column: 30, scope: !6436)
!6445 = !DILocalVariable(name: "s", arg: 3, scope: !6436, file: !6437, line: 174, type: !110)
!6446 = !DILocation(line: 174, column: 41, scope: !6436)
!6447 = !DILocalVariable(name: "n", scope: !6436, file: !6437, line: 176, type: !110)
!6448 = !DILocation(line: 176, column: 10, scope: !6436)
!6449 = !DILocation(line: 176, column: 15, scope: !6436)
!6450 = !DILocation(line: 176, column: 14, scope: !6436)
!6451 = !DILocation(line: 178, column: 9, scope: !6452)
!6452 = distinct !DILexicalBlock(scope: !6436, file: !6437, line: 178, column: 7)
!6453 = !DILocation(line: 178, column: 7, scope: !6436)
!6454 = !DILocation(line: 180, column: 13, scope: !6455)
!6455 = distinct !DILexicalBlock(scope: !6456, file: !6437, line: 180, column: 11)
!6456 = distinct !DILexicalBlock(scope: !6452, file: !6437, line: 179, column: 5)
!6457 = !DILocation(line: 180, column: 11, scope: !6456)
!6458 = !DILocation(line: 188, column: 32, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6455, file: !6437, line: 181, column: 9)
!6460 = !DILocation(line: 188, column: 30, scope: !6459)
!6461 = !DILocation(line: 188, column: 13, scope: !6459)
!6462 = !DILocation(line: 189, column: 17, scope: !6459)
!6463 = !DILocation(line: 189, column: 16, scope: !6459)
!6464 = !DILocation(line: 189, column: 13, scope: !6459)
!6465 = !DILocation(line: 190, column: 9, scope: !6459)
!6466 = !DILocation(line: 191, column: 11, scope: !6467)
!6467 = distinct !DILexicalBlock(scope: !6456, file: !6437, line: 191, column: 11)
!6468 = !DILocation(line: 191, column: 11, scope: !6456)
!6469 = !DILocation(line: 192, column: 9, scope: !6467)
!6470 = !DILocation(line: 193, column: 5, scope: !6456)
!6471 = !DILocation(line: 200, column: 71, scope: !6472)
!6472 = distinct !DILexicalBlock(scope: !6473, file: !6437, line: 200, column: 11)
!6473 = distinct !DILexicalBlock(scope: !6452, file: !6437, line: 195, column: 5)
!6474 = !DILocation(line: 200, column: 69, scope: !6472)
!6475 = !DILocation(line: 201, column: 14, scope: !6472)
!6476 = !DILocation(line: 201, column: 11, scope: !6472)
!6477 = !DILocation(line: 200, column: 11, scope: !6473)
!6478 = !DILocation(line: 202, column: 9, scope: !6472)
!6479 = !DILocation(line: 203, column: 12, scope: !6473)
!6480 = !DILocation(line: 203, column: 14, scope: !6473)
!6481 = !DILocation(line: 203, column: 18, scope: !6473)
!6482 = !DILocation(line: 203, column: 9, scope: !6473)
!6483 = !DILocation(line: 206, column: 9, scope: !6436)
!6484 = !DILocation(line: 206, column: 4, scope: !6436)
!6485 = !DILocation(line: 206, column: 7, scope: !6436)
!6486 = !DILocation(line: 207, column: 20, scope: !6436)
!6487 = !DILocation(line: 207, column: 23, scope: !6436)
!6488 = !DILocation(line: 207, column: 27, scope: !6436)
!6489 = !DILocation(line: 207, column: 25, scope: !6436)
!6490 = !DILocation(line: 207, column: 10, scope: !6436)
!6491 = !DILocation(line: 207, column: 3, scope: !6436)
!6492 = !DILocalVariable(name: "p", arg: 1, scope: !6493, file: !6437, line: 174, type: !8)
!6493 = distinct !DISubprogram(name: "x2nrealloc", scope: !6437, file: !6437, line: 174, type: !6438, scopeLine: 175, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6494, retainedNodes: !4)
!6494 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!6495 = !DILocalVariable(name: "pn", arg: 2, scope: !6493, file: !6437, line: 174, type: !6440)
!6496 = !DILocalVariable(name: "s", arg: 3, scope: !6493, file: !6437, line: 174, type: !110)
!6497 = !DILocalVariable(name: "n", scope: !6493, file: !6437, line: 176, type: !110)
!6498 = distinct !DISubprogram(name: "xcharalloc", scope: !6437, file: !6437, line: 216, type: !6499, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!6499 = !DISubroutineType(types: !6500)
!6500 = !{!6, !110}
!6501 = !DILocalVariable(name: "n", arg: 1, scope: !6498, file: !6437, line: 216, type: !110)
!6502 = !DILocation(line: 216, column: 20, scope: !6498)
!6503 = !DILocation(line: 218, column: 10, scope: !6498)
!6504 = !DILocation(line: 218, column: 3, scope: !6498)
!6505 = !DILocalVariable(name: "n", arg: 1, scope: !6506, file: !6437, line: 216, type: !110)
!6506 = distinct !DISubprogram(name: "xcharalloc", scope: !6437, file: !6437, line: 216, type: !6499, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6507, retainedNodes: !4)
!6507 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!6508 = distinct !DISubprogram(name: "xalloc_die", scope: !6509, file: !6509, line: 32, type: !1463, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!6509 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!6510 = !DILocation(line: 34, column: 10, scope: !6508)
!6511 = !DILocation(line: 34, column: 33, scope: !6508)
!6512 = !DILocation(line: 34, column: 3, scope: !6508)
!6513 = !DILocation(line: 40, column: 3, scope: !6508)
!6514 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !6515, file: !6515, line: 86, type: !6516, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !306, retainedNodes: !4)
!6515 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!6516 = !DISubroutineType(types: !6517)
!6517 = !{!110, !6518, !49, !110, !6519}
!6518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5008, size: 64)
!6519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6520, size: 64)
!6520 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !4982, line: 6, baseType: !6521)
!6521 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !4984, line: 21, baseType: !6522)
!6522 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4984, line: 13, size: 64, elements: !6523)
!6523 = !{!6524, !6525}
!6524 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !6522, file: !4984, line: 15, baseType: !53, size: 32)
!6525 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !6522, file: !4984, line: 20, baseType: !6526, size: 32, offset: 32)
!6526 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !6522, file: !4984, line: 16, size: 32, elements: !6527)
!6527 = !{!6528, !6529}
!6528 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !6526, file: !4984, line: 18, baseType: !180, size: 32)
!6529 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !6526, file: !4984, line: 19, baseType: !82, size: 32)
!6530 = !DILocalVariable(name: "pwc", arg: 1, scope: !6514, file: !6515, line: 86, type: !6518)
!6531 = !DILocation(line: 86, column: 23, scope: !6514)
!6532 = !DILocalVariable(name: "s", arg: 2, scope: !6514, file: !6515, line: 86, type: !49)
!6533 = !DILocation(line: 86, column: 40, scope: !6514)
!6534 = !DILocalVariable(name: "n", arg: 3, scope: !6514, file: !6515, line: 86, type: !110)
!6535 = !DILocation(line: 86, column: 50, scope: !6514)
!6536 = !DILocalVariable(name: "ps", arg: 4, scope: !6514, file: !6515, line: 86, type: !6519)
!6537 = !DILocation(line: 86, column: 64, scope: !6514)
!6538 = !DILocalVariable(name: "ret", scope: !6514, file: !6515, line: 88, type: !110)
!6539 = !DILocation(line: 88, column: 10, scope: !6514)
!6540 = !DILocalVariable(name: "wc", scope: !6514, file: !6515, line: 89, type: !5008)
!6541 = !DILocation(line: 89, column: 11, scope: !6514)
!6542 = !DILocation(line: 105, column: 9, scope: !6543)
!6543 = distinct !DILexicalBlock(scope: !6514, file: !6515, line: 105, column: 7)
!6544 = !DILocation(line: 105, column: 7, scope: !6514)
!6545 = !DILocation(line: 106, column: 9, scope: !6543)
!6546 = !DILocation(line: 106, column: 5, scope: !6543)
!6547 = !DILocation(line: 145, column: 18, scope: !6514)
!6548 = !DILocation(line: 145, column: 23, scope: !6514)
!6549 = !DILocation(line: 145, column: 26, scope: !6514)
!6550 = !DILocation(line: 145, column: 29, scope: !6514)
!6551 = !DILocation(line: 145, column: 9, scope: !6514)
!6552 = !DILocation(line: 145, column: 7, scope: !6514)
!6553 = !DILocation(line: 154, column: 22, scope: !6554)
!6554 = distinct !DILexicalBlock(scope: !6514, file: !6515, line: 154, column: 7)
!6555 = !DILocation(line: 154, column: 19, scope: !6554)
!6556 = !DILocation(line: 154, column: 26, scope: !6554)
!6557 = !DILocation(line: 154, column: 29, scope: !6554)
!6558 = !DILocation(line: 154, column: 31, scope: !6554)
!6559 = !DILocation(line: 154, column: 36, scope: !6554)
!6560 = !DILocation(line: 154, column: 41, scope: !6554)
!6561 = !DILocation(line: 154, column: 7, scope: !6514)
!6562 = !DILocalVariable(name: "uc", scope: !6563, file: !6515, line: 156, type: !317)
!6563 = distinct !DILexicalBlock(scope: !6554, file: !6515, line: 155, column: 5)
!6564 = !DILocation(line: 156, column: 21, scope: !6563)
!6565 = !DILocation(line: 156, column: 27, scope: !6563)
!6566 = !DILocation(line: 156, column: 26, scope: !6563)
!6567 = !DILocation(line: 157, column: 14, scope: !6563)
!6568 = !DILocation(line: 157, column: 8, scope: !6563)
!6569 = !DILocation(line: 157, column: 12, scope: !6563)
!6570 = !DILocation(line: 158, column: 7, scope: !6563)
!6571 = !DILocation(line: 162, column: 10, scope: !6514)
!6572 = !DILocation(line: 162, column: 3, scope: !6514)
!6573 = !DILocation(line: 163, column: 1, scope: !6514)
!6574 = !DILocalVariable(name: "pwc", arg: 1, scope: !6575, file: !6515, line: 86, type: !6518)
!6575 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !6515, file: !6515, line: 86, type: !6576, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6589, retainedNodes: !4)
!6576 = !DISubroutineType(types: !6577)
!6577 = !{!110, !6518, !49, !110, !6578}
!6578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6579, size: 64)
!6579 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !4982, line: 6, baseType: !6580)
!6580 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !4984, line: 21, baseType: !6581)
!6581 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4984, line: 13, size: 64, elements: !6582)
!6582 = !{!6583, !6584}
!6583 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !6581, file: !4984, line: 15, baseType: !53, size: 32)
!6584 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !6581, file: !4984, line: 20, baseType: !6585, size: 32, offset: 32)
!6585 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !6581, file: !4984, line: 16, size: 32, elements: !6586)
!6586 = !{!6587, !6588}
!6587 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !6585, file: !4984, line: 18, baseType: !180, size: 32)
!6588 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !6585, file: !4984, line: 19, baseType: !82, size: 32)
!6589 = distinct !DICompileUnit(language: DW_LANG_C99, file: !307, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !308, nameTableKind: None)
!6590 = !DILocalVariable(name: "s", arg: 2, scope: !6575, file: !6515, line: 86, type: !49)
!6591 = !DILocalVariable(name: "n", arg: 3, scope: !6575, file: !6515, line: 86, type: !110)
!6592 = !DILocalVariable(name: "ps", arg: 4, scope: !6575, file: !6515, line: 86, type: !6578)
!6593 = !DILocalVariable(name: "ret", scope: !6575, file: !6515, line: 88, type: !110)
!6594 = !DILocalVariable(name: "wc", scope: !6575, file: !6515, line: 89, type: !5008)
!6595 = distinct !DISubprogram(name: "extract_trimmed_name", scope: !6596, file: !6596, line: 49, type: !6597, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !309, retainedNodes: !4)
!6596 = !DIFile(filename: "lib/readutmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!6597 = !DISubroutineType(types: !6598)
!6598 = !{!6, !6599}
!6599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6600, size: 64)
!6600 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6601)
!6601 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !6602)
!6602 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !6603)
!6603 = !{!6604, !6605, !6606, !6607, !6608, !6609, !6610, !6615, !6616, !6621, !6622}
!6604 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !6602, file: !72, line: 57, baseType: !14, size: 16)
!6605 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !6602, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!6606 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !6602, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!6607 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !6602, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!6608 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !6602, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!6609 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !6602, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!6610 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !6602, file: !72, line: 67, baseType: !6611, size: 32, offset: 2656)
!6611 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !6612)
!6612 = !{!6613, !6614}
!6613 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !6611, file: !72, line: 45, baseType: !14, size: 16)
!6614 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !6611, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!6615 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !6602, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!6616 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !6602, file: !72, line: 79, baseType: !6617, size: 64, offset: 2720)
!6617 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !6602, file: !72, line: 75, size: 64, elements: !6618)
!6618 = !{!6619, !6620}
!6619 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !6617, file: !72, line: 77, baseType: !96, size: 32)
!6620 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !6617, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!6621 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !6602, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!6622 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !6602, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!6623 = !DILocalVariable(name: "ut", arg: 1, scope: !6595, file: !6596, line: 49, type: !6599)
!6624 = !DILocation(line: 49, column: 42, scope: !6595)
!6625 = !DILocalVariable(name: "p", scope: !6595, file: !6596, line: 51, type: !6)
!6626 = !DILocation(line: 51, column: 9, scope: !6595)
!6627 = !DILocalVariable(name: "trimmed_name", scope: !6595, file: !6596, line: 51, type: !6)
!6628 = !DILocation(line: 51, column: 13, scope: !6595)
!6629 = !DILocation(line: 53, column: 18, scope: !6595)
!6630 = !DILocation(line: 53, column: 16, scope: !6595)
!6631 = !DILocation(line: 54, column: 12, scope: !6595)
!6632 = !DILocation(line: 54, column: 26, scope: !6595)
!6633 = !DILocation(line: 54, column: 3, scope: !6595)
!6634 = !DILocation(line: 58, column: 3, scope: !6595)
!6635 = !DILocation(line: 58, column: 39, scope: !6595)
!6636 = !DILocation(line: 59, column: 12, scope: !6637)
!6637 = distinct !DILexicalBlock(scope: !6595, file: !6596, line: 59, column: 3)
!6638 = !DILocation(line: 59, column: 35, scope: !6637)
!6639 = !DILocation(line: 59, column: 27, scope: !6637)
!6640 = !DILocation(line: 59, column: 25, scope: !6637)
!6641 = !DILocation(line: 59, column: 10, scope: !6637)
!6642 = !DILocation(line: 59, column: 8, scope: !6637)
!6643 = !DILocation(line: 60, column: 8, scope: !6644)
!6644 = distinct !DILexicalBlock(scope: !6637, file: !6596, line: 59, column: 3)
!6645 = !DILocation(line: 60, column: 23, scope: !6644)
!6646 = !DILocation(line: 60, column: 21, scope: !6644)
!6647 = !DILocation(line: 60, column: 25, scope: !6644)
!6648 = !DILocation(line: 60, column: 28, scope: !6644)
!6649 = !DILocation(line: 60, column: 34, scope: !6644)
!6650 = !DILocation(line: 0, scope: !6644)
!6651 = !DILocation(line: 59, column: 3, scope: !6637)
!6652 = !DILocation(line: 62, column: 5, scope: !6644)
!6653 = !DILocation(line: 61, column: 9, scope: !6644)
!6654 = !DILocation(line: 61, column: 13, scope: !6644)
!6655 = !DILocation(line: 59, column: 3, scope: !6644)
!6656 = distinct !{!6656, !6651, !6657}
!6657 = !DILocation(line: 62, column: 5, scope: !6637)
!6658 = !DILocation(line: 63, column: 10, scope: !6595)
!6659 = !DILocation(line: 63, column: 3, scope: !6595)
!6660 = !DILocalVariable(name: "ut", arg: 1, scope: !6661, file: !6596, line: 49, type: !6664)
!6661 = distinct !DISubprogram(name: "extract_trimmed_name", scope: !6596, file: !6596, line: 49, type: !6662, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6688, retainedNodes: !4)
!6662 = !DISubroutineType(types: !6663)
!6663 = !{!6, !6664}
!6664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6665, size: 64)
!6665 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6666)
!6666 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !6667)
!6667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !6668)
!6668 = !{!6669, !6670, !6671, !6672, !6673, !6674, !6675, !6680, !6681, !6686, !6687}
!6669 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !6667, file: !72, line: 57, baseType: !14, size: 16)
!6670 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !6667, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!6671 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !6667, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!6672 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !6667, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!6673 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !6667, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!6674 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !6667, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!6675 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !6667, file: !72, line: 67, baseType: !6676, size: 32, offset: 2656)
!6676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !6677)
!6677 = !{!6678, !6679}
!6678 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !6676, file: !72, line: 45, baseType: !14, size: 16)
!6679 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !6676, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!6680 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !6667, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!6681 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !6667, file: !72, line: 79, baseType: !6682, size: 64, offset: 2720)
!6682 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !6667, file: !72, line: 75, size: 64, elements: !6683)
!6683 = !{!6684, !6685}
!6684 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !6682, file: !72, line: 77, baseType: !96, size: 32)
!6685 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !6682, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!6686 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !6667, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!6687 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !6667, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!6688 = distinct !DICompileUnit(language: DW_LANG_C99, file: !310, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !311, nameTableKind: None)
!6689 = !DILocalVariable(name: "p", scope: !6661, file: !6596, line: 51, type: !6)
!6690 = !DILocalVariable(name: "trimmed_name", scope: !6661, file: !6596, line: 51, type: !6)
!6691 = distinct !DISubprogram(name: "read_utmp", scope: !6596, file: !6596, line: 92, type: !6692, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !309, retainedNodes: !4)
!6692 = !DISubroutineType(types: !6693)
!6693 = !{!53, !49, !6440, !6694, !53}
!6694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6695, size: 64)
!6695 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6601, size: 64)
!6696 = !DILocalVariable(name: "file", arg: 1, scope: !6691, file: !6596, line: 92, type: !49)
!6697 = !DILocation(line: 92, column: 24, scope: !6691)
!6698 = !DILocalVariable(name: "n_entries", arg: 2, scope: !6691, file: !6596, line: 92, type: !6440)
!6699 = !DILocation(line: 92, column: 38, scope: !6691)
!6700 = !DILocalVariable(name: "utmp_buf", arg: 3, scope: !6691, file: !6596, line: 92, type: !6694)
!6701 = !DILocation(line: 92, column: 63, scope: !6691)
!6702 = !DILocalVariable(name: "options", arg: 4, scope: !6691, file: !6596, line: 93, type: !53)
!6703 = !DILocation(line: 93, column: 16, scope: !6691)
!6704 = !DILocalVariable(name: "n_read", scope: !6691, file: !6596, line: 95, type: !110)
!6705 = !DILocation(line: 95, column: 10, scope: !6691)
!6706 = !DILocalVariable(name: "n_alloc", scope: !6691, file: !6596, line: 96, type: !110)
!6707 = !DILocation(line: 96, column: 10, scope: !6691)
!6708 = !DILocalVariable(name: "utmp", scope: !6691, file: !6596, line: 97, type: !6695)
!6709 = !DILocation(line: 97, column: 16, scope: !6691)
!6710 = !DILocalVariable(name: "u", scope: !6691, file: !6596, line: 98, type: !6695)
!6711 = !DILocation(line: 98, column: 16, scope: !6691)
!6712 = !DILocation(line: 104, column: 32, scope: !6691)
!6713 = !DILocation(line: 104, column: 3, scope: !6691)
!6714 = !DILocation(line: 106, column: 3, scope: !6691)
!6715 = !DILocation(line: 108, column: 3, scope: !6691)
!6716 = !DILocation(line: 108, column: 15, scope: !6691)
!6717 = !DILocation(line: 108, column: 13, scope: !6691)
!6718 = !DILocation(line: 108, column: 32, scope: !6691)
!6719 = !DILocation(line: 109, column: 31, scope: !6720)
!6720 = distinct !DILexicalBlock(scope: !6691, file: !6596, line: 109, column: 9)
!6721 = !DILocation(line: 109, column: 34, scope: !6720)
!6722 = !DILocation(line: 109, column: 9, scope: !6720)
!6723 = !DILocation(line: 109, column: 9, scope: !6691)
!6724 = !DILocation(line: 111, column: 13, scope: !6725)
!6725 = distinct !DILexicalBlock(scope: !6726, file: !6596, line: 111, column: 13)
!6726 = distinct !DILexicalBlock(scope: !6720, file: !6596, line: 110, column: 7)
!6727 = !DILocation(line: 111, column: 23, scope: !6725)
!6728 = !DILocation(line: 111, column: 20, scope: !6725)
!6729 = !DILocation(line: 111, column: 13, scope: !6726)
!6730 = !DILocation(line: 112, column: 30, scope: !6725)
!6731 = !DILocation(line: 112, column: 18, scope: !6725)
!6732 = !DILocation(line: 112, column: 16, scope: !6725)
!6733 = !DILocation(line: 112, column: 11, scope: !6725)
!6734 = !DILocation(line: 114, column: 9, scope: !6726)
!6735 = !DILocation(line: 114, column: 20, scope: !6726)
!6736 = !DILocation(line: 114, column: 27, scope: !6726)
!6737 = !DILocation(line: 114, column: 26, scope: !6726)
!6738 = !DILocation(line: 115, column: 7, scope: !6726)
!6739 = distinct !{!6739, !6715, !6740}
!6740 = !DILocation(line: 115, column: 7, scope: !6691)
!6741 = !DILocation(line: 117, column: 3, scope: !6691)
!6742 = !DILocation(line: 119, column: 16, scope: !6691)
!6743 = !DILocation(line: 119, column: 4, scope: !6691)
!6744 = !DILocation(line: 119, column: 14, scope: !6691)
!6745 = !DILocation(line: 120, column: 15, scope: !6691)
!6746 = !DILocation(line: 120, column: 4, scope: !6691)
!6747 = !DILocation(line: 120, column: 13, scope: !6691)
!6748 = !DILocation(line: 122, column: 3, scope: !6691)
!6749 = !DILocalVariable(name: "file", arg: 1, scope: !6750, file: !6596, line: 92, type: !49)
!6750 = distinct !DISubprogram(name: "read_utmp", scope: !6596, file: !6596, line: 92, type: !6751, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6777, retainedNodes: !4)
!6751 = !DISubroutineType(types: !6752)
!6752 = !{!53, !49, !6440, !6753, !53}
!6753 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6754, size: 64)
!6754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6755, size: 64)
!6755 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !6756)
!6756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !6757)
!6757 = !{!6758, !6759, !6760, !6761, !6762, !6763, !6764, !6769, !6770, !6775, !6776}
!6758 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !6756, file: !72, line: 57, baseType: !14, size: 16)
!6759 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !6756, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!6760 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !6756, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!6761 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !6756, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!6762 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !6756, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!6763 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !6756, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!6764 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !6756, file: !72, line: 67, baseType: !6765, size: 32, offset: 2656)
!6765 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !6766)
!6766 = !{!6767, !6768}
!6767 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !6765, file: !72, line: 45, baseType: !14, size: 16)
!6768 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !6765, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!6769 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !6756, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!6770 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !6756, file: !72, line: 79, baseType: !6771, size: 64, offset: 2720)
!6771 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !6756, file: !72, line: 75, size: 64, elements: !6772)
!6772 = !{!6773, !6774}
!6773 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !6771, file: !72, line: 77, baseType: !96, size: 32)
!6774 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !6771, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!6775 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !6756, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!6776 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !6756, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!6777 = distinct !DICompileUnit(language: DW_LANG_C99, file: !310, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !311, nameTableKind: None)
!6778 = !DILocalVariable(name: "n_entries", arg: 2, scope: !6750, file: !6596, line: 92, type: !6440)
!6779 = !DILocalVariable(name: "utmp_buf", arg: 3, scope: !6750, file: !6596, line: 92, type: !6753)
!6780 = !DILocalVariable(name: "options", arg: 4, scope: !6750, file: !6596, line: 93, type: !53)
!6781 = !DILocalVariable(name: "n_read", scope: !6750, file: !6596, line: 95, type: !110)
!6782 = !DILocalVariable(name: "n_alloc", scope: !6750, file: !6596, line: 96, type: !110)
!6783 = !DILocalVariable(name: "utmp", scope: !6750, file: !6596, line: 97, type: !6754)
!6784 = !DILocalVariable(name: "u", scope: !6750, file: !6596, line: 98, type: !6754)
!6785 = distinct !DISubprogram(name: "desirable_utmp_entry", scope: !6596, file: !6596, line: 69, type: !6786, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !309, retainedNodes: !4)
!6786 = !DISubroutineType(types: !6787)
!6787 = !{!18, !6599, !53}
!6788 = !DILocalVariable(name: "u", arg: 1, scope: !6785, file: !6596, line: 69, type: !6599)
!6789 = !DILocation(line: 69, column: 42, scope: !6785)
!6790 = !DILocalVariable(name: "options", arg: 2, scope: !6785, file: !6596, line: 69, type: !53)
!6791 = !DILocation(line: 69, column: 49, scope: !6785)
!6792 = !DILocalVariable(name: "user_proc", scope: !6785, file: !6596, line: 71, type: !18)
!6793 = !DILocation(line: 71, column: 8, scope: !6785)
!6794 = !DILocation(line: 71, column: 20, scope: !6785)
!6795 = !DILocation(line: 0, scope: !6785)
!6796 = !DILocation(line: 72, column: 8, scope: !6797)
!6797 = distinct !DILexicalBlock(scope: !6785, file: !6596, line: 72, column: 7)
!6798 = !DILocation(line: 72, column: 16, scope: !6797)
!6799 = !DILocation(line: 72, column: 42, scope: !6797)
!6800 = !DILocation(line: 72, column: 46, scope: !6797)
!6801 = !DILocation(line: 72, column: 7, scope: !6785)
!6802 = !DILocation(line: 73, column: 5, scope: !6797)
!6803 = !DILocation(line: 74, column: 8, scope: !6804)
!6804 = distinct !DILexicalBlock(scope: !6785, file: !6596, line: 74, column: 7)
!6805 = !DILocation(line: 74, column: 16, scope: !6804)
!6806 = !DILocation(line: 75, column: 7, scope: !6804)
!6807 = !DILocation(line: 75, column: 10, scope: !6804)
!6808 = !DILocation(line: 76, column: 7, scope: !6804)
!6809 = !DILocation(line: 76, column: 14, scope: !6804)
!6810 = !DILocation(line: 76, column: 12, scope: !6804)
!6811 = !DILocation(line: 77, column: 7, scope: !6804)
!6812 = !DILocation(line: 77, column: 17, scope: !6804)
!6813 = !DILocation(line: 77, column: 11, scope: !6804)
!6814 = !DILocation(line: 77, column: 32, scope: !6804)
!6815 = !DILocation(line: 77, column: 36, scope: !6804)
!6816 = !DILocation(line: 77, column: 39, scope: !6804)
!6817 = !DILocation(line: 77, column: 45, scope: !6804)
!6818 = !DILocation(line: 74, column: 7, scope: !6785)
!6819 = !DILocation(line: 78, column: 5, scope: !6804)
!6820 = !DILocation(line: 79, column: 3, scope: !6785)
!6821 = !DILocation(line: 80, column: 1, scope: !6785)
!6822 = !DILocalVariable(name: "u", arg: 1, scope: !6823, file: !6596, line: 69, type: !6826)
!6823 = distinct !DISubprogram(name: "desirable_utmp_entry", scope: !6596, file: !6596, line: 69, type: !6824, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !6850, retainedNodes: !4)
!6824 = !DISubroutineType(types: !6825)
!6825 = !{!18, !6826, !53}
!6826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6827, size: 64)
!6827 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6828)
!6828 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !6829)
!6829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !6830)
!6830 = !{!6831, !6832, !6833, !6834, !6835, !6836, !6837, !6842, !6843, !6848, !6849}
!6831 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !6829, file: !72, line: 57, baseType: !14, size: 16)
!6832 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !6829, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!6833 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !6829, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!6834 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !6829, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!6835 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !6829, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!6836 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !6829, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!6837 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !6829, file: !72, line: 67, baseType: !6838, size: 32, offset: 2656)
!6838 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !6839)
!6839 = !{!6840, !6841}
!6840 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !6838, file: !72, line: 45, baseType: !14, size: 16)
!6841 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !6838, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!6842 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !6829, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!6843 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !6829, file: !72, line: 79, baseType: !6844, size: 64, offset: 2720)
!6844 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !6829, file: !72, line: 75, size: 64, elements: !6845)
!6845 = !{!6846, !6847}
!6846 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !6844, file: !72, line: 77, baseType: !96, size: 32)
!6847 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !6844, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!6848 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !6829, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!6849 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !6829, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!6850 = distinct !DICompileUnit(language: DW_LANG_C99, file: !310, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !311, nameTableKind: None)
!6851 = !DILocalVariable(name: "options", arg: 2, scope: !6823, file: !6596, line: 69, type: !53)
!6852 = !DILocalVariable(name: "user_proc", scope: !6823, file: !6596, line: 71, type: !18)
!6853 = distinct !DISubprogram(name: "c_strcasecmp", scope: !6854, file: !6854, line: 27, type: !6855, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!6854 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!6855 = !DISubroutineType(types: !6856)
!6856 = !{!53, !49, !49}
!6857 = !DILocalVariable(name: "s1", arg: 1, scope: !6853, file: !6854, line: 27, type: !49)
!6858 = !DILocation(line: 27, column: 27, scope: !6853)
!6859 = !DILocalVariable(name: "s2", arg: 2, scope: !6853, file: !6854, line: 27, type: !49)
!6860 = !DILocation(line: 27, column: 43, scope: !6853)
!6861 = !DILocalVariable(name: "p1", scope: !6853, file: !6854, line: 29, type: !315)
!6862 = !DILocation(line: 29, column: 33, scope: !6853)
!6863 = !DILocation(line: 29, column: 62, scope: !6853)
!6864 = !DILocalVariable(name: "p2", scope: !6853, file: !6854, line: 30, type: !315)
!6865 = !DILocation(line: 30, column: 33, scope: !6853)
!6866 = !DILocation(line: 30, column: 62, scope: !6853)
!6867 = !DILocalVariable(name: "c1", scope: !6853, file: !6854, line: 31, type: !317)
!6868 = !DILocation(line: 31, column: 17, scope: !6853)
!6869 = !DILocalVariable(name: "c2", scope: !6853, file: !6854, line: 31, type: !317)
!6870 = !DILocation(line: 31, column: 21, scope: !6853)
!6871 = !DILocation(line: 33, column: 7, scope: !6872)
!6872 = distinct !DILexicalBlock(scope: !6853, file: !6854, line: 33, column: 7)
!6873 = !DILocation(line: 33, column: 13, scope: !6872)
!6874 = !DILocation(line: 33, column: 10, scope: !6872)
!6875 = !DILocation(line: 33, column: 7, scope: !6853)
!6876 = !DILocation(line: 34, column: 5, scope: !6872)
!6877 = !DILocation(line: 36, column: 3, scope: !6853)
!6878 = !DILocation(line: 38, column: 24, scope: !6879)
!6879 = distinct !DILexicalBlock(scope: !6853, file: !6854, line: 37, column: 5)
!6880 = !DILocation(line: 38, column: 23, scope: !6879)
!6881 = !DILocation(line: 38, column: 12, scope: !6879)
!6882 = !DILocation(line: 38, column: 10, scope: !6879)
!6883 = !DILocation(line: 39, column: 24, scope: !6879)
!6884 = !DILocation(line: 39, column: 23, scope: !6879)
!6885 = !DILocation(line: 39, column: 12, scope: !6879)
!6886 = !DILocation(line: 39, column: 10, scope: !6879)
!6887 = !DILocation(line: 41, column: 11, scope: !6888)
!6888 = distinct !DILexicalBlock(scope: !6879, file: !6854, line: 41, column: 11)
!6889 = !DILocation(line: 41, column: 14, scope: !6888)
!6890 = !DILocation(line: 41, column: 11, scope: !6879)
!6891 = !DILocation(line: 42, column: 9, scope: !6888)
!6892 = !DILocation(line: 44, column: 7, scope: !6879)
!6893 = !DILocation(line: 45, column: 7, scope: !6879)
!6894 = !DILocation(line: 46, column: 5, scope: !6879)
!6895 = !DILocation(line: 47, column: 10, scope: !6853)
!6896 = !DILocation(line: 47, column: 16, scope: !6853)
!6897 = !DILocation(line: 47, column: 13, scope: !6853)
!6898 = distinct !{!6898, !6877, !6899}
!6899 = !DILocation(line: 47, column: 18, scope: !6853)
!6900 = !DILocation(line: 50, column: 12, scope: !6901)
!6901 = distinct !DILexicalBlock(scope: !6853, file: !6854, line: 49, column: 7)
!6902 = !DILocation(line: 50, column: 17, scope: !6901)
!6903 = !DILocation(line: 50, column: 15, scope: !6901)
!6904 = !DILocation(line: 50, column: 5, scope: !6901)
!6905 = !DILocation(line: 56, column: 1, scope: !6853)
!6906 = !DILocalVariable(name: "s1", arg: 1, scope: !6907, file: !6854, line: 27, type: !49)
!6907 = distinct !DISubprogram(name: "c_strcasecmp", scope: !6854, file: !6854, line: 27, type: !6855, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6908, retainedNodes: !4)
!6908 = distinct !DICompileUnit(language: DW_LANG_C99, file: !313, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !314, nameTableKind: None)
!6909 = !DILocalVariable(name: "s2", arg: 2, scope: !6907, file: !6854, line: 27, type: !49)
!6910 = !DILocalVariable(name: "p1", scope: !6907, file: !6854, line: 29, type: !315)
!6911 = !DILocalVariable(name: "p2", scope: !6907, file: !6854, line: 30, type: !315)
!6912 = !DILocalVariable(name: "c1", scope: !6907, file: !6854, line: 31, type: !317)
!6913 = !DILocalVariable(name: "c2", scope: !6907, file: !6854, line: 31, type: !317)
!6914 = distinct !DISubprogram(name: "close_stream", scope: !6915, file: !6915, line: 56, type: !6916, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !318, retainedNodes: !4)
!6915 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!6916 = !DISubroutineType(types: !6917)
!6917 = !{!53, !6918}
!6918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6919, size: 64)
!6919 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !6920)
!6920 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !6921)
!6921 = !{!6922, !6923, !6924, !6925, !6926, !6927, !6928, !6929, !6930, !6931, !6932, !6933, !6934, !6935, !6937, !6938, !6939, !6940, !6941, !6942, !6943, !6944, !6945, !6946, !6947, !6948, !6949, !6950, !6951}
!6922 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6920, file: !5975, line: 51, baseType: !53, size: 32)
!6923 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6920, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!6924 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6920, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!6925 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6920, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!6926 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6920, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!6927 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6920, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!6928 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6920, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!6929 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6920, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!6930 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6920, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!6931 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6920, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!6932 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6920, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!6933 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6920, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!6934 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6920, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!6935 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6920, file: !5975, line: 70, baseType: !6936, size: 64, offset: 832)
!6936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6920, size: 64)
!6937 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6920, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!6938 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6920, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!6939 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6920, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!6940 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6920, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!6941 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6920, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!6942 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6920, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!6943 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6920, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!6944 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6920, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!6945 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6920, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!6946 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6920, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!6947 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6920, file: !5975, line: 93, baseType: !6936, size: 64, offset: 1344)
!6948 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6920, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!6949 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6920, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!6950 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6920, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!6951 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6920, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!6952 = !DILocalVariable(name: "stream", arg: 1, scope: !6914, file: !6915, line: 56, type: !6918)
!6953 = !DILocation(line: 56, column: 21, scope: !6914)
!6954 = !DILocalVariable(name: "some_pending", scope: !6914, file: !6915, line: 58, type: !6955)
!6955 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18)
!6956 = !DILocation(line: 58, column: 14, scope: !6914)
!6957 = !DILocation(line: 58, column: 42, scope: !6914)
!6958 = !DILocation(line: 58, column: 30, scope: !6914)
!6959 = !DILocation(line: 58, column: 50, scope: !6914)
!6960 = !DILocalVariable(name: "prev_fail", scope: !6914, file: !6915, line: 59, type: !6955)
!6961 = !DILocation(line: 59, column: 14, scope: !6914)
!6962 = !DILocation(line: 59, column: 27, scope: !6914)
!6963 = !DILocation(line: 59, column: 43, scope: !6914)
!6964 = !DILocalVariable(name: "fclose_fail", scope: !6914, file: !6915, line: 60, type: !6955)
!6965 = !DILocation(line: 60, column: 14, scope: !6914)
!6966 = !DILocation(line: 60, column: 37, scope: !6914)
!6967 = !DILocation(line: 60, column: 29, scope: !6914)
!6968 = !DILocation(line: 60, column: 45, scope: !6914)
!6969 = !DILocation(line: 70, column: 7, scope: !6970)
!6970 = distinct !DILexicalBlock(scope: !6914, file: !6915, line: 70, column: 7)
!6971 = !DILocation(line: 70, column: 17, scope: !6970)
!6972 = !DILocation(line: 70, column: 21, scope: !6970)
!6973 = !DILocation(line: 70, column: 33, scope: !6970)
!6974 = !DILocation(line: 70, column: 37, scope: !6970)
!6975 = !DILocation(line: 70, column: 50, scope: !6970)
!6976 = !DILocation(line: 70, column: 53, scope: !6970)
!6977 = !DILocation(line: 70, column: 59, scope: !6970)
!6978 = !DILocation(line: 70, column: 7, scope: !6914)
!6979 = !DILocation(line: 72, column: 13, scope: !6980)
!6980 = distinct !DILexicalBlock(scope: !6981, file: !6915, line: 72, column: 11)
!6981 = distinct !DILexicalBlock(scope: !6970, file: !6915, line: 71, column: 5)
!6982 = !DILocation(line: 72, column: 11, scope: !6981)
!6983 = !DILocation(line: 73, column: 9, scope: !6980)
!6984 = !DILocation(line: 73, column: 15, scope: !6980)
!6985 = !DILocation(line: 74, column: 7, scope: !6981)
!6986 = !DILocation(line: 77, column: 3, scope: !6914)
!6987 = !DILocation(line: 78, column: 1, scope: !6914)
!6988 = !DILocalVariable(name: "stream", arg: 1, scope: !6989, file: !6915, line: 56, type: !6992)
!6989 = distinct !DISubprogram(name: "close_stream", scope: !6915, file: !6915, line: 56, type: !6990, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7026, retainedNodes: !4)
!6990 = !DISubroutineType(types: !6991)
!6991 = !{!53, !6992}
!6992 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6993, size: 64)
!6993 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !6994)
!6994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !6995)
!6995 = !{!6996, !6997, !6998, !6999, !7000, !7001, !7002, !7003, !7004, !7005, !7006, !7007, !7008, !7009, !7011, !7012, !7013, !7014, !7015, !7016, !7017, !7018, !7019, !7020, !7021, !7022, !7023, !7024, !7025}
!6996 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6994, file: !5975, line: 51, baseType: !53, size: 32)
!6997 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6994, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!6998 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6994, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!6999 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6994, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!7000 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6994, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!7001 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6994, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!7002 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6994, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!7003 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6994, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!7004 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6994, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!7005 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6994, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!7006 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6994, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!7007 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6994, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!7008 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6994, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!7009 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6994, file: !5975, line: 70, baseType: !7010, size: 64, offset: 832)
!7010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6994, size: 64)
!7011 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6994, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!7012 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6994, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!7013 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6994, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!7014 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6994, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!7015 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6994, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!7016 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6994, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!7017 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6994, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!7018 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6994, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!7019 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6994, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!7020 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6994, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!7021 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6994, file: !5975, line: 93, baseType: !7010, size: 64, offset: 1344)
!7022 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6994, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!7023 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6994, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!7024 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6994, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!7025 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6994, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!7026 = distinct !DICompileUnit(language: DW_LANG_C99, file: !319, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!7027 = !DILocalVariable(name: "some_pending", scope: !6989, file: !6915, line: 58, type: !6955)
!7028 = !DILocalVariable(name: "prev_fail", scope: !6989, file: !6915, line: 59, type: !6955)
!7029 = !DILocalVariable(name: "fclose_fail", scope: !6989, file: !6915, line: 60, type: !6955)
!7030 = distinct !DISubprogram(name: "locale_charset", scope: !7031, file: !7031, line: 831, type: !7032, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !320, retainedNodes: !4)
!7031 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!7032 = !DISubroutineType(types: !7033)
!7033 = !{!49}
!7034 = !DILocalVariable(name: "codeset", scope: !7030, file: !7031, line: 833, type: !49)
!7035 = !DILocation(line: 833, column: 15, scope: !7030)
!7036 = !DILocation(line: 847, column: 13, scope: !7030)
!7037 = !DILocation(line: 847, column: 11, scope: !7030)
!7038 = !DILocation(line: 911, column: 7, scope: !7039)
!7039 = distinct !DILexicalBlock(scope: !7030, file: !7031, line: 911, column: 7)
!7040 = !DILocation(line: 911, column: 15, scope: !7039)
!7041 = !DILocation(line: 911, column: 7, scope: !7030)
!7042 = !DILocation(line: 913, column: 13, scope: !7039)
!7043 = !DILocation(line: 913, column: 5, scope: !7039)
!7044 = !DILocation(line: 1070, column: 13, scope: !7045)
!7045 = distinct !DILexicalBlock(scope: !7046, file: !7031, line: 1070, column: 13)
!7046 = distinct !DILexicalBlock(scope: !7047, file: !7031, line: 1060, column: 7)
!7047 = distinct !DILexicalBlock(scope: !7030, file: !7031, line: 1019, column: 3)
!7048 = !DILocation(line: 1070, column: 24, scope: !7045)
!7049 = !DILocation(line: 1070, column: 13, scope: !7046)
!7050 = !DILocation(line: 1071, column: 19, scope: !7045)
!7051 = !DILocation(line: 1071, column: 11, scope: !7045)
!7052 = !DILocation(line: 1158, column: 10, scope: !7030)
!7053 = !DILocation(line: 1158, column: 3, scope: !7030)
!7054 = !DILocalVariable(name: "codeset", scope: !7055, file: !7031, line: 833, type: !49)
!7055 = distinct !DISubprogram(name: "locale_charset", scope: !7031, file: !7031, line: 831, type: !7032, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7056, retainedNodes: !4)
!7056 = distinct !DICompileUnit(language: DW_LANG_C99, file: !321, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!7057 = distinct !DISubprogram(name: "rpl_fclose", scope: !7058, file: !7058, line: 58, type: !7059, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !322, retainedNodes: !4)
!7058 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!7059 = !DISubroutineType(types: !7060)
!7060 = !{!53, !7061}
!7061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7062, size: 64)
!7062 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !7063)
!7063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !7064)
!7064 = !{!7065, !7066, !7067, !7068, !7069, !7070, !7071, !7072, !7073, !7074, !7075, !7076, !7077, !7078, !7080, !7081, !7082, !7083, !7084, !7085, !7086, !7087, !7088, !7089, !7090, !7091, !7092, !7093, !7094}
!7065 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !7063, file: !5975, line: 51, baseType: !53, size: 32)
!7066 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !7063, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!7067 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !7063, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!7068 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !7063, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!7069 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !7063, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!7070 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !7063, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!7071 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !7063, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!7072 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !7063, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!7073 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !7063, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!7074 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !7063, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!7075 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !7063, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!7076 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !7063, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!7077 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !7063, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!7078 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !7063, file: !5975, line: 70, baseType: !7079, size: 64, offset: 832)
!7079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7063, size: 64)
!7080 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !7063, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!7081 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !7063, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!7082 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !7063, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!7083 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !7063, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!7084 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !7063, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!7085 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !7063, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!7086 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !7063, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!7087 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !7063, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!7088 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !7063, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!7089 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !7063, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!7090 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !7063, file: !5975, line: 93, baseType: !7079, size: 64, offset: 1344)
!7091 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !7063, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!7092 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !7063, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!7093 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !7063, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!7094 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !7063, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!7095 = !DILocalVariable(name: "fp", arg: 1, scope: !7057, file: !7058, line: 58, type: !7061)
!7096 = !DILocation(line: 58, column: 19, scope: !7057)
!7097 = !DILocalVariable(name: "saved_errno", scope: !7057, file: !7058, line: 60, type: !53)
!7098 = !DILocation(line: 60, column: 7, scope: !7057)
!7099 = !DILocalVariable(name: "fd", scope: !7057, file: !7058, line: 61, type: !53)
!7100 = !DILocation(line: 61, column: 7, scope: !7057)
!7101 = !DILocalVariable(name: "result", scope: !7057, file: !7058, line: 62, type: !53)
!7102 = !DILocation(line: 62, column: 7, scope: !7057)
!7103 = !DILocation(line: 65, column: 16, scope: !7057)
!7104 = !DILocation(line: 65, column: 8, scope: !7057)
!7105 = !DILocation(line: 65, column: 6, scope: !7057)
!7106 = !DILocation(line: 66, column: 7, scope: !7107)
!7107 = distinct !DILexicalBlock(scope: !7057, file: !7058, line: 66, column: 7)
!7108 = !DILocation(line: 66, column: 10, scope: !7107)
!7109 = !DILocation(line: 66, column: 7, scope: !7057)
!7110 = !DILocation(line: 67, column: 28, scope: !7107)
!7111 = !DILocation(line: 67, column: 12, scope: !7107)
!7112 = !DILocation(line: 67, column: 5, scope: !7107)
!7113 = !DILocation(line: 72, column: 9, scope: !7114)
!7114 = distinct !DILexicalBlock(scope: !7057, file: !7058, line: 72, column: 7)
!7115 = !DILocation(line: 72, column: 23, scope: !7114)
!7116 = !DILocation(line: 72, column: 41, scope: !7114)
!7117 = !DILocation(line: 72, column: 33, scope: !7114)
!7118 = !DILocation(line: 72, column: 26, scope: !7114)
!7119 = !DILocation(line: 72, column: 59, scope: !7114)
!7120 = !DILocation(line: 73, column: 7, scope: !7114)
!7121 = !DILocation(line: 73, column: 18, scope: !7114)
!7122 = !DILocation(line: 73, column: 10, scope: !7114)
!7123 = !DILocation(line: 72, column: 7, scope: !7057)
!7124 = !DILocation(line: 74, column: 19, scope: !7114)
!7125 = !DILocation(line: 74, column: 17, scope: !7114)
!7126 = !DILocation(line: 74, column: 5, scope: !7114)
!7127 = !DILocation(line: 100, column: 28, scope: !7057)
!7128 = !DILocation(line: 100, column: 12, scope: !7057)
!7129 = !DILocation(line: 100, column: 10, scope: !7057)
!7130 = !DILocation(line: 105, column: 7, scope: !7131)
!7131 = distinct !DILexicalBlock(scope: !7057, file: !7058, line: 105, column: 7)
!7132 = !DILocation(line: 105, column: 19, scope: !7131)
!7133 = !DILocation(line: 105, column: 7, scope: !7057)
!7134 = !DILocation(line: 107, column: 15, scope: !7135)
!7135 = distinct !DILexicalBlock(scope: !7131, file: !7058, line: 106, column: 5)
!7136 = !DILocation(line: 107, column: 7, scope: !7135)
!7137 = !DILocation(line: 107, column: 13, scope: !7135)
!7138 = !DILocation(line: 108, column: 14, scope: !7135)
!7139 = !DILocation(line: 109, column: 5, scope: !7135)
!7140 = !DILocation(line: 111, column: 10, scope: !7057)
!7141 = !DILocation(line: 111, column: 3, scope: !7057)
!7142 = !DILocation(line: 112, column: 1, scope: !7057)
!7143 = !DILocalVariable(name: "fp", arg: 1, scope: !7144, file: !7058, line: 58, type: !7147)
!7144 = distinct !DISubprogram(name: "rpl_fclose", scope: !7058, file: !7058, line: 58, type: !7145, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7181, retainedNodes: !4)
!7145 = !DISubroutineType(types: !7146)
!7146 = !{!53, !7147}
!7147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7148, size: 64)
!7148 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !7149)
!7149 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !7150)
!7150 = !{!7151, !7152, !7153, !7154, !7155, !7156, !7157, !7158, !7159, !7160, !7161, !7162, !7163, !7164, !7166, !7167, !7168, !7169, !7170, !7171, !7172, !7173, !7174, !7175, !7176, !7177, !7178, !7179, !7180}
!7151 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !7149, file: !5975, line: 51, baseType: !53, size: 32)
!7152 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !7149, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!7153 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !7149, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!7154 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !7149, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!7155 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !7149, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!7156 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !7149, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!7157 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !7149, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!7158 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !7149, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!7159 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !7149, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!7160 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !7149, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!7161 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !7149, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!7162 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !7149, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!7163 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !7149, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!7164 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !7149, file: !5975, line: 70, baseType: !7165, size: 64, offset: 832)
!7165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7149, size: 64)
!7166 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !7149, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!7167 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !7149, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!7168 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !7149, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!7169 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !7149, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!7170 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !7149, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!7171 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !7149, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!7172 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !7149, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!7173 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !7149, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!7174 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !7149, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!7175 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !7149, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!7176 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !7149, file: !5975, line: 93, baseType: !7165, size: 64, offset: 1344)
!7177 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !7149, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!7178 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !7149, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!7179 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !7149, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!7180 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !7149, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!7181 = distinct !DICompileUnit(language: DW_LANG_C99, file: !323, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!7182 = !DILocalVariable(name: "saved_errno", scope: !7144, file: !7058, line: 60, type: !53)
!7183 = !DILocalVariable(name: "fd", scope: !7144, file: !7058, line: 61, type: !53)
!7184 = !DILocalVariable(name: "result", scope: !7144, file: !7058, line: 62, type: !53)
!7185 = distinct !DISubprogram(name: "rpl_fflush", scope: !7186, file: !7186, line: 129, type: !7187, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !324, retainedNodes: !4)
!7186 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!7187 = !DISubroutineType(types: !7188)
!7188 = !{!53, !7189}
!7189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7190, size: 64)
!7190 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !7191)
!7191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !7192)
!7192 = !{!7193, !7194, !7195, !7196, !7197, !7198, !7199, !7200, !7201, !7202, !7203, !7204, !7205, !7206, !7208, !7209, !7210, !7211, !7212, !7213, !7214, !7215, !7216, !7217, !7218, !7219, !7220, !7221, !7222}
!7193 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !7191, file: !5975, line: 51, baseType: !53, size: 32)
!7194 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !7191, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!7195 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !7191, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!7196 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !7191, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!7197 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !7191, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!7198 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !7191, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!7199 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !7191, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!7200 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !7191, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!7201 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !7191, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!7202 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !7191, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!7203 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !7191, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!7204 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !7191, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!7205 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !7191, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!7206 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !7191, file: !5975, line: 70, baseType: !7207, size: 64, offset: 832)
!7207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7191, size: 64)
!7208 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !7191, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!7209 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !7191, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!7210 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !7191, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!7211 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !7191, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!7212 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !7191, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!7213 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !7191, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!7214 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !7191, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!7215 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !7191, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!7216 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !7191, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!7217 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !7191, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!7218 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !7191, file: !5975, line: 93, baseType: !7207, size: 64, offset: 1344)
!7219 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !7191, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!7220 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !7191, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!7221 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !7191, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!7222 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !7191, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!7223 = !DILocalVariable(name: "stream", arg: 1, scope: !7185, file: !7186, line: 129, type: !7189)
!7224 = !DILocation(line: 129, column: 19, scope: !7185)
!7225 = !DILocation(line: 150, column: 7, scope: !7226)
!7226 = distinct !DILexicalBlock(scope: !7185, file: !7186, line: 150, column: 7)
!7227 = !DILocation(line: 150, column: 14, scope: !7226)
!7228 = !DILocation(line: 150, column: 22, scope: !7226)
!7229 = !DILocation(line: 150, column: 27, scope: !7226)
!7230 = !DILocation(line: 150, column: 7, scope: !7185)
!7231 = !DILocation(line: 151, column: 20, scope: !7226)
!7232 = !DILocation(line: 151, column: 12, scope: !7226)
!7233 = !DILocation(line: 151, column: 5, scope: !7226)
!7234 = !DILocation(line: 156, column: 44, scope: !7185)
!7235 = !DILocation(line: 156, column: 3, scope: !7185)
!7236 = !DILocation(line: 158, column: 18, scope: !7185)
!7237 = !DILocation(line: 158, column: 10, scope: !7185)
!7238 = !DILocation(line: 158, column: 3, scope: !7185)
!7239 = !DILocation(line: 235, column: 1, scope: !7185)
!7240 = !DILocalVariable(name: "stream", arg: 1, scope: !7241, file: !7186, line: 129, type: !7244)
!7241 = distinct !DISubprogram(name: "rpl_fflush", scope: !7186, file: !7186, line: 129, type: !7242, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7278, retainedNodes: !4)
!7242 = !DISubroutineType(types: !7243)
!7243 = !{!53, !7244}
!7244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7245, size: 64)
!7245 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !7246)
!7246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !7247)
!7247 = !{!7248, !7249, !7250, !7251, !7252, !7253, !7254, !7255, !7256, !7257, !7258, !7259, !7260, !7261, !7263, !7264, !7265, !7266, !7267, !7268, !7269, !7270, !7271, !7272, !7273, !7274, !7275, !7276, !7277}
!7248 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !7246, file: !5975, line: 51, baseType: !53, size: 32)
!7249 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !7246, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!7250 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !7246, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!7251 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !7246, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!7252 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !7246, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!7253 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !7246, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!7254 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !7246, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!7255 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !7246, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!7256 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !7246, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!7257 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !7246, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!7258 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !7246, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!7259 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !7246, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!7260 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !7246, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!7261 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !7246, file: !5975, line: 70, baseType: !7262, size: 64, offset: 832)
!7262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7246, size: 64)
!7263 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !7246, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!7264 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !7246, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!7265 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !7246, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!7266 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !7246, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!7267 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !7246, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!7268 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !7246, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!7269 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !7246, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!7270 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !7246, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!7271 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !7246, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!7272 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !7246, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!7273 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !7246, file: !5975, line: 93, baseType: !7262, size: 64, offset: 1344)
!7274 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !7246, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!7275 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !7246, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!7276 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !7246, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!7277 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !7246, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!7278 = distinct !DICompileUnit(language: DW_LANG_C99, file: !325, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!7279 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !7186, file: !7186, line: 41, type: !7280, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !324, retainedNodes: !4)
!7280 = !DISubroutineType(types: !7281)
!7281 = !{null, !7189}
!7282 = !DILocalVariable(name: "fp", arg: 1, scope: !7279, file: !7186, line: 41, type: !7189)
!7283 = !DILocation(line: 41, column: 48, scope: !7279)
!7284 = !DILocation(line: 43, column: 7, scope: !7285)
!7285 = distinct !DILexicalBlock(scope: !7279, file: !7186, line: 43, column: 7)
!7286 = !DILocation(line: 43, column: 11, scope: !7285)
!7287 = !DILocation(line: 43, column: 18, scope: !7285)
!7288 = !DILocation(line: 43, column: 7, scope: !7279)
!7289 = !DILocation(line: 45, column: 13, scope: !7285)
!7290 = !DILocation(line: 45, column: 5, scope: !7285)
!7291 = !DILocation(line: 46, column: 1, scope: !7279)
!7292 = !DILocalVariable(name: "fp", arg: 1, scope: !7293, file: !7186, line: 41, type: !7296)
!7293 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !7186, file: !7186, line: 41, type: !7294, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !7330, retainedNodes: !4)
!7294 = !DISubroutineType(types: !7295)
!7295 = !{null, !7296}
!7296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7297, size: 64)
!7297 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !7298)
!7298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !7299)
!7299 = !{!7300, !7301, !7302, !7303, !7304, !7305, !7306, !7307, !7308, !7309, !7310, !7311, !7312, !7313, !7315, !7316, !7317, !7318, !7319, !7320, !7321, !7322, !7323, !7324, !7325, !7326, !7327, !7328, !7329}
!7300 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !7298, file: !5975, line: 51, baseType: !53, size: 32)
!7301 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !7298, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!7302 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !7298, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!7303 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !7298, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!7304 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !7298, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!7305 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !7298, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!7306 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !7298, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!7307 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !7298, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!7308 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !7298, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!7309 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !7298, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!7310 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !7298, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!7311 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !7298, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!7312 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !7298, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!7313 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !7298, file: !5975, line: 70, baseType: !7314, size: 64, offset: 832)
!7314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7298, size: 64)
!7315 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !7298, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!7316 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !7298, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!7317 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !7298, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!7318 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !7298, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!7319 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !7298, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!7320 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !7298, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!7321 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !7298, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!7322 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !7298, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!7323 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !7298, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!7324 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !7298, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!7325 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !7298, file: !5975, line: 93, baseType: !7314, size: 64, offset: 1344)
!7326 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !7298, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!7327 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !7298, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!7328 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !7298, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!7329 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !7298, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!7330 = distinct !DICompileUnit(language: DW_LANG_C99, file: !325, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!7331 = distinct !DISubprogram(name: "rpl_fseeko", scope: !7332, file: !7332, line: 28, type: !7333, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !326, retainedNodes: !4)
!7332 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!7333 = !DISubroutineType(types: !7334)
!7334 = !{!53, !7335, !7369, !53}
!7335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7336, size: 64)
!7336 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !7337)
!7337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !7338)
!7338 = !{!7339, !7340, !7341, !7342, !7343, !7344, !7345, !7346, !7347, !7348, !7349, !7350, !7351, !7352, !7354, !7355, !7356, !7357, !7358, !7359, !7360, !7361, !7362, !7363, !7364, !7365, !7366, !7367, !7368}
!7339 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !7337, file: !5975, line: 51, baseType: !53, size: 32)
!7340 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !7337, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!7341 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !7337, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!7342 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !7337, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!7343 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !7337, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!7344 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !7337, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!7345 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !7337, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!7346 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !7337, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!7347 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !7337, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!7348 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !7337, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!7349 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !7337, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!7350 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !7337, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!7351 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !7337, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!7352 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !7337, file: !5975, line: 70, baseType: !7353, size: 64, offset: 832)
!7353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7337, size: 64)
!7354 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !7337, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!7355 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !7337, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!7356 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !7337, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!7357 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !7337, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!7358 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !7337, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!7359 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !7337, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!7360 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !7337, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!7361 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !7337, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!7362 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !7337, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!7363 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !7337, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!7364 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !7337, file: !5975, line: 93, baseType: !7353, size: 64, offset: 1344)
!7365 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !7337, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!7366 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !7337, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!7367 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !7337, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!7368 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !7337, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!7369 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !6312, line: 63, baseType: !1497)
!7370 = !DILocalVariable(name: "fp", arg: 1, scope: !7331, file: !7332, line: 28, type: !7335)
!7371 = !DILocation(line: 28, column: 15, scope: !7331)
!7372 = !DILocalVariable(name: "offset", arg: 2, scope: !7331, file: !7332, line: 28, type: !7369)
!7373 = !DILocation(line: 28, column: 25, scope: !7331)
!7374 = !DILocalVariable(name: "whence", arg: 3, scope: !7331, file: !7332, line: 28, type: !53)
!7375 = !DILocation(line: 28, column: 37, scope: !7331)
!7376 = !DILocation(line: 52, column: 7, scope: !7377)
!7377 = distinct !DILexicalBlock(scope: !7331, file: !7332, line: 52, column: 7)
!7378 = !DILocation(line: 52, column: 11, scope: !7377)
!7379 = !DILocation(line: 52, column: 27, scope: !7377)
!7380 = !DILocation(line: 52, column: 31, scope: !7377)
!7381 = !DILocation(line: 52, column: 24, scope: !7377)
!7382 = !DILocation(line: 53, column: 7, scope: !7377)
!7383 = !DILocation(line: 53, column: 10, scope: !7377)
!7384 = !DILocation(line: 53, column: 14, scope: !7377)
!7385 = !DILocation(line: 53, column: 31, scope: !7377)
!7386 = !DILocation(line: 53, column: 35, scope: !7377)
!7387 = !DILocation(line: 53, column: 28, scope: !7377)
!7388 = !DILocation(line: 54, column: 7, scope: !7377)
!7389 = !DILocation(line: 54, column: 10, scope: !7377)
!7390 = !DILocation(line: 54, column: 14, scope: !7377)
!7391 = !DILocation(line: 54, column: 28, scope: !7377)
!7392 = !DILocation(line: 52, column: 7, scope: !7331)
!7393 = !DILocalVariable(name: "pos", scope: !7394, file: !7332, line: 117, type: !7369)
!7394 = distinct !DILexicalBlock(scope: !7377, file: !7332, line: 113, column: 5)
!7395 = !DILocation(line: 117, column: 13, scope: !7394)
!7396 = !DILocation(line: 117, column: 34, scope: !7394)
!7397 = !DILocation(line: 117, column: 26, scope: !7394)
!7398 = !DILocation(line: 117, column: 39, scope: !7394)
!7399 = !DILocation(line: 117, column: 47, scope: !7394)
!7400 = !DILocation(line: 117, column: 19, scope: !7394)
!7401 = !DILocation(line: 118, column: 11, scope: !7402)
!7402 = distinct !DILexicalBlock(scope: !7394, file: !7332, line: 118, column: 11)
!7403 = !DILocation(line: 118, column: 15, scope: !7402)
!7404 = !DILocation(line: 118, column: 11, scope: !7394)
!7405 = !DILocation(line: 124, column: 11, scope: !7406)
!7406 = distinct !DILexicalBlock(scope: !7402, file: !7332, line: 119, column: 9)
!7407 = !DILocation(line: 129, column: 7, scope: !7394)
!7408 = !DILocation(line: 129, column: 11, scope: !7394)
!7409 = !DILocation(line: 129, column: 18, scope: !7394)
!7410 = !DILocation(line: 130, column: 21, scope: !7394)
!7411 = !DILocation(line: 130, column: 7, scope: !7394)
!7412 = !DILocation(line: 130, column: 11, scope: !7394)
!7413 = !DILocation(line: 130, column: 19, scope: !7394)
!7414 = !DILocation(line: 161, column: 7, scope: !7394)
!7415 = !DILocation(line: 163, column: 18, scope: !7331)
!7416 = !DILocation(line: 163, column: 22, scope: !7331)
!7417 = !DILocation(line: 163, column: 30, scope: !7331)
!7418 = !DILocation(line: 163, column: 10, scope: !7331)
!7419 = !DILocation(line: 163, column: 3, scope: !7331)
!7420 = !DILocation(line: 164, column: 1, scope: !7331)
!7421 = !DILocalVariable(name: "fp", arg: 1, scope: !7422, file: !7332, line: 28, type: !7425)
!7422 = distinct !DISubprogram(name: "rpl_fseeko", scope: !7332, file: !7332, line: 28, type: !7423, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !7459, retainedNodes: !4)
!7423 = !DISubroutineType(types: !7424)
!7424 = !{!53, !7425, !7369, !53}
!7425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7426, size: 64)
!7426 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !5973, line: 7, baseType: !7427)
!7427 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !5975, line: 49, size: 1728, elements: !7428)
!7428 = !{!7429, !7430, !7431, !7432, !7433, !7434, !7435, !7436, !7437, !7438, !7439, !7440, !7441, !7442, !7444, !7445, !7446, !7447, !7448, !7449, !7450, !7451, !7452, !7453, !7454, !7455, !7456, !7457, !7458}
!7429 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !7427, file: !5975, line: 51, baseType: !53, size: 32)
!7430 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !7427, file: !5975, line: 54, baseType: !6, size: 64, offset: 64)
!7431 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !7427, file: !5975, line: 55, baseType: !6, size: 64, offset: 128)
!7432 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !7427, file: !5975, line: 56, baseType: !6, size: 64, offset: 192)
!7433 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !7427, file: !5975, line: 57, baseType: !6, size: 64, offset: 256)
!7434 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !7427, file: !5975, line: 58, baseType: !6, size: 64, offset: 320)
!7435 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !7427, file: !5975, line: 59, baseType: !6, size: 64, offset: 384)
!7436 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !7427, file: !5975, line: 60, baseType: !6, size: 64, offset: 448)
!7437 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !7427, file: !5975, line: 61, baseType: !6, size: 64, offset: 512)
!7438 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !7427, file: !5975, line: 64, baseType: !6, size: 64, offset: 576)
!7439 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !7427, file: !5975, line: 65, baseType: !6, size: 64, offset: 640)
!7440 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !7427, file: !5975, line: 66, baseType: !6, size: 64, offset: 704)
!7441 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !7427, file: !5975, line: 68, baseType: !5990, size: 64, offset: 768)
!7442 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !7427, file: !5975, line: 70, baseType: !7443, size: 64, offset: 832)
!7443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7427, size: 64)
!7444 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !7427, file: !5975, line: 72, baseType: !53, size: 32, offset: 896)
!7445 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !7427, file: !5975, line: 73, baseType: !53, size: 32, offset: 928)
!7446 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !7427, file: !5975, line: 74, baseType: !1497, size: 64, offset: 960)
!7447 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !7427, file: !5975, line: 77, baseType: !188, size: 16, offset: 1024)
!7448 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !7427, file: !5975, line: 78, baseType: !5999, size: 8, offset: 1040)
!7449 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !7427, file: !5975, line: 79, baseType: !6001, size: 8, offset: 1048)
!7450 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !7427, file: !5975, line: 81, baseType: !6005, size: 64, offset: 1088)
!7451 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !7427, file: !5975, line: 89, baseType: !6008, size: 64, offset: 1152)
!7452 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !7427, file: !5975, line: 91, baseType: !6010, size: 64, offset: 1216)
!7453 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !7427, file: !5975, line: 92, baseType: !6013, size: 64, offset: 1280)
!7454 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !7427, file: !5975, line: 93, baseType: !7443, size: 64, offset: 1344)
!7455 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !7427, file: !5975, line: 94, baseType: !8, size: 64, offset: 1408)
!7456 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !7427, file: !5975, line: 95, baseType: !110, size: 64, offset: 1472)
!7457 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !7427, file: !5975, line: 96, baseType: !53, size: 32, offset: 1536)
!7458 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !7427, file: !5975, line: 98, baseType: !105, size: 160, offset: 1568)
!7459 = distinct !DICompileUnit(language: DW_LANG_C99, file: !327, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!7460 = !DILocalVariable(name: "offset", arg: 2, scope: !7422, file: !7332, line: 28, type: !7369)
!7461 = !DILocalVariable(name: "whence", arg: 3, scope: !7422, file: !7332, line: 28, type: !53)
