; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.utmpx = type { i16, i32, [32 x i8], [4 x i8], [32 x i8], [256 x i8], %struct.__exit_status, i32, %struct.anon, [4 x i32], [20 x i8] }
%struct.__exit_status = type { i16, i16 }
%struct.anon = type { i32, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"Usage: %s [OPTION]... [ FILE | ARG1 ARG2 ]\0A\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"Print information about users who are currently logged in.\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [195 x i8] c"\0A  -a, --all         same as -b -d --login -p -r -t -T -u\0A  -b, --boot        time of last system boot\0A  -d, --dead        print dead processes\0A  -H, --heading     print line of column headings\0A\00", align 1
@.str.4 = private unnamed_addr constant [50 x i8] c"  -l, --login       print system login processes\0A\00", align 1
@.str.5 = private unnamed_addr constant [187 x i8] c"      --lookup      attempt to canonicalize hostnames via DNS\0A  -m                only hostname and user associated with stdin\0A  -p, --process     print active processes spawned by init\0A\00", align 1
@.str.6 = private unnamed_addr constant [223 x i8] c"  -q, --count       all login names and number of users logged on\0A  -r, --runlevel    print current runlevel\0A  -s, --short       print only name, line, and time (default)\0A  -t, --time        print last system clock change\0A\00", align 1
@.str.7 = private unnamed_addr constant [163 x i8] c"  -T, -w, --mesg    add user's message status as +, - or ?\0A  -u, --users       list users logged in\0A      --message     same as -T\0A      --writable    same as -T\0A\00", align 1
@.str.8 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.9 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.10 = private unnamed_addr constant [125 x i8] c"\0AIf FILE is not specified, use %s.  %s as FILE is common.\0AIf ARG1 ARG2 given, -m presumed: 'am i' or 'mom likes' are usual.\0A\00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"/var/run/utmp\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"/var/log/wtmp\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"who\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.33 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.34 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.36 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.37 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.38 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.25 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.26 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.29 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.30 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"abdlmpqrstuwHT\00", align 1
@longopts = internal constant [18 x %struct.option] [%struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0), i32 0, i32* null, i32 98 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), i32 0, i32* null, i32 72 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i32 0, i32 0), i32 0, i32* null, i32 108 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46, i32 0, i32 0), i32 0, i32* null, i32 128 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i32 0, i32* null, i32 112 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0), i32 0, i32* null, i32 116 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0), i32 0, i32* null, i32 117 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.56, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@need_boottime = internal global i8 0, align 1, !dbg !31
@need_deadprocs = internal global i8 0, align 1, !dbg !33
@need_login = internal global i8 0, align 1, !dbg !35
@need_initspawn = internal global i8 0, align 1, !dbg !37
@need_runlevel = internal global i8 0, align 1, !dbg !41
@need_clockchange = internal global i8 0, align 1, !dbg !39
@need_users = internal global i8 0, align 1, !dbg !43
@include_mesg = internal global i8 0, align 1, !dbg !27
@include_idle = internal global i8 0, align 1, !dbg !23
@include_exit = internal global i8 0, align 1, !dbg !29
@include_heading = internal global i8 0, align 1, !dbg !25
@my_line_only = internal global i8 0, align 1, !dbg !45
@short_list = internal global i8 0, align 1, !dbg !19
@short_output = internal global i8 0, align 1, !dbg !21
@do_lookup = internal global i8 0, align 1, !dbg !16
@.str.19 = private unnamed_addr constant [17 x i8] c"Joseph Arceneaux\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"Michael Stone\00", align 1
@.str.22 = private unnamed_addr constant [15 x i8] c"%Y-%m-%d %H:%M\00", align 1
@time_format = internal global i8* null, align 8, !dbg !47
@time_format_width = internal global i32 0, align 4, !dbg !51
@.str.23 = private unnamed_addr constant [12 x i8] c"%b %e %H:%M\00", align 1
@optind = external dso_local global i32, align 4
@.str.24 = private unnamed_addr constant [17 x i8] c"extra operand %s\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.61 = private unnamed_addr constant [6 x i8] c"/dev/\00", align 1
@.str.74 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@print_deadprocs.exitstr = internal global i8* null, align 8, !dbg !138
@.str.92 = private unnamed_addr constant [6 x i8] c"term=\00", align 1
@.str.93 = private unnamed_addr constant [6 x i8] c"exit=\00", align 1
@.str.94 = private unnamed_addr constant [10 x i8] c"%s%d %s%d\00", align 1
@print_line.mesg = internal global [3 x i8] c" x\00", align 1, !dbg !54
@.str.69 = private unnamed_addr constant [6 x i8] c" %-6s\00", align 1
@.str.70 = private unnamed_addr constant [6 x i8] c" %10s\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c" %-12s\00", align 1
@.str.73 = private unnamed_addr constant [5 x i8] c"   .\00", align 1
@.str.72 = private unnamed_addr constant [33 x i8] c"%-8.*s%s %-12.*s %-*s%s%s %-8s%s\00", align 1
@time_string.buf = internal global [33 x i8] zeroinitializer, align 16, !dbg !123
@.str.90 = private unnamed_addr constant [4 x i8] c"id=\00", align 1
@.str.91 = private unnamed_addr constant [6 x i8] c"LOGIN\00", align 1
@.str.89 = private unnamed_addr constant [13 x i8] c"clock change\00", align 1
@.str.88 = private unnamed_addr constant [12 x i8] c"system boot\00", align 1
@print_runlevel.runlevline = internal global i8* null, align 8, !dbg !131
@.str.84 = private unnamed_addr constant [10 x i8] c"run-level\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"%s %c\00", align 1
@print_runlevel.comment = internal global i8* null, align 8, !dbg !136
@.str.86 = private unnamed_addr constant [6 x i8] c"last=\00", align 1
@.str.87 = private unnamed_addr constant [5 x i8] c"%s%c\00", align 1
@.str.75 = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@.str.76 = private unnamed_addr constant [4 x i8] c"  ?\00", align 1
@print_user.hostlen = internal global i64 0, align 8, !dbg !108
@print_user.hoststr = internal global i8* null, align 8, !dbg !62
@.str.77 = private unnamed_addr constant [8 x i8] c"(%s:%s)\00", align 1
@.str.78 = private unnamed_addr constant [5 x i8] c"(%s)\00", align 1
@idle_string.now = internal global i64 -9223372036854775808, align 8, !dbg !113
@.str.79 = private unnamed_addr constant [6 x i8] c"  .  \00", align 1
@.str.80 = private unnamed_addr constant [30 x i8] c"seconds_idle / (60 * 60) < 24\00", align 1
@.str.81 = private unnamed_addr constant [10 x i8] c"src/who.c\00", align 1
@__PRETTY_FUNCTION__.idle_string = private unnamed_addr constant [40 x i8] c"const char *idle_string(time_t, time_t)\00", align 1
@idle_string.idle_hhmm = internal global [6 x i8] zeroinitializer, align 1, !dbg !118
@.str.82 = private unnamed_addr constant [10 x i8] c"%02d:%02d\00", align 1
@.str.83 = private unnamed_addr constant [6 x i8] c" old \00", align 1
@.str.62 = private unnamed_addr constant [5 x i8] c"NAME\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"LINE\00", align 1
@.str.64 = private unnamed_addr constant [5 x i8] c"TIME\00", align 1
@.str.65 = private unnamed_addr constant [5 x i8] c"IDLE\00", align 1
@.str.66 = private unnamed_addr constant [4 x i8] c"PID\00", align 1
@.str.67 = private unnamed_addr constant [8 x i8] c"COMMENT\00", align 1
@.str.68 = private unnamed_addr constant [5 x i8] c"EXIT\00", align 1
@.str.58 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.59 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.60 = private unnamed_addr constant [14 x i8] c"\0A# users=%lu\0A\00", align 1
@.str.40 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.41 = private unnamed_addr constant [5 x i8] c"boot\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"count\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"dead\00", align 1
@.str.44 = private unnamed_addr constant [8 x i8] c"heading\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"login\00", align 1
@.str.46 = private unnamed_addr constant [7 x i8] c"lookup\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"message\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"mesg\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"process\00", align 1
@.str.50 = private unnamed_addr constant [9 x i8] c"runlevel\00", align 1
@.str.51 = private unnamed_addr constant [6 x i8] c"short\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"users\00", align 1
@.str.54 = private unnamed_addr constant [9 x i8] c"writable\00", align 1
@.str.55 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.56 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), align 8, !dbg !153
@.str.95 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@last_cherror = internal global i32 0, align 4, !dbg !158
@canon_host_r.hints = internal global %struct.addrinfo zeroinitializer, align 8, !dbg !163
@ignore_EPIPE = internal global i8 0, align 1, !dbg !196
@.str.102 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !201
@.str.1.103 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.104 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !204
@.str.109 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.110 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.115 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.116 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.117 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !211
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !218
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !266
@nslots = internal global i32 1, align 4, !dbg !273
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !275
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !264
@.str.10.120 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.121 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.122 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.123 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.124 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.125 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.126 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.127 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.128 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !252
@.str.137 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.138 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.139 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.140 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.141 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.142 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.143 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.144 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.145 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.146 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.147 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.148 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.149 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.150 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.151 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.152 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !277
@.str.1.165 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.166 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.179 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.180 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [3 x i8] c"-m\00"
@.compVal1 = private global [4 x i8] c"-ma\00"
@.compVal2 = private global [4 x i8] c"-Hm\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0
@x.101 = common global i32 0
@y.102 = common global i32 0
@x.103 = common global i32 0
@y.104 = common global i32 0
@x.105 = common global i32 0
@y.106 = common global i32 0
@x.107 = common global i32 0
@y.108 = common global i32 0
@x.109 = common global i32 0
@y.110 = common global i32 0
@x.111 = common global i32 0
@y.112 = common global i32 0
@x.113 = common global i32 0
@y.114 = common global i32 0
@x.115 = common global i32 0
@y.116 = common global i32 0
@x.117 = common global i32 0
@y.118 = common global i32 0
@x.119 = common global i32 0
@y.120 = common global i32 0
@x.121 = common global i32 0
@y.122 = common global i32 0
@x.123 = common global i32 0
@y.124 = common global i32 0
@x.125 = common global i32 0
@y.126 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !334 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !337, metadata !DIExpression()), !dbg !338
  %3 = load i32, i32* %2, align 4, !dbg !339
  %4 = icmp ne i32 %3, 0, !dbg !341
  br i1 %4, label %5, label %28, !dbg !342

5:                                                ; preds = %1
  br label %6, !dbg !343

6:                                                ; preds = %5
  %7 = load i32, i32* @x
  %8 = load i32, i32* @y
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !344
  %16 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !344
  %17 = load i8*, i8** @program_name, align 8, !dbg !344
  %18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* %16, i8* %17), !dbg !344
  %19 = load i32, i32* @x
  %20 = load i32, i32* @y
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %27, !dbg !344

27:                                               ; preds = %originalBBpart2
  br label %58, !dbg !344

28:                                               ; preds = %1
  %29 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !346
  %30 = load i8*, i8** @program_name, align 8, !dbg !348
  %31 = call i32 (i8*, ...) @printf(i8* %29, i8* %30), !dbg !349
  %32 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !350
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !350
  %34 = call i32 @fputs_unlocked(i8* %32, %struct._IO_FILE* %33), !dbg !350
  %35 = call i8* @gettext(i8* getelementptr inbounds ([195 x i8], [195 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !351
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !351
  %37 = call i32 @fputs_unlocked(i8* %35, %struct._IO_FILE* %36), !dbg !351
  %38 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !352
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !352
  %40 = call i32 @fputs_unlocked(i8* %38, %struct._IO_FILE* %39), !dbg !352
  %41 = call i8* @gettext(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !353
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !353
  %43 = call i32 @fputs_unlocked(i8* %41, %struct._IO_FILE* %42), !dbg !353
  %44 = call i8* @gettext(i8* getelementptr inbounds ([223 x i8], [223 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !354
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !354
  %46 = call i32 @fputs_unlocked(i8* %44, %struct._IO_FILE* %45), !dbg !354
  %47 = call i8* @gettext(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !355
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !355
  %49 = call i32 @fputs_unlocked(i8* %47, %struct._IO_FILE* %48), !dbg !355
  %50 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !356
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !356
  %52 = call i32 @fputs_unlocked(i8* %50, %struct._IO_FILE* %51), !dbg !356
  %53 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !357
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !357
  %55 = call i32 @fputs_unlocked(i8* %53, %struct._IO_FILE* %54), !dbg !357
  %56 = call i8* @gettext(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !358
  %57 = call i32 (i8*, ...) @printf(i8* %56, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0)), !dbg !359
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0)), !dbg !360
  br label %58

58:                                               ; preds = %28, %27
  %59 = load i32, i32* %2, align 4, !dbg !361
  call void @exit(i32 %59) #12, !dbg !362
  unreachable, !dbg !362

originalBBalteredBB:                              ; preds = %originalBB, %6
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !344
  %61 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !344
  %62 = load i8*, i8** @program_name, align 8, !dbg !344
  %63 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* %61, i8* %62), !dbg !344
  br label %originalBB
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !363 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !367, metadata !DIExpression()), !dbg !368
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !369, metadata !DIExpression()), !dbg !378
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !378
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !378
  call void @llvm.dbg.declare(metadata i8** %12, metadata !379, metadata !DIExpression()), !dbg !380
  %16 = load i8*, i8** %10, align 8, !dbg !381
  store i8* %16, i8** %12, align 8, !dbg !380
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !382, metadata !DIExpression()), !dbg !384
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !385
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !384
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !386

26:                                               ; preds = %57, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !387
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !388
  %37 = load i8*, i8** %36, align 8, !dbg !388
  %38 = icmp ne i8* %37, null, !dbg !387
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %55, !dbg !389

47:                                               ; preds = %originalBBpart24
  %48 = load i8*, i8** %10, align 8, !dbg !390
  %49 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !390
  %50 = getelementptr inbounds %struct.infomap, %struct.infomap* %49, i32 0, i32 0, !dbg !390
  %51 = load i8*, i8** %50, align 8, !dbg !390
  %52 = call i32 @strcmp(i8* %48, i8* %51) #13, !dbg !390
  %53 = icmp eq i32 %52, 0, !dbg !390
  %54 = xor i1 %53, true, !dbg !391
  br label %55

55:                                               ; preds = %47, %originalBBpart24
  %56 = phi i1 [ false, %originalBBpart24 ], [ %54, %47 ], !dbg !392
  br i1 %56, label %57, label %60, !dbg !386

57:                                               ; preds = %55
  %58 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !393
  %59 = getelementptr inbounds %struct.infomap, %struct.infomap* %58, i32 1, !dbg !393
  store %struct.infomap* %59, %struct.infomap** %13, align 8, !dbg !393
  br label %26, !dbg !386, !llvm.loop !394

60:                                               ; preds = %55
  %61 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !395
  %62 = getelementptr inbounds %struct.infomap, %struct.infomap* %61, i32 0, i32 1, !dbg !397
  %63 = load i8*, i8** %62, align 8, !dbg !397
  %64 = icmp ne i8* %63, null, !dbg !395
  br i1 %64, label %65, label %85, !dbg !398

65:                                               ; preds = %60
  %66 = load i32, i32* @x.1
  %67 = load i32, i32* @y.2
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %65, %originalBB6alteredBB
  %74 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !399
  %75 = getelementptr inbounds %struct.infomap, %struct.infomap* %74, i32 0, i32 1, !dbg !400
  %76 = load i8*, i8** %75, align 8, !dbg !400
  store i8* %76, i8** %12, align 8, !dbg !401
  %77 = load i32, i32* @x.1
  %78 = load i32, i32* @y.2
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %85, !dbg !402

85:                                               ; preds = %originalBBpart28, %60
  %86 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !403
  %87 = call i32 (i8*, ...) @printf(i8* %86, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0)), !dbg !404
  call void @llvm.dbg.declare(metadata i8** %14, metadata !405, metadata !DIExpression()), !dbg !406
  %88 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !407
  store i8* %88, i8** %14, align 8, !dbg !406
  %89 = load i8*, i8** %14, align 8, !dbg !408
  %90 = icmp ne i8* %89, null, !dbg !408
  br i1 %90, label %91, label %115, !dbg !410

91:                                               ; preds = %85
  %92 = load i8*, i8** %14, align 8, !dbg !411
  %93 = call i32 @strncmp(i8* %92, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i64 0, i64 0), i64 3) #13, !dbg !411
  %94 = icmp ne i32 %93, 0, !dbg !411
  br i1 %94, label %95, label %115, !dbg !412

95:                                               ; preds = %91
  %96 = load i32, i32* @x.1
  %97 = load i32, i32* @y.2
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %95, %originalBB10alteredBB
  %104 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !413
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !413
  %106 = call i32 @fputs_unlocked(i8* %104, %struct._IO_FILE* %105), !dbg !413
  %107 = load i32, i32* @x.1
  %108 = load i32, i32* @y.2
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %115, !dbg !415

115:                                              ; preds = %originalBBpart212, %91, %85
  %116 = load i32, i32* @x.1
  %117 = load i32, i32* @y.2
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %115, %originalBB14alteredBB
  %124 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.37, i64 0, i64 0)) #10, !dbg !416
  %125 = load i8*, i8** %10, align 8, !dbg !417
  %126 = call i32 (i8*, ...) @printf(i8* %124, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0), i8* %125), !dbg !418
  %127 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !419
  %128 = load i8*, i8** %12, align 8, !dbg !420
  %129 = load i8*, i8** %12, align 8, !dbg !421
  %130 = load i8*, i8** %10, align 8, !dbg !422
  %131 = icmp eq i8* %129, %130, !dbg !423
  %132 = zext i1 %131 to i64, !dbg !421
  %133 = select i1 %131, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !421
  %134 = call i32 (i8*, ...) @printf(i8* %127, i8* %128, i8* %133), !dbg !424
  %135 = load i32, i32* @x.1
  %136 = load i32, i32* @y.2
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret void, !dbg !425

originalBBalteredBB:                              ; preds = %originalBB, %1
  %143 = alloca i8*, align 8
  %144 = alloca [7 x %struct.infomap], align 16
  %145 = alloca i8*, align 8
  %146 = alloca %struct.infomap*, align 8
  %147 = alloca i8*, align 8
  store i8* %0, i8** %143, align 8
  call void @llvm.dbg.declare(metadata i8** %143, metadata !426, metadata !DIExpression()), !dbg !368
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %144, metadata !528, metadata !DIExpression()), !dbg !378
  %148 = bitcast [7 x %struct.infomap]* %144 to i8*, !dbg !378
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %148, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !378
  call void @llvm.dbg.declare(metadata i8** %145, metadata !535, metadata !DIExpression()), !dbg !380
  %149 = load i8*, i8** %143, align 8, !dbg !381
  store i8* %149, i8** %145, align 8, !dbg !380
  call void @llvm.dbg.declare(metadata %struct.infomap** %146, metadata !536, metadata !DIExpression()), !dbg !384
  %150 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %144, i64 0, i64 0, !dbg !385
  store %struct.infomap* %150, %struct.infomap** %146, align 8, !dbg !384
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %151 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !387
  %152 = getelementptr inbounds %struct.infomap, %struct.infomap* %151, i32 0, i32 0, !dbg !388
  %153 = load i8*, i8** %152, align 8, !dbg !388
  %154 = icmp ne i8* %153, null, !dbg !387
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %65
  %155 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !399
  %156 = getelementptr inbounds %struct.infomap, %struct.infomap* %155, i32 0, i32 1, !dbg !400
  %157 = load i8*, i8** %156, align 8, !dbg !400
  store i8* %157, i8** %12, align 8, !dbg !401
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %95
  %158 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !413
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !413
  %160 = call i32 @fputs_unlocked(i8* %158, %struct._IO_FILE* %159), !dbg !413
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %115
  %161 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.37, i64 0, i64 0)) #10, !dbg !416
  %162 = load i8*, i8** %10, align 8, !dbg !417
  %163 = call i32 (i8*, ...) @printf(i8* %161, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0), i8* %162), !dbg !418
  %164 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !419
  %165 = load i8*, i8** %12, align 8, !dbg !420
  %166 = load i8*, i8** %12, align 8, !dbg !421
  %167 = load i8*, i8** %10, align 8, !dbg !422
  %168 = icmp eq i8* %166, %167, !dbg !423
  %169 = zext i1 %168 to i64, !dbg !421
  %170 = select i1 %168, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !421
  %171 = call i32 (i8*, ...) @printf(i8* %164, i8* %165, i8* %170), !dbg !424
  br label %originalBB14
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !538 {
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !542, metadata !DIExpression()), !dbg !543
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !544, metadata !DIExpression()), !dbg !545
  call void @llvm.dbg.declare(metadata i32* %6, metadata !546, metadata !DIExpression()), !dbg !547
  call void @llvm.dbg.declare(metadata i8* %7, metadata !548, metadata !DIExpression()), !dbg !549
  store i8 1, i8* %7, align 1, !dbg !549
  %8 = load i8**, i8*** %5, align 8, !dbg !550
  %9 = getelementptr inbounds i8*, i8** %8, i64 0, !dbg !550
  %10 = load i8*, i8** %9, align 8, !dbg !550
  call void @set_program_name(i8* %10), !dbg !551
  %11 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !552
  %12 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !553
  %13 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !554
  %14 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !555
  br label %15, !dbg !556

15:                                               ; preds = %137, %2
  %16 = load i32, i32* @x.3
  %17 = load i32, i32* @y.4
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  %24 = load i32, i32* %4, align 4, !dbg !557
  %25 = load i8**, i8*** %5, align 8, !dbg !558
  %26 = call i32 @getopt_long(i32 %24, i8** %25, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0), %struct.option* getelementptr inbounds ([18 x %struct.option], [18 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !559
  store i32 %26, i32* %6, align 4, !dbg !560
  %27 = icmp ne i32 %26, -1, !dbg !561
  %28 = load i32, i32* @x.3
  %29 = load i32, i32* @y.4
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %27, label %36, label %138, !dbg !556

36:                                               ; preds = %originalBBpart2
  %37 = load i32, i32* %6, align 4, !dbg !562
  switch i32 %37, label %136 [
    i32 97, label %38
    i32 98, label %55
    i32 100, label %56
    i32 72, label %57
    i32 108, label %58
    i32 109, label %75
    i32 112, label %76
    i32 113, label %77
    i32 114, label %78
    i32 115, label %79
    i32 116, label %80
    i32 84, label %97
    i32 119, label %97
    i32 117, label %114
    i32 128, label %131
    i32 -130, label %132
    i32 -131, label %133
  ], !dbg !564

38:                                               ; preds = %36
  %39 = load i32, i32* @x.3
  %40 = load i32, i32* @y.4
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %38, %originalBB1alteredBB
  store i8 1, i8* @need_boottime, align 1, !dbg !565
  store i8 1, i8* @need_deadprocs, align 1, !dbg !567
  store i8 1, i8* @need_login, align 1, !dbg !568
  store i8 1, i8* @need_initspawn, align 1, !dbg !569
  store i8 1, i8* @need_runlevel, align 1, !dbg !570
  store i8 1, i8* @need_clockchange, align 1, !dbg !571
  store i8 1, i8* @need_users, align 1, !dbg !572
  store i8 1, i8* @include_mesg, align 1, !dbg !573
  store i8 1, i8* @include_idle, align 1, !dbg !574
  store i8 1, i8* @include_exit, align 1, !dbg !575
  store i8 0, i8* %7, align 1, !dbg !576
  %47 = load i32, i32* @x.3
  %48 = load i32, i32* @y.4
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %137, !dbg !577

55:                                               ; preds = %36
  store i8 1, i8* @need_boottime, align 1, !dbg !578
  store i8 0, i8* %7, align 1, !dbg !579
  br label %137, !dbg !580

56:                                               ; preds = %36
  store i8 1, i8* @need_deadprocs, align 1, !dbg !581
  store i8 1, i8* @include_idle, align 1, !dbg !582
  store i8 1, i8* @include_exit, align 1, !dbg !583
  store i8 0, i8* %7, align 1, !dbg !584
  br label %137, !dbg !585

57:                                               ; preds = %36
  store i8 1, i8* @include_heading, align 1, !dbg !586
  br label %137, !dbg !587

58:                                               ; preds = %36
  %59 = load i32, i32* @x.3
  %60 = load i32, i32* @y.4
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  store i8 1, i8* @need_login, align 1, !dbg !588
  store i8 1, i8* @include_idle, align 1, !dbg !589
  store i8 0, i8* %7, align 1, !dbg !590
  %67 = load i32, i32* @x.3
  %68 = load i32, i32* @y.4
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %137, !dbg !591

75:                                               ; preds = %36
  store i8 1, i8* @my_line_only, align 1, !dbg !592
  br label %137, !dbg !593

76:                                               ; preds = %36
  store i8 1, i8* @need_initspawn, align 1, !dbg !594
  store i8 0, i8* %7, align 1, !dbg !595
  br label %137, !dbg !596

77:                                               ; preds = %36
  store i8 1, i8* @short_list, align 1, !dbg !597
  br label %137, !dbg !598

78:                                               ; preds = %36
  store i8 1, i8* @need_runlevel, align 1, !dbg !599
  store i8 1, i8* @include_idle, align 1, !dbg !600
  store i8 0, i8* %7, align 1, !dbg !601
  br label %137, !dbg !602

79:                                               ; preds = %36
  store i8 1, i8* @short_output, align 1, !dbg !603
  br label %137, !dbg !604

80:                                               ; preds = %36
  %81 = load i32, i32* @x.3
  %82 = load i32, i32* @y.4
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  store i8 1, i8* @need_clockchange, align 1, !dbg !605
  store i8 0, i8* %7, align 1, !dbg !606
  %89 = load i32, i32* @x.3
  %90 = load i32, i32* @y.4
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %137, !dbg !607

97:                                               ; preds = %36, %36
  %98 = load i32, i32* @x.3
  %99 = load i32, i32* @y.4
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %97, %originalBB14alteredBB
  store i8 1, i8* @include_mesg, align 1, !dbg !608
  %106 = load i32, i32* @x.3
  %107 = load i32, i32* @y.4
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %137, !dbg !609

114:                                              ; preds = %36
  %115 = load i32, i32* @x.3
  %116 = load i32, i32* @y.4
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  store i8 1, i8* @need_users, align 1, !dbg !610
  store i8 1, i8* @include_idle, align 1, !dbg !611
  store i8 0, i8* %7, align 1, !dbg !612
  %123 = load i32, i32* @x.3
  %124 = load i32, i32* @y.4
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %137, !dbg !613

131:                                              ; preds = %36
  store i8 1, i8* @do_lookup, align 1, !dbg !614
  br label %137, !dbg !615

132:                                              ; preds = %36
  call void @usage(i32 0) #14, !dbg !616
  unreachable, !dbg !616

133:                                              ; preds = %36
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !617
  %135 = load i8*, i8** @Version, align 8, !dbg !617
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %134, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* %135, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0), i8* null), !dbg !617
  call void @exit(i32 0) #12, !dbg !617
  unreachable, !dbg !617

136:                                              ; preds = %36
  call void @usage(i32 1) #14, !dbg !618
  unreachable, !dbg !618

137:                                              ; preds = %131, %originalBBpart220, %originalBBpart216, %originalBBpart212, %79, %78, %77, %76, %75, %originalBBpart28, %57, %56, %55, %originalBBpart24
  br label %15, !dbg !556, !llvm.loop !619

138:                                              ; preds = %originalBBpart2
  %139 = load i32, i32* @x.3
  %140 = load i32, i32* @y.4
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %138, %originalBB22alteredBB
  %147 = load i8, i8* %7, align 1, !dbg !621
  %148 = trunc i8 %147 to i1, !dbg !621
  %149 = load i32, i32* @x.3
  %150 = load i32, i32* @y.4
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %148, label %157, label %158, !dbg !623

157:                                              ; preds = %originalBBpart224
  store i8 1, i8* @need_users, align 1, !dbg !624
  store i8 1, i8* @short_output, align 1, !dbg !626
  br label %158, !dbg !627

158:                                              ; preds = %157, %originalBBpart224
  %159 = load i8, i8* @include_exit, align 1, !dbg !628
  %160 = trunc i8 %159 to i1, !dbg !628
  br i1 %160, label %161, label %178, !dbg !630

161:                                              ; preds = %158
  %162 = load i32, i32* @x.3
  %163 = load i32, i32* @y.4
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %161, %originalBB26alteredBB
  store i8 0, i8* @short_output, align 1, !dbg !631
  %170 = load i32, i32* @x.3
  %171 = load i32, i32* @y.4
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %178, !dbg !633

178:                                              ; preds = %originalBBpart228, %158
  %179 = call zeroext i1 @hard_locale(i32 2), !dbg !634
  br i1 %179, label %180, label %181, !dbg !636

180:                                              ; preds = %178
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0), i8** @time_format, align 8, !dbg !637
  store i32 16, i32* @time_format_width, align 4, !dbg !639
  br label %182, !dbg !640

181:                                              ; preds = %178
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0), i8** @time_format, align 8, !dbg !641
  store i32 12, i32* @time_format_width, align 4, !dbg !643
  br label %182

182:                                              ; preds = %181, %180
  %183 = load i32, i32* @x.3
  %184 = load i32, i32* @y.4
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %182, %originalBB30alteredBB
  %191 = load i32, i32* %4, align 4, !dbg !644
  %192 = load i32, i32* @optind, align 4, !dbg !645
  %193 = sub nsw i32 %191, %192, !dbg !646
  %194 = load i32, i32* @x.3
  %195 = load i32, i32* @y.4
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart234, label %originalBB30alteredBB

originalBBpart234:                                ; preds = %originalBB30
  switch i32 %193, label %226 [
    i32 2, label %202
    i32 -1, label %203
    i32 0, label %203
    i32 1, label %204
  ], !dbg !647

202:                                              ; preds = %originalBBpart234
  store i8 1, i8* @my_line_only, align 1, !dbg !648
  br label %203, !dbg !650

203:                                              ; preds = %202, %originalBBpart234, %originalBBpart234
  call void @who(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i32 1), !dbg !651
  br label %251, !dbg !652

204:                                              ; preds = %originalBBpart234
  %205 = load i32, i32* @x.3
  %206 = load i32, i32* @y.4
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %204, %originalBB36alteredBB
  %213 = load i8**, i8*** %5, align 8, !dbg !653
  %214 = load i32, i32* @optind, align 4, !dbg !654
  %215 = sext i32 %214 to i64, !dbg !653
  %216 = getelementptr inbounds i8*, i8** %213, i64 %215, !dbg !653
  %217 = load i8*, i8** %216, align 8, !dbg !653
  call void @who(i8* %217, i32 0), !dbg !655
  %218 = load i32, i32* @x.3
  %219 = load i32, i32* @y.4
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br label %251, !dbg !656

226:                                              ; preds = %originalBBpart234
  %227 = load i32, i32* @x.3
  %228 = load i32, i32* @y.4
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %226, %originalBB40alteredBB
  %235 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #10, !dbg !657
  %236 = load i8**, i8*** %5, align 8, !dbg !658
  %237 = load i32, i32* @optind, align 4, !dbg !659
  %238 = add nsw i32 %237, 2, !dbg !660
  %239 = sext i32 %238 to i64, !dbg !658
  %240 = getelementptr inbounds i8*, i8** %236, i64 %239, !dbg !658
  %241 = load i8*, i8** %240, align 8, !dbg !658
  %242 = call i8* @quote(i8* %241), !dbg !661
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %235, i8* %242), !dbg !662
  call void @usage(i32 1) #14, !dbg !663
  %243 = load i32, i32* @x.3
  %244 = load i32, i32* @y.4
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBBpart248, label %originalBB40alteredBB

originalBBpart248:                                ; preds = %originalBB40
  unreachable, !dbg !663

251:                                              ; preds = %originalBBpart238, %203
  ret i32 0, !dbg !664

originalBBalteredBB:                              ; preds = %originalBB, %15
  %252 = load i32, i32* %4, align 4, !dbg !557
  %253 = load i8**, i8*** %5, align 8, !dbg !558
  %254 = call i32 @getopt_long(i32 %252, i8** %253, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0), %struct.option* getelementptr inbounds ([18 x %struct.option], [18 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !559
  store i32 %254, i32* %6, align 4, !dbg !560
  %255 = icmp ne i32 %254, -1, !dbg !561
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  store i8 1, i8* @need_boottime, align 1, !dbg !565
  store i8 1, i8* @need_deadprocs, align 1, !dbg !567
  store i8 1, i8* @need_login, align 1, !dbg !568
  store i8 1, i8* @need_initspawn, align 1, !dbg !569
  store i8 1, i8* @need_runlevel, align 1, !dbg !570
  store i8 1, i8* @need_clockchange, align 1, !dbg !571
  store i8 1, i8* @need_users, align 1, !dbg !572
  store i8 1, i8* @include_mesg, align 1, !dbg !573
  store i8 1, i8* @include_idle, align 1, !dbg !574
  store i8 1, i8* @include_exit, align 1, !dbg !575
  store i8 0, i8* %7, align 1, !dbg !576
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  store i8 1, i8* @need_login, align 1, !dbg !588
  store i8 1, i8* @include_idle, align 1, !dbg !589
  store i8 0, i8* %7, align 1, !dbg !590
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  store i8 1, i8* @need_clockchange, align 1, !dbg !605
  store i8 0, i8* %7, align 1, !dbg !606
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %97
  store i8 1, i8* @include_mesg, align 1, !dbg !608
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  store i8 1, i8* @need_users, align 1, !dbg !610
  store i8 1, i8* @include_idle, align 1, !dbg !611
  store i8 0, i8* %7, align 1, !dbg !612
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %138
  %256 = load i8, i8* %7, align 1, !dbg !621
  %257 = trunc i8 %256 to i1, !dbg !621
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %161
  store i8 0, i8* @short_output, align 1, !dbg !631
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %182
  %258 = load i32, i32* %4, align 4, !dbg !644
  %259 = load i32, i32* @optind, align 4, !dbg !645
  %_ = shl i32 %258, %259
  %_31 = shl i32 %258, %259
  %_32 = sub i32 0, %258
  %gen = add i32 %_32, %259
  %260 = sub nsw i32 %258, %259, !dbg !646
  br label %originalBB30

originalBB36alteredBB:                            ; preds = %originalBB36, %204
  %261 = load i8**, i8*** %5, align 8, !dbg !653
  %262 = load i32, i32* @optind, align 4, !dbg !654
  %263 = sext i32 %262 to i64, !dbg !653
  %264 = getelementptr inbounds i8*, i8** %261, i64 %263, !dbg !653
  %265 = load i8*, i8** %264, align 8, !dbg !653
  call void @who(i8* %265, i32 0), !dbg !655
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %226
  %266 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #10, !dbg !657
  %267 = load i8**, i8*** %5, align 8, !dbg !658
  %268 = load i32, i32* @optind, align 4, !dbg !659
  %_41 = sub i32 %268, 2
  %gen42 = mul i32 %_41, 2
  %_43 = shl i32 %268, 2
  %_44 = shl i32 %268, 2
  %_45 = shl i32 %268, 2
  %_46 = shl i32 %268, 2
  %269 = add nsw i32 %268, 2, !dbg !660
  %270 = sext i32 %269 to i64, !dbg !658
  %271 = getelementptr inbounds i8*, i8** %267, i64 %270, !dbg !658
  %272 = load i8*, i8** %271, align 8, !dbg !658
  %273 = call i8* @quote(i8* %272), !dbg !661
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %266, i8* %273), !dbg !662
  call void @usage(i32 1) #14, !dbg !663
  br label %originalBB40
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @who(i8*, i32) #4 !dbg !665 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca %struct.utmpx*, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !668, metadata !DIExpression()), !dbg !669
  store i32 %1, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !670, metadata !DIExpression()), !dbg !671
  call void @llvm.dbg.declare(metadata i64* %5, metadata !672, metadata !DIExpression()), !dbg !673
  call void @llvm.dbg.declare(metadata %struct.utmpx** %6, metadata !674, metadata !DIExpression()), !dbg !676
  %7 = load i8*, i8** %3, align 8, !dbg !677
  %8 = load i32, i32* %4, align 4, !dbg !679
  %9 = call i32 @read_utmp(i8* %7, i64* %5, %struct.utmpx** %6, i32 %8), !dbg !680
  %10 = icmp ne i32 %9, 0, !dbg !681
  br i1 %10, label %11, label %16, !dbg !682

11:                                               ; preds = %2
  %12 = call i32* @__errno_location() #15, !dbg !683
  %13 = load i32, i32* %12, align 4, !dbg !683
  %14 = load i8*, i8** %3, align 8, !dbg !683
  %15 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %14), !dbg !683
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i64 0, i64 0), i8* %15), !dbg !683
  unreachable, !dbg !683

16:                                               ; preds = %2
  %17 = load i32, i32* @x.5
  %18 = load i32, i32* @y.6
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = load i8, i8* @short_list, align 1, !dbg !684
  %26 = trunc i8 %25 to i1, !dbg !684
  %27 = load i32, i32* @x.5
  %28 = load i32, i32* @y.6
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %26, label %35, label %38, !dbg !686

35:                                               ; preds = %originalBBpart2
  %36 = load i64, i64* %5, align 8, !dbg !687
  %37 = load %struct.utmpx*, %struct.utmpx** %6, align 8, !dbg !688
  call void @list_entries_who(i64 %36, %struct.utmpx* %37), !dbg !689
  br label %41, !dbg !689

38:                                               ; preds = %originalBBpart2
  %39 = load i64, i64* %5, align 8, !dbg !690
  %40 = load %struct.utmpx*, %struct.utmpx** %6, align 8, !dbg !691
  call void @scan_entries(i64 %39, %struct.utmpx* %40), !dbg !692
  br label %41

41:                                               ; preds = %38, %35
  %42 = load %struct.utmpx*, %struct.utmpx** %6, align 8, !dbg !693
  %43 = bitcast %struct.utmpx* %42 to i8*, !dbg !693
  call void @free(i8* %43) #10, !dbg !694
  ret void, !dbg !695

originalBBalteredBB:                              ; preds = %originalBB, %16
  %44 = load i8, i8* @short_list, align 1, !dbg !684
  %45 = trunc i8 %44 to i1, !dbg !684
  br label %originalBB
}

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal void @list_entries_who(i64, %struct.utmpx*) #4 !dbg !696 {
  %3 = load i32, i32* @x.7
  %4 = load i32, i32* @y.8
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca %struct.utmpx*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !699, metadata !DIExpression()), !dbg !700
  store %struct.utmpx* %1, %struct.utmpx** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %12, metadata !701, metadata !DIExpression()), !dbg !702
  call void @llvm.dbg.declare(metadata i64* %13, metadata !703, metadata !DIExpression()), !dbg !704
  store i64 0, i64* %13, align 8, !dbg !704
  call void @llvm.dbg.declare(metadata i8** %14, metadata !705, metadata !DIExpression()), !dbg !706
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8** %14, align 8, !dbg !706
  %16 = load i32, i32* @x.7
  %17 = load i32, i32* @y.8
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %24, !dbg !707

24:                                               ; preds = %82, %originalBBpart2
  %25 = load i64, i64* %11, align 8, !dbg !708
  %26 = add i64 %25, -1, !dbg !708
  store i64 %26, i64* %11, align 8, !dbg !708
  %27 = icmp ne i64 %25, 0, !dbg !707
  br i1 %27, label %28, label %85, !dbg !707

28:                                               ; preds = %24
  %29 = load i32, i32* @x.7
  %30 = load i32, i32* @y.8
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !709
  %38 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %37, i32 0, i32 4, !dbg !709
  %39 = getelementptr inbounds [32 x i8], [32 x i8]* %38, i64 0, i64 0, !dbg !709
  %40 = load i8, i8* %39, align 4, !dbg !709
  %41 = sext i8 %40 to i32, !dbg !709
  %42 = icmp ne i32 %41, 0, !dbg !709
  %43 = load i32, i32* @x.7
  %44 = load i32, i32* @y.8
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %42, label %51, label %82, !dbg !709

51:                                               ; preds = %originalBBpart24
  %52 = load i32, i32* @x.7
  %53 = load i32, i32* @y.8
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %51, %originalBB6alteredBB
  %60 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !709
  %61 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %60, i32 0, i32 0, !dbg !709
  %62 = load i16, i16* %61, align 4, !dbg !709
  %63 = sext i16 %62 to i32, !dbg !709
  %64 = icmp eq i32 %63, 7, !dbg !709
  %65 = load i32, i32* @x.7
  %66 = load i32, i32* @y.8
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %64, label %73, label %82, !dbg !712

73:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i8** %15, metadata !713, metadata !DIExpression()), !dbg !715
  %74 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !716
  %75 = call i8* @extract_trimmed_name(%struct.utmpx* %74), !dbg !717
  store i8* %75, i8** %15, align 8, !dbg !718
  %76 = load i8*, i8** %14, align 8, !dbg !719
  %77 = load i8*, i8** %15, align 8, !dbg !720
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i64 0, i64 0), i8* %76, i8* %77), !dbg !721
  %79 = load i8*, i8** %15, align 8, !dbg !722
  call void @free(i8* %79) #10, !dbg !723
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i64 0, i64 0), i8** %14, align 8, !dbg !724
  %80 = load i64, i64* %13, align 8, !dbg !725
  %81 = add i64 %80, 1, !dbg !725
  store i64 %81, i64* %13, align 8, !dbg !725
  br label %82, !dbg !726

82:                                               ; preds = %73, %originalBBpart28, %originalBBpart24
  %83 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !727
  %84 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %83, i32 1, !dbg !727
  store %struct.utmpx* %84, %struct.utmpx** %12, align 8, !dbg !727
  br label %24, !dbg !707, !llvm.loop !728

85:                                               ; preds = %24
  %86 = call i8* @gettext(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.60, i64 0, i64 0)) #10, !dbg !730
  %87 = load i64, i64* %13, align 8, !dbg !731
  %88 = call i32 (i8*, ...) @printf(i8* %86, i64 %87), !dbg !732
  ret void, !dbg !733

originalBBalteredBB:                              ; preds = %originalBB, %2
  %89 = alloca i64, align 8
  %90 = alloca %struct.utmpx*, align 8
  %91 = alloca i64, align 8
  %92 = alloca i8*, align 8
  %93 = alloca i8*, align 8
  store i64 %0, i64* %89, align 8
  call void @llvm.dbg.declare(metadata i64* %89, metadata !734, metadata !DIExpression()), !dbg !700
  store %struct.utmpx* %1, %struct.utmpx** %90, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %90, metadata !838, metadata !DIExpression()), !dbg !702
  call void @llvm.dbg.declare(metadata i64* %91, metadata !839, metadata !DIExpression()), !dbg !704
  store i64 0, i64* %91, align 8, !dbg !704
  call void @llvm.dbg.declare(metadata i8** %92, metadata !840, metadata !DIExpression()), !dbg !706
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8** %92, align 8, !dbg !706
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %94 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !709
  %95 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %94, i32 0, i32 4, !dbg !709
  %96 = getelementptr inbounds [32 x i8], [32 x i8]* %95, i64 0, i64 0, !dbg !709
  %97 = load i8, i8* %96, align 4, !dbg !709
  %98 = sext i8 %97 to i32, !dbg !709
  %99 = icmp ne i32 %98, 0, !dbg !709
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %51
  %100 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !709
  %101 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %100, i32 0, i32 0, !dbg !709
  %102 = load i16, i16* %101, align 4, !dbg !709
  %103 = sext i16 %102 to i32, !dbg !709
  %104 = icmp eq i32 %103, 7, !dbg !709
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @scan_entries(i64, %struct.utmpx*) #4 !dbg !841 {
  %3 = load i32, i32* @x.9
  %4 = load i32, i32* @y.10
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca %struct.utmpx*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !842, metadata !DIExpression()), !dbg !843
  store %struct.utmpx* %1, %struct.utmpx** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %12, metadata !844, metadata !DIExpression()), !dbg !845
  call void @llvm.dbg.declare(metadata i8** %13, metadata !846, metadata !DIExpression()), !dbg !847
  call void @llvm.dbg.declare(metadata i64* %14, metadata !848, metadata !DIExpression()), !dbg !849
  store i64 -9223372036854775808, i64* %14, align 8, !dbg !849
  %15 = load i8, i8* @include_heading, align 1, !dbg !850
  %16 = trunc i8 %15 to i1, !dbg !850
  %17 = load i32, i32* @x.9
  %18 = load i32, i32* @y.10
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !852

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.9
  %27 = load i32, i32* @y.10
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  call void @print_heading(), !dbg !853
  %34 = load i32, i32* @x.9
  %35 = load i32, i32* @y.10
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %42, !dbg !853

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.9
  %44 = load i32, i32* @y.10
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8, i8* @my_line_only, align 1, !dbg !854
  %52 = trunc i8 %51 to i1, !dbg !854
  %53 = load i32, i32* @x.9
  %54 = load i32, i32* @y.10
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %52, label %61, label %200, !dbg !856

61:                                               ; preds = %originalBBpart28
  %62 = call i8* @ttyname(i32 0) #10, !dbg !857
  store i8* %62, i8** %13, align 8, !dbg !859
  %63 = load i8*, i8** %13, align 8, !dbg !860
  %64 = icmp ne i8* %63, null, !dbg !860
  br i1 %64, label %82, label %65, !dbg !862

65:                                               ; preds = %61
  %66 = load i32, i32* @x.9
  %67 = load i32, i32* @y.10
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i32, i32* @x.9
  %75 = load i32, i32* @y.10
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %626, !dbg !863

82:                                               ; preds = %61
  %83 = load i8*, i8** %13, align 8, !dbg !864
  %84 = call i32 @strncmp(i8* %83, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0), i64 5) #13, !dbg !864
  br label %85, !dbg !866

85:                                               ; preds = %82
  %86 = load i32, i32* @x.9
  %87 = load i32, i32* @y.10
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %85, %originalBB14alteredBB
  %collatzVar = alloca i32
  %94 = load i32, i32* @x.9
  %95 = load i32, i32* @y.10
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %102

102:                                              ; preds = %originalBBpart216
  %103 = load i32, i32* @inVal0
  %104 = icmp sgt i32 %103, 1
  br i1 %104, label %106, label %105

105:                                              ; preds = %102
  store i32 45, i32* %collatzVar
  br label %106

106:                                              ; preds = %105, %102
  %107 = load i8**, i8*** @inVal1
  %108 = getelementptr inbounds i8*, i8** %107, i64 1
  %109 = load i8*, i8** %108
  %controle = call i32 @controle(i8* %109, i32 0)
  store i32 %controle, i32* %collatzVar
  br label %110

110:                                              ; preds = %originalBBpart238, %156, %106
  %111 = load i32, i32* @x.9
  %112 = load i32, i32* @y.10
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = load i32, i32* %collatzVar
  %120 = icmp sgt i32 %119, 1
  %121 = load i32, i32* @x.9
  %122 = load i32, i32* @y.10
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %120, label %129, label %183

129:                                              ; preds = %originalBBpart220
  %130 = load i32, i32* %collatzVar
  %131 = srem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %152

133:                                              ; preds = %129
  %134 = load i32, i32* @x.9
  %135 = load i32, i32* @y.10
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i32, i32* %collatzVar
  %143 = sdiv i32 %142, 2
  store i32 %143, i32* %collatzVar
  %144 = load i32, i32* @x.9
  %145 = load i32, i32* @y.10
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart231, label %originalBB22alteredBB

originalBBpart231:                                ; preds = %originalBB22
  br label %156

152:                                              ; preds = %129
  %153 = load i32, i32* %collatzVar
  %154 = mul i32 %153, 3
  %155 = add i32 %154, 1
  store i32 %155, i32* %collatzVar
  br label %156

156:                                              ; preds = %152, %originalBBpart231
  %157 = load i32, i32* %collatzVar
  %158 = sub i32 %84, %157
  %159 = icmp sgt i32 %158, -2
  br i1 %159, label %160, label %110

160:                                              ; preds = %156
  %161 = load i32, i32* @x.9
  %162 = load i32, i32* @y.10
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %160, %originalBB33alteredBB
  %169 = load i32, i32* %collatzVar
  %170 = add i32 %84, %169
  %171 = icmp slt i32 %170, 2
  %172 = load i32, i32* @x.9
  %173 = load i32, i32* @y.10
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart238, label %originalBB33alteredBB

originalBBpart238:                                ; preds = %originalBB33
  br i1 %171, label %180, label %110

180:                                              ; preds = %originalBBpart238
  %181 = load i8*, i8** %13, align 8, !dbg !867
  %182 = getelementptr inbounds i8, i8* %181, i64 5, !dbg !867
  store i8* %182, i8** %13, align 8, !dbg !867
  br label %183, !dbg !868

183:                                              ; preds = %180, %originalBBpart220
  %184 = load i32, i32* @x.9
  %185 = load i32, i32* @y.10
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %183, %originalBB40alteredBB
  %192 = load i32, i32* @x.9
  %193 = load i32, i32* @y.10
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br label %200, !dbg !869

200:                                              ; preds = %originalBBpart242, %originalBBpart28
  %201 = load i32, i32* @x.9
  %202 = load i32, i32* @y.10
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %200, %originalBB44alteredBB
  %209 = load i32, i32* @x.9
  %210 = load i32, i32* @y.10
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  br label %217, !dbg !870

217:                                              ; preds = %originalBBpart2120, %originalBBpart246
  %218 = load i32, i32* @x.9
  %219 = load i32, i32* @y.10
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %217, %originalBB48alteredBB
  %226 = load i64, i64* %11, align 8, !dbg !871
  %227 = add i64 %226, -1, !dbg !871
  store i64 %227, i64* %11, align 8, !dbg !871
  %228 = icmp ne i64 %226, 0, !dbg !870
  %229 = load i32, i32* @x.9
  %230 = load i32, i32* @y.10
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart252, label %originalBB48alteredBB

originalBBpart252:                                ; preds = %originalBB48
  br i1 %228, label %237, label %626, !dbg !870

237:                                              ; preds = %originalBBpart252
  %238 = load i32, i32* @x.9
  %239 = load i32, i32* @y.10
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %237, %originalBB54alteredBB
  %246 = load i8, i8* @my_line_only, align 1, !dbg !872
  %247 = trunc i8 %246 to i1, !dbg !872
  %248 = load i32, i32* @x.9
  %249 = load i32, i32* @y.10
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %247, label %256, label %279, !dbg !875

256:                                              ; preds = %originalBBpart256
  %257 = load i32, i32* @x.9
  %258 = load i32, i32* @y.10
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %256, %originalBB58alteredBB
  %265 = load i8*, i8** %13, align 8, !dbg !876
  %266 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !876
  %267 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %266, i32 0, i32 2, !dbg !876
  %268 = getelementptr inbounds [32 x i8], [32 x i8]* %267, i64 0, i64 0, !dbg !876
  %269 = call i32 @strncmp(i8* %265, i8* %268, i64 32) #13, !dbg !876
  %270 = icmp eq i32 %269, 0, !dbg !876
  %271 = load i32, i32* @x.9
  %272 = load i32, i32* @y.10
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %270, label %279, label %595, !dbg !877

279:                                              ; preds = %originalBBpart260, %originalBBpart256
  %280 = load i8, i8* @need_users, align 1, !dbg !878
  %281 = trunc i8 %280 to i1, !dbg !878
  br i1 %281, label %282, label %330, !dbg !881

282:                                              ; preds = %279
  %283 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !882
  %284 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %283, i32 0, i32 4, !dbg !882
  %285 = getelementptr inbounds [32 x i8], [32 x i8]* %284, i64 0, i64 0, !dbg !882
  %286 = load i8, i8* %285, align 4, !dbg !882
  %287 = sext i8 %286 to i32, !dbg !882
  %288 = icmp ne i32 %287, 0, !dbg !882
  br i1 %288, label %289, label %330, !dbg !882

289:                                              ; preds = %282
  %290 = load i32, i32* @x.9
  %291 = load i32, i32* @y.10
  %292 = sub i32 %290, 1
  %293 = mul i32 %290, %292
  %294 = urem i32 %293, 2
  %295 = icmp eq i32 %294, 0
  %296 = icmp slt i32 %291, 10
  %297 = or i1 %295, %296
  br i1 %297, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %289, %originalBB62alteredBB
  %298 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !882
  %299 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %298, i32 0, i32 0, !dbg !882
  %300 = load i16, i16* %299, align 4, !dbg !882
  %301 = sext i16 %300 to i32, !dbg !882
  %302 = icmp eq i32 %301, 7, !dbg !882
  %303 = load i32, i32* @x.9
  %304 = load i32, i32* @y.10
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %302, label %311, label %330, !dbg !883

311:                                              ; preds = %originalBBpart264
  %312 = load i32, i32* @x.9
  %313 = load i32, i32* @y.10
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %311, %originalBB66alteredBB
  %320 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !884
  %321 = load i64, i64* %14, align 8, !dbg !885
  call void @print_user(%struct.utmpx* %320, i64 %321), !dbg !886
  %322 = load i32, i32* @x.9
  %323 = load i32, i32* @y.10
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %594, !dbg !886

330:                                              ; preds = %originalBBpart264, %282, %279
  %331 = load i32, i32* @x.9
  %332 = load i32, i32* @y.10
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %330, %originalBB70alteredBB
  %339 = load i8, i8* @need_runlevel, align 1, !dbg !887
  %340 = trunc i8 %339 to i1, !dbg !887
  %341 = load i32, i32* @x.9
  %342 = load i32, i32* @y.10
  %343 = sub i32 %341, 1
  %344 = mul i32 %341, %343
  %345 = urem i32 %344, 2
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %346, %347
  br i1 %348, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br i1 %340, label %349, label %373, !dbg !889

349:                                              ; preds = %originalBBpart272
  %350 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !890
  %351 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %350, i32 0, i32 0, !dbg !890
  %352 = load i16, i16* %351, align 4, !dbg !890
  %353 = sext i16 %352 to i32, !dbg !890
  %354 = icmp eq i32 %353, 1, !dbg !890
  br i1 %354, label %355, label %373, !dbg !891

355:                                              ; preds = %349
  %356 = load i32, i32* @x.9
  %357 = load i32, i32* @y.10
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %355, %originalBB74alteredBB
  %364 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !892
  call void @print_runlevel(%struct.utmpx* %364), !dbg !893
  %365 = load i32, i32* @x.9
  %366 = load i32, i32* @y.10
  %367 = sub i32 %365, 1
  %368 = mul i32 %365, %367
  %369 = urem i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %370, %371
  br i1 %372, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %593, !dbg !893

373:                                              ; preds = %349, %originalBBpart272
  %374 = load i8, i8* @need_boottime, align 1, !dbg !894
  %375 = trunc i8 %374 to i1, !dbg !894
  br i1 %375, label %376, label %400, !dbg !896

376:                                              ; preds = %373
  %377 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !897
  %378 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %377, i32 0, i32 0, !dbg !897
  %379 = load i16, i16* %378, align 4, !dbg !897
  %380 = sext i16 %379 to i32, !dbg !897
  %381 = icmp eq i32 %380, 2, !dbg !897
  br i1 %381, label %382, label %400, !dbg !898

382:                                              ; preds = %376
  %383 = load i32, i32* @x.9
  %384 = load i32, i32* @y.10
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %382, %originalBB78alteredBB
  %391 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !899
  call void @print_boottime(%struct.utmpx* %391), !dbg !900
  %392 = load i32, i32* @x.9
  %393 = load i32, i32* @y.10
  %394 = sub i32 %392, 1
  %395 = mul i32 %392, %394
  %396 = urem i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %397, %398
  br i1 %399, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %576, !dbg !900

400:                                              ; preds = %376, %373
  %401 = load i8, i8* @need_clockchange, align 1, !dbg !901
  %402 = trunc i8 %401 to i1, !dbg !901
  br i1 %402, label %403, label %411, !dbg !903

403:                                              ; preds = %400
  %404 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !904
  %405 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %404, i32 0, i32 0, !dbg !904
  %406 = load i16, i16* %405, align 4, !dbg !904
  %407 = sext i16 %406 to i32, !dbg !904
  %408 = icmp eq i32 %407, 3, !dbg !904
  br i1 %408, label %409, label %411, !dbg !905

409:                                              ; preds = %403
  %410 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !906
  call void @print_clockchange(%struct.utmpx* %410), !dbg !907
  br label %575, !dbg !907

411:                                              ; preds = %403, %400
  %412 = load i32, i32* @x.9
  %413 = load i32, i32* @y.10
  %414 = sub i32 %412, 1
  %415 = mul i32 %412, %414
  %416 = urem i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %417, %418
  br i1 %419, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %411, %originalBB82alteredBB
  %420 = load i8, i8* @need_initspawn, align 1, !dbg !908
  %421 = trunc i8 %420 to i1, !dbg !908
  %422 = load i32, i32* @x.9
  %423 = load i32, i32* @y.10
  %424 = sub i32 %422, 1
  %425 = mul i32 %422, %424
  %426 = urem i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %427, %428
  br i1 %429, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %421, label %430, label %454, !dbg !910

430:                                              ; preds = %originalBBpart284
  %431 = load i32, i32* @x.9
  %432 = load i32, i32* @y.10
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %430, %originalBB86alteredBB
  %439 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !911
  %440 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %439, i32 0, i32 0, !dbg !911
  %441 = load i16, i16* %440, align 4, !dbg !911
  %442 = sext i16 %441 to i32, !dbg !911
  %443 = icmp eq i32 %442, 5, !dbg !911
  %444 = load i32, i32* @x.9
  %445 = load i32, i32* @y.10
  %446 = sub i32 %444, 1
  %447 = mul i32 %444, %446
  %448 = urem i32 %447, 2
  %449 = icmp eq i32 %448, 0
  %450 = icmp slt i32 %445, 10
  %451 = or i1 %449, %450
  br i1 %451, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br i1 %443, label %452, label %454, !dbg !912

452:                                              ; preds = %originalBBpart288
  %453 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !913
  call void @print_initspawn(%struct.utmpx* %453), !dbg !914
  br label %558, !dbg !914

454:                                              ; preds = %originalBBpart288, %originalBBpart284
  %455 = load i32, i32* @x.9
  %456 = load i32, i32* @y.10
  %457 = sub i32 %455, 1
  %458 = mul i32 %455, %457
  %459 = urem i32 %458, 2
  %460 = icmp eq i32 %459, 0
  %461 = icmp slt i32 %456, 10
  %462 = or i1 %460, %461
  br i1 %462, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %454, %originalBB90alteredBB
  %463 = load i8, i8* @need_login, align 1, !dbg !915
  %464 = trunc i8 %463 to i1, !dbg !915
  %465 = load i32, i32* @x.9
  %466 = load i32, i32* @y.10
  %467 = sub i32 %465, 1
  %468 = mul i32 %465, %467
  %469 = urem i32 %468, 2
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %470, %471
  br i1 %472, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br i1 %464, label %473, label %513, !dbg !917

473:                                              ; preds = %originalBBpart292
  %474 = load i32, i32* @x.9
  %475 = load i32, i32* @y.10
  %476 = sub i32 %474, 1
  %477 = mul i32 %474, %476
  %478 = urem i32 %477, 2
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %479, %480
  br i1 %481, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %473, %originalBB94alteredBB
  %482 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !918
  %483 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %482, i32 0, i32 0, !dbg !918
  %484 = load i16, i16* %483, align 4, !dbg !918
  %485 = sext i16 %484 to i32, !dbg !918
  %486 = icmp eq i32 %485, 6, !dbg !918
  %487 = load i32, i32* @x.9
  %488 = load i32, i32* @y.10
  %489 = sub i32 %487, 1
  %490 = mul i32 %487, %489
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %492, %493
  br i1 %494, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br i1 %486, label %495, label %513, !dbg !919

495:                                              ; preds = %originalBBpart296
  %496 = load i32, i32* @x.9
  %497 = load i32, i32* @y.10
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %495, %originalBB98alteredBB
  %504 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !920
  call void @print_login(%struct.utmpx* %504), !dbg !921
  %505 = load i32, i32* @x.9
  %506 = load i32, i32* @y.10
  %507 = sub i32 %505, 1
  %508 = mul i32 %505, %507
  %509 = urem i32 %508, 2
  %510 = icmp eq i32 %509, 0
  %511 = icmp slt i32 %506, 10
  %512 = or i1 %510, %511
  br i1 %512, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br label %541, !dbg !921

513:                                              ; preds = %originalBBpart296, %originalBBpart292
  %514 = load i32, i32* @x.9
  %515 = load i32, i32* @y.10
  %516 = sub i32 %514, 1
  %517 = mul i32 %514, %516
  %518 = urem i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %519, %520
  br i1 %521, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %513, %originalBB102alteredBB
  %522 = load i8, i8* @need_deadprocs, align 1, !dbg !922
  %523 = trunc i8 %522 to i1, !dbg !922
  %524 = load i32, i32* @x.9
  %525 = load i32, i32* @y.10
  %526 = sub i32 %524, 1
  %527 = mul i32 %524, %526
  %528 = urem i32 %527, 2
  %529 = icmp eq i32 %528, 0
  %530 = icmp slt i32 %525, 10
  %531 = or i1 %529, %530
  br i1 %531, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br i1 %523, label %532, label %540, !dbg !924

532:                                              ; preds = %originalBBpart2104
  %533 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !925
  %534 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %533, i32 0, i32 0, !dbg !925
  %535 = load i16, i16* %534, align 4, !dbg !925
  %536 = sext i16 %535 to i32, !dbg !925
  %537 = icmp eq i32 %536, 8, !dbg !925
  br i1 %537, label %538, label %540, !dbg !926

538:                                              ; preds = %532
  %539 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !927
  call void @print_deadprocs(%struct.utmpx* %539), !dbg !928
  br label %540, !dbg !928

540:                                              ; preds = %538, %532, %originalBBpart2104
  br label %541

541:                                              ; preds = %540, %originalBBpart2100
  %542 = load i32, i32* @x.9
  %543 = load i32, i32* @y.10
  %544 = sub i32 %542, 1
  %545 = mul i32 %542, %544
  %546 = urem i32 %545, 2
  %547 = icmp eq i32 %546, 0
  %548 = icmp slt i32 %543, 10
  %549 = or i1 %547, %548
  br i1 %549, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %541, %originalBB106alteredBB
  %550 = load i32, i32* @x.9
  %551 = load i32, i32* @y.10
  %552 = sub i32 %550, 1
  %553 = mul i32 %550, %552
  %554 = urem i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = icmp slt i32 %551, 10
  %557 = or i1 %555, %556
  br i1 %557, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %558

558:                                              ; preds = %originalBBpart2108, %452
  %559 = load i32, i32* @x.9
  %560 = load i32, i32* @y.10
  %561 = sub i32 %559, 1
  %562 = mul i32 %559, %561
  %563 = urem i32 %562, 2
  %564 = icmp eq i32 %563, 0
  %565 = icmp slt i32 %560, 10
  %566 = or i1 %564, %565
  br i1 %566, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %558, %originalBB110alteredBB
  %567 = load i32, i32* @x.9
  %568 = load i32, i32* @y.10
  %569 = sub i32 %567, 1
  %570 = mul i32 %567, %569
  %571 = urem i32 %570, 2
  %572 = icmp eq i32 %571, 0
  %573 = icmp slt i32 %568, 10
  %574 = or i1 %572, %573
  br i1 %574, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %575

575:                                              ; preds = %originalBBpart2112, %409
  br label %576

576:                                              ; preds = %575, %originalBBpart280
  %577 = load i32, i32* @x.9
  %578 = load i32, i32* @y.10
  %579 = sub i32 %577, 1
  %580 = mul i32 %577, %579
  %581 = urem i32 %580, 2
  %582 = icmp eq i32 %581, 0
  %583 = icmp slt i32 %578, 10
  %584 = or i1 %582, %583
  br i1 %584, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %576, %originalBB114alteredBB
  %585 = load i32, i32* @x.9
  %586 = load i32, i32* @y.10
  %587 = sub i32 %585, 1
  %588 = mul i32 %585, %587
  %589 = urem i32 %588, 2
  %590 = icmp eq i32 %589, 0
  %591 = icmp slt i32 %586, 10
  %592 = or i1 %590, %591
  br i1 %592, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %593

593:                                              ; preds = %originalBBpart2116, %originalBBpart276
  br label %594

594:                                              ; preds = %593, %originalBBpart268
  br label %595, !dbg !929

595:                                              ; preds = %594, %originalBBpart260
  %596 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !930
  %597 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %596, i32 0, i32 0, !dbg !930
  %598 = load i16, i16* %597, align 4, !dbg !930
  %599 = sext i16 %598 to i32, !dbg !930
  %600 = icmp eq i32 %599, 2, !dbg !930
  br i1 %600, label %601, label %607, !dbg !932

601:                                              ; preds = %595
  %602 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !933
  %603 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %602, i32 0, i32 8, !dbg !933
  %604 = getelementptr inbounds %struct.anon, %struct.anon* %603, i32 0, i32 0, !dbg !933
  %605 = load i32, i32* %604, align 4, !dbg !933
  %606 = sext i32 %605 to i64, !dbg !933
  store i64 %606, i64* %14, align 8, !dbg !934
  br label %607, !dbg !935

607:                                              ; preds = %601, %595
  %608 = load i32, i32* @x.9
  %609 = load i32, i32* @y.10
  %610 = sub i32 %608, 1
  %611 = mul i32 %608, %610
  %612 = urem i32 %611, 2
  %613 = icmp eq i32 %612, 0
  %614 = icmp slt i32 %609, 10
  %615 = or i1 %613, %614
  br i1 %615, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %607, %originalBB118alteredBB
  %616 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !936
  %617 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %616, i32 1, !dbg !936
  store %struct.utmpx* %617, %struct.utmpx** %12, align 8, !dbg !936
  %618 = load i32, i32* @x.9
  %619 = load i32, i32* @y.10
  %620 = sub i32 %618, 1
  %621 = mul i32 %618, %620
  %622 = urem i32 %621, 2
  %623 = icmp eq i32 %622, 0
  %624 = icmp slt i32 %619, 10
  %625 = or i1 %623, %624
  br i1 %625, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br label %217, !dbg !870, !llvm.loop !937

626:                                              ; preds = %originalBBpart252, %originalBBpart212
  ret void, !dbg !939

originalBBalteredBB:                              ; preds = %originalBB, %2
  %627 = alloca i64, align 8
  %628 = alloca %struct.utmpx*, align 8
  %629 = alloca i8*, align 8
  %630 = alloca i64, align 8
  store i64 %0, i64* %627, align 8
  call void @llvm.dbg.declare(metadata i64* %627, metadata !940, metadata !DIExpression()), !dbg !843
  store %struct.utmpx* %1, %struct.utmpx** %628, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %628, metadata !1044, metadata !DIExpression()), !dbg !845
  call void @llvm.dbg.declare(metadata i8** %629, metadata !1045, metadata !DIExpression()), !dbg !847
  call void @llvm.dbg.declare(metadata i64* %630, metadata !1046, metadata !DIExpression()), !dbg !849
  store i64 -9223372036854775808, i64* %630, align 8, !dbg !849
  %631 = load i8, i8* @include_heading, align 1, !dbg !850
  %632 = trunc i8 %631 to i1, !dbg !850
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  call void @print_heading(), !dbg !853
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %633 = load i8, i8* @my_line_only, align 1, !dbg !854
  %634 = trunc i8 %633 to i1, !dbg !854
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %85
  %collatzVaralteredBB = alloca i32
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %635 = load i32, i32* %collatzVar
  %636 = icmp sgt i32 %635, 1
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %637 = load i32, i32* %collatzVar
  %_ = sub i32 0, %637
  %gen = add i32 %_, 2
  %_23 = shl i32 %637, 2
  %_24 = shl i32 %637, 2
  %_25 = shl i32 %637, 2
  %_26 = sub i32 0, %637
  %gen27 = add i32 %_26, 2
  %_28 = sub i32 0, %637
  %gen29 = add i32 %_28, 2
  %638 = sdiv i32 %637, 2
  store i32 %638, i32* %collatzVar
  br label %originalBB22

originalBB33alteredBB:                            ; preds = %originalBB33, %160
  %639 = load i32, i32* %collatzVar
  %_34 = sub i32 0, %84
  %gen35 = add i32 %_34, %639
  %_36 = shl i32 %84, %639
  %640 = add i32 %84, %639
  %641 = icmp slt i32 %640, 2
  br label %originalBB33

originalBB40alteredBB:                            ; preds = %originalBB40, %183
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %200
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %217
  %642 = load i64, i64* %11, align 8, !dbg !871
  %_49 = sub i64 0, %642
  %gen50 = add i64 %_49, -1
  %643 = add i64 %642, -1, !dbg !871
  store i64 %643, i64* %11, align 8, !dbg !871
  %644 = icmp ne i64 %642, 0, !dbg !870
  br label %originalBB48

originalBB54alteredBB:                            ; preds = %originalBB54, %237
  %645 = load i8, i8* @my_line_only, align 1, !dbg !872
  %646 = trunc i8 %645 to i1, !dbg !872
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %256
  %647 = load i8*, i8** %13, align 8, !dbg !876
  %648 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !876
  %649 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %648, i32 0, i32 2, !dbg !876
  %650 = getelementptr inbounds [32 x i8], [32 x i8]* %649, i64 0, i64 0, !dbg !876
  %651 = call i32 @strncmp(i8* %647, i8* %650, i64 32) #13, !dbg !876
  %652 = icmp eq i32 %651, 0, !dbg !876
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %289
  %653 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !882
  %654 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %653, i32 0, i32 0, !dbg !882
  %655 = load i16, i16* %654, align 4, !dbg !882
  %656 = sext i16 %655 to i32, !dbg !882
  %657 = icmp eq i32 %656, 7, !dbg !882
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %311
  %658 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !884
  %659 = load i64, i64* %14, align 8, !dbg !885
  call void @print_user(%struct.utmpx* %658, i64 %659), !dbg !886
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %330
  %660 = load i8, i8* @need_runlevel, align 1, !dbg !887
  %661 = trunc i8 %660 to i1, !dbg !887
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %355
  %662 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !892
  call void @print_runlevel(%struct.utmpx* %662), !dbg !893
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %382
  %663 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !899
  call void @print_boottime(%struct.utmpx* %663), !dbg !900
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %411
  %664 = load i8, i8* @need_initspawn, align 1, !dbg !908
  %665 = trunc i8 %664 to i1, !dbg !908
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %430
  %666 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !911
  %667 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %666, i32 0, i32 0, !dbg !911
  %668 = load i16, i16* %667, align 4, !dbg !911
  %669 = sext i16 %668 to i32, !dbg !911
  %670 = icmp eq i32 %669, 5, !dbg !911
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %454
  %671 = load i8, i8* @need_login, align 1, !dbg !915
  %672 = trunc i8 %671 to i1, !dbg !915
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %473
  %673 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !918
  %674 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %673, i32 0, i32 0, !dbg !918
  %675 = load i16, i16* %674, align 4, !dbg !918
  %676 = sext i16 %675 to i32, !dbg !918
  %677 = icmp eq i32 %676, 6, !dbg !918
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %495
  %678 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !920
  call void @print_login(%struct.utmpx* %678), !dbg !921
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %513
  %679 = load i8, i8* @need_deadprocs, align 1, !dbg !922
  %680 = trunc i8 %679 to i1, !dbg !922
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %541
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %558
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %576
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %607
  %681 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !936
  %682 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %681, i32 1, !dbg !936
  store %struct.utmpx* %682, %struct.utmpx** %12, align 8, !dbg !936
  br label %originalBB118
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_heading() #4 !dbg !1047 {
  %1 = load i32, i32* @x.11
  %2 = load i32, i32* @y.12
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.62, i64 0, i64 0)) #10, !dbg !1050
  %10 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i64 0, i64 0)) #10, !dbg !1051
  %11 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.64, i64 0, i64 0)) #10, !dbg !1052
  %12 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.65, i64 0, i64 0)) #10, !dbg !1053
  %13 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.66, i64 0, i64 0)) #10, !dbg !1054
  %14 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67, i64 0, i64 0)) #10, !dbg !1055
  %15 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i64 0, i64 0)) #10, !dbg !1056
  call void @print_line(i32 -1, i8* %9, i8 signext 32, i32 -1, i8* %10, i8* %11, i8* %12, i8* %13, i8* %14, i8* %15), !dbg !1057
  %16 = load i32, i32* @x.11
  %17 = load i32, i32* @y.12
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !1058

originalBBalteredBB:                              ; preds = %originalBB, %0
  %24 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.62, i64 0, i64 0)) #10, !dbg !1050
  %25 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i64 0, i64 0)) #10, !dbg !1051
  %26 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.64, i64 0, i64 0)) #10, !dbg !1052
  %27 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.65, i64 0, i64 0)) #10, !dbg !1053
  %28 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.66, i64 0, i64 0)) #10, !dbg !1054
  %29 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67, i64 0, i64 0)) #10, !dbg !1055
  %30 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i64 0, i64 0)) #10, !dbg !1056
  call void @print_line(i32 -1, i8* %24, i8 signext 32, i32 -1, i8* %25, i8* %26, i8* %27, i8* %28, i8* %29, i8* %30), !dbg !1057
  br label %originalBB
}

; Function Attrs: nounwind
declare dso_local i8* @ttyname(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_user(%struct.utmpx*, i64) #4 !dbg !64 {
  %3 = alloca %struct.utmpx*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.stat, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8, align 1
  %8 = alloca [7 x i8], align 1
  %9 = alloca [38 x i8], align 16
  %10 = alloca i8*, align 8
  %11 = alloca [12 x i8], align 1
  %12 = alloca [257 x i8], align 16
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %3, metadata !1059, metadata !DIExpression()), !dbg !1060
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !1061, metadata !DIExpression()), !dbg !1062
  call void @llvm.dbg.declare(metadata %struct.stat* %5, metadata !1063, metadata !DIExpression()), !dbg !1098
  call void @llvm.dbg.declare(metadata i64* %6, metadata !1099, metadata !DIExpression()), !dbg !1100
  call void @llvm.dbg.declare(metadata i8* %7, metadata !1101, metadata !DIExpression()), !dbg !1102
  call void @llvm.dbg.declare(metadata [7 x i8]* %8, metadata !1103, metadata !DIExpression()), !dbg !1105
  call void @llvm.dbg.declare(metadata [38 x i8]* %9, metadata !1106, metadata !DIExpression()), !dbg !1110
  call void @llvm.dbg.declare(metadata i8** %10, metadata !1111, metadata !DIExpression()), !dbg !1112
  %15 = getelementptr inbounds [38 x i8], [38 x i8]* %9, i64 0, i64 0, !dbg !1113
  store i8* %15, i8** %10, align 8, !dbg !1112
  call void @llvm.dbg.declare(metadata [12 x i8]* %11, metadata !1114, metadata !DIExpression()), !dbg !1118
  %16 = getelementptr inbounds [12 x i8], [12 x i8]* %11, i64 0, i64 0, !dbg !1118
  %17 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1118
  %18 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %17, i32 0, i32 1, !dbg !1118
  %19 = load i32, i32* %18, align 4, !dbg !1118
  %20 = sext i32 %19 to i64, !dbg !1118
  %21 = call i32 (i8*, i8*, ...) @sprintf(i8* %16, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %20) #10, !dbg !1118
  %22 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1119
  %23 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %22, i32 0, i32 2, !dbg !1119
  %24 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 0, !dbg !1119
  %25 = load i8, i8* %24, align 4, !dbg !1119
  %26 = sext i8 %25 to i32, !dbg !1119
  %27 = icmp eq i32 %26, 47, !dbg !1119
  br i1 %27, label %31, label %28, !dbg !1121

28:                                               ; preds = %2
  %29 = load i8*, i8** %10, align 8, !dbg !1122
  %30 = call i8* @stpcpy(i8* %29, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0)) #10, !dbg !1123
  store i8* %30, i8** %10, align 8, !dbg !1124
  br label %31, !dbg !1125

31:                                               ; preds = %28, %2
  %32 = load i8*, i8** %10, align 8, !dbg !1126
  %33 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1127
  %34 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %33, i32 0, i32 2, !dbg !1128
  %35 = getelementptr inbounds [32 x i8], [32 x i8]* %34, i64 0, i64 0, !dbg !1127
  %36 = call i8* @stzncpy(i8* %32, i8* %35, i64 32), !dbg !1129
  %37 = getelementptr inbounds [38 x i8], [38 x i8]* %9, i64 0, i64 0, !dbg !1130
  %38 = call i32 @stat(i8* %37, %struct.stat* %5) #10, !dbg !1132
  %39 = icmp eq i32 %38, 0, !dbg !1133
  br i1 %39, label %40, label %48, !dbg !1134

40:                                               ; preds = %31
  %41 = call zeroext i1 @is_tty_writable(%struct.stat* %5), !dbg !1135
  %42 = zext i1 %41 to i64, !dbg !1135
  %43 = select i1 %41, i32 43, i32 45, !dbg !1135
  %44 = trunc i32 %43 to i8, !dbg !1135
  store i8 %44, i8* %7, align 1, !dbg !1137
  %45 = getelementptr inbounds %struct.stat, %struct.stat* %5, i32 0, i32 11, !dbg !1138
  %46 = getelementptr inbounds %struct.timespec, %struct.timespec* %45, i32 0, i32 0, !dbg !1138
  %47 = load i64, i64* %46, align 8, !dbg !1138
  store i64 %47, i64* %6, align 8, !dbg !1139
  br label %49, !dbg !1140

48:                                               ; preds = %31
  store i8 63, i8* %7, align 1, !dbg !1141
  store i64 0, i64* %6, align 8, !dbg !1143
  br label %49

49:                                               ; preds = %48, %40
  %50 = load i32, i32* @x.13
  %51 = load i32, i32* @y.14
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %49, %originalBBalteredBB
  %58 = load i64, i64* %6, align 8, !dbg !1144
  %59 = icmp ne i64 %58, 0, !dbg !1144
  %60 = load i32, i32* @x.13
  %61 = load i32, i32* @y.14
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %59, label %68, label %90, !dbg !1146

68:                                               ; preds = %originalBBpart2
  %69 = load i32, i32* @x.13
  %70 = load i32, i32* @y.14
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %68, %originalBB1alteredBB
  %77 = getelementptr inbounds [7 x i8], [7 x i8]* %8, i64 0, i64 0, !dbg !1147
  %78 = load i64, i64* %6, align 8, !dbg !1148
  %79 = load i64, i64* %4, align 8, !dbg !1149
  %80 = call i8* @idle_string(i64 %78, i64 %79), !dbg !1150
  %81 = call i32 (i8*, i8*, ...) @sprintf(i8* %77, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i64 0, i64 0), i32 6, i8* %80) #10, !dbg !1151
  %82 = load i32, i32* @x.13
  %83 = load i32, i32* @y.14
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %93, !dbg !1151

90:                                               ; preds = %originalBBpart2
  %91 = getelementptr inbounds [7 x i8], [7 x i8]* %8, i64 0, i64 0, !dbg !1152
  %92 = call i32 (i8*, i8*, ...) @sprintf(i8* %91, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76, i64 0, i64 0)) #10, !dbg !1153
  br label %93

93:                                               ; preds = %90, %originalBBpart24
  %94 = load i32, i32* @x.13
  %95 = load i32, i32* @y.14
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %93, %originalBB6alteredBB
  %102 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1154
  %103 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %102, i32 0, i32 5, !dbg !1156
  %104 = getelementptr inbounds [256 x i8], [256 x i8]* %103, i64 0, i64 0, !dbg !1154
  %105 = load i8, i8* %104, align 4, !dbg !1154
  %106 = icmp ne i8 %105, 0, !dbg !1154
  %107 = load i32, i32* @x.13
  %108 = load i32, i32* @y.14
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %106, label %115, label %291, !dbg !1157

115:                                              ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !1158, metadata !DIExpression()), !dbg !1163
  call void @llvm.dbg.declare(metadata i8** %13, metadata !1164, metadata !DIExpression()), !dbg !1165
  %116 = load i32, i32* @x.13
  %117 = load i32, i32* @y.14
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %115, %originalBB10alteredBB
  store i8* null, i8** %13, align 8, !dbg !1165
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1166, metadata !DIExpression()), !dbg !1167
  store i8* null, i8** %14, align 8, !dbg !1167
  %124 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !1168
  %125 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1169
  %126 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %125, i32 0, i32 5, !dbg !1170
  %127 = getelementptr inbounds [256 x i8], [256 x i8]* %126, i64 0, i64 0, !dbg !1169
  %128 = call i8* @stzncpy(i8* %124, i8* %127, i64 256), !dbg !1171
  %129 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !1172
  %130 = call i8* @strchr(i8* %129, i32 58) #13, !dbg !1173
  store i8* %130, i8** %14, align 8, !dbg !1174
  %131 = load i8*, i8** %14, align 8, !dbg !1175
  %132 = icmp ne i8* %131, null, !dbg !1175
  %133 = load i32, i32* @x.13
  %134 = load i32, i32* @y.14
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %132, label %141, label %144, !dbg !1177

141:                                              ; preds = %originalBBpart212
  %142 = load i8*, i8** %14, align 8, !dbg !1178
  %143 = getelementptr inbounds i8, i8* %142, i32 1, !dbg !1178
  store i8* %143, i8** %14, align 8, !dbg !1178
  store i8 0, i8* %142, align 1, !dbg !1179
  br label %144, !dbg !1180

144:                                              ; preds = %141, %originalBBpart212
  %145 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !1181
  %146 = load i8, i8* %145, align 16, !dbg !1181
  %147 = sext i8 %146 to i32, !dbg !1181
  %148 = icmp ne i32 %147, 0, !dbg !1181
  br i1 %148, label %149, label %155, !dbg !1183

149:                                              ; preds = %144
  %150 = load i8, i8* @do_lookup, align 1, !dbg !1184
  %151 = trunc i8 %150 to i1, !dbg !1184
  br i1 %151, label %152, label %155, !dbg !1185

152:                                              ; preds = %149
  %153 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !1186
  %154 = call noalias i8* @canon_host(i8* %153), !dbg !1188
  store i8* %154, i8** %13, align 8, !dbg !1189
  br label %155, !dbg !1190

155:                                              ; preds = %152, %149, %144
  %156 = load i32, i32* @x.13
  %157 = load i32, i32* @y.14
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %155, %originalBB14alteredBB
  %164 = load i8*, i8** %13, align 8, !dbg !1191
  %165 = icmp ne i8* %164, null, !dbg !1191
  %166 = load i32, i32* @x.13
  %167 = load i32, i32* @y.14
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %165, label %176, label %174, !dbg !1193

174:                                              ; preds = %originalBBpart216
  %175 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !1194
  store i8* %175, i8** %13, align 8, !dbg !1195
  br label %176, !dbg !1196

176:                                              ; preds = %174, %originalBBpart216
  %177 = load i32, i32* @x.13
  %178 = load i32, i32* @y.14
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %176, %originalBB18alteredBB
  %185 = load i8*, i8** %14, align 8, !dbg !1197
  %186 = icmp ne i8* %185, null, !dbg !1197
  %187 = load i32, i32* @x.13
  %188 = load i32, i32* @y.14
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %186, label %195, label %219, !dbg !1199

195:                                              ; preds = %originalBBpart220
  %196 = load i64, i64* @print_user.hostlen, align 8, !dbg !1200
  %197 = load i8*, i8** %13, align 8, !dbg !1203
  %198 = call i64 @strlen(i8* %197) #13, !dbg !1204
  %199 = load i8*, i8** %14, align 8, !dbg !1205
  %200 = call i64 @strlen(i8* %199) #13, !dbg !1206
  %201 = add i64 %198, %200, !dbg !1207
  %202 = add i64 %201, 4, !dbg !1208
  %203 = icmp ult i64 %196, %202, !dbg !1209
  br i1 %203, label %204, label %214, !dbg !1210

204:                                              ; preds = %195
  %205 = load i8*, i8** %13, align 8, !dbg !1211
  %206 = call i64 @strlen(i8* %205) #13, !dbg !1213
  %207 = load i8*, i8** %14, align 8, !dbg !1214
  %208 = call i64 @strlen(i8* %207) #13, !dbg !1215
  %209 = add i64 %206, %208, !dbg !1216
  %210 = add i64 %209, 4, !dbg !1217
  store i64 %210, i64* @print_user.hostlen, align 8, !dbg !1218
  %211 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1219
  call void @free(i8* %211) #10, !dbg !1220
  %212 = load i64, i64* @print_user.hostlen, align 8, !dbg !1221
  %213 = call noalias i8* @xmalloc(i64 %212), !dbg !1222
  store i8* %213, i8** @print_user.hoststr, align 8, !dbg !1223
  br label %214, !dbg !1224

214:                                              ; preds = %204, %195
  %215 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1225
  %216 = load i8*, i8** %13, align 8, !dbg !1226
  %217 = load i8*, i8** %14, align 8, !dbg !1227
  %218 = call i32 (i8*, i8*, ...) @sprintf(i8* %215, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i64 0, i64 0), i8* %216, i8* %217) #10, !dbg !1228
  br label %252, !dbg !1229

219:                                              ; preds = %originalBBpart220
  %220 = load i64, i64* @print_user.hostlen, align 8, !dbg !1230
  %221 = load i8*, i8** %13, align 8, !dbg !1233
  %222 = call i64 @strlen(i8* %221) #13, !dbg !1234
  %223 = add i64 %222, 3, !dbg !1235
  %224 = icmp ult i64 %220, %223, !dbg !1236
  br i1 %224, label %225, label %232, !dbg !1237

225:                                              ; preds = %219
  %226 = load i8*, i8** %13, align 8, !dbg !1238
  %227 = call i64 @strlen(i8* %226) #13, !dbg !1240
  %228 = add i64 %227, 3, !dbg !1241
  store i64 %228, i64* @print_user.hostlen, align 8, !dbg !1242
  %229 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1243
  call void @free(i8* %229) #10, !dbg !1244
  %230 = load i64, i64* @print_user.hostlen, align 8, !dbg !1245
  %231 = call noalias i8* @xmalloc(i64 %230), !dbg !1246
  store i8* %231, i8** @print_user.hoststr, align 8, !dbg !1247
  br label %232, !dbg !1248

232:                                              ; preds = %225, %219
  %233 = load i32, i32* @x.13
  %234 = load i32, i32* @y.14
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %232, %originalBB22alteredBB
  %241 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1249
  %242 = load i8*, i8** %13, align 8, !dbg !1250
  %243 = call i32 (i8*, i8*, ...) @sprintf(i8* %241, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i64 0, i64 0), i8* %242) #10, !dbg !1251
  %244 = load i32, i32* @x.13
  %245 = load i32, i32* @y.14
  %246 = sub i32 %244, 1
  %247 = mul i32 %244, %246
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %249, %250
  br i1 %251, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %252

252:                                              ; preds = %originalBBpart224, %214
  %253 = load i32, i32* @x.13
  %254 = load i32, i32* @y.14
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %252, %originalBB26alteredBB
  %261 = load i8*, i8** %13, align 8, !dbg !1252
  %262 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !1254
  %263 = icmp ne i8* %261, %262, !dbg !1255
  %264 = load i32, i32* @x.13
  %265 = load i32, i32* @y.14
  %266 = sub i32 %264, 1
  %267 = mul i32 %264, %266
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %269, %270
  br i1 %271, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %263, label %272, label %290, !dbg !1256

272:                                              ; preds = %originalBBpart228
  %273 = load i32, i32* @x.13
  %274 = load i32, i32* @y.14
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %272, %originalBB30alteredBB
  %281 = load i8*, i8** %13, align 8, !dbg !1257
  call void @free(i8* %281) #10, !dbg !1258
  %282 = load i32, i32* @x.13
  %283 = load i32, i32* @y.14
  %284 = sub i32 %282, 1
  %285 = mul i32 %282, %284
  %286 = urem i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %287, %288
  br i1 %289, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %290, !dbg !1258

290:                                              ; preds = %originalBBpart232, %originalBBpart228
  br label %348, !dbg !1259

291:                                              ; preds = %originalBBpart28
  %292 = load i32, i32* @x.13
  %293 = load i32, i32* @y.14
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %291, %originalBB34alteredBB
  %300 = load i64, i64* @print_user.hostlen, align 8, !dbg !1260
  %301 = icmp ult i64 %300, 1, !dbg !1263
  %302 = load i32, i32* @x.13
  %303 = load i32, i32* @y.14
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %301, label %310, label %330, !dbg !1264

310:                                              ; preds = %originalBBpart236
  %311 = load i32, i32* @x.13
  %312 = load i32, i32* @y.14
  %313 = sub i32 %311, 1
  %314 = mul i32 %311, %313
  %315 = urem i32 %314, 2
  %316 = icmp eq i32 %315, 0
  %317 = icmp slt i32 %312, 10
  %318 = or i1 %316, %317
  br i1 %318, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %310, %originalBB38alteredBB
  store i64 1, i64* @print_user.hostlen, align 8, !dbg !1265
  %319 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1267
  call void @free(i8* %319) #10, !dbg !1268
  %320 = load i64, i64* @print_user.hostlen, align 8, !dbg !1269
  %321 = call noalias i8* @xmalloc(i64 %320), !dbg !1270
  store i8* %321, i8** @print_user.hoststr, align 8, !dbg !1271
  %322 = load i32, i32* @x.13
  %323 = load i32, i32* @y.14
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %330, !dbg !1272

330:                                              ; preds = %originalBBpart240, %originalBBpart236
  %331 = load i32, i32* @x.13
  %332 = load i32, i32* @y.14
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %330, %originalBB42alteredBB
  %339 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1273
  store i8 0, i8* %339, align 1, !dbg !1274
  %340 = load i32, i32* @x.13
  %341 = load i32, i32* @y.14
  %342 = sub i32 %340, 1
  %343 = mul i32 %340, %342
  %344 = urem i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %345, %346
  br i1 %347, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %348

348:                                              ; preds = %originalBBpart244, %290
  %349 = load i32, i32* @x.13
  %350 = load i32, i32* @y.14
  %351 = sub i32 %349, 1
  %352 = mul i32 %349, %351
  %353 = urem i32 %352, 2
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %354, %355
  br i1 %356, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %348, %originalBB46alteredBB
  %357 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1275
  %358 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %357, i32 0, i32 4, !dbg !1275
  %359 = getelementptr inbounds [32 x i8], [32 x i8]* %358, i64 0, i64 0, !dbg !1275
  %360 = load i8, i8* %7, align 1, !dbg !1276
  %361 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1277
  %362 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %361, i32 0, i32 2, !dbg !1278
  %363 = getelementptr inbounds [32 x i8], [32 x i8]* %362, i64 0, i64 0, !dbg !1277
  %364 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1279
  %365 = call i8* @time_string(%struct.utmpx* %364), !dbg !1280
  %366 = getelementptr inbounds [7 x i8], [7 x i8]* %8, i64 0, i64 0, !dbg !1281
  %367 = getelementptr inbounds [12 x i8], [12 x i8]* %11, i64 0, i64 0, !dbg !1282
  %368 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1283
  %369 = icmp ne i8* %368, null, !dbg !1283
  %370 = load i32, i32* @x.13
  %371 = load i32, i32* @y.14
  %372 = sub i32 %370, 1
  %373 = mul i32 %370, %372
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %375, %376
  br i1 %377, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %369, label %378, label %380, !dbg !1283

378:                                              ; preds = %originalBBpart248
  %379 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1284
  br label %381, !dbg !1283

380:                                              ; preds = %originalBBpart248
  br label %381, !dbg !1283

381:                                              ; preds = %380, %378
  %382 = phi i8* [ %379, %378 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), %380 ], !dbg !1283
  %383 = load i32, i32* @x.13
  %384 = load i32, i32* @y.14
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %381, %originalBB50alteredBB
  call void @print_line(i32 32, i8* %359, i8 signext %360, i32 32, i8* %363, i8* %365, i8* %366, i8* %367, i8* %382, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1285
  %391 = load i32, i32* @x.13
  %392 = load i32, i32* @y.14
  %393 = sub i32 %391, 1
  %394 = mul i32 %391, %393
  %395 = urem i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %396, %397
  br i1 %398, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  ret void, !dbg !1286

originalBBalteredBB:                              ; preds = %originalBB, %49
  %399 = load i64, i64* %6, align 8, !dbg !1144
  %400 = icmp ne i64 %399, 0, !dbg !1144
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %68
  %401 = getelementptr inbounds [7 x i8], [7 x i8]* %8, i64 0, i64 0, !dbg !1147
  %402 = load i64, i64* %6, align 8, !dbg !1148
  %403 = load i64, i64* %4, align 8, !dbg !1149
  %404 = call i8* @idle_string(i64 %402, i64 %403), !dbg !1150
  %405 = call i32 (i8*, i8*, ...) @sprintf(i8* %401, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i64 0, i64 0), i32 6, i8* %404) #10, !dbg !1151
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %93
  %406 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1154
  %407 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %406, i32 0, i32 5, !dbg !1156
  %408 = getelementptr inbounds [256 x i8], [256 x i8]* %407, i64 0, i64 0, !dbg !1154
  %409 = load i8, i8* %408, align 4, !dbg !1154
  %410 = icmp ne i8 %409, 0, !dbg !1154
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %115
  store i8* null, i8** %13, align 8, !dbg !1165
  call void @llvm.dbg.declare(metadata !4, metadata !1287, metadata !DIExpression()), !dbg !1167
  store i8* null, i8** %14, align 8, !dbg !1167
  %411 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !1168
  %412 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1169
  %413 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %412, i32 0, i32 5, !dbg !1170
  %414 = getelementptr inbounds [256 x i8], [256 x i8]* %413, i64 0, i64 0, !dbg !1169
  %415 = call i8* @stzncpy(i8* %411, i8* %414, i64 256), !dbg !1171
  %416 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !1172
  %417 = call i8* @strchr(i8* %416, i32 58) #13, !dbg !1173
  store i8* %417, i8** %14, align 8, !dbg !1174
  %418 = load i8*, i8** %14, align 8, !dbg !1175
  %419 = icmp ne i8* %418, null, !dbg !1175
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %155
  %420 = load i8*, i8** %13, align 8, !dbg !1191
  %421 = icmp ne i8* %420, null, !dbg !1191
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %176
  %422 = load i8*, i8** %14, align 8, !dbg !1197
  %423 = icmp ne i8* %422, null, !dbg !1197
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %232
  %424 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1249
  %425 = load i8*, i8** %13, align 8, !dbg !1250
  %426 = call i32 (i8*, i8*, ...) @sprintf(i8* %424, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i64 0, i64 0), i8* %425) #10, !dbg !1251
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %252
  %427 = load i8*, i8** %13, align 8, !dbg !1252
  %428 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !1254
  %429 = icmp ne i8* %427, %428, !dbg !1255
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %272
  %430 = load i8*, i8** %13, align 8, !dbg !1257
  call void @free(i8* %430) #10, !dbg !1258
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %291
  %431 = load i64, i64* @print_user.hostlen, align 8, !dbg !1260
  %432 = icmp ult i64 %431, 1, !dbg !1263
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %310
  store i64 1, i64* @print_user.hostlen, align 8, !dbg !1265
  %433 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1267
  call void @free(i8* %433) #10, !dbg !1268
  %434 = load i64, i64* @print_user.hostlen, align 8, !dbg !1269
  %435 = call noalias i8* @xmalloc(i64 %434), !dbg !1270
  store i8* %435, i8** @print_user.hoststr, align 8, !dbg !1271
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %330
  %436 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1273
  store i8 0, i8* %436, align 1, !dbg !1274
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %348
  %437 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1275
  %438 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %437, i32 0, i32 4, !dbg !1275
  %439 = getelementptr inbounds [32 x i8], [32 x i8]* %438, i64 0, i64 0, !dbg !1275
  %440 = load i8, i8* %7, align 1, !dbg !1276
  %441 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1277
  %442 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %441, i32 0, i32 2, !dbg !1278
  %443 = getelementptr inbounds [32 x i8], [32 x i8]* %442, i64 0, i64 0, !dbg !1277
  %444 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1279
  %445 = call i8* @time_string(%struct.utmpx* %444), !dbg !1280
  %446 = getelementptr inbounds [7 x i8], [7 x i8]* %8, i64 0, i64 0, !dbg !1281
  %447 = getelementptr inbounds [12 x i8], [12 x i8]* %11, i64 0, i64 0, !dbg !1282
  %448 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1283
  %449 = icmp ne i8* %448, null, !dbg !1283
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %381
  call void @print_line(i32 32, i8* %359, i8 signext %360, i32 32, i8* %363, i8* %365, i8* %366, i8* %367, i8* %382, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1285
  br label %originalBB50
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_runlevel(%struct.utmpx*) #4 !dbg !133 {
  %2 = alloca %struct.utmpx*, align 8
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  store %struct.utmpx* %0, %struct.utmpx** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %2, metadata !1390, metadata !DIExpression()), !dbg !1391
  call void @llvm.dbg.declare(metadata i8* %3, metadata !1392, metadata !DIExpression()), !dbg !1393
  %5 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1394
  %6 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %5, i32 0, i32 1, !dbg !1394
  %7 = load i32, i32* %6, align 4, !dbg !1394
  %8 = sdiv i32 %7, 256, !dbg !1395
  %9 = trunc i32 %8 to i8, !dbg !1394
  store i8 %9, i8* %3, align 1, !dbg !1393
  call void @llvm.dbg.declare(metadata i8* %4, metadata !1396, metadata !DIExpression()), !dbg !1397
  %10 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1398
  %11 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %10, i32 0, i32 1, !dbg !1398
  %12 = load i32, i32* %11, align 4, !dbg !1398
  %13 = srem i32 %12, 256, !dbg !1399
  %14 = trunc i32 %13 to i8, !dbg !1398
  store i8 %14, i8* %4, align 1, !dbg !1397
  %15 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1400
  %16 = icmp ne i8* %15, null, !dbg !1400
  br i1 %16, label %22, label %17, !dbg !1402

17:                                               ; preds = %1
  %18 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0)) #10, !dbg !1403
  %19 = call i64 @strlen(i8* %18) #13, !dbg !1404
  %20 = add i64 %19, 3, !dbg !1405
  %21 = call noalias i8* @xmalloc(i64 %20), !dbg !1406
  store i8* %21, i8** @print_runlevel.runlevline, align 8, !dbg !1407
  br label %22, !dbg !1408

22:                                               ; preds = %17, %1
  %23 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1409
  %24 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0)) #10, !dbg !1410
  %25 = load i8, i8* %4, align 1, !dbg !1411
  %26 = zext i8 %25 to i32, !dbg !1411
  %27 = call i32 (i8*, i8*, ...) @sprintf(i8* %23, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i64 0, i64 0), i8* %24, i32 %26) #10, !dbg !1412
  %28 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1413
  %29 = icmp ne i8* %28, null, !dbg !1413
  br i1 %29, label %51, label %30, !dbg !1415

30:                                               ; preds = %22
  %31 = load i32, i32* @x.15
  %32 = load i32, i32* @y.16
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %30, %originalBBalteredBB
  %39 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)) #10, !dbg !1416
  %40 = call i64 @strlen(i8* %39) #13, !dbg !1417
  %41 = add i64 %40, 2, !dbg !1418
  %42 = call noalias i8* @xmalloc(i64 %41), !dbg !1419
  store i8* %42, i8** @print_runlevel.comment, align 8, !dbg !1420
  %43 = load i32, i32* @x.15
  %44 = load i32, i32* @y.16
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %51, !dbg !1421

51:                                               ; preds = %originalBBpart2, %22
  %52 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1422
  %53 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)) #10, !dbg !1423
  %54 = load i8, i8* %3, align 1, !dbg !1424
  %55 = zext i8 %54 to i32, !dbg !1424
  %56 = icmp eq i32 %55, 78, !dbg !1425
  br i1 %56, label %57, label %74, !dbg !1426

57:                                               ; preds = %51
  %58 = load i32, i32* @x.15
  %59 = load i32, i32* @y.16
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB2, label %originalBB2alteredBB

originalBB2:                                      ; preds = %57, %originalBB2alteredBB
  %66 = load i32, i32* @x.15
  %67 = load i32, i32* @y.16
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart24, label %originalBB2alteredBB

originalBBpart24:                                 ; preds = %originalBB2
  br label %93, !dbg !1426

74:                                               ; preds = %51
  %75 = load i32, i32* @x.15
  %76 = load i32, i32* @y.16
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %74, %originalBB6alteredBB
  %83 = load i8, i8* %3, align 1, !dbg !1427
  %84 = zext i8 %83 to i32, !dbg !1427
  %85 = load i32, i32* @x.15
  %86 = load i32, i32* @y.16
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %93, !dbg !1426

93:                                               ; preds = %originalBBpart28, %originalBBpart24
  %94 = phi i32 [ 83, %originalBBpart24 ], [ %84, %originalBBpart28 ], !dbg !1426
  %95 = load i32, i32* @x.15
  %96 = load i32, i32* @y.16
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %93, %originalBB10alteredBB
  %103 = call i32 (i8*, i8*, ...) @sprintf(i8* %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i64 0, i64 0), i8* %53, i32 %94) #10, !dbg !1428
  %104 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1429
  %105 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1430
  %106 = call i8* @time_string(%struct.utmpx* %105), !dbg !1431
  %107 = load i8, i8* %3, align 1, !dbg !1432
  %108 = zext i8 %107 to i32, !dbg !1432
  %109 = call zeroext i1 @c_isprint(i32 %108), !dbg !1433
  %110 = load i32, i32* @x.15
  %111 = load i32, i32* @y.16
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %109, label %118, label %120, !dbg !1433

118:                                              ; preds = %originalBBpart212
  %119 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1434
  br label %121, !dbg !1433

120:                                              ; preds = %originalBBpart212
  br label %121, !dbg !1433

121:                                              ; preds = %120, %118
  %122 = phi i8* [ %119, %118 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), %120 ], !dbg !1433
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %104, i8* %106, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %122, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1435
  ret void, !dbg !1436

originalBBalteredBB:                              ; preds = %originalBB, %30
  %123 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)) #10, !dbg !1416
  %124 = call i64 @strlen(i8* %123) #13, !dbg !1417
  %_ = shl i64 %124, 2
  %_1 = shl i64 %124, 2
  %125 = add i64 %124, 2, !dbg !1418
  %126 = call noalias i8* @xmalloc(i64 %125), !dbg !1419
  store i8* %126, i8** @print_runlevel.comment, align 8, !dbg !1420
  br label %originalBB

originalBB2alteredBB:                             ; preds = %originalBB2, %57
  br label %originalBB2

originalBB6alteredBB:                             ; preds = %originalBB6, %74
  %127 = load i8, i8* %3, align 1, !dbg !1427
  %128 = zext i8 %127 to i32, !dbg !1427
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %93
  %129 = call i32 (i8*, i8*, ...) @sprintf(i8* %52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i64 0, i64 0), i8* %53, i32 %94) #10, !dbg !1428
  %130 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1429
  %131 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1430
  %132 = call i8* @time_string(%struct.utmpx* %131), !dbg !1431
  %133 = load i8, i8* %3, align 1, !dbg !1432
  %134 = zext i8 %133 to i32, !dbg !1432
  %135 = call zeroext i1 @c_isprint(i32 %134), !dbg !1433
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_boottime(%struct.utmpx*) #4 !dbg !1437 {
  %2 = alloca %struct.utmpx*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %2, metadata !1438, metadata !DIExpression()), !dbg !1439
  %3 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.88, i64 0, i64 0)) #10, !dbg !1440
  %4 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1441
  %5 = call i8* @time_string(%struct.utmpx* %4), !dbg !1442
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %3, i8* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1443
  ret void, !dbg !1444
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_clockchange(%struct.utmpx*) #4 !dbg !1445 {
  %2 = alloca %struct.utmpx*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %2, metadata !1446, metadata !DIExpression()), !dbg !1447
  %3 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.89, i64 0, i64 0)) #10, !dbg !1448
  %4 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1449
  %5 = call i8* @time_string(%struct.utmpx* %4), !dbg !1450
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %3, i8* %5, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1451
  ret void, !dbg !1452
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_initspawn(%struct.utmpx*) #4 !dbg !1453 {
  %2 = load i32, i32* @x.21
  %3 = load i32, i32* @y.22
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !1454, metadata !DIExpression()), !dbg !1455
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1456, metadata !DIExpression()), !dbg !1457
  %13 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1458
  %14 = call i8* @make_id_equals_comment(%struct.utmpx* %13), !dbg !1459
  store i8* %14, i8** %11, align 8, !dbg !1457
  call void @llvm.dbg.declare(metadata [12 x i8]* %12, metadata !1460, metadata !DIExpression()), !dbg !1461
  %15 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !1461
  %16 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1461
  %17 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %16, i32 0, i32 1, !dbg !1461
  %18 = load i32, i32* %17, align 4, !dbg !1461
  %19 = sext i32 %18 to i64, !dbg !1461
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %19) #10, !dbg !1461
  %21 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1462
  %22 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %21, i32 0, i32 2, !dbg !1463
  %23 = getelementptr inbounds [32 x i8], [32 x i8]* %22, i64 0, i64 0, !dbg !1462
  %24 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1464
  %25 = call i8* @time_string(%struct.utmpx* %24), !dbg !1465
  %26 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !1466
  %27 = load i8*, i8** %11, align 8, !dbg !1467
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 32, i8* %23, i8* %25, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %26, i8* %27, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1468
  %28 = load i8*, i8** %11, align 8, !dbg !1469
  call void @free(i8* %28) #10, !dbg !1470
  %29 = load i32, i32* @x.21
  %30 = load i32, i32* @y.22
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !1471

originalBBalteredBB:                              ; preds = %originalBB, %1
  %37 = alloca %struct.utmpx*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %37, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %37, metadata !1472, metadata !DIExpression()), !dbg !1455
  call void @llvm.dbg.declare(metadata i8** %38, metadata !1574, metadata !DIExpression()), !dbg !1457
  %40 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !1458
  %41 = call i8* @make_id_equals_comment(%struct.utmpx* %40), !dbg !1459
  store i8* %41, i8** %38, align 8, !dbg !1457
  call void @llvm.dbg.declare(metadata [12 x i8]* %39, metadata !1575, metadata !DIExpression()), !dbg !1461
  %42 = getelementptr inbounds [12 x i8], [12 x i8]* %39, i64 0, i64 0, !dbg !1461
  %43 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !1461
  %44 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %43, i32 0, i32 1, !dbg !1461
  %45 = load i32, i32* %44, align 4, !dbg !1461
  %46 = sext i32 %45 to i64, !dbg !1461
  %47 = call i32 (i8*, i8*, ...) @sprintf(i8* %42, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %46) #10, !dbg !1461
  %48 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !1462
  %49 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %48, i32 0, i32 2, !dbg !1463
  %50 = getelementptr inbounds [32 x i8], [32 x i8]* %49, i64 0, i64 0, !dbg !1462
  %51 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !1464
  %52 = call i8* @time_string(%struct.utmpx* %51), !dbg !1465
  %53 = getelementptr inbounds [12 x i8], [12 x i8]* %39, i64 0, i64 0, !dbg !1466
  %54 = load i8*, i8** %38, align 8, !dbg !1467
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 32, i8* %50, i8* %52, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %53, i8* %54, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1468
  %55 = load i8*, i8** %38, align 8, !dbg !1469
  call void @free(i8* %55) #10, !dbg !1470
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_login(%struct.utmpx*) #4 !dbg !1576 {
  %2 = load i32, i32* @x.23
  %3 = load i32, i32* @y.24
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !1577, metadata !DIExpression()), !dbg !1578
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1579, metadata !DIExpression()), !dbg !1580
  %13 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1581
  %14 = call i8* @make_id_equals_comment(%struct.utmpx* %13), !dbg !1582
  store i8* %14, i8** %11, align 8, !dbg !1580
  call void @llvm.dbg.declare(metadata [12 x i8]* %12, metadata !1583, metadata !DIExpression()), !dbg !1584
  %15 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !1584
  %16 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1584
  %17 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %16, i32 0, i32 1, !dbg !1584
  %18 = load i32, i32* %17, align 4, !dbg !1584
  %19 = sext i32 %18 to i64, !dbg !1584
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %19) #10, !dbg !1584
  %21 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.91, i64 0, i64 0)) #10, !dbg !1585
  %22 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1586
  %23 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %22, i32 0, i32 2, !dbg !1587
  %24 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 0, !dbg !1586
  %25 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1588
  %26 = call i8* @time_string(%struct.utmpx* %25), !dbg !1589
  %27 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !1590
  %28 = load i8*, i8** %11, align 8, !dbg !1591
  call void @print_line(i32 -1, i8* %21, i8 signext 32, i32 32, i8* %24, i8* %26, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %27, i8* %28, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1592
  %29 = load i8*, i8** %11, align 8, !dbg !1593
  call void @free(i8* %29) #10, !dbg !1594
  %30 = load i32, i32* @x.23
  %31 = load i32, i32* @y.24
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !1595

originalBBalteredBB:                              ; preds = %originalBB, %1
  %38 = alloca %struct.utmpx*, align 8
  %39 = alloca i8*, align 8
  %40 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %38, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %38, metadata !1596, metadata !DIExpression()), !dbg !1578
  call void @llvm.dbg.declare(metadata i8** %39, metadata !1698, metadata !DIExpression()), !dbg !1580
  %41 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !1581
  %42 = call i8* @make_id_equals_comment(%struct.utmpx* %41), !dbg !1582
  store i8* %42, i8** %39, align 8, !dbg !1580
  call void @llvm.dbg.declare(metadata [12 x i8]* %40, metadata !1699, metadata !DIExpression()), !dbg !1584
  %43 = getelementptr inbounds [12 x i8], [12 x i8]* %40, i64 0, i64 0, !dbg !1584
  %44 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !1584
  %45 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %44, i32 0, i32 1, !dbg !1584
  %46 = load i32, i32* %45, align 4, !dbg !1584
  %47 = sext i32 %46 to i64, !dbg !1584
  %48 = call i32 (i8*, i8*, ...) @sprintf(i8* %43, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %47) #10, !dbg !1584
  %49 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.91, i64 0, i64 0)) #10, !dbg !1585
  %50 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !1586
  %51 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %50, i32 0, i32 2, !dbg !1587
  %52 = getelementptr inbounds [32 x i8], [32 x i8]* %51, i64 0, i64 0, !dbg !1586
  %53 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !1588
  %54 = call i8* @time_string(%struct.utmpx* %53), !dbg !1589
  %55 = getelementptr inbounds [12 x i8], [12 x i8]* %40, i64 0, i64 0, !dbg !1590
  %56 = load i8*, i8** %39, align 8, !dbg !1591
  call void @print_line(i32 -1, i8* %49, i8 signext 32, i32 32, i8* %52, i8* %54, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %55, i8* %56, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1592
  %57 = load i8*, i8** %39, align 8, !dbg !1593
  call void @free(i8* %57) #10, !dbg !1594
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_deadprocs(%struct.utmpx*) #4 !dbg !140 {
  %2 = alloca %struct.utmpx*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %2, metadata !1700, metadata !DIExpression()), !dbg !1701
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1702, metadata !DIExpression()), !dbg !1703
  %5 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1704
  %6 = call i8* @make_id_equals_comment(%struct.utmpx* %5), !dbg !1705
  store i8* %6, i8** %3, align 8, !dbg !1703
  call void @llvm.dbg.declare(metadata [12 x i8]* %4, metadata !1706, metadata !DIExpression()), !dbg !1707
  %7 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 0, !dbg !1707
  %8 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1707
  %9 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %8, i32 0, i32 1, !dbg !1707
  %10 = load i32, i32* %9, align 4, !dbg !1707
  %11 = sext i32 %10 to i64, !dbg !1707
  %12 = call i32 (i8*, i8*, ...) @sprintf(i8* %7, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %11) #10, !dbg !1707
  %13 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !1708
  %14 = icmp ne i8* %13, null, !dbg !1708
  br i1 %14, label %26, label %15, !dbg !1710

15:                                               ; preds = %1
  %16 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i64 0, i64 0)) #10, !dbg !1711
  %17 = call i64 @strlen(i8* %16) #13, !dbg !1712
  %18 = add i64 %17, 6, !dbg !1713
  %19 = add i64 %18, 1, !dbg !1714
  %20 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i64 0, i64 0)) #10, !dbg !1715
  %21 = call i64 @strlen(i8* %20) #13, !dbg !1716
  %22 = add i64 %19, %21, !dbg !1717
  %23 = add i64 %22, 6, !dbg !1718
  %24 = add i64 %23, 1, !dbg !1719
  %25 = call noalias i8* @xmalloc(i64 %24), !dbg !1720
  store i8* %25, i8** @print_deadprocs.exitstr, align 8, !dbg !1721
  br label %26, !dbg !1722

26:                                               ; preds = %15, %1
  %27 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !1723
  %28 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i64 0, i64 0)) #10, !dbg !1724
  %29 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1725
  %30 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %29, i32 0, i32 6, !dbg !1725
  %31 = getelementptr inbounds %struct.__exit_status, %struct.__exit_status* %30, i32 0, i32 0, !dbg !1725
  %32 = load i16, i16* %31, align 4, !dbg !1725
  %33 = sext i16 %32 to i32, !dbg !1725
  %34 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i64 0, i64 0)) #10, !dbg !1726
  %35 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1727
  %36 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %35, i32 0, i32 6, !dbg !1727
  %37 = getelementptr inbounds %struct.__exit_status, %struct.__exit_status* %36, i32 0, i32 1, !dbg !1727
  %38 = load i16, i16* %37, align 2, !dbg !1727
  %39 = sext i16 %38 to i32, !dbg !1727
  %40 = call i32 (i8*, i8*, ...) @sprintf(i8* %27, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94, i64 0, i64 0), i8* %28, i32 %33, i8* %34, i32 %39) #10, !dbg !1728
  %41 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1729
  %42 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %41, i32 0, i32 2, !dbg !1730
  %43 = getelementptr inbounds [32 x i8], [32 x i8]* %42, i64 0, i64 0, !dbg !1729
  %44 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1731
  %45 = call i8* @time_string(%struct.utmpx* %44), !dbg !1732
  %46 = getelementptr inbounds [12 x i8], [12 x i8]* %4, i64 0, i64 0, !dbg !1733
  %47 = load i8*, i8** %3, align 8, !dbg !1734
  %48 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !1735
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 32, i8* %43, i8* %45, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %46, i8* %47, i8* %48), !dbg !1736
  %49 = load i8*, i8** %3, align 8, !dbg !1737
  call void @free(i8* %49) #10, !dbg !1738
  ret void, !dbg !1739
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @make_id_equals_comment(%struct.utmpx*) #4 !dbg !1740 {
  %2 = alloca %struct.utmpx*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %2, metadata !1743, metadata !DIExpression()), !dbg !1744
  call void @llvm.dbg.declare(metadata i64* %3, metadata !1745, metadata !DIExpression()), !dbg !1746
  store i64 4, i64* %3, align 8, !dbg !1746
  call void @llvm.dbg.declare(metadata i8** %4, metadata !1747, metadata !DIExpression()), !dbg !1748
  %5 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i64 0, i64 0)) #10, !dbg !1749
  %6 = call i64 @strlen(i8* %5) #13, !dbg !1750
  %7 = load i64, i64* %3, align 8, !dbg !1751
  %8 = add i64 %6, %7, !dbg !1752
  %9 = add i64 %8, 1, !dbg !1753
  %10 = call noalias i8* @xmalloc(i64 %9), !dbg !1754
  store i8* %10, i8** %4, align 8, !dbg !1748
  %11 = load i8*, i8** %4, align 8, !dbg !1755
  %12 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i64 0, i64 0)) #10, !dbg !1756
  %13 = call i8* @strcpy(i8* %11, i8* %12) #10, !dbg !1757
  %14 = load i8*, i8** %4, align 8, !dbg !1758
  %15 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1759
  %16 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %15, i32 0, i32 3, !dbg !1759
  %17 = getelementptr inbounds [4 x i8], [4 x i8]* %16, i64 0, i64 0, !dbg !1759
  %18 = load i64, i64* %3, align 8, !dbg !1760
  %19 = call i8* @strncat(i8* %14, i8* %17, i64 %18) #10, !dbg !1761
  %20 = load i8*, i8** %4, align 8, !dbg !1762
  ret i8* %20, !dbg !1763
}

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @time_string(%struct.utmpx*) #4 !dbg !125 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.utmpx*, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.tm*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %3, metadata !1764, metadata !DIExpression()), !dbg !1765
  call void @llvm.dbg.declare(metadata i64* %4, metadata !1766, metadata !DIExpression()), !dbg !1767
  %6 = load %struct.utmpx*, %struct.utmpx** %3, align 8, !dbg !1768
  %7 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %6, i32 0, i32 8, !dbg !1768
  %8 = getelementptr inbounds %struct.anon, %struct.anon* %7, i32 0, i32 0, !dbg !1768
  %9 = load i32, i32* %8, align 4, !dbg !1768
  %10 = sext i32 %9 to i64, !dbg !1768
  store i64 %10, i64* %4, align 8, !dbg !1767
  call void @llvm.dbg.declare(metadata %struct.tm** %5, metadata !1769, metadata !DIExpression()), !dbg !1785
  %11 = call %struct.tm* @localtime(i64* %4) #10, !dbg !1786
  store %struct.tm* %11, %struct.tm** %5, align 8, !dbg !1785
  %12 = load %struct.tm*, %struct.tm** %5, align 8, !dbg !1787
  %13 = icmp ne %struct.tm* %12, null, !dbg !1787
  br i1 %13, label %14, label %34, !dbg !1789

14:                                               ; preds = %1
  %15 = load i32, i32* @x.29
  %16 = load i32, i32* @y.30
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %14, %originalBBalteredBB
  %23 = load i8*, i8** @time_format, align 8, !dbg !1790
  %24 = load %struct.tm*, %struct.tm** %5, align 8, !dbg !1792
  %25 = call i64 @strftime(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i64 33, i8* %23, %struct.tm* %24) #10, !dbg !1793
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i8** %2, align 8, !dbg !1794
  %26 = load i32, i32* @x.29
  %27 = load i32, i32* @y.30
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %53, !dbg !1794

34:                                               ; preds = %1
  %35 = load i32, i32* @x.29
  %36 = load i32, i32* @y.30
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %34, %originalBB1alteredBB
  %43 = load i64, i64* %4, align 8, !dbg !1795
  %44 = call i8* @timetostr(i64 %43, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0)), !dbg !1796
  store i8* %44, i8** %2, align 8, !dbg !1797
  %45 = load i32, i32* @x.29
  %46 = load i32, i32* @y.30
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %53, !dbg !1797

53:                                               ; preds = %originalBBpart24, %originalBBpart2
  %54 = load i32, i32* @x.29
  %55 = load i32, i32* @y.30
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i8*, i8** %2, align 8, !dbg !1798
  %63 = load i32, i32* @x.29
  %64 = load i32, i32* @y.30
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %62, !dbg !1798

originalBBalteredBB:                              ; preds = %originalBB, %14
  %71 = load i8*, i8** @time_format, align 8, !dbg !1790
  %72 = load %struct.tm*, %struct.tm** %5, align 8, !dbg !1792
  %73 = call i64 @strftime(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i64 33, i8* %71, %struct.tm* %72) #10, !dbg !1793
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i8** %2, align 8, !dbg !1794
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %34
  %74 = load i64, i64* %4, align 8, !dbg !1795
  %75 = call i8* @timetostr(i64 %74, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0)), !dbg !1796
  store i8* %75, i8** %2, align 8, !dbg !1797
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %76 = load i8*, i8** %2, align 8, !dbg !1798
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_line(i32, i8*, i8 signext, i32, i8*, i8*, i8*, i8*, i8*, i8*) #4 !dbg !56 {
  %11 = load i32, i32* @x.31
  %12 = load i32, i32* @y.32
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %10, %originalBBalteredBB
  %19 = alloca i32, align 4
  %20 = alloca i8*, align 8
  %21 = alloca i8, align 1
  %22 = alloca i32, align 4
  %23 = alloca i8*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i8*, align 8
  %29 = alloca i8*, align 8
  %30 = alloca [8 x i8], align 1
  %31 = alloca [13 x i8], align 1
  %32 = alloca i8*, align 8
  %33 = alloca i32, align 4
  %34 = alloca i8*, align 8
  store i32 %0, i32* %19, align 4
  call void @llvm.dbg.declare(metadata i32* %19, metadata !1799, metadata !DIExpression()), !dbg !1800
  store i8* %1, i8** %20, align 8
  call void @llvm.dbg.declare(metadata i8** %20, metadata !1801, metadata !DIExpression()), !dbg !1802
  store i8 %2, i8* %21, align 1
  call void @llvm.dbg.declare(metadata i8* %21, metadata !1803, metadata !DIExpression()), !dbg !1804
  store i32 %3, i32* %22, align 4
  call void @llvm.dbg.declare(metadata i32* %22, metadata !1805, metadata !DIExpression()), !dbg !1806
  store i8* %4, i8** %23, align 8
  call void @llvm.dbg.declare(metadata i8** %23, metadata !1807, metadata !DIExpression()), !dbg !1808
  store i8* %5, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !1809, metadata !DIExpression()), !dbg !1810
  store i8* %6, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !1811, metadata !DIExpression()), !dbg !1812
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1813, metadata !DIExpression()), !dbg !1814
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1815, metadata !DIExpression()), !dbg !1816
  store i8* %9, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !1817, metadata !DIExpression()), !dbg !1818
  call void @llvm.dbg.declare(metadata i8** %29, metadata !1819, metadata !DIExpression()), !dbg !1820
  call void @llvm.dbg.declare(metadata [8 x i8]* %30, metadata !1821, metadata !DIExpression()), !dbg !1823
  call void @llvm.dbg.declare(metadata [13 x i8]* %31, metadata !1824, metadata !DIExpression()), !dbg !1828
  call void @llvm.dbg.declare(metadata i8** %32, metadata !1829, metadata !DIExpression()), !dbg !1830
  call void @llvm.dbg.declare(metadata i32* %33, metadata !1831, metadata !DIExpression()), !dbg !1832
  %35 = load i8, i8* %21, align 1, !dbg !1833
  store i8 %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 1), align 1, !dbg !1834
  %36 = load i8, i8* @include_idle, align 1, !dbg !1835
  %37 = trunc i8 %36 to i1, !dbg !1835
  %38 = load i32, i32* @x.31
  %39 = load i32, i32* @y.32
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %37, label %46, label %73, !dbg !1837

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.31
  %48 = load i32, i32* @y.32
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %46, %originalBB1alteredBB
  %55 = load i8, i8* @short_output, align 1, !dbg !1838
  %56 = trunc i8 %55 to i1, !dbg !1838
  %57 = load i32, i32* @x.31
  %58 = load i32, i32* @y.32
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %56, label %73, label %65, !dbg !1839

65:                                               ; preds = %originalBBpart24
  %66 = load i8*, i8** %25, align 8, !dbg !1840
  %67 = call i64 @strlen(i8* %66) #13, !dbg !1841
  %68 = icmp ult i64 %67, 7, !dbg !1842
  br i1 %68, label %69, label %73, !dbg !1843

69:                                               ; preds = %65
  %70 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !1844
  %71 = load i8*, i8** %25, align 8, !dbg !1845
  %72 = call i32 (i8*, i8*, ...) @sprintf(i8* %70, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i64 0, i64 0), i8* %71) #10, !dbg !1846
  br label %75, !dbg !1846

73:                                               ; preds = %65, %originalBBpart24, %originalBBpart2
  %74 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !1847
  store i8 0, i8* %74, align 1, !dbg !1848
  br label %75

75:                                               ; preds = %73, %69
  %76 = load i8, i8* @short_output, align 1, !dbg !1849
  %77 = trunc i8 %76 to i1, !dbg !1849
  br i1 %77, label %86, label %78, !dbg !1851

78:                                               ; preds = %75
  %79 = load i8*, i8** %26, align 8, !dbg !1852
  %80 = call i64 @strlen(i8* %79) #13, !dbg !1853
  %81 = icmp ult i64 %80, 12, !dbg !1854
  br i1 %81, label %82, label %86, !dbg !1855

82:                                               ; preds = %78
  %83 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !1856
  %84 = load i8*, i8** %26, align 8, !dbg !1857
  %85 = call i32 (i8*, i8*, ...) @sprintf(i8* %83, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i64 0, i64 0), i8* %84) #10, !dbg !1858
  br label %88, !dbg !1858

86:                                               ; preds = %78, %75
  %87 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !1859
  store i8 0, i8* %87, align 1, !dbg !1860
  br label %88

88:                                               ; preds = %86, %82
  %89 = load i32, i32* @x.31
  %90 = load i32, i32* @y.32
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %88, %originalBB6alteredBB
  %97 = load i8, i8* @include_exit, align 1, !dbg !1861
  %98 = trunc i8 %97 to i1, !dbg !1861
  %99 = load i32, i32* @x.31
  %100 = load i32, i32* @y.32
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %98, label %107, label %135, !dbg !1861

107:                                              ; preds = %originalBBpart28
  %108 = load i32, i32* @x.31
  %109 = load i32, i32* @y.32
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %107, %originalBB10alteredBB
  %116 = load i8*, i8** %28, align 8, !dbg !1862
  %117 = call i64 @strlen(i8* %116) #13, !dbg !1862
  %118 = icmp ugt i64 12, %117, !dbg !1862
  %119 = load i32, i32* @x.31
  %120 = load i32, i32* @y.32
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %118, label %127, label %128, !dbg !1862

127:                                              ; preds = %originalBBpart212
  br label %131, !dbg !1862

128:                                              ; preds = %originalBBpart212
  %129 = load i8*, i8** %28, align 8, !dbg !1862
  %130 = call i64 @strlen(i8* %129) #13, !dbg !1862
  br label %131, !dbg !1862

131:                                              ; preds = %128, %127
  %132 = phi i64 [ 12, %127 ], [ %130, %128 ], !dbg !1862
  %133 = add i64 1, %132, !dbg !1863
  %134 = add i64 %133, 1, !dbg !1864
  br label %136, !dbg !1861

135:                                              ; preds = %originalBBpart28
  br label %136, !dbg !1861

136:                                              ; preds = %135, %131
  %137 = phi i64 [ %134, %131 ], [ 1, %135 ], !dbg !1861
  %138 = call noalias i8* @xmalloc(i64 %137), !dbg !1865
  store i8* %138, i8** %32, align 8, !dbg !1866
  %139 = load i8, i8* @include_exit, align 1, !dbg !1867
  %140 = trunc i8 %139 to i1, !dbg !1867
  br i1 %140, label %141, label %145, !dbg !1869

141:                                              ; preds = %136
  %142 = load i8*, i8** %32, align 8, !dbg !1870
  %143 = load i8*, i8** %28, align 8, !dbg !1871
  %144 = call i32 (i8*, i8*, ...) @sprintf(i8* %142, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i64 0, i64 0), i8* %143) #10, !dbg !1872
  br label %163, !dbg !1872

145:                                              ; preds = %136
  %146 = load i32, i32* @x.31
  %147 = load i32, i32* @y.32
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %145, %originalBB14alteredBB
  %154 = load i8*, i8** %32, align 8, !dbg !1873
  store i8 0, i8* %154, align 1, !dbg !1874
  %155 = load i32, i32* @x.31
  %156 = load i32, i32* @y.32
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %163

163:                                              ; preds = %originalBBpart216, %141
  %164 = load i32, i32* @x.31
  %165 = load i32, i32* @y.32
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %163, %originalBB18alteredBB
  %172 = load i32, i32* %19, align 4, !dbg !1875
  %173 = load i8*, i8** %20, align 8, !dbg !1876
  %174 = icmp ne i8* %173, null, !dbg !1876
  %175 = load i32, i32* @x.31
  %176 = load i32, i32* @y.32
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %174, label %183, label %185, !dbg !1876

183:                                              ; preds = %originalBBpart220
  %184 = load i8*, i8** %20, align 8, !dbg !1877
  br label %202, !dbg !1876

185:                                              ; preds = %originalBBpart220
  %186 = load i32, i32* @x.31
  %187 = load i32, i32* @y.32
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %185, %originalBB22alteredBB
  %194 = load i32, i32* @x.31
  %195 = load i32, i32* @y.32
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %202, !dbg !1876

202:                                              ; preds = %originalBBpart224, %183
  %203 = phi i8* [ %184, %183 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73, i64 0, i64 0), %originalBBpart224 ], !dbg !1876
  %204 = load i8, i8* @include_mesg, align 1, !dbg !1878
  %205 = trunc i8 %204 to i1, !dbg !1878
  %206 = zext i1 %205 to i64, !dbg !1878
  %207 = select i1 %205, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !1878
  %208 = load i32, i32* %22, align 4, !dbg !1879
  %209 = load i8*, i8** %23, align 8, !dbg !1880
  %210 = load i32, i32* @time_format_width, align 4, !dbg !1881
  %211 = load i8*, i8** %24, align 8, !dbg !1882
  %212 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !1883
  %213 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !1884
  %214 = load i8*, i8** %27, align 8, !dbg !1885
  %215 = load i8*, i8** %32, align 8, !dbg !1886
  %216 = call i32 (i8**, i8*, ...) @asprintf(i8** %29, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.72, i64 0, i64 0), i32 %172, i8* %203, i8* %207, i32 %208, i8* %209, i32 %210, i8* %211, i8* %212, i8* %213, i8* %214, i8* %215) #10, !dbg !1887
  store i32 %216, i32* %33, align 4, !dbg !1888
  %217 = load i32, i32* %33, align 4, !dbg !1889
  br label %218, !dbg !1891

218:                                              ; preds = %202
  %219 = load i32, i32* @x.31
  %220 = load i32, i32* @y.32
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %218, %originalBB26alteredBB
  %collatzVar = alloca i32
  %227 = load i32, i32* @x.31
  %228 = load i32, i32* @y.32
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %235

235:                                              ; preds = %originalBBpart228
  %236 = load i32, i32* @inVal0
  %237 = icmp sgt i32 %236, 1
  br i1 %237, label %239, label %238

238:                                              ; preds = %235
  store i32 21, i32* %collatzVar
  br label %239

239:                                              ; preds = %238, %235
  %240 = load i8**, i8*** @inVal1
  %241 = getelementptr inbounds i8*, i8** %240, i64 1
  %242 = load i8*, i8** %241
  %controle = call i32 @controle(i8* %242, i32 -1)
  store i32 %controle, i32* %collatzVar
  br label %243

243:                                              ; preds = %293, %289, %239
  %244 = load i32, i32* @x.31
  %245 = load i32, i32* @y.32
  %246 = sub i32 %244, 1
  %247 = mul i32 %244, %246
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %249, %250
  br i1 %251, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %243, %originalBB30alteredBB
  %252 = load i32, i32* %collatzVar
  %253 = icmp sgt i32 %252, 1
  %254 = load i32, i32* @x.31
  %255 = load i32, i32* @y.32
  %256 = sub i32 %254, 1
  %257 = mul i32 %254, %256
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %259, %260
  br i1 %261, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %253, label %262, label %298

262:                                              ; preds = %originalBBpart232
  %263 = load i32, i32* %collatzVar
  %264 = srem i32 %263, 2
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %285

266:                                              ; preds = %262
  %267 = load i32, i32* @x.31
  %268 = load i32, i32* @y.32
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %266, %originalBB34alteredBB
  %275 = load i32, i32* %collatzVar
  %276 = sdiv i32 %275, 2
  store i32 %276, i32* %collatzVar
  %277 = load i32, i32* @x.31
  %278 = load i32, i32* @y.32
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBBpart245, label %originalBB34alteredBB

originalBBpart245:                                ; preds = %originalBB34
  br label %289

285:                                              ; preds = %262
  %286 = load i32, i32* %collatzVar
  %287 = mul i32 %286, 3
  %288 = add i32 %287, 1
  store i32 %288, i32* %collatzVar
  br label %289

289:                                              ; preds = %285, %originalBBpart245
  %290 = load i32, i32* %collatzVar
  %291 = sub i32 %217, %290
  %292 = icmp sgt i32 %291, -3
  br i1 %292, label %293, label %243

293:                                              ; preds = %289
  %294 = load i32, i32* %collatzVar
  %295 = add i32 %217, %294
  %296 = icmp slt i32 %295, 1
  br i1 %296, label %297, label %243

297:                                              ; preds = %293
  call void @xalloc_die() #14, !dbg !1892
  unreachable, !dbg !1892

298:                                              ; preds = %originalBBpart232
  call void @llvm.dbg.declare(metadata i8** %34, metadata !1893, metadata !DIExpression()), !dbg !1895
  %299 = load i8*, i8** %29, align 8, !dbg !1896
  %300 = load i8*, i8** %29, align 8, !dbg !1897
  %301 = call i64 @strlen(i8* %300) #13, !dbg !1898
  %302 = getelementptr inbounds i8, i8* %299, i64 %301, !dbg !1899
  store i8* %302, i8** %34, align 8, !dbg !1895
  br label %303, !dbg !1900

303:                                              ; preds = %309, %298
  %304 = load i8*, i8** %34, align 8, !dbg !1901
  %305 = getelementptr inbounds i8, i8* %304, i32 -1, !dbg !1901
  store i8* %305, i8** %34, align 8, !dbg !1901
  %306 = load i8, i8* %305, align 1, !dbg !1902
  %307 = sext i8 %306 to i32, !dbg !1902
  %308 = icmp eq i32 %307, 32, !dbg !1903
  br i1 %308, label %309, label %310, !dbg !1900

309:                                              ; preds = %303
  br label %303, !dbg !1900, !llvm.loop !1904

310:                                              ; preds = %303
  %311 = load i8*, i8** %34, align 8, !dbg !1906
  %312 = getelementptr inbounds i8, i8* %311, i64 1, !dbg !1907
  store i8 0, i8* %312, align 1, !dbg !1908
  %313 = load i8*, i8** %29, align 8, !dbg !1909
  %314 = call i32 @puts(i8* %313), !dbg !1910
  %315 = load i8*, i8** %29, align 8, !dbg !1911
  call void @free(i8* %315) #10, !dbg !1912
  %316 = load i8*, i8** %32, align 8, !dbg !1913
  call void @free(i8* %316) #10, !dbg !1914
  ret void, !dbg !1915

originalBBalteredBB:                              ; preds = %originalBB, %10
  %317 = alloca i32, align 4
  %318 = alloca i8*, align 8
  %319 = alloca i8, align 1
  %320 = alloca i32, align 4
  %321 = alloca i8*, align 8
  %322 = alloca i8*, align 8
  %323 = alloca i8*, align 8
  %324 = alloca i8*, align 8
  %325 = alloca i8*, align 8
  %326 = alloca i8*, align 8
  %327 = alloca i8*, align 8
  %328 = alloca [8 x i8], align 1
  %329 = alloca [13 x i8], align 1
  %330 = alloca i8*, align 8
  %331 = alloca i32, align 4
  %332 = alloca i8*, align 8
  store i32 %0, i32* %317, align 4
  call void @llvm.dbg.declare(metadata i32* %317, metadata !1916, metadata !DIExpression()), !dbg !1800
  store i8* %1, i8** %318, align 8
  call void @llvm.dbg.declare(metadata i8** %318, metadata !2017, metadata !DIExpression()), !dbg !1802
  store i8 %2, i8* %319, align 1
  call void @llvm.dbg.declare(metadata i8* %319, metadata !2018, metadata !DIExpression()), !dbg !1804
  store i32 %3, i32* %320, align 4
  call void @llvm.dbg.declare(metadata i32* %320, metadata !2019, metadata !DIExpression()), !dbg !1806
  store i8* %4, i8** %321, align 8
  call void @llvm.dbg.declare(metadata i8** %321, metadata !2020, metadata !DIExpression()), !dbg !1808
  store i8* %5, i8** %322, align 8
  call void @llvm.dbg.declare(metadata i8** %322, metadata !2021, metadata !DIExpression()), !dbg !1810
  store i8* %6, i8** %323, align 8
  call void @llvm.dbg.declare(metadata i8** %323, metadata !2022, metadata !DIExpression()), !dbg !1812
  store i8* %7, i8** %324, align 8
  call void @llvm.dbg.declare(metadata i8** %324, metadata !2023, metadata !DIExpression()), !dbg !1814
  store i8* %8, i8** %325, align 8
  call void @llvm.dbg.declare(metadata i8** %325, metadata !2024, metadata !DIExpression()), !dbg !1816
  store i8* %9, i8** %326, align 8
  call void @llvm.dbg.declare(metadata i8** %326, metadata !2025, metadata !DIExpression()), !dbg !1818
  call void @llvm.dbg.declare(metadata i8** %327, metadata !2026, metadata !DIExpression()), !dbg !1820
  call void @llvm.dbg.declare(metadata [8 x i8]* %328, metadata !2027, metadata !DIExpression()), !dbg !1823
  call void @llvm.dbg.declare(metadata [13 x i8]* %329, metadata !2028, metadata !DIExpression()), !dbg !1828
  call void @llvm.dbg.declare(metadata i8** %330, metadata !2029, metadata !DIExpression()), !dbg !1830
  call void @llvm.dbg.declare(metadata i32* %331, metadata !2030, metadata !DIExpression()), !dbg !1832
  %333 = load i8, i8* %319, align 1, !dbg !1833
  store i8 %333, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 1), align 1, !dbg !1834
  %334 = load i8, i8* @include_idle, align 1, !dbg !1835
  %335 = trunc i8 %334 to i1, !dbg !1835
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %46
  %336 = load i8, i8* @short_output, align 1, !dbg !1838
  %337 = trunc i8 %336 to i1, !dbg !1838
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %88
  %338 = load i8, i8* @include_exit, align 1, !dbg !1861
  %339 = trunc i8 %338 to i1, !dbg !1861
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %107
  %340 = load i8*, i8** %28, align 8, !dbg !1862
  %341 = call i64 @strlen(i8* %340) #13, !dbg !1862
  %342 = icmp ugt i64 12, %341, !dbg !1862
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %145
  %343 = load i8*, i8** %32, align 8, !dbg !1873
  store i8 0, i8* %343, align 1, !dbg !1874
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %163
  %344 = load i32, i32* %19, align 4, !dbg !1875
  %345 = load i8*, i8** %20, align 8, !dbg !1876
  %346 = icmp ne i8* %345, null, !dbg !1876
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %185
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %218
  %collatzVaralteredBB = alloca i32
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %243
  %347 = load i32, i32* %collatzVar
  %348 = icmp sgt i32 %347, 1
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %266
  %349 = load i32, i32* %collatzVar
  %_ = shl i32 %349, 2
  %_35 = shl i32 %349, 2
  %_36 = sub i32 %349, 2
  %gen = mul i32 %_36, 2
  %_37 = sub i32 0, %349
  %gen38 = add i32 %_37, 2
  %_39 = sub i32 %349, 2
  %gen40 = mul i32 %_39, 2
  %_41 = shl i32 %349, 2
  %_42 = sub i32 0, %349
  %gen43 = add i32 %_42, 2
  %350 = sdiv i32 %349, 2
  store i32 %350, i32* %collatzVar
  br label %originalBB34
}

; Function Attrs: nounwind
declare dso_local i32 @asprintf(i8**, i8*, ...) #2

declare dso_local i32 @puts(i8*) #3

; Function Attrs: nounwind
declare dso_local %struct.tm* @localtime(i64*) #2

; Function Attrs: nounwind
declare dso_local i64 @strftime(i8*, i64, i8*, %struct.tm*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @timetostr(i64, i8*) #4 !dbg !2031 {
  %3 = load i32, i32* @x.33
  %4 = load i32, i32* @y.34
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !2034, metadata !DIExpression()), !dbg !2035
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2036, metadata !DIExpression()), !dbg !2037
  %13 = load i64, i64* %11, align 8, !dbg !2038
  %14 = load i8*, i8** %12, align 8, !dbg !2039
  %15 = call i8* @imaxtostr(i64 %13, i8* %14), !dbg !2040
  %16 = load i32, i32* @x.33
  %17 = load i32, i32* @y.34
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2041

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i64, align 8
  %25 = alloca i8*, align 8
  store i64 %0, i64* %24, align 8
  call void @llvm.dbg.declare(metadata i64* %24, metadata !2042, metadata !DIExpression()), !dbg !2035
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !2144, metadata !DIExpression()), !dbg !2037
  %26 = load i64, i64* %24, align 8, !dbg !2038
  %27 = load i8*, i8** %25, align 8, !dbg !2039
  %28 = call i8* @imaxtostr(i64 %26, i8* %27), !dbg !2040
  br label %originalBB
}

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @strncat(i8*, i8*, i64) #2

; Function Attrs: nounwind
declare dso_local i8* @stpcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @stzncpy(i8* noalias, i8* noalias, i64) #4 !dbg !2145 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2150, metadata !DIExpression()), !dbg !2151
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !2152, metadata !DIExpression()), !dbg !2153
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !2154, metadata !DIExpression()), !dbg !2155
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2156, metadata !DIExpression()), !dbg !2157
  %8 = load i8*, i8** %5, align 8, !dbg !2158
  %9 = load i64, i64* %6, align 8, !dbg !2159
  %10 = getelementptr inbounds i8, i8* %8, i64 %9, !dbg !2160
  store i8* %10, i8** %7, align 8, !dbg !2157
  br label %11, !dbg !2161

11:                                               ; preds = %70, %3
  %12 = load i32, i32* @x.35
  %13 = load i32, i32* @y.36
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %11, %originalBBalteredBB
  %20 = load i8*, i8** %5, align 8, !dbg !2162
  %21 = load i8*, i8** %7, align 8, !dbg !2163
  %22 = icmp ult i8* %20, %21, !dbg !2164
  %23 = load i32, i32* @x.35
  %24 = load i32, i32* @y.36
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %52, !dbg !2165

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.35
  %33 = load i32, i32* @y.36
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load i8*, i8** %5, align 8, !dbg !2166
  %41 = load i8, i8* %40, align 1, !dbg !2167
  %42 = sext i8 %41 to i32, !dbg !2167
  %43 = icmp ne i32 %42, 0, !dbg !2165
  %44 = load i32, i32* @x.35
  %45 = load i32, i32* @y.36
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %52

52:                                               ; preds = %originalBBpart24, %originalBBpart2
  %53 = phi i1 [ false, %originalBBpart2 ], [ %43, %originalBBpart24 ], !dbg !2168
  %54 = load i32, i32* @x.35
  %55 = load i32, i32* @y.36
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  %62 = load i32, i32* @x.35
  %63 = load i32, i32* @y.36
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %70, label %76, !dbg !2161

70:                                               ; preds = %originalBBpart28
  %71 = load i8*, i8** %5, align 8, !dbg !2169
  %72 = getelementptr inbounds i8, i8* %71, i32 1, !dbg !2169
  store i8* %72, i8** %5, align 8, !dbg !2169
  %73 = load i8, i8* %71, align 1, !dbg !2170
  %74 = load i8*, i8** %4, align 8, !dbg !2171
  %75 = getelementptr inbounds i8, i8* %74, i32 1, !dbg !2171
  store i8* %75, i8** %4, align 8, !dbg !2171
  store i8 %73, i8* %74, align 1, !dbg !2172
  br label %11, !dbg !2161, !llvm.loop !2173

76:                                               ; preds = %originalBBpart28
  %77 = load i32, i32* @x.35
  %78 = load i32, i32* @y.36
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %76, %originalBB10alteredBB
  %85 = load i8*, i8** %4, align 8, !dbg !2174
  store i8 0, i8* %85, align 1, !dbg !2175
  %86 = load i8*, i8** %4, align 8, !dbg !2176
  %87 = load i32, i32* @x.35
  %88 = load i32, i32* @y.36
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %86, !dbg !2177

originalBBalteredBB:                              ; preds = %originalBB, %11
  %95 = load i8*, i8** %5, align 8, !dbg !2162
  %96 = load i8*, i8** %7, align 8, !dbg !2163
  %97 = icmp ult i8* %95, %96, !dbg !2164
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %98 = load i8*, i8** %5, align 8, !dbg !2166
  %99 = load i8, i8* %98, align 1, !dbg !2167
  %100 = sext i8 %99 to i32, !dbg !2167
  %101 = icmp ne i32 %100, 0, !dbg !2165
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %76
  %102 = load i8*, i8** %4, align 8, !dbg !2174
  store i8 0, i8* %102, align 1, !dbg !2175
  %103 = load i8*, i8** %4, align 8, !dbg !2176
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_tty_writable(%struct.stat*) #4 !dbg !2178 {
  %2 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %2, metadata !2183, metadata !DIExpression()), !dbg !2184
  %3 = load %struct.stat*, %struct.stat** %2, align 8, !dbg !2185
  %4 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 3, !dbg !2186
  %5 = load i32, i32* %4, align 8, !dbg !2186
  %6 = and i32 %5, 16, !dbg !2187
  %7 = icmp ne i32 %6, 0, !dbg !2185
  ret i1 %7, !dbg !2188
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @idle_string(i64, i64) #4 !dbg !115 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  store i64 %0, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !2189, metadata !DIExpression()), !dbg !2190
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !2191, metadata !DIExpression()), !dbg !2192
  %7 = load i64, i64* @idle_string.now, align 8, !dbg !2193
  %8 = icmp eq i64 %7, -9223372036854775808, !dbg !2195
  br i1 %8, label %9, label %27, !dbg !2196

9:                                                ; preds = %2
  %10 = load i32, i32* @x.39
  %11 = load i32, i32* @y.40
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = call i64 @time(i64* @idle_string.now) #10, !dbg !2197
  %19 = load i32, i32* @x.39
  %20 = load i32, i32* @y.40
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %27, !dbg !2197

27:                                               ; preds = %originalBBpart2, %2
  %28 = load i64, i64* %5, align 8, !dbg !2198
  %29 = load i64, i64* %4, align 8, !dbg !2200
  %30 = icmp slt i64 %28, %29, !dbg !2201
  br i1 %30, label %31, label %157, !dbg !2202

31:                                               ; preds = %27
  %32 = load i64, i64* @idle_string.now, align 8, !dbg !2203
  %33 = sub nsw i64 %32, 86400, !dbg !2204
  %34 = load i64, i64* %4, align 8, !dbg !2205
  %35 = icmp slt i64 %33, %34, !dbg !2206
  br i1 %35, label %36, label %157, !dbg !2207

36:                                               ; preds = %31
  %37 = load i32, i32* @x.39
  %38 = load i32, i32* @y.40
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = load i64, i64* %4, align 8, !dbg !2208
  %46 = load i64, i64* @idle_string.now, align 8, !dbg !2209
  %47 = icmp sle i64 %45, %46, !dbg !2210
  %48 = load i32, i32* @x.39
  %49 = load i32, i32* @y.40
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %157, !dbg !2211

56:                                               ; preds = %originalBBpart24
  call void @llvm.dbg.declare(metadata i32* %6, metadata !2212, metadata !DIExpression()), !dbg !2214
  %57 = load i64, i64* @idle_string.now, align 8, !dbg !2215
  %58 = load i64, i64* %4, align 8, !dbg !2216
  %59 = sub nsw i64 %57, %58, !dbg !2217
  %60 = trunc i64 %59 to i32, !dbg !2215
  store i32 %60, i32* %6, align 4, !dbg !2214
  %61 = load i32, i32* %6, align 4, !dbg !2218
  %62 = icmp slt i32 %61, 60, !dbg !2220
  br i1 %62, label %63, label %80, !dbg !2221

63:                                               ; preds = %56
  %64 = load i32, i32* @x.39
  %65 = load i32, i32* @y.40
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i64 0, i64 0), i8** %3, align 8, !dbg !2222
  %72 = load i32, i32* @x.39
  %73 = load i32, i32* @y.40
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %175, !dbg !2222

80:                                               ; preds = %56
  %81 = load i32, i32* @x.39
  %82 = load i32, i32* @y.40
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %89 = load i32, i32* %6, align 4, !dbg !2223
  %90 = sdiv i32 %89, 3600, !dbg !2223
  %91 = icmp slt i32 %90, 24, !dbg !2223
  %92 = load i32, i32* @x.39
  %93 = load i32, i32* @y.40
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart217, label %originalBB10alteredBB

originalBBpart217:                                ; preds = %originalBB10
  br i1 %91, label %100, label %117, !dbg !2227

100:                                              ; preds = %originalBBpart217
  %101 = load i32, i32* @x.39
  %102 = load i32, i32* @y.40
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %100, %originalBB19alteredBB
  %109 = load i32, i32* @x.39
  %110 = load i32, i32* @y.40
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %134, !dbg !2227

117:                                              ; preds = %originalBBpart217
  %118 = load i32, i32* @x.39
  %119 = load i32, i32* @y.40
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %117, %originalBB23alteredBB
  call void @__assert_fail(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81, i64 0, i64 0), i32 205, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.idle_string, i64 0, i64 0)) #12, !dbg !2223
  %126 = load i32, i32* @x.39
  %127 = load i32, i32* @y.40
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  unreachable, !dbg !2223

134:                                              ; preds = %originalBBpart221
  %135 = load i32, i32* @x.39
  %136 = load i32, i32* @y.40
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %134, %originalBB27alteredBB
  %143 = load i32, i32* %6, align 4, !dbg !2228
  %144 = sdiv i32 %143, 3600, !dbg !2229
  %145 = load i32, i32* %6, align 4, !dbg !2230
  %146 = srem i32 %145, 3600, !dbg !2231
  %147 = sdiv i32 %146, 60, !dbg !2232
  %148 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i64 0, i64 0), i32 %144, i32 %147) #10, !dbg !2233
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8** %3, align 8, !dbg !2234
  %149 = load i32, i32* @x.39
  %150 = load i32, i32* @y.40
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart240, label %originalBB27alteredBB

originalBBpart240:                                ; preds = %originalBB27
  br label %175, !dbg !2234

157:                                              ; preds = %originalBBpart24, %31, %27
  %158 = load i32, i32* @x.39
  %159 = load i32, i32* @y.40
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %157, %originalBB42alteredBB
  %166 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83, i64 0, i64 0)) #10, !dbg !2235
  store i8* %166, i8** %3, align 8, !dbg !2236
  %167 = load i32, i32* @x.39
  %168 = load i32, i32* @y.40
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %175, !dbg !2236

175:                                              ; preds = %originalBBpart244, %originalBBpart240, %originalBBpart28
  %176 = load i32, i32* @x.39
  %177 = load i32, i32* @y.40
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %175, %originalBB46alteredBB
  %184 = load i8*, i8** %3, align 8, !dbg !2237
  %185 = load i32, i32* @x.39
  %186 = load i32, i32* @y.40
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  ret i8* %184, !dbg !2237

originalBBalteredBB:                              ; preds = %originalBB, %9
  %193 = call i64 @time(i64* @idle_string.now) #10, !dbg !2197
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %194 = load i64, i64* %4, align 8, !dbg !2208
  %195 = load i64, i64* @idle_string.now, align 8, !dbg !2209
  %196 = icmp sle i64 %194, %195, !dbg !2210
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i64 0, i64 0), i8** %3, align 8, !dbg !2222
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  %197 = load i32, i32* %6, align 4, !dbg !2223
  %_ = sub i32 %197, 3600
  %gen = mul i32 %_, 3600
  %_11 = sub i32 %197, 3600
  %gen12 = mul i32 %_11, 3600
  %_13 = sub i32 %197, 3600
  %gen14 = mul i32 %_13, 3600
  %_15 = shl i32 %197, 3600
  %198 = sdiv i32 %197, 3600, !dbg !2223
  %199 = icmp slt i32 %198, 24, !dbg !2223
  br label %originalBB10

originalBB19alteredBB:                            ; preds = %originalBB19, %100
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %117
  call void @__assert_fail(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81, i64 0, i64 0), i32 205, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.idle_string, i64 0, i64 0)) #12, !dbg !2223
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %134
  %200 = load i32, i32* %6, align 4, !dbg !2228
  %201 = sdiv i32 %200, 3600, !dbg !2229
  %202 = load i32, i32* %6, align 4, !dbg !2230
  %203 = srem i32 %202, 3600, !dbg !2231
  %_28 = shl i32 %203, 60
  %_29 = sub i32 0, %203
  %gen30 = add i32 %_29, 60
  %_31 = sub i32 0, %203
  %gen32 = add i32 %_31, 60
  %_33 = sub i32 0, %203
  %gen34 = add i32 %_33, 60
  %_35 = sub i32 0, %203
  %gen36 = add i32 %_35, 60
  %_37 = shl i32 %203, 60
  %_38 = shl i32 %203, 60
  %204 = sdiv i32 %203, 60, !dbg !2232
  %205 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i64 0, i64 0), i32 %201, i32 %204) #10, !dbg !2233
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8** %3, align 8, !dbg !2234
  br label %originalBB27

originalBB42alteredBB:                            ; preds = %originalBB42, %157
  %206 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83, i64 0, i64 0)) #10, !dbg !2235
  store i8* %206, i8** %3, align 8, !dbg !2236
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %175
  %207 = load i8*, i8** %3, align 8, !dbg !2237
  br label %originalBB46
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #7

; Function Attrs: nounwind
declare dso_local i64 @time(i64*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @c_isprint(i32) #4 !dbg !2238 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !2242, metadata !DIExpression()), !dbg !2243
  %4 = load i32, i32* %3, align 4, !dbg !2244
  switch i32 %4, label %22 [
    i32 32, label %5
    i32 48, label %5
    i32 49, label %5
    i32 50, label %5
    i32 51, label %5
    i32 52, label %5
    i32 53, label %5
    i32 54, label %5
    i32 55, label %5
    i32 56, label %5
    i32 57, label %5
    i32 97, label %5
    i32 98, label %5
    i32 99, label %5
    i32 100, label %5
    i32 101, label %5
    i32 102, label %5
    i32 103, label %5
    i32 104, label %5
    i32 105, label %5
    i32 106, label %5
    i32 107, label %5
    i32 108, label %5
    i32 109, label %5
    i32 110, label %5
    i32 111, label %5
    i32 112, label %5
    i32 113, label %5
    i32 114, label %5
    i32 115, label %5
    i32 116, label %5
    i32 117, label %5
    i32 118, label %5
    i32 119, label %5
    i32 120, label %5
    i32 121, label %5
    i32 122, label %5
    i32 33, label %5
    i32 34, label %5
    i32 35, label %5
    i32 36, label %5
    i32 37, label %5
    i32 38, label %5
    i32 39, label %5
    i32 40, label %5
    i32 41, label %5
    i32 42, label %5
    i32 43, label %5
    i32 44, label %5
    i32 45, label %5
    i32 46, label %5
    i32 47, label %5
    i32 58, label %5
    i32 59, label %5
    i32 60, label %5
    i32 61, label %5
    i32 62, label %5
    i32 63, label %5
    i32 64, label %5
    i32 91, label %5
    i32 92, label %5
    i32 93, label %5
    i32 94, label %5
    i32 95, label %5
    i32 96, label %5
    i32 123, label %5
    i32 124, label %5
    i32 125, label %5
    i32 126, label %5
    i32 65, label %5
    i32 66, label %5
    i32 67, label %5
    i32 68, label %5
    i32 69, label %5
    i32 70, label %5
    i32 71, label %5
    i32 72, label %5
    i32 73, label %5
    i32 74, label %5
    i32 75, label %5
    i32 76, label %5
    i32 77, label %5
    i32 78, label %5
    i32 79, label %5
    i32 80, label %5
    i32 81, label %5
    i32 82, label %5
    i32 83, label %5
    i32 84, label %5
    i32 85, label %5
    i32 86, label %5
    i32 87, label %5
    i32 88, label %5
    i32 89, label %5
    i32 90, label %5
  ], !dbg !2245

5:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  %6 = load i32, i32* @x.41
  %7 = load i32, i32* @y.42
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  store i1 true, i1* %2, align 1, !dbg !2246
  %14 = load i32, i32* @x.41
  %15 = load i32, i32* @y.42
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %23, !dbg !2246

22:                                               ; preds = %1
  store i1 false, i1* %2, align 1, !dbg !2248
  br label %23, !dbg !2248

23:                                               ; preds = %22, %originalBBpart2
  %24 = load i1, i1* %2, align 1, !dbg !2249
  ret i1 %24, !dbg !2249

originalBBalteredBB:                              ; preds = %originalBB, %5
  store i1 true, i1* %2, align 1, !dbg !2246
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !2250 {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2253, metadata !DIExpression()), !dbg !2254
  %12 = load i32, i32* %11, align 4, !dbg !2255
  %13 = load i32, i32* @x.43
  %14 = load i32, i32* @y.44
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %25 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !2256

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* %11, align 4, !dbg !2257
  %23 = sub nsw i32 %22, 65, !dbg !2259
  %24 = add nsw i32 %23, 97, !dbg !2260
  store i32 %24, i32* %10, align 4, !dbg !2261
  br label %27, !dbg !2261

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* %11, align 4, !dbg !2262
  store i32 %26, i32* %10, align 4, !dbg !2263
  br label %27, !dbg !2263

27:                                               ; preds = %25, %21
  %28 = load i32, i32* @x.43
  %29 = load i32, i32* @y.44
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* %10, align 4, !dbg !2264
  %37 = load i32, i32* @x.43
  %38 = load i32, i32* @y.44
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i32 %36, !dbg !2264

originalBBalteredBB:                              ; preds = %originalBB, %1
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  store i32 %0, i32* %46, align 4
  call void @llvm.dbg.declare(metadata i32* %46, metadata !2265, metadata !DIExpression()), !dbg !2254
  %47 = load i32, i32* %46, align 4, !dbg !2255
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %48 = load i32, i32* %10, align 4, !dbg !2264
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @canon_host(i8*) #4 !dbg !2268 {
  %2 = load i32, i32* @x.45
  %3 = load i32, i32* @y.46
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2271, metadata !DIExpression()), !dbg !2272
  %11 = load i8*, i8** %10, align 8, !dbg !2273
  %12 = call noalias i8* @canon_host_r(i8* %11, i32* @last_cherror), !dbg !2274
  %13 = load i32, i32* @x.45
  %14 = load i32, i32* @y.46
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2275

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2276, metadata !DIExpression()), !dbg !2272
  %22 = load i8*, i8** %21, align 8, !dbg !2273
  %23 = call noalias i8* @canon_host_r(i8* %22, i32* @last_cherror), !dbg !2274
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @canon_host_r(i8*, i32*) #4 !dbg !165 {
  %3 = load i32, i32* @x.47
  %4 = load i32, i32* @y.48
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca %struct.addrinfo*, align 8
  %15 = alloca i32, align 4
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2301, metadata !DIExpression()), !dbg !2302
  store i32* %1, i32** %12, align 8
  call void @llvm.dbg.declare(metadata i32** %12, metadata !2303, metadata !DIExpression()), !dbg !2304
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2305, metadata !DIExpression()), !dbg !2306
  store i8* null, i8** %13, align 8, !dbg !2306
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %14, metadata !2307, metadata !DIExpression()), !dbg !2308
  store %struct.addrinfo* null, %struct.addrinfo** %14, align 8, !dbg !2308
  call void @llvm.dbg.declare(metadata i32* %15, metadata !2309, metadata !DIExpression()), !dbg !2310
  store i32 2, i32* getelementptr inbounds (%struct.addrinfo, %struct.addrinfo* @canon_host_r.hints, i32 0, i32 0), align 8, !dbg !2311
  %16 = load i8*, i8** %11, align 8, !dbg !2312
  %17 = call i32 @getaddrinfo(i8* %16, i8* null, %struct.addrinfo* @canon_host_r.hints, %struct.addrinfo** %14), !dbg !2313
  store i32 %17, i32* %15, align 4, !dbg !2314
  %18 = load i32, i32* %15, align 4, !dbg !2315
  %19 = icmp ne i32 %18, 0, !dbg !2315
  %20 = load i32, i32* @x.47
  %21 = load i32, i32* @y.48
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %19, label %83, label %28, !dbg !2317

28:                                               ; preds = %originalBBpart2
  %29 = load i32, i32* @x.47
  %30 = load i32, i32* @y.48
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !2318
  %38 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %37, i32 0, i32 6, !dbg !2320
  %39 = load i8*, i8** %38, align 8, !dbg !2320
  %40 = icmp ne i8* %39, null, !dbg !2318
  %41 = load i32, i32* @x.47
  %42 = load i32, i32* @y.48
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %40, label %49, label %53, !dbg !2318

49:                                               ; preds = %originalBBpart24
  %50 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !2321
  %51 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %50, i32 0, i32 6, !dbg !2322
  %52 = load i8*, i8** %51, align 8, !dbg !2322
  br label %55, !dbg !2318

53:                                               ; preds = %originalBBpart24
  %54 = load i8*, i8** %11, align 8, !dbg !2323
  br label %55, !dbg !2318

55:                                               ; preds = %53, %49
  %56 = phi i8* [ %52, %49 ], [ %54, %53 ], !dbg !2318
  %57 = call noalias i8* @strdup(i8* %56) #10, !dbg !2324
  store i8* %57, i8** %13, align 8, !dbg !2325
  %58 = load i8*, i8** %13, align 8, !dbg !2326
  %59 = icmp ne i8* %58, null, !dbg !2326
  br i1 %59, label %65, label %60, !dbg !2328

60:                                               ; preds = %55
  %61 = load i32*, i32** %12, align 8, !dbg !2329
  %62 = icmp ne i32* %61, null, !dbg !2329
  br i1 %62, label %63, label %65, !dbg !2330

63:                                               ; preds = %60
  %64 = load i32*, i32** %12, align 8, !dbg !2331
  store i32 -10, i32* %64, align 4, !dbg !2332
  br label %65, !dbg !2333

65:                                               ; preds = %63, %60, %55
  %66 = load i32, i32* @x.47
  %67 = load i32, i32* @y.48
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %65, %originalBB6alteredBB
  %74 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !2334
  call void @freeaddrinfo(%struct.addrinfo* %74) #10, !dbg !2335
  %75 = load i32, i32* @x.47
  %76 = load i32, i32* @y.48
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %106, !dbg !2336

83:                                               ; preds = %originalBBpart2
  %84 = load i32*, i32** %12, align 8, !dbg !2337
  %85 = icmp ne i32* %84, null, !dbg !2337
  br i1 %85, label %86, label %105, !dbg !2339

86:                                               ; preds = %83
  %87 = load i32, i32* @x.47
  %88 = load i32, i32* @y.48
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %86, %originalBB10alteredBB
  %95 = load i32, i32* %15, align 4, !dbg !2340
  %96 = load i32*, i32** %12, align 8, !dbg !2341
  store i32 %95, i32* %96, align 4, !dbg !2342
  %97 = load i32, i32* @x.47
  %98 = load i32, i32* @y.48
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %105, !dbg !2343

105:                                              ; preds = %originalBBpart212, %83
  br label %106

106:                                              ; preds = %105, %originalBBpart28
  %107 = load i8*, i8** %13, align 8, !dbg !2344
  ret i8* %107, !dbg !2345

originalBBalteredBB:                              ; preds = %originalBB, %2
  %108 = alloca i8*, align 8
  %109 = alloca i32*, align 8
  %110 = alloca i8*, align 8
  %111 = alloca %struct.addrinfo*, align 8
  %112 = alloca i32, align 4
  store i8* %0, i8** %108, align 8
  call void @llvm.dbg.declare(metadata i8** %108, metadata !2346, metadata !DIExpression()), !dbg !2302
  store i32* %1, i32** %109, align 8
  call void @llvm.dbg.declare(metadata i32** %109, metadata !2370, metadata !DIExpression()), !dbg !2304
  call void @llvm.dbg.declare(metadata i8** %110, metadata !2371, metadata !DIExpression()), !dbg !2306
  store i8* null, i8** %110, align 8, !dbg !2306
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %111, metadata !2372, metadata !DIExpression()), !dbg !2308
  store %struct.addrinfo* null, %struct.addrinfo** %111, align 8, !dbg !2308
  call void @llvm.dbg.declare(metadata i32* %112, metadata !2373, metadata !DIExpression()), !dbg !2310
  store i32 2, i32* getelementptr inbounds (%struct.addrinfo, %struct.addrinfo* @canon_host_r.hints, i32 0, i32 0), align 8, !dbg !2311
  %113 = load i8*, i8** %108, align 8, !dbg !2312
  %114 = call i32 @getaddrinfo(i8* %113, i8* null, %struct.addrinfo* @canon_host_r.hints, %struct.addrinfo** %111), !dbg !2313
  store i32 %114, i32* %112, align 4, !dbg !2314
  %115 = load i32, i32* %112, align 4, !dbg !2315
  %116 = icmp ne i32 %115, 0, !dbg !2315
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %117 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !2318
  %118 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %117, i32 0, i32 6, !dbg !2320
  %119 = load i8*, i8** %118, align 8, !dbg !2320
  %120 = icmp ne i8* %119, null, !dbg !2318
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %65
  %121 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !2334
  call void @freeaddrinfo(%struct.addrinfo* %121) #10, !dbg !2335
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %86
  %122 = load i32, i32* %15, align 4, !dbg !2340
  %123 = load i32*, i32** %12, align 8, !dbg !2341
  store i32 %122, i32* %123, align 4, !dbg !2342
  br label %originalBB10
}

declare dso_local i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #3

; Function Attrs: nounwind
declare dso_local noalias i8* @strdup(i8*) #2

; Function Attrs: nounwind
declare dso_local void @freeaddrinfo(%struct.addrinfo*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !2374 {
  %1 = alloca i8*, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2375
  %3 = call i32 @close_stream(%struct._IO_FILE* %2), !dbg !2377
  %4 = icmp ne i32 %3, 0, !dbg !2378
  br i1 %4, label %5, label %60, !dbg !2379

5:                                                ; preds = %0
  %6 = load i8, i8* @ignore_EPIPE, align 1, !dbg !2380
  %7 = trunc i8 %6 to i1, !dbg !2380
  br i1 %7, label %8, label %28, !dbg !2381

8:                                                ; preds = %5
  %9 = load i32, i32* @x.49
  %10 = load i32, i32* @y.50
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = call i32* @__errno_location() #15, !dbg !2382
  %18 = load i32, i32* %17, align 4, !dbg !2382
  %19 = icmp eq i32 %18, 32, !dbg !2383
  %20 = load i32, i32* @x.49
  %21 = load i32, i32* @y.50
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %19, label %60, label %28, !dbg !2384

28:                                               ; preds = %originalBBpart2, %5
  call void @llvm.dbg.declare(metadata i8** %1, metadata !2385, metadata !DIExpression()), !dbg !2387
  %29 = load i32, i32* @x.49
  %30 = load i32, i32* @y.50
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.102, i64 0, i64 0)) #10, !dbg !2388
  store i8* %37, i8** %1, align 8, !dbg !2387
  %38 = load i8*, i8** @file_name, align 8, !dbg !2389
  %39 = icmp ne i8* %38, null, !dbg !2389
  %40 = load i32, i32* @x.49
  %41 = load i32, i32* @y.50
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %54, !dbg !2391

48:                                               ; preds = %originalBBpart24
  %49 = call i32* @__errno_location() #15, !dbg !2392
  %50 = load i32, i32* %49, align 4, !dbg !2392
  %51 = load i8*, i8** @file_name, align 8, !dbg !2393
  %52 = call i8* @quotearg_colon(i8* %51), !dbg !2394
  %53 = load i8*, i8** %1, align 8, !dbg !2395
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %50, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.103, i64 0, i64 0), i8* %52, i8* %53), !dbg !2396
  br label %58, !dbg !2396

54:                                               ; preds = %originalBBpart24
  %55 = call i32* @__errno_location() #15, !dbg !2397
  %56 = load i32, i32* %55, align 4, !dbg !2397
  %57 = load i8*, i8** %1, align 8, !dbg !2398
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.104, i64 0, i64 0), i8* %57), !dbg !2399
  br label %58

58:                                               ; preds = %54, %48
  %59 = load volatile i32, i32* @exit_failure, align 4, !dbg !2400
  call void @_exit(i32 %59) #14, !dbg !2401
  unreachable, !dbg !2401

60:                                               ; preds = %originalBBpart2, %0
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2402
  %62 = call i32 @close_stream(%struct._IO_FILE* %61), !dbg !2404
  %63 = icmp ne i32 %62, 0, !dbg !2405
  br i1 %63, label %64, label %82, !dbg !2406

64:                                               ; preds = %60
  %65 = load i32, i32* @x.49
  %66 = load i32, i32* @y.50
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %64, %originalBB6alteredBB
  %73 = load volatile i32, i32* @exit_failure, align 4, !dbg !2407
  call void @_exit(i32 %73) #14, !dbg !2408
  %74 = load i32, i32* @x.49
  %75 = load i32, i32* @y.50
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !2408

82:                                               ; preds = %60
  %83 = load i32, i32* @x.49
  %84 = load i32, i32* @y.50
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  %91 = load i32, i32* @x.49
  %92 = load i32, i32* @y.50
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret void, !dbg !2409

originalBBalteredBB:                              ; preds = %originalBB, %8
  %99 = call i32* @__errno_location() #15, !dbg !2382
  %100 = load i32, i32* %99, align 4, !dbg !2382
  %101 = icmp eq i32 %100, 32, !dbg !2383
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %102 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.102, i64 0, i64 0)) #10, !dbg !2388
  store i8* %102, i8** %1, align 8, !dbg !2387
  %103 = load i8*, i8** @file_name, align 8, !dbg !2389
  %104 = icmp ne i8* %103, null, !dbg !2389
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %64
  %105 = load volatile i32, i32* @exit_failure, align 4, !dbg !2407
  call void @_exit(i32 %105) #14, !dbg !2408
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  br label %originalBB10
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !2410 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2412, metadata !DIExpression()), !dbg !2413
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !2414, metadata !DIExpression()), !dbg !2415
  %13 = load i32, i32* %11, align 4, !dbg !2416
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2418
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !2419
  %16 = icmp ne i32 %15, 0, !dbg !2419
  %17 = load i32, i32* @x.51
  %18 = load i32, i32* @y.52
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %26, !dbg !2420

25:                                               ; preds = %originalBBpart2
  store i1 false, i1* %10, align 1, !dbg !2421
  br label %180, !dbg !2421

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.51
  %28 = load i32, i32* @y.52
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2422
  %36 = call i32 @strcmp(i8* %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.109, i64 0, i64 0)) #13, !dbg !2423
  %37 = load i32, i32* @x.51
  %38 = load i32, i32* @y.52
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %45, !dbg !2424

45:                                               ; preds = %originalBBpart24
  %46 = load i32, i32* @x.51
  %47 = load i32, i32* @y.52
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %45, %originalBB6alteredBB
  %collatzVar = alloca i32
  %54 = load i32, i32* @x.51
  %55 = load i32, i32* @y.52
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %62

62:                                               ; preds = %originalBBpart28
  %63 = load i32, i32* @inVal0
  %64 = icmp sgt i32 %63, 1
  br i1 %64, label %82, label %65

65:                                               ; preds = %62
  %66 = load i32, i32* @x.51
  %67 = load i32, i32* @y.52
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  store i32 3, i32* %collatzVar
  %74 = load i32, i32* @x.51
  %75 = load i32, i32* @y.52
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %82

82:                                               ; preds = %originalBBpart212, %62
  %83 = load i32, i32* @x.51
  %84 = load i32, i32* @y.52
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load i8**, i8*** @inVal1
  %92 = getelementptr inbounds i8*, i8** %91, i64 1
  %93 = load i8*, i8** %92
  %94 = add i32 0, -3
  %controle = call i32 @controle(i8* %93, i32 %94)
  store i32 %controle, i32* %collatzVar
  %95 = load i32, i32* @x.51
  %96 = load i32, i32* @y.52
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart224, label %originalBB14alteredBB

originalBBpart224:                                ; preds = %originalBB14
  br label %103

103:                                              ; preds = %originalBBpart250, %133, %originalBBpart224
  %104 = load i32, i32* %collatzVar
  %105 = icmp sgt i32 %104, 1
  br i1 %105, label %106, label %157

106:                                              ; preds = %103
  %107 = load i32, i32* %collatzVar
  %108 = srem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %106
  %111 = load i32, i32* %collatzVar
  %112 = sdiv i32 %111, 2
  store i32 %112, i32* %collatzVar
  br label %133

113:                                              ; preds = %106
  %114 = load i32, i32* @x.51
  %115 = load i32, i32* @y.52
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %113, %originalBB26alteredBB
  %122 = load i32, i32* %collatzVar
  %123 = mul i32 %122, 3
  %124 = add i32 %123, 1
  store i32 %124, i32* %collatzVar
  %125 = load i32, i32* @x.51
  %126 = load i32, i32* @y.52
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart240, label %originalBB26alteredBB

originalBBpart240:                                ; preds = %originalBB26
  br label %133

133:                                              ; preds = %originalBBpart240, %110
  %134 = load i32, i32* %collatzVar
  %135 = sub i32 %36, %134
  %136 = icmp sgt i32 %135, -2
  br i1 %136, label %137, label %103

137:                                              ; preds = %133
  %138 = load i32, i32* @x.51
  %139 = load i32, i32* @y.52
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %137, %originalBB42alteredBB
  %146 = load i32, i32* %collatzVar
  %147 = add i32 %36, %146
  %148 = icmp slt i32 %147, 2
  %149 = load i32, i32* @x.51
  %150 = load i32, i32* @y.52
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart250, label %originalBB42alteredBB

originalBBpart250:                                ; preds = %originalBB42
  br i1 %148, label %161, label %103

157:                                              ; preds = %103
  %158 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2425
  %159 = call i32 @strcmp(i8* %158, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.110, i64 0, i64 0)) #13, !dbg !2426
  %160 = icmp eq i32 %159, 0, !dbg !2427
  br label %161, !dbg !2428

161:                                              ; preds = %157, %originalBBpart250
  %162 = phi i1 [ true, %originalBBpart250 ], [ %160, %157 ]
  %163 = load i32, i32* @x.51
  %164 = load i32, i32* @y.52
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %161, %originalBB52alteredBB
  %171 = xor i1 %162, true, !dbg !2429
  store i1 %171, i1* %10, align 1, !dbg !2430
  %172 = load i32, i32* @x.51
  %173 = load i32, i32* @y.52
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart256, label %originalBB52alteredBB

originalBBpart256:                                ; preds = %originalBB52
  br label %180, !dbg !2430

180:                                              ; preds = %originalBBpart256, %25
  %181 = load i32, i32* @x.51
  %182 = load i32, i32* @y.52
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %180, %originalBB58alteredBB
  %189 = load i1, i1* %10, align 1, !dbg !2431
  %190 = load i32, i32* @x.51
  %191 = load i32, i32* @y.52
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  ret i1 %189, !dbg !2431

originalBBalteredBB:                              ; preds = %originalBB, %1
  %198 = alloca i1, align 1
  %199 = alloca i32, align 4
  %200 = alloca [257 x i8], align 16
  store i32 %0, i32* %199, align 4
  call void @llvm.dbg.declare(metadata i32* %199, metadata !2432, metadata !DIExpression()), !dbg !2413
  call void @llvm.dbg.declare(metadata [257 x i8]* %200, metadata !2435, metadata !DIExpression()), !dbg !2415
  %201 = load i32, i32* %199, align 4, !dbg !2416
  %202 = getelementptr inbounds [257 x i8], [257 x i8]* %200, i64 0, i64 0, !dbg !2418
  %203 = call i32 @setlocale_null_r(i32 %201, i8* %202, i64 257), !dbg !2419
  %204 = icmp ne i32 %203, 0, !dbg !2419
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %205 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2422
  %206 = call i32 @strcmp(i8* %205, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.109, i64 0, i64 0)) #13, !dbg !2423
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %45
  %collatzVaralteredBB = alloca i32
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  store i32 3, i32* %collatzVar
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %207 = load i8**, i8*** @inVal1
  %208 = getelementptr inbounds i8*, i8** %207, i64 1
  %209 = load i8*, i8** %208
  %_ = sub i32 0, 0
  %gen = add i32 %_, -3
  %_15 = sub i32 0, 0
  %gen16 = add i32 %_15, -3
  %_17 = sub i32 0, -3
  %gen18 = mul i32 %_17, -3
  %_19 = shl i32 0, -3
  %_20 = sub i32 0, -3
  %gen21 = mul i32 %_20, -3
  %_22 = shl i32 0, -3
  %210 = add i32 0, -3
  %controlealteredBB = call i32 @controle(i8* %209, i32 %210)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB14

originalBB26alteredBB:                            ; preds = %originalBB26, %113
  %211 = load i32, i32* %collatzVar
  %_27 = sub i32 %211, 3
  %gen28 = mul i32 %_27, 3
  %_29 = sub i32 0, %211
  %gen30 = add i32 %_29, 3
  %_31 = sub i32 %211, 3
  %gen32 = mul i32 %_31, 3
  %_33 = sub i32 %211, 3
  %gen34 = mul i32 %_33, 3
  %_35 = sub i32 0, %211
  %gen36 = add i32 %_35, 3
  %212 = mul i32 %211, 3
  %_37 = sub i32 %212, 1
  %gen38 = mul i32 %_37, 1
  %213 = add i32 %212, 1
  store i32 %213, i32* %collatzVar
  br label %originalBB26

originalBB42alteredBB:                            ; preds = %originalBB42, %137
  %214 = load i32, i32* %collatzVar
  %_43 = shl i32 %36, %214
  %_44 = sub i32 0, %36
  %gen45 = add i32 %_44, %214
  %_46 = sub i32 %36, %214
  %gen47 = mul i32 %_46, %214
  %_48 = shl i32 %36, %214
  %215 = add i32 %36, %214
  %216 = icmp slt i32 %215, 2
  br label %originalBB42

originalBB52alteredBB:                            ; preds = %originalBB52, %161
  %_53 = sub i1 false, %162
  %gen54 = add i1 %_53, true
  %217 = xor i1 %162, true, !dbg !2429
  store i1 %217, i1* %10, align 1, !dbg !2430
  br label %originalBB52

originalBB58alteredBB:                            ; preds = %originalBB58, %180
  %218 = load i1, i1* %10, align 1, !dbg !2431
  br label %originalBB58
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @imaxtostr(i64, i8*) #4 !dbg !2436 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  call void @llvm.dbg.declare(metadata i64* %3, metadata !2440, metadata !DIExpression()), !dbg !2441
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2442, metadata !DIExpression()), !dbg !2443
  call void @llvm.dbg.declare(metadata i8** %5, metadata !2444, metadata !DIExpression()), !dbg !2445
  %6 = load i8*, i8** %4, align 8, !dbg !2446
  %7 = getelementptr inbounds i8, i8* %6, i64 20, !dbg !2447
  store i8* %7, i8** %5, align 8, !dbg !2445
  %8 = load i8*, i8** %5, align 8, !dbg !2448
  store i8 0, i8* %8, align 1, !dbg !2449
  %9 = load i64, i64* %3, align 8, !dbg !2450
  %10 = icmp slt i64 %9, 0, !dbg !2452
  br i1 %10, label %11, label %58, !dbg !2453

11:                                               ; preds = %2
  %12 = load i32, i32* @x.53
  %13 = load i32, i32* @y.54
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %11, %originalBBalteredBB
  %20 = load i32, i32* @x.53
  %21 = load i32, i32* @y.54
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %28, !dbg !2454

28:                                               ; preds = %35, %originalBBpart2
  %29 = load i64, i64* %3, align 8, !dbg !2456
  %30 = srem i64 %29, 10, !dbg !2457
  %31 = sub nsw i64 48, %30, !dbg !2458
  %32 = trunc i64 %31 to i8, !dbg !2459
  %33 = load i8*, i8** %5, align 8, !dbg !2460
  %34 = getelementptr inbounds i8, i8* %33, i32 -1, !dbg !2460
  store i8* %34, i8** %5, align 8, !dbg !2460
  store i8 %32, i8* %34, align 1, !dbg !2461
  br label %35, !dbg !2462

35:                                               ; preds = %28
  %36 = load i64, i64* %3, align 8, !dbg !2463
  %37 = sdiv i64 %36, 10, !dbg !2463
  store i64 %37, i64* %3, align 8, !dbg !2463
  %38 = icmp ne i64 %37, 0, !dbg !2464
  br i1 %38, label %28, label %39, !dbg !2462, !llvm.loop !2465

39:                                               ; preds = %35
  %40 = load i32, i32* @x.53
  %41 = load i32, i32* @y.54
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %48 = load i8*, i8** %5, align 8, !dbg !2467
  %49 = getelementptr inbounds i8, i8* %48, i32 -1, !dbg !2467
  store i8* %49, i8** %5, align 8, !dbg !2467
  store i8 45, i8* %49, align 1, !dbg !2468
  %50 = load i32, i32* @x.53
  %51 = load i32, i32* @y.54
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %103, !dbg !2469

58:                                               ; preds = %2
  br label %59, !dbg !2470

59:                                               ; preds = %originalBBpart220, %58
  %60 = load i32, i32* @x.53
  %61 = load i32, i32* @y.54
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = load i64, i64* %3, align 8, !dbg !2472
  %69 = srem i64 %68, 10, !dbg !2473
  %70 = add nsw i64 48, %69, !dbg !2474
  %71 = trunc i64 %70 to i8, !dbg !2475
  %72 = load i8*, i8** %5, align 8, !dbg !2476
  %73 = getelementptr inbounds i8, i8* %72, i32 -1, !dbg !2476
  store i8* %73, i8** %5, align 8, !dbg !2476
  store i8 %71, i8* %73, align 1, !dbg !2477
  %74 = load i32, i32* @x.53
  %75 = load i32, i32* @y.54
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart214, label %originalBB6alteredBB

originalBBpart214:                                ; preds = %originalBB6
  br label %82, !dbg !2478

82:                                               ; preds = %originalBBpart214
  %83 = load i32, i32* @x.53
  %84 = load i32, i32* @y.54
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %82, %originalBB16alteredBB
  %91 = load i64, i64* %3, align 8, !dbg !2479
  %92 = sdiv i64 %91, 10, !dbg !2479
  store i64 %92, i64* %3, align 8, !dbg !2479
  %93 = icmp ne i64 %92, 0, !dbg !2480
  %94 = load i32, i32* @x.53
  %95 = load i32, i32* @y.54
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart220, label %originalBB16alteredBB

originalBBpart220:                                ; preds = %originalBB16
  br i1 %93, label %59, label %102, !dbg !2478, !llvm.loop !2481

102:                                              ; preds = %originalBBpart220
  br label %103

103:                                              ; preds = %102, %originalBBpart24
  %104 = load i32, i32* @x.53
  %105 = load i32, i32* @y.54
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %103, %originalBB22alteredBB
  %112 = load i8*, i8** %5, align 8, !dbg !2483
  %113 = load i32, i32* @x.53
  %114 = load i32, i32* @y.54
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i8* %112, !dbg !2484

originalBBalteredBB:                              ; preds = %originalBB, %11
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  %121 = load i8*, i8** %5, align 8, !dbg !2467
  %122 = getelementptr inbounds i8, i8* %121, i32 -1, !dbg !2467
  store i8* %122, i8** %5, align 8, !dbg !2467
  store i8 45, i8* %122, align 1, !dbg !2468
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %123 = load i64, i64* %3, align 8, !dbg !2472
  %_ = shl i64 %123, 10
  %124 = srem i64 %123, 10, !dbg !2473
  %_7 = sub i64 0, 48
  %gen = add i64 %_7, %124
  %_8 = sub i64 48, %124
  %gen9 = mul i64 %_8, %124
  %_10 = sub i64 0, 48
  %gen11 = add i64 %_10, %124
  %_12 = shl i64 48, %124
  %125 = add nsw i64 48, %124, !dbg !2474
  %126 = trunc i64 %125 to i8, !dbg !2475
  %127 = load i8*, i8** %5, align 8, !dbg !2476
  %128 = getelementptr inbounds i8, i8* %127, i32 -1, !dbg !2476
  store i8* %128, i8** %5, align 8, !dbg !2476
  store i8 %126, i8* %128, align 1, !dbg !2477
  br label %originalBB6

originalBB16alteredBB:                            ; preds = %originalBB16, %82
  %129 = load i64, i64* %3, align 8, !dbg !2479
  %_17 = sub i64 0, %129
  %gen18 = add i64 %_17, 10
  %130 = sdiv i64 %129, 10, !dbg !2479
  store i64 %130, i64* %3, align 8, !dbg !2479
  %131 = icmp ne i64 %130, 0, !dbg !2480
  br label %originalBB16

originalBB22alteredBB:                            ; preds = %originalBB22, %103
  %132 = load i8*, i8** %5, align 8, !dbg !2483
  br label %originalBB22
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !2485 {
  %2 = load i32, i32* @x.55
  %3 = load i32, i32* @y.56
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2486, metadata !DIExpression()), !dbg !2487
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2488, metadata !DIExpression()), !dbg !2489
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2490, metadata !DIExpression()), !dbg !2491
  %13 = load i8*, i8** %10, align 8, !dbg !2492
  %14 = icmp eq i8* %13, null, !dbg !2494
  %15 = load i32, i32* @x.55
  %16 = load i32, i32* @y.56
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !2495

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.55
  %25 = load i32, i32* @y.56
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2496
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.115, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !2498
  call void @abort() #12, !dbg !2499
  %34 = load i32, i32* @x.55
  %35 = load i32, i32* @y.56
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !2499

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.55
  %44 = load i32, i32* @y.56
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !2500
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !2501
  store i8* %52, i8** %11, align 8, !dbg !2502
  %53 = load i8*, i8** %11, align 8, !dbg !2503
  %54 = icmp ne i8* %53, null, !dbg !2504
  %55 = load i32, i32* @x.55
  %56 = load i32, i32* @y.56
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %66, !dbg !2503

63:                                               ; preds = %originalBBpart28
  %64 = load i8*, i8** %11, align 8, !dbg !2505
  %65 = getelementptr inbounds i8, i8* %64, i64 1, !dbg !2506
  br label %68, !dbg !2503

66:                                               ; preds = %originalBBpart28
  %67 = load i8*, i8** %10, align 8, !dbg !2507
  br label %68, !dbg !2503

68:                                               ; preds = %66, %63
  %69 = phi i8* [ %65, %63 ], [ %67, %66 ], !dbg !2503
  %70 = load i32, i32* @x.55
  %71 = load i32, i32* @y.56
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  store i8* %69, i8** %12, align 8, !dbg !2508
  %78 = load i8*, i8** %12, align 8, !dbg !2509
  %79 = load i8*, i8** %10, align 8, !dbg !2511
  %80 = ptrtoint i8* %78 to i64, !dbg !2512
  %81 = ptrtoint i8* %79 to i64, !dbg !2512
  %82 = sub i64 %80, %81, !dbg !2512
  %83 = icmp sge i64 %82, 7, !dbg !2513
  %84 = load i32, i32* @x.55
  %85 = load i32, i32* @y.56
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart218, label %originalBB10alteredBB

originalBBpart218:                                ; preds = %originalBB10
  br i1 %83, label %92, label %123, !dbg !2514

92:                                               ; preds = %originalBBpart218
  %93 = load i8*, i8** %12, align 8, !dbg !2515
  %94 = getelementptr inbounds i8, i8* %93, i64 -7, !dbg !2516
  %95 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.116, i64 0, i64 0), i64 7) #13, !dbg !2517
  %96 = icmp eq i32 %95, 0, !dbg !2518
  br i1 %96, label %97, label %123, !dbg !2519

97:                                               ; preds = %92
  %98 = load i8*, i8** %12, align 8, !dbg !2520
  store i8* %98, i8** %10, align 8, !dbg !2522
  %99 = load i8*, i8** %12, align 8, !dbg !2523
  %100 = call i32 @strncmp(i8* %99, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.117, i64 0, i64 0), i64 3) #13, !dbg !2525
  %101 = icmp eq i32 %100, 0, !dbg !2526
  br i1 %101, label %102, label %122, !dbg !2527

102:                                              ; preds = %97
  %103 = load i32, i32* @x.55
  %104 = load i32, i32* @y.56
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %102, %originalBB20alteredBB
  %111 = load i8*, i8** %12, align 8, !dbg !2528
  %112 = getelementptr inbounds i8, i8* %111, i64 3, !dbg !2530
  store i8* %112, i8** %10, align 8, !dbg !2531
  %113 = load i8*, i8** %10, align 8, !dbg !2532
  store i8* %113, i8** @program_invocation_short_name, align 8, !dbg !2533
  %114 = load i32, i32* @x.55
  %115 = load i32, i32* @y.56
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %122, !dbg !2534

122:                                              ; preds = %originalBBpart222, %97
  br label %123, !dbg !2535

123:                                              ; preds = %122, %92, %originalBBpart218
  %124 = load i32, i32* @x.55
  %125 = load i32, i32* @y.56
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %123, %originalBB24alteredBB
  %132 = load i8*, i8** %10, align 8, !dbg !2536
  store i8* %132, i8** @program_name, align 8, !dbg !2537
  %133 = load i8*, i8** %10, align 8, !dbg !2538
  store i8* %133, i8** @program_invocation_name, align 8, !dbg !2539
  %134 = load i32, i32* @x.55
  %135 = load i32, i32* @y.56
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  ret void, !dbg !2540

originalBBalteredBB:                              ; preds = %originalBB, %1
  %142 = alloca i8*, align 8
  %143 = alloca i8*, align 8
  %144 = alloca i8*, align 8
  store i8* %0, i8** %142, align 8
  call void @llvm.dbg.declare(metadata i8** %142, metadata !2541, metadata !DIExpression()), !dbg !2487
  call void @llvm.dbg.declare(metadata i8** %143, metadata !2547, metadata !DIExpression()), !dbg !2489
  call void @llvm.dbg.declare(metadata i8** %144, metadata !2548, metadata !DIExpression()), !dbg !2491
  %145 = load i8*, i8** %142, align 8, !dbg !2492
  %146 = icmp eq i8* %145, null, !dbg !2494
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %147 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2496
  %148 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.115, i64 0, i64 0), %struct._IO_FILE* %147), !dbg !2498
  call void @abort() #12, !dbg !2499
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %149 = load i8*, i8** %10, align 8, !dbg !2500
  %150 = call i8* @strrchr(i8* %149, i32 47) #13, !dbg !2501
  store i8* %150, i8** %11, align 8, !dbg !2502
  %151 = load i8*, i8** %11, align 8, !dbg !2503
  %152 = icmp ne i8* %151, null, !dbg !2504
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  store i8* %69, i8** %12, align 8, !dbg !2508
  %153 = load i8*, i8** %12, align 8, !dbg !2509
  %154 = load i8*, i8** %10, align 8, !dbg !2511
  %155 = ptrtoint i8* %153 to i64, !dbg !2512
  %156 = ptrtoint i8* %154 to i64, !dbg !2512
  %_ = shl i64 %155, %156
  %_11 = shl i64 %155, %156
  %_12 = sub i64 0, %155
  %gen = add i64 %_12, %156
  %_13 = sub i64 0, %155
  %gen14 = add i64 %_13, %156
  %_15 = sub i64 0, %155
  %gen16 = add i64 %_15, %156
  %157 = sub i64 %155, %156, !dbg !2512
  %158 = icmp sge i64 %157, 7, !dbg !2513
  br label %originalBB10

originalBB20alteredBB:                            ; preds = %originalBB20, %102
  %159 = load i8*, i8** %12, align 8, !dbg !2528
  %160 = getelementptr inbounds i8, i8* %159, i64 3, !dbg !2530
  store i8* %160, i8** %10, align 8, !dbg !2531
  %161 = load i8*, i8** %10, align 8, !dbg !2532
  store i8* %161, i8** @program_invocation_short_name, align 8, !dbg !2533
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %123
  %162 = load i8*, i8** %10, align 8, !dbg !2536
  store i8* %162, i8** @program_name, align 8, !dbg !2537
  %163 = load i8*, i8** %10, align 8, !dbg !2538
  store i8* %163, i8** @program_invocation_name, align 8, !dbg !2539
  br label %originalBB24
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !2549 {
  %4 = alloca %struct.quoting_options*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %4, metadata !2553, metadata !DIExpression()), !dbg !2554
  store i8 %1, i8* %5, align 1
  call void @llvm.dbg.declare(metadata i8* %5, metadata !2555, metadata !DIExpression()), !dbg !2556
  store i32 %2, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !2557, metadata !DIExpression()), !dbg !2558
  call void @llvm.dbg.declare(metadata i8* %7, metadata !2559, metadata !DIExpression()), !dbg !2560
  %11 = load i8, i8* %5, align 1, !dbg !2561
  store i8 %11, i8* %7, align 1, !dbg !2560
  call void @llvm.dbg.declare(metadata i32** %8, metadata !2562, metadata !DIExpression()), !dbg !2564
  %12 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !2565
  %13 = icmp ne %struct.quoting_options* %12, null, !dbg !2565
  br i1 %13, label %14, label %16, !dbg !2565

14:                                               ; preds = %3
  %15 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !2566
  br label %33, !dbg !2565

16:                                               ; preds = %3
  %17 = load i32, i32* @x.57
  %18 = load i32, i32* @y.58
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = load i32, i32* @x.57
  %26 = load i32, i32* @y.58
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %33, !dbg !2565

33:                                               ; preds = %originalBBpart2, %14
  %34 = phi %struct.quoting_options* [ %15, %14 ], [ @default_quoting_options, %originalBBpart2 ], !dbg !2565
  %35 = load i32, i32* @x.57
  %36 = load i32, i32* @y.58
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %43 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %34, i32 0, i32 2, !dbg !2567
  %44 = getelementptr inbounds [8 x i32], [8 x i32]* %43, i64 0, i64 0, !dbg !2568
  %45 = load i8, i8* %7, align 1, !dbg !2569
  %46 = zext i8 %45 to i64, !dbg !2569
  %47 = udiv i64 %46, 32, !dbg !2570
  %48 = getelementptr inbounds i32, i32* %44, i64 %47, !dbg !2571
  store i32* %48, i32** %8, align 8, !dbg !2564
  call void @llvm.dbg.declare(metadata i32* %9, metadata !2572, metadata !DIExpression()), !dbg !2573
  %49 = load i8, i8* %7, align 1, !dbg !2574
  %50 = zext i8 %49 to i64, !dbg !2574
  %51 = urem i64 %50, 32, !dbg !2575
  %52 = trunc i64 %51 to i32, !dbg !2574
  store i32 %52, i32* %9, align 4, !dbg !2573
  call void @llvm.dbg.declare(metadata i32* %10, metadata !2576, metadata !DIExpression()), !dbg !2577
  %53 = load i32*, i32** %8, align 8, !dbg !2578
  %54 = load i32, i32* %53, align 4, !dbg !2579
  %55 = load i32, i32* %9, align 4, !dbg !2580
  %56 = lshr i32 %54, %55, !dbg !2581
  %57 = and i32 %56, 1, !dbg !2582
  store i32 %57, i32* %10, align 4, !dbg !2577
  %58 = load i32, i32* %6, align 4, !dbg !2583
  %59 = and i32 %58, 1, !dbg !2584
  %60 = load i32, i32* %10, align 4, !dbg !2585
  %61 = xor i32 %59, %60, !dbg !2586
  %62 = load i32, i32* %9, align 4, !dbg !2587
  %63 = shl i32 %61, %62, !dbg !2588
  %64 = load i32*, i32** %8, align 8, !dbg !2589
  %65 = load i32, i32* %64, align 4, !dbg !2590
  %66 = xor i32 %65, %63, !dbg !2590
  store i32 %66, i32* %64, align 4, !dbg !2590
  %67 = load i32, i32* %10, align 4, !dbg !2591
  %68 = load i32, i32* @x.57
  %69 = load i32, i32* @y.58
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart248, label %originalBB1alteredBB

originalBBpart248:                                ; preds = %originalBB1
  ret i32 %67, !dbg !2592

originalBBalteredBB:                              ; preds = %originalBB, %16
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %76 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %34, i32 0, i32 2, !dbg !2567
  %77 = getelementptr inbounds [8 x i32], [8 x i32]* %76, i64 0, i64 0, !dbg !2568
  %78 = load i8, i8* %7, align 1, !dbg !2569
  %79 = zext i8 %78 to i64, !dbg !2569
  %_ = sub i64 0, %79
  %gen = add i64 %_, 32
  %_2 = shl i64 %79, 32
  %80 = udiv i64 %79, 32, !dbg !2570
  %81 = getelementptr inbounds i32, i32* %77, i64 %80, !dbg !2571
  store i32* %81, i32** %8, align 8, !dbg !2564
  call void @llvm.dbg.declare(metadata !4, metadata !2593, metadata !DIExpression()), !dbg !2573
  %82 = load i8, i8* %7, align 1, !dbg !2574
  %83 = zext i8 %82 to i64, !dbg !2574
  %_3 = sub i64 0, %83
  %gen4 = add i64 %_3, 32
  %_5 = shl i64 %83, 32
  %84 = urem i64 %83, 32, !dbg !2575
  %85 = trunc i64 %84 to i32, !dbg !2574
  store i32 %85, i32* %9, align 4, !dbg !2573
  call void @llvm.dbg.declare(metadata !4, metadata !2628, metadata !DIExpression()), !dbg !2577
  %86 = load i32*, i32** %8, align 8, !dbg !2578
  %87 = load i32, i32* %86, align 4, !dbg !2579
  %88 = load i32, i32* %9, align 4, !dbg !2580
  %_6 = sub i32 0, %87
  %gen7 = add i32 %_6, %88
  %89 = lshr i32 %87, %88, !dbg !2581
  %_8 = sub i32 0, %89
  %gen9 = add i32 %_8, 1
  %_10 = shl i32 %89, 1
  %_11 = sub i32 %89, 1
  %gen12 = mul i32 %_11, 1
  %90 = and i32 %89, 1, !dbg !2582
  store i32 %90, i32* %10, align 4, !dbg !2577
  %91 = load i32, i32* %6, align 4, !dbg !2583
  %_13 = sub i32 %91, 1
  %gen14 = mul i32 %_13, 1
  %_15 = shl i32 %91, 1
  %_16 = sub i32 %91, 1
  %gen17 = mul i32 %_16, 1
  %_18 = shl i32 %91, 1
  %_19 = sub i32 %91, 1
  %gen20 = mul i32 %_19, 1
  %_21 = sub i32 0, %91
  %gen22 = add i32 %_21, 1
  %_23 = shl i32 %91, 1
  %_24 = shl i32 %91, 1
  %92 = and i32 %91, 1, !dbg !2584
  %93 = load i32, i32* %10, align 4, !dbg !2585
  %_25 = sub i32 %92, %93
  %gen26 = mul i32 %_25, %93
  %94 = xor i32 %92, %93, !dbg !2586
  %95 = load i32, i32* %9, align 4, !dbg !2587
  %_27 = shl i32 %94, %95
  %_28 = shl i32 %94, %95
  %_29 = sub i32 0, %94
  %gen30 = add i32 %_29, %95
  %_31 = sub i32 0, %94
  %gen32 = add i32 %_31, %95
  %_33 = shl i32 %94, %95
  %96 = shl i32 %94, %95, !dbg !2588
  %97 = load i32*, i32** %8, align 8, !dbg !2589
  %98 = load i32, i32* %97, align 4, !dbg !2590
  %_34 = sub i32 %98, %96
  %gen35 = mul i32 %_34, %96
  %_36 = sub i32 %98, %96
  %gen37 = mul i32 %_36, %96
  %_38 = sub i32 0, %98
  %gen39 = add i32 %_38, %96
  %_40 = sub i32 0, %98
  %gen41 = add i32 %_40, %96
  %_42 = sub i32 %98, %96
  %gen43 = mul i32 %_42, %96
  %_44 = shl i32 %98, %96
  %_45 = sub i32 %98, %96
  %gen46 = mul i32 %_45, %96
  %99 = xor i32 %98, %96, !dbg !2590
  store i32 %99, i32* %97, align 4, !dbg !2590
  %100 = load i32, i32* %10, align 4, !dbg !2591
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !2629 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2632, metadata !DIExpression()), !dbg !2633
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !2634, metadata !DIExpression()), !dbg !2635
  store i8 %2, i8* %6, align 1
  call void @llvm.dbg.declare(metadata i8* %6, metadata !2636, metadata !DIExpression()), !dbg !2637
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %7, metadata !2638, metadata !DIExpression()), !dbg !2639
  %8 = bitcast %struct.quoting_options* %7 to i8*, !dbg !2640
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !2640
  %9 = load i8, i8* %6, align 1, !dbg !2641
  %10 = call i32 @set_char_quoting(%struct.quoting_options* %7, i8 signext %9, i32 1), !dbg !2642
  %11 = load i8*, i8** %4, align 8, !dbg !2643
  %12 = load i64, i64* %5, align 8, !dbg !2644
  %13 = call i8* @quotearg_n_options(i32 0, i8* %11, i64 %12, %struct.quoting_options* %7), !dbg !2645
  ret i8* %13, !dbg !2646
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !2647 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.quoting_options*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.slotvec*, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !2652, metadata !DIExpression()), !dbg !2653
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !2654, metadata !DIExpression()), !dbg !2655
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !2656, metadata !DIExpression()), !dbg !2657
  store %struct.quoting_options* %3, %struct.quoting_options** %8, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %8, metadata !2658, metadata !DIExpression()), !dbg !2659
  call void @llvm.dbg.declare(metadata i32* %9, metadata !2660, metadata !DIExpression()), !dbg !2661
  %17 = call i32* @__errno_location() #15, !dbg !2662
  %18 = load i32, i32* %17, align 4, !dbg !2662
  store i32 %18, i32* %9, align 4, !dbg !2661
  call void @llvm.dbg.declare(metadata %struct.slotvec** %10, metadata !2663, metadata !DIExpression()), !dbg !2664
  %19 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !2665
  store %struct.slotvec* %19, %struct.slotvec** %10, align 8, !dbg !2664
  %20 = load i32, i32* %5, align 4, !dbg !2666
  %21 = icmp slt i32 %20, 0, !dbg !2668
  br i1 %21, label %22, label %23, !dbg !2669

22:                                               ; preds = %4
  call void @abort() #12, !dbg !2670
  unreachable, !dbg !2670

23:                                               ; preds = %4
  %24 = load i32, i32* @nslots, align 4, !dbg !2671
  %25 = load i32, i32* %5, align 4, !dbg !2673
  %26 = icmp sle i32 %24, %25, !dbg !2674
  br i1 %26, label %27, label %101, !dbg !2675

27:                                               ; preds = %23
  call void @llvm.dbg.declare(metadata i8* %11, metadata !2676, metadata !DIExpression()), !dbg !2678
  %28 = load i32, i32* @x.61
  %29 = load i32, i32* @y.62
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %27, %originalBBalteredBB
  %36 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2679
  %37 = icmp eq %struct.slotvec* %36, @slotvec0, !dbg !2680
  %38 = zext i1 %37 to i8, !dbg !2678
  store i8 %38, i8* %11, align 1, !dbg !2678
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2681, metadata !DIExpression()), !dbg !2682
  store i32 2147483646, i32* %12, align 4, !dbg !2682
  %39 = load i32, i32* %12, align 4, !dbg !2683
  %40 = load i32, i32* %5, align 4, !dbg !2685
  %41 = icmp slt i32 %39, %40, !dbg !2686
  %42 = load i32, i32* @x.61
  %43 = load i32, i32* @y.62
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %41, label %50, label %51, !dbg !2687

50:                                               ; preds = %originalBBpart2
  call void @xalloc_die() #14, !dbg !2688
  unreachable, !dbg !2688

51:                                               ; preds = %originalBBpart2
  %52 = load i8, i8* %11, align 1, !dbg !2689
  %53 = trunc i8 %52 to i1, !dbg !2689
  br i1 %53, label %54, label %55, !dbg !2689

54:                                               ; preds = %51
  br label %57, !dbg !2689

55:                                               ; preds = %51
  %56 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2690
  br label %57, !dbg !2689

57:                                               ; preds = %55, %54
  %58 = phi %struct.slotvec* [ null, %54 ], [ %56, %55 ], !dbg !2689
  %59 = bitcast %struct.slotvec* %58 to i8*, !dbg !2689
  %60 = load i32, i32* %5, align 4, !dbg !2691
  %61 = add nsw i32 %60, 1, !dbg !2692
  %62 = sext i32 %61 to i64, !dbg !2693
  %63 = mul i64 %62, 16, !dbg !2694
  %64 = call i8* @xrealloc(i8* %59, i64 %63), !dbg !2695
  %65 = bitcast i8* %64 to %struct.slotvec*, !dbg !2695
  store %struct.slotvec* %65, %struct.slotvec** %10, align 8, !dbg !2696
  store %struct.slotvec* %65, %struct.slotvec** @slotvec, align 8, !dbg !2697
  %66 = load i8, i8* %11, align 1, !dbg !2698
  %67 = trunc i8 %66 to i1, !dbg !2698
  br i1 %67, label %68, label %87, !dbg !2700

68:                                               ; preds = %57
  %69 = load i32, i32* @x.61
  %70 = load i32, i32* @y.62
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %68, %originalBB1alteredBB
  %77 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2701
  %78 = bitcast %struct.slotvec* %77 to i8*, !dbg !2702
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !2702
  %79 = load i32, i32* @x.61
  %80 = load i32, i32* @y.62
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %87, !dbg !2703

87:                                               ; preds = %originalBBpart24, %57
  %88 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2704
  %89 = load i32, i32* @nslots, align 4, !dbg !2705
  %90 = sext i32 %89 to i64, !dbg !2706
  %91 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %88, i64 %90, !dbg !2706
  %92 = bitcast %struct.slotvec* %91 to i8*, !dbg !2707
  %93 = load i32, i32* %5, align 4, !dbg !2708
  %94 = add nsw i32 %93, 1, !dbg !2709
  %95 = load i32, i32* @nslots, align 4, !dbg !2710
  %96 = sub nsw i32 %94, %95, !dbg !2711
  %97 = sext i32 %96 to i64, !dbg !2712
  %98 = mul i64 %97, 16, !dbg !2713
  call void @llvm.memset.p0i8.i64(i8* align 8 %92, i8 0, i64 %98, i1 false), !dbg !2707
  %99 = load i32, i32* %5, align 4, !dbg !2714
  %100 = add nsw i32 %99, 1, !dbg !2715
  store i32 %100, i32* @nslots, align 4, !dbg !2716
  br label %101, !dbg !2717

101:                                              ; preds = %87, %23
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2718, metadata !DIExpression()), !dbg !2720
  %102 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2721
  %103 = load i32, i32* %5, align 4, !dbg !2722
  %104 = sext i32 %103 to i64, !dbg !2721
  %105 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %102, i64 %104, !dbg !2721
  %106 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %105, i32 0, i32 0, !dbg !2723
  %107 = load i64, i64* %106, align 8, !dbg !2723
  store i64 %107, i64* %13, align 8, !dbg !2720
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2724, metadata !DIExpression()), !dbg !2725
  %108 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2726
  %109 = load i32, i32* %5, align 4, !dbg !2727
  %110 = sext i32 %109 to i64, !dbg !2726
  %111 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %108, i64 %110, !dbg !2726
  %112 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %111, i32 0, i32 1, !dbg !2728
  %113 = load i8*, i8** %112, align 8, !dbg !2728
  store i8* %113, i8** %14, align 8, !dbg !2725
  call void @llvm.dbg.declare(metadata i32* %15, metadata !2729, metadata !DIExpression()), !dbg !2730
  %114 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2731
  %115 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %114, i32 0, i32 1, !dbg !2732
  %116 = load i32, i32* %115, align 4, !dbg !2732
  %117 = or i32 %116, 1, !dbg !2733
  store i32 %117, i32* %15, align 4, !dbg !2730
  call void @llvm.dbg.declare(metadata i64* %16, metadata !2734, metadata !DIExpression()), !dbg !2735
  %118 = load i8*, i8** %14, align 8, !dbg !2736
  %119 = load i64, i64* %13, align 8, !dbg !2737
  %120 = load i8*, i8** %6, align 8, !dbg !2738
  %121 = load i64, i64* %7, align 8, !dbg !2739
  %122 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2740
  %123 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %122, i32 0, i32 0, !dbg !2741
  %124 = load i32, i32* %123, align 8, !dbg !2741
  %125 = load i32, i32* %15, align 4, !dbg !2742
  %126 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2743
  %127 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %126, i32 0, i32 2, !dbg !2744
  %128 = getelementptr inbounds [8 x i32], [8 x i32]* %127, i64 0, i64 0, !dbg !2743
  %129 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2745
  %130 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %129, i32 0, i32 3, !dbg !2746
  %131 = load i8*, i8** %130, align 8, !dbg !2746
  %132 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2747
  %133 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %132, i32 0, i32 4, !dbg !2748
  %134 = load i8*, i8** %133, align 8, !dbg !2748
  %135 = call i64 @quotearg_buffer_restyled(i8* %118, i64 %119, i8* %120, i64 %121, i32 %124, i32 %125, i32* %128, i8* %131, i8* %134), !dbg !2749
  store i64 %135, i64* %16, align 8, !dbg !2735
  %136 = load i64, i64* %13, align 8, !dbg !2750
  %137 = load i64, i64* %16, align 8, !dbg !2752
  %138 = icmp ule i64 %136, %137, !dbg !2753
  br i1 %138, label %139, label %177, !dbg !2754

139:                                              ; preds = %101
  %140 = load i64, i64* %16, align 8, !dbg !2755
  %141 = add i64 %140, 1, !dbg !2757
  store i64 %141, i64* %13, align 8, !dbg !2758
  %142 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2759
  %143 = load i32, i32* %5, align 4, !dbg !2760
  %144 = sext i32 %143 to i64, !dbg !2759
  %145 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %142, i64 %144, !dbg !2759
  %146 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %145, i32 0, i32 0, !dbg !2761
  store i64 %141, i64* %146, align 8, !dbg !2762
  %147 = load i8*, i8** %14, align 8, !dbg !2763
  %148 = icmp ne i8* %147, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !2765
  br i1 %148, label %149, label %151, !dbg !2766

149:                                              ; preds = %139
  %150 = load i8*, i8** %14, align 8, !dbg !2767
  call void @free(i8* %150) #10, !dbg !2768
  br label %151, !dbg !2768

151:                                              ; preds = %149, %139
  %152 = load i64, i64* %13, align 8, !dbg !2769
  %153 = call noalias i8* @xcharalloc(i64 %152), !dbg !2770
  store i8* %153, i8** %14, align 8, !dbg !2771
  %154 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2772
  %155 = load i32, i32* %5, align 4, !dbg !2773
  %156 = sext i32 %155 to i64, !dbg !2772
  %157 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %154, i64 %156, !dbg !2772
  %158 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %157, i32 0, i32 1, !dbg !2774
  store i8* %153, i8** %158, align 8, !dbg !2775
  %159 = load i8*, i8** %14, align 8, !dbg !2776
  %160 = load i64, i64* %13, align 8, !dbg !2777
  %161 = load i8*, i8** %6, align 8, !dbg !2778
  %162 = load i64, i64* %7, align 8, !dbg !2779
  %163 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2780
  %164 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %163, i32 0, i32 0, !dbg !2781
  %165 = load i32, i32* %164, align 8, !dbg !2781
  %166 = load i32, i32* %15, align 4, !dbg !2782
  %167 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2783
  %168 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %167, i32 0, i32 2, !dbg !2784
  %169 = getelementptr inbounds [8 x i32], [8 x i32]* %168, i64 0, i64 0, !dbg !2783
  %170 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2785
  %171 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %170, i32 0, i32 3, !dbg !2786
  %172 = load i8*, i8** %171, align 8, !dbg !2786
  %173 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !2787
  %174 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %173, i32 0, i32 4, !dbg !2788
  %175 = load i8*, i8** %174, align 8, !dbg !2788
  %176 = call i64 @quotearg_buffer_restyled(i8* %159, i64 %160, i8* %161, i64 %162, i32 %165, i32 %166, i32* %169, i8* %172, i8* %175), !dbg !2789
  br label %177, !dbg !2790

177:                                              ; preds = %151, %101
  %178 = load i32, i32* @x.61
  %179 = load i32, i32* @y.62
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %177, %originalBB6alteredBB
  %186 = load i32, i32* %9, align 4, !dbg !2791
  %187 = call i32* @__errno_location() #15, !dbg !2792
  store i32 %186, i32* %187, align 4, !dbg !2793
  %188 = load i8*, i8** %14, align 8, !dbg !2794
  %189 = load i32, i32* @x.61
  %190 = load i32, i32* @y.62
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %188, !dbg !2795

originalBBalteredBB:                              ; preds = %originalBB, %27
  %197 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2679
  %198 = icmp eq %struct.slotvec* %197, @slotvec0, !dbg !2680
  %199 = zext i1 %198 to i8, !dbg !2678
  store i8 %199, i8* %11, align 1, !dbg !2678
  call void @llvm.dbg.declare(metadata !4, metadata !2796, metadata !DIExpression()), !dbg !2682
  store i32 2147483646, i32* %12, align 4, !dbg !2682
  %200 = load i32, i32* %12, align 4, !dbg !2683
  %201 = load i32, i32* %5, align 4, !dbg !2685
  %202 = icmp slt i32 %200, %201, !dbg !2686
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %68
  %203 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !2701
  %204 = bitcast %struct.slotvec* %203 to i8*, !dbg !2702
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %204, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !2702
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %177
  %205 = load i32, i32* %9, align 4, !dbg !2791
  %206 = call i32* @__errno_location() #15, !dbg !2792
  store i32 %205, i32* %206, align 4, !dbg !2793
  %207 = load i8*, i8** %14, align 8, !dbg !2794
  br label %originalBB6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !2834 {
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i64, align 8
  %25 = alloca i8, align 1
  %26 = alloca i8, align 1
  %27 = alloca i8, align 1
  %28 = alloca i8, align 1
  %29 = alloca i8, align 1
  %30 = alloca i8, align 1
  %31 = alloca i8, align 1
  %32 = alloca i8, align 1
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i64, align 8
  %37 = alloca i8, align 1
  %38 = alloca %struct.__mbstate_t, align 4
  %39 = alloca i32, align 4
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2839, metadata !DIExpression()), !dbg !2840
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !2841, metadata !DIExpression()), !dbg !2842
  store i8* %2, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2843, metadata !DIExpression()), !dbg !2844
  store i64 %3, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2845, metadata !DIExpression()), !dbg !2846
  store i32 %4, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !2847, metadata !DIExpression()), !dbg !2848
  store i32 %5, i32* %16, align 4
  call void @llvm.dbg.declare(metadata i32* %16, metadata !2849, metadata !DIExpression()), !dbg !2850
  store i32* %6, i32** %17, align 8
  call void @llvm.dbg.declare(metadata i32** %17, metadata !2851, metadata !DIExpression()), !dbg !2852
  store i8* %7, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !2853, metadata !DIExpression()), !dbg !2854
  store i8* %8, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !2855, metadata !DIExpression()), !dbg !2856
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2857, metadata !DIExpression()), !dbg !2858
  call void @llvm.dbg.declare(metadata i64* %21, metadata !2859, metadata !DIExpression()), !dbg !2860
  store i64 0, i64* %21, align 8, !dbg !2860
  call void @llvm.dbg.declare(metadata i64* %22, metadata !2861, metadata !DIExpression()), !dbg !2862
  store i64 0, i64* %22, align 8, !dbg !2862
  call void @llvm.dbg.declare(metadata i8** %23, metadata !2863, metadata !DIExpression()), !dbg !2864
  store i8* null, i8** %23, align 8, !dbg !2864
  call void @llvm.dbg.declare(metadata i64* %24, metadata !2865, metadata !DIExpression()), !dbg !2866
  store i64 0, i64* %24, align 8, !dbg !2866
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2867, metadata !DIExpression()), !dbg !2868
  store i8 0, i8* %25, align 1, !dbg !2868
  call void @llvm.dbg.declare(metadata i8* %26, metadata !2869, metadata !DIExpression()), !dbg !2870
  %43 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !2871
  %44 = icmp eq i64 %43, 1, !dbg !2872
  %45 = zext i1 %44 to i8, !dbg !2870
  store i8 %45, i8* %26, align 1, !dbg !2870
  call void @llvm.dbg.declare(metadata i8* %27, metadata !2873, metadata !DIExpression()), !dbg !2874
  %46 = load i32, i32* %16, align 4, !dbg !2875
  %47 = and i32 %46, 2, !dbg !2876
  %48 = icmp ne i32 %47, 0, !dbg !2877
  %49 = zext i1 %48 to i8, !dbg !2874
  store i8 %49, i8* %27, align 1, !dbg !2874
  call void @llvm.dbg.declare(metadata i8* %28, metadata !2878, metadata !DIExpression()), !dbg !2879
  store i8 0, i8* %28, align 1, !dbg !2879
  call void @llvm.dbg.declare(metadata i8* %29, metadata !2880, metadata !DIExpression()), !dbg !2881
  store i8 0, i8* %29, align 1, !dbg !2881
  call void @llvm.dbg.declare(metadata i8* %30, metadata !2882, metadata !DIExpression()), !dbg !2883
  store i8 1, i8* %30, align 1, !dbg !2883
  br label %50, !dbg !2884

50:                                               ; preds = %3282, %9
  call void @llvm.dbg.label(metadata !2885), !dbg !2886
  %51 = load i32, i32* %15, align 4, !dbg !2887
  switch i32 %51, label %328 [
    i32 6, label %52
    i32 5, label %53
    i32 7, label %118
    i32 8, label %135
    i32 9, label %135
    i32 10, label %135
    i32 3, label %223
    i32 1, label %240
    i32 4, label %241
    i32 2, label %246
    i32 0, label %311
  ], !dbg !2888

52:                                               ; preds = %50
  store i32 5, i32* %15, align 4, !dbg !2889
  store i8 1, i8* %27, align 1, !dbg !2891
  br label %53, !dbg !2892

53:                                               ; preds = %52, %50
  %54 = load i32, i32* @x.63
  %55 = load i32, i32* @y.64
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %53, %originalBBalteredBB
  %62 = load i8, i8* %27, align 1, !dbg !2893
  %63 = trunc i8 %62 to i1, !dbg !2893
  %64 = load i32, i32* @x.63
  %65 = load i32, i32* @y.64
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %63, label %117, label %72, !dbg !2895

72:                                               ; preds = %originalBBpart2
  br label %73, !dbg !2896

73:                                               ; preds = %72
  %74 = load i32, i32* @x.63
  %75 = load i32, i32* @y.64
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %73, %originalBB1alteredBB
  %82 = load i64, i64* %21, align 8, !dbg !2897
  %83 = load i64, i64* %12, align 8, !dbg !2897
  %84 = icmp ult i64 %82, %83, !dbg !2897
  %85 = load i32, i32* @x.63
  %86 = load i32, i32* @y.64
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %84, label %93, label %97, !dbg !2900

93:                                               ; preds = %originalBBpart24
  %94 = load i8*, i8** %11, align 8, !dbg !2897
  %95 = load i64, i64* %21, align 8, !dbg !2897
  %96 = getelementptr inbounds i8, i8* %94, i64 %95, !dbg !2897
  store i8 34, i8* %96, align 1, !dbg !2897
  br label %97, !dbg !2897

97:                                               ; preds = %93, %originalBBpart24
  %98 = load i64, i64* %21, align 8, !dbg !2900
  %99 = add i64 %98, 1, !dbg !2900
  store i64 %99, i64* %21, align 8, !dbg !2900
  br label %100, !dbg !2900

100:                                              ; preds = %97
  %101 = load i32, i32* @x.63
  %102 = load i32, i32* @y.64
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %100, %originalBB6alteredBB
  %109 = load i32, i32* @x.63
  %110 = load i32, i32* @y.64
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %117, !dbg !2900

117:                                              ; preds = %originalBBpart28, %originalBBpart2
  store i8 1, i8* %25, align 1, !dbg !2901
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.120, i64 0, i64 0), i8** %23, align 8, !dbg !2902
  store i64 1, i64* %24, align 8, !dbg !2903
  br label %329, !dbg !2904

118:                                              ; preds = %50
  %119 = load i32, i32* @x.63
  %120 = load i32, i32* @y.64
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %118, %originalBB10alteredBB
  store i8 1, i8* %25, align 1, !dbg !2905
  store i8 0, i8* %27, align 1, !dbg !2906
  %127 = load i32, i32* @x.63
  %128 = load i32, i32* @y.64
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %329, !dbg !2907

135:                                              ; preds = %50, %50, %50
  %136 = load i32, i32* @x.63
  %137 = load i32, i32* @y.64
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %135, %originalBB14alteredBB
  %144 = load i32, i32* %15, align 4, !dbg !2908
  %145 = icmp ne i32 %144, 10, !dbg !2911
  %146 = load i32, i32* @x.63
  %147 = load i32, i32* @y.64
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %145, label %154, label %159, !dbg !2912

154:                                              ; preds = %originalBBpart216
  %155 = load i32, i32* %15, align 4, !dbg !2913
  %156 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.121, i64 0, i64 0), i32 %155), !dbg !2915
  store i8* %156, i8** %18, align 8, !dbg !2916
  %157 = load i32, i32* %15, align 4, !dbg !2917
  %158 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i32 %157), !dbg !2918
  store i8* %158, i8** %19, align 8, !dbg !2919
  br label %159, !dbg !2920

159:                                              ; preds = %154, %originalBBpart216
  %160 = load i8, i8* %27, align 1, !dbg !2921
  %161 = trunc i8 %160 to i1, !dbg !2921
  br i1 %161, label %203, label %162, !dbg !2923

162:                                              ; preds = %159
  %163 = load i8*, i8** %18, align 8, !dbg !2924
  store i8* %163, i8** %23, align 8, !dbg !2926
  br label %164, !dbg !2927

164:                                              ; preds = %199, %162
  %165 = load i32, i32* @x.63
  %166 = load i32, i32* @y.64
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %164, %originalBB18alteredBB
  %173 = load i8*, i8** %23, align 8, !dbg !2928
  %174 = load i8, i8* %173, align 1, !dbg !2930
  %175 = icmp ne i8 %174, 0, !dbg !2931
  %176 = load i32, i32* @x.63
  %177 = load i32, i32* @y.64
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %175, label %184, label %202, !dbg !2931

184:                                              ; preds = %originalBBpart220
  br label %185, !dbg !2932

185:                                              ; preds = %184
  %186 = load i64, i64* %21, align 8, !dbg !2933
  %187 = load i64, i64* %12, align 8, !dbg !2933
  %188 = icmp ult i64 %186, %187, !dbg !2933
  br i1 %188, label %189, label %195, !dbg !2936

189:                                              ; preds = %185
  %190 = load i8*, i8** %23, align 8, !dbg !2933
  %191 = load i8, i8* %190, align 1, !dbg !2933
  %192 = load i8*, i8** %11, align 8, !dbg !2933
  %193 = load i64, i64* %21, align 8, !dbg !2933
  %194 = getelementptr inbounds i8, i8* %192, i64 %193, !dbg !2933
  store i8 %191, i8* %194, align 1, !dbg !2933
  br label %195, !dbg !2933

195:                                              ; preds = %189, %185
  %196 = load i64, i64* %21, align 8, !dbg !2936
  %197 = add i64 %196, 1, !dbg !2936
  store i64 %197, i64* %21, align 8, !dbg !2936
  br label %198, !dbg !2936

198:                                              ; preds = %195
  br label %199, !dbg !2936

199:                                              ; preds = %198
  %200 = load i8*, i8** %23, align 8, !dbg !2937
  %201 = getelementptr inbounds i8, i8* %200, i32 1, !dbg !2937
  store i8* %201, i8** %23, align 8, !dbg !2937
  br label %164, !dbg !2938, !llvm.loop !2939

202:                                              ; preds = %originalBBpart220
  br label %203, !dbg !2940

203:                                              ; preds = %202, %159
  %204 = load i32, i32* @x.63
  %205 = load i32, i32* @y.64
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %203, %originalBB22alteredBB
  store i8 1, i8* %25, align 1, !dbg !2941
  %212 = load i8*, i8** %19, align 8, !dbg !2942
  store i8* %212, i8** %23, align 8, !dbg !2943
  %213 = load i8*, i8** %23, align 8, !dbg !2944
  %214 = call i64 @strlen(i8* %213) #13, !dbg !2945
  store i64 %214, i64* %24, align 8, !dbg !2946
  %215 = load i32, i32* @x.63
  %216 = load i32, i32* @y.64
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %329, !dbg !2947

223:                                              ; preds = %50
  %224 = load i32, i32* @x.63
  %225 = load i32, i32* @y.64
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %223, %originalBB26alteredBB
  store i8 1, i8* %25, align 1, !dbg !2948
  %232 = load i32, i32* @x.63
  %233 = load i32, i32* @y.64
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %240, !dbg !2949

240:                                              ; preds = %originalBBpart228, %50
  store i8 1, i8* %27, align 1, !dbg !2950
  br label %241, !dbg !2951

241:                                              ; preds = %240, %50
  %242 = load i8, i8* %27, align 1, !dbg !2952
  %243 = trunc i8 %242 to i1, !dbg !2952
  br i1 %243, label %245, label %244, !dbg !2954

244:                                              ; preds = %241
  store i8 1, i8* %25, align 1, !dbg !2955
  br label %245, !dbg !2956

245:                                              ; preds = %244, %241
  br label %246, !dbg !2957

246:                                              ; preds = %245, %50
  %247 = load i32, i32* @x.63
  %248 = load i32, i32* @y.64
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %246, %originalBB30alteredBB
  store i32 2, i32* %15, align 4, !dbg !2958
  %255 = load i8, i8* %27, align 1, !dbg !2959
  %256 = trunc i8 %255 to i1, !dbg !2959
  %257 = load i32, i32* @x.63
  %258 = load i32, i32* @y.64
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %256, label %294, label %265, !dbg !2961

265:                                              ; preds = %originalBBpart232
  br label %266, !dbg !2962

266:                                              ; preds = %265
  %267 = load i64, i64* %21, align 8, !dbg !2963
  %268 = load i64, i64* %12, align 8, !dbg !2963
  %269 = icmp ult i64 %267, %268, !dbg !2963
  br i1 %269, label %270, label %274, !dbg !2966

270:                                              ; preds = %266
  %271 = load i8*, i8** %11, align 8, !dbg !2963
  %272 = load i64, i64* %21, align 8, !dbg !2963
  %273 = getelementptr inbounds i8, i8* %271, i64 %272, !dbg !2963
  store i8 39, i8* %273, align 1, !dbg !2963
  br label %274, !dbg !2963

274:                                              ; preds = %270, %266
  %275 = load i64, i64* %21, align 8, !dbg !2966
  %276 = add i64 %275, 1, !dbg !2966
  store i64 %276, i64* %21, align 8, !dbg !2966
  br label %277, !dbg !2966

277:                                              ; preds = %274
  %278 = load i32, i32* @x.63
  %279 = load i32, i32* @y.64
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %277, %originalBB34alteredBB
  %286 = load i32, i32* @x.63
  %287 = load i32, i32* @y.64
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %294, !dbg !2966

294:                                              ; preds = %originalBBpart236, %originalBBpart232
  %295 = load i32, i32* @x.63
  %296 = load i32, i32* @y.64
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %294, %originalBB38alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i8** %23, align 8, !dbg !2967
  store i64 1, i64* %24, align 8, !dbg !2968
  %303 = load i32, i32* @x.63
  %304 = load i32, i32* @y.64
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %329, !dbg !2969

311:                                              ; preds = %50
  %312 = load i32, i32* @x.63
  %313 = load i32, i32* @y.64
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %311, %originalBB42alteredBB
  store i8 0, i8* %27, align 1, !dbg !2970
  %320 = load i32, i32* @x.63
  %321 = load i32, i32* @y.64
  %322 = sub i32 %320, 1
  %323 = mul i32 %320, %322
  %324 = urem i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %325, %326
  br i1 %327, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %329, !dbg !2971

328:                                              ; preds = %50
  call void @abort() #12, !dbg !2972
  unreachable, !dbg !2972

329:                                              ; preds = %originalBBpart244, %originalBBpart240, %originalBBpart224, %originalBBpart212, %117
  store i64 0, i64* %20, align 8, !dbg !2973
  br label %330, !dbg !2975

330:                                              ; preds = %originalBBpart2723, %329
  %331 = load i64, i64* %14, align 8, !dbg !2976
  %332 = icmp eq i64 %331, -1, !dbg !2978
  br i1 %332, label %333, label %357, !dbg !2976

333:                                              ; preds = %330
  %334 = load i32, i32* @x.63
  %335 = load i32, i32* @y.64
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %333, %originalBB46alteredBB
  %342 = load i8*, i8** %13, align 8, !dbg !2979
  %343 = load i64, i64* %20, align 8, !dbg !2980
  %344 = getelementptr inbounds i8, i8* %342, i64 %343, !dbg !2979
  %345 = load i8, i8* %344, align 1, !dbg !2979
  %346 = sext i8 %345 to i32, !dbg !2979
  %347 = icmp eq i32 %346, 0, !dbg !2981
  %348 = zext i1 %347 to i32, !dbg !2981
  %349 = load i32, i32* @x.63
  %350 = load i32, i32* @y.64
  %351 = sub i32 %349, 1
  %352 = mul i32 %349, %351
  %353 = urem i32 %352, 2
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %354, %355
  br i1 %356, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %362, !dbg !2976

357:                                              ; preds = %330
  %358 = load i64, i64* %20, align 8, !dbg !2982
  %359 = load i64, i64* %14, align 8, !dbg !2983
  %360 = icmp eq i64 %358, %359, !dbg !2984
  %361 = zext i1 %360 to i32, !dbg !2984
  br label %362, !dbg !2976

362:                                              ; preds = %357, %originalBBpart248
  %363 = phi i32 [ %348, %originalBBpart248 ], [ %361, %357 ], !dbg !2976
  %364 = load i32, i32* @x.63
  %365 = load i32, i32* @y.64
  %366 = sub i32 %364, 1
  %367 = mul i32 %364, %366
  %368 = urem i32 %367, 2
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %365, 10
  %371 = or i1 %369, %370
  br i1 %371, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %362, %originalBB50alteredBB
  %372 = icmp ne i32 %363, 0, !dbg !2985
  %373 = xor i1 %372, true, !dbg !2985
  %374 = load i32, i32* @x.63
  %375 = load i32, i32* @y.64
  %376 = sub i32 %374, 1
  %377 = mul i32 %374, %376
  %378 = urem i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %379, %380
  br i1 %381, label %originalBBpart256, label %originalBB50alteredBB

originalBBpart256:                                ; preds = %originalBB50
  br i1 %373, label %382, label %3196, !dbg !2986

382:                                              ; preds = %originalBBpart256
  call void @llvm.dbg.declare(metadata i8* %31, metadata !2987, metadata !DIExpression()), !dbg !2989
  call void @llvm.dbg.declare(metadata i8* %32, metadata !2990, metadata !DIExpression()), !dbg !2991
  call void @llvm.dbg.declare(metadata i8* %33, metadata !2992, metadata !DIExpression()), !dbg !2993
  %383 = load i32, i32* @x.63
  %384 = load i32, i32* @y.64
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %382, %originalBB58alteredBB
  store i8 0, i8* %33, align 1, !dbg !2993
  call void @llvm.dbg.declare(metadata i8* %34, metadata !2994, metadata !DIExpression()), !dbg !2995
  store i8 0, i8* %34, align 1, !dbg !2995
  call void @llvm.dbg.declare(metadata i8* %35, metadata !2996, metadata !DIExpression()), !dbg !2997
  store i8 0, i8* %35, align 1, !dbg !2997
  %391 = load i8, i8* %25, align 1, !dbg !2998
  %392 = trunc i8 %391 to i1, !dbg !2998
  %393 = load i32, i32* @x.63
  %394 = load i32, i32* @y.64
  %395 = sub i32 %393, 1
  %396 = mul i32 %393, %395
  %397 = urem i32 %396, 2
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %398, %399
  br i1 %400, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %392, label %401, label %533, !dbg !3000

401:                                              ; preds = %originalBBpart260
  %402 = load i32, i32* %15, align 4, !dbg !3001
  %403 = icmp ne i32 %402, 2, !dbg !3002
  br i1 %403, label %404, label %533, !dbg !3003

404:                                              ; preds = %401
  %405 = load i64, i64* %24, align 8, !dbg !3004
  %406 = icmp ne i64 %405, 0, !dbg !3004
  br i1 %406, label %407, label %533, !dbg !3005

407:                                              ; preds = %404
  %408 = load i64, i64* %20, align 8, !dbg !3006
  %409 = load i64, i64* %24, align 8, !dbg !3007
  %410 = add i64 %408, %409, !dbg !3008
  %411 = load i64, i64* %14, align 8, !dbg !3009
  %412 = icmp eq i64 %411, -1, !dbg !3010
  br i1 %412, label %413, label %451, !dbg !3011

413:                                              ; preds = %407
  %414 = load i32, i32* @x.63
  %415 = load i32, i32* @y.64
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %413, %originalBB62alteredBB
  %422 = load i64, i64* %24, align 8, !dbg !3012
  %423 = icmp ult i64 1, %422, !dbg !3013
  %424 = load i32, i32* @x.63
  %425 = load i32, i32* @y.64
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %423, label %432, label %451, !dbg !3009

432:                                              ; preds = %originalBBpart264
  %433 = load i32, i32* @x.63
  %434 = load i32, i32* @y.64
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %432, %originalBB66alteredBB
  %441 = load i8*, i8** %13, align 8, !dbg !3014
  %442 = call i64 @strlen(i8* %441) #13, !dbg !3015
  store i64 %442, i64* %14, align 8, !dbg !3016
  %443 = load i32, i32* @x.63
  %444 = load i32, i32* @y.64
  %445 = sub i32 %443, 1
  %446 = mul i32 %443, %445
  %447 = urem i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %448, %449
  br i1 %450, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %453, !dbg !3009

451:                                              ; preds = %originalBBpart264, %407
  %452 = load i64, i64* %14, align 8, !dbg !3017
  br label %453, !dbg !3009

453:                                              ; preds = %451, %originalBBpart268
  %454 = phi i64 [ %442, %originalBBpart268 ], [ %452, %451 ], !dbg !3009
  %455 = load i32, i32* @x.63
  %456 = load i32, i32* @y.64
  %457 = sub i32 %455, 1
  %458 = mul i32 %455, %457
  %459 = urem i32 %458, 2
  %460 = icmp eq i32 %459, 0
  %461 = icmp slt i32 %456, 10
  %462 = or i1 %460, %461
  br i1 %462, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %453, %originalBB70alteredBB
  %463 = icmp ule i64 %410, %454, !dbg !3018
  %464 = load i32, i32* @x.63
  %465 = load i32, i32* @y.64
  %466 = sub i32 %464, 1
  %467 = mul i32 %464, %466
  %468 = urem i32 %467, 2
  %469 = icmp eq i32 %468, 0
  %470 = icmp slt i32 %465, 10
  %471 = or i1 %469, %470
  br i1 %471, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br i1 %463, label %472, label %533, !dbg !3019

472:                                              ; preds = %originalBBpart272
  %473 = load i8*, i8** %13, align 8, !dbg !3020
  %474 = load i64, i64* %20, align 8, !dbg !3021
  %475 = getelementptr inbounds i8, i8* %473, i64 %474, !dbg !3022
  %476 = load i8*, i8** %23, align 8, !dbg !3023
  %477 = load i64, i64* %24, align 8, !dbg !3024
  %478 = call i32 @memcmp(i8* %475, i8* %476, i64 %477) #13, !dbg !3025
  %479 = icmp eq i32 %478, 0, !dbg !3026
  br i1 %479, label %480, label %533, !dbg !3027

480:                                              ; preds = %472
  %481 = load i32, i32* @x.63
  %482 = load i32, i32* @y.64
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %480, %originalBB74alteredBB
  %489 = load i8, i8* %27, align 1, !dbg !3028
  %490 = trunc i8 %489 to i1, !dbg !3028
  %491 = load i32, i32* @x.63
  %492 = load i32, i32* @y.64
  %493 = sub i32 %491, 1
  %494 = mul i32 %491, %493
  %495 = urem i32 %494, 2
  %496 = icmp eq i32 %495, 0
  %497 = icmp slt i32 %492, 10
  %498 = or i1 %496, %497
  br i1 %498, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %490, label %499, label %516, !dbg !3031

499:                                              ; preds = %originalBBpart276
  %500 = load i32, i32* @x.63
  %501 = load i32, i32* @y.64
  %502 = sub i32 %500, 1
  %503 = mul i32 %500, %502
  %504 = urem i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = icmp slt i32 %501, 10
  %507 = or i1 %505, %506
  br i1 %507, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %499, %originalBB78alteredBB
  %508 = load i32, i32* @x.63
  %509 = load i32, i32* @y.64
  %510 = sub i32 %508, 1
  %511 = mul i32 %508, %510
  %512 = urem i32 %511, 2
  %513 = icmp eq i32 %512, 0
  %514 = icmp slt i32 %509, 10
  %515 = or i1 %513, %514
  br i1 %515, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %3454, !dbg !3032

516:                                              ; preds = %originalBBpart276
  %517 = load i32, i32* @x.63
  %518 = load i32, i32* @y.64
  %519 = sub i32 %517, 1
  %520 = mul i32 %517, %519
  %521 = urem i32 %520, 2
  %522 = icmp eq i32 %521, 0
  %523 = icmp slt i32 %518, 10
  %524 = or i1 %522, %523
  br i1 %524, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %516, %originalBB82alteredBB
  store i8 1, i8* %33, align 1, !dbg !3033
  %525 = load i32, i32* @x.63
  %526 = load i32, i32* @y.64
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br label %533, !dbg !3034

533:                                              ; preds = %originalBBpart284, %472, %originalBBpart272, %404, %401, %originalBBpart260
  %534 = load i32, i32* @x.63
  %535 = load i32, i32* @y.64
  %536 = sub i32 %534, 1
  %537 = mul i32 %534, %536
  %538 = urem i32 %537, 2
  %539 = icmp eq i32 %538, 0
  %540 = icmp slt i32 %535, 10
  %541 = or i1 %539, %540
  br i1 %541, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %533, %originalBB86alteredBB
  %542 = load i8*, i8** %13, align 8, !dbg !3035
  %543 = load i64, i64* %20, align 8, !dbg !3036
  %544 = getelementptr inbounds i8, i8* %542, i64 %543, !dbg !3035
  %545 = load i8, i8* %544, align 1, !dbg !3035
  store i8 %545, i8* %31, align 1, !dbg !3037
  %546 = load i8, i8* %31, align 1, !dbg !3038
  %547 = zext i8 %546 to i32, !dbg !3038
  %548 = load i32, i32* @x.63
  %549 = load i32, i32* @y.64
  %550 = sub i32 %548, 1
  %551 = mul i32 %548, %550
  %552 = urem i32 %551, 2
  %553 = icmp eq i32 %552, 0
  %554 = icmp slt i32 %549, 10
  %555 = or i1 %553, %554
  br i1 %555, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  switch i32 %547, label %1808 [
    i32 0, label %556
    i32 63, label %917
    i32 7, label %1221
    i32 8, label %1238
    i32 12, label %1239
    i32 10, label %1256
    i32 13, label %1257
    i32 9, label %1258
    i32 11, label %1259
    i32 92, label %1260
    i32 123, label %1454
    i32 125, label %1454
    i32 35, label %1500
    i32 126, label %1500
    i32 32, label %1521
    i32 33, label %1538
    i32 34, label %1538
    i32 36, label %1538
    i32 38, label %1538
    i32 40, label %1538
    i32 41, label %1538
    i32 42, label %1538
    i32 59, label %1538
    i32 60, label %1538
    i32 61, label %1538
    i32 62, label %1538
    i32 91, label %1538
    i32 94, label %1538
    i32 96, label %1538
    i32 124, label %1538
    i32 39, label %1594
    i32 37, label %1791
    i32 43, label %1791
    i32 44, label %1791
    i32 45, label %1791
    i32 46, label %1791
    i32 47, label %1791
    i32 48, label %1791
    i32 49, label %1791
    i32 50, label %1791
    i32 51, label %1791
    i32 52, label %1791
    i32 53, label %1791
    i32 54, label %1791
    i32 55, label %1791
    i32 56, label %1791
    i32 57, label %1791
    i32 58, label %1791
    i32 65, label %1791
    i32 66, label %1791
    i32 67, label %1791
    i32 68, label %1791
    i32 69, label %1791
    i32 70, label %1791
    i32 71, label %1791
    i32 72, label %1791
    i32 73, label %1791
    i32 74, label %1791
    i32 75, label %1791
    i32 76, label %1791
    i32 77, label %1791
    i32 78, label %1791
    i32 79, label %1791
    i32 80, label %1791
    i32 81, label %1791
    i32 82, label %1791
    i32 83, label %1791
    i32 84, label %1791
    i32 85, label %1791
    i32 86, label %1791
    i32 87, label %1791
    i32 88, label %1791
    i32 89, label %1791
    i32 90, label %1791
    i32 93, label %1791
    i32 95, label %1791
    i32 97, label %1791
    i32 98, label %1791
    i32 99, label %1791
    i32 100, label %1791
    i32 101, label %1791
    i32 102, label %1791
    i32 103, label %1791
    i32 104, label %1791
    i32 105, label %1791
    i32 106, label %1791
    i32 107, label %1791
    i32 108, label %1791
    i32 109, label %1791
    i32 110, label %1791
    i32 111, label %1791
    i32 112, label %1791
    i32 113, label %1791
    i32 114, label %1791
    i32 115, label %1791
    i32 116, label %1791
    i32 117, label %1791
    i32 118, label %1791
    i32 119, label %1791
    i32 120, label %1791
    i32 121, label %1791
    i32 122, label %1791
  ], !dbg !3039

556:                                              ; preds = %originalBBpart288
  %557 = load i32, i32* @x.63
  %558 = load i32, i32* @y.64
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %556, %originalBB90alteredBB
  %565 = load i8, i8* %25, align 1, !dbg !3040
  %566 = trunc i8 %565 to i1, !dbg !3040
  %567 = load i32, i32* @x.63
  %568 = load i32, i32* @y.64
  %569 = sub i32 %567, 1
  %570 = mul i32 %567, %569
  %571 = urem i32 %570, 2
  %572 = icmp eq i32 %571, 0
  %573 = icmp slt i32 %568, 10
  %574 = or i1 %572, %573
  br i1 %574, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br i1 %566, label %575, label %878, !dbg !3043

575:                                              ; preds = %originalBBpart292
  br label %576, !dbg !3044

576:                                              ; preds = %575
  %577 = load i32, i32* @x.63
  %578 = load i32, i32* @y.64
  %579 = sub i32 %577, 1
  %580 = mul i32 %577, %579
  %581 = urem i32 %580, 2
  %582 = icmp eq i32 %581, 0
  %583 = icmp slt i32 %578, 10
  %584 = or i1 %582, %583
  br i1 %584, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %576, %originalBB94alteredBB
  %585 = load i8, i8* %27, align 1, !dbg !3046
  %586 = trunc i8 %585 to i1, !dbg !3046
  %587 = load i32, i32* @x.63
  %588 = load i32, i32* @y.64
  %589 = sub i32 %587, 1
  %590 = mul i32 %587, %589
  %591 = urem i32 %590, 2
  %592 = icmp eq i32 %591, 0
  %593 = icmp slt i32 %588, 10
  %594 = or i1 %592, %593
  br i1 %594, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br i1 %586, label %595, label %612, !dbg !3049

595:                                              ; preds = %originalBBpart296
  %596 = load i32, i32* @x.63
  %597 = load i32, i32* @y.64
  %598 = sub i32 %596, 1
  %599 = mul i32 %596, %598
  %600 = urem i32 %599, 2
  %601 = icmp eq i32 %600, 0
  %602 = icmp slt i32 %597, 10
  %603 = or i1 %601, %602
  br i1 %603, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %595, %originalBB98alteredBB
  %604 = load i32, i32* @x.63
  %605 = load i32, i32* @y.64
  %606 = sub i32 %604, 1
  %607 = mul i32 %604, %606
  %608 = urem i32 %607, 2
  %609 = icmp eq i32 %608, 0
  %610 = icmp slt i32 %605, 10
  %611 = or i1 %609, %610
  br i1 %611, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br label %3454, !dbg !3046

612:                                              ; preds = %originalBBpart296
  %613 = load i32, i32* @x.63
  %614 = load i32, i32* @y.64
  %615 = sub i32 %613, 1
  %616 = mul i32 %613, %615
  %617 = urem i32 %616, 2
  %618 = icmp eq i32 %617, 0
  %619 = icmp slt i32 %614, 10
  %620 = or i1 %618, %619
  br i1 %620, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %612, %originalBB102alteredBB
  store i8 1, i8* %34, align 1, !dbg !3049
  %621 = load i32, i32* %15, align 4, !dbg !3050
  %622 = icmp eq i32 %621, 2, !dbg !3050
  %623 = load i32, i32* @x.63
  %624 = load i32, i32* @y.64
  %625 = sub i32 %623, 1
  %626 = mul i32 %623, %625
  %627 = urem i32 %626, 2
  %628 = icmp eq i32 %627, 0
  %629 = icmp slt i32 %624, 10
  %630 = or i1 %628, %629
  br i1 %630, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br i1 %622, label %631, label %735, !dbg !3050

631:                                              ; preds = %originalBBpart2104
  %632 = load i32, i32* @x.63
  %633 = load i32, i32* @y.64
  %634 = sub i32 %632, 1
  %635 = mul i32 %632, %634
  %636 = urem i32 %635, 2
  %637 = icmp eq i32 %636, 0
  %638 = icmp slt i32 %633, 10
  %639 = or i1 %637, %638
  br i1 %639, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %631, %originalBB106alteredBB
  %640 = load i8, i8* %28, align 1, !dbg !3050
  %641 = trunc i8 %640 to i1, !dbg !3050
  %642 = load i32, i32* @x.63
  %643 = load i32, i32* @y.64
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br i1 %641, label %735, label %650, !dbg !3049

650:                                              ; preds = %originalBBpart2108
  br label %651, !dbg !3052

651:                                              ; preds = %650
  %652 = load i64, i64* %21, align 8, !dbg !3054
  %653 = load i64, i64* %12, align 8, !dbg !3054
  %654 = icmp ult i64 %652, %653, !dbg !3054
  br i1 %654, label %655, label %659, !dbg !3057

655:                                              ; preds = %651
  %656 = load i8*, i8** %11, align 8, !dbg !3054
  %657 = load i64, i64* %21, align 8, !dbg !3054
  %658 = getelementptr inbounds i8, i8* %656, i64 %657, !dbg !3054
  store i8 39, i8* %658, align 1, !dbg !3054
  br label %659, !dbg !3054

659:                                              ; preds = %655, %651
  %660 = load i64, i64* %21, align 8, !dbg !3057
  %661 = add i64 %660, 1, !dbg !3057
  store i64 %661, i64* %21, align 8, !dbg !3057
  br label %662, !dbg !3057

662:                                              ; preds = %659
  %663 = load i32, i32* @x.63
  %664 = load i32, i32* @y.64
  %665 = sub i32 %663, 1
  %666 = mul i32 %663, %665
  %667 = urem i32 %666, 2
  %668 = icmp eq i32 %667, 0
  %669 = icmp slt i32 %664, 10
  %670 = or i1 %668, %669
  br i1 %670, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %662, %originalBB110alteredBB
  %671 = load i32, i32* @x.63
  %672 = load i32, i32* @y.64
  %673 = sub i32 %671, 1
  %674 = mul i32 %671, %673
  %675 = urem i32 %674, 2
  %676 = icmp eq i32 %675, 0
  %677 = icmp slt i32 %672, 10
  %678 = or i1 %676, %677
  br i1 %678, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %679, !dbg !3052

679:                                              ; preds = %originalBBpart2112
  %680 = load i64, i64* %21, align 8, !dbg !3058
  %681 = load i64, i64* %12, align 8, !dbg !3058
  %682 = icmp ult i64 %680, %681, !dbg !3058
  br i1 %682, label %683, label %703, !dbg !3061

683:                                              ; preds = %679
  %684 = load i32, i32* @x.63
  %685 = load i32, i32* @y.64
  %686 = sub i32 %684, 1
  %687 = mul i32 %684, %686
  %688 = urem i32 %687, 2
  %689 = icmp eq i32 %688, 0
  %690 = icmp slt i32 %685, 10
  %691 = or i1 %689, %690
  br i1 %691, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %683, %originalBB114alteredBB
  %692 = load i8*, i8** %11, align 8, !dbg !3058
  %693 = load i64, i64* %21, align 8, !dbg !3058
  %694 = getelementptr inbounds i8, i8* %692, i64 %693, !dbg !3058
  store i8 36, i8* %694, align 1, !dbg !3058
  %695 = load i32, i32* @x.63
  %696 = load i32, i32* @y.64
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %703, !dbg !3058

703:                                              ; preds = %originalBBpart2116, %679
  %704 = load i64, i64* %21, align 8, !dbg !3061
  %705 = add i64 %704, 1, !dbg !3061
  store i64 %705, i64* %21, align 8, !dbg !3061
  br label %706, !dbg !3061

706:                                              ; preds = %703
  br label %707, !dbg !3052

707:                                              ; preds = %706
  %708 = load i32, i32* @x.63
  %709 = load i32, i32* @y.64
  %710 = sub i32 %708, 1
  %711 = mul i32 %708, %710
  %712 = urem i32 %711, 2
  %713 = icmp eq i32 %712, 0
  %714 = icmp slt i32 %709, 10
  %715 = or i1 %713, %714
  br i1 %715, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %707, %originalBB118alteredBB
  %716 = load i64, i64* %21, align 8, !dbg !3062
  %717 = load i64, i64* %12, align 8, !dbg !3062
  %718 = icmp ult i64 %716, %717, !dbg !3062
  %719 = load i32, i32* @x.63
  %720 = load i32, i32* @y.64
  %721 = sub i32 %719, 1
  %722 = mul i32 %719, %721
  %723 = urem i32 %722, 2
  %724 = icmp eq i32 %723, 0
  %725 = icmp slt i32 %720, 10
  %726 = or i1 %724, %725
  br i1 %726, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br i1 %718, label %727, label %731, !dbg !3065

727:                                              ; preds = %originalBBpart2120
  %728 = load i8*, i8** %11, align 8, !dbg !3062
  %729 = load i64, i64* %21, align 8, !dbg !3062
  %730 = getelementptr inbounds i8, i8* %728, i64 %729, !dbg !3062
  store i8 39, i8* %730, align 1, !dbg !3062
  br label %731, !dbg !3062

731:                                              ; preds = %727, %originalBBpart2120
  %732 = load i64, i64* %21, align 8, !dbg !3065
  %733 = add i64 %732, 1, !dbg !3065
  store i64 %733, i64* %21, align 8, !dbg !3065
  br label %734, !dbg !3065

734:                                              ; preds = %731
  store i8 1, i8* %28, align 1, !dbg !3052
  br label %735, !dbg !3052

735:                                              ; preds = %734, %originalBBpart2108, %originalBBpart2104
  br label %736, !dbg !3049

736:                                              ; preds = %735
  %737 = load i64, i64* %21, align 8, !dbg !3066
  %738 = load i64, i64* %12, align 8, !dbg !3066
  %739 = icmp ult i64 %737, %738, !dbg !3066
  br i1 %739, label %740, label %760, !dbg !3069

740:                                              ; preds = %736
  %741 = load i32, i32* @x.63
  %742 = load i32, i32* @y.64
  %743 = sub i32 %741, 1
  %744 = mul i32 %741, %743
  %745 = urem i32 %744, 2
  %746 = icmp eq i32 %745, 0
  %747 = icmp slt i32 %742, 10
  %748 = or i1 %746, %747
  br i1 %748, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %740, %originalBB122alteredBB
  %749 = load i8*, i8** %11, align 8, !dbg !3066
  %750 = load i64, i64* %21, align 8, !dbg !3066
  %751 = getelementptr inbounds i8, i8* %749, i64 %750, !dbg !3066
  store i8 92, i8* %751, align 1, !dbg !3066
  %752 = load i32, i32* @x.63
  %753 = load i32, i32* @y.64
  %754 = sub i32 %752, 1
  %755 = mul i32 %752, %754
  %756 = urem i32 %755, 2
  %757 = icmp eq i32 %756, 0
  %758 = icmp slt i32 %753, 10
  %759 = or i1 %757, %758
  br i1 %759, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br label %760, !dbg !3066

760:                                              ; preds = %originalBBpart2124, %736
  %761 = load i64, i64* %21, align 8, !dbg !3069
  %762 = add i64 %761, 1, !dbg !3069
  store i64 %762, i64* %21, align 8, !dbg !3069
  br label %763, !dbg !3069

763:                                              ; preds = %760
  br label %764, !dbg !3049

764:                                              ; preds = %763
  %765 = load i32, i32* %15, align 4, !dbg !3070
  %766 = icmp ne i32 %765, 2, !dbg !3072
  br i1 %766, label %767, label %877, !dbg !3073

767:                                              ; preds = %764
  %768 = load i64, i64* %20, align 8, !dbg !3074
  %769 = add i64 %768, 1, !dbg !3075
  %770 = load i64, i64* %14, align 8, !dbg !3076
  %771 = icmp ult i64 %769, %770, !dbg !3077
  br i1 %771, label %772, label %877, !dbg !3078

772:                                              ; preds = %767
  %773 = load i8*, i8** %13, align 8, !dbg !3079
  %774 = load i64, i64* %20, align 8, !dbg !3080
  %775 = add i64 %774, 1, !dbg !3081
  %776 = getelementptr inbounds i8, i8* %773, i64 %775, !dbg !3079
  %777 = load i8, i8* %776, align 1, !dbg !3079
  %778 = sext i8 %777 to i32, !dbg !3079
  %779 = icmp sle i32 48, %778, !dbg !3082
  br i1 %779, label %780, label %877, !dbg !3083

780:                                              ; preds = %772
  %781 = load i32, i32* @x.63
  %782 = load i32, i32* @y.64
  %783 = sub i32 %781, 1
  %784 = mul i32 %781, %783
  %785 = urem i32 %784, 2
  %786 = icmp eq i32 %785, 0
  %787 = icmp slt i32 %782, 10
  %788 = or i1 %786, %787
  br i1 %788, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %780, %originalBB126alteredBB
  %789 = load i8*, i8** %13, align 8, !dbg !3084
  %790 = load i64, i64* %20, align 8, !dbg !3085
  %791 = add i64 %790, 1, !dbg !3086
  %792 = getelementptr inbounds i8, i8* %789, i64 %791, !dbg !3084
  %793 = load i8, i8* %792, align 1, !dbg !3084
  %794 = sext i8 %793 to i32, !dbg !3084
  %795 = icmp sle i32 %794, 57, !dbg !3087
  %796 = load i32, i32* @x.63
  %797 = load i32, i32* @y.64
  %798 = sub i32 %796, 1
  %799 = mul i32 %796, %798
  %800 = urem i32 %799, 2
  %801 = icmp eq i32 %800, 0
  %802 = icmp slt i32 %797, 10
  %803 = or i1 %801, %802
  br i1 %803, label %originalBBpart2136, label %originalBB126alteredBB

originalBBpart2136:                               ; preds = %originalBB126
  br i1 %795, label %804, label %877, !dbg !3088

804:                                              ; preds = %originalBBpart2136
  br label %805, !dbg !3089

805:                                              ; preds = %804
  %806 = load i64, i64* %21, align 8, !dbg !3091
  %807 = load i64, i64* %12, align 8, !dbg !3091
  %808 = icmp ult i64 %806, %807, !dbg !3091
  br i1 %808, label %809, label %813, !dbg !3094

809:                                              ; preds = %805
  %810 = load i8*, i8** %11, align 8, !dbg !3091
  %811 = load i64, i64* %21, align 8, !dbg !3091
  %812 = getelementptr inbounds i8, i8* %810, i64 %811, !dbg !3091
  store i8 48, i8* %812, align 1, !dbg !3091
  br label %813, !dbg !3091

813:                                              ; preds = %809, %805
  %814 = load i64, i64* %21, align 8, !dbg !3094
  %815 = add i64 %814, 1, !dbg !3094
  store i64 %815, i64* %21, align 8, !dbg !3094
  br label %816, !dbg !3094

816:                                              ; preds = %813
  br label %817, !dbg !3095

817:                                              ; preds = %816
  %818 = load i32, i32* @x.63
  %819 = load i32, i32* @y.64
  %820 = sub i32 %818, 1
  %821 = mul i32 %818, %820
  %822 = urem i32 %821, 2
  %823 = icmp eq i32 %822, 0
  %824 = icmp slt i32 %819, 10
  %825 = or i1 %823, %824
  br i1 %825, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %817, %originalBB138alteredBB
  %826 = load i64, i64* %21, align 8, !dbg !3096
  %827 = load i64, i64* %12, align 8, !dbg !3096
  %828 = icmp ult i64 %826, %827, !dbg !3096
  %829 = load i32, i32* @x.63
  %830 = load i32, i32* @y.64
  %831 = sub i32 %829, 1
  %832 = mul i32 %829, %831
  %833 = urem i32 %832, 2
  %834 = icmp eq i32 %833, 0
  %835 = icmp slt i32 %830, 10
  %836 = or i1 %834, %835
  br i1 %836, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br i1 %828, label %837, label %841, !dbg !3099

837:                                              ; preds = %originalBBpart2140
  %838 = load i8*, i8** %11, align 8, !dbg !3096
  %839 = load i64, i64* %21, align 8, !dbg !3096
  %840 = getelementptr inbounds i8, i8* %838, i64 %839, !dbg !3096
  store i8 48, i8* %840, align 1, !dbg !3096
  br label %841, !dbg !3096

841:                                              ; preds = %837, %originalBBpart2140
  %842 = load i32, i32* @x.63
  %843 = load i32, i32* @y.64
  %844 = sub i32 %842, 1
  %845 = mul i32 %842, %844
  %846 = urem i32 %845, 2
  %847 = icmp eq i32 %846, 0
  %848 = icmp slt i32 %843, 10
  %849 = or i1 %847, %848
  br i1 %849, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %841, %originalBB142alteredBB
  %850 = load i64, i64* %21, align 8, !dbg !3099
  %851 = add i64 %850, 1, !dbg !3099
  store i64 %851, i64* %21, align 8, !dbg !3099
  %852 = load i32, i32* @x.63
  %853 = load i32, i32* @y.64
  %854 = sub i32 %852, 1
  %855 = mul i32 %852, %854
  %856 = urem i32 %855, 2
  %857 = icmp eq i32 %856, 0
  %858 = icmp slt i32 %853, 10
  %859 = or i1 %857, %858
  br i1 %859, label %originalBBpart2152, label %originalBB142alteredBB

originalBBpart2152:                               ; preds = %originalBB142
  br label %860, !dbg !3099

860:                                              ; preds = %originalBBpart2152
  %861 = load i32, i32* @x.63
  %862 = load i32, i32* @y.64
  %863 = sub i32 %861, 1
  %864 = mul i32 %861, %863
  %865 = urem i32 %864, 2
  %866 = icmp eq i32 %865, 0
  %867 = icmp slt i32 %862, 10
  %868 = or i1 %866, %867
  br i1 %868, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %860, %originalBB154alteredBB
  %869 = load i32, i32* @x.63
  %870 = load i32, i32* @y.64
  %871 = sub i32 %869, 1
  %872 = mul i32 %869, %871
  %873 = urem i32 %872, 2
  %874 = icmp eq i32 %873, 0
  %875 = icmp slt i32 %870, 10
  %876 = or i1 %874, %875
  br i1 %876, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br label %877, !dbg !3100

877:                                              ; preds = %originalBBpart2156, %originalBBpart2136, %772, %767, %764
  store i8 48, i8* %31, align 1, !dbg !3101
  br label %900, !dbg !3102

878:                                              ; preds = %originalBBpart292
  %879 = load i32, i32* %16, align 4, !dbg !3103
  %880 = and i32 %879, 1, !dbg !3105
  %881 = icmp ne i32 %880, 0, !dbg !3105
  br i1 %881, label %882, label %899, !dbg !3106

882:                                              ; preds = %878
  %883 = load i32, i32* @x.63
  %884 = load i32, i32* @y.64
  %885 = sub i32 %883, 1
  %886 = mul i32 %883, %885
  %887 = urem i32 %886, 2
  %888 = icmp eq i32 %887, 0
  %889 = icmp slt i32 %884, 10
  %890 = or i1 %888, %889
  br i1 %890, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %882, %originalBB158alteredBB
  %891 = load i32, i32* @x.63
  %892 = load i32, i32* @y.64
  %893 = sub i32 %891, 1
  %894 = mul i32 %891, %893
  %895 = urem i32 %894, 2
  %896 = icmp eq i32 %895, 0
  %897 = icmp slt i32 %892, 10
  %898 = or i1 %896, %897
  br i1 %898, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br label %3177, !dbg !3107

899:                                              ; preds = %878
  br label %900

900:                                              ; preds = %899, %877
  %901 = load i32, i32* @x.63
  %902 = load i32, i32* @y.64
  %903 = sub i32 %901, 1
  %904 = mul i32 %901, %903
  %905 = urem i32 %904, 2
  %906 = icmp eq i32 %905, 0
  %907 = icmp slt i32 %902, 10
  %908 = or i1 %906, %907
  br i1 %908, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %900, %originalBB162alteredBB
  %909 = load i32, i32* @x.63
  %910 = load i32, i32* @y.64
  %911 = sub i32 %909, 1
  %912 = mul i32 %909, %911
  %913 = urem i32 %912, 2
  %914 = icmp eq i32 %913, 0
  %915 = icmp slt i32 %910, 10
  %916 = or i1 %914, %915
  br i1 %916, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br label %2681, !dbg !3108

917:                                              ; preds = %originalBBpart288
  %918 = load i32, i32* %15, align 4, !dbg !3109
  switch i32 %918, label %1203 [
    i32 2, label %919
    i32 5, label %924
  ], !dbg !3110

919:                                              ; preds = %917
  %920 = load i8, i8* %27, align 1, !dbg !3111
  %921 = trunc i8 %920 to i1, !dbg !3111
  br i1 %921, label %922, label %923, !dbg !3114

922:                                              ; preds = %919
  br label %3454, !dbg !3115

923:                                              ; preds = %919
  br label %1220, !dbg !3116

924:                                              ; preds = %917
  %925 = load i32, i32* %16, align 4, !dbg !3117
  %926 = and i32 %925, 4, !dbg !3119
  %927 = icmp ne i32 %926, 0, !dbg !3119
  br i1 %927, label %928, label %1202, !dbg !3120

928:                                              ; preds = %924
  %929 = load i64, i64* %20, align 8, !dbg !3121
  %930 = add i64 %929, 2, !dbg !3122
  %931 = load i64, i64* %14, align 8, !dbg !3123
  %932 = icmp ult i64 %930, %931, !dbg !3124
  br i1 %932, label %933, label %1202, !dbg !3125

933:                                              ; preds = %928
  %934 = load i32, i32* @x.63
  %935 = load i32, i32* @y.64
  %936 = sub i32 %934, 1
  %937 = mul i32 %934, %936
  %938 = urem i32 %937, 2
  %939 = icmp eq i32 %938, 0
  %940 = icmp slt i32 %935, 10
  %941 = or i1 %939, %940
  br i1 %941, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %933, %originalBB166alteredBB
  %942 = load i8*, i8** %13, align 8, !dbg !3126
  %943 = load i64, i64* %20, align 8, !dbg !3127
  %944 = add i64 %943, 1, !dbg !3128
  %945 = getelementptr inbounds i8, i8* %942, i64 %944, !dbg !3126
  %946 = load i8, i8* %945, align 1, !dbg !3126
  %947 = sext i8 %946 to i32, !dbg !3126
  %948 = icmp eq i32 %947, 63, !dbg !3129
  %949 = load i32, i32* @x.63
  %950 = load i32, i32* @y.64
  %951 = sub i32 %949, 1
  %952 = mul i32 %949, %951
  %953 = urem i32 %952, 2
  %954 = icmp eq i32 %953, 0
  %955 = icmp slt i32 %950, 10
  %956 = or i1 %954, %955
  br i1 %956, label %originalBBpart2170, label %originalBB166alteredBB

originalBBpart2170:                               ; preds = %originalBB166
  br i1 %948, label %957, label %1202, !dbg !3130

957:                                              ; preds = %originalBBpart2170
  %958 = load i32, i32* @x.63
  %959 = load i32, i32* @y.64
  %960 = sub i32 %958, 1
  %961 = mul i32 %958, %960
  %962 = urem i32 %961, 2
  %963 = icmp eq i32 %962, 0
  %964 = icmp slt i32 %959, 10
  %965 = or i1 %963, %964
  br i1 %965, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %957, %originalBB172alteredBB
  %966 = load i8*, i8** %13, align 8, !dbg !3131
  %967 = load i64, i64* %20, align 8, !dbg !3132
  %968 = add i64 %967, 2, !dbg !3133
  %969 = getelementptr inbounds i8, i8* %966, i64 %968, !dbg !3131
  %970 = load i8, i8* %969, align 1, !dbg !3131
  %971 = sext i8 %970 to i32, !dbg !3131
  %972 = load i32, i32* @x.63
  %973 = load i32, i32* @y.64
  %974 = sub i32 %972, 1
  %975 = mul i32 %972, %974
  %976 = urem i32 %975, 2
  %977 = icmp eq i32 %976, 0
  %978 = icmp slt i32 %973, 10
  %979 = or i1 %977, %978
  br i1 %979, label %originalBBpart2184, label %originalBB172alteredBB

originalBBpart2184:                               ; preds = %originalBB172
  switch i32 %971, label %1184 [
    i32 33, label %980
    i32 39, label %980
    i32 40, label %980
    i32 41, label %980
    i32 45, label %980
    i32 47, label %980
    i32 60, label %980
    i32 61, label %980
    i32 62, label %980
  ], !dbg !3134

980:                                              ; preds = %originalBBpart2184, %originalBBpart2184, %originalBBpart2184, %originalBBpart2184, %originalBBpart2184, %originalBBpart2184, %originalBBpart2184, %originalBBpart2184, %originalBBpart2184
  %981 = load i32, i32* @x.63
  %982 = load i32, i32* @y.64
  %983 = sub i32 %981, 1
  %984 = mul i32 %981, %983
  %985 = urem i32 %984, 2
  %986 = icmp eq i32 %985, 0
  %987 = icmp slt i32 %982, 10
  %988 = or i1 %986, %987
  br i1 %988, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %980, %originalBB186alteredBB
  %989 = load i8, i8* %27, align 1, !dbg !3135
  %990 = trunc i8 %989 to i1, !dbg !3135
  %991 = load i32, i32* @x.63
  %992 = load i32, i32* @y.64
  %993 = sub i32 %991, 1
  %994 = mul i32 %991, %993
  %995 = urem i32 %994, 2
  %996 = icmp eq i32 %995, 0
  %997 = icmp slt i32 %992, 10
  %998 = or i1 %996, %997
  br i1 %998, label %originalBBpart2188, label %originalBB186alteredBB

originalBBpart2188:                               ; preds = %originalBB186
  br i1 %990, label %999, label %1000, !dbg !3138

999:                                              ; preds = %originalBBpart2188
  br label %3454, !dbg !3139

1000:                                             ; preds = %originalBBpart2188
  %1001 = load i8*, i8** %13, align 8, !dbg !3140
  %1002 = load i64, i64* %20, align 8, !dbg !3141
  %1003 = add i64 %1002, 2, !dbg !3142
  %1004 = getelementptr inbounds i8, i8* %1001, i64 %1003, !dbg !3140
  %1005 = load i8, i8* %1004, align 1, !dbg !3140
  store i8 %1005, i8* %31, align 1, !dbg !3143
  %1006 = load i64, i64* %20, align 8, !dbg !3144
  %1007 = add i64 %1006, 2, !dbg !3144
  store i64 %1007, i64* %20, align 8, !dbg !3144
  br label %1008, !dbg !3145

1008:                                             ; preds = %1000
  %1009 = load i32, i32* @x.63
  %1010 = load i32, i32* @y.64
  %1011 = sub i32 %1009, 1
  %1012 = mul i32 %1009, %1011
  %1013 = urem i32 %1012, 2
  %1014 = icmp eq i32 %1013, 0
  %1015 = icmp slt i32 %1010, 10
  %1016 = or i1 %1014, %1015
  br i1 %1016, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %1008, %originalBB190alteredBB
  %1017 = load i64, i64* %21, align 8, !dbg !3146
  %1018 = load i64, i64* %12, align 8, !dbg !3146
  %1019 = icmp ult i64 %1017, %1018, !dbg !3146
  %1020 = load i32, i32* @x.63
  %1021 = load i32, i32* @y.64
  %1022 = sub i32 %1020, 1
  %1023 = mul i32 %1020, %1022
  %1024 = urem i32 %1023, 2
  %1025 = icmp eq i32 %1024, 0
  %1026 = icmp slt i32 %1021, 10
  %1027 = or i1 %1025, %1026
  br i1 %1027, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  br i1 %1019, label %1028, label %1048, !dbg !3149

1028:                                             ; preds = %originalBBpart2192
  %1029 = load i32, i32* @x.63
  %1030 = load i32, i32* @y.64
  %1031 = sub i32 %1029, 1
  %1032 = mul i32 %1029, %1031
  %1033 = urem i32 %1032, 2
  %1034 = icmp eq i32 %1033, 0
  %1035 = icmp slt i32 %1030, 10
  %1036 = or i1 %1034, %1035
  br i1 %1036, label %originalBB194, label %originalBB194alteredBB

originalBB194:                                    ; preds = %1028, %originalBB194alteredBB
  %1037 = load i8*, i8** %11, align 8, !dbg !3146
  %1038 = load i64, i64* %21, align 8, !dbg !3146
  %1039 = getelementptr inbounds i8, i8* %1037, i64 %1038, !dbg !3146
  store i8 63, i8* %1039, align 1, !dbg !3146
  %1040 = load i32, i32* @x.63
  %1041 = load i32, i32* @y.64
  %1042 = sub i32 %1040, 1
  %1043 = mul i32 %1040, %1042
  %1044 = urem i32 %1043, 2
  %1045 = icmp eq i32 %1044, 0
  %1046 = icmp slt i32 %1041, 10
  %1047 = or i1 %1045, %1046
  br i1 %1047, label %originalBBpart2196, label %originalBB194alteredBB

originalBBpart2196:                               ; preds = %originalBB194
  br label %1048, !dbg !3146

1048:                                             ; preds = %originalBBpart2196, %originalBBpart2192
  %1049 = load i32, i32* @x.63
  %1050 = load i32, i32* @y.64
  %1051 = sub i32 %1049, 1
  %1052 = mul i32 %1049, %1051
  %1053 = urem i32 %1052, 2
  %1054 = icmp eq i32 %1053, 0
  %1055 = icmp slt i32 %1050, 10
  %1056 = or i1 %1054, %1055
  br i1 %1056, label %originalBB198, label %originalBB198alteredBB

originalBB198:                                    ; preds = %1048, %originalBB198alteredBB
  %1057 = load i64, i64* %21, align 8, !dbg !3149
  %1058 = add i64 %1057, 1, !dbg !3149
  store i64 %1058, i64* %21, align 8, !dbg !3149
  %1059 = load i32, i32* @x.63
  %1060 = load i32, i32* @y.64
  %1061 = sub i32 %1059, 1
  %1062 = mul i32 %1059, %1061
  %1063 = urem i32 %1062, 2
  %1064 = icmp eq i32 %1063, 0
  %1065 = icmp slt i32 %1060, 10
  %1066 = or i1 %1064, %1065
  br i1 %1066, label %originalBBpart2204, label %originalBB198alteredBB

originalBBpart2204:                               ; preds = %originalBB198
  br label %1067, !dbg !3149

1067:                                             ; preds = %originalBBpart2204
  br label %1068, !dbg !3150

1068:                                             ; preds = %1067
  %1069 = load i64, i64* %21, align 8, !dbg !3151
  %1070 = load i64, i64* %12, align 8, !dbg !3151
  %1071 = icmp ult i64 %1069, %1070, !dbg !3151
  br i1 %1071, label %1072, label %1092, !dbg !3154

1072:                                             ; preds = %1068
  %1073 = load i32, i32* @x.63
  %1074 = load i32, i32* @y.64
  %1075 = sub i32 %1073, 1
  %1076 = mul i32 %1073, %1075
  %1077 = urem i32 %1076, 2
  %1078 = icmp eq i32 %1077, 0
  %1079 = icmp slt i32 %1074, 10
  %1080 = or i1 %1078, %1079
  br i1 %1080, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %1072, %originalBB206alteredBB
  %1081 = load i8*, i8** %11, align 8, !dbg !3151
  %1082 = load i64, i64* %21, align 8, !dbg !3151
  %1083 = getelementptr inbounds i8, i8* %1081, i64 %1082, !dbg !3151
  store i8 34, i8* %1083, align 1, !dbg !3151
  %1084 = load i32, i32* @x.63
  %1085 = load i32, i32* @y.64
  %1086 = sub i32 %1084, 1
  %1087 = mul i32 %1084, %1086
  %1088 = urem i32 %1087, 2
  %1089 = icmp eq i32 %1088, 0
  %1090 = icmp slt i32 %1085, 10
  %1091 = or i1 %1089, %1090
  br i1 %1091, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br label %1092, !dbg !3151

1092:                                             ; preds = %originalBBpart2208, %1068
  %1093 = load i64, i64* %21, align 8, !dbg !3154
  %1094 = add i64 %1093, 1, !dbg !3154
  store i64 %1094, i64* %21, align 8, !dbg !3154
  br label %1095, !dbg !3154

1095:                                             ; preds = %1092
  br label %1096, !dbg !3155

1096:                                             ; preds = %1095
  %1097 = load i64, i64* %21, align 8, !dbg !3156
  %1098 = load i64, i64* %12, align 8, !dbg !3156
  %1099 = icmp ult i64 %1097, %1098, !dbg !3156
  br i1 %1099, label %1100, label %1120, !dbg !3159

1100:                                             ; preds = %1096
  %1101 = load i32, i32* @x.63
  %1102 = load i32, i32* @y.64
  %1103 = sub i32 %1101, 1
  %1104 = mul i32 %1101, %1103
  %1105 = urem i32 %1104, 2
  %1106 = icmp eq i32 %1105, 0
  %1107 = icmp slt i32 %1102, 10
  %1108 = or i1 %1106, %1107
  br i1 %1108, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %1100, %originalBB210alteredBB
  %1109 = load i8*, i8** %11, align 8, !dbg !3156
  %1110 = load i64, i64* %21, align 8, !dbg !3156
  %1111 = getelementptr inbounds i8, i8* %1109, i64 %1110, !dbg !3156
  store i8 34, i8* %1111, align 1, !dbg !3156
  %1112 = load i32, i32* @x.63
  %1113 = load i32, i32* @y.64
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br label %1120, !dbg !3156

1120:                                             ; preds = %originalBBpart2212, %1096
  %1121 = load i32, i32* @x.63
  %1122 = load i32, i32* @y.64
  %1123 = sub i32 %1121, 1
  %1124 = mul i32 %1121, %1123
  %1125 = urem i32 %1124, 2
  %1126 = icmp eq i32 %1125, 0
  %1127 = icmp slt i32 %1122, 10
  %1128 = or i1 %1126, %1127
  br i1 %1128, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %1120, %originalBB214alteredBB
  %1129 = load i64, i64* %21, align 8, !dbg !3159
  %1130 = add i64 %1129, 1, !dbg !3159
  store i64 %1130, i64* %21, align 8, !dbg !3159
  %1131 = load i32, i32* @x.63
  %1132 = load i32, i32* @y.64
  %1133 = sub i32 %1131, 1
  %1134 = mul i32 %1131, %1133
  %1135 = urem i32 %1134, 2
  %1136 = icmp eq i32 %1135, 0
  %1137 = icmp slt i32 %1132, 10
  %1138 = or i1 %1136, %1137
  br i1 %1138, label %originalBBpart2227, label %originalBB214alteredBB

originalBBpart2227:                               ; preds = %originalBB214
  br label %1139, !dbg !3159

1139:                                             ; preds = %originalBBpart2227
  br label %1140, !dbg !3160

1140:                                             ; preds = %1139
  %1141 = load i64, i64* %21, align 8, !dbg !3161
  %1142 = load i64, i64* %12, align 8, !dbg !3161
  %1143 = icmp ult i64 %1141, %1142, !dbg !3161
  br i1 %1143, label %1144, label %1164, !dbg !3164

1144:                                             ; preds = %1140
  %1145 = load i32, i32* @x.63
  %1146 = load i32, i32* @y.64
  %1147 = sub i32 %1145, 1
  %1148 = mul i32 %1145, %1147
  %1149 = urem i32 %1148, 2
  %1150 = icmp eq i32 %1149, 0
  %1151 = icmp slt i32 %1146, 10
  %1152 = or i1 %1150, %1151
  br i1 %1152, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %1144, %originalBB229alteredBB
  %1153 = load i8*, i8** %11, align 8, !dbg !3161
  %1154 = load i64, i64* %21, align 8, !dbg !3161
  %1155 = getelementptr inbounds i8, i8* %1153, i64 %1154, !dbg !3161
  store i8 63, i8* %1155, align 1, !dbg !3161
  %1156 = load i32, i32* @x.63
  %1157 = load i32, i32* @y.64
  %1158 = sub i32 %1156, 1
  %1159 = mul i32 %1156, %1158
  %1160 = urem i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = icmp slt i32 %1157, 10
  %1163 = or i1 %1161, %1162
  br i1 %1163, label %originalBBpart2231, label %originalBB229alteredBB

originalBBpart2231:                               ; preds = %originalBB229
  br label %1164, !dbg !3161

1164:                                             ; preds = %originalBBpart2231, %1140
  %1165 = load i64, i64* %21, align 8, !dbg !3164
  %1166 = add i64 %1165, 1, !dbg !3164
  store i64 %1166, i64* %21, align 8, !dbg !3164
  br label %1167, !dbg !3164

1167:                                             ; preds = %1164
  %1168 = load i32, i32* @x.63
  %1169 = load i32, i32* @y.64
  %1170 = sub i32 %1168, 1
  %1171 = mul i32 %1168, %1170
  %1172 = urem i32 %1171, 2
  %1173 = icmp eq i32 %1172, 0
  %1174 = icmp slt i32 %1169, 10
  %1175 = or i1 %1173, %1174
  br i1 %1175, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %1167, %originalBB233alteredBB
  %1176 = load i32, i32* @x.63
  %1177 = load i32, i32* @y.64
  %1178 = sub i32 %1176, 1
  %1179 = mul i32 %1176, %1178
  %1180 = urem i32 %1179, 2
  %1181 = icmp eq i32 %1180, 0
  %1182 = icmp slt i32 %1177, 10
  %1183 = or i1 %1181, %1182
  br i1 %1183, label %originalBBpart2235, label %originalBB233alteredBB

originalBBpart2235:                               ; preds = %originalBB233
  br label %1201, !dbg !3165

1184:                                             ; preds = %originalBBpart2184
  %1185 = load i32, i32* @x.63
  %1186 = load i32, i32* @y.64
  %1187 = sub i32 %1185, 1
  %1188 = mul i32 %1185, %1187
  %1189 = urem i32 %1188, 2
  %1190 = icmp eq i32 %1189, 0
  %1191 = icmp slt i32 %1186, 10
  %1192 = or i1 %1190, %1191
  br i1 %1192, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %1184, %originalBB237alteredBB
  %1193 = load i32, i32* @x.63
  %1194 = load i32, i32* @y.64
  %1195 = sub i32 %1193, 1
  %1196 = mul i32 %1193, %1195
  %1197 = urem i32 %1196, 2
  %1198 = icmp eq i32 %1197, 0
  %1199 = icmp slt i32 %1194, 10
  %1200 = or i1 %1198, %1199
  br i1 %1200, label %originalBBpart2239, label %originalBB237alteredBB

originalBBpart2239:                               ; preds = %originalBB237
  br label %1201, !dbg !3166

1201:                                             ; preds = %originalBBpart2239, %originalBBpart2235
  br label %1202, !dbg !3167

1202:                                             ; preds = %1201, %originalBBpart2170, %928, %924
  br label %1220, !dbg !3168

1203:                                             ; preds = %917
  %1204 = load i32, i32* @x.63
  %1205 = load i32, i32* @y.64
  %1206 = sub i32 %1204, 1
  %1207 = mul i32 %1204, %1206
  %1208 = urem i32 %1207, 2
  %1209 = icmp eq i32 %1208, 0
  %1210 = icmp slt i32 %1205, 10
  %1211 = or i1 %1209, %1210
  br i1 %1211, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %1203, %originalBB241alteredBB
  %1212 = load i32, i32* @x.63
  %1213 = load i32, i32* @y.64
  %1214 = sub i32 %1212, 1
  %1215 = mul i32 %1212, %1214
  %1216 = urem i32 %1215, 2
  %1217 = icmp eq i32 %1216, 0
  %1218 = icmp slt i32 %1213, 10
  %1219 = or i1 %1217, %1218
  br i1 %1219, label %originalBBpart2243, label %originalBB241alteredBB

originalBBpart2243:                               ; preds = %originalBB241
  br label %1220, !dbg !3169

1220:                                             ; preds = %originalBBpart2243, %1202, %923
  br label %2681, !dbg !3170

1221:                                             ; preds = %originalBBpart288
  %1222 = load i32, i32* @x.63
  %1223 = load i32, i32* @y.64
  %1224 = sub i32 %1222, 1
  %1225 = mul i32 %1222, %1224
  %1226 = urem i32 %1225, 2
  %1227 = icmp eq i32 %1226, 0
  %1228 = icmp slt i32 %1223, 10
  %1229 = or i1 %1227, %1228
  br i1 %1229, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %1221, %originalBB245alteredBB
  store i8 97, i8* %32, align 1, !dbg !3171
  %1230 = load i32, i32* @x.63
  %1231 = load i32, i32* @y.64
  %1232 = sub i32 %1230, 1
  %1233 = mul i32 %1230, %1232
  %1234 = urem i32 %1233, 2
  %1235 = icmp eq i32 %1234, 0
  %1236 = icmp slt i32 %1231, 10
  %1237 = or i1 %1235, %1236
  br i1 %1237, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br label %1416, !dbg !3172

1238:                                             ; preds = %originalBBpart288
  store i8 98, i8* %32, align 1, !dbg !3173
  br label %1416, !dbg !3174

1239:                                             ; preds = %originalBBpart288
  %1240 = load i32, i32* @x.63
  %1241 = load i32, i32* @y.64
  %1242 = sub i32 %1240, 1
  %1243 = mul i32 %1240, %1242
  %1244 = urem i32 %1243, 2
  %1245 = icmp eq i32 %1244, 0
  %1246 = icmp slt i32 %1241, 10
  %1247 = or i1 %1245, %1246
  br i1 %1247, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %1239, %originalBB249alteredBB
  store i8 102, i8* %32, align 1, !dbg !3175
  %1248 = load i32, i32* @x.63
  %1249 = load i32, i32* @y.64
  %1250 = sub i32 %1248, 1
  %1251 = mul i32 %1248, %1250
  %1252 = urem i32 %1251, 2
  %1253 = icmp eq i32 %1252, 0
  %1254 = icmp slt i32 %1249, 10
  %1255 = or i1 %1253, %1254
  br i1 %1255, label %originalBBpart2251, label %originalBB249alteredBB

originalBBpart2251:                               ; preds = %originalBB249
  br label %1416, !dbg !3176

1256:                                             ; preds = %originalBBpart288
  store i8 110, i8* %32, align 1, !dbg !3177
  br label %1392, !dbg !3178

1257:                                             ; preds = %originalBBpart288
  store i8 114, i8* %32, align 1, !dbg !3179
  br label %1392, !dbg !3180

1258:                                             ; preds = %originalBBpart288
  store i8 116, i8* %32, align 1, !dbg !3181
  br label %1392, !dbg !3182

1259:                                             ; preds = %originalBBpart288
  store i8 118, i8* %32, align 1, !dbg !3183
  br label %1416, !dbg !3184

1260:                                             ; preds = %originalBBpart288
  %1261 = load i32, i32* @x.63
  %1262 = load i32, i32* @y.64
  %1263 = sub i32 %1261, 1
  %1264 = mul i32 %1261, %1263
  %1265 = urem i32 %1264, 2
  %1266 = icmp eq i32 %1265, 0
  %1267 = icmp slt i32 %1262, 10
  %1268 = or i1 %1266, %1267
  br i1 %1268, label %originalBB253, label %originalBB253alteredBB

originalBB253:                                    ; preds = %1260, %originalBB253alteredBB
  %1269 = load i8, i8* %31, align 1, !dbg !3185
  store i8 %1269, i8* %32, align 1, !dbg !3186
  %1270 = load i32, i32* %15, align 4, !dbg !3187
  %1271 = icmp eq i32 %1270, 2, !dbg !3189
  %1272 = load i32, i32* @x.63
  %1273 = load i32, i32* @y.64
  %1274 = sub i32 %1272, 1
  %1275 = mul i32 %1272, %1274
  %1276 = urem i32 %1275, 2
  %1277 = icmp eq i32 %1276, 0
  %1278 = icmp slt i32 %1273, 10
  %1279 = or i1 %1277, %1278
  br i1 %1279, label %originalBBpart2255, label %originalBB253alteredBB

originalBBpart2255:                               ; preds = %originalBB253
  br i1 %1271, label %1280, label %1301, !dbg !3190

1280:                                             ; preds = %originalBBpart2255
  %1281 = load i8, i8* %27, align 1, !dbg !3191
  %1282 = trunc i8 %1281 to i1, !dbg !3191
  br i1 %1282, label %1283, label %1300, !dbg !3194

1283:                                             ; preds = %1280
  %1284 = load i32, i32* @x.63
  %1285 = load i32, i32* @y.64
  %1286 = sub i32 %1284, 1
  %1287 = mul i32 %1284, %1286
  %1288 = urem i32 %1287, 2
  %1289 = icmp eq i32 %1288, 0
  %1290 = icmp slt i32 %1285, 10
  %1291 = or i1 %1289, %1290
  br i1 %1291, label %originalBB257, label %originalBB257alteredBB

originalBB257:                                    ; preds = %1283, %originalBB257alteredBB
  %1292 = load i32, i32* @x.63
  %1293 = load i32, i32* @y.64
  %1294 = sub i32 %1292, 1
  %1295 = mul i32 %1292, %1294
  %1296 = urem i32 %1295, 2
  %1297 = icmp eq i32 %1296, 0
  %1298 = icmp slt i32 %1293, 10
  %1299 = or i1 %1297, %1298
  br i1 %1299, label %originalBBpart2259, label %originalBB257alteredBB

originalBBpart2259:                               ; preds = %originalBB257
  br label %3454, !dbg !3195

1300:                                             ; preds = %1280
  br label %2982, !dbg !3196

1301:                                             ; preds = %originalBBpart2255
  %1302 = load i32, i32* @x.63
  %1303 = load i32, i32* @y.64
  %1304 = sub i32 %1302, 1
  %1305 = mul i32 %1302, %1304
  %1306 = urem i32 %1305, 2
  %1307 = icmp eq i32 %1306, 0
  %1308 = icmp slt i32 %1303, 10
  %1309 = or i1 %1307, %1308
  br i1 %1309, label %originalBB261, label %originalBB261alteredBB

originalBB261:                                    ; preds = %1301, %originalBB261alteredBB
  %1310 = load i8, i8* %25, align 1, !dbg !3197
  %1311 = trunc i8 %1310 to i1, !dbg !3197
  %1312 = load i32, i32* @x.63
  %1313 = load i32, i32* @y.64
  %1314 = sub i32 %1312, 1
  %1315 = mul i32 %1312, %1314
  %1316 = urem i32 %1315, 2
  %1317 = icmp eq i32 %1316, 0
  %1318 = icmp slt i32 %1313, 10
  %1319 = or i1 %1317, %1318
  br i1 %1319, label %originalBBpart2263, label %originalBB261alteredBB

originalBBpart2263:                               ; preds = %originalBB261
  br i1 %1311, label %1320, label %1375, !dbg !3199

1320:                                             ; preds = %originalBBpart2263
  %1321 = load i32, i32* @x.63
  %1322 = load i32, i32* @y.64
  %1323 = sub i32 %1321, 1
  %1324 = mul i32 %1321, %1323
  %1325 = urem i32 %1324, 2
  %1326 = icmp eq i32 %1325, 0
  %1327 = icmp slt i32 %1322, 10
  %1328 = or i1 %1326, %1327
  br i1 %1328, label %originalBB265, label %originalBB265alteredBB

originalBB265:                                    ; preds = %1320, %originalBB265alteredBB
  %1329 = load i8, i8* %27, align 1, !dbg !3200
  %1330 = trunc i8 %1329 to i1, !dbg !3200
  %1331 = load i32, i32* @x.63
  %1332 = load i32, i32* @y.64
  %1333 = sub i32 %1331, 1
  %1334 = mul i32 %1331, %1333
  %1335 = urem i32 %1334, 2
  %1336 = icmp eq i32 %1335, 0
  %1337 = icmp slt i32 %1332, 10
  %1338 = or i1 %1336, %1337
  br i1 %1338, label %originalBBpart2267, label %originalBB265alteredBB

originalBBpart2267:                               ; preds = %originalBB265
  br i1 %1330, label %1339, label %1375, !dbg !3201

1339:                                             ; preds = %originalBBpart2267
  %1340 = load i32, i32* @x.63
  %1341 = load i32, i32* @y.64
  %1342 = sub i32 %1340, 1
  %1343 = mul i32 %1340, %1342
  %1344 = urem i32 %1343, 2
  %1345 = icmp eq i32 %1344, 0
  %1346 = icmp slt i32 %1341, 10
  %1347 = or i1 %1345, %1346
  br i1 %1347, label %originalBB269, label %originalBB269alteredBB

originalBB269:                                    ; preds = %1339, %originalBB269alteredBB
  %1348 = load i64, i64* %24, align 8, !dbg !3202
  %1349 = icmp ne i64 %1348, 0, !dbg !3202
  %1350 = load i32, i32* @x.63
  %1351 = load i32, i32* @y.64
  %1352 = sub i32 %1350, 1
  %1353 = mul i32 %1350, %1352
  %1354 = urem i32 %1353, 2
  %1355 = icmp eq i32 %1354, 0
  %1356 = icmp slt i32 %1351, 10
  %1357 = or i1 %1355, %1356
  br i1 %1357, label %originalBBpart2271, label %originalBB269alteredBB

originalBBpart2271:                               ; preds = %originalBB269
  br i1 %1349, label %1358, label %1375, !dbg !3203

1358:                                             ; preds = %originalBBpart2271
  %1359 = load i32, i32* @x.63
  %1360 = load i32, i32* @y.64
  %1361 = sub i32 %1359, 1
  %1362 = mul i32 %1359, %1361
  %1363 = urem i32 %1362, 2
  %1364 = icmp eq i32 %1363, 0
  %1365 = icmp slt i32 %1360, 10
  %1366 = or i1 %1364, %1365
  br i1 %1366, label %originalBB273, label %originalBB273alteredBB

originalBB273:                                    ; preds = %1358, %originalBB273alteredBB
  %1367 = load i32, i32* @x.63
  %1368 = load i32, i32* @y.64
  %1369 = sub i32 %1367, 1
  %1370 = mul i32 %1367, %1369
  %1371 = urem i32 %1370, 2
  %1372 = icmp eq i32 %1371, 0
  %1373 = icmp slt i32 %1368, 10
  %1374 = or i1 %1372, %1373
  br i1 %1374, label %originalBBpart2275, label %originalBB273alteredBB

originalBBpart2275:                               ; preds = %originalBB273
  br label %2982, !dbg !3204

1375:                                             ; preds = %originalBBpart2271, %originalBBpart2267, %originalBBpart2263
  %1376 = load i32, i32* @x.63
  %1377 = load i32, i32* @y.64
  %1378 = sub i32 %1376, 1
  %1379 = mul i32 %1376, %1378
  %1380 = urem i32 %1379, 2
  %1381 = icmp eq i32 %1380, 0
  %1382 = icmp slt i32 %1377, 10
  %1383 = or i1 %1381, %1382
  br i1 %1383, label %originalBB277, label %originalBB277alteredBB

originalBB277:                                    ; preds = %1375, %originalBB277alteredBB
  %1384 = load i32, i32* @x.63
  %1385 = load i32, i32* @y.64
  %1386 = sub i32 %1384, 1
  %1387 = mul i32 %1384, %1386
  %1388 = urem i32 %1387, 2
  %1389 = icmp eq i32 %1388, 0
  %1390 = icmp slt i32 %1385, 10
  %1391 = or i1 %1389, %1390
  br i1 %1391, label %originalBBpart2279, label %originalBB277alteredBB

originalBBpart2279:                               ; preds = %originalBB277
  br label %1392, !dbg !3202

1392:                                             ; preds = %originalBBpart2279, %1258, %1257, %1256
  call void @llvm.dbg.label(metadata !3205), !dbg !3206
  %1393 = load i32, i32* %15, align 4, !dbg !3207
  %1394 = icmp eq i32 %1393, 2, !dbg !3209
  br i1 %1394, label %1395, label %1415, !dbg !3210

1395:                                             ; preds = %1392
  %1396 = load i8, i8* %27, align 1, !dbg !3211
  %1397 = trunc i8 %1396 to i1, !dbg !3211
  br i1 %1397, label %1398, label %1415, !dbg !3212

1398:                                             ; preds = %1395
  %1399 = load i32, i32* @x.63
  %1400 = load i32, i32* @y.64
  %1401 = sub i32 %1399, 1
  %1402 = mul i32 %1399, %1401
  %1403 = urem i32 %1402, 2
  %1404 = icmp eq i32 %1403, 0
  %1405 = icmp slt i32 %1400, 10
  %1406 = or i1 %1404, %1405
  br i1 %1406, label %originalBB281, label %originalBB281alteredBB

originalBB281:                                    ; preds = %1398, %originalBB281alteredBB
  %1407 = load i32, i32* @x.63
  %1408 = load i32, i32* @y.64
  %1409 = sub i32 %1407, 1
  %1410 = mul i32 %1407, %1409
  %1411 = urem i32 %1410, 2
  %1412 = icmp eq i32 %1411, 0
  %1413 = icmp slt i32 %1408, 10
  %1414 = or i1 %1412, %1413
  br i1 %1414, label %originalBBpart2283, label %originalBB281alteredBB

originalBBpart2283:                               ; preds = %originalBB281
  br label %3454, !dbg !3213

1415:                                             ; preds = %1395, %1392
  br label %1416, !dbg !3211

1416:                                             ; preds = %1415, %1259, %originalBBpart2251, %1238, %originalBBpart2247
  call void @llvm.dbg.label(metadata !3214), !dbg !3215
  %1417 = load i32, i32* @x.63
  %1418 = load i32, i32* @y.64
  %1419 = sub i32 %1417, 1
  %1420 = mul i32 %1417, %1419
  %1421 = urem i32 %1420, 2
  %1422 = icmp eq i32 %1421, 0
  %1423 = icmp slt i32 %1418, 10
  %1424 = or i1 %1422, %1423
  br i1 %1424, label %originalBB285, label %originalBB285alteredBB

originalBB285:                                    ; preds = %1416, %originalBB285alteredBB
  %1425 = load i8, i8* %25, align 1, !dbg !3216
  %1426 = trunc i8 %1425 to i1, !dbg !3216
  %1427 = load i32, i32* @x.63
  %1428 = load i32, i32* @y.64
  %1429 = sub i32 %1427, 1
  %1430 = mul i32 %1427, %1429
  %1431 = urem i32 %1430, 2
  %1432 = icmp eq i32 %1431, 0
  %1433 = icmp slt i32 %1428, 10
  %1434 = or i1 %1432, %1433
  br i1 %1434, label %originalBBpart2287, label %originalBB285alteredBB

originalBBpart2287:                               ; preds = %originalBB285
  br i1 %1426, label %1435, label %1437, !dbg !3218

1435:                                             ; preds = %originalBBpart2287
  %1436 = load i8, i8* %32, align 1, !dbg !3219
  store i8 %1436, i8* %31, align 1, !dbg !3221
  br label %2808, !dbg !3222

1437:                                             ; preds = %originalBBpart2287
  %1438 = load i32, i32* @x.63
  %1439 = load i32, i32* @y.64
  %1440 = sub i32 %1438, 1
  %1441 = mul i32 %1438, %1440
  %1442 = urem i32 %1441, 2
  %1443 = icmp eq i32 %1442, 0
  %1444 = icmp slt i32 %1439, 10
  %1445 = or i1 %1443, %1444
  br i1 %1445, label %originalBB289, label %originalBB289alteredBB

originalBB289:                                    ; preds = %1437, %originalBB289alteredBB
  %1446 = load i32, i32* @x.63
  %1447 = load i32, i32* @y.64
  %1448 = sub i32 %1446, 1
  %1449 = mul i32 %1446, %1448
  %1450 = urem i32 %1449, 2
  %1451 = icmp eq i32 %1450, 0
  %1452 = icmp slt i32 %1447, 10
  %1453 = or i1 %1451, %1452
  br i1 %1453, label %originalBBpart2291, label %originalBB289alteredBB

originalBBpart2291:                               ; preds = %originalBB289
  br label %2681, !dbg !3223

1454:                                             ; preds = %originalBBpart288, %originalBBpart288
  %1455 = load i32, i32* @x.63
  %1456 = load i32, i32* @y.64
  %1457 = sub i32 %1455, 1
  %1458 = mul i32 %1455, %1457
  %1459 = urem i32 %1458, 2
  %1460 = icmp eq i32 %1459, 0
  %1461 = icmp slt i32 %1456, 10
  %1462 = or i1 %1460, %1461
  br i1 %1462, label %originalBB293, label %originalBB293alteredBB

originalBB293:                                    ; preds = %1454, %originalBB293alteredBB
  %1463 = load i64, i64* %14, align 8, !dbg !3224
  %1464 = icmp eq i64 %1463, -1, !dbg !3226
  %1465 = load i32, i32* @x.63
  %1466 = load i32, i32* @y.64
  %1467 = sub i32 %1465, 1
  %1468 = mul i32 %1465, %1467
  %1469 = urem i32 %1468, 2
  %1470 = icmp eq i32 %1469, 0
  %1471 = icmp slt i32 %1466, 10
  %1472 = or i1 %1470, %1471
  br i1 %1472, label %originalBBpart2295, label %originalBB293alteredBB

originalBBpart2295:                               ; preds = %originalBB293
  br i1 %1464, label %1473, label %1479, !dbg !3227

1473:                                             ; preds = %originalBBpart2295
  %1474 = load i8*, i8** %13, align 8, !dbg !3228
  %1475 = getelementptr inbounds i8, i8* %1474, i64 1, !dbg !3228
  %1476 = load i8, i8* %1475, align 1, !dbg !3228
  %1477 = sext i8 %1476 to i32, !dbg !3228
  %1478 = icmp eq i32 %1477, 0, !dbg !3229
  br i1 %1478, label %1483, label %1482, !dbg !3224

1479:                                             ; preds = %originalBBpart2295
  %1480 = load i64, i64* %14, align 8, !dbg !3230
  %1481 = icmp eq i64 %1480, 1, !dbg !3231
  br i1 %1481, label %1483, label %1482, !dbg !3227

1482:                                             ; preds = %1479, %1473
  br label %2681, !dbg !3232

1483:                                             ; preds = %1479, %1473
  %1484 = load i32, i32* @x.63
  %1485 = load i32, i32* @y.64
  %1486 = sub i32 %1484, 1
  %1487 = mul i32 %1484, %1486
  %1488 = urem i32 %1487, 2
  %1489 = icmp eq i32 %1488, 0
  %1490 = icmp slt i32 %1485, 10
  %1491 = or i1 %1489, %1490
  br i1 %1491, label %originalBB297, label %originalBB297alteredBB

originalBB297:                                    ; preds = %1483, %originalBB297alteredBB
  %1492 = load i32, i32* @x.63
  %1493 = load i32, i32* @y.64
  %1494 = sub i32 %1492, 1
  %1495 = mul i32 %1492, %1494
  %1496 = urem i32 %1495, 2
  %1497 = icmp eq i32 %1496, 0
  %1498 = icmp slt i32 %1493, 10
  %1499 = or i1 %1497, %1498
  br i1 %1499, label %originalBBpart2299, label %originalBB297alteredBB

originalBBpart2299:                               ; preds = %originalBB297
  br label %1500, !dbg !3233

1500:                                             ; preds = %originalBBpart2299, %originalBBpart288, %originalBBpart288
  %1501 = load i64, i64* %20, align 8, !dbg !3234
  %1502 = icmp ne i64 %1501, 0, !dbg !3236
  br i1 %1502, label %1503, label %1504, !dbg !3237

1503:                                             ; preds = %1500
  br label %2681, !dbg !3238

1504:                                             ; preds = %1500
  %1505 = load i32, i32* @x.63
  %1506 = load i32, i32* @y.64
  %1507 = sub i32 %1505, 1
  %1508 = mul i32 %1505, %1507
  %1509 = urem i32 %1508, 2
  %1510 = icmp eq i32 %1509, 0
  %1511 = icmp slt i32 %1506, 10
  %1512 = or i1 %1510, %1511
  br i1 %1512, label %originalBB301, label %originalBB301alteredBB

originalBB301:                                    ; preds = %1504, %originalBB301alteredBB
  %1513 = load i32, i32* @x.63
  %1514 = load i32, i32* @y.64
  %1515 = sub i32 %1513, 1
  %1516 = mul i32 %1513, %1515
  %1517 = urem i32 %1516, 2
  %1518 = icmp eq i32 %1517, 0
  %1519 = icmp slt i32 %1514, 10
  %1520 = or i1 %1518, %1519
  br i1 %1520, label %originalBBpart2303, label %originalBB301alteredBB

originalBBpart2303:                               ; preds = %originalBB301
  br label %1521, !dbg !3239

1521:                                             ; preds = %originalBBpart2303, %originalBBpart288
  %1522 = load i32, i32* @x.63
  %1523 = load i32, i32* @y.64
  %1524 = sub i32 %1522, 1
  %1525 = mul i32 %1522, %1524
  %1526 = urem i32 %1525, 2
  %1527 = icmp eq i32 %1526, 0
  %1528 = icmp slt i32 %1523, 10
  %1529 = or i1 %1527, %1528
  br i1 %1529, label %originalBB305, label %originalBB305alteredBB

originalBB305:                                    ; preds = %1521, %originalBB305alteredBB
  store i8 1, i8* %35, align 1, !dbg !3240
  %1530 = load i32, i32* @x.63
  %1531 = load i32, i32* @y.64
  %1532 = sub i32 %1530, 1
  %1533 = mul i32 %1530, %1532
  %1534 = urem i32 %1533, 2
  %1535 = icmp eq i32 %1534, 0
  %1536 = icmp slt i32 %1531, 10
  %1537 = or i1 %1535, %1536
  br i1 %1537, label %originalBBpart2307, label %originalBB305alteredBB

originalBBpart2307:                               ; preds = %originalBB305
  br label %1538, !dbg !3241

1538:                                             ; preds = %originalBBpart2307, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288
  %1539 = load i32, i32* @x.63
  %1540 = load i32, i32* @y.64
  %1541 = sub i32 %1539, 1
  %1542 = mul i32 %1539, %1541
  %1543 = urem i32 %1542, 2
  %1544 = icmp eq i32 %1543, 0
  %1545 = icmp slt i32 %1540, 10
  %1546 = or i1 %1544, %1545
  br i1 %1546, label %originalBB309, label %originalBB309alteredBB

originalBB309:                                    ; preds = %1538, %originalBB309alteredBB
  %1547 = load i32, i32* %15, align 4, !dbg !3242
  %1548 = icmp eq i32 %1547, 2, !dbg !3244
  %1549 = load i32, i32* @x.63
  %1550 = load i32, i32* @y.64
  %1551 = sub i32 %1549, 1
  %1552 = mul i32 %1549, %1551
  %1553 = urem i32 %1552, 2
  %1554 = icmp eq i32 %1553, 0
  %1555 = icmp slt i32 %1550, 10
  %1556 = or i1 %1554, %1555
  br i1 %1556, label %originalBBpart2311, label %originalBB309alteredBB

originalBBpart2311:                               ; preds = %originalBB309
  br i1 %1548, label %1557, label %1577, !dbg !3245

1557:                                             ; preds = %originalBBpart2311
  %1558 = load i32, i32* @x.63
  %1559 = load i32, i32* @y.64
  %1560 = sub i32 %1558, 1
  %1561 = mul i32 %1558, %1560
  %1562 = urem i32 %1561, 2
  %1563 = icmp eq i32 %1562, 0
  %1564 = icmp slt i32 %1559, 10
  %1565 = or i1 %1563, %1564
  br i1 %1565, label %originalBB313, label %originalBB313alteredBB

originalBB313:                                    ; preds = %1557, %originalBB313alteredBB
  %1566 = load i8, i8* %27, align 1, !dbg !3246
  %1567 = trunc i8 %1566 to i1, !dbg !3246
  %1568 = load i32, i32* @x.63
  %1569 = load i32, i32* @y.64
  %1570 = sub i32 %1568, 1
  %1571 = mul i32 %1568, %1570
  %1572 = urem i32 %1571, 2
  %1573 = icmp eq i32 %1572, 0
  %1574 = icmp slt i32 %1569, 10
  %1575 = or i1 %1573, %1574
  br i1 %1575, label %originalBBpart2315, label %originalBB313alteredBB

originalBBpart2315:                               ; preds = %originalBB313
  br i1 %1567, label %1576, label %1577, !dbg !3247

1576:                                             ; preds = %originalBBpart2315
  br label %3454, !dbg !3248

1577:                                             ; preds = %originalBBpart2315, %originalBBpart2311
  %1578 = load i32, i32* @x.63
  %1579 = load i32, i32* @y.64
  %1580 = sub i32 %1578, 1
  %1581 = mul i32 %1578, %1580
  %1582 = urem i32 %1581, 2
  %1583 = icmp eq i32 %1582, 0
  %1584 = icmp slt i32 %1579, 10
  %1585 = or i1 %1583, %1584
  br i1 %1585, label %originalBB317, label %originalBB317alteredBB

originalBB317:                                    ; preds = %1577, %originalBB317alteredBB
  %1586 = load i32, i32* @x.63
  %1587 = load i32, i32* @y.64
  %1588 = sub i32 %1586, 1
  %1589 = mul i32 %1586, %1588
  %1590 = urem i32 %1589, 2
  %1591 = icmp eq i32 %1590, 0
  %1592 = icmp slt i32 %1587, 10
  %1593 = or i1 %1591, %1592
  br i1 %1593, label %originalBBpart2319, label %originalBB317alteredBB

originalBBpart2319:                               ; preds = %originalBB317
  br label %2681, !dbg !3249

1594:                                             ; preds = %originalBBpart288
  store i8 1, i8* %29, align 1, !dbg !3250
  store i8 1, i8* %35, align 1, !dbg !3251
  %1595 = load i32, i32* %15, align 4, !dbg !3252
  %1596 = icmp eq i32 %1595, 2, !dbg !3254
  br i1 %1596, label %1597, label %1774, !dbg !3255

1597:                                             ; preds = %1594
  %1598 = load i32, i32* @x.63
  %1599 = load i32, i32* @y.64
  %1600 = sub i32 %1598, 1
  %1601 = mul i32 %1598, %1600
  %1602 = urem i32 %1601, 2
  %1603 = icmp eq i32 %1602, 0
  %1604 = icmp slt i32 %1599, 10
  %1605 = or i1 %1603, %1604
  br i1 %1605, label %originalBB321, label %originalBB321alteredBB

originalBB321:                                    ; preds = %1597, %originalBB321alteredBB
  %1606 = load i8, i8* %27, align 1, !dbg !3256
  %1607 = trunc i8 %1606 to i1, !dbg !3256
  %1608 = load i32, i32* @x.63
  %1609 = load i32, i32* @y.64
  %1610 = sub i32 %1608, 1
  %1611 = mul i32 %1608, %1610
  %1612 = urem i32 %1611, 2
  %1613 = icmp eq i32 %1612, 0
  %1614 = icmp slt i32 %1609, 10
  %1615 = or i1 %1613, %1614
  br i1 %1615, label %originalBBpart2323, label %originalBB321alteredBB

originalBBpart2323:                               ; preds = %originalBB321
  br i1 %1607, label %1616, label %1633, !dbg !3259

1616:                                             ; preds = %originalBBpart2323
  %1617 = load i32, i32* @x.63
  %1618 = load i32, i32* @y.64
  %1619 = sub i32 %1617, 1
  %1620 = mul i32 %1617, %1619
  %1621 = urem i32 %1620, 2
  %1622 = icmp eq i32 %1621, 0
  %1623 = icmp slt i32 %1618, 10
  %1624 = or i1 %1622, %1623
  br i1 %1624, label %originalBB325, label %originalBB325alteredBB

originalBB325:                                    ; preds = %1616, %originalBB325alteredBB
  %1625 = load i32, i32* @x.63
  %1626 = load i32, i32* @y.64
  %1627 = sub i32 %1625, 1
  %1628 = mul i32 %1625, %1627
  %1629 = urem i32 %1628, 2
  %1630 = icmp eq i32 %1629, 0
  %1631 = icmp slt i32 %1626, 10
  %1632 = or i1 %1630, %1631
  br i1 %1632, label %originalBBpart2327, label %originalBB325alteredBB

originalBBpart2327:                               ; preds = %originalBB325
  br label %3454, !dbg !3260

1633:                                             ; preds = %originalBBpart2323
  %1634 = load i64, i64* %12, align 8, !dbg !3261
  %1635 = icmp ne i64 %1634, 0, !dbg !3261
  br i1 %1635, label %1636, label %1673, !dbg !3263

1636:                                             ; preds = %1633
  %1637 = load i32, i32* @x.63
  %1638 = load i32, i32* @y.64
  %1639 = sub i32 %1637, 1
  %1640 = mul i32 %1637, %1639
  %1641 = urem i32 %1640, 2
  %1642 = icmp eq i32 %1641, 0
  %1643 = icmp slt i32 %1638, 10
  %1644 = or i1 %1642, %1643
  br i1 %1644, label %originalBB329, label %originalBB329alteredBB

originalBB329:                                    ; preds = %1636, %originalBB329alteredBB
  %1645 = load i64, i64* %22, align 8, !dbg !3264
  %1646 = icmp ne i64 %1645, 0, !dbg !3264
  %1647 = load i32, i32* @x.63
  %1648 = load i32, i32* @y.64
  %1649 = sub i32 %1647, 1
  %1650 = mul i32 %1647, %1649
  %1651 = urem i32 %1650, 2
  %1652 = icmp eq i32 %1651, 0
  %1653 = icmp slt i32 %1648, 10
  %1654 = or i1 %1652, %1653
  br i1 %1654, label %originalBBpart2331, label %originalBB329alteredBB

originalBBpart2331:                               ; preds = %originalBB329
  br i1 %1646, label %1673, label %1655, !dbg !3265

1655:                                             ; preds = %originalBBpart2331
  %1656 = load i32, i32* @x.63
  %1657 = load i32, i32* @y.64
  %1658 = sub i32 %1656, 1
  %1659 = mul i32 %1656, %1658
  %1660 = urem i32 %1659, 2
  %1661 = icmp eq i32 %1660, 0
  %1662 = icmp slt i32 %1657, 10
  %1663 = or i1 %1661, %1662
  br i1 %1663, label %originalBB333, label %originalBB333alteredBB

originalBB333:                                    ; preds = %1655, %originalBB333alteredBB
  %1664 = load i64, i64* %12, align 8, !dbg !3266
  store i64 %1664, i64* %22, align 8, !dbg !3268
  store i64 0, i64* %12, align 8, !dbg !3269
  %1665 = load i32, i32* @x.63
  %1666 = load i32, i32* @y.64
  %1667 = sub i32 %1665, 1
  %1668 = mul i32 %1665, %1667
  %1669 = urem i32 %1668, 2
  %1670 = icmp eq i32 %1669, 0
  %1671 = icmp slt i32 %1666, 10
  %1672 = or i1 %1670, %1671
  br i1 %1672, label %originalBBpart2335, label %originalBB333alteredBB

originalBBpart2335:                               ; preds = %originalBB333
  br label %1673, !dbg !3270

1673:                                             ; preds = %originalBBpart2335, %originalBBpart2331, %1633
  %1674 = load i32, i32* @x.63
  %1675 = load i32, i32* @y.64
  %1676 = sub i32 %1674, 1
  %1677 = mul i32 %1674, %1676
  %1678 = urem i32 %1677, 2
  %1679 = icmp eq i32 %1678, 0
  %1680 = icmp slt i32 %1675, 10
  %1681 = or i1 %1679, %1680
  br i1 %1681, label %originalBB337, label %originalBB337alteredBB

originalBB337:                                    ; preds = %1673, %originalBB337alteredBB
  %1682 = load i32, i32* @x.63
  %1683 = load i32, i32* @y.64
  %1684 = sub i32 %1682, 1
  %1685 = mul i32 %1682, %1684
  %1686 = urem i32 %1685, 2
  %1687 = icmp eq i32 %1686, 0
  %1688 = icmp slt i32 %1683, 10
  %1689 = or i1 %1687, %1688
  br i1 %1689, label %originalBBpart2339, label %originalBB337alteredBB

originalBBpart2339:                               ; preds = %originalBB337
  br label %1690, !dbg !3271

1690:                                             ; preds = %originalBBpart2339
  %1691 = load i32, i32* @x.63
  %1692 = load i32, i32* @y.64
  %1693 = sub i32 %1691, 1
  %1694 = mul i32 %1691, %1693
  %1695 = urem i32 %1694, 2
  %1696 = icmp eq i32 %1695, 0
  %1697 = icmp slt i32 %1692, 10
  %1698 = or i1 %1696, %1697
  br i1 %1698, label %originalBB341, label %originalBB341alteredBB

originalBB341:                                    ; preds = %1690, %originalBB341alteredBB
  %1699 = load i64, i64* %21, align 8, !dbg !3272
  %1700 = load i64, i64* %12, align 8, !dbg !3272
  %1701 = icmp ult i64 %1699, %1700, !dbg !3272
  %1702 = load i32, i32* @x.63
  %1703 = load i32, i32* @y.64
  %1704 = sub i32 %1702, 1
  %1705 = mul i32 %1702, %1704
  %1706 = urem i32 %1705, 2
  %1707 = icmp eq i32 %1706, 0
  %1708 = icmp slt i32 %1703, 10
  %1709 = or i1 %1707, %1708
  br i1 %1709, label %originalBBpart2343, label %originalBB341alteredBB

originalBBpart2343:                               ; preds = %originalBB341
  br i1 %1701, label %1710, label %1714, !dbg !3275

1710:                                             ; preds = %originalBBpart2343
  %1711 = load i8*, i8** %11, align 8, !dbg !3272
  %1712 = load i64, i64* %21, align 8, !dbg !3272
  %1713 = getelementptr inbounds i8, i8* %1711, i64 %1712, !dbg !3272
  store i8 39, i8* %1713, align 1, !dbg !3272
  br label %1714, !dbg !3272

1714:                                             ; preds = %1710, %originalBBpart2343
  %1715 = load i64, i64* %21, align 8, !dbg !3275
  %1716 = add i64 %1715, 1, !dbg !3275
  store i64 %1716, i64* %21, align 8, !dbg !3275
  br label %1717, !dbg !3275

1717:                                             ; preds = %1714
  br label %1718, !dbg !3276

1718:                                             ; preds = %1717
  %1719 = load i64, i64* %21, align 8, !dbg !3277
  %1720 = load i64, i64* %12, align 8, !dbg !3277
  %1721 = icmp ult i64 %1719, %1720, !dbg !3277
  br i1 %1721, label %1722, label %1726, !dbg !3280

1722:                                             ; preds = %1718
  %1723 = load i8*, i8** %11, align 8, !dbg !3277
  %1724 = load i64, i64* %21, align 8, !dbg !3277
  %1725 = getelementptr inbounds i8, i8* %1723, i64 %1724, !dbg !3277
  store i8 92, i8* %1725, align 1, !dbg !3277
  br label %1726, !dbg !3277

1726:                                             ; preds = %1722, %1718
  %1727 = load i64, i64* %21, align 8, !dbg !3280
  %1728 = add i64 %1727, 1, !dbg !3280
  store i64 %1728, i64* %21, align 8, !dbg !3280
  br label %1729, !dbg !3280

1729:                                             ; preds = %1726
  br label %1730, !dbg !3281

1730:                                             ; preds = %1729
  %1731 = load i64, i64* %21, align 8, !dbg !3282
  %1732 = load i64, i64* %12, align 8, !dbg !3282
  %1733 = icmp ult i64 %1731, %1732, !dbg !3282
  br i1 %1733, label %1734, label %1754, !dbg !3285

1734:                                             ; preds = %1730
  %1735 = load i32, i32* @x.63
  %1736 = load i32, i32* @y.64
  %1737 = sub i32 %1735, 1
  %1738 = mul i32 %1735, %1737
  %1739 = urem i32 %1738, 2
  %1740 = icmp eq i32 %1739, 0
  %1741 = icmp slt i32 %1736, 10
  %1742 = or i1 %1740, %1741
  br i1 %1742, label %originalBB345, label %originalBB345alteredBB

originalBB345:                                    ; preds = %1734, %originalBB345alteredBB
  %1743 = load i8*, i8** %11, align 8, !dbg !3282
  %1744 = load i64, i64* %21, align 8, !dbg !3282
  %1745 = getelementptr inbounds i8, i8* %1743, i64 %1744, !dbg !3282
  store i8 39, i8* %1745, align 1, !dbg !3282
  %1746 = load i32, i32* @x.63
  %1747 = load i32, i32* @y.64
  %1748 = sub i32 %1746, 1
  %1749 = mul i32 %1746, %1748
  %1750 = urem i32 %1749, 2
  %1751 = icmp eq i32 %1750, 0
  %1752 = icmp slt i32 %1747, 10
  %1753 = or i1 %1751, %1752
  br i1 %1753, label %originalBBpart2347, label %originalBB345alteredBB

originalBBpart2347:                               ; preds = %originalBB345
  br label %1754, !dbg !3282

1754:                                             ; preds = %originalBBpart2347, %1730
  %1755 = load i64, i64* %21, align 8, !dbg !3285
  %1756 = add i64 %1755, 1, !dbg !3285
  store i64 %1756, i64* %21, align 8, !dbg !3285
  br label %1757, !dbg !3285

1757:                                             ; preds = %1754
  %1758 = load i32, i32* @x.63
  %1759 = load i32, i32* @y.64
  %1760 = sub i32 %1758, 1
  %1761 = mul i32 %1758, %1760
  %1762 = urem i32 %1761, 2
  %1763 = icmp eq i32 %1762, 0
  %1764 = icmp slt i32 %1759, 10
  %1765 = or i1 %1763, %1764
  br i1 %1765, label %originalBB349, label %originalBB349alteredBB

originalBB349:                                    ; preds = %1757, %originalBB349alteredBB
  store i8 0, i8* %28, align 1, !dbg !3286
  %1766 = load i32, i32* @x.63
  %1767 = load i32, i32* @y.64
  %1768 = sub i32 %1766, 1
  %1769 = mul i32 %1766, %1768
  %1770 = urem i32 %1769, 2
  %1771 = icmp eq i32 %1770, 0
  %1772 = icmp slt i32 %1767, 10
  %1773 = or i1 %1771, %1772
  br i1 %1773, label %originalBBpart2351, label %originalBB349alteredBB

originalBBpart2351:                               ; preds = %originalBB349
  br label %1774, !dbg !3287

1774:                                             ; preds = %originalBBpart2351, %1594
  %1775 = load i32, i32* @x.63
  %1776 = load i32, i32* @y.64
  %1777 = sub i32 %1775, 1
  %1778 = mul i32 %1775, %1777
  %1779 = urem i32 %1778, 2
  %1780 = icmp eq i32 %1779, 0
  %1781 = icmp slt i32 %1776, 10
  %1782 = or i1 %1780, %1781
  br i1 %1782, label %originalBB353, label %originalBB353alteredBB

originalBB353:                                    ; preds = %1774, %originalBB353alteredBB
  %1783 = load i32, i32* @x.63
  %1784 = load i32, i32* @y.64
  %1785 = sub i32 %1783, 1
  %1786 = mul i32 %1783, %1785
  %1787 = urem i32 %1786, 2
  %1788 = icmp eq i32 %1787, 0
  %1789 = icmp slt i32 %1784, 10
  %1790 = or i1 %1788, %1789
  br i1 %1790, label %originalBBpart2355, label %originalBB353alteredBB

originalBBpart2355:                               ; preds = %originalBB353
  br label %2681, !dbg !3288

1791:                                             ; preds = %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288, %originalBBpart288
  %1792 = load i32, i32* @x.63
  %1793 = load i32, i32* @y.64
  %1794 = sub i32 %1792, 1
  %1795 = mul i32 %1792, %1794
  %1796 = urem i32 %1795, 2
  %1797 = icmp eq i32 %1796, 0
  %1798 = icmp slt i32 %1793, 10
  %1799 = or i1 %1797, %1798
  br i1 %1799, label %originalBB357, label %originalBB357alteredBB

originalBB357:                                    ; preds = %1791, %originalBB357alteredBB
  store i8 1, i8* %35, align 1, !dbg !3289
  %1800 = load i32, i32* @x.63
  %1801 = load i32, i32* @y.64
  %1802 = sub i32 %1800, 1
  %1803 = mul i32 %1800, %1802
  %1804 = urem i32 %1803, 2
  %1805 = icmp eq i32 %1804, 0
  %1806 = icmp slt i32 %1801, 10
  %1807 = or i1 %1805, %1806
  br i1 %1807, label %originalBBpart2359, label %originalBB357alteredBB

originalBBpart2359:                               ; preds = %originalBB357
  br label %2681, !dbg !3290

1808:                                             ; preds = %originalBBpart288
  call void @llvm.dbg.declare(metadata i64* %36, metadata !3291, metadata !DIExpression()), !dbg !3293
  call void @llvm.dbg.declare(metadata i8* %37, metadata !3294, metadata !DIExpression()), !dbg !3295
  %1809 = load i32, i32* @x.63
  %1810 = load i32, i32* @y.64
  %1811 = sub i32 %1809, 1
  %1812 = mul i32 %1809, %1811
  %1813 = urem i32 %1812, 2
  %1814 = icmp eq i32 %1813, 0
  %1815 = icmp slt i32 %1810, 10
  %1816 = or i1 %1814, %1815
  br i1 %1816, label %originalBB361, label %originalBB361alteredBB

originalBB361:                                    ; preds = %1808, %originalBB361alteredBB
  %1817 = load i8, i8* %26, align 1, !dbg !3296
  %1818 = trunc i8 %1817 to i1, !dbg !3296
  %1819 = load i32, i32* @x.63
  %1820 = load i32, i32* @y.64
  %1821 = sub i32 %1819, 1
  %1822 = mul i32 %1819, %1821
  %1823 = urem i32 %1822, 2
  %1824 = icmp eq i32 %1823, 0
  %1825 = icmp slt i32 %1820, 10
  %1826 = or i1 %1824, %1825
  br i1 %1826, label %originalBBpart2363, label %originalBB361alteredBB

originalBBpart2363:                               ; preds = %originalBB361
  br i1 %1818, label %1827, label %1855, !dbg !3298

1827:                                             ; preds = %originalBBpart2363
  %1828 = load i32, i32* @x.63
  %1829 = load i32, i32* @y.64
  %1830 = sub i32 %1828, 1
  %1831 = mul i32 %1828, %1830
  %1832 = urem i32 %1831, 2
  %1833 = icmp eq i32 %1832, 0
  %1834 = icmp slt i32 %1829, 10
  %1835 = or i1 %1833, %1834
  br i1 %1835, label %originalBB365, label %originalBB365alteredBB

originalBB365:                                    ; preds = %1827, %originalBB365alteredBB
  store i64 1, i64* %36, align 8, !dbg !3299
  %1836 = call i16** @__ctype_b_loc() #15, !dbg !3301
  %1837 = load i16*, i16** %1836, align 8, !dbg !3301
  %1838 = load i8, i8* %31, align 1, !dbg !3301
  %1839 = zext i8 %1838 to i32, !dbg !3301
  %1840 = sext i32 %1839 to i64, !dbg !3301
  %1841 = getelementptr inbounds i16, i16* %1837, i64 %1840, !dbg !3301
  %1842 = load i16, i16* %1841, align 2, !dbg !3301
  %1843 = zext i16 %1842 to i32, !dbg !3301
  %1844 = and i32 %1843, 16384, !dbg !3301
  %1845 = icmp ne i32 %1844, 0, !dbg !3302
  %1846 = zext i1 %1845 to i8, !dbg !3303
  store i8 %1846, i8* %37, align 1, !dbg !3303
  %1847 = load i32, i32* @x.63
  %1848 = load i32, i32* @y.64
  %1849 = sub i32 %1847, 1
  %1850 = mul i32 %1847, %1849
  %1851 = urem i32 %1850, 2
  %1852 = icmp eq i32 %1851, 0
  %1853 = icmp slt i32 %1848, 10
  %1854 = or i1 %1852, %1853
  br i1 %1854, label %originalBBpart2376, label %originalBB365alteredBB

originalBBpart2376:                               ; preds = %originalBB365
  br label %2096, !dbg !3304

1855:                                             ; preds = %originalBBpart2363
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %38, metadata !3305, metadata !DIExpression()), !dbg !3319
  %1856 = bitcast %struct.__mbstate_t* %38 to i8*, !dbg !3320
  call void @llvm.memset.p0i8.i64(i8* align 4 %1856, i8 0, i64 8, i1 false), !dbg !3320
  store i64 0, i64* %36, align 8, !dbg !3321
  store i8 1, i8* %37, align 1, !dbg !3322
  %1857 = load i64, i64* %14, align 8, !dbg !3323
  %1858 = icmp eq i64 %1857, -1, !dbg !3325
  br i1 %1858, label %1859, label %1862, !dbg !3326

1859:                                             ; preds = %1855
  %1860 = load i8*, i8** %13, align 8, !dbg !3327
  %1861 = call i64 @strlen(i8* %1860) #13, !dbg !3328
  store i64 %1861, i64* %14, align 8, !dbg !3329
  br label %1862, !dbg !3330

1862:                                             ; preds = %1859, %1855
  %1863 = load i32, i32* @x.63
  %1864 = load i32, i32* @y.64
  %1865 = sub i32 %1863, 1
  %1866 = mul i32 %1863, %1865
  %1867 = urem i32 %1866, 2
  %1868 = icmp eq i32 %1867, 0
  %1869 = icmp slt i32 %1864, 10
  %1870 = or i1 %1868, %1869
  br i1 %1870, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %1862, %originalBB378alteredBB
  %1871 = load i32, i32* @x.63
  %1872 = load i32, i32* @y.64
  %1873 = sub i32 %1871, 1
  %1874 = mul i32 %1871, %1873
  %1875 = urem i32 %1874, 2
  %1876 = icmp eq i32 %1875, 0
  %1877 = icmp slt i32 %1872, 10
  %1878 = or i1 %1876, %1877
  br i1 %1878, label %originalBBpart2380, label %originalBB378alteredBB

originalBBpart2380:                               ; preds = %originalBB378
  br label %1879, !dbg !3331

1879:                                             ; preds = %2091, %originalBBpart2380
  call void @llvm.dbg.declare(metadata i32* %39, metadata !3332, metadata !DIExpression()), !dbg !3335
  call void @llvm.dbg.declare(metadata i64* %40, metadata !3336, metadata !DIExpression()), !dbg !3337
  %1880 = load i8*, i8** %13, align 8, !dbg !3338
  %1881 = load i64, i64* %20, align 8, !dbg !3339
  %1882 = load i64, i64* %36, align 8, !dbg !3340
  %1883 = add i64 %1881, %1882, !dbg !3341
  %1884 = getelementptr inbounds i8, i8* %1880, i64 %1883, !dbg !3338
  %1885 = load i64, i64* %14, align 8, !dbg !3342
  %1886 = load i64, i64* %20, align 8, !dbg !3343
  %1887 = load i64, i64* %36, align 8, !dbg !3344
  %1888 = add i64 %1886, %1887, !dbg !3345
  %1889 = sub i64 %1885, %1888, !dbg !3346
  %1890 = call i64 @rpl_mbrtowc(i32* %39, i8* %1884, i64 %1889, %struct.__mbstate_t* %38), !dbg !3347
  store i64 %1890, i64* %40, align 8, !dbg !3337
  %1891 = load i64, i64* %40, align 8, !dbg !3348
  %1892 = icmp eq i64 %1891, 0, !dbg !3350
  br i1 %1892, label %1893, label %1894, !dbg !3351

1893:                                             ; preds = %1879
  br label %2095, !dbg !3352

1894:                                             ; preds = %1879
  %1895 = load i64, i64* %40, align 8, !dbg !3353
  %1896 = icmp eq i64 %1895, -1, !dbg !3355
  br i1 %1896, label %1897, label %1898, !dbg !3356

1897:                                             ; preds = %1894
  store i8 0, i8* %37, align 1, !dbg !3357
  br label %2095, !dbg !3359

1898:                                             ; preds = %1894
  %1899 = load i64, i64* %40, align 8, !dbg !3360
  %1900 = icmp eq i64 %1899, -2, !dbg !3362
  br i1 %1900, label %1901, label %1971, !dbg !3363

1901:                                             ; preds = %1898
  %1902 = load i32, i32* @x.63
  %1903 = load i32, i32* @y.64
  %1904 = sub i32 %1902, 1
  %1905 = mul i32 %1902, %1904
  %1906 = urem i32 %1905, 2
  %1907 = icmp eq i32 %1906, 0
  %1908 = icmp slt i32 %1903, 10
  %1909 = or i1 %1907, %1908
  br i1 %1909, label %originalBB382, label %originalBB382alteredBB

originalBB382:                                    ; preds = %1901, %originalBB382alteredBB
  store i8 0, i8* %37, align 1, !dbg !3364
  %1910 = load i32, i32* @x.63
  %1911 = load i32, i32* @y.64
  %1912 = sub i32 %1910, 1
  %1913 = mul i32 %1910, %1912
  %1914 = urem i32 %1913, 2
  %1915 = icmp eq i32 %1914, 0
  %1916 = icmp slt i32 %1911, 10
  %1917 = or i1 %1915, %1916
  br i1 %1917, label %originalBBpart2384, label %originalBB382alteredBB

originalBBpart2384:                               ; preds = %originalBB382
  br label %1918, !dbg !3366

1918:                                             ; preds = %1951, %originalBBpart2384
  %1919 = load i64, i64* %20, align 8, !dbg !3367
  %1920 = load i64, i64* %36, align 8, !dbg !3368
  %1921 = add i64 %1919, %1920, !dbg !3369
  %1922 = load i64, i64* %14, align 8, !dbg !3370
  %1923 = icmp ult i64 %1921, %1922, !dbg !3371
  br i1 %1923, label %1924, label %1949, !dbg !3372

1924:                                             ; preds = %1918
  %1925 = load i32, i32* @x.63
  %1926 = load i32, i32* @y.64
  %1927 = sub i32 %1925, 1
  %1928 = mul i32 %1925, %1927
  %1929 = urem i32 %1928, 2
  %1930 = icmp eq i32 %1929, 0
  %1931 = icmp slt i32 %1926, 10
  %1932 = or i1 %1930, %1931
  br i1 %1932, label %originalBB386, label %originalBB386alteredBB

originalBB386:                                    ; preds = %1924, %originalBB386alteredBB
  %1933 = load i8*, i8** %13, align 8, !dbg !3373
  %1934 = load i64, i64* %20, align 8, !dbg !3374
  %1935 = load i64, i64* %36, align 8, !dbg !3375
  %1936 = add i64 %1934, %1935, !dbg !3376
  %1937 = getelementptr inbounds i8, i8* %1933, i64 %1936, !dbg !3373
  %1938 = load i8, i8* %1937, align 1, !dbg !3373
  %1939 = sext i8 %1938 to i32, !dbg !3373
  %1940 = icmp ne i32 %1939, 0, !dbg !3372
  %1941 = load i32, i32* @x.63
  %1942 = load i32, i32* @y.64
  %1943 = sub i32 %1941, 1
  %1944 = mul i32 %1941, %1943
  %1945 = urem i32 %1944, 2
  %1946 = icmp eq i32 %1945, 0
  %1947 = icmp slt i32 %1942, 10
  %1948 = or i1 %1946, %1947
  br i1 %1948, label %originalBBpart2397, label %originalBB386alteredBB

originalBBpart2397:                               ; preds = %originalBB386
  br label %1949

1949:                                             ; preds = %originalBBpart2397, %1918
  %1950 = phi i1 [ false, %1918 ], [ %1940, %originalBBpart2397 ], !dbg !3377
  br i1 %1950, label %1951, label %1954, !dbg !3366

1951:                                             ; preds = %1949
  %1952 = load i64, i64* %36, align 8, !dbg !3378
  %1953 = add i64 %1952, 1, !dbg !3378
  store i64 %1953, i64* %36, align 8, !dbg !3378
  br label %1918, !dbg !3366, !llvm.loop !3379

1954:                                             ; preds = %1949
  %1955 = load i32, i32* @x.63
  %1956 = load i32, i32* @y.64
  %1957 = sub i32 %1955, 1
  %1958 = mul i32 %1955, %1957
  %1959 = urem i32 %1958, 2
  %1960 = icmp eq i32 %1959, 0
  %1961 = icmp slt i32 %1956, 10
  %1962 = or i1 %1960, %1961
  br i1 %1962, label %originalBB399, label %originalBB399alteredBB

originalBB399:                                    ; preds = %1954, %originalBB399alteredBB
  %1963 = load i32, i32* @x.63
  %1964 = load i32, i32* @y.64
  %1965 = sub i32 %1963, 1
  %1966 = mul i32 %1963, %1965
  %1967 = urem i32 %1966, 2
  %1968 = icmp eq i32 %1967, 0
  %1969 = icmp slt i32 %1964, 10
  %1970 = or i1 %1968, %1969
  br i1 %1970, label %originalBBpart2401, label %originalBB399alteredBB

originalBBpart2401:                               ; preds = %originalBB399
  br label %2095, !dbg !3380

1971:                                             ; preds = %1898
  %1972 = load i8, i8* %27, align 1, !dbg !3381
  %1973 = trunc i8 %1972 to i1, !dbg !3381
  br i1 %1973, label %1974, label %2031, !dbg !3384

1974:                                             ; preds = %1971
  %1975 = load i32, i32* %15, align 4, !dbg !3385
  %1976 = icmp eq i32 %1975, 2, !dbg !3386
  br i1 %1976, label %1977, label %2031, !dbg !3387

1977:                                             ; preds = %1974
  call void @llvm.dbg.declare(metadata i64* %41, metadata !3388, metadata !DIExpression()), !dbg !3390
  store i64 1, i64* %41, align 8, !dbg !3391
  br label %1978, !dbg !3393

1978:                                             ; preds = %2011, %1977
  %1979 = load i32, i32* @x.63
  %1980 = load i32, i32* @y.64
  %1981 = sub i32 %1979, 1
  %1982 = mul i32 %1979, %1981
  %1983 = urem i32 %1982, 2
  %1984 = icmp eq i32 %1983, 0
  %1985 = icmp slt i32 %1980, 10
  %1986 = or i1 %1984, %1985
  br i1 %1986, label %originalBB403, label %originalBB403alteredBB

originalBB403:                                    ; preds = %1978, %originalBB403alteredBB
  %1987 = load i64, i64* %41, align 8, !dbg !3394
  %1988 = load i64, i64* %40, align 8, !dbg !3396
  %1989 = icmp ult i64 %1987, %1988, !dbg !3397
  %1990 = load i32, i32* @x.63
  %1991 = load i32, i32* @y.64
  %1992 = sub i32 %1990, 1
  %1993 = mul i32 %1990, %1992
  %1994 = urem i32 %1993, 2
  %1995 = icmp eq i32 %1994, 0
  %1996 = icmp slt i32 %1991, 10
  %1997 = or i1 %1995, %1996
  br i1 %1997, label %originalBBpart2405, label %originalBB403alteredBB

originalBBpart2405:                               ; preds = %originalBB403
  br i1 %1989, label %1998, label %2014, !dbg !3398

1998:                                             ; preds = %originalBBpart2405
  %1999 = load i8*, i8** %13, align 8, !dbg !3399
  %2000 = load i64, i64* %20, align 8, !dbg !3400
  %2001 = load i64, i64* %36, align 8, !dbg !3401
  %2002 = add i64 %2000, %2001, !dbg !3402
  %2003 = load i64, i64* %41, align 8, !dbg !3403
  %2004 = add i64 %2002, %2003, !dbg !3404
  %2005 = getelementptr inbounds i8, i8* %1999, i64 %2004, !dbg !3399
  %2006 = load i8, i8* %2005, align 1, !dbg !3399
  %2007 = sext i8 %2006 to i32, !dbg !3399
  switch i32 %2007, label %2009 [
    i32 91, label %2008
    i32 92, label %2008
    i32 94, label %2008
    i32 96, label %2008
    i32 124, label %2008
  ], !dbg !3405

2008:                                             ; preds = %1998, %1998, %1998, %1998, %1998
  br label %3454, !dbg !3406

2009:                                             ; preds = %1998
  br label %2010, !dbg !3408

2010:                                             ; preds = %2009
  br label %2011, !dbg !3409

2011:                                             ; preds = %2010
  %2012 = load i64, i64* %41, align 8, !dbg !3410
  %2013 = add i64 %2012, 1, !dbg !3410
  store i64 %2013, i64* %41, align 8, !dbg !3410
  br label %1978, !dbg !3411, !llvm.loop !3412

2014:                                             ; preds = %originalBBpart2405
  %2015 = load i32, i32* @x.63
  %2016 = load i32, i32* @y.64
  %2017 = sub i32 %2015, 1
  %2018 = mul i32 %2015, %2017
  %2019 = urem i32 %2018, 2
  %2020 = icmp eq i32 %2019, 0
  %2021 = icmp slt i32 %2016, 10
  %2022 = or i1 %2020, %2021
  br i1 %2022, label %originalBB407, label %originalBB407alteredBB

originalBB407:                                    ; preds = %2014, %originalBB407alteredBB
  %2023 = load i32, i32* @x.63
  %2024 = load i32, i32* @y.64
  %2025 = sub i32 %2023, 1
  %2026 = mul i32 %2023, %2025
  %2027 = urem i32 %2026, 2
  %2028 = icmp eq i32 %2027, 0
  %2029 = icmp slt i32 %2024, 10
  %2030 = or i1 %2028, %2029
  br i1 %2030, label %originalBBpart2409, label %originalBB407alteredBB

originalBBpart2409:                               ; preds = %originalBB407
  br label %2031, !dbg !3414

2031:                                             ; preds = %originalBBpart2409, %1974, %1971
  %2032 = load i32, i32* %39, align 4, !dbg !3415
  %2033 = call i32 @iswprint(i32 %2032) #10, !dbg !3417
  %2034 = icmp ne i32 %2033, 0, !dbg !3417
  br i1 %2034, label %2036, label %2035, !dbg !3418

2035:                                             ; preds = %2031
  store i8 0, i8* %37, align 1, !dbg !3419
  br label %2036, !dbg !3420

2036:                                             ; preds = %2035, %2031
  %2037 = load i32, i32* @x.63
  %2038 = load i32, i32* @y.64
  %2039 = sub i32 %2037, 1
  %2040 = mul i32 %2037, %2039
  %2041 = urem i32 %2040, 2
  %2042 = icmp eq i32 %2041, 0
  %2043 = icmp slt i32 %2038, 10
  %2044 = or i1 %2042, %2043
  br i1 %2044, label %originalBB411, label %originalBB411alteredBB

originalBB411:                                    ; preds = %2036, %originalBB411alteredBB
  %2045 = load i64, i64* %40, align 8, !dbg !3421
  %2046 = load i64, i64* %36, align 8, !dbg !3422
  %2047 = add i64 %2046, %2045, !dbg !3422
  store i64 %2047, i64* %36, align 8, !dbg !3422
  %2048 = load i32, i32* @x.63
  %2049 = load i32, i32* @y.64
  %2050 = sub i32 %2048, 1
  %2051 = mul i32 %2048, %2050
  %2052 = urem i32 %2051, 2
  %2053 = icmp eq i32 %2052, 0
  %2054 = icmp slt i32 %2049, 10
  %2055 = or i1 %2053, %2054
  br i1 %2055, label %originalBBpart2421, label %originalBB411alteredBB

originalBBpart2421:                               ; preds = %originalBB411
  br label %2056

2056:                                             ; preds = %originalBBpart2421
  %2057 = load i32, i32* @x.63
  %2058 = load i32, i32* @y.64
  %2059 = sub i32 %2057, 1
  %2060 = mul i32 %2057, %2059
  %2061 = urem i32 %2060, 2
  %2062 = icmp eq i32 %2061, 0
  %2063 = icmp slt i32 %2058, 10
  %2064 = or i1 %2062, %2063
  br i1 %2064, label %originalBB423, label %originalBB423alteredBB

originalBB423:                                    ; preds = %2056, %originalBB423alteredBB
  %2065 = load i32, i32* @x.63
  %2066 = load i32, i32* @y.64
  %2067 = sub i32 %2065, 1
  %2068 = mul i32 %2065, %2067
  %2069 = urem i32 %2068, 2
  %2070 = icmp eq i32 %2069, 0
  %2071 = icmp slt i32 %2066, 10
  %2072 = or i1 %2070, %2071
  br i1 %2072, label %originalBBpart2425, label %originalBB423alteredBB

originalBBpart2425:                               ; preds = %originalBB423
  br label %2073

2073:                                             ; preds = %originalBBpart2425
  br label %2074

2074:                                             ; preds = %2073
  %2075 = load i32, i32* @x.63
  %2076 = load i32, i32* @y.64
  %2077 = sub i32 %2075, 1
  %2078 = mul i32 %2075, %2077
  %2079 = urem i32 %2078, 2
  %2080 = icmp eq i32 %2079, 0
  %2081 = icmp slt i32 %2076, 10
  %2082 = or i1 %2080, %2081
  br i1 %2082, label %originalBB427, label %originalBB427alteredBB

originalBB427:                                    ; preds = %2074, %originalBB427alteredBB
  %2083 = load i32, i32* @x.63
  %2084 = load i32, i32* @y.64
  %2085 = sub i32 %2083, 1
  %2086 = mul i32 %2083, %2085
  %2087 = urem i32 %2086, 2
  %2088 = icmp eq i32 %2087, 0
  %2089 = icmp slt i32 %2084, 10
  %2090 = or i1 %2088, %2089
  br i1 %2090, label %originalBBpart2429, label %originalBB427alteredBB

originalBBpart2429:                               ; preds = %originalBB427
  br label %2091, !dbg !3423

2091:                                             ; preds = %originalBBpart2429
  %2092 = call i32 @mbsinit(%struct.__mbstate_t* %38) #13, !dbg !3424
  %2093 = icmp ne i32 %2092, 0, !dbg !3425
  %2094 = xor i1 %2093, true, !dbg !3425
  br i1 %2094, label %1879, label %2095, !dbg !3423, !llvm.loop !3426

2095:                                             ; preds = %2091, %originalBBpart2401, %1897, %1893
  br label %2096

2096:                                             ; preds = %2095, %originalBBpart2376
  %2097 = load i32, i32* @x.63
  %2098 = load i32, i32* @y.64
  %2099 = sub i32 %2097, 1
  %2100 = mul i32 %2097, %2099
  %2101 = urem i32 %2100, 2
  %2102 = icmp eq i32 %2101, 0
  %2103 = icmp slt i32 %2098, 10
  %2104 = or i1 %2102, %2103
  br i1 %2104, label %originalBB431, label %originalBB431alteredBB

originalBB431:                                    ; preds = %2096, %originalBB431alteredBB
  %2105 = load i8, i8* %37, align 1, !dbg !3428
  %2106 = trunc i8 %2105 to i1, !dbg !3428
  %2107 = zext i1 %2106 to i8, !dbg !3429
  store i8 %2107, i8* %35, align 1, !dbg !3429
  %2108 = load i64, i64* %36, align 8, !dbg !3430
  %2109 = icmp ult i64 1, %2108, !dbg !3432
  %2110 = load i32, i32* @x.63
  %2111 = load i32, i32* @y.64
  %2112 = sub i32 %2110, 1
  %2113 = mul i32 %2110, %2112
  %2114 = urem i32 %2113, 2
  %2115 = icmp eq i32 %2114, 0
  %2116 = icmp slt i32 %2111, 10
  %2117 = or i1 %2115, %2116
  br i1 %2117, label %originalBBpart2433, label %originalBB431alteredBB

originalBBpart2433:                               ; preds = %originalBB431
  br i1 %2109, label %2156, label %2118, !dbg !3433

2118:                                             ; preds = %originalBBpart2433
  %2119 = load i32, i32* @x.63
  %2120 = load i32, i32* @y.64
  %2121 = sub i32 %2119, 1
  %2122 = mul i32 %2119, %2121
  %2123 = urem i32 %2122, 2
  %2124 = icmp eq i32 %2123, 0
  %2125 = icmp slt i32 %2120, 10
  %2126 = or i1 %2124, %2125
  br i1 %2126, label %originalBB435, label %originalBB435alteredBB

originalBB435:                                    ; preds = %2118, %originalBB435alteredBB
  %2127 = load i8, i8* %25, align 1, !dbg !3434
  %2128 = trunc i8 %2127 to i1, !dbg !3434
  %2129 = load i32, i32* @x.63
  %2130 = load i32, i32* @y.64
  %2131 = sub i32 %2129, 1
  %2132 = mul i32 %2129, %2131
  %2133 = urem i32 %2132, 2
  %2134 = icmp eq i32 %2133, 0
  %2135 = icmp slt i32 %2130, 10
  %2136 = or i1 %2134, %2135
  br i1 %2136, label %originalBBpart2437, label %originalBB435alteredBB

originalBBpart2437:                               ; preds = %originalBB435
  br i1 %2128, label %2137, label %2680, !dbg !3435

2137:                                             ; preds = %originalBBpart2437
  %2138 = load i32, i32* @x.63
  %2139 = load i32, i32* @y.64
  %2140 = sub i32 %2138, 1
  %2141 = mul i32 %2138, %2140
  %2142 = urem i32 %2141, 2
  %2143 = icmp eq i32 %2142, 0
  %2144 = icmp slt i32 %2139, 10
  %2145 = or i1 %2143, %2144
  br i1 %2145, label %originalBB439, label %originalBB439alteredBB

originalBB439:                                    ; preds = %2137, %originalBB439alteredBB
  %2146 = load i8, i8* %37, align 1, !dbg !3436
  %2147 = trunc i8 %2146 to i1, !dbg !3436
  %2148 = load i32, i32* @x.63
  %2149 = load i32, i32* @y.64
  %2150 = sub i32 %2148, 1
  %2151 = mul i32 %2148, %2150
  %2152 = urem i32 %2151, 2
  %2153 = icmp eq i32 %2152, 0
  %2154 = icmp slt i32 %2149, 10
  %2155 = or i1 %2153, %2154
  br i1 %2155, label %originalBBpart2441, label %originalBB439alteredBB

originalBBpart2441:                               ; preds = %originalBB439
  br i1 %2147, label %2680, label %2156, !dbg !3437

2156:                                             ; preds = %originalBBpart2441, %originalBBpart2433
  call void @llvm.dbg.declare(metadata i64* %42, metadata !3438, metadata !DIExpression()), !dbg !3440
  %2157 = load i64, i64* %20, align 8, !dbg !3441
  %2158 = load i64, i64* %36, align 8, !dbg !3442
  %2159 = add i64 %2157, %2158, !dbg !3443
  store i64 %2159, i64* %42, align 8, !dbg !3440
  br label %2160, !dbg !3444

2160:                                             ; preds = %2657, %2156
  %2161 = load i8, i8* %25, align 1, !dbg !3445
  %2162 = trunc i8 %2161 to i1, !dbg !3445
  br i1 %2162, label %2163, label %2492, !dbg !3450

2163:                                             ; preds = %2160
  %2164 = load i8, i8* %37, align 1, !dbg !3451
  %2165 = trunc i8 %2164 to i1, !dbg !3451
  br i1 %2165, label %2492, label %2166, !dbg !3452

2166:                                             ; preds = %2163
  %2167 = load i32, i32* @x.63
  %2168 = load i32, i32* @y.64
  %2169 = sub i32 %2167, 1
  %2170 = mul i32 %2167, %2169
  %2171 = urem i32 %2170, 2
  %2172 = icmp eq i32 %2171, 0
  %2173 = icmp slt i32 %2168, 10
  %2174 = or i1 %2172, %2173
  br i1 %2174, label %originalBB443, label %originalBB443alteredBB

originalBB443:                                    ; preds = %2166, %originalBB443alteredBB
  %2175 = load i32, i32* @x.63
  %2176 = load i32, i32* @y.64
  %2177 = sub i32 %2175, 1
  %2178 = mul i32 %2175, %2177
  %2179 = urem i32 %2178, 2
  %2180 = icmp eq i32 %2179, 0
  %2181 = icmp slt i32 %2176, 10
  %2182 = or i1 %2180, %2181
  br i1 %2182, label %originalBBpart2445, label %originalBB443alteredBB

originalBBpart2445:                               ; preds = %originalBB443
  br label %2183, !dbg !3453

2183:                                             ; preds = %originalBBpart2445
  %2184 = load i32, i32* @x.63
  %2185 = load i32, i32* @y.64
  %2186 = sub i32 %2184, 1
  %2187 = mul i32 %2184, %2186
  %2188 = urem i32 %2187, 2
  %2189 = icmp eq i32 %2188, 0
  %2190 = icmp slt i32 %2185, 10
  %2191 = or i1 %2189, %2190
  br i1 %2191, label %originalBB447, label %originalBB447alteredBB

originalBB447:                                    ; preds = %2183, %originalBB447alteredBB
  %2192 = load i8, i8* %27, align 1, !dbg !3455
  %2193 = trunc i8 %2192 to i1, !dbg !3455
  %2194 = load i32, i32* @x.63
  %2195 = load i32, i32* @y.64
  %2196 = sub i32 %2194, 1
  %2197 = mul i32 %2194, %2196
  %2198 = urem i32 %2197, 2
  %2199 = icmp eq i32 %2198, 0
  %2200 = icmp slt i32 %2195, 10
  %2201 = or i1 %2199, %2200
  br i1 %2201, label %originalBBpart2449, label %originalBB447alteredBB

originalBBpart2449:                               ; preds = %originalBB447
  br i1 %2193, label %2202, label %2203, !dbg !3458

2202:                                             ; preds = %originalBBpart2449
  br label %3454, !dbg !3455

2203:                                             ; preds = %originalBBpart2449
  store i8 1, i8* %34, align 1, !dbg !3458
  %2204 = load i32, i32* %15, align 4, !dbg !3459
  %2205 = icmp eq i32 %2204, 2, !dbg !3459
  br i1 %2205, label %2206, label %2342, !dbg !3459

2206:                                             ; preds = %2203
  %2207 = load i8, i8* %28, align 1, !dbg !3459
  %2208 = trunc i8 %2207 to i1, !dbg !3459
  br i1 %2208, label %2342, label %2209, !dbg !3458

2209:                                             ; preds = %2206
  br label %2210, !dbg !3461

2210:                                             ; preds = %2209
  %2211 = load i32, i32* @x.63
  %2212 = load i32, i32* @y.64
  %2213 = sub i32 %2211, 1
  %2214 = mul i32 %2211, %2213
  %2215 = urem i32 %2214, 2
  %2216 = icmp eq i32 %2215, 0
  %2217 = icmp slt i32 %2212, 10
  %2218 = or i1 %2216, %2217
  br i1 %2218, label %originalBB451, label %originalBB451alteredBB

originalBB451:                                    ; preds = %2210, %originalBB451alteredBB
  %2219 = load i64, i64* %21, align 8, !dbg !3463
  %2220 = load i64, i64* %12, align 8, !dbg !3463
  %2221 = icmp ult i64 %2219, %2220, !dbg !3463
  %2222 = load i32, i32* @x.63
  %2223 = load i32, i32* @y.64
  %2224 = sub i32 %2222, 1
  %2225 = mul i32 %2222, %2224
  %2226 = urem i32 %2225, 2
  %2227 = icmp eq i32 %2226, 0
  %2228 = icmp slt i32 %2223, 10
  %2229 = or i1 %2227, %2228
  br i1 %2229, label %originalBBpart2453, label %originalBB451alteredBB

originalBBpart2453:                               ; preds = %originalBB451
  br i1 %2221, label %2230, label %2234, !dbg !3466

2230:                                             ; preds = %originalBBpart2453
  %2231 = load i8*, i8** %11, align 8, !dbg !3463
  %2232 = load i64, i64* %21, align 8, !dbg !3463
  %2233 = getelementptr inbounds i8, i8* %2231, i64 %2232, !dbg !3463
  store i8 39, i8* %2233, align 1, !dbg !3463
  br label %2234, !dbg !3463

2234:                                             ; preds = %2230, %originalBBpart2453
  %2235 = load i32, i32* @x.63
  %2236 = load i32, i32* @y.64
  %2237 = sub i32 %2235, 1
  %2238 = mul i32 %2235, %2237
  %2239 = urem i32 %2238, 2
  %2240 = icmp eq i32 %2239, 0
  %2241 = icmp slt i32 %2236, 10
  %2242 = or i1 %2240, %2241
  br i1 %2242, label %originalBB455, label %originalBB455alteredBB

originalBB455:                                    ; preds = %2234, %originalBB455alteredBB
  %2243 = load i64, i64* %21, align 8, !dbg !3466
  %2244 = add i64 %2243, 1, !dbg !3466
  store i64 %2244, i64* %21, align 8, !dbg !3466
  %2245 = load i32, i32* @x.63
  %2246 = load i32, i32* @y.64
  %2247 = sub i32 %2245, 1
  %2248 = mul i32 %2245, %2247
  %2249 = urem i32 %2248, 2
  %2250 = icmp eq i32 %2249, 0
  %2251 = icmp slt i32 %2246, 10
  %2252 = or i1 %2250, %2251
  br i1 %2252, label %originalBBpart2465, label %originalBB455alteredBB

originalBBpart2465:                               ; preds = %originalBB455
  br label %2253, !dbg !3466

2253:                                             ; preds = %originalBBpart2465
  br label %2254, !dbg !3461

2254:                                             ; preds = %2253
  %2255 = load i32, i32* @x.63
  %2256 = load i32, i32* @y.64
  %2257 = sub i32 %2255, 1
  %2258 = mul i32 %2255, %2257
  %2259 = urem i32 %2258, 2
  %2260 = icmp eq i32 %2259, 0
  %2261 = icmp slt i32 %2256, 10
  %2262 = or i1 %2260, %2261
  br i1 %2262, label %originalBB467, label %originalBB467alteredBB

originalBB467:                                    ; preds = %2254, %originalBB467alteredBB
  %2263 = load i64, i64* %21, align 8, !dbg !3467
  %2264 = load i64, i64* %12, align 8, !dbg !3467
  %2265 = icmp ult i64 %2263, %2264, !dbg !3467
  %2266 = load i32, i32* @x.63
  %2267 = load i32, i32* @y.64
  %2268 = sub i32 %2266, 1
  %2269 = mul i32 %2266, %2268
  %2270 = urem i32 %2269, 2
  %2271 = icmp eq i32 %2270, 0
  %2272 = icmp slt i32 %2267, 10
  %2273 = or i1 %2271, %2272
  br i1 %2273, label %originalBBpart2469, label %originalBB467alteredBB

originalBBpart2469:                               ; preds = %originalBB467
  br i1 %2265, label %2274, label %2278, !dbg !3470

2274:                                             ; preds = %originalBBpart2469
  %2275 = load i8*, i8** %11, align 8, !dbg !3467
  %2276 = load i64, i64* %21, align 8, !dbg !3467
  %2277 = getelementptr inbounds i8, i8* %2275, i64 %2276, !dbg !3467
  store i8 36, i8* %2277, align 1, !dbg !3467
  br label %2278, !dbg !3467

2278:                                             ; preds = %2274, %originalBBpart2469
  %2279 = load i32, i32* @x.63
  %2280 = load i32, i32* @y.64
  %2281 = sub i32 %2279, 1
  %2282 = mul i32 %2279, %2281
  %2283 = urem i32 %2282, 2
  %2284 = icmp eq i32 %2283, 0
  %2285 = icmp slt i32 %2280, 10
  %2286 = or i1 %2284, %2285
  br i1 %2286, label %originalBB471, label %originalBB471alteredBB

originalBB471:                                    ; preds = %2278, %originalBB471alteredBB
  %2287 = load i64, i64* %21, align 8, !dbg !3470
  %2288 = add i64 %2287, 1, !dbg !3470
  store i64 %2288, i64* %21, align 8, !dbg !3470
  %2289 = load i32, i32* @x.63
  %2290 = load i32, i32* @y.64
  %2291 = sub i32 %2289, 1
  %2292 = mul i32 %2289, %2291
  %2293 = urem i32 %2292, 2
  %2294 = icmp eq i32 %2293, 0
  %2295 = icmp slt i32 %2290, 10
  %2296 = or i1 %2294, %2295
  br i1 %2296, label %originalBBpart2482, label %originalBB471alteredBB

originalBBpart2482:                               ; preds = %originalBB471
  br label %2297, !dbg !3470

2297:                                             ; preds = %originalBBpart2482
  br label %2298, !dbg !3461

2298:                                             ; preds = %2297
  %2299 = load i32, i32* @x.63
  %2300 = load i32, i32* @y.64
  %2301 = sub i32 %2299, 1
  %2302 = mul i32 %2299, %2301
  %2303 = urem i32 %2302, 2
  %2304 = icmp eq i32 %2303, 0
  %2305 = icmp slt i32 %2300, 10
  %2306 = or i1 %2304, %2305
  br i1 %2306, label %originalBB484, label %originalBB484alteredBB

originalBB484:                                    ; preds = %2298, %originalBB484alteredBB
  %2307 = load i64, i64* %21, align 8, !dbg !3471
  %2308 = load i64, i64* %12, align 8, !dbg !3471
  %2309 = icmp ult i64 %2307, %2308, !dbg !3471
  %2310 = load i32, i32* @x.63
  %2311 = load i32, i32* @y.64
  %2312 = sub i32 %2310, 1
  %2313 = mul i32 %2310, %2312
  %2314 = urem i32 %2313, 2
  %2315 = icmp eq i32 %2314, 0
  %2316 = icmp slt i32 %2311, 10
  %2317 = or i1 %2315, %2316
  br i1 %2317, label %originalBBpart2486, label %originalBB484alteredBB

originalBBpart2486:                               ; preds = %originalBB484
  br i1 %2309, label %2318, label %2322, !dbg !3474

2318:                                             ; preds = %originalBBpart2486
  %2319 = load i8*, i8** %11, align 8, !dbg !3471
  %2320 = load i64, i64* %21, align 8, !dbg !3471
  %2321 = getelementptr inbounds i8, i8* %2319, i64 %2320, !dbg !3471
  store i8 39, i8* %2321, align 1, !dbg !3471
  br label %2322, !dbg !3471

2322:                                             ; preds = %2318, %originalBBpart2486
  %2323 = load i64, i64* %21, align 8, !dbg !3474
  %2324 = add i64 %2323, 1, !dbg !3474
  store i64 %2324, i64* %21, align 8, !dbg !3474
  br label %2325, !dbg !3474

2325:                                             ; preds = %2322
  %2326 = load i32, i32* @x.63
  %2327 = load i32, i32* @y.64
  %2328 = sub i32 %2326, 1
  %2329 = mul i32 %2326, %2328
  %2330 = urem i32 %2329, 2
  %2331 = icmp eq i32 %2330, 0
  %2332 = icmp slt i32 %2327, 10
  %2333 = or i1 %2331, %2332
  br i1 %2333, label %originalBB488, label %originalBB488alteredBB

originalBB488:                                    ; preds = %2325, %originalBB488alteredBB
  store i8 1, i8* %28, align 1, !dbg !3461
  %2334 = load i32, i32* @x.63
  %2335 = load i32, i32* @y.64
  %2336 = sub i32 %2334, 1
  %2337 = mul i32 %2334, %2336
  %2338 = urem i32 %2337, 2
  %2339 = icmp eq i32 %2338, 0
  %2340 = icmp slt i32 %2335, 10
  %2341 = or i1 %2339, %2340
  br i1 %2341, label %originalBBpart2490, label %originalBB488alteredBB

originalBBpart2490:                               ; preds = %originalBB488
  br label %2342, !dbg !3461

2342:                                             ; preds = %originalBBpart2490, %2206, %2203
  %2343 = load i32, i32* @x.63
  %2344 = load i32, i32* @y.64
  %2345 = sub i32 %2343, 1
  %2346 = mul i32 %2343, %2345
  %2347 = urem i32 %2346, 2
  %2348 = icmp eq i32 %2347, 0
  %2349 = icmp slt i32 %2344, 10
  %2350 = or i1 %2348, %2349
  br i1 %2350, label %originalBB492, label %originalBB492alteredBB

originalBB492:                                    ; preds = %2342, %originalBB492alteredBB
  %2351 = load i32, i32* @x.63
  %2352 = load i32, i32* @y.64
  %2353 = sub i32 %2351, 1
  %2354 = mul i32 %2351, %2353
  %2355 = urem i32 %2354, 2
  %2356 = icmp eq i32 %2355, 0
  %2357 = icmp slt i32 %2352, 10
  %2358 = or i1 %2356, %2357
  br i1 %2358, label %originalBBpart2494, label %originalBB492alteredBB

originalBBpart2494:                               ; preds = %originalBB492
  br label %2359, !dbg !3458

2359:                                             ; preds = %originalBBpart2494
  %2360 = load i32, i32* @x.63
  %2361 = load i32, i32* @y.64
  %2362 = sub i32 %2360, 1
  %2363 = mul i32 %2360, %2362
  %2364 = urem i32 %2363, 2
  %2365 = icmp eq i32 %2364, 0
  %2366 = icmp slt i32 %2361, 10
  %2367 = or i1 %2365, %2366
  br i1 %2367, label %originalBB496, label %originalBB496alteredBB

originalBB496:                                    ; preds = %2359, %originalBB496alteredBB
  %2368 = load i64, i64* %21, align 8, !dbg !3475
  %2369 = load i64, i64* %12, align 8, !dbg !3475
  %2370 = icmp ult i64 %2368, %2369, !dbg !3475
  %2371 = load i32, i32* @x.63
  %2372 = load i32, i32* @y.64
  %2373 = sub i32 %2371, 1
  %2374 = mul i32 %2371, %2373
  %2375 = urem i32 %2374, 2
  %2376 = icmp eq i32 %2375, 0
  %2377 = icmp slt i32 %2372, 10
  %2378 = or i1 %2376, %2377
  br i1 %2378, label %originalBBpart2498, label %originalBB496alteredBB

originalBBpart2498:                               ; preds = %originalBB496
  br i1 %2370, label %2379, label %2399, !dbg !3478

2379:                                             ; preds = %originalBBpart2498
  %2380 = load i32, i32* @x.63
  %2381 = load i32, i32* @y.64
  %2382 = sub i32 %2380, 1
  %2383 = mul i32 %2380, %2382
  %2384 = urem i32 %2383, 2
  %2385 = icmp eq i32 %2384, 0
  %2386 = icmp slt i32 %2381, 10
  %2387 = or i1 %2385, %2386
  br i1 %2387, label %originalBB500, label %originalBB500alteredBB

originalBB500:                                    ; preds = %2379, %originalBB500alteredBB
  %2388 = load i8*, i8** %11, align 8, !dbg !3475
  %2389 = load i64, i64* %21, align 8, !dbg !3475
  %2390 = getelementptr inbounds i8, i8* %2388, i64 %2389, !dbg !3475
  store i8 92, i8* %2390, align 1, !dbg !3475
  %2391 = load i32, i32* @x.63
  %2392 = load i32, i32* @y.64
  %2393 = sub i32 %2391, 1
  %2394 = mul i32 %2391, %2393
  %2395 = urem i32 %2394, 2
  %2396 = icmp eq i32 %2395, 0
  %2397 = icmp slt i32 %2392, 10
  %2398 = or i1 %2396, %2397
  br i1 %2398, label %originalBBpart2502, label %originalBB500alteredBB

originalBBpart2502:                               ; preds = %originalBB500
  br label %2399, !dbg !3475

2399:                                             ; preds = %originalBBpart2502, %originalBBpart2498
  %2400 = load i64, i64* %21, align 8, !dbg !3478
  %2401 = add i64 %2400, 1, !dbg !3478
  store i64 %2401, i64* %21, align 8, !dbg !3478
  br label %2402, !dbg !3478

2402:                                             ; preds = %2399
  br label %2403, !dbg !3458

2403:                                             ; preds = %2402
  br label %2404, !dbg !3479

2404:                                             ; preds = %2403
  %2405 = load i32, i32* @x.63
  %2406 = load i32, i32* @y.64
  %2407 = sub i32 %2405, 1
  %2408 = mul i32 %2405, %2407
  %2409 = urem i32 %2408, 2
  %2410 = icmp eq i32 %2409, 0
  %2411 = icmp slt i32 %2406, 10
  %2412 = or i1 %2410, %2411
  br i1 %2412, label %originalBB504, label %originalBB504alteredBB

originalBB504:                                    ; preds = %2404, %originalBB504alteredBB
  %2413 = load i64, i64* %21, align 8, !dbg !3480
  %2414 = load i64, i64* %12, align 8, !dbg !3480
  %2415 = icmp ult i64 %2413, %2414, !dbg !3480
  %2416 = load i32, i32* @x.63
  %2417 = load i32, i32* @y.64
  %2418 = sub i32 %2416, 1
  %2419 = mul i32 %2416, %2418
  %2420 = urem i32 %2419, 2
  %2421 = icmp eq i32 %2420, 0
  %2422 = icmp slt i32 %2417, 10
  %2423 = or i1 %2421, %2422
  br i1 %2423, label %originalBBpart2506, label %originalBB504alteredBB

originalBBpart2506:                               ; preds = %originalBB504
  br i1 %2415, label %2424, label %2433, !dbg !3483

2424:                                             ; preds = %originalBBpart2506
  %2425 = load i8, i8* %31, align 1, !dbg !3480
  %2426 = zext i8 %2425 to i32, !dbg !3480
  %2427 = ashr i32 %2426, 6, !dbg !3480
  %2428 = add nsw i32 48, %2427, !dbg !3480
  %2429 = trunc i32 %2428 to i8, !dbg !3480
  %2430 = load i8*, i8** %11, align 8, !dbg !3480
  %2431 = load i64, i64* %21, align 8, !dbg !3480
  %2432 = getelementptr inbounds i8, i8* %2430, i64 %2431, !dbg !3480
  store i8 %2429, i8* %2432, align 1, !dbg !3480
  br label %2433, !dbg !3480

2433:                                             ; preds = %2424, %originalBBpart2506
  %2434 = load i32, i32* @x.63
  %2435 = load i32, i32* @y.64
  %2436 = sub i32 %2434, 1
  %2437 = mul i32 %2434, %2436
  %2438 = urem i32 %2437, 2
  %2439 = icmp eq i32 %2438, 0
  %2440 = icmp slt i32 %2435, 10
  %2441 = or i1 %2439, %2440
  br i1 %2441, label %originalBB508, label %originalBB508alteredBB

originalBB508:                                    ; preds = %2433, %originalBB508alteredBB
  %2442 = load i64, i64* %21, align 8, !dbg !3483
  %2443 = add i64 %2442, 1, !dbg !3483
  store i64 %2443, i64* %21, align 8, !dbg !3483
  %2444 = load i32, i32* @x.63
  %2445 = load i32, i32* @y.64
  %2446 = sub i32 %2444, 1
  %2447 = mul i32 %2444, %2446
  %2448 = urem i32 %2447, 2
  %2449 = icmp eq i32 %2448, 0
  %2450 = icmp slt i32 %2445, 10
  %2451 = or i1 %2449, %2450
  br i1 %2451, label %originalBBpart2510, label %originalBB508alteredBB

originalBBpart2510:                               ; preds = %originalBB508
  br label %2452, !dbg !3483

2452:                                             ; preds = %originalBBpart2510
  br label %2453, !dbg !3484

2453:                                             ; preds = %2452
  %2454 = load i64, i64* %21, align 8, !dbg !3485
  %2455 = load i64, i64* %12, align 8, !dbg !3485
  %2456 = icmp ult i64 %2454, %2455, !dbg !3485
  br i1 %2456, label %2457, label %2467, !dbg !3488

2457:                                             ; preds = %2453
  %2458 = load i8, i8* %31, align 1, !dbg !3485
  %2459 = zext i8 %2458 to i32, !dbg !3485
  %2460 = ashr i32 %2459, 3, !dbg !3485
  %2461 = and i32 %2460, 7, !dbg !3485
  %2462 = add nsw i32 48, %2461, !dbg !3485
  %2463 = trunc i32 %2462 to i8, !dbg !3485
  %2464 = load i8*, i8** %11, align 8, !dbg !3485
  %2465 = load i64, i64* %21, align 8, !dbg !3485
  %2466 = getelementptr inbounds i8, i8* %2464, i64 %2465, !dbg !3485
  store i8 %2463, i8* %2466, align 1, !dbg !3485
  br label %2467, !dbg !3485

2467:                                             ; preds = %2457, %2453
  %2468 = load i64, i64* %21, align 8, !dbg !3488
  %2469 = add i64 %2468, 1, !dbg !3488
  store i64 %2469, i64* %21, align 8, !dbg !3488
  br label %2470, !dbg !3488

2470:                                             ; preds = %2467
  %2471 = load i32, i32* @x.63
  %2472 = load i32, i32* @y.64
  %2473 = sub i32 %2471, 1
  %2474 = mul i32 %2471, %2473
  %2475 = urem i32 %2474, 2
  %2476 = icmp eq i32 %2475, 0
  %2477 = icmp slt i32 %2472, 10
  %2478 = or i1 %2476, %2477
  br i1 %2478, label %originalBB512, label %originalBB512alteredBB

originalBB512:                                    ; preds = %2470, %originalBB512alteredBB
  %2479 = load i8, i8* %31, align 1, !dbg !3489
  %2480 = zext i8 %2479 to i32, !dbg !3489
  %2481 = and i32 %2480, 7, !dbg !3490
  %2482 = add nsw i32 48, %2481, !dbg !3491
  %2483 = trunc i32 %2482 to i8, !dbg !3492
  store i8 %2483, i8* %31, align 1, !dbg !3493
  %2484 = load i32, i32* @x.63
  %2485 = load i32, i32* @y.64
  %2486 = sub i32 %2484, 1
  %2487 = mul i32 %2484, %2486
  %2488 = urem i32 %2487, 2
  %2489 = icmp eq i32 %2488, 0
  %2490 = icmp slt i32 %2485, 10
  %2491 = or i1 %2489, %2490
  br i1 %2491, label %originalBBpart2528, label %originalBB512alteredBB

originalBBpart2528:                               ; preds = %originalBB512
  br label %2525, !dbg !3494

2492:                                             ; preds = %2163, %2160
  %2493 = load i8, i8* %33, align 1, !dbg !3495
  %2494 = trunc i8 %2493 to i1, !dbg !3495
  br i1 %2494, label %2495, label %2524, !dbg !3497

2495:                                             ; preds = %2492
  br label %2496, !dbg !3498

2496:                                             ; preds = %2495
  %2497 = load i64, i64* %21, align 8, !dbg !3500
  %2498 = load i64, i64* %12, align 8, !dbg !3500
  %2499 = icmp ult i64 %2497, %2498, !dbg !3500
  br i1 %2499, label %2500, label %2520, !dbg !3503

2500:                                             ; preds = %2496
  %2501 = load i32, i32* @x.63
  %2502 = load i32, i32* @y.64
  %2503 = sub i32 %2501, 1
  %2504 = mul i32 %2501, %2503
  %2505 = urem i32 %2504, 2
  %2506 = icmp eq i32 %2505, 0
  %2507 = icmp slt i32 %2502, 10
  %2508 = or i1 %2506, %2507
  br i1 %2508, label %originalBB530, label %originalBB530alteredBB

originalBB530:                                    ; preds = %2500, %originalBB530alteredBB
  %2509 = load i8*, i8** %11, align 8, !dbg !3500
  %2510 = load i64, i64* %21, align 8, !dbg !3500
  %2511 = getelementptr inbounds i8, i8* %2509, i64 %2510, !dbg !3500
  store i8 92, i8* %2511, align 1, !dbg !3500
  %2512 = load i32, i32* @x.63
  %2513 = load i32, i32* @y.64
  %2514 = sub i32 %2512, 1
  %2515 = mul i32 %2512, %2514
  %2516 = urem i32 %2515, 2
  %2517 = icmp eq i32 %2516, 0
  %2518 = icmp slt i32 %2513, 10
  %2519 = or i1 %2517, %2518
  br i1 %2519, label %originalBBpart2532, label %originalBB530alteredBB

originalBBpart2532:                               ; preds = %originalBB530
  br label %2520, !dbg !3500

2520:                                             ; preds = %originalBBpart2532, %2496
  %2521 = load i64, i64* %21, align 8, !dbg !3503
  %2522 = add i64 %2521, 1, !dbg !3503
  store i64 %2522, i64* %21, align 8, !dbg !3503
  br label %2523, !dbg !3503

2523:                                             ; preds = %2520
  store i8 0, i8* %33, align 1, !dbg !3504
  br label %2524, !dbg !3505

2524:                                             ; preds = %2523, %2492
  br label %2525

2525:                                             ; preds = %2524, %originalBBpart2528
  %2526 = load i32, i32* @x.63
  %2527 = load i32, i32* @y.64
  %2528 = sub i32 %2526, 1
  %2529 = mul i32 %2526, %2528
  %2530 = urem i32 %2529, 2
  %2531 = icmp eq i32 %2530, 0
  %2532 = icmp slt i32 %2527, 10
  %2533 = or i1 %2531, %2532
  br i1 %2533, label %originalBB534, label %originalBB534alteredBB

originalBB534:                                    ; preds = %2525, %originalBB534alteredBB
  %2534 = load i64, i64* %42, align 8, !dbg !3506
  %2535 = load i64, i64* %20, align 8, !dbg !3508
  %2536 = add i64 %2535, 1, !dbg !3509
  %2537 = icmp ule i64 %2534, %2536, !dbg !3510
  %2538 = load i32, i32* @x.63
  %2539 = load i32, i32* @y.64
  %2540 = sub i32 %2538, 1
  %2541 = mul i32 %2538, %2540
  %2542 = urem i32 %2541, 2
  %2543 = icmp eq i32 %2542, 0
  %2544 = icmp slt i32 %2539, 10
  %2545 = or i1 %2543, %2544
  br i1 %2545, label %originalBBpart2543, label %originalBB534alteredBB

originalBBpart2543:                               ; preds = %originalBB534
  br i1 %2537, label %2546, label %2547, !dbg !3511

2546:                                             ; preds = %originalBBpart2543
  br label %2663, !dbg !3512

2547:                                             ; preds = %originalBBpart2543
  br label %2548, !dbg !3513

2548:                                             ; preds = %2547
  %2549 = load i32, i32* @x.63
  %2550 = load i32, i32* @y.64
  %2551 = sub i32 %2549, 1
  %2552 = mul i32 %2549, %2551
  %2553 = urem i32 %2552, 2
  %2554 = icmp eq i32 %2553, 0
  %2555 = icmp slt i32 %2550, 10
  %2556 = or i1 %2554, %2555
  br i1 %2556, label %originalBB545, label %originalBB545alteredBB

originalBB545:                                    ; preds = %2548, %originalBB545alteredBB
  %2557 = load i8, i8* %28, align 1, !dbg !3514
  %2558 = trunc i8 %2557 to i1, !dbg !3514
  %2559 = load i32, i32* @x.63
  %2560 = load i32, i32* @y.64
  %2561 = sub i32 %2559, 1
  %2562 = mul i32 %2559, %2561
  %2563 = urem i32 %2562, 2
  %2564 = icmp eq i32 %2563, 0
  %2565 = icmp slt i32 %2560, 10
  %2566 = or i1 %2564, %2565
  br i1 %2566, label %originalBBpart2547, label %originalBB545alteredBB

originalBBpart2547:                               ; preds = %originalBB545
  br i1 %2558, label %2567, label %2643, !dbg !3514

2567:                                             ; preds = %originalBBpart2547
  %2568 = load i8, i8* %34, align 1, !dbg !3514
  %2569 = trunc i8 %2568 to i1, !dbg !3514
  br i1 %2569, label %2643, label %2570, !dbg !3517

2570:                                             ; preds = %2567
  br label %2571, !dbg !3518

2571:                                             ; preds = %2570
  %2572 = load i64, i64* %21, align 8, !dbg !3520
  %2573 = load i64, i64* %12, align 8, !dbg !3520
  %2574 = icmp ult i64 %2572, %2573, !dbg !3520
  br i1 %2574, label %2575, label %2579, !dbg !3523

2575:                                             ; preds = %2571
  %2576 = load i8*, i8** %11, align 8, !dbg !3520
  %2577 = load i64, i64* %21, align 8, !dbg !3520
  %2578 = getelementptr inbounds i8, i8* %2576, i64 %2577, !dbg !3520
  store i8 39, i8* %2578, align 1, !dbg !3520
  br label %2579, !dbg !3520

2579:                                             ; preds = %2575, %2571
  %2580 = load i32, i32* @x.63
  %2581 = load i32, i32* @y.64
  %2582 = sub i32 %2580, 1
  %2583 = mul i32 %2580, %2582
  %2584 = urem i32 %2583, 2
  %2585 = icmp eq i32 %2584, 0
  %2586 = icmp slt i32 %2581, 10
  %2587 = or i1 %2585, %2586
  br i1 %2587, label %originalBB549, label %originalBB549alteredBB

originalBB549:                                    ; preds = %2579, %originalBB549alteredBB
  %2588 = load i64, i64* %21, align 8, !dbg !3523
  %2589 = add i64 %2588, 1, !dbg !3523
  store i64 %2589, i64* %21, align 8, !dbg !3523
  %2590 = load i32, i32* @x.63
  %2591 = load i32, i32* @y.64
  %2592 = sub i32 %2590, 1
  %2593 = mul i32 %2590, %2592
  %2594 = urem i32 %2593, 2
  %2595 = icmp eq i32 %2594, 0
  %2596 = icmp slt i32 %2591, 10
  %2597 = or i1 %2595, %2596
  br i1 %2597, label %originalBBpart2560, label %originalBB549alteredBB

originalBBpart2560:                               ; preds = %originalBB549
  br label %2598, !dbg !3523

2598:                                             ; preds = %originalBBpart2560
  br label %2599, !dbg !3518

2599:                                             ; preds = %2598
  %2600 = load i32, i32* @x.63
  %2601 = load i32, i32* @y.64
  %2602 = sub i32 %2600, 1
  %2603 = mul i32 %2600, %2602
  %2604 = urem i32 %2603, 2
  %2605 = icmp eq i32 %2604, 0
  %2606 = icmp slt i32 %2601, 10
  %2607 = or i1 %2605, %2606
  br i1 %2607, label %originalBB562, label %originalBB562alteredBB

originalBB562:                                    ; preds = %2599, %originalBB562alteredBB
  %2608 = load i64, i64* %21, align 8, !dbg !3524
  %2609 = load i64, i64* %12, align 8, !dbg !3524
  %2610 = icmp ult i64 %2608, %2609, !dbg !3524
  %2611 = load i32, i32* @x.63
  %2612 = load i32, i32* @y.64
  %2613 = sub i32 %2611, 1
  %2614 = mul i32 %2611, %2613
  %2615 = urem i32 %2614, 2
  %2616 = icmp eq i32 %2615, 0
  %2617 = icmp slt i32 %2612, 10
  %2618 = or i1 %2616, %2617
  br i1 %2618, label %originalBBpart2564, label %originalBB562alteredBB

originalBBpart2564:                               ; preds = %originalBB562
  br i1 %2610, label %2619, label %2623, !dbg !3527

2619:                                             ; preds = %originalBBpart2564
  %2620 = load i8*, i8** %11, align 8, !dbg !3524
  %2621 = load i64, i64* %21, align 8, !dbg !3524
  %2622 = getelementptr inbounds i8, i8* %2620, i64 %2621, !dbg !3524
  store i8 39, i8* %2622, align 1, !dbg !3524
  br label %2623, !dbg !3524

2623:                                             ; preds = %2619, %originalBBpart2564
  %2624 = load i64, i64* %21, align 8, !dbg !3527
  %2625 = add i64 %2624, 1, !dbg !3527
  store i64 %2625, i64* %21, align 8, !dbg !3527
  br label %2626, !dbg !3527

2626:                                             ; preds = %2623
  %2627 = load i32, i32* @x.63
  %2628 = load i32, i32* @y.64
  %2629 = sub i32 %2627, 1
  %2630 = mul i32 %2627, %2629
  %2631 = urem i32 %2630, 2
  %2632 = icmp eq i32 %2631, 0
  %2633 = icmp slt i32 %2628, 10
  %2634 = or i1 %2632, %2633
  br i1 %2634, label %originalBB566, label %originalBB566alteredBB

originalBB566:                                    ; preds = %2626, %originalBB566alteredBB
  store i8 0, i8* %28, align 1, !dbg !3518
  %2635 = load i32, i32* @x.63
  %2636 = load i32, i32* @y.64
  %2637 = sub i32 %2635, 1
  %2638 = mul i32 %2635, %2637
  %2639 = urem i32 %2638, 2
  %2640 = icmp eq i32 %2639, 0
  %2641 = icmp slt i32 %2636, 10
  %2642 = or i1 %2640, %2641
  br i1 %2642, label %originalBBpart2568, label %originalBB566alteredBB

originalBBpart2568:                               ; preds = %originalBB566
  br label %2643, !dbg !3518

2643:                                             ; preds = %originalBBpart2568, %2567, %originalBBpart2547
  br label %2644, !dbg !3517

2644:                                             ; preds = %2643
  br label %2645, !dbg !3528

2645:                                             ; preds = %2644
  %2646 = load i64, i64* %21, align 8, !dbg !3529
  %2647 = load i64, i64* %12, align 8, !dbg !3529
  %2648 = icmp ult i64 %2646, %2647, !dbg !3529
  br i1 %2648, label %2649, label %2654, !dbg !3532

2649:                                             ; preds = %2645
  %2650 = load i8, i8* %31, align 1, !dbg !3529
  %2651 = load i8*, i8** %11, align 8, !dbg !3529
  %2652 = load i64, i64* %21, align 8, !dbg !3529
  %2653 = getelementptr inbounds i8, i8* %2651, i64 %2652, !dbg !3529
  store i8 %2650, i8* %2653, align 1, !dbg !3529
  br label %2654, !dbg !3529

2654:                                             ; preds = %2649, %2645
  %2655 = load i64, i64* %21, align 8, !dbg !3532
  %2656 = add i64 %2655, 1, !dbg !3532
  store i64 %2656, i64* %21, align 8, !dbg !3532
  br label %2657, !dbg !3532

2657:                                             ; preds = %2654
  %2658 = load i8*, i8** %13, align 8, !dbg !3533
  %2659 = load i64, i64* %20, align 8, !dbg !3534
  %2660 = add i64 %2659, 1, !dbg !3534
  store i64 %2660, i64* %20, align 8, !dbg !3534
  %2661 = getelementptr inbounds i8, i8* %2658, i64 %2660, !dbg !3533
  %2662 = load i8, i8* %2661, align 1, !dbg !3533
  store i8 %2662, i8* %31, align 1, !dbg !3535
  br label %2160, !dbg !3536, !llvm.loop !3537

2663:                                             ; preds = %2546
  %2664 = load i32, i32* @x.63
  %2665 = load i32, i32* @y.64
  %2666 = sub i32 %2664, 1
  %2667 = mul i32 %2664, %2666
  %2668 = urem i32 %2667, 2
  %2669 = icmp eq i32 %2668, 0
  %2670 = icmp slt i32 %2665, 10
  %2671 = or i1 %2669, %2670
  br i1 %2671, label %originalBB570, label %originalBB570alteredBB

originalBB570:                                    ; preds = %2663, %originalBB570alteredBB
  %2672 = load i32, i32* @x.63
  %2673 = load i32, i32* @y.64
  %2674 = sub i32 %2672, 1
  %2675 = mul i32 %2672, %2674
  %2676 = urem i32 %2675, 2
  %2677 = icmp eq i32 %2676, 0
  %2678 = icmp slt i32 %2673, 10
  %2679 = or i1 %2677, %2678
  br i1 %2679, label %originalBBpart2572, label %originalBB570alteredBB

originalBBpart2572:                               ; preds = %originalBB570
  br label %2982, !dbg !3540

2680:                                             ; preds = %originalBBpart2441, %originalBBpart2437
  br label %2681, !dbg !3541

2681:                                             ; preds = %2680, %originalBBpart2359, %originalBBpart2355, %originalBBpart2319, %1503, %1482, %originalBBpart2291, %1220, %originalBBpart2164
  %2682 = load i32, i32* @x.63
  %2683 = load i32, i32* @y.64
  %2684 = sub i32 %2682, 1
  %2685 = mul i32 %2682, %2684
  %2686 = urem i32 %2685, 2
  %2687 = icmp eq i32 %2686, 0
  %2688 = icmp slt i32 %2683, 10
  %2689 = or i1 %2687, %2688
  br i1 %2689, label %originalBB574, label %originalBB574alteredBB

originalBB574:                                    ; preds = %2681, %originalBB574alteredBB
  %2690 = load i8, i8* %25, align 1, !dbg !3542
  %2691 = trunc i8 %2690 to i1, !dbg !3542
  %2692 = load i32, i32* @x.63
  %2693 = load i32, i32* @y.64
  %2694 = sub i32 %2692, 1
  %2695 = mul i32 %2692, %2694
  %2696 = urem i32 %2695, 2
  %2697 = icmp eq i32 %2696, 0
  %2698 = icmp slt i32 %2693, 10
  %2699 = or i1 %2697, %2698
  br i1 %2699, label %originalBBpart2576, label %originalBB574alteredBB

originalBBpart2576:                               ; preds = %originalBB574
  br i1 %2691, label %2700, label %2703, !dbg !3544

2700:                                             ; preds = %originalBBpart2576
  %2701 = load i32, i32* %15, align 4, !dbg !3545
  %2702 = icmp ne i32 %2701, 2, !dbg !3546
  br i1 %2702, label %2722, label %2703, !dbg !3547

2703:                                             ; preds = %2700, %originalBBpart2576
  %2704 = load i32, i32* @x.63
  %2705 = load i32, i32* @y.64
  %2706 = sub i32 %2704, 1
  %2707 = mul i32 %2704, %2706
  %2708 = urem i32 %2707, 2
  %2709 = icmp eq i32 %2708, 0
  %2710 = icmp slt i32 %2705, 10
  %2711 = or i1 %2709, %2710
  br i1 %2711, label %originalBB578, label %originalBB578alteredBB

originalBB578:                                    ; preds = %2703, %originalBB578alteredBB
  %2712 = load i8, i8* %27, align 1, !dbg !3548
  %2713 = trunc i8 %2712 to i1, !dbg !3548
  %2714 = load i32, i32* @x.63
  %2715 = load i32, i32* @y.64
  %2716 = sub i32 %2714, 1
  %2717 = mul i32 %2714, %2716
  %2718 = urem i32 %2717, 2
  %2719 = icmp eq i32 %2718, 0
  %2720 = icmp slt i32 %2715, 10
  %2721 = or i1 %2719, %2720
  br i1 %2721, label %originalBBpart2580, label %originalBB578alteredBB

originalBBpart2580:                               ; preds = %originalBB578
  br i1 %2713, label %2722, label %2771, !dbg !3549

2722:                                             ; preds = %originalBBpart2580, %2700
  %2723 = load i32, i32* @x.63
  %2724 = load i32, i32* @y.64
  %2725 = sub i32 %2723, 1
  %2726 = mul i32 %2723, %2725
  %2727 = urem i32 %2726, 2
  %2728 = icmp eq i32 %2727, 0
  %2729 = icmp slt i32 %2724, 10
  %2730 = or i1 %2728, %2729
  br i1 %2730, label %originalBB582, label %originalBB582alteredBB

originalBB582:                                    ; preds = %2722, %originalBB582alteredBB
  %2731 = load i32*, i32** %17, align 8, !dbg !3550
  %2732 = icmp ne i32* %2731, null, !dbg !3550
  %2733 = load i32, i32* @x.63
  %2734 = load i32, i32* @y.64
  %2735 = sub i32 %2733, 1
  %2736 = mul i32 %2733, %2735
  %2737 = urem i32 %2736, 2
  %2738 = icmp eq i32 %2737, 0
  %2739 = icmp slt i32 %2734, 10
  %2740 = or i1 %2738, %2739
  br i1 %2740, label %originalBBpart2584, label %originalBB582alteredBB

originalBBpart2584:                               ; preds = %originalBB582
  br i1 %2732, label %2741, label %2771, !dbg !3551

2741:                                             ; preds = %originalBBpart2584
  %2742 = load i32, i32* @x.63
  %2743 = load i32, i32* @y.64
  %2744 = sub i32 %2742, 1
  %2745 = mul i32 %2742, %2744
  %2746 = urem i32 %2745, 2
  %2747 = icmp eq i32 %2746, 0
  %2748 = icmp slt i32 %2743, 10
  %2749 = or i1 %2747, %2748
  br i1 %2749, label %originalBB586, label %originalBB586alteredBB

originalBB586:                                    ; preds = %2741, %originalBB586alteredBB
  %2750 = load i32*, i32** %17, align 8, !dbg !3552
  %2751 = load i8, i8* %31, align 1, !dbg !3553
  %2752 = zext i8 %2751 to i64, !dbg !3553
  %2753 = udiv i64 %2752, 32, !dbg !3554
  %2754 = getelementptr inbounds i32, i32* %2750, i64 %2753, !dbg !3552
  %2755 = load i32, i32* %2754, align 4, !dbg !3552
  %2756 = load i8, i8* %31, align 1, !dbg !3555
  %2757 = zext i8 %2756 to i64, !dbg !3555
  %2758 = urem i64 %2757, 32, !dbg !3556
  %2759 = trunc i64 %2758 to i32, !dbg !3557
  %2760 = lshr i32 %2755, %2759, !dbg !3557
  %2761 = and i32 %2760, 1, !dbg !3558
  %2762 = icmp ne i32 %2761, 0, !dbg !3558
  %2763 = load i32, i32* @x.63
  %2764 = load i32, i32* @y.64
  %2765 = sub i32 %2763, 1
  %2766 = mul i32 %2763, %2765
  %2767 = urem i32 %2766, 2
  %2768 = icmp eq i32 %2767, 0
  %2769 = icmp slt i32 %2764, 10
  %2770 = or i1 %2768, %2769
  br i1 %2770, label %originalBBpart2613, label %originalBB586alteredBB

originalBBpart2613:                               ; preds = %originalBB586
  br i1 %2762, label %2791, label %2771, !dbg !3559

2771:                                             ; preds = %originalBBpart2613, %originalBBpart2584, %originalBBpart2580
  %2772 = load i32, i32* @x.63
  %2773 = load i32, i32* @y.64
  %2774 = sub i32 %2772, 1
  %2775 = mul i32 %2772, %2774
  %2776 = urem i32 %2775, 2
  %2777 = icmp eq i32 %2776, 0
  %2778 = icmp slt i32 %2773, 10
  %2779 = or i1 %2777, %2778
  br i1 %2779, label %originalBB615, label %originalBB615alteredBB

originalBB615:                                    ; preds = %2771, %originalBB615alteredBB
  %2780 = load i8, i8* %33, align 1, !dbg !3560
  %2781 = trunc i8 %2780 to i1, !dbg !3560
  %2782 = load i32, i32* @x.63
  %2783 = load i32, i32* @y.64
  %2784 = sub i32 %2782, 1
  %2785 = mul i32 %2782, %2784
  %2786 = urem i32 %2785, 2
  %2787 = icmp eq i32 %2786, 0
  %2788 = icmp slt i32 %2783, 10
  %2789 = or i1 %2787, %2788
  br i1 %2789, label %originalBBpart2617, label %originalBB615alteredBB

originalBBpart2617:                               ; preds = %originalBB615
  br i1 %2781, label %2791, label %2790, !dbg !3561

2790:                                             ; preds = %originalBBpart2617
  br label %2982, !dbg !3562

2791:                                             ; preds = %originalBBpart2617, %originalBBpart2613
  %2792 = load i32, i32* @x.63
  %2793 = load i32, i32* @y.64
  %2794 = sub i32 %2792, 1
  %2795 = mul i32 %2792, %2794
  %2796 = urem i32 %2795, 2
  %2797 = icmp eq i32 %2796, 0
  %2798 = icmp slt i32 %2793, 10
  %2799 = or i1 %2797, %2798
  br i1 %2799, label %originalBB619, label %originalBB619alteredBB

originalBB619:                                    ; preds = %2791, %originalBB619alteredBB
  %2800 = load i32, i32* @x.63
  %2801 = load i32, i32* @y.64
  %2802 = sub i32 %2800, 1
  %2803 = mul i32 %2800, %2802
  %2804 = urem i32 %2803, 2
  %2805 = icmp eq i32 %2804, 0
  %2806 = icmp slt i32 %2801, 10
  %2807 = or i1 %2805, %2806
  br i1 %2807, label %originalBBpart2621, label %originalBB619alteredBB

originalBBpart2621:                               ; preds = %originalBB619
  br label %2808, !dbg !3560

2808:                                             ; preds = %originalBBpart2621, %1435
  call void @llvm.dbg.label(metadata !3563), !dbg !3564
  %2809 = load i32, i32* @x.63
  %2810 = load i32, i32* @y.64
  %2811 = sub i32 %2809, 1
  %2812 = mul i32 %2809, %2811
  %2813 = urem i32 %2812, 2
  %2814 = icmp eq i32 %2813, 0
  %2815 = icmp slt i32 %2810, 10
  %2816 = or i1 %2814, %2815
  br i1 %2816, label %originalBB623, label %originalBB623alteredBB

originalBB623:                                    ; preds = %2808, %originalBB623alteredBB
  %2817 = load i32, i32* @x.63
  %2818 = load i32, i32* @y.64
  %2819 = sub i32 %2817, 1
  %2820 = mul i32 %2817, %2819
  %2821 = urem i32 %2820, 2
  %2822 = icmp eq i32 %2821, 0
  %2823 = icmp slt i32 %2818, 10
  %2824 = or i1 %2822, %2823
  br i1 %2824, label %originalBBpart2625, label %originalBB623alteredBB

originalBBpart2625:                               ; preds = %originalBB623
  br label %2825, !dbg !3565

2825:                                             ; preds = %originalBBpart2625
  %2826 = load i32, i32* @x.63
  %2827 = load i32, i32* @y.64
  %2828 = sub i32 %2826, 1
  %2829 = mul i32 %2826, %2828
  %2830 = urem i32 %2829, 2
  %2831 = icmp eq i32 %2830, 0
  %2832 = icmp slt i32 %2827, 10
  %2833 = or i1 %2831, %2832
  br i1 %2833, label %originalBB627, label %originalBB627alteredBB

originalBB627:                                    ; preds = %2825, %originalBB627alteredBB
  %2834 = load i8, i8* %27, align 1, !dbg !3566
  %2835 = trunc i8 %2834 to i1, !dbg !3566
  %2836 = load i32, i32* @x.63
  %2837 = load i32, i32* @y.64
  %2838 = sub i32 %2836, 1
  %2839 = mul i32 %2836, %2838
  %2840 = urem i32 %2839, 2
  %2841 = icmp eq i32 %2840, 0
  %2842 = icmp slt i32 %2837, 10
  %2843 = or i1 %2841, %2842
  br i1 %2843, label %originalBBpart2629, label %originalBB627alteredBB

originalBBpart2629:                               ; preds = %originalBB627
  br i1 %2835, label %2844, label %2845, !dbg !3569

2844:                                             ; preds = %originalBBpart2629
  br label %3454, !dbg !3566

2845:                                             ; preds = %originalBBpart2629
  store i8 1, i8* %34, align 1, !dbg !3569
  %2846 = load i32, i32* %15, align 4, !dbg !3570
  %2847 = icmp eq i32 %2846, 2, !dbg !3570
  br i1 %2847, label %2848, label %2936, !dbg !3570

2848:                                             ; preds = %2845
  %2849 = load i8, i8* %28, align 1, !dbg !3570
  %2850 = trunc i8 %2849 to i1, !dbg !3570
  br i1 %2850, label %2936, label %2851, !dbg !3569

2851:                                             ; preds = %2848
  br label %2852, !dbg !3572

2852:                                             ; preds = %2851
  %2853 = load i32, i32* @x.63
  %2854 = load i32, i32* @y.64
  %2855 = sub i32 %2853, 1
  %2856 = mul i32 %2853, %2855
  %2857 = urem i32 %2856, 2
  %2858 = icmp eq i32 %2857, 0
  %2859 = icmp slt i32 %2854, 10
  %2860 = or i1 %2858, %2859
  br i1 %2860, label %originalBB631, label %originalBB631alteredBB

originalBB631:                                    ; preds = %2852, %originalBB631alteredBB
  %2861 = load i64, i64* %21, align 8, !dbg !3574
  %2862 = load i64, i64* %12, align 8, !dbg !3574
  %2863 = icmp ult i64 %2861, %2862, !dbg !3574
  %2864 = load i32, i32* @x.63
  %2865 = load i32, i32* @y.64
  %2866 = sub i32 %2864, 1
  %2867 = mul i32 %2864, %2866
  %2868 = urem i32 %2867, 2
  %2869 = icmp eq i32 %2868, 0
  %2870 = icmp slt i32 %2865, 10
  %2871 = or i1 %2869, %2870
  br i1 %2871, label %originalBBpart2633, label %originalBB631alteredBB

originalBBpart2633:                               ; preds = %originalBB631
  br i1 %2863, label %2872, label %2876, !dbg !3577

2872:                                             ; preds = %originalBBpart2633
  %2873 = load i8*, i8** %11, align 8, !dbg !3574
  %2874 = load i64, i64* %21, align 8, !dbg !3574
  %2875 = getelementptr inbounds i8, i8* %2873, i64 %2874, !dbg !3574
  store i8 39, i8* %2875, align 1, !dbg !3574
  br label %2876, !dbg !3574

2876:                                             ; preds = %2872, %originalBBpart2633
  %2877 = load i64, i64* %21, align 8, !dbg !3577
  %2878 = add i64 %2877, 1, !dbg !3577
  store i64 %2878, i64* %21, align 8, !dbg !3577
  br label %2879, !dbg !3577

2879:                                             ; preds = %2876
  br label %2880, !dbg !3572

2880:                                             ; preds = %2879
  %2881 = load i64, i64* %21, align 8, !dbg !3578
  %2882 = load i64, i64* %12, align 8, !dbg !3578
  %2883 = icmp ult i64 %2881, %2882, !dbg !3578
  br i1 %2883, label %2884, label %2904, !dbg !3581

2884:                                             ; preds = %2880
  %2885 = load i32, i32* @x.63
  %2886 = load i32, i32* @y.64
  %2887 = sub i32 %2885, 1
  %2888 = mul i32 %2885, %2887
  %2889 = urem i32 %2888, 2
  %2890 = icmp eq i32 %2889, 0
  %2891 = icmp slt i32 %2886, 10
  %2892 = or i1 %2890, %2891
  br i1 %2892, label %originalBB635, label %originalBB635alteredBB

originalBB635:                                    ; preds = %2884, %originalBB635alteredBB
  %2893 = load i8*, i8** %11, align 8, !dbg !3578
  %2894 = load i64, i64* %21, align 8, !dbg !3578
  %2895 = getelementptr inbounds i8, i8* %2893, i64 %2894, !dbg !3578
  store i8 36, i8* %2895, align 1, !dbg !3578
  %2896 = load i32, i32* @x.63
  %2897 = load i32, i32* @y.64
  %2898 = sub i32 %2896, 1
  %2899 = mul i32 %2896, %2898
  %2900 = urem i32 %2899, 2
  %2901 = icmp eq i32 %2900, 0
  %2902 = icmp slt i32 %2897, 10
  %2903 = or i1 %2901, %2902
  br i1 %2903, label %originalBBpart2637, label %originalBB635alteredBB

originalBBpart2637:                               ; preds = %originalBB635
  br label %2904, !dbg !3578

2904:                                             ; preds = %originalBBpart2637, %2880
  %2905 = load i64, i64* %21, align 8, !dbg !3581
  %2906 = add i64 %2905, 1, !dbg !3581
  store i64 %2906, i64* %21, align 8, !dbg !3581
  br label %2907, !dbg !3581

2907:                                             ; preds = %2904
  br label %2908, !dbg !3572

2908:                                             ; preds = %2907
  %2909 = load i64, i64* %21, align 8, !dbg !3582
  %2910 = load i64, i64* %12, align 8, !dbg !3582
  %2911 = icmp ult i64 %2909, %2910, !dbg !3582
  br i1 %2911, label %2912, label %2916, !dbg !3585

2912:                                             ; preds = %2908
  %2913 = load i8*, i8** %11, align 8, !dbg !3582
  %2914 = load i64, i64* %21, align 8, !dbg !3582
  %2915 = getelementptr inbounds i8, i8* %2913, i64 %2914, !dbg !3582
  store i8 39, i8* %2915, align 1, !dbg !3582
  br label %2916, !dbg !3582

2916:                                             ; preds = %2912, %2908
  %2917 = load i32, i32* @x.63
  %2918 = load i32, i32* @y.64
  %2919 = sub i32 %2917, 1
  %2920 = mul i32 %2917, %2919
  %2921 = urem i32 %2920, 2
  %2922 = icmp eq i32 %2921, 0
  %2923 = icmp slt i32 %2918, 10
  %2924 = or i1 %2922, %2923
  br i1 %2924, label %originalBB639, label %originalBB639alteredBB

originalBB639:                                    ; preds = %2916, %originalBB639alteredBB
  %2925 = load i64, i64* %21, align 8, !dbg !3585
  %2926 = add i64 %2925, 1, !dbg !3585
  store i64 %2926, i64* %21, align 8, !dbg !3585
  %2927 = load i32, i32* @x.63
  %2928 = load i32, i32* @y.64
  %2929 = sub i32 %2927, 1
  %2930 = mul i32 %2927, %2929
  %2931 = urem i32 %2930, 2
  %2932 = icmp eq i32 %2931, 0
  %2933 = icmp slt i32 %2928, 10
  %2934 = or i1 %2932, %2933
  br i1 %2934, label %originalBBpart2652, label %originalBB639alteredBB

originalBBpart2652:                               ; preds = %originalBB639
  br label %2935, !dbg !3585

2935:                                             ; preds = %originalBBpart2652
  store i8 1, i8* %28, align 1, !dbg !3572
  br label %2936, !dbg !3572

2936:                                             ; preds = %2935, %2848, %2845
  br label %2937, !dbg !3569

2937:                                             ; preds = %2936
  %2938 = load i64, i64* %21, align 8, !dbg !3586
  %2939 = load i64, i64* %12, align 8, !dbg !3586
  %2940 = icmp ult i64 %2938, %2939, !dbg !3586
  br i1 %2940, label %2941, label %2945, !dbg !3589

2941:                                             ; preds = %2937
  %2942 = load i8*, i8** %11, align 8, !dbg !3586
  %2943 = load i64, i64* %21, align 8, !dbg !3586
  %2944 = getelementptr inbounds i8, i8* %2942, i64 %2943, !dbg !3586
  store i8 92, i8* %2944, align 1, !dbg !3586
  br label %2945, !dbg !3586

2945:                                             ; preds = %2941, %2937
  %2946 = load i32, i32* @x.63
  %2947 = load i32, i32* @y.64
  %2948 = sub i32 %2946, 1
  %2949 = mul i32 %2946, %2948
  %2950 = urem i32 %2949, 2
  %2951 = icmp eq i32 %2950, 0
  %2952 = icmp slt i32 %2947, 10
  %2953 = or i1 %2951, %2952
  br i1 %2953, label %originalBB654, label %originalBB654alteredBB

originalBB654:                                    ; preds = %2945, %originalBB654alteredBB
  %2954 = load i64, i64* %21, align 8, !dbg !3589
  %2955 = add i64 %2954, 1, !dbg !3589
  store i64 %2955, i64* %21, align 8, !dbg !3589
  %2956 = load i32, i32* @x.63
  %2957 = load i32, i32* @y.64
  %2958 = sub i32 %2956, 1
  %2959 = mul i32 %2956, %2958
  %2960 = urem i32 %2959, 2
  %2961 = icmp eq i32 %2960, 0
  %2962 = icmp slt i32 %2957, 10
  %2963 = or i1 %2961, %2962
  br i1 %2963, label %originalBBpart2665, label %originalBB654alteredBB

originalBBpart2665:                               ; preds = %originalBB654
  br label %2964, !dbg !3589

2964:                                             ; preds = %originalBBpart2665
  %2965 = load i32, i32* @x.63
  %2966 = load i32, i32* @y.64
  %2967 = sub i32 %2965, 1
  %2968 = mul i32 %2965, %2967
  %2969 = urem i32 %2968, 2
  %2970 = icmp eq i32 %2969, 0
  %2971 = icmp slt i32 %2966, 10
  %2972 = or i1 %2970, %2971
  br i1 %2972, label %originalBB667, label %originalBB667alteredBB

originalBB667:                                    ; preds = %2964, %originalBB667alteredBB
  %2973 = load i32, i32* @x.63
  %2974 = load i32, i32* @y.64
  %2975 = sub i32 %2973, 1
  %2976 = mul i32 %2973, %2975
  %2977 = urem i32 %2976, 2
  %2978 = icmp eq i32 %2977, 0
  %2979 = icmp slt i32 %2974, 10
  %2980 = or i1 %2978, %2979
  br i1 %2980, label %originalBBpart2669, label %originalBB667alteredBB

originalBBpart2669:                               ; preds = %originalBB667
  br label %2981, !dbg !3569

2981:                                             ; preds = %originalBBpart2669
  br label %2982, !dbg !3569

2982:                                             ; preds = %2981, %2790, %originalBBpart2572, %originalBBpart2275, %1300
  call void @llvm.dbg.label(metadata !3590), !dbg !3591
  br label %2983, !dbg !3592

2983:                                             ; preds = %2982
  %2984 = load i8, i8* %28, align 1, !dbg !3593
  %2985 = trunc i8 %2984 to i1, !dbg !3593
  br i1 %2985, label %2986, label %3094, !dbg !3593

2986:                                             ; preds = %2983
  %2987 = load i8, i8* %34, align 1, !dbg !3593
  %2988 = trunc i8 %2987 to i1, !dbg !3593
  br i1 %2988, label %3094, label %2989, !dbg !3596

2989:                                             ; preds = %2986
  br label %2990, !dbg !3597

2990:                                             ; preds = %2989
  %2991 = load i32, i32* @x.63
  %2992 = load i32, i32* @y.64
  %2993 = sub i32 %2991, 1
  %2994 = mul i32 %2991, %2993
  %2995 = urem i32 %2994, 2
  %2996 = icmp eq i32 %2995, 0
  %2997 = icmp slt i32 %2992, 10
  %2998 = or i1 %2996, %2997
  br i1 %2998, label %originalBB671, label %originalBB671alteredBB

originalBB671:                                    ; preds = %2990, %originalBB671alteredBB
  %2999 = load i64, i64* %21, align 8, !dbg !3599
  %3000 = load i64, i64* %12, align 8, !dbg !3599
  %3001 = icmp ult i64 %2999, %3000, !dbg !3599
  %3002 = load i32, i32* @x.63
  %3003 = load i32, i32* @y.64
  %3004 = sub i32 %3002, 1
  %3005 = mul i32 %3002, %3004
  %3006 = urem i32 %3005, 2
  %3007 = icmp eq i32 %3006, 0
  %3008 = icmp slt i32 %3003, 10
  %3009 = or i1 %3007, %3008
  br i1 %3009, label %originalBBpart2673, label %originalBB671alteredBB

originalBBpart2673:                               ; preds = %originalBB671
  br i1 %3001, label %3010, label %3030, !dbg !3602

3010:                                             ; preds = %originalBBpart2673
  %3011 = load i32, i32* @x.63
  %3012 = load i32, i32* @y.64
  %3013 = sub i32 %3011, 1
  %3014 = mul i32 %3011, %3013
  %3015 = urem i32 %3014, 2
  %3016 = icmp eq i32 %3015, 0
  %3017 = icmp slt i32 %3012, 10
  %3018 = or i1 %3016, %3017
  br i1 %3018, label %originalBB675, label %originalBB675alteredBB

originalBB675:                                    ; preds = %3010, %originalBB675alteredBB
  %3019 = load i8*, i8** %11, align 8, !dbg !3599
  %3020 = load i64, i64* %21, align 8, !dbg !3599
  %3021 = getelementptr inbounds i8, i8* %3019, i64 %3020, !dbg !3599
  store i8 39, i8* %3021, align 1, !dbg !3599
  %3022 = load i32, i32* @x.63
  %3023 = load i32, i32* @y.64
  %3024 = sub i32 %3022, 1
  %3025 = mul i32 %3022, %3024
  %3026 = urem i32 %3025, 2
  %3027 = icmp eq i32 %3026, 0
  %3028 = icmp slt i32 %3023, 10
  %3029 = or i1 %3027, %3028
  br i1 %3029, label %originalBBpart2677, label %originalBB675alteredBB

originalBBpart2677:                               ; preds = %originalBB675
  br label %3030, !dbg !3599

3030:                                             ; preds = %originalBBpart2677, %originalBBpart2673
  %3031 = load i32, i32* @x.63
  %3032 = load i32, i32* @y.64
  %3033 = sub i32 %3031, 1
  %3034 = mul i32 %3031, %3033
  %3035 = urem i32 %3034, 2
  %3036 = icmp eq i32 %3035, 0
  %3037 = icmp slt i32 %3032, 10
  %3038 = or i1 %3036, %3037
  br i1 %3038, label %originalBB679, label %originalBB679alteredBB

originalBB679:                                    ; preds = %3030, %originalBB679alteredBB
  %3039 = load i64, i64* %21, align 8, !dbg !3602
  %3040 = add i64 %3039, 1, !dbg !3602
  store i64 %3040, i64* %21, align 8, !dbg !3602
  %3041 = load i32, i32* @x.63
  %3042 = load i32, i32* @y.64
  %3043 = sub i32 %3041, 1
  %3044 = mul i32 %3041, %3043
  %3045 = urem i32 %3044, 2
  %3046 = icmp eq i32 %3045, 0
  %3047 = icmp slt i32 %3042, 10
  %3048 = or i1 %3046, %3047
  br i1 %3048, label %originalBBpart2685, label %originalBB679alteredBB

originalBBpart2685:                               ; preds = %originalBB679
  br label %3049, !dbg !3602

3049:                                             ; preds = %originalBBpart2685
  br label %3050, !dbg !3597

3050:                                             ; preds = %3049
  %3051 = load i32, i32* @x.63
  %3052 = load i32, i32* @y.64
  %3053 = sub i32 %3051, 1
  %3054 = mul i32 %3051, %3053
  %3055 = urem i32 %3054, 2
  %3056 = icmp eq i32 %3055, 0
  %3057 = icmp slt i32 %3052, 10
  %3058 = or i1 %3056, %3057
  br i1 %3058, label %originalBB687, label %originalBB687alteredBB

originalBB687:                                    ; preds = %3050, %originalBB687alteredBB
  %3059 = load i64, i64* %21, align 8, !dbg !3603
  %3060 = load i64, i64* %12, align 8, !dbg !3603
  %3061 = icmp ult i64 %3059, %3060, !dbg !3603
  %3062 = load i32, i32* @x.63
  %3063 = load i32, i32* @y.64
  %3064 = sub i32 %3062, 1
  %3065 = mul i32 %3062, %3064
  %3066 = urem i32 %3065, 2
  %3067 = icmp eq i32 %3066, 0
  %3068 = icmp slt i32 %3063, 10
  %3069 = or i1 %3067, %3068
  br i1 %3069, label %originalBBpart2689, label %originalBB687alteredBB

originalBBpart2689:                               ; preds = %originalBB687
  br i1 %3061, label %3070, label %3090, !dbg !3606

3070:                                             ; preds = %originalBBpart2689
  %3071 = load i32, i32* @x.63
  %3072 = load i32, i32* @y.64
  %3073 = sub i32 %3071, 1
  %3074 = mul i32 %3071, %3073
  %3075 = urem i32 %3074, 2
  %3076 = icmp eq i32 %3075, 0
  %3077 = icmp slt i32 %3072, 10
  %3078 = or i1 %3076, %3077
  br i1 %3078, label %originalBB691, label %originalBB691alteredBB

originalBB691:                                    ; preds = %3070, %originalBB691alteredBB
  %3079 = load i8*, i8** %11, align 8, !dbg !3603
  %3080 = load i64, i64* %21, align 8, !dbg !3603
  %3081 = getelementptr inbounds i8, i8* %3079, i64 %3080, !dbg !3603
  store i8 39, i8* %3081, align 1, !dbg !3603
  %3082 = load i32, i32* @x.63
  %3083 = load i32, i32* @y.64
  %3084 = sub i32 %3082, 1
  %3085 = mul i32 %3082, %3084
  %3086 = urem i32 %3085, 2
  %3087 = icmp eq i32 %3086, 0
  %3088 = icmp slt i32 %3083, 10
  %3089 = or i1 %3087, %3088
  br i1 %3089, label %originalBBpart2693, label %originalBB691alteredBB

originalBBpart2693:                               ; preds = %originalBB691
  br label %3090, !dbg !3603

3090:                                             ; preds = %originalBBpart2693, %originalBBpart2689
  %3091 = load i64, i64* %21, align 8, !dbg !3606
  %3092 = add i64 %3091, 1, !dbg !3606
  store i64 %3092, i64* %21, align 8, !dbg !3606
  br label %3093, !dbg !3606

3093:                                             ; preds = %3090
  store i8 0, i8* %28, align 1, !dbg !3597
  br label %3094, !dbg !3597

3094:                                             ; preds = %3093, %2986, %2983
  %3095 = load i32, i32* @x.63
  %3096 = load i32, i32* @y.64
  %3097 = sub i32 %3095, 1
  %3098 = mul i32 %3095, %3097
  %3099 = urem i32 %3098, 2
  %3100 = icmp eq i32 %3099, 0
  %3101 = icmp slt i32 %3096, 10
  %3102 = or i1 %3100, %3101
  br i1 %3102, label %originalBB695, label %originalBB695alteredBB

originalBB695:                                    ; preds = %3094, %originalBB695alteredBB
  %3103 = load i32, i32* @x.63
  %3104 = load i32, i32* @y.64
  %3105 = sub i32 %3103, 1
  %3106 = mul i32 %3103, %3105
  %3107 = urem i32 %3106, 2
  %3108 = icmp eq i32 %3107, 0
  %3109 = icmp slt i32 %3104, 10
  %3110 = or i1 %3108, %3109
  br i1 %3110, label %originalBBpart2697, label %originalBB695alteredBB

originalBBpart2697:                               ; preds = %originalBB695
  br label %3111, !dbg !3596

3111:                                             ; preds = %originalBBpart2697
  %3112 = load i32, i32* @x.63
  %3113 = load i32, i32* @y.64
  %3114 = sub i32 %3112, 1
  %3115 = mul i32 %3112, %3114
  %3116 = urem i32 %3115, 2
  %3117 = icmp eq i32 %3116, 0
  %3118 = icmp slt i32 %3113, 10
  %3119 = or i1 %3117, %3118
  br i1 %3119, label %originalBB699, label %originalBB699alteredBB

originalBB699:                                    ; preds = %3111, %originalBB699alteredBB
  %3120 = load i32, i32* @x.63
  %3121 = load i32, i32* @y.64
  %3122 = sub i32 %3120, 1
  %3123 = mul i32 %3120, %3122
  %3124 = urem i32 %3123, 2
  %3125 = icmp eq i32 %3124, 0
  %3126 = icmp slt i32 %3121, 10
  %3127 = or i1 %3125, %3126
  br i1 %3127, label %originalBBpart2701, label %originalBB699alteredBB

originalBBpart2701:                               ; preds = %originalBB699
  br label %3128, !dbg !3607

3128:                                             ; preds = %originalBBpart2701
  %3129 = load i32, i32* @x.63
  %3130 = load i32, i32* @y.64
  %3131 = sub i32 %3129, 1
  %3132 = mul i32 %3129, %3131
  %3133 = urem i32 %3132, 2
  %3134 = icmp eq i32 %3133, 0
  %3135 = icmp slt i32 %3130, 10
  %3136 = or i1 %3134, %3135
  br i1 %3136, label %originalBB703, label %originalBB703alteredBB

originalBB703:                                    ; preds = %3128, %originalBB703alteredBB
  %3137 = load i64, i64* %21, align 8, !dbg !3608
  %3138 = load i64, i64* %12, align 8, !dbg !3608
  %3139 = icmp ult i64 %3137, %3138, !dbg !3608
  %3140 = load i32, i32* @x.63
  %3141 = load i32, i32* @y.64
  %3142 = sub i32 %3140, 1
  %3143 = mul i32 %3140, %3142
  %3144 = urem i32 %3143, 2
  %3145 = icmp eq i32 %3144, 0
  %3146 = icmp slt i32 %3141, 10
  %3147 = or i1 %3145, %3146
  br i1 %3147, label %originalBBpart2705, label %originalBB703alteredBB

originalBBpart2705:                               ; preds = %originalBB703
  br i1 %3139, label %3148, label %3169, !dbg !3611

3148:                                             ; preds = %originalBBpart2705
  %3149 = load i32, i32* @x.63
  %3150 = load i32, i32* @y.64
  %3151 = sub i32 %3149, 1
  %3152 = mul i32 %3149, %3151
  %3153 = urem i32 %3152, 2
  %3154 = icmp eq i32 %3153, 0
  %3155 = icmp slt i32 %3150, 10
  %3156 = or i1 %3154, %3155
  br i1 %3156, label %originalBB707, label %originalBB707alteredBB

originalBB707:                                    ; preds = %3148, %originalBB707alteredBB
  %3157 = load i8, i8* %31, align 1, !dbg !3608
  %3158 = load i8*, i8** %11, align 8, !dbg !3608
  %3159 = load i64, i64* %21, align 8, !dbg !3608
  %3160 = getelementptr inbounds i8, i8* %3158, i64 %3159, !dbg !3608
  store i8 %3157, i8* %3160, align 1, !dbg !3608
  %3161 = load i32, i32* @x.63
  %3162 = load i32, i32* @y.64
  %3163 = sub i32 %3161, 1
  %3164 = mul i32 %3161, %3163
  %3165 = urem i32 %3164, 2
  %3166 = icmp eq i32 %3165, 0
  %3167 = icmp slt i32 %3162, 10
  %3168 = or i1 %3166, %3167
  br i1 %3168, label %originalBBpart2709, label %originalBB707alteredBB

originalBBpart2709:                               ; preds = %originalBB707
  br label %3169, !dbg !3608

3169:                                             ; preds = %originalBBpart2709, %originalBBpart2705
  %3170 = load i64, i64* %21, align 8, !dbg !3611
  %3171 = add i64 %3170, 1, !dbg !3611
  store i64 %3171, i64* %21, align 8, !dbg !3611
  br label %3172, !dbg !3611

3172:                                             ; preds = %3169
  %3173 = load i8, i8* %35, align 1, !dbg !3612
  %3174 = trunc i8 %3173 to i1, !dbg !3612
  br i1 %3174, label %3176, label %3175, !dbg !3614

3175:                                             ; preds = %3172
  store i8 0, i8* %30, align 1, !dbg !3615
  br label %3176, !dbg !3616

3176:                                             ; preds = %3175, %3172
  br label %3177, !dbg !3617

3177:                                             ; preds = %3176, %originalBBpart2160
  %3178 = load i32, i32* @x.63
  %3179 = load i32, i32* @y.64
  %3180 = sub i32 %3178, 1
  %3181 = mul i32 %3178, %3180
  %3182 = urem i32 %3181, 2
  %3183 = icmp eq i32 %3182, 0
  %3184 = icmp slt i32 %3179, 10
  %3185 = or i1 %3183, %3184
  br i1 %3185, label %originalBB711, label %originalBB711alteredBB

originalBB711:                                    ; preds = %3177, %originalBB711alteredBB
  %3186 = load i64, i64* %20, align 8, !dbg !3618
  %3187 = add i64 %3186, 1, !dbg !3618
  store i64 %3187, i64* %20, align 8, !dbg !3618
  %3188 = load i32, i32* @x.63
  %3189 = load i32, i32* @y.64
  %3190 = sub i32 %3188, 1
  %3191 = mul i32 %3188, %3190
  %3192 = urem i32 %3191, 2
  %3193 = icmp eq i32 %3192, 0
  %3194 = icmp slt i32 %3189, 10
  %3195 = or i1 %3193, %3194
  br i1 %3195, label %originalBBpart2723, label %originalBB711alteredBB

originalBBpart2723:                               ; preds = %originalBB711
  br label %330, !dbg !3619, !llvm.loop !3620

3196:                                             ; preds = %originalBBpart256
  %3197 = load i32, i32* @x.63
  %3198 = load i32, i32* @y.64
  %3199 = sub i32 %3197, 1
  %3200 = mul i32 %3197, %3199
  %3201 = urem i32 %3200, 2
  %3202 = icmp eq i32 %3201, 0
  %3203 = icmp slt i32 %3198, 10
  %3204 = or i1 %3202, %3203
  br i1 %3204, label %originalBB725, label %originalBB725alteredBB

originalBB725:                                    ; preds = %3196, %originalBB725alteredBB
  %3205 = load i64, i64* %21, align 8, !dbg !3622
  %3206 = icmp eq i64 %3205, 0, !dbg !3624
  %3207 = load i32, i32* @x.63
  %3208 = load i32, i32* @y.64
  %3209 = sub i32 %3207, 1
  %3210 = mul i32 %3207, %3209
  %3211 = urem i32 %3210, 2
  %3212 = icmp eq i32 %3211, 0
  %3213 = icmp slt i32 %3208, 10
  %3214 = or i1 %3212, %3213
  br i1 %3214, label %originalBBpart2727, label %originalBB725alteredBB

originalBBpart2727:                               ; preds = %originalBB725
  br i1 %3206, label %3215, label %3222, !dbg !3625

3215:                                             ; preds = %originalBBpart2727
  %3216 = load i32, i32* %15, align 4, !dbg !3626
  %3217 = icmp eq i32 %3216, 2, !dbg !3627
  br i1 %3217, label %3218, label %3222, !dbg !3628

3218:                                             ; preds = %3215
  %3219 = load i8, i8* %27, align 1, !dbg !3629
  %3220 = trunc i8 %3219 to i1, !dbg !3629
  br i1 %3220, label %3221, label %3222, !dbg !3630

3221:                                             ; preds = %3218
  br label %3454, !dbg !3631

3222:                                             ; preds = %3218, %3215, %originalBBpart2727
  %3223 = load i32, i32* %15, align 4, !dbg !3632
  %3224 = icmp eq i32 %3223, 2, !dbg !3634
  br i1 %3224, label %3225, label %3286, !dbg !3635

3225:                                             ; preds = %3222
  %3226 = load i8, i8* %27, align 1, !dbg !3636
  %3227 = trunc i8 %3226 to i1, !dbg !3636
  br i1 %3227, label %3286, label %3228, !dbg !3637

3228:                                             ; preds = %3225
  %3229 = load i32, i32* @x.63
  %3230 = load i32, i32* @y.64
  %3231 = sub i32 %3229, 1
  %3232 = mul i32 %3229, %3231
  %3233 = urem i32 %3232, 2
  %3234 = icmp eq i32 %3233, 0
  %3235 = icmp slt i32 %3230, 10
  %3236 = or i1 %3234, %3235
  br i1 %3236, label %originalBB729, label %originalBB729alteredBB

originalBB729:                                    ; preds = %3228, %originalBB729alteredBB
  %3237 = load i8, i8* %29, align 1, !dbg !3638
  %3238 = trunc i8 %3237 to i1, !dbg !3638
  %3239 = load i32, i32* @x.63
  %3240 = load i32, i32* @y.64
  %3241 = sub i32 %3239, 1
  %3242 = mul i32 %3239, %3241
  %3243 = urem i32 %3242, 2
  %3244 = icmp eq i32 %3243, 0
  %3245 = icmp slt i32 %3240, 10
  %3246 = or i1 %3244, %3245
  br i1 %3246, label %originalBBpart2731, label %originalBB729alteredBB

originalBBpart2731:                               ; preds = %originalBB729
  br i1 %3238, label %3247, label %3286, !dbg !3639

3247:                                             ; preds = %originalBBpart2731
  %3248 = load i32, i32* @x.63
  %3249 = load i32, i32* @y.64
  %3250 = sub i32 %3248, 1
  %3251 = mul i32 %3248, %3250
  %3252 = urem i32 %3251, 2
  %3253 = icmp eq i32 %3252, 0
  %3254 = icmp slt i32 %3249, 10
  %3255 = or i1 %3253, %3254
  br i1 %3255, label %originalBB733, label %originalBB733alteredBB

originalBB733:                                    ; preds = %3247, %originalBB733alteredBB
  %3256 = load i8, i8* %30, align 1, !dbg !3640
  %3257 = trunc i8 %3256 to i1, !dbg !3640
  %3258 = load i32, i32* @x.63
  %3259 = load i32, i32* @y.64
  %3260 = sub i32 %3258, 1
  %3261 = mul i32 %3258, %3260
  %3262 = urem i32 %3261, 2
  %3263 = icmp eq i32 %3262, 0
  %3264 = icmp slt i32 %3259, 10
  %3265 = or i1 %3263, %3264
  br i1 %3265, label %originalBBpart2735, label %originalBB733alteredBB

originalBBpart2735:                               ; preds = %originalBB733
  br i1 %3257, label %3266, label %3276, !dbg !3643

3266:                                             ; preds = %originalBBpart2735
  %3267 = load i8*, i8** %11, align 8, !dbg !3644
  %3268 = load i64, i64* %22, align 8, !dbg !3645
  %3269 = load i8*, i8** %13, align 8, !dbg !3646
  %3270 = load i64, i64* %14, align 8, !dbg !3647
  %3271 = load i32, i32* %16, align 4, !dbg !3648
  %3272 = load i32*, i32** %17, align 8, !dbg !3649
  %3273 = load i8*, i8** %18, align 8, !dbg !3650
  %3274 = load i8*, i8** %19, align 8, !dbg !3651
  %3275 = call i64 @quotearg_buffer_restyled(i8* %3267, i64 %3268, i8* %3269, i64 %3270, i32 5, i32 %3271, i32* %3272, i8* %3273, i8* %3274), !dbg !3652
  store i64 %3275, i64* %10, align 8, !dbg !3653
  br label %3504, !dbg !3653

3276:                                             ; preds = %originalBBpart2735
  %3277 = load i64, i64* %12, align 8, !dbg !3654
  %3278 = icmp ne i64 %3277, 0, !dbg !3654
  br i1 %3278, label %3284, label %3279, !dbg !3656

3279:                                             ; preds = %3276
  %3280 = load i64, i64* %22, align 8, !dbg !3657
  %3281 = icmp ne i64 %3280, 0, !dbg !3657
  br i1 %3281, label %3282, label %3284, !dbg !3658

3282:                                             ; preds = %3279
  %3283 = load i64, i64* %22, align 8, !dbg !3659
  store i64 %3283, i64* %12, align 8, !dbg !3661
  store i64 0, i64* %21, align 8, !dbg !3662
  br label %50, !dbg !3663

3284:                                             ; preds = %3279, %3276
  br label %3285

3285:                                             ; preds = %3284
  br label %3286, !dbg !3664

3286:                                             ; preds = %3285, %originalBBpart2731, %3225, %3222
  %3287 = load i32, i32* @x.63
  %3288 = load i32, i32* @y.64
  %3289 = sub i32 %3287, 1
  %3290 = mul i32 %3287, %3289
  %3291 = urem i32 %3290, 2
  %3292 = icmp eq i32 %3291, 0
  %3293 = icmp slt i32 %3288, 10
  %3294 = or i1 %3292, %3293
  br i1 %3294, label %originalBB737, label %originalBB737alteredBB

originalBB737:                                    ; preds = %3286, %originalBB737alteredBB
  %3295 = load i8*, i8** %23, align 8, !dbg !3665
  %3296 = icmp ne i8* %3295, null, !dbg !3665
  %3297 = load i32, i32* @x.63
  %3298 = load i32, i32* @y.64
  %3299 = sub i32 %3297, 1
  %3300 = mul i32 %3297, %3299
  %3301 = urem i32 %3300, 2
  %3302 = icmp eq i32 %3301, 0
  %3303 = icmp slt i32 %3298, 10
  %3304 = or i1 %3302, %3303
  br i1 %3304, label %originalBBpart2739, label %originalBB737alteredBB

originalBBpart2739:                               ; preds = %originalBB737
  br i1 %3296, label %3305, label %3412, !dbg !3667

3305:                                             ; preds = %originalBBpart2739
  %3306 = load i8, i8* %27, align 1, !dbg !3668
  %3307 = trunc i8 %3306 to i1, !dbg !3668
  br i1 %3307, label %3412, label %3308, !dbg !3669

3308:                                             ; preds = %3305
  %3309 = load i32, i32* @x.63
  %3310 = load i32, i32* @y.64
  %3311 = sub i32 %3309, 1
  %3312 = mul i32 %3309, %3311
  %3313 = urem i32 %3312, 2
  %3314 = icmp eq i32 %3313, 0
  %3315 = icmp slt i32 %3310, 10
  %3316 = or i1 %3314, %3315
  br i1 %3316, label %originalBB741, label %originalBB741alteredBB

originalBB741:                                    ; preds = %3308, %originalBB741alteredBB
  %3317 = load i32, i32* @x.63
  %3318 = load i32, i32* @y.64
  %3319 = sub i32 %3317, 1
  %3320 = mul i32 %3317, %3319
  %3321 = urem i32 %3320, 2
  %3322 = icmp eq i32 %3321, 0
  %3323 = icmp slt i32 %3318, 10
  %3324 = or i1 %3322, %3323
  br i1 %3324, label %originalBBpart2743, label %originalBB741alteredBB

originalBBpart2743:                               ; preds = %originalBB741
  br label %3325, !dbg !3670

3325:                                             ; preds = %3408, %originalBBpart2743
  %3326 = load i32, i32* @x.63
  %3327 = load i32, i32* @y.64
  %3328 = sub i32 %3326, 1
  %3329 = mul i32 %3326, %3328
  %3330 = urem i32 %3329, 2
  %3331 = icmp eq i32 %3330, 0
  %3332 = icmp slt i32 %3327, 10
  %3333 = or i1 %3331, %3332
  br i1 %3333, label %originalBB745, label %originalBB745alteredBB

originalBB745:                                    ; preds = %3325, %originalBB745alteredBB
  %3334 = load i8*, i8** %23, align 8, !dbg !3671
  %3335 = load i8, i8* %3334, align 1, !dbg !3674
  %3336 = icmp ne i8 %3335, 0, !dbg !3675
  %3337 = load i32, i32* @x.63
  %3338 = load i32, i32* @y.64
  %3339 = sub i32 %3337, 1
  %3340 = mul i32 %3337, %3339
  %3341 = urem i32 %3340, 2
  %3342 = icmp eq i32 %3341, 0
  %3343 = icmp slt i32 %3338, 10
  %3344 = or i1 %3342, %3343
  br i1 %3344, label %originalBBpart2747, label %originalBB745alteredBB

originalBBpart2747:                               ; preds = %originalBB745
  br i1 %3336, label %3345, label %3411, !dbg !3675

3345:                                             ; preds = %originalBBpart2747
  %3346 = load i32, i32* @x.63
  %3347 = load i32, i32* @y.64
  %3348 = sub i32 %3346, 1
  %3349 = mul i32 %3346, %3348
  %3350 = urem i32 %3349, 2
  %3351 = icmp eq i32 %3350, 0
  %3352 = icmp slt i32 %3347, 10
  %3353 = or i1 %3351, %3352
  br i1 %3353, label %originalBB749, label %originalBB749alteredBB

originalBB749:                                    ; preds = %3345, %originalBB749alteredBB
  %3354 = load i32, i32* @x.63
  %3355 = load i32, i32* @y.64
  %3356 = sub i32 %3354, 1
  %3357 = mul i32 %3354, %3356
  %3358 = urem i32 %3357, 2
  %3359 = icmp eq i32 %3358, 0
  %3360 = icmp slt i32 %3355, 10
  %3361 = or i1 %3359, %3360
  br i1 %3361, label %originalBBpart2751, label %originalBB749alteredBB

originalBBpart2751:                               ; preds = %originalBB749
  br label %3362, !dbg !3676

3362:                                             ; preds = %originalBBpart2751
  %3363 = load i64, i64* %21, align 8, !dbg !3677
  %3364 = load i64, i64* %12, align 8, !dbg !3677
  %3365 = icmp ult i64 %3363, %3364, !dbg !3677
  br i1 %3365, label %3366, label %3388, !dbg !3680

3366:                                             ; preds = %3362
  %3367 = load i32, i32* @x.63
  %3368 = load i32, i32* @y.64
  %3369 = sub i32 %3367, 1
  %3370 = mul i32 %3367, %3369
  %3371 = urem i32 %3370, 2
  %3372 = icmp eq i32 %3371, 0
  %3373 = icmp slt i32 %3368, 10
  %3374 = or i1 %3372, %3373
  br i1 %3374, label %originalBB753, label %originalBB753alteredBB

originalBB753:                                    ; preds = %3366, %originalBB753alteredBB
  %3375 = load i8*, i8** %23, align 8, !dbg !3677
  %3376 = load i8, i8* %3375, align 1, !dbg !3677
  %3377 = load i8*, i8** %11, align 8, !dbg !3677
  %3378 = load i64, i64* %21, align 8, !dbg !3677
  %3379 = getelementptr inbounds i8, i8* %3377, i64 %3378, !dbg !3677
  store i8 %3376, i8* %3379, align 1, !dbg !3677
  %3380 = load i32, i32* @x.63
  %3381 = load i32, i32* @y.64
  %3382 = sub i32 %3380, 1
  %3383 = mul i32 %3380, %3382
  %3384 = urem i32 %3383, 2
  %3385 = icmp eq i32 %3384, 0
  %3386 = icmp slt i32 %3381, 10
  %3387 = or i1 %3385, %3386
  br i1 %3387, label %originalBBpart2755, label %originalBB753alteredBB

originalBBpart2755:                               ; preds = %originalBB753
  br label %3388, !dbg !3677

3388:                                             ; preds = %originalBBpart2755, %3362
  %3389 = load i32, i32* @x.63
  %3390 = load i32, i32* @y.64
  %3391 = sub i32 %3389, 1
  %3392 = mul i32 %3389, %3391
  %3393 = urem i32 %3392, 2
  %3394 = icmp eq i32 %3393, 0
  %3395 = icmp slt i32 %3390, 10
  %3396 = or i1 %3394, %3395
  br i1 %3396, label %originalBB757, label %originalBB757alteredBB

originalBB757:                                    ; preds = %3388, %originalBB757alteredBB
  %3397 = load i64, i64* %21, align 8, !dbg !3680
  %3398 = add i64 %3397, 1, !dbg !3680
  store i64 %3398, i64* %21, align 8, !dbg !3680
  %3399 = load i32, i32* @x.63
  %3400 = load i32, i32* @y.64
  %3401 = sub i32 %3399, 1
  %3402 = mul i32 %3399, %3401
  %3403 = urem i32 %3402, 2
  %3404 = icmp eq i32 %3403, 0
  %3405 = icmp slt i32 %3400, 10
  %3406 = or i1 %3404, %3405
  br i1 %3406, label %originalBBpart2759, label %originalBB757alteredBB

originalBBpart2759:                               ; preds = %originalBB757
  br label %3407, !dbg !3680

3407:                                             ; preds = %originalBBpart2759
  br label %3408, !dbg !3680

3408:                                             ; preds = %3407
  %3409 = load i8*, i8** %23, align 8, !dbg !3681
  %3410 = getelementptr inbounds i8, i8* %3409, i32 1, !dbg !3681
  store i8* %3410, i8** %23, align 8, !dbg !3681
  br label %3325, !dbg !3682, !llvm.loop !3683

3411:                                             ; preds = %originalBBpart2747
  br label %3412, !dbg !3684

3412:                                             ; preds = %3411, %3305, %originalBBpart2739
  %3413 = load i32, i32* @x.63
  %3414 = load i32, i32* @y.64
  %3415 = sub i32 %3413, 1
  %3416 = mul i32 %3413, %3415
  %3417 = urem i32 %3416, 2
  %3418 = icmp eq i32 %3417, 0
  %3419 = icmp slt i32 %3414, 10
  %3420 = or i1 %3418, %3419
  br i1 %3420, label %originalBB761, label %originalBB761alteredBB

originalBB761:                                    ; preds = %3412, %originalBB761alteredBB
  %3421 = load i64, i64* %21, align 8, !dbg !3685
  %3422 = load i64, i64* %12, align 8, !dbg !3687
  %3423 = icmp ult i64 %3421, %3422, !dbg !3688
  %3424 = load i32, i32* @x.63
  %3425 = load i32, i32* @y.64
  %3426 = sub i32 %3424, 1
  %3427 = mul i32 %3424, %3426
  %3428 = urem i32 %3427, 2
  %3429 = icmp eq i32 %3428, 0
  %3430 = icmp slt i32 %3425, 10
  %3431 = or i1 %3429, %3430
  br i1 %3431, label %originalBBpart2763, label %originalBB761alteredBB

originalBBpart2763:                               ; preds = %originalBB761
  br i1 %3423, label %3432, label %3436, !dbg !3689

3432:                                             ; preds = %originalBBpart2763
  %3433 = load i8*, i8** %11, align 8, !dbg !3690
  %3434 = load i64, i64* %21, align 8, !dbg !3691
  %3435 = getelementptr inbounds i8, i8* %3433, i64 %3434, !dbg !3690
  store i8 0, i8* %3435, align 1, !dbg !3692
  br label %3436, !dbg !3690

3436:                                             ; preds = %3432, %originalBBpart2763
  %3437 = load i32, i32* @x.63
  %3438 = load i32, i32* @y.64
  %3439 = sub i32 %3437, 1
  %3440 = mul i32 %3437, %3439
  %3441 = urem i32 %3440, 2
  %3442 = icmp eq i32 %3441, 0
  %3443 = icmp slt i32 %3438, 10
  %3444 = or i1 %3442, %3443
  br i1 %3444, label %originalBB765, label %originalBB765alteredBB

originalBB765:                                    ; preds = %3436, %originalBB765alteredBB
  %3445 = load i64, i64* %21, align 8, !dbg !3693
  store i64 %3445, i64* %10, align 8, !dbg !3694
  %3446 = load i32, i32* @x.63
  %3447 = load i32, i32* @y.64
  %3448 = sub i32 %3446, 1
  %3449 = mul i32 %3446, %3448
  %3450 = urem i32 %3449, 2
  %3451 = icmp eq i32 %3450, 0
  %3452 = icmp slt i32 %3447, 10
  %3453 = or i1 %3451, %3452
  br i1 %3453, label %originalBBpart2767, label %originalBB765alteredBB

originalBBpart2767:                               ; preds = %originalBB765
  br label %3504, !dbg !3694

3454:                                             ; preds = %3221, %2844, %2202, %2008, %originalBBpart2327, %1576, %originalBBpart2283, %originalBBpart2259, %999, %922, %originalBBpart2100, %originalBBpart280
  call void @llvm.dbg.label(metadata !3695), !dbg !3696
  %3455 = load i32, i32* @x.63
  %3456 = load i32, i32* @y.64
  %3457 = sub i32 %3455, 1
  %3458 = mul i32 %3455, %3457
  %3459 = urem i32 %3458, 2
  %3460 = icmp eq i32 %3459, 0
  %3461 = icmp slt i32 %3456, 10
  %3462 = or i1 %3460, %3461
  br i1 %3462, label %originalBB769, label %originalBB769alteredBB

originalBB769:                                    ; preds = %3454, %originalBB769alteredBB
  %3463 = load i32, i32* %15, align 4, !dbg !3697
  %3464 = icmp eq i32 %3463, 2, !dbg !3699
  %3465 = load i32, i32* @x.63
  %3466 = load i32, i32* @y.64
  %3467 = sub i32 %3465, 1
  %3468 = mul i32 %3465, %3467
  %3469 = urem i32 %3468, 2
  %3470 = icmp eq i32 %3469, 0
  %3471 = icmp slt i32 %3466, 10
  %3472 = or i1 %3470, %3471
  br i1 %3472, label %originalBBpart2771, label %originalBB769alteredBB

originalBBpart2771:                               ; preds = %originalBB769
  br i1 %3464, label %3473, label %3493, !dbg !3700

3473:                                             ; preds = %originalBBpart2771
  %3474 = load i32, i32* @x.63
  %3475 = load i32, i32* @y.64
  %3476 = sub i32 %3474, 1
  %3477 = mul i32 %3474, %3476
  %3478 = urem i32 %3477, 2
  %3479 = icmp eq i32 %3478, 0
  %3480 = icmp slt i32 %3475, 10
  %3481 = or i1 %3479, %3480
  br i1 %3481, label %originalBB773, label %originalBB773alteredBB

originalBB773:                                    ; preds = %3473, %originalBB773alteredBB
  %3482 = load i8, i8* %25, align 1, !dbg !3701
  %3483 = trunc i8 %3482 to i1, !dbg !3701
  %3484 = load i32, i32* @x.63
  %3485 = load i32, i32* @y.64
  %3486 = sub i32 %3484, 1
  %3487 = mul i32 %3484, %3486
  %3488 = urem i32 %3487, 2
  %3489 = icmp eq i32 %3488, 0
  %3490 = icmp slt i32 %3485, 10
  %3491 = or i1 %3489, %3490
  br i1 %3491, label %originalBBpart2775, label %originalBB773alteredBB

originalBBpart2775:                               ; preds = %originalBB773
  br i1 %3483, label %3492, label %3493, !dbg !3702

3492:                                             ; preds = %originalBBpart2775
  store i32 4, i32* %15, align 4, !dbg !3703
  br label %3493, !dbg !3704

3493:                                             ; preds = %3492, %originalBBpart2775, %originalBBpart2771
  %3494 = load i8*, i8** %11, align 8, !dbg !3705
  %3495 = load i64, i64* %12, align 8, !dbg !3706
  %3496 = load i8*, i8** %13, align 8, !dbg !3707
  %3497 = load i64, i64* %14, align 8, !dbg !3708
  %3498 = load i32, i32* %15, align 4, !dbg !3709
  %3499 = load i32, i32* %16, align 4, !dbg !3710
  %3500 = and i32 %3499, -3, !dbg !3711
  %3501 = load i8*, i8** %18, align 8, !dbg !3712
  %3502 = load i8*, i8** %19, align 8, !dbg !3713
  %3503 = call i64 @quotearg_buffer_restyled(i8* %3494, i64 %3495, i8* %3496, i64 %3497, i32 %3498, i32 %3500, i32* null, i8* %3501, i8* %3502), !dbg !3714
  store i64 %3503, i64* %10, align 8, !dbg !3715
  br label %3504, !dbg !3715

3504:                                             ; preds = %3493, %originalBBpart2767, %3266
  %3505 = load i32, i32* @x.63
  %3506 = load i32, i32* @y.64
  %3507 = sub i32 %3505, 1
  %3508 = mul i32 %3505, %3507
  %3509 = urem i32 %3508, 2
  %3510 = icmp eq i32 %3509, 0
  %3511 = icmp slt i32 %3506, 10
  %3512 = or i1 %3510, %3511
  br i1 %3512, label %originalBB777, label %originalBB777alteredBB

originalBB777:                                    ; preds = %3504, %originalBB777alteredBB
  %3513 = load i64, i64* %10, align 8, !dbg !3716
  %3514 = load i32, i32* @x.63
  %3515 = load i32, i32* @y.64
  %3516 = sub i32 %3514, 1
  %3517 = mul i32 %3514, %3516
  %3518 = urem i32 %3517, 2
  %3519 = icmp eq i32 %3518, 0
  %3520 = icmp slt i32 %3515, 10
  %3521 = or i1 %3519, %3520
  br i1 %3521, label %originalBBpart2779, label %originalBB777alteredBB

originalBBpart2779:                               ; preds = %originalBB777
  ret i64 %3513, !dbg !3716

originalBBalteredBB:                              ; preds = %originalBB, %53
  %3522 = load i8, i8* %27, align 1, !dbg !2893
  %3523 = trunc i8 %3522 to i1, !dbg !2893
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %73
  %3524 = load i64, i64* %21, align 8, !dbg !2897
  %3525 = load i64, i64* %12, align 8, !dbg !2897
  %3526 = icmp ult i64 %3524, %3525, !dbg !2897
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %100
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %118
  store i8 1, i8* %25, align 1, !dbg !2905
  store i8 0, i8* %27, align 1, !dbg !2906
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %135
  %3527 = load i32, i32* %15, align 4, !dbg !2908
  %3528 = icmp ne i32 %3527, 10, !dbg !2911
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %164
  %3529 = load i8*, i8** %23, align 8, !dbg !2928
  %3530 = load i8, i8* %3529, align 1, !dbg !2930
  %3531 = icmp ne i8 %3530, 0, !dbg !2931
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %203
  store i8 1, i8* %25, align 1, !dbg !2941
  %3532 = load i8*, i8** %19, align 8, !dbg !2942
  store i8* %3532, i8** %23, align 8, !dbg !2943
  %3533 = load i8*, i8** %23, align 8, !dbg !2944
  %3534 = call i64 @strlen(i8* %3533) #13, !dbg !2945
  store i64 %3534, i64* %24, align 8, !dbg !2946
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %223
  store i8 1, i8* %25, align 1, !dbg !2948
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %246
  store i32 2, i32* %15, align 4, !dbg !2958
  %3535 = load i8, i8* %27, align 1, !dbg !2959
  %3536 = trunc i8 %3535 to i1, !dbg !2959
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %277
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %294
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i8** %23, align 8, !dbg !2967
  store i64 1, i64* %24, align 8, !dbg !2968
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %311
  store i8 0, i8* %27, align 1, !dbg !2970
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %333
  %3537 = load i8*, i8** %13, align 8, !dbg !2979
  %3538 = load i64, i64* %20, align 8, !dbg !2980
  %3539 = getelementptr inbounds i8, i8* %3537, i64 %3538, !dbg !2979
  %3540 = load i8, i8* %3539, align 1, !dbg !2979
  %3541 = sext i8 %3540 to i32, !dbg !2979
  %3542 = icmp eq i32 %3541, 0, !dbg !2981
  %3543 = zext i1 %3542 to i32, !dbg !2981
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %362
  %3544 = icmp ne i32 %363, 0, !dbg !2985
  %_ = sub i1 false, %3544
  %gen = add i1 %_, true
  %_51 = shl i1 %3544, true
  %_52 = shl i1 %3544, true
  %_53 = sub i1 false, %3544
  %gen54 = add i1 %_53, true
  %3545 = xor i1 %3544, true, !dbg !2985
  br label %originalBB50

originalBB58alteredBB:                            ; preds = %originalBB58, %382
  store i8 0, i8* %33, align 1, !dbg !2993
  call void @llvm.dbg.declare(metadata !4, metadata !3717, metadata !DIExpression()), !dbg !2995
  store i8 0, i8* %34, align 1, !dbg !2995
  call void @llvm.dbg.declare(metadata !4, metadata !3752, metadata !DIExpression()), !dbg !2997
  store i8 0, i8* %35, align 1, !dbg !2997
  %3546 = load i8, i8* %25, align 1, !dbg !2998
  %3547 = trunc i8 %3546 to i1, !dbg !2998
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %413
  %3548 = load i64, i64* %24, align 8, !dbg !3012
  %3549 = icmp ult i64 1, %3548, !dbg !3013
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %432
  %3550 = load i8*, i8** %13, align 8, !dbg !3014
  %3551 = call i64 @strlen(i8* %3550) #13, !dbg !3015
  store i64 %3551, i64* %14, align 8, !dbg !3016
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %453
  %3552 = icmp ule i64 %410, %454, !dbg !3018
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %480
  %3553 = load i8, i8* %27, align 1, !dbg !3028
  %3554 = trunc i8 %3553 to i1, !dbg !3028
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %499
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %516
  store i8 1, i8* %33, align 1, !dbg !3033
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %533
  %3555 = load i8*, i8** %13, align 8, !dbg !3035
  %3556 = load i64, i64* %20, align 8, !dbg !3036
  %3557 = getelementptr inbounds i8, i8* %3555, i64 %3556, !dbg !3035
  %3558 = load i8, i8* %3557, align 1, !dbg !3035
  store i8 %3558, i8* %31, align 1, !dbg !3037
  %3559 = load i8, i8* %31, align 1, !dbg !3038
  %3560 = zext i8 %3559 to i32, !dbg !3038
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %556
  %3561 = load i8, i8* %25, align 1, !dbg !3040
  %3562 = trunc i8 %3561 to i1, !dbg !3040
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %576
  %3563 = load i8, i8* %27, align 1, !dbg !3046
  %3564 = trunc i8 %3563 to i1, !dbg !3046
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %595
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %612
  store i8 1, i8* %34, align 1, !dbg !3049
  %3565 = load i32, i32* %15, align 4, !dbg !3050
  %3566 = icmp eq i32 %3565, 2, !dbg !3050
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %631
  %3567 = load i8, i8* %28, align 1, !dbg !3050
  %3568 = trunc i8 %3567 to i1, !dbg !3050
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %662
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %683
  %3569 = load i8*, i8** %11, align 8, !dbg !3058
  %3570 = load i64, i64* %21, align 8, !dbg !3058
  %3571 = getelementptr inbounds i8, i8* %3569, i64 %3570, !dbg !3058
  store i8 36, i8* %3571, align 1, !dbg !3058
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %707
  %3572 = load i64, i64* %21, align 8, !dbg !3062
  %3573 = load i64, i64* %12, align 8, !dbg !3062
  %3574 = icmp ult i64 %3572, %3573, !dbg !3062
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %740
  %3575 = load i8*, i8** %11, align 8, !dbg !3066
  %3576 = load i64, i64* %21, align 8, !dbg !3066
  %3577 = getelementptr inbounds i8, i8* %3575, i64 %3576, !dbg !3066
  store i8 92, i8* %3577, align 1, !dbg !3066
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %780
  %3578 = load i8*, i8** %13, align 8, !dbg !3084
  %3579 = load i64, i64* %20, align 8, !dbg !3085
  %_127 = sub i64 0, %3579
  %gen128 = add i64 %_127, 1
  %_129 = shl i64 %3579, 1
  %_130 = shl i64 %3579, 1
  %_131 = sub i64 %3579, 1
  %gen132 = mul i64 %_131, 1
  %_133 = shl i64 %3579, 1
  %_134 = shl i64 %3579, 1
  %3580 = add i64 %3579, 1, !dbg !3086
  %3581 = getelementptr inbounds i8, i8* %3578, i64 %3580, !dbg !3084
  %3582 = load i8, i8* %3581, align 1, !dbg !3084
  %3583 = sext i8 %3582 to i32, !dbg !3084
  %3584 = icmp sle i32 %3583, 57, !dbg !3087
  br label %originalBB126

originalBB138alteredBB:                           ; preds = %originalBB138, %817
  %3585 = load i64, i64* %21, align 8, !dbg !3096
  %3586 = load i64, i64* %12, align 8, !dbg !3096
  %3587 = icmp ult i64 %3585, %3586, !dbg !3096
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %841
  %3588 = load i64, i64* %21, align 8, !dbg !3099
  %_143 = sub i64 %3588, 1
  %gen144 = mul i64 %_143, 1
  %_145 = shl i64 %3588, 1
  %_146 = sub i64 %3588, 1
  %gen147 = mul i64 %_146, 1
  %_148 = shl i64 %3588, 1
  %_149 = sub i64 0, %3588
  %gen150 = add i64 %_149, 1
  %3589 = add i64 %3588, 1, !dbg !3099
  store i64 %3589, i64* %21, align 8, !dbg !3099
  br label %originalBB142

originalBB154alteredBB:                           ; preds = %originalBB154, %860
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %882
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %900
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %933
  %3590 = load i8*, i8** %13, align 8, !dbg !3126
  %3591 = load i64, i64* %20, align 8, !dbg !3127
  %_167 = sub i64 0, %3591
  %gen168 = add i64 %_167, 1
  %3592 = add i64 %3591, 1, !dbg !3128
  %3593 = getelementptr inbounds i8, i8* %3590, i64 %3592, !dbg !3126
  %3594 = load i8, i8* %3593, align 1, !dbg !3126
  %3595 = sext i8 %3594 to i32, !dbg !3126
  %3596 = icmp eq i32 %3595, 63, !dbg !3129
  br label %originalBB166

originalBB172alteredBB:                           ; preds = %originalBB172, %957
  %3597 = load i8*, i8** %13, align 8, !dbg !3131
  %3598 = load i64, i64* %20, align 8, !dbg !3132
  %_173 = shl i64 %3598, 2
  %_174 = sub i64 0, %3598
  %gen175 = add i64 %_174, 2
  %_176 = sub i64 %3598, 2
  %gen177 = mul i64 %_176, 2
  %_178 = shl i64 %3598, 2
  %_179 = sub i64 0, %3598
  %gen180 = add i64 %_179, 2
  %_181 = sub i64 0, %3598
  %gen182 = add i64 %_181, 2
  %3599 = add i64 %3598, 2, !dbg !3133
  %3600 = getelementptr inbounds i8, i8* %3597, i64 %3599, !dbg !3131
  %3601 = load i8, i8* %3600, align 1, !dbg !3131
  %3602 = sext i8 %3601 to i32, !dbg !3131
  br label %originalBB172

originalBB186alteredBB:                           ; preds = %originalBB186, %980
  %3603 = load i8, i8* %27, align 1, !dbg !3135
  %3604 = trunc i8 %3603 to i1, !dbg !3135
  br label %originalBB186

originalBB190alteredBB:                           ; preds = %originalBB190, %1008
  %3605 = load i64, i64* %21, align 8, !dbg !3146
  %3606 = load i64, i64* %12, align 8, !dbg !3146
  %3607 = icmp ult i64 %3605, %3606, !dbg !3146
  br label %originalBB190

originalBB194alteredBB:                           ; preds = %originalBB194, %1028
  %3608 = load i8*, i8** %11, align 8, !dbg !3146
  %3609 = load i64, i64* %21, align 8, !dbg !3146
  %3610 = getelementptr inbounds i8, i8* %3608, i64 %3609, !dbg !3146
  store i8 63, i8* %3610, align 1, !dbg !3146
  br label %originalBB194

originalBB198alteredBB:                           ; preds = %originalBB198, %1048
  %3611 = load i64, i64* %21, align 8, !dbg !3149
  %_199 = sub i64 %3611, 1
  %gen200 = mul i64 %_199, 1
  %_201 = sub i64 %3611, 1
  %gen202 = mul i64 %_201, 1
  %3612 = add i64 %3611, 1, !dbg !3149
  store i64 %3612, i64* %21, align 8, !dbg !3149
  br label %originalBB198

originalBB206alteredBB:                           ; preds = %originalBB206, %1072
  %3613 = load i8*, i8** %11, align 8, !dbg !3151
  %3614 = load i64, i64* %21, align 8, !dbg !3151
  %3615 = getelementptr inbounds i8, i8* %3613, i64 %3614, !dbg !3151
  store i8 34, i8* %3615, align 1, !dbg !3151
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %1100
  %3616 = load i8*, i8** %11, align 8, !dbg !3156
  %3617 = load i64, i64* %21, align 8, !dbg !3156
  %3618 = getelementptr inbounds i8, i8* %3616, i64 %3617, !dbg !3156
  store i8 34, i8* %3618, align 1, !dbg !3156
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %1120
  %3619 = load i64, i64* %21, align 8, !dbg !3159
  %_215 = sub i64 0, %3619
  %gen216 = add i64 %_215, 1
  %_217 = sub i64 0, %3619
  %gen218 = add i64 %_217, 1
  %_219 = sub i64 0, %3619
  %gen220 = add i64 %_219, 1
  %_221 = sub i64 %3619, 1
  %gen222 = mul i64 %_221, 1
  %_223 = sub i64 %3619, 1
  %gen224 = mul i64 %_223, 1
  %3620 = add i64 %3619, 1, !dbg !3159
  store i64 %3620, i64* %21, align 8, !dbg !3159
  br label %originalBB214

originalBB229alteredBB:                           ; preds = %originalBB229, %1144
  %3621 = load i8*, i8** %11, align 8, !dbg !3161
  %3622 = load i64, i64* %21, align 8, !dbg !3161
  %3623 = getelementptr inbounds i8, i8* %3621, i64 %3622, !dbg !3161
  store i8 63, i8* %3623, align 1, !dbg !3161
  br label %originalBB229

originalBB233alteredBB:                           ; preds = %originalBB233, %1167
  br label %originalBB233

originalBB237alteredBB:                           ; preds = %originalBB237, %1184
  br label %originalBB237

originalBB241alteredBB:                           ; preds = %originalBB241, %1203
  br label %originalBB241

originalBB245alteredBB:                           ; preds = %originalBB245, %1221
  store i8 97, i8* %32, align 1, !dbg !3171
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %1239
  store i8 102, i8* %32, align 1, !dbg !3175
  br label %originalBB249

originalBB253alteredBB:                           ; preds = %originalBB253, %1260
  %3624 = load i8, i8* %31, align 1, !dbg !3185
  store i8 %3624, i8* %32, align 1, !dbg !3186
  %3625 = load i32, i32* %15, align 4, !dbg !3187
  %3626 = icmp eq i32 %3625, 2, !dbg !3189
  br label %originalBB253

originalBB257alteredBB:                           ; preds = %originalBB257, %1283
  br label %originalBB257

originalBB261alteredBB:                           ; preds = %originalBB261, %1301
  %3627 = load i8, i8* %25, align 1, !dbg !3197
  %3628 = trunc i8 %3627 to i1, !dbg !3197
  br label %originalBB261

originalBB265alteredBB:                           ; preds = %originalBB265, %1320
  %3629 = load i8, i8* %27, align 1, !dbg !3200
  %3630 = trunc i8 %3629 to i1, !dbg !3200
  br label %originalBB265

originalBB269alteredBB:                           ; preds = %originalBB269, %1339
  %3631 = load i64, i64* %24, align 8, !dbg !3202
  %3632 = icmp ne i64 %3631, 0, !dbg !3202
  br label %originalBB269

originalBB273alteredBB:                           ; preds = %originalBB273, %1358
  br label %originalBB273

originalBB277alteredBB:                           ; preds = %originalBB277, %1375
  br label %originalBB277

originalBB281alteredBB:                           ; preds = %originalBB281, %1398
  br label %originalBB281

originalBB285alteredBB:                           ; preds = %originalBB285, %1416
  %3633 = load i8, i8* %25, align 1, !dbg !3216
  %3634 = trunc i8 %3633 to i1, !dbg !3216
  br label %originalBB285

originalBB289alteredBB:                           ; preds = %originalBB289, %1437
  br label %originalBB289

originalBB293alteredBB:                           ; preds = %originalBB293, %1454
  %3635 = load i64, i64* %14, align 8, !dbg !3224
  %3636 = icmp eq i64 %3635, -1, !dbg !3226
  br label %originalBB293

originalBB297alteredBB:                           ; preds = %originalBB297, %1483
  br label %originalBB297

originalBB301alteredBB:                           ; preds = %originalBB301, %1504
  br label %originalBB301

originalBB305alteredBB:                           ; preds = %originalBB305, %1521
  store i8 1, i8* %35, align 1, !dbg !3240
  br label %originalBB305

originalBB309alteredBB:                           ; preds = %originalBB309, %1538
  %3637 = load i32, i32* %15, align 4, !dbg !3242
  %3638 = icmp eq i32 %3637, 2, !dbg !3244
  br label %originalBB309

originalBB313alteredBB:                           ; preds = %originalBB313, %1557
  %3639 = load i8, i8* %27, align 1, !dbg !3246
  %3640 = trunc i8 %3639 to i1, !dbg !3246
  br label %originalBB313

originalBB317alteredBB:                           ; preds = %originalBB317, %1577
  br label %originalBB317

originalBB321alteredBB:                           ; preds = %originalBB321, %1597
  %3641 = load i8, i8* %27, align 1, !dbg !3256
  %3642 = trunc i8 %3641 to i1, !dbg !3256
  br label %originalBB321

originalBB325alteredBB:                           ; preds = %originalBB325, %1616
  br label %originalBB325

originalBB329alteredBB:                           ; preds = %originalBB329, %1636
  %3643 = load i64, i64* %22, align 8, !dbg !3264
  %3644 = icmp ne i64 %3643, 0, !dbg !3264
  br label %originalBB329

originalBB333alteredBB:                           ; preds = %originalBB333, %1655
  %3645 = load i64, i64* %12, align 8, !dbg !3266
  store i64 %3645, i64* %22, align 8, !dbg !3268
  store i64 0, i64* %12, align 8, !dbg !3269
  br label %originalBB333

originalBB337alteredBB:                           ; preds = %originalBB337, %1673
  br label %originalBB337

originalBB341alteredBB:                           ; preds = %originalBB341, %1690
  %3646 = load i64, i64* %21, align 8, !dbg !3272
  %3647 = load i64, i64* %12, align 8, !dbg !3272
  %3648 = icmp ult i64 %3646, %3647, !dbg !3272
  br label %originalBB341

originalBB345alteredBB:                           ; preds = %originalBB345, %1734
  %3649 = load i8*, i8** %11, align 8, !dbg !3282
  %3650 = load i64, i64* %21, align 8, !dbg !3282
  %3651 = getelementptr inbounds i8, i8* %3649, i64 %3650, !dbg !3282
  store i8 39, i8* %3651, align 1, !dbg !3282
  br label %originalBB345

originalBB349alteredBB:                           ; preds = %originalBB349, %1757
  store i8 0, i8* %28, align 1, !dbg !3286
  br label %originalBB349

originalBB353alteredBB:                           ; preds = %originalBB353, %1774
  br label %originalBB353

originalBB357alteredBB:                           ; preds = %originalBB357, %1791
  store i8 1, i8* %35, align 1, !dbg !3289
  br label %originalBB357

originalBB361alteredBB:                           ; preds = %originalBB361, %1808
  %3652 = load i8, i8* %26, align 1, !dbg !3296
  %3653 = trunc i8 %3652 to i1, !dbg !3296
  br label %originalBB361

originalBB365alteredBB:                           ; preds = %originalBB365, %1827
  store i64 1, i64* %36, align 8, !dbg !3299
  %3654 = call i16** @__ctype_b_loc() #15, !dbg !3301
  %3655 = load i16*, i16** %3654, align 8, !dbg !3301
  %3656 = load i8, i8* %31, align 1, !dbg !3301
  %3657 = zext i8 %3656 to i32, !dbg !3301
  %3658 = sext i32 %3657 to i64, !dbg !3301
  %3659 = getelementptr inbounds i16, i16* %3655, i64 %3658, !dbg !3301
  %3660 = load i16, i16* %3659, align 2, !dbg !3301
  %3661 = zext i16 %3660 to i32, !dbg !3301
  %_366 = sub i32 0, %3661
  %gen367 = add i32 %_366, 16384
  %_368 = sub i32 %3661, 16384
  %gen369 = mul i32 %_368, 16384
  %_370 = sub i32 %3661, 16384
  %gen371 = mul i32 %_370, 16384
  %_372 = sub i32 0, %3661
  %gen373 = add i32 %_372, 16384
  %_374 = shl i32 %3661, 16384
  %3662 = and i32 %3661, 16384, !dbg !3301
  %3663 = icmp ne i32 %3662, 0, !dbg !3302
  %3664 = zext i1 %3663 to i8, !dbg !3303
  store i8 %3664, i8* %37, align 1, !dbg !3303
  br label %originalBB365

originalBB378alteredBB:                           ; preds = %originalBB378, %1862
  br label %originalBB378

originalBB382alteredBB:                           ; preds = %originalBB382, %1901
  store i8 0, i8* %37, align 1, !dbg !3364
  br label %originalBB382

originalBB386alteredBB:                           ; preds = %originalBB386, %1924
  %3665 = load i8*, i8** %13, align 8, !dbg !3373
  %3666 = load i64, i64* %20, align 8, !dbg !3374
  %3667 = load i64, i64* %36, align 8, !dbg !3375
  %_387 = shl i64 %3666, %3667
  %_388 = sub i64 0, %3666
  %gen389 = add i64 %_388, %3667
  %_390 = sub i64 %3666, %3667
  %gen391 = mul i64 %_390, %3667
  %_392 = shl i64 %3666, %3667
  %_393 = sub i64 %3666, %3667
  %gen394 = mul i64 %_393, %3667
  %_395 = shl i64 %3666, %3667
  %3668 = add i64 %3666, %3667, !dbg !3376
  %3669 = getelementptr inbounds i8, i8* %3665, i64 %3668, !dbg !3373
  %3670 = load i8, i8* %3669, align 1, !dbg !3373
  %3671 = sext i8 %3670 to i32, !dbg !3373
  %3672 = icmp ne i32 %3671, 0, !dbg !3372
  br label %originalBB386

originalBB399alteredBB:                           ; preds = %originalBB399, %1954
  br label %originalBB399

originalBB403alteredBB:                           ; preds = %originalBB403, %1978
  %3673 = load i64, i64* %41, align 8, !dbg !3394
  %3674 = load i64, i64* %40, align 8, !dbg !3396
  %3675 = icmp ult i64 %3673, %3674, !dbg !3397
  br label %originalBB403

originalBB407alteredBB:                           ; preds = %originalBB407, %2014
  br label %originalBB407

originalBB411alteredBB:                           ; preds = %originalBB411, %2036
  %3676 = load i64, i64* %40, align 8, !dbg !3421
  %3677 = load i64, i64* %36, align 8, !dbg !3422
  %_412 = sub i64 0, %3677
  %gen413 = add i64 %_412, %3676
  %_414 = sub i64 %3677, %3676
  %gen415 = mul i64 %_414, %3676
  %_416 = sub i64 0, %3677
  %gen417 = add i64 %_416, %3676
  %_418 = sub i64 %3677, %3676
  %gen419 = mul i64 %_418, %3676
  %3678 = add i64 %3677, %3676, !dbg !3422
  store i64 %3678, i64* %36, align 8, !dbg !3422
  br label %originalBB411

originalBB423alteredBB:                           ; preds = %originalBB423, %2056
  br label %originalBB423

originalBB427alteredBB:                           ; preds = %originalBB427, %2074
  br label %originalBB427

originalBB431alteredBB:                           ; preds = %originalBB431, %2096
  %3679 = load i8, i8* %37, align 1, !dbg !3428
  %3680 = trunc i8 %3679 to i1, !dbg !3428
  %3681 = zext i1 %3680 to i8, !dbg !3429
  store i8 %3681, i8* %35, align 1, !dbg !3429
  %3682 = load i64, i64* %36, align 8, !dbg !3430
  %3683 = icmp ult i64 1, %3682, !dbg !3432
  br label %originalBB431

originalBB435alteredBB:                           ; preds = %originalBB435, %2118
  %3684 = load i8, i8* %25, align 1, !dbg !3434
  %3685 = trunc i8 %3684 to i1, !dbg !3434
  br label %originalBB435

originalBB439alteredBB:                           ; preds = %originalBB439, %2137
  %3686 = load i8, i8* %37, align 1, !dbg !3436
  %3687 = trunc i8 %3686 to i1, !dbg !3436
  br label %originalBB439

originalBB443alteredBB:                           ; preds = %originalBB443, %2166
  br label %originalBB443

originalBB447alteredBB:                           ; preds = %originalBB447, %2183
  %3688 = load i8, i8* %27, align 1, !dbg !3455
  %3689 = trunc i8 %3688 to i1, !dbg !3455
  br label %originalBB447

originalBB451alteredBB:                           ; preds = %originalBB451, %2210
  %3690 = load i64, i64* %21, align 8, !dbg !3463
  %3691 = load i64, i64* %12, align 8, !dbg !3463
  %3692 = icmp ult i64 %3690, %3691, !dbg !3463
  br label %originalBB451

originalBB455alteredBB:                           ; preds = %originalBB455, %2234
  %3693 = load i64, i64* %21, align 8, !dbg !3466
  %_456 = sub i64 0, %3693
  %gen457 = add i64 %_456, 1
  %_458 = sub i64 0, %3693
  %gen459 = add i64 %_458, 1
  %_460 = sub i64 0, %3693
  %gen461 = add i64 %_460, 1
  %_462 = sub i64 %3693, 1
  %gen463 = mul i64 %_462, 1
  %3694 = add i64 %3693, 1, !dbg !3466
  store i64 %3694, i64* %21, align 8, !dbg !3466
  br label %originalBB455

originalBB467alteredBB:                           ; preds = %originalBB467, %2254
  %3695 = load i64, i64* %21, align 8, !dbg !3467
  %3696 = load i64, i64* %12, align 8, !dbg !3467
  %3697 = icmp ult i64 %3695, %3696, !dbg !3467
  br label %originalBB467

originalBB471alteredBB:                           ; preds = %originalBB471, %2278
  %3698 = load i64, i64* %21, align 8, !dbg !3470
  %_472 = shl i64 %3698, 1
  %_473 = sub i64 %3698, 1
  %gen474 = mul i64 %_473, 1
  %_475 = sub i64 0, %3698
  %gen476 = add i64 %_475, 1
  %_477 = sub i64 %3698, 1
  %gen478 = mul i64 %_477, 1
  %_479 = sub i64 %3698, 1
  %gen480 = mul i64 %_479, 1
  %3699 = add i64 %3698, 1, !dbg !3470
  store i64 %3699, i64* %21, align 8, !dbg !3470
  br label %originalBB471

originalBB484alteredBB:                           ; preds = %originalBB484, %2298
  %3700 = load i64, i64* %21, align 8, !dbg !3471
  %3701 = load i64, i64* %12, align 8, !dbg !3471
  %3702 = icmp ult i64 %3700, %3701, !dbg !3471
  br label %originalBB484

originalBB488alteredBB:                           ; preds = %originalBB488, %2325
  store i8 1, i8* %28, align 1, !dbg !3461
  br label %originalBB488

originalBB492alteredBB:                           ; preds = %originalBB492, %2342
  br label %originalBB492

originalBB496alteredBB:                           ; preds = %originalBB496, %2359
  %3703 = load i64, i64* %21, align 8, !dbg !3475
  %3704 = load i64, i64* %12, align 8, !dbg !3475
  %3705 = icmp ult i64 %3703, %3704, !dbg !3475
  br label %originalBB496

originalBB500alteredBB:                           ; preds = %originalBB500, %2379
  %3706 = load i8*, i8** %11, align 8, !dbg !3475
  %3707 = load i64, i64* %21, align 8, !dbg !3475
  %3708 = getelementptr inbounds i8, i8* %3706, i64 %3707, !dbg !3475
  store i8 92, i8* %3708, align 1, !dbg !3475
  br label %originalBB500

originalBB504alteredBB:                           ; preds = %originalBB504, %2404
  %3709 = load i64, i64* %21, align 8, !dbg !3480
  %3710 = load i64, i64* %12, align 8, !dbg !3480
  %3711 = icmp ult i64 %3709, %3710, !dbg !3480
  br label %originalBB504

originalBB508alteredBB:                           ; preds = %originalBB508, %2433
  %3712 = load i64, i64* %21, align 8, !dbg !3483
  %3713 = add i64 %3712, 1, !dbg !3483
  store i64 %3713, i64* %21, align 8, !dbg !3483
  br label %originalBB508

originalBB512alteredBB:                           ; preds = %originalBB512, %2470
  %3714 = load i8, i8* %31, align 1, !dbg !3489
  %3715 = zext i8 %3714 to i32, !dbg !3489
  %_513 = shl i32 %3715, 7
  %_514 = sub i32 %3715, 7
  %gen515 = mul i32 %_514, 7
  %_516 = sub i32 0, %3715
  %gen517 = add i32 %_516, 7
  %_518 = sub i32 0, %3715
  %gen519 = add i32 %_518, 7
  %_520 = sub i32 0, %3715
  %gen521 = add i32 %_520, 7
  %3716 = and i32 %3715, 7, !dbg !3490
  %_522 = shl i32 48, %3716
  %_523 = sub i32 48, %3716
  %gen524 = mul i32 %_523, %3716
  %_525 = sub i32 0, 48
  %gen526 = add i32 %_525, %3716
  %3717 = add nsw i32 48, %3716, !dbg !3491
  %3718 = trunc i32 %3717 to i8, !dbg !3492
  store i8 %3718, i8* %31, align 1, !dbg !3493
  br label %originalBB512

originalBB530alteredBB:                           ; preds = %originalBB530, %2500
  %3719 = load i8*, i8** %11, align 8, !dbg !3500
  %3720 = load i64, i64* %21, align 8, !dbg !3500
  %3721 = getelementptr inbounds i8, i8* %3719, i64 %3720, !dbg !3500
  store i8 92, i8* %3721, align 1, !dbg !3500
  br label %originalBB530

originalBB534alteredBB:                           ; preds = %originalBB534, %2525
  %3722 = load i64, i64* %42, align 8, !dbg !3506
  %3723 = load i64, i64* %20, align 8, !dbg !3508
  %_535 = sub i64 %3723, 1
  %gen536 = mul i64 %_535, 1
  %_537 = shl i64 %3723, 1
  %_538 = sub i64 %3723, 1
  %gen539 = mul i64 %_538, 1
  %_540 = sub i64 0, %3723
  %gen541 = add i64 %_540, 1
  %3724 = add i64 %3723, 1, !dbg !3509
  %3725 = icmp ule i64 %3722, %3724, !dbg !3510
  br label %originalBB534

originalBB545alteredBB:                           ; preds = %originalBB545, %2548
  %3726 = load i8, i8* %28, align 1, !dbg !3514
  %3727 = trunc i8 %3726 to i1, !dbg !3514
  br label %originalBB545

originalBB549alteredBB:                           ; preds = %originalBB549, %2579
  %3728 = load i64, i64* %21, align 8, !dbg !3523
  %_550 = sub i64 %3728, 1
  %gen551 = mul i64 %_550, 1
  %_552 = sub i64 0, %3728
  %gen553 = add i64 %_552, 1
  %_554 = sub i64 0, %3728
  %gen555 = add i64 %_554, 1
  %_556 = shl i64 %3728, 1
  %_557 = sub i64 %3728, 1
  %gen558 = mul i64 %_557, 1
  %3729 = add i64 %3728, 1, !dbg !3523
  store i64 %3729, i64* %21, align 8, !dbg !3523
  br label %originalBB549

originalBB562alteredBB:                           ; preds = %originalBB562, %2599
  %3730 = load i64, i64* %21, align 8, !dbg !3524
  %3731 = load i64, i64* %12, align 8, !dbg !3524
  %3732 = icmp ult i64 %3730, %3731, !dbg !3524
  br label %originalBB562

originalBB566alteredBB:                           ; preds = %originalBB566, %2626
  store i8 0, i8* %28, align 1, !dbg !3518
  br label %originalBB566

originalBB570alteredBB:                           ; preds = %originalBB570, %2663
  br label %originalBB570

originalBB574alteredBB:                           ; preds = %originalBB574, %2681
  %3733 = load i8, i8* %25, align 1, !dbg !3542
  %3734 = trunc i8 %3733 to i1, !dbg !3542
  br label %originalBB574

originalBB578alteredBB:                           ; preds = %originalBB578, %2703
  %3735 = load i8, i8* %27, align 1, !dbg !3548
  %3736 = trunc i8 %3735 to i1, !dbg !3548
  br label %originalBB578

originalBB582alteredBB:                           ; preds = %originalBB582, %2722
  %3737 = load i32*, i32** %17, align 8, !dbg !3550
  %3738 = icmp ne i32* %3737, null, !dbg !3550
  br label %originalBB582

originalBB586alteredBB:                           ; preds = %originalBB586, %2741
  %3739 = load i32*, i32** %17, align 8, !dbg !3552
  %3740 = load i8, i8* %31, align 1, !dbg !3553
  %3741 = zext i8 %3740 to i64, !dbg !3553
  %_587 = sub i64 0, %3741
  %gen588 = add i64 %_587, 32
  %_589 = sub i64 0, %3741
  %gen590 = add i64 %_589, 32
  %_591 = sub i64 %3741, 32
  %gen592 = mul i64 %_591, 32
  %_593 = sub i64 0, %3741
  %gen594 = add i64 %_593, 32
  %_595 = shl i64 %3741, 32
  %_596 = sub i64 %3741, 32
  %gen597 = mul i64 %_596, 32
  %_598 = shl i64 %3741, 32
  %3742 = udiv i64 %3741, 32, !dbg !3554
  %3743 = getelementptr inbounds i32, i32* %3739, i64 %3742, !dbg !3552
  %3744 = load i32, i32* %3743, align 4, !dbg !3552
  %3745 = load i8, i8* %31, align 1, !dbg !3555
  %3746 = zext i8 %3745 to i64, !dbg !3555
  %_599 = sub i64 0, %3746
  %gen600 = add i64 %_599, 32
  %_601 = shl i64 %3746, 32
  %_602 = sub i64 %3746, 32
  %gen603 = mul i64 %_602, 32
  %_604 = sub i64 0, %3746
  %gen605 = add i64 %_604, 32
  %_606 = sub i64 %3746, 32
  %gen607 = mul i64 %_606, 32
  %_608 = shl i64 %3746, 32
  %3747 = urem i64 %3746, 32, !dbg !3556
  %3748 = trunc i64 %3747 to i32, !dbg !3557
  %_609 = shl i32 %3744, %3748
  %_610 = sub i32 0, %3744
  %gen611 = add i32 %_610, %3748
  %3749 = lshr i32 %3744, %3748, !dbg !3557
  %3750 = and i32 %3749, 1, !dbg !3558
  %3751 = icmp ne i32 %3750, 0, !dbg !3558
  br label %originalBB586

originalBB615alteredBB:                           ; preds = %originalBB615, %2771
  %3752 = load i8, i8* %33, align 1, !dbg !3560
  %3753 = trunc i8 %3752 to i1, !dbg !3560
  br label %originalBB615

originalBB619alteredBB:                           ; preds = %originalBB619, %2791
  br label %originalBB619

originalBB623alteredBB:                           ; preds = %originalBB623, %2808
  br label %originalBB623

originalBB627alteredBB:                           ; preds = %originalBB627, %2825
  %3754 = load i8, i8* %27, align 1, !dbg !3566
  %3755 = trunc i8 %3754 to i1, !dbg !3566
  br label %originalBB627

originalBB631alteredBB:                           ; preds = %originalBB631, %2852
  %3756 = load i64, i64* %21, align 8, !dbg !3574
  %3757 = load i64, i64* %12, align 8, !dbg !3574
  %3758 = icmp ult i64 %3756, %3757, !dbg !3574
  br label %originalBB631

originalBB635alteredBB:                           ; preds = %originalBB635, %2884
  %3759 = load i8*, i8** %11, align 8, !dbg !3578
  %3760 = load i64, i64* %21, align 8, !dbg !3578
  %3761 = getelementptr inbounds i8, i8* %3759, i64 %3760, !dbg !3578
  store i8 36, i8* %3761, align 1, !dbg !3578
  br label %originalBB635

originalBB639alteredBB:                           ; preds = %originalBB639, %2916
  %3762 = load i64, i64* %21, align 8, !dbg !3585
  %_640 = shl i64 %3762, 1
  %_641 = shl i64 %3762, 1
  %_642 = sub i64 0, %3762
  %gen643 = add i64 %_642, 1
  %_644 = shl i64 %3762, 1
  %_645 = sub i64 %3762, 1
  %gen646 = mul i64 %_645, 1
  %_647 = sub i64 0, %3762
  %gen648 = add i64 %_647, 1
  %_649 = sub i64 0, %3762
  %gen650 = add i64 %_649, 1
  %3763 = add i64 %3762, 1, !dbg !3585
  store i64 %3763, i64* %21, align 8, !dbg !3585
  br label %originalBB639

originalBB654alteredBB:                           ; preds = %originalBB654, %2945
  %3764 = load i64, i64* %21, align 8, !dbg !3589
  %_655 = shl i64 %3764, 1
  %_656 = sub i64 %3764, 1
  %gen657 = mul i64 %_656, 1
  %_658 = sub i64 %3764, 1
  %gen659 = mul i64 %_658, 1
  %_660 = sub i64 0, %3764
  %gen661 = add i64 %_660, 1
  %_662 = sub i64 0, %3764
  %gen663 = add i64 %_662, 1
  %3765 = add i64 %3764, 1, !dbg !3589
  store i64 %3765, i64* %21, align 8, !dbg !3589
  br label %originalBB654

originalBB667alteredBB:                           ; preds = %originalBB667, %2964
  br label %originalBB667

originalBB671alteredBB:                           ; preds = %originalBB671, %2990
  %3766 = load i64, i64* %21, align 8, !dbg !3599
  %3767 = load i64, i64* %12, align 8, !dbg !3599
  %3768 = icmp ult i64 %3766, %3767, !dbg !3599
  br label %originalBB671

originalBB675alteredBB:                           ; preds = %originalBB675, %3010
  %3769 = load i8*, i8** %11, align 8, !dbg !3599
  %3770 = load i64, i64* %21, align 8, !dbg !3599
  %3771 = getelementptr inbounds i8, i8* %3769, i64 %3770, !dbg !3599
  store i8 39, i8* %3771, align 1, !dbg !3599
  br label %originalBB675

originalBB679alteredBB:                           ; preds = %originalBB679, %3030
  %3772 = load i64, i64* %21, align 8, !dbg !3602
  %_680 = sub i64 0, %3772
  %gen681 = add i64 %_680, 1
  %_682 = shl i64 %3772, 1
  %_683 = shl i64 %3772, 1
  %3773 = add i64 %3772, 1, !dbg !3602
  store i64 %3773, i64* %21, align 8, !dbg !3602
  br label %originalBB679

originalBB687alteredBB:                           ; preds = %originalBB687, %3050
  %3774 = load i64, i64* %21, align 8, !dbg !3603
  %3775 = load i64, i64* %12, align 8, !dbg !3603
  %3776 = icmp ult i64 %3774, %3775, !dbg !3603
  br label %originalBB687

originalBB691alteredBB:                           ; preds = %originalBB691, %3070
  %3777 = load i8*, i8** %11, align 8, !dbg !3603
  %3778 = load i64, i64* %21, align 8, !dbg !3603
  %3779 = getelementptr inbounds i8, i8* %3777, i64 %3778, !dbg !3603
  store i8 39, i8* %3779, align 1, !dbg !3603
  br label %originalBB691

originalBB695alteredBB:                           ; preds = %originalBB695, %3094
  br label %originalBB695

originalBB699alteredBB:                           ; preds = %originalBB699, %3111
  br label %originalBB699

originalBB703alteredBB:                           ; preds = %originalBB703, %3128
  %3780 = load i64, i64* %21, align 8, !dbg !3608
  %3781 = load i64, i64* %12, align 8, !dbg !3608
  %3782 = icmp ult i64 %3780, %3781, !dbg !3608
  br label %originalBB703

originalBB707alteredBB:                           ; preds = %originalBB707, %3148
  %3783 = load i8, i8* %31, align 1, !dbg !3608
  %3784 = load i8*, i8** %11, align 8, !dbg !3608
  %3785 = load i64, i64* %21, align 8, !dbg !3608
  %3786 = getelementptr inbounds i8, i8* %3784, i64 %3785, !dbg !3608
  store i8 %3783, i8* %3786, align 1, !dbg !3608
  br label %originalBB707

originalBB711alteredBB:                           ; preds = %originalBB711, %3177
  %3787 = load i64, i64* %20, align 8, !dbg !3618
  %_712 = sub i64 0, %3787
  %gen713 = add i64 %_712, 1
  %_714 = sub i64 0, %3787
  %gen715 = add i64 %_714, 1
  %_716 = sub i64 0, %3787
  %gen717 = add i64 %_716, 1
  %_718 = shl i64 %3787, 1
  %_719 = sub i64 %3787, 1
  %gen720 = mul i64 %_719, 1
  %_721 = shl i64 %3787, 1
  %3788 = add i64 %3787, 1, !dbg !3618
  store i64 %3788, i64* %20, align 8, !dbg !3618
  br label %originalBB711

originalBB725alteredBB:                           ; preds = %originalBB725, %3196
  %3789 = load i64, i64* %21, align 8, !dbg !3622
  %3790 = icmp eq i64 %3789, 0, !dbg !3624
  br label %originalBB725

originalBB729alteredBB:                           ; preds = %originalBB729, %3228
  %3791 = load i8, i8* %29, align 1, !dbg !3638
  %3792 = trunc i8 %3791 to i1, !dbg !3638
  br label %originalBB729

originalBB733alteredBB:                           ; preds = %originalBB733, %3247
  %3793 = load i8, i8* %30, align 1, !dbg !3640
  %3794 = trunc i8 %3793 to i1, !dbg !3640
  br label %originalBB733

originalBB737alteredBB:                           ; preds = %originalBB737, %3286
  %3795 = load i8*, i8** %23, align 8, !dbg !3665
  %3796 = icmp ne i8* %3795, null, !dbg !3665
  br label %originalBB737

originalBB741alteredBB:                           ; preds = %originalBB741, %3308
  br label %originalBB741

originalBB745alteredBB:                           ; preds = %originalBB745, %3325
  %3797 = load i8*, i8** %23, align 8, !dbg !3671
  %3798 = load i8, i8* %3797, align 1, !dbg !3674
  %3799 = icmp ne i8 %3798, 0, !dbg !3675
  br label %originalBB745

originalBB749alteredBB:                           ; preds = %originalBB749, %3345
  br label %originalBB749

originalBB753alteredBB:                           ; preds = %originalBB753, %3366
  %3800 = load i8*, i8** %23, align 8, !dbg !3677
  %3801 = load i8, i8* %3800, align 1, !dbg !3677
  %3802 = load i8*, i8** %11, align 8, !dbg !3677
  %3803 = load i64, i64* %21, align 8, !dbg !3677
  %3804 = getelementptr inbounds i8, i8* %3802, i64 %3803, !dbg !3677
  store i8 %3801, i8* %3804, align 1, !dbg !3677
  br label %originalBB753

originalBB757alteredBB:                           ; preds = %originalBB757, %3388
  %3805 = load i64, i64* %21, align 8, !dbg !3680
  %3806 = add i64 %3805, 1, !dbg !3680
  store i64 %3806, i64* %21, align 8, !dbg !3680
  br label %originalBB757

originalBB761alteredBB:                           ; preds = %originalBB761, %3412
  %3807 = load i64, i64* %21, align 8, !dbg !3685
  %3808 = load i64, i64* %12, align 8, !dbg !3687
  %3809 = icmp ult i64 %3807, %3808, !dbg !3688
  br label %originalBB761

originalBB765alteredBB:                           ; preds = %originalBB765, %3436
  %3810 = load i64, i64* %21, align 8, !dbg !3693
  store i64 %3810, i64* %10, align 8, !dbg !3694
  br label %originalBB765

originalBB769alteredBB:                           ; preds = %originalBB769, %3454
  %3811 = load i32, i32* %15, align 4, !dbg !3697
  %3812 = icmp eq i32 %3811, 2, !dbg !3699
  br label %originalBB769

originalBB773alteredBB:                           ; preds = %originalBB773, %3473
  %3813 = load i8, i8* %25, align 1, !dbg !3701
  %3814 = trunc i8 %3813 to i1, !dbg !3701
  br label %originalBB773

originalBB777alteredBB:                           ; preds = %originalBB777, %3504
  %3815 = load i64, i64* %10, align 8, !dbg !3716
  br label %originalBB777
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !3753 {
  %3 = load i32, i32* @x.65
  %4 = load i32, i32* @y.66
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3756, metadata !DIExpression()), !dbg !3757
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3758, metadata !DIExpression()), !dbg !3759
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3760, metadata !DIExpression()), !dbg !3761
  %16 = load i8*, i8** %12, align 8, !dbg !3762
  %17 = call i8* @gettext(i8* %16) #10, !dbg !3762
  store i8* %17, i8** %14, align 8, !dbg !3761
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3763, metadata !DIExpression()), !dbg !3764
  %18 = load i8*, i8** %14, align 8, !dbg !3765
  %19 = load i8*, i8** %12, align 8, !dbg !3767
  %20 = icmp ne i8* %18, %19, !dbg !3768
  %21 = load i32, i32* @x.65
  %22 = load i32, i32* @y.66
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !3769

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.65
  %31 = load i32, i32* @y.66
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !3770
  store i8* %38, i8** %11, align 8, !dbg !3771
  %39 = load i32, i32* @x.65
  %40 = load i32, i32* @y.66
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %109, !dbg !3771

47:                                               ; preds = %originalBBpart2
  %48 = call i8* @locale_charset(), !dbg !3772
  store i8* %48, i8** %15, align 8, !dbg !3773
  %49 = load i8*, i8** %15, align 8, !dbg !3774
  %50 = call i32 @c_strcasecmp(i8* %49, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.123, i64 0, i64 0)) #13, !dbg !3774
  %51 = icmp eq i32 %50, 0, !dbg !3774
  br i1 %51, label %52, label %76, !dbg !3776

52:                                               ; preds = %47
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  %61 = load i8*, i8** %12, align 8, !dbg !3777
  %62 = getelementptr inbounds i8, i8* %61, i64 0, !dbg !3777
  %63 = load i8, i8* %62, align 1, !dbg !3777
  %64 = sext i8 %63 to i32, !dbg !3777
  %65 = icmp eq i32 %64, 96, !dbg !3778
  %66 = zext i1 %65 to i64, !dbg !3777
  %67 = select i1 %65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.124, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.125, i64 0, i64 0), !dbg !3777
  store i8* %67, i8** %11, align 8, !dbg !3779
  %68 = load i32, i32* @x.65
  %69 = load i32, i32* @y.66
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %109, !dbg !3779

76:                                               ; preds = %47
  %77 = load i8*, i8** %15, align 8, !dbg !3780
  %78 = call i32 @c_strcasecmp(i8* %77, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.126, i64 0, i64 0)) #13, !dbg !3780
  %79 = icmp eq i32 %78, 0, !dbg !3780
  br i1 %79, label %80, label %104, !dbg !3782

80:                                               ; preds = %76
  %81 = load i32, i32* @x.65
  %82 = load i32, i32* @y.66
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %89 = load i8*, i8** %12, align 8, !dbg !3783
  %90 = getelementptr inbounds i8, i8* %89, i64 0, !dbg !3783
  %91 = load i8, i8* %90, align 1, !dbg !3783
  %92 = sext i8 %91 to i32, !dbg !3783
  %93 = icmp eq i32 %92, 96, !dbg !3784
  %94 = zext i1 %93 to i64, !dbg !3783
  %95 = select i1 %93, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.127, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.128, i64 0, i64 0), !dbg !3783
  store i8* %95, i8** %11, align 8, !dbg !3785
  %96 = load i32, i32* @x.65
  %97 = load i32, i32* @y.66
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %109, !dbg !3785

104:                                              ; preds = %76
  %105 = load i32, i32* %13, align 4, !dbg !3786
  %106 = icmp eq i32 %105, 9, !dbg !3787
  %107 = zext i1 %106 to i64, !dbg !3786
  %108 = select i1 %106, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.120, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), !dbg !3786
  store i8* %108, i8** %11, align 8, !dbg !3788
  br label %109, !dbg !3788

109:                                              ; preds = %104, %originalBBpart212, %originalBBpart28, %originalBBpart24
  %110 = load i8*, i8** %11, align 8, !dbg !3789
  ret i8* %110, !dbg !3789

originalBBalteredBB:                              ; preds = %originalBB, %2
  %111 = alloca i8*, align 8
  %112 = alloca i8*, align 8
  %113 = alloca i32, align 4
  %114 = alloca i8*, align 8
  %115 = alloca i8*, align 8
  store i8* %0, i8** %112, align 8
  call void @llvm.dbg.declare(metadata i8** %112, metadata !3790, metadata !DIExpression()), !dbg !3757
  store i32 %1, i32* %113, align 4
  call void @llvm.dbg.declare(metadata i32* %113, metadata !3822, metadata !DIExpression()), !dbg !3759
  call void @llvm.dbg.declare(metadata i8** %114, metadata !3823, metadata !DIExpression()), !dbg !3761
  %116 = load i8*, i8** %112, align 8, !dbg !3762
  %117 = call i8* @gettext(i8* %116) #10, !dbg !3762
  store i8* %117, i8** %114, align 8, !dbg !3761
  call void @llvm.dbg.declare(metadata i8** %115, metadata !3824, metadata !DIExpression()), !dbg !3764
  %118 = load i8*, i8** %114, align 8, !dbg !3765
  %119 = load i8*, i8** %112, align 8, !dbg !3767
  %120 = icmp ne i8* %118, %119, !dbg !3768
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %121 = load i8*, i8** %14, align 8, !dbg !3770
  store i8* %121, i8** %11, align 8, !dbg !3771
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  %122 = load i8*, i8** %12, align 8, !dbg !3777
  %123 = getelementptr inbounds i8, i8* %122, i64 0, !dbg !3777
  %124 = load i8, i8* %123, align 1, !dbg !3777
  %125 = sext i8 %124 to i32, !dbg !3777
  %126 = icmp eq i32 %125, 96, !dbg !3778
  %127 = zext i1 %126 to i64, !dbg !3777
  %128 = select i1 %126, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.124, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.125, i64 0, i64 0), !dbg !3777
  store i8* %128, i8** %11, align 8, !dbg !3779
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  %129 = load i8*, i8** %12, align 8, !dbg !3783
  %130 = getelementptr inbounds i8, i8* %129, i64 0, !dbg !3783
  %131 = load i8, i8* %130, align 1, !dbg !3783
  %132 = sext i8 %131 to i32, !dbg !3783
  %133 = icmp eq i32 %132, 96, !dbg !3784
  %134 = zext i1 %133 to i64, !dbg !3783
  %135 = select i1 %133, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.127, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.128, i64 0, i64 0), !dbg !3783
  store i8* %135, i8** %11, align 8, !dbg !3785
  br label %originalBB10
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !3825 {
  %3 = load i32, i32* @x.67
  %4 = load i32, i32* @y.68
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3828, metadata !DIExpression()), !dbg !3829
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3830, metadata !DIExpression()), !dbg !3831
  %13 = load i8*, i8** %11, align 8, !dbg !3832
  %14 = load i8, i8* %12, align 1, !dbg !3833
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !3834
  %16 = load i32, i32* @x.67
  %17 = load i32, i32* @y.68
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !3835

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3836, metadata !DIExpression()), !dbg !3829
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !3868, metadata !DIExpression()), !dbg !3831
  %26 = load i8*, i8** %24, align 8, !dbg !3832
  %27 = load i8, i8* %25, align 1, !dbg !3833
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !3834
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !3869 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !3870, metadata !DIExpression()), !dbg !3871
  %3 = load i8*, i8** %2, align 8, !dbg !3872
  %4 = call i8* @quotearg_char(i8* %3, i8 signext 58), !dbg !3873
  ret i8* %4, !dbg !3874
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_style_colon(i32, i32, i8*) #4 !dbg !3875 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca %struct.quoting_options, align 8
  %8 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !3878, metadata !DIExpression()), !dbg !3879
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !3880, metadata !DIExpression()), !dbg !3881
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !3882, metadata !DIExpression()), !dbg !3883
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %7, metadata !3884, metadata !DIExpression()), !dbg !3885
  %9 = load i32, i32* %5, align 4, !dbg !3886
  call void @quoting_options_from_style(%struct.quoting_options* sret %8, i32 %9), !dbg !3887
  %10 = bitcast %struct.quoting_options* %7 to i8*, !dbg !3887
  %11 = bitcast %struct.quoting_options* %8 to i8*, !dbg !3887
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 56, i1 false), !dbg !3887
  %12 = call i32 @set_char_quoting(%struct.quoting_options* %7, i8 signext 58, i32 1), !dbg !3888
  %13 = load i32, i32* %4, align 4, !dbg !3889
  %14 = load i8*, i8** %6, align 8, !dbg !3890
  %15 = call i8* @quotearg_n_options(i32 %13, i8* %14, i64 -1, %struct.quoting_options* %7), !dbg !3891
  ret i8* %15, !dbg !3892
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret, i32) #4 !dbg !3893 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !3896, metadata !DIExpression()), !dbg !3897
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %0, metadata !3898, metadata !DIExpression()), !dbg !3899
  %4 = bitcast %struct.quoting_options* %0 to i8*, !dbg !3899
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 56, i1 false), !dbg !3899
  %5 = load i32, i32* %3, align 4, !dbg !3900
  %6 = icmp eq i32 %5, 10, !dbg !3902
  br i1 %6, label %7, label %8, !dbg !3903

7:                                                ; preds = %2
  call void @abort() #12, !dbg !3904
  unreachable, !dbg !3904

8:                                                ; preds = %2
  %9 = load i32, i32* @x.73
  %10 = load i32, i32* @y.74
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load i32, i32* %3, align 4, !dbg !3905
  %18 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !3906
  store i32 %17, i32* %18, align 8, !dbg !3907
  %19 = load i32, i32* @x.73
  %20 = load i32, i32* @y.74
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !3908

originalBBalteredBB:                              ; preds = %originalBB, %8
  %27 = load i32, i32* %3, align 4, !dbg !3905
  %28 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !3906
  store i32 %27, i32* %28, align 8, !dbg !3907
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !3909 {
  %4 = load i32, i32* @x.75
  %5 = load i32, i32* @y.76
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3912, metadata !DIExpression()), !dbg !3913
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3914, metadata !DIExpression()), !dbg !3915
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3916, metadata !DIExpression()), !dbg !3917
  %15 = load i32, i32* %12, align 4, !dbg !3918
  %16 = load i8*, i8** %13, align 8, !dbg !3919
  %17 = load i64, i64* %14, align 8, !dbg !3920
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !3921
  %19 = load i32, i32* @x.75
  %20 = load i32, i32* @y.76
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !3922

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3923, metadata !DIExpression()), !dbg !3913
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !3955, metadata !DIExpression()), !dbg !3915
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3956, metadata !DIExpression()), !dbg !3917
  %30 = load i32, i32* %27, align 4, !dbg !3918
  %31 = load i8*, i8** %28, align 8, !dbg !3919
  %32 = load i64, i64* %29, align 8, !dbg !3920
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !3921
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !3957 {
  %3 = load i32, i32* @x.77
  %4 = load i32, i32* @y.78
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3960, metadata !DIExpression()), !dbg !3961
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3962, metadata !DIExpression()), !dbg !3963
  %13 = load i32, i32* %11, align 4, !dbg !3964
  %14 = load i8*, i8** %12, align 8, !dbg !3965
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !3966
  %16 = load i32, i32* @x.77
  %17 = load i32, i32* @y.78
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !3967

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !3968, metadata !DIExpression()), !dbg !3961
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !4000, metadata !DIExpression()), !dbg !3963
  %26 = load i32, i32* %24, align 4, !dbg !3964
  %27 = load i8*, i8** %25, align 8, !dbg !3965
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !3966
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !4001 {
  %2 = load i32, i32* @x.79
  %3 = load i32, i32* @y.80
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !4004, metadata !DIExpression()), !dbg !4005
  %11 = load i8*, i8** %10, align 8, !dbg !4006
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !4007
  %13 = load i32, i32* @x.79
  %14 = load i32, i32* @y.80
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !4008

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !4009, metadata !DIExpression()), !dbg !4005
  %22 = load i8*, i8** %21, align 8, !dbg !4006
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !4007
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !4041 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !4045, metadata !DIExpression()), !dbg !4046
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4047, metadata !DIExpression()), !dbg !4048
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !4049, metadata !DIExpression()), !dbg !4050
  %7 = load i32, i32* %4, align 4, !dbg !4051
  %8 = load i8*, i8** %5, align 8, !dbg !4052
  %9 = load i64, i64* %6, align 8, !dbg !4053
  %10 = call i32 @setlocale_null_unlocked(i32 %7, i8* %8, i64 %9), !dbg !4054
  ret i32 %10, !dbg !4055
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !4056 {
  %4 = load i32, i32* @x.83
  %5 = load i32, i32* @y.84
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4057, metadata !DIExpression()), !dbg !4058
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4059, metadata !DIExpression()), !dbg !4060
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !4061, metadata !DIExpression()), !dbg !4062
  call void @llvm.dbg.declare(metadata i8** %16, metadata !4063, metadata !DIExpression()), !dbg !4064
  %18 = load i32, i32* %13, align 4, !dbg !4065
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !4066
  store i8* %19, i8** %16, align 8, !dbg !4064
  %20 = load i8*, i8** %16, align 8, !dbg !4067
  %21 = icmp eq i8* %20, null, !dbg !4069
  %22 = load i32, i32* @x.83
  %23 = load i32, i32* @y.84
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %53, !dbg !4070

30:                                               ; preds = %originalBBpart2
  %31 = load i64, i64* %15, align 8, !dbg !4071
  %32 = icmp ugt i64 %31, 0, !dbg !4074
  br i1 %32, label %33, label %52, !dbg !4075

33:                                               ; preds = %30
  %34 = load i32, i32* @x.83
  %35 = load i32, i32* @y.84
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %14, align 8, !dbg !4076
  %43 = getelementptr inbounds i8, i8* %42, i64 0, !dbg !4076
  store i8 0, i8* %43, align 1, !dbg !4077
  %44 = load i32, i32* @x.83
  %45 = load i32, i32* @y.84
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %52, !dbg !4076

52:                                               ; preds = %originalBBpart24, %30
  store i32 22, i32* %12, align 4, !dbg !4078
  br label %93, !dbg !4078

53:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !4079, metadata !DIExpression()), !dbg !4081
  %54 = load i8*, i8** %16, align 8, !dbg !4082
  %55 = call i64 @strlen(i8* %54) #13, !dbg !4083
  store i64 %55, i64* %17, align 8, !dbg !4081
  %56 = load i64, i64* %17, align 8, !dbg !4084
  %57 = load i64, i64* %15, align 8, !dbg !4086
  %58 = icmp ult i64 %56, %57, !dbg !4087
  br i1 %58, label %59, label %64, !dbg !4088

59:                                               ; preds = %53
  %60 = load i8*, i8** %14, align 8, !dbg !4089
  %61 = load i8*, i8** %16, align 8, !dbg !4091
  %62 = load i64, i64* %17, align 8, !dbg !4092
  %63 = add i64 %62, 1, !dbg !4093
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %61, i64 %63, i1 false), !dbg !4094
  store i32 0, i32* %12, align 4, !dbg !4095
  br label %93, !dbg !4095

64:                                               ; preds = %53
  %65 = load i32, i32* @x.83
  %66 = load i32, i32* @y.84
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %64, %originalBB6alteredBB
  %73 = load i64, i64* %15, align 8, !dbg !4096
  %74 = icmp ugt i64 %73, 0, !dbg !4099
  %75 = load i32, i32* @x.83
  %76 = load i32, i32* @y.84
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %74, label %83, label %92, !dbg !4100

83:                                               ; preds = %originalBBpart28
  %84 = load i8*, i8** %14, align 8, !dbg !4101
  %85 = load i8*, i8** %16, align 8, !dbg !4103
  %86 = load i64, i64* %15, align 8, !dbg !4104
  %87 = sub i64 %86, 1, !dbg !4105
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %85, i64 %87, i1 false), !dbg !4106
  %88 = load i8*, i8** %14, align 8, !dbg !4107
  %89 = load i64, i64* %15, align 8, !dbg !4108
  %90 = sub i64 %89, 1, !dbg !4109
  %91 = getelementptr inbounds i8, i8* %88, i64 %90, !dbg !4107
  store i8 0, i8* %91, align 1, !dbg !4110
  br label %92, !dbg !4111

92:                                               ; preds = %83, %originalBBpart28
  store i32 34, i32* %12, align 4, !dbg !4112
  br label %93, !dbg !4112

93:                                               ; preds = %92, %59, %52
  %94 = load i32, i32* %12, align 4, !dbg !4113
  ret i32 %94, !dbg !4113

originalBBalteredBB:                              ; preds = %originalBB, %3
  %95 = alloca i32, align 4
  %96 = alloca i32, align 4
  %97 = alloca i8*, align 8
  %98 = alloca i64, align 8
  %99 = alloca i8*, align 8
  %100 = alloca i64, align 8
  store i32 %0, i32* %96, align 4
  call void @llvm.dbg.declare(metadata i32* %96, metadata !4114, metadata !DIExpression()), !dbg !4058
  store i8* %1, i8** %97, align 8
  call void @llvm.dbg.declare(metadata i8** %97, metadata !4117, metadata !DIExpression()), !dbg !4060
  store i64 %2, i64* %98, align 8
  call void @llvm.dbg.declare(metadata i64* %98, metadata !4118, metadata !DIExpression()), !dbg !4062
  call void @llvm.dbg.declare(metadata i8** %99, metadata !4119, metadata !DIExpression()), !dbg !4064
  %101 = load i32, i32* %96, align 4, !dbg !4065
  %102 = call i8* @setlocale_null_androidfix(i32 %101), !dbg !4066
  store i8* %102, i8** %99, align 8, !dbg !4064
  %103 = load i8*, i8** %99, align 8, !dbg !4067
  %104 = icmp eq i8* %103, null, !dbg !4069
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %105 = load i8*, i8** %14, align 8, !dbg !4076
  %106 = getelementptr inbounds i8, i8* %105, i64 0, !dbg !4076
  store i8 0, i8* %106, align 1, !dbg !4077
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %64
  %107 = load i64, i64* %15, align 8, !dbg !4096
  %108 = icmp ugt i64 %107, 0, !dbg !4099
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !4120 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !4123, metadata !DIExpression()), !dbg !4124
  call void @llvm.dbg.declare(metadata i8** %3, metadata !4125, metadata !DIExpression()), !dbg !4126
  %4 = load i32, i32* %2, align 4, !dbg !4127
  %5 = call i8* @setlocale(i32 %4, i8* null) #10, !dbg !4128
  store i8* %5, i8** %3, align 8, !dbg !4126
  %6 = load i8*, i8** %3, align 8, !dbg !4129
  ret i8* %6, !dbg !4130
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !4131 {
  %7 = load i32, i32* @x.87
  %8 = load i32, i32* @y.88
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !4185, metadata !DIExpression()), !dbg !4186
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !4187, metadata !DIExpression()), !dbg !4188
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !4189, metadata !DIExpression()), !dbg !4190
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !4191, metadata !DIExpression()), !dbg !4192
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !4193, metadata !DIExpression()), !dbg !4194
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !4195, metadata !DIExpression()), !dbg !4196
  %21 = load i8*, i8** %16, align 8, !dbg !4197
  %22 = icmp ne i8* %21, null, !dbg !4197
  %23 = load i32, i32* @x.87
  %24 = load i32, i32* @y.88
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %37, !dbg !4199

31:                                               ; preds = %originalBBpart2
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4200
  %33 = load i8*, i8** %16, align 8, !dbg !4201
  %34 = load i8*, i8** %17, align 8, !dbg !4202
  %35 = load i8*, i8** %18, align 8, !dbg !4203
  %36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137, i64 0, i64 0), i8* %33, i8* %34, i8* %35), !dbg !4204
  br label %42, !dbg !4204

37:                                               ; preds = %originalBBpart2
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4205
  %39 = load i8*, i8** %17, align 8, !dbg !4206
  %40 = load i8*, i8** %18, align 8, !dbg !4207
  %41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.138, i64 0, i64 0), i8* %39, i8* %40), !dbg !4208
  br label %42

42:                                               ; preds = %37, %31
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4209
  %44 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.139, i64 0, i64 0)) #10, !dbg !4210
  %45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %44, i32 2020), !dbg !4211
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4212
  %47 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.140, i64 0, i64 0), %struct._IO_FILE* %46), !dbg !4212
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4213
  %49 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.141, i64 0, i64 0)) #10, !dbg !4214
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* %49, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.142, i64 0, i64 0)), !dbg !4215
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4216
  %52 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.140, i64 0, i64 0), %struct._IO_FILE* %51), !dbg !4216
  %53 = load i64, i64* %20, align 8, !dbg !4217
  switch i64 %53, label %242 [
    i64 0, label %54
    i64 1, label %55
    i64 2, label %62
    i64 3, label %72
    i64 4, label %85
    i64 5, label %117
    i64 6, label %136
    i64 7, label %158
    i64 8, label %183
    i64 9, label %211
  ], !dbg !4218

54:                                               ; preds = %42
  br label %273, !dbg !4219

55:                                               ; preds = %42
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4221
  %57 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.143, i64 0, i64 0)) #10, !dbg !4222
  %58 = load i8**, i8*** %19, align 8, !dbg !4223
  %59 = getelementptr inbounds i8*, i8** %58, i64 0, !dbg !4223
  %60 = load i8*, i8** %59, align 8, !dbg !4223
  %61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* %57, i8* %60), !dbg !4224
  br label %273, !dbg !4225

62:                                               ; preds = %42
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4226
  %64 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.144, i64 0, i64 0)) #10, !dbg !4227
  %65 = load i8**, i8*** %19, align 8, !dbg !4228
  %66 = getelementptr inbounds i8*, i8** %65, i64 0, !dbg !4228
  %67 = load i8*, i8** %66, align 8, !dbg !4228
  %68 = load i8**, i8*** %19, align 8, !dbg !4229
  %69 = getelementptr inbounds i8*, i8** %68, i64 1, !dbg !4229
  %70 = load i8*, i8** %69, align 8, !dbg !4229
  %71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* %64, i8* %67, i8* %70), !dbg !4230
  br label %273, !dbg !4231

72:                                               ; preds = %42
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4232
  %74 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.145, i64 0, i64 0)) #10, !dbg !4233
  %75 = load i8**, i8*** %19, align 8, !dbg !4234
  %76 = getelementptr inbounds i8*, i8** %75, i64 0, !dbg !4234
  %77 = load i8*, i8** %76, align 8, !dbg !4234
  %78 = load i8**, i8*** %19, align 8, !dbg !4235
  %79 = getelementptr inbounds i8*, i8** %78, i64 1, !dbg !4235
  %80 = load i8*, i8** %79, align 8, !dbg !4235
  %81 = load i8**, i8*** %19, align 8, !dbg !4236
  %82 = getelementptr inbounds i8*, i8** %81, i64 2, !dbg !4236
  %83 = load i8*, i8** %82, align 8, !dbg !4236
  %84 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %73, i8* %74, i8* %77, i8* %80, i8* %83), !dbg !4237
  br label %273, !dbg !4238

85:                                               ; preds = %42
  %86 = load i32, i32* @x.87
  %87 = load i32, i32* @y.88
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %85, %originalBB1alteredBB
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4239
  %95 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.146, i64 0, i64 0)) #10, !dbg !4240
  %96 = load i8**, i8*** %19, align 8, !dbg !4241
  %97 = getelementptr inbounds i8*, i8** %96, i64 0, !dbg !4241
  %98 = load i8*, i8** %97, align 8, !dbg !4241
  %99 = load i8**, i8*** %19, align 8, !dbg !4242
  %100 = getelementptr inbounds i8*, i8** %99, i64 1, !dbg !4242
  %101 = load i8*, i8** %100, align 8, !dbg !4242
  %102 = load i8**, i8*** %19, align 8, !dbg !4243
  %103 = getelementptr inbounds i8*, i8** %102, i64 2, !dbg !4243
  %104 = load i8*, i8** %103, align 8, !dbg !4243
  %105 = load i8**, i8*** %19, align 8, !dbg !4244
  %106 = getelementptr inbounds i8*, i8** %105, i64 3, !dbg !4244
  %107 = load i8*, i8** %106, align 8, !dbg !4244
  %108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %94, i8* %95, i8* %98, i8* %101, i8* %104, i8* %107), !dbg !4245
  %109 = load i32, i32* @x.87
  %110 = load i32, i32* @y.88
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %273, !dbg !4246

117:                                              ; preds = %42
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4247
  %119 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.147, i64 0, i64 0)) #10, !dbg !4248
  %120 = load i8**, i8*** %19, align 8, !dbg !4249
  %121 = getelementptr inbounds i8*, i8** %120, i64 0, !dbg !4249
  %122 = load i8*, i8** %121, align 8, !dbg !4249
  %123 = load i8**, i8*** %19, align 8, !dbg !4250
  %124 = getelementptr inbounds i8*, i8** %123, i64 1, !dbg !4250
  %125 = load i8*, i8** %124, align 8, !dbg !4250
  %126 = load i8**, i8*** %19, align 8, !dbg !4251
  %127 = getelementptr inbounds i8*, i8** %126, i64 2, !dbg !4251
  %128 = load i8*, i8** %127, align 8, !dbg !4251
  %129 = load i8**, i8*** %19, align 8, !dbg !4252
  %130 = getelementptr inbounds i8*, i8** %129, i64 3, !dbg !4252
  %131 = load i8*, i8** %130, align 8, !dbg !4252
  %132 = load i8**, i8*** %19, align 8, !dbg !4253
  %133 = getelementptr inbounds i8*, i8** %132, i64 4, !dbg !4253
  %134 = load i8*, i8** %133, align 8, !dbg !4253
  %135 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %118, i8* %119, i8* %122, i8* %125, i8* %128, i8* %131, i8* %134), !dbg !4254
  br label %273, !dbg !4255

136:                                              ; preds = %42
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4256
  %138 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.148, i64 0, i64 0)) #10, !dbg !4257
  %139 = load i8**, i8*** %19, align 8, !dbg !4258
  %140 = getelementptr inbounds i8*, i8** %139, i64 0, !dbg !4258
  %141 = load i8*, i8** %140, align 8, !dbg !4258
  %142 = load i8**, i8*** %19, align 8, !dbg !4259
  %143 = getelementptr inbounds i8*, i8** %142, i64 1, !dbg !4259
  %144 = load i8*, i8** %143, align 8, !dbg !4259
  %145 = load i8**, i8*** %19, align 8, !dbg !4260
  %146 = getelementptr inbounds i8*, i8** %145, i64 2, !dbg !4260
  %147 = load i8*, i8** %146, align 8, !dbg !4260
  %148 = load i8**, i8*** %19, align 8, !dbg !4261
  %149 = getelementptr inbounds i8*, i8** %148, i64 3, !dbg !4261
  %150 = load i8*, i8** %149, align 8, !dbg !4261
  %151 = load i8**, i8*** %19, align 8, !dbg !4262
  %152 = getelementptr inbounds i8*, i8** %151, i64 4, !dbg !4262
  %153 = load i8*, i8** %152, align 8, !dbg !4262
  %154 = load i8**, i8*** %19, align 8, !dbg !4263
  %155 = getelementptr inbounds i8*, i8** %154, i64 5, !dbg !4263
  %156 = load i8*, i8** %155, align 8, !dbg !4263
  %157 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* %138, i8* %141, i8* %144, i8* %147, i8* %150, i8* %153, i8* %156), !dbg !4264
  br label %273, !dbg !4265

158:                                              ; preds = %42
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4266
  %160 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.149, i64 0, i64 0)) #10, !dbg !4267
  %161 = load i8**, i8*** %19, align 8, !dbg !4268
  %162 = getelementptr inbounds i8*, i8** %161, i64 0, !dbg !4268
  %163 = load i8*, i8** %162, align 8, !dbg !4268
  %164 = load i8**, i8*** %19, align 8, !dbg !4269
  %165 = getelementptr inbounds i8*, i8** %164, i64 1, !dbg !4269
  %166 = load i8*, i8** %165, align 8, !dbg !4269
  %167 = load i8**, i8*** %19, align 8, !dbg !4270
  %168 = getelementptr inbounds i8*, i8** %167, i64 2, !dbg !4270
  %169 = load i8*, i8** %168, align 8, !dbg !4270
  %170 = load i8**, i8*** %19, align 8, !dbg !4271
  %171 = getelementptr inbounds i8*, i8** %170, i64 3, !dbg !4271
  %172 = load i8*, i8** %171, align 8, !dbg !4271
  %173 = load i8**, i8*** %19, align 8, !dbg !4272
  %174 = getelementptr inbounds i8*, i8** %173, i64 4, !dbg !4272
  %175 = load i8*, i8** %174, align 8, !dbg !4272
  %176 = load i8**, i8*** %19, align 8, !dbg !4273
  %177 = getelementptr inbounds i8*, i8** %176, i64 5, !dbg !4273
  %178 = load i8*, i8** %177, align 8, !dbg !4273
  %179 = load i8**, i8*** %19, align 8, !dbg !4274
  %180 = getelementptr inbounds i8*, i8** %179, i64 6, !dbg !4274
  %181 = load i8*, i8** %180, align 8, !dbg !4274
  %182 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %159, i8* %160, i8* %163, i8* %166, i8* %169, i8* %172, i8* %175, i8* %178, i8* %181), !dbg !4275
  br label %273, !dbg !4276

183:                                              ; preds = %42
  %184 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4277
  %185 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.150, i64 0, i64 0)) #10, !dbg !4278
  %186 = load i8**, i8*** %19, align 8, !dbg !4279
  %187 = getelementptr inbounds i8*, i8** %186, i64 0, !dbg !4279
  %188 = load i8*, i8** %187, align 8, !dbg !4279
  %189 = load i8**, i8*** %19, align 8, !dbg !4280
  %190 = getelementptr inbounds i8*, i8** %189, i64 1, !dbg !4280
  %191 = load i8*, i8** %190, align 8, !dbg !4280
  %192 = load i8**, i8*** %19, align 8, !dbg !4281
  %193 = getelementptr inbounds i8*, i8** %192, i64 2, !dbg !4281
  %194 = load i8*, i8** %193, align 8, !dbg !4281
  %195 = load i8**, i8*** %19, align 8, !dbg !4282
  %196 = getelementptr inbounds i8*, i8** %195, i64 3, !dbg !4282
  %197 = load i8*, i8** %196, align 8, !dbg !4282
  %198 = load i8**, i8*** %19, align 8, !dbg !4283
  %199 = getelementptr inbounds i8*, i8** %198, i64 4, !dbg !4283
  %200 = load i8*, i8** %199, align 8, !dbg !4283
  %201 = load i8**, i8*** %19, align 8, !dbg !4284
  %202 = getelementptr inbounds i8*, i8** %201, i64 5, !dbg !4284
  %203 = load i8*, i8** %202, align 8, !dbg !4284
  %204 = load i8**, i8*** %19, align 8, !dbg !4285
  %205 = getelementptr inbounds i8*, i8** %204, i64 6, !dbg !4285
  %206 = load i8*, i8** %205, align 8, !dbg !4285
  %207 = load i8**, i8*** %19, align 8, !dbg !4286
  %208 = getelementptr inbounds i8*, i8** %207, i64 7, !dbg !4286
  %209 = load i8*, i8** %208, align 8, !dbg !4286
  %210 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %184, i8* %185, i8* %188, i8* %191, i8* %194, i8* %197, i8* %200, i8* %203, i8* %206, i8* %209), !dbg !4287
  br label %273, !dbg !4288

211:                                              ; preds = %42
  %212 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4289
  %213 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.151, i64 0, i64 0)) #10, !dbg !4290
  %214 = load i8**, i8*** %19, align 8, !dbg !4291
  %215 = getelementptr inbounds i8*, i8** %214, i64 0, !dbg !4291
  %216 = load i8*, i8** %215, align 8, !dbg !4291
  %217 = load i8**, i8*** %19, align 8, !dbg !4292
  %218 = getelementptr inbounds i8*, i8** %217, i64 1, !dbg !4292
  %219 = load i8*, i8** %218, align 8, !dbg !4292
  %220 = load i8**, i8*** %19, align 8, !dbg !4293
  %221 = getelementptr inbounds i8*, i8** %220, i64 2, !dbg !4293
  %222 = load i8*, i8** %221, align 8, !dbg !4293
  %223 = load i8**, i8*** %19, align 8, !dbg !4294
  %224 = getelementptr inbounds i8*, i8** %223, i64 3, !dbg !4294
  %225 = load i8*, i8** %224, align 8, !dbg !4294
  %226 = load i8**, i8*** %19, align 8, !dbg !4295
  %227 = getelementptr inbounds i8*, i8** %226, i64 4, !dbg !4295
  %228 = load i8*, i8** %227, align 8, !dbg !4295
  %229 = load i8**, i8*** %19, align 8, !dbg !4296
  %230 = getelementptr inbounds i8*, i8** %229, i64 5, !dbg !4296
  %231 = load i8*, i8** %230, align 8, !dbg !4296
  %232 = load i8**, i8*** %19, align 8, !dbg !4297
  %233 = getelementptr inbounds i8*, i8** %232, i64 6, !dbg !4297
  %234 = load i8*, i8** %233, align 8, !dbg !4297
  %235 = load i8**, i8*** %19, align 8, !dbg !4298
  %236 = getelementptr inbounds i8*, i8** %235, i64 7, !dbg !4298
  %237 = load i8*, i8** %236, align 8, !dbg !4298
  %238 = load i8**, i8*** %19, align 8, !dbg !4299
  %239 = getelementptr inbounds i8*, i8** %238, i64 8, !dbg !4299
  %240 = load i8*, i8** %239, align 8, !dbg !4299
  %241 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %212, i8* %213, i8* %216, i8* %219, i8* %222, i8* %225, i8* %228, i8* %231, i8* %234, i8* %237, i8* %240), !dbg !4300
  br label %273, !dbg !4301

242:                                              ; preds = %42
  %243 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4302
  %244 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.152, i64 0, i64 0)) #10, !dbg !4303
  %245 = load i8**, i8*** %19, align 8, !dbg !4304
  %246 = getelementptr inbounds i8*, i8** %245, i64 0, !dbg !4304
  %247 = load i8*, i8** %246, align 8, !dbg !4304
  %248 = load i8**, i8*** %19, align 8, !dbg !4305
  %249 = getelementptr inbounds i8*, i8** %248, i64 1, !dbg !4305
  %250 = load i8*, i8** %249, align 8, !dbg !4305
  %251 = load i8**, i8*** %19, align 8, !dbg !4306
  %252 = getelementptr inbounds i8*, i8** %251, i64 2, !dbg !4306
  %253 = load i8*, i8** %252, align 8, !dbg !4306
  %254 = load i8**, i8*** %19, align 8, !dbg !4307
  %255 = getelementptr inbounds i8*, i8** %254, i64 3, !dbg !4307
  %256 = load i8*, i8** %255, align 8, !dbg !4307
  %257 = load i8**, i8*** %19, align 8, !dbg !4308
  %258 = getelementptr inbounds i8*, i8** %257, i64 4, !dbg !4308
  %259 = load i8*, i8** %258, align 8, !dbg !4308
  %260 = load i8**, i8*** %19, align 8, !dbg !4309
  %261 = getelementptr inbounds i8*, i8** %260, i64 5, !dbg !4309
  %262 = load i8*, i8** %261, align 8, !dbg !4309
  %263 = load i8**, i8*** %19, align 8, !dbg !4310
  %264 = getelementptr inbounds i8*, i8** %263, i64 6, !dbg !4310
  %265 = load i8*, i8** %264, align 8, !dbg !4310
  %266 = load i8**, i8*** %19, align 8, !dbg !4311
  %267 = getelementptr inbounds i8*, i8** %266, i64 7, !dbg !4311
  %268 = load i8*, i8** %267, align 8, !dbg !4311
  %269 = load i8**, i8*** %19, align 8, !dbg !4312
  %270 = getelementptr inbounds i8*, i8** %269, i64 8, !dbg !4312
  %271 = load i8*, i8** %270, align 8, !dbg !4312
  %272 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %243, i8* %244, i8* %247, i8* %250, i8* %253, i8* %256, i8* %259, i8* %262, i8* %265, i8* %268, i8* %271), !dbg !4313
  br label %273, !dbg !4314

273:                                              ; preds = %242, %211, %183, %158, %136, %117, %originalBBpart24, %72, %62, %55, %54
  ret void, !dbg !4315

originalBBalteredBB:                              ; preds = %originalBB, %6
  %274 = alloca %struct._IO_FILE*, align 8
  %275 = alloca i8*, align 8
  %276 = alloca i8*, align 8
  %277 = alloca i8*, align 8
  %278 = alloca i8**, align 8
  %279 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %274, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %274, metadata !4316, metadata !DIExpression()), !dbg !4186
  store i8* %1, i8** %275, align 8
  call void @llvm.dbg.declare(metadata i8** %275, metadata !4355, metadata !DIExpression()), !dbg !4188
  store i8* %2, i8** %276, align 8
  call void @llvm.dbg.declare(metadata i8** %276, metadata !4356, metadata !DIExpression()), !dbg !4190
  store i8* %3, i8** %277, align 8
  call void @llvm.dbg.declare(metadata i8** %277, metadata !4357, metadata !DIExpression()), !dbg !4192
  store i8** %4, i8*** %278, align 8
  call void @llvm.dbg.declare(metadata i8*** %278, metadata !4358, metadata !DIExpression()), !dbg !4194
  store i64 %5, i64* %279, align 8
  call void @llvm.dbg.declare(metadata i64* %279, metadata !4359, metadata !DIExpression()), !dbg !4196
  %280 = load i8*, i8** %275, align 8, !dbg !4197
  %281 = icmp ne i8* %280, null, !dbg !4197
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %85
  %282 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4239
  %283 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.146, i64 0, i64 0)) #10, !dbg !4240
  %284 = load i8**, i8*** %19, align 8, !dbg !4241
  %285 = getelementptr inbounds i8*, i8** %284, i64 0, !dbg !4241
  %286 = load i8*, i8** %285, align 8, !dbg !4241
  %287 = load i8**, i8*** %19, align 8, !dbg !4242
  %288 = getelementptr inbounds i8*, i8** %287, i64 1, !dbg !4242
  %289 = load i8*, i8** %288, align 8, !dbg !4242
  %290 = load i8**, i8*** %19, align 8, !dbg !4243
  %291 = getelementptr inbounds i8*, i8** %290, i64 2, !dbg !4243
  %292 = load i8*, i8** %291, align 8, !dbg !4243
  %293 = load i8**, i8*** %19, align 8, !dbg !4244
  %294 = getelementptr inbounds i8*, i8** %293, i64 3, !dbg !4244
  %295 = load i8*, i8** %294, align 8, !dbg !4244
  %296 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %282, i8* %283, i8* %286, i8* %289, i8* %292, i8* %295), !dbg !4245
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !4360 {
  %6 = alloca %struct._IO_FILE*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.__va_list_tag*, align 8
  %11 = alloca i64, align 8
  %12 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %6, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %6, metadata !4370, metadata !DIExpression()), !dbg !4371
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4372, metadata !DIExpression()), !dbg !4373
  store i8* %2, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !4374, metadata !DIExpression()), !dbg !4375
  store i8* %3, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !4376, metadata !DIExpression()), !dbg !4377
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %10, metadata !4378, metadata !DIExpression()), !dbg !4379
  call void @llvm.dbg.declare(metadata i64* %11, metadata !4380, metadata !DIExpression()), !dbg !4381
  call void @llvm.dbg.declare(metadata [10 x i8*]* %12, metadata !4382, metadata !DIExpression()), !dbg !4384
  store i64 0, i64* %11, align 8, !dbg !4385
  br label %13, !dbg !4387

13:                                               ; preds = %89, %5
  %14 = load i64, i64* %11, align 8, !dbg !4388
  %15 = icmp ult i64 %14, 10, !dbg !4390
  br i1 %15, label %16, label %54, !dbg !4391

16:                                               ; preds = %13
  %17 = load %struct.__va_list_tag*, %struct.__va_list_tag** %10, align 8, !dbg !4392
  %18 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 0, !dbg !4392
  %19 = load i32, i32* %18, align 8, !dbg !4392
  %20 = icmp ule i32 %19, 40, !dbg !4392
  br i1 %20, label %21, label %27, !dbg !4392

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 3, !dbg !4392
  %23 = load i8*, i8** %22, align 8, !dbg !4392
  %24 = getelementptr i8, i8* %23, i32 %19, !dbg !4392
  %25 = bitcast i8* %24 to i8**, !dbg !4392
  %26 = add i32 %19, 8, !dbg !4392
  store i32 %26, i32* %18, align 8, !dbg !4392
  br label %48, !dbg !4392

27:                                               ; preds = %16
  %28 = load i32, i32* @x.89
  %29 = load i32, i32* @y.90
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %27, %originalBBalteredBB
  %36 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 2, !dbg !4392
  %37 = load i8*, i8** %36, align 8, !dbg !4392
  %38 = bitcast i8* %37 to i8**, !dbg !4392
  %39 = getelementptr i8, i8* %37, i32 8, !dbg !4392
  store i8* %39, i8** %36, align 8, !dbg !4392
  %40 = load i32, i32* @x.89
  %41 = load i32, i32* @y.90
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %48, !dbg !4392

48:                                               ; preds = %originalBBpart2, %21
  %49 = phi i8** [ %25, %21 ], [ %38, %originalBBpart2 ], !dbg !4392
  %50 = load i8*, i8** %49, align 8, !dbg !4392
  %51 = load i64, i64* %11, align 8, !dbg !4393
  %52 = getelementptr inbounds [10 x i8*], [10 x i8*]* %12, i64 0, i64 %51, !dbg !4394
  store i8* %50, i8** %52, align 8, !dbg !4395
  %53 = icmp ne i8* %50, null, !dbg !4396
  br label %54

54:                                               ; preds = %48, %13
  %55 = phi i1 [ false, %13 ], [ %53, %48 ], !dbg !4397
  %56 = load i32, i32* @x.89
  %57 = load i32, i32* @y.90
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %54, %originalBB1alteredBB
  %64 = load i32, i32* @x.89
  %65 = load i32, i32* @y.90
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %55, label %72, label %92, !dbg !4398

72:                                               ; preds = %originalBBpart24
  %73 = load i32, i32* @x.89
  %74 = load i32, i32* @y.90
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %72, %originalBB6alteredBB
  %81 = load i32, i32* @x.89
  %82 = load i32, i32* @y.90
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %89, !dbg !4398

89:                                               ; preds = %originalBBpart28
  %90 = load i64, i64* %11, align 8, !dbg !4399
  %91 = add i64 %90, 1, !dbg !4399
  store i64 %91, i64* %11, align 8, !dbg !4399
  br label %13, !dbg !4400, !llvm.loop !4401

92:                                               ; preds = %originalBBpart24
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !dbg !4403
  %94 = load i8*, i8** %7, align 8, !dbg !4404
  %95 = load i8*, i8** %8, align 8, !dbg !4405
  %96 = load i8*, i8** %9, align 8, !dbg !4406
  %97 = getelementptr inbounds [10 x i8*], [10 x i8*]* %12, i64 0, i64 0, !dbg !4407
  %98 = load i64, i64* %11, align 8, !dbg !4408
  call void @version_etc_arn(%struct._IO_FILE* %93, i8* %94, i8* %95, i8* %96, i8** %97, i64 %98), !dbg !4409
  ret void, !dbg !4410

originalBBalteredBB:                              ; preds = %originalBB, %27
  %99 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 2, !dbg !4392
  %100 = load i8*, i8** %99, align 8, !dbg !4392
  %101 = bitcast i8* %100 to i8**, !dbg !4392
  %102 = getelementptr i8, i8* %100, i32 8, !dbg !4392
  store i8* %102, i8** %99, align 8, !dbg !4392
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %54
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %72
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !4411 {
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %5, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %5, metadata !4414, metadata !DIExpression()), !dbg !4415
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !4416, metadata !DIExpression()), !dbg !4417
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4418, metadata !DIExpression()), !dbg !4419
  store i8* %3, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !4420, metadata !DIExpression()), !dbg !4421
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %9, metadata !4422, metadata !DIExpression()), !dbg !4429
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !4430
  %11 = bitcast %struct.__va_list_tag* %10 to i8*, !dbg !4430
  call void @llvm.va_start(i8* %11), !dbg !4430
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4431
  %13 = load i8*, i8** %6, align 8, !dbg !4432
  %14 = load i8*, i8** %7, align 8, !dbg !4433
  %15 = load i8*, i8** %8, align 8, !dbg !4434
  %16 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !4435
  call void @version_etc_va(%struct._IO_FILE* %12, i8* %13, i8* %14, i8* %15, %struct.__va_list_tag* %16), !dbg !4436
  %17 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !4437
  %18 = bitcast %struct.__va_list_tag* %17 to i8*, !dbg !4437
  call void @llvm.va_end(i8* %18), !dbg !4437
  ret void, !dbg !4438
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !4439 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !4443, metadata !DIExpression()), !dbg !4444
  call void @llvm.dbg.declare(metadata i8** %3, metadata !4445, metadata !DIExpression()), !dbg !4446
  %4 = load i64, i64* %2, align 8, !dbg !4447
  %5 = call noalias i8* @malloc(i64 %4) #10, !dbg !4448
  store i8* %5, i8** %3, align 8, !dbg !4446
  %6 = load i8*, i8** %3, align 8, !dbg !4449
  %7 = icmp ne i8* %6, null, !dbg !4449
  br i1 %7, label %28, label %8, !dbg !4451

8:                                                ; preds = %1
  %9 = load i64, i64* %2, align 8, !dbg !4452
  %10 = icmp ne i64 %9, 0, !dbg !4453
  br i1 %10, label %11, label %28, !dbg !4454

11:                                               ; preds = %8
  %12 = load i32, i32* @x.93
  %13 = load i32, i32* @y.94
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %11, %originalBBalteredBB
  call void @xalloc_die() #14, !dbg !4455
  %20 = load i32, i32* @x.93
  %21 = load i32, i32* @y.94
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !4455

28:                                               ; preds = %8, %1
  %29 = load i8*, i8** %3, align 8, !dbg !4456
  ret i8* %29, !dbg !4457

originalBBalteredBB:                              ; preds = %originalBB, %11
  call void @xalloc_die() #14, !dbg !4455
  br label %originalBB
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !4458 {
  %3 = load i32, i32* @x.95
  %4 = load i32, i32* @y.96
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4461, metadata !DIExpression()), !dbg !4462
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !4463, metadata !DIExpression()), !dbg !4464
  %14 = load i64, i64* %13, align 8, !dbg !4465
  %15 = icmp ne i64 %14, 0, !dbg !4465
  %16 = load i32, i32* @x.95
  %17 = load i32, i32* @y.96
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %29, label %24, !dbg !4467

24:                                               ; preds = %originalBBpart2
  %25 = load i8*, i8** %12, align 8, !dbg !4468
  %26 = icmp ne i8* %25, null, !dbg !4468
  br i1 %26, label %27, label %29, !dbg !4469

27:                                               ; preds = %24
  %28 = load i8*, i8** %12, align 8, !dbg !4470
  call void @free(i8* %28) #10, !dbg !4472
  store i8* null, i8** %11, align 8, !dbg !4473
  br label %73, !dbg !4473

29:                                               ; preds = %24, %originalBBpart2
  %30 = load i32, i32* @x.95
  %31 = load i32, i32* @y.96
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %12, align 8, !dbg !4474
  %39 = load i64, i64* %13, align 8, !dbg !4475
  %40 = call i8* @realloc(i8* %38, i64 %39) #10, !dbg !4476
  store i8* %40, i8** %12, align 8, !dbg !4477
  %41 = load i8*, i8** %12, align 8, !dbg !4478
  %42 = icmp ne i8* %41, null, !dbg !4478
  %43 = load i32, i32* @x.95
  %44 = load i32, i32* @y.96
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %42, label %71, label %51, !dbg !4480

51:                                               ; preds = %originalBBpart24
  %52 = load i32, i32* @x.95
  %53 = load i32, i32* @y.96
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %51, %originalBB6alteredBB
  %60 = load i64, i64* %13, align 8, !dbg !4481
  %61 = icmp ne i64 %60, 0, !dbg !4481
  %62 = load i32, i32* @x.95
  %63 = load i32, i32* @y.96
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %61, label %70, label %71, !dbg !4482

70:                                               ; preds = %originalBBpart28
  call void @xalloc_die() #14, !dbg !4483
  unreachable, !dbg !4483

71:                                               ; preds = %originalBBpart28, %originalBBpart24
  %72 = load i8*, i8** %12, align 8, !dbg !4484
  store i8* %72, i8** %11, align 8, !dbg !4485
  br label %73, !dbg !4485

73:                                               ; preds = %71, %27
  %74 = load i32, i32* @x.95
  %75 = load i32, i32* @y.96
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %73, %originalBB10alteredBB
  %82 = load i8*, i8** %11, align 8, !dbg !4486
  %83 = load i32, i32* @x.95
  %84 = load i32, i32* @y.96
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %82, !dbg !4486

originalBBalteredBB:                              ; preds = %originalBB, %2
  %91 = alloca i8*, align 8
  %92 = alloca i8*, align 8
  %93 = alloca i64, align 8
  store i8* %0, i8** %92, align 8
  call void @llvm.dbg.declare(metadata i8** %92, metadata !4487, metadata !DIExpression()), !dbg !4462
  store i64 %1, i64* %93, align 8
  call void @llvm.dbg.declare(metadata i64* %93, metadata !4490, metadata !DIExpression()), !dbg !4464
  %94 = load i64, i64* %93, align 8, !dbg !4465
  %95 = icmp ne i64 %94, 0, !dbg !4465
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %96 = load i8*, i8** %12, align 8, !dbg !4474
  %97 = load i64, i64* %13, align 8, !dbg !4475
  %98 = call i8* @realloc(i8* %96, i64 %97) #10, !dbg !4476
  store i8* %98, i8** %12, align 8, !dbg !4477
  %99 = load i8*, i8** %12, align 8, !dbg !4478
  %100 = icmp ne i8* %99, null, !dbg !4478
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %51
  %101 = load i64, i64* %13, align 8, !dbg !4481
  %102 = icmp ne i64 %101, 0, !dbg !4481
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %73
  %103 = load i8*, i8** %11, align 8, !dbg !4486
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @x2nrealloc(i8*, i64*, i64) #4 !dbg !4491 {
  %4 = alloca i8*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !4496, metadata !DIExpression()), !dbg !4497
  store i64* %1, i64** %5, align 8
  call void @llvm.dbg.declare(metadata i64** %5, metadata !4498, metadata !DIExpression()), !dbg !4499
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !4500, metadata !DIExpression()), !dbg !4501
  call void @llvm.dbg.declare(metadata i64* %7, metadata !4502, metadata !DIExpression()), !dbg !4503
  %8 = load i64*, i64** %5, align 8, !dbg !4504
  %9 = load i64, i64* %8, align 8, !dbg !4505
  store i64 %9, i64* %7, align 8, !dbg !4503
  %10 = load i8*, i8** %4, align 8, !dbg !4506
  %11 = icmp ne i8* %10, null, !dbg !4506
  br i1 %11, label %48, label %12, !dbg !4508

12:                                               ; preds = %3
  %13 = load i32, i32* @x.97
  %14 = load i32, i32* @y.98
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %12, %originalBBalteredBB
  %21 = load i64, i64* %7, align 8, !dbg !4509
  %22 = icmp ne i64 %21, 0, !dbg !4509
  %23 = load i32, i32* @x.97
  %24 = load i32, i32* @y.98
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %41, label %31, !dbg !4512

31:                                               ; preds = %originalBBpart2
  %32 = load i64, i64* %6, align 8, !dbg !4513
  %33 = udiv i64 128, %32, !dbg !4515
  store i64 %33, i64* %7, align 8, !dbg !4516
  %34 = load i64, i64* %7, align 8, !dbg !4517
  %35 = icmp ne i64 %34, 0, !dbg !4518
  %36 = xor i1 %35, true, !dbg !4518
  %37 = zext i1 %36 to i32, !dbg !4518
  %38 = sext i32 %37 to i64, !dbg !4518
  %39 = load i64, i64* %7, align 8, !dbg !4519
  %40 = add i64 %39, %38, !dbg !4519
  store i64 %40, i64* %7, align 8, !dbg !4519
  br label %41, !dbg !4520

41:                                               ; preds = %31, %originalBBpart2
  %42 = load i64, i64* %6, align 8, !dbg !4521
  %43 = udiv i64 9223372036854775807, %42, !dbg !4521
  %44 = load i64, i64* %7, align 8, !dbg !4521
  %45 = icmp ult i64 %43, %44, !dbg !4521
  br i1 %45, label %46, label %47, !dbg !4523

46:                                               ; preds = %41
  call void @xalloc_die() #14, !dbg !4524
  unreachable, !dbg !4524

47:                                               ; preds = %41
  br label %60, !dbg !4525

48:                                               ; preds = %3
  %49 = load i64, i64* %6, align 8, !dbg !4526
  %50 = udiv i64 6148914691236517204, %49, !dbg !4529
  %51 = load i64, i64* %7, align 8, !dbg !4530
  %52 = icmp ule i64 %50, %51, !dbg !4531
  br i1 %52, label %53, label %54, !dbg !4532

53:                                               ; preds = %48
  call void @xalloc_die() #14, !dbg !4533
  unreachable, !dbg !4533

54:                                               ; preds = %48
  %55 = load i64, i64* %7, align 8, !dbg !4534
  %56 = udiv i64 %55, 2, !dbg !4535
  %57 = add i64 %56, 1, !dbg !4536
  %58 = load i64, i64* %7, align 8, !dbg !4537
  %59 = add i64 %58, %57, !dbg !4537
  store i64 %59, i64* %7, align 8, !dbg !4537
  br label %60

60:                                               ; preds = %54, %47
  %61 = load i64, i64* %7, align 8, !dbg !4538
  %62 = load i64*, i64** %5, align 8, !dbg !4539
  store i64 %61, i64* %62, align 8, !dbg !4540
  %63 = load i8*, i8** %4, align 8, !dbg !4541
  %64 = load i64, i64* %7, align 8, !dbg !4542
  %65 = load i64, i64* %6, align 8, !dbg !4543
  %66 = mul i64 %64, %65, !dbg !4544
  %67 = call i8* @xrealloc(i8* %63, i64 %66), !dbg !4545
  ret i8* %67, !dbg !4546

originalBBalteredBB:                              ; preds = %originalBB, %12
  %68 = load i64, i64* %7, align 8, !dbg !4509
  %69 = icmp ne i64 %68, 0, !dbg !4509
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !4547 {
  %2 = load i32, i32* @x.99
  %3 = load i32, i32* @y.100
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !4550, metadata !DIExpression()), !dbg !4551
  %11 = load i64, i64* %10, align 8, !dbg !4552
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !4552
  %13 = load i32, i32* @x.99
  %14 = load i32, i32* @y.100
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !4553

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !4554, metadata !DIExpression()), !dbg !4551
  %22 = load i64, i64* %21, align 8, !dbg !4552
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !4552
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !4557 {
  %1 = load i32, i32* @x.101
  %2 = load i32, i32* @y.102
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !4559
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.165, i64 0, i64 0)) #10, !dbg !4560
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i64 0, i64 0), i8* %10), !dbg !4561
  call void @abort() #12, !dbg !4562
  %11 = load i32, i32* @x.101
  %12 = load i32, i32* @y.102
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !4562

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !4559
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.165, i64 0, i64 0)) #10, !dbg !4560
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i64 0, i64 0), i8* %20), !dbg !4561
  call void @abort() #12, !dbg !4562
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !4563 {
  %5 = alloca i64, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.__mbstate_t*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  store i32* %0, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !4579, metadata !DIExpression()), !dbg !4580
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4581, metadata !DIExpression()), !dbg !4582
  store i64 %2, i64* %8, align 8
  call void @llvm.dbg.declare(metadata i64* %8, metadata !4583, metadata !DIExpression()), !dbg !4584
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %9, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %9, metadata !4585, metadata !DIExpression()), !dbg !4586
  call void @llvm.dbg.declare(metadata i64* %10, metadata !4587, metadata !DIExpression()), !dbg !4588
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4589, metadata !DIExpression()), !dbg !4590
  %13 = load i32*, i32** %6, align 8, !dbg !4591
  %14 = icmp ne i32* %13, null, !dbg !4591
  br i1 %14, label %32, label %15, !dbg !4593

15:                                               ; preds = %4
  %16 = load i32, i32* @x.103
  %17 = load i32, i32* @y.104
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  store i32* %11, i32** %6, align 8, !dbg !4594
  %24 = load i32, i32* @x.103
  %25 = load i32, i32* @y.104
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %32, !dbg !4595

32:                                               ; preds = %originalBBpart2, %4
  %33 = load i32*, i32** %6, align 8, !dbg !4596
  %34 = load i8*, i8** %7, align 8, !dbg !4597
  %35 = load i64, i64* %8, align 8, !dbg !4598
  %36 = load %struct.__mbstate_t*, %struct.__mbstate_t** %9, align 8, !dbg !4599
  %37 = call i64 @mbrtowc(i32* %33, i8* %34, i64 %35, %struct.__mbstate_t* %36) #10, !dbg !4600
  store i64 %37, i64* %10, align 8, !dbg !4601
  %38 = load i64, i64* %10, align 8, !dbg !4602
  %39 = icmp ule i64 -2, %38, !dbg !4604
  br i1 %39, label %40, label %51, !dbg !4605

40:                                               ; preds = %32
  %41 = load i64, i64* %8, align 8, !dbg !4606
  %42 = icmp ne i64 %41, 0, !dbg !4607
  br i1 %42, label %43, label %51, !dbg !4608

43:                                               ; preds = %40
  %44 = call zeroext i1 @hard_locale(i32 0), !dbg !4609
  br i1 %44, label %51, label %45, !dbg !4610

45:                                               ; preds = %43
  call void @llvm.dbg.declare(metadata i8* %12, metadata !4611, metadata !DIExpression()), !dbg !4613
  %46 = load i8*, i8** %7, align 8, !dbg !4614
  %47 = load i8, i8* %46, align 1, !dbg !4615
  store i8 %47, i8* %12, align 1, !dbg !4613
  %48 = load i8, i8* %12, align 1, !dbg !4616
  %49 = zext i8 %48 to i32, !dbg !4616
  %50 = load i32*, i32** %6, align 8, !dbg !4617
  store i32 %49, i32* %50, align 4, !dbg !4618
  store i64 1, i64* %5, align 8, !dbg !4619
  br label %69, !dbg !4619

51:                                               ; preds = %43, %40, %32
  %52 = load i32, i32* @x.103
  %53 = load i32, i32* @y.104
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %51, %originalBB1alteredBB
  %60 = load i64, i64* %10, align 8, !dbg !4620
  store i64 %60, i64* %5, align 8, !dbg !4621
  %61 = load i32, i32* @x.103
  %62 = load i32, i32* @y.104
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %69, !dbg !4621

69:                                               ; preds = %originalBBpart24, %45
  %70 = load i32, i32* @x.103
  %71 = load i32, i32* @y.104
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %69, %originalBB6alteredBB
  %78 = load i64, i64* %5, align 8, !dbg !4622
  %79 = load i32, i32* @x.103
  %80 = load i32, i32* @y.104
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i64 %78, !dbg !4622

originalBBalteredBB:                              ; preds = %originalBB, %15
  store i32* %11, i32** %6, align 8, !dbg !4594
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %51
  %87 = load i64, i64* %10, align 8, !dbg !4620
  store i64 %87, i64* %5, align 8, !dbg !4621
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %69
  %88 = load i64, i64* %5, align 8, !dbg !4622
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @extract_trimmed_name(%struct.utmpx*) #4 !dbg !4623 {
  %2 = alloca %struct.utmpx*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %2, metadata !4651, metadata !DIExpression()), !dbg !4652
  call void @llvm.dbg.declare(metadata i8** %3, metadata !4653, metadata !DIExpression()), !dbg !4654
  call void @llvm.dbg.declare(metadata i8** %4, metadata !4655, metadata !DIExpression()), !dbg !4656
  %5 = call noalias i8* @xmalloc(i64 33), !dbg !4657
  store i8* %5, i8** %4, align 8, !dbg !4658
  %6 = load i8*, i8** %4, align 8, !dbg !4659
  %7 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !4660
  %8 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %7, i32 0, i32 4, !dbg !4660
  %9 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0, !dbg !4660
  %10 = call i8* @strncpy(i8* %6, i8* %9, i64 32) #10, !dbg !4661
  %11 = load i8*, i8** %4, align 8, !dbg !4662
  %12 = getelementptr inbounds i8, i8* %11, i64 32, !dbg !4662
  store i8 0, i8* %12, align 1, !dbg !4663
  %13 = load i8*, i8** %4, align 8, !dbg !4664
  %14 = load i8*, i8** %4, align 8, !dbg !4666
  %15 = call i64 @strlen(i8* %14) #13, !dbg !4667
  %16 = getelementptr inbounds i8, i8* %13, i64 %15, !dbg !4668
  store i8* %16, i8** %3, align 8, !dbg !4669
  br label %17, !dbg !4670

17:                                               ; preds = %originalBBpart24, %1
  %18 = load i8*, i8** %4, align 8, !dbg !4671
  %19 = load i8*, i8** %3, align 8, !dbg !4673
  %20 = icmp ult i8* %18, %19, !dbg !4674
  br i1 %20, label %21, label %43, !dbg !4675

21:                                               ; preds = %17
  %22 = load i32, i32* @x.105
  %23 = load i32, i32* @y.106
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %21, %originalBBalteredBB
  %30 = load i8*, i8** %3, align 8, !dbg !4676
  %31 = getelementptr inbounds i8, i8* %30, i64 -1, !dbg !4676
  %32 = load i8, i8* %31, align 1, !dbg !4676
  %33 = sext i8 %32 to i32, !dbg !4676
  %34 = icmp eq i32 %33, 32, !dbg !4677
  %35 = load i32, i32* @x.105
  %36 = load i32, i32* @y.106
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %43

43:                                               ; preds = %originalBBpart2, %17
  %44 = phi i1 [ false, %17 ], [ %34, %originalBBpart2 ], !dbg !4678
  br i1 %44, label %45, label %65, !dbg !4679

45:                                               ; preds = %43
  br label %46, !dbg !4680

46:                                               ; preds = %45
  %47 = load i32, i32* @x.105
  %48 = load i32, i32* @y.106
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %46, %originalBB1alteredBB
  %55 = load i8*, i8** %3, align 8, !dbg !4681
  %56 = getelementptr inbounds i8, i8* %55, i32 -1, !dbg !4681
  store i8* %56, i8** %3, align 8, !dbg !4681
  store i8 0, i8* %56, align 1, !dbg !4682
  %57 = load i32, i32* @x.105
  %58 = load i32, i32* @y.106
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %17, !dbg !4683, !llvm.loop !4684

65:                                               ; preds = %43
  %66 = load i32, i32* @x.105
  %67 = load i32, i32* @y.106
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %65, %originalBB6alteredBB
  %74 = load i8*, i8** %4, align 8, !dbg !4686
  %75 = load i32, i32* @x.105
  %76 = load i32, i32* @y.106
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %74, !dbg !4687

originalBBalteredBB:                              ; preds = %originalBB, %21
  %83 = load i8*, i8** %3, align 8, !dbg !4676
  %84 = getelementptr inbounds i8, i8* %83, i64 -1, !dbg !4676
  %85 = load i8, i8* %84, align 1, !dbg !4676
  %86 = sext i8 %85 to i32, !dbg !4676
  %87 = icmp eq i32 %86, 32, !dbg !4677
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %46
  %88 = load i8*, i8** %3, align 8, !dbg !4681
  %89 = getelementptr inbounds i8, i8* %88, i32 -1, !dbg !4681
  store i8* %89, i8** %3, align 8, !dbg !4681
  store i8 0, i8* %89, align 1, !dbg !4682
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %65
  %90 = load i8*, i8** %4, align 8, !dbg !4686
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local i8* @strncpy(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @read_utmp(i8*, i64*, %struct.utmpx**, i32) #4 !dbg !4688 {
  %5 = alloca i8*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca %struct.utmpx**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.utmpx*, align 8
  %12 = alloca %struct.utmpx*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4693, metadata !DIExpression()), !dbg !4694
  store i64* %1, i64** %6, align 8
  call void @llvm.dbg.declare(metadata i64** %6, metadata !4695, metadata !DIExpression()), !dbg !4696
  store %struct.utmpx** %2, %struct.utmpx*** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx*** %7, metadata !4697, metadata !DIExpression()), !dbg !4698
  store i32 %3, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !4699, metadata !DIExpression()), !dbg !4700
  call void @llvm.dbg.declare(metadata i64* %9, metadata !4701, metadata !DIExpression()), !dbg !4702
  store i64 0, i64* %9, align 8, !dbg !4702
  call void @llvm.dbg.declare(metadata i64* %10, metadata !4703, metadata !DIExpression()), !dbg !4704
  store i64 0, i64* %10, align 8, !dbg !4704
  call void @llvm.dbg.declare(metadata %struct.utmpx** %11, metadata !4705, metadata !DIExpression()), !dbg !4706
  store %struct.utmpx* null, %struct.utmpx** %11, align 8, !dbg !4706
  call void @llvm.dbg.declare(metadata %struct.utmpx** %12, metadata !4707, metadata !DIExpression()), !dbg !4708
  %13 = load i8*, i8** %5, align 8, !dbg !4709
  %14 = call i32 @utmpxname(i8* %13), !dbg !4710
  call void @setutxent(), !dbg !4711
  br label %15, !dbg !4712

15:                                               ; preds = %55, %4
  %16 = call %struct.utmpx* @getutxent(), !dbg !4713
  store %struct.utmpx* %16, %struct.utmpx** %12, align 8, !dbg !4714
  %17 = icmp ne %struct.utmpx* %16, null, !dbg !4715
  br i1 %17, label %18, label %56, !dbg !4712

18:                                               ; preds = %15
  %19 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !4716
  %20 = load i32, i32* %8, align 4, !dbg !4718
  %21 = call zeroext i1 @desirable_utmp_entry(%struct.utmpx* %19, i32 %20), !dbg !4719
  br i1 %21, label %22, label %55, !dbg !4720

22:                                               ; preds = %18
  %23 = load i64, i64* %9, align 8, !dbg !4721
  %24 = load i64, i64* %10, align 8, !dbg !4724
  %25 = icmp eq i64 %23, %24, !dbg !4725
  br i1 %25, label %26, label %31, !dbg !4726

26:                                               ; preds = %22
  %27 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !4727
  %28 = bitcast %struct.utmpx* %27 to i8*, !dbg !4727
  %29 = call i8* @x2nrealloc(i8* %28, i64* %10, i64 384), !dbg !4728
  %30 = bitcast i8* %29 to %struct.utmpx*, !dbg !4728
  store %struct.utmpx* %30, %struct.utmpx** %11, align 8, !dbg !4729
  br label %31, !dbg !4730

31:                                               ; preds = %26, %22
  %32 = load i32, i32* @x.107
  %33 = load i32, i32* @y.108
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %31, %originalBBalteredBB
  %40 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !4731
  %41 = load i64, i64* %9, align 8, !dbg !4732
  %42 = add i64 %41, 1, !dbg !4732
  store i64 %42, i64* %9, align 8, !dbg !4732
  %43 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %40, i64 %41, !dbg !4731
  %44 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !4733
  %45 = bitcast %struct.utmpx* %43 to i8*, !dbg !4734
  %46 = bitcast %struct.utmpx* %44 to i8*, !dbg !4734
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %45, i8* align 4 %46, i64 384, i1 false), !dbg !4734
  %47 = load i32, i32* @x.107
  %48 = load i32, i32* @y.108
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %55, !dbg !4735

55:                                               ; preds = %originalBBpart2, %18
  br label %15, !dbg !4712, !llvm.loop !4736

56:                                               ; preds = %15
  %57 = load i32, i32* @x.107
  %58 = load i32, i32* @y.108
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB3, label %originalBB3alteredBB

originalBB3:                                      ; preds = %56, %originalBB3alteredBB
  call void @endutxent(), !dbg !4738
  %65 = load i64, i64* %9, align 8, !dbg !4739
  %66 = load i64*, i64** %6, align 8, !dbg !4740
  store i64 %65, i64* %66, align 8, !dbg !4741
  %67 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !4742
  %68 = load %struct.utmpx**, %struct.utmpx*** %7, align 8, !dbg !4743
  store %struct.utmpx* %67, %struct.utmpx** %68, align 8, !dbg !4744
  %69 = load i32, i32* @x.107
  %70 = load i32, i32* @y.108
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart25, label %originalBB3alteredBB

originalBBpart25:                                 ; preds = %originalBB3
  ret i32 0, !dbg !4745

originalBBalteredBB:                              ; preds = %originalBB, %31
  %77 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !4731
  %78 = load i64, i64* %9, align 8, !dbg !4732
  %_ = shl i64 %78, 1
  %_1 = shl i64 %78, 1
  %_2 = sub i64 0, %78
  %gen = add i64 %_2, 1
  %79 = add i64 %78, 1, !dbg !4732
  store i64 %79, i64* %9, align 8, !dbg !4732
  %80 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %77, i64 %78, !dbg !4731
  %81 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !4733
  %82 = bitcast %struct.utmpx* %80 to i8*, !dbg !4734
  %83 = bitcast %struct.utmpx* %81 to i8*, !dbg !4734
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %82, i8* align 4 %83, i64 384, i1 false), !dbg !4734
  br label %originalBB

originalBB3alteredBB:                             ; preds = %originalBB3, %56
  call void @endutxent(), !dbg !4738
  %84 = load i64, i64* %9, align 8, !dbg !4739
  %85 = load i64*, i64** %6, align 8, !dbg !4740
  store i64 %84, i64* %85, align 8, !dbg !4741
  %86 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !4742
  %87 = load %struct.utmpx**, %struct.utmpx*** %7, align 8, !dbg !4743
  store %struct.utmpx* %86, %struct.utmpx** %87, align 8, !dbg !4744
  br label %originalBB3
}

declare dso_local i32 @utmpxname(i8*) #3

declare dso_local void @setutxent() #3

declare dso_local %struct.utmpx* @getutxent() #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @desirable_utmp_entry(%struct.utmpx*, i32) #4 !dbg !4746 {
  %3 = alloca i1, align 1
  %4 = alloca %struct.utmpx*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  store %struct.utmpx* %0, %struct.utmpx** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %4, metadata !4749, metadata !DIExpression()), !dbg !4750
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !4751, metadata !DIExpression()), !dbg !4752
  call void @llvm.dbg.declare(metadata i8* %6, metadata !4753, metadata !DIExpression()), !dbg !4754
  %7 = load %struct.utmpx*, %struct.utmpx** %4, align 8, !dbg !4755
  %8 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %7, i32 0, i32 4, !dbg !4755
  %9 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0, !dbg !4755
  %10 = load i8, i8* %9, align 4, !dbg !4755
  %11 = sext i8 %10 to i32, !dbg !4755
  %12 = icmp ne i32 %11, 0, !dbg !4755
  br i1 %12, label %13, label %116, !dbg !4755

13:                                               ; preds = %2
  %14 = load %struct.utmpx*, %struct.utmpx** %4, align 8, !dbg !4755
  %15 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %14, i32 0, i32 0, !dbg !4755
  %16 = load i16, i16* %15, align 4, !dbg !4755
  %17 = sext i16 %16 to i32, !dbg !4755
  br label %18, !dbg !4755

18:                                               ; preds = %13
  %collatzVar = alloca i32
  br label %19

19:                                               ; preds = %18
  %20 = load i32, i32* @inVal0
  %21 = icmp sgt i32 %20, 1
  br i1 %21, label %39, label %22

22:                                               ; preds = %19
  %23 = load i32, i32* @x.109
  %24 = load i32, i32* @y.110
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %22, %originalBBalteredBB
  store i32 52, i32* %collatzVar
  %31 = load i32, i32* @x.109
  %32 = load i32, i32* @y.110
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %39

39:                                               ; preds = %originalBBpart2, %19
  %40 = load i8**, i8*** @inVal1
  %41 = getelementptr inbounds i8*, i8** %40, i64 1
  %42 = load i8*, i8** %41
  %controle = call i32 @controle(i8* %42, i32 7)
  store i32 %controle, i32* %collatzVar
  br label %43

43:                                               ; preds = %109, %105, %39
  %44 = load i32, i32* %collatzVar
  %45 = icmp sgt i32 %44, 1
  br i1 %45, label %46, label %113

46:                                               ; preds = %43
  %47 = load i32, i32* @x.109
  %48 = load i32, i32* @y.110
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %46, %originalBB1alteredBB
  %55 = load i32, i32* %collatzVar
  %56 = srem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = load i32, i32* @x.109
  %59 = load i32, i32* @y.110
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart29, label %originalBB1alteredBB

originalBBpart29:                                 ; preds = %originalBB1
  br i1 %57, label %66, label %85

66:                                               ; preds = %originalBBpart29
  %67 = load i32, i32* @x.109
  %68 = load i32, i32* @y.110
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %66, %originalBB11alteredBB
  %75 = load i32, i32* %collatzVar
  %76 = sdiv i32 %75, 2
  store i32 %76, i32* %collatzVar
  %77 = load i32, i32* @x.109
  %78 = load i32, i32* @y.110
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %105

85:                                               ; preds = %originalBBpart29
  %86 = load i32, i32* @x.109
  %87 = load i32, i32* @y.110
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %85, %originalBB15alteredBB
  %94 = load i32, i32* %collatzVar
  %95 = mul i32 %94, 3
  %96 = add i32 %95, 1
  store i32 %96, i32* %collatzVar
  %97 = load i32, i32* @x.109
  %98 = load i32, i32* @y.110
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart229, label %originalBB15alteredBB

originalBBpart229:                                ; preds = %originalBB15
  br label %105

105:                                              ; preds = %originalBBpart229, %originalBBpart213
  %106 = load i32, i32* %collatzVar
  %107 = sub i32 %17, %106
  %108 = icmp sgt i32 %107, 5
  br i1 %108, label %109, label %43

109:                                              ; preds = %105
  %110 = load i32, i32* %collatzVar
  %111 = add i32 %17, %110
  %112 = icmp slt i32 %111, 9
  br i1 %112, label %114, label %43

113:                                              ; preds = %43
  br label %114, !dbg !4755

114:                                              ; preds = %113, %109
  %115 = phi i1 [ true, %109 ], [ false, %113 ]
  br label %116

116:                                              ; preds = %114, %2
  %117 = phi i1 [ false, %2 ], [ %115, %114 ], !dbg !4756
  %118 = zext i1 %117 to i8, !dbg !4754
  store i8 %118, i8* %6, align 1, !dbg !4754
  %119 = load i32, i32* %5, align 4, !dbg !4757
  %120 = and i32 %119, 2, !dbg !4759
  %121 = icmp ne i32 %120, 0, !dbg !4759
  br i1 %121, label %122, label %142, !dbg !4760

122:                                              ; preds = %116
  %123 = load i8, i8* %6, align 1, !dbg !4761
  %124 = trunc i8 %123 to i1, !dbg !4761
  br i1 %124, label %142, label %125, !dbg !4762

125:                                              ; preds = %122
  %126 = load i32, i32* @x.109
  %127 = load i32, i32* @y.110
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %125, %originalBB31alteredBB
  store i1 false, i1* %3, align 1, !dbg !4763
  %134 = load i32, i32* @x.109
  %135 = load i32, i32* @y.110
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br label %214, !dbg !4763

142:                                              ; preds = %122, %116
  %143 = load i32, i32* @x.109
  %144 = load i32, i32* @y.110
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %142, %originalBB35alteredBB
  %151 = load i32, i32* %5, align 4, !dbg !4764
  %152 = and i32 %151, 1, !dbg !4766
  %153 = icmp ne i32 %152, 0, !dbg !4766
  %154 = load i32, i32* @x.109
  %155 = load i32, i32* @y.110
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart238, label %originalBB35alteredBB

originalBBpart238:                                ; preds = %originalBB35
  br i1 %153, label %162, label %213, !dbg !4767

162:                                              ; preds = %originalBBpart238
  %163 = load i8, i8* %6, align 1, !dbg !4768
  %164 = trunc i8 %163 to i1, !dbg !4768
  br i1 %164, label %165, label %213, !dbg !4769

165:                                              ; preds = %162
  %166 = load %struct.utmpx*, %struct.utmpx** %4, align 8, !dbg !4770
  %167 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %166, i32 0, i32 1, !dbg !4770
  %168 = load i32, i32* %167, align 4, !dbg !4770
  %169 = icmp slt i32 0, %168, !dbg !4771
  br i1 %169, label %170, label %213, !dbg !4772

170:                                              ; preds = %165
  %171 = load %struct.utmpx*, %struct.utmpx** %4, align 8, !dbg !4773
  %172 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %171, i32 0, i32 1, !dbg !4773
  %173 = load i32, i32* %172, align 4, !dbg !4773
  %174 = call i32 @kill(i32 %173, i32 0) #10, !dbg !4774
  %175 = icmp slt i32 %174, 0, !dbg !4775
  br i1 %175, label %176, label %213, !dbg !4776

176:                                              ; preds = %170
  %177 = load i32, i32* @x.109
  %178 = load i32, i32* @y.110
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %176, %originalBB40alteredBB
  %185 = call i32* @__errno_location() #15, !dbg !4777
  %186 = load i32, i32* %185, align 4, !dbg !4777
  %187 = icmp eq i32 %186, 3, !dbg !4778
  %188 = load i32, i32* @x.109
  %189 = load i32, i32* @y.110
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br i1 %187, label %196, label %213, !dbg !4779

196:                                              ; preds = %originalBBpart242
  %197 = load i32, i32* @x.109
  %198 = load i32, i32* @y.110
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %196, %originalBB44alteredBB
  store i1 false, i1* %3, align 1, !dbg !4780
  %205 = load i32, i32* @x.109
  %206 = load i32, i32* @y.110
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  br label %214, !dbg !4780

213:                                              ; preds = %originalBBpart242, %170, %165, %162, %originalBBpart238
  store i1 true, i1* %3, align 1, !dbg !4781
  br label %214, !dbg !4781

214:                                              ; preds = %213, %originalBBpart246, %originalBBpart233
  %215 = load i32, i32* @x.109
  %216 = load i32, i32* @y.110
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %214, %originalBB48alteredBB
  %223 = load i1, i1* %3, align 1, !dbg !4782
  %224 = load i32, i32* @x.109
  %225 = load i32, i32* @y.110
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  ret i1 %223, !dbg !4782

originalBBalteredBB:                              ; preds = %originalBB, %22
  store i32 52, i32* %collatzVar
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %46
  %232 = load i32, i32* %collatzVar
  %_ = sub i32 0, %232
  %gen = add i32 %_, 2
  %_2 = sub i32 0, %232
  %gen3 = add i32 %_2, 2
  %_4 = sub i32 0, %232
  %gen5 = add i32 %_4, 2
  %_6 = sub i32 0, %232
  %gen7 = add i32 %_6, 2
  %233 = srem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  br label %originalBB1

originalBB11alteredBB:                            ; preds = %originalBB11, %66
  %235 = load i32, i32* %collatzVar
  %236 = sdiv i32 %235, 2
  store i32 %236, i32* %collatzVar
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %85
  %237 = load i32, i32* %collatzVar
  %_16 = sub i32 %237, 3
  %gen17 = mul i32 %_16, 3
  %_18 = sub i32 0, %237
  %gen19 = add i32 %_18, 3
  %_20 = sub i32 %237, 3
  %gen21 = mul i32 %_20, 3
  %_22 = sub i32 %237, 3
  %gen23 = mul i32 %_22, 3
  %_24 = sub i32 %237, 3
  %gen25 = mul i32 %_24, 3
  %238 = mul i32 %237, 3
  %_26 = sub i32 %238, 1
  %gen27 = mul i32 %_26, 1
  %239 = add i32 %238, 1
  store i32 %239, i32* %collatzVar
  br label %originalBB15

originalBB31alteredBB:                            ; preds = %originalBB31, %125
  store i1 false, i1* %3, align 1, !dbg !4763
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %142
  %240 = load i32, i32* %5, align 4, !dbg !4764
  %_36 = shl i32 %240, 1
  %241 = and i32 %240, 1, !dbg !4766
  %242 = icmp ne i32 %241, 0, !dbg !4766
  br label %originalBB35

originalBB40alteredBB:                            ; preds = %originalBB40, %176
  %243 = call i32* @__errno_location() #15, !dbg !4777
  %244 = load i32, i32* %243, align 4, !dbg !4777
  %245 = icmp eq i32 %244, 3, !dbg !4778
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %196
  store i1 false, i1* %3, align 1, !dbg !4780
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %214
  %246 = load i1, i1* %3, align 1, !dbg !4782
  br label %originalBB48
}

declare dso_local void @endutxent() #3

; Function Attrs: nounwind
declare dso_local i32 @kill(i32, i32) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !4783 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !4787, metadata !DIExpression()), !dbg !4788
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4789, metadata !DIExpression()), !dbg !4790
  call void @llvm.dbg.declare(metadata i8** %6, metadata !4791, metadata !DIExpression()), !dbg !4792
  %10 = load i8*, i8** %4, align 8, !dbg !4793
  store i8* %10, i8** %6, align 8, !dbg !4792
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4794, metadata !DIExpression()), !dbg !4795
  %11 = load i8*, i8** %5, align 8, !dbg !4796
  store i8* %11, i8** %7, align 8, !dbg !4795
  call void @llvm.dbg.declare(metadata i8* %8, metadata !4797, metadata !DIExpression()), !dbg !4798
  call void @llvm.dbg.declare(metadata i8* %9, metadata !4799, metadata !DIExpression()), !dbg !4800
  %12 = load i8*, i8** %6, align 8, !dbg !4801
  %13 = load i8*, i8** %7, align 8, !dbg !4803
  %14 = icmp eq i8* %12, %13, !dbg !4804
  br i1 %14, label %15, label %16, !dbg !4805

15:                                               ; preds = %2
  store i32 0, i32* %3, align 4, !dbg !4806
  br label %113, !dbg !4806

16:                                               ; preds = %2
  %17 = load i32, i32* @x.111
  %18 = load i32, i32* @y.112
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = load i32, i32* @x.111
  %26 = load i32, i32* @y.112
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %33, !dbg !4807

33:                                               ; preds = %85, %originalBBpart2
  %34 = load i32, i32* @x.111
  %35 = load i32, i32* @y.112
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %6, align 8, !dbg !4808
  %43 = load i8, i8* %42, align 1, !dbg !4810
  %44 = zext i8 %43 to i32, !dbg !4810
  %45 = call i32 @c_tolower(i32 %44), !dbg !4811
  %46 = trunc i32 %45 to i8, !dbg !4811
  store i8 %46, i8* %8, align 1, !dbg !4812
  %47 = load i8*, i8** %7, align 8, !dbg !4813
  %48 = load i8, i8* %47, align 1, !dbg !4814
  %49 = zext i8 %48 to i32, !dbg !4814
  %50 = call i32 @c_tolower(i32 %49), !dbg !4815
  %51 = trunc i32 %50 to i8, !dbg !4815
  store i8 %51, i8* %9, align 1, !dbg !4816
  %52 = load i8, i8* %8, align 1, !dbg !4817
  %53 = zext i8 %52 to i32, !dbg !4817
  %54 = icmp eq i32 %53, 0, !dbg !4819
  %55 = load i32, i32* @x.111
  %56 = load i32, i32* @y.112
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %54, label %63, label %64, !dbg !4820

63:                                               ; preds = %originalBBpart24
  br label %91, !dbg !4821

64:                                               ; preds = %originalBBpart24
  %65 = load i32, i32* @x.111
  %66 = load i32, i32* @y.112
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %64, %originalBB6alteredBB
  %73 = load i8*, i8** %6, align 8, !dbg !4822
  %74 = getelementptr inbounds i8, i8* %73, i32 1, !dbg !4822
  store i8* %74, i8** %6, align 8, !dbg !4822
  %75 = load i8*, i8** %7, align 8, !dbg !4823
  %76 = getelementptr inbounds i8, i8* %75, i32 1, !dbg !4823
  store i8* %76, i8** %7, align 8, !dbg !4823
  %77 = load i32, i32* @x.111
  %78 = load i32, i32* @y.112
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %85, !dbg !4824

85:                                               ; preds = %originalBBpart28
  %86 = load i8, i8* %8, align 1, !dbg !4825
  %87 = zext i8 %86 to i32, !dbg !4825
  %88 = load i8, i8* %9, align 1, !dbg !4826
  %89 = zext i8 %88 to i32, !dbg !4826
  %90 = icmp eq i32 %87, %89, !dbg !4827
  br i1 %90, label %33, label %91, !dbg !4824, !llvm.loop !4828

91:                                               ; preds = %85, %63
  %92 = load i32, i32* @x.111
  %93 = load i32, i32* @y.112
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %91, %originalBB10alteredBB
  %100 = load i8, i8* %8, align 1, !dbg !4830
  %101 = zext i8 %100 to i32, !dbg !4830
  %102 = load i8, i8* %9, align 1, !dbg !4832
  %103 = zext i8 %102 to i32, !dbg !4832
  %104 = sub nsw i32 %101, %103, !dbg !4833
  store i32 %104, i32* %3, align 4, !dbg !4834
  %105 = load i32, i32* @x.111
  %106 = load i32, i32* @y.112
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart222, label %originalBB10alteredBB

originalBBpart222:                                ; preds = %originalBB10
  br label %113, !dbg !4834

113:                                              ; preds = %originalBBpart222, %15
  %114 = load i32, i32* %3, align 4, !dbg !4835
  ret i32 %114, !dbg !4835

originalBBalteredBB:                              ; preds = %originalBB, %16
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %115 = load i8*, i8** %6, align 8, !dbg !4808
  %116 = load i8, i8* %115, align 1, !dbg !4810
  %117 = zext i8 %116 to i32, !dbg !4810
  %118 = call i32 @c_tolower(i32 %117), !dbg !4811
  %119 = trunc i32 %118 to i8, !dbg !4811
  store i8 %119, i8* %8, align 1, !dbg !4812
  %120 = load i8*, i8** %7, align 8, !dbg !4813
  %121 = load i8, i8* %120, align 1, !dbg !4814
  %122 = zext i8 %121 to i32, !dbg !4814
  %123 = call i32 @c_tolower(i32 %122), !dbg !4815
  %124 = trunc i32 %123 to i8, !dbg !4815
  store i8 %124, i8* %9, align 1, !dbg !4816
  %125 = load i8, i8* %8, align 1, !dbg !4817
  %126 = zext i8 %125 to i32, !dbg !4817
  %127 = icmp eq i32 %126, 0, !dbg !4819
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %64
  %128 = load i8*, i8** %6, align 8, !dbg !4822
  %129 = getelementptr inbounds i8, i8* %128, i32 1, !dbg !4822
  store i8* %129, i8** %6, align 8, !dbg !4822
  %130 = load i8*, i8** %7, align 8, !dbg !4823
  %131 = getelementptr inbounds i8, i8* %130, i32 1, !dbg !4823
  store i8* %131, i8** %7, align 8, !dbg !4823
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %91
  %132 = load i8, i8* %8, align 1, !dbg !4830
  %133 = zext i8 %132 to i32, !dbg !4830
  %134 = load i8, i8* %9, align 1, !dbg !4832
  %135 = zext i8 %134 to i32, !dbg !4832
  %_ = sub i32 %133, %135
  %gen = mul i32 %_, %135
  %_11 = shl i32 %133, %135
  %_12 = sub i32 %133, %135
  %gen13 = mul i32 %_12, %135
  %_14 = shl i32 %133, %135
  %_15 = sub i32 %133, %135
  %gen16 = mul i32 %_15, %135
  %_17 = sub i32 %133, %135
  %gen18 = mul i32 %_17, %135
  %_19 = sub i32 %133, %135
  %gen20 = mul i32 %_19, %135
  %136 = sub nsw i32 %133, %135, !dbg !4833
  store i32 %136, i32* %3, align 4, !dbg !4834
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !4836 {
  %2 = load i32, i32* @x.113
  %3 = load i32, i32* @y.114
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !4874, metadata !DIExpression()), !dbg !4875
  call void @llvm.dbg.declare(metadata i8* %12, metadata !4876, metadata !DIExpression()), !dbg !4878
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4879
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !4880
  %17 = icmp ne i64 %16, 0, !dbg !4881
  %18 = zext i1 %17 to i8, !dbg !4878
  store i8 %18, i8* %12, align 1, !dbg !4878
  call void @llvm.dbg.declare(metadata i8* %13, metadata !4882, metadata !DIExpression()), !dbg !4883
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4884
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !4884
  %21 = icmp ne i32 %20, 0, !dbg !4885
  %22 = zext i1 %21 to i8, !dbg !4883
  store i8 %22, i8* %13, align 1, !dbg !4883
  call void @llvm.dbg.declare(metadata i8* %14, metadata !4886, metadata !DIExpression()), !dbg !4887
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4888
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !4889
  %25 = icmp ne i32 %24, 0, !dbg !4890
  %26 = zext i1 %25 to i8, !dbg !4887
  store i8 %26, i8* %14, align 1, !dbg !4887
  %27 = load i8, i8* %13, align 1, !dbg !4891
  %28 = trunc i8 %27 to i1, !dbg !4891
  %29 = load i32, i32* @x.113
  %30 = load i32, i32* @y.114
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %79, label %37, !dbg !4893

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.113
  %39 = load i32, i32* @y.114
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !4894
  %47 = trunc i8 %46 to i1, !dbg !4894
  %48 = load i32, i32* @x.113
  %49 = load i32, i32* @y.114
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %133, !dbg !4895

56:                                               ; preds = %originalBBpart24
  %57 = load i8, i8* %12, align 1, !dbg !4896
  %58 = trunc i8 %57 to i1, !dbg !4896
  br i1 %58, label %79, label %59, !dbg !4897

59:                                               ; preds = %56
  %60 = load i32, i32* @x.113
  %61 = load i32, i32* @y.114
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = call i32* @__errno_location() #15, !dbg !4898
  %69 = load i32, i32* %68, align 4, !dbg !4898
  %70 = icmp ne i32 %69, 9, !dbg !4899
  %71 = load i32, i32* @x.113
  %72 = load i32, i32* @y.114
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %133, !dbg !4900

79:                                               ; preds = %originalBBpart28, %56, %originalBBpart2
  %80 = load i32, i32* @x.113
  %81 = load i32, i32* @y.114
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i8, i8* %14, align 1, !dbg !4901
  %89 = trunc i8 %88 to i1, !dbg !4901
  %90 = load i32, i32* @x.113
  %91 = load i32, i32* @y.114
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %89, label %116, label %98, !dbg !4904

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.113
  %100 = load i32, i32* @y.114
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = call i32* @__errno_location() #15, !dbg !4905
  store i32 0, i32* %107, align 4, !dbg !4906
  %108 = load i32, i32* @x.113
  %109 = load i32, i32* @y.114
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %116, !dbg !4905

116:                                              ; preds = %originalBBpart216, %originalBBpart212
  %117 = load i32, i32* @x.113
  %118 = load i32, i32* @y.114
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %116, %originalBB18alteredBB
  store i32 -1, i32* %10, align 4, !dbg !4907
  %125 = load i32, i32* @x.113
  %126 = load i32, i32* @y.114
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %134, !dbg !4907

133:                                              ; preds = %originalBBpart28, %originalBBpart24
  store i32 0, i32* %10, align 4, !dbg !4908
  br label %134, !dbg !4908

134:                                              ; preds = %133, %originalBBpart220
  %135 = load i32, i32* %10, align 4, !dbg !4909
  ret i32 %135, !dbg !4909

originalBBalteredBB:                              ; preds = %originalBB, %1
  %136 = alloca i32, align 4
  %137 = alloca %struct._IO_FILE*, align 8
  %138 = alloca i8, align 1
  %139 = alloca i8, align 1
  %140 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %137, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %137, metadata !4910, metadata !DIExpression()), !dbg !4875
  call void @llvm.dbg.declare(metadata i8* %138, metadata !4949, metadata !DIExpression()), !dbg !4878
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** %137, align 8, !dbg !4879
  %142 = call i64 @__fpending(%struct._IO_FILE* %141) #10, !dbg !4880
  %143 = icmp ne i64 %142, 0, !dbg !4881
  %144 = zext i1 %143 to i8, !dbg !4878
  store i8 %144, i8* %138, align 1, !dbg !4878
  call void @llvm.dbg.declare(metadata i8* %139, metadata !4950, metadata !DIExpression()), !dbg !4883
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** %137, align 8, !dbg !4884
  %146 = call i32 @ferror_unlocked(%struct._IO_FILE* %145) #10, !dbg !4884
  %147 = icmp ne i32 %146, 0, !dbg !4885
  %148 = zext i1 %147 to i8, !dbg !4883
  store i8 %148, i8* %139, align 1, !dbg !4883
  call void @llvm.dbg.declare(metadata i8* %140, metadata !4951, metadata !DIExpression()), !dbg !4887
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** %137, align 8, !dbg !4888
  %150 = call i32 @rpl_fclose(%struct._IO_FILE* %149), !dbg !4889
  %151 = icmp ne i32 %150, 0, !dbg !4890
  %152 = zext i1 %151 to i8, !dbg !4887
  store i8 %152, i8* %140, align 1, !dbg !4887
  %153 = load i8, i8* %139, align 1, !dbg !4891
  %154 = trunc i8 %153 to i1, !dbg !4891
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %155 = load i8, i8* %14, align 1, !dbg !4894
  %156 = trunc i8 %155 to i1, !dbg !4894
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %157 = call i32* @__errno_location() #15, !dbg !4898
  %158 = load i32, i32* %157, align 4, !dbg !4898
  %159 = icmp ne i32 %158, 9, !dbg !4899
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %160 = load i8, i8* %14, align 1, !dbg !4901
  %161 = trunc i8 %160 to i1, !dbg !4901
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  %162 = call i32* @__errno_location() #15, !dbg !4905
  store i32 0, i32* %162, align 4, !dbg !4906
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %116
  store i32 -1, i32* %10, align 4, !dbg !4907
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !4952 {
  %1 = load i32, i32* @x.115
  %2 = load i32, i32* @y.116
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !4956, metadata !DIExpression()), !dbg !4957
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !4958
  store i8* %10, i8** %9, align 8, !dbg !4959
  %11 = load i8*, i8** %9, align 8, !dbg !4960
  %12 = icmp eq i8* %11, null, !dbg !4962
  %13 = load i32, i32* @x.115
  %14 = load i32, i32* @y.116
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !4963

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.115
  %23 = load i32, i32* @y.116
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.179, i64 0, i64 0), i8** %9, align 8, !dbg !4964
  %30 = load i32, i32* @x.115
  %31 = load i32, i32* @y.116
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !4965

38:                                               ; preds = %originalBBpart24, %originalBBpart2
  %39 = load i8*, i8** %9, align 8, !dbg !4966
  %40 = getelementptr inbounds i8, i8* %39, i64 0, !dbg !4966
  %41 = load i8, i8* %40, align 1, !dbg !4966
  %42 = sext i8 %41 to i32, !dbg !4966
  %43 = icmp eq i32 %42, 0, !dbg !4970
  br i1 %43, label %44, label %45, !dbg !4971

44:                                               ; preds = %38
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.180, i64 0, i64 0), i8** %9, align 8, !dbg !4972
  br label %45, !dbg !4973

45:                                               ; preds = %44, %38
  %46 = load i8*, i8** %9, align 8, !dbg !4974
  ret i8* %46, !dbg !4975

originalBBalteredBB:                              ; preds = %originalBB, %0
  %47 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %47, metadata !4976, metadata !DIExpression()), !dbg !4957
  %48 = call i8* @nl_langinfo(i32 14) #10, !dbg !4958
  store i8* %48, i8** %47, align 8, !dbg !4959
  %49 = load i8*, i8** %47, align 8, !dbg !4960
  %50 = icmp eq i8* %49, null, !dbg !4962
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.179, i64 0, i64 0), i8** %9, align 8, !dbg !4964
  br label %originalBB1
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !4979 {
  %2 = load i32, i32* @x.117
  %3 = load i32, i32* @y.118
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !5017, metadata !DIExpression()), !dbg !5018
  call void @llvm.dbg.declare(metadata i32* %12, metadata !5019, metadata !DIExpression()), !dbg !5020
  store i32 0, i32* %12, align 4, !dbg !5020
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5021, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.declare(metadata i32* %14, metadata !5023, metadata !DIExpression()), !dbg !5024
  store i32 0, i32* %14, align 4, !dbg !5024
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5025
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !5026
  store i32 %16, i32* %13, align 4, !dbg !5027
  %17 = load i32, i32* %13, align 4, !dbg !5028
  %18 = icmp slt i32 %17, 0, !dbg !5030
  %19 = load i32, i32* @x.117
  %20 = load i32, i32* @y.118
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %30, !dbg !5031

27:                                               ; preds = %originalBBpart2
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5032
  %29 = call i32 @fclose(%struct._IO_FILE* %28), !dbg !5033
  store i32 %29, i32* %10, align 4, !dbg !5034
  br label %88, !dbg !5034

30:                                               ; preds = %originalBBpart2
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5035
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !5035
  %33 = icmp ne i32 %32, 0, !dbg !5035
  br i1 %33, label %34, label %55, !dbg !5037

34:                                               ; preds = %30
  %35 = load i32, i32* @x.117
  %36 = load i32, i32* @y.118
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %34, %originalBB1alteredBB
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5038
  %44 = call i32 @fileno(%struct._IO_FILE* %43) #10, !dbg !5039
  %45 = call i64 @lseek(i32 %44, i64 0, i32 1) #10, !dbg !5040
  %46 = icmp ne i64 %45, -1, !dbg !5041
  %47 = load i32, i32* @x.117
  %48 = load i32, i32* @y.118
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %46, label %55, label %62, !dbg !5042

55:                                               ; preds = %originalBBpart24, %30
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5043
  %57 = call i32 @rpl_fflush(%struct._IO_FILE* %56), !dbg !5044
  %58 = icmp ne i32 %57, 0, !dbg !5044
  br i1 %58, label %59, label %62, !dbg !5045

59:                                               ; preds = %55
  %60 = call i32* @__errno_location() #15, !dbg !5046
  %61 = load i32, i32* %60, align 4, !dbg !5046
  store i32 %61, i32* %12, align 4, !dbg !5047
  br label %62, !dbg !5048

62:                                               ; preds = %59, %55, %originalBBpart24
  %63 = load i32, i32* @x.117
  %64 = load i32, i32* @y.118
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %62, %originalBB6alteredBB
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5049
  %72 = call i32 @fclose(%struct._IO_FILE* %71), !dbg !5050
  store i32 %72, i32* %14, align 4, !dbg !5051
  %73 = load i32, i32* %12, align 4, !dbg !5052
  %74 = icmp ne i32 %73, 0, !dbg !5054
  %75 = load i32, i32* @x.117
  %76 = load i32, i32* @y.118
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %74, label %83, label %86, !dbg !5055

83:                                               ; preds = %originalBBpart28
  %84 = load i32, i32* %12, align 4, !dbg !5056
  %85 = call i32* @__errno_location() #15, !dbg !5058
  store i32 %84, i32* %85, align 4, !dbg !5059
  store i32 -1, i32* %14, align 4, !dbg !5060
  br label %86, !dbg !5061

86:                                               ; preds = %83, %originalBBpart28
  %87 = load i32, i32* %14, align 4, !dbg !5062
  store i32 %87, i32* %10, align 4, !dbg !5063
  br label %88, !dbg !5063

88:                                               ; preds = %86, %27
  %89 = load i32, i32* %10, align 4, !dbg !5064
  ret i32 %89, !dbg !5064

originalBBalteredBB:                              ; preds = %originalBB, %1
  %90 = alloca i32, align 4
  %91 = alloca %struct._IO_FILE*, align 8
  %92 = alloca i32, align 4
  %93 = alloca i32, align 4
  %94 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %91, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %91, metadata !5065, metadata !DIExpression()), !dbg !5018
  call void @llvm.dbg.declare(metadata i32* %92, metadata !5104, metadata !DIExpression()), !dbg !5020
  store i32 0, i32* %92, align 4, !dbg !5020
  call void @llvm.dbg.declare(metadata i32* %93, metadata !5105, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.declare(metadata i32* %94, metadata !5106, metadata !DIExpression()), !dbg !5024
  store i32 0, i32* %94, align 4, !dbg !5024
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** %91, align 8, !dbg !5025
  %96 = call i32 @fileno(%struct._IO_FILE* %95) #10, !dbg !5026
  store i32 %96, i32* %93, align 4, !dbg !5027
  %97 = load i32, i32* %93, align 4, !dbg !5028
  %98 = icmp slt i32 %97, 0, !dbg !5030
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %34
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5038
  %100 = call i32 @fileno(%struct._IO_FILE* %99) #10, !dbg !5039
  %101 = call i64 @lseek(i32 %100, i64 0, i32 1) #10, !dbg !5040
  %102 = icmp ne i64 %101, -1, !dbg !5041
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %62
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5049
  %104 = call i32 @fclose(%struct._IO_FILE* %103), !dbg !5050
  store i32 %104, i32* %14, align 4, !dbg !5051
  %105 = load i32, i32* %12, align 4, !dbg !5052
  %106 = icmp ne i32 %105, 0, !dbg !5054
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !5107 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !5145, metadata !DIExpression()), !dbg !5146
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5147
  %5 = icmp eq %struct._IO_FILE* %4, null, !dbg !5149
  br i1 %5, label %10, label %6, !dbg !5150

6:                                                ; preds = %1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5151
  %8 = call i32 @__freading(%struct._IO_FILE* %7) #10, !dbg !5151
  %9 = icmp ne i32 %8, 0, !dbg !5151
  br i1 %9, label %13, label %10, !dbg !5152

10:                                               ; preds = %6, %1
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5153
  %12 = call i32 @fflush(%struct._IO_FILE* %11), !dbg !5154
  store i32 %12, i32* %2, align 4, !dbg !5155
  br label %33, !dbg !5155

13:                                               ; preds = %6
  %14 = load i32, i32* @x.119
  %15 = load i32, i32* @y.120
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %13, %originalBBalteredBB
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5156
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %22), !dbg !5157
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5158
  %24 = call i32 @fflush(%struct._IO_FILE* %23), !dbg !5159
  store i32 %24, i32* %2, align 4, !dbg !5160
  %25 = load i32, i32* @x.119
  %26 = load i32, i32* @y.120
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %33, !dbg !5160

33:                                               ; preds = %originalBBpart2, %10
  %34 = load i32, i32* %2, align 4, !dbg !5161
  ret i32 %34, !dbg !5161

originalBBalteredBB:                              ; preds = %originalBB, %13
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5156
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %35), !dbg !5157
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5158
  %37 = call i32 @fflush(%struct._IO_FILE* %36), !dbg !5159
  store i32 %37, i32* %2, align 4, !dbg !5160
  br label %originalBB
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !5162 {
  %2 = load i32, i32* @x.121
  %3 = load i32, i32* @y.122
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !5165, metadata !DIExpression()), !dbg !5166
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !5167
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !5169
  %13 = load i32, i32* %12, align 8, !dbg !5169
  %14 = and i32 %13, 256, !dbg !5170
  %15 = icmp ne i32 %14, 0, !dbg !5170
  %16 = load i32, i32* @x.121
  %17 = load i32, i32* @y.122
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %27, !dbg !5171

24:                                               ; preds = %originalBBpart2
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !5172
  %26 = call i32 @rpl_fseeko(%struct._IO_FILE* %25, i64 0, i32 1), !dbg !5173
  br label %27, !dbg !5173

27:                                               ; preds = %24, %originalBBpart2
  %28 = load i32, i32* @x.121
  %29 = load i32, i32* @y.122
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB2, label %originalBB2alteredBB

originalBB2:                                      ; preds = %27, %originalBB2alteredBB
  %36 = load i32, i32* @x.121
  %37 = load i32, i32* @y.122
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB2alteredBB

originalBBpart24:                                 ; preds = %originalBB2
  ret void, !dbg !5174

originalBBalteredBB:                              ; preds = %originalBB, %1
  %44 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %44, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %44, metadata !5175, metadata !DIExpression()), !dbg !5166
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %44, align 8, !dbg !5167
  %46 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %45, i32 0, i32 0, !dbg !5169
  %47 = load i32, i32* %46, align 8, !dbg !5169
  %_ = shl i32 %47, 256
  %_1 = sub i32 0, %47
  %gen = add i32 %_1, 256
  %48 = and i32 %47, 256, !dbg !5170
  %49 = icmp ne i32 %48, 0, !dbg !5170
  br label %originalBB

originalBB2alteredBB:                             ; preds = %originalBB2, %27
  br label %originalBB2
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !5214 {
  %4 = alloca i32, align 4
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %5, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %5, metadata !5253, metadata !DIExpression()), !dbg !5254
  store i64 %1, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !5255, metadata !DIExpression()), !dbg !5256
  store i32 %2, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !5257, metadata !DIExpression()), !dbg !5258
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5259
  %10 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %9, i32 0, i32 2, !dbg !5261
  %11 = load i8*, i8** %10, align 8, !dbg !5261
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5262
  %13 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %12, i32 0, i32 1, !dbg !5263
  %14 = load i8*, i8** %13, align 8, !dbg !5263
  %15 = icmp eq i8* %11, %14, !dbg !5264
  br i1 %15, label %16, label %94, !dbg !5265

16:                                               ; preds = %3
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5266
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 5, !dbg !5267
  %19 = load i8*, i8** %18, align 8, !dbg !5267
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5268
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 4, !dbg !5269
  %22 = load i8*, i8** %21, align 8, !dbg !5269
  %23 = icmp eq i8* %19, %22, !dbg !5270
  br i1 %23, label %24, label %94, !dbg !5271

24:                                               ; preds = %16
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5272
  %26 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %25, i32 0, i32 9, !dbg !5273
  %27 = load i8*, i8** %26, align 8, !dbg !5273
  %28 = icmp eq i8* %27, null, !dbg !5274
  br i1 %28, label %29, label %94, !dbg !5275

29:                                               ; preds = %24
  call void @llvm.dbg.declare(metadata i64* %8, metadata !5276, metadata !DIExpression()), !dbg !5278
  %30 = load i32, i32* @x.123
  %31 = load i32, i32* @y.124
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %29, %originalBBalteredBB
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5279
  %39 = call i32 @fileno(%struct._IO_FILE* %38) #10, !dbg !5280
  %40 = load i64, i64* %6, align 8, !dbg !5281
  %41 = load i32, i32* %7, align 4, !dbg !5282
  %42 = call i64 @lseek(i32 %39, i64 %40, i32 %41) #10, !dbg !5283
  store i64 %42, i64* %8, align 8, !dbg !5278
  %43 = load i64, i64* %8, align 8, !dbg !5284
  %44 = icmp eq i64 %43, -1, !dbg !5286
  %45 = load i32, i32* @x.123
  %46 = load i32, i32* @y.124
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %44, label %53, label %70, !dbg !5287

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* @x.123
  %55 = load i32, i32* @y.124
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %53, %originalBB1alteredBB
  store i32 -1, i32* %4, align 4, !dbg !5288
  %62 = load i32, i32* @x.123
  %63 = load i32, i32* @y.124
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %115, !dbg !5288

70:                                               ; preds = %originalBBpart2
  %71 = load i32, i32* @x.123
  %72 = load i32, i32* @y.124
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %70, %originalBB6alteredBB
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5290
  %80 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %79, i32 0, i32 0, !dbg !5291
  %81 = load i32, i32* %80, align 8, !dbg !5292
  %82 = and i32 %81, -17, !dbg !5292
  store i32 %82, i32* %80, align 8, !dbg !5292
  %83 = load i64, i64* %8, align 8, !dbg !5293
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5294
  %85 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %84, i32 0, i32 21, !dbg !5295
  store i64 %83, i64* %85, align 8, !dbg !5296
  store i32 0, i32* %4, align 4, !dbg !5297
  %86 = load i32, i32* @x.123
  %87 = load i32, i32* @y.124
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBBpart29, label %originalBB6alteredBB

originalBBpart29:                                 ; preds = %originalBB6
  br label %115, !dbg !5297

94:                                               ; preds = %24, %16, %3
  %95 = load i32, i32* @x.123
  %96 = load i32, i32* @y.124
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %94, %originalBB11alteredBB
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5298
  %104 = load i64, i64* %6, align 8, !dbg !5299
  %105 = load i32, i32* %7, align 4, !dbg !5300
  %106 = call i32 @fseeko(%struct._IO_FILE* %103, i64 %104, i32 %105), !dbg !5301
  store i32 %106, i32* %4, align 4, !dbg !5302
  %107 = load i32, i32* @x.123
  %108 = load i32, i32* @y.124
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %115, !dbg !5302

115:                                              ; preds = %originalBBpart213, %originalBBpart29, %originalBBpart24
  %116 = load i32, i32* @x.123
  %117 = load i32, i32* @y.124
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %115, %originalBB15alteredBB
  %124 = load i32, i32* %4, align 4, !dbg !5303
  %125 = load i32, i32* @x.123
  %126 = load i32, i32* @y.124
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  ret i32 %124, !dbg !5303

originalBBalteredBB:                              ; preds = %originalBB, %29
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5279
  %134 = call i32 @fileno(%struct._IO_FILE* %133) #10, !dbg !5280
  %135 = load i64, i64* %6, align 8, !dbg !5281
  %136 = load i32, i32* %7, align 4, !dbg !5282
  %137 = call i64 @lseek(i32 %134, i64 %135, i32 %136) #10, !dbg !5283
  store i64 %137, i64* %8, align 8, !dbg !5278
  %138 = load i64, i64* %8, align 8, !dbg !5284
  %139 = icmp eq i64 %138, -1, !dbg !5286
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %53
  store i32 -1, i32* %4, align 4, !dbg !5288
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %70
  %140 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5290
  %141 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %140, i32 0, i32 0, !dbg !5291
  %142 = load i32, i32* %141, align 8, !dbg !5292
  %_ = sub i32 0, %142
  %gen = add i32 %_, -17
  %_7 = shl i32 %142, -17
  %143 = and i32 %142, -17, !dbg !5292
  store i32 %143, i32* %141, align 8, !dbg !5292
  %144 = load i64, i64* %8, align 8, !dbg !5293
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5294
  %146 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %145, i32 0, i32 21, !dbg !5295
  store i64 %144, i64* %146, align 8, !dbg !5296
  store i32 0, i32* %4, align 4, !dbg !5297
  br label %originalBB6

originalBB11alteredBB:                            ; preds = %originalBB11, %94
  %147 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !5298
  %148 = load i64, i64* %6, align 8, !dbg !5299
  %149 = load i32, i32* %7, align 4, !dbg !5300
  %150 = call i32 @fseeko(%struct._IO_FILE* %147, i64 %148, i32 %149), !dbg !5301
  store i32 %150, i32* %4, align 4, !dbg !5302
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %115
  %151 = load i32, i32* %4, align 4, !dbg !5303
  br label %originalBB15
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @inVal0
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  call void @srand(i32 %1)
  %6 = call i32 @rand()
  %7 = srem i32 %6, 50000
  %8 = add i32 %7, 2
  ret i32 %8

9:                                                ; preds = %2
  %10 = load i32, i32* @x.125
  %11 = load i32, i32* @y.126
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal2, i32 0, i32 0
  %19 = call i32 @strcmp(i8* %18, i8* %0)
  %20 = icmp eq i32 %19, 0
  %21 = load i32, i32* @x.125
  %22 = load i32, i32* @y.126
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %32

29:                                               ; preds = %originalBBpart2
  %30 = icmp eq i32 %1, -1
  br i1 %30, label %31, label %32

31:                                               ; preds = %29
  ret i32 5

32:                                               ; preds = %29, %originalBBpart2
  %33 = load i32, i32* @x.125
  %34 = load i32, i32* @y.126
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %42 = call i32 @strcmp(i8* %41, i8* %0)
  %43 = icmp eq i32 %42, 0
  %44 = load i32, i32* @x.125
  %45 = load i32, i32* @y.126
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %43, label %52, label %71

52:                                               ; preds = %originalBBpart24
  %53 = icmp eq i32 %1, 7
  br i1 %53, label %54, label %71

54:                                               ; preds = %52
  %55 = load i32, i32* @x.125
  %56 = load i32, i32* @y.126
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  %63 = load i32, i32* @x.125
  %64 = load i32, i32* @y.126
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i32 3

71:                                               ; preds = %52, %originalBBpart24
  %72 = load i32, i32* @x.125
  %73 = load i32, i32* @y.126
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %71, %originalBB10alteredBB
  %80 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %81 = call i32 @strcmp(i8* %80, i8* %0)
  %82 = icmp eq i32 %81, 0
  %83 = load i32, i32* @x.125
  %84 = load i32, i32* @y.126
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %94

91:                                               ; preds = %originalBBpart212
  %92 = icmp eq i32 %1, -3
  br i1 %92, label %93, label %94

93:                                               ; preds = %91
  ret i32 3

94:                                               ; preds = %91, %originalBBpart212
  %95 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %96 = call i32 @strcmp(i8* %95, i8* %0)
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %117

98:                                               ; preds = %94
  %99 = load i32, i32* @x.125
  %100 = load i32, i32* @y.126
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = icmp eq i32 %1, 0
  %108 = load i32, i32* @x.125
  %109 = load i32, i32* @y.126
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %107, label %116, label %117

116:                                              ; preds = %originalBBpart216
  ret i32 5

117:                                              ; preds = %originalBBpart216, %94
  call void @srand(i32 %1)
  %118 = call i32 @rand()
  %119 = srem i32 %118, 50000
  %120 = add i32 %119, 2
  ret i32 %120

originalBBalteredBB:                              ; preds = %originalBB, %9
  %121 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal2, i32 0, i32 0
  %122 = call i32 @strcmp(i8* %121, i8* %0)
  %123 = icmp eq i32 %122, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %124 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %125 = call i32 @strcmp(i8* %124, i8* %0)
  %126 = icmp eq i32 %125, 0
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %71
  %127 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %128 = call i32 @strcmp(i8* %127, i8* %0)
  %129 = icmp eq i32 %128, 0
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  %130 = icmp eq i32 %1, 0
  br label %originalBB14
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !155, !286, !160, !198, !206, !288, !290, !213, !220, !296, !299, !279, !301, !304, !306, !309, !312, !318, !320, !322, !324, !326}
!llvm.ident = !{!328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328}
!llvm.module.flags = !{!329, !330, !331, !332, !333}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 162, type: !141, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !15, nameTableKind: None)
!3 = !DIFile(filename: "src/who.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !8, !9, !13, !14}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !10, line: 7, baseType: !11)
!10 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/time_t.h", directory: "")
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !12, line: 160, baseType: !13)
!12 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!13 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!14 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!15 = !{!16, !19, !21, !23, !25, !27, !29, !31, !33, !35, !37, !39, !41, !43, !45, !47, !51, !0, !54, !62, !108, !113, !118, !123, !131, !136, !138}
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!18 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "short_list", scope: !2, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "short_output", scope: !2, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "include_idle", scope: !2, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "include_heading", scope: !2, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(name: "include_exit", scope: !2, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "need_login", scope: !2, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!43 = !DIGlobalVariableExpression(var: !44, expr: !DIExpression())
!44 = distinct !DIGlobalVariable(name: "need_users", scope: !2, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!45 = !DIGlobalVariableExpression(var: !46, expr: !DIExpression())
!46 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!47 = !DIGlobalVariableExpression(var: !48, expr: !DIExpression())
!48 = distinct !DIGlobalVariable(name: "time_format", scope: !2, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!49 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!50 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!51 = !DIGlobalVariableExpression(var: !52, expr: !DIExpression())
!52 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!53 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(name: "mesg", scope: !56, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!56 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!57 = !DISubroutineType(types: !58)
!58 = !{null, !53, !49, !50, !53, !49, !49, !49, !49, !49, !49}
!59 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 24, elements: !60)
!60 = !{!61}
!61 = !DISubrange(count: 3)
!62 = !DIGlobalVariableExpression(var: !63, expr: !DIExpression())
!63 = distinct !DIGlobalVariable(name: "hoststr", scope: !64, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!64 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !65, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!65 = !DISubroutineType(types: !66)
!66 = !{null, !67, !9}
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64)
!68 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !69)
!69 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !71)
!70 = !DIFile(filename: "./lib/readutmp.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!71 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !73)
!72 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/utmpx.h", directory: "")
!73 = !{!74, !75, !77, !81, !85, !86, !90, !95, !97, !102, !104}
!74 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !71, file: !72, line: 57, baseType: !14, size: 16)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !71, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!76 = !DIDerivedType(tag: DW_TAG_typedef, name: "__pid_t", file: !12, line: 154, baseType: !53)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !71, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!78 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 256, elements: !79)
!79 = !{!80}
!80 = !DISubrange(count: 32)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !71, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!82 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 32, elements: !83)
!83 = !{!84}
!84 = !DISubrange(count: 4)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !71, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !71, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2048, elements: !88)
!88 = !{!89}
!89 = !DISubrange(count: 256)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !71, file: !72, line: 67, baseType: !91, size: 32, offset: 2656)
!91 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !92)
!92 = !{!93, !94}
!93 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !91, file: !72, line: 45, baseType: !14, size: 16)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !91, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !71, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!96 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !12, line: 41, baseType: !53)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !71, file: !72, line: 79, baseType: !98, size: 64, offset: 2720)
!98 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !71, file: !72, line: 75, size: 64, elements: !99)
!99 = !{!100, !101}
!100 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !98, file: !72, line: 77, baseType: !96, size: 32)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !98, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !71, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!103 = !DICompositeType(tag: DW_TAG_array_type, baseType: !96, size: 128, elements: !83)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !71, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!105 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 160, elements: !106)
!106 = !{!107}
!107 = !DISubrange(count: 20)
!108 = !DIGlobalVariableExpression(var: !109, expr: !DIExpression())
!109 = distinct !DIGlobalVariable(name: "hostlen", scope: !64, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!110 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !111, line: 46, baseType: !112)
!111 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!112 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!113 = !DIGlobalVariableExpression(var: !114, expr: !DIExpression())
!114 = distinct !DIGlobalVariable(name: "now", scope: !115, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!115 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!116 = !DISubroutineType(types: !117)
!117 = !{!49, !9, !9}
!118 = !DIGlobalVariableExpression(var: !119, expr: !DIExpression())
!119 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !115, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!120 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 48, elements: !121)
!121 = !{!122}
!122 = !DISubrange(count: 6)
!123 = !DIGlobalVariableExpression(var: !124, expr: !DIExpression())
!124 = distinct !DIGlobalVariable(name: "buf", scope: !125, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!125 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !126, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!126 = !DISubroutineType(types: !127)
!127 = !{!49, !67}
!128 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 264, elements: !129)
!129 = !{!130}
!130 = !DISubrange(count: 33)
!131 = !DIGlobalVariableExpression(var: !132, expr: !DIExpression())
!132 = distinct !DIGlobalVariable(name: "runlevline", scope: !133, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!133 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !134, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!134 = !DISubroutineType(types: !135)
!135 = !{null, !67}
!136 = !DIGlobalVariableExpression(var: !137, expr: !DIExpression())
!137 = distinct !DIGlobalVariable(name: "comment", scope: !133, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!138 = !DIGlobalVariableExpression(var: !139, expr: !DIExpression())
!139 = distinct !DIGlobalVariable(name: "exitstr", scope: !140, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!140 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !134, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!141 = !DICompositeType(tag: DW_TAG_array_type, baseType: !142, size: 4608, elements: !151)
!142 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !143)
!143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !145)
!144 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!145 = !{!146, !147, !148, !150}
!146 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !143, file: !144, line: 52, baseType: !49, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !143, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !143, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !143, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!151 = !{!152}
!152 = !DISubrange(count: 18)
!153 = !DIGlobalVariableExpression(var: !154, expr: !DIExpression())
!154 = distinct !DIGlobalVariable(name: "Version", scope: !155, file: !156, line: 2, type: !49, isLocal: false, isDefinition: true)
!155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !157, nameTableKind: None)
!156 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!157 = !{!153}
!158 = !DIGlobalVariableExpression(var: !159, expr: !DIExpression())
!159 = distinct !DIGlobalVariable(name: "last_cherror", scope: !160, file: !166, line: 28, type: !53, isLocal: true, isDefinition: true)
!160 = distinct !DICompileUnit(language: DW_LANG_C99, file: !161, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !162, nameTableKind: None)
!161 = !DIFile(filename: "./lib/canon-host.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!162 = !{!163, !158}
!163 = !DIGlobalVariableExpression(var: !164, expr: !DIExpression())
!164 = distinct !DIGlobalVariable(name: "hints", scope: !165, file: !166, line: 64, type: !169, isLocal: true, isDefinition: true)
!165 = distinct !DISubprogram(name: "canon_host_r", scope: !166, file: !166, line: 61, type: !167, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !160, retainedNodes: !4)
!166 = !DIFile(filename: "lib/canon-host.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!167 = !DISubroutineType(types: !168)
!168 = !{!6, !49, !149}
!169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "addrinfo", file: !170, line: 565, size: 384, elements: !171)
!170 = !DIFile(filename: "/usr/include/netdb.h", directory: "")
!171 = !{!172, !173, !174, !175, !176, !181, !193, !194}
!172 = !DIDerivedType(tag: DW_TAG_member, name: "ai_flags", scope: !169, file: !170, line: 567, baseType: !53, size: 32)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "ai_family", scope: !169, file: !170, line: 568, baseType: !53, size: 32, offset: 32)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "ai_socktype", scope: !169, file: !170, line: 569, baseType: !53, size: 32, offset: 64)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "ai_protocol", scope: !169, file: !170, line: 570, baseType: !53, size: 32, offset: 96)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addrlen", scope: !169, file: !170, line: 571, baseType: !177, size: 32, offset: 128)
!177 = !DIDerivedType(tag: DW_TAG_typedef, name: "socklen_t", file: !178, line: 33, baseType: !179)
!178 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/socket.h", directory: "")
!179 = !DIDerivedType(tag: DW_TAG_typedef, name: "__socklen_t", file: !12, line: 209, baseType: !180)
!180 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!181 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addr", scope: !169, file: !170, line: 572, baseType: !182, size: 64, offset: 192)
!182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !183, size: 64)
!183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr", file: !178, line: 178, size: 128, elements: !184)
!184 = !{!185, !189}
!185 = !DIDerivedType(tag: DW_TAG_member, name: "sa_family", scope: !183, file: !178, line: 180, baseType: !186, size: 16)
!186 = !DIDerivedType(tag: DW_TAG_typedef, name: "sa_family_t", file: !187, line: 28, baseType: !188)
!187 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/sockaddr.h", directory: "")
!188 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "sa_data", scope: !183, file: !178, line: 181, baseType: !190, size: 112, offset: 16)
!190 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 112, elements: !191)
!191 = !{!192}
!192 = !DISubrange(count: 14)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "ai_canonname", scope: !169, file: !170, line: 573, baseType: !6, size: 64, offset: 256)
!194 = !DIDerivedType(tag: DW_TAG_member, name: "ai_next", scope: !169, file: !170, line: 574, baseType: !195, size: 64, offset: 320)
!195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !169, size: 64)
!196 = !DIGlobalVariableExpression(var: !197, expr: !DIExpression())
!197 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !198, file: !203, line: 56, type: !18, isLocal: true, isDefinition: true)
!198 = distinct !DICompileUnit(language: DW_LANG_C99, file: !199, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !200, nameTableKind: None)
!199 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!200 = !{!201, !196}
!201 = !DIGlobalVariableExpression(var: !202, expr: !DIExpression())
!202 = distinct !DIGlobalVariable(name: "file_name", scope: !198, file: !203, line: 46, type: !49, isLocal: true, isDefinition: true)
!203 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!204 = !DIGlobalVariableExpression(var: !205, expr: !DIExpression())
!205 = distinct !DIGlobalVariable(name: "exit_failure", scope: !206, file: !209, line: 24, type: !210, isLocal: false, isDefinition: true)
!206 = distinct !DICompileUnit(language: DW_LANG_C99, file: !207, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !208, nameTableKind: None)
!207 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!208 = !{!204}
!209 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!210 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !53)
!211 = !DIGlobalVariableExpression(var: !212, expr: !DIExpression())
!212 = distinct !DIGlobalVariable(name: "program_name", scope: !213, file: !217, line: 33, type: !49, isLocal: false, isDefinition: true)
!213 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, globals: !216, nameTableKind: None)
!214 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!215 = !{!8, !6}
!216 = !{!211}
!217 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!218 = !DIGlobalVariableExpression(var: !219, expr: !DIExpression())
!219 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !220, file: !241, line: 116, type: !254, isLocal: true, isDefinition: true)
!220 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !238, nameTableKind: None)
!221 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!222 = !{!223}
!223 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !224, line: 32, baseType: !180, size: 32, elements: !225)
!224 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!225 = !{!226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236}
!226 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!227 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!228 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!229 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!230 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!231 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!232 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!233 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!234 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!235 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!236 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!237 = !{!53, !188, !110}
!238 = !{!239, !246, !252, !218, !264, !266, !273, !275}
!239 = !DIGlobalVariableExpression(var: !240, expr: !DIExpression())
!240 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !220, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!241 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!242 = !DICompositeType(tag: DW_TAG_array_type, baseType: !243, size: 704, elements: !244)
!243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !49)
!244 = !{!245}
!245 = !DISubrange(count: 11)
!246 = !DIGlobalVariableExpression(var: !247, expr: !DIExpression())
!247 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !220, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!248 = !DICompositeType(tag: DW_TAG_array_type, baseType: !249, size: 320, elements: !250)
!249 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !223)
!250 = !{!251}
!251 = !DISubrange(count: 10)
!252 = !DIGlobalVariableExpression(var: !253, expr: !DIExpression())
!253 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !220, file: !241, line: 1052, type: !254, isLocal: false, isDefinition: true)
!254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !255)
!255 = !{!256, !257, !258, !262, !263}
!256 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !254, file: !241, line: 68, baseType: !223, size: 32)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !254, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !254, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!259 = !DICompositeType(tag: DW_TAG_array_type, baseType: !180, size: 256, elements: !260)
!260 = !{!261}
!261 = !DISubrange(count: 8)
!262 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !254, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !254, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!264 = !DIGlobalVariableExpression(var: !265, expr: !DIExpression())
!265 = distinct !DIGlobalVariable(name: "slot0", scope: !220, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!266 = !DIGlobalVariableExpression(var: !267, expr: !DIExpression())
!267 = distinct !DIGlobalVariable(name: "slotvec", scope: !220, file: !241, line: 845, type: !268, isLocal: true, isDefinition: true)
!268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !269, size: 64)
!269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !270)
!270 = !{!271, !272}
!271 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !269, file: !241, line: 836, baseType: !110, size: 64)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !269, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!273 = !DIGlobalVariableExpression(var: !274, expr: !DIExpression())
!274 = distinct !DIGlobalVariable(name: "nslots", scope: !220, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!275 = !DIGlobalVariableExpression(var: !276, expr: !DIExpression())
!276 = distinct !DIGlobalVariable(name: "slotvec0", scope: !220, file: !241, line: 844, type: !269, isLocal: true, isDefinition: true)
!277 = !DIGlobalVariableExpression(var: !278, expr: !DIExpression())
!278 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !279, file: !282, line: 26, type: !283, isLocal: false, isDefinition: true)
!279 = distinct !DICompileUnit(language: DW_LANG_C99, file: !280, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !281, nameTableKind: None)
!280 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!281 = !{!277}
!282 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 376, elements: !284)
!284 = !{!285}
!285 = !DISubrange(count: 47)
!286 = distinct !DICompileUnit(language: DW_LANG_C99, file: !287, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!287 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!288 = distinct !DICompileUnit(language: DW_LANG_C99, file: !289, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!289 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!290 = distinct !DICompileUnit(language: DW_LANG_C99, file: !291, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !292, nameTableKind: None)
!291 = !DIFile(filename: "./lib/imaxtostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!292 = !{!293}
!293 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !294, line: 101, baseType: !295)
!294 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!295 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !12, line: 72, baseType: !13)
!296 = distinct !DICompileUnit(language: DW_LANG_C99, file: !297, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!297 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!298 = !{!8}
!299 = distinct !DICompileUnit(language: DW_LANG_C99, file: !300, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!300 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!301 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!302 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!303 = !{!110, !6, !8}
!304 = distinct !DICompileUnit(language: DW_LANG_C99, file: !305, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!305 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!306 = distinct !DICompileUnit(language: DW_LANG_C99, file: !307, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !308, nameTableKind: None)
!307 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!308 = !{!110}
!309 = distinct !DICompileUnit(language: DW_LANG_C99, file: !310, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !311, nameTableKind: None)
!310 = !DIFile(filename: "./lib/readutmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!311 = !{!6, !8}
!312 = distinct !DICompileUnit(language: DW_LANG_C99, file: !313, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !314, nameTableKind: None)
!313 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!314 = !{!315}
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64)
!316 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !317)
!317 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!318 = distinct !DICompileUnit(language: DW_LANG_C99, file: !319, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!319 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!320 = distinct !DICompileUnit(language: DW_LANG_C99, file: !321, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!321 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!322 = distinct !DICompileUnit(language: DW_LANG_C99, file: !323, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!323 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!324 = distinct !DICompileUnit(language: DW_LANG_C99, file: !325, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!325 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!326 = distinct !DICompileUnit(language: DW_LANG_C99, file: !327, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!327 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!328 = !{!"clang version 9.0.1-12 "}
!329 = !{i32 2, !"Dwarf Version", i32 4}
!330 = !{i32 2, !"Debug Info Version", i32 3}
!331 = !{i32 1, !"wchar_size", i32 4}
!332 = !{i32 1, !"ThinLTO", i32 0}
!333 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!334 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 638, type: !335, scopeLine: 639, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!335 = !DISubroutineType(types: !336)
!336 = !{null, !53}
!337 = !DILocalVariable(name: "status", arg: 1, scope: !334, file: !3, line: 638, type: !53)
!338 = !DILocation(line: 638, column: 12, scope: !334)
!339 = !DILocation(line: 640, column: 7, scope: !340)
!340 = distinct !DILexicalBlock(scope: !334, file: !3, line: 640, column: 7)
!341 = !DILocation(line: 640, column: 14, scope: !340)
!342 = !DILocation(line: 640, column: 7, scope: !334)
!343 = !DILocation(line: 641, column: 5, scope: !340)
!344 = !DILocation(line: 641, column: 5, scope: !345)
!345 = distinct !DILexicalBlock(scope: !340, file: !3, line: 641, column: 5)
!346 = !DILocation(line: 644, column: 15, scope: !347)
!347 = distinct !DILexicalBlock(scope: !340, file: !3, line: 643, column: 5)
!348 = !DILocation(line: 644, column: 66, scope: !347)
!349 = !DILocation(line: 644, column: 7, scope: !347)
!350 = !DILocation(line: 645, column: 7, scope: !347)
!351 = !DILocation(line: 648, column: 7, scope: !347)
!352 = !DILocation(line: 655, column: 7, scope: !347)
!353 = !DILocation(line: 658, column: 7, scope: !347)
!354 = !DILocation(line: 663, column: 7, scope: !347)
!355 = !DILocation(line: 669, column: 7, scope: !347)
!356 = !DILocation(line: 675, column: 7, scope: !347)
!357 = !DILocation(line: 676, column: 7, scope: !347)
!358 = !DILocation(line: 677, column: 15, scope: !347)
!359 = !DILocation(line: 677, column: 7, scope: !347)
!360 = !DILocation(line: 682, column: 7, scope: !347)
!361 = !DILocation(line: 684, column: 9, scope: !334)
!362 = !DILocation(line: 684, column: 3, scope: !334)
!363 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !364, file: !364, line: 634, type: !365, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!364 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!365 = !DISubroutineType(types: !366)
!366 = !{null, !49}
!367 = !DILocalVariable(name: "program", arg: 1, scope: !363, file: !364, line: 634, type: !49)
!368 = !DILocation(line: 634, column: 34, scope: !363)
!369 = !DILocalVariable(name: "infomap", scope: !363, file: !364, line: 636, type: !370)
!370 = !DICompositeType(tag: DW_TAG_array_type, baseType: !371, size: 896, elements: !376)
!371 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !372)
!372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !363, file: !364, line: 636, size: 128, elements: !373)
!373 = !{!374, !375}
!374 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !372, file: !364, line: 636, baseType: !49, size: 64)
!375 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !372, file: !364, line: 636, baseType: !49, size: 64, offset: 64)
!376 = !{!377}
!377 = !DISubrange(count: 7)
!378 = !DILocation(line: 636, column: 67, scope: !363)
!379 = !DILocalVariable(name: "node", scope: !363, file: !364, line: 646, type: !49)
!380 = !DILocation(line: 646, column: 15, scope: !363)
!381 = !DILocation(line: 646, column: 22, scope: !363)
!382 = !DILocalVariable(name: "map_prog", scope: !363, file: !364, line: 647, type: !383)
!383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !371, size: 64)
!384 = !DILocation(line: 647, column: 25, scope: !363)
!385 = !DILocation(line: 647, column: 36, scope: !363)
!386 = !DILocation(line: 649, column: 3, scope: !363)
!387 = !DILocation(line: 649, column: 10, scope: !363)
!388 = !DILocation(line: 649, column: 20, scope: !363)
!389 = !DILocation(line: 649, column: 28, scope: !363)
!390 = !DILocation(line: 649, column: 33, scope: !363)
!391 = !DILocation(line: 649, column: 31, scope: !363)
!392 = !DILocation(line: 0, scope: !363)
!393 = !DILocation(line: 650, column: 13, scope: !363)
!394 = distinct !{!394, !386, !393}
!395 = !DILocation(line: 652, column: 7, scope: !396)
!396 = distinct !DILexicalBlock(scope: !363, file: !364, line: 652, column: 7)
!397 = !DILocation(line: 652, column: 17, scope: !396)
!398 = !DILocation(line: 652, column: 7, scope: !363)
!399 = !DILocation(line: 653, column: 12, scope: !396)
!400 = !DILocation(line: 653, column: 22, scope: !396)
!401 = !DILocation(line: 653, column: 10, scope: !396)
!402 = !DILocation(line: 653, column: 5, scope: !396)
!403 = !DILocation(line: 655, column: 11, scope: !363)
!404 = !DILocation(line: 655, column: 3, scope: !363)
!405 = !DILocalVariable(name: "lc_messages", scope: !363, file: !364, line: 659, type: !49)
!406 = !DILocation(line: 659, column: 15, scope: !363)
!407 = !DILocation(line: 659, column: 29, scope: !363)
!408 = !DILocation(line: 660, column: 7, scope: !409)
!409 = distinct !DILexicalBlock(scope: !363, file: !364, line: 660, column: 7)
!410 = !DILocation(line: 660, column: 19, scope: !409)
!411 = !DILocation(line: 660, column: 22, scope: !409)
!412 = !DILocation(line: 660, column: 7, scope: !363)
!413 = !DILocation(line: 666, column: 7, scope: !414)
!414 = distinct !DILexicalBlock(scope: !409, file: !364, line: 661, column: 5)
!415 = !DILocation(line: 668, column: 5, scope: !414)
!416 = !DILocation(line: 669, column: 11, scope: !363)
!417 = !DILocation(line: 670, column: 24, scope: !363)
!418 = !DILocation(line: 669, column: 3, scope: !363)
!419 = !DILocation(line: 671, column: 11, scope: !363)
!420 = !DILocation(line: 672, column: 11, scope: !363)
!421 = !DILocation(line: 672, column: 17, scope: !363)
!422 = !DILocation(line: 672, column: 25, scope: !363)
!423 = !DILocation(line: 672, column: 22, scope: !363)
!424 = !DILocation(line: 671, column: 3, scope: !363)
!425 = !DILocation(line: 673, column: 1, scope: !363)
!426 = !DILocalVariable(name: "program", arg: 1, scope: !427, file: !364, line: 634, type: !49)
!427 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !364, file: !364, line: 634, type: !365, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !428, retainedNodes: !4)
!428 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !429, nameTableKind: None)
!429 = !{!430, !432, !434, !436, !438, !440, !442, !444, !446, !448, !450, !452, !454, !456, !458, !460, !462, !464, !474, !477, !506, !508, !511, !513, !518, !523, !525}
!430 = !DIGlobalVariableExpression(var: !431, expr: !DIExpression())
!431 = distinct !DIGlobalVariable(name: "do_lookup", scope: !428, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!432 = !DIGlobalVariableExpression(var: !433, expr: !DIExpression())
!433 = distinct !DIGlobalVariable(name: "short_list", scope: !428, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!434 = !DIGlobalVariableExpression(var: !435, expr: !DIExpression())
!435 = distinct !DIGlobalVariable(name: "short_output", scope: !428, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!436 = !DIGlobalVariableExpression(var: !437, expr: !DIExpression())
!437 = distinct !DIGlobalVariable(name: "include_idle", scope: !428, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!438 = !DIGlobalVariableExpression(var: !439, expr: !DIExpression())
!439 = distinct !DIGlobalVariable(name: "include_heading", scope: !428, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!440 = !DIGlobalVariableExpression(var: !441, expr: !DIExpression())
!441 = distinct !DIGlobalVariable(name: "include_mesg", scope: !428, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!442 = !DIGlobalVariableExpression(var: !443, expr: !DIExpression())
!443 = distinct !DIGlobalVariable(name: "include_exit", scope: !428, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!444 = !DIGlobalVariableExpression(var: !445, expr: !DIExpression())
!445 = distinct !DIGlobalVariable(name: "need_boottime", scope: !428, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!446 = !DIGlobalVariableExpression(var: !447, expr: !DIExpression())
!447 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !428, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!448 = !DIGlobalVariableExpression(var: !449, expr: !DIExpression())
!449 = distinct !DIGlobalVariable(name: "need_login", scope: !428, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!450 = !DIGlobalVariableExpression(var: !451, expr: !DIExpression())
!451 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !428, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!452 = !DIGlobalVariableExpression(var: !453, expr: !DIExpression())
!453 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !428, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!454 = !DIGlobalVariableExpression(var: !455, expr: !DIExpression())
!455 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !428, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!456 = !DIGlobalVariableExpression(var: !457, expr: !DIExpression())
!457 = distinct !DIGlobalVariable(name: "need_users", scope: !428, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!458 = !DIGlobalVariableExpression(var: !459, expr: !DIExpression())
!459 = distinct !DIGlobalVariable(name: "my_line_only", scope: !428, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!460 = !DIGlobalVariableExpression(var: !461, expr: !DIExpression())
!461 = distinct !DIGlobalVariable(name: "time_format", scope: !428, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!462 = !DIGlobalVariableExpression(var: !463, expr: !DIExpression())
!463 = distinct !DIGlobalVariable(name: "time_format_width", scope: !428, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!464 = !DIGlobalVariableExpression(var: !465, expr: !DIExpression())
!465 = distinct !DIGlobalVariable(name: "longopts", scope: !428, file: !3, line: 162, type: !466, isLocal: true, isDefinition: true)
!466 = !DICompositeType(tag: DW_TAG_array_type, baseType: !467, size: 4608, elements: !151)
!467 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !468)
!468 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !469)
!469 = !{!470, !471, !472, !473}
!470 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !468, file: !144, line: 52, baseType: !49, size: 64)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !468, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !468, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!473 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !468, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!474 = !DIGlobalVariableExpression(var: !475, expr: !DIExpression())
!475 = distinct !DIGlobalVariable(name: "mesg", scope: !476, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!476 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !428, retainedNodes: !4)
!477 = !DIGlobalVariableExpression(var: !478, expr: !DIExpression())
!478 = distinct !DIGlobalVariable(name: "hoststr", scope: !479, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!479 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !480, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !428, retainedNodes: !4)
!480 = !DISubroutineType(types: !481)
!481 = !{null, !482, !9}
!482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !483, size: 64)
!483 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !484)
!484 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !485)
!485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !486)
!486 = !{!487, !488, !489, !490, !491, !492, !493, !498, !499, !504, !505}
!487 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !485, file: !72, line: 57, baseType: !14, size: 16)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !485, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!489 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !485, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !485, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !485, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !485, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !485, file: !72, line: 67, baseType: !494, size: 32, offset: 2656)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !495)
!495 = !{!496, !497}
!496 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !494, file: !72, line: 45, baseType: !14, size: 16)
!497 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !494, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!498 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !485, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!499 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !485, file: !72, line: 79, baseType: !500, size: 64, offset: 2720)
!500 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !485, file: !72, line: 75, size: 64, elements: !501)
!501 = !{!502, !503}
!502 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !500, file: !72, line: 77, baseType: !96, size: 32)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !500, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !485, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !485, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!506 = !DIGlobalVariableExpression(var: !507, expr: !DIExpression())
!507 = distinct !DIGlobalVariable(name: "hostlen", scope: !479, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!508 = !DIGlobalVariableExpression(var: !509, expr: !DIExpression())
!509 = distinct !DIGlobalVariable(name: "now", scope: !510, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!510 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !428, retainedNodes: !4)
!511 = !DIGlobalVariableExpression(var: !512, expr: !DIExpression())
!512 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !510, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!513 = !DIGlobalVariableExpression(var: !514, expr: !DIExpression())
!514 = distinct !DIGlobalVariable(name: "buf", scope: !515, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!515 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !516, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !428, retainedNodes: !4)
!516 = !DISubroutineType(types: !517)
!517 = !{!49, !482}
!518 = !DIGlobalVariableExpression(var: !519, expr: !DIExpression())
!519 = distinct !DIGlobalVariable(name: "runlevline", scope: !520, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!520 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !521, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !428, retainedNodes: !4)
!521 = !DISubroutineType(types: !522)
!522 = !{null, !482}
!523 = !DIGlobalVariableExpression(var: !524, expr: !DIExpression())
!524 = distinct !DIGlobalVariable(name: "comment", scope: !520, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!525 = !DIGlobalVariableExpression(var: !526, expr: !DIExpression())
!526 = distinct !DIGlobalVariable(name: "exitstr", scope: !527, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!527 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !521, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !428, retainedNodes: !4)
!528 = !DILocalVariable(name: "infomap", scope: !427, file: !364, line: 636, type: !529)
!529 = !DICompositeType(tag: DW_TAG_array_type, baseType: !530, size: 896, elements: !376)
!530 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !531)
!531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !427, file: !364, line: 636, size: 128, elements: !532)
!532 = !{!533, !534}
!533 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !531, file: !364, line: 636, baseType: !49, size: 64)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !531, file: !364, line: 636, baseType: !49, size: 64, offset: 64)
!535 = !DILocalVariable(name: "node", scope: !427, file: !364, line: 646, type: !49)
!536 = !DILocalVariable(name: "map_prog", scope: !427, file: !364, line: 647, type: !537)
!537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !530, size: 64)
!538 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 688, type: !539, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!539 = !DISubroutineType(types: !540)
!540 = !{!53, !53, !541}
!541 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!542 = !DILocalVariable(name: "argc", arg: 1, scope: !538, file: !3, line: 688, type: !53)
!543 = !DILocation(line: 688, column: 11, scope: !538)
!544 = !DILocalVariable(name: "argv", arg: 2, scope: !538, file: !3, line: 688, type: !541)
!545 = !DILocation(line: 688, column: 24, scope: !538)
!546 = !DILocalVariable(name: "optc", scope: !538, file: !3, line: 690, type: !53)
!547 = !DILocation(line: 690, column: 7, scope: !538)
!548 = !DILocalVariable(name: "assumptions", scope: !538, file: !3, line: 691, type: !18)
!549 = !DILocation(line: 691, column: 8, scope: !538)
!550 = !DILocation(line: 694, column: 21, scope: !538)
!551 = !DILocation(line: 694, column: 3, scope: !538)
!552 = !DILocation(line: 695, column: 3, scope: !538)
!553 = !DILocation(line: 696, column: 3, scope: !538)
!554 = !DILocation(line: 697, column: 3, scope: !538)
!555 = !DILocation(line: 699, column: 3, scope: !538)
!556 = !DILocation(line: 701, column: 3, scope: !538)
!557 = !DILocation(line: 701, column: 31, scope: !538)
!558 = !DILocation(line: 701, column: 37, scope: !538)
!559 = !DILocation(line: 701, column: 18, scope: !538)
!560 = !DILocation(line: 701, column: 16, scope: !538)
!561 = !DILocation(line: 702, column: 10, scope: !538)
!562 = !DILocation(line: 704, column: 15, scope: !563)
!563 = distinct !DILexicalBlock(scope: !538, file: !3, line: 703, column: 5)
!564 = !DILocation(line: 704, column: 7, scope: !563)
!565 = !DILocation(line: 707, column: 25, scope: !566)
!566 = distinct !DILexicalBlock(scope: !563, file: !3, line: 705, column: 9)
!567 = !DILocation(line: 708, column: 26, scope: !566)
!568 = !DILocation(line: 709, column: 22, scope: !566)
!569 = !DILocation(line: 710, column: 26, scope: !566)
!570 = !DILocation(line: 711, column: 25, scope: !566)
!571 = !DILocation(line: 712, column: 28, scope: !566)
!572 = !DILocation(line: 713, column: 22, scope: !566)
!573 = !DILocation(line: 714, column: 24, scope: !566)
!574 = !DILocation(line: 715, column: 24, scope: !566)
!575 = !DILocation(line: 716, column: 24, scope: !566)
!576 = !DILocation(line: 717, column: 23, scope: !566)
!577 = !DILocation(line: 718, column: 11, scope: !566)
!578 = !DILocation(line: 721, column: 25, scope: !566)
!579 = !DILocation(line: 722, column: 23, scope: !566)
!580 = !DILocation(line: 723, column: 11, scope: !566)
!581 = !DILocation(line: 726, column: 26, scope: !566)
!582 = !DILocation(line: 727, column: 24, scope: !566)
!583 = !DILocation(line: 728, column: 24, scope: !566)
!584 = !DILocation(line: 729, column: 23, scope: !566)
!585 = !DILocation(line: 730, column: 11, scope: !566)
!586 = !DILocation(line: 733, column: 27, scope: !566)
!587 = !DILocation(line: 734, column: 11, scope: !566)
!588 = !DILocation(line: 737, column: 22, scope: !566)
!589 = !DILocation(line: 738, column: 24, scope: !566)
!590 = !DILocation(line: 739, column: 23, scope: !566)
!591 = !DILocation(line: 740, column: 11, scope: !566)
!592 = !DILocation(line: 743, column: 24, scope: !566)
!593 = !DILocation(line: 744, column: 11, scope: !566)
!594 = !DILocation(line: 747, column: 26, scope: !566)
!595 = !DILocation(line: 748, column: 23, scope: !566)
!596 = !DILocation(line: 749, column: 11, scope: !566)
!597 = !DILocation(line: 752, column: 22, scope: !566)
!598 = !DILocation(line: 753, column: 11, scope: !566)
!599 = !DILocation(line: 756, column: 25, scope: !566)
!600 = !DILocation(line: 757, column: 24, scope: !566)
!601 = !DILocation(line: 758, column: 23, scope: !566)
!602 = !DILocation(line: 759, column: 11, scope: !566)
!603 = !DILocation(line: 762, column: 24, scope: !566)
!604 = !DILocation(line: 763, column: 11, scope: !566)
!605 = !DILocation(line: 766, column: 28, scope: !566)
!606 = !DILocation(line: 767, column: 23, scope: !566)
!607 = !DILocation(line: 768, column: 11, scope: !566)
!608 = !DILocation(line: 772, column: 24, scope: !566)
!609 = !DILocation(line: 773, column: 11, scope: !566)
!610 = !DILocation(line: 776, column: 22, scope: !566)
!611 = !DILocation(line: 777, column: 24, scope: !566)
!612 = !DILocation(line: 778, column: 23, scope: !566)
!613 = !DILocation(line: 779, column: 11, scope: !566)
!614 = !DILocation(line: 782, column: 21, scope: !566)
!615 = !DILocation(line: 783, column: 11, scope: !566)
!616 = !DILocation(line: 785, column: 9, scope: !566)
!617 = !DILocation(line: 787, column: 9, scope: !566)
!618 = !DILocation(line: 790, column: 11, scope: !566)
!619 = distinct !{!619, !556, !620}
!620 = !DILocation(line: 792, column: 5, scope: !538)
!621 = !DILocation(line: 794, column: 7, scope: !622)
!622 = distinct !DILexicalBlock(scope: !538, file: !3, line: 794, column: 7)
!623 = !DILocation(line: 794, column: 7, scope: !538)
!624 = !DILocation(line: 796, column: 18, scope: !625)
!625 = distinct !DILexicalBlock(scope: !622, file: !3, line: 795, column: 5)
!626 = !DILocation(line: 797, column: 20, scope: !625)
!627 = !DILocation(line: 798, column: 5, scope: !625)
!628 = !DILocation(line: 800, column: 7, scope: !629)
!629 = distinct !DILexicalBlock(scope: !538, file: !3, line: 800, column: 7)
!630 = !DILocation(line: 800, column: 7, scope: !538)
!631 = !DILocation(line: 802, column: 20, scope: !632)
!632 = distinct !DILexicalBlock(scope: !629, file: !3, line: 801, column: 5)
!633 = !DILocation(line: 803, column: 5, scope: !632)
!634 = !DILocation(line: 805, column: 7, scope: !635)
!635 = distinct !DILexicalBlock(scope: !538, file: !3, line: 805, column: 7)
!636 = !DILocation(line: 805, column: 7, scope: !538)
!637 = !DILocation(line: 807, column: 19, scope: !638)
!638 = distinct !DILexicalBlock(scope: !635, file: !3, line: 806, column: 5)
!639 = !DILocation(line: 808, column: 25, scope: !638)
!640 = !DILocation(line: 809, column: 5, scope: !638)
!641 = !DILocation(line: 812, column: 19, scope: !642)
!642 = distinct !DILexicalBlock(scope: !635, file: !3, line: 811, column: 5)
!643 = !DILocation(line: 813, column: 25, scope: !642)
!644 = !DILocation(line: 816, column: 11, scope: !538)
!645 = !DILocation(line: 816, column: 18, scope: !538)
!646 = !DILocation(line: 816, column: 16, scope: !538)
!647 = !DILocation(line: 816, column: 3, scope: !538)
!648 = !DILocation(line: 819, column: 20, scope: !649)
!649 = distinct !DILexicalBlock(scope: !538, file: !3, line: 817, column: 5)
!650 = !DILocation(line: 820, column: 7, scope: !649)
!651 = !DILocation(line: 823, column: 7, scope: !649)
!652 = !DILocation(line: 824, column: 7, scope: !649)
!653 = !DILocation(line: 827, column: 12, scope: !649)
!654 = !DILocation(line: 827, column: 17, scope: !649)
!655 = !DILocation(line: 827, column: 7, scope: !649)
!656 = !DILocation(line: 828, column: 7, scope: !649)
!657 = !DILocation(line: 831, column: 20, scope: !649)
!658 = !DILocation(line: 831, column: 50, scope: !649)
!659 = !DILocation(line: 831, column: 55, scope: !649)
!660 = !DILocation(line: 831, column: 62, scope: !649)
!661 = !DILocation(line: 831, column: 43, scope: !649)
!662 = !DILocation(line: 831, column: 7, scope: !649)
!663 = !DILocation(line: 832, column: 7, scope: !649)
!664 = !DILocation(line: 835, column: 3, scope: !538)
!665 = distinct !DISubprogram(name: "who", scope: !3, file: !3, line: 621, type: !666, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!666 = !DISubroutineType(types: !667)
!667 = !{null, !49, !53}
!668 = !DILocalVariable(name: "filename", arg: 1, scope: !665, file: !3, line: 621, type: !49)
!669 = !DILocation(line: 621, column: 18, scope: !665)
!670 = !DILocalVariable(name: "options", arg: 2, scope: !665, file: !3, line: 621, type: !53)
!671 = !DILocation(line: 621, column: 32, scope: !665)
!672 = !DILocalVariable(name: "n_users", scope: !665, file: !3, line: 623, type: !110)
!673 = !DILocation(line: 623, column: 10, scope: !665)
!674 = !DILocalVariable(name: "utmp_buf", scope: !665, file: !3, line: 624, type: !675)
!675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!676 = !DILocation(line: 624, column: 16, scope: !665)
!677 = !DILocation(line: 626, column: 18, scope: !678)
!678 = distinct !DILexicalBlock(scope: !665, file: !3, line: 626, column: 7)
!679 = !DILocation(line: 626, column: 49, scope: !678)
!680 = !DILocation(line: 626, column: 7, scope: !678)
!681 = !DILocation(line: 626, column: 58, scope: !678)
!682 = !DILocation(line: 626, column: 7, scope: !665)
!683 = !DILocation(line: 627, column: 5, scope: !678)
!684 = !DILocation(line: 629, column: 7, scope: !685)
!685 = distinct !DILexicalBlock(scope: !665, file: !3, line: 629, column: 7)
!686 = !DILocation(line: 629, column: 7, scope: !665)
!687 = !DILocation(line: 630, column: 23, scope: !685)
!688 = !DILocation(line: 630, column: 32, scope: !685)
!689 = !DILocation(line: 630, column: 5, scope: !685)
!690 = !DILocation(line: 632, column: 19, scope: !685)
!691 = !DILocation(line: 632, column: 28, scope: !685)
!692 = !DILocation(line: 632, column: 5, scope: !685)
!693 = !DILocation(line: 634, column: 9, scope: !665)
!694 = !DILocation(line: 634, column: 3, scope: !665)
!695 = !DILocation(line: 635, column: 1, scope: !665)
!696 = distinct !DISubprogram(name: "list_entries_who", scope: !3, file: !3, line: 537, type: !697, scopeLine: 538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!697 = !DISubroutineType(types: !698)
!698 = !{null, !110, !67}
!699 = !DILocalVariable(name: "n", arg: 1, scope: !696, file: !3, line: 537, type: !110)
!700 = !DILocation(line: 537, column: 26, scope: !696)
!701 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !696, file: !3, line: 537, type: !67)
!702 = !DILocation(line: 537, column: 48, scope: !696)
!703 = !DILocalVariable(name: "entries", scope: !696, file: !3, line: 539, type: !112)
!704 = !DILocation(line: 539, column: 21, scope: !696)
!705 = !DILocalVariable(name: "separator", scope: !696, file: !3, line: 540, type: !49)
!706 = !DILocation(line: 540, column: 15, scope: !696)
!707 = !DILocation(line: 542, column: 3, scope: !696)
!708 = !DILocation(line: 542, column: 11, scope: !696)
!709 = !DILocation(line: 544, column: 11, scope: !710)
!710 = distinct !DILexicalBlock(scope: !711, file: !3, line: 544, column: 11)
!711 = distinct !DILexicalBlock(scope: !696, file: !3, line: 543, column: 5)
!712 = !DILocation(line: 544, column: 11, scope: !711)
!713 = !DILocalVariable(name: "trimmed_name", scope: !714, file: !3, line: 546, type: !6)
!714 = distinct !DILexicalBlock(scope: !710, file: !3, line: 545, column: 9)
!715 = !DILocation(line: 546, column: 17, scope: !714)
!716 = !DILocation(line: 548, column: 48, scope: !714)
!717 = !DILocation(line: 548, column: 26, scope: !714)
!718 = !DILocation(line: 548, column: 24, scope: !714)
!719 = !DILocation(line: 550, column: 27, scope: !714)
!720 = !DILocation(line: 550, column: 38, scope: !714)
!721 = !DILocation(line: 550, column: 11, scope: !714)
!722 = !DILocation(line: 551, column: 17, scope: !714)
!723 = !DILocation(line: 551, column: 11, scope: !714)
!724 = !DILocation(line: 552, column: 21, scope: !714)
!725 = !DILocation(line: 553, column: 18, scope: !714)
!726 = !DILocation(line: 554, column: 9, scope: !714)
!727 = !DILocation(line: 555, column: 15, scope: !711)
!728 = distinct !{!728, !707, !729}
!729 = !DILocation(line: 556, column: 5, scope: !696)
!730 = !DILocation(line: 557, column: 11, scope: !696)
!731 = !DILocation(line: 557, column: 33, scope: !696)
!732 = !DILocation(line: 557, column: 3, scope: !696)
!733 = !DILocation(line: 558, column: 1, scope: !696)
!734 = !DILocalVariable(name: "n", arg: 1, scope: !735, file: !3, line: 537, type: !110)
!735 = distinct !DISubprogram(name: "list_entries_who", scope: !3, file: !3, line: 537, type: !736, scopeLine: 538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !762, retainedNodes: !4)
!736 = !DISubroutineType(types: !737)
!737 = !{null, !110, !738}
!738 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !739, size: 64)
!739 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !740)
!740 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !741)
!741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !742)
!742 = !{!743, !744, !745, !746, !747, !748, !749, !754, !755, !760, !761}
!743 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !741, file: !72, line: 57, baseType: !14, size: 16)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !741, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !741, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !741, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !741, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !741, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !741, file: !72, line: 67, baseType: !750, size: 32, offset: 2656)
!750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !751)
!751 = !{!752, !753}
!752 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !750, file: !72, line: 45, baseType: !14, size: 16)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !750, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !741, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !741, file: !72, line: 79, baseType: !756, size: 64, offset: 2720)
!756 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !741, file: !72, line: 75, size: 64, elements: !757)
!757 = !{!758, !759}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !756, file: !72, line: 77, baseType: !96, size: 32)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !756, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !741, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !741, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!762 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !763, nameTableKind: None)
!763 = !{!764, !766, !768, !770, !772, !774, !776, !778, !780, !782, !784, !786, !788, !790, !792, !794, !796, !798, !808, !811, !816, !818, !821, !823, !828, !833, !835}
!764 = !DIGlobalVariableExpression(var: !765, expr: !DIExpression())
!765 = distinct !DIGlobalVariable(name: "do_lookup", scope: !762, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!766 = !DIGlobalVariableExpression(var: !767, expr: !DIExpression())
!767 = distinct !DIGlobalVariable(name: "short_list", scope: !762, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!768 = !DIGlobalVariableExpression(var: !769, expr: !DIExpression())
!769 = distinct !DIGlobalVariable(name: "short_output", scope: !762, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!770 = !DIGlobalVariableExpression(var: !771, expr: !DIExpression())
!771 = distinct !DIGlobalVariable(name: "include_idle", scope: !762, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!772 = !DIGlobalVariableExpression(var: !773, expr: !DIExpression())
!773 = distinct !DIGlobalVariable(name: "include_heading", scope: !762, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!774 = !DIGlobalVariableExpression(var: !775, expr: !DIExpression())
!775 = distinct !DIGlobalVariable(name: "include_mesg", scope: !762, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!776 = !DIGlobalVariableExpression(var: !777, expr: !DIExpression())
!777 = distinct !DIGlobalVariable(name: "include_exit", scope: !762, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!778 = !DIGlobalVariableExpression(var: !779, expr: !DIExpression())
!779 = distinct !DIGlobalVariable(name: "need_boottime", scope: !762, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!780 = !DIGlobalVariableExpression(var: !781, expr: !DIExpression())
!781 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !762, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!782 = !DIGlobalVariableExpression(var: !783, expr: !DIExpression())
!783 = distinct !DIGlobalVariable(name: "need_login", scope: !762, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!784 = !DIGlobalVariableExpression(var: !785, expr: !DIExpression())
!785 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !762, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!786 = !DIGlobalVariableExpression(var: !787, expr: !DIExpression())
!787 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !762, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!788 = !DIGlobalVariableExpression(var: !789, expr: !DIExpression())
!789 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !762, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!790 = !DIGlobalVariableExpression(var: !791, expr: !DIExpression())
!791 = distinct !DIGlobalVariable(name: "need_users", scope: !762, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!792 = !DIGlobalVariableExpression(var: !793, expr: !DIExpression())
!793 = distinct !DIGlobalVariable(name: "my_line_only", scope: !762, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!794 = !DIGlobalVariableExpression(var: !795, expr: !DIExpression())
!795 = distinct !DIGlobalVariable(name: "time_format", scope: !762, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!796 = !DIGlobalVariableExpression(var: !797, expr: !DIExpression())
!797 = distinct !DIGlobalVariable(name: "time_format_width", scope: !762, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!798 = !DIGlobalVariableExpression(var: !799, expr: !DIExpression())
!799 = distinct !DIGlobalVariable(name: "longopts", scope: !762, file: !3, line: 162, type: !800, isLocal: true, isDefinition: true)
!800 = !DICompositeType(tag: DW_TAG_array_type, baseType: !801, size: 4608, elements: !151)
!801 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !802)
!802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !803)
!803 = !{!804, !805, !806, !807}
!804 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !802, file: !144, line: 52, baseType: !49, size: 64)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !802, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !802, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !802, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!808 = !DIGlobalVariableExpression(var: !809, expr: !DIExpression())
!809 = distinct !DIGlobalVariable(name: "mesg", scope: !810, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!810 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !762, retainedNodes: !4)
!811 = !DIGlobalVariableExpression(var: !812, expr: !DIExpression())
!812 = distinct !DIGlobalVariable(name: "hoststr", scope: !813, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!813 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !814, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !762, retainedNodes: !4)
!814 = !DISubroutineType(types: !815)
!815 = !{null, !738, !9}
!816 = !DIGlobalVariableExpression(var: !817, expr: !DIExpression())
!817 = distinct !DIGlobalVariable(name: "hostlen", scope: !813, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!818 = !DIGlobalVariableExpression(var: !819, expr: !DIExpression())
!819 = distinct !DIGlobalVariable(name: "now", scope: !820, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!820 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !762, retainedNodes: !4)
!821 = !DIGlobalVariableExpression(var: !822, expr: !DIExpression())
!822 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !820, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!823 = !DIGlobalVariableExpression(var: !824, expr: !DIExpression())
!824 = distinct !DIGlobalVariable(name: "buf", scope: !825, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!825 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !826, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !762, retainedNodes: !4)
!826 = !DISubroutineType(types: !827)
!827 = !{!49, !738}
!828 = !DIGlobalVariableExpression(var: !829, expr: !DIExpression())
!829 = distinct !DIGlobalVariable(name: "runlevline", scope: !830, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!830 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !831, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !762, retainedNodes: !4)
!831 = !DISubroutineType(types: !832)
!832 = !{null, !738}
!833 = !DIGlobalVariableExpression(var: !834, expr: !DIExpression())
!834 = distinct !DIGlobalVariable(name: "comment", scope: !830, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!835 = !DIGlobalVariableExpression(var: !836, expr: !DIExpression())
!836 = distinct !DIGlobalVariable(name: "exitstr", scope: !837, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!837 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !831, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !762, retainedNodes: !4)
!838 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !735, file: !3, line: 537, type: !738)
!839 = !DILocalVariable(name: "entries", scope: !735, file: !3, line: 539, type: !112)
!840 = !DILocalVariable(name: "separator", scope: !735, file: !3, line: 540, type: !49)
!841 = distinct !DISubprogram(name: "scan_entries", scope: !3, file: !3, line: 569, type: !697, scopeLine: 570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!842 = !DILocalVariable(name: "n", arg: 1, scope: !841, file: !3, line: 569, type: !110)
!843 = !DILocation(line: 569, column: 22, scope: !841)
!844 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !841, file: !3, line: 569, type: !67)
!845 = !DILocation(line: 569, column: 44, scope: !841)
!846 = !DILocalVariable(name: "ttyname_b", scope: !841, file: !3, line: 571, type: !6)
!847 = !DILocation(line: 571, column: 9, scope: !841)
!848 = !DILocalVariable(name: "boottime", scope: !841, file: !3, line: 572, type: !9)
!849 = !DILocation(line: 572, column: 10, scope: !841)
!850 = !DILocation(line: 574, column: 7, scope: !851)
!851 = distinct !DILexicalBlock(scope: !841, file: !3, line: 574, column: 7)
!852 = !DILocation(line: 574, column: 7, scope: !841)
!853 = !DILocation(line: 575, column: 5, scope: !851)
!854 = !DILocation(line: 577, column: 7, scope: !855)
!855 = distinct !DILexicalBlock(scope: !841, file: !3, line: 577, column: 7)
!856 = !DILocation(line: 577, column: 7, scope: !841)
!857 = !DILocation(line: 579, column: 19, scope: !858)
!858 = distinct !DILexicalBlock(scope: !855, file: !3, line: 578, column: 5)
!859 = !DILocation(line: 579, column: 17, scope: !858)
!860 = !DILocation(line: 580, column: 12, scope: !861)
!861 = distinct !DILexicalBlock(scope: !858, file: !3, line: 580, column: 11)
!862 = !DILocation(line: 580, column: 11, scope: !858)
!863 = !DILocation(line: 581, column: 9, scope: !861)
!864 = !DILocation(line: 582, column: 11, scope: !865)
!865 = distinct !DILexicalBlock(scope: !858, file: !3, line: 582, column: 11)
!866 = !DILocation(line: 582, column: 64, scope: !865)
!867 = !DILocation(line: 583, column: 19, scope: !865)
!868 = !DILocation(line: 583, column: 9, scope: !865)
!869 = !DILocation(line: 584, column: 5, scope: !858)
!870 = !DILocation(line: 586, column: 3, scope: !841)
!871 = !DILocation(line: 586, column: 11, scope: !841)
!872 = !DILocation(line: 588, column: 12, scope: !873)
!873 = distinct !DILexicalBlock(scope: !874, file: !3, line: 588, column: 11)
!874 = distinct !DILexicalBlock(scope: !841, file: !3, line: 587, column: 5)
!875 = !DILocation(line: 589, column: 11, scope: !873)
!876 = !DILocation(line: 589, column: 14, scope: !873)
!877 = !DILocation(line: 588, column: 11, scope: !874)
!878 = !DILocation(line: 592, column: 15, scope: !879)
!879 = distinct !DILexicalBlock(scope: !880, file: !3, line: 592, column: 15)
!880 = distinct !DILexicalBlock(scope: !873, file: !3, line: 591, column: 9)
!881 = !DILocation(line: 592, column: 26, scope: !879)
!882 = !DILocation(line: 592, column: 29, scope: !879)
!883 = !DILocation(line: 592, column: 15, scope: !880)
!884 = !DILocation(line: 593, column: 25, scope: !879)
!885 = !DILocation(line: 593, column: 35, scope: !879)
!886 = !DILocation(line: 593, column: 13, scope: !879)
!887 = !DILocation(line: 594, column: 20, scope: !888)
!888 = distinct !DILexicalBlock(scope: !879, file: !3, line: 594, column: 20)
!889 = !DILocation(line: 594, column: 34, scope: !888)
!890 = !DILocation(line: 594, column: 37, scope: !888)
!891 = !DILocation(line: 594, column: 20, scope: !879)
!892 = !DILocation(line: 595, column: 29, scope: !888)
!893 = !DILocation(line: 595, column: 13, scope: !888)
!894 = !DILocation(line: 596, column: 20, scope: !895)
!895 = distinct !DILexicalBlock(scope: !888, file: !3, line: 596, column: 20)
!896 = !DILocation(line: 596, column: 34, scope: !895)
!897 = !DILocation(line: 596, column: 37, scope: !895)
!898 = !DILocation(line: 596, column: 20, scope: !888)
!899 = !DILocation(line: 597, column: 29, scope: !895)
!900 = !DILocation(line: 597, column: 13, scope: !895)
!901 = !DILocation(line: 601, column: 20, scope: !902)
!902 = distinct !DILexicalBlock(scope: !895, file: !3, line: 601, column: 20)
!903 = !DILocation(line: 601, column: 37, scope: !902)
!904 = !DILocation(line: 601, column: 40, scope: !902)
!905 = !DILocation(line: 601, column: 20, scope: !895)
!906 = !DILocation(line: 602, column: 32, scope: !902)
!907 = !DILocation(line: 602, column: 13, scope: !902)
!908 = !DILocation(line: 603, column: 20, scope: !909)
!909 = distinct !DILexicalBlock(scope: !902, file: !3, line: 603, column: 20)
!910 = !DILocation(line: 603, column: 35, scope: !909)
!911 = !DILocation(line: 603, column: 38, scope: !909)
!912 = !DILocation(line: 603, column: 20, scope: !902)
!913 = !DILocation(line: 604, column: 30, scope: !909)
!914 = !DILocation(line: 604, column: 13, scope: !909)
!915 = !DILocation(line: 605, column: 20, scope: !916)
!916 = distinct !DILexicalBlock(scope: !909, file: !3, line: 605, column: 20)
!917 = !DILocation(line: 605, column: 31, scope: !916)
!918 = !DILocation(line: 605, column: 34, scope: !916)
!919 = !DILocation(line: 605, column: 20, scope: !909)
!920 = !DILocation(line: 606, column: 26, scope: !916)
!921 = !DILocation(line: 606, column: 13, scope: !916)
!922 = !DILocation(line: 607, column: 20, scope: !923)
!923 = distinct !DILexicalBlock(scope: !916, file: !3, line: 607, column: 20)
!924 = !DILocation(line: 607, column: 35, scope: !923)
!925 = !DILocation(line: 607, column: 38, scope: !923)
!926 = !DILocation(line: 607, column: 20, scope: !916)
!927 = !DILocation(line: 608, column: 30, scope: !923)
!928 = !DILocation(line: 608, column: 13, scope: !923)
!929 = !DILocation(line: 609, column: 9, scope: !880)
!930 = !DILocation(line: 611, column: 11, scope: !931)
!931 = distinct !DILexicalBlock(scope: !874, file: !3, line: 611, column: 11)
!932 = !DILocation(line: 611, column: 11, scope: !874)
!933 = !DILocation(line: 612, column: 20, scope: !931)
!934 = !DILocation(line: 612, column: 18, scope: !931)
!935 = !DILocation(line: 612, column: 9, scope: !931)
!936 = !DILocation(line: 614, column: 15, scope: !874)
!937 = distinct !{!937, !870, !938}
!938 = !DILocation(line: 615, column: 5, scope: !841)
!939 = !DILocation(line: 616, column: 1, scope: !841)
!940 = !DILocalVariable(name: "n", arg: 1, scope: !941, file: !3, line: 569, type: !110)
!941 = distinct !DISubprogram(name: "scan_entries", scope: !3, file: !3, line: 569, type: !942, scopeLine: 570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !968, retainedNodes: !4)
!942 = !DISubroutineType(types: !943)
!943 = !{null, !110, !944}
!944 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !945, size: 64)
!945 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !946)
!946 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !947)
!947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !948)
!948 = !{!949, !950, !951, !952, !953, !954, !955, !960, !961, !966, !967}
!949 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !947, file: !72, line: 57, baseType: !14, size: 16)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !947, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !947, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !947, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !947, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !947, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !947, file: !72, line: 67, baseType: !956, size: 32, offset: 2656)
!956 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !957)
!957 = !{!958, !959}
!958 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !956, file: !72, line: 45, baseType: !14, size: 16)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !956, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !947, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !947, file: !72, line: 79, baseType: !962, size: 64, offset: 2720)
!962 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !947, file: !72, line: 75, size: 64, elements: !963)
!963 = !{!964, !965}
!964 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !962, file: !72, line: 77, baseType: !96, size: 32)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !962, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !947, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !947, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!968 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !969, nameTableKind: None)
!969 = !{!970, !972, !974, !976, !978, !980, !982, !984, !986, !988, !990, !992, !994, !996, !998, !1000, !1002, !1004, !1014, !1017, !1022, !1024, !1027, !1029, !1034, !1039, !1041}
!970 = !DIGlobalVariableExpression(var: !971, expr: !DIExpression())
!971 = distinct !DIGlobalVariable(name: "do_lookup", scope: !968, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!972 = !DIGlobalVariableExpression(var: !973, expr: !DIExpression())
!973 = distinct !DIGlobalVariable(name: "short_list", scope: !968, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!974 = !DIGlobalVariableExpression(var: !975, expr: !DIExpression())
!975 = distinct !DIGlobalVariable(name: "short_output", scope: !968, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!976 = !DIGlobalVariableExpression(var: !977, expr: !DIExpression())
!977 = distinct !DIGlobalVariable(name: "include_idle", scope: !968, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!978 = !DIGlobalVariableExpression(var: !979, expr: !DIExpression())
!979 = distinct !DIGlobalVariable(name: "include_heading", scope: !968, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!980 = !DIGlobalVariableExpression(var: !981, expr: !DIExpression())
!981 = distinct !DIGlobalVariable(name: "include_mesg", scope: !968, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!982 = !DIGlobalVariableExpression(var: !983, expr: !DIExpression())
!983 = distinct !DIGlobalVariable(name: "include_exit", scope: !968, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!984 = !DIGlobalVariableExpression(var: !985, expr: !DIExpression())
!985 = distinct !DIGlobalVariable(name: "need_boottime", scope: !968, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!986 = !DIGlobalVariableExpression(var: !987, expr: !DIExpression())
!987 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !968, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!988 = !DIGlobalVariableExpression(var: !989, expr: !DIExpression())
!989 = distinct !DIGlobalVariable(name: "need_login", scope: !968, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!990 = !DIGlobalVariableExpression(var: !991, expr: !DIExpression())
!991 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !968, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!992 = !DIGlobalVariableExpression(var: !993, expr: !DIExpression())
!993 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !968, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!994 = !DIGlobalVariableExpression(var: !995, expr: !DIExpression())
!995 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !968, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!996 = !DIGlobalVariableExpression(var: !997, expr: !DIExpression())
!997 = distinct !DIGlobalVariable(name: "need_users", scope: !968, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!998 = !DIGlobalVariableExpression(var: !999, expr: !DIExpression())
!999 = distinct !DIGlobalVariable(name: "my_line_only", scope: !968, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1000 = !DIGlobalVariableExpression(var: !1001, expr: !DIExpression())
!1001 = distinct !DIGlobalVariable(name: "time_format", scope: !968, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1002 = !DIGlobalVariableExpression(var: !1003, expr: !DIExpression())
!1003 = distinct !DIGlobalVariable(name: "time_format_width", scope: !968, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1004 = !DIGlobalVariableExpression(var: !1005, expr: !DIExpression())
!1005 = distinct !DIGlobalVariable(name: "longopts", scope: !968, file: !3, line: 162, type: !1006, isLocal: true, isDefinition: true)
!1006 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1007, size: 4608, elements: !151)
!1007 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1008)
!1008 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1009)
!1009 = !{!1010, !1011, !1012, !1013}
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1008, file: !144, line: 52, baseType: !49, size: 64)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1008, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1008, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1008, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1014 = !DIGlobalVariableExpression(var: !1015, expr: !DIExpression())
!1015 = distinct !DIGlobalVariable(name: "mesg", scope: !1016, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1016 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !968, retainedNodes: !4)
!1017 = !DIGlobalVariableExpression(var: !1018, expr: !DIExpression())
!1018 = distinct !DIGlobalVariable(name: "hoststr", scope: !1019, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1019 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1020, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !968, retainedNodes: !4)
!1020 = !DISubroutineType(types: !1021)
!1021 = !{null, !944, !9}
!1022 = !DIGlobalVariableExpression(var: !1023, expr: !DIExpression())
!1023 = distinct !DIGlobalVariable(name: "hostlen", scope: !1019, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1024 = !DIGlobalVariableExpression(var: !1025, expr: !DIExpression())
!1025 = distinct !DIGlobalVariable(name: "now", scope: !1026, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1026 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !968, retainedNodes: !4)
!1027 = !DIGlobalVariableExpression(var: !1028, expr: !DIExpression())
!1028 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1026, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1029 = !DIGlobalVariableExpression(var: !1030, expr: !DIExpression())
!1030 = distinct !DIGlobalVariable(name: "buf", scope: !1031, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1031 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1032, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !968, retainedNodes: !4)
!1032 = !DISubroutineType(types: !1033)
!1033 = !{!49, !944}
!1034 = !DIGlobalVariableExpression(var: !1035, expr: !DIExpression())
!1035 = distinct !DIGlobalVariable(name: "runlevline", scope: !1036, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1036 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1037, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !968, retainedNodes: !4)
!1037 = !DISubroutineType(types: !1038)
!1038 = !{null, !944}
!1039 = !DIGlobalVariableExpression(var: !1040, expr: !DIExpression())
!1040 = distinct !DIGlobalVariable(name: "comment", scope: !1036, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1041 = !DIGlobalVariableExpression(var: !1042, expr: !DIExpression())
!1042 = distinct !DIGlobalVariable(name: "exitstr", scope: !1043, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1043 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1037, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !968, retainedNodes: !4)
!1044 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !941, file: !3, line: 569, type: !944)
!1045 = !DILocalVariable(name: "ttyname_b", scope: !941, file: !3, line: 571, type: !6)
!1046 = !DILocalVariable(name: "boottime", scope: !941, file: !3, line: 572, type: !9)
!1047 = distinct !DISubprogram(name: "print_heading", scope: !3, file: !3, line: 561, type: !1048, scopeLine: 562, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1048 = !DISubroutineType(types: !1049)
!1049 = !{null}
!1050 = !DILocation(line: 563, column: 19, scope: !1047)
!1051 = !DILocation(line: 563, column: 39, scope: !1047)
!1052 = !DILocation(line: 563, column: 50, scope: !1047)
!1053 = !DILocation(line: 563, column: 61, scope: !1047)
!1054 = !DILocation(line: 564, column: 15, scope: !1047)
!1055 = !DILocation(line: 564, column: 25, scope: !1047)
!1056 = !DILocation(line: 564, column: 39, scope: !1047)
!1057 = !DILocation(line: 563, column: 3, scope: !1047)
!1058 = !DILocation(line: 565, column: 1, scope: !1047)
!1059 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !64, file: !3, line: 333, type: !67)
!1060 = !DILocation(line: 333, column: 32, scope: !64)
!1061 = !DILocalVariable(name: "boottime", arg: 2, scope: !64, file: !3, line: 333, type: !9)
!1062 = !DILocation(line: 333, column: 49, scope: !64)
!1063 = !DILocalVariable(name: "stats", scope: !64, file: !3, line: 335, type: !1064)
!1064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !1065, line: 46, size: 1152, elements: !1066)
!1065 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!1066 = !{!1067, !1069, !1071, !1073, !1075, !1077, !1079, !1080, !1081, !1083, !1085, !1087, !1094, !1095, !1096}
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !1064, file: !1065, line: 48, baseType: !1068, size: 64)
!1068 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !12, line: 145, baseType: !112)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !1064, file: !1065, line: 53, baseType: !1070, size: 64, offset: 64)
!1070 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !12, line: 148, baseType: !112)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !1064, file: !1065, line: 61, baseType: !1072, size: 64, offset: 128)
!1072 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !12, line: 151, baseType: !112)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !1064, file: !1065, line: 62, baseType: !1074, size: 32, offset: 192)
!1074 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !12, line: 150, baseType: !180)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !1064, file: !1065, line: 64, baseType: !1076, size: 32, offset: 224)
!1076 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !12, line: 146, baseType: !180)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !1064, file: !1065, line: 65, baseType: !1078, size: 32, offset: 256)
!1078 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !12, line: 147, baseType: !180)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !1064, file: !1065, line: 67, baseType: !53, size: 32, offset: 288)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !1064, file: !1065, line: 69, baseType: !1068, size: 64, offset: 320)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !1064, file: !1065, line: 74, baseType: !1082, size: 64, offset: 384)
!1082 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !12, line: 152, baseType: !13)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !1064, file: !1065, line: 78, baseType: !1084, size: 64, offset: 448)
!1084 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !12, line: 174, baseType: !13)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !1064, file: !1065, line: 80, baseType: !1086, size: 64, offset: 512)
!1086 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !12, line: 179, baseType: !13)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !1064, file: !1065, line: 91, baseType: !1088, size: 128, offset: 576)
!1088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !1089, line: 10, size: 128, elements: !1090)
!1089 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!1090 = !{!1091, !1092}
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1088, file: !1089, line: 12, baseType: !11, size: 64)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1088, file: !1089, line: 16, baseType: !1093, size: 64, offset: 64)
!1093 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !12, line: 196, baseType: !13)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !1064, file: !1065, line: 92, baseType: !1088, size: 128, offset: 704)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !1064, file: !1065, line: 93, baseType: !1088, size: 128, offset: 832)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1064, file: !1065, line: 106, baseType: !1097, size: 192, offset: 960)
!1097 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1093, size: 192, elements: !60)
!1098 = !DILocation(line: 335, column: 15, scope: !64)
!1099 = !DILocalVariable(name: "last_change", scope: !64, file: !3, line: 336, type: !9)
!1100 = !DILocation(line: 336, column: 10, scope: !64)
!1101 = !DILocalVariable(name: "mesg", scope: !64, file: !3, line: 337, type: !7)
!1102 = !DILocation(line: 337, column: 8, scope: !64)
!1103 = !DILocalVariable(name: "idlestr", scope: !64, file: !3, line: 338, type: !1104)
!1104 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 56, elements: !376)
!1105 = !DILocation(line: 338, column: 8, scope: !64)
!1106 = !DILocalVariable(name: "line", scope: !64, file: !3, line: 347, type: !1107)
!1107 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 304, elements: !1108)
!1108 = !{!1109}
!1109 = !DISubrange(count: 38)
!1110 = !DILocation(line: 347, column: 8, scope: !64)
!1111 = !DILocalVariable(name: "p", scope: !64, file: !3, line: 348, type: !6)
!1112 = !DILocation(line: 348, column: 9, scope: !64)
!1113 = !DILocation(line: 348, column: 13, scope: !64)
!1114 = !DILocalVariable(name: "pidstr", scope: !64, file: !3, line: 349, type: !1115)
!1115 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 96, elements: !1116)
!1116 = !{!1117}
!1117 = !DISubrange(count: 12)
!1118 = !DILocation(line: 349, column: 3, scope: !64)
!1119 = !DILocation(line: 354, column: 10, scope: !1120)
!1120 = distinct !DILexicalBlock(scope: !64, file: !3, line: 354, column: 8)
!1121 = !DILocation(line: 354, column: 8, scope: !64)
!1122 = !DILocation(line: 355, column: 17, scope: !1120)
!1123 = !DILocation(line: 355, column: 9, scope: !1120)
!1124 = !DILocation(line: 355, column: 7, scope: !1120)
!1125 = !DILocation(line: 355, column: 5, scope: !1120)
!1126 = !DILocation(line: 356, column: 12, scope: !64)
!1127 = !DILocation(line: 356, column: 15, scope: !64)
!1128 = !DILocation(line: 356, column: 25, scope: !64)
!1129 = !DILocation(line: 356, column: 3, scope: !64)
!1130 = !DILocation(line: 358, column: 13, scope: !1131)
!1131 = distinct !DILexicalBlock(scope: !64, file: !3, line: 358, column: 7)
!1132 = !DILocation(line: 358, column: 7, scope: !1131)
!1133 = !DILocation(line: 358, column: 27, scope: !1131)
!1134 = !DILocation(line: 358, column: 7, scope: !64)
!1135 = !DILocation(line: 360, column: 14, scope: !1136)
!1136 = distinct !DILexicalBlock(scope: !1131, file: !3, line: 359, column: 5)
!1137 = !DILocation(line: 360, column: 12, scope: !1136)
!1138 = !DILocation(line: 361, column: 27, scope: !1136)
!1139 = !DILocation(line: 361, column: 19, scope: !1136)
!1140 = !DILocation(line: 362, column: 5, scope: !1136)
!1141 = !DILocation(line: 365, column: 12, scope: !1142)
!1142 = distinct !DILexicalBlock(scope: !1131, file: !3, line: 364, column: 5)
!1143 = !DILocation(line: 366, column: 19, scope: !1142)
!1144 = !DILocation(line: 369, column: 7, scope: !1145)
!1145 = distinct !DILexicalBlock(scope: !64, file: !3, line: 369, column: 7)
!1146 = !DILocation(line: 369, column: 7, scope: !64)
!1147 = !DILocation(line: 370, column: 14, scope: !1145)
!1148 = !DILocation(line: 370, column: 57, scope: !1145)
!1149 = !DILocation(line: 370, column: 70, scope: !1145)
!1150 = !DILocation(line: 370, column: 44, scope: !1145)
!1151 = !DILocation(line: 370, column: 5, scope: !1145)
!1152 = !DILocation(line: 372, column: 14, scope: !1145)
!1153 = !DILocation(line: 372, column: 5, scope: !1145)
!1154 = !DILocation(line: 375, column: 7, scope: !1155)
!1155 = distinct !DILexicalBlock(scope: !64, file: !3, line: 375, column: 7)
!1156 = !DILocation(line: 375, column: 17, scope: !1155)
!1157 = !DILocation(line: 375, column: 7, scope: !64)
!1158 = !DILocalVariable(name: "ut_host", scope: !1159, file: !3, line: 377, type: !1160)
!1159 = distinct !DILexicalBlock(scope: !1155, file: !3, line: 376, column: 5)
!1160 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2056, elements: !1161)
!1161 = !{!1162}
!1162 = !DISubrange(count: 257)
!1163 = !DILocation(line: 377, column: 12, scope: !1159)
!1164 = !DILocalVariable(name: "host", scope: !1159, file: !3, line: 378, type: !6)
!1165 = !DILocation(line: 378, column: 13, scope: !1159)
!1166 = !DILocalVariable(name: "display", scope: !1159, file: !3, line: 379, type: !6)
!1167 = !DILocation(line: 379, column: 13, scope: !1159)
!1168 = !DILocation(line: 382, column: 16, scope: !1159)
!1169 = !DILocation(line: 382, column: 25, scope: !1159)
!1170 = !DILocation(line: 382, column: 35, scope: !1159)
!1171 = !DILocation(line: 382, column: 7, scope: !1159)
!1172 = !DILocation(line: 385, column: 25, scope: !1159)
!1173 = !DILocation(line: 385, column: 17, scope: !1159)
!1174 = !DILocation(line: 385, column: 15, scope: !1159)
!1175 = !DILocation(line: 386, column: 11, scope: !1176)
!1176 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 386, column: 11)
!1177 = !DILocation(line: 386, column: 11, scope: !1159)
!1178 = !DILocation(line: 387, column: 17, scope: !1176)
!1179 = !DILocation(line: 387, column: 20, scope: !1176)
!1180 = !DILocation(line: 387, column: 9, scope: !1176)
!1181 = !DILocation(line: 389, column: 11, scope: !1182)
!1182 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 389, column: 11)
!1183 = !DILocation(line: 389, column: 20, scope: !1182)
!1184 = !DILocation(line: 389, column: 23, scope: !1182)
!1185 = !DILocation(line: 389, column: 11, scope: !1159)
!1186 = !DILocation(line: 392, column: 30, scope: !1187)
!1187 = distinct !DILexicalBlock(scope: !1182, file: !3, line: 390, column: 9)
!1188 = !DILocation(line: 392, column: 18, scope: !1187)
!1189 = !DILocation(line: 392, column: 16, scope: !1187)
!1190 = !DILocation(line: 393, column: 9, scope: !1187)
!1191 = !DILocation(line: 395, column: 13, scope: !1192)
!1192 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 395, column: 11)
!1193 = !DILocation(line: 395, column: 11, scope: !1159)
!1194 = !DILocation(line: 396, column: 16, scope: !1192)
!1195 = !DILocation(line: 396, column: 14, scope: !1192)
!1196 = !DILocation(line: 396, column: 9, scope: !1192)
!1197 = !DILocation(line: 398, column: 11, scope: !1198)
!1198 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 398, column: 11)
!1199 = !DILocation(line: 398, column: 11, scope: !1159)
!1200 = !DILocation(line: 400, column: 15, scope: !1201)
!1201 = distinct !DILexicalBlock(scope: !1202, file: !3, line: 400, column: 15)
!1202 = distinct !DILexicalBlock(scope: !1198, file: !3, line: 399, column: 9)
!1203 = !DILocation(line: 400, column: 33, scope: !1201)
!1204 = !DILocation(line: 400, column: 25, scope: !1201)
!1205 = !DILocation(line: 400, column: 49, scope: !1201)
!1206 = !DILocation(line: 400, column: 41, scope: !1201)
!1207 = !DILocation(line: 400, column: 39, scope: !1201)
!1208 = !DILocation(line: 400, column: 58, scope: !1201)
!1209 = !DILocation(line: 400, column: 23, scope: !1201)
!1210 = !DILocation(line: 400, column: 15, scope: !1202)
!1211 = !DILocation(line: 402, column: 33, scope: !1212)
!1212 = distinct !DILexicalBlock(scope: !1201, file: !3, line: 401, column: 13)
!1213 = !DILocation(line: 402, column: 25, scope: !1212)
!1214 = !DILocation(line: 402, column: 49, scope: !1212)
!1215 = !DILocation(line: 402, column: 41, scope: !1212)
!1216 = !DILocation(line: 402, column: 39, scope: !1212)
!1217 = !DILocation(line: 402, column: 58, scope: !1212)
!1218 = !DILocation(line: 402, column: 23, scope: !1212)
!1219 = !DILocation(line: 403, column: 21, scope: !1212)
!1220 = !DILocation(line: 403, column: 15, scope: !1212)
!1221 = !DILocation(line: 404, column: 34, scope: !1212)
!1222 = !DILocation(line: 404, column: 25, scope: !1212)
!1223 = !DILocation(line: 404, column: 23, scope: !1212)
!1224 = !DILocation(line: 405, column: 13, scope: !1212)
!1225 = !DILocation(line: 406, column: 20, scope: !1202)
!1226 = !DILocation(line: 406, column: 40, scope: !1202)
!1227 = !DILocation(line: 406, column: 46, scope: !1202)
!1228 = !DILocation(line: 406, column: 11, scope: !1202)
!1229 = !DILocation(line: 407, column: 9, scope: !1202)
!1230 = !DILocation(line: 410, column: 15, scope: !1231)
!1231 = distinct !DILexicalBlock(scope: !1232, file: !3, line: 410, column: 15)
!1232 = distinct !DILexicalBlock(scope: !1198, file: !3, line: 409, column: 9)
!1233 = !DILocation(line: 410, column: 33, scope: !1231)
!1234 = !DILocation(line: 410, column: 25, scope: !1231)
!1235 = !DILocation(line: 410, column: 39, scope: !1231)
!1236 = !DILocation(line: 410, column: 23, scope: !1231)
!1237 = !DILocation(line: 410, column: 15, scope: !1232)
!1238 = !DILocation(line: 412, column: 33, scope: !1239)
!1239 = distinct !DILexicalBlock(scope: !1231, file: !3, line: 411, column: 13)
!1240 = !DILocation(line: 412, column: 25, scope: !1239)
!1241 = !DILocation(line: 412, column: 39, scope: !1239)
!1242 = !DILocation(line: 412, column: 23, scope: !1239)
!1243 = !DILocation(line: 413, column: 21, scope: !1239)
!1244 = !DILocation(line: 413, column: 15, scope: !1239)
!1245 = !DILocation(line: 414, column: 34, scope: !1239)
!1246 = !DILocation(line: 414, column: 25, scope: !1239)
!1247 = !DILocation(line: 414, column: 23, scope: !1239)
!1248 = !DILocation(line: 415, column: 13, scope: !1239)
!1249 = !DILocation(line: 416, column: 20, scope: !1232)
!1250 = !DILocation(line: 416, column: 37, scope: !1232)
!1251 = !DILocation(line: 416, column: 11, scope: !1232)
!1252 = !DILocation(line: 419, column: 11, scope: !1253)
!1253 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 419, column: 11)
!1254 = !DILocation(line: 419, column: 19, scope: !1253)
!1255 = !DILocation(line: 419, column: 16, scope: !1253)
!1256 = !DILocation(line: 419, column: 11, scope: !1159)
!1257 = !DILocation(line: 420, column: 15, scope: !1253)
!1258 = !DILocation(line: 420, column: 9, scope: !1253)
!1259 = !DILocation(line: 421, column: 5, scope: !1159)
!1260 = !DILocation(line: 424, column: 11, scope: !1261)
!1261 = distinct !DILexicalBlock(scope: !1262, file: !3, line: 424, column: 11)
!1262 = distinct !DILexicalBlock(scope: !1155, file: !3, line: 423, column: 5)
!1263 = !DILocation(line: 424, column: 19, scope: !1261)
!1264 = !DILocation(line: 424, column: 11, scope: !1262)
!1265 = !DILocation(line: 426, column: 19, scope: !1266)
!1266 = distinct !DILexicalBlock(scope: !1261, file: !3, line: 425, column: 9)
!1267 = !DILocation(line: 427, column: 17, scope: !1266)
!1268 = !DILocation(line: 427, column: 11, scope: !1266)
!1269 = !DILocation(line: 428, column: 30, scope: !1266)
!1270 = !DILocation(line: 428, column: 21, scope: !1266)
!1271 = !DILocation(line: 428, column: 19, scope: !1266)
!1272 = !DILocation(line: 429, column: 9, scope: !1266)
!1273 = !DILocation(line: 430, column: 8, scope: !1262)
!1274 = !DILocation(line: 430, column: 16, scope: !1262)
!1275 = !DILocation(line: 434, column: 42, scope: !64)
!1276 = !DILocation(line: 434, column: 62, scope: !64)
!1277 = !DILocation(line: 435, column: 41, scope: !64)
!1278 = !DILocation(line: 435, column: 51, scope: !64)
!1279 = !DILocation(line: 436, column: 28, scope: !64)
!1280 = !DILocation(line: 436, column: 15, scope: !64)
!1281 = !DILocation(line: 436, column: 39, scope: !64)
!1282 = !DILocation(line: 436, column: 48, scope: !64)
!1283 = !DILocation(line: 437, column: 15, scope: !64)
!1284 = !DILocation(line: 437, column: 25, scope: !64)
!1285 = !DILocation(line: 434, column: 3, scope: !64)
!1286 = !DILocation(line: 438, column: 1, scope: !64)
!1287 = !DILocalVariable(name: "display", scope: !1288, file: !3, line: 379, type: !6)
!1288 = distinct !DILexicalBlock(scope: !1289, file: !3, line: 376, column: 5)
!1289 = distinct !DILexicalBlock(scope: !1290, file: !3, line: 375, column: 7)
!1290 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1291, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1317, retainedNodes: !4)
!1291 = !DISubroutineType(types: !1292)
!1292 = !{null, !1293, !9}
!1293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1294, size: 64)
!1294 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1295)
!1295 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1296)
!1296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1297)
!1297 = !{!1298, !1299, !1300, !1301, !1302, !1303, !1304, !1309, !1310, !1315, !1316}
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1296, file: !72, line: 57, baseType: !14, size: 16)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1296, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1296, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1296, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1296, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1296, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1296, file: !72, line: 67, baseType: !1305, size: 32, offset: 2656)
!1305 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1306)
!1306 = !{!1307, !1308}
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1305, file: !72, line: 45, baseType: !14, size: 16)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1305, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1296, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1296, file: !72, line: 79, baseType: !1311, size: 64, offset: 2720)
!1311 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1296, file: !72, line: 75, size: 64, elements: !1312)
!1312 = !{!1313, !1314}
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1311, file: !72, line: 77, baseType: !96, size: 32)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1311, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1296, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1296, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1317 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1318, nameTableKind: None)
!1318 = !{!1319, !1321, !1323, !1325, !1327, !1329, !1331, !1333, !1335, !1337, !1339, !1341, !1343, !1345, !1347, !1349, !1351, !1353, !1363, !1366, !1368, !1370, !1373, !1375, !1380, !1385, !1387}
!1319 = !DIGlobalVariableExpression(var: !1320, expr: !DIExpression())
!1320 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1317, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1321 = !DIGlobalVariableExpression(var: !1322, expr: !DIExpression())
!1322 = distinct !DIGlobalVariable(name: "short_list", scope: !1317, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1323 = !DIGlobalVariableExpression(var: !1324, expr: !DIExpression())
!1324 = distinct !DIGlobalVariable(name: "short_output", scope: !1317, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1325 = !DIGlobalVariableExpression(var: !1326, expr: !DIExpression())
!1326 = distinct !DIGlobalVariable(name: "include_idle", scope: !1317, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1327 = !DIGlobalVariableExpression(var: !1328, expr: !DIExpression())
!1328 = distinct !DIGlobalVariable(name: "include_heading", scope: !1317, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1329 = !DIGlobalVariableExpression(var: !1330, expr: !DIExpression())
!1330 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1317, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1331 = !DIGlobalVariableExpression(var: !1332, expr: !DIExpression())
!1332 = distinct !DIGlobalVariable(name: "include_exit", scope: !1317, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1333 = !DIGlobalVariableExpression(var: !1334, expr: !DIExpression())
!1334 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1317, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1335 = !DIGlobalVariableExpression(var: !1336, expr: !DIExpression())
!1336 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1317, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1337 = !DIGlobalVariableExpression(var: !1338, expr: !DIExpression())
!1338 = distinct !DIGlobalVariable(name: "need_login", scope: !1317, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1339 = !DIGlobalVariableExpression(var: !1340, expr: !DIExpression())
!1340 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1317, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1341 = !DIGlobalVariableExpression(var: !1342, expr: !DIExpression())
!1342 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1317, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1343 = !DIGlobalVariableExpression(var: !1344, expr: !DIExpression())
!1344 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1317, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1345 = !DIGlobalVariableExpression(var: !1346, expr: !DIExpression())
!1346 = distinct !DIGlobalVariable(name: "need_users", scope: !1317, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1347 = !DIGlobalVariableExpression(var: !1348, expr: !DIExpression())
!1348 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1317, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1349 = !DIGlobalVariableExpression(var: !1350, expr: !DIExpression())
!1350 = distinct !DIGlobalVariable(name: "time_format", scope: !1317, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1351 = !DIGlobalVariableExpression(var: !1352, expr: !DIExpression())
!1352 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1317, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1353 = !DIGlobalVariableExpression(var: !1354, expr: !DIExpression())
!1354 = distinct !DIGlobalVariable(name: "longopts", scope: !1317, file: !3, line: 162, type: !1355, isLocal: true, isDefinition: true)
!1355 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1356, size: 4608, elements: !151)
!1356 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1357)
!1357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1358)
!1358 = !{!1359, !1360, !1361, !1362}
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1357, file: !144, line: 52, baseType: !49, size: 64)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1357, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1357, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1357, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1363 = !DIGlobalVariableExpression(var: !1364, expr: !DIExpression())
!1364 = distinct !DIGlobalVariable(name: "mesg", scope: !1365, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1365 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1317, retainedNodes: !4)
!1366 = !DIGlobalVariableExpression(var: !1367, expr: !DIExpression())
!1367 = distinct !DIGlobalVariable(name: "hoststr", scope: !1290, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1368 = !DIGlobalVariableExpression(var: !1369, expr: !DIExpression())
!1369 = distinct !DIGlobalVariable(name: "hostlen", scope: !1290, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1370 = !DIGlobalVariableExpression(var: !1371, expr: !DIExpression())
!1371 = distinct !DIGlobalVariable(name: "now", scope: !1372, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1372 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1317, retainedNodes: !4)
!1373 = !DIGlobalVariableExpression(var: !1374, expr: !DIExpression())
!1374 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1372, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1375 = !DIGlobalVariableExpression(var: !1376, expr: !DIExpression())
!1376 = distinct !DIGlobalVariable(name: "buf", scope: !1377, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1377 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1378, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1317, retainedNodes: !4)
!1378 = !DISubroutineType(types: !1379)
!1379 = !{!49, !1293}
!1380 = !DIGlobalVariableExpression(var: !1381, expr: !DIExpression())
!1381 = distinct !DIGlobalVariable(name: "runlevline", scope: !1382, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1382 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1383, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1317, retainedNodes: !4)
!1383 = !DISubroutineType(types: !1384)
!1384 = !{null, !1293}
!1385 = !DIGlobalVariableExpression(var: !1386, expr: !DIExpression())
!1386 = distinct !DIGlobalVariable(name: "comment", scope: !1382, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1387 = !DIGlobalVariableExpression(var: !1388, expr: !DIExpression())
!1388 = distinct !DIGlobalVariable(name: "exitstr", scope: !1389, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1389 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1383, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1317, retainedNodes: !4)
!1390 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !133, file: !3, line: 514, type: !67)
!1391 = !DILocation(line: 514, column: 36, scope: !133)
!1392 = !DILocalVariable(name: "last", scope: !133, file: !3, line: 517, type: !317)
!1393 = !DILocation(line: 517, column: 17, scope: !133)
!1394 = !DILocation(line: 517, column: 24, scope: !133)
!1395 = !DILocation(line: 517, column: 42, scope: !133)
!1396 = !DILocalVariable(name: "curr", scope: !133, file: !3, line: 518, type: !317)
!1397 = !DILocation(line: 518, column: 17, scope: !133)
!1398 = !DILocation(line: 518, column: 24, scope: !133)
!1399 = !DILocation(line: 518, column: 42, scope: !133)
!1400 = !DILocation(line: 520, column: 8, scope: !1401)
!1401 = distinct !DILexicalBlock(scope: !133, file: !3, line: 520, column: 7)
!1402 = !DILocation(line: 520, column: 7, scope: !133)
!1403 = !DILocation(line: 521, column: 35, scope: !1401)
!1404 = !DILocation(line: 521, column: 27, scope: !1401)
!1405 = !DILocation(line: 521, column: 51, scope: !1401)
!1406 = !DILocation(line: 521, column: 18, scope: !1401)
!1407 = !DILocation(line: 521, column: 16, scope: !1401)
!1408 = !DILocation(line: 521, column: 5, scope: !1401)
!1409 = !DILocation(line: 522, column: 12, scope: !133)
!1410 = !DILocation(line: 522, column: 33, scope: !133)
!1411 = !DILocation(line: 522, column: 49, scope: !133)
!1412 = !DILocation(line: 522, column: 3, scope: !133)
!1413 = !DILocation(line: 524, column: 8, scope: !1414)
!1414 = distinct !DILexicalBlock(scope: !133, file: !3, line: 524, column: 7)
!1415 = !DILocation(line: 524, column: 7, scope: !133)
!1416 = !DILocation(line: 525, column: 32, scope: !1414)
!1417 = !DILocation(line: 525, column: 24, scope: !1414)
!1418 = !DILocation(line: 525, column: 44, scope: !1414)
!1419 = !DILocation(line: 525, column: 15, scope: !1414)
!1420 = !DILocation(line: 525, column: 13, scope: !1414)
!1421 = !DILocation(line: 525, column: 5, scope: !1414)
!1422 = !DILocation(line: 526, column: 12, scope: !133)
!1423 = !DILocation(line: 526, column: 29, scope: !133)
!1424 = !DILocation(line: 526, column: 42, scope: !133)
!1425 = !DILocation(line: 526, column: 47, scope: !133)
!1426 = !DILocation(line: 526, column: 41, scope: !133)
!1427 = !DILocation(line: 526, column: 63, scope: !133)
!1428 = !DILocation(line: 526, column: 3, scope: !133)
!1429 = !DILocation(line: 528, column: 32, scope: !133)
!1430 = !DILocation(line: 528, column: 57, scope: !133)
!1431 = !DILocation(line: 528, column: 44, scope: !133)
!1432 = !DILocation(line: 529, column: 34, scope: !133)
!1433 = !DILocation(line: 529, column: 23, scope: !133)
!1434 = !DILocation(line: 529, column: 42, scope: !133)
!1435 = !DILocation(line: 528, column: 3, scope: !133)
!1436 = !DILocation(line: 531, column: 3, scope: !133)
!1437 = distinct !DISubprogram(name: "print_boottime", scope: !3, file: !3, line: 441, type: !134, scopeLine: 442, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1438 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1437, file: !3, line: 441, type: !67)
!1439 = !DILocation(line: 441, column: 36, scope: !1437)
!1440 = !DILocation(line: 443, column: 32, scope: !1437)
!1441 = !DILocation(line: 444, column: 28, scope: !1437)
!1442 = !DILocation(line: 444, column: 15, scope: !1437)
!1443 = !DILocation(line: 443, column: 3, scope: !1437)
!1444 = !DILocation(line: 445, column: 1, scope: !1437)
!1445 = distinct !DISubprogram(name: "print_clockchange", scope: !3, file: !3, line: 506, type: !134, scopeLine: 507, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1446 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1445, file: !3, line: 506, type: !67)
!1447 = !DILocation(line: 506, column: 39, scope: !1445)
!1448 = !DILocation(line: 509, column: 32, scope: !1445)
!1449 = !DILocation(line: 510, column: 28, scope: !1445)
!1450 = !DILocation(line: 510, column: 15, scope: !1445)
!1451 = !DILocation(line: 509, column: 3, scope: !1445)
!1452 = !DILocation(line: 511, column: 1, scope: !1445)
!1453 = distinct !DISubprogram(name: "print_initspawn", scope: !3, file: !3, line: 495, type: !134, scopeLine: 496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1454 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1453, file: !3, line: 495, type: !67)
!1455 = !DILocation(line: 495, column: 37, scope: !1453)
!1456 = !DILocalVariable(name: "comment", scope: !1453, file: !3, line: 497, type: !6)
!1457 = !DILocation(line: 497, column: 9, scope: !1453)
!1458 = !DILocation(line: 497, column: 43, scope: !1453)
!1459 = !DILocation(line: 497, column: 19, scope: !1453)
!1460 = !DILocalVariable(name: "pidstr", scope: !1453, file: !3, line: 498, type: !1115)
!1461 = !DILocation(line: 498, column: 3, scope: !1453)
!1462 = !DILocation(line: 500, column: 54, scope: !1453)
!1463 = !DILocation(line: 500, column: 64, scope: !1453)
!1464 = !DILocation(line: 501, column: 28, scope: !1453)
!1465 = !DILocation(line: 501, column: 15, scope: !1453)
!1466 = !DILocation(line: 501, column: 43, scope: !1453)
!1467 = !DILocation(line: 501, column: 51, scope: !1453)
!1468 = !DILocation(line: 500, column: 3, scope: !1453)
!1469 = !DILocation(line: 502, column: 9, scope: !1453)
!1470 = !DILocation(line: 502, column: 3, scope: !1453)
!1471 = !DILocation(line: 503, column: 1, scope: !1453)
!1472 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1473, file: !3, line: 495, type: !1476)
!1473 = distinct !DISubprogram(name: "print_initspawn", scope: !3, file: !3, line: 495, type: !1474, scopeLine: 496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1500, retainedNodes: !4)
!1474 = !DISubroutineType(types: !1475)
!1475 = !{null, !1476}
!1476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1477, size: 64)
!1477 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1478)
!1478 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1479)
!1479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1480)
!1480 = !{!1481, !1482, !1483, !1484, !1485, !1486, !1487, !1492, !1493, !1498, !1499}
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1479, file: !72, line: 57, baseType: !14, size: 16)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1479, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1479, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1479, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1479, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1479, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1479, file: !72, line: 67, baseType: !1488, size: 32, offset: 2656)
!1488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1489)
!1489 = !{!1490, !1491}
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1488, file: !72, line: 45, baseType: !14, size: 16)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1488, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1479, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1479, file: !72, line: 79, baseType: !1494, size: 64, offset: 2720)
!1494 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1479, file: !72, line: 75, size: 64, elements: !1495)
!1495 = !{!1496, !1497}
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1494, file: !72, line: 77, baseType: !96, size: 32)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1494, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1479, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1479, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1500 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1501, nameTableKind: None)
!1501 = !{!1502, !1504, !1506, !1508, !1510, !1512, !1514, !1516, !1518, !1520, !1522, !1524, !1526, !1528, !1530, !1532, !1534, !1536, !1546, !1549, !1554, !1556, !1559, !1561, !1566, !1569, !1571}
!1502 = !DIGlobalVariableExpression(var: !1503, expr: !DIExpression())
!1503 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1500, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1504 = !DIGlobalVariableExpression(var: !1505, expr: !DIExpression())
!1505 = distinct !DIGlobalVariable(name: "short_list", scope: !1500, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1506 = !DIGlobalVariableExpression(var: !1507, expr: !DIExpression())
!1507 = distinct !DIGlobalVariable(name: "short_output", scope: !1500, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1508 = !DIGlobalVariableExpression(var: !1509, expr: !DIExpression())
!1509 = distinct !DIGlobalVariable(name: "include_idle", scope: !1500, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1510 = !DIGlobalVariableExpression(var: !1511, expr: !DIExpression())
!1511 = distinct !DIGlobalVariable(name: "include_heading", scope: !1500, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1512 = !DIGlobalVariableExpression(var: !1513, expr: !DIExpression())
!1513 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1500, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1514 = !DIGlobalVariableExpression(var: !1515, expr: !DIExpression())
!1515 = distinct !DIGlobalVariable(name: "include_exit", scope: !1500, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1516 = !DIGlobalVariableExpression(var: !1517, expr: !DIExpression())
!1517 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1500, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1518 = !DIGlobalVariableExpression(var: !1519, expr: !DIExpression())
!1519 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1500, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1520 = !DIGlobalVariableExpression(var: !1521, expr: !DIExpression())
!1521 = distinct !DIGlobalVariable(name: "need_login", scope: !1500, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1522 = !DIGlobalVariableExpression(var: !1523, expr: !DIExpression())
!1523 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1500, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1524 = !DIGlobalVariableExpression(var: !1525, expr: !DIExpression())
!1525 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1500, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1526 = !DIGlobalVariableExpression(var: !1527, expr: !DIExpression())
!1527 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1500, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1528 = !DIGlobalVariableExpression(var: !1529, expr: !DIExpression())
!1529 = distinct !DIGlobalVariable(name: "need_users", scope: !1500, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1530 = !DIGlobalVariableExpression(var: !1531, expr: !DIExpression())
!1531 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1500, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1532 = !DIGlobalVariableExpression(var: !1533, expr: !DIExpression())
!1533 = distinct !DIGlobalVariable(name: "time_format", scope: !1500, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1534 = !DIGlobalVariableExpression(var: !1535, expr: !DIExpression())
!1535 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1500, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1536 = !DIGlobalVariableExpression(var: !1537, expr: !DIExpression())
!1537 = distinct !DIGlobalVariable(name: "longopts", scope: !1500, file: !3, line: 162, type: !1538, isLocal: true, isDefinition: true)
!1538 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1539, size: 4608, elements: !151)
!1539 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1540)
!1540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1541)
!1541 = !{!1542, !1543, !1544, !1545}
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1540, file: !144, line: 52, baseType: !49, size: 64)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1540, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1540, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1540, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1546 = !DIGlobalVariableExpression(var: !1547, expr: !DIExpression())
!1547 = distinct !DIGlobalVariable(name: "mesg", scope: !1548, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1548 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1500, retainedNodes: !4)
!1549 = !DIGlobalVariableExpression(var: !1550, expr: !DIExpression())
!1550 = distinct !DIGlobalVariable(name: "hoststr", scope: !1551, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1551 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1552, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1500, retainedNodes: !4)
!1552 = !DISubroutineType(types: !1553)
!1553 = !{null, !1476, !9}
!1554 = !DIGlobalVariableExpression(var: !1555, expr: !DIExpression())
!1555 = distinct !DIGlobalVariable(name: "hostlen", scope: !1551, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1556 = !DIGlobalVariableExpression(var: !1557, expr: !DIExpression())
!1557 = distinct !DIGlobalVariable(name: "now", scope: !1558, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1558 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1500, retainedNodes: !4)
!1559 = !DIGlobalVariableExpression(var: !1560, expr: !DIExpression())
!1560 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1558, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1561 = !DIGlobalVariableExpression(var: !1562, expr: !DIExpression())
!1562 = distinct !DIGlobalVariable(name: "buf", scope: !1563, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1563 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1564, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1500, retainedNodes: !4)
!1564 = !DISubroutineType(types: !1565)
!1565 = !{!49, !1476}
!1566 = !DIGlobalVariableExpression(var: !1567, expr: !DIExpression())
!1567 = distinct !DIGlobalVariable(name: "runlevline", scope: !1568, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1568 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1474, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1500, retainedNodes: !4)
!1569 = !DIGlobalVariableExpression(var: !1570, expr: !DIExpression())
!1570 = distinct !DIGlobalVariable(name: "comment", scope: !1568, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1571 = !DIGlobalVariableExpression(var: !1572, expr: !DIExpression())
!1572 = distinct !DIGlobalVariable(name: "exitstr", scope: !1573, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1573 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1474, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1500, retainedNodes: !4)
!1574 = !DILocalVariable(name: "comment", scope: !1473, file: !3, line: 497, type: !6)
!1575 = !DILocalVariable(name: "pidstr", scope: !1473, file: !3, line: 498, type: !1115)
!1576 = distinct !DISubprogram(name: "print_login", scope: !3, file: !3, line: 482, type: !134, scopeLine: 483, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1577 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1576, file: !3, line: 482, type: !67)
!1578 = !DILocation(line: 482, column: 33, scope: !1576)
!1579 = !DILocalVariable(name: "comment", scope: !1576, file: !3, line: 484, type: !6)
!1580 = !DILocation(line: 484, column: 9, scope: !1576)
!1581 = !DILocation(line: 484, column: 43, scope: !1576)
!1582 = !DILocation(line: 484, column: 19, scope: !1576)
!1583 = !DILocalVariable(name: "pidstr", scope: !1576, file: !3, line: 485, type: !1115)
!1584 = !DILocation(line: 485, column: 3, scope: !1576)
!1585 = !DILocation(line: 489, column: 19, scope: !1576)
!1586 = !DILocation(line: 489, column: 62, scope: !1576)
!1587 = !DILocation(line: 489, column: 72, scope: !1576)
!1588 = !DILocation(line: 490, column: 28, scope: !1576)
!1589 = !DILocation(line: 490, column: 15, scope: !1576)
!1590 = !DILocation(line: 490, column: 43, scope: !1576)
!1591 = !DILocation(line: 490, column: 51, scope: !1576)
!1592 = !DILocation(line: 489, column: 3, scope: !1576)
!1593 = !DILocation(line: 491, column: 9, scope: !1576)
!1594 = !DILocation(line: 491, column: 3, scope: !1576)
!1595 = !DILocation(line: 492, column: 1, scope: !1576)
!1596 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1597, file: !3, line: 482, type: !1600)
!1597 = distinct !DISubprogram(name: "print_login", scope: !3, file: !3, line: 482, type: !1598, scopeLine: 483, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1624, retainedNodes: !4)
!1598 = !DISubroutineType(types: !1599)
!1599 = !{null, !1600}
!1600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1601, size: 64)
!1601 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1602)
!1602 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1603)
!1603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1604)
!1604 = !{!1605, !1606, !1607, !1608, !1609, !1610, !1611, !1616, !1617, !1622, !1623}
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1603, file: !72, line: 57, baseType: !14, size: 16)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1603, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1603, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1603, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1603, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1603, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1603, file: !72, line: 67, baseType: !1612, size: 32, offset: 2656)
!1612 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1613)
!1613 = !{!1614, !1615}
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1612, file: !72, line: 45, baseType: !14, size: 16)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1612, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1603, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1603, file: !72, line: 79, baseType: !1618, size: 64, offset: 2720)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1603, file: !72, line: 75, size: 64, elements: !1619)
!1619 = !{!1620, !1621}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1618, file: !72, line: 77, baseType: !96, size: 32)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1618, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1603, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1603, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1624 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1625, nameTableKind: None)
!1625 = !{!1626, !1628, !1630, !1632, !1634, !1636, !1638, !1640, !1642, !1644, !1646, !1648, !1650, !1652, !1654, !1656, !1658, !1660, !1670, !1673, !1678, !1680, !1683, !1685, !1690, !1693, !1695}
!1626 = !DIGlobalVariableExpression(var: !1627, expr: !DIExpression())
!1627 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1624, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1628 = !DIGlobalVariableExpression(var: !1629, expr: !DIExpression())
!1629 = distinct !DIGlobalVariable(name: "short_list", scope: !1624, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1630 = !DIGlobalVariableExpression(var: !1631, expr: !DIExpression())
!1631 = distinct !DIGlobalVariable(name: "short_output", scope: !1624, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1632 = !DIGlobalVariableExpression(var: !1633, expr: !DIExpression())
!1633 = distinct !DIGlobalVariable(name: "include_idle", scope: !1624, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1634 = !DIGlobalVariableExpression(var: !1635, expr: !DIExpression())
!1635 = distinct !DIGlobalVariable(name: "include_heading", scope: !1624, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1636 = !DIGlobalVariableExpression(var: !1637, expr: !DIExpression())
!1637 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1624, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1638 = !DIGlobalVariableExpression(var: !1639, expr: !DIExpression())
!1639 = distinct !DIGlobalVariable(name: "include_exit", scope: !1624, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1640 = !DIGlobalVariableExpression(var: !1641, expr: !DIExpression())
!1641 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1624, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1642 = !DIGlobalVariableExpression(var: !1643, expr: !DIExpression())
!1643 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1624, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1644 = !DIGlobalVariableExpression(var: !1645, expr: !DIExpression())
!1645 = distinct !DIGlobalVariable(name: "need_login", scope: !1624, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1646 = !DIGlobalVariableExpression(var: !1647, expr: !DIExpression())
!1647 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1624, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1648 = !DIGlobalVariableExpression(var: !1649, expr: !DIExpression())
!1649 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1624, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1650 = !DIGlobalVariableExpression(var: !1651, expr: !DIExpression())
!1651 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1624, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1652 = !DIGlobalVariableExpression(var: !1653, expr: !DIExpression())
!1653 = distinct !DIGlobalVariable(name: "need_users", scope: !1624, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1654 = !DIGlobalVariableExpression(var: !1655, expr: !DIExpression())
!1655 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1624, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1656 = !DIGlobalVariableExpression(var: !1657, expr: !DIExpression())
!1657 = distinct !DIGlobalVariable(name: "time_format", scope: !1624, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1658 = !DIGlobalVariableExpression(var: !1659, expr: !DIExpression())
!1659 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1624, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1660 = !DIGlobalVariableExpression(var: !1661, expr: !DIExpression())
!1661 = distinct !DIGlobalVariable(name: "longopts", scope: !1624, file: !3, line: 162, type: !1662, isLocal: true, isDefinition: true)
!1662 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1663, size: 4608, elements: !151)
!1663 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1664)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1665)
!1665 = !{!1666, !1667, !1668, !1669}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1664, file: !144, line: 52, baseType: !49, size: 64)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1664, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1664, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1664, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1670 = !DIGlobalVariableExpression(var: !1671, expr: !DIExpression())
!1671 = distinct !DIGlobalVariable(name: "mesg", scope: !1672, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1672 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1624, retainedNodes: !4)
!1673 = !DIGlobalVariableExpression(var: !1674, expr: !DIExpression())
!1674 = distinct !DIGlobalVariable(name: "hoststr", scope: !1675, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1675 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1676, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1624, retainedNodes: !4)
!1676 = !DISubroutineType(types: !1677)
!1677 = !{null, !1600, !9}
!1678 = !DIGlobalVariableExpression(var: !1679, expr: !DIExpression())
!1679 = distinct !DIGlobalVariable(name: "hostlen", scope: !1675, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1680 = !DIGlobalVariableExpression(var: !1681, expr: !DIExpression())
!1681 = distinct !DIGlobalVariable(name: "now", scope: !1682, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1682 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1624, retainedNodes: !4)
!1683 = !DIGlobalVariableExpression(var: !1684, expr: !DIExpression())
!1684 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1682, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1685 = !DIGlobalVariableExpression(var: !1686, expr: !DIExpression())
!1686 = distinct !DIGlobalVariable(name: "buf", scope: !1687, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1687 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1688, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1624, retainedNodes: !4)
!1688 = !DISubroutineType(types: !1689)
!1689 = !{!49, !1600}
!1690 = !DIGlobalVariableExpression(var: !1691, expr: !DIExpression())
!1691 = distinct !DIGlobalVariable(name: "runlevline", scope: !1692, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1692 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1598, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1624, retainedNodes: !4)
!1693 = !DIGlobalVariableExpression(var: !1694, expr: !DIExpression())
!1694 = distinct !DIGlobalVariable(name: "comment", scope: !1692, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1695 = !DIGlobalVariableExpression(var: !1696, expr: !DIExpression())
!1696 = distinct !DIGlobalVariable(name: "exitstr", scope: !1697, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1697 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1598, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1624, retainedNodes: !4)
!1698 = !DILocalVariable(name: "comment", scope: !1597, file: !3, line: 484, type: !6)
!1699 = !DILocalVariable(name: "pidstr", scope: !1597, file: !3, line: 485, type: !1115)
!1700 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !140, file: !3, line: 459, type: !67)
!1701 = !DILocation(line: 459, column: 37, scope: !140)
!1702 = !DILocalVariable(name: "comment", scope: !140, file: !3, line: 462, type: !6)
!1703 = !DILocation(line: 462, column: 9, scope: !140)
!1704 = !DILocation(line: 462, column: 43, scope: !140)
!1705 = !DILocation(line: 462, column: 19, scope: !140)
!1706 = !DILocalVariable(name: "pidstr", scope: !140, file: !3, line: 463, type: !1115)
!1707 = !DILocation(line: 463, column: 3, scope: !140)
!1708 = !DILocation(line: 465, column: 8, scope: !1709)
!1709 = distinct !DILexicalBlock(scope: !140, file: !3, line: 465, column: 7)
!1710 = !DILocation(line: 465, column: 7, scope: !140)
!1711 = !DILocation(line: 466, column: 32, scope: !1709)
!1712 = !DILocation(line: 466, column: 24, scope: !1709)
!1713 = !DILocation(line: 467, column: 24, scope: !1709)
!1714 = !DILocation(line: 467, column: 78, scope: !1709)
!1715 = !DILocation(line: 468, column: 34, scope: !1709)
!1716 = !DILocation(line: 468, column: 26, scope: !1709)
!1717 = !DILocation(line: 468, column: 24, scope: !1709)
!1718 = !DILocation(line: 469, column: 24, scope: !1709)
!1719 = !DILocation(line: 470, column: 24, scope: !1709)
!1720 = !DILocation(line: 466, column: 15, scope: !1709)
!1721 = !DILocation(line: 466, column: 13, scope: !1709)
!1722 = !DILocation(line: 466, column: 5, scope: !1709)
!1723 = !DILocation(line: 471, column: 12, scope: !140)
!1724 = !DILocation(line: 471, column: 34, scope: !140)
!1725 = !DILocation(line: 471, column: 46, scope: !140)
!1726 = !DILocation(line: 472, column: 12, scope: !140)
!1727 = !DILocation(line: 472, column: 24, scope: !140)
!1728 = !DILocation(line: 471, column: 3, scope: !140)
!1729 = !DILocation(line: 476, column: 54, scope: !140)
!1730 = !DILocation(line: 476, column: 64, scope: !140)
!1731 = !DILocation(line: 477, column: 28, scope: !140)
!1732 = !DILocation(line: 477, column: 15, scope: !140)
!1733 = !DILocation(line: 477, column: 43, scope: !140)
!1734 = !DILocation(line: 477, column: 51, scope: !140)
!1735 = !DILocation(line: 477, column: 60, scope: !140)
!1736 = !DILocation(line: 476, column: 3, scope: !140)
!1737 = !DILocation(line: 478, column: 9, scope: !140)
!1738 = !DILocation(line: 478, column: 3, scope: !140)
!1739 = !DILocation(line: 479, column: 1, scope: !140)
!1740 = distinct !DISubprogram(name: "make_id_equals_comment", scope: !3, file: !3, line: 448, type: !1741, scopeLine: 449, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1741 = !DISubroutineType(types: !1742)
!1742 = !{!6, !67}
!1743 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1740, file: !3, line: 448, type: !67)
!1744 = !DILocation(line: 448, column: 44, scope: !1740)
!1745 = !DILocalVariable(name: "utmpsize", scope: !1740, file: !3, line: 450, type: !110)
!1746 = !DILocation(line: 450, column: 10, scope: !1740)
!1747 = !DILocalVariable(name: "comment", scope: !1740, file: !3, line: 451, type: !6)
!1748 = !DILocation(line: 451, column: 9, scope: !1740)
!1749 = !DILocation(line: 451, column: 36, scope: !1740)
!1750 = !DILocation(line: 451, column: 28, scope: !1740)
!1751 = !DILocation(line: 451, column: 48, scope: !1740)
!1752 = !DILocation(line: 451, column: 46, scope: !1740)
!1753 = !DILocation(line: 451, column: 57, scope: !1740)
!1754 = !DILocation(line: 451, column: 19, scope: !1740)
!1755 = !DILocation(line: 453, column: 11, scope: !1740)
!1756 = !DILocation(line: 453, column: 20, scope: !1740)
!1757 = !DILocation(line: 453, column: 3, scope: !1740)
!1758 = !DILocation(line: 454, column: 12, scope: !1740)
!1759 = !DILocation(line: 454, column: 21, scope: !1740)
!1760 = !DILocation(line: 454, column: 39, scope: !1740)
!1761 = !DILocation(line: 454, column: 3, scope: !1740)
!1762 = !DILocation(line: 455, column: 10, scope: !1740)
!1763 = !DILocation(line: 455, column: 3, scope: !1740)
!1764 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !125, file: !3, line: 218, type: !67)
!1765 = !DILocation(line: 218, column: 33, scope: !125)
!1766 = !DILocalVariable(name: "t", scope: !125, file: !3, line: 228, type: !9)
!1767 = !DILocation(line: 228, column: 10, scope: !125)
!1768 = !DILocation(line: 228, column: 14, scope: !125)
!1769 = !DILocalVariable(name: "tmp", scope: !125, file: !3, line: 229, type: !1770)
!1770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1771, size: 64)
!1771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !1772, line: 7, size: 448, elements: !1773)
!1772 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h", directory: "")
!1773 = !{!1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784}
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !1771, file: !1772, line: 9, baseType: !53, size: 32)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !1771, file: !1772, line: 10, baseType: !53, size: 32, offset: 32)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !1771, file: !1772, line: 11, baseType: !53, size: 32, offset: 64)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !1771, file: !1772, line: 12, baseType: !53, size: 32, offset: 96)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !1771, file: !1772, line: 13, baseType: !53, size: 32, offset: 128)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !1771, file: !1772, line: 14, baseType: !53, size: 32, offset: 160)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !1771, file: !1772, line: 15, baseType: !53, size: 32, offset: 192)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !1771, file: !1772, line: 16, baseType: !53, size: 32, offset: 224)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !1771, file: !1772, line: 17, baseType: !53, size: 32, offset: 256)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "tm_gmtoff", scope: !1771, file: !1772, line: 20, baseType: !13, size: 64, offset: 320)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "tm_zone", scope: !1771, file: !1772, line: 21, baseType: !49, size: 64, offset: 384)
!1785 = !DILocation(line: 229, column: 14, scope: !125)
!1786 = !DILocation(line: 229, column: 20, scope: !125)
!1787 = !DILocation(line: 231, column: 7, scope: !1788)
!1788 = distinct !DILexicalBlock(scope: !125, file: !3, line: 231, column: 7)
!1789 = !DILocation(line: 231, column: 7, scope: !125)
!1790 = !DILocation(line: 233, column: 34, scope: !1791)
!1791 = distinct !DILexicalBlock(scope: !1788, file: !3, line: 232, column: 5)
!1792 = !DILocation(line: 233, column: 47, scope: !1791)
!1793 = !DILocation(line: 233, column: 7, scope: !1791)
!1794 = !DILocation(line: 234, column: 7, scope: !1791)
!1795 = !DILocation(line: 237, column: 23, scope: !1788)
!1796 = !DILocation(line: 237, column: 12, scope: !1788)
!1797 = !DILocation(line: 237, column: 5, scope: !1788)
!1798 = !DILocation(line: 238, column: 1, scope: !125)
!1799 = !DILocalVariable(name: "userlen", arg: 1, scope: !56, file: !3, line: 244, type: !53)
!1800 = !DILocation(line: 244, column: 17, scope: !56)
!1801 = !DILocalVariable(name: "user", arg: 2, scope: !56, file: !3, line: 244, type: !49)
!1802 = !DILocation(line: 244, column: 38, scope: !56)
!1803 = !DILocalVariable(name: "state", arg: 3, scope: !56, file: !3, line: 244, type: !50)
!1804 = !DILocation(line: 244, column: 55, scope: !56)
!1805 = !DILocalVariable(name: "linelen", arg: 4, scope: !56, file: !3, line: 245, type: !53)
!1806 = !DILocation(line: 245, column: 17, scope: !56)
!1807 = !DILocalVariable(name: "line", arg: 5, scope: !56, file: !3, line: 245, type: !49)
!1808 = !DILocation(line: 245, column: 38, scope: !56)
!1809 = !DILocalVariable(name: "time_str", arg: 6, scope: !56, file: !3, line: 246, type: !49)
!1810 = !DILocation(line: 246, column: 25, scope: !56)
!1811 = !DILocalVariable(name: "idle", arg: 7, scope: !56, file: !3, line: 246, type: !49)
!1812 = !DILocation(line: 246, column: 47, scope: !56)
!1813 = !DILocalVariable(name: "pid", arg: 8, scope: !56, file: !3, line: 246, type: !49)
!1814 = !DILocation(line: 246, column: 65, scope: !56)
!1815 = !DILocalVariable(name: "comment", arg: 9, scope: !56, file: !3, line: 247, type: !49)
!1816 = !DILocation(line: 247, column: 25, scope: !56)
!1817 = !DILocalVariable(name: "exitstr", arg: 10, scope: !56, file: !3, line: 247, type: !49)
!1818 = !DILocation(line: 247, column: 46, scope: !56)
!1819 = !DILocalVariable(name: "buf", scope: !56, file: !3, line: 250, type: !6)
!1820 = !DILocation(line: 250, column: 9, scope: !56)
!1821 = !DILocalVariable(name: "x_idle", scope: !56, file: !3, line: 251, type: !1822)
!1822 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !260)
!1823 = !DILocation(line: 251, column: 8, scope: !56)
!1824 = !DILocalVariable(name: "x_pid", scope: !56, file: !3, line: 252, type: !1825)
!1825 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 104, elements: !1826)
!1826 = !{!1827}
!1827 = !DISubrange(count: 13)
!1828 = !DILocation(line: 252, column: 8, scope: !56)
!1829 = !DILocalVariable(name: "x_exitstr", scope: !56, file: !3, line: 253, type: !6)
!1830 = !DILocation(line: 253, column: 9, scope: !56)
!1831 = !DILocalVariable(name: "err", scope: !56, file: !3, line: 254, type: !53)
!1832 = !DILocation(line: 254, column: 7, scope: !56)
!1833 = !DILocation(line: 256, column: 13, scope: !56)
!1834 = !DILocation(line: 256, column: 11, scope: !56)
!1835 = !DILocation(line: 258, column: 7, scope: !1836)
!1836 = distinct !DILexicalBlock(scope: !56, file: !3, line: 258, column: 7)
!1837 = !DILocation(line: 258, column: 20, scope: !1836)
!1838 = !DILocation(line: 258, column: 24, scope: !1836)
!1839 = !DILocation(line: 258, column: 37, scope: !1836)
!1840 = !DILocation(line: 258, column: 48, scope: !1836)
!1841 = !DILocation(line: 258, column: 40, scope: !1836)
!1842 = !DILocation(line: 258, column: 54, scope: !1836)
!1843 = !DILocation(line: 258, column: 7, scope: !56)
!1844 = !DILocation(line: 259, column: 14, scope: !1836)
!1845 = !DILocation(line: 259, column: 31, scope: !1836)
!1846 = !DILocation(line: 259, column: 5, scope: !1836)
!1847 = !DILocation(line: 261, column: 5, scope: !1836)
!1848 = !DILocation(line: 261, column: 13, scope: !1836)
!1849 = !DILocation(line: 263, column: 8, scope: !1850)
!1850 = distinct !DILexicalBlock(scope: !56, file: !3, line: 263, column: 7)
!1851 = !DILocation(line: 263, column: 21, scope: !1850)
!1852 = !DILocation(line: 263, column: 32, scope: !1850)
!1853 = !DILocation(line: 263, column: 24, scope: !1850)
!1854 = !DILocation(line: 263, column: 37, scope: !1850)
!1855 = !DILocation(line: 263, column: 7, scope: !56)
!1856 = !DILocation(line: 264, column: 14, scope: !1850)
!1857 = !DILocation(line: 264, column: 30, scope: !1850)
!1858 = !DILocation(line: 264, column: 5, scope: !1850)
!1859 = !DILocation(line: 266, column: 5, scope: !1850)
!1860 = !DILocation(line: 266, column: 12, scope: !1850)
!1861 = !DILocation(line: 268, column: 24, scope: !56)
!1862 = !DILocation(line: 268, column: 43, scope: !56)
!1863 = !DILocation(line: 268, column: 41, scope: !56)
!1864 = !DILocation(line: 268, column: 70, scope: !56)
!1865 = !DILocation(line: 268, column: 15, scope: !56)
!1866 = !DILocation(line: 268, column: 13, scope: !56)
!1867 = !DILocation(line: 269, column: 7, scope: !1868)
!1868 = distinct !DILexicalBlock(scope: !56, file: !3, line: 269, column: 7)
!1869 = !DILocation(line: 269, column: 7, scope: !56)
!1870 = !DILocation(line: 270, column: 14, scope: !1868)
!1871 = !DILocation(line: 270, column: 35, scope: !1868)
!1872 = !DILocation(line: 270, column: 5, scope: !1868)
!1873 = !DILocation(line: 272, column: 6, scope: !1868)
!1874 = !DILocation(line: 272, column: 16, scope: !1868)
!1875 = !DILocation(line: 284, column: 19, scope: !56)
!1876 = !DILocation(line: 284, column: 28, scope: !56)
!1877 = !DILocation(line: 284, column: 35, scope: !56)
!1878 = !DILocation(line: 285, column: 19, scope: !56)
!1879 = !DILocation(line: 286, column: 19, scope: !56)
!1880 = !DILocation(line: 286, column: 28, scope: !56)
!1881 = !DILocation(line: 287, column: 19, scope: !56)
!1882 = !DILocation(line: 288, column: 19, scope: !56)
!1883 = !DILocation(line: 289, column: 19, scope: !56)
!1884 = !DILocation(line: 290, column: 19, scope: !56)
!1885 = !DILocation(line: 295, column: 19, scope: !56)
!1886 = !DILocation(line: 296, column: 19, scope: !56)
!1887 = !DILocation(line: 274, column: 9, scope: !56)
!1888 = !DILocation(line: 274, column: 7, scope: !56)
!1889 = !DILocation(line: 298, column: 7, scope: !1890)
!1890 = distinct !DILexicalBlock(scope: !56, file: !3, line: 298, column: 7)
!1891 = !DILocation(line: 298, column: 11, scope: !1890)
!1892 = !DILocation(line: 299, column: 5, scope: !1890)
!1893 = !DILocalVariable(name: "p", scope: !1894, file: !3, line: 303, type: !6)
!1894 = distinct !DILexicalBlock(scope: !56, file: !3, line: 301, column: 3)
!1895 = !DILocation(line: 303, column: 11, scope: !1894)
!1896 = !DILocation(line: 303, column: 15, scope: !1894)
!1897 = !DILocation(line: 303, column: 29, scope: !1894)
!1898 = !DILocation(line: 303, column: 21, scope: !1894)
!1899 = !DILocation(line: 303, column: 19, scope: !1894)
!1900 = !DILocation(line: 304, column: 5, scope: !1894)
!1901 = !DILocation(line: 304, column: 13, scope: !1894)
!1902 = !DILocation(line: 304, column: 12, scope: !1894)
!1903 = !DILocation(line: 304, column: 17, scope: !1894)
!1904 = distinct !{!1904, !1900, !1905}
!1905 = !DILocation(line: 305, column: 18, scope: !1894)
!1906 = !DILocation(line: 306, column: 7, scope: !1894)
!1907 = !DILocation(line: 306, column: 9, scope: !1894)
!1908 = !DILocation(line: 306, column: 14, scope: !1894)
!1909 = !DILocation(line: 309, column: 9, scope: !56)
!1910 = !DILocation(line: 309, column: 3, scope: !56)
!1911 = !DILocation(line: 310, column: 9, scope: !56)
!1912 = !DILocation(line: 310, column: 3, scope: !56)
!1913 = !DILocation(line: 311, column: 9, scope: !56)
!1914 = !DILocation(line: 311, column: 3, scope: !56)
!1915 = !DILocation(line: 312, column: 1, scope: !56)
!1916 = !DILocalVariable(name: "userlen", arg: 1, scope: !1917, file: !3, line: 244, type: !53)
!1917 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!1918 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1919, nameTableKind: None)
!1919 = !{!1920, !1922, !1924, !1926, !1928, !1930, !1932, !1934, !1936, !1938, !1940, !1942, !1944, !1946, !1948, !1950, !1952, !1954, !1964, !1966, !1995, !1997, !2000, !2002, !2007, !2012, !2014}
!1920 = !DIGlobalVariableExpression(var: !1921, expr: !DIExpression())
!1921 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1918, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1922 = !DIGlobalVariableExpression(var: !1923, expr: !DIExpression())
!1923 = distinct !DIGlobalVariable(name: "short_list", scope: !1918, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1924 = !DIGlobalVariableExpression(var: !1925, expr: !DIExpression())
!1925 = distinct !DIGlobalVariable(name: "short_output", scope: !1918, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1926 = !DIGlobalVariableExpression(var: !1927, expr: !DIExpression())
!1927 = distinct !DIGlobalVariable(name: "include_idle", scope: !1918, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1928 = !DIGlobalVariableExpression(var: !1929, expr: !DIExpression())
!1929 = distinct !DIGlobalVariable(name: "include_heading", scope: !1918, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1930 = !DIGlobalVariableExpression(var: !1931, expr: !DIExpression())
!1931 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1918, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1932 = !DIGlobalVariableExpression(var: !1933, expr: !DIExpression())
!1933 = distinct !DIGlobalVariable(name: "include_exit", scope: !1918, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1934 = !DIGlobalVariableExpression(var: !1935, expr: !DIExpression())
!1935 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1918, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1936 = !DIGlobalVariableExpression(var: !1937, expr: !DIExpression())
!1937 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1918, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1938 = !DIGlobalVariableExpression(var: !1939, expr: !DIExpression())
!1939 = distinct !DIGlobalVariable(name: "need_login", scope: !1918, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1940 = !DIGlobalVariableExpression(var: !1941, expr: !DIExpression())
!1941 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1918, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1942 = !DIGlobalVariableExpression(var: !1943, expr: !DIExpression())
!1943 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1918, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1944 = !DIGlobalVariableExpression(var: !1945, expr: !DIExpression())
!1945 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1918, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1946 = !DIGlobalVariableExpression(var: !1947, expr: !DIExpression())
!1947 = distinct !DIGlobalVariable(name: "need_users", scope: !1918, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1948 = !DIGlobalVariableExpression(var: !1949, expr: !DIExpression())
!1949 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1918, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1950 = !DIGlobalVariableExpression(var: !1951, expr: !DIExpression())
!1951 = distinct !DIGlobalVariable(name: "time_format", scope: !1918, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1952 = !DIGlobalVariableExpression(var: !1953, expr: !DIExpression())
!1953 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1918, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1954 = !DIGlobalVariableExpression(var: !1955, expr: !DIExpression())
!1955 = distinct !DIGlobalVariable(name: "longopts", scope: !1918, file: !3, line: 162, type: !1956, isLocal: true, isDefinition: true)
!1956 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1957, size: 4608, elements: !151)
!1957 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1958)
!1958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1959)
!1959 = !{!1960, !1961, !1962, !1963}
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1958, file: !144, line: 52, baseType: !49, size: 64)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1958, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1958, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1958, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1964 = !DIGlobalVariableExpression(var: !1965, expr: !DIExpression())
!1965 = distinct !DIGlobalVariable(name: "mesg", scope: !1917, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1966 = !DIGlobalVariableExpression(var: !1967, expr: !DIExpression())
!1967 = distinct !DIGlobalVariable(name: "hoststr", scope: !1968, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1968 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1969, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!1969 = !DISubroutineType(types: !1970)
!1970 = !{null, !1971, !9}
!1971 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1972, size: 64)
!1972 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1973)
!1973 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1974)
!1974 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1975)
!1975 = !{!1976, !1977, !1978, !1979, !1980, !1981, !1982, !1987, !1988, !1993, !1994}
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1974, file: !72, line: 57, baseType: !14, size: 16)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1974, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1974, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1974, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1974, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1974, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1974, file: !72, line: 67, baseType: !1983, size: 32, offset: 2656)
!1983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1984)
!1984 = !{!1985, !1986}
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1983, file: !72, line: 45, baseType: !14, size: 16)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1983, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1974, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1974, file: !72, line: 79, baseType: !1989, size: 64, offset: 2720)
!1989 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1974, file: !72, line: 75, size: 64, elements: !1990)
!1990 = !{!1991, !1992}
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1989, file: !72, line: 77, baseType: !96, size: 32)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1989, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1974, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1974, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1995 = !DIGlobalVariableExpression(var: !1996, expr: !DIExpression())
!1996 = distinct !DIGlobalVariable(name: "hostlen", scope: !1968, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1997 = !DIGlobalVariableExpression(var: !1998, expr: !DIExpression())
!1998 = distinct !DIGlobalVariable(name: "now", scope: !1999, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1999 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!2000 = !DIGlobalVariableExpression(var: !2001, expr: !DIExpression())
!2001 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1999, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2002 = !DIGlobalVariableExpression(var: !2003, expr: !DIExpression())
!2003 = distinct !DIGlobalVariable(name: "buf", scope: !2004, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2004 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2005, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!2005 = !DISubroutineType(types: !2006)
!2006 = !{!49, !1971}
!2007 = !DIGlobalVariableExpression(var: !2008, expr: !DIExpression())
!2008 = distinct !DIGlobalVariable(name: "runlevline", scope: !2009, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2009 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2010, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!2010 = !DISubroutineType(types: !2011)
!2011 = !{null, !1971}
!2012 = !DIGlobalVariableExpression(var: !2013, expr: !DIExpression())
!2013 = distinct !DIGlobalVariable(name: "comment", scope: !2009, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2014 = !DIGlobalVariableExpression(var: !2015, expr: !DIExpression())
!2015 = distinct !DIGlobalVariable(name: "exitstr", scope: !2016, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2016 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2010, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!2017 = !DILocalVariable(name: "user", arg: 2, scope: !1917, file: !3, line: 244, type: !49)
!2018 = !DILocalVariable(name: "state", arg: 3, scope: !1917, file: !3, line: 244, type: !50)
!2019 = !DILocalVariable(name: "linelen", arg: 4, scope: !1917, file: !3, line: 245, type: !53)
!2020 = !DILocalVariable(name: "line", arg: 5, scope: !1917, file: !3, line: 245, type: !49)
!2021 = !DILocalVariable(name: "time_str", arg: 6, scope: !1917, file: !3, line: 246, type: !49)
!2022 = !DILocalVariable(name: "idle", arg: 7, scope: !1917, file: !3, line: 246, type: !49)
!2023 = !DILocalVariable(name: "pid", arg: 8, scope: !1917, file: !3, line: 246, type: !49)
!2024 = !DILocalVariable(name: "comment", arg: 9, scope: !1917, file: !3, line: 247, type: !49)
!2025 = !DILocalVariable(name: "exitstr", arg: 10, scope: !1917, file: !3, line: 247, type: !49)
!2026 = !DILocalVariable(name: "buf", scope: !1917, file: !3, line: 250, type: !6)
!2027 = !DILocalVariable(name: "x_idle", scope: !1917, file: !3, line: 251, type: !1822)
!2028 = !DILocalVariable(name: "x_pid", scope: !1917, file: !3, line: 252, type: !1825)
!2029 = !DILocalVariable(name: "x_exitstr", scope: !1917, file: !3, line: 253, type: !6)
!2030 = !DILocalVariable(name: "err", scope: !1917, file: !3, line: 254, type: !53)
!2031 = distinct !DISubprogram(name: "timetostr", scope: !364, file: !364, line: 690, type: !2032, scopeLine: 691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2032 = !DISubroutineType(types: !2033)
!2033 = !{!6, !9, !6}
!2034 = !DILocalVariable(name: "t", arg: 1, scope: !2031, file: !364, line: 690, type: !9)
!2035 = !DILocation(line: 690, column: 19, scope: !2031)
!2036 = !DILocalVariable(name: "buf", arg: 2, scope: !2031, file: !364, line: 690, type: !6)
!2037 = !DILocation(line: 690, column: 28, scope: !2031)
!2038 = !DILocation(line: 693, column: 24, scope: !2031)
!2039 = !DILocation(line: 693, column: 27, scope: !2031)
!2040 = !DILocation(line: 693, column: 13, scope: !2031)
!2041 = !DILocation(line: 692, column: 3, scope: !2031)
!2042 = !DILocalVariable(name: "t", arg: 1, scope: !2043, file: !364, line: 690, type: !9)
!2043 = distinct !DISubprogram(name: "timetostr", scope: !364, file: !364, line: 690, type: !2032, scopeLine: 691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2044, retainedNodes: !4)
!2044 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2045, nameTableKind: None)
!2045 = !{!2046, !2048, !2050, !2052, !2054, !2056, !2058, !2060, !2062, !2064, !2066, !2068, !2070, !2072, !2074, !2076, !2078, !2080, !2090, !2093, !2122, !2124, !2127, !2129, !2134, !2139, !2141}
!2046 = !DIGlobalVariableExpression(var: !2047, expr: !DIExpression())
!2047 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2044, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2048 = !DIGlobalVariableExpression(var: !2049, expr: !DIExpression())
!2049 = distinct !DIGlobalVariable(name: "short_list", scope: !2044, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2050 = !DIGlobalVariableExpression(var: !2051, expr: !DIExpression())
!2051 = distinct !DIGlobalVariable(name: "short_output", scope: !2044, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2052 = !DIGlobalVariableExpression(var: !2053, expr: !DIExpression())
!2053 = distinct !DIGlobalVariable(name: "include_idle", scope: !2044, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2054 = !DIGlobalVariableExpression(var: !2055, expr: !DIExpression())
!2055 = distinct !DIGlobalVariable(name: "include_heading", scope: !2044, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2056 = !DIGlobalVariableExpression(var: !2057, expr: !DIExpression())
!2057 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2044, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2058 = !DIGlobalVariableExpression(var: !2059, expr: !DIExpression())
!2059 = distinct !DIGlobalVariable(name: "include_exit", scope: !2044, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2060 = !DIGlobalVariableExpression(var: !2061, expr: !DIExpression())
!2061 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2044, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2062 = !DIGlobalVariableExpression(var: !2063, expr: !DIExpression())
!2063 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2044, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2064 = !DIGlobalVariableExpression(var: !2065, expr: !DIExpression())
!2065 = distinct !DIGlobalVariable(name: "need_login", scope: !2044, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2066 = !DIGlobalVariableExpression(var: !2067, expr: !DIExpression())
!2067 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2044, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2068 = !DIGlobalVariableExpression(var: !2069, expr: !DIExpression())
!2069 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2044, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2070 = !DIGlobalVariableExpression(var: !2071, expr: !DIExpression())
!2071 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2044, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2072 = !DIGlobalVariableExpression(var: !2073, expr: !DIExpression())
!2073 = distinct !DIGlobalVariable(name: "need_users", scope: !2044, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2074 = !DIGlobalVariableExpression(var: !2075, expr: !DIExpression())
!2075 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2044, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2076 = !DIGlobalVariableExpression(var: !2077, expr: !DIExpression())
!2077 = distinct !DIGlobalVariable(name: "time_format", scope: !2044, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2078 = !DIGlobalVariableExpression(var: !2079, expr: !DIExpression())
!2079 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2044, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2080 = !DIGlobalVariableExpression(var: !2081, expr: !DIExpression())
!2081 = distinct !DIGlobalVariable(name: "longopts", scope: !2044, file: !3, line: 162, type: !2082, isLocal: true, isDefinition: true)
!2082 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2083, size: 4608, elements: !151)
!2083 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2084)
!2084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2085)
!2085 = !{!2086, !2087, !2088, !2089}
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2084, file: !144, line: 52, baseType: !49, size: 64)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2084, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2084, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2084, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2090 = !DIGlobalVariableExpression(var: !2091, expr: !DIExpression())
!2091 = distinct !DIGlobalVariable(name: "mesg", scope: !2092, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2092 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2044, retainedNodes: !4)
!2093 = !DIGlobalVariableExpression(var: !2094, expr: !DIExpression())
!2094 = distinct !DIGlobalVariable(name: "hoststr", scope: !2095, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2095 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2096, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2044, retainedNodes: !4)
!2096 = !DISubroutineType(types: !2097)
!2097 = !{null, !2098, !9}
!2098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2099, size: 64)
!2099 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2100)
!2100 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2101)
!2101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2102)
!2102 = !{!2103, !2104, !2105, !2106, !2107, !2108, !2109, !2114, !2115, !2120, !2121}
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2101, file: !72, line: 57, baseType: !14, size: 16)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2101, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2101, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2101, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2101, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2101, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2101, file: !72, line: 67, baseType: !2110, size: 32, offset: 2656)
!2110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2111)
!2111 = !{!2112, !2113}
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2110, file: !72, line: 45, baseType: !14, size: 16)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2110, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2101, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2101, file: !72, line: 79, baseType: !2116, size: 64, offset: 2720)
!2116 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2101, file: !72, line: 75, size: 64, elements: !2117)
!2117 = !{!2118, !2119}
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2116, file: !72, line: 77, baseType: !96, size: 32)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2116, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2101, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2101, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2122 = !DIGlobalVariableExpression(var: !2123, expr: !DIExpression())
!2123 = distinct !DIGlobalVariable(name: "hostlen", scope: !2095, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2124 = !DIGlobalVariableExpression(var: !2125, expr: !DIExpression())
!2125 = distinct !DIGlobalVariable(name: "now", scope: !2126, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2126 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2044, retainedNodes: !4)
!2127 = !DIGlobalVariableExpression(var: !2128, expr: !DIExpression())
!2128 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2126, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2129 = !DIGlobalVariableExpression(var: !2130, expr: !DIExpression())
!2130 = distinct !DIGlobalVariable(name: "buf", scope: !2131, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2131 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2132, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2044, retainedNodes: !4)
!2132 = !DISubroutineType(types: !2133)
!2133 = !{!49, !2098}
!2134 = !DIGlobalVariableExpression(var: !2135, expr: !DIExpression())
!2135 = distinct !DIGlobalVariable(name: "runlevline", scope: !2136, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2136 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2137, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2044, retainedNodes: !4)
!2137 = !DISubroutineType(types: !2138)
!2138 = !{null, !2098}
!2139 = !DIGlobalVariableExpression(var: !2140, expr: !DIExpression())
!2140 = distinct !DIGlobalVariable(name: "comment", scope: !2136, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2141 = !DIGlobalVariableExpression(var: !2142, expr: !DIExpression())
!2142 = distinct !DIGlobalVariable(name: "exitstr", scope: !2143, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2143 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2137, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2044, retainedNodes: !4)
!2144 = !DILocalVariable(name: "buf", arg: 2, scope: !2043, file: !364, line: 690, type: !6)
!2145 = distinct !DISubprogram(name: "stzncpy", scope: !364, file: !364, line: 741, type: !2146, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2146 = !DISubroutineType(types: !2147)
!2147 = !{!6, !2148, !2149, !110}
!2148 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !6)
!2149 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !49)
!2150 = !DILocalVariable(name: "dest", arg: 1, scope: !2145, file: !364, line: 741, type: !2148)
!2151 = !DILocation(line: 741, column: 25, scope: !2145)
!2152 = !DILocalVariable(name: "src", arg: 2, scope: !2145, file: !364, line: 741, type: !2149)
!2153 = !DILocation(line: 741, column: 52, scope: !2145)
!2154 = !DILocalVariable(name: "len", arg: 3, scope: !2145, file: !364, line: 741, type: !110)
!2155 = !DILocation(line: 741, column: 64, scope: !2145)
!2156 = !DILocalVariable(name: "src_end", scope: !2145, file: !364, line: 743, type: !49)
!2157 = !DILocation(line: 743, column: 15, scope: !2145)
!2158 = !DILocation(line: 743, column: 25, scope: !2145)
!2159 = !DILocation(line: 743, column: 31, scope: !2145)
!2160 = !DILocation(line: 743, column: 29, scope: !2145)
!2161 = !DILocation(line: 744, column: 3, scope: !2145)
!2162 = !DILocation(line: 744, column: 10, scope: !2145)
!2163 = !DILocation(line: 744, column: 16, scope: !2145)
!2164 = !DILocation(line: 744, column: 14, scope: !2145)
!2165 = !DILocation(line: 744, column: 24, scope: !2145)
!2166 = !DILocation(line: 744, column: 28, scope: !2145)
!2167 = !DILocation(line: 744, column: 27, scope: !2145)
!2168 = !DILocation(line: 0, scope: !2145)
!2169 = !DILocation(line: 745, column: 19, scope: !2145)
!2170 = !DILocation(line: 745, column: 15, scope: !2145)
!2171 = !DILocation(line: 745, column: 10, scope: !2145)
!2172 = !DILocation(line: 745, column: 13, scope: !2145)
!2173 = distinct !{!2173, !2161, !2169}
!2174 = !DILocation(line: 746, column: 4, scope: !2145)
!2175 = !DILocation(line: 746, column: 9, scope: !2145)
!2176 = !DILocation(line: 747, column: 10, scope: !2145)
!2177 = !DILocation(line: 747, column: 3, scope: !2145)
!2178 = distinct !DISubprogram(name: "is_tty_writable", scope: !3, file: !3, line: 317, type: !2179, scopeLine: 318, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2179 = !DISubroutineType(types: !2180)
!2180 = !{!18, !2181}
!2181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2182, size: 64)
!2182 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1064)
!2183 = !DILocalVariable(name: "pstat", arg: 1, scope: !2178, file: !3, line: 317, type: !2181)
!2184 = !DILocation(line: 317, column: 37, scope: !2178)
!2185 = !DILocation(line: 327, column: 10, scope: !2178)
!2186 = !DILocation(line: 327, column: 17, scope: !2178)
!2187 = !DILocation(line: 327, column: 25, scope: !2178)
!2188 = !DILocation(line: 327, column: 3, scope: !2178)
!2189 = !DILocalVariable(name: "when", arg: 1, scope: !115, file: !3, line: 188, type: !9)
!2190 = !DILocation(line: 188, column: 21, scope: !115)
!2191 = !DILocalVariable(name: "boottime", arg: 2, scope: !115, file: !3, line: 188, type: !9)
!2192 = !DILocation(line: 188, column: 34, scope: !115)
!2193 = !DILocation(line: 192, column: 7, scope: !2194)
!2194 = distinct !DILexicalBlock(scope: !115, file: !3, line: 192, column: 7)
!2195 = !DILocation(line: 192, column: 11, scope: !2194)
!2196 = !DILocation(line: 192, column: 7, scope: !115)
!2197 = !DILocation(line: 193, column: 5, scope: !2194)
!2198 = !DILocation(line: 195, column: 7, scope: !2199)
!2199 = distinct !DILexicalBlock(scope: !115, file: !3, line: 195, column: 7)
!2200 = !DILocation(line: 195, column: 18, scope: !2199)
!2201 = !DILocation(line: 195, column: 16, scope: !2199)
!2202 = !DILocation(line: 195, column: 23, scope: !2199)
!2203 = !DILocation(line: 195, column: 26, scope: !2199)
!2204 = !DILocation(line: 195, column: 30, scope: !2199)
!2205 = !DILocation(line: 195, column: 47, scope: !2199)
!2206 = !DILocation(line: 195, column: 45, scope: !2199)
!2207 = !DILocation(line: 195, column: 52, scope: !2199)
!2208 = !DILocation(line: 195, column: 55, scope: !2199)
!2209 = !DILocation(line: 195, column: 63, scope: !2199)
!2210 = !DILocation(line: 195, column: 60, scope: !2199)
!2211 = !DILocation(line: 195, column: 7, scope: !115)
!2212 = !DILocalVariable(name: "seconds_idle", scope: !2213, file: !3, line: 197, type: !53)
!2213 = distinct !DILexicalBlock(scope: !2199, file: !3, line: 196, column: 5)
!2214 = !DILocation(line: 197, column: 11, scope: !2213)
!2215 = !DILocation(line: 197, column: 26, scope: !2213)
!2216 = !DILocation(line: 197, column: 32, scope: !2213)
!2217 = !DILocation(line: 197, column: 30, scope: !2213)
!2218 = !DILocation(line: 198, column: 11, scope: !2219)
!2219 = distinct !DILexicalBlock(scope: !2213, file: !3, line: 198, column: 11)
!2220 = !DILocation(line: 198, column: 24, scope: !2219)
!2221 = !DILocation(line: 198, column: 11, scope: !2213)
!2222 = !DILocation(line: 199, column: 9, scope: !2219)
!2223 = !DILocation(line: 205, column: 11, scope: !2224)
!2224 = distinct !DILexicalBlock(scope: !2225, file: !3, line: 205, column: 11)
!2225 = distinct !DILexicalBlock(scope: !2226, file: !3, line: 205, column: 11)
!2226 = distinct !DILexicalBlock(scope: !2219, file: !3, line: 201, column: 9)
!2227 = !DILocation(line: 205, column: 11, scope: !2225)
!2228 = !DILocation(line: 207, column: 20, scope: !2226)
!2229 = !DILocation(line: 207, column: 33, scope: !2226)
!2230 = !DILocation(line: 208, column: 21, scope: !2226)
!2231 = !DILocation(line: 208, column: 34, scope: !2226)
!2232 = !DILocation(line: 208, column: 47, scope: !2226)
!2233 = !DILocation(line: 206, column: 11, scope: !2226)
!2234 = !DILocation(line: 209, column: 11, scope: !2226)
!2235 = !DILocation(line: 213, column: 10, scope: !115)
!2236 = !DILocation(line: 213, column: 3, scope: !115)
!2237 = !DILocation(line: 214, column: 1, scope: !115)
!2238 = distinct !DISubprogram(name: "c_isprint", scope: !2239, file: !2239, line: 272, type: !2240, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !286, retainedNodes: !4)
!2239 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2240 = !DISubroutineType(types: !2241)
!2241 = !{!18, !53}
!2242 = !DILocalVariable(name: "c", arg: 1, scope: !2238, file: !2239, line: 272, type: !53)
!2243 = !DILocation(line: 272, column: 16, scope: !2238)
!2244 = !DILocation(line: 274, column: 11, scope: !2238)
!2245 = !DILocation(line: 274, column: 3, scope: !2238)
!2246 = !DILocation(line: 281, column: 7, scope: !2247)
!2247 = distinct !DILexicalBlock(scope: !2238, file: !2239, line: 275, column: 5)
!2248 = !DILocation(line: 283, column: 7, scope: !2247)
!2249 = !DILocation(line: 285, column: 1, scope: !2238)
!2250 = distinct !DISubprogram(name: "c_tolower", scope: !2239, file: !2239, line: 337, type: !2251, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !286, retainedNodes: !4)
!2251 = !DISubroutineType(types: !2252)
!2252 = !{!53, !53}
!2253 = !DILocalVariable(name: "c", arg: 1, scope: !2250, file: !2239, line: 337, type: !53)
!2254 = !DILocation(line: 337, column: 16, scope: !2250)
!2255 = !DILocation(line: 339, column: 11, scope: !2250)
!2256 = !DILocation(line: 339, column: 3, scope: !2250)
!2257 = !DILocation(line: 342, column: 14, scope: !2258)
!2258 = distinct !DILexicalBlock(scope: !2250, file: !2239, line: 340, column: 5)
!2259 = !DILocation(line: 342, column: 16, scope: !2258)
!2260 = !DILocation(line: 342, column: 22, scope: !2258)
!2261 = !DILocation(line: 342, column: 7, scope: !2258)
!2262 = !DILocation(line: 344, column: 14, scope: !2258)
!2263 = !DILocation(line: 344, column: 7, scope: !2258)
!2264 = !DILocation(line: 346, column: 1, scope: !2250)
!2265 = !DILocalVariable(name: "c", arg: 1, scope: !2266, file: !2239, line: 337, type: !53)
!2266 = distinct !DISubprogram(name: "c_tolower", scope: !2239, file: !2239, line: 337, type: !2251, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2267, retainedNodes: !4)
!2267 = distinct !DICompileUnit(language: DW_LANG_C99, file: !287, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!2268 = distinct !DISubprogram(name: "canon_host", scope: !166, file: !166, line: 33, type: !2269, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !160, retainedNodes: !4)
!2269 = !DISubroutineType(types: !2270)
!2270 = !{!6, !49}
!2271 = !DILocalVariable(name: "host", arg: 1, scope: !2268, file: !166, line: 33, type: !49)
!2272 = !DILocation(line: 33, column: 25, scope: !2268)
!2273 = !DILocation(line: 35, column: 24, scope: !2268)
!2274 = !DILocation(line: 35, column: 10, scope: !2268)
!2275 = !DILocation(line: 35, column: 3, scope: !2268)
!2276 = !DILocalVariable(name: "host", arg: 1, scope: !2277, file: !166, line: 33, type: !49)
!2277 = distinct !DISubprogram(name: "canon_host", scope: !166, file: !166, line: 33, type: !2269, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2278, retainedNodes: !4)
!2278 = distinct !DICompileUnit(language: DW_LANG_C99, file: !161, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !2279, nameTableKind: None)
!2279 = !{!2280, !2299}
!2280 = !DIGlobalVariableExpression(var: !2281, expr: !DIExpression())
!2281 = distinct !DIGlobalVariable(name: "hints", scope: !2282, file: !166, line: 64, type: !2283, isLocal: true, isDefinition: true)
!2282 = distinct !DISubprogram(name: "canon_host_r", scope: !166, file: !166, line: 61, type: !167, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2278, retainedNodes: !4)
!2283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "addrinfo", file: !170, line: 565, size: 384, elements: !2284)
!2284 = !{!2285, !2286, !2287, !2288, !2289, !2290, !2296, !2297}
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "ai_flags", scope: !2283, file: !170, line: 567, baseType: !53, size: 32)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "ai_family", scope: !2283, file: !170, line: 568, baseType: !53, size: 32, offset: 32)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "ai_socktype", scope: !2283, file: !170, line: 569, baseType: !53, size: 32, offset: 64)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "ai_protocol", scope: !2283, file: !170, line: 570, baseType: !53, size: 32, offset: 96)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addrlen", scope: !2283, file: !170, line: 571, baseType: !177, size: 32, offset: 128)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addr", scope: !2283, file: !170, line: 572, baseType: !2291, size: 64, offset: 192)
!2291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2292, size: 64)
!2292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr", file: !178, line: 178, size: 128, elements: !2293)
!2293 = !{!2294, !2295}
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "sa_family", scope: !2292, file: !178, line: 180, baseType: !186, size: 16)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "sa_data", scope: !2292, file: !178, line: 181, baseType: !190, size: 112, offset: 16)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "ai_canonname", scope: !2283, file: !170, line: 573, baseType: !6, size: 64, offset: 256)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "ai_next", scope: !2283, file: !170, line: 574, baseType: !2298, size: 64, offset: 320)
!2298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2283, size: 64)
!2299 = !DIGlobalVariableExpression(var: !2300, expr: !DIExpression())
!2300 = distinct !DIGlobalVariable(name: "last_cherror", scope: !2278, file: !166, line: 28, type: !53, isLocal: true, isDefinition: true)
!2301 = !DILocalVariable(name: "host", arg: 1, scope: !165, file: !166, line: 61, type: !49)
!2302 = !DILocation(line: 61, column: 27, scope: !165)
!2303 = !DILocalVariable(name: "cherror", arg: 2, scope: !165, file: !166, line: 61, type: !149)
!2304 = !DILocation(line: 61, column: 38, scope: !165)
!2305 = !DILocalVariable(name: "retval", scope: !165, file: !166, line: 63, type: !6)
!2306 = !DILocation(line: 63, column: 9, scope: !165)
!2307 = !DILocalVariable(name: "res", scope: !165, file: !166, line: 65, type: !195)
!2308 = !DILocation(line: 65, column: 20, scope: !165)
!2309 = !DILocalVariable(name: "status", scope: !165, file: !166, line: 66, type: !53)
!2310 = !DILocation(line: 66, column: 7, scope: !165)
!2311 = !DILocation(line: 68, column: 18, scope: !165)
!2312 = !DILocation(line: 69, column: 25, scope: !165)
!2313 = !DILocation(line: 69, column: 12, scope: !165)
!2314 = !DILocation(line: 69, column: 10, scope: !165)
!2315 = !DILocation(line: 70, column: 8, scope: !2316)
!2316 = distinct !DILexicalBlock(scope: !165, file: !166, line: 70, column: 7)
!2317 = !DILocation(line: 70, column: 7, scope: !165)
!2318 = !DILocation(line: 75, column: 24, scope: !2319)
!2319 = distinct !DILexicalBlock(scope: !2316, file: !166, line: 71, column: 5)
!2320 = !DILocation(line: 75, column: 29, scope: !2319)
!2321 = !DILocation(line: 75, column: 44, scope: !2319)
!2322 = !DILocation(line: 75, column: 49, scope: !2319)
!2323 = !DILocation(line: 75, column: 64, scope: !2319)
!2324 = !DILocation(line: 75, column: 16, scope: !2319)
!2325 = !DILocation(line: 75, column: 14, scope: !2319)
!2326 = !DILocation(line: 76, column: 12, scope: !2327)
!2327 = distinct !DILexicalBlock(scope: !2319, file: !166, line: 76, column: 11)
!2328 = !DILocation(line: 76, column: 19, scope: !2327)
!2329 = !DILocation(line: 76, column: 22, scope: !2327)
!2330 = !DILocation(line: 76, column: 11, scope: !2319)
!2331 = !DILocation(line: 77, column: 10, scope: !2327)
!2332 = !DILocation(line: 77, column: 18, scope: !2327)
!2333 = !DILocation(line: 77, column: 9, scope: !2327)
!2334 = !DILocation(line: 78, column: 21, scope: !2319)
!2335 = !DILocation(line: 78, column: 7, scope: !2319)
!2336 = !DILocation(line: 79, column: 5, scope: !2319)
!2337 = !DILocation(line: 80, column: 12, scope: !2338)
!2338 = distinct !DILexicalBlock(scope: !2316, file: !166, line: 80, column: 12)
!2339 = !DILocation(line: 80, column: 12, scope: !2316)
!2340 = !DILocation(line: 81, column: 16, scope: !2338)
!2341 = !DILocation(line: 81, column: 6, scope: !2338)
!2342 = !DILocation(line: 81, column: 14, scope: !2338)
!2343 = !DILocation(line: 81, column: 5, scope: !2338)
!2344 = !DILocation(line: 83, column: 10, scope: !165)
!2345 = !DILocation(line: 83, column: 3, scope: !165)
!2346 = !DILocalVariable(name: "host", arg: 1, scope: !2347, file: !166, line: 61, type: !49)
!2347 = distinct !DISubprogram(name: "canon_host_r", scope: !166, file: !166, line: 61, type: !167, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2348, retainedNodes: !4)
!2348 = distinct !DICompileUnit(language: DW_LANG_C99, file: !161, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !2349, nameTableKind: None)
!2349 = !{!2350, !2368}
!2350 = !DIGlobalVariableExpression(var: !2351, expr: !DIExpression())
!2351 = distinct !DIGlobalVariable(name: "hints", scope: !2347, file: !166, line: 64, type: !2352, isLocal: true, isDefinition: true)
!2352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "addrinfo", file: !170, line: 565, size: 384, elements: !2353)
!2353 = !{!2354, !2355, !2356, !2357, !2358, !2359, !2365, !2366}
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "ai_flags", scope: !2352, file: !170, line: 567, baseType: !53, size: 32)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "ai_family", scope: !2352, file: !170, line: 568, baseType: !53, size: 32, offset: 32)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "ai_socktype", scope: !2352, file: !170, line: 569, baseType: !53, size: 32, offset: 64)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "ai_protocol", scope: !2352, file: !170, line: 570, baseType: !53, size: 32, offset: 96)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addrlen", scope: !2352, file: !170, line: 571, baseType: !177, size: 32, offset: 128)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addr", scope: !2352, file: !170, line: 572, baseType: !2360, size: 64, offset: 192)
!2360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2361, size: 64)
!2361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr", file: !178, line: 178, size: 128, elements: !2362)
!2362 = !{!2363, !2364}
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "sa_family", scope: !2361, file: !178, line: 180, baseType: !186, size: 16)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "sa_data", scope: !2361, file: !178, line: 181, baseType: !190, size: 112, offset: 16)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "ai_canonname", scope: !2352, file: !170, line: 573, baseType: !6, size: 64, offset: 256)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "ai_next", scope: !2352, file: !170, line: 574, baseType: !2367, size: 64, offset: 320)
!2367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2352, size: 64)
!2368 = !DIGlobalVariableExpression(var: !2369, expr: !DIExpression())
!2369 = distinct !DIGlobalVariable(name: "last_cherror", scope: !2348, file: !166, line: 28, type: !53, isLocal: true, isDefinition: true)
!2370 = !DILocalVariable(name: "cherror", arg: 2, scope: !2347, file: !166, line: 61, type: !149)
!2371 = !DILocalVariable(name: "retval", scope: !2347, file: !166, line: 63, type: !6)
!2372 = !DILocalVariable(name: "res", scope: !2347, file: !166, line: 65, type: !2367)
!2373 = !DILocalVariable(name: "status", scope: !2347, file: !166, line: 66, type: !53)
!2374 = distinct !DISubprogram(name: "close_stdout", scope: !203, file: !203, line: 117, type: !1048, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !198, retainedNodes: !4)
!2375 = !DILocation(line: 119, column: 21, scope: !2376)
!2376 = distinct !DILexicalBlock(scope: !2374, file: !203, line: 119, column: 7)
!2377 = !DILocation(line: 119, column: 7, scope: !2376)
!2378 = !DILocation(line: 119, column: 29, scope: !2376)
!2379 = !DILocation(line: 120, column: 7, scope: !2376)
!2380 = !DILocation(line: 120, column: 12, scope: !2376)
!2381 = !DILocation(line: 120, column: 25, scope: !2376)
!2382 = !DILocation(line: 120, column: 28, scope: !2376)
!2383 = !DILocation(line: 120, column: 34, scope: !2376)
!2384 = !DILocation(line: 119, column: 7, scope: !2374)
!2385 = !DILocalVariable(name: "write_error", scope: !2386, file: !203, line: 122, type: !49)
!2386 = distinct !DILexicalBlock(scope: !2376, file: !203, line: 121, column: 5)
!2387 = !DILocation(line: 122, column: 19, scope: !2386)
!2388 = !DILocation(line: 122, column: 33, scope: !2386)
!2389 = !DILocation(line: 123, column: 11, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !2386, file: !203, line: 123, column: 11)
!2391 = !DILocation(line: 123, column: 11, scope: !2386)
!2392 = !DILocation(line: 124, column: 19, scope: !2390)
!2393 = !DILocation(line: 124, column: 52, scope: !2390)
!2394 = !DILocation(line: 124, column: 36, scope: !2390)
!2395 = !DILocation(line: 125, column: 16, scope: !2390)
!2396 = !DILocation(line: 124, column: 9, scope: !2390)
!2397 = !DILocation(line: 127, column: 19, scope: !2390)
!2398 = !DILocation(line: 127, column: 32, scope: !2390)
!2399 = !DILocation(line: 127, column: 9, scope: !2390)
!2400 = !DILocation(line: 129, column: 14, scope: !2386)
!2401 = !DILocation(line: 129, column: 7, scope: !2386)
!2402 = !DILocation(line: 134, column: 42, scope: !2403)
!2403 = distinct !DILexicalBlock(scope: !2374, file: !203, line: 134, column: 7)
!2404 = !DILocation(line: 134, column: 28, scope: !2403)
!2405 = !DILocation(line: 134, column: 50, scope: !2403)
!2406 = !DILocation(line: 134, column: 7, scope: !2374)
!2407 = !DILocation(line: 135, column: 12, scope: !2403)
!2408 = !DILocation(line: 135, column: 5, scope: !2403)
!2409 = !DILocation(line: 136, column: 1, scope: !2374)
!2410 = distinct !DISubprogram(name: "hard_locale", scope: !2411, file: !2411, line: 27, type: !2240, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !288, retainedNodes: !4)
!2411 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2412 = !DILocalVariable(name: "category", arg: 1, scope: !2410, file: !2411, line: 27, type: !53)
!2413 = !DILocation(line: 27, column: 18, scope: !2410)
!2414 = !DILocalVariable(name: "locale", scope: !2410, file: !2411, line: 29, type: !1160)
!2415 = !DILocation(line: 29, column: 8, scope: !2410)
!2416 = !DILocation(line: 31, column: 25, scope: !2417)
!2417 = distinct !DILexicalBlock(scope: !2410, file: !2411, line: 31, column: 7)
!2418 = !DILocation(line: 31, column: 35, scope: !2417)
!2419 = !DILocation(line: 31, column: 7, scope: !2417)
!2420 = !DILocation(line: 31, column: 7, scope: !2410)
!2421 = !DILocation(line: 32, column: 5, scope: !2417)
!2422 = !DILocation(line: 34, column: 20, scope: !2410)
!2423 = !DILocation(line: 34, column: 12, scope: !2410)
!2424 = !DILocation(line: 34, column: 33, scope: !2410)
!2425 = !DILocation(line: 34, column: 49, scope: !2410)
!2426 = !DILocation(line: 34, column: 41, scope: !2410)
!2427 = !DILocation(line: 34, column: 66, scope: !2410)
!2428 = !DILocation(line: 34, column: 38, scope: !2410)
!2429 = !DILocation(line: 34, column: 10, scope: !2410)
!2430 = !DILocation(line: 34, column: 3, scope: !2410)
!2431 = !DILocation(line: 35, column: 1, scope: !2410)
!2432 = !DILocalVariable(name: "category", arg: 1, scope: !2433, file: !2411, line: 27, type: !53)
!2433 = distinct !DISubprogram(name: "hard_locale", scope: !2411, file: !2411, line: 27, type: !2240, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2434, retainedNodes: !4)
!2434 = distinct !DICompileUnit(language: DW_LANG_C99, file: !289, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!2435 = !DILocalVariable(name: "locale", scope: !2433, file: !2411, line: 29, type: !1160)
!2436 = distinct !DISubprogram(name: "imaxtostr", scope: !2437, file: !2437, line: 36, type: !2438, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !290, retainedNodes: !4)
!2437 = !DIFile(filename: "./lib/anytostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2438 = !DISubroutineType(types: !2439)
!2439 = !{!6, !293, !6}
!2440 = !DILocalVariable(name: "i", arg: 1, scope: !2436, file: !2437, line: 36, type: !293)
!2441 = !DILocation(line: 36, column: 19, scope: !2436)
!2442 = !DILocalVariable(name: "buf", arg: 2, scope: !2436, file: !2437, line: 36, type: !6)
!2443 = !DILocation(line: 36, column: 28, scope: !2436)
!2444 = !DILocalVariable(name: "p", scope: !2436, file: !2437, line: 38, type: !6)
!2445 = !DILocation(line: 38, column: 9, scope: !2436)
!2446 = !DILocation(line: 38, column: 13, scope: !2436)
!2447 = !DILocation(line: 38, column: 17, scope: !2436)
!2448 = !DILocation(line: 39, column: 4, scope: !2436)
!2449 = !DILocation(line: 39, column: 6, scope: !2436)
!2450 = !DILocation(line: 41, column: 7, scope: !2451)
!2451 = distinct !DILexicalBlock(scope: !2436, file: !2437, line: 41, column: 7)
!2452 = !DILocation(line: 41, column: 9, scope: !2451)
!2453 = !DILocation(line: 41, column: 7, scope: !2436)
!2454 = !DILocation(line: 43, column: 7, scope: !2455)
!2455 = distinct !DILexicalBlock(scope: !2451, file: !2437, line: 42, column: 5)
!2456 = !DILocation(line: 44, column: 22, scope: !2455)
!2457 = !DILocation(line: 44, column: 24, scope: !2455)
!2458 = !DILocation(line: 44, column: 20, scope: !2455)
!2459 = !DILocation(line: 44, column: 16, scope: !2455)
!2460 = !DILocation(line: 44, column: 10, scope: !2455)
!2461 = !DILocation(line: 44, column: 14, scope: !2455)
!2462 = !DILocation(line: 44, column: 9, scope: !2455)
!2463 = !DILocation(line: 45, column: 17, scope: !2455)
!2464 = !DILocation(line: 45, column: 24, scope: !2455)
!2465 = distinct !{!2465, !2454, !2466}
!2466 = !DILocation(line: 45, column: 28, scope: !2455)
!2467 = !DILocation(line: 47, column: 8, scope: !2455)
!2468 = !DILocation(line: 47, column: 12, scope: !2455)
!2469 = !DILocation(line: 48, column: 5, scope: !2455)
!2470 = !DILocation(line: 51, column: 7, scope: !2471)
!2471 = distinct !DILexicalBlock(scope: !2451, file: !2437, line: 50, column: 5)
!2472 = !DILocation(line: 52, column: 22, scope: !2471)
!2473 = !DILocation(line: 52, column: 24, scope: !2471)
!2474 = !DILocation(line: 52, column: 20, scope: !2471)
!2475 = !DILocation(line: 52, column: 16, scope: !2471)
!2476 = !DILocation(line: 52, column: 10, scope: !2471)
!2477 = !DILocation(line: 52, column: 14, scope: !2471)
!2478 = !DILocation(line: 52, column: 9, scope: !2471)
!2479 = !DILocation(line: 53, column: 17, scope: !2471)
!2480 = !DILocation(line: 53, column: 24, scope: !2471)
!2481 = distinct !{!2481, !2470, !2482}
!2482 = !DILocation(line: 53, column: 28, scope: !2471)
!2483 = !DILocation(line: 56, column: 10, scope: !2436)
!2484 = !DILocation(line: 56, column: 3, scope: !2436)
!2485 = distinct !DISubprogram(name: "set_program_name", scope: !217, file: !217, line: 39, type: !365, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!2486 = !DILocalVariable(name: "argv0", arg: 1, scope: !2485, file: !217, line: 39, type: !49)
!2487 = !DILocation(line: 39, column: 31, scope: !2485)
!2488 = !DILocalVariable(name: "slash", scope: !2485, file: !217, line: 46, type: !49)
!2489 = !DILocation(line: 46, column: 15, scope: !2485)
!2490 = !DILocalVariable(name: "base", scope: !2485, file: !217, line: 47, type: !49)
!2491 = !DILocation(line: 47, column: 15, scope: !2485)
!2492 = !DILocation(line: 51, column: 7, scope: !2493)
!2493 = distinct !DILexicalBlock(scope: !2485, file: !217, line: 51, column: 7)
!2494 = !DILocation(line: 51, column: 13, scope: !2493)
!2495 = !DILocation(line: 51, column: 7, scope: !2485)
!2496 = !DILocation(line: 55, column: 14, scope: !2497)
!2497 = distinct !DILexicalBlock(scope: !2493, file: !217, line: 52, column: 5)
!2498 = !DILocation(line: 54, column: 7, scope: !2497)
!2499 = !DILocation(line: 56, column: 7, scope: !2497)
!2500 = !DILocation(line: 59, column: 20, scope: !2485)
!2501 = !DILocation(line: 59, column: 11, scope: !2485)
!2502 = !DILocation(line: 59, column: 9, scope: !2485)
!2503 = !DILocation(line: 60, column: 11, scope: !2485)
!2504 = !DILocation(line: 60, column: 17, scope: !2485)
!2505 = !DILocation(line: 60, column: 27, scope: !2485)
!2506 = !DILocation(line: 60, column: 33, scope: !2485)
!2507 = !DILocation(line: 60, column: 39, scope: !2485)
!2508 = !DILocation(line: 60, column: 8, scope: !2485)
!2509 = !DILocation(line: 61, column: 7, scope: !2510)
!2510 = distinct !DILexicalBlock(scope: !2485, file: !217, line: 61, column: 7)
!2511 = !DILocation(line: 61, column: 14, scope: !2510)
!2512 = !DILocation(line: 61, column: 12, scope: !2510)
!2513 = !DILocation(line: 61, column: 20, scope: !2510)
!2514 = !DILocation(line: 61, column: 25, scope: !2510)
!2515 = !DILocation(line: 61, column: 37, scope: !2510)
!2516 = !DILocation(line: 61, column: 42, scope: !2510)
!2517 = !DILocation(line: 61, column: 28, scope: !2510)
!2518 = !DILocation(line: 61, column: 61, scope: !2510)
!2519 = !DILocation(line: 61, column: 7, scope: !2485)
!2520 = !DILocation(line: 63, column: 15, scope: !2521)
!2521 = distinct !DILexicalBlock(scope: !2510, file: !217, line: 62, column: 5)
!2522 = !DILocation(line: 63, column: 13, scope: !2521)
!2523 = !DILocation(line: 64, column: 20, scope: !2524)
!2524 = distinct !DILexicalBlock(scope: !2521, file: !217, line: 64, column: 11)
!2525 = !DILocation(line: 64, column: 11, scope: !2524)
!2526 = !DILocation(line: 64, column: 36, scope: !2524)
!2527 = !DILocation(line: 64, column: 11, scope: !2521)
!2528 = !DILocation(line: 66, column: 19, scope: !2529)
!2529 = distinct !DILexicalBlock(scope: !2524, file: !217, line: 65, column: 9)
!2530 = !DILocation(line: 66, column: 24, scope: !2529)
!2531 = !DILocation(line: 66, column: 17, scope: !2529)
!2532 = !DILocation(line: 70, column: 52, scope: !2529)
!2533 = !DILocation(line: 70, column: 41, scope: !2529)
!2534 = !DILocation(line: 72, column: 9, scope: !2529)
!2535 = !DILocation(line: 73, column: 5, scope: !2521)
!2536 = !DILocation(line: 84, column: 18, scope: !2485)
!2537 = !DILocation(line: 84, column: 16, scope: !2485)
!2538 = !DILocation(line: 90, column: 38, scope: !2485)
!2539 = !DILocation(line: 90, column: 27, scope: !2485)
!2540 = !DILocation(line: 92, column: 1, scope: !2485)
!2541 = !DILocalVariable(name: "argv0", arg: 1, scope: !2542, file: !217, line: 39, type: !49)
!2542 = distinct !DISubprogram(name: "set_program_name", scope: !217, file: !217, line: 39, type: !365, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2543, retainedNodes: !4)
!2543 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, globals: !2544, nameTableKind: None)
!2544 = !{!2545}
!2545 = !DIGlobalVariableExpression(var: !2546, expr: !DIExpression())
!2546 = distinct !DIGlobalVariable(name: "program_name", scope: !2543, file: !217, line: 33, type: !49, isLocal: false, isDefinition: true)
!2547 = !DILocalVariable(name: "slash", scope: !2542, file: !217, line: 46, type: !49)
!2548 = !DILocalVariable(name: "base", scope: !2542, file: !217, line: 47, type: !49)
!2549 = distinct !DISubprogram(name: "set_char_quoting", scope: !241, file: !241, line: 152, type: !2550, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!2550 = !DISubroutineType(types: !2551)
!2551 = !{!53, !2552, !7, !53}
!2552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !254, size: 64)
!2553 = !DILocalVariable(name: "o", arg: 1, scope: !2549, file: !241, line: 152, type: !2552)
!2554 = !DILocation(line: 152, column: 43, scope: !2549)
!2555 = !DILocalVariable(name: "c", arg: 2, scope: !2549, file: !241, line: 152, type: !7)
!2556 = !DILocation(line: 152, column: 51, scope: !2549)
!2557 = !DILocalVariable(name: "i", arg: 3, scope: !2549, file: !241, line: 152, type: !53)
!2558 = !DILocation(line: 152, column: 58, scope: !2549)
!2559 = !DILocalVariable(name: "uc", scope: !2549, file: !241, line: 154, type: !317)
!2560 = !DILocation(line: 154, column: 17, scope: !2549)
!2561 = !DILocation(line: 154, column: 22, scope: !2549)
!2562 = !DILocalVariable(name: "p", scope: !2549, file: !241, line: 155, type: !2563)
!2563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !180, size: 64)
!2564 = !DILocation(line: 155, column: 17, scope: !2549)
!2565 = !DILocation(line: 156, column: 6, scope: !2549)
!2566 = !DILocation(line: 156, column: 10, scope: !2549)
!2567 = !DILocation(line: 156, column: 41, scope: !2549)
!2568 = !DILocation(line: 156, column: 5, scope: !2549)
!2569 = !DILocation(line: 156, column: 59, scope: !2549)
!2570 = !DILocation(line: 156, column: 62, scope: !2549)
!2571 = !DILocation(line: 156, column: 57, scope: !2549)
!2572 = !DILocalVariable(name: "shift", scope: !2549, file: !241, line: 157, type: !53)
!2573 = !DILocation(line: 157, column: 7, scope: !2549)
!2574 = !DILocation(line: 157, column: 15, scope: !2549)
!2575 = !DILocation(line: 157, column: 18, scope: !2549)
!2576 = !DILocalVariable(name: "r", scope: !2549, file: !241, line: 158, type: !53)
!2577 = !DILocation(line: 158, column: 7, scope: !2549)
!2578 = !DILocation(line: 158, column: 13, scope: !2549)
!2579 = !DILocation(line: 158, column: 12, scope: !2549)
!2580 = !DILocation(line: 158, column: 18, scope: !2549)
!2581 = !DILocation(line: 158, column: 15, scope: !2549)
!2582 = !DILocation(line: 158, column: 25, scope: !2549)
!2583 = !DILocation(line: 159, column: 11, scope: !2549)
!2584 = !DILocation(line: 159, column: 13, scope: !2549)
!2585 = !DILocation(line: 159, column: 20, scope: !2549)
!2586 = !DILocation(line: 159, column: 18, scope: !2549)
!2587 = !DILocation(line: 159, column: 26, scope: !2549)
!2588 = !DILocation(line: 159, column: 23, scope: !2549)
!2589 = !DILocation(line: 159, column: 4, scope: !2549)
!2590 = !DILocation(line: 159, column: 6, scope: !2549)
!2591 = !DILocation(line: 160, column: 10, scope: !2549)
!2592 = !DILocation(line: 160, column: 3, scope: !2549)
!2593 = !DILocalVariable(name: "shift", scope: !2594, file: !241, line: 157, type: !53)
!2594 = distinct !DISubprogram(name: "set_char_quoting", scope: !241, file: !241, line: 152, type: !2595, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2605, retainedNodes: !4)
!2595 = !DISubroutineType(types: !2596)
!2596 = !{!53, !2597, !7, !53}
!2597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2598, size: 64)
!2598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !2599)
!2599 = !{!2600, !2601, !2602, !2603, !2604}
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2598, file: !241, line: 68, baseType: !223, size: 32)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2598, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2598, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2598, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2598, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!2605 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !2606, nameTableKind: None)
!2606 = !{!2607, !2609, !2611, !2613, !2615, !2617, !2624, !2626}
!2607 = !DIGlobalVariableExpression(var: !2608, expr: !DIExpression())
!2608 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2605, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!2609 = !DIGlobalVariableExpression(var: !2610, expr: !DIExpression())
!2610 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2605, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!2611 = !DIGlobalVariableExpression(var: !2612, expr: !DIExpression())
!2612 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2605, file: !241, line: 1052, type: !2598, isLocal: false, isDefinition: true)
!2613 = !DIGlobalVariableExpression(var: !2614, expr: !DIExpression())
!2614 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2605, file: !241, line: 116, type: !2598, isLocal: true, isDefinition: true)
!2615 = !DIGlobalVariableExpression(var: !2616, expr: !DIExpression())
!2616 = distinct !DIGlobalVariable(name: "slot0", scope: !2605, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!2617 = !DIGlobalVariableExpression(var: !2618, expr: !DIExpression())
!2618 = distinct !DIGlobalVariable(name: "slotvec", scope: !2605, file: !241, line: 845, type: !2619, isLocal: true, isDefinition: true)
!2619 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2620, size: 64)
!2620 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !2621)
!2621 = !{!2622, !2623}
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2620, file: !241, line: 836, baseType: !110, size: 64)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2620, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!2624 = !DIGlobalVariableExpression(var: !2625, expr: !DIExpression())
!2625 = distinct !DIGlobalVariable(name: "nslots", scope: !2605, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!2626 = !DIGlobalVariableExpression(var: !2627, expr: !DIExpression())
!2627 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2605, file: !241, line: 844, type: !2620, isLocal: true, isDefinition: true)
!2628 = !DILocalVariable(name: "r", scope: !2594, file: !241, line: 158, type: !53)
!2629 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !241, file: !241, line: 982, type: !2630, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!2630 = !DISubroutineType(types: !2631)
!2631 = !{!6, !49, !110, !7}
!2632 = !DILocalVariable(name: "arg", arg: 1, scope: !2629, file: !241, line: 982, type: !49)
!2633 = !DILocation(line: 982, column: 32, scope: !2629)
!2634 = !DILocalVariable(name: "argsize", arg: 2, scope: !2629, file: !241, line: 982, type: !110)
!2635 = !DILocation(line: 982, column: 44, scope: !2629)
!2636 = !DILocalVariable(name: "ch", arg: 3, scope: !2629, file: !241, line: 982, type: !7)
!2637 = !DILocation(line: 982, column: 58, scope: !2629)
!2638 = !DILocalVariable(name: "options", scope: !2629, file: !241, line: 984, type: !254)
!2639 = !DILocation(line: 984, column: 26, scope: !2629)
!2640 = !DILocation(line: 985, column: 13, scope: !2629)
!2641 = !DILocation(line: 986, column: 31, scope: !2629)
!2642 = !DILocation(line: 986, column: 3, scope: !2629)
!2643 = !DILocation(line: 987, column: 33, scope: !2629)
!2644 = !DILocation(line: 987, column: 38, scope: !2629)
!2645 = !DILocation(line: 987, column: 10, scope: !2629)
!2646 = !DILocation(line: 987, column: 3, scope: !2629)
!2647 = distinct !DISubprogram(name: "quotearg_n_options", scope: !241, file: !241, line: 877, type: !2648, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!2648 = !DISubroutineType(types: !2649)
!2649 = !{!6, !53, !49, !110, !2650}
!2650 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2651, size: 64)
!2651 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !254)
!2652 = !DILocalVariable(name: "n", arg: 1, scope: !2647, file: !241, line: 877, type: !53)
!2653 = !DILocation(line: 877, column: 25, scope: !2647)
!2654 = !DILocalVariable(name: "arg", arg: 2, scope: !2647, file: !241, line: 877, type: !49)
!2655 = !DILocation(line: 877, column: 40, scope: !2647)
!2656 = !DILocalVariable(name: "argsize", arg: 3, scope: !2647, file: !241, line: 877, type: !110)
!2657 = !DILocation(line: 877, column: 52, scope: !2647)
!2658 = !DILocalVariable(name: "options", arg: 4, scope: !2647, file: !241, line: 878, type: !2650)
!2659 = !DILocation(line: 878, column: 51, scope: !2647)
!2660 = !DILocalVariable(name: "e", scope: !2647, file: !241, line: 880, type: !53)
!2661 = !DILocation(line: 880, column: 7, scope: !2647)
!2662 = !DILocation(line: 880, column: 11, scope: !2647)
!2663 = !DILocalVariable(name: "sv", scope: !2647, file: !241, line: 882, type: !268)
!2664 = !DILocation(line: 882, column: 19, scope: !2647)
!2665 = !DILocation(line: 882, column: 24, scope: !2647)
!2666 = !DILocation(line: 884, column: 7, scope: !2667)
!2667 = distinct !DILexicalBlock(scope: !2647, file: !241, line: 884, column: 7)
!2668 = !DILocation(line: 884, column: 9, scope: !2667)
!2669 = !DILocation(line: 884, column: 7, scope: !2647)
!2670 = !DILocation(line: 885, column: 5, scope: !2667)
!2671 = !DILocation(line: 887, column: 7, scope: !2672)
!2672 = distinct !DILexicalBlock(scope: !2647, file: !241, line: 887, column: 7)
!2673 = !DILocation(line: 887, column: 17, scope: !2672)
!2674 = !DILocation(line: 887, column: 14, scope: !2672)
!2675 = !DILocation(line: 887, column: 7, scope: !2647)
!2676 = !DILocalVariable(name: "preallocated", scope: !2677, file: !241, line: 889, type: !18)
!2677 = distinct !DILexicalBlock(scope: !2672, file: !241, line: 888, column: 5)
!2678 = !DILocation(line: 889, column: 12, scope: !2677)
!2679 = !DILocation(line: 889, column: 28, scope: !2677)
!2680 = !DILocation(line: 889, column: 31, scope: !2677)
!2681 = !DILocalVariable(name: "nmax", scope: !2677, file: !241, line: 890, type: !53)
!2682 = !DILocation(line: 890, column: 11, scope: !2677)
!2683 = !DILocation(line: 892, column: 11, scope: !2684)
!2684 = distinct !DILexicalBlock(scope: !2677, file: !241, line: 892, column: 11)
!2685 = !DILocation(line: 892, column: 18, scope: !2684)
!2686 = !DILocation(line: 892, column: 16, scope: !2684)
!2687 = !DILocation(line: 892, column: 11, scope: !2677)
!2688 = !DILocation(line: 893, column: 9, scope: !2684)
!2689 = !DILocation(line: 895, column: 32, scope: !2677)
!2690 = !DILocation(line: 895, column: 54, scope: !2677)
!2691 = !DILocation(line: 895, column: 59, scope: !2677)
!2692 = !DILocation(line: 895, column: 61, scope: !2677)
!2693 = !DILocation(line: 895, column: 58, scope: !2677)
!2694 = !DILocation(line: 895, column: 66, scope: !2677)
!2695 = !DILocation(line: 895, column: 22, scope: !2677)
!2696 = !DILocation(line: 895, column: 20, scope: !2677)
!2697 = !DILocation(line: 895, column: 15, scope: !2677)
!2698 = !DILocation(line: 896, column: 11, scope: !2699)
!2699 = distinct !DILexicalBlock(scope: !2677, file: !241, line: 896, column: 11)
!2700 = !DILocation(line: 896, column: 11, scope: !2677)
!2701 = !DILocation(line: 897, column: 10, scope: !2699)
!2702 = !DILocation(line: 897, column: 15, scope: !2699)
!2703 = !DILocation(line: 897, column: 9, scope: !2699)
!2704 = !DILocation(line: 898, column: 15, scope: !2677)
!2705 = !DILocation(line: 898, column: 20, scope: !2677)
!2706 = !DILocation(line: 898, column: 18, scope: !2677)
!2707 = !DILocation(line: 898, column: 7, scope: !2677)
!2708 = !DILocation(line: 898, column: 32, scope: !2677)
!2709 = !DILocation(line: 898, column: 34, scope: !2677)
!2710 = !DILocation(line: 898, column: 40, scope: !2677)
!2711 = !DILocation(line: 898, column: 38, scope: !2677)
!2712 = !DILocation(line: 898, column: 31, scope: !2677)
!2713 = !DILocation(line: 898, column: 48, scope: !2677)
!2714 = !DILocation(line: 899, column: 16, scope: !2677)
!2715 = !DILocation(line: 899, column: 18, scope: !2677)
!2716 = !DILocation(line: 899, column: 14, scope: !2677)
!2717 = !DILocation(line: 900, column: 5, scope: !2677)
!2718 = !DILocalVariable(name: "size", scope: !2719, file: !241, line: 903, type: !110)
!2719 = distinct !DILexicalBlock(scope: !2647, file: !241, line: 902, column: 3)
!2720 = !DILocation(line: 903, column: 12, scope: !2719)
!2721 = !DILocation(line: 903, column: 19, scope: !2719)
!2722 = !DILocation(line: 903, column: 22, scope: !2719)
!2723 = !DILocation(line: 903, column: 25, scope: !2719)
!2724 = !DILocalVariable(name: "val", scope: !2719, file: !241, line: 904, type: !6)
!2725 = !DILocation(line: 904, column: 11, scope: !2719)
!2726 = !DILocation(line: 904, column: 17, scope: !2719)
!2727 = !DILocation(line: 904, column: 20, scope: !2719)
!2728 = !DILocation(line: 904, column: 23, scope: !2719)
!2729 = !DILocalVariable(name: "flags", scope: !2719, file: !241, line: 906, type: !53)
!2730 = !DILocation(line: 906, column: 9, scope: !2719)
!2731 = !DILocation(line: 906, column: 17, scope: !2719)
!2732 = !DILocation(line: 906, column: 26, scope: !2719)
!2733 = !DILocation(line: 906, column: 32, scope: !2719)
!2734 = !DILocalVariable(name: "qsize", scope: !2719, file: !241, line: 907, type: !110)
!2735 = !DILocation(line: 907, column: 12, scope: !2719)
!2736 = !DILocation(line: 907, column: 46, scope: !2719)
!2737 = !DILocation(line: 907, column: 51, scope: !2719)
!2738 = !DILocation(line: 907, column: 57, scope: !2719)
!2739 = !DILocation(line: 907, column: 62, scope: !2719)
!2740 = !DILocation(line: 908, column: 46, scope: !2719)
!2741 = !DILocation(line: 908, column: 55, scope: !2719)
!2742 = !DILocation(line: 908, column: 62, scope: !2719)
!2743 = !DILocation(line: 909, column: 46, scope: !2719)
!2744 = !DILocation(line: 909, column: 55, scope: !2719)
!2745 = !DILocation(line: 910, column: 46, scope: !2719)
!2746 = !DILocation(line: 910, column: 55, scope: !2719)
!2747 = !DILocation(line: 911, column: 46, scope: !2719)
!2748 = !DILocation(line: 911, column: 55, scope: !2719)
!2749 = !DILocation(line: 907, column: 20, scope: !2719)
!2750 = !DILocation(line: 913, column: 9, scope: !2751)
!2751 = distinct !DILexicalBlock(scope: !2719, file: !241, line: 913, column: 9)
!2752 = !DILocation(line: 913, column: 17, scope: !2751)
!2753 = !DILocation(line: 913, column: 14, scope: !2751)
!2754 = !DILocation(line: 913, column: 9, scope: !2719)
!2755 = !DILocation(line: 915, column: 29, scope: !2756)
!2756 = distinct !DILexicalBlock(scope: !2751, file: !241, line: 914, column: 7)
!2757 = !DILocation(line: 915, column: 35, scope: !2756)
!2758 = !DILocation(line: 915, column: 27, scope: !2756)
!2759 = !DILocation(line: 915, column: 9, scope: !2756)
!2760 = !DILocation(line: 915, column: 12, scope: !2756)
!2761 = !DILocation(line: 915, column: 15, scope: !2756)
!2762 = !DILocation(line: 915, column: 20, scope: !2756)
!2763 = !DILocation(line: 916, column: 13, scope: !2764)
!2764 = distinct !DILexicalBlock(scope: !2756, file: !241, line: 916, column: 13)
!2765 = !DILocation(line: 916, column: 17, scope: !2764)
!2766 = !DILocation(line: 916, column: 13, scope: !2756)
!2767 = !DILocation(line: 917, column: 17, scope: !2764)
!2768 = !DILocation(line: 917, column: 11, scope: !2764)
!2769 = !DILocation(line: 918, column: 39, scope: !2756)
!2770 = !DILocation(line: 918, column: 27, scope: !2756)
!2771 = !DILocation(line: 918, column: 25, scope: !2756)
!2772 = !DILocation(line: 918, column: 9, scope: !2756)
!2773 = !DILocation(line: 918, column: 12, scope: !2756)
!2774 = !DILocation(line: 918, column: 15, scope: !2756)
!2775 = !DILocation(line: 918, column: 19, scope: !2756)
!2776 = !DILocation(line: 919, column: 35, scope: !2756)
!2777 = !DILocation(line: 919, column: 40, scope: !2756)
!2778 = !DILocation(line: 919, column: 46, scope: !2756)
!2779 = !DILocation(line: 919, column: 51, scope: !2756)
!2780 = !DILocation(line: 919, column: 60, scope: !2756)
!2781 = !DILocation(line: 919, column: 69, scope: !2756)
!2782 = !DILocation(line: 920, column: 35, scope: !2756)
!2783 = !DILocation(line: 920, column: 42, scope: !2756)
!2784 = !DILocation(line: 920, column: 51, scope: !2756)
!2785 = !DILocation(line: 921, column: 35, scope: !2756)
!2786 = !DILocation(line: 921, column: 44, scope: !2756)
!2787 = !DILocation(line: 922, column: 35, scope: !2756)
!2788 = !DILocation(line: 922, column: 44, scope: !2756)
!2789 = !DILocation(line: 919, column: 9, scope: !2756)
!2790 = !DILocation(line: 923, column: 7, scope: !2756)
!2791 = !DILocation(line: 925, column: 13, scope: !2719)
!2792 = !DILocation(line: 925, column: 5, scope: !2719)
!2793 = !DILocation(line: 925, column: 11, scope: !2719)
!2794 = !DILocation(line: 926, column: 12, scope: !2719)
!2795 = !DILocation(line: 926, column: 5, scope: !2719)
!2796 = !DILocalVariable(name: "nmax", scope: !2797, file: !241, line: 890, type: !53)
!2797 = distinct !DILexicalBlock(scope: !2798, file: !241, line: 888, column: 5)
!2798 = distinct !DILexicalBlock(scope: !2799, file: !241, line: 887, column: 7)
!2799 = distinct !DISubprogram(name: "quotearg_n_options", scope: !241, file: !241, line: 877, type: !2800, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2811, retainedNodes: !4)
!2800 = !DISubroutineType(types: !2801)
!2801 = !{!6, !53, !49, !110, !2802}
!2802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2803, size: 64)
!2803 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2804)
!2804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !2805)
!2805 = !{!2806, !2807, !2808, !2809, !2810}
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2804, file: !241, line: 68, baseType: !223, size: 32)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2804, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2804, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2804, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2804, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!2811 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !2812, nameTableKind: None)
!2812 = !{!2813, !2815, !2817, !2819, !2821, !2823, !2830, !2832}
!2813 = !DIGlobalVariableExpression(var: !2814, expr: !DIExpression())
!2814 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2811, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!2815 = !DIGlobalVariableExpression(var: !2816, expr: !DIExpression())
!2816 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2811, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!2817 = !DIGlobalVariableExpression(var: !2818, expr: !DIExpression())
!2818 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2811, file: !241, line: 1052, type: !2804, isLocal: false, isDefinition: true)
!2819 = !DIGlobalVariableExpression(var: !2820, expr: !DIExpression())
!2820 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2811, file: !241, line: 116, type: !2804, isLocal: true, isDefinition: true)
!2821 = !DIGlobalVariableExpression(var: !2822, expr: !DIExpression())
!2822 = distinct !DIGlobalVariable(name: "slot0", scope: !2811, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!2823 = !DIGlobalVariableExpression(var: !2824, expr: !DIExpression())
!2824 = distinct !DIGlobalVariable(name: "slotvec", scope: !2811, file: !241, line: 845, type: !2825, isLocal: true, isDefinition: true)
!2825 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2826, size: 64)
!2826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !2827)
!2827 = !{!2828, !2829}
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2826, file: !241, line: 836, baseType: !110, size: 64)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2826, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!2830 = !DIGlobalVariableExpression(var: !2831, expr: !DIExpression())
!2831 = distinct !DIGlobalVariable(name: "nslots", scope: !2811, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!2832 = !DIGlobalVariableExpression(var: !2833, expr: !DIExpression())
!2833 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2811, file: !241, line: 844, type: !2826, isLocal: true, isDefinition: true)
!2834 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !241, file: !241, line: 256, type: !2835, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!2835 = !DISubroutineType(types: !2836)
!2836 = !{!110, !6, !110, !49, !110, !223, !53, !2837, !49, !49}
!2837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2838, size: 64)
!2838 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !180)
!2839 = !DILocalVariable(name: "buffer", arg: 1, scope: !2834, file: !241, line: 256, type: !6)
!2840 = !DILocation(line: 256, column: 33, scope: !2834)
!2841 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2834, file: !241, line: 256, type: !110)
!2842 = !DILocation(line: 256, column: 48, scope: !2834)
!2843 = !DILocalVariable(name: "arg", arg: 3, scope: !2834, file: !241, line: 257, type: !49)
!2844 = !DILocation(line: 257, column: 39, scope: !2834)
!2845 = !DILocalVariable(name: "argsize", arg: 4, scope: !2834, file: !241, line: 257, type: !110)
!2846 = !DILocation(line: 257, column: 51, scope: !2834)
!2847 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2834, file: !241, line: 258, type: !223)
!2848 = !DILocation(line: 258, column: 46, scope: !2834)
!2849 = !DILocalVariable(name: "flags", arg: 6, scope: !2834, file: !241, line: 258, type: !53)
!2850 = !DILocation(line: 258, column: 65, scope: !2834)
!2851 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2834, file: !241, line: 259, type: !2837)
!2852 = !DILocation(line: 259, column: 47, scope: !2834)
!2853 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2834, file: !241, line: 260, type: !49)
!2854 = !DILocation(line: 260, column: 39, scope: !2834)
!2855 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2834, file: !241, line: 261, type: !49)
!2856 = !DILocation(line: 261, column: 39, scope: !2834)
!2857 = !DILocalVariable(name: "i", scope: !2834, file: !241, line: 263, type: !110)
!2858 = !DILocation(line: 263, column: 10, scope: !2834)
!2859 = !DILocalVariable(name: "len", scope: !2834, file: !241, line: 264, type: !110)
!2860 = !DILocation(line: 264, column: 10, scope: !2834)
!2861 = !DILocalVariable(name: "orig_buffersize", scope: !2834, file: !241, line: 265, type: !110)
!2862 = !DILocation(line: 265, column: 10, scope: !2834)
!2863 = !DILocalVariable(name: "quote_string", scope: !2834, file: !241, line: 266, type: !49)
!2864 = !DILocation(line: 266, column: 15, scope: !2834)
!2865 = !DILocalVariable(name: "quote_string_len", scope: !2834, file: !241, line: 267, type: !110)
!2866 = !DILocation(line: 267, column: 10, scope: !2834)
!2867 = !DILocalVariable(name: "backslash_escapes", scope: !2834, file: !241, line: 268, type: !18)
!2868 = !DILocation(line: 268, column: 8, scope: !2834)
!2869 = !DILocalVariable(name: "unibyte_locale", scope: !2834, file: !241, line: 269, type: !18)
!2870 = !DILocation(line: 269, column: 8, scope: !2834)
!2871 = !DILocation(line: 269, column: 25, scope: !2834)
!2872 = !DILocation(line: 269, column: 36, scope: !2834)
!2873 = !DILocalVariable(name: "elide_outer_quotes", scope: !2834, file: !241, line: 270, type: !18)
!2874 = !DILocation(line: 270, column: 8, scope: !2834)
!2875 = !DILocation(line: 270, column: 30, scope: !2834)
!2876 = !DILocation(line: 270, column: 36, scope: !2834)
!2877 = !DILocation(line: 270, column: 61, scope: !2834)
!2878 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2834, file: !241, line: 271, type: !18)
!2879 = !DILocation(line: 271, column: 8, scope: !2834)
!2880 = !DILocalVariable(name: "encountered_single_quote", scope: !2834, file: !241, line: 272, type: !18)
!2881 = !DILocation(line: 272, column: 8, scope: !2834)
!2882 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2834, file: !241, line: 273, type: !18)
!2883 = !DILocation(line: 273, column: 8, scope: !2834)
!2884 = !DILocation(line: 273, column: 3, scope: !2834)
!2885 = !DILabel(scope: !2834, name: "process_input", file: !241, line: 314)
!2886 = !DILocation(line: 314, column: 2, scope: !2834)
!2887 = !DILocation(line: 316, column: 11, scope: !2834)
!2888 = !DILocation(line: 316, column: 3, scope: !2834)
!2889 = !DILocation(line: 319, column: 21, scope: !2890)
!2890 = distinct !DILexicalBlock(scope: !2834, file: !241, line: 317, column: 5)
!2891 = !DILocation(line: 320, column: 26, scope: !2890)
!2892 = !DILocation(line: 321, column: 7, scope: !2890)
!2893 = !DILocation(line: 323, column: 12, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2890, file: !241, line: 323, column: 11)
!2895 = !DILocation(line: 323, column: 11, scope: !2890)
!2896 = !DILocation(line: 324, column: 9, scope: !2894)
!2897 = !DILocation(line: 324, column: 9, scope: !2898)
!2898 = distinct !DILexicalBlock(scope: !2899, file: !241, line: 324, column: 9)
!2899 = distinct !DILexicalBlock(scope: !2894, file: !241, line: 324, column: 9)
!2900 = !DILocation(line: 324, column: 9, scope: !2899)
!2901 = !DILocation(line: 325, column: 25, scope: !2890)
!2902 = !DILocation(line: 326, column: 20, scope: !2890)
!2903 = !DILocation(line: 327, column: 24, scope: !2890)
!2904 = !DILocation(line: 328, column: 7, scope: !2890)
!2905 = !DILocation(line: 331, column: 25, scope: !2890)
!2906 = !DILocation(line: 332, column: 26, scope: !2890)
!2907 = !DILocation(line: 333, column: 7, scope: !2890)
!2908 = !DILocation(line: 339, column: 13, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2910, file: !241, line: 339, column: 13)
!2910 = distinct !DILexicalBlock(scope: !2890, file: !241, line: 338, column: 7)
!2911 = !DILocation(line: 339, column: 27, scope: !2909)
!2912 = !DILocation(line: 339, column: 13, scope: !2910)
!2913 = !DILocation(line: 362, column: 50, scope: !2914)
!2914 = distinct !DILexicalBlock(scope: !2909, file: !241, line: 340, column: 11)
!2915 = !DILocation(line: 362, column: 26, scope: !2914)
!2916 = !DILocation(line: 362, column: 24, scope: !2914)
!2917 = !DILocation(line: 363, column: 51, scope: !2914)
!2918 = !DILocation(line: 363, column: 27, scope: !2914)
!2919 = !DILocation(line: 363, column: 25, scope: !2914)
!2920 = !DILocation(line: 364, column: 11, scope: !2914)
!2921 = !DILocation(line: 365, column: 14, scope: !2922)
!2922 = distinct !DILexicalBlock(scope: !2910, file: !241, line: 365, column: 13)
!2923 = !DILocation(line: 365, column: 13, scope: !2910)
!2924 = !DILocation(line: 366, column: 31, scope: !2925)
!2925 = distinct !DILexicalBlock(scope: !2922, file: !241, line: 366, column: 11)
!2926 = !DILocation(line: 366, column: 29, scope: !2925)
!2927 = !DILocation(line: 366, column: 16, scope: !2925)
!2928 = !DILocation(line: 366, column: 44, scope: !2929)
!2929 = distinct !DILexicalBlock(scope: !2925, file: !241, line: 366, column: 11)
!2930 = !DILocation(line: 366, column: 43, scope: !2929)
!2931 = !DILocation(line: 366, column: 11, scope: !2925)
!2932 = !DILocation(line: 367, column: 13, scope: !2929)
!2933 = !DILocation(line: 367, column: 13, scope: !2934)
!2934 = distinct !DILexicalBlock(scope: !2935, file: !241, line: 367, column: 13)
!2935 = distinct !DILexicalBlock(scope: !2929, file: !241, line: 367, column: 13)
!2936 = !DILocation(line: 367, column: 13, scope: !2935)
!2937 = !DILocation(line: 366, column: 70, scope: !2929)
!2938 = !DILocation(line: 366, column: 11, scope: !2929)
!2939 = distinct !{!2939, !2931, !2940}
!2940 = !DILocation(line: 367, column: 13, scope: !2925)
!2941 = !DILocation(line: 368, column: 27, scope: !2910)
!2942 = !DILocation(line: 369, column: 24, scope: !2910)
!2943 = !DILocation(line: 369, column: 22, scope: !2910)
!2944 = !DILocation(line: 370, column: 36, scope: !2910)
!2945 = !DILocation(line: 370, column: 28, scope: !2910)
!2946 = !DILocation(line: 370, column: 26, scope: !2910)
!2947 = !DILocation(line: 372, column: 7, scope: !2890)
!2948 = !DILocation(line: 375, column: 25, scope: !2890)
!2949 = !DILocation(line: 376, column: 7, scope: !2890)
!2950 = !DILocation(line: 378, column: 26, scope: !2890)
!2951 = !DILocation(line: 379, column: 7, scope: !2890)
!2952 = !DILocation(line: 381, column: 12, scope: !2953)
!2953 = distinct !DILexicalBlock(scope: !2890, file: !241, line: 381, column: 11)
!2954 = !DILocation(line: 381, column: 11, scope: !2890)
!2955 = !DILocation(line: 382, column: 27, scope: !2953)
!2956 = !DILocation(line: 382, column: 9, scope: !2953)
!2957 = !DILocation(line: 383, column: 7, scope: !2890)
!2958 = !DILocation(line: 385, column: 21, scope: !2890)
!2959 = !DILocation(line: 386, column: 12, scope: !2960)
!2960 = distinct !DILexicalBlock(scope: !2890, file: !241, line: 386, column: 11)
!2961 = !DILocation(line: 386, column: 11, scope: !2890)
!2962 = !DILocation(line: 387, column: 9, scope: !2960)
!2963 = !DILocation(line: 387, column: 9, scope: !2964)
!2964 = distinct !DILexicalBlock(scope: !2965, file: !241, line: 387, column: 9)
!2965 = distinct !DILexicalBlock(scope: !2960, file: !241, line: 387, column: 9)
!2966 = !DILocation(line: 387, column: 9, scope: !2965)
!2967 = !DILocation(line: 388, column: 20, scope: !2890)
!2968 = !DILocation(line: 389, column: 24, scope: !2890)
!2969 = !DILocation(line: 390, column: 7, scope: !2890)
!2970 = !DILocation(line: 393, column: 26, scope: !2890)
!2971 = !DILocation(line: 394, column: 7, scope: !2890)
!2972 = !DILocation(line: 397, column: 7, scope: !2890)
!2973 = !DILocation(line: 400, column: 10, scope: !2974)
!2974 = distinct !DILexicalBlock(scope: !2834, file: !241, line: 400, column: 3)
!2975 = !DILocation(line: 400, column: 8, scope: !2974)
!2976 = !DILocation(line: 400, column: 19, scope: !2977)
!2977 = distinct !DILexicalBlock(scope: !2974, file: !241, line: 400, column: 3)
!2978 = !DILocation(line: 400, column: 27, scope: !2977)
!2979 = !DILocation(line: 400, column: 41, scope: !2977)
!2980 = !DILocation(line: 400, column: 45, scope: !2977)
!2981 = !DILocation(line: 400, column: 48, scope: !2977)
!2982 = !DILocation(line: 400, column: 58, scope: !2977)
!2983 = !DILocation(line: 400, column: 63, scope: !2977)
!2984 = !DILocation(line: 400, column: 60, scope: !2977)
!2985 = !DILocation(line: 400, column: 16, scope: !2977)
!2986 = !DILocation(line: 400, column: 3, scope: !2974)
!2987 = !DILocalVariable(name: "c", scope: !2988, file: !241, line: 402, type: !317)
!2988 = distinct !DILexicalBlock(scope: !2977, file: !241, line: 401, column: 5)
!2989 = !DILocation(line: 402, column: 21, scope: !2988)
!2990 = !DILocalVariable(name: "esc", scope: !2988, file: !241, line: 403, type: !317)
!2991 = !DILocation(line: 403, column: 21, scope: !2988)
!2992 = !DILocalVariable(name: "is_right_quote", scope: !2988, file: !241, line: 404, type: !18)
!2993 = !DILocation(line: 404, column: 12, scope: !2988)
!2994 = !DILocalVariable(name: "escaping", scope: !2988, file: !241, line: 405, type: !18)
!2995 = !DILocation(line: 405, column: 12, scope: !2988)
!2996 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2988, file: !241, line: 406, type: !18)
!2997 = !DILocation(line: 406, column: 12, scope: !2988)
!2998 = !DILocation(line: 408, column: 11, scope: !2999)
!2999 = distinct !DILexicalBlock(scope: !2988, file: !241, line: 408, column: 11)
!3000 = !DILocation(line: 409, column: 11, scope: !2999)
!3001 = !DILocation(line: 409, column: 14, scope: !2999)
!3002 = !DILocation(line: 409, column: 28, scope: !2999)
!3003 = !DILocation(line: 410, column: 11, scope: !2999)
!3004 = !DILocation(line: 410, column: 14, scope: !2999)
!3005 = !DILocation(line: 411, column: 11, scope: !2999)
!3006 = !DILocation(line: 411, column: 15, scope: !2999)
!3007 = !DILocation(line: 411, column: 19, scope: !2999)
!3008 = !DILocation(line: 411, column: 17, scope: !2999)
!3009 = !DILocation(line: 412, column: 19, scope: !2999)
!3010 = !DILocation(line: 412, column: 27, scope: !2999)
!3011 = !DILocation(line: 412, column: 39, scope: !2999)
!3012 = !DILocation(line: 412, column: 46, scope: !2999)
!3013 = !DILocation(line: 412, column: 44, scope: !2999)
!3014 = !DILocation(line: 416, column: 40, scope: !2999)
!3015 = !DILocation(line: 416, column: 32, scope: !2999)
!3016 = !DILocation(line: 416, column: 30, scope: !2999)
!3017 = !DILocation(line: 416, column: 48, scope: !2999)
!3018 = !DILocation(line: 412, column: 15, scope: !2999)
!3019 = !DILocation(line: 417, column: 11, scope: !2999)
!3020 = !DILocation(line: 417, column: 22, scope: !2999)
!3021 = !DILocation(line: 417, column: 28, scope: !2999)
!3022 = !DILocation(line: 417, column: 26, scope: !2999)
!3023 = !DILocation(line: 417, column: 31, scope: !2999)
!3024 = !DILocation(line: 417, column: 45, scope: !2999)
!3025 = !DILocation(line: 417, column: 14, scope: !2999)
!3026 = !DILocation(line: 417, column: 63, scope: !2999)
!3027 = !DILocation(line: 408, column: 11, scope: !2988)
!3028 = !DILocation(line: 419, column: 15, scope: !3029)
!3029 = distinct !DILexicalBlock(scope: !3030, file: !241, line: 419, column: 15)
!3030 = distinct !DILexicalBlock(scope: !2999, file: !241, line: 418, column: 9)
!3031 = !DILocation(line: 419, column: 15, scope: !3030)
!3032 = !DILocation(line: 420, column: 13, scope: !3029)
!3033 = !DILocation(line: 421, column: 26, scope: !3030)
!3034 = !DILocation(line: 422, column: 9, scope: !3030)
!3035 = !DILocation(line: 424, column: 11, scope: !2988)
!3036 = !DILocation(line: 424, column: 15, scope: !2988)
!3037 = !DILocation(line: 424, column: 9, scope: !2988)
!3038 = !DILocation(line: 425, column: 15, scope: !2988)
!3039 = !DILocation(line: 425, column: 7, scope: !2988)
!3040 = !DILocation(line: 428, column: 15, scope: !3041)
!3041 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 428, column: 15)
!3042 = distinct !DILexicalBlock(scope: !2988, file: !241, line: 426, column: 9)
!3043 = !DILocation(line: 428, column: 15, scope: !3042)
!3044 = !DILocation(line: 430, column: 15, scope: !3045)
!3045 = distinct !DILexicalBlock(scope: !3041, file: !241, line: 429, column: 13)
!3046 = !DILocation(line: 430, column: 15, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !3048, file: !241, line: 430, column: 15)
!3048 = distinct !DILexicalBlock(scope: !3045, file: !241, line: 430, column: 15)
!3049 = !DILocation(line: 430, column: 15, scope: !3048)
!3050 = !DILocation(line: 430, column: 15, scope: !3051)
!3051 = distinct !DILexicalBlock(scope: !3048, file: !241, line: 430, column: 15)
!3052 = !DILocation(line: 430, column: 15, scope: !3053)
!3053 = distinct !DILexicalBlock(scope: !3051, file: !241, line: 430, column: 15)
!3054 = !DILocation(line: 430, column: 15, scope: !3055)
!3055 = distinct !DILexicalBlock(scope: !3056, file: !241, line: 430, column: 15)
!3056 = distinct !DILexicalBlock(scope: !3053, file: !241, line: 430, column: 15)
!3057 = !DILocation(line: 430, column: 15, scope: !3056)
!3058 = !DILocation(line: 430, column: 15, scope: !3059)
!3059 = distinct !DILexicalBlock(scope: !3060, file: !241, line: 430, column: 15)
!3060 = distinct !DILexicalBlock(scope: !3053, file: !241, line: 430, column: 15)
!3061 = !DILocation(line: 430, column: 15, scope: !3060)
!3062 = !DILocation(line: 430, column: 15, scope: !3063)
!3063 = distinct !DILexicalBlock(scope: !3064, file: !241, line: 430, column: 15)
!3064 = distinct !DILexicalBlock(scope: !3053, file: !241, line: 430, column: 15)
!3065 = !DILocation(line: 430, column: 15, scope: !3064)
!3066 = !DILocation(line: 430, column: 15, scope: !3067)
!3067 = distinct !DILexicalBlock(scope: !3068, file: !241, line: 430, column: 15)
!3068 = distinct !DILexicalBlock(scope: !3048, file: !241, line: 430, column: 15)
!3069 = !DILocation(line: 430, column: 15, scope: !3068)
!3070 = !DILocation(line: 437, column: 19, scope: !3071)
!3071 = distinct !DILexicalBlock(scope: !3045, file: !241, line: 437, column: 19)
!3072 = !DILocation(line: 437, column: 33, scope: !3071)
!3073 = !DILocation(line: 438, column: 19, scope: !3071)
!3074 = !DILocation(line: 438, column: 22, scope: !3071)
!3075 = !DILocation(line: 438, column: 24, scope: !3071)
!3076 = !DILocation(line: 438, column: 30, scope: !3071)
!3077 = !DILocation(line: 438, column: 28, scope: !3071)
!3078 = !DILocation(line: 438, column: 38, scope: !3071)
!3079 = !DILocation(line: 438, column: 48, scope: !3071)
!3080 = !DILocation(line: 438, column: 52, scope: !3071)
!3081 = !DILocation(line: 438, column: 54, scope: !3071)
!3082 = !DILocation(line: 438, column: 45, scope: !3071)
!3083 = !DILocation(line: 438, column: 59, scope: !3071)
!3084 = !DILocation(line: 438, column: 62, scope: !3071)
!3085 = !DILocation(line: 438, column: 66, scope: !3071)
!3086 = !DILocation(line: 438, column: 68, scope: !3071)
!3087 = !DILocation(line: 438, column: 73, scope: !3071)
!3088 = !DILocation(line: 437, column: 19, scope: !3045)
!3089 = !DILocation(line: 440, column: 19, scope: !3090)
!3090 = distinct !DILexicalBlock(scope: !3071, file: !241, line: 439, column: 17)
!3091 = !DILocation(line: 440, column: 19, scope: !3092)
!3092 = distinct !DILexicalBlock(scope: !3093, file: !241, line: 440, column: 19)
!3093 = distinct !DILexicalBlock(scope: !3090, file: !241, line: 440, column: 19)
!3094 = !DILocation(line: 440, column: 19, scope: !3093)
!3095 = !DILocation(line: 441, column: 19, scope: !3090)
!3096 = !DILocation(line: 441, column: 19, scope: !3097)
!3097 = distinct !DILexicalBlock(scope: !3098, file: !241, line: 441, column: 19)
!3098 = distinct !DILexicalBlock(scope: !3090, file: !241, line: 441, column: 19)
!3099 = !DILocation(line: 441, column: 19, scope: !3098)
!3100 = !DILocation(line: 442, column: 17, scope: !3090)
!3101 = !DILocation(line: 443, column: 17, scope: !3045)
!3102 = !DILocation(line: 448, column: 13, scope: !3045)
!3103 = !DILocation(line: 449, column: 20, scope: !3104)
!3104 = distinct !DILexicalBlock(scope: !3041, file: !241, line: 449, column: 20)
!3105 = !DILocation(line: 449, column: 26, scope: !3104)
!3106 = !DILocation(line: 449, column: 20, scope: !3041)
!3107 = !DILocation(line: 450, column: 13, scope: !3104)
!3108 = !DILocation(line: 451, column: 11, scope: !3042)
!3109 = !DILocation(line: 454, column: 19, scope: !3042)
!3110 = !DILocation(line: 454, column: 11, scope: !3042)
!3111 = !DILocation(line: 457, column: 19, scope: !3112)
!3112 = distinct !DILexicalBlock(scope: !3113, file: !241, line: 457, column: 19)
!3113 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 455, column: 13)
!3114 = !DILocation(line: 457, column: 19, scope: !3113)
!3115 = !DILocation(line: 458, column: 17, scope: !3112)
!3116 = !DILocation(line: 459, column: 15, scope: !3113)
!3117 = !DILocation(line: 462, column: 20, scope: !3118)
!3118 = distinct !DILexicalBlock(scope: !3113, file: !241, line: 462, column: 19)
!3119 = !DILocation(line: 462, column: 26, scope: !3118)
!3120 = !DILocation(line: 463, column: 19, scope: !3118)
!3121 = !DILocation(line: 463, column: 22, scope: !3118)
!3122 = !DILocation(line: 463, column: 24, scope: !3118)
!3123 = !DILocation(line: 463, column: 30, scope: !3118)
!3124 = !DILocation(line: 463, column: 28, scope: !3118)
!3125 = !DILocation(line: 463, column: 38, scope: !3118)
!3126 = !DILocation(line: 463, column: 41, scope: !3118)
!3127 = !DILocation(line: 463, column: 45, scope: !3118)
!3128 = !DILocation(line: 463, column: 47, scope: !3118)
!3129 = !DILocation(line: 463, column: 52, scope: !3118)
!3130 = !DILocation(line: 462, column: 19, scope: !3113)
!3131 = !DILocation(line: 464, column: 25, scope: !3118)
!3132 = !DILocation(line: 464, column: 29, scope: !3118)
!3133 = !DILocation(line: 464, column: 31, scope: !3118)
!3134 = !DILocation(line: 464, column: 17, scope: !3118)
!3135 = !DILocation(line: 471, column: 25, scope: !3136)
!3136 = distinct !DILexicalBlock(scope: !3137, file: !241, line: 471, column: 25)
!3137 = distinct !DILexicalBlock(scope: !3118, file: !241, line: 465, column: 19)
!3138 = !DILocation(line: 471, column: 25, scope: !3137)
!3139 = !DILocation(line: 472, column: 23, scope: !3136)
!3140 = !DILocation(line: 473, column: 25, scope: !3137)
!3141 = !DILocation(line: 473, column: 29, scope: !3137)
!3142 = !DILocation(line: 473, column: 31, scope: !3137)
!3143 = !DILocation(line: 473, column: 23, scope: !3137)
!3144 = !DILocation(line: 474, column: 23, scope: !3137)
!3145 = !DILocation(line: 475, column: 21, scope: !3137)
!3146 = !DILocation(line: 475, column: 21, scope: !3147)
!3147 = distinct !DILexicalBlock(scope: !3148, file: !241, line: 475, column: 21)
!3148 = distinct !DILexicalBlock(scope: !3137, file: !241, line: 475, column: 21)
!3149 = !DILocation(line: 475, column: 21, scope: !3148)
!3150 = !DILocation(line: 476, column: 21, scope: !3137)
!3151 = !DILocation(line: 476, column: 21, scope: !3152)
!3152 = distinct !DILexicalBlock(scope: !3153, file: !241, line: 476, column: 21)
!3153 = distinct !DILexicalBlock(scope: !3137, file: !241, line: 476, column: 21)
!3154 = !DILocation(line: 476, column: 21, scope: !3153)
!3155 = !DILocation(line: 477, column: 21, scope: !3137)
!3156 = !DILocation(line: 477, column: 21, scope: !3157)
!3157 = distinct !DILexicalBlock(scope: !3158, file: !241, line: 477, column: 21)
!3158 = distinct !DILexicalBlock(scope: !3137, file: !241, line: 477, column: 21)
!3159 = !DILocation(line: 477, column: 21, scope: !3158)
!3160 = !DILocation(line: 478, column: 21, scope: !3137)
!3161 = !DILocation(line: 478, column: 21, scope: !3162)
!3162 = distinct !DILexicalBlock(scope: !3163, file: !241, line: 478, column: 21)
!3163 = distinct !DILexicalBlock(scope: !3137, file: !241, line: 478, column: 21)
!3164 = !DILocation(line: 478, column: 21, scope: !3163)
!3165 = !DILocation(line: 479, column: 21, scope: !3137)
!3166 = !DILocation(line: 482, column: 21, scope: !3137)
!3167 = !DILocation(line: 483, column: 19, scope: !3137)
!3168 = !DILocation(line: 484, column: 15, scope: !3113)
!3169 = !DILocation(line: 487, column: 15, scope: !3113)
!3170 = !DILocation(line: 489, column: 11, scope: !3042)
!3171 = !DILocation(line: 491, column: 24, scope: !3042)
!3172 = !DILocation(line: 491, column: 31, scope: !3042)
!3173 = !DILocation(line: 492, column: 24, scope: !3042)
!3174 = !DILocation(line: 492, column: 31, scope: !3042)
!3175 = !DILocation(line: 493, column: 24, scope: !3042)
!3176 = !DILocation(line: 493, column: 31, scope: !3042)
!3177 = !DILocation(line: 494, column: 24, scope: !3042)
!3178 = !DILocation(line: 494, column: 31, scope: !3042)
!3179 = !DILocation(line: 495, column: 24, scope: !3042)
!3180 = !DILocation(line: 495, column: 31, scope: !3042)
!3181 = !DILocation(line: 496, column: 24, scope: !3042)
!3182 = !DILocation(line: 496, column: 31, scope: !3042)
!3183 = !DILocation(line: 497, column: 24, scope: !3042)
!3184 = !DILocation(line: 497, column: 31, scope: !3042)
!3185 = !DILocation(line: 498, column: 26, scope: !3042)
!3186 = !DILocation(line: 498, column: 24, scope: !3042)
!3187 = !DILocation(line: 500, column: 15, scope: !3188)
!3188 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 500, column: 15)
!3189 = !DILocation(line: 500, column: 29, scope: !3188)
!3190 = !DILocation(line: 500, column: 15, scope: !3042)
!3191 = !DILocation(line: 502, column: 19, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3193, file: !241, line: 502, column: 19)
!3193 = distinct !DILexicalBlock(scope: !3188, file: !241, line: 501, column: 13)
!3194 = !DILocation(line: 502, column: 19, scope: !3193)
!3195 = !DILocation(line: 503, column: 17, scope: !3192)
!3196 = !DILocation(line: 504, column: 15, scope: !3193)
!3197 = !DILocation(line: 509, column: 15, scope: !3198)
!3198 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 509, column: 15)
!3199 = !DILocation(line: 509, column: 33, scope: !3198)
!3200 = !DILocation(line: 509, column: 36, scope: !3198)
!3201 = !DILocation(line: 509, column: 55, scope: !3198)
!3202 = !DILocation(line: 509, column: 58, scope: !3198)
!3203 = !DILocation(line: 509, column: 15, scope: !3042)
!3204 = !DILocation(line: 510, column: 13, scope: !3198)
!3205 = !DILabel(scope: !3042, name: "c_and_shell_escape", file: !241, line: 512)
!3206 = !DILocation(line: 512, column: 9, scope: !3042)
!3207 = !DILocation(line: 513, column: 15, scope: !3208)
!3208 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 513, column: 15)
!3209 = !DILocation(line: 513, column: 29, scope: !3208)
!3210 = !DILocation(line: 514, column: 15, scope: !3208)
!3211 = !DILocation(line: 514, column: 18, scope: !3208)
!3212 = !DILocation(line: 513, column: 15, scope: !3042)
!3213 = !DILocation(line: 515, column: 13, scope: !3208)
!3214 = !DILabel(scope: !3042, name: "c_escape", file: !241, line: 517)
!3215 = !DILocation(line: 517, column: 9, scope: !3042)
!3216 = !DILocation(line: 518, column: 15, scope: !3217)
!3217 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 518, column: 15)
!3218 = !DILocation(line: 518, column: 15, scope: !3042)
!3219 = !DILocation(line: 520, column: 19, scope: !3220)
!3220 = distinct !DILexicalBlock(scope: !3217, file: !241, line: 519, column: 13)
!3221 = !DILocation(line: 520, column: 17, scope: !3220)
!3222 = !DILocation(line: 521, column: 15, scope: !3220)
!3223 = !DILocation(line: 523, column: 11, scope: !3042)
!3224 = !DILocation(line: 526, column: 18, scope: !3225)
!3225 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 526, column: 15)
!3226 = !DILocation(line: 526, column: 26, scope: !3225)
!3227 = !DILocation(line: 526, column: 15, scope: !3042)
!3228 = !DILocation(line: 526, column: 40, scope: !3225)
!3229 = !DILocation(line: 526, column: 47, scope: !3225)
!3230 = !DILocation(line: 526, column: 57, scope: !3225)
!3231 = !DILocation(line: 526, column: 65, scope: !3225)
!3232 = !DILocation(line: 527, column: 13, scope: !3225)
!3233 = !DILocation(line: 528, column: 11, scope: !3042)
!3234 = !DILocation(line: 530, column: 15, scope: !3235)
!3235 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 530, column: 15)
!3236 = !DILocation(line: 530, column: 17, scope: !3235)
!3237 = !DILocation(line: 530, column: 15, scope: !3042)
!3238 = !DILocation(line: 531, column: 13, scope: !3235)
!3239 = !DILocation(line: 532, column: 11, scope: !3042)
!3240 = !DILocation(line: 534, column: 36, scope: !3042)
!3241 = !DILocation(line: 535, column: 11, scope: !3042)
!3242 = !DILocation(line: 548, column: 15, scope: !3243)
!3243 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 548, column: 15)
!3244 = !DILocation(line: 548, column: 29, scope: !3243)
!3245 = !DILocation(line: 549, column: 15, scope: !3243)
!3246 = !DILocation(line: 549, column: 18, scope: !3243)
!3247 = !DILocation(line: 548, column: 15, scope: !3042)
!3248 = !DILocation(line: 550, column: 13, scope: !3243)
!3249 = !DILocation(line: 551, column: 11, scope: !3042)
!3250 = !DILocation(line: 554, column: 36, scope: !3042)
!3251 = !DILocation(line: 555, column: 36, scope: !3042)
!3252 = !DILocation(line: 556, column: 15, scope: !3253)
!3253 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 556, column: 15)
!3254 = !DILocation(line: 556, column: 29, scope: !3253)
!3255 = !DILocation(line: 556, column: 15, scope: !3042)
!3256 = !DILocation(line: 558, column: 19, scope: !3257)
!3257 = distinct !DILexicalBlock(scope: !3258, file: !241, line: 558, column: 19)
!3258 = distinct !DILexicalBlock(scope: !3253, file: !241, line: 557, column: 13)
!3259 = !DILocation(line: 558, column: 19, scope: !3258)
!3260 = !DILocation(line: 559, column: 17, scope: !3257)
!3261 = !DILocation(line: 561, column: 19, scope: !3262)
!3262 = distinct !DILexicalBlock(scope: !3258, file: !241, line: 561, column: 19)
!3263 = !DILocation(line: 561, column: 30, scope: !3262)
!3264 = !DILocation(line: 561, column: 35, scope: !3262)
!3265 = !DILocation(line: 561, column: 19, scope: !3258)
!3266 = !DILocation(line: 566, column: 37, scope: !3267)
!3267 = distinct !DILexicalBlock(scope: !3262, file: !241, line: 562, column: 17)
!3268 = !DILocation(line: 566, column: 35, scope: !3267)
!3269 = !DILocation(line: 567, column: 30, scope: !3267)
!3270 = !DILocation(line: 568, column: 17, scope: !3267)
!3271 = !DILocation(line: 570, column: 15, scope: !3258)
!3272 = !DILocation(line: 570, column: 15, scope: !3273)
!3273 = distinct !DILexicalBlock(scope: !3274, file: !241, line: 570, column: 15)
!3274 = distinct !DILexicalBlock(scope: !3258, file: !241, line: 570, column: 15)
!3275 = !DILocation(line: 570, column: 15, scope: !3274)
!3276 = !DILocation(line: 571, column: 15, scope: !3258)
!3277 = !DILocation(line: 571, column: 15, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3279, file: !241, line: 571, column: 15)
!3279 = distinct !DILexicalBlock(scope: !3258, file: !241, line: 571, column: 15)
!3280 = !DILocation(line: 571, column: 15, scope: !3279)
!3281 = !DILocation(line: 572, column: 15, scope: !3258)
!3282 = !DILocation(line: 572, column: 15, scope: !3283)
!3283 = distinct !DILexicalBlock(scope: !3284, file: !241, line: 572, column: 15)
!3284 = distinct !DILexicalBlock(scope: !3258, file: !241, line: 572, column: 15)
!3285 = !DILocation(line: 572, column: 15, scope: !3284)
!3286 = !DILocation(line: 573, column: 40, scope: !3258)
!3287 = !DILocation(line: 574, column: 13, scope: !3258)
!3288 = !DILocation(line: 575, column: 11, scope: !3042)
!3289 = !DILocation(line: 599, column: 36, scope: !3042)
!3290 = !DILocation(line: 600, column: 11, scope: !3042)
!3291 = !DILocalVariable(name: "m", scope: !3292, file: !241, line: 610, type: !110)
!3292 = distinct !DILexicalBlock(scope: !3042, file: !241, line: 608, column: 11)
!3293 = !DILocation(line: 610, column: 20, scope: !3292)
!3294 = !DILocalVariable(name: "printable", scope: !3292, file: !241, line: 612, type: !18)
!3295 = !DILocation(line: 612, column: 18, scope: !3292)
!3296 = !DILocation(line: 614, column: 17, scope: !3297)
!3297 = distinct !DILexicalBlock(scope: !3292, file: !241, line: 614, column: 17)
!3298 = !DILocation(line: 614, column: 17, scope: !3292)
!3299 = !DILocation(line: 616, column: 19, scope: !3300)
!3300 = distinct !DILexicalBlock(scope: !3297, file: !241, line: 615, column: 15)
!3301 = !DILocation(line: 617, column: 29, scope: !3300)
!3302 = !DILocation(line: 617, column: 41, scope: !3300)
!3303 = !DILocation(line: 617, column: 27, scope: !3300)
!3304 = !DILocation(line: 618, column: 15, scope: !3300)
!3305 = !DILocalVariable(name: "mbstate", scope: !3306, file: !241, line: 621, type: !3307)
!3306 = distinct !DILexicalBlock(scope: !3297, file: !241, line: 620, column: 15)
!3307 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !3308, line: 6, baseType: !3309)
!3308 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!3309 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !3310, line: 21, baseType: !3311)
!3310 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!3311 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3310, line: 13, size: 64, elements: !3312)
!3312 = !{!3313, !3314}
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !3311, file: !3310, line: 15, baseType: !53, size: 32)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !3311, file: !3310, line: 20, baseType: !3315, size: 32, offset: 32)
!3315 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3311, file: !3310, line: 16, size: 32, elements: !3316)
!3316 = !{!3317, !3318}
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !3315, file: !3310, line: 18, baseType: !180, size: 32)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !3315, file: !3310, line: 19, baseType: !82, size: 32)
!3319 = !DILocation(line: 621, column: 27, scope: !3306)
!3320 = !DILocation(line: 622, column: 17, scope: !3306)
!3321 = !DILocation(line: 624, column: 19, scope: !3306)
!3322 = !DILocation(line: 625, column: 27, scope: !3306)
!3323 = !DILocation(line: 626, column: 21, scope: !3324)
!3324 = distinct !DILexicalBlock(scope: !3306, file: !241, line: 626, column: 21)
!3325 = !DILocation(line: 626, column: 29, scope: !3324)
!3326 = !DILocation(line: 626, column: 21, scope: !3306)
!3327 = !DILocation(line: 627, column: 37, scope: !3324)
!3328 = !DILocation(line: 627, column: 29, scope: !3324)
!3329 = !DILocation(line: 627, column: 27, scope: !3324)
!3330 = !DILocation(line: 627, column: 19, scope: !3324)
!3331 = !DILocation(line: 629, column: 17, scope: !3306)
!3332 = !DILocalVariable(name: "w", scope: !3333, file: !241, line: 631, type: !3334)
!3333 = distinct !DILexicalBlock(scope: !3306, file: !241, line: 630, column: 19)
!3334 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !111, line: 74, baseType: !53)
!3335 = !DILocation(line: 631, column: 29, scope: !3333)
!3336 = !DILocalVariable(name: "bytes", scope: !3333, file: !241, line: 632, type: !110)
!3337 = !DILocation(line: 632, column: 28, scope: !3333)
!3338 = !DILocation(line: 632, column: 50, scope: !3333)
!3339 = !DILocation(line: 632, column: 54, scope: !3333)
!3340 = !DILocation(line: 632, column: 58, scope: !3333)
!3341 = !DILocation(line: 632, column: 56, scope: !3333)
!3342 = !DILocation(line: 633, column: 45, scope: !3333)
!3343 = !DILocation(line: 633, column: 56, scope: !3333)
!3344 = !DILocation(line: 633, column: 60, scope: !3333)
!3345 = !DILocation(line: 633, column: 58, scope: !3333)
!3346 = !DILocation(line: 633, column: 53, scope: !3333)
!3347 = !DILocation(line: 632, column: 36, scope: !3333)
!3348 = !DILocation(line: 634, column: 25, scope: !3349)
!3349 = distinct !DILexicalBlock(scope: !3333, file: !241, line: 634, column: 25)
!3350 = !DILocation(line: 634, column: 31, scope: !3349)
!3351 = !DILocation(line: 634, column: 25, scope: !3333)
!3352 = !DILocation(line: 635, column: 23, scope: !3349)
!3353 = !DILocation(line: 636, column: 30, scope: !3354)
!3354 = distinct !DILexicalBlock(scope: !3349, file: !241, line: 636, column: 30)
!3355 = !DILocation(line: 636, column: 36, scope: !3354)
!3356 = !DILocation(line: 636, column: 30, scope: !3349)
!3357 = !DILocation(line: 638, column: 35, scope: !3358)
!3358 = distinct !DILexicalBlock(scope: !3354, file: !241, line: 637, column: 23)
!3359 = !DILocation(line: 639, column: 25, scope: !3358)
!3360 = !DILocation(line: 641, column: 30, scope: !3361)
!3361 = distinct !DILexicalBlock(scope: !3354, file: !241, line: 641, column: 30)
!3362 = !DILocation(line: 641, column: 36, scope: !3361)
!3363 = !DILocation(line: 641, column: 30, scope: !3354)
!3364 = !DILocation(line: 643, column: 35, scope: !3365)
!3365 = distinct !DILexicalBlock(scope: !3361, file: !241, line: 642, column: 23)
!3366 = !DILocation(line: 644, column: 25, scope: !3365)
!3367 = !DILocation(line: 644, column: 32, scope: !3365)
!3368 = !DILocation(line: 644, column: 36, scope: !3365)
!3369 = !DILocation(line: 644, column: 34, scope: !3365)
!3370 = !DILocation(line: 644, column: 40, scope: !3365)
!3371 = !DILocation(line: 644, column: 38, scope: !3365)
!3372 = !DILocation(line: 644, column: 48, scope: !3365)
!3373 = !DILocation(line: 644, column: 51, scope: !3365)
!3374 = !DILocation(line: 644, column: 55, scope: !3365)
!3375 = !DILocation(line: 644, column: 59, scope: !3365)
!3376 = !DILocation(line: 644, column: 57, scope: !3365)
!3377 = !DILocation(line: 0, scope: !3365)
!3378 = !DILocation(line: 645, column: 28, scope: !3365)
!3379 = distinct !{!3379, !3366, !3378}
!3380 = !DILocation(line: 646, column: 25, scope: !3365)
!3381 = !DILocation(line: 654, column: 44, scope: !3382)
!3382 = distinct !DILexicalBlock(scope: !3383, file: !241, line: 654, column: 29)
!3383 = distinct !DILexicalBlock(scope: !3361, file: !241, line: 649, column: 23)
!3384 = !DILocation(line: 655, column: 29, scope: !3382)
!3385 = !DILocation(line: 655, column: 32, scope: !3382)
!3386 = !DILocation(line: 655, column: 46, scope: !3382)
!3387 = !DILocation(line: 654, column: 29, scope: !3383)
!3388 = !DILocalVariable(name: "j", scope: !3389, file: !241, line: 657, type: !110)
!3389 = distinct !DILexicalBlock(scope: !3382, file: !241, line: 656, column: 27)
!3390 = !DILocation(line: 657, column: 36, scope: !3389)
!3391 = !DILocation(line: 658, column: 36, scope: !3392)
!3392 = distinct !DILexicalBlock(scope: !3389, file: !241, line: 658, column: 29)
!3393 = !DILocation(line: 658, column: 34, scope: !3392)
!3394 = !DILocation(line: 658, column: 41, scope: !3395)
!3395 = distinct !DILexicalBlock(scope: !3392, file: !241, line: 658, column: 29)
!3396 = !DILocation(line: 658, column: 45, scope: !3395)
!3397 = !DILocation(line: 658, column: 43, scope: !3395)
!3398 = !DILocation(line: 658, column: 29, scope: !3392)
!3399 = !DILocation(line: 659, column: 39, scope: !3395)
!3400 = !DILocation(line: 659, column: 43, scope: !3395)
!3401 = !DILocation(line: 659, column: 47, scope: !3395)
!3402 = !DILocation(line: 659, column: 45, scope: !3395)
!3403 = !DILocation(line: 659, column: 51, scope: !3395)
!3404 = !DILocation(line: 659, column: 49, scope: !3395)
!3405 = !DILocation(line: 659, column: 31, scope: !3395)
!3406 = !DILocation(line: 663, column: 35, scope: !3407)
!3407 = distinct !DILexicalBlock(scope: !3395, file: !241, line: 660, column: 33)
!3408 = !DILocation(line: 666, column: 35, scope: !3407)
!3409 = !DILocation(line: 667, column: 33, scope: !3407)
!3410 = !DILocation(line: 658, column: 53, scope: !3395)
!3411 = !DILocation(line: 658, column: 29, scope: !3395)
!3412 = distinct !{!3412, !3398, !3413}
!3413 = !DILocation(line: 667, column: 33, scope: !3392)
!3414 = !DILocation(line: 668, column: 27, scope: !3389)
!3415 = !DILocation(line: 670, column: 41, scope: !3416)
!3416 = distinct !DILexicalBlock(scope: !3383, file: !241, line: 670, column: 29)
!3417 = !DILocation(line: 670, column: 31, scope: !3416)
!3418 = !DILocation(line: 670, column: 29, scope: !3383)
!3419 = !DILocation(line: 671, column: 37, scope: !3416)
!3420 = !DILocation(line: 671, column: 27, scope: !3416)
!3421 = !DILocation(line: 672, column: 30, scope: !3383)
!3422 = !DILocation(line: 672, column: 27, scope: !3383)
!3423 = !DILocation(line: 674, column: 19, scope: !3333)
!3424 = !DILocation(line: 675, column: 26, scope: !3306)
!3425 = !DILocation(line: 675, column: 24, scope: !3306)
!3426 = distinct !{!3426, !3331, !3427}
!3427 = !DILocation(line: 675, column: 44, scope: !3306)
!3428 = !DILocation(line: 678, column: 40, scope: !3292)
!3429 = !DILocation(line: 678, column: 38, scope: !3292)
!3430 = !DILocation(line: 680, column: 21, scope: !3431)
!3431 = distinct !DILexicalBlock(scope: !3292, file: !241, line: 680, column: 17)
!3432 = !DILocation(line: 680, column: 19, scope: !3431)
!3433 = !DILocation(line: 680, column: 23, scope: !3431)
!3434 = !DILocation(line: 680, column: 27, scope: !3431)
!3435 = !DILocation(line: 680, column: 45, scope: !3431)
!3436 = !DILocation(line: 680, column: 50, scope: !3431)
!3437 = !DILocation(line: 680, column: 17, scope: !3292)
!3438 = !DILocalVariable(name: "ilim", scope: !3439, file: !241, line: 684, type: !110)
!3439 = distinct !DILexicalBlock(scope: !3431, file: !241, line: 681, column: 15)
!3440 = !DILocation(line: 684, column: 24, scope: !3439)
!3441 = !DILocation(line: 684, column: 31, scope: !3439)
!3442 = !DILocation(line: 684, column: 35, scope: !3439)
!3443 = !DILocation(line: 684, column: 33, scope: !3439)
!3444 = !DILocation(line: 686, column: 17, scope: !3439)
!3445 = !DILocation(line: 688, column: 25, scope: !3446)
!3446 = distinct !DILexicalBlock(scope: !3447, file: !241, line: 688, column: 25)
!3447 = distinct !DILexicalBlock(scope: !3448, file: !241, line: 687, column: 19)
!3448 = distinct !DILexicalBlock(scope: !3449, file: !241, line: 686, column: 17)
!3449 = distinct !DILexicalBlock(scope: !3439, file: !241, line: 686, column: 17)
!3450 = !DILocation(line: 688, column: 43, scope: !3446)
!3451 = !DILocation(line: 688, column: 48, scope: !3446)
!3452 = !DILocation(line: 688, column: 25, scope: !3447)
!3453 = !DILocation(line: 690, column: 25, scope: !3454)
!3454 = distinct !DILexicalBlock(scope: !3446, file: !241, line: 689, column: 23)
!3455 = !DILocation(line: 690, column: 25, scope: !3456)
!3456 = distinct !DILexicalBlock(scope: !3457, file: !241, line: 690, column: 25)
!3457 = distinct !DILexicalBlock(scope: !3454, file: !241, line: 690, column: 25)
!3458 = !DILocation(line: 690, column: 25, scope: !3457)
!3459 = !DILocation(line: 690, column: 25, scope: !3460)
!3460 = distinct !DILexicalBlock(scope: !3457, file: !241, line: 690, column: 25)
!3461 = !DILocation(line: 690, column: 25, scope: !3462)
!3462 = distinct !DILexicalBlock(scope: !3460, file: !241, line: 690, column: 25)
!3463 = !DILocation(line: 690, column: 25, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3465, file: !241, line: 690, column: 25)
!3465 = distinct !DILexicalBlock(scope: !3462, file: !241, line: 690, column: 25)
!3466 = !DILocation(line: 690, column: 25, scope: !3465)
!3467 = !DILocation(line: 690, column: 25, scope: !3468)
!3468 = distinct !DILexicalBlock(scope: !3469, file: !241, line: 690, column: 25)
!3469 = distinct !DILexicalBlock(scope: !3462, file: !241, line: 690, column: 25)
!3470 = !DILocation(line: 690, column: 25, scope: !3469)
!3471 = !DILocation(line: 690, column: 25, scope: !3472)
!3472 = distinct !DILexicalBlock(scope: !3473, file: !241, line: 690, column: 25)
!3473 = distinct !DILexicalBlock(scope: !3462, file: !241, line: 690, column: 25)
!3474 = !DILocation(line: 690, column: 25, scope: !3473)
!3475 = !DILocation(line: 690, column: 25, scope: !3476)
!3476 = distinct !DILexicalBlock(scope: !3477, file: !241, line: 690, column: 25)
!3477 = distinct !DILexicalBlock(scope: !3457, file: !241, line: 690, column: 25)
!3478 = !DILocation(line: 690, column: 25, scope: !3477)
!3479 = !DILocation(line: 691, column: 25, scope: !3454)
!3480 = !DILocation(line: 691, column: 25, scope: !3481)
!3481 = distinct !DILexicalBlock(scope: !3482, file: !241, line: 691, column: 25)
!3482 = distinct !DILexicalBlock(scope: !3454, file: !241, line: 691, column: 25)
!3483 = !DILocation(line: 691, column: 25, scope: !3482)
!3484 = !DILocation(line: 692, column: 25, scope: !3454)
!3485 = !DILocation(line: 692, column: 25, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3487, file: !241, line: 692, column: 25)
!3487 = distinct !DILexicalBlock(scope: !3454, file: !241, line: 692, column: 25)
!3488 = !DILocation(line: 692, column: 25, scope: !3487)
!3489 = !DILocation(line: 693, column: 36, scope: !3454)
!3490 = !DILocation(line: 693, column: 38, scope: !3454)
!3491 = !DILocation(line: 693, column: 33, scope: !3454)
!3492 = !DILocation(line: 693, column: 29, scope: !3454)
!3493 = !DILocation(line: 693, column: 27, scope: !3454)
!3494 = !DILocation(line: 694, column: 23, scope: !3454)
!3495 = !DILocation(line: 695, column: 30, scope: !3496)
!3496 = distinct !DILexicalBlock(scope: !3446, file: !241, line: 695, column: 30)
!3497 = !DILocation(line: 695, column: 30, scope: !3446)
!3498 = !DILocation(line: 697, column: 25, scope: !3499)
!3499 = distinct !DILexicalBlock(scope: !3496, file: !241, line: 696, column: 23)
!3500 = !DILocation(line: 697, column: 25, scope: !3501)
!3501 = distinct !DILexicalBlock(scope: !3502, file: !241, line: 697, column: 25)
!3502 = distinct !DILexicalBlock(scope: !3499, file: !241, line: 697, column: 25)
!3503 = !DILocation(line: 697, column: 25, scope: !3502)
!3504 = !DILocation(line: 698, column: 40, scope: !3499)
!3505 = !DILocation(line: 699, column: 23, scope: !3499)
!3506 = !DILocation(line: 700, column: 25, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3447, file: !241, line: 700, column: 25)
!3508 = !DILocation(line: 700, column: 33, scope: !3507)
!3509 = !DILocation(line: 700, column: 35, scope: !3507)
!3510 = !DILocation(line: 700, column: 30, scope: !3507)
!3511 = !DILocation(line: 700, column: 25, scope: !3447)
!3512 = !DILocation(line: 701, column: 23, scope: !3507)
!3513 = !DILocation(line: 702, column: 21, scope: !3447)
!3514 = !DILocation(line: 702, column: 21, scope: !3515)
!3515 = distinct !DILexicalBlock(scope: !3516, file: !241, line: 702, column: 21)
!3516 = distinct !DILexicalBlock(scope: !3447, file: !241, line: 702, column: 21)
!3517 = !DILocation(line: 702, column: 21, scope: !3516)
!3518 = !DILocation(line: 702, column: 21, scope: !3519)
!3519 = distinct !DILexicalBlock(scope: !3515, file: !241, line: 702, column: 21)
!3520 = !DILocation(line: 702, column: 21, scope: !3521)
!3521 = distinct !DILexicalBlock(scope: !3522, file: !241, line: 702, column: 21)
!3522 = distinct !DILexicalBlock(scope: !3519, file: !241, line: 702, column: 21)
!3523 = !DILocation(line: 702, column: 21, scope: !3522)
!3524 = !DILocation(line: 702, column: 21, scope: !3525)
!3525 = distinct !DILexicalBlock(scope: !3526, file: !241, line: 702, column: 21)
!3526 = distinct !DILexicalBlock(scope: !3519, file: !241, line: 702, column: 21)
!3527 = !DILocation(line: 702, column: 21, scope: !3526)
!3528 = !DILocation(line: 703, column: 21, scope: !3447)
!3529 = !DILocation(line: 703, column: 21, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !3531, file: !241, line: 703, column: 21)
!3531 = distinct !DILexicalBlock(scope: !3447, file: !241, line: 703, column: 21)
!3532 = !DILocation(line: 703, column: 21, scope: !3531)
!3533 = !DILocation(line: 704, column: 25, scope: !3447)
!3534 = !DILocation(line: 704, column: 29, scope: !3447)
!3535 = !DILocation(line: 704, column: 23, scope: !3447)
!3536 = !DILocation(line: 686, column: 17, scope: !3448)
!3537 = distinct !{!3537, !3538, !3539}
!3538 = !DILocation(line: 686, column: 17, scope: !3449)
!3539 = !DILocation(line: 705, column: 19, scope: !3449)
!3540 = !DILocation(line: 707, column: 17, scope: !3439)
!3541 = !DILocation(line: 710, column: 9, scope: !3042)
!3542 = !DILocation(line: 712, column: 16, scope: !3543)
!3543 = distinct !DILexicalBlock(scope: !2988, file: !241, line: 712, column: 11)
!3544 = !DILocation(line: 712, column: 34, scope: !3543)
!3545 = !DILocation(line: 712, column: 37, scope: !3543)
!3546 = !DILocation(line: 712, column: 51, scope: !3543)
!3547 = !DILocation(line: 713, column: 15, scope: !3543)
!3548 = !DILocation(line: 713, column: 18, scope: !3543)
!3549 = !DILocation(line: 714, column: 14, scope: !3543)
!3550 = !DILocation(line: 714, column: 17, scope: !3543)
!3551 = !DILocation(line: 715, column: 14, scope: !3543)
!3552 = !DILocation(line: 715, column: 17, scope: !3543)
!3553 = !DILocation(line: 715, column: 33, scope: !3543)
!3554 = !DILocation(line: 715, column: 35, scope: !3543)
!3555 = !DILocation(line: 715, column: 51, scope: !3543)
!3556 = !DILocation(line: 715, column: 53, scope: !3543)
!3557 = !DILocation(line: 715, column: 47, scope: !3543)
!3558 = !DILocation(line: 715, column: 65, scope: !3543)
!3559 = !DILocation(line: 716, column: 11, scope: !3543)
!3560 = !DILocation(line: 716, column: 15, scope: !3543)
!3561 = !DILocation(line: 712, column: 11, scope: !2988)
!3562 = !DILocation(line: 717, column: 9, scope: !3543)
!3563 = !DILabel(scope: !2988, name: "store_escape", file: !241, line: 719)
!3564 = !DILocation(line: 719, column: 5, scope: !2988)
!3565 = !DILocation(line: 720, column: 7, scope: !2988)
!3566 = !DILocation(line: 720, column: 7, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3568, file: !241, line: 720, column: 7)
!3568 = distinct !DILexicalBlock(scope: !2988, file: !241, line: 720, column: 7)
!3569 = !DILocation(line: 720, column: 7, scope: !3568)
!3570 = !DILocation(line: 720, column: 7, scope: !3571)
!3571 = distinct !DILexicalBlock(scope: !3568, file: !241, line: 720, column: 7)
!3572 = !DILocation(line: 720, column: 7, scope: !3573)
!3573 = distinct !DILexicalBlock(scope: !3571, file: !241, line: 720, column: 7)
!3574 = !DILocation(line: 720, column: 7, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3576, file: !241, line: 720, column: 7)
!3576 = distinct !DILexicalBlock(scope: !3573, file: !241, line: 720, column: 7)
!3577 = !DILocation(line: 720, column: 7, scope: !3576)
!3578 = !DILocation(line: 720, column: 7, scope: !3579)
!3579 = distinct !DILexicalBlock(scope: !3580, file: !241, line: 720, column: 7)
!3580 = distinct !DILexicalBlock(scope: !3573, file: !241, line: 720, column: 7)
!3581 = !DILocation(line: 720, column: 7, scope: !3580)
!3582 = !DILocation(line: 720, column: 7, scope: !3583)
!3583 = distinct !DILexicalBlock(scope: !3584, file: !241, line: 720, column: 7)
!3584 = distinct !DILexicalBlock(scope: !3573, file: !241, line: 720, column: 7)
!3585 = !DILocation(line: 720, column: 7, scope: !3584)
!3586 = !DILocation(line: 720, column: 7, scope: !3587)
!3587 = distinct !DILexicalBlock(scope: !3588, file: !241, line: 720, column: 7)
!3588 = distinct !DILexicalBlock(scope: !3568, file: !241, line: 720, column: 7)
!3589 = !DILocation(line: 720, column: 7, scope: !3588)
!3590 = !DILabel(scope: !2988, name: "store_c", file: !241, line: 722)
!3591 = !DILocation(line: 722, column: 5, scope: !2988)
!3592 = !DILocation(line: 723, column: 7, scope: !2988)
!3593 = !DILocation(line: 723, column: 7, scope: !3594)
!3594 = distinct !DILexicalBlock(scope: !3595, file: !241, line: 723, column: 7)
!3595 = distinct !DILexicalBlock(scope: !2988, file: !241, line: 723, column: 7)
!3596 = !DILocation(line: 723, column: 7, scope: !3595)
!3597 = !DILocation(line: 723, column: 7, scope: !3598)
!3598 = distinct !DILexicalBlock(scope: !3594, file: !241, line: 723, column: 7)
!3599 = !DILocation(line: 723, column: 7, scope: !3600)
!3600 = distinct !DILexicalBlock(scope: !3601, file: !241, line: 723, column: 7)
!3601 = distinct !DILexicalBlock(scope: !3598, file: !241, line: 723, column: 7)
!3602 = !DILocation(line: 723, column: 7, scope: !3601)
!3603 = !DILocation(line: 723, column: 7, scope: !3604)
!3604 = distinct !DILexicalBlock(scope: !3605, file: !241, line: 723, column: 7)
!3605 = distinct !DILexicalBlock(scope: !3598, file: !241, line: 723, column: 7)
!3606 = !DILocation(line: 723, column: 7, scope: !3605)
!3607 = !DILocation(line: 724, column: 7, scope: !2988)
!3608 = !DILocation(line: 724, column: 7, scope: !3609)
!3609 = distinct !DILexicalBlock(scope: !3610, file: !241, line: 724, column: 7)
!3610 = distinct !DILexicalBlock(scope: !2988, file: !241, line: 724, column: 7)
!3611 = !DILocation(line: 724, column: 7, scope: !3610)
!3612 = !DILocation(line: 726, column: 13, scope: !3613)
!3613 = distinct !DILexicalBlock(scope: !2988, file: !241, line: 726, column: 11)
!3614 = !DILocation(line: 726, column: 11, scope: !2988)
!3615 = !DILocation(line: 727, column: 38, scope: !3613)
!3616 = !DILocation(line: 727, column: 9, scope: !3613)
!3617 = !DILocation(line: 728, column: 5, scope: !2988)
!3618 = !DILocation(line: 400, column: 75, scope: !2977)
!3619 = !DILocation(line: 400, column: 3, scope: !2977)
!3620 = distinct !{!3620, !2986, !3621}
!3621 = !DILocation(line: 728, column: 5, scope: !2974)
!3622 = !DILocation(line: 730, column: 7, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !2834, file: !241, line: 730, column: 7)
!3624 = !DILocation(line: 730, column: 11, scope: !3623)
!3625 = !DILocation(line: 730, column: 16, scope: !3623)
!3626 = !DILocation(line: 730, column: 19, scope: !3623)
!3627 = !DILocation(line: 730, column: 33, scope: !3623)
!3628 = !DILocation(line: 731, column: 7, scope: !3623)
!3629 = !DILocation(line: 731, column: 10, scope: !3623)
!3630 = !DILocation(line: 730, column: 7, scope: !2834)
!3631 = !DILocation(line: 732, column: 5, scope: !3623)
!3632 = !DILocation(line: 738, column: 7, scope: !3633)
!3633 = distinct !DILexicalBlock(scope: !2834, file: !241, line: 738, column: 7)
!3634 = !DILocation(line: 738, column: 21, scope: !3633)
!3635 = !DILocation(line: 738, column: 51, scope: !3633)
!3636 = !DILocation(line: 738, column: 56, scope: !3633)
!3637 = !DILocation(line: 739, column: 7, scope: !3633)
!3638 = !DILocation(line: 739, column: 10, scope: !3633)
!3639 = !DILocation(line: 738, column: 7, scope: !2834)
!3640 = !DILocation(line: 741, column: 11, scope: !3641)
!3641 = distinct !DILexicalBlock(scope: !3642, file: !241, line: 741, column: 11)
!3642 = distinct !DILexicalBlock(scope: !3633, file: !241, line: 740, column: 5)
!3643 = !DILocation(line: 741, column: 11, scope: !3642)
!3644 = !DILocation(line: 742, column: 42, scope: !3641)
!3645 = !DILocation(line: 742, column: 50, scope: !3641)
!3646 = !DILocation(line: 742, column: 67, scope: !3641)
!3647 = !DILocation(line: 742, column: 72, scope: !3641)
!3648 = !DILocation(line: 744, column: 42, scope: !3641)
!3649 = !DILocation(line: 744, column: 49, scope: !3641)
!3650 = !DILocation(line: 745, column: 42, scope: !3641)
!3651 = !DILocation(line: 745, column: 54, scope: !3641)
!3652 = !DILocation(line: 742, column: 16, scope: !3641)
!3653 = !DILocation(line: 742, column: 9, scope: !3641)
!3654 = !DILocation(line: 746, column: 18, scope: !3655)
!3655 = distinct !DILexicalBlock(scope: !3641, file: !241, line: 746, column: 16)
!3656 = !DILocation(line: 746, column: 29, scope: !3655)
!3657 = !DILocation(line: 746, column: 32, scope: !3655)
!3658 = !DILocation(line: 746, column: 16, scope: !3641)
!3659 = !DILocation(line: 749, column: 24, scope: !3660)
!3660 = distinct !DILexicalBlock(scope: !3655, file: !241, line: 747, column: 9)
!3661 = !DILocation(line: 749, column: 22, scope: !3660)
!3662 = !DILocation(line: 750, column: 15, scope: !3660)
!3663 = !DILocation(line: 751, column: 11, scope: !3660)
!3664 = !DILocation(line: 753, column: 5, scope: !3642)
!3665 = !DILocation(line: 755, column: 7, scope: !3666)
!3666 = distinct !DILexicalBlock(scope: !2834, file: !241, line: 755, column: 7)
!3667 = !DILocation(line: 755, column: 20, scope: !3666)
!3668 = !DILocation(line: 755, column: 24, scope: !3666)
!3669 = !DILocation(line: 755, column: 7, scope: !2834)
!3670 = !DILocation(line: 756, column: 5, scope: !3666)
!3671 = !DILocation(line: 756, column: 13, scope: !3672)
!3672 = distinct !DILexicalBlock(scope: !3673, file: !241, line: 756, column: 5)
!3673 = distinct !DILexicalBlock(scope: !3666, file: !241, line: 756, column: 5)
!3674 = !DILocation(line: 756, column: 12, scope: !3672)
!3675 = !DILocation(line: 756, column: 5, scope: !3673)
!3676 = !DILocation(line: 757, column: 7, scope: !3672)
!3677 = !DILocation(line: 757, column: 7, scope: !3678)
!3678 = distinct !DILexicalBlock(scope: !3679, file: !241, line: 757, column: 7)
!3679 = distinct !DILexicalBlock(scope: !3672, file: !241, line: 757, column: 7)
!3680 = !DILocation(line: 757, column: 7, scope: !3679)
!3681 = !DILocation(line: 756, column: 39, scope: !3672)
!3682 = !DILocation(line: 756, column: 5, scope: !3672)
!3683 = distinct !{!3683, !3675, !3684}
!3684 = !DILocation(line: 757, column: 7, scope: !3673)
!3685 = !DILocation(line: 759, column: 7, scope: !3686)
!3686 = distinct !DILexicalBlock(scope: !2834, file: !241, line: 759, column: 7)
!3687 = !DILocation(line: 759, column: 13, scope: !3686)
!3688 = !DILocation(line: 759, column: 11, scope: !3686)
!3689 = !DILocation(line: 759, column: 7, scope: !2834)
!3690 = !DILocation(line: 760, column: 5, scope: !3686)
!3691 = !DILocation(line: 760, column: 12, scope: !3686)
!3692 = !DILocation(line: 760, column: 17, scope: !3686)
!3693 = !DILocation(line: 761, column: 10, scope: !2834)
!3694 = !DILocation(line: 761, column: 3, scope: !2834)
!3695 = !DILabel(scope: !2834, name: "force_outer_quoting_style", file: !241, line: 763)
!3696 = !DILocation(line: 763, column: 2, scope: !2834)
!3697 = !DILocation(line: 766, column: 7, scope: !3698)
!3698 = distinct !DILexicalBlock(scope: !2834, file: !241, line: 766, column: 7)
!3699 = !DILocation(line: 766, column: 21, scope: !3698)
!3700 = !DILocation(line: 766, column: 51, scope: !3698)
!3701 = !DILocation(line: 766, column: 54, scope: !3698)
!3702 = !DILocation(line: 766, column: 7, scope: !2834)
!3703 = !DILocation(line: 767, column: 19, scope: !3698)
!3704 = !DILocation(line: 767, column: 5, scope: !3698)
!3705 = !DILocation(line: 768, column: 36, scope: !2834)
!3706 = !DILocation(line: 768, column: 44, scope: !2834)
!3707 = !DILocation(line: 768, column: 56, scope: !2834)
!3708 = !DILocation(line: 768, column: 61, scope: !2834)
!3709 = !DILocation(line: 769, column: 36, scope: !2834)
!3710 = !DILocation(line: 770, column: 36, scope: !2834)
!3711 = !DILocation(line: 770, column: 42, scope: !2834)
!3712 = !DILocation(line: 771, column: 36, scope: !2834)
!3713 = !DILocation(line: 771, column: 48, scope: !2834)
!3714 = !DILocation(line: 768, column: 10, scope: !2834)
!3715 = !DILocation(line: 768, column: 3, scope: !2834)
!3716 = !DILocation(line: 772, column: 1, scope: !2834)
!3717 = !DILocalVariable(name: "escaping", scope: !3718, file: !241, line: 405, type: !18)
!3718 = distinct !DILexicalBlock(scope: !3719, file: !241, line: 401, column: 5)
!3719 = distinct !DILexicalBlock(scope: !3720, file: !241, line: 400, column: 3)
!3720 = distinct !DILexicalBlock(scope: !3721, file: !241, line: 400, column: 3)
!3721 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !241, file: !241, line: 256, type: !2835, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3722, retainedNodes: !4)
!3722 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !3723, nameTableKind: None)
!3723 = !{!3724, !3726, !3728, !3737, !3739, !3741, !3748, !3750}
!3724 = !DIGlobalVariableExpression(var: !3725, expr: !DIExpression())
!3725 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3722, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!3726 = !DIGlobalVariableExpression(var: !3727, expr: !DIExpression())
!3727 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3722, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!3728 = !DIGlobalVariableExpression(var: !3729, expr: !DIExpression())
!3729 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3722, file: !241, line: 1052, type: !3730, isLocal: false, isDefinition: true)
!3730 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !3731)
!3731 = !{!3732, !3733, !3734, !3735, !3736}
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3730, file: !241, line: 68, baseType: !223, size: 32)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3730, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3730, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3730, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3730, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!3737 = !DIGlobalVariableExpression(var: !3738, expr: !DIExpression())
!3738 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3722, file: !241, line: 116, type: !3730, isLocal: true, isDefinition: true)
!3739 = !DIGlobalVariableExpression(var: !3740, expr: !DIExpression())
!3740 = distinct !DIGlobalVariable(name: "slot0", scope: !3722, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!3741 = !DIGlobalVariableExpression(var: !3742, expr: !DIExpression())
!3742 = distinct !DIGlobalVariable(name: "slotvec", scope: !3722, file: !241, line: 845, type: !3743, isLocal: true, isDefinition: true)
!3743 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3744, size: 64)
!3744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !3745)
!3745 = !{!3746, !3747}
!3746 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3744, file: !241, line: 836, baseType: !110, size: 64)
!3747 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3744, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!3748 = !DIGlobalVariableExpression(var: !3749, expr: !DIExpression())
!3749 = distinct !DIGlobalVariable(name: "nslots", scope: !3722, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!3750 = !DIGlobalVariableExpression(var: !3751, expr: !DIExpression())
!3751 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3722, file: !241, line: 844, type: !3744, isLocal: true, isDefinition: true)
!3752 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !3718, file: !241, line: 406, type: !18)
!3753 = distinct !DISubprogram(name: "gettext_quote", scope: !241, file: !241, line: 207, type: !3754, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3754 = !DISubroutineType(types: !3755)
!3755 = !{!49, !49, !223}
!3756 = !DILocalVariable(name: "msgid", arg: 1, scope: !3753, file: !241, line: 207, type: !49)
!3757 = !DILocation(line: 207, column: 28, scope: !3753)
!3758 = !DILocalVariable(name: "s", arg: 2, scope: !3753, file: !241, line: 207, type: !223)
!3759 = !DILocation(line: 207, column: 54, scope: !3753)
!3760 = !DILocalVariable(name: "translation", scope: !3753, file: !241, line: 209, type: !49)
!3761 = !DILocation(line: 209, column: 15, scope: !3753)
!3762 = !DILocation(line: 209, column: 29, scope: !3753)
!3763 = !DILocalVariable(name: "locale_code", scope: !3753, file: !241, line: 210, type: !49)
!3764 = !DILocation(line: 210, column: 15, scope: !3753)
!3765 = !DILocation(line: 212, column: 7, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3753, file: !241, line: 212, column: 7)
!3767 = !DILocation(line: 212, column: 22, scope: !3766)
!3768 = !DILocation(line: 212, column: 19, scope: !3766)
!3769 = !DILocation(line: 212, column: 7, scope: !3753)
!3770 = !DILocation(line: 213, column: 12, scope: !3766)
!3771 = !DILocation(line: 213, column: 5, scope: !3766)
!3772 = !DILocation(line: 233, column: 17, scope: !3753)
!3773 = !DILocation(line: 233, column: 15, scope: !3753)
!3774 = !DILocation(line: 234, column: 7, scope: !3775)
!3775 = distinct !DILexicalBlock(scope: !3753, file: !241, line: 234, column: 7)
!3776 = !DILocation(line: 234, column: 7, scope: !3753)
!3777 = !DILocation(line: 235, column: 12, scope: !3775)
!3778 = !DILocation(line: 235, column: 21, scope: !3775)
!3779 = !DILocation(line: 235, column: 5, scope: !3775)
!3780 = !DILocation(line: 236, column: 7, scope: !3781)
!3781 = distinct !DILexicalBlock(scope: !3753, file: !241, line: 236, column: 7)
!3782 = !DILocation(line: 236, column: 7, scope: !3753)
!3783 = !DILocation(line: 237, column: 12, scope: !3781)
!3784 = !DILocation(line: 237, column: 21, scope: !3781)
!3785 = !DILocation(line: 237, column: 5, scope: !3781)
!3786 = !DILocation(line: 239, column: 11, scope: !3753)
!3787 = !DILocation(line: 239, column: 13, scope: !3753)
!3788 = !DILocation(line: 239, column: 3, scope: !3753)
!3789 = !DILocation(line: 240, column: 1, scope: !3753)
!3790 = !DILocalVariable(name: "msgid", arg: 1, scope: !3791, file: !241, line: 207, type: !49)
!3791 = distinct !DISubprogram(name: "gettext_quote", scope: !241, file: !241, line: 207, type: !3754, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3792, retainedNodes: !4)
!3792 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !3793, nameTableKind: None)
!3793 = !{!3794, !3796, !3798, !3807, !3809, !3811, !3818, !3820}
!3794 = !DIGlobalVariableExpression(var: !3795, expr: !DIExpression())
!3795 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3792, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!3796 = !DIGlobalVariableExpression(var: !3797, expr: !DIExpression())
!3797 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3792, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!3798 = !DIGlobalVariableExpression(var: !3799, expr: !DIExpression())
!3799 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3792, file: !241, line: 1052, type: !3800, isLocal: false, isDefinition: true)
!3800 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !3801)
!3801 = !{!3802, !3803, !3804, !3805, !3806}
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3800, file: !241, line: 68, baseType: !223, size: 32)
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3800, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!3804 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3800, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!3805 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3800, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!3806 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3800, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!3807 = !DIGlobalVariableExpression(var: !3808, expr: !DIExpression())
!3808 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3792, file: !241, line: 116, type: !3800, isLocal: true, isDefinition: true)
!3809 = !DIGlobalVariableExpression(var: !3810, expr: !DIExpression())
!3810 = distinct !DIGlobalVariable(name: "slot0", scope: !3792, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!3811 = !DIGlobalVariableExpression(var: !3812, expr: !DIExpression())
!3812 = distinct !DIGlobalVariable(name: "slotvec", scope: !3792, file: !241, line: 845, type: !3813, isLocal: true, isDefinition: true)
!3813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3814, size: 64)
!3814 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !3815)
!3815 = !{!3816, !3817}
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3814, file: !241, line: 836, baseType: !110, size: 64)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3814, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!3818 = !DIGlobalVariableExpression(var: !3819, expr: !DIExpression())
!3819 = distinct !DIGlobalVariable(name: "nslots", scope: !3792, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!3820 = !DIGlobalVariableExpression(var: !3821, expr: !DIExpression())
!3821 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3792, file: !241, line: 844, type: !3814, isLocal: true, isDefinition: true)
!3822 = !DILocalVariable(name: "s", arg: 2, scope: !3791, file: !241, line: 207, type: !223)
!3823 = !DILocalVariable(name: "translation", scope: !3791, file: !241, line: 209, type: !49)
!3824 = !DILocalVariable(name: "locale_code", scope: !3791, file: !241, line: 210, type: !49)
!3825 = distinct !DISubprogram(name: "quotearg_char", scope: !241, file: !241, line: 991, type: !3826, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3826 = !DISubroutineType(types: !3827)
!3827 = !{!6, !49, !7}
!3828 = !DILocalVariable(name: "arg", arg: 1, scope: !3825, file: !241, line: 991, type: !49)
!3829 = !DILocation(line: 991, column: 28, scope: !3825)
!3830 = !DILocalVariable(name: "ch", arg: 2, scope: !3825, file: !241, line: 991, type: !7)
!3831 = !DILocation(line: 991, column: 38, scope: !3825)
!3832 = !DILocation(line: 993, column: 29, scope: !3825)
!3833 = !DILocation(line: 993, column: 44, scope: !3825)
!3834 = !DILocation(line: 993, column: 10, scope: !3825)
!3835 = !DILocation(line: 993, column: 3, scope: !3825)
!3836 = !DILocalVariable(name: "arg", arg: 1, scope: !3837, file: !241, line: 991, type: !49)
!3837 = distinct !DISubprogram(name: "quotearg_char", scope: !241, file: !241, line: 991, type: !3826, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3838, retainedNodes: !4)
!3838 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !3839, nameTableKind: None)
!3839 = !{!3840, !3842, !3844, !3853, !3855, !3857, !3864, !3866}
!3840 = !DIGlobalVariableExpression(var: !3841, expr: !DIExpression())
!3841 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3838, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!3842 = !DIGlobalVariableExpression(var: !3843, expr: !DIExpression())
!3843 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3838, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!3844 = !DIGlobalVariableExpression(var: !3845, expr: !DIExpression())
!3845 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3838, file: !241, line: 1052, type: !3846, isLocal: false, isDefinition: true)
!3846 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !3847)
!3847 = !{!3848, !3849, !3850, !3851, !3852}
!3848 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3846, file: !241, line: 68, baseType: !223, size: 32)
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3846, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!3850 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3846, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!3851 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3846, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!3852 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3846, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!3853 = !DIGlobalVariableExpression(var: !3854, expr: !DIExpression())
!3854 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3838, file: !241, line: 116, type: !3846, isLocal: true, isDefinition: true)
!3855 = !DIGlobalVariableExpression(var: !3856, expr: !DIExpression())
!3856 = distinct !DIGlobalVariable(name: "slot0", scope: !3838, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!3857 = !DIGlobalVariableExpression(var: !3858, expr: !DIExpression())
!3858 = distinct !DIGlobalVariable(name: "slotvec", scope: !3838, file: !241, line: 845, type: !3859, isLocal: true, isDefinition: true)
!3859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3860, size: 64)
!3860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !3861)
!3861 = !{!3862, !3863}
!3862 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3860, file: !241, line: 836, baseType: !110, size: 64)
!3863 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3860, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!3864 = !DIGlobalVariableExpression(var: !3865, expr: !DIExpression())
!3865 = distinct !DIGlobalVariable(name: "nslots", scope: !3838, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!3866 = !DIGlobalVariableExpression(var: !3867, expr: !DIExpression())
!3867 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3838, file: !241, line: 844, type: !3860, isLocal: true, isDefinition: true)
!3868 = !DILocalVariable(name: "ch", arg: 2, scope: !3837, file: !241, line: 991, type: !7)
!3869 = distinct !DISubprogram(name: "quotearg_colon", scope: !241, file: !241, line: 997, type: !2269, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3870 = !DILocalVariable(name: "arg", arg: 1, scope: !3869, file: !241, line: 997, type: !49)
!3871 = !DILocation(line: 997, column: 29, scope: !3869)
!3872 = !DILocation(line: 999, column: 25, scope: !3869)
!3873 = !DILocation(line: 999, column: 10, scope: !3869)
!3874 = !DILocation(line: 999, column: 3, scope: !3869)
!3875 = distinct !DISubprogram(name: "quotearg_n_style_colon", scope: !241, file: !241, line: 1009, type: !3876, scopeLine: 1010, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3876 = !DISubroutineType(types: !3877)
!3877 = !{!6, !53, !223, !49}
!3878 = !DILocalVariable(name: "n", arg: 1, scope: !3875, file: !241, line: 1009, type: !53)
!3879 = !DILocation(line: 1009, column: 29, scope: !3875)
!3880 = !DILocalVariable(name: "s", arg: 2, scope: !3875, file: !241, line: 1009, type: !223)
!3881 = !DILocation(line: 1009, column: 51, scope: !3875)
!3882 = !DILocalVariable(name: "arg", arg: 3, scope: !3875, file: !241, line: 1009, type: !49)
!3883 = !DILocation(line: 1009, column: 66, scope: !3875)
!3884 = !DILocalVariable(name: "options", scope: !3875, file: !241, line: 1011, type: !254)
!3885 = !DILocation(line: 1011, column: 26, scope: !3875)
!3886 = !DILocation(line: 1012, column: 41, scope: !3875)
!3887 = !DILocation(line: 1012, column: 13, scope: !3875)
!3888 = !DILocation(line: 1013, column: 3, scope: !3875)
!3889 = !DILocation(line: 1014, column: 30, scope: !3875)
!3890 = !DILocation(line: 1014, column: 33, scope: !3875)
!3891 = !DILocation(line: 1014, column: 10, scope: !3875)
!3892 = !DILocation(line: 1014, column: 3, scope: !3875)
!3893 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !241, file: !241, line: 193, type: !3894, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3894 = !DISubroutineType(types: !3895)
!3895 = !{!254, !223}
!3896 = !DILocalVariable(name: "style", arg: 1, scope: !3893, file: !241, line: 193, type: !223)
!3897 = !DILocation(line: 193, column: 48, scope: !3893)
!3898 = !DILocalVariable(name: "o", scope: !3893, file: !241, line: 195, type: !254)
!3899 = !DILocation(line: 195, column: 26, scope: !3893)
!3900 = !DILocation(line: 196, column: 7, scope: !3901)
!3901 = distinct !DILexicalBlock(scope: !3893, file: !241, line: 196, column: 7)
!3902 = !DILocation(line: 196, column: 13, scope: !3901)
!3903 = !DILocation(line: 196, column: 7, scope: !3893)
!3904 = !DILocation(line: 197, column: 5, scope: !3901)
!3905 = !DILocation(line: 198, column: 13, scope: !3893)
!3906 = !DILocation(line: 198, column: 5, scope: !3893)
!3907 = !DILocation(line: 198, column: 11, scope: !3893)
!3908 = !DILocation(line: 199, column: 3, scope: !3893)
!3909 = distinct !DISubprogram(name: "quote_n_mem", scope: !241, file: !241, line: 1061, type: !3910, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3910 = !DISubroutineType(types: !3911)
!3911 = !{!49, !53, !49, !110}
!3912 = !DILocalVariable(name: "n", arg: 1, scope: !3909, file: !241, line: 1061, type: !53)
!3913 = !DILocation(line: 1061, column: 18, scope: !3909)
!3914 = !DILocalVariable(name: "arg", arg: 2, scope: !3909, file: !241, line: 1061, type: !49)
!3915 = !DILocation(line: 1061, column: 33, scope: !3909)
!3916 = !DILocalVariable(name: "argsize", arg: 3, scope: !3909, file: !241, line: 1061, type: !110)
!3917 = !DILocation(line: 1061, column: 45, scope: !3909)
!3918 = !DILocation(line: 1063, column: 30, scope: !3909)
!3919 = !DILocation(line: 1063, column: 33, scope: !3909)
!3920 = !DILocation(line: 1063, column: 38, scope: !3909)
!3921 = !DILocation(line: 1063, column: 10, scope: !3909)
!3922 = !DILocation(line: 1063, column: 3, scope: !3909)
!3923 = !DILocalVariable(name: "n", arg: 1, scope: !3924, file: !241, line: 1061, type: !53)
!3924 = distinct !DISubprogram(name: "quote_n_mem", scope: !241, file: !241, line: 1061, type: !3910, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3925, retainedNodes: !4)
!3925 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !3926, nameTableKind: None)
!3926 = !{!3927, !3929, !3931, !3940, !3942, !3944, !3951, !3953}
!3927 = !DIGlobalVariableExpression(var: !3928, expr: !DIExpression())
!3928 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3925, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!3929 = !DIGlobalVariableExpression(var: !3930, expr: !DIExpression())
!3930 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3925, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!3931 = !DIGlobalVariableExpression(var: !3932, expr: !DIExpression())
!3932 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3925, file: !241, line: 1052, type: !3933, isLocal: false, isDefinition: true)
!3933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !3934)
!3934 = !{!3935, !3936, !3937, !3938, !3939}
!3935 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3933, file: !241, line: 68, baseType: !223, size: 32)
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3933, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3933, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3933, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!3939 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3933, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!3940 = !DIGlobalVariableExpression(var: !3941, expr: !DIExpression())
!3941 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3925, file: !241, line: 116, type: !3933, isLocal: true, isDefinition: true)
!3942 = !DIGlobalVariableExpression(var: !3943, expr: !DIExpression())
!3943 = distinct !DIGlobalVariable(name: "slot0", scope: !3925, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!3944 = !DIGlobalVariableExpression(var: !3945, expr: !DIExpression())
!3945 = distinct !DIGlobalVariable(name: "slotvec", scope: !3925, file: !241, line: 845, type: !3946, isLocal: true, isDefinition: true)
!3946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3947, size: 64)
!3947 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !3948)
!3948 = !{!3949, !3950}
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3947, file: !241, line: 836, baseType: !110, size: 64)
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3947, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!3951 = !DIGlobalVariableExpression(var: !3952, expr: !DIExpression())
!3952 = distinct !DIGlobalVariable(name: "nslots", scope: !3925, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!3953 = !DIGlobalVariableExpression(var: !3954, expr: !DIExpression())
!3954 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3925, file: !241, line: 844, type: !3947, isLocal: true, isDefinition: true)
!3955 = !DILocalVariable(name: "arg", arg: 2, scope: !3924, file: !241, line: 1061, type: !49)
!3956 = !DILocalVariable(name: "argsize", arg: 3, scope: !3924, file: !241, line: 1061, type: !110)
!3957 = distinct !DISubprogram(name: "quote_n", scope: !241, file: !241, line: 1073, type: !3958, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3958 = !DISubroutineType(types: !3959)
!3959 = !{!49, !53, !49}
!3960 = !DILocalVariable(name: "n", arg: 1, scope: !3957, file: !241, line: 1073, type: !53)
!3961 = !DILocation(line: 1073, column: 14, scope: !3957)
!3962 = !DILocalVariable(name: "arg", arg: 2, scope: !3957, file: !241, line: 1073, type: !49)
!3963 = !DILocation(line: 1073, column: 29, scope: !3957)
!3964 = !DILocation(line: 1075, column: 23, scope: !3957)
!3965 = !DILocation(line: 1075, column: 26, scope: !3957)
!3966 = !DILocation(line: 1075, column: 10, scope: !3957)
!3967 = !DILocation(line: 1075, column: 3, scope: !3957)
!3968 = !DILocalVariable(name: "n", arg: 1, scope: !3969, file: !241, line: 1073, type: !53)
!3969 = distinct !DISubprogram(name: "quote_n", scope: !241, file: !241, line: 1073, type: !3958, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3970, retainedNodes: !4)
!3970 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !3971, nameTableKind: None)
!3971 = !{!3972, !3974, !3976, !3985, !3987, !3989, !3996, !3998}
!3972 = !DIGlobalVariableExpression(var: !3973, expr: !DIExpression())
!3973 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3970, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!3974 = !DIGlobalVariableExpression(var: !3975, expr: !DIExpression())
!3975 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3970, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!3976 = !DIGlobalVariableExpression(var: !3977, expr: !DIExpression())
!3977 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3970, file: !241, line: 1052, type: !3978, isLocal: false, isDefinition: true)
!3978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !3979)
!3979 = !{!3980, !3981, !3982, !3983, !3984}
!3980 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3978, file: !241, line: 68, baseType: !223, size: 32)
!3981 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3978, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!3982 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3978, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!3983 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3978, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!3984 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3978, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!3985 = !DIGlobalVariableExpression(var: !3986, expr: !DIExpression())
!3986 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3970, file: !241, line: 116, type: !3978, isLocal: true, isDefinition: true)
!3987 = !DIGlobalVariableExpression(var: !3988, expr: !DIExpression())
!3988 = distinct !DIGlobalVariable(name: "slot0", scope: !3970, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!3989 = !DIGlobalVariableExpression(var: !3990, expr: !DIExpression())
!3990 = distinct !DIGlobalVariable(name: "slotvec", scope: !3970, file: !241, line: 845, type: !3991, isLocal: true, isDefinition: true)
!3991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3992, size: 64)
!3992 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !3993)
!3993 = !{!3994, !3995}
!3994 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3992, file: !241, line: 836, baseType: !110, size: 64)
!3995 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3992, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!3996 = !DIGlobalVariableExpression(var: !3997, expr: !DIExpression())
!3997 = distinct !DIGlobalVariable(name: "nslots", scope: !3970, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!3998 = !DIGlobalVariableExpression(var: !3999, expr: !DIExpression())
!3999 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3970, file: !241, line: 844, type: !3992, isLocal: true, isDefinition: true)
!4000 = !DILocalVariable(name: "arg", arg: 2, scope: !3969, file: !241, line: 1073, type: !49)
!4001 = distinct !DISubprogram(name: "quote", scope: !241, file: !241, line: 1079, type: !4002, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4002 = !DISubroutineType(types: !4003)
!4003 = !{!49, !49}
!4004 = !DILocalVariable(name: "arg", arg: 1, scope: !4001, file: !241, line: 1079, type: !49)
!4005 = !DILocation(line: 1079, column: 20, scope: !4001)
!4006 = !DILocation(line: 1081, column: 22, scope: !4001)
!4007 = !DILocation(line: 1081, column: 10, scope: !4001)
!4008 = !DILocation(line: 1081, column: 3, scope: !4001)
!4009 = !DILocalVariable(name: "arg", arg: 1, scope: !4010, file: !241, line: 1079, type: !49)
!4010 = distinct !DISubprogram(name: "quote", scope: !241, file: !241, line: 1079, type: !4002, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4011, retainedNodes: !4)
!4011 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4012, nameTableKind: None)
!4012 = !{!4013, !4015, !4017, !4026, !4028, !4030, !4037, !4039}
!4013 = !DIGlobalVariableExpression(var: !4014, expr: !DIExpression())
!4014 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4011, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4015 = !DIGlobalVariableExpression(var: !4016, expr: !DIExpression())
!4016 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4011, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4017 = !DIGlobalVariableExpression(var: !4018, expr: !DIExpression())
!4018 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4011, file: !241, line: 1052, type: !4019, isLocal: false, isDefinition: true)
!4019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4020)
!4020 = !{!4021, !4022, !4023, !4024, !4025}
!4021 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4019, file: !241, line: 68, baseType: !223, size: 32)
!4022 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4019, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4019, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4019, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4019, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4026 = !DIGlobalVariableExpression(var: !4027, expr: !DIExpression())
!4027 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4011, file: !241, line: 116, type: !4019, isLocal: true, isDefinition: true)
!4028 = !DIGlobalVariableExpression(var: !4029, expr: !DIExpression())
!4029 = distinct !DIGlobalVariable(name: "slot0", scope: !4011, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4030 = !DIGlobalVariableExpression(var: !4031, expr: !DIExpression())
!4031 = distinct !DIGlobalVariable(name: "slotvec", scope: !4011, file: !241, line: 845, type: !4032, isLocal: true, isDefinition: true)
!4032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4033, size: 64)
!4033 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4034)
!4034 = !{!4035, !4036}
!4035 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4033, file: !241, line: 836, baseType: !110, size: 64)
!4036 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4033, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4037 = !DIGlobalVariableExpression(var: !4038, expr: !DIExpression())
!4038 = distinct !DIGlobalVariable(name: "nslots", scope: !4011, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4039 = !DIGlobalVariableExpression(var: !4040, expr: !DIExpression())
!4040 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4011, file: !241, line: 844, type: !4033, isLocal: true, isDefinition: true)
!4041 = distinct !DISubprogram(name: "setlocale_null_r", scope: !4042, file: !4042, line: 269, type: !4043, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !296, retainedNodes: !4)
!4042 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4043 = !DISubroutineType(types: !4044)
!4044 = !{!53, !53, !6, !110}
!4045 = !DILocalVariable(name: "category", arg: 1, scope: !4041, file: !4042, line: 269, type: !53)
!4046 = !DILocation(line: 269, column: 23, scope: !4041)
!4047 = !DILocalVariable(name: "buf", arg: 2, scope: !4041, file: !4042, line: 269, type: !6)
!4048 = !DILocation(line: 269, column: 39, scope: !4041)
!4049 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4041, file: !4042, line: 269, type: !110)
!4050 = !DILocation(line: 269, column: 51, scope: !4041)
!4051 = !DILocation(line: 274, column: 35, scope: !4041)
!4052 = !DILocation(line: 274, column: 45, scope: !4041)
!4053 = !DILocation(line: 274, column: 50, scope: !4041)
!4054 = !DILocation(line: 274, column: 10, scope: !4041)
!4055 = !DILocation(line: 274, column: 3, scope: !4041)
!4056 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !4042, file: !4042, line: 91, type: !4043, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !296, retainedNodes: !4)
!4057 = !DILocalVariable(name: "category", arg: 1, scope: !4056, file: !4042, line: 91, type: !53)
!4058 = !DILocation(line: 91, column: 30, scope: !4056)
!4059 = !DILocalVariable(name: "buf", arg: 2, scope: !4056, file: !4042, line: 91, type: !6)
!4060 = !DILocation(line: 91, column: 46, scope: !4056)
!4061 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4056, file: !4042, line: 91, type: !110)
!4062 = !DILocation(line: 91, column: 58, scope: !4056)
!4063 = !DILocalVariable(name: "result", scope: !4056, file: !4042, line: 140, type: !49)
!4064 = !DILocation(line: 140, column: 15, scope: !4056)
!4065 = !DILocation(line: 140, column: 51, scope: !4056)
!4066 = !DILocation(line: 140, column: 24, scope: !4056)
!4067 = !DILocation(line: 142, column: 7, scope: !4068)
!4068 = distinct !DILexicalBlock(scope: !4056, file: !4042, line: 142, column: 7)
!4069 = !DILocation(line: 142, column: 14, scope: !4068)
!4070 = !DILocation(line: 142, column: 7, scope: !4056)
!4071 = !DILocation(line: 145, column: 11, scope: !4072)
!4072 = distinct !DILexicalBlock(scope: !4073, file: !4042, line: 145, column: 11)
!4073 = distinct !DILexicalBlock(scope: !4068, file: !4042, line: 143, column: 5)
!4074 = !DILocation(line: 145, column: 19, scope: !4072)
!4075 = !DILocation(line: 145, column: 11, scope: !4073)
!4076 = !DILocation(line: 149, column: 9, scope: !4072)
!4077 = !DILocation(line: 149, column: 16, scope: !4072)
!4078 = !DILocation(line: 150, column: 7, scope: !4073)
!4079 = !DILocalVariable(name: "length", scope: !4080, file: !4042, line: 154, type: !110)
!4080 = distinct !DILexicalBlock(scope: !4068, file: !4042, line: 153, column: 5)
!4081 = !DILocation(line: 154, column: 14, scope: !4080)
!4082 = !DILocation(line: 154, column: 31, scope: !4080)
!4083 = !DILocation(line: 154, column: 23, scope: !4080)
!4084 = !DILocation(line: 155, column: 11, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !4080, file: !4042, line: 155, column: 11)
!4086 = !DILocation(line: 155, column: 20, scope: !4085)
!4087 = !DILocation(line: 155, column: 18, scope: !4085)
!4088 = !DILocation(line: 155, column: 11, scope: !4080)
!4089 = !DILocation(line: 157, column: 19, scope: !4090)
!4090 = distinct !DILexicalBlock(scope: !4085, file: !4042, line: 156, column: 9)
!4091 = !DILocation(line: 157, column: 24, scope: !4090)
!4092 = !DILocation(line: 157, column: 32, scope: !4090)
!4093 = !DILocation(line: 157, column: 39, scope: !4090)
!4094 = !DILocation(line: 157, column: 11, scope: !4090)
!4095 = !DILocation(line: 158, column: 11, scope: !4090)
!4096 = !DILocation(line: 162, column: 15, scope: !4097)
!4097 = distinct !DILexicalBlock(scope: !4098, file: !4042, line: 162, column: 15)
!4098 = distinct !DILexicalBlock(scope: !4085, file: !4042, line: 161, column: 9)
!4099 = !DILocation(line: 162, column: 23, scope: !4097)
!4100 = !DILocation(line: 162, column: 15, scope: !4098)
!4101 = !DILocation(line: 167, column: 23, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4097, file: !4042, line: 163, column: 13)
!4103 = !DILocation(line: 167, column: 28, scope: !4102)
!4104 = !DILocation(line: 167, column: 36, scope: !4102)
!4105 = !DILocation(line: 167, column: 44, scope: !4102)
!4106 = !DILocation(line: 167, column: 15, scope: !4102)
!4107 = !DILocation(line: 168, column: 15, scope: !4102)
!4108 = !DILocation(line: 168, column: 19, scope: !4102)
!4109 = !DILocation(line: 168, column: 27, scope: !4102)
!4110 = !DILocation(line: 168, column: 32, scope: !4102)
!4111 = !DILocation(line: 169, column: 13, scope: !4102)
!4112 = !DILocation(line: 170, column: 11, scope: !4098)
!4113 = !DILocation(line: 174, column: 1, scope: !4056)
!4114 = !DILocalVariable(name: "category", arg: 1, scope: !4115, file: !4042, line: 91, type: !53)
!4115 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !4042, file: !4042, line: 91, type: !4043, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4116, retainedNodes: !4)
!4116 = distinct !DICompileUnit(language: DW_LANG_C99, file: !297, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!4117 = !DILocalVariable(name: "buf", arg: 2, scope: !4115, file: !4042, line: 91, type: !6)
!4118 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4115, file: !4042, line: 91, type: !110)
!4119 = !DILocalVariable(name: "result", scope: !4115, file: !4042, line: 140, type: !49)
!4120 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !4042, file: !4042, line: 60, type: !4121, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !296, retainedNodes: !4)
!4121 = !DISubroutineType(types: !4122)
!4122 = !{!49, !53}
!4123 = !DILocalVariable(name: "category", arg: 1, scope: !4120, file: !4042, line: 60, type: !53)
!4124 = !DILocation(line: 60, column: 32, scope: !4120)
!4125 = !DILocalVariable(name: "result", scope: !4120, file: !4042, line: 62, type: !49)
!4126 = !DILocation(line: 62, column: 15, scope: !4120)
!4127 = !DILocation(line: 62, column: 35, scope: !4120)
!4128 = !DILocation(line: 62, column: 24, scope: !4120)
!4129 = !DILocation(line: 87, column: 10, scope: !4120)
!4130 = !DILocation(line: 87, column: 3, scope: !4120)
!4131 = distinct !DISubprogram(name: "version_etc_arn", scope: !4132, file: !4132, line: 61, type: !4133, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !299, retainedNodes: !4)
!4132 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4133 = !DISubroutineType(types: !4134)
!4134 = !{null, !4135, !49, !49, !49, !4184, !110}
!4135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4136, size: 64)
!4136 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4137, line: 7, baseType: !4138)
!4137 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!4138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4139, line: 49, size: 1728, elements: !4140)
!4139 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!4140 = !{!4141, !4142, !4143, !4144, !4145, !4146, !4147, !4148, !4149, !4150, !4151, !4152, !4153, !4156, !4158, !4159, !4160, !4161, !4162, !4164, !4168, !4171, !4173, !4176, !4179, !4180, !4181, !4182, !4183}
!4141 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4138, file: !4139, line: 51, baseType: !53, size: 32)
!4142 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4138, file: !4139, line: 54, baseType: !6, size: 64, offset: 64)
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4138, file: !4139, line: 55, baseType: !6, size: 64, offset: 128)
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4138, file: !4139, line: 56, baseType: !6, size: 64, offset: 192)
!4145 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4138, file: !4139, line: 57, baseType: !6, size: 64, offset: 256)
!4146 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4138, file: !4139, line: 58, baseType: !6, size: 64, offset: 320)
!4147 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4138, file: !4139, line: 59, baseType: !6, size: 64, offset: 384)
!4148 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4138, file: !4139, line: 60, baseType: !6, size: 64, offset: 448)
!4149 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4138, file: !4139, line: 61, baseType: !6, size: 64, offset: 512)
!4150 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4138, file: !4139, line: 64, baseType: !6, size: 64, offset: 576)
!4151 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4138, file: !4139, line: 65, baseType: !6, size: 64, offset: 640)
!4152 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4138, file: !4139, line: 66, baseType: !6, size: 64, offset: 704)
!4153 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4138, file: !4139, line: 68, baseType: !4154, size: 64, offset: 768)
!4154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4155, size: 64)
!4155 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !4139, line: 36, flags: DIFlagFwdDecl)
!4156 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4138, file: !4139, line: 70, baseType: !4157, size: 64, offset: 832)
!4157 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4138, size: 64)
!4158 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4138, file: !4139, line: 72, baseType: !53, size: 32, offset: 896)
!4159 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4138, file: !4139, line: 73, baseType: !53, size: 32, offset: 928)
!4160 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4138, file: !4139, line: 74, baseType: !1082, size: 64, offset: 960)
!4161 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4138, file: !4139, line: 77, baseType: !188, size: 16, offset: 1024)
!4162 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4138, file: !4139, line: 78, baseType: !4163, size: 8, offset: 1040)
!4163 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!4164 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4138, file: !4139, line: 79, baseType: !4165, size: 8, offset: 1048)
!4165 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 8, elements: !4166)
!4166 = !{!4167}
!4167 = !DISubrange(count: 1)
!4168 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4138, file: !4139, line: 81, baseType: !4169, size: 64, offset: 1088)
!4169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4170, size: 64)
!4170 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !4139, line: 43, baseType: null)
!4171 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4138, file: !4139, line: 89, baseType: !4172, size: 64, offset: 1152)
!4172 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !12, line: 153, baseType: !13)
!4173 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4138, file: !4139, line: 91, baseType: !4174, size: 64, offset: 1216)
!4174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4175, size: 64)
!4175 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !4139, line: 37, flags: DIFlagFwdDecl)
!4176 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4138, file: !4139, line: 92, baseType: !4177, size: 64, offset: 1280)
!4177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4178, size: 64)
!4178 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !4139, line: 38, flags: DIFlagFwdDecl)
!4179 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4138, file: !4139, line: 93, baseType: !4157, size: 64, offset: 1344)
!4180 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4138, file: !4139, line: 94, baseType: !8, size: 64, offset: 1408)
!4181 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4138, file: !4139, line: 95, baseType: !110, size: 64, offset: 1472)
!4182 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4138, file: !4139, line: 96, baseType: !53, size: 32, offset: 1536)
!4183 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4138, file: !4139, line: 98, baseType: !105, size: 160, offset: 1568)
!4184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !243, size: 64)
!4185 = !DILocalVariable(name: "stream", arg: 1, scope: !4131, file: !4132, line: 61, type: !4135)
!4186 = !DILocation(line: 61, column: 24, scope: !4131)
!4187 = !DILocalVariable(name: "command_name", arg: 2, scope: !4131, file: !4132, line: 62, type: !49)
!4188 = !DILocation(line: 62, column: 30, scope: !4131)
!4189 = !DILocalVariable(name: "package", arg: 3, scope: !4131, file: !4132, line: 62, type: !49)
!4190 = !DILocation(line: 62, column: 56, scope: !4131)
!4191 = !DILocalVariable(name: "version", arg: 4, scope: !4131, file: !4132, line: 63, type: !49)
!4192 = !DILocation(line: 63, column: 30, scope: !4131)
!4193 = !DILocalVariable(name: "authors", arg: 5, scope: !4131, file: !4132, line: 64, type: !4184)
!4194 = !DILocation(line: 64, column: 39, scope: !4131)
!4195 = !DILocalVariable(name: "n_authors", arg: 6, scope: !4131, file: !4132, line: 64, type: !110)
!4196 = !DILocation(line: 64, column: 55, scope: !4131)
!4197 = !DILocation(line: 66, column: 7, scope: !4198)
!4198 = distinct !DILexicalBlock(scope: !4131, file: !4132, line: 66, column: 7)
!4199 = !DILocation(line: 66, column: 7, scope: !4131)
!4200 = !DILocation(line: 67, column: 14, scope: !4198)
!4201 = !DILocation(line: 67, column: 38, scope: !4198)
!4202 = !DILocation(line: 67, column: 52, scope: !4198)
!4203 = !DILocation(line: 67, column: 61, scope: !4198)
!4204 = !DILocation(line: 67, column: 5, scope: !4198)
!4205 = !DILocation(line: 69, column: 14, scope: !4198)
!4206 = !DILocation(line: 69, column: 33, scope: !4198)
!4207 = !DILocation(line: 69, column: 42, scope: !4198)
!4208 = !DILocation(line: 69, column: 5, scope: !4198)
!4209 = !DILocation(line: 83, column: 12, scope: !4131)
!4210 = !DILocation(line: 83, column: 43, scope: !4131)
!4211 = !DILocation(line: 83, column: 3, scope: !4131)
!4212 = !DILocation(line: 85, column: 3, scope: !4131)
!4213 = !DILocation(line: 88, column: 12, scope: !4131)
!4214 = !DILocation(line: 88, column: 20, scope: !4131)
!4215 = !DILocation(line: 88, column: 3, scope: !4131)
!4216 = !DILocation(line: 95, column: 3, scope: !4131)
!4217 = !DILocation(line: 97, column: 11, scope: !4131)
!4218 = !DILocation(line: 97, column: 3, scope: !4131)
!4219 = !DILocation(line: 102, column: 7, scope: !4220)
!4220 = distinct !DILexicalBlock(scope: !4131, file: !4132, line: 98, column: 5)
!4221 = !DILocation(line: 105, column: 16, scope: !4220)
!4222 = !DILocation(line: 105, column: 24, scope: !4220)
!4223 = !DILocation(line: 105, column: 47, scope: !4220)
!4224 = !DILocation(line: 105, column: 7, scope: !4220)
!4225 = !DILocation(line: 106, column: 7, scope: !4220)
!4226 = !DILocation(line: 109, column: 16, scope: !4220)
!4227 = !DILocation(line: 109, column: 24, scope: !4220)
!4228 = !DILocation(line: 109, column: 54, scope: !4220)
!4229 = !DILocation(line: 109, column: 66, scope: !4220)
!4230 = !DILocation(line: 109, column: 7, scope: !4220)
!4231 = !DILocation(line: 110, column: 7, scope: !4220)
!4232 = !DILocation(line: 113, column: 16, scope: !4220)
!4233 = !DILocation(line: 113, column: 24, scope: !4220)
!4234 = !DILocation(line: 114, column: 16, scope: !4220)
!4235 = !DILocation(line: 114, column: 28, scope: !4220)
!4236 = !DILocation(line: 114, column: 40, scope: !4220)
!4237 = !DILocation(line: 113, column: 7, scope: !4220)
!4238 = !DILocation(line: 115, column: 7, scope: !4220)
!4239 = !DILocation(line: 120, column: 16, scope: !4220)
!4240 = !DILocation(line: 120, column: 24, scope: !4220)
!4241 = !DILocation(line: 121, column: 16, scope: !4220)
!4242 = !DILocation(line: 121, column: 28, scope: !4220)
!4243 = !DILocation(line: 121, column: 40, scope: !4220)
!4244 = !DILocation(line: 121, column: 52, scope: !4220)
!4245 = !DILocation(line: 120, column: 7, scope: !4220)
!4246 = !DILocation(line: 122, column: 7, scope: !4220)
!4247 = !DILocation(line: 127, column: 16, scope: !4220)
!4248 = !DILocation(line: 127, column: 24, scope: !4220)
!4249 = !DILocation(line: 128, column: 16, scope: !4220)
!4250 = !DILocation(line: 128, column: 28, scope: !4220)
!4251 = !DILocation(line: 128, column: 40, scope: !4220)
!4252 = !DILocation(line: 128, column: 52, scope: !4220)
!4253 = !DILocation(line: 128, column: 64, scope: !4220)
!4254 = !DILocation(line: 127, column: 7, scope: !4220)
!4255 = !DILocation(line: 129, column: 7, scope: !4220)
!4256 = !DILocation(line: 134, column: 16, scope: !4220)
!4257 = !DILocation(line: 134, column: 24, scope: !4220)
!4258 = !DILocation(line: 135, column: 16, scope: !4220)
!4259 = !DILocation(line: 135, column: 28, scope: !4220)
!4260 = !DILocation(line: 135, column: 40, scope: !4220)
!4261 = !DILocation(line: 135, column: 52, scope: !4220)
!4262 = !DILocation(line: 135, column: 64, scope: !4220)
!4263 = !DILocation(line: 136, column: 16, scope: !4220)
!4264 = !DILocation(line: 134, column: 7, scope: !4220)
!4265 = !DILocation(line: 137, column: 7, scope: !4220)
!4266 = !DILocation(line: 142, column: 16, scope: !4220)
!4267 = !DILocation(line: 142, column: 24, scope: !4220)
!4268 = !DILocation(line: 143, column: 16, scope: !4220)
!4269 = !DILocation(line: 143, column: 28, scope: !4220)
!4270 = !DILocation(line: 143, column: 40, scope: !4220)
!4271 = !DILocation(line: 143, column: 52, scope: !4220)
!4272 = !DILocation(line: 143, column: 64, scope: !4220)
!4273 = !DILocation(line: 144, column: 16, scope: !4220)
!4274 = !DILocation(line: 144, column: 28, scope: !4220)
!4275 = !DILocation(line: 142, column: 7, scope: !4220)
!4276 = !DILocation(line: 145, column: 7, scope: !4220)
!4277 = !DILocation(line: 150, column: 16, scope: !4220)
!4278 = !DILocation(line: 150, column: 24, scope: !4220)
!4279 = !DILocation(line: 152, column: 17, scope: !4220)
!4280 = !DILocation(line: 152, column: 29, scope: !4220)
!4281 = !DILocation(line: 152, column: 41, scope: !4220)
!4282 = !DILocation(line: 152, column: 53, scope: !4220)
!4283 = !DILocation(line: 152, column: 65, scope: !4220)
!4284 = !DILocation(line: 153, column: 17, scope: !4220)
!4285 = !DILocation(line: 153, column: 29, scope: !4220)
!4286 = !DILocation(line: 153, column: 41, scope: !4220)
!4287 = !DILocation(line: 150, column: 7, scope: !4220)
!4288 = !DILocation(line: 154, column: 7, scope: !4220)
!4289 = !DILocation(line: 159, column: 16, scope: !4220)
!4290 = !DILocation(line: 159, column: 24, scope: !4220)
!4291 = !DILocation(line: 161, column: 16, scope: !4220)
!4292 = !DILocation(line: 161, column: 28, scope: !4220)
!4293 = !DILocation(line: 161, column: 40, scope: !4220)
!4294 = !DILocation(line: 161, column: 52, scope: !4220)
!4295 = !DILocation(line: 161, column: 64, scope: !4220)
!4296 = !DILocation(line: 162, column: 16, scope: !4220)
!4297 = !DILocation(line: 162, column: 28, scope: !4220)
!4298 = !DILocation(line: 162, column: 40, scope: !4220)
!4299 = !DILocation(line: 162, column: 52, scope: !4220)
!4300 = !DILocation(line: 159, column: 7, scope: !4220)
!4301 = !DILocation(line: 163, column: 7, scope: !4220)
!4302 = !DILocation(line: 170, column: 16, scope: !4220)
!4303 = !DILocation(line: 170, column: 24, scope: !4220)
!4304 = !DILocation(line: 172, column: 17, scope: !4220)
!4305 = !DILocation(line: 172, column: 29, scope: !4220)
!4306 = !DILocation(line: 172, column: 41, scope: !4220)
!4307 = !DILocation(line: 172, column: 53, scope: !4220)
!4308 = !DILocation(line: 172, column: 65, scope: !4220)
!4309 = !DILocation(line: 173, column: 17, scope: !4220)
!4310 = !DILocation(line: 173, column: 29, scope: !4220)
!4311 = !DILocation(line: 173, column: 41, scope: !4220)
!4312 = !DILocation(line: 173, column: 53, scope: !4220)
!4313 = !DILocation(line: 170, column: 7, scope: !4220)
!4314 = !DILocation(line: 174, column: 7, scope: !4220)
!4315 = !DILocation(line: 176, column: 1, scope: !4131)
!4316 = !DILocalVariable(name: "stream", arg: 1, scope: !4317, file: !4132, line: 61, type: !4320)
!4317 = distinct !DISubprogram(name: "version_etc_arn", scope: !4132, file: !4132, line: 61, type: !4318, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4354, retainedNodes: !4)
!4318 = !DISubroutineType(types: !4319)
!4319 = !{null, !4320, !49, !49, !49, !4184, !110}
!4320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4321, size: 64)
!4321 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4137, line: 7, baseType: !4322)
!4322 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4139, line: 49, size: 1728, elements: !4323)
!4323 = !{!4324, !4325, !4326, !4327, !4328, !4329, !4330, !4331, !4332, !4333, !4334, !4335, !4336, !4337, !4339, !4340, !4341, !4342, !4343, !4344, !4345, !4346, !4347, !4348, !4349, !4350, !4351, !4352, !4353}
!4324 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4322, file: !4139, line: 51, baseType: !53, size: 32)
!4325 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4322, file: !4139, line: 54, baseType: !6, size: 64, offset: 64)
!4326 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4322, file: !4139, line: 55, baseType: !6, size: 64, offset: 128)
!4327 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4322, file: !4139, line: 56, baseType: !6, size: 64, offset: 192)
!4328 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4322, file: !4139, line: 57, baseType: !6, size: 64, offset: 256)
!4329 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4322, file: !4139, line: 58, baseType: !6, size: 64, offset: 320)
!4330 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4322, file: !4139, line: 59, baseType: !6, size: 64, offset: 384)
!4331 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4322, file: !4139, line: 60, baseType: !6, size: 64, offset: 448)
!4332 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4322, file: !4139, line: 61, baseType: !6, size: 64, offset: 512)
!4333 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4322, file: !4139, line: 64, baseType: !6, size: 64, offset: 576)
!4334 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4322, file: !4139, line: 65, baseType: !6, size: 64, offset: 640)
!4335 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4322, file: !4139, line: 66, baseType: !6, size: 64, offset: 704)
!4336 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4322, file: !4139, line: 68, baseType: !4154, size: 64, offset: 768)
!4337 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4322, file: !4139, line: 70, baseType: !4338, size: 64, offset: 832)
!4338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4322, size: 64)
!4339 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4322, file: !4139, line: 72, baseType: !53, size: 32, offset: 896)
!4340 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4322, file: !4139, line: 73, baseType: !53, size: 32, offset: 928)
!4341 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4322, file: !4139, line: 74, baseType: !1082, size: 64, offset: 960)
!4342 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4322, file: !4139, line: 77, baseType: !188, size: 16, offset: 1024)
!4343 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4322, file: !4139, line: 78, baseType: !4163, size: 8, offset: 1040)
!4344 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4322, file: !4139, line: 79, baseType: !4165, size: 8, offset: 1048)
!4345 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4322, file: !4139, line: 81, baseType: !4169, size: 64, offset: 1088)
!4346 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4322, file: !4139, line: 89, baseType: !4172, size: 64, offset: 1152)
!4347 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4322, file: !4139, line: 91, baseType: !4174, size: 64, offset: 1216)
!4348 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4322, file: !4139, line: 92, baseType: !4177, size: 64, offset: 1280)
!4349 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4322, file: !4139, line: 93, baseType: !4338, size: 64, offset: 1344)
!4350 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4322, file: !4139, line: 94, baseType: !8, size: 64, offset: 1408)
!4351 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4322, file: !4139, line: 95, baseType: !110, size: 64, offset: 1472)
!4352 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4322, file: !4139, line: 96, baseType: !53, size: 32, offset: 1536)
!4353 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4322, file: !4139, line: 98, baseType: !105, size: 160, offset: 1568)
!4354 = distinct !DICompileUnit(language: DW_LANG_C99, file: !300, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!4355 = !DILocalVariable(name: "command_name", arg: 2, scope: !4317, file: !4132, line: 62, type: !49)
!4356 = !DILocalVariable(name: "package", arg: 3, scope: !4317, file: !4132, line: 62, type: !49)
!4357 = !DILocalVariable(name: "version", arg: 4, scope: !4317, file: !4132, line: 63, type: !49)
!4358 = !DILocalVariable(name: "authors", arg: 5, scope: !4317, file: !4132, line: 64, type: !4184)
!4359 = !DILocalVariable(name: "n_authors", arg: 6, scope: !4317, file: !4132, line: 64, type: !110)
!4360 = distinct !DISubprogram(name: "version_etc_va", scope: !4132, file: !4132, line: 199, type: !4361, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !299, retainedNodes: !4)
!4361 = !DISubroutineType(types: !4362)
!4362 = !{null, !4135, !49, !49, !49, !4363}
!4363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4364, size: 64)
!4364 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !300, line: 192, size: 192, elements: !4365)
!4365 = !{!4366, !4367, !4368, !4369}
!4366 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !4364, file: !300, line: 192, baseType: !180, size: 32)
!4367 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !4364, file: !300, line: 192, baseType: !180, size: 32, offset: 32)
!4368 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !4364, file: !300, line: 192, baseType: !8, size: 64, offset: 64)
!4369 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !4364, file: !300, line: 192, baseType: !8, size: 64, offset: 128)
!4370 = !DILocalVariable(name: "stream", arg: 1, scope: !4360, file: !4132, line: 199, type: !4135)
!4371 = !DILocation(line: 199, column: 23, scope: !4360)
!4372 = !DILocalVariable(name: "command_name", arg: 2, scope: !4360, file: !4132, line: 200, type: !49)
!4373 = !DILocation(line: 200, column: 29, scope: !4360)
!4374 = !DILocalVariable(name: "package", arg: 3, scope: !4360, file: !4132, line: 200, type: !49)
!4375 = !DILocation(line: 200, column: 55, scope: !4360)
!4376 = !DILocalVariable(name: "version", arg: 4, scope: !4360, file: !4132, line: 201, type: !49)
!4377 = !DILocation(line: 201, column: 29, scope: !4360)
!4378 = !DILocalVariable(name: "authors", arg: 5, scope: !4360, file: !4132, line: 201, type: !4363)
!4379 = !DILocation(line: 201, column: 46, scope: !4360)
!4380 = !DILocalVariable(name: "n_authors", scope: !4360, file: !4132, line: 203, type: !110)
!4381 = !DILocation(line: 203, column: 10, scope: !4360)
!4382 = !DILocalVariable(name: "authtab", scope: !4360, file: !4132, line: 204, type: !4383)
!4383 = !DICompositeType(tag: DW_TAG_array_type, baseType: !49, size: 640, elements: !250)
!4384 = !DILocation(line: 204, column: 15, scope: !4360)
!4385 = !DILocation(line: 206, column: 18, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !4360, file: !4132, line: 206, column: 3)
!4387 = !DILocation(line: 206, column: 8, scope: !4386)
!4388 = !DILocation(line: 207, column: 8, scope: !4389)
!4389 = distinct !DILexicalBlock(scope: !4386, file: !4132, line: 206, column: 3)
!4390 = !DILocation(line: 207, column: 18, scope: !4389)
!4391 = !DILocation(line: 208, column: 10, scope: !4389)
!4392 = !DILocation(line: 208, column: 35, scope: !4389)
!4393 = !DILocation(line: 208, column: 22, scope: !4389)
!4394 = !DILocation(line: 208, column: 14, scope: !4389)
!4395 = !DILocation(line: 208, column: 33, scope: !4389)
!4396 = !DILocation(line: 208, column: 67, scope: !4389)
!4397 = !DILocation(line: 0, scope: !4389)
!4398 = !DILocation(line: 206, column: 3, scope: !4386)
!4399 = !DILocation(line: 209, column: 17, scope: !4389)
!4400 = !DILocation(line: 206, column: 3, scope: !4389)
!4401 = distinct !{!4401, !4398, !4402}
!4402 = !DILocation(line: 210, column: 5, scope: !4386)
!4403 = !DILocation(line: 211, column: 20, scope: !4360)
!4404 = !DILocation(line: 211, column: 28, scope: !4360)
!4405 = !DILocation(line: 211, column: 42, scope: !4360)
!4406 = !DILocation(line: 211, column: 51, scope: !4360)
!4407 = !DILocation(line: 212, column: 20, scope: !4360)
!4408 = !DILocation(line: 212, column: 29, scope: !4360)
!4409 = !DILocation(line: 211, column: 3, scope: !4360)
!4410 = !DILocation(line: 213, column: 1, scope: !4360)
!4411 = distinct !DISubprogram(name: "version_etc", scope: !4132, file: !4132, line: 230, type: !4412, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !299, retainedNodes: !4)
!4412 = !DISubroutineType(types: !4413)
!4413 = !{null, !4135, !49, !49, !49, null}
!4414 = !DILocalVariable(name: "stream", arg: 1, scope: !4411, file: !4132, line: 230, type: !4135)
!4415 = !DILocation(line: 230, column: 20, scope: !4411)
!4416 = !DILocalVariable(name: "command_name", arg: 2, scope: !4411, file: !4132, line: 231, type: !49)
!4417 = !DILocation(line: 231, column: 26, scope: !4411)
!4418 = !DILocalVariable(name: "package", arg: 3, scope: !4411, file: !4132, line: 231, type: !49)
!4419 = !DILocation(line: 231, column: 52, scope: !4411)
!4420 = !DILocalVariable(name: "version", arg: 4, scope: !4411, file: !4132, line: 232, type: !49)
!4421 = !DILocation(line: 232, column: 26, scope: !4411)
!4422 = !DILocalVariable(name: "authors", scope: !4411, file: !4132, line: 234, type: !4423)
!4423 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !4424, line: 52, baseType: !4425)
!4424 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!4425 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !4426, line: 32, baseType: !4427)
!4426 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!4427 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !300, line: 234, baseType: !4428)
!4428 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4364, size: 192, elements: !4166)
!4429 = !DILocation(line: 234, column: 11, scope: !4411)
!4430 = !DILocation(line: 236, column: 3, scope: !4411)
!4431 = !DILocation(line: 237, column: 19, scope: !4411)
!4432 = !DILocation(line: 237, column: 27, scope: !4411)
!4433 = !DILocation(line: 237, column: 41, scope: !4411)
!4434 = !DILocation(line: 237, column: 50, scope: !4411)
!4435 = !DILocation(line: 237, column: 59, scope: !4411)
!4436 = !DILocation(line: 237, column: 3, scope: !4411)
!4437 = !DILocation(line: 238, column: 3, scope: !4411)
!4438 = !DILocation(line: 239, column: 1, scope: !4411)
!4439 = distinct !DISubprogram(name: "xmalloc", scope: !4440, file: !4440, line: 39, type: !4441, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!4440 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4441 = !DISubroutineType(types: !4442)
!4442 = !{!8, !110}
!4443 = !DILocalVariable(name: "n", arg: 1, scope: !4439, file: !4440, line: 39, type: !110)
!4444 = !DILocation(line: 39, column: 17, scope: !4439)
!4445 = !DILocalVariable(name: "p", scope: !4439, file: !4440, line: 41, type: !8)
!4446 = !DILocation(line: 41, column: 9, scope: !4439)
!4447 = !DILocation(line: 41, column: 21, scope: !4439)
!4448 = !DILocation(line: 41, column: 13, scope: !4439)
!4449 = !DILocation(line: 42, column: 8, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4439, file: !4440, line: 42, column: 7)
!4451 = !DILocation(line: 42, column: 10, scope: !4450)
!4452 = !DILocation(line: 42, column: 13, scope: !4450)
!4453 = !DILocation(line: 42, column: 15, scope: !4450)
!4454 = !DILocation(line: 42, column: 7, scope: !4439)
!4455 = !DILocation(line: 43, column: 5, scope: !4450)
!4456 = !DILocation(line: 44, column: 10, scope: !4439)
!4457 = !DILocation(line: 44, column: 3, scope: !4439)
!4458 = distinct !DISubprogram(name: "xrealloc", scope: !4440, file: !4440, line: 51, type: !4459, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!4459 = !DISubroutineType(types: !4460)
!4460 = !{!8, !8, !110}
!4461 = !DILocalVariable(name: "p", arg: 1, scope: !4458, file: !4440, line: 51, type: !8)
!4462 = !DILocation(line: 51, column: 17, scope: !4458)
!4463 = !DILocalVariable(name: "n", arg: 2, scope: !4458, file: !4440, line: 51, type: !110)
!4464 = !DILocation(line: 51, column: 27, scope: !4458)
!4465 = !DILocation(line: 53, column: 8, scope: !4466)
!4466 = distinct !DILexicalBlock(scope: !4458, file: !4440, line: 53, column: 7)
!4467 = !DILocation(line: 53, column: 10, scope: !4466)
!4468 = !DILocation(line: 53, column: 13, scope: !4466)
!4469 = !DILocation(line: 53, column: 7, scope: !4458)
!4470 = !DILocation(line: 57, column: 13, scope: !4471)
!4471 = distinct !DILexicalBlock(scope: !4466, file: !4440, line: 54, column: 5)
!4472 = !DILocation(line: 57, column: 7, scope: !4471)
!4473 = !DILocation(line: 58, column: 7, scope: !4471)
!4474 = !DILocation(line: 61, column: 16, scope: !4458)
!4475 = !DILocation(line: 61, column: 19, scope: !4458)
!4476 = !DILocation(line: 61, column: 7, scope: !4458)
!4477 = !DILocation(line: 61, column: 5, scope: !4458)
!4478 = !DILocation(line: 62, column: 8, scope: !4479)
!4479 = distinct !DILexicalBlock(scope: !4458, file: !4440, line: 62, column: 7)
!4480 = !DILocation(line: 62, column: 10, scope: !4479)
!4481 = !DILocation(line: 62, column: 13, scope: !4479)
!4482 = !DILocation(line: 62, column: 7, scope: !4458)
!4483 = !DILocation(line: 63, column: 5, scope: !4479)
!4484 = !DILocation(line: 64, column: 10, scope: !4458)
!4485 = !DILocation(line: 64, column: 3, scope: !4458)
!4486 = !DILocation(line: 65, column: 1, scope: !4458)
!4487 = !DILocalVariable(name: "p", arg: 1, scope: !4488, file: !4440, line: 51, type: !8)
!4488 = distinct !DISubprogram(name: "xrealloc", scope: !4440, file: !4440, line: 51, type: !4459, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4489, retainedNodes: !4)
!4489 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!4490 = !DILocalVariable(name: "n", arg: 2, scope: !4488, file: !4440, line: 51, type: !110)
!4491 = distinct !DISubprogram(name: "x2nrealloc", scope: !4492, file: !4492, line: 174, type: !4493, scopeLine: 175, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!4492 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4493 = !DISubroutineType(types: !4494)
!4494 = !{!8, !8, !4495, !110}
!4495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!4496 = !DILocalVariable(name: "p", arg: 1, scope: !4491, file: !4492, line: 174, type: !8)
!4497 = !DILocation(line: 174, column: 19, scope: !4491)
!4498 = !DILocalVariable(name: "pn", arg: 2, scope: !4491, file: !4492, line: 174, type: !4495)
!4499 = !DILocation(line: 174, column: 30, scope: !4491)
!4500 = !DILocalVariable(name: "s", arg: 3, scope: !4491, file: !4492, line: 174, type: !110)
!4501 = !DILocation(line: 174, column: 41, scope: !4491)
!4502 = !DILocalVariable(name: "n", scope: !4491, file: !4492, line: 176, type: !110)
!4503 = !DILocation(line: 176, column: 10, scope: !4491)
!4504 = !DILocation(line: 176, column: 15, scope: !4491)
!4505 = !DILocation(line: 176, column: 14, scope: !4491)
!4506 = !DILocation(line: 178, column: 9, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4491, file: !4492, line: 178, column: 7)
!4508 = !DILocation(line: 178, column: 7, scope: !4491)
!4509 = !DILocation(line: 180, column: 13, scope: !4510)
!4510 = distinct !DILexicalBlock(scope: !4511, file: !4492, line: 180, column: 11)
!4511 = distinct !DILexicalBlock(scope: !4507, file: !4492, line: 179, column: 5)
!4512 = !DILocation(line: 180, column: 11, scope: !4511)
!4513 = !DILocation(line: 188, column: 32, scope: !4514)
!4514 = distinct !DILexicalBlock(scope: !4510, file: !4492, line: 181, column: 9)
!4515 = !DILocation(line: 188, column: 30, scope: !4514)
!4516 = !DILocation(line: 188, column: 13, scope: !4514)
!4517 = !DILocation(line: 189, column: 17, scope: !4514)
!4518 = !DILocation(line: 189, column: 16, scope: !4514)
!4519 = !DILocation(line: 189, column: 13, scope: !4514)
!4520 = !DILocation(line: 190, column: 9, scope: !4514)
!4521 = !DILocation(line: 191, column: 11, scope: !4522)
!4522 = distinct !DILexicalBlock(scope: !4511, file: !4492, line: 191, column: 11)
!4523 = !DILocation(line: 191, column: 11, scope: !4511)
!4524 = !DILocation(line: 192, column: 9, scope: !4522)
!4525 = !DILocation(line: 193, column: 5, scope: !4511)
!4526 = !DILocation(line: 200, column: 71, scope: !4527)
!4527 = distinct !DILexicalBlock(scope: !4528, file: !4492, line: 200, column: 11)
!4528 = distinct !DILexicalBlock(scope: !4507, file: !4492, line: 195, column: 5)
!4529 = !DILocation(line: 200, column: 69, scope: !4527)
!4530 = !DILocation(line: 201, column: 14, scope: !4527)
!4531 = !DILocation(line: 201, column: 11, scope: !4527)
!4532 = !DILocation(line: 200, column: 11, scope: !4528)
!4533 = !DILocation(line: 202, column: 9, scope: !4527)
!4534 = !DILocation(line: 203, column: 12, scope: !4528)
!4535 = !DILocation(line: 203, column: 14, scope: !4528)
!4536 = !DILocation(line: 203, column: 18, scope: !4528)
!4537 = !DILocation(line: 203, column: 9, scope: !4528)
!4538 = !DILocation(line: 206, column: 9, scope: !4491)
!4539 = !DILocation(line: 206, column: 4, scope: !4491)
!4540 = !DILocation(line: 206, column: 7, scope: !4491)
!4541 = !DILocation(line: 207, column: 20, scope: !4491)
!4542 = !DILocation(line: 207, column: 23, scope: !4491)
!4543 = !DILocation(line: 207, column: 27, scope: !4491)
!4544 = !DILocation(line: 207, column: 25, scope: !4491)
!4545 = !DILocation(line: 207, column: 10, scope: !4491)
!4546 = !DILocation(line: 207, column: 3, scope: !4491)
!4547 = distinct !DISubprogram(name: "xcharalloc", scope: !4492, file: !4492, line: 216, type: !4548, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!4548 = !DISubroutineType(types: !4549)
!4549 = !{!6, !110}
!4550 = !DILocalVariable(name: "n", arg: 1, scope: !4547, file: !4492, line: 216, type: !110)
!4551 = !DILocation(line: 216, column: 20, scope: !4547)
!4552 = !DILocation(line: 218, column: 10, scope: !4547)
!4553 = !DILocation(line: 218, column: 3, scope: !4547)
!4554 = !DILocalVariable(name: "n", arg: 1, scope: !4555, file: !4492, line: 216, type: !110)
!4555 = distinct !DISubprogram(name: "xcharalloc", scope: !4492, file: !4492, line: 216, type: !4548, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4556, retainedNodes: !4)
!4556 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!4557 = distinct !DISubprogram(name: "xalloc_die", scope: !4558, file: !4558, line: 32, type: !1048, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!4558 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4559 = !DILocation(line: 34, column: 10, scope: !4557)
!4560 = !DILocation(line: 34, column: 33, scope: !4557)
!4561 = !DILocation(line: 34, column: 3, scope: !4557)
!4562 = !DILocation(line: 40, column: 3, scope: !4557)
!4563 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !4564, file: !4564, line: 86, type: !4565, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !306, retainedNodes: !4)
!4564 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4565 = !DISubroutineType(types: !4566)
!4566 = !{!110, !4567, !49, !110, !4568}
!4567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3334, size: 64)
!4568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4569, size: 64)
!4569 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !3308, line: 6, baseType: !4570)
!4570 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !3310, line: 21, baseType: !4571)
!4571 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3310, line: 13, size: 64, elements: !4572)
!4572 = !{!4573, !4574}
!4573 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !4571, file: !3310, line: 15, baseType: !53, size: 32)
!4574 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !4571, file: !3310, line: 20, baseType: !4575, size: 32, offset: 32)
!4575 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4571, file: !3310, line: 16, size: 32, elements: !4576)
!4576 = !{!4577, !4578}
!4577 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !4575, file: !3310, line: 18, baseType: !180, size: 32)
!4578 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !4575, file: !3310, line: 19, baseType: !82, size: 32)
!4579 = !DILocalVariable(name: "pwc", arg: 1, scope: !4563, file: !4564, line: 86, type: !4567)
!4580 = !DILocation(line: 86, column: 23, scope: !4563)
!4581 = !DILocalVariable(name: "s", arg: 2, scope: !4563, file: !4564, line: 86, type: !49)
!4582 = !DILocation(line: 86, column: 40, scope: !4563)
!4583 = !DILocalVariable(name: "n", arg: 3, scope: !4563, file: !4564, line: 86, type: !110)
!4584 = !DILocation(line: 86, column: 50, scope: !4563)
!4585 = !DILocalVariable(name: "ps", arg: 4, scope: !4563, file: !4564, line: 86, type: !4568)
!4586 = !DILocation(line: 86, column: 64, scope: !4563)
!4587 = !DILocalVariable(name: "ret", scope: !4563, file: !4564, line: 88, type: !110)
!4588 = !DILocation(line: 88, column: 10, scope: !4563)
!4589 = !DILocalVariable(name: "wc", scope: !4563, file: !4564, line: 89, type: !3334)
!4590 = !DILocation(line: 89, column: 11, scope: !4563)
!4591 = !DILocation(line: 105, column: 9, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4563, file: !4564, line: 105, column: 7)
!4593 = !DILocation(line: 105, column: 7, scope: !4563)
!4594 = !DILocation(line: 106, column: 9, scope: !4592)
!4595 = !DILocation(line: 106, column: 5, scope: !4592)
!4596 = !DILocation(line: 145, column: 18, scope: !4563)
!4597 = !DILocation(line: 145, column: 23, scope: !4563)
!4598 = !DILocation(line: 145, column: 26, scope: !4563)
!4599 = !DILocation(line: 145, column: 29, scope: !4563)
!4600 = !DILocation(line: 145, column: 9, scope: !4563)
!4601 = !DILocation(line: 145, column: 7, scope: !4563)
!4602 = !DILocation(line: 154, column: 22, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4563, file: !4564, line: 154, column: 7)
!4604 = !DILocation(line: 154, column: 19, scope: !4603)
!4605 = !DILocation(line: 154, column: 26, scope: !4603)
!4606 = !DILocation(line: 154, column: 29, scope: !4603)
!4607 = !DILocation(line: 154, column: 31, scope: !4603)
!4608 = !DILocation(line: 154, column: 36, scope: !4603)
!4609 = !DILocation(line: 154, column: 41, scope: !4603)
!4610 = !DILocation(line: 154, column: 7, scope: !4563)
!4611 = !DILocalVariable(name: "uc", scope: !4612, file: !4564, line: 156, type: !317)
!4612 = distinct !DILexicalBlock(scope: !4603, file: !4564, line: 155, column: 5)
!4613 = !DILocation(line: 156, column: 21, scope: !4612)
!4614 = !DILocation(line: 156, column: 27, scope: !4612)
!4615 = !DILocation(line: 156, column: 26, scope: !4612)
!4616 = !DILocation(line: 157, column: 14, scope: !4612)
!4617 = !DILocation(line: 157, column: 8, scope: !4612)
!4618 = !DILocation(line: 157, column: 12, scope: !4612)
!4619 = !DILocation(line: 158, column: 7, scope: !4612)
!4620 = !DILocation(line: 162, column: 10, scope: !4563)
!4621 = !DILocation(line: 162, column: 3, scope: !4563)
!4622 = !DILocation(line: 163, column: 1, scope: !4563)
!4623 = distinct !DISubprogram(name: "extract_trimmed_name", scope: !4624, file: !4624, line: 49, type: !4625, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !309, retainedNodes: !4)
!4624 = !DIFile(filename: "lib/readutmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4625 = !DISubroutineType(types: !4626)
!4626 = !{!6, !4627}
!4627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4628, size: 64)
!4628 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4629)
!4629 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !4630)
!4630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !4631)
!4631 = !{!4632, !4633, !4634, !4635, !4636, !4637, !4638, !4643, !4644, !4649, !4650}
!4632 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !4630, file: !72, line: 57, baseType: !14, size: 16)
!4633 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !4630, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!4634 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !4630, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!4635 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !4630, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!4636 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !4630, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!4637 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !4630, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!4638 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !4630, file: !72, line: 67, baseType: !4639, size: 32, offset: 2656)
!4639 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !4640)
!4640 = !{!4641, !4642}
!4641 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !4639, file: !72, line: 45, baseType: !14, size: 16)
!4642 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !4639, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!4643 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !4630, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!4644 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !4630, file: !72, line: 79, baseType: !4645, size: 64, offset: 2720)
!4645 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !4630, file: !72, line: 75, size: 64, elements: !4646)
!4646 = !{!4647, !4648}
!4647 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !4645, file: !72, line: 77, baseType: !96, size: 32)
!4648 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !4645, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!4649 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !4630, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!4650 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !4630, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!4651 = !DILocalVariable(name: "ut", arg: 1, scope: !4623, file: !4624, line: 49, type: !4627)
!4652 = !DILocation(line: 49, column: 42, scope: !4623)
!4653 = !DILocalVariable(name: "p", scope: !4623, file: !4624, line: 51, type: !6)
!4654 = !DILocation(line: 51, column: 9, scope: !4623)
!4655 = !DILocalVariable(name: "trimmed_name", scope: !4623, file: !4624, line: 51, type: !6)
!4656 = !DILocation(line: 51, column: 13, scope: !4623)
!4657 = !DILocation(line: 53, column: 18, scope: !4623)
!4658 = !DILocation(line: 53, column: 16, scope: !4623)
!4659 = !DILocation(line: 54, column: 12, scope: !4623)
!4660 = !DILocation(line: 54, column: 26, scope: !4623)
!4661 = !DILocation(line: 54, column: 3, scope: !4623)
!4662 = !DILocation(line: 58, column: 3, scope: !4623)
!4663 = !DILocation(line: 58, column: 39, scope: !4623)
!4664 = !DILocation(line: 59, column: 12, scope: !4665)
!4665 = distinct !DILexicalBlock(scope: !4623, file: !4624, line: 59, column: 3)
!4666 = !DILocation(line: 59, column: 35, scope: !4665)
!4667 = !DILocation(line: 59, column: 27, scope: !4665)
!4668 = !DILocation(line: 59, column: 25, scope: !4665)
!4669 = !DILocation(line: 59, column: 10, scope: !4665)
!4670 = !DILocation(line: 59, column: 8, scope: !4665)
!4671 = !DILocation(line: 60, column: 8, scope: !4672)
!4672 = distinct !DILexicalBlock(scope: !4665, file: !4624, line: 59, column: 3)
!4673 = !DILocation(line: 60, column: 23, scope: !4672)
!4674 = !DILocation(line: 60, column: 21, scope: !4672)
!4675 = !DILocation(line: 60, column: 25, scope: !4672)
!4676 = !DILocation(line: 60, column: 28, scope: !4672)
!4677 = !DILocation(line: 60, column: 34, scope: !4672)
!4678 = !DILocation(line: 0, scope: !4672)
!4679 = !DILocation(line: 59, column: 3, scope: !4665)
!4680 = !DILocation(line: 62, column: 5, scope: !4672)
!4681 = !DILocation(line: 61, column: 9, scope: !4672)
!4682 = !DILocation(line: 61, column: 13, scope: !4672)
!4683 = !DILocation(line: 59, column: 3, scope: !4672)
!4684 = distinct !{!4684, !4679, !4685}
!4685 = !DILocation(line: 62, column: 5, scope: !4665)
!4686 = !DILocation(line: 63, column: 10, scope: !4623)
!4687 = !DILocation(line: 63, column: 3, scope: !4623)
!4688 = distinct !DISubprogram(name: "read_utmp", scope: !4624, file: !4624, line: 92, type: !4689, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !309, retainedNodes: !4)
!4689 = !DISubroutineType(types: !4690)
!4690 = !{!53, !49, !4495, !4691, !53}
!4691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4692, size: 64)
!4692 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4629, size: 64)
!4693 = !DILocalVariable(name: "file", arg: 1, scope: !4688, file: !4624, line: 92, type: !49)
!4694 = !DILocation(line: 92, column: 24, scope: !4688)
!4695 = !DILocalVariable(name: "n_entries", arg: 2, scope: !4688, file: !4624, line: 92, type: !4495)
!4696 = !DILocation(line: 92, column: 38, scope: !4688)
!4697 = !DILocalVariable(name: "utmp_buf", arg: 3, scope: !4688, file: !4624, line: 92, type: !4691)
!4698 = !DILocation(line: 92, column: 63, scope: !4688)
!4699 = !DILocalVariable(name: "options", arg: 4, scope: !4688, file: !4624, line: 93, type: !53)
!4700 = !DILocation(line: 93, column: 16, scope: !4688)
!4701 = !DILocalVariable(name: "n_read", scope: !4688, file: !4624, line: 95, type: !110)
!4702 = !DILocation(line: 95, column: 10, scope: !4688)
!4703 = !DILocalVariable(name: "n_alloc", scope: !4688, file: !4624, line: 96, type: !110)
!4704 = !DILocation(line: 96, column: 10, scope: !4688)
!4705 = !DILocalVariable(name: "utmp", scope: !4688, file: !4624, line: 97, type: !4692)
!4706 = !DILocation(line: 97, column: 16, scope: !4688)
!4707 = !DILocalVariable(name: "u", scope: !4688, file: !4624, line: 98, type: !4692)
!4708 = !DILocation(line: 98, column: 16, scope: !4688)
!4709 = !DILocation(line: 104, column: 32, scope: !4688)
!4710 = !DILocation(line: 104, column: 3, scope: !4688)
!4711 = !DILocation(line: 106, column: 3, scope: !4688)
!4712 = !DILocation(line: 108, column: 3, scope: !4688)
!4713 = !DILocation(line: 108, column: 15, scope: !4688)
!4714 = !DILocation(line: 108, column: 13, scope: !4688)
!4715 = !DILocation(line: 108, column: 32, scope: !4688)
!4716 = !DILocation(line: 109, column: 31, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !4688, file: !4624, line: 109, column: 9)
!4718 = !DILocation(line: 109, column: 34, scope: !4717)
!4719 = !DILocation(line: 109, column: 9, scope: !4717)
!4720 = !DILocation(line: 109, column: 9, scope: !4688)
!4721 = !DILocation(line: 111, column: 13, scope: !4722)
!4722 = distinct !DILexicalBlock(scope: !4723, file: !4624, line: 111, column: 13)
!4723 = distinct !DILexicalBlock(scope: !4717, file: !4624, line: 110, column: 7)
!4724 = !DILocation(line: 111, column: 23, scope: !4722)
!4725 = !DILocation(line: 111, column: 20, scope: !4722)
!4726 = !DILocation(line: 111, column: 13, scope: !4723)
!4727 = !DILocation(line: 112, column: 30, scope: !4722)
!4728 = !DILocation(line: 112, column: 18, scope: !4722)
!4729 = !DILocation(line: 112, column: 16, scope: !4722)
!4730 = !DILocation(line: 112, column: 11, scope: !4722)
!4731 = !DILocation(line: 114, column: 9, scope: !4723)
!4732 = !DILocation(line: 114, column: 20, scope: !4723)
!4733 = !DILocation(line: 114, column: 27, scope: !4723)
!4734 = !DILocation(line: 114, column: 26, scope: !4723)
!4735 = !DILocation(line: 115, column: 7, scope: !4723)
!4736 = distinct !{!4736, !4712, !4737}
!4737 = !DILocation(line: 115, column: 7, scope: !4688)
!4738 = !DILocation(line: 117, column: 3, scope: !4688)
!4739 = !DILocation(line: 119, column: 16, scope: !4688)
!4740 = !DILocation(line: 119, column: 4, scope: !4688)
!4741 = !DILocation(line: 119, column: 14, scope: !4688)
!4742 = !DILocation(line: 120, column: 15, scope: !4688)
!4743 = !DILocation(line: 120, column: 4, scope: !4688)
!4744 = !DILocation(line: 120, column: 13, scope: !4688)
!4745 = !DILocation(line: 122, column: 3, scope: !4688)
!4746 = distinct !DISubprogram(name: "desirable_utmp_entry", scope: !4624, file: !4624, line: 69, type: !4747, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !309, retainedNodes: !4)
!4747 = !DISubroutineType(types: !4748)
!4748 = !{!18, !4627, !53}
!4749 = !DILocalVariable(name: "u", arg: 1, scope: !4746, file: !4624, line: 69, type: !4627)
!4750 = !DILocation(line: 69, column: 42, scope: !4746)
!4751 = !DILocalVariable(name: "options", arg: 2, scope: !4746, file: !4624, line: 69, type: !53)
!4752 = !DILocation(line: 69, column: 49, scope: !4746)
!4753 = !DILocalVariable(name: "user_proc", scope: !4746, file: !4624, line: 71, type: !18)
!4754 = !DILocation(line: 71, column: 8, scope: !4746)
!4755 = !DILocation(line: 71, column: 20, scope: !4746)
!4756 = !DILocation(line: 0, scope: !4746)
!4757 = !DILocation(line: 72, column: 8, scope: !4758)
!4758 = distinct !DILexicalBlock(scope: !4746, file: !4624, line: 72, column: 7)
!4759 = !DILocation(line: 72, column: 16, scope: !4758)
!4760 = !DILocation(line: 72, column: 42, scope: !4758)
!4761 = !DILocation(line: 72, column: 46, scope: !4758)
!4762 = !DILocation(line: 72, column: 7, scope: !4746)
!4763 = !DILocation(line: 73, column: 5, scope: !4758)
!4764 = !DILocation(line: 74, column: 8, scope: !4765)
!4765 = distinct !DILexicalBlock(scope: !4746, file: !4624, line: 74, column: 7)
!4766 = !DILocation(line: 74, column: 16, scope: !4765)
!4767 = !DILocation(line: 75, column: 7, scope: !4765)
!4768 = !DILocation(line: 75, column: 10, scope: !4765)
!4769 = !DILocation(line: 76, column: 7, scope: !4765)
!4770 = !DILocation(line: 76, column: 14, scope: !4765)
!4771 = !DILocation(line: 76, column: 12, scope: !4765)
!4772 = !DILocation(line: 77, column: 7, scope: !4765)
!4773 = !DILocation(line: 77, column: 17, scope: !4765)
!4774 = !DILocation(line: 77, column: 11, scope: !4765)
!4775 = !DILocation(line: 77, column: 32, scope: !4765)
!4776 = !DILocation(line: 77, column: 36, scope: !4765)
!4777 = !DILocation(line: 77, column: 39, scope: !4765)
!4778 = !DILocation(line: 77, column: 45, scope: !4765)
!4779 = !DILocation(line: 74, column: 7, scope: !4746)
!4780 = !DILocation(line: 78, column: 5, scope: !4765)
!4781 = !DILocation(line: 79, column: 3, scope: !4746)
!4782 = !DILocation(line: 80, column: 1, scope: !4746)
!4783 = distinct !DISubprogram(name: "c_strcasecmp", scope: !4784, file: !4784, line: 27, type: !4785, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!4784 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4785 = !DISubroutineType(types: !4786)
!4786 = !{!53, !49, !49}
!4787 = !DILocalVariable(name: "s1", arg: 1, scope: !4783, file: !4784, line: 27, type: !49)
!4788 = !DILocation(line: 27, column: 27, scope: !4783)
!4789 = !DILocalVariable(name: "s2", arg: 2, scope: !4783, file: !4784, line: 27, type: !49)
!4790 = !DILocation(line: 27, column: 43, scope: !4783)
!4791 = !DILocalVariable(name: "p1", scope: !4783, file: !4784, line: 29, type: !315)
!4792 = !DILocation(line: 29, column: 33, scope: !4783)
!4793 = !DILocation(line: 29, column: 62, scope: !4783)
!4794 = !DILocalVariable(name: "p2", scope: !4783, file: !4784, line: 30, type: !315)
!4795 = !DILocation(line: 30, column: 33, scope: !4783)
!4796 = !DILocation(line: 30, column: 62, scope: !4783)
!4797 = !DILocalVariable(name: "c1", scope: !4783, file: !4784, line: 31, type: !317)
!4798 = !DILocation(line: 31, column: 17, scope: !4783)
!4799 = !DILocalVariable(name: "c2", scope: !4783, file: !4784, line: 31, type: !317)
!4800 = !DILocation(line: 31, column: 21, scope: !4783)
!4801 = !DILocation(line: 33, column: 7, scope: !4802)
!4802 = distinct !DILexicalBlock(scope: !4783, file: !4784, line: 33, column: 7)
!4803 = !DILocation(line: 33, column: 13, scope: !4802)
!4804 = !DILocation(line: 33, column: 10, scope: !4802)
!4805 = !DILocation(line: 33, column: 7, scope: !4783)
!4806 = !DILocation(line: 34, column: 5, scope: !4802)
!4807 = !DILocation(line: 36, column: 3, scope: !4783)
!4808 = !DILocation(line: 38, column: 24, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4783, file: !4784, line: 37, column: 5)
!4810 = !DILocation(line: 38, column: 23, scope: !4809)
!4811 = !DILocation(line: 38, column: 12, scope: !4809)
!4812 = !DILocation(line: 38, column: 10, scope: !4809)
!4813 = !DILocation(line: 39, column: 24, scope: !4809)
!4814 = !DILocation(line: 39, column: 23, scope: !4809)
!4815 = !DILocation(line: 39, column: 12, scope: !4809)
!4816 = !DILocation(line: 39, column: 10, scope: !4809)
!4817 = !DILocation(line: 41, column: 11, scope: !4818)
!4818 = distinct !DILexicalBlock(scope: !4809, file: !4784, line: 41, column: 11)
!4819 = !DILocation(line: 41, column: 14, scope: !4818)
!4820 = !DILocation(line: 41, column: 11, scope: !4809)
!4821 = !DILocation(line: 42, column: 9, scope: !4818)
!4822 = !DILocation(line: 44, column: 7, scope: !4809)
!4823 = !DILocation(line: 45, column: 7, scope: !4809)
!4824 = !DILocation(line: 46, column: 5, scope: !4809)
!4825 = !DILocation(line: 47, column: 10, scope: !4783)
!4826 = !DILocation(line: 47, column: 16, scope: !4783)
!4827 = !DILocation(line: 47, column: 13, scope: !4783)
!4828 = distinct !{!4828, !4807, !4829}
!4829 = !DILocation(line: 47, column: 18, scope: !4783)
!4830 = !DILocation(line: 50, column: 12, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !4783, file: !4784, line: 49, column: 7)
!4832 = !DILocation(line: 50, column: 17, scope: !4831)
!4833 = !DILocation(line: 50, column: 15, scope: !4831)
!4834 = !DILocation(line: 50, column: 5, scope: !4831)
!4835 = !DILocation(line: 56, column: 1, scope: !4783)
!4836 = distinct !DISubprogram(name: "close_stream", scope: !4837, file: !4837, line: 56, type: !4838, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !318, retainedNodes: !4)
!4837 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4838 = !DISubroutineType(types: !4839)
!4839 = !{!53, !4840}
!4840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4841, size: 64)
!4841 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4137, line: 7, baseType: !4842)
!4842 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4139, line: 49, size: 1728, elements: !4843)
!4843 = !{!4844, !4845, !4846, !4847, !4848, !4849, !4850, !4851, !4852, !4853, !4854, !4855, !4856, !4857, !4859, !4860, !4861, !4862, !4863, !4864, !4865, !4866, !4867, !4868, !4869, !4870, !4871, !4872, !4873}
!4844 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4842, file: !4139, line: 51, baseType: !53, size: 32)
!4845 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4842, file: !4139, line: 54, baseType: !6, size: 64, offset: 64)
!4846 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4842, file: !4139, line: 55, baseType: !6, size: 64, offset: 128)
!4847 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4842, file: !4139, line: 56, baseType: !6, size: 64, offset: 192)
!4848 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4842, file: !4139, line: 57, baseType: !6, size: 64, offset: 256)
!4849 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4842, file: !4139, line: 58, baseType: !6, size: 64, offset: 320)
!4850 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4842, file: !4139, line: 59, baseType: !6, size: 64, offset: 384)
!4851 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4842, file: !4139, line: 60, baseType: !6, size: 64, offset: 448)
!4852 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4842, file: !4139, line: 61, baseType: !6, size: 64, offset: 512)
!4853 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4842, file: !4139, line: 64, baseType: !6, size: 64, offset: 576)
!4854 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4842, file: !4139, line: 65, baseType: !6, size: 64, offset: 640)
!4855 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4842, file: !4139, line: 66, baseType: !6, size: 64, offset: 704)
!4856 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4842, file: !4139, line: 68, baseType: !4154, size: 64, offset: 768)
!4857 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4842, file: !4139, line: 70, baseType: !4858, size: 64, offset: 832)
!4858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4842, size: 64)
!4859 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4842, file: !4139, line: 72, baseType: !53, size: 32, offset: 896)
!4860 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4842, file: !4139, line: 73, baseType: !53, size: 32, offset: 928)
!4861 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4842, file: !4139, line: 74, baseType: !1082, size: 64, offset: 960)
!4862 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4842, file: !4139, line: 77, baseType: !188, size: 16, offset: 1024)
!4863 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4842, file: !4139, line: 78, baseType: !4163, size: 8, offset: 1040)
!4864 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4842, file: !4139, line: 79, baseType: !4165, size: 8, offset: 1048)
!4865 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4842, file: !4139, line: 81, baseType: !4169, size: 64, offset: 1088)
!4866 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4842, file: !4139, line: 89, baseType: !4172, size: 64, offset: 1152)
!4867 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4842, file: !4139, line: 91, baseType: !4174, size: 64, offset: 1216)
!4868 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4842, file: !4139, line: 92, baseType: !4177, size: 64, offset: 1280)
!4869 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4842, file: !4139, line: 93, baseType: !4858, size: 64, offset: 1344)
!4870 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4842, file: !4139, line: 94, baseType: !8, size: 64, offset: 1408)
!4871 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4842, file: !4139, line: 95, baseType: !110, size: 64, offset: 1472)
!4872 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4842, file: !4139, line: 96, baseType: !53, size: 32, offset: 1536)
!4873 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4842, file: !4139, line: 98, baseType: !105, size: 160, offset: 1568)
!4874 = !DILocalVariable(name: "stream", arg: 1, scope: !4836, file: !4837, line: 56, type: !4840)
!4875 = !DILocation(line: 56, column: 21, scope: !4836)
!4876 = !DILocalVariable(name: "some_pending", scope: !4836, file: !4837, line: 58, type: !4877)
!4877 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18)
!4878 = !DILocation(line: 58, column: 14, scope: !4836)
!4879 = !DILocation(line: 58, column: 42, scope: !4836)
!4880 = !DILocation(line: 58, column: 30, scope: !4836)
!4881 = !DILocation(line: 58, column: 50, scope: !4836)
!4882 = !DILocalVariable(name: "prev_fail", scope: !4836, file: !4837, line: 59, type: !4877)
!4883 = !DILocation(line: 59, column: 14, scope: !4836)
!4884 = !DILocation(line: 59, column: 27, scope: !4836)
!4885 = !DILocation(line: 59, column: 43, scope: !4836)
!4886 = !DILocalVariable(name: "fclose_fail", scope: !4836, file: !4837, line: 60, type: !4877)
!4887 = !DILocation(line: 60, column: 14, scope: !4836)
!4888 = !DILocation(line: 60, column: 37, scope: !4836)
!4889 = !DILocation(line: 60, column: 29, scope: !4836)
!4890 = !DILocation(line: 60, column: 45, scope: !4836)
!4891 = !DILocation(line: 70, column: 7, scope: !4892)
!4892 = distinct !DILexicalBlock(scope: !4836, file: !4837, line: 70, column: 7)
!4893 = !DILocation(line: 70, column: 17, scope: !4892)
!4894 = !DILocation(line: 70, column: 21, scope: !4892)
!4895 = !DILocation(line: 70, column: 33, scope: !4892)
!4896 = !DILocation(line: 70, column: 37, scope: !4892)
!4897 = !DILocation(line: 70, column: 50, scope: !4892)
!4898 = !DILocation(line: 70, column: 53, scope: !4892)
!4899 = !DILocation(line: 70, column: 59, scope: !4892)
!4900 = !DILocation(line: 70, column: 7, scope: !4836)
!4901 = !DILocation(line: 72, column: 13, scope: !4902)
!4902 = distinct !DILexicalBlock(scope: !4903, file: !4837, line: 72, column: 11)
!4903 = distinct !DILexicalBlock(scope: !4892, file: !4837, line: 71, column: 5)
!4904 = !DILocation(line: 72, column: 11, scope: !4903)
!4905 = !DILocation(line: 73, column: 9, scope: !4902)
!4906 = !DILocation(line: 73, column: 15, scope: !4902)
!4907 = !DILocation(line: 74, column: 7, scope: !4903)
!4908 = !DILocation(line: 77, column: 3, scope: !4836)
!4909 = !DILocation(line: 78, column: 1, scope: !4836)
!4910 = !DILocalVariable(name: "stream", arg: 1, scope: !4911, file: !4837, line: 56, type: !4914)
!4911 = distinct !DISubprogram(name: "close_stream", scope: !4837, file: !4837, line: 56, type: !4912, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4948, retainedNodes: !4)
!4912 = !DISubroutineType(types: !4913)
!4913 = !{!53, !4914}
!4914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4915, size: 64)
!4915 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4137, line: 7, baseType: !4916)
!4916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4139, line: 49, size: 1728, elements: !4917)
!4917 = !{!4918, !4919, !4920, !4921, !4922, !4923, !4924, !4925, !4926, !4927, !4928, !4929, !4930, !4931, !4933, !4934, !4935, !4936, !4937, !4938, !4939, !4940, !4941, !4942, !4943, !4944, !4945, !4946, !4947}
!4918 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4916, file: !4139, line: 51, baseType: !53, size: 32)
!4919 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4916, file: !4139, line: 54, baseType: !6, size: 64, offset: 64)
!4920 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4916, file: !4139, line: 55, baseType: !6, size: 64, offset: 128)
!4921 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4916, file: !4139, line: 56, baseType: !6, size: 64, offset: 192)
!4922 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4916, file: !4139, line: 57, baseType: !6, size: 64, offset: 256)
!4923 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4916, file: !4139, line: 58, baseType: !6, size: 64, offset: 320)
!4924 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4916, file: !4139, line: 59, baseType: !6, size: 64, offset: 384)
!4925 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4916, file: !4139, line: 60, baseType: !6, size: 64, offset: 448)
!4926 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4916, file: !4139, line: 61, baseType: !6, size: 64, offset: 512)
!4927 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4916, file: !4139, line: 64, baseType: !6, size: 64, offset: 576)
!4928 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4916, file: !4139, line: 65, baseType: !6, size: 64, offset: 640)
!4929 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4916, file: !4139, line: 66, baseType: !6, size: 64, offset: 704)
!4930 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4916, file: !4139, line: 68, baseType: !4154, size: 64, offset: 768)
!4931 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4916, file: !4139, line: 70, baseType: !4932, size: 64, offset: 832)
!4932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4916, size: 64)
!4933 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4916, file: !4139, line: 72, baseType: !53, size: 32, offset: 896)
!4934 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4916, file: !4139, line: 73, baseType: !53, size: 32, offset: 928)
!4935 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4916, file: !4139, line: 74, baseType: !1082, size: 64, offset: 960)
!4936 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4916, file: !4139, line: 77, baseType: !188, size: 16, offset: 1024)
!4937 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4916, file: !4139, line: 78, baseType: !4163, size: 8, offset: 1040)
!4938 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4916, file: !4139, line: 79, baseType: !4165, size: 8, offset: 1048)
!4939 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4916, file: !4139, line: 81, baseType: !4169, size: 64, offset: 1088)
!4940 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4916, file: !4139, line: 89, baseType: !4172, size: 64, offset: 1152)
!4941 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4916, file: !4139, line: 91, baseType: !4174, size: 64, offset: 1216)
!4942 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4916, file: !4139, line: 92, baseType: !4177, size: 64, offset: 1280)
!4943 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4916, file: !4139, line: 93, baseType: !4932, size: 64, offset: 1344)
!4944 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4916, file: !4139, line: 94, baseType: !8, size: 64, offset: 1408)
!4945 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4916, file: !4139, line: 95, baseType: !110, size: 64, offset: 1472)
!4946 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4916, file: !4139, line: 96, baseType: !53, size: 32, offset: 1536)
!4947 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4916, file: !4139, line: 98, baseType: !105, size: 160, offset: 1568)
!4948 = distinct !DICompileUnit(language: DW_LANG_C99, file: !319, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!4949 = !DILocalVariable(name: "some_pending", scope: !4911, file: !4837, line: 58, type: !4877)
!4950 = !DILocalVariable(name: "prev_fail", scope: !4911, file: !4837, line: 59, type: !4877)
!4951 = !DILocalVariable(name: "fclose_fail", scope: !4911, file: !4837, line: 60, type: !4877)
!4952 = distinct !DISubprogram(name: "locale_charset", scope: !4953, file: !4953, line: 831, type: !4954, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !320, retainedNodes: !4)
!4953 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4954 = !DISubroutineType(types: !4955)
!4955 = !{!49}
!4956 = !DILocalVariable(name: "codeset", scope: !4952, file: !4953, line: 833, type: !49)
!4957 = !DILocation(line: 833, column: 15, scope: !4952)
!4958 = !DILocation(line: 847, column: 13, scope: !4952)
!4959 = !DILocation(line: 847, column: 11, scope: !4952)
!4960 = !DILocation(line: 911, column: 7, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4952, file: !4953, line: 911, column: 7)
!4962 = !DILocation(line: 911, column: 15, scope: !4961)
!4963 = !DILocation(line: 911, column: 7, scope: !4952)
!4964 = !DILocation(line: 913, column: 13, scope: !4961)
!4965 = !DILocation(line: 913, column: 5, scope: !4961)
!4966 = !DILocation(line: 1070, column: 13, scope: !4967)
!4967 = distinct !DILexicalBlock(scope: !4968, file: !4953, line: 1070, column: 13)
!4968 = distinct !DILexicalBlock(scope: !4969, file: !4953, line: 1060, column: 7)
!4969 = distinct !DILexicalBlock(scope: !4952, file: !4953, line: 1019, column: 3)
!4970 = !DILocation(line: 1070, column: 24, scope: !4967)
!4971 = !DILocation(line: 1070, column: 13, scope: !4968)
!4972 = !DILocation(line: 1071, column: 19, scope: !4967)
!4973 = !DILocation(line: 1071, column: 11, scope: !4967)
!4974 = !DILocation(line: 1158, column: 10, scope: !4952)
!4975 = !DILocation(line: 1158, column: 3, scope: !4952)
!4976 = !DILocalVariable(name: "codeset", scope: !4977, file: !4953, line: 833, type: !49)
!4977 = distinct !DISubprogram(name: "locale_charset", scope: !4953, file: !4953, line: 831, type: !4954, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4978, retainedNodes: !4)
!4978 = distinct !DICompileUnit(language: DW_LANG_C99, file: !321, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!4979 = distinct !DISubprogram(name: "rpl_fclose", scope: !4980, file: !4980, line: 58, type: !4981, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !322, retainedNodes: !4)
!4980 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4981 = !DISubroutineType(types: !4982)
!4982 = !{!53, !4983}
!4983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4984, size: 64)
!4984 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4137, line: 7, baseType: !4985)
!4985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4139, line: 49, size: 1728, elements: !4986)
!4986 = !{!4987, !4988, !4989, !4990, !4991, !4992, !4993, !4994, !4995, !4996, !4997, !4998, !4999, !5000, !5002, !5003, !5004, !5005, !5006, !5007, !5008, !5009, !5010, !5011, !5012, !5013, !5014, !5015, !5016}
!4987 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4985, file: !4139, line: 51, baseType: !53, size: 32)
!4988 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4985, file: !4139, line: 54, baseType: !6, size: 64, offset: 64)
!4989 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4985, file: !4139, line: 55, baseType: !6, size: 64, offset: 128)
!4990 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4985, file: !4139, line: 56, baseType: !6, size: 64, offset: 192)
!4991 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4985, file: !4139, line: 57, baseType: !6, size: 64, offset: 256)
!4992 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4985, file: !4139, line: 58, baseType: !6, size: 64, offset: 320)
!4993 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4985, file: !4139, line: 59, baseType: !6, size: 64, offset: 384)
!4994 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4985, file: !4139, line: 60, baseType: !6, size: 64, offset: 448)
!4995 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4985, file: !4139, line: 61, baseType: !6, size: 64, offset: 512)
!4996 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4985, file: !4139, line: 64, baseType: !6, size: 64, offset: 576)
!4997 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4985, file: !4139, line: 65, baseType: !6, size: 64, offset: 640)
!4998 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4985, file: !4139, line: 66, baseType: !6, size: 64, offset: 704)
!4999 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4985, file: !4139, line: 68, baseType: !4154, size: 64, offset: 768)
!5000 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4985, file: !4139, line: 70, baseType: !5001, size: 64, offset: 832)
!5001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4985, size: 64)
!5002 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4985, file: !4139, line: 72, baseType: !53, size: 32, offset: 896)
!5003 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4985, file: !4139, line: 73, baseType: !53, size: 32, offset: 928)
!5004 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4985, file: !4139, line: 74, baseType: !1082, size: 64, offset: 960)
!5005 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4985, file: !4139, line: 77, baseType: !188, size: 16, offset: 1024)
!5006 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4985, file: !4139, line: 78, baseType: !4163, size: 8, offset: 1040)
!5007 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4985, file: !4139, line: 79, baseType: !4165, size: 8, offset: 1048)
!5008 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4985, file: !4139, line: 81, baseType: !4169, size: 64, offset: 1088)
!5009 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4985, file: !4139, line: 89, baseType: !4172, size: 64, offset: 1152)
!5010 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4985, file: !4139, line: 91, baseType: !4174, size: 64, offset: 1216)
!5011 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4985, file: !4139, line: 92, baseType: !4177, size: 64, offset: 1280)
!5012 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4985, file: !4139, line: 93, baseType: !5001, size: 64, offset: 1344)
!5013 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4985, file: !4139, line: 94, baseType: !8, size: 64, offset: 1408)
!5014 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4985, file: !4139, line: 95, baseType: !110, size: 64, offset: 1472)
!5015 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4985, file: !4139, line: 96, baseType: !53, size: 32, offset: 1536)
!5016 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4985, file: !4139, line: 98, baseType: !105, size: 160, offset: 1568)
!5017 = !DILocalVariable(name: "fp", arg: 1, scope: !4979, file: !4980, line: 58, type: !4983)
!5018 = !DILocation(line: 58, column: 19, scope: !4979)
!5019 = !DILocalVariable(name: "saved_errno", scope: !4979, file: !4980, line: 60, type: !53)
!5020 = !DILocation(line: 60, column: 7, scope: !4979)
!5021 = !DILocalVariable(name: "fd", scope: !4979, file: !4980, line: 61, type: !53)
!5022 = !DILocation(line: 61, column: 7, scope: !4979)
!5023 = !DILocalVariable(name: "result", scope: !4979, file: !4980, line: 62, type: !53)
!5024 = !DILocation(line: 62, column: 7, scope: !4979)
!5025 = !DILocation(line: 65, column: 16, scope: !4979)
!5026 = !DILocation(line: 65, column: 8, scope: !4979)
!5027 = !DILocation(line: 65, column: 6, scope: !4979)
!5028 = !DILocation(line: 66, column: 7, scope: !5029)
!5029 = distinct !DILexicalBlock(scope: !4979, file: !4980, line: 66, column: 7)
!5030 = !DILocation(line: 66, column: 10, scope: !5029)
!5031 = !DILocation(line: 66, column: 7, scope: !4979)
!5032 = !DILocation(line: 67, column: 28, scope: !5029)
!5033 = !DILocation(line: 67, column: 12, scope: !5029)
!5034 = !DILocation(line: 67, column: 5, scope: !5029)
!5035 = !DILocation(line: 72, column: 9, scope: !5036)
!5036 = distinct !DILexicalBlock(scope: !4979, file: !4980, line: 72, column: 7)
!5037 = !DILocation(line: 72, column: 23, scope: !5036)
!5038 = !DILocation(line: 72, column: 41, scope: !5036)
!5039 = !DILocation(line: 72, column: 33, scope: !5036)
!5040 = !DILocation(line: 72, column: 26, scope: !5036)
!5041 = !DILocation(line: 72, column: 59, scope: !5036)
!5042 = !DILocation(line: 73, column: 7, scope: !5036)
!5043 = !DILocation(line: 73, column: 18, scope: !5036)
!5044 = !DILocation(line: 73, column: 10, scope: !5036)
!5045 = !DILocation(line: 72, column: 7, scope: !4979)
!5046 = !DILocation(line: 74, column: 19, scope: !5036)
!5047 = !DILocation(line: 74, column: 17, scope: !5036)
!5048 = !DILocation(line: 74, column: 5, scope: !5036)
!5049 = !DILocation(line: 100, column: 28, scope: !4979)
!5050 = !DILocation(line: 100, column: 12, scope: !4979)
!5051 = !DILocation(line: 100, column: 10, scope: !4979)
!5052 = !DILocation(line: 105, column: 7, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !4979, file: !4980, line: 105, column: 7)
!5054 = !DILocation(line: 105, column: 19, scope: !5053)
!5055 = !DILocation(line: 105, column: 7, scope: !4979)
!5056 = !DILocation(line: 107, column: 15, scope: !5057)
!5057 = distinct !DILexicalBlock(scope: !5053, file: !4980, line: 106, column: 5)
!5058 = !DILocation(line: 107, column: 7, scope: !5057)
!5059 = !DILocation(line: 107, column: 13, scope: !5057)
!5060 = !DILocation(line: 108, column: 14, scope: !5057)
!5061 = !DILocation(line: 109, column: 5, scope: !5057)
!5062 = !DILocation(line: 111, column: 10, scope: !4979)
!5063 = !DILocation(line: 111, column: 3, scope: !4979)
!5064 = !DILocation(line: 112, column: 1, scope: !4979)
!5065 = !DILocalVariable(name: "fp", arg: 1, scope: !5066, file: !4980, line: 58, type: !5069)
!5066 = distinct !DISubprogram(name: "rpl_fclose", scope: !4980, file: !4980, line: 58, type: !5067, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5103, retainedNodes: !4)
!5067 = !DISubroutineType(types: !5068)
!5068 = !{!53, !5069}
!5069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5070, size: 64)
!5070 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4137, line: 7, baseType: !5071)
!5071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4139, line: 49, size: 1728, elements: !5072)
!5072 = !{!5073, !5074, !5075, !5076, !5077, !5078, !5079, !5080, !5081, !5082, !5083, !5084, !5085, !5086, !5088, !5089, !5090, !5091, !5092, !5093, !5094, !5095, !5096, !5097, !5098, !5099, !5100, !5101, !5102}
!5073 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5071, file: !4139, line: 51, baseType: !53, size: 32)
!5074 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5071, file: !4139, line: 54, baseType: !6, size: 64, offset: 64)
!5075 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5071, file: !4139, line: 55, baseType: !6, size: 64, offset: 128)
!5076 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5071, file: !4139, line: 56, baseType: !6, size: 64, offset: 192)
!5077 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5071, file: !4139, line: 57, baseType: !6, size: 64, offset: 256)
!5078 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5071, file: !4139, line: 58, baseType: !6, size: 64, offset: 320)
!5079 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5071, file: !4139, line: 59, baseType: !6, size: 64, offset: 384)
!5080 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5071, file: !4139, line: 60, baseType: !6, size: 64, offset: 448)
!5081 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5071, file: !4139, line: 61, baseType: !6, size: 64, offset: 512)
!5082 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5071, file: !4139, line: 64, baseType: !6, size: 64, offset: 576)
!5083 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5071, file: !4139, line: 65, baseType: !6, size: 64, offset: 640)
!5084 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5071, file: !4139, line: 66, baseType: !6, size: 64, offset: 704)
!5085 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5071, file: !4139, line: 68, baseType: !4154, size: 64, offset: 768)
!5086 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5071, file: !4139, line: 70, baseType: !5087, size: 64, offset: 832)
!5087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5071, size: 64)
!5088 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5071, file: !4139, line: 72, baseType: !53, size: 32, offset: 896)
!5089 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5071, file: !4139, line: 73, baseType: !53, size: 32, offset: 928)
!5090 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5071, file: !4139, line: 74, baseType: !1082, size: 64, offset: 960)
!5091 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5071, file: !4139, line: 77, baseType: !188, size: 16, offset: 1024)
!5092 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5071, file: !4139, line: 78, baseType: !4163, size: 8, offset: 1040)
!5093 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5071, file: !4139, line: 79, baseType: !4165, size: 8, offset: 1048)
!5094 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5071, file: !4139, line: 81, baseType: !4169, size: 64, offset: 1088)
!5095 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5071, file: !4139, line: 89, baseType: !4172, size: 64, offset: 1152)
!5096 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5071, file: !4139, line: 91, baseType: !4174, size: 64, offset: 1216)
!5097 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5071, file: !4139, line: 92, baseType: !4177, size: 64, offset: 1280)
!5098 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5071, file: !4139, line: 93, baseType: !5087, size: 64, offset: 1344)
!5099 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5071, file: !4139, line: 94, baseType: !8, size: 64, offset: 1408)
!5100 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5071, file: !4139, line: 95, baseType: !110, size: 64, offset: 1472)
!5101 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5071, file: !4139, line: 96, baseType: !53, size: 32, offset: 1536)
!5102 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5071, file: !4139, line: 98, baseType: !105, size: 160, offset: 1568)
!5103 = distinct !DICompileUnit(language: DW_LANG_C99, file: !323, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!5104 = !DILocalVariable(name: "saved_errno", scope: !5066, file: !4980, line: 60, type: !53)
!5105 = !DILocalVariable(name: "fd", scope: !5066, file: !4980, line: 61, type: !53)
!5106 = !DILocalVariable(name: "result", scope: !5066, file: !4980, line: 62, type: !53)
!5107 = distinct !DISubprogram(name: "rpl_fflush", scope: !5108, file: !5108, line: 129, type: !5109, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !324, retainedNodes: !4)
!5108 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5109 = !DISubroutineType(types: !5110)
!5110 = !{!53, !5111}
!5111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5112, size: 64)
!5112 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4137, line: 7, baseType: !5113)
!5113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4139, line: 49, size: 1728, elements: !5114)
!5114 = !{!5115, !5116, !5117, !5118, !5119, !5120, !5121, !5122, !5123, !5124, !5125, !5126, !5127, !5128, !5130, !5131, !5132, !5133, !5134, !5135, !5136, !5137, !5138, !5139, !5140, !5141, !5142, !5143, !5144}
!5115 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5113, file: !4139, line: 51, baseType: !53, size: 32)
!5116 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5113, file: !4139, line: 54, baseType: !6, size: 64, offset: 64)
!5117 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5113, file: !4139, line: 55, baseType: !6, size: 64, offset: 128)
!5118 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5113, file: !4139, line: 56, baseType: !6, size: 64, offset: 192)
!5119 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5113, file: !4139, line: 57, baseType: !6, size: 64, offset: 256)
!5120 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5113, file: !4139, line: 58, baseType: !6, size: 64, offset: 320)
!5121 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5113, file: !4139, line: 59, baseType: !6, size: 64, offset: 384)
!5122 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5113, file: !4139, line: 60, baseType: !6, size: 64, offset: 448)
!5123 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5113, file: !4139, line: 61, baseType: !6, size: 64, offset: 512)
!5124 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5113, file: !4139, line: 64, baseType: !6, size: 64, offset: 576)
!5125 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5113, file: !4139, line: 65, baseType: !6, size: 64, offset: 640)
!5126 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5113, file: !4139, line: 66, baseType: !6, size: 64, offset: 704)
!5127 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5113, file: !4139, line: 68, baseType: !4154, size: 64, offset: 768)
!5128 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5113, file: !4139, line: 70, baseType: !5129, size: 64, offset: 832)
!5129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5113, size: 64)
!5130 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5113, file: !4139, line: 72, baseType: !53, size: 32, offset: 896)
!5131 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5113, file: !4139, line: 73, baseType: !53, size: 32, offset: 928)
!5132 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5113, file: !4139, line: 74, baseType: !1082, size: 64, offset: 960)
!5133 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5113, file: !4139, line: 77, baseType: !188, size: 16, offset: 1024)
!5134 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5113, file: !4139, line: 78, baseType: !4163, size: 8, offset: 1040)
!5135 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5113, file: !4139, line: 79, baseType: !4165, size: 8, offset: 1048)
!5136 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5113, file: !4139, line: 81, baseType: !4169, size: 64, offset: 1088)
!5137 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5113, file: !4139, line: 89, baseType: !4172, size: 64, offset: 1152)
!5138 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5113, file: !4139, line: 91, baseType: !4174, size: 64, offset: 1216)
!5139 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5113, file: !4139, line: 92, baseType: !4177, size: 64, offset: 1280)
!5140 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5113, file: !4139, line: 93, baseType: !5129, size: 64, offset: 1344)
!5141 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5113, file: !4139, line: 94, baseType: !8, size: 64, offset: 1408)
!5142 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5113, file: !4139, line: 95, baseType: !110, size: 64, offset: 1472)
!5143 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5113, file: !4139, line: 96, baseType: !53, size: 32, offset: 1536)
!5144 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5113, file: !4139, line: 98, baseType: !105, size: 160, offset: 1568)
!5145 = !DILocalVariable(name: "stream", arg: 1, scope: !5107, file: !5108, line: 129, type: !5111)
!5146 = !DILocation(line: 129, column: 19, scope: !5107)
!5147 = !DILocation(line: 150, column: 7, scope: !5148)
!5148 = distinct !DILexicalBlock(scope: !5107, file: !5108, line: 150, column: 7)
!5149 = !DILocation(line: 150, column: 14, scope: !5148)
!5150 = !DILocation(line: 150, column: 22, scope: !5148)
!5151 = !DILocation(line: 150, column: 27, scope: !5148)
!5152 = !DILocation(line: 150, column: 7, scope: !5107)
!5153 = !DILocation(line: 151, column: 20, scope: !5148)
!5154 = !DILocation(line: 151, column: 12, scope: !5148)
!5155 = !DILocation(line: 151, column: 5, scope: !5148)
!5156 = !DILocation(line: 156, column: 44, scope: !5107)
!5157 = !DILocation(line: 156, column: 3, scope: !5107)
!5158 = !DILocation(line: 158, column: 18, scope: !5107)
!5159 = !DILocation(line: 158, column: 10, scope: !5107)
!5160 = !DILocation(line: 158, column: 3, scope: !5107)
!5161 = !DILocation(line: 235, column: 1, scope: !5107)
!5162 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !5108, file: !5108, line: 41, type: !5163, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !324, retainedNodes: !4)
!5163 = !DISubroutineType(types: !5164)
!5164 = !{null, !5111}
!5165 = !DILocalVariable(name: "fp", arg: 1, scope: !5162, file: !5108, line: 41, type: !5111)
!5166 = !DILocation(line: 41, column: 48, scope: !5162)
!5167 = !DILocation(line: 43, column: 7, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5162, file: !5108, line: 43, column: 7)
!5169 = !DILocation(line: 43, column: 11, scope: !5168)
!5170 = !DILocation(line: 43, column: 18, scope: !5168)
!5171 = !DILocation(line: 43, column: 7, scope: !5162)
!5172 = !DILocation(line: 45, column: 13, scope: !5168)
!5173 = !DILocation(line: 45, column: 5, scope: !5168)
!5174 = !DILocation(line: 46, column: 1, scope: !5162)
!5175 = !DILocalVariable(name: "fp", arg: 1, scope: !5176, file: !5108, line: 41, type: !5179)
!5176 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !5108, file: !5108, line: 41, type: !5177, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5213, retainedNodes: !4)
!5177 = !DISubroutineType(types: !5178)
!5178 = !{null, !5179}
!5179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5180, size: 64)
!5180 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4137, line: 7, baseType: !5181)
!5181 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4139, line: 49, size: 1728, elements: !5182)
!5182 = !{!5183, !5184, !5185, !5186, !5187, !5188, !5189, !5190, !5191, !5192, !5193, !5194, !5195, !5196, !5198, !5199, !5200, !5201, !5202, !5203, !5204, !5205, !5206, !5207, !5208, !5209, !5210, !5211, !5212}
!5183 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5181, file: !4139, line: 51, baseType: !53, size: 32)
!5184 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5181, file: !4139, line: 54, baseType: !6, size: 64, offset: 64)
!5185 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5181, file: !4139, line: 55, baseType: !6, size: 64, offset: 128)
!5186 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5181, file: !4139, line: 56, baseType: !6, size: 64, offset: 192)
!5187 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5181, file: !4139, line: 57, baseType: !6, size: 64, offset: 256)
!5188 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5181, file: !4139, line: 58, baseType: !6, size: 64, offset: 320)
!5189 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5181, file: !4139, line: 59, baseType: !6, size: 64, offset: 384)
!5190 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5181, file: !4139, line: 60, baseType: !6, size: 64, offset: 448)
!5191 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5181, file: !4139, line: 61, baseType: !6, size: 64, offset: 512)
!5192 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5181, file: !4139, line: 64, baseType: !6, size: 64, offset: 576)
!5193 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5181, file: !4139, line: 65, baseType: !6, size: 64, offset: 640)
!5194 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5181, file: !4139, line: 66, baseType: !6, size: 64, offset: 704)
!5195 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5181, file: !4139, line: 68, baseType: !4154, size: 64, offset: 768)
!5196 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5181, file: !4139, line: 70, baseType: !5197, size: 64, offset: 832)
!5197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5181, size: 64)
!5198 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5181, file: !4139, line: 72, baseType: !53, size: 32, offset: 896)
!5199 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5181, file: !4139, line: 73, baseType: !53, size: 32, offset: 928)
!5200 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5181, file: !4139, line: 74, baseType: !1082, size: 64, offset: 960)
!5201 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5181, file: !4139, line: 77, baseType: !188, size: 16, offset: 1024)
!5202 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5181, file: !4139, line: 78, baseType: !4163, size: 8, offset: 1040)
!5203 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5181, file: !4139, line: 79, baseType: !4165, size: 8, offset: 1048)
!5204 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5181, file: !4139, line: 81, baseType: !4169, size: 64, offset: 1088)
!5205 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5181, file: !4139, line: 89, baseType: !4172, size: 64, offset: 1152)
!5206 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5181, file: !4139, line: 91, baseType: !4174, size: 64, offset: 1216)
!5207 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5181, file: !4139, line: 92, baseType: !4177, size: 64, offset: 1280)
!5208 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5181, file: !4139, line: 93, baseType: !5197, size: 64, offset: 1344)
!5209 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5181, file: !4139, line: 94, baseType: !8, size: 64, offset: 1408)
!5210 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5181, file: !4139, line: 95, baseType: !110, size: 64, offset: 1472)
!5211 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5181, file: !4139, line: 96, baseType: !53, size: 32, offset: 1536)
!5212 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5181, file: !4139, line: 98, baseType: !105, size: 160, offset: 1568)
!5213 = distinct !DICompileUnit(language: DW_LANG_C99, file: !325, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!5214 = distinct !DISubprogram(name: "rpl_fseeko", scope: !5215, file: !5215, line: 28, type: !5216, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !326, retainedNodes: !4)
!5215 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5216 = !DISubroutineType(types: !5217)
!5217 = !{!53, !5218, !5252, !53}
!5218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5219, size: 64)
!5219 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4137, line: 7, baseType: !5220)
!5220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4139, line: 49, size: 1728, elements: !5221)
!5221 = !{!5222, !5223, !5224, !5225, !5226, !5227, !5228, !5229, !5230, !5231, !5232, !5233, !5234, !5235, !5237, !5238, !5239, !5240, !5241, !5242, !5243, !5244, !5245, !5246, !5247, !5248, !5249, !5250, !5251}
!5222 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5220, file: !4139, line: 51, baseType: !53, size: 32)
!5223 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5220, file: !4139, line: 54, baseType: !6, size: 64, offset: 64)
!5224 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5220, file: !4139, line: 55, baseType: !6, size: 64, offset: 128)
!5225 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5220, file: !4139, line: 56, baseType: !6, size: 64, offset: 192)
!5226 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5220, file: !4139, line: 57, baseType: !6, size: 64, offset: 256)
!5227 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5220, file: !4139, line: 58, baseType: !6, size: 64, offset: 320)
!5228 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5220, file: !4139, line: 59, baseType: !6, size: 64, offset: 384)
!5229 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5220, file: !4139, line: 60, baseType: !6, size: 64, offset: 448)
!5230 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5220, file: !4139, line: 61, baseType: !6, size: 64, offset: 512)
!5231 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5220, file: !4139, line: 64, baseType: !6, size: 64, offset: 576)
!5232 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5220, file: !4139, line: 65, baseType: !6, size: 64, offset: 640)
!5233 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5220, file: !4139, line: 66, baseType: !6, size: 64, offset: 704)
!5234 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5220, file: !4139, line: 68, baseType: !4154, size: 64, offset: 768)
!5235 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5220, file: !4139, line: 70, baseType: !5236, size: 64, offset: 832)
!5236 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5220, size: 64)
!5237 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5220, file: !4139, line: 72, baseType: !53, size: 32, offset: 896)
!5238 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5220, file: !4139, line: 73, baseType: !53, size: 32, offset: 928)
!5239 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5220, file: !4139, line: 74, baseType: !1082, size: 64, offset: 960)
!5240 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5220, file: !4139, line: 77, baseType: !188, size: 16, offset: 1024)
!5241 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5220, file: !4139, line: 78, baseType: !4163, size: 8, offset: 1040)
!5242 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5220, file: !4139, line: 79, baseType: !4165, size: 8, offset: 1048)
!5243 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5220, file: !4139, line: 81, baseType: !4169, size: 64, offset: 1088)
!5244 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5220, file: !4139, line: 89, baseType: !4172, size: 64, offset: 1152)
!5245 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5220, file: !4139, line: 91, baseType: !4174, size: 64, offset: 1216)
!5246 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5220, file: !4139, line: 92, baseType: !4177, size: 64, offset: 1280)
!5247 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5220, file: !4139, line: 93, baseType: !5236, size: 64, offset: 1344)
!5248 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5220, file: !4139, line: 94, baseType: !8, size: 64, offset: 1408)
!5249 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5220, file: !4139, line: 95, baseType: !110, size: 64, offset: 1472)
!5250 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5220, file: !4139, line: 96, baseType: !53, size: 32, offset: 1536)
!5251 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5220, file: !4139, line: 98, baseType: !105, size: 160, offset: 1568)
!5252 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !4424, line: 63, baseType: !1082)
!5253 = !DILocalVariable(name: "fp", arg: 1, scope: !5214, file: !5215, line: 28, type: !5218)
!5254 = !DILocation(line: 28, column: 15, scope: !5214)
!5255 = !DILocalVariable(name: "offset", arg: 2, scope: !5214, file: !5215, line: 28, type: !5252)
!5256 = !DILocation(line: 28, column: 25, scope: !5214)
!5257 = !DILocalVariable(name: "whence", arg: 3, scope: !5214, file: !5215, line: 28, type: !53)
!5258 = !DILocation(line: 28, column: 37, scope: !5214)
!5259 = !DILocation(line: 52, column: 7, scope: !5260)
!5260 = distinct !DILexicalBlock(scope: !5214, file: !5215, line: 52, column: 7)
!5261 = !DILocation(line: 52, column: 11, scope: !5260)
!5262 = !DILocation(line: 52, column: 27, scope: !5260)
!5263 = !DILocation(line: 52, column: 31, scope: !5260)
!5264 = !DILocation(line: 52, column: 24, scope: !5260)
!5265 = !DILocation(line: 53, column: 7, scope: !5260)
!5266 = !DILocation(line: 53, column: 10, scope: !5260)
!5267 = !DILocation(line: 53, column: 14, scope: !5260)
!5268 = !DILocation(line: 53, column: 31, scope: !5260)
!5269 = !DILocation(line: 53, column: 35, scope: !5260)
!5270 = !DILocation(line: 53, column: 28, scope: !5260)
!5271 = !DILocation(line: 54, column: 7, scope: !5260)
!5272 = !DILocation(line: 54, column: 10, scope: !5260)
!5273 = !DILocation(line: 54, column: 14, scope: !5260)
!5274 = !DILocation(line: 54, column: 28, scope: !5260)
!5275 = !DILocation(line: 52, column: 7, scope: !5214)
!5276 = !DILocalVariable(name: "pos", scope: !5277, file: !5215, line: 117, type: !5252)
!5277 = distinct !DILexicalBlock(scope: !5260, file: !5215, line: 113, column: 5)
!5278 = !DILocation(line: 117, column: 13, scope: !5277)
!5279 = !DILocation(line: 117, column: 34, scope: !5277)
!5280 = !DILocation(line: 117, column: 26, scope: !5277)
!5281 = !DILocation(line: 117, column: 39, scope: !5277)
!5282 = !DILocation(line: 117, column: 47, scope: !5277)
!5283 = !DILocation(line: 117, column: 19, scope: !5277)
!5284 = !DILocation(line: 118, column: 11, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5277, file: !5215, line: 118, column: 11)
!5286 = !DILocation(line: 118, column: 15, scope: !5285)
!5287 = !DILocation(line: 118, column: 11, scope: !5277)
!5288 = !DILocation(line: 124, column: 11, scope: !5289)
!5289 = distinct !DILexicalBlock(scope: !5285, file: !5215, line: 119, column: 9)
!5290 = !DILocation(line: 129, column: 7, scope: !5277)
!5291 = !DILocation(line: 129, column: 11, scope: !5277)
!5292 = !DILocation(line: 129, column: 18, scope: !5277)
!5293 = !DILocation(line: 130, column: 21, scope: !5277)
!5294 = !DILocation(line: 130, column: 7, scope: !5277)
!5295 = !DILocation(line: 130, column: 11, scope: !5277)
!5296 = !DILocation(line: 130, column: 19, scope: !5277)
!5297 = !DILocation(line: 161, column: 7, scope: !5277)
!5298 = !DILocation(line: 163, column: 18, scope: !5214)
!5299 = !DILocation(line: 163, column: 22, scope: !5214)
!5300 = !DILocation(line: 163, column: 30, scope: !5214)
!5301 = !DILocation(line: 163, column: 10, scope: !5214)
!5302 = !DILocation(line: 163, column: 3, scope: !5214)
!5303 = !DILocation(line: 164, column: 1, scope: !5214)
