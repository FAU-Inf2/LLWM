; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.sockaddr*, i8*, %struct.addrinfo* }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.utmpx = type { i16, i32, [32 x i8], [4 x i8], [32 x i8], [256 x i8], %struct.__exit_status, i32, %struct.anon, [4 x i32], [20 x i8] }
%struct.__exit_status = type { i16, i16 }
%struct.anon = type { i32, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"Usage: %s [OPTION]... [ FILE | ARG1 ARG2 ]\0A\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"Print information about users who are currently logged in.\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [195 x i8] c"\0A  -a, --all         same as -b -d --login -p -r -t -T -u\0A  -b, --boot        time of last system boot\0A  -d, --dead        print dead processes\0A  -H, --heading     print line of column headings\0A\00", align 1
@.str.4 = private unnamed_addr constant [50 x i8] c"  -l, --login       print system login processes\0A\00", align 1
@.str.5 = private unnamed_addr constant [187 x i8] c"      --lookup      attempt to canonicalize hostnames via DNS\0A  -m                only hostname and user associated with stdin\0A  -p, --process     print active processes spawned by init\0A\00", align 1
@.str.6 = private unnamed_addr constant [223 x i8] c"  -q, --count       all login names and number of users logged on\0A  -r, --runlevel    print current runlevel\0A  -s, --short       print only name, line, and time (default)\0A  -t, --time        print last system clock change\0A\00", align 1
@.str.7 = private unnamed_addr constant [163 x i8] c"  -T, -w, --mesg    add user's message status as +, - or ?\0A  -u, --users       list users logged in\0A      --message     same as -T\0A      --writable    same as -T\0A\00", align 1
@.str.8 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.9 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.10 = private unnamed_addr constant [125 x i8] c"\0AIf FILE is not specified, use %s.  %s as FILE is common.\0AIf ARG1 ARG2 given, -m presumed: 'am i' or 'mom likes' are usual.\0A\00", align 1
@.str.11 = private unnamed_addr constant [14 x i8] c"/var/run/utmp\00", align 1
@.str.12 = private unnamed_addr constant [14 x i8] c"/var/log/wtmp\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"who\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.26, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.27, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.33 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.34 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.36 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.37 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.38 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.25 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.26 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.27 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.28 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.29 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.30 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.16 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.17 = private unnamed_addr constant [15 x i8] c"abdlmpqrstuwHT\00", align 1
@longopts = internal constant [18 x %struct.option] [%struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.41, i32 0, i32 0), i32 0, i32* null, i32 98 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i32 0, i32 0), i32 0, i32* null, i32 113 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43, i32 0, i32 0), i32 0, i32* null, i32 100 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), i32 0, i32* null, i32 72 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i32 0, i32 0), i32 0, i32* null, i32 108 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.46, i32 0, i32 0), i32 0, i32* null, i32 128 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.47, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.49, i32 0, i32 0), i32 0, i32* null, i32 112 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.50, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0), i32 0, i32* null, i32 116 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i32 0, i32 0), i32 0, i32* null, i32 117 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.54, i32 0, i32 0), i32 0, i32* null, i32 84 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.56, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@need_boottime = internal global i8 0, align 1, !dbg !31
@need_deadprocs = internal global i8 0, align 1, !dbg !33
@need_login = internal global i8 0, align 1, !dbg !35
@need_initspawn = internal global i8 0, align 1, !dbg !37
@need_runlevel = internal global i8 0, align 1, !dbg !41
@need_clockchange = internal global i8 0, align 1, !dbg !39
@need_users = internal global i8 0, align 1, !dbg !43
@include_mesg = internal global i8 0, align 1, !dbg !27
@include_idle = internal global i8 0, align 1, !dbg !23
@include_exit = internal global i8 0, align 1, !dbg !29
@include_heading = internal global i8 0, align 1, !dbg !25
@my_line_only = internal global i8 0, align 1, !dbg !45
@short_list = internal global i8 0, align 1, !dbg !19
@short_output = internal global i8 0, align 1, !dbg !21
@do_lookup = internal global i8 0, align 1, !dbg !16
@.str.19 = private unnamed_addr constant [17 x i8] c"Joseph Arceneaux\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"Michael Stone\00", align 1
@.str.22 = private unnamed_addr constant [15 x i8] c"%Y-%m-%d %H:%M\00", align 1
@time_format = internal global i8* null, align 8, !dbg !47
@time_format_width = internal global i32 0, align 4, !dbg !51
@.str.23 = private unnamed_addr constant [12 x i8] c"%b %e %H:%M\00", align 1
@optind = external dso_local global i32, align 4
@.str.24 = private unnamed_addr constant [17 x i8] c"extra operand %s\00", align 1
@.str.57 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.61 = private unnamed_addr constant [6 x i8] c"/dev/\00", align 1
@.str.74 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@print_deadprocs.exitstr = internal global i8* null, align 8, !dbg !138
@.str.92 = private unnamed_addr constant [6 x i8] c"term=\00", align 1
@.str.93 = private unnamed_addr constant [6 x i8] c"exit=\00", align 1
@.str.94 = private unnamed_addr constant [10 x i8] c"%s%d %s%d\00", align 1
@print_line.mesg = internal global [3 x i8] c" x\00", align 1, !dbg !54
@.str.69 = private unnamed_addr constant [6 x i8] c" %-6s\00", align 1
@.str.70 = private unnamed_addr constant [6 x i8] c" %10s\00", align 1
@.str.71 = private unnamed_addr constant [7 x i8] c" %-12s\00", align 1
@.str.73 = private unnamed_addr constant [5 x i8] c"   .\00", align 1
@.str.72 = private unnamed_addr constant [33 x i8] c"%-8.*s%s %-12.*s %-*s%s%s %-8s%s\00", align 1
@time_string.buf = internal global [33 x i8] zeroinitializer, align 16, !dbg !123
@.str.90 = private unnamed_addr constant [4 x i8] c"id=\00", align 1
@.str.91 = private unnamed_addr constant [6 x i8] c"LOGIN\00", align 1
@.str.89 = private unnamed_addr constant [13 x i8] c"clock change\00", align 1
@.str.88 = private unnamed_addr constant [12 x i8] c"system boot\00", align 1
@print_runlevel.runlevline = internal global i8* null, align 8, !dbg !131
@.str.84 = private unnamed_addr constant [10 x i8] c"run-level\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"%s %c\00", align 1
@print_runlevel.comment = internal global i8* null, align 8, !dbg !136
@.str.86 = private unnamed_addr constant [6 x i8] c"last=\00", align 1
@.str.87 = private unnamed_addr constant [5 x i8] c"%s%c\00", align 1
@.str.75 = private unnamed_addr constant [5 x i8] c"%.*s\00", align 1
@.str.76 = private unnamed_addr constant [4 x i8] c"  ?\00", align 1
@print_user.hostlen = internal global i64 0, align 8, !dbg !108
@print_user.hoststr = internal global i8* null, align 8, !dbg !62
@.str.77 = private unnamed_addr constant [8 x i8] c"(%s:%s)\00", align 1
@.str.78 = private unnamed_addr constant [5 x i8] c"(%s)\00", align 1
@idle_string.now = internal global i64 -9223372036854775808, align 8, !dbg !113
@.str.79 = private unnamed_addr constant [6 x i8] c"  .  \00", align 1
@.str.80 = private unnamed_addr constant [30 x i8] c"seconds_idle / (60 * 60) < 24\00", align 1
@.str.81 = private unnamed_addr constant [10 x i8] c"src/who.c\00", align 1
@__PRETTY_FUNCTION__.idle_string = private unnamed_addr constant [40 x i8] c"const char *idle_string(time_t, time_t)\00", align 1
@idle_string.idle_hhmm = internal global [6 x i8] zeroinitializer, align 1, !dbg !118
@.str.82 = private unnamed_addr constant [10 x i8] c"%02d:%02d\00", align 1
@.str.83 = private unnamed_addr constant [6 x i8] c" old \00", align 1
@.str.62 = private unnamed_addr constant [5 x i8] c"NAME\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"LINE\00", align 1
@.str.64 = private unnamed_addr constant [5 x i8] c"TIME\00", align 1
@.str.65 = private unnamed_addr constant [5 x i8] c"IDLE\00", align 1
@.str.66 = private unnamed_addr constant [4 x i8] c"PID\00", align 1
@.str.67 = private unnamed_addr constant [8 x i8] c"COMMENT\00", align 1
@.str.68 = private unnamed_addr constant [5 x i8] c"EXIT\00", align 1
@.str.58 = private unnamed_addr constant [5 x i8] c"%s%s\00", align 1
@.str.59 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.60 = private unnamed_addr constant [14 x i8] c"\0A# users=%lu\0A\00", align 1
@.str.40 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.41 = private unnamed_addr constant [5 x i8] c"boot\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"count\00", align 1
@.str.43 = private unnamed_addr constant [5 x i8] c"dead\00", align 1
@.str.44 = private unnamed_addr constant [8 x i8] c"heading\00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"login\00", align 1
@.str.46 = private unnamed_addr constant [7 x i8] c"lookup\00", align 1
@.str.47 = private unnamed_addr constant [8 x i8] c"message\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"mesg\00", align 1
@.str.49 = private unnamed_addr constant [8 x i8] c"process\00", align 1
@.str.50 = private unnamed_addr constant [9 x i8] c"runlevel\00", align 1
@.str.51 = private unnamed_addr constant [6 x i8] c"short\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"users\00", align 1
@.str.54 = private unnamed_addr constant [9 x i8] c"writable\00", align 1
@.str.55 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.56 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), align 8, !dbg !153
@.str.95 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@last_cherror = internal global i32 0, align 4, !dbg !158
@canon_host_r.hints = internal global %struct.addrinfo zeroinitializer, align 8, !dbg !163
@ignore_EPIPE = internal global i8 0, align 1, !dbg !196
@.str.102 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !201
@.str.1.103 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.104 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !204
@.str.109 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.110 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.115 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.116 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.117 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !211
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !218
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !266
@nslots = internal global i32 1, align 4, !dbg !273
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !275
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !264
@.str.10.120 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.121 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.122 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.123 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.124 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.125 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.126 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.127 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.128 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !252
@.str.137 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.138 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.139 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.140 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.141 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.142 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.143 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.144 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.145 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.146 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.147 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.148 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.149 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.150 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.151 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.152 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !277
@.str.1.165 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.166 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.179 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.180 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [3 x i8] c"-m\00"
@.compVal1 = private global [4 x i8] c"-ma\00"
@.compVal2 = private global [4 x i8] c"-Hm\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0
@x.101 = common global i32 0
@y.102 = common global i32 0
@x.103 = common global i32 0
@y.104 = common global i32 0
@x.105 = common global i32 0
@y.106 = common global i32 0
@x.107 = common global i32 0
@y.108 = common global i32 0
@x.109 = common global i32 0
@y.110 = common global i32 0
@x.111 = common global i32 0
@y.112 = common global i32 0
@x.113 = common global i32 0
@y.114 = common global i32 0
@x.115 = common global i32 0
@y.116 = common global i32 0
@x.117 = common global i32 0
@y.118 = common global i32 0
@x.119 = common global i32 0
@y.120 = common global i32 0
@x.121 = common global i32 0
@y.122 = common global i32 0
@x.123 = common global i32 0
@y.124 = common global i32 0
@x.125 = common global i32 0
@y.126 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !334 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !337, metadata !DIExpression()), !dbg !338
  %11 = load i32, i32* %10, align 4, !dbg !339
  %12 = icmp ne i32 %11, 0, !dbg !341
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %44, !dbg !342

21:                                               ; preds = %originalBBpart2
  br label %22, !dbg !343

22:                                               ; preds = %21
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !344
  %24 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !344
  %25 = load i8*, i8** @program_name, align 8, !dbg !344
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* %24, i8* %25), !dbg !344
  br label %27, !dbg !344

27:                                               ; preds = %22
  %28 = load i32, i32* @x
  %29 = load i32, i32* @y
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* @x
  %37 = load i32, i32* @y
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %90, !dbg !344

44:                                               ; preds = %originalBBpart2
  %45 = load i32, i32* @x
  %46 = load i32, i32* @y
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !346
  %54 = load i8*, i8** @program_name, align 8, !dbg !348
  %55 = call i32 (i8*, ...) @printf(i8* %53, i8* %54), !dbg !349
  %56 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !350
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !350
  %58 = call i32 @fputs_unlocked(i8* %56, %struct._IO_FILE* %57), !dbg !350
  %59 = call i8* @gettext(i8* getelementptr inbounds ([195 x i8], [195 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !351
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !351
  %61 = call i32 @fputs_unlocked(i8* %59, %struct._IO_FILE* %60), !dbg !351
  %62 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !352
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !352
  %64 = call i32 @fputs_unlocked(i8* %62, %struct._IO_FILE* %63), !dbg !352
  %65 = call i8* @gettext(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !353
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !353
  %67 = call i32 @fputs_unlocked(i8* %65, %struct._IO_FILE* %66), !dbg !353
  %68 = call i8* @gettext(i8* getelementptr inbounds ([223 x i8], [223 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !354
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !354
  %70 = call i32 @fputs_unlocked(i8* %68, %struct._IO_FILE* %69), !dbg !354
  %71 = call i8* @gettext(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !355
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !355
  %73 = call i32 @fputs_unlocked(i8* %71, %struct._IO_FILE* %72), !dbg !355
  %74 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !356
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !356
  %76 = call i32 @fputs_unlocked(i8* %74, %struct._IO_FILE* %75), !dbg !356
  %77 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !357
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !357
  %79 = call i32 @fputs_unlocked(i8* %77, %struct._IO_FILE* %78), !dbg !357
  %80 = call i8* @gettext(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !358
  %81 = call i32 (i8*, ...) @printf(i8* %80, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0)), !dbg !359
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0)), !dbg !360
  %82 = load i32, i32* @x
  %83 = load i32, i32* @y
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %90

90:                                               ; preds = %originalBBpart28, %originalBBpart24
  %91 = load i32, i32* %10, align 4, !dbg !361
  call void @exit(i32 %91) #12, !dbg !362
  unreachable, !dbg !362

originalBBalteredBB:                              ; preds = %originalBB, %1
  %92 = alloca i32, align 4
  store i32 %0, i32* %92, align 4
  call void @llvm.dbg.declare(metadata i32* %92, metadata !363, metadata !DIExpression()), !dbg !338
  %93 = load i32, i32* %92, align 4, !dbg !339
  %94 = icmp ne i32 %93, 0, !dbg !341
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %95 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !346
  %96 = load i8*, i8** @program_name, align 8, !dbg !348
  %97 = call i32 (i8*, ...) @printf(i8* %95, i8* %96), !dbg !349
  %98 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !350
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !350
  %100 = call i32 @fputs_unlocked(i8* %98, %struct._IO_FILE* %99), !dbg !350
  %101 = call i8* @gettext(i8* getelementptr inbounds ([195 x i8], [195 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !351
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !351
  %103 = call i32 @fputs_unlocked(i8* %101, %struct._IO_FILE* %102), !dbg !351
  %104 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !352
  %105 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !352
  %106 = call i32 @fputs_unlocked(i8* %104, %struct._IO_FILE* %105), !dbg !352
  %107 = call i8* @gettext(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !353
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !353
  %109 = call i32 @fputs_unlocked(i8* %107, %struct._IO_FILE* %108), !dbg !353
  %110 = call i8* @gettext(i8* getelementptr inbounds ([223 x i8], [223 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !354
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !354
  %112 = call i32 @fputs_unlocked(i8* %110, %struct._IO_FILE* %111), !dbg !354
  %113 = call i8* @gettext(i8* getelementptr inbounds ([163 x i8], [163 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !355
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !355
  %115 = call i32 @fputs_unlocked(i8* %113, %struct._IO_FILE* %114), !dbg !355
  %116 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !356
  %117 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !356
  %118 = call i32 @fputs_unlocked(i8* %116, %struct._IO_FILE* %117), !dbg !356
  %119 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !357
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !357
  %121 = call i32 @fputs_unlocked(i8* %119, %struct._IO_FILE* %120), !dbg !357
  %122 = call i8* @gettext(i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !358
  %123 = call i32 (i8*, ...) @printf(i8* %122, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.12, i64 0, i64 0)), !dbg !359
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0)), !dbg !360
  br label %originalBB6
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !465 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !469, metadata !DIExpression()), !dbg !470
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !471, metadata !DIExpression()), !dbg !480
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !480
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !480
  call void @llvm.dbg.declare(metadata i8** %12, metadata !481, metadata !DIExpression()), !dbg !482
  %16 = load i8*, i8** %10, align 8, !dbg !483
  store i8* %16, i8** %12, align 8, !dbg !482
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !484, metadata !DIExpression()), !dbg !486
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !487
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !486
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !488

26:                                               ; preds = %originalBBpart212, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !489
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !490
  %37 = load i8*, i8** %36, align 8, !dbg !490
  %38 = icmp ne i8* %37, null, !dbg !489
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %55, !dbg !491

47:                                               ; preds = %originalBBpart24
  %48 = load i8*, i8** %10, align 8, !dbg !492
  %49 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !492
  %50 = getelementptr inbounds %struct.infomap, %struct.infomap* %49, i32 0, i32 0, !dbg !492
  %51 = load i8*, i8** %50, align 8, !dbg !492
  %52 = call i32 @strcmp(i8* %48, i8* %51) #13, !dbg !492
  %53 = icmp eq i32 %52, 0, !dbg !492
  %54 = xor i1 %53, true, !dbg !493
  br label %55

55:                                               ; preds = %47, %originalBBpart24
  %56 = phi i1 [ false, %originalBBpart24 ], [ %54, %47 ], !dbg !494
  %57 = load i32, i32* @x.1
  %58 = load i32, i32* @y.2
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  %65 = load i32, i32* @x.1
  %66 = load i32, i32* @y.2
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %56, label %73, label %92, !dbg !488

73:                                               ; preds = %originalBBpart28
  %74 = load i32, i32* @x.1
  %75 = load i32, i32* @y.2
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %73, %originalBB10alteredBB
  %82 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !495
  %83 = getelementptr inbounds %struct.infomap, %struct.infomap* %82, i32 1, !dbg !495
  store %struct.infomap* %83, %struct.infomap** %13, align 8, !dbg !495
  %84 = load i32, i32* @x.1
  %85 = load i32, i32* @y.2
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %26, !dbg !488, !llvm.loop !496

92:                                               ; preds = %originalBBpart28
  %93 = load i32, i32* @x.1
  %94 = load i32, i32* @y.2
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %92, %originalBB14alteredBB
  %101 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !497
  %102 = getelementptr inbounds %struct.infomap, %struct.infomap* %101, i32 0, i32 1, !dbg !499
  %103 = load i8*, i8** %102, align 8, !dbg !499
  %104 = icmp ne i8* %103, null, !dbg !497
  %105 = load i32, i32* @x.1
  %106 = load i32, i32* @y.2
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %104, label %113, label %133, !dbg !500

113:                                              ; preds = %originalBBpart216
  %114 = load i32, i32* @x.1
  %115 = load i32, i32* @y.2
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %113, %originalBB18alteredBB
  %122 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !501
  %123 = getelementptr inbounds %struct.infomap, %struct.infomap* %122, i32 0, i32 1, !dbg !502
  %124 = load i8*, i8** %123, align 8, !dbg !502
  store i8* %124, i8** %12, align 8, !dbg !503
  %125 = load i32, i32* @x.1
  %126 = load i32, i32* @y.2
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !504

133:                                              ; preds = %originalBBpart220, %originalBBpart216
  %134 = load i32, i32* @x.1
  %135 = load i32, i32* @y.2
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !505
  %143 = call i32 (i8*, ...) @printf(i8* %142, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0)), !dbg !506
  call void @llvm.dbg.declare(metadata i8** %14, metadata !507, metadata !DIExpression()), !dbg !508
  %144 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !509
  store i8* %144, i8** %14, align 8, !dbg !508
  %145 = load i8*, i8** %14, align 8, !dbg !510
  %146 = icmp ne i8* %145, null, !dbg !510
  %147 = load i32, i32* @x.1
  %148 = load i32, i32* @y.2
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %146, label %155, label %163, !dbg !512

155:                                              ; preds = %originalBBpart224
  %156 = load i8*, i8** %14, align 8, !dbg !513
  %157 = call i32 @strncmp(i8* %156, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i64 0, i64 0), i64 3) #13, !dbg !513
  %158 = icmp ne i32 %157, 0, !dbg !513
  br i1 %158, label %159, label %163, !dbg !514

159:                                              ; preds = %155
  %160 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !515
  %161 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !515
  %162 = call i32 @fputs_unlocked(i8* %160, %struct._IO_FILE* %161), !dbg !515
  br label %163, !dbg !517

163:                                              ; preds = %159, %155, %originalBBpart224
  %164 = load i32, i32* @x.1
  %165 = load i32, i32* @y.2
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %163, %originalBB26alteredBB
  %172 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.37, i64 0, i64 0)) #10, !dbg !518
  %173 = load i8*, i8** %10, align 8, !dbg !519
  %174 = call i32 (i8*, ...) @printf(i8* %172, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0), i8* %173), !dbg !520
  %175 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !521
  %176 = load i8*, i8** %12, align 8, !dbg !522
  %177 = load i8*, i8** %12, align 8, !dbg !523
  %178 = load i8*, i8** %10, align 8, !dbg !524
  %179 = icmp eq i8* %177, %178, !dbg !525
  %180 = zext i1 %179 to i64, !dbg !523
  %181 = select i1 %179, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !523
  %182 = call i32 (i8*, ...) @printf(i8* %175, i8* %176, i8* %181), !dbg !526
  %183 = load i32, i32* @x.1
  %184 = load i32, i32* @y.2
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret void, !dbg !527

originalBBalteredBB:                              ; preds = %originalBB, %1
  %191 = alloca i8*, align 8
  %192 = alloca [7 x %struct.infomap], align 16
  %193 = alloca i8*, align 8
  %194 = alloca %struct.infomap*, align 8
  %195 = alloca i8*, align 8
  store i8* %0, i8** %191, align 8
  call void @llvm.dbg.declare(metadata i8** %191, metadata !528, metadata !DIExpression()), !dbg !470
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %192, metadata !630, metadata !DIExpression()), !dbg !480
  %196 = bitcast [7 x %struct.infomap]* %192 to i8*, !dbg !480
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %196, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !480
  call void @llvm.dbg.declare(metadata i8** %193, metadata !637, metadata !DIExpression()), !dbg !482
  %197 = load i8*, i8** %191, align 8, !dbg !483
  store i8* %197, i8** %193, align 8, !dbg !482
  call void @llvm.dbg.declare(metadata %struct.infomap** %194, metadata !638, metadata !DIExpression()), !dbg !486
  %198 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %192, i64 0, i64 0, !dbg !487
  store %struct.infomap* %198, %struct.infomap** %194, align 8, !dbg !486
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %199 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !489
  %200 = getelementptr inbounds %struct.infomap, %struct.infomap* %199, i32 0, i32 0, !dbg !490
  %201 = load i8*, i8** %200, align 8, !dbg !490
  %202 = icmp ne i8* %201, null, !dbg !489
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %73
  %203 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !495
  %204 = getelementptr inbounds %struct.infomap, %struct.infomap* %203, i32 1, !dbg !495
  store %struct.infomap* %204, %struct.infomap** %13, align 8, !dbg !495
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %92
  %205 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !497
  %206 = getelementptr inbounds %struct.infomap, %struct.infomap* %205, i32 0, i32 1, !dbg !499
  %207 = load i8*, i8** %206, align 8, !dbg !499
  %208 = icmp ne i8* %207, null, !dbg !497
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %113
  %209 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !501
  %210 = getelementptr inbounds %struct.infomap, %struct.infomap* %209, i32 0, i32 1, !dbg !502
  %211 = load i8*, i8** %210, align 8, !dbg !502
  store i8* %211, i8** %12, align 8, !dbg !503
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %212 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !505
  %213 = call i32 (i8*, ...) @printf(i8* %212, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0)), !dbg !506
  call void @llvm.dbg.declare(metadata !4, metadata !640, metadata !DIExpression()), !dbg !508
  %214 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !509
  store i8* %214, i8** %14, align 8, !dbg !508
  %215 = load i8*, i8** %14, align 8, !dbg !510
  %216 = icmp ne i8* %215, null, !dbg !510
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %163
  %217 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.37, i64 0, i64 0)) #10, !dbg !518
  %218 = load i8*, i8** %10, align 8, !dbg !519
  %219 = call i32 (i8*, ...) @printf(i8* %217, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.34, i64 0, i64 0), i8* %218), !dbg !520
  %220 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !521
  %221 = load i8*, i8** %12, align 8, !dbg !522
  %222 = load i8*, i8** %12, align 8, !dbg !523
  %223 = load i8*, i8** %10, align 8, !dbg !524
  %224 = icmp eq i8* %222, %223, !dbg !525
  %225 = zext i1 %224 to i64, !dbg !523
  %226 = select i1 %224, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !523
  %227 = call i32 (i8*, ...) @printf(i8* %220, i8* %221, i8* %226), !dbg !526
  br label %originalBB26
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !742 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !746, metadata !DIExpression()), !dbg !747
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !748, metadata !DIExpression()), !dbg !749
  call void @llvm.dbg.declare(metadata i32* %14, metadata !750, metadata !DIExpression()), !dbg !751
  call void @llvm.dbg.declare(metadata i8* %15, metadata !752, metadata !DIExpression()), !dbg !753
  store i8 1, i8* %15, align 1, !dbg !753
  %16 = load i8**, i8*** %13, align 8, !dbg !754
  %17 = getelementptr inbounds i8*, i8** %16, i64 0, !dbg !754
  %18 = load i8*, i8** %17, align 8, !dbg !754
  call void @set_program_name(i8* %18), !dbg !755
  %19 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !756
  %20 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !757
  %21 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !758
  %22 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !759
  %23 = load i32, i32* @x.3
  %24 = load i32, i32* @y.4
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %31, !dbg !760

31:                                               ; preds = %originalBBpart264, %originalBBpart2
  %32 = load i32, i32* @x.3
  %33 = load i32, i32* @y.4
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load i32, i32* %12, align 4, !dbg !761
  %41 = load i8**, i8*** %13, align 8, !dbg !762
  %42 = call i32 @getopt_long(i32 %40, i8** %41, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0), %struct.option* getelementptr inbounds ([18 x %struct.option], [18 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !763
  store i32 %42, i32* %14, align 4, !dbg !764
  %43 = icmp ne i32 %42, -1, !dbg !765
  %44 = load i32, i32* @x.3
  %45 = load i32, i32* @y.4
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %43, label %52, label %314, !dbg !760

52:                                               ; preds = %originalBBpart24
  %53 = load i32, i32* @x.3
  %54 = load i32, i32* @y.4
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  %61 = load i32, i32* %14, align 4, !dbg !766
  %62 = load i32, i32* @x.3
  %63 = load i32, i32* @y.4
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  switch i32 %61, label %280 [
    i32 97, label %70
    i32 98, label %87
    i32 100, label %104
    i32 72, label %121
    i32 108, label %138
    i32 109, label %155
    i32 112, label %156
    i32 113, label %173
    i32 114, label %190
    i32 115, label %191
    i32 116, label %192
    i32 84, label %193
    i32 119, label %193
    i32 117, label %210
    i32 128, label %227
    i32 -130, label %244
    i32 -131, label %261
  ], !dbg !768

70:                                               ; preds = %originalBBpart28
  %71 = load i32, i32* @x.3
  %72 = load i32, i32* @y.4
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %70, %originalBB10alteredBB
  store i8 1, i8* @need_boottime, align 1, !dbg !769
  store i8 1, i8* @need_deadprocs, align 1, !dbg !771
  store i8 1, i8* @need_login, align 1, !dbg !772
  store i8 1, i8* @need_initspawn, align 1, !dbg !773
  store i8 1, i8* @need_runlevel, align 1, !dbg !774
  store i8 1, i8* @need_clockchange, align 1, !dbg !775
  store i8 1, i8* @need_users, align 1, !dbg !776
  store i8 1, i8* @include_mesg, align 1, !dbg !777
  store i8 1, i8* @include_idle, align 1, !dbg !778
  store i8 1, i8* @include_exit, align 1, !dbg !779
  store i8 0, i8* %15, align 1, !dbg !780
  %79 = load i32, i32* @x.3
  %80 = load i32, i32* @y.4
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %297, !dbg !781

87:                                               ; preds = %originalBBpart28
  %88 = load i32, i32* @x.3
  %89 = load i32, i32* @y.4
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  store i8 1, i8* @need_boottime, align 1, !dbg !782
  store i8 0, i8* %15, align 1, !dbg !783
  %96 = load i32, i32* @x.3
  %97 = load i32, i32* @y.4
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %297, !dbg !784

104:                                              ; preds = %originalBBpart28
  %105 = load i32, i32* @x.3
  %106 = load i32, i32* @y.4
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %104, %originalBB18alteredBB
  store i8 1, i8* @need_deadprocs, align 1, !dbg !785
  store i8 1, i8* @include_idle, align 1, !dbg !786
  store i8 1, i8* @include_exit, align 1, !dbg !787
  store i8 0, i8* %15, align 1, !dbg !788
  %113 = load i32, i32* @x.3
  %114 = load i32, i32* @y.4
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %297, !dbg !789

121:                                              ; preds = %originalBBpart28
  %122 = load i32, i32* @x.3
  %123 = load i32, i32* @y.4
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %121, %originalBB22alteredBB
  store i8 1, i8* @include_heading, align 1, !dbg !790
  %130 = load i32, i32* @x.3
  %131 = load i32, i32* @y.4
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %297, !dbg !791

138:                                              ; preds = %originalBBpart28
  %139 = load i32, i32* @x.3
  %140 = load i32, i32* @y.4
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %138, %originalBB26alteredBB
  store i8 1, i8* @need_login, align 1, !dbg !792
  store i8 1, i8* @include_idle, align 1, !dbg !793
  store i8 0, i8* %15, align 1, !dbg !794
  %147 = load i32, i32* @x.3
  %148 = load i32, i32* @y.4
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %297, !dbg !795

155:                                              ; preds = %originalBBpart28
  store i8 1, i8* @my_line_only, align 1, !dbg !796
  br label %297, !dbg !797

156:                                              ; preds = %originalBBpart28
  %157 = load i32, i32* @x.3
  %158 = load i32, i32* @y.4
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %156, %originalBB30alteredBB
  store i8 1, i8* @need_initspawn, align 1, !dbg !798
  store i8 0, i8* %15, align 1, !dbg !799
  %165 = load i32, i32* @x.3
  %166 = load i32, i32* @y.4
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %297, !dbg !800

173:                                              ; preds = %originalBBpart28
  %174 = load i32, i32* @x.3
  %175 = load i32, i32* @y.4
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %173, %originalBB34alteredBB
  store i8 1, i8* @short_list, align 1, !dbg !801
  %182 = load i32, i32* @x.3
  %183 = load i32, i32* @y.4
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %297, !dbg !802

190:                                              ; preds = %originalBBpart28
  store i8 1, i8* @need_runlevel, align 1, !dbg !803
  store i8 1, i8* @include_idle, align 1, !dbg !804
  store i8 0, i8* %15, align 1, !dbg !805
  br label %297, !dbg !806

191:                                              ; preds = %originalBBpart28
  store i8 1, i8* @short_output, align 1, !dbg !807
  br label %297, !dbg !808

192:                                              ; preds = %originalBBpart28
  store i8 1, i8* @need_clockchange, align 1, !dbg !809
  store i8 0, i8* %15, align 1, !dbg !810
  br label %297, !dbg !811

193:                                              ; preds = %originalBBpart28, %originalBBpart28
  %194 = load i32, i32* @x.3
  %195 = load i32, i32* @y.4
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %193, %originalBB38alteredBB
  store i8 1, i8* @include_mesg, align 1, !dbg !812
  %202 = load i32, i32* @x.3
  %203 = load i32, i32* @y.4
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %297, !dbg !813

210:                                              ; preds = %originalBBpart28
  %211 = load i32, i32* @x.3
  %212 = load i32, i32* @y.4
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %210, %originalBB42alteredBB
  store i8 1, i8* @need_users, align 1, !dbg !814
  store i8 1, i8* @include_idle, align 1, !dbg !815
  store i8 0, i8* %15, align 1, !dbg !816
  %219 = load i32, i32* @x.3
  %220 = load i32, i32* @y.4
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %297, !dbg !817

227:                                              ; preds = %originalBBpart28
  %228 = load i32, i32* @x.3
  %229 = load i32, i32* @y.4
  %230 = sub i32 %228, 1
  %231 = mul i32 %228, %230
  %232 = urem i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %233, %234
  br i1 %235, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %227, %originalBB46alteredBB
  store i8 1, i8* @do_lookup, align 1, !dbg !818
  %236 = load i32, i32* @x.3
  %237 = load i32, i32* @y.4
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %297, !dbg !819

244:                                              ; preds = %originalBBpart28
  %245 = load i32, i32* @x.3
  %246 = load i32, i32* @y.4
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %244, %originalBB50alteredBB
  call void @usage(i32 0) #14, !dbg !820
  %253 = load i32, i32* @x.3
  %254 = load i32, i32* @y.4
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  unreachable, !dbg !820

261:                                              ; preds = %originalBBpart28
  %262 = load i32, i32* @x.3
  %263 = load i32, i32* @y.4
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %261, %originalBB54alteredBB
  %270 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !821
  %271 = load i8*, i8** @Version, align 8, !dbg !821
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %270, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* %271, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0), i8* null), !dbg !821
  call void @exit(i32 0) #12, !dbg !821
  %272 = load i32, i32* @x.3
  %273 = load i32, i32* @y.4
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  unreachable, !dbg !821

280:                                              ; preds = %originalBBpart28
  %281 = load i32, i32* @x.3
  %282 = load i32, i32* @y.4
  %283 = sub i32 %281, 1
  %284 = mul i32 %281, %283
  %285 = urem i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %286, %287
  br i1 %288, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %280, %originalBB58alteredBB
  call void @usage(i32 1) #14, !dbg !822
  %289 = load i32, i32* @x.3
  %290 = load i32, i32* @y.4
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  unreachable, !dbg !822

297:                                              ; preds = %originalBBpart248, %originalBBpart244, %originalBBpart240, %192, %191, %190, %originalBBpart236, %originalBBpart232, %155, %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216, %originalBBpart212
  %298 = load i32, i32* @x.3
  %299 = load i32, i32* @y.4
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %297, %originalBB62alteredBB
  %306 = load i32, i32* @x.3
  %307 = load i32, i32* @y.4
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %31, !dbg !760, !llvm.loop !823

314:                                              ; preds = %originalBBpart24
  %315 = load i32, i32* @x.3
  %316 = load i32, i32* @y.4
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %314, %originalBB66alteredBB
  %323 = load i8, i8* %15, align 1, !dbg !825
  %324 = trunc i8 %323 to i1, !dbg !825
  %325 = load i32, i32* @x.3
  %326 = load i32, i32* @y.4
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %324, label %333, label %350, !dbg !827

333:                                              ; preds = %originalBBpart268
  %334 = load i32, i32* @x.3
  %335 = load i32, i32* @y.4
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %333, %originalBB70alteredBB
  store i8 1, i8* @need_users, align 1, !dbg !828
  store i8 1, i8* @short_output, align 1, !dbg !830
  %342 = load i32, i32* @x.3
  %343 = load i32, i32* @y.4
  %344 = sub i32 %342, 1
  %345 = mul i32 %342, %344
  %346 = urem i32 %345, 2
  %347 = icmp eq i32 %346, 0
  %348 = icmp slt i32 %343, 10
  %349 = or i1 %347, %348
  br i1 %349, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %350, !dbg !831

350:                                              ; preds = %originalBBpart272, %originalBBpart268
  %351 = load i32, i32* @x.3
  %352 = load i32, i32* @y.4
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %350, %originalBB74alteredBB
  %359 = load i8, i8* @include_exit, align 1, !dbg !832
  %360 = trunc i8 %359 to i1, !dbg !832
  %361 = load i32, i32* @x.3
  %362 = load i32, i32* @y.4
  %363 = sub i32 %361, 1
  %364 = mul i32 %361, %363
  %365 = urem i32 %364, 2
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %366, %367
  br i1 %368, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %360, label %369, label %386, !dbg !834

369:                                              ; preds = %originalBBpart276
  %370 = load i32, i32* @x.3
  %371 = load i32, i32* @y.4
  %372 = sub i32 %370, 1
  %373 = mul i32 %370, %372
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %375, %376
  br i1 %377, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %369, %originalBB78alteredBB
  store i8 0, i8* @short_output, align 1, !dbg !835
  %378 = load i32, i32* @x.3
  %379 = load i32, i32* @y.4
  %380 = sub i32 %378, 1
  %381 = mul i32 %378, %380
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %383, %384
  br i1 %385, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %386, !dbg !837

386:                                              ; preds = %originalBBpart280, %originalBBpart276
  %387 = load i32, i32* @x.3
  %388 = load i32, i32* @y.4
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %386, %originalBB82alteredBB
  %395 = call zeroext i1 @hard_locale(i32 2), !dbg !838
  %396 = load i32, i32* @x.3
  %397 = load i32, i32* @y.4
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %395, label %404, label %421, !dbg !840

404:                                              ; preds = %originalBBpart284
  %405 = load i32, i32* @x.3
  %406 = load i32, i32* @y.4
  %407 = sub i32 %405, 1
  %408 = mul i32 %405, %407
  %409 = urem i32 %408, 2
  %410 = icmp eq i32 %409, 0
  %411 = icmp slt i32 %406, 10
  %412 = or i1 %410, %411
  br i1 %412, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %404, %originalBB86alteredBB
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0), i8** @time_format, align 8, !dbg !841
  store i32 16, i32* @time_format_width, align 4, !dbg !843
  %413 = load i32, i32* @x.3
  %414 = load i32, i32* @y.4
  %415 = sub i32 %413, 1
  %416 = mul i32 %413, %415
  %417 = urem i32 %416, 2
  %418 = icmp eq i32 %417, 0
  %419 = icmp slt i32 %414, 10
  %420 = or i1 %418, %419
  br i1 %420, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br label %438, !dbg !844

421:                                              ; preds = %originalBBpart284
  %422 = load i32, i32* @x.3
  %423 = load i32, i32* @y.4
  %424 = sub i32 %422, 1
  %425 = mul i32 %422, %424
  %426 = urem i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %427, %428
  br i1 %429, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %421, %originalBB90alteredBB
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0), i8** @time_format, align 8, !dbg !845
  store i32 12, i32* @time_format_width, align 4, !dbg !847
  %430 = load i32, i32* @x.3
  %431 = load i32, i32* @y.4
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br label %438

438:                                              ; preds = %originalBBpart292, %originalBBpart288
  %439 = load i32, i32* @x.3
  %440 = load i32, i32* @y.4
  %441 = sub i32 %439, 1
  %442 = mul i32 %439, %441
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %444, %445
  br i1 %446, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %438, %originalBB94alteredBB
  %447 = load i32, i32* %12, align 4, !dbg !848
  %448 = load i32, i32* @optind, align 4, !dbg !849
  %449 = sub nsw i32 %447, %448, !dbg !850
  %450 = load i32, i32* @x.3
  %451 = load i32, i32* @y.4
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart2100, label %originalBB94alteredBB

originalBBpart2100:                               ; preds = %originalBB94
  switch i32 %449, label %498 [
    i32 2, label %458
    i32 -1, label %475
    i32 0, label %475
    i32 1, label %492
  ], !dbg !851

458:                                              ; preds = %originalBBpart2100
  %459 = load i32, i32* @x.3
  %460 = load i32, i32* @y.4
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %458, %originalBB102alteredBB
  store i8 1, i8* @my_line_only, align 1, !dbg !852
  %467 = load i32, i32* @x.3
  %468 = load i32, i32* @y.4
  %469 = sub i32 %467, 1
  %470 = mul i32 %467, %469
  %471 = urem i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %472, %473
  br i1 %474, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br label %475, !dbg !854

475:                                              ; preds = %originalBBpart2104, %originalBBpart2100, %originalBBpart2100
  %476 = load i32, i32* @x.3
  %477 = load i32, i32* @y.4
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %475, %originalBB106alteredBB
  call void @who(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i32 1), !dbg !855
  %484 = load i32, i32* @x.3
  %485 = load i32, i32* @y.4
  %486 = sub i32 %484, 1
  %487 = mul i32 %484, %486
  %488 = urem i32 %487, 2
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %489, %490
  br i1 %491, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %523, !dbg !856

492:                                              ; preds = %originalBBpart2100
  %493 = load i8**, i8*** %13, align 8, !dbg !857
  %494 = load i32, i32* @optind, align 4, !dbg !858
  %495 = sext i32 %494 to i64, !dbg !857
  %496 = getelementptr inbounds i8*, i8** %493, i64 %495, !dbg !857
  %497 = load i8*, i8** %496, align 8, !dbg !857
  call void @who(i8* %497, i32 0), !dbg !859
  br label %523, !dbg !860

498:                                              ; preds = %originalBBpart2100
  %499 = load i32, i32* @x.3
  %500 = load i32, i32* @y.4
  %501 = sub i32 %499, 1
  %502 = mul i32 %499, %501
  %503 = urem i32 %502, 2
  %504 = icmp eq i32 %503, 0
  %505 = icmp slt i32 %500, 10
  %506 = or i1 %504, %505
  br i1 %506, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %498, %originalBB110alteredBB
  %507 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #10, !dbg !861
  %508 = load i8**, i8*** %13, align 8, !dbg !862
  %509 = load i32, i32* @optind, align 4, !dbg !863
  %510 = add nsw i32 %509, 2, !dbg !864
  %511 = sext i32 %510 to i64, !dbg !862
  %512 = getelementptr inbounds i8*, i8** %508, i64 %511, !dbg !862
  %513 = load i8*, i8** %512, align 8, !dbg !862
  %514 = call i8* @quote(i8* %513), !dbg !865
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %507, i8* %514), !dbg !866
  call void @usage(i32 1) #14, !dbg !867
  %515 = load i32, i32* @x.3
  %516 = load i32, i32* @y.4
  %517 = sub i32 %515, 1
  %518 = mul i32 %515, %517
  %519 = urem i32 %518, 2
  %520 = icmp eq i32 %519, 0
  %521 = icmp slt i32 %516, 10
  %522 = or i1 %520, %521
  br i1 %522, label %originalBBpart2119, label %originalBB110alteredBB

originalBBpart2119:                               ; preds = %originalBB110
  unreachable, !dbg !867

523:                                              ; preds = %492, %originalBBpart2108
  %524 = load i32, i32* @x.3
  %525 = load i32, i32* @y.4
  %526 = sub i32 %524, 1
  %527 = mul i32 %524, %526
  %528 = urem i32 %527, 2
  %529 = icmp eq i32 %528, 0
  %530 = icmp slt i32 %525, 10
  %531 = or i1 %529, %530
  br i1 %531, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %523, %originalBB121alteredBB
  %532 = load i32, i32* @x.3
  %533 = load i32, i32* @y.4
  %534 = sub i32 %532, 1
  %535 = mul i32 %532, %534
  %536 = urem i32 %535, 2
  %537 = icmp eq i32 %536, 0
  %538 = icmp slt i32 %533, 10
  %539 = or i1 %537, %538
  br i1 %539, label %originalBBpart2123, label %originalBB121alteredBB

originalBBpart2123:                               ; preds = %originalBB121
  ret i32 0, !dbg !868

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %540 = alloca i32, align 4
  %541 = alloca i32, align 4
  %542 = alloca i8**, align 8
  %543 = alloca i32, align 4
  %544 = alloca i8, align 1
  store i32 0, i32* %540, align 4
  store i32 %0, i32* %541, align 4
  call void @llvm.dbg.declare(metadata i32* %541, metadata !869, metadata !DIExpression()), !dbg !747
  store i8** %1, i8*** %542, align 8
  call void @llvm.dbg.declare(metadata i8*** %542, metadata !971, metadata !DIExpression()), !dbg !749
  call void @llvm.dbg.declare(metadata i32* %543, metadata !972, metadata !DIExpression()), !dbg !751
  call void @llvm.dbg.declare(metadata i8* %544, metadata !973, metadata !DIExpression()), !dbg !753
  store i8 1, i8* %544, align 1, !dbg !753
  %545 = load i8**, i8*** %542, align 8, !dbg !754
  %546 = getelementptr inbounds i8*, i8** %545, i64 0, !dbg !754
  %547 = load i8*, i8** %546, align 8, !dbg !754
  call void @set_program_name(i8* %547), !dbg !755
  %548 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)) #10, !dbg !756
  %549 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !757
  %550 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0)) #10, !dbg !758
  %551 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !759
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %552 = load i32, i32* %12, align 4, !dbg !761
  %553 = load i8**, i8*** %13, align 8, !dbg !762
  %554 = call i32 @getopt_long(i32 %552, i8** %553, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i64 0, i64 0), %struct.option* getelementptr inbounds ([18 x %struct.option], [18 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !763
  store i32 %554, i32* %14, align 4, !dbg !764
  %555 = icmp ne i32 %554, -1, !dbg !765
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  %556 = load i32, i32* %14, align 4, !dbg !766
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %70
  store i8 1, i8* @need_boottime, align 1, !dbg !769
  store i8 1, i8* @need_deadprocs, align 1, !dbg !771
  store i8 1, i8* @need_login, align 1, !dbg !772
  store i8 1, i8* @need_initspawn, align 1, !dbg !773
  store i8 1, i8* @need_runlevel, align 1, !dbg !774
  store i8 1, i8* @need_clockchange, align 1, !dbg !775
  store i8 1, i8* @need_users, align 1, !dbg !776
  store i8 1, i8* @include_mesg, align 1, !dbg !777
  store i8 1, i8* @include_idle, align 1, !dbg !778
  store i8 1, i8* @include_exit, align 1, !dbg !779
  store i8 0, i8* %15, align 1, !dbg !780
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  store i8 1, i8* @need_boottime, align 1, !dbg !782
  store i8 0, i8* %15, align 1, !dbg !783
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %104
  store i8 1, i8* @need_deadprocs, align 1, !dbg !785
  store i8 1, i8* @include_idle, align 1, !dbg !786
  store i8 1, i8* @include_exit, align 1, !dbg !787
  store i8 0, i8* %15, align 1, !dbg !788
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %121
  store i8 1, i8* @include_heading, align 1, !dbg !790
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %138
  store i8 1, i8* @need_login, align 1, !dbg !792
  store i8 1, i8* @include_idle, align 1, !dbg !793
  store i8 0, i8* %15, align 1, !dbg !794
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %156
  store i8 1, i8* @need_initspawn, align 1, !dbg !798
  store i8 0, i8* %15, align 1, !dbg !799
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %173
  store i8 1, i8* @short_list, align 1, !dbg !801
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %193
  store i8 1, i8* @include_mesg, align 1, !dbg !812
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %210
  store i8 1, i8* @need_users, align 1, !dbg !814
  store i8 1, i8* @include_idle, align 1, !dbg !815
  store i8 0, i8* %15, align 1, !dbg !816
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %227
  store i8 1, i8* @do_lookup, align 1, !dbg !818
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %244
  call void @usage(i32 0) #14, !dbg !820
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %261
  %557 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !821
  %558 = load i8*, i8** @Version, align 8, !dbg !821
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %557, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), i8* %558, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0), i8* null), !dbg !821
  call void @exit(i32 0) #12, !dbg !821
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %280
  call void @usage(i32 1) #14, !dbg !822
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %297
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %314
  %559 = load i8, i8* %15, align 1, !dbg !825
  %560 = trunc i8 %559 to i1, !dbg !825
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %333
  store i8 1, i8* @need_users, align 1, !dbg !828
  store i8 1, i8* @short_output, align 1, !dbg !830
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %350
  %561 = load i8, i8* @include_exit, align 1, !dbg !832
  %562 = trunc i8 %561 to i1, !dbg !832
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %369
  store i8 0, i8* @short_output, align 1, !dbg !835
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %386
  %563 = call zeroext i1 @hard_locale(i32 2), !dbg !838
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %404
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22, i64 0, i64 0), i8** @time_format, align 8, !dbg !841
  store i32 16, i32* @time_format_width, align 4, !dbg !843
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %421
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i64 0, i64 0), i8** @time_format, align 8, !dbg !845
  store i32 12, i32* @time_format_width, align 4, !dbg !847
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %438
  %564 = load i32, i32* %12, align 4, !dbg !848
  %565 = load i32, i32* @optind, align 4, !dbg !849
  %_ = shl i32 %564, %565
  %_95 = sub i32 %564, %565
  %gen = mul i32 %_95, %565
  %_96 = sub i32 %564, %565
  %gen97 = mul i32 %_96, %565
  %_98 = shl i32 %564, %565
  %566 = sub nsw i32 %564, %565, !dbg !850
  br label %originalBB94

originalBB102alteredBB:                           ; preds = %originalBB102, %458
  store i8 1, i8* @my_line_only, align 1, !dbg !852
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %475
  call void @who(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.11, i64 0, i64 0), i32 1), !dbg !855
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %498
  %567 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.24, i64 0, i64 0)) #10, !dbg !861
  %568 = load i8**, i8*** %13, align 8, !dbg !862
  %569 = load i32, i32* @optind, align 4, !dbg !863
  %_111 = sub i32 0, %569
  %gen112 = add i32 %_111, 2
  %_113 = sub i32 0, %569
  %gen114 = add i32 %_113, 2
  %_115 = shl i32 %569, 2
  %_116 = sub i32 0, %569
  %gen117 = add i32 %_116, 2
  %570 = add nsw i32 %569, 2, !dbg !864
  %571 = sext i32 %570 to i64, !dbg !862
  %572 = getelementptr inbounds i8*, i8** %568, i64 %571, !dbg !862
  %573 = load i8*, i8** %572, align 8, !dbg !862
  %574 = call i8* @quote(i8* %573), !dbg !865
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %567, i8* %574), !dbg !866
  call void @usage(i32 1) #14, !dbg !867
  br label %originalBB110

originalBB121alteredBB:                           ; preds = %originalBB121, %523
  br label %originalBB121
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @who(i8*, i32) #4 !dbg !974 {
  %3 = load i32, i32* @x.5
  %4 = load i32, i32* @y.6
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca %struct.utmpx*, align 8
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !977, metadata !DIExpression()), !dbg !978
  store i32 %1, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !979, metadata !DIExpression()), !dbg !980
  call void @llvm.dbg.declare(metadata i64* %13, metadata !981, metadata !DIExpression()), !dbg !982
  call void @llvm.dbg.declare(metadata %struct.utmpx** %14, metadata !983, metadata !DIExpression()), !dbg !985
  %15 = load i8*, i8** %11, align 8, !dbg !986
  %16 = load i32, i32* %12, align 4, !dbg !988
  %17 = call i32 @read_utmp(i8* %15, i64* %13, %struct.utmpx** %14, i32 %16), !dbg !989
  %18 = icmp ne i32 %17, 0, !dbg !990
  %19 = load i32, i32* @x.5
  %20 = load i32, i32* @y.6
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %48, !dbg !991

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.5
  %29 = load i32, i32* @y.6
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = call i32* @__errno_location() #15, !dbg !992
  %37 = load i32, i32* %36, align 4, !dbg !992
  %38 = load i8*, i8** %11, align 8, !dbg !992
  %39 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %38), !dbg !992
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %37, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i64 0, i64 0), i8* %39), !dbg !992
  %40 = load i32, i32* @x.5
  %41 = load i32, i32* @y.6
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !992

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.5
  %50 = load i32, i32* @y.6
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i8, i8* @short_list, align 1, !dbg !993
  %58 = trunc i8 %57 to i1, !dbg !993
  %59 = load i32, i32* @x.5
  %60 = load i32, i32* @y.6
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %58, label %67, label %70, !dbg !995

67:                                               ; preds = %originalBBpart28
  %68 = load i64, i64* %13, align 8, !dbg !996
  %69 = load %struct.utmpx*, %struct.utmpx** %14, align 8, !dbg !997
  call void @list_entries_who(i64 %68, %struct.utmpx* %69), !dbg !998
  br label %73, !dbg !998

70:                                               ; preds = %originalBBpart28
  %71 = load i64, i64* %13, align 8, !dbg !999
  %72 = load %struct.utmpx*, %struct.utmpx** %14, align 8, !dbg !1000
  call void @scan_entries(i64 %71, %struct.utmpx* %72), !dbg !1001
  br label %73

73:                                               ; preds = %70, %67
  %74 = load i32, i32* @x.5
  %75 = load i32, i32* @y.6
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %73, %originalBB10alteredBB
  %82 = load %struct.utmpx*, %struct.utmpx** %14, align 8, !dbg !1002
  %83 = bitcast %struct.utmpx* %82 to i8*, !dbg !1002
  call void @free(i8* %83) #10, !dbg !1003
  %84 = load i32, i32* @x.5
  %85 = load i32, i32* @y.6
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret void, !dbg !1004

originalBBalteredBB:                              ; preds = %originalBB, %2
  %92 = alloca i8*, align 8
  %93 = alloca i32, align 4
  %94 = alloca i64, align 8
  %95 = alloca %struct.utmpx*, align 8
  store i8* %0, i8** %92, align 8
  call void @llvm.dbg.declare(metadata i8** %92, metadata !1005, metadata !DIExpression()), !dbg !978
  store i32 %1, i32* %93, align 4
  call void @llvm.dbg.declare(metadata i32* %93, metadata !1107, metadata !DIExpression()), !dbg !980
  call void @llvm.dbg.declare(metadata i64* %94, metadata !1108, metadata !DIExpression()), !dbg !982
  call void @llvm.dbg.declare(metadata %struct.utmpx** %95, metadata !1109, metadata !DIExpression()), !dbg !985
  %96 = load i8*, i8** %92, align 8, !dbg !986
  %97 = load i32, i32* %93, align 4, !dbg !988
  %98 = call i32 @read_utmp(i8* %96, i64* %94, %struct.utmpx** %95, i32 %97), !dbg !989
  %99 = icmp ne i32 %98, 0, !dbg !990
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %100 = call i32* @__errno_location() #15, !dbg !992
  %101 = load i32, i32* %100, align 4, !dbg !992
  %102 = load i8*, i8** %11, align 8, !dbg !992
  %103 = call i8* @quotearg_n_style_colon(i32 0, i32 3, i8* %102), !dbg !992
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %101, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.57, i64 0, i64 0), i8* %103), !dbg !992
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %104 = load i8, i8* @short_list, align 1, !dbg !993
  %105 = trunc i8 %104 to i1, !dbg !993
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %73
  %106 = load %struct.utmpx*, %struct.utmpx** %14, align 8, !dbg !1002
  %107 = bitcast %struct.utmpx* %106 to i8*, !dbg !1002
  call void @free(i8* %107) #10, !dbg !1003
  br label %originalBB10
}

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal void @list_entries_who(i64, %struct.utmpx*) #4 !dbg !1111 {
  %3 = alloca i64, align 8
  %4 = alloca %struct.utmpx*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  call void @llvm.dbg.declare(metadata i64* %3, metadata !1114, metadata !DIExpression()), !dbg !1115
  store %struct.utmpx* %1, %struct.utmpx** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %4, metadata !1116, metadata !DIExpression()), !dbg !1117
  call void @llvm.dbg.declare(metadata i64* %5, metadata !1118, metadata !DIExpression()), !dbg !1119
  store i64 0, i64* %5, align 8, !dbg !1119
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1120, metadata !DIExpression()), !dbg !1121
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8** %6, align 8, !dbg !1121
  br label %8, !dbg !1122

8:                                                ; preds = %originalBBpart215, %2
  %9 = load i32, i32* @x.7
  %10 = load i32, i32* @y.8
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load i64, i64* %3, align 8, !dbg !1123
  %18 = add i64 %17, -1, !dbg !1123
  store i64 %18, i64* %3, align 8, !dbg !1123
  %19 = icmp ne i64 %17, 0, !dbg !1122
  %20 = load i32, i32* @x.7
  %21 = load i32, i32* @y.8
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %19, label %28, label %85, !dbg !1122

28:                                               ; preds = %originalBBpart2
  %29 = load i32, i32* @x.7
  %30 = load i32, i32* @y.8
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB9, label %originalBB9alteredBB

originalBB9:                                      ; preds = %28, %originalBB9alteredBB
  %37 = load %struct.utmpx*, %struct.utmpx** %4, align 8, !dbg !1124
  %38 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %37, i32 0, i32 4, !dbg !1124
  %39 = getelementptr inbounds [32 x i8], [32 x i8]* %38, i64 0, i64 0, !dbg !1124
  %40 = load i8, i8* %39, align 4, !dbg !1124
  %41 = sext i8 %40 to i32, !dbg !1124
  %42 = icmp ne i32 %41, 0, !dbg !1124
  %43 = load i32, i32* @x.7
  %44 = load i32, i32* @y.8
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBBpart211, label %originalBB9alteredBB

originalBBpart211:                                ; preds = %originalBB9
  br i1 %42, label %51, label %66, !dbg !1124

51:                                               ; preds = %originalBBpart211
  %52 = load %struct.utmpx*, %struct.utmpx** %4, align 8, !dbg !1124
  %53 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %52, i32 0, i32 0, !dbg !1124
  %54 = load i16, i16* %53, align 4, !dbg !1124
  %55 = sext i16 %54 to i32, !dbg !1124
  %56 = icmp eq i32 %55, 7, !dbg !1124
  br i1 %56, label %57, label %66, !dbg !1127

57:                                               ; preds = %51
  call void @llvm.dbg.declare(metadata i8** %7, metadata !1128, metadata !DIExpression()), !dbg !1130
  %58 = load %struct.utmpx*, %struct.utmpx** %4, align 8, !dbg !1131
  %59 = call i8* @extract_trimmed_name(%struct.utmpx* %58), !dbg !1132
  store i8* %59, i8** %7, align 8, !dbg !1133
  %60 = load i8*, i8** %6, align 8, !dbg !1134
  %61 = load i8*, i8** %7, align 8, !dbg !1135
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i64 0, i64 0), i8* %60, i8* %61), !dbg !1136
  %63 = load i8*, i8** %7, align 8, !dbg !1137
  call void @free(i8* %63) #10, !dbg !1138
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i64 0, i64 0), i8** %6, align 8, !dbg !1139
  %64 = load i64, i64* %5, align 8, !dbg !1140
  %65 = add i64 %64, 1, !dbg !1140
  store i64 %65, i64* %5, align 8, !dbg !1140
  br label %66, !dbg !1141

66:                                               ; preds = %57, %51, %originalBBpart211
  %67 = load i32, i32* @x.7
  %68 = load i32, i32* @y.8
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %66, %originalBB13alteredBB
  %75 = load %struct.utmpx*, %struct.utmpx** %4, align 8, !dbg !1142
  %76 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %75, i32 1, !dbg !1142
  store %struct.utmpx* %76, %struct.utmpx** %4, align 8, !dbg !1142
  %77 = load i32, i32* @x.7
  %78 = load i32, i32* @y.8
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br label %8, !dbg !1122, !llvm.loop !1143

85:                                               ; preds = %originalBBpart2
  %86 = call i8* @gettext(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.60, i64 0, i64 0)) #10, !dbg !1145
  %87 = load i64, i64* %5, align 8, !dbg !1146
  %88 = call i32 (i8*, ...) @printf(i8* %86, i64 %87), !dbg !1147
  ret void, !dbg !1148

originalBBalteredBB:                              ; preds = %originalBB, %8
  %89 = load i64, i64* %3, align 8, !dbg !1123
  %_ = sub i64 %89, -1
  %gen = mul i64 %_, -1
  %_1 = sub i64 %89, -1
  %gen2 = mul i64 %_1, -1
  %_3 = sub i64 0, %89
  %gen4 = add i64 %_3, -1
  %_5 = sub i64 0, %89
  %gen6 = add i64 %_5, -1
  %_7 = sub i64 %89, -1
  %gen8 = mul i64 %_7, -1
  %90 = add i64 %89, -1, !dbg !1123
  store i64 %90, i64* %3, align 8, !dbg !1123
  %91 = icmp ne i64 %89, 0, !dbg !1122
  br label %originalBB

originalBB9alteredBB:                             ; preds = %originalBB9, %28
  %92 = load %struct.utmpx*, %struct.utmpx** %4, align 8, !dbg !1124
  %93 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %92, i32 0, i32 4, !dbg !1124
  %94 = getelementptr inbounds [32 x i8], [32 x i8]* %93, i64 0, i64 0, !dbg !1124
  %95 = load i8, i8* %94, align 4, !dbg !1124
  %96 = sext i8 %95 to i32, !dbg !1124
  %97 = icmp ne i32 %96, 0, !dbg !1124
  br label %originalBB9

originalBB13alteredBB:                            ; preds = %originalBB13, %66
  %98 = load %struct.utmpx*, %struct.utmpx** %4, align 8, !dbg !1142
  %99 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %98, i32 1, !dbg !1142
  store %struct.utmpx* %99, %struct.utmpx** %4, align 8, !dbg !1142
  br label %originalBB13
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @scan_entries(i64, %struct.utmpx*) #4 !dbg !1149 {
  %3 = load i32, i32* @x.9
  %4 = load i32, i32* @y.10
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca %struct.utmpx*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !1150, metadata !DIExpression()), !dbg !1151
  store %struct.utmpx* %1, %struct.utmpx** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %12, metadata !1152, metadata !DIExpression()), !dbg !1153
  call void @llvm.dbg.declare(metadata i8** %13, metadata !1154, metadata !DIExpression()), !dbg !1155
  call void @llvm.dbg.declare(metadata i64* %14, metadata !1156, metadata !DIExpression()), !dbg !1157
  store i64 -9223372036854775808, i64* %14, align 8, !dbg !1157
  %15 = load i8, i8* @include_heading, align 1, !dbg !1158
  %16 = trunc i8 %15 to i1, !dbg !1158
  %17 = load i32, i32* @x.9
  %18 = load i32, i32* @y.10
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !1160

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.9
  %27 = load i32, i32* @y.10
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  call void @print_heading(), !dbg !1161
  %34 = load i32, i32* @x.9
  %35 = load i32, i32* @y.10
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %42, !dbg !1161

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.9
  %44 = load i32, i32* @y.10
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8, i8* @my_line_only, align 1, !dbg !1162
  %52 = trunc i8 %51 to i1, !dbg !1162
  %53 = load i32, i32* @x.9
  %54 = load i32, i32* @y.10
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %52, label %61, label %328, !dbg !1164

61:                                               ; preds = %originalBBpart28
  %62 = load i32, i32* @x.9
  %63 = load i32, i32* @y.10
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = call i8* @ttyname(i32 0) #10, !dbg !1165
  store i8* %70, i8** %13, align 8, !dbg !1167
  %71 = load i8*, i8** %13, align 8, !dbg !1168
  %72 = icmp ne i8* %71, null, !dbg !1168
  %73 = load i32, i32* @x.9
  %74 = load i32, i32* @y.10
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %72, label %98, label %81, !dbg !1170

81:                                               ; preds = %originalBBpart212
  %82 = load i32, i32* @x.9
  %83 = load i32, i32* @y.10
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* @x.9
  %91 = load i32, i32* @y.10
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %866, !dbg !1171

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.9
  %100 = load i32, i32* @y.10
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %98, %originalBB18alteredBB
  %107 = load i8*, i8** %13, align 8, !dbg !1172
  %108 = call i32 @strncmp(i8* %107, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0), i64 5) #13, !dbg !1172
  %109 = load i32, i32* @x.9
  %110 = load i32, i32* @y.10
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %117, !dbg !1174

117:                                              ; preds = %originalBBpart220
  %118 = load i32, i32* @x.9
  %119 = load i32, i32* @y.10
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %117, %originalBB22alteredBB
  %collatzVar = alloca i32
  %126 = load i32, i32* @x.9
  %127 = load i32, i32* @y.10
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %134

134:                                              ; preds = %originalBBpart224
  %135 = load i32, i32* @x.9
  %136 = load i32, i32* @y.10
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %134, %originalBB26alteredBB
  %143 = load i32, i32* @inVal0
  %144 = icmp sgt i32 %143, 1
  %145 = load i32, i32* @x.9
  %146 = load i32, i32* @y.10
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %144, label %170, label %153

153:                                              ; preds = %originalBBpart228
  %154 = load i32, i32* @x.9
  %155 = load i32, i32* @y.10
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %153, %originalBB30alteredBB
  store i32 45, i32* %collatzVar
  %162 = load i32, i32* @x.9
  %163 = load i32, i32* @y.10
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %170

170:                                              ; preds = %originalBBpart232, %originalBBpart228
  %171 = load i8**, i8*** @inVal1
  %172 = getelementptr inbounds i8*, i8** %171, i64 1
  %173 = load i8*, i8** %172
  %controle = call i32 @controle(i8* %173, i32 0)
  store i32 %controle, i32* %collatzVar
  br label %174

174:                                              ; preds = %originalBBpart2104, %originalBBpart292, %170
  %175 = load i32, i32* @x.9
  %176 = load i32, i32* @y.10
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %174, %originalBB34alteredBB
  %183 = load i32, i32* %collatzVar
  %184 = icmp sgt i32 %183, 1
  %185 = load i32, i32* @x.9
  %186 = load i32, i32* @y.10
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %184, label %193, label %311

193:                                              ; preds = %originalBBpart236
  %194 = load i32, i32* @x.9
  %195 = load i32, i32* @y.10
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %193, %originalBB38alteredBB
  %202 = load i32, i32* %collatzVar
  %203 = srem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = load i32, i32* @x.9
  %206 = load i32, i32* @y.10
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart252, label %originalBB38alteredBB

originalBBpart252:                                ; preds = %originalBB38
  br i1 %204, label %213, label %232

213:                                              ; preds = %originalBBpart252
  %214 = load i32, i32* @x.9
  %215 = load i32, i32* @y.10
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %213, %originalBB54alteredBB
  %222 = load i32, i32* %collatzVar
  %223 = sdiv i32 %222, 2
  store i32 %223, i32* %collatzVar
  %224 = load i32, i32* @x.9
  %225 = load i32, i32* @y.10
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBBpart269, label %originalBB54alteredBB

originalBBpart269:                                ; preds = %originalBB54
  br label %252

232:                                              ; preds = %originalBBpart252
  %233 = load i32, i32* @x.9
  %234 = load i32, i32* @y.10
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %232, %originalBB71alteredBB
  %241 = load i32, i32* %collatzVar
  %242 = mul i32 %241, 3
  %243 = add i32 %242, 1
  store i32 %243, i32* %collatzVar
  %244 = load i32, i32* @x.9
  %245 = load i32, i32* @y.10
  %246 = sub i32 %244, 1
  %247 = mul i32 %244, %246
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %249, %250
  br i1 %251, label %originalBBpart288, label %originalBB71alteredBB

originalBBpart288:                                ; preds = %originalBB71
  br label %252

252:                                              ; preds = %originalBBpart288, %originalBBpart269
  %253 = load i32, i32* @x.9
  %254 = load i32, i32* @y.10
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %252, %originalBB90alteredBB
  %261 = load i32, i32* %collatzVar
  %262 = sub i32 %108, %261
  %263 = icmp sgt i32 %262, -2
  %264 = load i32, i32* @x.9
  %265 = load i32, i32* @y.10
  %266 = sub i32 %264, 1
  %267 = mul i32 %264, %266
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %269, %270
  br i1 %271, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br i1 %263, label %272, label %174

272:                                              ; preds = %originalBBpart292
  %273 = load i32, i32* @x.9
  %274 = load i32, i32* @y.10
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %272, %originalBB94alteredBB
  %281 = load i32, i32* %collatzVar
  %282 = add i32 %108, %281
  %283 = icmp slt i32 %282, 2
  %284 = load i32, i32* @x.9
  %285 = load i32, i32* @y.10
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart2104, label %originalBB94alteredBB

originalBBpart2104:                               ; preds = %originalBB94
  br i1 %283, label %292, label %174

292:                                              ; preds = %originalBBpart2104
  %293 = load i32, i32* @x.9
  %294 = load i32, i32* @y.10
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %292, %originalBB106alteredBB
  %301 = load i8*, i8** %13, align 8, !dbg !1175
  %302 = getelementptr inbounds i8, i8* %301, i64 5, !dbg !1175
  store i8* %302, i8** %13, align 8, !dbg !1175
  %303 = load i32, i32* @x.9
  %304 = load i32, i32* @y.10
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %311, !dbg !1176

311:                                              ; preds = %originalBBpart2108, %originalBBpart236
  %312 = load i32, i32* @x.9
  %313 = load i32, i32* @y.10
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %311, %originalBB110alteredBB
  %320 = load i32, i32* @x.9
  %321 = load i32, i32* @y.10
  %322 = sub i32 %320, 1
  %323 = mul i32 %320, %322
  %324 = urem i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %325, %326
  br i1 %327, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %328, !dbg !1177

328:                                              ; preds = %originalBBpart2112, %originalBBpart28
  %329 = load i32, i32* @x.9
  %330 = load i32, i32* @y.10
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %328, %originalBB114alteredBB
  %337 = load i32, i32* @x.9
  %338 = load i32, i32* @y.10
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %345, !dbg !1178

345:                                              ; preds = %originalBBpart2216, %originalBBpart2116
  %346 = load i64, i64* %11, align 8, !dbg !1179
  %347 = add i64 %346, -1, !dbg !1179
  store i64 %347, i64* %11, align 8, !dbg !1179
  %348 = icmp ne i64 %346, 0, !dbg !1178
  br i1 %348, label %349, label %866, !dbg !1178

349:                                              ; preds = %345
  %350 = load i8, i8* @my_line_only, align 1, !dbg !1180
  %351 = trunc i8 %350 to i1, !dbg !1180
  br i1 %351, label %352, label %375, !dbg !1183

352:                                              ; preds = %349
  %353 = load i32, i32* @x.9
  %354 = load i32, i32* @y.10
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %352, %originalBB118alteredBB
  %361 = load i8*, i8** %13, align 8, !dbg !1184
  %362 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1184
  %363 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %362, i32 0, i32 2, !dbg !1184
  %364 = getelementptr inbounds [32 x i8], [32 x i8]* %363, i64 0, i64 0, !dbg !1184
  %365 = call i32 @strncmp(i8* %361, i8* %364, i64 32) #13, !dbg !1184
  %366 = icmp eq i32 %365, 0, !dbg !1184
  %367 = load i32, i32* @x.9
  %368 = load i32, i32* @y.10
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br i1 %366, label %375, label %803, !dbg !1185

375:                                              ; preds = %originalBBpart2120, %349
  %376 = load i32, i32* @x.9
  %377 = load i32, i32* @y.10
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %375, %originalBB122alteredBB
  %384 = load i8, i8* @need_users, align 1, !dbg !1186
  %385 = trunc i8 %384 to i1, !dbg !1186
  %386 = load i32, i32* @x.9
  %387 = load i32, i32* @y.10
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br i1 %385, label %394, label %458, !dbg !1189

394:                                              ; preds = %originalBBpart2124
  %395 = load i32, i32* @x.9
  %396 = load i32, i32* @y.10
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %394, %originalBB126alteredBB
  %403 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1190
  %404 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %403, i32 0, i32 4, !dbg !1190
  %405 = getelementptr inbounds [32 x i8], [32 x i8]* %404, i64 0, i64 0, !dbg !1190
  %406 = load i8, i8* %405, align 4, !dbg !1190
  %407 = sext i8 %406 to i32, !dbg !1190
  %408 = icmp ne i32 %407, 0, !dbg !1190
  %409 = load i32, i32* @x.9
  %410 = load i32, i32* @y.10
  %411 = sub i32 %409, 1
  %412 = mul i32 %409, %411
  %413 = urem i32 %412, 2
  %414 = icmp eq i32 %413, 0
  %415 = icmp slt i32 %410, 10
  %416 = or i1 %414, %415
  br i1 %416, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  br i1 %408, label %417, label %458, !dbg !1190

417:                                              ; preds = %originalBBpart2128
  %418 = load i32, i32* @x.9
  %419 = load i32, i32* @y.10
  %420 = sub i32 %418, 1
  %421 = mul i32 %418, %420
  %422 = urem i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %423, %424
  br i1 %425, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %417, %originalBB130alteredBB
  %426 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1190
  %427 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %426, i32 0, i32 0, !dbg !1190
  %428 = load i16, i16* %427, align 4, !dbg !1190
  %429 = sext i16 %428 to i32, !dbg !1190
  %430 = icmp eq i32 %429, 7, !dbg !1190
  %431 = load i32, i32* @x.9
  %432 = load i32, i32* @y.10
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br i1 %430, label %439, label %458, !dbg !1191

439:                                              ; preds = %originalBBpart2132
  %440 = load i32, i32* @x.9
  %441 = load i32, i32* @y.10
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %439, %originalBB134alteredBB
  %448 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1192
  %449 = load i64, i64* %14, align 8, !dbg !1193
  call void @print_user(%struct.utmpx* %448, i64 %449), !dbg !1194
  %450 = load i32, i32* @x.9
  %451 = load i32, i32* @y.10
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br label %786, !dbg !1194

458:                                              ; preds = %originalBBpart2132, %originalBBpart2128, %originalBBpart2124
  %459 = load i32, i32* @x.9
  %460 = load i32, i32* @y.10
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %458, %originalBB138alteredBB
  %467 = load i8, i8* @need_runlevel, align 1, !dbg !1195
  %468 = trunc i8 %467 to i1, !dbg !1195
  %469 = load i32, i32* @x.9
  %470 = load i32, i32* @y.10
  %471 = sub i32 %469, 1
  %472 = mul i32 %469, %471
  %473 = urem i32 %472, 2
  %474 = icmp eq i32 %473, 0
  %475 = icmp slt i32 %470, 10
  %476 = or i1 %474, %475
  br i1 %476, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br i1 %468, label %477, label %517, !dbg !1197

477:                                              ; preds = %originalBBpart2140
  %478 = load i32, i32* @x.9
  %479 = load i32, i32* @y.10
  %480 = sub i32 %478, 1
  %481 = mul i32 %478, %480
  %482 = urem i32 %481, 2
  %483 = icmp eq i32 %482, 0
  %484 = icmp slt i32 %479, 10
  %485 = or i1 %483, %484
  br i1 %485, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %477, %originalBB142alteredBB
  %486 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1198
  %487 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %486, i32 0, i32 0, !dbg !1198
  %488 = load i16, i16* %487, align 4, !dbg !1198
  %489 = sext i16 %488 to i32, !dbg !1198
  %490 = icmp eq i32 %489, 1, !dbg !1198
  %491 = load i32, i32* @x.9
  %492 = load i32, i32* @y.10
  %493 = sub i32 %491, 1
  %494 = mul i32 %491, %493
  %495 = urem i32 %494, 2
  %496 = icmp eq i32 %495, 0
  %497 = icmp slt i32 %492, 10
  %498 = or i1 %496, %497
  br i1 %498, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br i1 %490, label %499, label %517, !dbg !1199

499:                                              ; preds = %originalBBpart2144
  %500 = load i32, i32* @x.9
  %501 = load i32, i32* @y.10
  %502 = sub i32 %500, 1
  %503 = mul i32 %500, %502
  %504 = urem i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = icmp slt i32 %501, 10
  %507 = or i1 %505, %506
  br i1 %507, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %499, %originalBB146alteredBB
  %508 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1200
  call void @print_runlevel(%struct.utmpx* %508), !dbg !1201
  %509 = load i32, i32* @x.9
  %510 = load i32, i32* @y.10
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br label %785, !dbg !1201

517:                                              ; preds = %originalBBpart2144, %originalBBpart2140
  %518 = load i32, i32* @x.9
  %519 = load i32, i32* @y.10
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %517, %originalBB150alteredBB
  %526 = load i8, i8* @need_boottime, align 1, !dbg !1202
  %527 = trunc i8 %526 to i1, !dbg !1202
  %528 = load i32, i32* @x.9
  %529 = load i32, i32* @y.10
  %530 = sub i32 %528, 1
  %531 = mul i32 %528, %530
  %532 = urem i32 %531, 2
  %533 = icmp eq i32 %532, 0
  %534 = icmp slt i32 %529, 10
  %535 = or i1 %533, %534
  br i1 %535, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br i1 %527, label %536, label %576, !dbg !1204

536:                                              ; preds = %originalBBpart2152
  %537 = load i32, i32* @x.9
  %538 = load i32, i32* @y.10
  %539 = sub i32 %537, 1
  %540 = mul i32 %537, %539
  %541 = urem i32 %540, 2
  %542 = icmp eq i32 %541, 0
  %543 = icmp slt i32 %538, 10
  %544 = or i1 %542, %543
  br i1 %544, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %536, %originalBB154alteredBB
  %545 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1205
  %546 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %545, i32 0, i32 0, !dbg !1205
  %547 = load i16, i16* %546, align 4, !dbg !1205
  %548 = sext i16 %547 to i32, !dbg !1205
  %549 = icmp eq i32 %548, 2, !dbg !1205
  %550 = load i32, i32* @x.9
  %551 = load i32, i32* @y.10
  %552 = sub i32 %550, 1
  %553 = mul i32 %550, %552
  %554 = urem i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = icmp slt i32 %551, 10
  %557 = or i1 %555, %556
  br i1 %557, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br i1 %549, label %558, label %576, !dbg !1206

558:                                              ; preds = %originalBBpart2156
  %559 = load i32, i32* @x.9
  %560 = load i32, i32* @y.10
  %561 = sub i32 %559, 1
  %562 = mul i32 %559, %561
  %563 = urem i32 %562, 2
  %564 = icmp eq i32 %563, 0
  %565 = icmp slt i32 %560, 10
  %566 = or i1 %564, %565
  br i1 %566, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %558, %originalBB158alteredBB
  %567 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1207
  call void @print_boottime(%struct.utmpx* %567), !dbg !1208
  %568 = load i32, i32* @x.9
  %569 = load i32, i32* @y.10
  %570 = sub i32 %568, 1
  %571 = mul i32 %568, %570
  %572 = urem i32 %571, 2
  %573 = icmp eq i32 %572, 0
  %574 = icmp slt i32 %569, 10
  %575 = or i1 %573, %574
  br i1 %575, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br label %768, !dbg !1208

576:                                              ; preds = %originalBBpart2156, %originalBBpart2152
  %577 = load i8, i8* @need_clockchange, align 1, !dbg !1209
  %578 = trunc i8 %577 to i1, !dbg !1209
  br i1 %578, label %579, label %619, !dbg !1211

579:                                              ; preds = %576
  %580 = load i32, i32* @x.9
  %581 = load i32, i32* @y.10
  %582 = sub i32 %580, 1
  %583 = mul i32 %580, %582
  %584 = urem i32 %583, 2
  %585 = icmp eq i32 %584, 0
  %586 = icmp slt i32 %581, 10
  %587 = or i1 %585, %586
  br i1 %587, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %579, %originalBB162alteredBB
  %588 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1212
  %589 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %588, i32 0, i32 0, !dbg !1212
  %590 = load i16, i16* %589, align 4, !dbg !1212
  %591 = sext i16 %590 to i32, !dbg !1212
  %592 = icmp eq i32 %591, 3, !dbg !1212
  %593 = load i32, i32* @x.9
  %594 = load i32, i32* @y.10
  %595 = sub i32 %593, 1
  %596 = mul i32 %593, %595
  %597 = urem i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = icmp slt i32 %594, 10
  %600 = or i1 %598, %599
  br i1 %600, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br i1 %592, label %601, label %619, !dbg !1213

601:                                              ; preds = %originalBBpart2164
  %602 = load i32, i32* @x.9
  %603 = load i32, i32* @y.10
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %601, %originalBB166alteredBB
  %610 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1214
  call void @print_clockchange(%struct.utmpx* %610), !dbg !1215
  %611 = load i32, i32* @x.9
  %612 = load i32, i32* @y.10
  %613 = sub i32 %611, 1
  %614 = mul i32 %611, %613
  %615 = urem i32 %614, 2
  %616 = icmp eq i32 %615, 0
  %617 = icmp slt i32 %612, 10
  %618 = or i1 %616, %617
  br i1 %618, label %originalBBpart2168, label %originalBB166alteredBB

originalBBpart2168:                               ; preds = %originalBB166
  br label %767, !dbg !1215

619:                                              ; preds = %originalBBpart2164, %576
  %620 = load i32, i32* @x.9
  %621 = load i32, i32* @y.10
  %622 = sub i32 %620, 1
  %623 = mul i32 %620, %622
  %624 = urem i32 %623, 2
  %625 = icmp eq i32 %624, 0
  %626 = icmp slt i32 %621, 10
  %627 = or i1 %625, %626
  br i1 %627, label %originalBB170, label %originalBB170alteredBB

originalBB170:                                    ; preds = %619, %originalBB170alteredBB
  %628 = load i8, i8* @need_initspawn, align 1, !dbg !1216
  %629 = trunc i8 %628 to i1, !dbg !1216
  %630 = load i32, i32* @x.9
  %631 = load i32, i32* @y.10
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBBpart2172, label %originalBB170alteredBB

originalBBpart2172:                               ; preds = %originalBB170
  br i1 %629, label %638, label %662, !dbg !1218

638:                                              ; preds = %originalBBpart2172
  %639 = load i32, i32* @x.9
  %640 = load i32, i32* @y.10
  %641 = sub i32 %639, 1
  %642 = mul i32 %639, %641
  %643 = urem i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = icmp slt i32 %640, 10
  %646 = or i1 %644, %645
  br i1 %646, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %638, %originalBB174alteredBB
  %647 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1219
  %648 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %647, i32 0, i32 0, !dbg !1219
  %649 = load i16, i16* %648, align 4, !dbg !1219
  %650 = sext i16 %649 to i32, !dbg !1219
  %651 = icmp eq i32 %650, 5, !dbg !1219
  %652 = load i32, i32* @x.9
  %653 = load i32, i32* @y.10
  %654 = sub i32 %652, 1
  %655 = mul i32 %652, %654
  %656 = urem i32 %655, 2
  %657 = icmp eq i32 %656, 0
  %658 = icmp slt i32 %653, 10
  %659 = or i1 %657, %658
  br i1 %659, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  br i1 %651, label %660, label %662, !dbg !1220

660:                                              ; preds = %originalBBpart2176
  %661 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1221
  call void @print_initspawn(%struct.utmpx* %661), !dbg !1222
  br label %766, !dbg !1222

662:                                              ; preds = %originalBBpart2176, %originalBBpart2172
  %663 = load i32, i32* @x.9
  %664 = load i32, i32* @y.10
  %665 = sub i32 %663, 1
  %666 = mul i32 %663, %665
  %667 = urem i32 %666, 2
  %668 = icmp eq i32 %667, 0
  %669 = icmp slt i32 %664, 10
  %670 = or i1 %668, %669
  br i1 %670, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %662, %originalBB178alteredBB
  %671 = load i8, i8* @need_login, align 1, !dbg !1223
  %672 = trunc i8 %671 to i1, !dbg !1223
  %673 = load i32, i32* @x.9
  %674 = load i32, i32* @y.10
  %675 = sub i32 %673, 1
  %676 = mul i32 %673, %675
  %677 = urem i32 %676, 2
  %678 = icmp eq i32 %677, 0
  %679 = icmp slt i32 %674, 10
  %680 = or i1 %678, %679
  br i1 %680, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br i1 %672, label %681, label %721, !dbg !1225

681:                                              ; preds = %originalBBpart2180
  %682 = load i32, i32* @x.9
  %683 = load i32, i32* @y.10
  %684 = sub i32 %682, 1
  %685 = mul i32 %682, %684
  %686 = urem i32 %685, 2
  %687 = icmp eq i32 %686, 0
  %688 = icmp slt i32 %683, 10
  %689 = or i1 %687, %688
  br i1 %689, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %681, %originalBB182alteredBB
  %690 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1226
  %691 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %690, i32 0, i32 0, !dbg !1226
  %692 = load i16, i16* %691, align 4, !dbg !1226
  %693 = sext i16 %692 to i32, !dbg !1226
  %694 = icmp eq i32 %693, 6, !dbg !1226
  %695 = load i32, i32* @x.9
  %696 = load i32, i32* @y.10
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBBpart2184, label %originalBB182alteredBB

originalBBpart2184:                               ; preds = %originalBB182
  br i1 %694, label %703, label %721, !dbg !1227

703:                                              ; preds = %originalBBpart2184
  %704 = load i32, i32* @x.9
  %705 = load i32, i32* @y.10
  %706 = sub i32 %704, 1
  %707 = mul i32 %704, %706
  %708 = urem i32 %707, 2
  %709 = icmp eq i32 %708, 0
  %710 = icmp slt i32 %705, 10
  %711 = or i1 %709, %710
  br i1 %711, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %703, %originalBB186alteredBB
  %712 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1228
  call void @print_login(%struct.utmpx* %712), !dbg !1229
  %713 = load i32, i32* @x.9
  %714 = load i32, i32* @y.10
  %715 = sub i32 %713, 1
  %716 = mul i32 %713, %715
  %717 = urem i32 %716, 2
  %718 = icmp eq i32 %717, 0
  %719 = icmp slt i32 %714, 10
  %720 = or i1 %718, %719
  br i1 %720, label %originalBBpart2188, label %originalBB186alteredBB

originalBBpart2188:                               ; preds = %originalBB186
  br label %765, !dbg !1229

721:                                              ; preds = %originalBBpart2184, %originalBBpart2180
  %722 = load i32, i32* @x.9
  %723 = load i32, i32* @y.10
  %724 = sub i32 %722, 1
  %725 = mul i32 %722, %724
  %726 = urem i32 %725, 2
  %727 = icmp eq i32 %726, 0
  %728 = icmp slt i32 %723, 10
  %729 = or i1 %727, %728
  br i1 %729, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %721, %originalBB190alteredBB
  %730 = load i8, i8* @need_deadprocs, align 1, !dbg !1230
  %731 = trunc i8 %730 to i1, !dbg !1230
  %732 = load i32, i32* @x.9
  %733 = load i32, i32* @y.10
  %734 = sub i32 %732, 1
  %735 = mul i32 %732, %734
  %736 = urem i32 %735, 2
  %737 = icmp eq i32 %736, 0
  %738 = icmp slt i32 %733, 10
  %739 = or i1 %737, %738
  br i1 %739, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  br i1 %731, label %740, label %764, !dbg !1232

740:                                              ; preds = %originalBBpart2192
  %741 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1233
  %742 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %741, i32 0, i32 0, !dbg !1233
  %743 = load i16, i16* %742, align 4, !dbg !1233
  %744 = sext i16 %743 to i32, !dbg !1233
  %745 = icmp eq i32 %744, 8, !dbg !1233
  br i1 %745, label %746, label %764, !dbg !1234

746:                                              ; preds = %740
  %747 = load i32, i32* @x.9
  %748 = load i32, i32* @y.10
  %749 = sub i32 %747, 1
  %750 = mul i32 %747, %749
  %751 = urem i32 %750, 2
  %752 = icmp eq i32 %751, 0
  %753 = icmp slt i32 %748, 10
  %754 = or i1 %752, %753
  br i1 %754, label %originalBB194, label %originalBB194alteredBB

originalBB194:                                    ; preds = %746, %originalBB194alteredBB
  %755 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1235
  call void @print_deadprocs(%struct.utmpx* %755), !dbg !1236
  %756 = load i32, i32* @x.9
  %757 = load i32, i32* @y.10
  %758 = sub i32 %756, 1
  %759 = mul i32 %756, %758
  %760 = urem i32 %759, 2
  %761 = icmp eq i32 %760, 0
  %762 = icmp slt i32 %757, 10
  %763 = or i1 %761, %762
  br i1 %763, label %originalBBpart2196, label %originalBB194alteredBB

originalBBpart2196:                               ; preds = %originalBB194
  br label %764, !dbg !1236

764:                                              ; preds = %originalBBpart2196, %740, %originalBBpart2192
  br label %765

765:                                              ; preds = %764, %originalBBpart2188
  br label %766

766:                                              ; preds = %765, %660
  br label %767

767:                                              ; preds = %766, %originalBBpart2168
  br label %768

768:                                              ; preds = %767, %originalBBpart2160
  %769 = load i32, i32* @x.9
  %770 = load i32, i32* @y.10
  %771 = sub i32 %769, 1
  %772 = mul i32 %769, %771
  %773 = urem i32 %772, 2
  %774 = icmp eq i32 %773, 0
  %775 = icmp slt i32 %770, 10
  %776 = or i1 %774, %775
  br i1 %776, label %originalBB198, label %originalBB198alteredBB

originalBB198:                                    ; preds = %768, %originalBB198alteredBB
  %777 = load i32, i32* @x.9
  %778 = load i32, i32* @y.10
  %779 = sub i32 %777, 1
  %780 = mul i32 %777, %779
  %781 = urem i32 %780, 2
  %782 = icmp eq i32 %781, 0
  %783 = icmp slt i32 %778, 10
  %784 = or i1 %782, %783
  br i1 %784, label %originalBBpart2200, label %originalBB198alteredBB

originalBBpart2200:                               ; preds = %originalBB198
  br label %785

785:                                              ; preds = %originalBBpart2200, %originalBBpart2148
  br label %786

786:                                              ; preds = %785, %originalBBpart2136
  %787 = load i32, i32* @x.9
  %788 = load i32, i32* @y.10
  %789 = sub i32 %787, 1
  %790 = mul i32 %787, %789
  %791 = urem i32 %790, 2
  %792 = icmp eq i32 %791, 0
  %793 = icmp slt i32 %788, 10
  %794 = or i1 %792, %793
  br i1 %794, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %786, %originalBB202alteredBB
  %795 = load i32, i32* @x.9
  %796 = load i32, i32* @y.10
  %797 = sub i32 %795, 1
  %798 = mul i32 %795, %797
  %799 = urem i32 %798, 2
  %800 = icmp eq i32 %799, 0
  %801 = icmp slt i32 %796, 10
  %802 = or i1 %800, %801
  br i1 %802, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br label %803, !dbg !1237

803:                                              ; preds = %originalBBpart2204, %originalBBpart2120
  %804 = load i32, i32* @x.9
  %805 = load i32, i32* @y.10
  %806 = sub i32 %804, 1
  %807 = mul i32 %804, %806
  %808 = urem i32 %807, 2
  %809 = icmp eq i32 %808, 0
  %810 = icmp slt i32 %805, 10
  %811 = or i1 %809, %810
  br i1 %811, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %803, %originalBB206alteredBB
  %812 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1238
  %813 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %812, i32 0, i32 0, !dbg !1238
  %814 = load i16, i16* %813, align 4, !dbg !1238
  %815 = sext i16 %814 to i32, !dbg !1238
  %816 = icmp eq i32 %815, 2, !dbg !1238
  %817 = load i32, i32* @x.9
  %818 = load i32, i32* @y.10
  %819 = sub i32 %817, 1
  %820 = mul i32 %817, %819
  %821 = urem i32 %820, 2
  %822 = icmp eq i32 %821, 0
  %823 = icmp slt i32 %818, 10
  %824 = or i1 %822, %823
  br i1 %824, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br i1 %816, label %825, label %847, !dbg !1240

825:                                              ; preds = %originalBBpart2208
  %826 = load i32, i32* @x.9
  %827 = load i32, i32* @y.10
  %828 = sub i32 %826, 1
  %829 = mul i32 %826, %828
  %830 = urem i32 %829, 2
  %831 = icmp eq i32 %830, 0
  %832 = icmp slt i32 %827, 10
  %833 = or i1 %831, %832
  br i1 %833, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %825, %originalBB210alteredBB
  %834 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1241
  %835 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %834, i32 0, i32 8, !dbg !1241
  %836 = getelementptr inbounds %struct.anon, %struct.anon* %835, i32 0, i32 0, !dbg !1241
  %837 = load i32, i32* %836, align 4, !dbg !1241
  %838 = sext i32 %837 to i64, !dbg !1241
  store i64 %838, i64* %14, align 8, !dbg !1242
  %839 = load i32, i32* @x.9
  %840 = load i32, i32* @y.10
  %841 = sub i32 %839, 1
  %842 = mul i32 %839, %841
  %843 = urem i32 %842, 2
  %844 = icmp eq i32 %843, 0
  %845 = icmp slt i32 %840, 10
  %846 = or i1 %844, %845
  br i1 %846, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br label %847, !dbg !1243

847:                                              ; preds = %originalBBpart2212, %originalBBpart2208
  %848 = load i32, i32* @x.9
  %849 = load i32, i32* @y.10
  %850 = sub i32 %848, 1
  %851 = mul i32 %848, %850
  %852 = urem i32 %851, 2
  %853 = icmp eq i32 %852, 0
  %854 = icmp slt i32 %849, 10
  %855 = or i1 %853, %854
  br i1 %855, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %847, %originalBB214alteredBB
  %856 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1244
  %857 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %856, i32 1, !dbg !1244
  store %struct.utmpx* %857, %struct.utmpx** %12, align 8, !dbg !1244
  %858 = load i32, i32* @x.9
  %859 = load i32, i32* @y.10
  %860 = sub i32 %858, 1
  %861 = mul i32 %858, %860
  %862 = urem i32 %861, 2
  %863 = icmp eq i32 %862, 0
  %864 = icmp slt i32 %859, 10
  %865 = or i1 %863, %864
  br i1 %865, label %originalBBpart2216, label %originalBB214alteredBB

originalBBpart2216:                               ; preds = %originalBB214
  br label %345, !dbg !1178, !llvm.loop !1245

866:                                              ; preds = %345, %originalBBpart216
  %867 = load i32, i32* @x.9
  %868 = load i32, i32* @y.10
  %869 = sub i32 %867, 1
  %870 = mul i32 %867, %869
  %871 = urem i32 %870, 2
  %872 = icmp eq i32 %871, 0
  %873 = icmp slt i32 %868, 10
  %874 = or i1 %872, %873
  br i1 %874, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %866, %originalBB218alteredBB
  %875 = load i32, i32* @x.9
  %876 = load i32, i32* @y.10
  %877 = sub i32 %875, 1
  %878 = mul i32 %875, %877
  %879 = urem i32 %878, 2
  %880 = icmp eq i32 %879, 0
  %881 = icmp slt i32 %876, 10
  %882 = or i1 %880, %881
  br i1 %882, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  ret void, !dbg !1247

originalBBalteredBB:                              ; preds = %originalBB, %2
  %883 = alloca i64, align 8
  %884 = alloca %struct.utmpx*, align 8
  %885 = alloca i8*, align 8
  %886 = alloca i64, align 8
  store i64 %0, i64* %883, align 8
  call void @llvm.dbg.declare(metadata i64* %883, metadata !1248, metadata !DIExpression()), !dbg !1151
  store %struct.utmpx* %1, %struct.utmpx** %884, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %884, metadata !1352, metadata !DIExpression()), !dbg !1153
  call void @llvm.dbg.declare(metadata i8** %885, metadata !1353, metadata !DIExpression()), !dbg !1155
  call void @llvm.dbg.declare(metadata i64* %886, metadata !1354, metadata !DIExpression()), !dbg !1157
  store i64 -9223372036854775808, i64* %886, align 8, !dbg !1157
  %887 = load i8, i8* @include_heading, align 1, !dbg !1158
  %888 = trunc i8 %887 to i1, !dbg !1158
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  call void @print_heading(), !dbg !1161
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %889 = load i8, i8* @my_line_only, align 1, !dbg !1162
  %890 = trunc i8 %889 to i1, !dbg !1162
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %891 = call i8* @ttyname(i32 0) #10, !dbg !1165
  store i8* %891, i8** %13, align 8, !dbg !1167
  %892 = load i8*, i8** %13, align 8, !dbg !1168
  %893 = icmp ne i8* %892, null, !dbg !1168
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %98
  %894 = load i8*, i8** %13, align 8, !dbg !1172
  %895 = call i32 @strncmp(i8* %894, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0), i64 5) #13, !dbg !1172
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %117
  %collatzVaralteredBB = alloca i32
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %134
  %896 = load i32, i32* @inVal0
  %897 = icmp sgt i32 %896, 1
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %153
  store i32 45, i32* %collatzVar
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %174
  %898 = load i32, i32* %collatzVar
  %899 = icmp sgt i32 %898, 1
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %193
  %900 = load i32, i32* %collatzVar
  %_ = sub i32 %900, 2
  %gen = mul i32 %_, 2
  %_39 = sub i32 0, %900
  %gen40 = add i32 %_39, 2
  %_41 = sub i32 0, %900
  %gen42 = add i32 %_41, 2
  %_43 = sub i32 %900, 2
  %gen44 = mul i32 %_43, 2
  %_45 = sub i32 %900, 2
  %gen46 = mul i32 %_45, 2
  %_47 = sub i32 %900, 2
  %gen48 = mul i32 %_47, 2
  %_49 = sub i32 0, %900
  %gen50 = add i32 %_49, 2
  %901 = srem i32 %900, 2
  %902 = icmp eq i32 %901, 0
  br label %originalBB38

originalBB54alteredBB:                            ; preds = %originalBB54, %213
  %903 = load i32, i32* %collatzVar
  %_55 = shl i32 %903, 2
  %_56 = sub i32 %903, 2
  %gen57 = mul i32 %_56, 2
  %_58 = sub i32 %903, 2
  %gen59 = mul i32 %_58, 2
  %_60 = shl i32 %903, 2
  %_61 = shl i32 %903, 2
  %_62 = sub i32 %903, 2
  %gen63 = mul i32 %_62, 2
  %_64 = sub i32 0, %903
  %gen65 = add i32 %_64, 2
  %_66 = sub i32 %903, 2
  %gen67 = mul i32 %_66, 2
  %904 = sdiv i32 %903, 2
  store i32 %904, i32* %collatzVar
  br label %originalBB54

originalBB71alteredBB:                            ; preds = %originalBB71, %232
  %905 = load i32, i32* %collatzVar
  %_72 = sub i32 %905, 3
  %gen73 = mul i32 %_72, 3
  %_74 = sub i32 %905, 3
  %gen75 = mul i32 %_74, 3
  %_76 = shl i32 %905, 3
  %906 = mul i32 %905, 3
  %_77 = shl i32 %906, 1
  %_78 = shl i32 %906, 1
  %_79 = sub i32 0, %906
  %gen80 = add i32 %_79, 1
  %_81 = shl i32 %906, 1
  %_82 = shl i32 %906, 1
  %_83 = sub i32 0, %906
  %gen84 = add i32 %_83, 1
  %_85 = sub i32 0, %906
  %gen86 = add i32 %_85, 1
  %907 = add i32 %906, 1
  store i32 %907, i32* %collatzVar
  br label %originalBB71

originalBB90alteredBB:                            ; preds = %originalBB90, %252
  %908 = load i32, i32* %collatzVar
  %909 = sub i32 %108, %908
  %910 = icmp sgt i32 %909, -2
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %272
  %911 = load i32, i32* %collatzVar
  %_95 = sub i32 %108, %911
  %gen96 = mul i32 %_95, %911
  %_97 = sub i32 0, %108
  %gen98 = add i32 %_97, %911
  %_99 = sub i32 %108, %911
  %gen100 = mul i32 %_99, %911
  %_101 = shl i32 %108, %911
  %_102 = shl i32 %108, %911
  %912 = add i32 %108, %911
  %913 = icmp slt i32 %912, 2
  br label %originalBB94

originalBB106alteredBB:                           ; preds = %originalBB106, %292
  %914 = load i8*, i8** %13, align 8, !dbg !1175
  %915 = getelementptr inbounds i8, i8* %914, i64 5, !dbg !1175
  store i8* %915, i8** %13, align 8, !dbg !1175
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %311
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %328
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %352
  %916 = load i8*, i8** %13, align 8, !dbg !1184
  %917 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1184
  %918 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %917, i32 0, i32 2, !dbg !1184
  %919 = getelementptr inbounds [32 x i8], [32 x i8]* %918, i64 0, i64 0, !dbg !1184
  %920 = call i32 @strncmp(i8* %916, i8* %919, i64 32) #13, !dbg !1184
  %921 = icmp eq i32 %920, 0, !dbg !1184
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %375
  %922 = load i8, i8* @need_users, align 1, !dbg !1186
  %923 = trunc i8 %922 to i1, !dbg !1186
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %394
  %924 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1190
  %925 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %924, i32 0, i32 4, !dbg !1190
  %926 = getelementptr inbounds [32 x i8], [32 x i8]* %925, i64 0, i64 0, !dbg !1190
  %927 = load i8, i8* %926, align 4, !dbg !1190
  %928 = sext i8 %927 to i32, !dbg !1190
  %929 = icmp ne i32 %928, 0, !dbg !1190
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %417
  %930 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1190
  %931 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %930, i32 0, i32 0, !dbg !1190
  %932 = load i16, i16* %931, align 4, !dbg !1190
  %933 = sext i16 %932 to i32, !dbg !1190
  %934 = icmp eq i32 %933, 7, !dbg !1190
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %439
  %935 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1192
  %936 = load i64, i64* %14, align 8, !dbg !1193
  call void @print_user(%struct.utmpx* %935, i64 %936), !dbg !1194
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %458
  %937 = load i8, i8* @need_runlevel, align 1, !dbg !1195
  %938 = trunc i8 %937 to i1, !dbg !1195
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %477
  %939 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1198
  %940 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %939, i32 0, i32 0, !dbg !1198
  %941 = load i16, i16* %940, align 4, !dbg !1198
  %942 = sext i16 %941 to i32, !dbg !1198
  %943 = icmp eq i32 %942, 1, !dbg !1198
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %499
  %944 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1200
  call void @print_runlevel(%struct.utmpx* %944), !dbg !1201
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %517
  %945 = load i8, i8* @need_boottime, align 1, !dbg !1202
  %946 = trunc i8 %945 to i1, !dbg !1202
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %536
  %947 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1205
  %948 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %947, i32 0, i32 0, !dbg !1205
  %949 = load i16, i16* %948, align 4, !dbg !1205
  %950 = sext i16 %949 to i32, !dbg !1205
  %951 = icmp eq i32 %950, 2, !dbg !1205
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %558
  %952 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1207
  call void @print_boottime(%struct.utmpx* %952), !dbg !1208
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %579
  %953 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1212
  %954 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %953, i32 0, i32 0, !dbg !1212
  %955 = load i16, i16* %954, align 4, !dbg !1212
  %956 = sext i16 %955 to i32, !dbg !1212
  %957 = icmp eq i32 %956, 3, !dbg !1212
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %601
  %958 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1214
  call void @print_clockchange(%struct.utmpx* %958), !dbg !1215
  br label %originalBB166

originalBB170alteredBB:                           ; preds = %originalBB170, %619
  %959 = load i8, i8* @need_initspawn, align 1, !dbg !1216
  %960 = trunc i8 %959 to i1, !dbg !1216
  br label %originalBB170

originalBB174alteredBB:                           ; preds = %originalBB174, %638
  %961 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1219
  %962 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %961, i32 0, i32 0, !dbg !1219
  %963 = load i16, i16* %962, align 4, !dbg !1219
  %964 = sext i16 %963 to i32, !dbg !1219
  %965 = icmp eq i32 %964, 5, !dbg !1219
  br label %originalBB174

originalBB178alteredBB:                           ; preds = %originalBB178, %662
  %966 = load i8, i8* @need_login, align 1, !dbg !1223
  %967 = trunc i8 %966 to i1, !dbg !1223
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %681
  %968 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1226
  %969 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %968, i32 0, i32 0, !dbg !1226
  %970 = load i16, i16* %969, align 4, !dbg !1226
  %971 = sext i16 %970 to i32, !dbg !1226
  %972 = icmp eq i32 %971, 6, !dbg !1226
  br label %originalBB182

originalBB186alteredBB:                           ; preds = %originalBB186, %703
  %973 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1228
  call void @print_login(%struct.utmpx* %973), !dbg !1229
  br label %originalBB186

originalBB190alteredBB:                           ; preds = %originalBB190, %721
  %974 = load i8, i8* @need_deadprocs, align 1, !dbg !1230
  %975 = trunc i8 %974 to i1, !dbg !1230
  br label %originalBB190

originalBB194alteredBB:                           ; preds = %originalBB194, %746
  %976 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1235
  call void @print_deadprocs(%struct.utmpx* %976), !dbg !1236
  br label %originalBB194

originalBB198alteredBB:                           ; preds = %originalBB198, %768
  br label %originalBB198

originalBB202alteredBB:                           ; preds = %originalBB202, %786
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %803
  %977 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1238
  %978 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %977, i32 0, i32 0, !dbg !1238
  %979 = load i16, i16* %978, align 4, !dbg !1238
  %980 = sext i16 %979 to i32, !dbg !1238
  %981 = icmp eq i32 %980, 2, !dbg !1238
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %825
  %982 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1241
  %983 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %982, i32 0, i32 8, !dbg !1241
  %984 = getelementptr inbounds %struct.anon, %struct.anon* %983, i32 0, i32 0, !dbg !1241
  %985 = load i32, i32* %984, align 4, !dbg !1241
  %986 = sext i32 %985 to i64, !dbg !1241
  store i64 %986, i64* %14, align 8, !dbg !1242
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %847
  %987 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !1244
  %988 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %987, i32 1, !dbg !1244
  store %struct.utmpx* %988, %struct.utmpx** %12, align 8, !dbg !1244
  br label %originalBB214

originalBB218alteredBB:                           ; preds = %originalBB218, %866
  br label %originalBB218
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_heading() #4 !dbg !1355 {
  %1 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.62, i64 0, i64 0)) #10, !dbg !1358
  %2 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i64 0, i64 0)) #10, !dbg !1359
  %3 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.64, i64 0, i64 0)) #10, !dbg !1360
  %4 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.65, i64 0, i64 0)) #10, !dbg !1361
  %5 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.66, i64 0, i64 0)) #10, !dbg !1362
  %6 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67, i64 0, i64 0)) #10, !dbg !1363
  %7 = call i8* @gettext(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i64 0, i64 0)) #10, !dbg !1364
  call void @print_line(i32 -1, i8* %1, i8 signext 32, i32 -1, i8* %2, i8* %3, i8* %4, i8* %5, i8* %6, i8* %7), !dbg !1365
  ret void, !dbg !1366
}

; Function Attrs: nounwind
declare dso_local i8* @ttyname(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_user(%struct.utmpx*, i64) #4 !dbg !64 {
  %3 = load i32, i32* @x.13
  %4 = load i32, i32* @y.14
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca %struct.utmpx*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.stat, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8, align 1
  %16 = alloca [7 x i8], align 1
  %17 = alloca [38 x i8], align 16
  %18 = alloca i8*, align 8
  %19 = alloca [12 x i8], align 1
  %20 = alloca [257 x i8], align 16
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %11, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %11, metadata !1367, metadata !DIExpression()), !dbg !1368
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !1369, metadata !DIExpression()), !dbg !1370
  call void @llvm.dbg.declare(metadata %struct.stat* %13, metadata !1371, metadata !DIExpression()), !dbg !1406
  call void @llvm.dbg.declare(metadata i64* %14, metadata !1407, metadata !DIExpression()), !dbg !1408
  call void @llvm.dbg.declare(metadata i8* %15, metadata !1409, metadata !DIExpression()), !dbg !1410
  call void @llvm.dbg.declare(metadata [7 x i8]* %16, metadata !1411, metadata !DIExpression()), !dbg !1413
  call void @llvm.dbg.declare(metadata [38 x i8]* %17, metadata !1414, metadata !DIExpression()), !dbg !1418
  call void @llvm.dbg.declare(metadata i8** %18, metadata !1419, metadata !DIExpression()), !dbg !1420
  %23 = getelementptr inbounds [38 x i8], [38 x i8]* %17, i64 0, i64 0, !dbg !1421
  store i8* %23, i8** %18, align 8, !dbg !1420
  call void @llvm.dbg.declare(metadata [12 x i8]* %19, metadata !1422, metadata !DIExpression()), !dbg !1426
  %24 = getelementptr inbounds [12 x i8], [12 x i8]* %19, i64 0, i64 0, !dbg !1426
  %25 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1426
  %26 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %25, i32 0, i32 1, !dbg !1426
  %27 = load i32, i32* %26, align 4, !dbg !1426
  %28 = sext i32 %27 to i64, !dbg !1426
  %29 = call i32 (i8*, i8*, ...) @sprintf(i8* %24, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %28) #10, !dbg !1426
  %30 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1427
  %31 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %30, i32 0, i32 2, !dbg !1427
  %32 = getelementptr inbounds [32 x i8], [32 x i8]* %31, i64 0, i64 0, !dbg !1427
  %33 = load i8, i8* %32, align 4, !dbg !1427
  %34 = sext i8 %33 to i32, !dbg !1427
  %35 = icmp eq i32 %34, 47, !dbg !1427
  %36 = load i32, i32* @x.13
  %37 = load i32, i32* @y.14
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %35, label %63, label %44, !dbg !1429

44:                                               ; preds = %originalBBpart2
  %45 = load i32, i32* @x.13
  %46 = load i32, i32* @y.14
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %44, %originalBB1alteredBB
  %53 = load i8*, i8** %18, align 8, !dbg !1430
  %54 = call i8* @stpcpy(i8* %53, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0)) #10, !dbg !1431
  store i8* %54, i8** %18, align 8, !dbg !1432
  %55 = load i32, i32* @x.13
  %56 = load i32, i32* @y.14
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %63, !dbg !1433

63:                                               ; preds = %originalBBpart24, %originalBBpart2
  %64 = load i32, i32* @x.13
  %65 = load i32, i32* @y.14
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  %72 = load i8*, i8** %18, align 8, !dbg !1434
  %73 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1435
  %74 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %73, i32 0, i32 2, !dbg !1436
  %75 = getelementptr inbounds [32 x i8], [32 x i8]* %74, i64 0, i64 0, !dbg !1435
  %76 = call i8* @stzncpy(i8* %72, i8* %75, i64 32), !dbg !1437
  %77 = getelementptr inbounds [38 x i8], [38 x i8]* %17, i64 0, i64 0, !dbg !1438
  %78 = call i32 @stat(i8* %77, %struct.stat* %13) #10, !dbg !1440
  %79 = icmp eq i32 %78, 0, !dbg !1441
  %80 = load i32, i32* @x.13
  %81 = load i32, i32* @y.14
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %79, label %88, label %112, !dbg !1442

88:                                               ; preds = %originalBBpart28
  %89 = load i32, i32* @x.13
  %90 = load i32, i32* @y.14
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %88, %originalBB10alteredBB
  %97 = call zeroext i1 @is_tty_writable(%struct.stat* %13), !dbg !1443
  %98 = zext i1 %97 to i64, !dbg !1443
  %99 = select i1 %97, i32 43, i32 45, !dbg !1443
  %100 = trunc i32 %99 to i8, !dbg !1443
  store i8 %100, i8* %15, align 1, !dbg !1445
  %101 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 11, !dbg !1446
  %102 = getelementptr inbounds %struct.timespec, %struct.timespec* %101, i32 0, i32 0, !dbg !1446
  %103 = load i64, i64* %102, align 8, !dbg !1446
  store i64 %103, i64* %14, align 8, !dbg !1447
  %104 = load i32, i32* @x.13
  %105 = load i32, i32* @y.14
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %129, !dbg !1448

112:                                              ; preds = %originalBBpart28
  %113 = load i32, i32* @x.13
  %114 = load i32, i32* @y.14
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %112, %originalBB14alteredBB
  store i8 63, i8* %15, align 1, !dbg !1449
  store i64 0, i64* %14, align 8, !dbg !1451
  %121 = load i32, i32* @x.13
  %122 = load i32, i32* @y.14
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %129

129:                                              ; preds = %originalBBpart216, %originalBBpart212
  %130 = load i32, i32* @x.13
  %131 = load i32, i32* @y.14
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %129, %originalBB18alteredBB
  %138 = load i64, i64* %14, align 8, !dbg !1452
  %139 = icmp ne i64 %138, 0, !dbg !1452
  %140 = load i32, i32* @x.13
  %141 = load i32, i32* @y.14
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %139, label %148, label %170, !dbg !1454

148:                                              ; preds = %originalBBpart220
  %149 = load i32, i32* @x.13
  %150 = load i32, i32* @y.14
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %148, %originalBB22alteredBB
  %157 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1455
  %158 = load i64, i64* %14, align 8, !dbg !1456
  %159 = load i64, i64* %12, align 8, !dbg !1457
  %160 = call i8* @idle_string(i64 %158, i64 %159), !dbg !1458
  %161 = call i32 (i8*, i8*, ...) @sprintf(i8* %157, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i64 0, i64 0), i32 6, i8* %160) #10, !dbg !1459
  %162 = load i32, i32* @x.13
  %163 = load i32, i32* @y.14
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %189, !dbg !1459

170:                                              ; preds = %originalBBpart220
  %171 = load i32, i32* @x.13
  %172 = load i32, i32* @y.14
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %170, %originalBB26alteredBB
  %179 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1460
  %180 = call i32 (i8*, i8*, ...) @sprintf(i8* %179, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76, i64 0, i64 0)) #10, !dbg !1461
  %181 = load i32, i32* @x.13
  %182 = load i32, i32* @y.14
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %189

189:                                              ; preds = %originalBBpart228, %originalBBpart224
  %190 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1462
  %191 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %190, i32 0, i32 5, !dbg !1464
  %192 = getelementptr inbounds [256 x i8], [256 x i8]* %191, i64 0, i64 0, !dbg !1462
  %193 = load i8, i8* %192, align 4, !dbg !1462
  %194 = icmp ne i8 %193, 0, !dbg !1462
  br i1 %194, label %195, label %435, !dbg !1465

195:                                              ; preds = %189
  call void @llvm.dbg.declare(metadata [257 x i8]* %20, metadata !1466, metadata !DIExpression()), !dbg !1471
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1472, metadata !DIExpression()), !dbg !1473
  store i8* null, i8** %21, align 8, !dbg !1473
  call void @llvm.dbg.declare(metadata i8** %22, metadata !1474, metadata !DIExpression()), !dbg !1475
  store i8* null, i8** %22, align 8, !dbg !1475
  %196 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1476
  %197 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1477
  %198 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %197, i32 0, i32 5, !dbg !1478
  %199 = getelementptr inbounds [256 x i8], [256 x i8]* %198, i64 0, i64 0, !dbg !1477
  %200 = call i8* @stzncpy(i8* %196, i8* %199, i64 256), !dbg !1479
  %201 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1480
  %202 = call i8* @strchr(i8* %201, i32 58) #13, !dbg !1481
  store i8* %202, i8** %22, align 8, !dbg !1482
  %203 = load i8*, i8** %22, align 8, !dbg !1483
  %204 = icmp ne i8* %203, null, !dbg !1483
  br i1 %204, label %205, label %224, !dbg !1485

205:                                              ; preds = %195
  %206 = load i32, i32* @x.13
  %207 = load i32, i32* @y.14
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %205, %originalBB30alteredBB
  %214 = load i8*, i8** %22, align 8, !dbg !1486
  %215 = getelementptr inbounds i8, i8* %214, i32 1, !dbg !1486
  store i8* %215, i8** %22, align 8, !dbg !1486
  store i8 0, i8* %214, align 1, !dbg !1487
  %216 = load i32, i32* @x.13
  %217 = load i32, i32* @y.14
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %224, !dbg !1488

224:                                              ; preds = %originalBBpart232, %195
  %225 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1489
  %226 = load i8, i8* %225, align 16, !dbg !1489
  %227 = sext i8 %226 to i32, !dbg !1489
  %228 = icmp ne i32 %227, 0, !dbg !1489
  br i1 %228, label %229, label %267, !dbg !1491

229:                                              ; preds = %224
  %230 = load i32, i32* @x.13
  %231 = load i32, i32* @y.14
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %229, %originalBB34alteredBB
  %238 = load i8, i8* @do_lookup, align 1, !dbg !1492
  %239 = trunc i8 %238 to i1, !dbg !1492
  %240 = load i32, i32* @x.13
  %241 = load i32, i32* @y.14
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %239, label %248, label %267, !dbg !1493

248:                                              ; preds = %originalBBpart236
  %249 = load i32, i32* @x.13
  %250 = load i32, i32* @y.14
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %248, %originalBB38alteredBB
  %257 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1494
  %258 = call noalias i8* @canon_host(i8* %257), !dbg !1496
  store i8* %258, i8** %21, align 8, !dbg !1497
  %259 = load i32, i32* @x.13
  %260 = load i32, i32* @y.14
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %267, !dbg !1498

267:                                              ; preds = %originalBBpart240, %originalBBpart236, %224
  %268 = load i8*, i8** %21, align 8, !dbg !1499
  %269 = icmp ne i8* %268, null, !dbg !1499
  br i1 %269, label %272, label %270, !dbg !1501

270:                                              ; preds = %267
  %271 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1502
  store i8* %271, i8** %21, align 8, !dbg !1503
  br label %272, !dbg !1504

272:                                              ; preds = %270, %267
  %273 = load i32, i32* @x.13
  %274 = load i32, i32* @y.14
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %272, %originalBB42alteredBB
  %281 = load i8*, i8** %22, align 8, !dbg !1505
  %282 = icmp ne i8* %281, null, !dbg !1505
  %283 = load i32, i32* @x.13
  %284 = load i32, i32* @y.14
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %282, label %291, label %331, !dbg !1507

291:                                              ; preds = %originalBBpart244
  %292 = load i64, i64* @print_user.hostlen, align 8, !dbg !1508
  %293 = load i8*, i8** %21, align 8, !dbg !1511
  %294 = call i64 @strlen(i8* %293) #13, !dbg !1512
  %295 = load i8*, i8** %22, align 8, !dbg !1513
  %296 = call i64 @strlen(i8* %295) #13, !dbg !1514
  %297 = add i64 %294, %296, !dbg !1515
  %298 = add i64 %297, 4, !dbg !1516
  %299 = icmp ult i64 %292, %298, !dbg !1517
  br i1 %299, label %300, label %326, !dbg !1518

300:                                              ; preds = %291
  %301 = load i32, i32* @x.13
  %302 = load i32, i32* @y.14
  %303 = sub i32 %301, 1
  %304 = mul i32 %301, %303
  %305 = urem i32 %304, 2
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %306, %307
  br i1 %308, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %300, %originalBB46alteredBB
  %309 = load i8*, i8** %21, align 8, !dbg !1519
  %310 = call i64 @strlen(i8* %309) #13, !dbg !1521
  %311 = load i8*, i8** %22, align 8, !dbg !1522
  %312 = call i64 @strlen(i8* %311) #13, !dbg !1523
  %313 = add i64 %310, %312, !dbg !1524
  %314 = add i64 %313, 4, !dbg !1525
  store i64 %314, i64* @print_user.hostlen, align 8, !dbg !1526
  %315 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1527
  call void @free(i8* %315) #10, !dbg !1528
  %316 = load i64, i64* @print_user.hostlen, align 8, !dbg !1529
  %317 = call noalias i8* @xmalloc(i64 %316), !dbg !1530
  store i8* %317, i8** @print_user.hoststr, align 8, !dbg !1531
  %318 = load i32, i32* @x.13
  %319 = load i32, i32* @y.14
  %320 = sub i32 %318, 1
  %321 = mul i32 %318, %320
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %323, %324
  br i1 %325, label %originalBBpart263, label %originalBB46alteredBB

originalBBpart263:                                ; preds = %originalBB46
  br label %326, !dbg !1532

326:                                              ; preds = %originalBBpart263, %291
  %327 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1533
  %328 = load i8*, i8** %21, align 8, !dbg !1534
  %329 = load i8*, i8** %22, align 8, !dbg !1535
  %330 = call i32 (i8*, i8*, ...) @sprintf(i8* %327, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.77, i64 0, i64 0), i8* %328, i8* %329) #10, !dbg !1536
  br label %396, !dbg !1537

331:                                              ; preds = %originalBBpart244
  %332 = load i32, i32* @x.13
  %333 = load i32, i32* @y.14
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %331, %originalBB65alteredBB
  %340 = load i64, i64* @print_user.hostlen, align 8, !dbg !1538
  %341 = load i8*, i8** %21, align 8, !dbg !1541
  %342 = call i64 @strlen(i8* %341) #13, !dbg !1542
  %343 = add i64 %342, 3, !dbg !1543
  %344 = icmp ult i64 %340, %343, !dbg !1544
  %345 = load i32, i32* @x.13
  %346 = load i32, i32* @y.14
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBBpart277, label %originalBB65alteredBB

originalBBpart277:                                ; preds = %originalBB65
  br i1 %344, label %353, label %376, !dbg !1545

353:                                              ; preds = %originalBBpart277
  %354 = load i32, i32* @x.13
  %355 = load i32, i32* @y.14
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %353, %originalBB79alteredBB
  %362 = load i8*, i8** %21, align 8, !dbg !1546
  %363 = call i64 @strlen(i8* %362) #13, !dbg !1548
  %364 = add i64 %363, 3, !dbg !1549
  store i64 %364, i64* @print_user.hostlen, align 8, !dbg !1550
  %365 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1551
  call void @free(i8* %365) #10, !dbg !1552
  %366 = load i64, i64* @print_user.hostlen, align 8, !dbg !1553
  %367 = call noalias i8* @xmalloc(i64 %366), !dbg !1554
  store i8* %367, i8** @print_user.hoststr, align 8, !dbg !1555
  %368 = load i32, i32* @x.13
  %369 = load i32, i32* @y.14
  %370 = sub i32 %368, 1
  %371 = mul i32 %368, %370
  %372 = urem i32 %371, 2
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %373, %374
  br i1 %375, label %originalBBpart291, label %originalBB79alteredBB

originalBBpart291:                                ; preds = %originalBB79
  br label %376, !dbg !1556

376:                                              ; preds = %originalBBpart291, %originalBBpart277
  %377 = load i32, i32* @x.13
  %378 = load i32, i32* @y.14
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %376, %originalBB93alteredBB
  %385 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1557
  %386 = load i8*, i8** %21, align 8, !dbg !1558
  %387 = call i32 (i8*, i8*, ...) @sprintf(i8* %385, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i64 0, i64 0), i8* %386) #10, !dbg !1559
  %388 = load i32, i32* @x.13
  %389 = load i32, i32* @y.14
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %396

396:                                              ; preds = %originalBBpart295, %326
  %397 = load i32, i32* @x.13
  %398 = load i32, i32* @y.14
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %396, %originalBB97alteredBB
  %405 = load i8*, i8** %21, align 8, !dbg !1560
  %406 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1562
  %407 = icmp ne i8* %405, %406, !dbg !1563
  %408 = load i32, i32* @x.13
  %409 = load i32, i32* @y.14
  %410 = sub i32 %408, 1
  %411 = mul i32 %408, %410
  %412 = urem i32 %411, 2
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %413, %414
  br i1 %415, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br i1 %407, label %416, label %434, !dbg !1564

416:                                              ; preds = %originalBBpart299
  %417 = load i32, i32* @x.13
  %418 = load i32, i32* @y.14
  %419 = sub i32 %417, 1
  %420 = mul i32 %417, %419
  %421 = urem i32 %420, 2
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %418, 10
  %424 = or i1 %422, %423
  br i1 %424, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %416, %originalBB101alteredBB
  %425 = load i8*, i8** %21, align 8, !dbg !1565
  call void @free(i8* %425) #10, !dbg !1566
  %426 = load i32, i32* @x.13
  %427 = load i32, i32* @y.14
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br label %434, !dbg !1566

434:                                              ; preds = %originalBBpart2103, %originalBBpart299
  br label %492, !dbg !1567

435:                                              ; preds = %189
  %436 = load i32, i32* @x.13
  %437 = load i32, i32* @y.14
  %438 = sub i32 %436, 1
  %439 = mul i32 %436, %438
  %440 = urem i32 %439, 2
  %441 = icmp eq i32 %440, 0
  %442 = icmp slt i32 %437, 10
  %443 = or i1 %441, %442
  br i1 %443, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %435, %originalBB105alteredBB
  %444 = load i64, i64* @print_user.hostlen, align 8, !dbg !1568
  %445 = icmp ult i64 %444, 1, !dbg !1571
  %446 = load i32, i32* @x.13
  %447 = load i32, i32* @y.14
  %448 = sub i32 %446, 1
  %449 = mul i32 %446, %448
  %450 = urem i32 %449, 2
  %451 = icmp eq i32 %450, 0
  %452 = icmp slt i32 %447, 10
  %453 = or i1 %451, %452
  br i1 %453, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br i1 %445, label %454, label %474, !dbg !1572

454:                                              ; preds = %originalBBpart2107
  %455 = load i32, i32* @x.13
  %456 = load i32, i32* @y.14
  %457 = sub i32 %455, 1
  %458 = mul i32 %455, %457
  %459 = urem i32 %458, 2
  %460 = icmp eq i32 %459, 0
  %461 = icmp slt i32 %456, 10
  %462 = or i1 %460, %461
  br i1 %462, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %454, %originalBB109alteredBB
  store i64 1, i64* @print_user.hostlen, align 8, !dbg !1573
  %463 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1575
  call void @free(i8* %463) #10, !dbg !1576
  %464 = load i64, i64* @print_user.hostlen, align 8, !dbg !1577
  %465 = call noalias i8* @xmalloc(i64 %464), !dbg !1578
  store i8* %465, i8** @print_user.hoststr, align 8, !dbg !1579
  %466 = load i32, i32* @x.13
  %467 = load i32, i32* @y.14
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %474, !dbg !1580

474:                                              ; preds = %originalBBpart2111, %originalBBpart2107
  %475 = load i32, i32* @x.13
  %476 = load i32, i32* @y.14
  %477 = sub i32 %475, 1
  %478 = mul i32 %475, %477
  %479 = urem i32 %478, 2
  %480 = icmp eq i32 %479, 0
  %481 = icmp slt i32 %476, 10
  %482 = or i1 %480, %481
  br i1 %482, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %474, %originalBB113alteredBB
  %483 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1581
  store i8 0, i8* %483, align 1, !dbg !1582
  %484 = load i32, i32* @x.13
  %485 = load i32, i32* @y.14
  %486 = sub i32 %484, 1
  %487 = mul i32 %484, %486
  %488 = urem i32 %487, 2
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %489, %490
  br i1 %491, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br label %492

492:                                              ; preds = %originalBBpart2115, %434
  %493 = load i32, i32* @x.13
  %494 = load i32, i32* @y.14
  %495 = sub i32 %493, 1
  %496 = mul i32 %493, %495
  %497 = urem i32 %496, 2
  %498 = icmp eq i32 %497, 0
  %499 = icmp slt i32 %494, 10
  %500 = or i1 %498, %499
  br i1 %500, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %492, %originalBB117alteredBB
  %501 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1583
  %502 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %501, i32 0, i32 4, !dbg !1583
  %503 = getelementptr inbounds [32 x i8], [32 x i8]* %502, i64 0, i64 0, !dbg !1583
  %504 = load i8, i8* %15, align 1, !dbg !1584
  %505 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1585
  %506 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %505, i32 0, i32 2, !dbg !1586
  %507 = getelementptr inbounds [32 x i8], [32 x i8]* %506, i64 0, i64 0, !dbg !1585
  %508 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1587
  %509 = call i8* @time_string(%struct.utmpx* %508), !dbg !1588
  %510 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1589
  %511 = getelementptr inbounds [12 x i8], [12 x i8]* %19, i64 0, i64 0, !dbg !1590
  %512 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1591
  %513 = icmp ne i8* %512, null, !dbg !1591
  %514 = load i32, i32* @x.13
  %515 = load i32, i32* @y.14
  %516 = sub i32 %514, 1
  %517 = mul i32 %514, %516
  %518 = urem i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %519, %520
  br i1 %521, label %originalBBpart2119, label %originalBB117alteredBB

originalBBpart2119:                               ; preds = %originalBB117
  br i1 %513, label %522, label %540, !dbg !1591

522:                                              ; preds = %originalBBpart2119
  %523 = load i32, i32* @x.13
  %524 = load i32, i32* @y.14
  %525 = sub i32 %523, 1
  %526 = mul i32 %523, %525
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %524, 10
  %530 = or i1 %528, %529
  br i1 %530, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %522, %originalBB121alteredBB
  %531 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1592
  %532 = load i32, i32* @x.13
  %533 = load i32, i32* @y.14
  %534 = sub i32 %532, 1
  %535 = mul i32 %532, %534
  %536 = urem i32 %535, 2
  %537 = icmp eq i32 %536, 0
  %538 = icmp slt i32 %533, 10
  %539 = or i1 %537, %538
  br i1 %539, label %originalBBpart2123, label %originalBB121alteredBB

originalBBpart2123:                               ; preds = %originalBB121
  br label %541, !dbg !1591

540:                                              ; preds = %originalBBpart2119
  br label %541, !dbg !1591

541:                                              ; preds = %540, %originalBBpart2123
  %542 = phi i8* [ %531, %originalBBpart2123 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), %540 ], !dbg !1591
  call void @print_line(i32 32, i8* %503, i8 signext %504, i32 32, i8* %507, i8* %509, i8* %510, i8* %511, i8* %542, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1593
  ret void, !dbg !1594

originalBBalteredBB:                              ; preds = %originalBB, %2
  %543 = alloca %struct.utmpx*, align 8
  %544 = alloca i64, align 8
  %545 = alloca %struct.stat, align 8
  %546 = alloca i64, align 8
  %547 = alloca i8, align 1
  %548 = alloca [7 x i8], align 1
  %549 = alloca [38 x i8], align 16
  %550 = alloca i8*, align 8
  %551 = alloca [12 x i8], align 1
  %552 = alloca [257 x i8], align 16
  %553 = alloca i8*, align 8
  %554 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %543, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %543, metadata !1595, metadata !DIExpression()), !dbg !1368
  store i64 %1, i64* %544, align 8
  call void @llvm.dbg.declare(metadata i64* %544, metadata !1696, metadata !DIExpression()), !dbg !1370
  call void @llvm.dbg.declare(metadata %struct.stat* %545, metadata !1697, metadata !DIExpression()), !dbg !1406
  call void @llvm.dbg.declare(metadata i64* %546, metadata !1719, metadata !DIExpression()), !dbg !1408
  call void @llvm.dbg.declare(metadata i8* %547, metadata !1720, metadata !DIExpression()), !dbg !1410
  call void @llvm.dbg.declare(metadata [7 x i8]* %548, metadata !1721, metadata !DIExpression()), !dbg !1413
  call void @llvm.dbg.declare(metadata [38 x i8]* %549, metadata !1722, metadata !DIExpression()), !dbg !1418
  call void @llvm.dbg.declare(metadata i8** %550, metadata !1723, metadata !DIExpression()), !dbg !1420
  %555 = getelementptr inbounds [38 x i8], [38 x i8]* %549, i64 0, i64 0, !dbg !1421
  store i8* %555, i8** %550, align 8, !dbg !1420
  call void @llvm.dbg.declare(metadata [12 x i8]* %551, metadata !1724, metadata !DIExpression()), !dbg !1426
  %556 = getelementptr inbounds [12 x i8], [12 x i8]* %551, i64 0, i64 0, !dbg !1426
  %557 = load %struct.utmpx*, %struct.utmpx** %543, align 8, !dbg !1426
  %558 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %557, i32 0, i32 1, !dbg !1426
  %559 = load i32, i32* %558, align 4, !dbg !1426
  %560 = sext i32 %559 to i64, !dbg !1426
  %561 = call i32 (i8*, i8*, ...) @sprintf(i8* %556, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %560) #10, !dbg !1426
  %562 = load %struct.utmpx*, %struct.utmpx** %543, align 8, !dbg !1427
  %563 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %562, i32 0, i32 2, !dbg !1427
  %564 = getelementptr inbounds [32 x i8], [32 x i8]* %563, i64 0, i64 0, !dbg !1427
  %565 = load i8, i8* %564, align 4, !dbg !1427
  %566 = sext i8 %565 to i32, !dbg !1427
  %567 = icmp eq i32 %566, 47, !dbg !1427
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %44
  %568 = load i8*, i8** %18, align 8, !dbg !1430
  %569 = call i8* @stpcpy(i8* %568, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.61, i64 0, i64 0)) #10, !dbg !1431
  store i8* %569, i8** %18, align 8, !dbg !1432
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  %570 = load i8*, i8** %18, align 8, !dbg !1434
  %571 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1435
  %572 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %571, i32 0, i32 2, !dbg !1436
  %573 = getelementptr inbounds [32 x i8], [32 x i8]* %572, i64 0, i64 0, !dbg !1435
  %574 = call i8* @stzncpy(i8* %570, i8* %573, i64 32), !dbg !1437
  %575 = getelementptr inbounds [38 x i8], [38 x i8]* %17, i64 0, i64 0, !dbg !1438
  %576 = call i32 @stat(i8* %575, %struct.stat* %13) #10, !dbg !1440
  %577 = icmp eq i32 %576, 0, !dbg !1441
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %88
  %578 = call zeroext i1 @is_tty_writable(%struct.stat* %13), !dbg !1443
  %579 = zext i1 %578 to i64, !dbg !1443
  %580 = select i1 %578, i32 43, i32 45, !dbg !1443
  %581 = trunc i32 %580 to i8, !dbg !1443
  store i8 %581, i8* %15, align 1, !dbg !1445
  %582 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 11, !dbg !1446
  %583 = getelementptr inbounds %struct.timespec, %struct.timespec* %582, i32 0, i32 0, !dbg !1446
  %584 = load i64, i64* %583, align 8, !dbg !1446
  store i64 %584, i64* %14, align 8, !dbg !1447
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %112
  store i8 63, i8* %15, align 1, !dbg !1449
  store i64 0, i64* %14, align 8, !dbg !1451
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %129
  %585 = load i64, i64* %14, align 8, !dbg !1452
  %586 = icmp ne i64 %585, 0, !dbg !1452
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %148
  %587 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1455
  %588 = load i64, i64* %14, align 8, !dbg !1456
  %589 = load i64, i64* %12, align 8, !dbg !1457
  %590 = call i8* @idle_string(i64 %588, i64 %589), !dbg !1458
  %591 = call i32 (i8*, i8*, ...) @sprintf(i8* %587, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.75, i64 0, i64 0), i32 6, i8* %590) #10, !dbg !1459
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %170
  %592 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1460
  %593 = call i32 (i8*, i8*, ...) @sprintf(i8* %592, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76, i64 0, i64 0)) #10, !dbg !1461
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %205
  %594 = load i8*, i8** %22, align 8, !dbg !1486
  %595 = getelementptr inbounds i8, i8* %594, i32 1, !dbg !1486
  store i8* %595, i8** %22, align 8, !dbg !1486
  store i8 0, i8* %594, align 1, !dbg !1487
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %229
  %596 = load i8, i8* @do_lookup, align 1, !dbg !1492
  %597 = trunc i8 %596 to i1, !dbg !1492
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %248
  %598 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1494
  %599 = call noalias i8* @canon_host(i8* %598), !dbg !1496
  store i8* %599, i8** %21, align 8, !dbg !1497
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %272
  %600 = load i8*, i8** %22, align 8, !dbg !1505
  %601 = icmp ne i8* %600, null, !dbg !1505
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %300
  %602 = load i8*, i8** %21, align 8, !dbg !1519
  %603 = call i64 @strlen(i8* %602) #13, !dbg !1521
  %604 = load i8*, i8** %22, align 8, !dbg !1522
  %605 = call i64 @strlen(i8* %604) #13, !dbg !1523
  %_ = shl i64 %603, %605
  %_47 = sub i64 0, %603
  %gen = add i64 %_47, %605
  %_48 = sub i64 %603, %605
  %gen49 = mul i64 %_48, %605
  %_50 = sub i64 0, %603
  %gen51 = add i64 %_50, %605
  %_52 = sub i64 %603, %605
  %gen53 = mul i64 %_52, %605
  %_54 = shl i64 %603, %605
  %606 = add i64 %603, %605, !dbg !1524
  %_55 = sub i64 %606, 4
  %gen56 = mul i64 %_55, 4
  %_57 = shl i64 %606, 4
  %_58 = shl i64 %606, 4
  %_59 = sub i64 0, %606
  %gen60 = add i64 %_59, 4
  %_61 = shl i64 %606, 4
  %607 = add i64 %606, 4, !dbg !1525
  store i64 %607, i64* @print_user.hostlen, align 8, !dbg !1526
  %608 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1527
  call void @free(i8* %608) #10, !dbg !1528
  %609 = load i64, i64* @print_user.hostlen, align 8, !dbg !1529
  %610 = call noalias i8* @xmalloc(i64 %609), !dbg !1530
  store i8* %610, i8** @print_user.hoststr, align 8, !dbg !1531
  br label %originalBB46

originalBB65alteredBB:                            ; preds = %originalBB65, %331
  %611 = load i64, i64* @print_user.hostlen, align 8, !dbg !1538
  %612 = load i8*, i8** %21, align 8, !dbg !1541
  %613 = call i64 @strlen(i8* %612) #13, !dbg !1542
  %_66 = sub i64 0, %613
  %gen67 = add i64 %_66, 3
  %_68 = shl i64 %613, 3
  %_69 = sub i64 0, %613
  %gen70 = add i64 %_69, 3
  %_71 = shl i64 %613, 3
  %_72 = sub i64 %613, 3
  %gen73 = mul i64 %_72, 3
  %_74 = sub i64 %613, 3
  %gen75 = mul i64 %_74, 3
  %614 = add i64 %613, 3, !dbg !1543
  %615 = icmp ult i64 %611, %614, !dbg !1544
  br label %originalBB65

originalBB79alteredBB:                            ; preds = %originalBB79, %353
  %616 = load i8*, i8** %21, align 8, !dbg !1546
  %617 = call i64 @strlen(i8* %616) #13, !dbg !1548
  %_80 = shl i64 %617, 3
  %_81 = sub i64 %617, 3
  %gen82 = mul i64 %_81, 3
  %_83 = shl i64 %617, 3
  %_84 = sub i64 %617, 3
  %gen85 = mul i64 %_84, 3
  %_86 = sub i64 %617, 3
  %gen87 = mul i64 %_86, 3
  %_88 = shl i64 %617, 3
  %_89 = shl i64 %617, 3
  %618 = add i64 %617, 3, !dbg !1549
  store i64 %618, i64* @print_user.hostlen, align 8, !dbg !1550
  %619 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1551
  call void @free(i8* %619) #10, !dbg !1552
  %620 = load i64, i64* @print_user.hostlen, align 8, !dbg !1553
  %621 = call noalias i8* @xmalloc(i64 %620), !dbg !1554
  store i8* %621, i8** @print_user.hoststr, align 8, !dbg !1555
  br label %originalBB79

originalBB93alteredBB:                            ; preds = %originalBB93, %376
  %622 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1557
  %623 = load i8*, i8** %21, align 8, !dbg !1558
  %624 = call i32 (i8*, i8*, ...) @sprintf(i8* %622, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i64 0, i64 0), i8* %623) #10, !dbg !1559
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %396
  %625 = load i8*, i8** %21, align 8, !dbg !1560
  %626 = getelementptr inbounds [257 x i8], [257 x i8]* %20, i64 0, i64 0, !dbg !1562
  %627 = icmp ne i8* %625, %626, !dbg !1563
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %416
  %628 = load i8*, i8** %21, align 8, !dbg !1565
  call void @free(i8* %628) #10, !dbg !1566
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %435
  %629 = load i64, i64* @print_user.hostlen, align 8, !dbg !1568
  %630 = icmp ult i64 %629, 1, !dbg !1571
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %454
  store i64 1, i64* @print_user.hostlen, align 8, !dbg !1573
  %631 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1575
  call void @free(i8* %631) #10, !dbg !1576
  %632 = load i64, i64* @print_user.hostlen, align 8, !dbg !1577
  %633 = call noalias i8* @xmalloc(i64 %632), !dbg !1578
  store i8* %633, i8** @print_user.hoststr, align 8, !dbg !1579
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %474
  %634 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1581
  store i8 0, i8* %634, align 1, !dbg !1582
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %492
  %635 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1583
  %636 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %635, i32 0, i32 4, !dbg !1583
  %637 = getelementptr inbounds [32 x i8], [32 x i8]* %636, i64 0, i64 0, !dbg !1583
  %638 = load i8, i8* %15, align 1, !dbg !1584
  %639 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1585
  %640 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %639, i32 0, i32 2, !dbg !1586
  %641 = getelementptr inbounds [32 x i8], [32 x i8]* %640, i64 0, i64 0, !dbg !1585
  %642 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !1587
  %643 = call i8* @time_string(%struct.utmpx* %642), !dbg !1588
  %644 = getelementptr inbounds [7 x i8], [7 x i8]* %16, i64 0, i64 0, !dbg !1589
  %645 = getelementptr inbounds [12 x i8], [12 x i8]* %19, i64 0, i64 0, !dbg !1590
  %646 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1591
  %647 = icmp ne i8* %646, null, !dbg !1591
  br label %originalBB117

originalBB121alteredBB:                           ; preds = %originalBB121, %522
  %648 = load i8*, i8** @print_user.hoststr, align 8, !dbg !1592
  br label %originalBB121
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_runlevel(%struct.utmpx*) #4 !dbg !133 {
  %2 = alloca %struct.utmpx*, align 8
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  store %struct.utmpx* %0, %struct.utmpx** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %2, metadata !1725, metadata !DIExpression()), !dbg !1726
  call void @llvm.dbg.declare(metadata i8* %3, metadata !1727, metadata !DIExpression()), !dbg !1728
  %5 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1729
  %6 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %5, i32 0, i32 1, !dbg !1729
  %7 = load i32, i32* %6, align 4, !dbg !1729
  %8 = sdiv i32 %7, 256, !dbg !1730
  %9 = trunc i32 %8 to i8, !dbg !1729
  store i8 %9, i8* %3, align 1, !dbg !1728
  call void @llvm.dbg.declare(metadata i8* %4, metadata !1731, metadata !DIExpression()), !dbg !1732
  %10 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1733
  %11 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %10, i32 0, i32 1, !dbg !1733
  %12 = load i32, i32* %11, align 4, !dbg !1733
  %13 = srem i32 %12, 256, !dbg !1734
  %14 = trunc i32 %13 to i8, !dbg !1733
  store i8 %14, i8* %4, align 1, !dbg !1732
  %15 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1735
  %16 = icmp ne i8* %15, null, !dbg !1735
  br i1 %16, label %38, label %17, !dbg !1737

17:                                               ; preds = %1
  %18 = load i32, i32* @x.15
  %19 = load i32, i32* @y.16
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %17, %originalBBalteredBB
  %26 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0)) #10, !dbg !1738
  %27 = call i64 @strlen(i8* %26) #13, !dbg !1739
  %28 = add i64 %27, 3, !dbg !1740
  %29 = call noalias i8* @xmalloc(i64 %28), !dbg !1741
  store i8* %29, i8** @print_runlevel.runlevline, align 8, !dbg !1742
  %30 = load i32, i32* @x.15
  %31 = load i32, i32* @y.16
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %38, !dbg !1743

38:                                               ; preds = %originalBBpart2, %1
  %39 = load i32, i32* @x.15
  %40 = load i32, i32* @y.16
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB9, label %originalBB9alteredBB

originalBB9:                                      ; preds = %38, %originalBB9alteredBB
  %47 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1744
  %48 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0)) #10, !dbg !1745
  %49 = load i8, i8* %4, align 1, !dbg !1746
  %50 = zext i8 %49 to i32, !dbg !1746
  %51 = call i32 (i8*, i8*, ...) @sprintf(i8* %47, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i64 0, i64 0), i8* %48, i32 %50) #10, !dbg !1747
  %52 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1748
  %53 = icmp ne i8* %52, null, !dbg !1748
  %54 = load i32, i32* @x.15
  %55 = load i32, i32* @y.16
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart211, label %originalBB9alteredBB

originalBBpart211:                                ; preds = %originalBB9
  br i1 %53, label %83, label %62, !dbg !1750

62:                                               ; preds = %originalBBpart211
  %63 = load i32, i32* @x.15
  %64 = load i32, i32* @y.16
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %62, %originalBB13alteredBB
  %71 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)) #10, !dbg !1751
  %72 = call i64 @strlen(i8* %71) #13, !dbg !1752
  %73 = add i64 %72, 2, !dbg !1753
  %74 = call noalias i8* @xmalloc(i64 %73), !dbg !1754
  store i8* %74, i8** @print_runlevel.comment, align 8, !dbg !1755
  %75 = load i32, i32* @x.15
  %76 = load i32, i32* @y.16
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart221, label %originalBB13alteredBB

originalBBpart221:                                ; preds = %originalBB13
  br label %83, !dbg !1756

83:                                               ; preds = %originalBBpart221, %originalBBpart211
  %84 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1757
  %85 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)) #10, !dbg !1758
  %86 = load i8, i8* %3, align 1, !dbg !1759
  %87 = zext i8 %86 to i32, !dbg !1759
  %88 = icmp eq i32 %87, 78, !dbg !1760
  br i1 %88, label %89, label %106, !dbg !1761

89:                                               ; preds = %83
  %90 = load i32, i32* @x.15
  %91 = load i32, i32* @y.16
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %89, %originalBB23alteredBB
  %98 = load i32, i32* @x.15
  %99 = load i32, i32* @y.16
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %125, !dbg !1761

106:                                              ; preds = %83
  %107 = load i32, i32* @x.15
  %108 = load i32, i32* @y.16
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %106, %originalBB27alteredBB
  %115 = load i8, i8* %3, align 1, !dbg !1762
  %116 = zext i8 %115 to i32, !dbg !1762
  %117 = load i32, i32* @x.15
  %118 = load i32, i32* @y.16
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %125, !dbg !1761

125:                                              ; preds = %originalBBpart229, %originalBBpart225
  %126 = phi i32 [ 83, %originalBBpart225 ], [ %116, %originalBBpart229 ], !dbg !1761
  %127 = load i32, i32* @x.15
  %128 = load i32, i32* @y.16
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %125, %originalBB31alteredBB
  %135 = call i32 (i8*, i8*, ...) @sprintf(i8* %84, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i64 0, i64 0), i8* %85, i32 %126) #10, !dbg !1763
  %136 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1764
  %137 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1765
  %138 = call i8* @time_string(%struct.utmpx* %137), !dbg !1766
  %139 = load i8, i8* %3, align 1, !dbg !1767
  %140 = zext i8 %139 to i32, !dbg !1767
  %141 = call zeroext i1 @c_isprint(i32 %140), !dbg !1768
  %142 = load i32, i32* @x.15
  %143 = load i32, i32* @y.16
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br i1 %141, label %150, label %152, !dbg !1768

150:                                              ; preds = %originalBBpart233
  %151 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1769
  br label %169, !dbg !1768

152:                                              ; preds = %originalBBpart233
  %153 = load i32, i32* @x.15
  %154 = load i32, i32* @y.16
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %152, %originalBB35alteredBB
  %161 = load i32, i32* @x.15
  %162 = load i32, i32* @y.16
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %169, !dbg !1768

169:                                              ; preds = %originalBBpart237, %150
  %170 = phi i8* [ %151, %150 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), %originalBBpart237 ], !dbg !1768
  %171 = load i32, i32* @x.15
  %172 = load i32, i32* @y.16
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %169, %originalBB39alteredBB
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %136, i8* %138, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %170, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1770
  %179 = load i32, i32* @x.15
  %180 = load i32, i32* @y.16
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  ret void, !dbg !1771

originalBBalteredBB:                              ; preds = %originalBB, %17
  %187 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0)) #10, !dbg !1738
  %188 = call i64 @strlen(i8* %187) #13, !dbg !1739
  %_ = shl i64 %188, 3
  %_1 = sub i64 0, %188
  %gen = add i64 %_1, 3
  %_2 = shl i64 %188, 3
  %_3 = sub i64 %188, 3
  %gen4 = mul i64 %_3, 3
  %_5 = sub i64 0, %188
  %gen6 = add i64 %_5, 3
  %_7 = sub i64 %188, 3
  %gen8 = mul i64 %_7, 3
  %189 = add i64 %188, 3, !dbg !1740
  %190 = call noalias i8* @xmalloc(i64 %189), !dbg !1741
  store i8* %190, i8** @print_runlevel.runlevline, align 8, !dbg !1742
  br label %originalBB

originalBB9alteredBB:                             ; preds = %originalBB9, %38
  %191 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1744
  %192 = call i8* @gettext(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i64 0, i64 0)) #10, !dbg !1745
  %193 = load i8, i8* %4, align 1, !dbg !1746
  %194 = zext i8 %193 to i32, !dbg !1746
  %195 = call i32 (i8*, i8*, ...) @sprintf(i8* %191, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i64 0, i64 0), i8* %192, i32 %194) #10, !dbg !1747
  %196 = load i8*, i8** @print_runlevel.comment, align 8, !dbg !1748
  %197 = icmp ne i8* %196, null, !dbg !1748
  br label %originalBB9

originalBB13alteredBB:                            ; preds = %originalBB13, %62
  %198 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i64 0, i64 0)) #10, !dbg !1751
  %199 = call i64 @strlen(i8* %198) #13, !dbg !1752
  %_14 = sub i64 0, %199
  %gen15 = add i64 %_14, 2
  %_16 = sub i64 0, %199
  %gen17 = add i64 %_16, 2
  %_18 = sub i64 0, %199
  %gen19 = add i64 %_18, 2
  %200 = add i64 %199, 2, !dbg !1753
  %201 = call noalias i8* @xmalloc(i64 %200), !dbg !1754
  store i8* %201, i8** @print_runlevel.comment, align 8, !dbg !1755
  br label %originalBB13

originalBB23alteredBB:                            ; preds = %originalBB23, %89
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %106
  %202 = load i8, i8* %3, align 1, !dbg !1762
  %203 = zext i8 %202 to i32, !dbg !1762
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %125
  %204 = call i32 (i8*, i8*, ...) @sprintf(i8* %84, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.87, i64 0, i64 0), i8* %85, i32 %126) #10, !dbg !1763
  %205 = load i8*, i8** @print_runlevel.runlevline, align 8, !dbg !1764
  %206 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !1765
  %207 = call i8* @time_string(%struct.utmpx* %206), !dbg !1766
  %208 = load i8, i8* %3, align 1, !dbg !1767
  %209 = zext i8 %208 to i32, !dbg !1767
  %210 = call zeroext i1 @c_isprint(i32 %209), !dbg !1768
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %152
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %169
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %136, i8* %138, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %170, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1770
  br label %originalBB39
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_boottime(%struct.utmpx*) #4 !dbg !1772 {
  %2 = load i32, i32* @x.17
  %3 = load i32, i32* @y.18
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !1773, metadata !DIExpression()), !dbg !1774
  %11 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.88, i64 0, i64 0)) #10, !dbg !1775
  %12 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1776
  %13 = call i8* @time_string(%struct.utmpx* %12), !dbg !1777
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %11, i8* %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1778
  %14 = load i32, i32* @x.17
  %15 = load i32, i32* @y.18
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !1779

originalBBalteredBB:                              ; preds = %originalBB, %1
  %22 = alloca %struct.utmpx*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %22, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %22, metadata !1780, metadata !DIExpression()), !dbg !1774
  %23 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.88, i64 0, i64 0)) #10, !dbg !1775
  %24 = load %struct.utmpx*, %struct.utmpx** %22, align 8, !dbg !1776
  %25 = call i8* @time_string(%struct.utmpx* %24), !dbg !1777
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %23, i8* %25, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1778
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_clockchange(%struct.utmpx*) #4 !dbg !1882 {
  %2 = load i32, i32* @x.19
  %3 = load i32, i32* @y.20
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !1883, metadata !DIExpression()), !dbg !1884
  %11 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.89, i64 0, i64 0)) #10, !dbg !1885
  %12 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1886
  %13 = call i8* @time_string(%struct.utmpx* %12), !dbg !1887
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %11, i8* %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1888
  %14 = load i32, i32* @x.19
  %15 = load i32, i32* @y.20
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !1889

originalBBalteredBB:                              ; preds = %originalBB, %1
  %22 = alloca %struct.utmpx*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %22, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %22, metadata !1890, metadata !DIExpression()), !dbg !1884
  %23 = call i8* @gettext(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.89, i64 0, i64 0)) #10, !dbg !1885
  %24 = load %struct.utmpx*, %struct.utmpx** %22, align 8, !dbg !1886
  %25 = call i8* @time_string(%struct.utmpx* %24), !dbg !1887
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 -1, i8* %23, i8* %25, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !1888
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_initspawn(%struct.utmpx*) #4 !dbg !1992 {
  %2 = load i32, i32* @x.21
  %3 = load i32, i32* @y.22
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !1993, metadata !DIExpression()), !dbg !1994
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1995, metadata !DIExpression()), !dbg !1996
  %13 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !1997
  %14 = call i8* @make_id_equals_comment(%struct.utmpx* %13), !dbg !1998
  store i8* %14, i8** %11, align 8, !dbg !1996
  call void @llvm.dbg.declare(metadata [12 x i8]* %12, metadata !1999, metadata !DIExpression()), !dbg !2000
  %15 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2000
  %16 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2000
  %17 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %16, i32 0, i32 1, !dbg !2000
  %18 = load i32, i32* %17, align 4, !dbg !2000
  %19 = sext i32 %18 to i64, !dbg !2000
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %19) #10, !dbg !2000
  %21 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2001
  %22 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %21, i32 0, i32 2, !dbg !2002
  %23 = getelementptr inbounds [32 x i8], [32 x i8]* %22, i64 0, i64 0, !dbg !2001
  %24 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2003
  %25 = call i8* @time_string(%struct.utmpx* %24), !dbg !2004
  %26 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2005
  %27 = load i8*, i8** %11, align 8, !dbg !2006
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 32, i8* %23, i8* %25, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %26, i8* %27, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2007
  %28 = load i8*, i8** %11, align 8, !dbg !2008
  call void @free(i8* %28) #10, !dbg !2009
  %29 = load i32, i32* @x.21
  %30 = load i32, i32* @y.22
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2010

originalBBalteredBB:                              ; preds = %originalBB, %1
  %37 = alloca %struct.utmpx*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %37, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %37, metadata !2011, metadata !DIExpression()), !dbg !1994
  call void @llvm.dbg.declare(metadata i8** %38, metadata !2113, metadata !DIExpression()), !dbg !1996
  %40 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !1997
  %41 = call i8* @make_id_equals_comment(%struct.utmpx* %40), !dbg !1998
  store i8* %41, i8** %38, align 8, !dbg !1996
  call void @llvm.dbg.declare(metadata [12 x i8]* %39, metadata !2114, metadata !DIExpression()), !dbg !2000
  %42 = getelementptr inbounds [12 x i8], [12 x i8]* %39, i64 0, i64 0, !dbg !2000
  %43 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !2000
  %44 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %43, i32 0, i32 1, !dbg !2000
  %45 = load i32, i32* %44, align 4, !dbg !2000
  %46 = sext i32 %45 to i64, !dbg !2000
  %47 = call i32 (i8*, i8*, ...) @sprintf(i8* %42, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %46) #10, !dbg !2000
  %48 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !2001
  %49 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %48, i32 0, i32 2, !dbg !2002
  %50 = getelementptr inbounds [32 x i8], [32 x i8]* %49, i64 0, i64 0, !dbg !2001
  %51 = load %struct.utmpx*, %struct.utmpx** %37, align 8, !dbg !2003
  %52 = call i8* @time_string(%struct.utmpx* %51), !dbg !2004
  %53 = getelementptr inbounds [12 x i8], [12 x i8]* %39, i64 0, i64 0, !dbg !2005
  %54 = load i8*, i8** %38, align 8, !dbg !2006
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 32, i8* %50, i8* %52, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %53, i8* %54, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2007
  %55 = load i8*, i8** %38, align 8, !dbg !2008
  call void @free(i8* %55) #10, !dbg !2009
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_login(%struct.utmpx*) #4 !dbg !2115 {
  %2 = load i32, i32* @x.23
  %3 = load i32, i32* @y.24
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !2116, metadata !DIExpression()), !dbg !2117
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2118, metadata !DIExpression()), !dbg !2119
  %13 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2120
  %14 = call i8* @make_id_equals_comment(%struct.utmpx* %13), !dbg !2121
  store i8* %14, i8** %11, align 8, !dbg !2119
  call void @llvm.dbg.declare(metadata [12 x i8]* %12, metadata !2122, metadata !DIExpression()), !dbg !2123
  %15 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2123
  %16 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2123
  %17 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %16, i32 0, i32 1, !dbg !2123
  %18 = load i32, i32* %17, align 4, !dbg !2123
  %19 = sext i32 %18 to i64, !dbg !2123
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %19) #10, !dbg !2123
  %21 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.91, i64 0, i64 0)) #10, !dbg !2124
  %22 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2125
  %23 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %22, i32 0, i32 2, !dbg !2126
  %24 = getelementptr inbounds [32 x i8], [32 x i8]* %23, i64 0, i64 0, !dbg !2125
  %25 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2127
  %26 = call i8* @time_string(%struct.utmpx* %25), !dbg !2128
  %27 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2129
  %28 = load i8*, i8** %11, align 8, !dbg !2130
  call void @print_line(i32 -1, i8* %21, i8 signext 32, i32 32, i8* %24, i8* %26, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %27, i8* %28, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2131
  %29 = load i8*, i8** %11, align 8, !dbg !2132
  call void @free(i8* %29) #10, !dbg !2133
  %30 = load i32, i32* @x.23
  %31 = load i32, i32* @y.24
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2134

originalBBalteredBB:                              ; preds = %originalBB, %1
  %38 = alloca %struct.utmpx*, align 8
  %39 = alloca i8*, align 8
  %40 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %38, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %38, metadata !2135, metadata !DIExpression()), !dbg !2117
  call void @llvm.dbg.declare(metadata i8** %39, metadata !2237, metadata !DIExpression()), !dbg !2119
  %41 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !2120
  %42 = call i8* @make_id_equals_comment(%struct.utmpx* %41), !dbg !2121
  store i8* %42, i8** %39, align 8, !dbg !2119
  call void @llvm.dbg.declare(metadata [12 x i8]* %40, metadata !2238, metadata !DIExpression()), !dbg !2123
  %43 = getelementptr inbounds [12 x i8], [12 x i8]* %40, i64 0, i64 0, !dbg !2123
  %44 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !2123
  %45 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %44, i32 0, i32 1, !dbg !2123
  %46 = load i32, i32* %45, align 4, !dbg !2123
  %47 = sext i32 %46 to i64, !dbg !2123
  %48 = call i32 (i8*, i8*, ...) @sprintf(i8* %43, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %47) #10, !dbg !2123
  %49 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.91, i64 0, i64 0)) #10, !dbg !2124
  %50 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !2125
  %51 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %50, i32 0, i32 2, !dbg !2126
  %52 = getelementptr inbounds [32 x i8], [32 x i8]* %51, i64 0, i64 0, !dbg !2125
  %53 = load %struct.utmpx*, %struct.utmpx** %38, align 8, !dbg !2127
  %54 = call i8* @time_string(%struct.utmpx* %53), !dbg !2128
  %55 = getelementptr inbounds [12 x i8], [12 x i8]* %40, i64 0, i64 0, !dbg !2129
  %56 = load i8*, i8** %39, align 8, !dbg !2130
  call void @print_line(i32 -1, i8* %49, i8 signext 32, i32 32, i8* %52, i8* %54, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %55, i8* %56, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0)), !dbg !2131
  %57 = load i8*, i8** %39, align 8, !dbg !2132
  call void @free(i8* %57) #10, !dbg !2133
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_deadprocs(%struct.utmpx*) #4 !dbg !140 {
  %2 = load i32, i32* @x.25
  %3 = load i32, i32* @y.26
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !2239, metadata !DIExpression()), !dbg !2240
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2241, metadata !DIExpression()), !dbg !2242
  %13 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2243
  %14 = call i8* @make_id_equals_comment(%struct.utmpx* %13), !dbg !2244
  store i8* %14, i8** %11, align 8, !dbg !2242
  call void @llvm.dbg.declare(metadata [12 x i8]* %12, metadata !2245, metadata !DIExpression()), !dbg !2246
  %15 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2246
  %16 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2246
  %17 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %16, i32 0, i32 1, !dbg !2246
  %18 = load i32, i32* %17, align 4, !dbg !2246
  %19 = sext i32 %18 to i64, !dbg !2246
  %20 = call i32 (i8*, i8*, ...) @sprintf(i8* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %19) #10, !dbg !2246
  %21 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !2247
  %22 = icmp ne i8* %21, null, !dbg !2247
  %23 = load i32, i32* @x.25
  %24 = load i32, i32* @y.26
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %42, label %31, !dbg !2249

31:                                               ; preds = %originalBBpart2
  %32 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i64 0, i64 0)) #10, !dbg !2250
  %33 = call i64 @strlen(i8* %32) #13, !dbg !2251
  %34 = add i64 %33, 6, !dbg !2252
  %35 = add i64 %34, 1, !dbg !2253
  %36 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i64 0, i64 0)) #10, !dbg !2254
  %37 = call i64 @strlen(i8* %36) #13, !dbg !2255
  %38 = add i64 %35, %37, !dbg !2256
  %39 = add i64 %38, 6, !dbg !2257
  %40 = add i64 %39, 1, !dbg !2258
  %41 = call noalias i8* @xmalloc(i64 %40), !dbg !2259
  store i8* %41, i8** @print_deadprocs.exitstr, align 8, !dbg !2260
  br label %42, !dbg !2261

42:                                               ; preds = %31, %originalBBpart2
  %43 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !2262
  %44 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.92, i64 0, i64 0)) #10, !dbg !2263
  %45 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2264
  %46 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %45, i32 0, i32 6, !dbg !2264
  %47 = getelementptr inbounds %struct.__exit_status, %struct.__exit_status* %46, i32 0, i32 0, !dbg !2264
  %48 = load i16, i16* %47, align 4, !dbg !2264
  %49 = sext i16 %48 to i32, !dbg !2264
  %50 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.93, i64 0, i64 0)) #10, !dbg !2265
  %51 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2266
  %52 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %51, i32 0, i32 6, !dbg !2266
  %53 = getelementptr inbounds %struct.__exit_status, %struct.__exit_status* %52, i32 0, i32 1, !dbg !2266
  %54 = load i16, i16* %53, align 2, !dbg !2266
  %55 = sext i16 %54 to i32, !dbg !2266
  %56 = call i32 (i8*, i8*, ...) @sprintf(i8* %43, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.94, i64 0, i64 0), i8* %44, i32 %49, i8* %50, i32 %55) #10, !dbg !2267
  %57 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2268
  %58 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %57, i32 0, i32 2, !dbg !2269
  %59 = getelementptr inbounds [32 x i8], [32 x i8]* %58, i64 0, i64 0, !dbg !2268
  %60 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !2270
  %61 = call i8* @time_string(%struct.utmpx* %60), !dbg !2271
  %62 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0, !dbg !2272
  %63 = load i8*, i8** %11, align 8, !dbg !2273
  %64 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !2274
  call void @print_line(i32 -1, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8 signext 32, i32 32, i8* %59, i8* %61, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), i8* %62, i8* %63, i8* %64), !dbg !2275
  %65 = load i8*, i8** %11, align 8, !dbg !2276
  call void @free(i8* %65) #10, !dbg !2277
  ret void, !dbg !2278

originalBBalteredBB:                              ; preds = %originalBB, %1
  %66 = alloca %struct.utmpx*, align 8
  %67 = alloca i8*, align 8
  %68 = alloca [12 x i8], align 1
  store %struct.utmpx* %0, %struct.utmpx** %66, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %66, metadata !2279, metadata !DIExpression()), !dbg !2240
  call void @llvm.dbg.declare(metadata i8** %67, metadata !2380, metadata !DIExpression()), !dbg !2242
  %69 = load %struct.utmpx*, %struct.utmpx** %66, align 8, !dbg !2243
  %70 = call i8* @make_id_equals_comment(%struct.utmpx* %69), !dbg !2244
  store i8* %70, i8** %67, align 8, !dbg !2242
  call void @llvm.dbg.declare(metadata [12 x i8]* %68, metadata !2381, metadata !DIExpression()), !dbg !2246
  %71 = getelementptr inbounds [12 x i8], [12 x i8]* %68, i64 0, i64 0, !dbg !2246
  %72 = load %struct.utmpx*, %struct.utmpx** %66, align 8, !dbg !2246
  %73 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %72, i32 0, i32 1, !dbg !2246
  %74 = load i32, i32* %73, align 4, !dbg !2246
  %75 = sext i32 %74 to i64, !dbg !2246
  %76 = call i32 (i8*, i8*, ...) @sprintf(i8* %71, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.74, i64 0, i64 0), i64 %75) #10, !dbg !2246
  %77 = load i8*, i8** @print_deadprocs.exitstr, align 8, !dbg !2247
  %78 = icmp ne i8* %77, null, !dbg !2247
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @make_id_equals_comment(%struct.utmpx*) #4 !dbg !2382 {
  %2 = alloca %struct.utmpx*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %2, metadata !2385, metadata !DIExpression()), !dbg !2386
  call void @llvm.dbg.declare(metadata i64* %3, metadata !2387, metadata !DIExpression()), !dbg !2388
  store i64 4, i64* %3, align 8, !dbg !2388
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2389, metadata !DIExpression()), !dbg !2390
  %5 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i64 0, i64 0)) #10, !dbg !2391
  %6 = call i64 @strlen(i8* %5) #13, !dbg !2392
  %7 = load i64, i64* %3, align 8, !dbg !2393
  %8 = add i64 %6, %7, !dbg !2394
  %9 = add i64 %8, 1, !dbg !2395
  %10 = call noalias i8* @xmalloc(i64 %9), !dbg !2396
  store i8* %10, i8** %4, align 8, !dbg !2390
  %11 = load i8*, i8** %4, align 8, !dbg !2397
  %12 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.90, i64 0, i64 0)) #10, !dbg !2398
  %13 = call i8* @strcpy(i8* %11, i8* %12) #10, !dbg !2399
  %14 = load i8*, i8** %4, align 8, !dbg !2400
  %15 = load %struct.utmpx*, %struct.utmpx** %2, align 8, !dbg !2401
  %16 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %15, i32 0, i32 3, !dbg !2401
  %17 = getelementptr inbounds [4 x i8], [4 x i8]* %16, i64 0, i64 0, !dbg !2401
  %18 = load i64, i64* %3, align 8, !dbg !2402
  %19 = call i8* @strncat(i8* %14, i8* %17, i64 %18) #10, !dbg !2403
  %20 = load i8*, i8** %4, align 8, !dbg !2404
  ret i8* %20, !dbg !2405
}

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @time_string(%struct.utmpx*) #4 !dbg !125 {
  %2 = load i32, i32* @x.29
  %3 = load i32, i32* @y.30
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca %struct.utmpx*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.tm*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %11, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %11, metadata !2406, metadata !DIExpression()), !dbg !2407
  call void @llvm.dbg.declare(metadata i64* %12, metadata !2408, metadata !DIExpression()), !dbg !2409
  %14 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !2410
  %15 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %14, i32 0, i32 8, !dbg !2410
  %16 = getelementptr inbounds %struct.anon, %struct.anon* %15, i32 0, i32 0, !dbg !2410
  %17 = load i32, i32* %16, align 4, !dbg !2410
  %18 = sext i32 %17 to i64, !dbg !2410
  store i64 %18, i64* %12, align 8, !dbg !2409
  call void @llvm.dbg.declare(metadata %struct.tm** %13, metadata !2411, metadata !DIExpression()), !dbg !2427
  %19 = call %struct.tm* @localtime(i64* %12) #10, !dbg !2428
  store %struct.tm* %19, %struct.tm** %13, align 8, !dbg !2427
  %20 = load %struct.tm*, %struct.tm** %13, align 8, !dbg !2429
  %21 = icmp ne %struct.tm* %20, null, !dbg !2429
  %22 = load i32, i32* @x.29
  %23 = load i32, i32* @y.30
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %50, !dbg !2431

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.29
  %32 = load i32, i32* @y.30
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load i8*, i8** @time_format, align 8, !dbg !2432
  %40 = load %struct.tm*, %struct.tm** %13, align 8, !dbg !2434
  %41 = call i64 @strftime(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i64 33, i8* %39, %struct.tm* %40) #10, !dbg !2435
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i8** %10, align 8, !dbg !2436
  %42 = load i32, i32* @x.29
  %43 = load i32, i32* @y.30
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %53, !dbg !2436

50:                                               ; preds = %originalBBpart2
  %51 = load i64, i64* %12, align 8, !dbg !2437
  %52 = call i8* @timetostr(i64 %51, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0)), !dbg !2438
  store i8* %52, i8** %10, align 8, !dbg !2439
  br label %53, !dbg !2439

53:                                               ; preds = %50, %originalBBpart24
  %54 = load i8*, i8** %10, align 8, !dbg !2440
  ret i8* %54, !dbg !2440

originalBBalteredBB:                              ; preds = %originalBB, %1
  %55 = alloca i8*, align 8
  %56 = alloca %struct.utmpx*, align 8
  %57 = alloca i64, align 8
  %58 = alloca %struct.tm*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %56, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %56, metadata !2441, metadata !DIExpression()), !dbg !2407
  call void @llvm.dbg.declare(metadata i64* %57, metadata !2542, metadata !DIExpression()), !dbg !2409
  %59 = load %struct.utmpx*, %struct.utmpx** %56, align 8, !dbg !2410
  %60 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %59, i32 0, i32 8, !dbg !2410
  %61 = getelementptr inbounds %struct.anon, %struct.anon* %60, i32 0, i32 0, !dbg !2410
  %62 = load i32, i32* %61, align 4, !dbg !2410
  %63 = sext i32 %62 to i64, !dbg !2410
  store i64 %63, i64* %57, align 8, !dbg !2409
  call void @llvm.dbg.declare(metadata %struct.tm** %58, metadata !2543, metadata !DIExpression()), !dbg !2427
  %64 = call %struct.tm* @localtime(i64* %57) #10, !dbg !2428
  store %struct.tm* %64, %struct.tm** %58, align 8, !dbg !2427
  %65 = load %struct.tm*, %struct.tm** %58, align 8, !dbg !2429
  %66 = icmp ne %struct.tm* %65, null, !dbg !2429
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %67 = load i8*, i8** @time_format, align 8, !dbg !2432
  %68 = load %struct.tm*, %struct.tm** %13, align 8, !dbg !2434
  %69 = call i64 @strftime(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i64 33, i8* %67, %struct.tm* %68) #10, !dbg !2435
  store i8* getelementptr inbounds ([33 x i8], [33 x i8]* @time_string.buf, i64 0, i64 0), i8** %10, align 8, !dbg !2436
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_line(i32, i8*, i8 signext, i32, i8*, i8*, i8*, i8*, i8*, i8*) #4 !dbg !56 {
  %11 = load i32, i32* @x.31
  %12 = load i32, i32* @y.32
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %10, %originalBBalteredBB
  %19 = alloca i32, align 4
  %20 = alloca i8*, align 8
  %21 = alloca i8, align 1
  %22 = alloca i32, align 4
  %23 = alloca i8*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i8*, align 8
  %29 = alloca i8*, align 8
  %30 = alloca [8 x i8], align 1
  %31 = alloca [13 x i8], align 1
  %32 = alloca i8*, align 8
  %33 = alloca i32, align 4
  %34 = alloca i8*, align 8
  store i32 %0, i32* %19, align 4
  call void @llvm.dbg.declare(metadata i32* %19, metadata !2558, metadata !DIExpression()), !dbg !2559
  store i8* %1, i8** %20, align 8
  call void @llvm.dbg.declare(metadata i8** %20, metadata !2560, metadata !DIExpression()), !dbg !2561
  store i8 %2, i8* %21, align 1
  call void @llvm.dbg.declare(metadata i8* %21, metadata !2562, metadata !DIExpression()), !dbg !2563
  store i32 %3, i32* %22, align 4
  call void @llvm.dbg.declare(metadata i32* %22, metadata !2564, metadata !DIExpression()), !dbg !2565
  store i8* %4, i8** %23, align 8
  call void @llvm.dbg.declare(metadata i8** %23, metadata !2566, metadata !DIExpression()), !dbg !2567
  store i8* %5, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2568, metadata !DIExpression()), !dbg !2569
  store i8* %6, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !2570, metadata !DIExpression()), !dbg !2571
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !2572, metadata !DIExpression()), !dbg !2573
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !2574, metadata !DIExpression()), !dbg !2575
  store i8* %9, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2576, metadata !DIExpression()), !dbg !2577
  call void @llvm.dbg.declare(metadata i8** %29, metadata !2578, metadata !DIExpression()), !dbg !2579
  call void @llvm.dbg.declare(metadata [8 x i8]* %30, metadata !2580, metadata !DIExpression()), !dbg !2582
  call void @llvm.dbg.declare(metadata [13 x i8]* %31, metadata !2583, metadata !DIExpression()), !dbg !2587
  call void @llvm.dbg.declare(metadata i8** %32, metadata !2588, metadata !DIExpression()), !dbg !2589
  call void @llvm.dbg.declare(metadata i32* %33, metadata !2590, metadata !DIExpression()), !dbg !2591
  %35 = load i8, i8* %21, align 1, !dbg !2592
  store i8 %35, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 1), align 1, !dbg !2593
  %36 = load i8, i8* @include_idle, align 1, !dbg !2594
  %37 = trunc i8 %36 to i1, !dbg !2594
  %38 = load i32, i32* @x.31
  %39 = load i32, i32* @y.32
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %37, label %46, label %89, !dbg !2596

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.31
  %48 = load i32, i32* @y.32
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %46, %originalBB1alteredBB
  %55 = load i8, i8* @short_output, align 1, !dbg !2597
  %56 = trunc i8 %55 to i1, !dbg !2597
  %57 = load i32, i32* @x.31
  %58 = load i32, i32* @y.32
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %56, label %89, label %65, !dbg !2598

65:                                               ; preds = %originalBBpart24
  %66 = load i8*, i8** %25, align 8, !dbg !2599
  %67 = call i64 @strlen(i8* %66) #13, !dbg !2600
  %68 = icmp ult i64 %67, 7, !dbg !2601
  br i1 %68, label %69, label %89, !dbg !2602

69:                                               ; preds = %65
  %70 = load i32, i32* @x.31
  %71 = load i32, i32* @y.32
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %69, %originalBB6alteredBB
  %78 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !2603
  %79 = load i8*, i8** %25, align 8, !dbg !2604
  %80 = call i32 (i8*, i8*, ...) @sprintf(i8* %78, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i64 0, i64 0), i8* %79) #10, !dbg !2605
  %81 = load i32, i32* @x.31
  %82 = load i32, i32* @y.32
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %91, !dbg !2605

89:                                               ; preds = %65, %originalBBpart24, %originalBBpart2
  %90 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !2606
  store i8 0, i8* %90, align 1, !dbg !2607
  br label %91

91:                                               ; preds = %89, %originalBBpart28
  %92 = load i8, i8* @short_output, align 1, !dbg !2608
  %93 = trunc i8 %92 to i1, !dbg !2608
  br i1 %93, label %118, label %94, !dbg !2610

94:                                               ; preds = %91
  %95 = load i32, i32* @x.31
  %96 = load i32, i32* @y.32
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %94, %originalBB10alteredBB
  %103 = load i8*, i8** %26, align 8, !dbg !2611
  %104 = call i64 @strlen(i8* %103) #13, !dbg !2612
  %105 = icmp ult i64 %104, 12, !dbg !2613
  %106 = load i32, i32* @x.31
  %107 = load i32, i32* @y.32
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %105, label %114, label %118, !dbg !2614

114:                                              ; preds = %originalBBpart212
  %115 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !2615
  %116 = load i8*, i8** %26, align 8, !dbg !2616
  %117 = call i32 (i8*, i8*, ...) @sprintf(i8* %115, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.70, i64 0, i64 0), i8* %116) #10, !dbg !2617
  br label %136, !dbg !2617

118:                                              ; preds = %originalBBpart212, %91
  %119 = load i32, i32* @x.31
  %120 = load i32, i32* @y.32
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %118, %originalBB14alteredBB
  %127 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !2618
  store i8 0, i8* %127, align 1, !dbg !2619
  %128 = load i32, i32* @x.31
  %129 = load i32, i32* @y.32
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %136

136:                                              ; preds = %originalBBpart216, %114
  %137 = load i32, i32* @x.31
  %138 = load i32, i32* @y.32
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %136, %originalBB18alteredBB
  %145 = load i8, i8* @include_exit, align 1, !dbg !2620
  %146 = trunc i8 %145 to i1, !dbg !2620
  %147 = load i32, i32* @x.31
  %148 = load i32, i32* @y.32
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %146, label %155, label %231, !dbg !2620

155:                                              ; preds = %originalBBpart220
  %156 = load i32, i32* @x.31
  %157 = load i32, i32* @y.32
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %155, %originalBB22alteredBB
  %164 = load i8*, i8** %28, align 8, !dbg !2621
  %165 = call i64 @strlen(i8* %164) #13, !dbg !2621
  %166 = icmp ugt i64 12, %165, !dbg !2621
  %167 = load i32, i32* @x.31
  %168 = load i32, i32* @y.32
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %166, label %175, label %192, !dbg !2621

175:                                              ; preds = %originalBBpart224
  %176 = load i32, i32* @x.31
  %177 = load i32, i32* @y.32
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %175, %originalBB26alteredBB
  %184 = load i32, i32* @x.31
  %185 = load i32, i32* @y.32
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %211, !dbg !2621

192:                                              ; preds = %originalBBpart224
  %193 = load i32, i32* @x.31
  %194 = load i32, i32* @y.32
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %192, %originalBB30alteredBB
  %201 = load i8*, i8** %28, align 8, !dbg !2621
  %202 = call i64 @strlen(i8* %201) #13, !dbg !2621
  %203 = load i32, i32* @x.31
  %204 = load i32, i32* @y.32
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %211, !dbg !2621

211:                                              ; preds = %originalBBpart232, %originalBBpart228
  %212 = phi i64 [ 12, %originalBBpart228 ], [ %202, %originalBBpart232 ], !dbg !2621
  %213 = load i32, i32* @x.31
  %214 = load i32, i32* @y.32
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %211, %originalBB34alteredBB
  %221 = add i64 1, %212, !dbg !2622
  %222 = add i64 %221, 1, !dbg !2623
  %223 = load i32, i32* @x.31
  %224 = load i32, i32* @y.32
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBBpart245, label %originalBB34alteredBB

originalBBpart245:                                ; preds = %originalBB34
  br label %248, !dbg !2620

231:                                              ; preds = %originalBBpart220
  %232 = load i32, i32* @x.31
  %233 = load i32, i32* @y.32
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %231, %originalBB47alteredBB
  %240 = load i32, i32* @x.31
  %241 = load i32, i32* @y.32
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %248, !dbg !2620

248:                                              ; preds = %originalBBpart249, %originalBBpart245
  %249 = phi i64 [ %222, %originalBBpart245 ], [ 1, %originalBBpart249 ], !dbg !2620
  %250 = call noalias i8* @xmalloc(i64 %249), !dbg !2624
  store i8* %250, i8** %32, align 8, !dbg !2625
  %251 = load i8, i8* @include_exit, align 1, !dbg !2626
  %252 = trunc i8 %251 to i1, !dbg !2626
  br i1 %252, label %253, label %273, !dbg !2628

253:                                              ; preds = %248
  %254 = load i32, i32* @x.31
  %255 = load i32, i32* @y.32
  %256 = sub i32 %254, 1
  %257 = mul i32 %254, %256
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %259, %260
  br i1 %261, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %253, %originalBB51alteredBB
  %262 = load i8*, i8** %32, align 8, !dbg !2629
  %263 = load i8*, i8** %28, align 8, !dbg !2630
  %264 = call i32 (i8*, i8*, ...) @sprintf(i8* %262, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i64 0, i64 0), i8* %263) #10, !dbg !2631
  %265 = load i32, i32* @x.31
  %266 = load i32, i32* @y.32
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br label %291, !dbg !2631

273:                                              ; preds = %248
  %274 = load i32, i32* @x.31
  %275 = load i32, i32* @y.32
  %276 = sub i32 %274, 1
  %277 = mul i32 %274, %276
  %278 = urem i32 %277, 2
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %279, %280
  br i1 %281, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %273, %originalBB55alteredBB
  %282 = load i8*, i8** %32, align 8, !dbg !2632
  store i8 0, i8* %282, align 1, !dbg !2633
  %283 = load i32, i32* @x.31
  %284 = load i32, i32* @y.32
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br label %291

291:                                              ; preds = %originalBBpart257, %originalBBpart253
  %292 = load i32, i32* @x.31
  %293 = load i32, i32* @y.32
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %291, %originalBB59alteredBB
  %300 = load i32, i32* %19, align 4, !dbg !2634
  %301 = load i8*, i8** %20, align 8, !dbg !2635
  %302 = icmp ne i8* %301, null, !dbg !2635
  %303 = load i32, i32* @x.31
  %304 = load i32, i32* @y.32
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br i1 %302, label %311, label %313, !dbg !2635

311:                                              ; preds = %originalBBpart261
  %312 = load i8*, i8** %20, align 8, !dbg !2636
  br label %330, !dbg !2635

313:                                              ; preds = %originalBBpart261
  %314 = load i32, i32* @x.31
  %315 = load i32, i32* @y.32
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %313, %originalBB63alteredBB
  %322 = load i32, i32* @x.31
  %323 = load i32, i32* @y.32
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %330, !dbg !2635

330:                                              ; preds = %originalBBpart265, %311
  %331 = phi i8* [ %312, %311 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73, i64 0, i64 0), %originalBBpart265 ], !dbg !2635
  %332 = load i32, i32* @x.31
  %333 = load i32, i32* @y.32
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %330, %originalBB67alteredBB
  %340 = load i8, i8* @include_mesg, align 1, !dbg !2637
  %341 = trunc i8 %340 to i1, !dbg !2637
  %342 = zext i1 %341 to i64, !dbg !2637
  %343 = select i1 %341, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !2637
  %344 = load i32, i32* %22, align 4, !dbg !2638
  %345 = load i8*, i8** %23, align 8, !dbg !2639
  %346 = load i32, i32* @time_format_width, align 4, !dbg !2640
  %347 = load i8*, i8** %24, align 8, !dbg !2641
  %348 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !2642
  %349 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !2643
  %350 = load i8*, i8** %27, align 8, !dbg !2644
  %351 = load i8*, i8** %32, align 8, !dbg !2645
  %352 = call i32 (i8**, i8*, ...) @asprintf(i8** %29, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.72, i64 0, i64 0), i32 %300, i8* %331, i8* %343, i32 %344, i8* %345, i32 %346, i8* %347, i8* %348, i8* %349, i8* %350, i8* %351) #10, !dbg !2646
  store i32 %352, i32* %33, align 4, !dbg !2647
  %353 = load i32, i32* %33, align 4, !dbg !2648
  %354 = load i32, i32* @x.31
  %355 = load i32, i32* @y.32
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br label %362, !dbg !2650

362:                                              ; preds = %originalBBpart269
  %363 = load i32, i32* @x.31
  %364 = load i32, i32* @y.32
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %362, %originalBB71alteredBB
  %collatzVar = alloca i32
  %371 = load i32, i32* @x.31
  %372 = load i32, i32* @y.32
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br label %379

379:                                              ; preds = %originalBBpart273
  %380 = load i32, i32* @x.31
  %381 = load i32, i32* @y.32
  %382 = sub i32 %380, 1
  %383 = mul i32 %380, %382
  %384 = urem i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %385, %386
  br i1 %387, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %379, %originalBB75alteredBB
  %388 = load i32, i32* @inVal0
  %389 = icmp sgt i32 %388, 1
  %390 = load i32, i32* @x.31
  %391 = load i32, i32* @y.32
  %392 = sub i32 %390, 1
  %393 = mul i32 %390, %392
  %394 = urem i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %395, %396
  br i1 %397, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  br i1 %389, label %399, label %398

398:                                              ; preds = %originalBBpart277
  store i32 21, i32* %collatzVar
  br label %399

399:                                              ; preds = %398, %originalBBpart277
  %400 = load i32, i32* @x.31
  %401 = load i32, i32* @y.32
  %402 = sub i32 %400, 1
  %403 = mul i32 %400, %402
  %404 = urem i32 %403, 2
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %405, %406
  br i1 %407, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %399, %originalBB79alteredBB
  %408 = load i8**, i8*** @inVal1
  %409 = getelementptr inbounds i8*, i8** %408, i64 1
  %410 = load i8*, i8** %409
  %controle = call i32 @controle(i8* %410, i32 -1)
  store i32 %controle, i32* %collatzVar
  %411 = load i32, i32* @x.31
  %412 = load i32, i32* @y.32
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br label %419

419:                                              ; preds = %originalBBpart2132, %481, %originalBBpart281
  %420 = load i32, i32* @x.31
  %421 = load i32, i32* @y.32
  %422 = sub i32 %420, 1
  %423 = mul i32 %420, %422
  %424 = urem i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %425, %426
  br i1 %427, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %419, %originalBB83alteredBB
  %428 = load i32, i32* %collatzVar
  %429 = icmp sgt i32 %428, 1
  %430 = load i32, i32* @x.31
  %431 = load i32, i32* @y.32
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br i1 %429, label %438, label %522

438:                                              ; preds = %originalBBpart285
  %439 = load i32, i32* @x.31
  %440 = load i32, i32* @y.32
  %441 = sub i32 %439, 1
  %442 = mul i32 %439, %441
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %444, %445
  br i1 %446, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %438, %originalBB87alteredBB
  %447 = load i32, i32* %collatzVar
  %448 = srem i32 %447, 2
  %449 = icmp eq i32 %448, 0
  %450 = load i32, i32* @x.31
  %451 = load i32, i32* @y.32
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart297, label %originalBB87alteredBB

originalBBpart297:                                ; preds = %originalBB87
  br i1 %449, label %458, label %477

458:                                              ; preds = %originalBBpart297
  %459 = load i32, i32* @x.31
  %460 = load i32, i32* @y.32
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %458, %originalBB99alteredBB
  %467 = load i32, i32* %collatzVar
  %468 = sdiv i32 %467, 2
  store i32 %468, i32* %collatzVar
  %469 = load i32, i32* @x.31
  %470 = load i32, i32* @y.32
  %471 = sub i32 %469, 1
  %472 = mul i32 %469, %471
  %473 = urem i32 %472, 2
  %474 = icmp eq i32 %473, 0
  %475 = icmp slt i32 %470, 10
  %476 = or i1 %474, %475
  br i1 %476, label %originalBBpart2114, label %originalBB99alteredBB

originalBBpart2114:                               ; preds = %originalBB99
  br label %481

477:                                              ; preds = %originalBBpart297
  %478 = load i32, i32* %collatzVar
  %479 = mul i32 %478, 3
  %480 = add i32 %479, 1
  store i32 %480, i32* %collatzVar
  br label %481

481:                                              ; preds = %477, %originalBBpart2114
  %482 = load i32, i32* %collatzVar
  %483 = sub i32 %353, %482
  %484 = icmp sgt i32 %483, -3
  br i1 %484, label %485, label %419

485:                                              ; preds = %481
  %486 = load i32, i32* @x.31
  %487 = load i32, i32* @y.32
  %488 = sub i32 %486, 1
  %489 = mul i32 %486, %488
  %490 = urem i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %491, %492
  br i1 %493, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %485, %originalBB116alteredBB
  %494 = load i32, i32* %collatzVar
  %495 = add i32 %353, %494
  %496 = icmp slt i32 %495, 1
  %497 = load i32, i32* @x.31
  %498 = load i32, i32* @y.32
  %499 = sub i32 %497, 1
  %500 = mul i32 %497, %499
  %501 = urem i32 %500, 2
  %502 = icmp eq i32 %501, 0
  %503 = icmp slt i32 %498, 10
  %504 = or i1 %502, %503
  br i1 %504, label %originalBBpart2132, label %originalBB116alteredBB

originalBBpart2132:                               ; preds = %originalBB116
  br i1 %496, label %505, label %419

505:                                              ; preds = %originalBBpart2132
  %506 = load i32, i32* @x.31
  %507 = load i32, i32* @y.32
  %508 = sub i32 %506, 1
  %509 = mul i32 %506, %508
  %510 = urem i32 %509, 2
  %511 = icmp eq i32 %510, 0
  %512 = icmp slt i32 %507, 10
  %513 = or i1 %511, %512
  br i1 %513, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %505, %originalBB134alteredBB
  call void @xalloc_die() #14, !dbg !2651
  %514 = load i32, i32* @x.31
  %515 = load i32, i32* @y.32
  %516 = sub i32 %514, 1
  %517 = mul i32 %514, %516
  %518 = urem i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %519, %520
  br i1 %521, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  unreachable, !dbg !2651

522:                                              ; preds = %originalBBpart285
  call void @llvm.dbg.declare(metadata i8** %34, metadata !2652, metadata !DIExpression()), !dbg !2654
  %523 = load i32, i32* @x.31
  %524 = load i32, i32* @y.32
  %525 = sub i32 %523, 1
  %526 = mul i32 %523, %525
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %524, 10
  %530 = or i1 %528, %529
  br i1 %530, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %522, %originalBB138alteredBB
  %531 = load i8*, i8** %29, align 8, !dbg !2655
  %532 = load i8*, i8** %29, align 8, !dbg !2656
  %533 = call i64 @strlen(i8* %532) #13, !dbg !2657
  %534 = getelementptr inbounds i8, i8* %531, i64 %533, !dbg !2658
  store i8* %534, i8** %34, align 8, !dbg !2654
  %535 = load i32, i32* @x.31
  %536 = load i32, i32* @y.32
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br label %543, !dbg !2659

543:                                              ; preds = %originalBBpart2148, %originalBBpart2140
  %544 = load i32, i32* @x.31
  %545 = load i32, i32* @y.32
  %546 = sub i32 %544, 1
  %547 = mul i32 %544, %546
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %545, 10
  %551 = or i1 %549, %550
  br i1 %551, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %543, %originalBB142alteredBB
  %552 = load i8*, i8** %34, align 8, !dbg !2660
  %553 = getelementptr inbounds i8, i8* %552, i32 -1, !dbg !2660
  store i8* %553, i8** %34, align 8, !dbg !2660
  %554 = load i8, i8* %553, align 1, !dbg !2661
  %555 = sext i8 %554 to i32, !dbg !2661
  %556 = icmp eq i32 %555, 32, !dbg !2662
  %557 = load i32, i32* @x.31
  %558 = load i32, i32* @y.32
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br i1 %556, label %565, label %582, !dbg !2659

565:                                              ; preds = %originalBBpart2144
  %566 = load i32, i32* @x.31
  %567 = load i32, i32* @y.32
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %565, %originalBB146alteredBB
  %574 = load i32, i32* @x.31
  %575 = load i32, i32* @y.32
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br label %543, !dbg !2659, !llvm.loop !2663

582:                                              ; preds = %originalBBpart2144
  %583 = load i32, i32* @x.31
  %584 = load i32, i32* @y.32
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %582, %originalBB150alteredBB
  %591 = load i8*, i8** %34, align 8, !dbg !2665
  %592 = getelementptr inbounds i8, i8* %591, i64 1, !dbg !2666
  store i8 0, i8* %592, align 1, !dbg !2667
  %593 = load i8*, i8** %29, align 8, !dbg !2668
  %594 = call i32 @puts(i8* %593), !dbg !2669
  %595 = load i8*, i8** %29, align 8, !dbg !2670
  call void @free(i8* %595) #10, !dbg !2671
  %596 = load i8*, i8** %32, align 8, !dbg !2672
  call void @free(i8* %596) #10, !dbg !2673
  %597 = load i32, i32* @x.31
  %598 = load i32, i32* @y.32
  %599 = sub i32 %597, 1
  %600 = mul i32 %597, %599
  %601 = urem i32 %600, 2
  %602 = icmp eq i32 %601, 0
  %603 = icmp slt i32 %598, 10
  %604 = or i1 %602, %603
  br i1 %604, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  ret void, !dbg !2674

originalBBalteredBB:                              ; preds = %originalBB, %10
  %605 = alloca i32, align 4
  %606 = alloca i8*, align 8
  %607 = alloca i8, align 1
  %608 = alloca i32, align 4
  %609 = alloca i8*, align 8
  %610 = alloca i8*, align 8
  %611 = alloca i8*, align 8
  %612 = alloca i8*, align 8
  %613 = alloca i8*, align 8
  %614 = alloca i8*, align 8
  %615 = alloca i8*, align 8
  %616 = alloca [8 x i8], align 1
  %617 = alloca [13 x i8], align 1
  %618 = alloca i8*, align 8
  %619 = alloca i32, align 4
  %620 = alloca i8*, align 8
  store i32 %0, i32* %605, align 4
  call void @llvm.dbg.declare(metadata i32* %605, metadata !2675, metadata !DIExpression()), !dbg !2559
  store i8* %1, i8** %606, align 8
  call void @llvm.dbg.declare(metadata i8** %606, metadata !2776, metadata !DIExpression()), !dbg !2561
  store i8 %2, i8* %607, align 1
  call void @llvm.dbg.declare(metadata i8* %607, metadata !2777, metadata !DIExpression()), !dbg !2563
  store i32 %3, i32* %608, align 4
  call void @llvm.dbg.declare(metadata i32* %608, metadata !2778, metadata !DIExpression()), !dbg !2565
  store i8* %4, i8** %609, align 8
  call void @llvm.dbg.declare(metadata i8** %609, metadata !2779, metadata !DIExpression()), !dbg !2567
  store i8* %5, i8** %610, align 8
  call void @llvm.dbg.declare(metadata i8** %610, metadata !2780, metadata !DIExpression()), !dbg !2569
  store i8* %6, i8** %611, align 8
  call void @llvm.dbg.declare(metadata i8** %611, metadata !2781, metadata !DIExpression()), !dbg !2571
  store i8* %7, i8** %612, align 8
  call void @llvm.dbg.declare(metadata i8** %612, metadata !2782, metadata !DIExpression()), !dbg !2573
  store i8* %8, i8** %613, align 8
  call void @llvm.dbg.declare(metadata i8** %613, metadata !2783, metadata !DIExpression()), !dbg !2575
  store i8* %9, i8** %614, align 8
  call void @llvm.dbg.declare(metadata i8** %614, metadata !2784, metadata !DIExpression()), !dbg !2577
  call void @llvm.dbg.declare(metadata i8** %615, metadata !2785, metadata !DIExpression()), !dbg !2579
  call void @llvm.dbg.declare(metadata [8 x i8]* %616, metadata !2786, metadata !DIExpression()), !dbg !2582
  call void @llvm.dbg.declare(metadata [13 x i8]* %617, metadata !2787, metadata !DIExpression()), !dbg !2587
  call void @llvm.dbg.declare(metadata i8** %618, metadata !2788, metadata !DIExpression()), !dbg !2589
  call void @llvm.dbg.declare(metadata i32* %619, metadata !2789, metadata !DIExpression()), !dbg !2591
  %621 = load i8, i8* %607, align 1, !dbg !2592
  store i8 %621, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 1), align 1, !dbg !2593
  %622 = load i8, i8* @include_idle, align 1, !dbg !2594
  %623 = trunc i8 %622 to i1, !dbg !2594
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %46
  %624 = load i8, i8* @short_output, align 1, !dbg !2597
  %625 = trunc i8 %624 to i1, !dbg !2597
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %69
  %626 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !2603
  %627 = load i8*, i8** %25, align 8, !dbg !2604
  %628 = call i32 (i8*, i8*, ...) @sprintf(i8* %626, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.69, i64 0, i64 0), i8* %627) #10, !dbg !2605
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %94
  %629 = load i8*, i8** %26, align 8, !dbg !2611
  %630 = call i64 @strlen(i8* %629) #13, !dbg !2612
  %631 = icmp ult i64 %630, 12, !dbg !2613
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %118
  %632 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !2618
  store i8 0, i8* %632, align 1, !dbg !2619
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %136
  %633 = load i8, i8* @include_exit, align 1, !dbg !2620
  %634 = trunc i8 %633 to i1, !dbg !2620
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %155
  %635 = load i8*, i8** %28, align 8, !dbg !2621
  %636 = call i64 @strlen(i8* %635) #13, !dbg !2621
  %637 = icmp ugt i64 12, %636, !dbg !2621
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %175
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %192
  %638 = load i8*, i8** %28, align 8, !dbg !2621
  %639 = call i64 @strlen(i8* %638) #13, !dbg !2621
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %211
  %_ = sub i64 0, 1
  %gen = add i64 %_, %212
  %640 = add i64 1, %212, !dbg !2622
  %_35 = shl i64 %640, 1
  %_36 = sub i64 0, %640
  %gen37 = add i64 %_36, 1
  %_38 = sub i64 %640, 1
  %gen39 = mul i64 %_38, 1
  %_40 = sub i64 %640, 1
  %gen41 = mul i64 %_40, 1
  %_42 = sub i64 %640, 1
  %gen43 = mul i64 %_42, 1
  %641 = add i64 %640, 1, !dbg !2623
  br label %originalBB34

originalBB47alteredBB:                            ; preds = %originalBB47, %231
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %253
  %642 = load i8*, i8** %32, align 8, !dbg !2629
  %643 = load i8*, i8** %28, align 8, !dbg !2630
  %644 = call i32 (i8*, i8*, ...) @sprintf(i8* %642, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i64 0, i64 0), i8* %643) #10, !dbg !2631
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %273
  %645 = load i8*, i8** %32, align 8, !dbg !2632
  store i8 0, i8* %645, align 1, !dbg !2633
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %291
  %646 = load i32, i32* %19, align 4, !dbg !2634
  %647 = load i8*, i8** %20, align 8, !dbg !2635
  %648 = icmp ne i8* %647, null, !dbg !2635
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %313
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %330
  %649 = load i8, i8* @include_mesg, align 1, !dbg !2637
  %650 = trunc i8 %649 to i1, !dbg !2637
  %651 = zext i1 %650 to i64, !dbg !2637
  %652 = select i1 %650, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @print_line.mesg, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.14, i64 0, i64 0), !dbg !2637
  %653 = load i32, i32* %22, align 4, !dbg !2638
  %654 = load i8*, i8** %23, align 8, !dbg !2639
  %655 = load i32, i32* @time_format_width, align 4, !dbg !2640
  %656 = load i8*, i8** %24, align 8, !dbg !2641
  %657 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 0, !dbg !2642
  %658 = getelementptr inbounds [13 x i8], [13 x i8]* %31, i64 0, i64 0, !dbg !2643
  %659 = load i8*, i8** %27, align 8, !dbg !2644
  %660 = load i8*, i8** %32, align 8, !dbg !2645
  %661 = call i32 (i8**, i8*, ...) @asprintf(i8** %29, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.72, i64 0, i64 0), i32 %300, i8* %331, i8* %652, i32 %653, i8* %654, i32 %655, i8* %656, i8* %657, i8* %658, i8* %659, i8* %660) #10, !dbg !2646
  store i32 %661, i32* %33, align 4, !dbg !2647
  %662 = load i32, i32* %33, align 4, !dbg !2648
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %362
  %collatzVaralteredBB = alloca i32
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %379
  %663 = load i32, i32* @inVal0
  %664 = icmp sgt i32 %663, 1
  br label %originalBB75

originalBB79alteredBB:                            ; preds = %originalBB79, %399
  %665 = load i8**, i8*** @inVal1
  %666 = getelementptr inbounds i8*, i8** %665, i64 1
  %667 = load i8*, i8** %666
  %controlealteredBB = call i32 @controle(i8* %667, i32 -1)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %419
  %668 = load i32, i32* %collatzVar
  %669 = icmp sgt i32 %668, 1
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %438
  %670 = load i32, i32* %collatzVar
  %_88 = shl i32 %670, 2
  %_89 = sub i32 %670, 2
  %gen90 = mul i32 %_89, 2
  %_91 = sub i32 %670, 2
  %gen92 = mul i32 %_91, 2
  %_93 = shl i32 %670, 2
  %_94 = sub i32 0, %670
  %gen95 = add i32 %_94, 2
  %671 = srem i32 %670, 2
  %672 = icmp eq i32 %671, 0
  br label %originalBB87

originalBB99alteredBB:                            ; preds = %originalBB99, %458
  %673 = load i32, i32* %collatzVar
  %_100 = sub i32 0, %673
  %gen101 = add i32 %_100, 2
  %_102 = sub i32 %673, 2
  %gen103 = mul i32 %_102, 2
  %_104 = shl i32 %673, 2
  %_105 = shl i32 %673, 2
  %_106 = shl i32 %673, 2
  %_107 = sub i32 0, %673
  %gen108 = add i32 %_107, 2
  %_109 = sub i32 0, %673
  %gen110 = add i32 %_109, 2
  %_111 = sub i32 0, %673
  %gen112 = add i32 %_111, 2
  %674 = sdiv i32 %673, 2
  store i32 %674, i32* %collatzVar
  br label %originalBB99

originalBB116alteredBB:                           ; preds = %originalBB116, %485
  %675 = load i32, i32* %collatzVar
  %_117 = sub i32 0, %353
  %gen118 = add i32 %_117, %675
  %_119 = shl i32 %353, %675
  %_120 = sub i32 %353, %675
  %gen121 = mul i32 %_120, %675
  %_122 = shl i32 %353, %675
  %_123 = sub i32 %353, %675
  %gen124 = mul i32 %_123, %675
  %_125 = shl i32 %353, %675
  %_126 = sub i32 %353, %675
  %gen127 = mul i32 %_126, %675
  %_128 = sub i32 0, %353
  %gen129 = add i32 %_128, %675
  %_130 = shl i32 %353, %675
  %676 = add i32 %353, %675
  %677 = icmp slt i32 %676, 1
  br label %originalBB116

originalBB134alteredBB:                           ; preds = %originalBB134, %505
  call void @xalloc_die() #14, !dbg !2651
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %522
  %678 = load i8*, i8** %29, align 8, !dbg !2655
  %679 = load i8*, i8** %29, align 8, !dbg !2656
  %680 = call i64 @strlen(i8* %679) #13, !dbg !2657
  %681 = getelementptr inbounds i8, i8* %678, i64 %680, !dbg !2658
  store i8* %681, i8** %34, align 8, !dbg !2654
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %543
  %682 = load i8*, i8** %34, align 8, !dbg !2660
  %683 = getelementptr inbounds i8, i8* %682, i32 -1, !dbg !2660
  store i8* %683, i8** %34, align 8, !dbg !2660
  %684 = load i8, i8* %683, align 1, !dbg !2661
  %685 = sext i8 %684 to i32, !dbg !2661
  %686 = icmp eq i32 %685, 32, !dbg !2662
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %565
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %582
  %687 = load i8*, i8** %34, align 8, !dbg !2665
  %688 = getelementptr inbounds i8, i8* %687, i64 1, !dbg !2666
  store i8 0, i8* %688, align 1, !dbg !2667
  %689 = load i8*, i8** %29, align 8, !dbg !2668
  %690 = call i32 @puts(i8* %689), !dbg !2669
  %691 = load i8*, i8** %29, align 8, !dbg !2670
  call void @free(i8* %691) #10, !dbg !2671
  %692 = load i8*, i8** %32, align 8, !dbg !2672
  call void @free(i8* %692) #10, !dbg !2673
  br label %originalBB150
}

; Function Attrs: nounwind
declare dso_local i32 @asprintf(i8**, i8*, ...) #2

declare dso_local i32 @puts(i8*) #3

; Function Attrs: nounwind
declare dso_local %struct.tm* @localtime(i64*) #2

; Function Attrs: nounwind
declare dso_local i64 @strftime(i8*, i64, i8*, %struct.tm*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @timetostr(i64, i8*) #4 !dbg !2790 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  store i64 %0, i64* %3, align 8
  call void @llvm.dbg.declare(metadata i64* %3, metadata !2793, metadata !DIExpression()), !dbg !2794
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2795, metadata !DIExpression()), !dbg !2796
  %5 = load i64, i64* %3, align 8, !dbg !2797
  %6 = load i8*, i8** %4, align 8, !dbg !2798
  %7 = call i8* @imaxtostr(i64 %5, i8* %6), !dbg !2799
  ret i8* %7, !dbg !2800
}

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @strncat(i8*, i8*, i64) #2

; Function Attrs: nounwind
declare dso_local i8* @stpcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @stzncpy(i8* noalias, i8* noalias, i64) #4 !dbg !2801 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2806, metadata !DIExpression()), !dbg !2807
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !2808, metadata !DIExpression()), !dbg !2809
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !2810, metadata !DIExpression()), !dbg !2811
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2812, metadata !DIExpression()), !dbg !2813
  %8 = load i8*, i8** %5, align 8, !dbg !2814
  %9 = load i64, i64* %6, align 8, !dbg !2815
  %10 = getelementptr inbounds i8, i8* %8, i64 %9, !dbg !2816
  store i8* %10, i8** %7, align 8, !dbg !2813
  br label %11, !dbg !2817

11:                                               ; preds = %originalBBpart28, %3
  %12 = load i8*, i8** %5, align 8, !dbg !2818
  %13 = load i8*, i8** %7, align 8, !dbg !2819
  %14 = icmp ult i8* %12, %13, !dbg !2820
  br i1 %14, label %15, label %36, !dbg !2821

15:                                               ; preds = %11
  %16 = load i32, i32* @x.35
  %17 = load i32, i32* @y.36
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  %24 = load i8*, i8** %5, align 8, !dbg !2822
  %25 = load i8, i8* %24, align 1, !dbg !2823
  %26 = sext i8 %25 to i32, !dbg !2823
  %27 = icmp ne i32 %26, 0, !dbg !2821
  %28 = load i32, i32* @x.35
  %29 = load i32, i32* @y.36
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %36

36:                                               ; preds = %originalBBpart2, %11
  %37 = phi i1 [ false, %11 ], [ %27, %originalBBpart2 ], !dbg !2824
  %38 = load i32, i32* @x.35
  %39 = load i32, i32* @y.36
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %46 = load i32, i32* @x.35
  %47 = load i32, i32* @y.36
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %37, label %54, label %76, !dbg !2817

54:                                               ; preds = %originalBBpart24
  %55 = load i32, i32* @x.35
  %56 = load i32, i32* @y.36
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  %63 = load i8*, i8** %5, align 8, !dbg !2825
  %64 = getelementptr inbounds i8, i8* %63, i32 1, !dbg !2825
  store i8* %64, i8** %5, align 8, !dbg !2825
  %65 = load i8, i8* %63, align 1, !dbg !2826
  %66 = load i8*, i8** %4, align 8, !dbg !2827
  %67 = getelementptr inbounds i8, i8* %66, i32 1, !dbg !2827
  store i8* %67, i8** %4, align 8, !dbg !2827
  store i8 %65, i8* %66, align 1, !dbg !2828
  %68 = load i32, i32* @x.35
  %69 = load i32, i32* @y.36
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %11, !dbg !2817, !llvm.loop !2829

76:                                               ; preds = %originalBBpart24
  %77 = load i32, i32* @x.35
  %78 = load i32, i32* @y.36
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %76, %originalBB10alteredBB
  %85 = load i8*, i8** %4, align 8, !dbg !2830
  store i8 0, i8* %85, align 1, !dbg !2831
  %86 = load i8*, i8** %4, align 8, !dbg !2832
  %87 = load i32, i32* @x.35
  %88 = load i32, i32* @y.36
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %86, !dbg !2833

originalBBalteredBB:                              ; preds = %originalBB, %15
  %95 = load i8*, i8** %5, align 8, !dbg !2822
  %96 = load i8, i8* %95, align 1, !dbg !2823
  %97 = sext i8 %96 to i32, !dbg !2823
  %98 = icmp ne i32 %97, 0, !dbg !2821
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  %99 = load i8*, i8** %5, align 8, !dbg !2825
  %100 = getelementptr inbounds i8, i8* %99, i32 1, !dbg !2825
  store i8* %100, i8** %5, align 8, !dbg !2825
  %101 = load i8, i8* %99, align 1, !dbg !2826
  %102 = load i8*, i8** %4, align 8, !dbg !2827
  %103 = getelementptr inbounds i8, i8* %102, i32 1, !dbg !2827
  store i8* %103, i8** %4, align 8, !dbg !2827
  store i8 %101, i8* %102, align 1, !dbg !2828
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %76
  %104 = load i8*, i8** %4, align 8, !dbg !2830
  store i8 0, i8* %104, align 1, !dbg !2831
  %105 = load i8*, i8** %4, align 8, !dbg !2832
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_tty_writable(%struct.stat*) #4 !dbg !2834 {
  %2 = load i32, i32* @x.37
  %3 = load i32, i32* @y.38
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %10, metadata !2839, metadata !DIExpression()), !dbg !2840
  %11 = load %struct.stat*, %struct.stat** %10, align 8, !dbg !2841
  %12 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 3, !dbg !2842
  %13 = load i32, i32* %12, align 8, !dbg !2842
  %14 = and i32 %13, 16, !dbg !2843
  %15 = icmp ne i32 %14, 0, !dbg !2841
  %16 = load i32, i32* @x.37
  %17 = load i32, i32* @y.38
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i1 %15, !dbg !2844

originalBBalteredBB:                              ; preds = %originalBB, %1
  %24 = alloca %struct.stat*, align 8
  store %struct.stat* %0, %struct.stat** %24, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %24, metadata !2845, metadata !DIExpression()), !dbg !2840
  %25 = load %struct.stat*, %struct.stat** %24, align 8, !dbg !2841
  %26 = getelementptr inbounds %struct.stat, %struct.stat* %25, i32 0, i32 3, !dbg !2842
  %27 = load i32, i32* %26, align 8, !dbg !2842
  %_ = shl i32 %27, 16
  %_1 = sub i32 %27, 16
  %gen = mul i32 %_1, 16
  %_2 = shl i32 %27, 16
  %_3 = sub i32 0, %27
  %gen4 = add i32 %_3, 16
  %_5 = sub i32 %27, 16
  %gen6 = mul i32 %_5, 16
  %_7 = sub i32 0, %27
  %gen8 = add i32 %_7, 16
  %_9 = sub i32 0, %27
  %gen10 = add i32 %_9, 16
  %_11 = shl i32 %27, 16
  %_12 = shl i32 %27, 16
  %28 = and i32 %27, 16, !dbg !2843
  %29 = icmp ne i32 %28, 0, !dbg !2841
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @idle_string(i64, i64) #4 !dbg !115 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  store i64 %0, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !2972, metadata !DIExpression()), !dbg !2973
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !2974, metadata !DIExpression()), !dbg !2975
  %7 = load i64, i64* @idle_string.now, align 8, !dbg !2976
  %8 = icmp eq i64 %7, -9223372036854775808, !dbg !2978
  br i1 %8, label %9, label %11, !dbg !2979

9:                                                ; preds = %2
  %10 = call i64 @time(i64* @idle_string.now) #10, !dbg !2980
  br label %11, !dbg !2980

11:                                               ; preds = %9, %2
  %12 = load i64, i64* %5, align 8, !dbg !2981
  %13 = load i64, i64* %4, align 8, !dbg !2983
  %14 = icmp slt i64 %12, %13, !dbg !2984
  br i1 %14, label %15, label %141, !dbg !2985

15:                                               ; preds = %11
  %16 = load i64, i64* @idle_string.now, align 8, !dbg !2986
  %17 = sub nsw i64 %16, 86400, !dbg !2987
  %18 = load i64, i64* %4, align 8, !dbg !2988
  %19 = icmp slt i64 %17, %18, !dbg !2989
  br i1 %19, label %20, label %141, !dbg !2990

20:                                               ; preds = %15
  %21 = load i32, i32* @x.39
  %22 = load i32, i32* @y.40
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %20, %originalBBalteredBB
  %29 = load i64, i64* %4, align 8, !dbg !2991
  %30 = load i64, i64* @idle_string.now, align 8, !dbg !2992
  %31 = icmp sle i64 %29, %30, !dbg !2993
  %32 = load i32, i32* @x.39
  %33 = load i32, i32* @y.40
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %141, !dbg !2994

40:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i32* %6, metadata !2995, metadata !DIExpression()), !dbg !2997
  %41 = load i32, i32* @x.39
  %42 = load i32, i32* @y.40
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %40, %originalBB1alteredBB
  %49 = load i64, i64* @idle_string.now, align 8, !dbg !2998
  %50 = load i64, i64* %4, align 8, !dbg !2999
  %51 = sub nsw i64 %49, %50, !dbg !3000
  %52 = trunc i64 %51 to i32, !dbg !2998
  store i32 %52, i32* %6, align 4, !dbg !2997
  %53 = load i32, i32* %6, align 4, !dbg !3001
  %54 = icmp slt i32 %53, 60, !dbg !3003
  %55 = load i32, i32* @x.39
  %56 = load i32, i32* @y.40
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart211, label %originalBB1alteredBB

originalBBpart211:                                ; preds = %originalBB1
  br i1 %54, label %63, label %80, !dbg !3004

63:                                               ; preds = %originalBBpart211
  %64 = load i32, i32* @x.39
  %65 = load i32, i32* @y.40
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %63, %originalBB13alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i64 0, i64 0), i8** %3, align 8, !dbg !3005
  %72 = load i32, i32* @x.39
  %73 = load i32, i32* @y.40
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br label %143, !dbg !3005

80:                                               ; preds = %originalBBpart211
  %81 = load i32, i32* @x.39
  %82 = load i32, i32* @y.40
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %80, %originalBB17alteredBB
  %89 = load i32, i32* %6, align 4, !dbg !3006
  %90 = sdiv i32 %89, 3600, !dbg !3006
  %91 = icmp slt i32 %90, 24, !dbg !3006
  %92 = load i32, i32* @x.39
  %93 = load i32, i32* @y.40
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart229, label %originalBB17alteredBB

originalBBpart229:                                ; preds = %originalBB17
  br i1 %91, label %100, label %101, !dbg !3010

100:                                              ; preds = %originalBBpart229
  br label %118, !dbg !3010

101:                                              ; preds = %originalBBpart229
  %102 = load i32, i32* @x.39
  %103 = load i32, i32* @y.40
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %101, %originalBB31alteredBB
  call void @__assert_fail(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81, i64 0, i64 0), i32 205, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.idle_string, i64 0, i64 0)) #12, !dbg !3006
  %110 = load i32, i32* @x.39
  %111 = load i32, i32* @y.40
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  unreachable, !dbg !3006

118:                                              ; preds = %100
  %119 = load i32, i32* @x.39
  %120 = load i32, i32* @y.40
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %118, %originalBB35alteredBB
  %127 = load i32, i32* %6, align 4, !dbg !3011
  %128 = sdiv i32 %127, 3600, !dbg !3012
  %129 = load i32, i32* %6, align 4, !dbg !3013
  %130 = srem i32 %129, 3600, !dbg !3014
  %131 = sdiv i32 %130, 60, !dbg !3015
  %132 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i64 0, i64 0), i32 %128, i32 %131) #10, !dbg !3016
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8** %3, align 8, !dbg !3017
  %133 = load i32, i32* @x.39
  %134 = load i32, i32* @y.40
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart272, label %originalBB35alteredBB

originalBBpart272:                                ; preds = %originalBB35
  br label %143, !dbg !3017

141:                                              ; preds = %originalBBpart2, %15, %11
  %142 = call i8* @gettext(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83, i64 0, i64 0)) #10, !dbg !3018
  store i8* %142, i8** %3, align 8, !dbg !3019
  br label %143, !dbg !3019

143:                                              ; preds = %141, %originalBBpart272, %originalBBpart215
  %144 = load i32, i32* @x.39
  %145 = load i32, i32* @y.40
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %143, %originalBB74alteredBB
  %152 = load i8*, i8** %3, align 8, !dbg !3020
  %153 = load i32, i32* @x.39
  %154 = load i32, i32* @y.40
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  ret i8* %152, !dbg !3020

originalBBalteredBB:                              ; preds = %originalBB, %20
  %161 = load i64, i64* %4, align 8, !dbg !2991
  %162 = load i64, i64* @idle_string.now, align 8, !dbg !2992
  %163 = icmp sle i64 %161, %162, !dbg !2993
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %164 = load i64, i64* @idle_string.now, align 8, !dbg !2998
  %165 = load i64, i64* %4, align 8, !dbg !2999
  %_ = sub i64 %164, %165
  %gen = mul i64 %_, %165
  %_2 = shl i64 %164, %165
  %_3 = sub i64 0, %164
  %gen4 = add i64 %_3, %165
  %_5 = sub i64 0, %164
  %gen6 = add i64 %_5, %165
  %_7 = shl i64 %164, %165
  %_8 = shl i64 %164, %165
  %_9 = shl i64 %164, %165
  %166 = sub nsw i64 %164, %165, !dbg !3000
  %167 = trunc i64 %166 to i32, !dbg !2998
  store i32 %167, i32* %6, align 4, !dbg !2997
  %168 = load i32, i32* %6, align 4, !dbg !3001
  %169 = icmp slt i32 %168, 60, !dbg !3003
  br label %originalBB1

originalBB13alteredBB:                            ; preds = %originalBB13, %63
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i64 0, i64 0), i8** %3, align 8, !dbg !3005
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %80
  %170 = load i32, i32* %6, align 4, !dbg !3006
  %_18 = shl i32 %170, 3600
  %_19 = sub i32 %170, 3600
  %gen20 = mul i32 %_19, 3600
  %_21 = sub i32 %170, 3600
  %gen22 = mul i32 %_21, 3600
  %_23 = shl i32 %170, 3600
  %_24 = shl i32 %170, 3600
  %_25 = shl i32 %170, 3600
  %_26 = sub i32 0, %170
  %gen27 = add i32 %_26, 3600
  %171 = sdiv i32 %170, 3600, !dbg !3006
  %172 = icmp slt i32 %171, 24, !dbg !3006
  br label %originalBB17

originalBB31alteredBB:                            ; preds = %originalBB31, %101
  call void @__assert_fail(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81, i64 0, i64 0), i32 205, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @__PRETTY_FUNCTION__.idle_string, i64 0, i64 0)) #12, !dbg !3006
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %118
  %173 = load i32, i32* %6, align 4, !dbg !3011
  %_36 = sub i32 0, %173
  %gen37 = add i32 %_36, 3600
  %_38 = sub i32 0, %173
  %gen39 = add i32 %_38, 3600
  %_40 = sub i32 0, %173
  %gen41 = add i32 %_40, 3600
  %_42 = shl i32 %173, 3600
  %_43 = shl i32 %173, 3600
  %_44 = sub i32 %173, 3600
  %gen45 = mul i32 %_44, 3600
  %_46 = sub i32 %173, 3600
  %gen47 = mul i32 %_46, 3600
  %_48 = sub i32 %173, 3600
  %gen49 = mul i32 %_48, 3600
  %174 = sdiv i32 %173, 3600, !dbg !3012
  %175 = load i32, i32* %6, align 4, !dbg !3013
  %_50 = shl i32 %175, 3600
  %_51 = sub i32 0, %175
  %gen52 = add i32 %_51, 3600
  %_53 = sub i32 %175, 3600
  %gen54 = mul i32 %_53, 3600
  %_55 = sub i32 0, %175
  %gen56 = add i32 %_55, 3600
  %_57 = sub i32 0, %175
  %gen58 = add i32 %_57, 3600
  %176 = srem i32 %175, 3600, !dbg !3014
  %_59 = sub i32 0, %176
  %gen60 = add i32 %_59, 60
  %_61 = sub i32 %176, 60
  %gen62 = mul i32 %_61, 60
  %_63 = shl i32 %176, 60
  %_64 = sub i32 0, %176
  %gen65 = add i32 %_64, 60
  %_66 = shl i32 %176, 60
  %_67 = sub i32 %176, 60
  %gen68 = mul i32 %_67, 60
  %_69 = sub i32 %176, 60
  %gen70 = mul i32 %_69, 60
  %177 = sdiv i32 %176, 60, !dbg !3015
  %178 = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i64 0, i64 0), i32 %174, i32 %177) #10, !dbg !3016
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @idle_string.idle_hhmm, i64 0, i64 0), i8** %3, align 8, !dbg !3017
  br label %originalBB35

originalBB74alteredBB:                            ; preds = %originalBB74, %143
  %179 = load i8*, i8** %3, align 8, !dbg !3020
  br label %originalBB74
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #7

; Function Attrs: nounwind
declare dso_local i64 @time(i64*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #5

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @c_isprint(i32) #4 !dbg !3021 {
  %2 = load i32, i32* @x.41
  %3 = load i32, i32* @y.42
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3025, metadata !DIExpression()), !dbg !3026
  %12 = load i32, i32* %11, align 4, !dbg !3027
  %13 = load i32, i32* @x.41
  %14 = load i32, i32* @y.42
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %22 [
    i32 32, label %21
    i32 48, label %21
    i32 49, label %21
    i32 50, label %21
    i32 51, label %21
    i32 52, label %21
    i32 53, label %21
    i32 54, label %21
    i32 55, label %21
    i32 56, label %21
    i32 57, label %21
    i32 97, label %21
    i32 98, label %21
    i32 99, label %21
    i32 100, label %21
    i32 101, label %21
    i32 102, label %21
    i32 103, label %21
    i32 104, label %21
    i32 105, label %21
    i32 106, label %21
    i32 107, label %21
    i32 108, label %21
    i32 109, label %21
    i32 110, label %21
    i32 111, label %21
    i32 112, label %21
    i32 113, label %21
    i32 114, label %21
    i32 115, label %21
    i32 116, label %21
    i32 117, label %21
    i32 118, label %21
    i32 119, label %21
    i32 120, label %21
    i32 121, label %21
    i32 122, label %21
    i32 33, label %21
    i32 34, label %21
    i32 35, label %21
    i32 36, label %21
    i32 37, label %21
    i32 38, label %21
    i32 39, label %21
    i32 40, label %21
    i32 41, label %21
    i32 42, label %21
    i32 43, label %21
    i32 44, label %21
    i32 45, label %21
    i32 46, label %21
    i32 47, label %21
    i32 58, label %21
    i32 59, label %21
    i32 60, label %21
    i32 61, label %21
    i32 62, label %21
    i32 63, label %21
    i32 64, label %21
    i32 91, label %21
    i32 92, label %21
    i32 93, label %21
    i32 94, label %21
    i32 95, label %21
    i32 96, label %21
    i32 123, label %21
    i32 124, label %21
    i32 125, label %21
    i32 126, label %21
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3028

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  store i1 true, i1* %10, align 1, !dbg !3029
  br label %39, !dbg !3029

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.41
  %24 = load i32, i32* @y.42
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !3031
  %31 = load i32, i32* @x.41
  %32 = load i32, i32* @y.42
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %39, !dbg !3031

39:                                               ; preds = %originalBBpart24, %21
  %40 = load i32, i32* @x.41
  %41 = load i32, i32* @y.42
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %39, %originalBB6alteredBB
  %48 = load i1, i1* %10, align 1, !dbg !3032
  %49 = load i32, i32* @x.41
  %50 = load i32, i32* @y.42
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i1 %48, !dbg !3032

originalBBalteredBB:                              ; preds = %originalBB, %1
  %57 = alloca i1, align 1
  %58 = alloca i32, align 4
  store i32 %0, i32* %58, align 4
  call void @llvm.dbg.declare(metadata i32* %58, metadata !3033, metadata !DIExpression()), !dbg !3026
  %59 = load i32, i32* %58, align 4, !dbg !3027
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  store i1 false, i1* %10, align 1, !dbg !3031
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %39
  %60 = load i1, i1* %10, align 1, !dbg !3032
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !3036 {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3039, metadata !DIExpression()), !dbg !3040
  %12 = load i32, i32* %11, align 4, !dbg !3041
  %13 = load i32, i32* @x.43
  %14 = load i32, i32* @y.44
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3042

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.43
  %23 = load i32, i32* @y.44
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !3043
  %31 = sub nsw i32 %30, 65, !dbg !3045
  %32 = add nsw i32 %31, 97, !dbg !3046
  store i32 %32, i32* %10, align 4, !dbg !3047
  %33 = load i32, i32* @x.43
  %34 = load i32, i32* @y.44
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart214, label %originalBB1alteredBB

originalBBpart214:                                ; preds = %originalBB1
  br label %43, !dbg !3047

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* %11, align 4, !dbg !3048
  store i32 %42, i32* %10, align 4, !dbg !3049
  br label %43, !dbg !3049

43:                                               ; preds = %41, %originalBBpart214
  %44 = load i32, i32* %10, align 4, !dbg !3050
  ret i32 %44, !dbg !3050

originalBBalteredBB:                              ; preds = %originalBB, %1
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  store i32 %0, i32* %46, align 4
  call void @llvm.dbg.declare(metadata i32* %46, metadata !3051, metadata !DIExpression()), !dbg !3040
  %47 = load i32, i32* %46, align 4, !dbg !3041
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %48 = load i32, i32* %11, align 4, !dbg !3043
  %_ = shl i32 %48, 65
  %_2 = sub i32 %48, 65
  %gen = mul i32 %_2, 65
  %49 = sub nsw i32 %48, 65, !dbg !3045
  %_3 = sub i32 0, %49
  %gen4 = add i32 %_3, 97
  %_5 = sub i32 0, %49
  %gen6 = add i32 %_5, 97
  %_7 = sub i32 %49, 97
  %gen8 = mul i32 %_7, 97
  %_9 = sub i32 %49, 97
  %gen10 = mul i32 %_9, 97
  %_11 = sub i32 %49, 97
  %gen12 = mul i32 %_11, 97
  %50 = add nsw i32 %49, 97, !dbg !3046
  store i32 %50, i32* %10, align 4, !dbg !3047
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @canon_host(i8*) #4 !dbg !3054 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !3057, metadata !DIExpression()), !dbg !3058
  %3 = load i8*, i8** %2, align 8, !dbg !3059
  %4 = call noalias i8* @canon_host_r(i8* %3, i32* @last_cherror), !dbg !3060
  ret i8* %4, !dbg !3061
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @canon_host_r(i8*, i32*) #4 !dbg !165 {
  %3 = load i32, i32* @x.47
  %4 = load i32, i32* @y.48
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca %struct.addrinfo*, align 8
  %15 = alloca i32, align 4
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3062, metadata !DIExpression()), !dbg !3063
  store i32* %1, i32** %12, align 8
  call void @llvm.dbg.declare(metadata i32** %12, metadata !3064, metadata !DIExpression()), !dbg !3065
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3066, metadata !DIExpression()), !dbg !3067
  store i8* null, i8** %13, align 8, !dbg !3067
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %14, metadata !3068, metadata !DIExpression()), !dbg !3069
  store %struct.addrinfo* null, %struct.addrinfo** %14, align 8, !dbg !3069
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3070, metadata !DIExpression()), !dbg !3071
  store i32 2, i32* getelementptr inbounds (%struct.addrinfo, %struct.addrinfo* @canon_host_r.hints, i32 0, i32 0), align 8, !dbg !3072
  %16 = load i8*, i8** %11, align 8, !dbg !3073
  %17 = call i32 @getaddrinfo(i8* %16, i8* null, %struct.addrinfo* @canon_host_r.hints, %struct.addrinfo** %14), !dbg !3074
  store i32 %17, i32* %15, align 4, !dbg !3075
  %18 = load i32, i32* %15, align 4, !dbg !3076
  %19 = icmp ne i32 %18, 0, !dbg !3076
  %20 = load i32, i32* @x.47
  %21 = load i32, i32* @y.48
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %19, label %147, label %28, !dbg !3078

28:                                               ; preds = %originalBBpart2
  %29 = load i32, i32* @x.47
  %30 = load i32, i32* @y.48
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3079
  %38 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %37, i32 0, i32 6, !dbg !3081
  %39 = load i8*, i8** %38, align 8, !dbg !3081
  %40 = icmp ne i8* %39, null, !dbg !3079
  %41 = load i32, i32* @x.47
  %42 = load i32, i32* @y.48
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %40, label %49, label %69, !dbg !3079

49:                                               ; preds = %originalBBpart24
  %50 = load i32, i32* @x.47
  %51 = load i32, i32* @y.48
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3082
  %59 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %58, i32 0, i32 6, !dbg !3083
  %60 = load i8*, i8** %59, align 8, !dbg !3083
  %61 = load i32, i32* @x.47
  %62 = load i32, i32* @y.48
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %87, !dbg !3079

69:                                               ; preds = %originalBBpart24
  %70 = load i32, i32* @x.47
  %71 = load i32, i32* @y.48
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = load i8*, i8** %11, align 8, !dbg !3084
  %79 = load i32, i32* @x.47
  %80 = load i32, i32* @y.48
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %87, !dbg !3079

87:                                               ; preds = %originalBBpart212, %originalBBpart28
  %88 = phi i8* [ %60, %originalBBpart28 ], [ %78, %originalBBpart212 ], !dbg !3079
  %89 = load i32, i32* @x.47
  %90 = load i32, i32* @y.48
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %97 = call noalias i8* @strdup(i8* %88) #10, !dbg !3085
  store i8* %97, i8** %13, align 8, !dbg !3086
  %98 = load i8*, i8** %13, align 8, !dbg !3087
  %99 = icmp ne i8* %98, null, !dbg !3087
  %100 = load i32, i32* @x.47
  %101 = load i32, i32* @y.48
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %99, label %145, label %108, !dbg !3089

108:                                              ; preds = %originalBBpart216
  %109 = load i32, i32* @x.47
  %110 = load i32, i32* @y.48
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %108, %originalBB18alteredBB
  %117 = load i32*, i32** %12, align 8, !dbg !3090
  %118 = icmp ne i32* %117, null, !dbg !3090
  %119 = load i32, i32* @x.47
  %120 = load i32, i32* @y.48
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %118, label %127, label %145, !dbg !3091

127:                                              ; preds = %originalBBpart220
  %128 = load i32, i32* @x.47
  %129 = load i32, i32* @y.48
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %127, %originalBB22alteredBB
  %136 = load i32*, i32** %12, align 8, !dbg !3092
  store i32 -10, i32* %136, align 4, !dbg !3093
  %137 = load i32, i32* @x.47
  %138 = load i32, i32* @y.48
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %145, !dbg !3094

145:                                              ; preds = %originalBBpart224, %originalBBpart220, %originalBBpart216
  %146 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3095
  call void @freeaddrinfo(%struct.addrinfo* %146) #10, !dbg !3096
  br label %186, !dbg !3097

147:                                              ; preds = %originalBBpart2
  %148 = load i32, i32* @x.47
  %149 = load i32, i32* @y.48
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %147, %originalBB26alteredBB
  %156 = load i32*, i32** %12, align 8, !dbg !3098
  %157 = icmp ne i32* %156, null, !dbg !3098
  %158 = load i32, i32* @x.47
  %159 = load i32, i32* @y.48
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %157, label %166, label %185, !dbg !3100

166:                                              ; preds = %originalBBpart228
  %167 = load i32, i32* @x.47
  %168 = load i32, i32* @y.48
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %15, align 4, !dbg !3101
  %176 = load i32*, i32** %12, align 8, !dbg !3102
  store i32 %175, i32* %176, align 4, !dbg !3103
  %177 = load i32, i32* @x.47
  %178 = load i32, i32* @y.48
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %185, !dbg !3104

185:                                              ; preds = %originalBBpart232, %originalBBpart228
  br label %186

186:                                              ; preds = %185, %145
  %187 = load i8*, i8** %13, align 8, !dbg !3105
  ret i8* %187, !dbg !3106

originalBBalteredBB:                              ; preds = %originalBB, %2
  %188 = alloca i8*, align 8
  %189 = alloca i32*, align 8
  %190 = alloca i8*, align 8
  %191 = alloca %struct.addrinfo*, align 8
  %192 = alloca i32, align 4
  store i8* %0, i8** %188, align 8
  call void @llvm.dbg.declare(metadata i8** %188, metadata !3107, metadata !DIExpression()), !dbg !3063
  store i32* %1, i32** %189, align 8
  call void @llvm.dbg.declare(metadata i32** %189, metadata !3131, metadata !DIExpression()), !dbg !3065
  call void @llvm.dbg.declare(metadata i8** %190, metadata !3132, metadata !DIExpression()), !dbg !3067
  store i8* null, i8** %190, align 8, !dbg !3067
  call void @llvm.dbg.declare(metadata %struct.addrinfo** %191, metadata !3133, metadata !DIExpression()), !dbg !3069
  store %struct.addrinfo* null, %struct.addrinfo** %191, align 8, !dbg !3069
  call void @llvm.dbg.declare(metadata i32* %192, metadata !3134, metadata !DIExpression()), !dbg !3071
  store i32 2, i32* getelementptr inbounds (%struct.addrinfo, %struct.addrinfo* @canon_host_r.hints, i32 0, i32 0), align 8, !dbg !3072
  %193 = load i8*, i8** %188, align 8, !dbg !3073
  %194 = call i32 @getaddrinfo(i8* %193, i8* null, %struct.addrinfo* @canon_host_r.hints, %struct.addrinfo** %191), !dbg !3074
  store i32 %194, i32* %192, align 4, !dbg !3075
  %195 = load i32, i32* %192, align 4, !dbg !3076
  %196 = icmp ne i32 %195, 0, !dbg !3076
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %197 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3079
  %198 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %197, i32 0, i32 6, !dbg !3081
  %199 = load i8*, i8** %198, align 8, !dbg !3081
  %200 = icmp ne i8* %199, null, !dbg !3079
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %201 = load %struct.addrinfo*, %struct.addrinfo** %14, align 8, !dbg !3082
  %202 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %201, i32 0, i32 6, !dbg !3083
  %203 = load i8*, i8** %202, align 8, !dbg !3083
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %204 = load i8*, i8** %11, align 8, !dbg !3084
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %205 = call noalias i8* @strdup(i8* %88) #10, !dbg !3085
  store i8* %205, i8** %13, align 8, !dbg !3086
  %206 = load i8*, i8** %13, align 8, !dbg !3087
  %207 = icmp ne i8* %206, null, !dbg !3087
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %108
  %208 = load i32*, i32** %12, align 8, !dbg !3090
  %209 = icmp ne i32* %208, null, !dbg !3090
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %127
  %210 = load i32*, i32** %12, align 8, !dbg !3092
  store i32 -10, i32* %210, align 4, !dbg !3093
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %147
  %211 = load i32*, i32** %12, align 8, !dbg !3098
  %212 = icmp ne i32* %211, null, !dbg !3098
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %213 = load i32, i32* %15, align 4, !dbg !3101
  %214 = load i32*, i32** %12, align 8, !dbg !3102
  store i32 %213, i32* %214, align 4, !dbg !3103
  br label %originalBB30
}

declare dso_local i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #3

; Function Attrs: nounwind
declare dso_local noalias i8* @strdup(i8*) #2

; Function Attrs: nounwind
declare dso_local void @freeaddrinfo(%struct.addrinfo*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !3135 {
  %1 = load i32, i32* @x.49
  %2 = load i32, i32* @y.50
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !3136
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !3138
  %12 = icmp ne i32 %11, 0, !dbg !3139
  %13 = load i32, i32* @x.49
  %14 = load i32, i32* @y.50
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %108, !dbg !3140

21:                                               ; preds = %originalBBpart2
  %22 = load i8, i8* @ignore_EPIPE, align 1, !dbg !3141
  %23 = trunc i8 %22 to i1, !dbg !3141
  br i1 %23, label %24, label %44, !dbg !3142

24:                                               ; preds = %21
  %25 = load i32, i32* @x.49
  %26 = load i32, i32* @y.50
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = call i32* @__errno_location() #15, !dbg !3143
  %34 = load i32, i32* %33, align 4, !dbg !3143
  %35 = icmp eq i32 %34, 32, !dbg !3144
  %36 = load i32, i32* @x.49
  %37 = load i32, i32* @y.50
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %108, label %44, !dbg !3145

44:                                               ; preds = %originalBBpart24, %21
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3146, metadata !DIExpression()), !dbg !3148
  %45 = load i32, i32* @x.49
  %46 = load i32, i32* @y.50
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.102, i64 0, i64 0)) #10, !dbg !3149
  store i8* %53, i8** %9, align 8, !dbg !3148
  %54 = load i8*, i8** @file_name, align 8, !dbg !3150
  %55 = icmp ne i8* %54, null, !dbg !3150
  %56 = load i32, i32* @x.49
  %57 = load i32, i32* @y.50
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %55, label %64, label %70, !dbg !3152

64:                                               ; preds = %originalBBpart28
  %65 = call i32* @__errno_location() #15, !dbg !3153
  %66 = load i32, i32* %65, align 4, !dbg !3153
  %67 = load i8*, i8** @file_name, align 8, !dbg !3154
  %68 = call i8* @quotearg_colon(i8* %67), !dbg !3155
  %69 = load i8*, i8** %9, align 8, !dbg !3156
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %66, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.103, i64 0, i64 0), i8* %68, i8* %69), !dbg !3157
  br label %90, !dbg !3157

70:                                               ; preds = %originalBBpart28
  %71 = load i32, i32* @x.49
  %72 = load i32, i32* @y.50
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %70, %originalBB10alteredBB
  %79 = call i32* @__errno_location() #15, !dbg !3158
  %80 = load i32, i32* %79, align 4, !dbg !3158
  %81 = load i8*, i8** %9, align 8, !dbg !3159
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %80, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.104, i64 0, i64 0), i8* %81), !dbg !3160
  %82 = load i32, i32* @x.49
  %83 = load i32, i32* @y.50
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %90

90:                                               ; preds = %originalBBpart212, %64
  %91 = load i32, i32* @x.49
  %92 = load i32, i32* @y.50
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %90, %originalBB14alteredBB
  %99 = load volatile i32, i32* @exit_failure, align 4, !dbg !3161
  call void @_exit(i32 %99) #14, !dbg !3162
  %100 = load i32, i32* @x.49
  %101 = load i32, i32* @y.50
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !3162

108:                                              ; preds = %originalBBpart24, %originalBBpart2
  %109 = load i32, i32* @x.49
  %110 = load i32, i32* @y.50
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %108, %originalBB18alteredBB
  %117 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3163
  %118 = call i32 @close_stream(%struct._IO_FILE* %117), !dbg !3165
  %119 = icmp ne i32 %118, 0, !dbg !3166
  %120 = load i32, i32* @x.49
  %121 = load i32, i32* @y.50
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %119, label %128, label %146, !dbg !3167

128:                                              ; preds = %originalBBpart220
  %129 = load i32, i32* @x.49
  %130 = load i32, i32* @y.50
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %128, %originalBB22alteredBB
  %137 = load volatile i32, i32* @exit_failure, align 4, !dbg !3168
  call void @_exit(i32 %137) #14, !dbg !3169
  %138 = load i32, i32* @x.49
  %139 = load i32, i32* @y.50
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !3169

146:                                              ; preds = %originalBBpart220
  %147 = load i32, i32* @x.49
  %148 = load i32, i32* @y.50
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %146, %originalBB26alteredBB
  %155 = load i32, i32* @x.49
  %156 = load i32, i32* @y.50
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret void, !dbg !3170

originalBBalteredBB:                              ; preds = %originalBB, %0
  %163 = alloca i8*, align 8
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !3136
  %165 = call i32 @close_stream(%struct._IO_FILE* %164), !dbg !3138
  %166 = icmp ne i32 %165, 0, !dbg !3139
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %167 = call i32* @__errno_location() #15, !dbg !3143
  %168 = load i32, i32* %167, align 4, !dbg !3143
  %169 = icmp eq i32 %168, 32, !dbg !3144
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %170 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.102, i64 0, i64 0)) #10, !dbg !3149
  store i8* %170, i8** %9, align 8, !dbg !3148
  %171 = load i8*, i8** @file_name, align 8, !dbg !3150
  %172 = icmp ne i8* %171, null, !dbg !3150
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %70
  %173 = call i32* @__errno_location() #15, !dbg !3158
  %174 = load i32, i32* %173, align 4, !dbg !3158
  %175 = load i8*, i8** %9, align 8, !dbg !3159
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %174, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.104, i64 0, i64 0), i8* %175), !dbg !3160
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %90
  %176 = load volatile i32, i32* @exit_failure, align 4, !dbg !3161
  call void @_exit(i32 %176) #14, !dbg !3162
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %108
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3163
  %178 = call i32 @close_stream(%struct._IO_FILE* %177), !dbg !3165
  %179 = icmp ne i32 %178, 0, !dbg !3166
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %128
  %180 = load volatile i32, i32* @exit_failure, align 4, !dbg !3168
  call void @_exit(i32 %180) #14, !dbg !3169
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %146
  br label %originalBB26
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !3171 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3173, metadata !DIExpression()), !dbg !3174
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !3175, metadata !DIExpression()), !dbg !3176
  %13 = load i32, i32* %11, align 4, !dbg !3177
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3179
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !3180
  %16 = icmp ne i32 %15, 0, !dbg !3180
  %17 = load i32, i32* @x.51
  %18 = load i32, i32* @y.52
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !3181

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.51
  %27 = load i32, i32* @y.52
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !3182
  %34 = load i32, i32* @x.51
  %35 = load i32, i32* @y.52
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %244, !dbg !3182

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.51
  %44 = load i32, i32* @y.52
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3183
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.109, i64 0, i64 0)) #13, !dbg !3184
  %53 = load i32, i32* @x.51
  %54 = load i32, i32* @y.52
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %61, !dbg !3185

61:                                               ; preds = %originalBBpart28
  %62 = load i32, i32* @x.51
  %63 = load i32, i32* @y.52
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %collatzVar = alloca i32
  %70 = load i32, i32* @x.51
  %71 = load i32, i32* @y.52
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %78

78:                                               ; preds = %originalBBpart212
  %79 = load i32, i32* @x.51
  %80 = load i32, i32* @y.52
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %78, %originalBB14alteredBB
  %87 = load i32, i32* @inVal0
  %88 = icmp sgt i32 %87, 1
  %89 = load i32, i32* @x.51
  %90 = load i32, i32* @y.52
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %88, label %114, label %97

97:                                               ; preds = %originalBBpart216
  %98 = load i32, i32* @x.51
  %99 = load i32, i32* @y.52
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %97, %originalBB18alteredBB
  store i32 3, i32* %collatzVar
  %106 = load i32, i32* @x.51
  %107 = load i32, i32* @y.52
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %114

114:                                              ; preds = %originalBBpart220, %originalBBpart216
  %115 = load i32, i32* @x.51
  %116 = load i32, i32* @y.52
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %114, %originalBB22alteredBB
  %123 = load i8**, i8*** @inVal1
  %124 = getelementptr inbounds i8*, i8** %123, i64 1
  %125 = load i8*, i8** %124
  %126 = add i32 0, -3
  %controle = call i32 @controle(i8* %125, i32 %126)
  store i32 %controle, i32* %collatzVar
  %127 = load i32, i32* @x.51
  %128 = load i32, i32* @y.52
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart233, label %originalBB22alteredBB

originalBBpart233:                                ; preds = %originalBB22
  br label %135

135:                                              ; preds = %201, %originalBBpart267, %originalBBpart233
  %136 = load i32, i32* @x.51
  %137 = load i32, i32* @y.52
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %135, %originalBB35alteredBB
  %144 = load i32, i32* %collatzVar
  %145 = icmp sgt i32 %144, 1
  %146 = load i32, i32* @x.51
  %147 = load i32, i32* @y.52
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br i1 %145, label %154, label %205

154:                                              ; preds = %originalBBpart237
  %155 = load i32, i32* %collatzVar
  %156 = srem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %161

158:                                              ; preds = %154
  %159 = load i32, i32* %collatzVar
  %160 = sdiv i32 %159, 2
  store i32 %160, i32* %collatzVar
  br label %181

161:                                              ; preds = %154
  %162 = load i32, i32* @x.51
  %163 = load i32, i32* @y.52
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %161, %originalBB39alteredBB
  %170 = load i32, i32* %collatzVar
  %171 = mul i32 %170, 3
  %172 = add i32 %171, 1
  store i32 %172, i32* %collatzVar
  %173 = load i32, i32* @x.51
  %174 = load i32, i32* @y.52
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart255, label %originalBB39alteredBB

originalBBpart255:                                ; preds = %originalBB39
  br label %181

181:                                              ; preds = %originalBBpart255, %158
  %182 = load i32, i32* @x.51
  %183 = load i32, i32* @y.52
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %181, %originalBB57alteredBB
  %190 = load i32, i32* %collatzVar
  %191 = sub i32 %52, %190
  %192 = icmp sgt i32 %191, -2
  %193 = load i32, i32* @x.51
  %194 = load i32, i32* @y.52
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart267, label %originalBB57alteredBB

originalBBpart267:                                ; preds = %originalBB57
  br i1 %192, label %201, label %135

201:                                              ; preds = %originalBBpart267
  %202 = load i32, i32* %collatzVar
  %203 = add i32 %52, %202
  %204 = icmp slt i32 %203, 2
  br i1 %204, label %225, label %135

205:                                              ; preds = %originalBBpart237
  %206 = load i32, i32* @x.51
  %207 = load i32, i32* @y.52
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %205, %originalBB69alteredBB
  %214 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3186
  %215 = call i32 @strcmp(i8* %214, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.110, i64 0, i64 0)) #13, !dbg !3187
  %216 = icmp eq i32 %215, 0, !dbg !3188
  %217 = load i32, i32* @x.51
  %218 = load i32, i32* @y.52
  %219 = sub i32 %217, 1
  %220 = mul i32 %217, %219
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %222, %223
  br i1 %224, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %225, !dbg !3189

225:                                              ; preds = %originalBBpart271, %201
  %226 = phi i1 [ true, %201 ], [ %216, %originalBBpart271 ]
  %227 = load i32, i32* @x.51
  %228 = load i32, i32* @y.52
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %225, %originalBB73alteredBB
  %235 = xor i1 %226, true, !dbg !3190
  store i1 %235, i1* %10, align 1, !dbg !3191
  %236 = load i32, i32* @x.51
  %237 = load i32, i32* @y.52
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart282, label %originalBB73alteredBB

originalBBpart282:                                ; preds = %originalBB73
  br label %244, !dbg !3191

244:                                              ; preds = %originalBBpart282, %originalBBpart24
  %245 = load i32, i32* @x.51
  %246 = load i32, i32* @y.52
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %244, %originalBB84alteredBB
  %253 = load i1, i1* %10, align 1, !dbg !3192
  %254 = load i32, i32* @x.51
  %255 = load i32, i32* @y.52
  %256 = sub i32 %254, 1
  %257 = mul i32 %254, %256
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %259, %260
  br i1 %261, label %originalBBpart286, label %originalBB84alteredBB

originalBBpart286:                                ; preds = %originalBB84
  ret i1 %253, !dbg !3192

originalBBalteredBB:                              ; preds = %originalBB, %1
  %262 = alloca i1, align 1
  %263 = alloca i32, align 4
  %264 = alloca [257 x i8], align 16
  store i32 %0, i32* %263, align 4
  call void @llvm.dbg.declare(metadata i32* %263, metadata !3193, metadata !DIExpression()), !dbg !3174
  call void @llvm.dbg.declare(metadata [257 x i8]* %264, metadata !3196, metadata !DIExpression()), !dbg !3176
  %265 = load i32, i32* %263, align 4, !dbg !3177
  %266 = getelementptr inbounds [257 x i8], [257 x i8]* %264, i64 0, i64 0, !dbg !3179
  %267 = call i32 @setlocale_null_r(i32 %265, i8* %266, i64 257), !dbg !3180
  %268 = icmp ne i32 %267, 0, !dbg !3180
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  store i1 false, i1* %10, align 1, !dbg !3182
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %269 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3183
  %270 = call i32 @strcmp(i8* %269, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.109, i64 0, i64 0)) #13, !dbg !3184
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %collatzVaralteredBB = alloca i32
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %78
  %271 = load i32, i32* @inVal0
  %272 = icmp sgt i32 %271, 1
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %97
  store i32 3, i32* %collatzVar
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %114
  %273 = load i8**, i8*** @inVal1
  %274 = getelementptr inbounds i8*, i8** %273, i64 1
  %275 = load i8*, i8** %274
  %_ = sub i32 0, -3
  %gen = mul i32 %_, -3
  %_23 = sub i32 0, -3
  %gen24 = mul i32 %_23, -3
  %_25 = sub i32 0, 0
  %gen26 = add i32 %_25, -3
  %_27 = sub i32 0, -3
  %gen28 = mul i32 %_27, -3
  %_29 = sub i32 0, -3
  %gen30 = mul i32 %_29, -3
  %_31 = shl i32 0, -3
  %276 = add i32 0, -3
  %controlealteredBB = call i32 @controle(i8* %275, i32 %276)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB22

originalBB35alteredBB:                            ; preds = %originalBB35, %135
  %277 = load i32, i32* %collatzVar
  %278 = icmp sgt i32 %277, 1
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %161
  %279 = load i32, i32* %collatzVar
  %_40 = sub i32 %279, 3
  %gen41 = mul i32 %_40, 3
  %280 = mul i32 %279, 3
  %_42 = shl i32 %280, 1
  %_43 = sub i32 0, %280
  %gen44 = add i32 %_43, 1
  %_45 = sub i32 %280, 1
  %gen46 = mul i32 %_45, 1
  %_47 = shl i32 %280, 1
  %_48 = sub i32 %280, 1
  %gen49 = mul i32 %_48, 1
  %_50 = sub i32 0, %280
  %gen51 = add i32 %_50, 1
  %_52 = sub i32 0, %280
  %gen53 = add i32 %_52, 1
  %281 = add i32 %280, 1
  store i32 %281, i32* %collatzVar
  br label %originalBB39

originalBB57alteredBB:                            ; preds = %originalBB57, %181
  %282 = load i32, i32* %collatzVar
  %_58 = sub i32 %52, %282
  %gen59 = mul i32 %_58, %282
  %_60 = sub i32 %52, %282
  %gen61 = mul i32 %_60, %282
  %_62 = sub i32 0, %52
  %gen63 = add i32 %_62, %282
  %_64 = sub i32 %52, %282
  %gen65 = mul i32 %_64, %282
  %283 = sub i32 %52, %282
  %284 = icmp sgt i32 %283, -2
  br label %originalBB57

originalBB69alteredBB:                            ; preds = %originalBB69, %205
  %285 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3186
  %286 = call i32 @strcmp(i8* %285, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.110, i64 0, i64 0)) #13, !dbg !3187
  %287 = icmp eq i32 %286, 0, !dbg !3188
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %225
  %_74 = sub i1 false, %226
  %gen75 = add i1 %_74, true
  %_76 = shl i1 %226, true
  %_77 = sub i1 false, %226
  %gen78 = add i1 %_77, true
  %_79 = sub i1 false, %226
  %gen80 = add i1 %_79, true
  %288 = xor i1 %226, true, !dbg !3190
  store i1 %288, i1* %10, align 1, !dbg !3191
  br label %originalBB73

originalBB84alteredBB:                            ; preds = %originalBB84, %244
  %289 = load i1, i1* %10, align 1, !dbg !3192
  br label %originalBB84
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @imaxtostr(i64, i8*) #4 !dbg !3197 {
  %3 = load i32, i32* @x.53
  %4 = load i32, i32* @y.54
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !3201, metadata !DIExpression()), !dbg !3202
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3203, metadata !DIExpression()), !dbg !3204
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3205, metadata !DIExpression()), !dbg !3206
  %14 = load i8*, i8** %12, align 8, !dbg !3207
  %15 = getelementptr inbounds i8, i8* %14, i64 20, !dbg !3208
  store i8* %15, i8** %13, align 8, !dbg !3206
  %16 = load i8*, i8** %13, align 8, !dbg !3209
  store i8 0, i8* %16, align 1, !dbg !3210
  %17 = load i64, i64* %11, align 8, !dbg !3211
  %18 = icmp slt i64 %17, 0, !dbg !3213
  %19 = load i32, i32* @x.53
  %20 = load i32, i32* @y.54
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %74, !dbg !3214

27:                                               ; preds = %originalBBpart2
  br label %28, !dbg !3215

28:                                               ; preds = %51, %27
  %29 = load i32, i32* @x.53
  %30 = load i32, i32* @y.54
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = load i64, i64* %11, align 8, !dbg !3217
  %38 = srem i64 %37, 10, !dbg !3218
  %39 = sub nsw i64 48, %38, !dbg !3219
  %40 = trunc i64 %39 to i8, !dbg !3220
  %41 = load i8*, i8** %13, align 8, !dbg !3221
  %42 = getelementptr inbounds i8, i8* %41, i32 -1, !dbg !3221
  store i8* %42, i8** %13, align 8, !dbg !3221
  store i8 %40, i8* %42, align 1, !dbg !3222
  %43 = load i32, i32* @x.53
  %44 = load i32, i32* @y.54
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBBpart211, label %originalBB1alteredBB

originalBBpart211:                                ; preds = %originalBB1
  br label %51, !dbg !3223

51:                                               ; preds = %originalBBpart211
  %52 = load i64, i64* %11, align 8, !dbg !3224
  %53 = sdiv i64 %52, 10, !dbg !3224
  store i64 %53, i64* %11, align 8, !dbg !3224
  %54 = icmp ne i64 %53, 0, !dbg !3225
  br i1 %54, label %28, label %55, !dbg !3223, !llvm.loop !3226

55:                                               ; preds = %51
  %56 = load i32, i32* @x.53
  %57 = load i32, i32* @y.54
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %55, %originalBB13alteredBB
  %64 = load i8*, i8** %13, align 8, !dbg !3228
  %65 = getelementptr inbounds i8, i8* %64, i32 -1, !dbg !3228
  store i8* %65, i8** %13, align 8, !dbg !3228
  store i8 45, i8* %65, align 1, !dbg !3229
  %66 = load i32, i32* @x.53
  %67 = load i32, i32* @y.54
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br label %103, !dbg !3230

74:                                               ; preds = %originalBBpart2
  br label %75, !dbg !3231

75:                                               ; preds = %originalBBpart234, %74
  %76 = load i64, i64* %11, align 8, !dbg !3233
  %77 = srem i64 %76, 10, !dbg !3234
  %78 = add nsw i64 48, %77, !dbg !3235
  %79 = trunc i64 %78 to i8, !dbg !3236
  %80 = load i8*, i8** %13, align 8, !dbg !3237
  %81 = getelementptr inbounds i8, i8* %80, i32 -1, !dbg !3237
  store i8* %81, i8** %13, align 8, !dbg !3237
  store i8 %79, i8* %81, align 1, !dbg !3238
  br label %82, !dbg !3239

82:                                               ; preds = %75
  %83 = load i32, i32* @x.53
  %84 = load i32, i32* @y.54
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %82, %originalBB17alteredBB
  %91 = load i64, i64* %11, align 8, !dbg !3240
  %92 = sdiv i64 %91, 10, !dbg !3240
  store i64 %92, i64* %11, align 8, !dbg !3240
  %93 = icmp ne i64 %92, 0, !dbg !3241
  %94 = load i32, i32* @x.53
  %95 = load i32, i32* @y.54
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart234, label %originalBB17alteredBB

originalBBpart234:                                ; preds = %originalBB17
  br i1 %93, label %75, label %102, !dbg !3239, !llvm.loop !3242

102:                                              ; preds = %originalBBpart234
  br label %103

103:                                              ; preds = %102, %originalBBpart215
  %104 = load i32, i32* @x.53
  %105 = load i32, i32* @y.54
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %103, %originalBB36alteredBB
  %112 = load i8*, i8** %13, align 8, !dbg !3244
  %113 = load i32, i32* @x.53
  %114 = load i32, i32* @y.54
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  ret i8* %112, !dbg !3245

originalBBalteredBB:                              ; preds = %originalBB, %2
  %121 = alloca i64, align 8
  %122 = alloca i8*, align 8
  %123 = alloca i8*, align 8
  store i64 %0, i64* %121, align 8
  call void @llvm.dbg.declare(metadata i64* %121, metadata !3246, metadata !DIExpression()), !dbg !3202
  store i8* %1, i8** %122, align 8
  call void @llvm.dbg.declare(metadata i8** %122, metadata !3249, metadata !DIExpression()), !dbg !3204
  call void @llvm.dbg.declare(metadata i8** %123, metadata !3250, metadata !DIExpression()), !dbg !3206
  %124 = load i8*, i8** %122, align 8, !dbg !3207
  %125 = getelementptr inbounds i8, i8* %124, i64 20, !dbg !3208
  store i8* %125, i8** %123, align 8, !dbg !3206
  %126 = load i8*, i8** %123, align 8, !dbg !3209
  store i8 0, i8* %126, align 1, !dbg !3210
  %127 = load i64, i64* %121, align 8, !dbg !3211
  %128 = icmp slt i64 %127, 0, !dbg !3213
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %129 = load i64, i64* %11, align 8, !dbg !3217
  %_ = sub i64 %129, 10
  %gen = mul i64 %_, 10
  %_2 = shl i64 %129, 10
  %_3 = shl i64 %129, 10
  %130 = srem i64 %129, 10, !dbg !3218
  %_4 = sub i64 0, 48
  %gen5 = add i64 %_4, %130
  %_6 = sub i64 0, 48
  %gen7 = add i64 %_6, %130
  %_8 = shl i64 48, %130
  %_9 = shl i64 48, %130
  %131 = sub nsw i64 48, %130, !dbg !3219
  %132 = trunc i64 %131 to i8, !dbg !3220
  %133 = load i8*, i8** %13, align 8, !dbg !3221
  %134 = getelementptr inbounds i8, i8* %133, i32 -1, !dbg !3221
  store i8* %134, i8** %13, align 8, !dbg !3221
  store i8 %132, i8* %134, align 1, !dbg !3222
  br label %originalBB1

originalBB13alteredBB:                            ; preds = %originalBB13, %55
  %135 = load i8*, i8** %13, align 8, !dbg !3228
  %136 = getelementptr inbounds i8, i8* %135, i32 -1, !dbg !3228
  store i8* %136, i8** %13, align 8, !dbg !3228
  store i8 45, i8* %136, align 1, !dbg !3229
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %82
  %137 = load i64, i64* %11, align 8, !dbg !3240
  %_18 = sub i64 %137, 10
  %gen19 = mul i64 %_18, 10
  %_20 = sub i64 0, %137
  %gen21 = add i64 %_20, 10
  %_22 = sub i64 0, %137
  %gen23 = add i64 %_22, 10
  %_24 = sub i64 0, %137
  %gen25 = add i64 %_24, 10
  %_26 = sub i64 0, %137
  %gen27 = add i64 %_26, 10
  %_28 = sub i64 %137, 10
  %gen29 = mul i64 %_28, 10
  %_30 = sub i64 0, %137
  %gen31 = add i64 %_30, 10
  %_32 = shl i64 %137, 10
  %138 = sdiv i64 %137, 10, !dbg !3240
  store i64 %138, i64* %11, align 8, !dbg !3240
  %139 = icmp ne i64 %138, 0, !dbg !3241
  br label %originalBB17

originalBB36alteredBB:                            ; preds = %originalBB36, %103
  %140 = load i8*, i8** %13, align 8, !dbg !3244
  br label %originalBB36
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !3251 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !3252, metadata !DIExpression()), !dbg !3253
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3254, metadata !DIExpression()), !dbg !3255
  call void @llvm.dbg.declare(metadata i8** %4, metadata !3256, metadata !DIExpression()), !dbg !3257
  %5 = load i8*, i8** %2, align 8, !dbg !3258
  %6 = icmp eq i8* %5, null, !dbg !3260
  br i1 %6, label %7, label %26, !dbg !3261

7:                                                ; preds = %1
  %8 = load i32, i32* @x.55
  %9 = load i32, i32* @y.56
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %7, %originalBBalteredBB
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3262
  %17 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.115, i64 0, i64 0), %struct._IO_FILE* %16), !dbg !3264
  call void @abort() #12, !dbg !3265
  %18 = load i32, i32* @x.55
  %19 = load i32, i32* @y.56
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !3265

26:                                               ; preds = %1
  %27 = load i32, i32* @x.55
  %28 = load i32, i32* @y.56
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i8*, i8** %2, align 8, !dbg !3266
  %36 = call i8* @strrchr(i8* %35, i32 47) #13, !dbg !3267
  store i8* %36, i8** %3, align 8, !dbg !3268
  %37 = load i8*, i8** %3, align 8, !dbg !3269
  %38 = icmp ne i8* %37, null, !dbg !3270
  %39 = load i32, i32* @x.55
  %40 = load i32, i32* @y.56
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %66, !dbg !3269

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.55
  %49 = load i32, i32* @y.56
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %3, align 8, !dbg !3271
  %57 = getelementptr inbounds i8, i8* %56, i64 1, !dbg !3272
  %58 = load i32, i32* @x.55
  %59 = load i32, i32* @y.56
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %84, !dbg !3269

66:                                               ; preds = %originalBBpart24
  %67 = load i32, i32* @x.55
  %68 = load i32, i32* @y.56
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load i8*, i8** %2, align 8, !dbg !3273
  %76 = load i32, i32* @x.55
  %77 = load i32, i32* @y.56
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %84, !dbg !3269

84:                                               ; preds = %originalBBpart212, %originalBBpart28
  %85 = phi i8* [ %57, %originalBBpart28 ], [ %75, %originalBBpart212 ], !dbg !3269
  %86 = load i32, i32* @x.55
  %87 = load i32, i32* @y.56
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %84, %originalBB14alteredBB
  store i8* %85, i8** %4, align 8, !dbg !3274
  %94 = load i8*, i8** %4, align 8, !dbg !3275
  %95 = load i8*, i8** %2, align 8, !dbg !3277
  %96 = ptrtoint i8* %94 to i64, !dbg !3278
  %97 = ptrtoint i8* %95 to i64, !dbg !3278
  %98 = sub i64 %96, %97, !dbg !3278
  %99 = icmp sge i64 %98, 7, !dbg !3279
  %100 = load i32, i32* @x.55
  %101 = load i32, i32* @y.56
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart225, label %originalBB14alteredBB

originalBBpart225:                                ; preds = %originalBB14
  br i1 %99, label %108, label %171, !dbg !3280

108:                                              ; preds = %originalBBpart225
  %109 = load i8*, i8** %4, align 8, !dbg !3281
  %110 = getelementptr inbounds i8, i8* %109, i64 -7, !dbg !3282
  %111 = call i32 @strncmp(i8* %110, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.116, i64 0, i64 0), i64 7) #13, !dbg !3283
  %112 = icmp eq i32 %111, 0, !dbg !3284
  br i1 %112, label %113, label %171, !dbg !3285

113:                                              ; preds = %108
  %114 = load i32, i32* @x.55
  %115 = load i32, i32* @y.56
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %113, %originalBB27alteredBB
  %122 = load i8*, i8** %4, align 8, !dbg !3286
  store i8* %122, i8** %2, align 8, !dbg !3288
  %123 = load i8*, i8** %4, align 8, !dbg !3289
  %124 = call i32 @strncmp(i8* %123, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.117, i64 0, i64 0), i64 3) #13, !dbg !3291
  %125 = icmp eq i32 %124, 0, !dbg !3292
  %126 = load i32, i32* @x.55
  %127 = load i32, i32* @y.56
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %125, label %134, label %154, !dbg !3293

134:                                              ; preds = %originalBBpart229
  %135 = load i32, i32* @x.55
  %136 = load i32, i32* @y.56
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %134, %originalBB31alteredBB
  %143 = load i8*, i8** %4, align 8, !dbg !3294
  %144 = getelementptr inbounds i8, i8* %143, i64 3, !dbg !3296
  store i8* %144, i8** %2, align 8, !dbg !3297
  %145 = load i8*, i8** %2, align 8, !dbg !3298
  store i8* %145, i8** @program_invocation_short_name, align 8, !dbg !3299
  %146 = load i32, i32* @x.55
  %147 = load i32, i32* @y.56
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br label %154, !dbg !3300

154:                                              ; preds = %originalBBpart233, %originalBBpart229
  %155 = load i32, i32* @x.55
  %156 = load i32, i32* @y.56
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %154, %originalBB35alteredBB
  %163 = load i32, i32* @x.55
  %164 = load i32, i32* @y.56
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %171, !dbg !3301

171:                                              ; preds = %originalBBpart237, %108, %originalBBpart225
  %172 = load i32, i32* @x.55
  %173 = load i32, i32* @y.56
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %171, %originalBB39alteredBB
  %180 = load i8*, i8** %2, align 8, !dbg !3302
  store i8* %180, i8** @program_name, align 8, !dbg !3303
  %181 = load i8*, i8** %2, align 8, !dbg !3304
  store i8* %181, i8** @program_invocation_name, align 8, !dbg !3305
  %182 = load i32, i32* @x.55
  %183 = load i32, i32* @y.56
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  ret void, !dbg !3306

originalBBalteredBB:                              ; preds = %originalBB, %7
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3262
  %191 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.115, i64 0, i64 0), %struct._IO_FILE* %190), !dbg !3264
  call void @abort() #12, !dbg !3265
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %192 = load i8*, i8** %2, align 8, !dbg !3266
  %193 = call i8* @strrchr(i8* %192, i32 47) #13, !dbg !3267
  store i8* %193, i8** %3, align 8, !dbg !3268
  %194 = load i8*, i8** %3, align 8, !dbg !3269
  %195 = icmp ne i8* %194, null, !dbg !3270
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %196 = load i8*, i8** %3, align 8, !dbg !3271
  %197 = getelementptr inbounds i8, i8* %196, i64 1, !dbg !3272
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %198 = load i8*, i8** %2, align 8, !dbg !3273
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %84
  store i8* %85, i8** %4, align 8, !dbg !3274
  %199 = load i8*, i8** %4, align 8, !dbg !3275
  %200 = load i8*, i8** %2, align 8, !dbg !3277
  %201 = ptrtoint i8* %199 to i64, !dbg !3278
  %202 = ptrtoint i8* %200 to i64, !dbg !3278
  %_ = sub i64 0, %201
  %gen = add i64 %_, %202
  %_15 = shl i64 %201, %202
  %_16 = sub i64 %201, %202
  %gen17 = mul i64 %_16, %202
  %_18 = sub i64 0, %201
  %gen19 = add i64 %_18, %202
  %_20 = sub i64 0, %201
  %gen21 = add i64 %_20, %202
  %_22 = sub i64 %201, %202
  %gen23 = mul i64 %_22, %202
  %203 = sub i64 %201, %202, !dbg !3278
  %204 = icmp sge i64 %203, 7, !dbg !3279
  br label %originalBB14

originalBB27alteredBB:                            ; preds = %originalBB27, %113
  %205 = load i8*, i8** %4, align 8, !dbg !3286
  store i8* %205, i8** %2, align 8, !dbg !3288
  %206 = load i8*, i8** %4, align 8, !dbg !3289
  %207 = call i32 @strncmp(i8* %206, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.117, i64 0, i64 0), i64 3) #13, !dbg !3291
  %208 = icmp eq i32 %207, 0, !dbg !3292
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %134
  %209 = load i8*, i8** %4, align 8, !dbg !3294
  %210 = getelementptr inbounds i8, i8* %209, i64 3, !dbg !3296
  store i8* %210, i8** %2, align 8, !dbg !3297
  %211 = load i8*, i8** %2, align 8, !dbg !3298
  store i8* %211, i8** @program_invocation_short_name, align 8, !dbg !3299
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %154
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %171
  %212 = load i8*, i8** %2, align 8, !dbg !3302
  store i8* %212, i8** @program_name, align 8, !dbg !3303
  %213 = load i8*, i8** %2, align 8, !dbg !3304
  store i8* %213, i8** @program_invocation_name, align 8, !dbg !3305
  br label %originalBB39
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !3307 {
  %4 = alloca %struct.quoting_options*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %4, metadata !3311, metadata !DIExpression()), !dbg !3312
  store i8 %1, i8* %5, align 1
  call void @llvm.dbg.declare(metadata i8* %5, metadata !3313, metadata !DIExpression()), !dbg !3314
  store i32 %2, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !3315, metadata !DIExpression()), !dbg !3316
  call void @llvm.dbg.declare(metadata i8* %7, metadata !3317, metadata !DIExpression()), !dbg !3318
  %11 = load i8, i8* %5, align 1, !dbg !3319
  store i8 %11, i8* %7, align 1, !dbg !3318
  call void @llvm.dbg.declare(metadata i32** %8, metadata !3320, metadata !DIExpression()), !dbg !3322
  %12 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !3323
  %13 = icmp ne %struct.quoting_options* %12, null, !dbg !3323
  br i1 %13, label %14, label %32, !dbg !3323

14:                                               ; preds = %3
  %15 = load i32, i32* @x.57
  %16 = load i32, i32* @y.58
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %14, %originalBBalteredBB
  %23 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !3324
  %24 = load i32, i32* @x.57
  %25 = load i32, i32* @y.58
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %33, !dbg !3323

32:                                               ; preds = %3
  br label %33, !dbg !3323

33:                                               ; preds = %32, %originalBBpart2
  %34 = phi %struct.quoting_options* [ %23, %originalBBpart2 ], [ @default_quoting_options, %32 ], !dbg !3323
  %35 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %34, i32 0, i32 2, !dbg !3325
  %36 = getelementptr inbounds [8 x i32], [8 x i32]* %35, i64 0, i64 0, !dbg !3326
  %37 = load i8, i8* %7, align 1, !dbg !3327
  %38 = zext i8 %37 to i64, !dbg !3327
  %39 = udiv i64 %38, 32, !dbg !3328
  %40 = getelementptr inbounds i32, i32* %36, i64 %39, !dbg !3329
  store i32* %40, i32** %8, align 8, !dbg !3322
  call void @llvm.dbg.declare(metadata i32* %9, metadata !3330, metadata !DIExpression()), !dbg !3331
  %41 = load i8, i8* %7, align 1, !dbg !3332
  %42 = zext i8 %41 to i64, !dbg !3332
  %43 = urem i64 %42, 32, !dbg !3333
  %44 = trunc i64 %43 to i32, !dbg !3332
  store i32 %44, i32* %9, align 4, !dbg !3331
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3334, metadata !DIExpression()), !dbg !3335
  %45 = load i32*, i32** %8, align 8, !dbg !3336
  %46 = load i32, i32* %45, align 4, !dbg !3337
  %47 = load i32, i32* %9, align 4, !dbg !3338
  %48 = lshr i32 %46, %47, !dbg !3339
  %49 = and i32 %48, 1, !dbg !3340
  store i32 %49, i32* %10, align 4, !dbg !3335
  %50 = load i32, i32* %6, align 4, !dbg !3341
  %51 = and i32 %50, 1, !dbg !3342
  %52 = load i32, i32* %10, align 4, !dbg !3343
  %53 = xor i32 %51, %52, !dbg !3344
  %54 = load i32, i32* %9, align 4, !dbg !3345
  %55 = shl i32 %53, %54, !dbg !3346
  %56 = load i32*, i32** %8, align 8, !dbg !3347
  %57 = load i32, i32* %56, align 4, !dbg !3348
  %58 = xor i32 %57, %55, !dbg !3348
  store i32 %58, i32* %56, align 4, !dbg !3348
  %59 = load i32, i32* %10, align 4, !dbg !3349
  ret i32 %59, !dbg !3350

originalBBalteredBB:                              ; preds = %originalBB, %14
  %60 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !3324
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !3351 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !3354, metadata !DIExpression()), !dbg !3355
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !3356, metadata !DIExpression()), !dbg !3357
  store i8 %2, i8* %6, align 1
  call void @llvm.dbg.declare(metadata i8* %6, metadata !3358, metadata !DIExpression()), !dbg !3359
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %7, metadata !3360, metadata !DIExpression()), !dbg !3361
  %8 = bitcast %struct.quoting_options* %7 to i8*, !dbg !3362
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !3362
  %9 = load i8, i8* %6, align 1, !dbg !3363
  %10 = call i32 @set_char_quoting(%struct.quoting_options* %7, i8 signext %9, i32 1), !dbg !3364
  %11 = load i8*, i8** %4, align 8, !dbg !3365
  %12 = load i64, i64* %5, align 8, !dbg !3366
  %13 = call i8* @quotearg_n_options(i32 0, i8* %11, i64 %12, %struct.quoting_options* %7), !dbg !3367
  ret i8* %13, !dbg !3368
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !3369 {
  %5 = load i32, i32* @x.61
  %6 = load i32, i32* @y.62
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3374, metadata !DIExpression()), !dbg !3375
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3376, metadata !DIExpression()), !dbg !3377
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !3378, metadata !DIExpression()), !dbg !3379
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !3380, metadata !DIExpression()), !dbg !3381
  call void @llvm.dbg.declare(metadata i32* %17, metadata !3382, metadata !DIExpression()), !dbg !3383
  %25 = call i32* @__errno_location() #15, !dbg !3384
  %26 = load i32, i32* %25, align 4, !dbg !3384
  store i32 %26, i32* %17, align 4, !dbg !3383
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !3385, metadata !DIExpression()), !dbg !3386
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !3387
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !3386
  %28 = load i32, i32* %13, align 4, !dbg !3388
  %29 = icmp slt i32 %28, 0, !dbg !3390
  %30 = load i32, i32* @x.61
  %31 = load i32, i32* @y.62
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %39, !dbg !3391

38:                                               ; preds = %originalBBpart2
  call void @abort() #12, !dbg !3392
  unreachable, !dbg !3392

39:                                               ; preds = %originalBBpart2
  %40 = load i32, i32* @nslots, align 4, !dbg !3393
  %41 = load i32, i32* %13, align 4, !dbg !3395
  %42 = icmp sle i32 %40, %41, !dbg !3396
  br i1 %42, label %43, label %213, !dbg !3397

43:                                               ; preds = %39
  call void @llvm.dbg.declare(metadata i8* %19, metadata !3398, metadata !DIExpression()), !dbg !3400
  %44 = load i32, i32* @x.61
  %45 = load i32, i32* @y.62
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %43, %originalBB1alteredBB
  %52 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3401
  %53 = icmp eq %struct.slotvec* %52, @slotvec0, !dbg !3402
  %54 = zext i1 %53 to i8, !dbg !3400
  store i8 %54, i8* %19, align 1, !dbg !3400
  call void @llvm.dbg.declare(metadata i32* %20, metadata !3403, metadata !DIExpression()), !dbg !3404
  store i32 2147483646, i32* %20, align 4, !dbg !3404
  %55 = load i32, i32* %20, align 4, !dbg !3405
  %56 = load i32, i32* %13, align 4, !dbg !3407
  %57 = icmp slt i32 %55, %56, !dbg !3408
  %58 = load i32, i32* @x.61
  %59 = load i32, i32* @y.62
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %57, label %66, label %83, !dbg !3409

66:                                               ; preds = %originalBBpart24
  %67 = load i32, i32* @x.61
  %68 = load i32, i32* @y.62
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %66, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3410
  %75 = load i32, i32* @x.61
  %76 = load i32, i32* @y.62
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3410

83:                                               ; preds = %originalBBpart24
  %84 = load i32, i32* @x.61
  %85 = load i32, i32* @y.62
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %83, %originalBB10alteredBB
  %92 = load i8, i8* %19, align 1, !dbg !3411
  %93 = trunc i8 %92 to i1, !dbg !3411
  %94 = load i32, i32* @x.61
  %95 = load i32, i32* @y.62
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %93, label %102, label %119, !dbg !3411

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.61
  %104 = load i32, i32* @y.62
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.61
  %112 = load i32, i32* @y.62
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %137, !dbg !3411

119:                                              ; preds = %originalBBpart212
  %120 = load i32, i32* @x.61
  %121 = load i32, i32* @y.62
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3412
  %129 = load i32, i32* @x.61
  %130 = load i32, i32* @y.62
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %137, !dbg !3411

137:                                              ; preds = %originalBBpart220, %originalBBpart216
  %138 = phi %struct.slotvec* [ null, %originalBBpart216 ], [ %128, %originalBBpart220 ], !dbg !3411
  %139 = load i32, i32* @x.61
  %140 = load i32, i32* @y.62
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %137, %originalBB22alteredBB
  %147 = bitcast %struct.slotvec* %138 to i8*, !dbg !3411
  %148 = load i32, i32* %13, align 4, !dbg !3413
  %149 = add nsw i32 %148, 1, !dbg !3414
  %150 = sext i32 %149 to i64, !dbg !3415
  %151 = mul i64 %150, 16, !dbg !3416
  %152 = call i8* @xrealloc(i8* %147, i64 %151), !dbg !3417
  %153 = bitcast i8* %152 to %struct.slotvec*, !dbg !3417
  store %struct.slotvec* %153, %struct.slotvec** %18, align 8, !dbg !3418
  store %struct.slotvec* %153, %struct.slotvec** @slotvec, align 8, !dbg !3419
  %154 = load i8, i8* %19, align 1, !dbg !3420
  %155 = trunc i8 %154 to i1, !dbg !3420
  %156 = load i32, i32* @x.61
  %157 = load i32, i32* @y.62
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart229, label %originalBB22alteredBB

originalBBpart229:                                ; preds = %originalBB22
  br i1 %155, label %164, label %183, !dbg !3422

164:                                              ; preds = %originalBBpart229
  %165 = load i32, i32* @x.61
  %166 = load i32, i32* @y.62
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %164, %originalBB31alteredBB
  %173 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3423
  %174 = bitcast %struct.slotvec* %173 to i8*, !dbg !3424
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %174, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !3424
  %175 = load i32, i32* @x.61
  %176 = load i32, i32* @y.62
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br label %183, !dbg !3425

183:                                              ; preds = %originalBBpart233, %originalBBpart229
  %184 = load i32, i32* @x.61
  %185 = load i32, i32* @y.62
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %183, %originalBB35alteredBB
  %192 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3426
  %193 = load i32, i32* @nslots, align 4, !dbg !3427
  %194 = sext i32 %193 to i64, !dbg !3428
  %195 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %192, i64 %194, !dbg !3428
  %196 = bitcast %struct.slotvec* %195 to i8*, !dbg !3429
  %197 = load i32, i32* %13, align 4, !dbg !3430
  %198 = add nsw i32 %197, 1, !dbg !3431
  %199 = load i32, i32* @nslots, align 4, !dbg !3432
  %200 = sub nsw i32 %198, %199, !dbg !3433
  %201 = sext i32 %200 to i64, !dbg !3434
  %202 = mul i64 %201, 16, !dbg !3435
  call void @llvm.memset.p0i8.i64(i8* align 8 %196, i8 0, i64 %202, i1 false), !dbg !3429
  %203 = load i32, i32* %13, align 4, !dbg !3436
  %204 = add nsw i32 %203, 1, !dbg !3437
  store i32 %204, i32* @nslots, align 4, !dbg !3438
  %205 = load i32, i32* @x.61
  %206 = load i32, i32* @y.62
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart272, label %originalBB35alteredBB

originalBBpart272:                                ; preds = %originalBB35
  br label %213, !dbg !3439

213:                                              ; preds = %originalBBpart272, %39
  call void @llvm.dbg.declare(metadata i64* %21, metadata !3440, metadata !DIExpression()), !dbg !3442
  %214 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3443
  %215 = load i32, i32* %13, align 4, !dbg !3444
  %216 = sext i32 %215 to i64, !dbg !3443
  %217 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %214, i64 %216, !dbg !3443
  %218 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %217, i32 0, i32 0, !dbg !3445
  %219 = load i64, i64* %218, align 8, !dbg !3445
  store i64 %219, i64* %21, align 8, !dbg !3442
  call void @llvm.dbg.declare(metadata i8** %22, metadata !3446, metadata !DIExpression()), !dbg !3447
  %220 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3448
  %221 = load i32, i32* %13, align 4, !dbg !3449
  %222 = sext i32 %221 to i64, !dbg !3448
  %223 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %220, i64 %222, !dbg !3448
  %224 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %223, i32 0, i32 1, !dbg !3450
  %225 = load i8*, i8** %224, align 8, !dbg !3450
  store i8* %225, i8** %22, align 8, !dbg !3447
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3451, metadata !DIExpression()), !dbg !3452
  %226 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3453
  %227 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %226, i32 0, i32 1, !dbg !3454
  %228 = load i32, i32* %227, align 4, !dbg !3454
  %229 = or i32 %228, 1, !dbg !3455
  store i32 %229, i32* %23, align 4, !dbg !3452
  call void @llvm.dbg.declare(metadata i64* %24, metadata !3456, metadata !DIExpression()), !dbg !3457
  %230 = load i8*, i8** %22, align 8, !dbg !3458
  %231 = load i64, i64* %21, align 8, !dbg !3459
  %232 = load i8*, i8** %14, align 8, !dbg !3460
  %233 = load i64, i64* %15, align 8, !dbg !3461
  %234 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3462
  %235 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %234, i32 0, i32 0, !dbg !3463
  %236 = load i32, i32* %235, align 8, !dbg !3463
  %237 = load i32, i32* %23, align 4, !dbg !3464
  %238 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3465
  %239 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %238, i32 0, i32 2, !dbg !3466
  %240 = getelementptr inbounds [8 x i32], [8 x i32]* %239, i64 0, i64 0, !dbg !3465
  %241 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3467
  %242 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %241, i32 0, i32 3, !dbg !3468
  %243 = load i8*, i8** %242, align 8, !dbg !3468
  %244 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3469
  %245 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %244, i32 0, i32 4, !dbg !3470
  %246 = load i8*, i8** %245, align 8, !dbg !3470
  %247 = call i64 @quotearg_buffer_restyled(i8* %230, i64 %231, i8* %232, i64 %233, i32 %236, i32 %237, i32* %240, i8* %243, i8* %246), !dbg !3471
  store i64 %247, i64* %24, align 8, !dbg !3457
  %248 = load i64, i64* %21, align 8, !dbg !3472
  %249 = load i64, i64* %24, align 8, !dbg !3474
  %250 = icmp ule i64 %248, %249, !dbg !3475
  br i1 %250, label %251, label %305, !dbg !3476

251:                                              ; preds = %213
  %252 = load i64, i64* %24, align 8, !dbg !3477
  %253 = add i64 %252, 1, !dbg !3479
  store i64 %253, i64* %21, align 8, !dbg !3480
  %254 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3481
  %255 = load i32, i32* %13, align 4, !dbg !3482
  %256 = sext i32 %255 to i64, !dbg !3481
  %257 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %254, i64 %256, !dbg !3481
  %258 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %257, i32 0, i32 0, !dbg !3483
  store i64 %253, i64* %258, align 8, !dbg !3484
  %259 = load i8*, i8** %22, align 8, !dbg !3485
  %260 = icmp ne i8* %259, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !3487
  br i1 %260, label %261, label %263, !dbg !3488

261:                                              ; preds = %251
  %262 = load i8*, i8** %22, align 8, !dbg !3489
  call void @free(i8* %262) #10, !dbg !3490
  br label %263, !dbg !3490

263:                                              ; preds = %261, %251
  %264 = load i32, i32* @x.61
  %265 = load i32, i32* @y.62
  %266 = sub i32 %264, 1
  %267 = mul i32 %264, %266
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %269, %270
  br i1 %271, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %263, %originalBB74alteredBB
  %272 = load i64, i64* %21, align 8, !dbg !3491
  %273 = call noalias i8* @xcharalloc(i64 %272), !dbg !3492
  store i8* %273, i8** %22, align 8, !dbg !3493
  %274 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3494
  %275 = load i32, i32* %13, align 4, !dbg !3495
  %276 = sext i32 %275 to i64, !dbg !3494
  %277 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %274, i64 %276, !dbg !3494
  %278 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %277, i32 0, i32 1, !dbg !3496
  store i8* %273, i8** %278, align 8, !dbg !3497
  %279 = load i8*, i8** %22, align 8, !dbg !3498
  %280 = load i64, i64* %21, align 8, !dbg !3499
  %281 = load i8*, i8** %14, align 8, !dbg !3500
  %282 = load i64, i64* %15, align 8, !dbg !3501
  %283 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3502
  %284 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %283, i32 0, i32 0, !dbg !3503
  %285 = load i32, i32* %284, align 8, !dbg !3503
  %286 = load i32, i32* %23, align 4, !dbg !3504
  %287 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3505
  %288 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %287, i32 0, i32 2, !dbg !3506
  %289 = getelementptr inbounds [8 x i32], [8 x i32]* %288, i64 0, i64 0, !dbg !3505
  %290 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3507
  %291 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %290, i32 0, i32 3, !dbg !3508
  %292 = load i8*, i8** %291, align 8, !dbg !3508
  %293 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3509
  %294 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %293, i32 0, i32 4, !dbg !3510
  %295 = load i8*, i8** %294, align 8, !dbg !3510
  %296 = call i64 @quotearg_buffer_restyled(i8* %279, i64 %280, i8* %281, i64 %282, i32 %285, i32 %286, i32* %289, i8* %292, i8* %295), !dbg !3511
  %297 = load i32, i32* @x.61
  %298 = load i32, i32* @y.62
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %305, !dbg !3512

305:                                              ; preds = %originalBBpart276, %213
  %306 = load i32, i32* @x.61
  %307 = load i32, i32* @y.62
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %305, %originalBB78alteredBB
  %314 = load i32, i32* %17, align 4, !dbg !3513
  %315 = call i32* @__errno_location() #15, !dbg !3514
  store i32 %314, i32* %315, align 4, !dbg !3515
  %316 = load i8*, i8** %22, align 8, !dbg !3516
  %317 = load i32, i32* @x.61
  %318 = load i32, i32* @y.62
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  ret i8* %316, !dbg !3517

originalBBalteredBB:                              ; preds = %originalBB, %4
  %325 = alloca i32, align 4
  %326 = alloca i8*, align 8
  %327 = alloca i64, align 8
  %328 = alloca %struct.quoting_options*, align 8
  %329 = alloca i32, align 4
  %330 = alloca %struct.slotvec*, align 8
  %331 = alloca i8, align 1
  %332 = alloca i32, align 4
  %333 = alloca i64, align 8
  %334 = alloca i8*, align 8
  %335 = alloca i32, align 4
  %336 = alloca i64, align 8
  store i32 %0, i32* %325, align 4
  call void @llvm.dbg.declare(metadata i32* %325, metadata !3518, metadata !DIExpression()), !dbg !3375
  store i8* %1, i8** %326, align 8
  call void @llvm.dbg.declare(metadata i8** %326, metadata !3554, metadata !DIExpression()), !dbg !3377
  store i64 %2, i64* %327, align 8
  call void @llvm.dbg.declare(metadata i64* %327, metadata !3555, metadata !DIExpression()), !dbg !3379
  store %struct.quoting_options* %3, %struct.quoting_options** %328, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %328, metadata !3556, metadata !DIExpression()), !dbg !3381
  call void @llvm.dbg.declare(metadata i32* %329, metadata !3557, metadata !DIExpression()), !dbg !3383
  %337 = call i32* @__errno_location() #15, !dbg !3384
  %338 = load i32, i32* %337, align 4, !dbg !3384
  store i32 %338, i32* %329, align 4, !dbg !3383
  call void @llvm.dbg.declare(metadata %struct.slotvec** %330, metadata !3558, metadata !DIExpression()), !dbg !3386
  %339 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !3387
  store %struct.slotvec* %339, %struct.slotvec** %330, align 8, !dbg !3386
  %340 = load i32, i32* %325, align 4, !dbg !3388
  %341 = icmp slt i32 %340, 0, !dbg !3390
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %43
  %342 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3401
  %343 = icmp eq %struct.slotvec* %342, @slotvec0, !dbg !3402
  %344 = zext i1 %343 to i8, !dbg !3400
  store i8 %344, i8* %19, align 1, !dbg !3400
  call void @llvm.dbg.declare(metadata !4, metadata !3559, metadata !DIExpression()), !dbg !3404
  store i32 2147483646, i32* %20, align 4, !dbg !3404
  %345 = load i32, i32* %20, align 4, !dbg !3405
  %346 = load i32, i32* %13, align 4, !dbg !3407
  %347 = icmp slt i32 %345, %346, !dbg !3408
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %66
  call void @xalloc_die() #14, !dbg !3410
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %83
  %348 = load i8, i8* %19, align 1, !dbg !3411
  %349 = trunc i8 %348 to i1, !dbg !3411
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %350 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3412
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %137
  %351 = bitcast %struct.slotvec* %138 to i8*, !dbg !3411
  %352 = load i32, i32* %13, align 4, !dbg !3413
  %_ = sub i32 %352, 1
  %gen = mul i32 %_, 1
  %_23 = sub i32 0, %352
  %gen24 = add i32 %_23, 1
  %_25 = shl i32 %352, 1
  %353 = add nsw i32 %352, 1, !dbg !3414
  %354 = sext i32 %353 to i64, !dbg !3415
  %_26 = sub i64 0, %354
  %gen27 = add i64 %_26, 16
  %355 = mul i64 %354, 16, !dbg !3416
  %356 = call i8* @xrealloc(i8* %351, i64 %355), !dbg !3417
  %357 = bitcast i8* %356 to %struct.slotvec*, !dbg !3417
  store %struct.slotvec* %357, %struct.slotvec** %18, align 8, !dbg !3418
  store %struct.slotvec* %357, %struct.slotvec** @slotvec, align 8, !dbg !3419
  %358 = load i8, i8* %19, align 1, !dbg !3420
  %359 = trunc i8 %358 to i1, !dbg !3420
  br label %originalBB22

originalBB31alteredBB:                            ; preds = %originalBB31, %164
  %360 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3423
  %361 = bitcast %struct.slotvec* %360 to i8*, !dbg !3424
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %361, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !3424
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %183
  %362 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3426
  %363 = load i32, i32* @nslots, align 4, !dbg !3427
  %364 = sext i32 %363 to i64, !dbg !3428
  %365 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %362, i64 %364, !dbg !3428
  %366 = bitcast %struct.slotvec* %365 to i8*, !dbg !3429
  %367 = load i32, i32* %13, align 4, !dbg !3430
  %_36 = sub i32 0, %367
  %gen37 = add i32 %_36, 1
  %_38 = shl i32 %367, 1
  %_39 = sub i32 0, %367
  %gen40 = add i32 %_39, 1
  %368 = add nsw i32 %367, 1, !dbg !3431
  %369 = load i32, i32* @nslots, align 4, !dbg !3432
  %_41 = sub i32 0, %368
  %gen42 = add i32 %_41, %369
  %_43 = sub i32 %368, %369
  %gen44 = mul i32 %_43, %369
  %_45 = shl i32 %368, %369
  %_46 = sub i32 %368, %369
  %gen47 = mul i32 %_46, %369
  %_48 = shl i32 %368, %369
  %370 = sub nsw i32 %368, %369, !dbg !3433
  %371 = sext i32 %370 to i64, !dbg !3434
  %_49 = sub i64 0, %371
  %gen50 = add i64 %_49, 16
  %_51 = sub i64 0, %371
  %gen52 = add i64 %_51, 16
  %_53 = sub i64 %371, 16
  %gen54 = mul i64 %_53, 16
  %372 = mul i64 %371, 16, !dbg !3435
  call void @llvm.memset.p0i8.i64(i8* align 8 %366, i8 0, i64 %372, i1 false), !dbg !3429
  %373 = load i32, i32* %13, align 4, !dbg !3436
  %_55 = sub i32 0, %373
  %gen56 = add i32 %_55, 1
  %_57 = sub i32 0, %373
  %gen58 = add i32 %_57, 1
  %_59 = sub i32 0, %373
  %gen60 = add i32 %_59, 1
  %_61 = sub i32 0, %373
  %gen62 = add i32 %_61, 1
  %_63 = shl i32 %373, 1
  %_64 = shl i32 %373, 1
  %_65 = sub i32 0, %373
  %gen66 = add i32 %_65, 1
  %_67 = sub i32 0, %373
  %gen68 = add i32 %_67, 1
  %_69 = sub i32 0, %373
  %gen70 = add i32 %_69, 1
  %374 = add nsw i32 %373, 1, !dbg !3437
  store i32 %374, i32* @nslots, align 4, !dbg !3438
  br label %originalBB35

originalBB74alteredBB:                            ; preds = %originalBB74, %263
  %375 = load i64, i64* %21, align 8, !dbg !3491
  %376 = call noalias i8* @xcharalloc(i64 %375), !dbg !3492
  store i8* %376, i8** %22, align 8, !dbg !3493
  %377 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !3494
  %378 = load i32, i32* %13, align 4, !dbg !3495
  %379 = sext i32 %378 to i64, !dbg !3494
  %380 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %377, i64 %379, !dbg !3494
  %381 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %380, i32 0, i32 1, !dbg !3496
  store i8* %376, i8** %381, align 8, !dbg !3497
  %382 = load i8*, i8** %22, align 8, !dbg !3498
  %383 = load i64, i64* %21, align 8, !dbg !3499
  %384 = load i8*, i8** %14, align 8, !dbg !3500
  %385 = load i64, i64* %15, align 8, !dbg !3501
  %386 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3502
  %387 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %386, i32 0, i32 0, !dbg !3503
  %388 = load i32, i32* %387, align 8, !dbg !3503
  %389 = load i32, i32* %23, align 4, !dbg !3504
  %390 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3505
  %391 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %390, i32 0, i32 2, !dbg !3506
  %392 = getelementptr inbounds [8 x i32], [8 x i32]* %391, i64 0, i64 0, !dbg !3505
  %393 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3507
  %394 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %393, i32 0, i32 3, !dbg !3508
  %395 = load i8*, i8** %394, align 8, !dbg !3508
  %396 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !3509
  %397 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %396, i32 0, i32 4, !dbg !3510
  %398 = load i8*, i8** %397, align 8, !dbg !3510
  %399 = call i64 @quotearg_buffer_restyled(i8* %382, i64 %383, i8* %384, i64 %385, i32 %388, i32 %389, i32* %392, i8* %395, i8* %398), !dbg !3511
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %305
  %400 = load i32, i32* %17, align 4, !dbg !3513
  %401 = call i32* @__errno_location() #15, !dbg !3514
  store i32 %400, i32* %401, align 4, !dbg !3515
  %402 = load i8*, i8** %22, align 8, !dbg !3516
  br label %originalBB78
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !3597 {
  %10 = load i32, i32* @x.63
  %11 = load i32, i32* @y.64
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !3602, metadata !DIExpression()), !dbg !3603
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !3604, metadata !DIExpression()), !dbg !3605
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !3606, metadata !DIExpression()), !dbg !3607
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !3608, metadata !DIExpression()), !dbg !3609
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3610, metadata !DIExpression()), !dbg !3611
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !3612, metadata !DIExpression()), !dbg !3613
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !3614, metadata !DIExpression()), !dbg !3615
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !3616, metadata !DIExpression()), !dbg !3617
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !3618, metadata !DIExpression()), !dbg !3619
  call void @llvm.dbg.declare(metadata i64* %28, metadata !3620, metadata !DIExpression()), !dbg !3621
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3622, metadata !DIExpression()), !dbg !3623
  store i64 0, i64* %29, align 8, !dbg !3623
  call void @llvm.dbg.declare(metadata i64* %30, metadata !3624, metadata !DIExpression()), !dbg !3625
  store i64 0, i64* %30, align 8, !dbg !3625
  call void @llvm.dbg.declare(metadata i8** %31, metadata !3626, metadata !DIExpression()), !dbg !3627
  store i8* null, i8** %31, align 8, !dbg !3627
  call void @llvm.dbg.declare(metadata i64* %32, metadata !3628, metadata !DIExpression()), !dbg !3629
  store i64 0, i64* %32, align 8, !dbg !3629
  call void @llvm.dbg.declare(metadata i8* %33, metadata !3630, metadata !DIExpression()), !dbg !3631
  store i8 0, i8* %33, align 1, !dbg !3631
  call void @llvm.dbg.declare(metadata i8* %34, metadata !3632, metadata !DIExpression()), !dbg !3633
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !3634
  %52 = icmp eq i64 %51, 1, !dbg !3635
  %53 = zext i1 %52 to i8, !dbg !3633
  store i8 %53, i8* %34, align 1, !dbg !3633
  call void @llvm.dbg.declare(metadata i8* %35, metadata !3636, metadata !DIExpression()), !dbg !3637
  %54 = load i32, i32* %24, align 4, !dbg !3638
  %55 = and i32 %54, 2, !dbg !3639
  %56 = icmp ne i32 %55, 0, !dbg !3640
  %57 = zext i1 %56 to i8, !dbg !3637
  store i8 %57, i8* %35, align 1, !dbg !3637
  call void @llvm.dbg.declare(metadata i8* %36, metadata !3641, metadata !DIExpression()), !dbg !3642
  store i8 0, i8* %36, align 1, !dbg !3642
  call void @llvm.dbg.declare(metadata i8* %37, metadata !3643, metadata !DIExpression()), !dbg !3644
  store i8 0, i8* %37, align 1, !dbg !3644
  call void @llvm.dbg.declare(metadata i8* %38, metadata !3645, metadata !DIExpression()), !dbg !3646
  store i8 1, i8* %38, align 1, !dbg !3646
  %58 = load i32, i32* @x.63
  %59 = load i32, i32* @y.64
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !3647

66:                                               ; preds = %5186, %originalBBpart2
  call void @llvm.dbg.label(metadata !3648), !dbg !3649
  %67 = load i32, i32* @x.63
  %68 = load i32, i32* @y.64
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %66, %originalBB8alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !3650
  %76 = load i32, i32* @x.63
  %77 = load i32, i32* @y.64
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  switch i32 %75, label %616 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %198
    i32 8, label %215
    i32 9, label %215
    i32 10, label %215
    i32 3, label %415
    i32 1, label %432
    i32 4, label %449
    i32 2, label %486
    i32 0, label %599
  ], !dbg !3651

84:                                               ; preds = %originalBBpart210
  %85 = load i32, i32* @x.63
  %86 = load i32, i32* @y.64
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %84, %originalBB12alteredBB
  store i32 5, i32* %23, align 4, !dbg !3652
  store i8 1, i8* %35, align 1, !dbg !3654
  %93 = load i32, i32* @x.63
  %94 = load i32, i32* @y.64
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br label %101, !dbg !3655

101:                                              ; preds = %originalBBpart214, %originalBBpart210
  %102 = load i32, i32* @x.63
  %103 = load i32, i32* @y.64
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %101, %originalBB16alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !3656
  %111 = trunc i8 %110 to i1, !dbg !3656
  %112 = load i32, i32* @x.63
  %113 = load i32, i32* @y.64
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br i1 %111, label %197, label %120, !dbg !3658

120:                                              ; preds = %originalBBpart218
  %121 = load i32, i32* @x.63
  %122 = load i32, i32* @y.64
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %120, %originalBB20alteredBB
  %129 = load i32, i32* @x.63
  %130 = load i32, i32* @y.64
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %137, !dbg !3659

137:                                              ; preds = %originalBBpart222
  %138 = load i32, i32* @x.63
  %139 = load i32, i32* @y.64
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %137, %originalBB24alteredBB
  %146 = load i64, i64* %29, align 8, !dbg !3660
  %147 = load i64, i64* %20, align 8, !dbg !3660
  %148 = icmp ult i64 %146, %147, !dbg !3660
  %149 = load i32, i32* @x.63
  %150 = load i32, i32* @y.64
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart226, label %originalBB24alteredBB

originalBBpart226:                                ; preds = %originalBB24
  br i1 %148, label %157, label %177, !dbg !3663

157:                                              ; preds = %originalBBpart226
  %158 = load i32, i32* @x.63
  %159 = load i32, i32* @y.64
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB28, label %originalBB28alteredBB

originalBB28:                                     ; preds = %157, %originalBB28alteredBB
  %166 = load i8*, i8** %19, align 8, !dbg !3660
  %167 = load i64, i64* %29, align 8, !dbg !3660
  %168 = getelementptr inbounds i8, i8* %166, i64 %167, !dbg !3660
  store i8 34, i8* %168, align 1, !dbg !3660
  %169 = load i32, i32* @x.63
  %170 = load i32, i32* @y.64
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart230, label %originalBB28alteredBB

originalBBpart230:                                ; preds = %originalBB28
  br label %177, !dbg !3660

177:                                              ; preds = %originalBBpart230, %originalBBpart226
  %178 = load i64, i64* %29, align 8, !dbg !3663
  %179 = add i64 %178, 1, !dbg !3663
  store i64 %179, i64* %29, align 8, !dbg !3663
  br label %180, !dbg !3663

180:                                              ; preds = %177
  %181 = load i32, i32* @x.63
  %182 = load i32, i32* @y.64
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB32, label %originalBB32alteredBB

originalBB32:                                     ; preds = %180, %originalBB32alteredBB
  %189 = load i32, i32* @x.63
  %190 = load i32, i32* @y.64
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart234, label %originalBB32alteredBB

originalBBpart234:                                ; preds = %originalBB32
  br label %197, !dbg !3663

197:                                              ; preds = %originalBBpart234, %originalBBpart218
  store i8 1, i8* %33, align 1, !dbg !3664
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.120, i64 0, i64 0), i8** %31, align 8, !dbg !3665
  store i64 1, i64* %32, align 8, !dbg !3666
  br label %633, !dbg !3667

198:                                              ; preds = %originalBBpart210
  %199 = load i32, i32* @x.63
  %200 = load i32, i32* @y.64
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %198, %originalBB36alteredBB
  store i8 1, i8* %33, align 1, !dbg !3668
  store i8 0, i8* %35, align 1, !dbg !3669
  %207 = load i32, i32* @x.63
  %208 = load i32, i32* @y.64
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br label %633, !dbg !3670

215:                                              ; preds = %originalBBpart210, %originalBBpart210, %originalBBpart210
  %216 = load i32, i32* @x.63
  %217 = load i32, i32* @y.64
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %215, %originalBB40alteredBB
  %224 = load i32, i32* %23, align 4, !dbg !3671
  %225 = icmp ne i32 %224, 10, !dbg !3674
  %226 = load i32, i32* @x.63
  %227 = load i32, i32* @y.64
  %228 = sub i32 %226, 1
  %229 = mul i32 %226, %228
  %230 = urem i32 %229, 2
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %231, %232
  br i1 %233, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br i1 %225, label %234, label %255, !dbg !3675

234:                                              ; preds = %originalBBpart242
  %235 = load i32, i32* @x.63
  %236 = load i32, i32* @y.64
  %237 = sub i32 %235, 1
  %238 = mul i32 %235, %237
  %239 = urem i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %240, %241
  br i1 %242, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %234, %originalBB44alteredBB
  %243 = load i32, i32* %23, align 4, !dbg !3676
  %244 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.121, i64 0, i64 0), i32 %243), !dbg !3678
  store i8* %244, i8** %26, align 8, !dbg !3679
  %245 = load i32, i32* %23, align 4, !dbg !3680
  %246 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i32 %245), !dbg !3681
  store i8* %246, i8** %27, align 8, !dbg !3682
  %247 = load i32, i32* @x.63
  %248 = load i32, i32* @y.64
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  br label %255, !dbg !3683

255:                                              ; preds = %originalBBpart246, %originalBBpart242
  %256 = load i32, i32* @x.63
  %257 = load i32, i32* @y.64
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %255, %originalBB48alteredBB
  %264 = load i8, i8* %35, align 1, !dbg !3684
  %265 = trunc i8 %264 to i1, !dbg !3684
  %266 = load i32, i32* @x.63
  %267 = load i32, i32* @y.64
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br i1 %265, label %395, label %274, !dbg !3686

274:                                              ; preds = %originalBBpart250
  %275 = load i8*, i8** %26, align 8, !dbg !3687
  store i8* %275, i8** %31, align 8, !dbg !3689
  br label %276, !dbg !3690

276:                                              ; preds = %originalBBpart273, %274
  %277 = load i32, i32* @x.63
  %278 = load i32, i32* @y.64
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %276, %originalBB52alteredBB
  %285 = load i8*, i8** %31, align 8, !dbg !3691
  %286 = load i8, i8* %285, align 1, !dbg !3693
  %287 = icmp ne i8 %286, 0, !dbg !3694
  %288 = load i32, i32* @x.63
  %289 = load i32, i32* @y.64
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  br i1 %287, label %296, label %378, !dbg !3694

296:                                              ; preds = %originalBBpart254
  br label %297, !dbg !3695

297:                                              ; preds = %296
  %298 = load i64, i64* %29, align 8, !dbg !3696
  %299 = load i64, i64* %20, align 8, !dbg !3696
  %300 = icmp ult i64 %298, %299, !dbg !3696
  br i1 %300, label %301, label %323, !dbg !3699

301:                                              ; preds = %297
  %302 = load i32, i32* @x.63
  %303 = load i32, i32* @y.64
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB56, label %originalBB56alteredBB

originalBB56:                                     ; preds = %301, %originalBB56alteredBB
  %310 = load i8*, i8** %31, align 8, !dbg !3696
  %311 = load i8, i8* %310, align 1, !dbg !3696
  %312 = load i8*, i8** %19, align 8, !dbg !3696
  %313 = load i64, i64* %29, align 8, !dbg !3696
  %314 = getelementptr inbounds i8, i8* %312, i64 %313, !dbg !3696
  store i8 %311, i8* %314, align 1, !dbg !3696
  %315 = load i32, i32* @x.63
  %316 = load i32, i32* @y.64
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart258, label %originalBB56alteredBB

originalBBpart258:                                ; preds = %originalBB56
  br label %323, !dbg !3696

323:                                              ; preds = %originalBBpart258, %297
  %324 = load i32, i32* @x.63
  %325 = load i32, i32* @y.64
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB60, label %originalBB60alteredBB

originalBB60:                                     ; preds = %323, %originalBB60alteredBB
  %332 = load i64, i64* %29, align 8, !dbg !3699
  %333 = add i64 %332, 1, !dbg !3699
  store i64 %333, i64* %29, align 8, !dbg !3699
  %334 = load i32, i32* @x.63
  %335 = load i32, i32* @y.64
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBBpart265, label %originalBB60alteredBB

originalBBpart265:                                ; preds = %originalBB60
  br label %342, !dbg !3699

342:                                              ; preds = %originalBBpart265
  %343 = load i32, i32* @x.63
  %344 = load i32, i32* @y.64
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %342, %originalBB67alteredBB
  %351 = load i32, i32* @x.63
  %352 = load i32, i32* @y.64
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br label %359, !dbg !3699

359:                                              ; preds = %originalBBpart269
  %360 = load i32, i32* @x.63
  %361 = load i32, i32* @y.64
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %359, %originalBB71alteredBB
  %368 = load i8*, i8** %31, align 8, !dbg !3700
  %369 = getelementptr inbounds i8, i8* %368, i32 1, !dbg !3700
  store i8* %369, i8** %31, align 8, !dbg !3700
  %370 = load i32, i32* @x.63
  %371 = load i32, i32* @y.64
  %372 = sub i32 %370, 1
  %373 = mul i32 %370, %372
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %375, %376
  br i1 %377, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br label %276, !dbg !3701, !llvm.loop !3702

378:                                              ; preds = %originalBBpart254
  %379 = load i32, i32* @x.63
  %380 = load i32, i32* @y.64
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %378, %originalBB75alteredBB
  %387 = load i32, i32* @x.63
  %388 = load i32, i32* @y.64
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  br label %395, !dbg !3703

395:                                              ; preds = %originalBBpart277, %originalBBpart250
  %396 = load i32, i32* @x.63
  %397 = load i32, i32* @y.64
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %395, %originalBB79alteredBB
  store i8 1, i8* %33, align 1, !dbg !3704
  %404 = load i8*, i8** %27, align 8, !dbg !3705
  store i8* %404, i8** %31, align 8, !dbg !3706
  %405 = load i8*, i8** %31, align 8, !dbg !3707
  %406 = call i64 @strlen(i8* %405) #13, !dbg !3708
  store i64 %406, i64* %32, align 8, !dbg !3709
  %407 = load i32, i32* @x.63
  %408 = load i32, i32* @y.64
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br label %633, !dbg !3710

415:                                              ; preds = %originalBBpart210
  %416 = load i32, i32* @x.63
  %417 = load i32, i32* @y.64
  %418 = sub i32 %416, 1
  %419 = mul i32 %416, %418
  %420 = urem i32 %419, 2
  %421 = icmp eq i32 %420, 0
  %422 = icmp slt i32 %417, 10
  %423 = or i1 %421, %422
  br i1 %423, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %415, %originalBB83alteredBB
  store i8 1, i8* %33, align 1, !dbg !3711
  %424 = load i32, i32* @x.63
  %425 = load i32, i32* @y.64
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %432, !dbg !3712

432:                                              ; preds = %originalBBpart285, %originalBBpart210
  %433 = load i32, i32* @x.63
  %434 = load i32, i32* @y.64
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %432, %originalBB87alteredBB
  store i8 1, i8* %35, align 1, !dbg !3713
  %441 = load i32, i32* @x.63
  %442 = load i32, i32* @y.64
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br label %449, !dbg !3714

449:                                              ; preds = %originalBBpart289, %originalBBpart210
  %450 = load i32, i32* @x.63
  %451 = load i32, i32* @y.64
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %449, %originalBB91alteredBB
  %458 = load i8, i8* %35, align 1, !dbg !3715
  %459 = trunc i8 %458 to i1, !dbg !3715
  %460 = load i32, i32* @x.63
  %461 = load i32, i32* @y.64
  %462 = sub i32 %460, 1
  %463 = mul i32 %460, %462
  %464 = urem i32 %463, 2
  %465 = icmp eq i32 %464, 0
  %466 = icmp slt i32 %461, 10
  %467 = or i1 %465, %466
  br i1 %467, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br i1 %459, label %469, label %468, !dbg !3717

468:                                              ; preds = %originalBBpart293
  store i8 1, i8* %33, align 1, !dbg !3718
  br label %469, !dbg !3719

469:                                              ; preds = %468, %originalBBpart293
  %470 = load i32, i32* @x.63
  %471 = load i32, i32* @y.64
  %472 = sub i32 %470, 1
  %473 = mul i32 %470, %472
  %474 = urem i32 %473, 2
  %475 = icmp eq i32 %474, 0
  %476 = icmp slt i32 %471, 10
  %477 = or i1 %475, %476
  br i1 %477, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %469, %originalBB95alteredBB
  %478 = load i32, i32* @x.63
  %479 = load i32, i32* @y.64
  %480 = sub i32 %478, 1
  %481 = mul i32 %478, %480
  %482 = urem i32 %481, 2
  %483 = icmp eq i32 %482, 0
  %484 = icmp slt i32 %479, 10
  %485 = or i1 %483, %484
  br i1 %485, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br label %486, !dbg !3720

486:                                              ; preds = %originalBBpart297, %originalBBpart210
  %487 = load i32, i32* @x.63
  %488 = load i32, i32* @y.64
  %489 = sub i32 %487, 1
  %490 = mul i32 %487, %489
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %492, %493
  br i1 %494, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %486, %originalBB99alteredBB
  store i32 2, i32* %23, align 4, !dbg !3721
  %495 = load i8, i8* %35, align 1, !dbg !3722
  %496 = trunc i8 %495 to i1, !dbg !3722
  %497 = load i32, i32* @x.63
  %498 = load i32, i32* @y.64
  %499 = sub i32 %497, 1
  %500 = mul i32 %497, %499
  %501 = urem i32 %500, 2
  %502 = icmp eq i32 %501, 0
  %503 = icmp slt i32 %498, 10
  %504 = or i1 %502, %503
  br i1 %504, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br i1 %496, label %582, label %505, !dbg !3724

505:                                              ; preds = %originalBBpart2101
  br label %506, !dbg !3725

506:                                              ; preds = %505
  %507 = load i32, i32* @x.63
  %508 = load i32, i32* @y.64
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %506, %originalBB103alteredBB
  %515 = load i64, i64* %29, align 8, !dbg !3726
  %516 = load i64, i64* %20, align 8, !dbg !3726
  %517 = icmp ult i64 %515, %516, !dbg !3726
  %518 = load i32, i32* @x.63
  %519 = load i32, i32* @y.64
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br i1 %517, label %526, label %546, !dbg !3729

526:                                              ; preds = %originalBBpart2105
  %527 = load i32, i32* @x.63
  %528 = load i32, i32* @y.64
  %529 = sub i32 %527, 1
  %530 = mul i32 %527, %529
  %531 = urem i32 %530, 2
  %532 = icmp eq i32 %531, 0
  %533 = icmp slt i32 %528, 10
  %534 = or i1 %532, %533
  br i1 %534, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %526, %originalBB107alteredBB
  %535 = load i8*, i8** %19, align 8, !dbg !3726
  %536 = load i64, i64* %29, align 8, !dbg !3726
  %537 = getelementptr inbounds i8, i8* %535, i64 %536, !dbg !3726
  store i8 39, i8* %537, align 1, !dbg !3726
  %538 = load i32, i32* @x.63
  %539 = load i32, i32* @y.64
  %540 = sub i32 %538, 1
  %541 = mul i32 %538, %540
  %542 = urem i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = icmp slt i32 %539, 10
  %545 = or i1 %543, %544
  br i1 %545, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br label %546, !dbg !3726

546:                                              ; preds = %originalBBpart2109, %originalBBpart2105
  %547 = load i32, i32* @x.63
  %548 = load i32, i32* @y.64
  %549 = sub i32 %547, 1
  %550 = mul i32 %547, %549
  %551 = urem i32 %550, 2
  %552 = icmp eq i32 %551, 0
  %553 = icmp slt i32 %548, 10
  %554 = or i1 %552, %553
  br i1 %554, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %546, %originalBB111alteredBB
  %555 = load i64, i64* %29, align 8, !dbg !3729
  %556 = add i64 %555, 1, !dbg !3729
  store i64 %556, i64* %29, align 8, !dbg !3729
  %557 = load i32, i32* @x.63
  %558 = load i32, i32* @y.64
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2128, label %originalBB111alteredBB

originalBBpart2128:                               ; preds = %originalBB111
  br label %565, !dbg !3729

565:                                              ; preds = %originalBBpart2128
  %566 = load i32, i32* @x.63
  %567 = load i32, i32* @y.64
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %565, %originalBB130alteredBB
  %574 = load i32, i32* @x.63
  %575 = load i32, i32* @y.64
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br label %582, !dbg !3729

582:                                              ; preds = %originalBBpart2132, %originalBBpart2101
  %583 = load i32, i32* @x.63
  %584 = load i32, i32* @y.64
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %582, %originalBB134alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i8** %31, align 8, !dbg !3730
  store i64 1, i64* %32, align 8, !dbg !3731
  %591 = load i32, i32* @x.63
  %592 = load i32, i32* @y.64
  %593 = sub i32 %591, 1
  %594 = mul i32 %591, %593
  %595 = urem i32 %594, 2
  %596 = icmp eq i32 %595, 0
  %597 = icmp slt i32 %592, 10
  %598 = or i1 %596, %597
  br i1 %598, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br label %633, !dbg !3732

599:                                              ; preds = %originalBBpart210
  %600 = load i32, i32* @x.63
  %601 = load i32, i32* @y.64
  %602 = sub i32 %600, 1
  %603 = mul i32 %600, %602
  %604 = urem i32 %603, 2
  %605 = icmp eq i32 %604, 0
  %606 = icmp slt i32 %601, 10
  %607 = or i1 %605, %606
  br i1 %607, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %599, %originalBB138alteredBB
  store i8 0, i8* %35, align 1, !dbg !3733
  %608 = load i32, i32* @x.63
  %609 = load i32, i32* @y.64
  %610 = sub i32 %608, 1
  %611 = mul i32 %608, %610
  %612 = urem i32 %611, 2
  %613 = icmp eq i32 %612, 0
  %614 = icmp slt i32 %609, 10
  %615 = or i1 %613, %614
  br i1 %615, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br label %633, !dbg !3734

616:                                              ; preds = %originalBBpart210
  %617 = load i32, i32* @x.63
  %618 = load i32, i32* @y.64
  %619 = sub i32 %617, 1
  %620 = mul i32 %617, %619
  %621 = urem i32 %620, 2
  %622 = icmp eq i32 %621, 0
  %623 = icmp slt i32 %618, 10
  %624 = or i1 %622, %623
  br i1 %624, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %616, %originalBB142alteredBB
  call void @abort() #12, !dbg !3735
  %625 = load i32, i32* @x.63
  %626 = load i32, i32* @y.64
  %627 = sub i32 %625, 1
  %628 = mul i32 %625, %627
  %629 = urem i32 %628, 2
  %630 = icmp eq i32 %629, 0
  %631 = icmp slt i32 %626, 10
  %632 = or i1 %630, %631
  br i1 %632, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  unreachable, !dbg !3735

633:                                              ; preds = %originalBBpart2140, %originalBBpart2136, %originalBBpart281, %originalBBpart238, %197
  %634 = load i32, i32* @x.63
  %635 = load i32, i32* @y.64
  %636 = sub i32 %634, 1
  %637 = mul i32 %634, %636
  %638 = urem i32 %637, 2
  %639 = icmp eq i32 %638, 0
  %640 = icmp slt i32 %635, 10
  %641 = or i1 %639, %640
  br i1 %641, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %633, %originalBB146alteredBB
  store i64 0, i64* %28, align 8, !dbg !3736
  %642 = load i32, i32* @x.63
  %643 = load i32, i32* @y.64
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br label %650, !dbg !3738

650:                                              ; preds = %originalBBpart21324, %originalBBpart2148
  %651 = load i32, i32* @x.63
  %652 = load i32, i32* @y.64
  %653 = sub i32 %651, 1
  %654 = mul i32 %651, %653
  %655 = urem i32 %654, 2
  %656 = icmp eq i32 %655, 0
  %657 = icmp slt i32 %652, 10
  %658 = or i1 %656, %657
  br i1 %658, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %650, %originalBB150alteredBB
  %659 = load i64, i64* %22, align 8, !dbg !3739
  %660 = icmp eq i64 %659, -1, !dbg !3741
  %661 = load i32, i32* @x.63
  %662 = load i32, i32* @y.64
  %663 = sub i32 %661, 1
  %664 = mul i32 %661, %663
  %665 = urem i32 %664, 2
  %666 = icmp eq i32 %665, 0
  %667 = icmp slt i32 %662, 10
  %668 = or i1 %666, %667
  br i1 %668, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br i1 %660, label %669, label %693, !dbg !3739

669:                                              ; preds = %originalBBpart2152
  %670 = load i32, i32* @x.63
  %671 = load i32, i32* @y.64
  %672 = sub i32 %670, 1
  %673 = mul i32 %670, %672
  %674 = urem i32 %673, 2
  %675 = icmp eq i32 %674, 0
  %676 = icmp slt i32 %671, 10
  %677 = or i1 %675, %676
  br i1 %677, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %669, %originalBB154alteredBB
  %678 = load i8*, i8** %21, align 8, !dbg !3742
  %679 = load i64, i64* %28, align 8, !dbg !3743
  %680 = getelementptr inbounds i8, i8* %678, i64 %679, !dbg !3742
  %681 = load i8, i8* %680, align 1, !dbg !3742
  %682 = sext i8 %681 to i32, !dbg !3742
  %683 = icmp eq i32 %682, 0, !dbg !3744
  %684 = zext i1 %683 to i32, !dbg !3744
  %685 = load i32, i32* @x.63
  %686 = load i32, i32* @y.64
  %687 = sub i32 %685, 1
  %688 = mul i32 %685, %687
  %689 = urem i32 %688, 2
  %690 = icmp eq i32 %689, 0
  %691 = icmp slt i32 %686, 10
  %692 = or i1 %690, %691
  br i1 %692, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br label %714, !dbg !3739

693:                                              ; preds = %originalBBpart2152
  %694 = load i32, i32* @x.63
  %695 = load i32, i32* @y.64
  %696 = sub i32 %694, 1
  %697 = mul i32 %694, %696
  %698 = urem i32 %697, 2
  %699 = icmp eq i32 %698, 0
  %700 = icmp slt i32 %695, 10
  %701 = or i1 %699, %700
  br i1 %701, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %693, %originalBB158alteredBB
  %702 = load i64, i64* %28, align 8, !dbg !3745
  %703 = load i64, i64* %22, align 8, !dbg !3746
  %704 = icmp eq i64 %702, %703, !dbg !3747
  %705 = zext i1 %704 to i32, !dbg !3747
  %706 = load i32, i32* @x.63
  %707 = load i32, i32* @y.64
  %708 = sub i32 %706, 1
  %709 = mul i32 %706, %708
  %710 = urem i32 %709, 2
  %711 = icmp eq i32 %710, 0
  %712 = icmp slt i32 %707, 10
  %713 = or i1 %711, %712
  br i1 %713, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br label %714, !dbg !3739

714:                                              ; preds = %originalBBpart2160, %originalBBpart2156
  %715 = phi i32 [ %684, %originalBBpart2156 ], [ %705, %originalBBpart2160 ], !dbg !3739
  %716 = load i32, i32* @x.63
  %717 = load i32, i32* @y.64
  %718 = sub i32 %716, 1
  %719 = mul i32 %716, %718
  %720 = urem i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = icmp slt i32 %717, 10
  %723 = or i1 %721, %722
  br i1 %723, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %714, %originalBB162alteredBB
  %724 = icmp ne i32 %715, 0, !dbg !3748
  %725 = xor i1 %724, true, !dbg !3748
  %726 = load i32, i32* @x.63
  %727 = load i32, i32* @y.64
  %728 = sub i32 %726, 1
  %729 = mul i32 %726, %728
  %730 = urem i32 %729, 2
  %731 = icmp eq i32 %730, 0
  %732 = icmp slt i32 %727, 10
  %733 = or i1 %731, %732
  br i1 %733, label %originalBBpart2179, label %originalBB162alteredBB

originalBBpart2179:                               ; preds = %originalBB162
  br i1 %725, label %734, label %5004, !dbg !3749

734:                                              ; preds = %originalBBpart2179
  call void @llvm.dbg.declare(metadata i8* %39, metadata !3750, metadata !DIExpression()), !dbg !3752
  call void @llvm.dbg.declare(metadata i8* %40, metadata !3753, metadata !DIExpression()), !dbg !3754
  call void @llvm.dbg.declare(metadata i8* %41, metadata !3755, metadata !DIExpression()), !dbg !3756
  store i8 0, i8* %41, align 1, !dbg !3756
  call void @llvm.dbg.declare(metadata i8* %42, metadata !3757, metadata !DIExpression()), !dbg !3758
  store i8 0, i8* %42, align 1, !dbg !3758
  call void @llvm.dbg.declare(metadata i8* %43, metadata !3759, metadata !DIExpression()), !dbg !3760
  store i8 0, i8* %43, align 1, !dbg !3760
  %735 = load i8, i8* %33, align 1, !dbg !3761
  %736 = trunc i8 %735 to i1, !dbg !3761
  br i1 %736, label %737, label %885, !dbg !3763

737:                                              ; preds = %734
  %738 = load i32, i32* @x.63
  %739 = load i32, i32* @y.64
  %740 = sub i32 %738, 1
  %741 = mul i32 %738, %740
  %742 = urem i32 %741, 2
  %743 = icmp eq i32 %742, 0
  %744 = icmp slt i32 %739, 10
  %745 = or i1 %743, %744
  br i1 %745, label %originalBB181, label %originalBB181alteredBB

originalBB181:                                    ; preds = %737, %originalBB181alteredBB
  %746 = load i32, i32* %23, align 4, !dbg !3764
  %747 = icmp ne i32 %746, 2, !dbg !3765
  %748 = load i32, i32* @x.63
  %749 = load i32, i32* @y.64
  %750 = sub i32 %748, 1
  %751 = mul i32 %748, %750
  %752 = urem i32 %751, 2
  %753 = icmp eq i32 %752, 0
  %754 = icmp slt i32 %749, 10
  %755 = or i1 %753, %754
  br i1 %755, label %originalBBpart2183, label %originalBB181alteredBB

originalBBpart2183:                               ; preds = %originalBB181
  br i1 %747, label %756, label %885, !dbg !3766

756:                                              ; preds = %originalBBpart2183
  %757 = load i64, i64* %32, align 8, !dbg !3767
  %758 = icmp ne i64 %757, 0, !dbg !3767
  br i1 %758, label %759, label %885, !dbg !3768

759:                                              ; preds = %756
  %760 = load i32, i32* @x.63
  %761 = load i32, i32* @y.64
  %762 = sub i32 %760, 1
  %763 = mul i32 %760, %762
  %764 = urem i32 %763, 2
  %765 = icmp eq i32 %764, 0
  %766 = icmp slt i32 %761, 10
  %767 = or i1 %765, %766
  br i1 %767, label %originalBB185, label %originalBB185alteredBB

originalBB185:                                    ; preds = %759, %originalBB185alteredBB
  %768 = load i64, i64* %28, align 8, !dbg !3769
  %769 = load i64, i64* %32, align 8, !dbg !3770
  %770 = add i64 %768, %769, !dbg !3771
  %771 = load i64, i64* %22, align 8, !dbg !3772
  %772 = icmp eq i64 %771, -1, !dbg !3773
  %773 = load i32, i32* @x.63
  %774 = load i32, i32* @y.64
  %775 = sub i32 %773, 1
  %776 = mul i32 %773, %775
  %777 = urem i32 %776, 2
  %778 = icmp eq i32 %777, 0
  %779 = icmp slt i32 %774, 10
  %780 = or i1 %778, %779
  br i1 %780, label %originalBBpart2187, label %originalBB185alteredBB

originalBBpart2187:                               ; preds = %originalBB185
  br i1 %772, label %781, label %819, !dbg !3774

781:                                              ; preds = %originalBBpart2187
  %782 = load i32, i32* @x.63
  %783 = load i32, i32* @y.64
  %784 = sub i32 %782, 1
  %785 = mul i32 %782, %784
  %786 = urem i32 %785, 2
  %787 = icmp eq i32 %786, 0
  %788 = icmp slt i32 %783, 10
  %789 = or i1 %787, %788
  br i1 %789, label %originalBB189, label %originalBB189alteredBB

originalBB189:                                    ; preds = %781, %originalBB189alteredBB
  %790 = load i64, i64* %32, align 8, !dbg !3775
  %791 = icmp ult i64 1, %790, !dbg !3776
  %792 = load i32, i32* @x.63
  %793 = load i32, i32* @y.64
  %794 = sub i32 %792, 1
  %795 = mul i32 %792, %794
  %796 = urem i32 %795, 2
  %797 = icmp eq i32 %796, 0
  %798 = icmp slt i32 %793, 10
  %799 = or i1 %797, %798
  br i1 %799, label %originalBBpart2191, label %originalBB189alteredBB

originalBBpart2191:                               ; preds = %originalBB189
  br i1 %791, label %800, label %819, !dbg !3772

800:                                              ; preds = %originalBBpart2191
  %801 = load i32, i32* @x.63
  %802 = load i32, i32* @y.64
  %803 = sub i32 %801, 1
  %804 = mul i32 %801, %803
  %805 = urem i32 %804, 2
  %806 = icmp eq i32 %805, 0
  %807 = icmp slt i32 %802, 10
  %808 = or i1 %806, %807
  br i1 %808, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %800, %originalBB193alteredBB
  %809 = load i8*, i8** %21, align 8, !dbg !3777
  %810 = call i64 @strlen(i8* %809) #13, !dbg !3778
  store i64 %810, i64* %22, align 8, !dbg !3779
  %811 = load i32, i32* @x.63
  %812 = load i32, i32* @y.64
  %813 = sub i32 %811, 1
  %814 = mul i32 %811, %813
  %815 = urem i32 %814, 2
  %816 = icmp eq i32 %815, 0
  %817 = icmp slt i32 %812, 10
  %818 = or i1 %816, %817
  br i1 %818, label %originalBBpart2195, label %originalBB193alteredBB

originalBBpart2195:                               ; preds = %originalBB193
  br label %821, !dbg !3772

819:                                              ; preds = %originalBBpart2191, %originalBBpart2187
  %820 = load i64, i64* %22, align 8, !dbg !3780
  br label %821, !dbg !3772

821:                                              ; preds = %819, %originalBBpart2195
  %822 = phi i64 [ %810, %originalBBpart2195 ], [ %820, %819 ], !dbg !3772
  %823 = load i32, i32* @x.63
  %824 = load i32, i32* @y.64
  %825 = sub i32 %823, 1
  %826 = mul i32 %823, %825
  %827 = urem i32 %826, 2
  %828 = icmp eq i32 %827, 0
  %829 = icmp slt i32 %824, 10
  %830 = or i1 %828, %829
  br i1 %830, label %originalBB197, label %originalBB197alteredBB

originalBB197:                                    ; preds = %821, %originalBB197alteredBB
  %831 = icmp ule i64 %770, %822, !dbg !3781
  %832 = load i32, i32* @x.63
  %833 = load i32, i32* @y.64
  %834 = sub i32 %832, 1
  %835 = mul i32 %832, %834
  %836 = urem i32 %835, 2
  %837 = icmp eq i32 %836, 0
  %838 = icmp slt i32 %833, 10
  %839 = or i1 %837, %838
  br i1 %839, label %originalBBpart2199, label %originalBB197alteredBB

originalBBpart2199:                               ; preds = %originalBB197
  br i1 %831, label %840, label %885, !dbg !3782

840:                                              ; preds = %originalBBpart2199
  %841 = load i8*, i8** %21, align 8, !dbg !3783
  %842 = load i64, i64* %28, align 8, !dbg !3784
  %843 = getelementptr inbounds i8, i8* %841, i64 %842, !dbg !3785
  %844 = load i8*, i8** %31, align 8, !dbg !3786
  %845 = load i64, i64* %32, align 8, !dbg !3787
  %846 = call i32 @memcmp(i8* %843, i8* %844, i64 %845) #13, !dbg !3788
  %847 = icmp eq i32 %846, 0, !dbg !3789
  br i1 %847, label %848, label %885, !dbg !3790

848:                                              ; preds = %840
  %849 = load i32, i32* @x.63
  %850 = load i32, i32* @y.64
  %851 = sub i32 %849, 1
  %852 = mul i32 %849, %851
  %853 = urem i32 %852, 2
  %854 = icmp eq i32 %853, 0
  %855 = icmp slt i32 %850, 10
  %856 = or i1 %854, %855
  br i1 %856, label %originalBB201, label %originalBB201alteredBB

originalBB201:                                    ; preds = %848, %originalBB201alteredBB
  %857 = load i8, i8* %35, align 1, !dbg !3791
  %858 = trunc i8 %857 to i1, !dbg !3791
  %859 = load i32, i32* @x.63
  %860 = load i32, i32* @y.64
  %861 = sub i32 %859, 1
  %862 = mul i32 %859, %861
  %863 = urem i32 %862, 2
  %864 = icmp eq i32 %863, 0
  %865 = icmp slt i32 %860, 10
  %866 = or i1 %864, %865
  br i1 %866, label %originalBBpart2203, label %originalBB201alteredBB

originalBBpart2203:                               ; preds = %originalBB201
  br i1 %858, label %867, label %884, !dbg !3794

867:                                              ; preds = %originalBBpart2203
  %868 = load i32, i32* @x.63
  %869 = load i32, i32* @y.64
  %870 = sub i32 %868, 1
  %871 = mul i32 %868, %870
  %872 = urem i32 %871, 2
  %873 = icmp eq i32 %872, 0
  %874 = icmp slt i32 %869, 10
  %875 = or i1 %873, %874
  br i1 %875, label %originalBB205, label %originalBB205alteredBB

originalBB205:                                    ; preds = %867, %originalBB205alteredBB
  %876 = load i32, i32* @x.63
  %877 = load i32, i32* @y.64
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBBpart2207, label %originalBB205alteredBB

originalBBpart2207:                               ; preds = %originalBB205
  br label %5422, !dbg !3795

884:                                              ; preds = %originalBBpart2203
  store i8 1, i8* %41, align 1, !dbg !3796
  br label %885, !dbg !3797

885:                                              ; preds = %884, %840, %originalBBpart2199, %756, %originalBBpart2183, %734
  %886 = load i8*, i8** %21, align 8, !dbg !3798
  %887 = load i64, i64* %28, align 8, !dbg !3799
  %888 = getelementptr inbounds i8, i8* %886, i64 %887, !dbg !3798
  %889 = load i8, i8* %888, align 1, !dbg !3798
  store i8 %889, i8* %39, align 1, !dbg !3800
  %890 = load i8, i8* %39, align 1, !dbg !3801
  %891 = zext i8 %890 to i32, !dbg !3801
  switch i32 %891, label %2848 [
    i32 0, label %892
    i32 63, label %1557
    i32 7, label %2037
    i32 8, label %2054
    i32 12, label %2071
    i32 10, label %2088
    i32 13, label %2105
    i32 9, label %2106
    i32 11, label %2123
    i32 92, label %2140
    i32 123, label %2382
    i32 125, label %2382
    i32 35, label %2444
    i32 126, label %2444
    i32 32, label %2481
    i32 33, label %2482
    i32 34, label %2482
    i32 36, label %2482
    i32 38, label %2482
    i32 40, label %2482
    i32 41, label %2482
    i32 42, label %2482
    i32 59, label %2482
    i32 60, label %2482
    i32 61, label %2482
    i32 62, label %2482
    i32 91, label %2482
    i32 94, label %2482
    i32 96, label %2482
    i32 124, label %2482
    i32 39, label %2522
    i32 37, label %2831
    i32 43, label %2831
    i32 44, label %2831
    i32 45, label %2831
    i32 46, label %2831
    i32 47, label %2831
    i32 48, label %2831
    i32 49, label %2831
    i32 50, label %2831
    i32 51, label %2831
    i32 52, label %2831
    i32 53, label %2831
    i32 54, label %2831
    i32 55, label %2831
    i32 56, label %2831
    i32 57, label %2831
    i32 58, label %2831
    i32 65, label %2831
    i32 66, label %2831
    i32 67, label %2831
    i32 68, label %2831
    i32 69, label %2831
    i32 70, label %2831
    i32 71, label %2831
    i32 72, label %2831
    i32 73, label %2831
    i32 74, label %2831
    i32 75, label %2831
    i32 76, label %2831
    i32 77, label %2831
    i32 78, label %2831
    i32 79, label %2831
    i32 80, label %2831
    i32 81, label %2831
    i32 82, label %2831
    i32 83, label %2831
    i32 84, label %2831
    i32 85, label %2831
    i32 86, label %2831
    i32 87, label %2831
    i32 88, label %2831
    i32 89, label %2831
    i32 90, label %2831
    i32 93, label %2831
    i32 95, label %2831
    i32 97, label %2831
    i32 98, label %2831
    i32 99, label %2831
    i32 100, label %2831
    i32 101, label %2831
    i32 102, label %2831
    i32 103, label %2831
    i32 104, label %2831
    i32 105, label %2831
    i32 106, label %2831
    i32 107, label %2831
    i32 108, label %2831
    i32 109, label %2831
    i32 110, label %2831
    i32 111, label %2831
    i32 112, label %2831
    i32 113, label %2831
    i32 114, label %2831
    i32 115, label %2831
    i32 116, label %2831
    i32 117, label %2831
    i32 118, label %2831
    i32 119, label %2831
    i32 120, label %2831
    i32 121, label %2831
    i32 122, label %2831
  ], !dbg !3802

892:                                              ; preds = %885
  %893 = load i8, i8* %33, align 1, !dbg !3803
  %894 = trunc i8 %893 to i1, !dbg !3803
  br i1 %894, label %895, label %1502, !dbg !3806

895:                                              ; preds = %892
  %896 = load i32, i32* @x.63
  %897 = load i32, i32* @y.64
  %898 = sub i32 %896, 1
  %899 = mul i32 %896, %898
  %900 = urem i32 %899, 2
  %901 = icmp eq i32 %900, 0
  %902 = icmp slt i32 %897, 10
  %903 = or i1 %901, %902
  br i1 %903, label %originalBB209, label %originalBB209alteredBB

originalBB209:                                    ; preds = %895, %originalBB209alteredBB
  %904 = load i32, i32* @x.63
  %905 = load i32, i32* @y.64
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBBpart2211, label %originalBB209alteredBB

originalBBpart2211:                               ; preds = %originalBB209
  br label %912, !dbg !3807

912:                                              ; preds = %originalBBpart2211
  %913 = load i32, i32* @x.63
  %914 = load i32, i32* @y.64
  %915 = sub i32 %913, 1
  %916 = mul i32 %913, %915
  %917 = urem i32 %916, 2
  %918 = icmp eq i32 %917, 0
  %919 = icmp slt i32 %914, 10
  %920 = or i1 %918, %919
  br i1 %920, label %originalBB213, label %originalBB213alteredBB

originalBB213:                                    ; preds = %912, %originalBB213alteredBB
  %921 = load i8, i8* %35, align 1, !dbg !3809
  %922 = trunc i8 %921 to i1, !dbg !3809
  %923 = load i32, i32* @x.63
  %924 = load i32, i32* @y.64
  %925 = sub i32 %923, 1
  %926 = mul i32 %923, %925
  %927 = urem i32 %926, 2
  %928 = icmp eq i32 %927, 0
  %929 = icmp slt i32 %924, 10
  %930 = or i1 %928, %929
  br i1 %930, label %originalBBpart2215, label %originalBB213alteredBB

originalBBpart2215:                               ; preds = %originalBB213
  br i1 %922, label %931, label %948, !dbg !3812

931:                                              ; preds = %originalBBpart2215
  %932 = load i32, i32* @x.63
  %933 = load i32, i32* @y.64
  %934 = sub i32 %932, 1
  %935 = mul i32 %932, %934
  %936 = urem i32 %935, 2
  %937 = icmp eq i32 %936, 0
  %938 = icmp slt i32 %933, 10
  %939 = or i1 %937, %938
  br i1 %939, label %originalBB217, label %originalBB217alteredBB

originalBB217:                                    ; preds = %931, %originalBB217alteredBB
  %940 = load i32, i32* @x.63
  %941 = load i32, i32* @y.64
  %942 = sub i32 %940, 1
  %943 = mul i32 %940, %942
  %944 = urem i32 %943, 2
  %945 = icmp eq i32 %944, 0
  %946 = icmp slt i32 %941, 10
  %947 = or i1 %945, %946
  br i1 %947, label %originalBBpart2219, label %originalBB217alteredBB

originalBBpart2219:                               ; preds = %originalBB217
  br label %5422, !dbg !3809

948:                                              ; preds = %originalBBpart2215
  %949 = load i32, i32* @x.63
  %950 = load i32, i32* @y.64
  %951 = sub i32 %949, 1
  %952 = mul i32 %949, %951
  %953 = urem i32 %952, 2
  %954 = icmp eq i32 %953, 0
  %955 = icmp slt i32 %950, 10
  %956 = or i1 %954, %955
  br i1 %956, label %originalBB221, label %originalBB221alteredBB

originalBB221:                                    ; preds = %948, %originalBB221alteredBB
  store i8 1, i8* %42, align 1, !dbg !3812
  %957 = load i32, i32* %23, align 4, !dbg !3813
  %958 = icmp eq i32 %957, 2, !dbg !3813
  %959 = load i32, i32* @x.63
  %960 = load i32, i32* @y.64
  %961 = sub i32 %959, 1
  %962 = mul i32 %959, %961
  %963 = urem i32 %962, 2
  %964 = icmp eq i32 %963, 0
  %965 = icmp slt i32 %960, 10
  %966 = or i1 %964, %965
  br i1 %966, label %originalBBpart2223, label %originalBB221alteredBB

originalBBpart2223:                               ; preds = %originalBB221
  br i1 %958, label %967, label %1183, !dbg !3813

967:                                              ; preds = %originalBBpart2223
  %968 = load i8, i8* %36, align 1, !dbg !3813
  %969 = trunc i8 %968 to i1, !dbg !3813
  br i1 %969, label %1183, label %970, !dbg !3812

970:                                              ; preds = %967
  %971 = load i32, i32* @x.63
  %972 = load i32, i32* @y.64
  %973 = sub i32 %971, 1
  %974 = mul i32 %971, %973
  %975 = urem i32 %974, 2
  %976 = icmp eq i32 %975, 0
  %977 = icmp slt i32 %972, 10
  %978 = or i1 %976, %977
  br i1 %978, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %970, %originalBB225alteredBB
  %979 = load i32, i32* @x.63
  %980 = load i32, i32* @y.64
  %981 = sub i32 %979, 1
  %982 = mul i32 %979, %981
  %983 = urem i32 %982, 2
  %984 = icmp eq i32 %983, 0
  %985 = icmp slt i32 %980, 10
  %986 = or i1 %984, %985
  br i1 %986, label %originalBBpart2227, label %originalBB225alteredBB

originalBBpart2227:                               ; preds = %originalBB225
  br label %987, !dbg !3815

987:                                              ; preds = %originalBBpart2227
  %988 = load i64, i64* %29, align 8, !dbg !3817
  %989 = load i64, i64* %20, align 8, !dbg !3817
  %990 = icmp ult i64 %988, %989, !dbg !3817
  br i1 %990, label %991, label %1011, !dbg !3820

991:                                              ; preds = %987
  %992 = load i32, i32* @x.63
  %993 = load i32, i32* @y.64
  %994 = sub i32 %992, 1
  %995 = mul i32 %992, %994
  %996 = urem i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = icmp slt i32 %993, 10
  %999 = or i1 %997, %998
  br i1 %999, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %991, %originalBB229alteredBB
  %1000 = load i8*, i8** %19, align 8, !dbg !3817
  %1001 = load i64, i64* %29, align 8, !dbg !3817
  %1002 = getelementptr inbounds i8, i8* %1000, i64 %1001, !dbg !3817
  store i8 39, i8* %1002, align 1, !dbg !3817
  %1003 = load i32, i32* @x.63
  %1004 = load i32, i32* @y.64
  %1005 = sub i32 %1003, 1
  %1006 = mul i32 %1003, %1005
  %1007 = urem i32 %1006, 2
  %1008 = icmp eq i32 %1007, 0
  %1009 = icmp slt i32 %1004, 10
  %1010 = or i1 %1008, %1009
  br i1 %1010, label %originalBBpart2231, label %originalBB229alteredBB

originalBBpart2231:                               ; preds = %originalBB229
  br label %1011, !dbg !3817

1011:                                             ; preds = %originalBBpart2231, %987
  %1012 = load i32, i32* @x.63
  %1013 = load i32, i32* @y.64
  %1014 = sub i32 %1012, 1
  %1015 = mul i32 %1012, %1014
  %1016 = urem i32 %1015, 2
  %1017 = icmp eq i32 %1016, 0
  %1018 = icmp slt i32 %1013, 10
  %1019 = or i1 %1017, %1018
  br i1 %1019, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %1011, %originalBB233alteredBB
  %1020 = load i64, i64* %29, align 8, !dbg !3820
  %1021 = add i64 %1020, 1, !dbg !3820
  store i64 %1021, i64* %29, align 8, !dbg !3820
  %1022 = load i32, i32* @x.63
  %1023 = load i32, i32* @y.64
  %1024 = sub i32 %1022, 1
  %1025 = mul i32 %1022, %1024
  %1026 = urem i32 %1025, 2
  %1027 = icmp eq i32 %1026, 0
  %1028 = icmp slt i32 %1023, 10
  %1029 = or i1 %1027, %1028
  br i1 %1029, label %originalBBpart2239, label %originalBB233alteredBB

originalBBpart2239:                               ; preds = %originalBB233
  br label %1030, !dbg !3820

1030:                                             ; preds = %originalBBpart2239
  %1031 = load i32, i32* @x.63
  %1032 = load i32, i32* @y.64
  %1033 = sub i32 %1031, 1
  %1034 = mul i32 %1031, %1033
  %1035 = urem i32 %1034, 2
  %1036 = icmp eq i32 %1035, 0
  %1037 = icmp slt i32 %1032, 10
  %1038 = or i1 %1036, %1037
  br i1 %1038, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %1030, %originalBB241alteredBB
  %1039 = load i32, i32* @x.63
  %1040 = load i32, i32* @y.64
  %1041 = sub i32 %1039, 1
  %1042 = mul i32 %1039, %1041
  %1043 = urem i32 %1042, 2
  %1044 = icmp eq i32 %1043, 0
  %1045 = icmp slt i32 %1040, 10
  %1046 = or i1 %1044, %1045
  br i1 %1046, label %originalBBpart2243, label %originalBB241alteredBB

originalBBpart2243:                               ; preds = %originalBB241
  br label %1047, !dbg !3815

1047:                                             ; preds = %originalBBpart2243
  %1048 = load i32, i32* @x.63
  %1049 = load i32, i32* @y.64
  %1050 = sub i32 %1048, 1
  %1051 = mul i32 %1048, %1050
  %1052 = urem i32 %1051, 2
  %1053 = icmp eq i32 %1052, 0
  %1054 = icmp slt i32 %1049, 10
  %1055 = or i1 %1053, %1054
  br i1 %1055, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %1047, %originalBB245alteredBB
  %1056 = load i64, i64* %29, align 8, !dbg !3821
  %1057 = load i64, i64* %20, align 8, !dbg !3821
  %1058 = icmp ult i64 %1056, %1057, !dbg !3821
  %1059 = load i32, i32* @x.63
  %1060 = load i32, i32* @y.64
  %1061 = sub i32 %1059, 1
  %1062 = mul i32 %1059, %1061
  %1063 = urem i32 %1062, 2
  %1064 = icmp eq i32 %1063, 0
  %1065 = icmp slt i32 %1060, 10
  %1066 = or i1 %1064, %1065
  br i1 %1066, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br i1 %1058, label %1067, label %1087, !dbg !3824

1067:                                             ; preds = %originalBBpart2247
  %1068 = load i32, i32* @x.63
  %1069 = load i32, i32* @y.64
  %1070 = sub i32 %1068, 1
  %1071 = mul i32 %1068, %1070
  %1072 = urem i32 %1071, 2
  %1073 = icmp eq i32 %1072, 0
  %1074 = icmp slt i32 %1069, 10
  %1075 = or i1 %1073, %1074
  br i1 %1075, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %1067, %originalBB249alteredBB
  %1076 = load i8*, i8** %19, align 8, !dbg !3821
  %1077 = load i64, i64* %29, align 8, !dbg !3821
  %1078 = getelementptr inbounds i8, i8* %1076, i64 %1077, !dbg !3821
  store i8 36, i8* %1078, align 1, !dbg !3821
  %1079 = load i32, i32* @x.63
  %1080 = load i32, i32* @y.64
  %1081 = sub i32 %1079, 1
  %1082 = mul i32 %1079, %1081
  %1083 = urem i32 %1082, 2
  %1084 = icmp eq i32 %1083, 0
  %1085 = icmp slt i32 %1080, 10
  %1086 = or i1 %1084, %1085
  br i1 %1086, label %originalBBpart2251, label %originalBB249alteredBB

originalBBpart2251:                               ; preds = %originalBB249
  br label %1087, !dbg !3821

1087:                                             ; preds = %originalBBpart2251, %originalBBpart2247
  %1088 = load i32, i32* @x.63
  %1089 = load i32, i32* @y.64
  %1090 = sub i32 %1088, 1
  %1091 = mul i32 %1088, %1090
  %1092 = urem i32 %1091, 2
  %1093 = icmp eq i32 %1092, 0
  %1094 = icmp slt i32 %1089, 10
  %1095 = or i1 %1093, %1094
  br i1 %1095, label %originalBB253, label %originalBB253alteredBB

originalBB253:                                    ; preds = %1087, %originalBB253alteredBB
  %1096 = load i64, i64* %29, align 8, !dbg !3824
  %1097 = add i64 %1096, 1, !dbg !3824
  store i64 %1097, i64* %29, align 8, !dbg !3824
  %1098 = load i32, i32* @x.63
  %1099 = load i32, i32* @y.64
  %1100 = sub i32 %1098, 1
  %1101 = mul i32 %1098, %1100
  %1102 = urem i32 %1101, 2
  %1103 = icmp eq i32 %1102, 0
  %1104 = icmp slt i32 %1099, 10
  %1105 = or i1 %1103, %1104
  br i1 %1105, label %originalBBpart2261, label %originalBB253alteredBB

originalBBpart2261:                               ; preds = %originalBB253
  br label %1106, !dbg !3824

1106:                                             ; preds = %originalBBpart2261
  br label %1107, !dbg !3815

1107:                                             ; preds = %1106
  %1108 = load i32, i32* @x.63
  %1109 = load i32, i32* @y.64
  %1110 = sub i32 %1108, 1
  %1111 = mul i32 %1108, %1110
  %1112 = urem i32 %1111, 2
  %1113 = icmp eq i32 %1112, 0
  %1114 = icmp slt i32 %1109, 10
  %1115 = or i1 %1113, %1114
  br i1 %1115, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %1107, %originalBB263alteredBB
  %1116 = load i64, i64* %29, align 8, !dbg !3825
  %1117 = load i64, i64* %20, align 8, !dbg !3825
  %1118 = icmp ult i64 %1116, %1117, !dbg !3825
  %1119 = load i32, i32* @x.63
  %1120 = load i32, i32* @y.64
  %1121 = sub i32 %1119, 1
  %1122 = mul i32 %1119, %1121
  %1123 = urem i32 %1122, 2
  %1124 = icmp eq i32 %1123, 0
  %1125 = icmp slt i32 %1120, 10
  %1126 = or i1 %1124, %1125
  br i1 %1126, label %originalBBpart2265, label %originalBB263alteredBB

originalBBpart2265:                               ; preds = %originalBB263
  br i1 %1118, label %1127, label %1147, !dbg !3828

1127:                                             ; preds = %originalBBpart2265
  %1128 = load i32, i32* @x.63
  %1129 = load i32, i32* @y.64
  %1130 = sub i32 %1128, 1
  %1131 = mul i32 %1128, %1130
  %1132 = urem i32 %1131, 2
  %1133 = icmp eq i32 %1132, 0
  %1134 = icmp slt i32 %1129, 10
  %1135 = or i1 %1133, %1134
  br i1 %1135, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %1127, %originalBB267alteredBB
  %1136 = load i8*, i8** %19, align 8, !dbg !3825
  %1137 = load i64, i64* %29, align 8, !dbg !3825
  %1138 = getelementptr inbounds i8, i8* %1136, i64 %1137, !dbg !3825
  store i8 39, i8* %1138, align 1, !dbg !3825
  %1139 = load i32, i32* @x.63
  %1140 = load i32, i32* @y.64
  %1141 = sub i32 %1139, 1
  %1142 = mul i32 %1139, %1141
  %1143 = urem i32 %1142, 2
  %1144 = icmp eq i32 %1143, 0
  %1145 = icmp slt i32 %1140, 10
  %1146 = or i1 %1144, %1145
  br i1 %1146, label %originalBBpart2269, label %originalBB267alteredBB

originalBBpart2269:                               ; preds = %originalBB267
  br label %1147, !dbg !3825

1147:                                             ; preds = %originalBBpart2269, %originalBBpart2265
  %1148 = load i32, i32* @x.63
  %1149 = load i32, i32* @y.64
  %1150 = sub i32 %1148, 1
  %1151 = mul i32 %1148, %1150
  %1152 = urem i32 %1151, 2
  %1153 = icmp eq i32 %1152, 0
  %1154 = icmp slt i32 %1149, 10
  %1155 = or i1 %1153, %1154
  br i1 %1155, label %originalBB271, label %originalBB271alteredBB

originalBB271:                                    ; preds = %1147, %originalBB271alteredBB
  %1156 = load i64, i64* %29, align 8, !dbg !3828
  %1157 = add i64 %1156, 1, !dbg !3828
  store i64 %1157, i64* %29, align 8, !dbg !3828
  %1158 = load i32, i32* @x.63
  %1159 = load i32, i32* @y.64
  %1160 = sub i32 %1158, 1
  %1161 = mul i32 %1158, %1160
  %1162 = urem i32 %1161, 2
  %1163 = icmp eq i32 %1162, 0
  %1164 = icmp slt i32 %1159, 10
  %1165 = or i1 %1163, %1164
  br i1 %1165, label %originalBBpart2276, label %originalBB271alteredBB

originalBBpart2276:                               ; preds = %originalBB271
  br label %1166, !dbg !3828

1166:                                             ; preds = %originalBBpart2276
  %1167 = load i32, i32* @x.63
  %1168 = load i32, i32* @y.64
  %1169 = sub i32 %1167, 1
  %1170 = mul i32 %1167, %1169
  %1171 = urem i32 %1170, 2
  %1172 = icmp eq i32 %1171, 0
  %1173 = icmp slt i32 %1168, 10
  %1174 = or i1 %1172, %1173
  br i1 %1174, label %originalBB278, label %originalBB278alteredBB

originalBB278:                                    ; preds = %1166, %originalBB278alteredBB
  store i8 1, i8* %36, align 1, !dbg !3815
  %1175 = load i32, i32* @x.63
  %1176 = load i32, i32* @y.64
  %1177 = sub i32 %1175, 1
  %1178 = mul i32 %1175, %1177
  %1179 = urem i32 %1178, 2
  %1180 = icmp eq i32 %1179, 0
  %1181 = icmp slt i32 %1176, 10
  %1182 = or i1 %1180, %1181
  br i1 %1182, label %originalBBpart2280, label %originalBB278alteredBB

originalBBpart2280:                               ; preds = %originalBB278
  br label %1183, !dbg !3815

1183:                                             ; preds = %originalBBpart2280, %967, %originalBBpart2223
  %1184 = load i32, i32* @x.63
  %1185 = load i32, i32* @y.64
  %1186 = sub i32 %1184, 1
  %1187 = mul i32 %1184, %1186
  %1188 = urem i32 %1187, 2
  %1189 = icmp eq i32 %1188, 0
  %1190 = icmp slt i32 %1185, 10
  %1191 = or i1 %1189, %1190
  br i1 %1191, label %originalBB282, label %originalBB282alteredBB

originalBB282:                                    ; preds = %1183, %originalBB282alteredBB
  %1192 = load i32, i32* @x.63
  %1193 = load i32, i32* @y.64
  %1194 = sub i32 %1192, 1
  %1195 = mul i32 %1192, %1194
  %1196 = urem i32 %1195, 2
  %1197 = icmp eq i32 %1196, 0
  %1198 = icmp slt i32 %1193, 10
  %1199 = or i1 %1197, %1198
  br i1 %1199, label %originalBBpart2284, label %originalBB282alteredBB

originalBBpart2284:                               ; preds = %originalBB282
  br label %1200, !dbg !3812

1200:                                             ; preds = %originalBBpart2284
  %1201 = load i64, i64* %29, align 8, !dbg !3829
  %1202 = load i64, i64* %20, align 8, !dbg !3829
  %1203 = icmp ult i64 %1201, %1202, !dbg !3829
  br i1 %1203, label %1204, label %1224, !dbg !3832

1204:                                             ; preds = %1200
  %1205 = load i32, i32* @x.63
  %1206 = load i32, i32* @y.64
  %1207 = sub i32 %1205, 1
  %1208 = mul i32 %1205, %1207
  %1209 = urem i32 %1208, 2
  %1210 = icmp eq i32 %1209, 0
  %1211 = icmp slt i32 %1206, 10
  %1212 = or i1 %1210, %1211
  br i1 %1212, label %originalBB286, label %originalBB286alteredBB

originalBB286:                                    ; preds = %1204, %originalBB286alteredBB
  %1213 = load i8*, i8** %19, align 8, !dbg !3829
  %1214 = load i64, i64* %29, align 8, !dbg !3829
  %1215 = getelementptr inbounds i8, i8* %1213, i64 %1214, !dbg !3829
  store i8 92, i8* %1215, align 1, !dbg !3829
  %1216 = load i32, i32* @x.63
  %1217 = load i32, i32* @y.64
  %1218 = sub i32 %1216, 1
  %1219 = mul i32 %1216, %1218
  %1220 = urem i32 %1219, 2
  %1221 = icmp eq i32 %1220, 0
  %1222 = icmp slt i32 %1217, 10
  %1223 = or i1 %1221, %1222
  br i1 %1223, label %originalBBpart2288, label %originalBB286alteredBB

originalBBpart2288:                               ; preds = %originalBB286
  br label %1224, !dbg !3829

1224:                                             ; preds = %originalBBpart2288, %1200
  %1225 = load i32, i32* @x.63
  %1226 = load i32, i32* @y.64
  %1227 = sub i32 %1225, 1
  %1228 = mul i32 %1225, %1227
  %1229 = urem i32 %1228, 2
  %1230 = icmp eq i32 %1229, 0
  %1231 = icmp slt i32 %1226, 10
  %1232 = or i1 %1230, %1231
  br i1 %1232, label %originalBB290, label %originalBB290alteredBB

originalBB290:                                    ; preds = %1224, %originalBB290alteredBB
  %1233 = load i64, i64* %29, align 8, !dbg !3832
  %1234 = add i64 %1233, 1, !dbg !3832
  store i64 %1234, i64* %29, align 8, !dbg !3832
  %1235 = load i32, i32* @x.63
  %1236 = load i32, i32* @y.64
  %1237 = sub i32 %1235, 1
  %1238 = mul i32 %1235, %1237
  %1239 = urem i32 %1238, 2
  %1240 = icmp eq i32 %1239, 0
  %1241 = icmp slt i32 %1236, 10
  %1242 = or i1 %1240, %1241
  br i1 %1242, label %originalBBpart2297, label %originalBB290alteredBB

originalBBpart2297:                               ; preds = %originalBB290
  br label %1243, !dbg !3832

1243:                                             ; preds = %originalBBpart2297
  %1244 = load i32, i32* @x.63
  %1245 = load i32, i32* @y.64
  %1246 = sub i32 %1244, 1
  %1247 = mul i32 %1244, %1246
  %1248 = urem i32 %1247, 2
  %1249 = icmp eq i32 %1248, 0
  %1250 = icmp slt i32 %1245, 10
  %1251 = or i1 %1249, %1250
  br i1 %1251, label %originalBB299, label %originalBB299alteredBB

originalBB299:                                    ; preds = %1243, %originalBB299alteredBB
  %1252 = load i32, i32* @x.63
  %1253 = load i32, i32* @y.64
  %1254 = sub i32 %1252, 1
  %1255 = mul i32 %1252, %1254
  %1256 = urem i32 %1255, 2
  %1257 = icmp eq i32 %1256, 0
  %1258 = icmp slt i32 %1253, 10
  %1259 = or i1 %1257, %1258
  br i1 %1259, label %originalBBpart2301, label %originalBB299alteredBB

originalBBpart2301:                               ; preds = %originalBB299
  br label %1260, !dbg !3812

1260:                                             ; preds = %originalBBpart2301
  %1261 = load i32, i32* @x.63
  %1262 = load i32, i32* @y.64
  %1263 = sub i32 %1261, 1
  %1264 = mul i32 %1261, %1263
  %1265 = urem i32 %1264, 2
  %1266 = icmp eq i32 %1265, 0
  %1267 = icmp slt i32 %1262, 10
  %1268 = or i1 %1266, %1267
  br i1 %1268, label %originalBB303, label %originalBB303alteredBB

originalBB303:                                    ; preds = %1260, %originalBB303alteredBB
  %1269 = load i32, i32* %23, align 4, !dbg !3833
  %1270 = icmp ne i32 %1269, 2, !dbg !3835
  %1271 = load i32, i32* @x.63
  %1272 = load i32, i32* @y.64
  %1273 = sub i32 %1271, 1
  %1274 = mul i32 %1271, %1273
  %1275 = urem i32 %1274, 2
  %1276 = icmp eq i32 %1275, 0
  %1277 = icmp slt i32 %1272, 10
  %1278 = or i1 %1276, %1277
  br i1 %1278, label %originalBBpart2305, label %originalBB303alteredBB

originalBBpart2305:                               ; preds = %originalBB303
  br i1 %1270, label %1279, label %1485, !dbg !3836

1279:                                             ; preds = %originalBBpart2305
  %1280 = load i64, i64* %28, align 8, !dbg !3837
  %1281 = add i64 %1280, 1, !dbg !3838
  %1282 = load i64, i64* %22, align 8, !dbg !3839
  %1283 = icmp ult i64 %1281, %1282, !dbg !3840
  br i1 %1283, label %1284, label %1485, !dbg !3841

1284:                                             ; preds = %1279
  %1285 = load i32, i32* @x.63
  %1286 = load i32, i32* @y.64
  %1287 = sub i32 %1285, 1
  %1288 = mul i32 %1285, %1287
  %1289 = urem i32 %1288, 2
  %1290 = icmp eq i32 %1289, 0
  %1291 = icmp slt i32 %1286, 10
  %1292 = or i1 %1290, %1291
  br i1 %1292, label %originalBB307, label %originalBB307alteredBB

originalBB307:                                    ; preds = %1284, %originalBB307alteredBB
  %1293 = load i8*, i8** %21, align 8, !dbg !3842
  %1294 = load i64, i64* %28, align 8, !dbg !3843
  %1295 = add i64 %1294, 1, !dbg !3844
  %1296 = getelementptr inbounds i8, i8* %1293, i64 %1295, !dbg !3842
  %1297 = load i8, i8* %1296, align 1, !dbg !3842
  %1298 = sext i8 %1297 to i32, !dbg !3842
  %1299 = icmp sle i32 48, %1298, !dbg !3845
  %1300 = load i32, i32* @x.63
  %1301 = load i32, i32* @y.64
  %1302 = sub i32 %1300, 1
  %1303 = mul i32 %1300, %1302
  %1304 = urem i32 %1303, 2
  %1305 = icmp eq i32 %1304, 0
  %1306 = icmp slt i32 %1301, 10
  %1307 = or i1 %1305, %1306
  br i1 %1307, label %originalBBpart2317, label %originalBB307alteredBB

originalBBpart2317:                               ; preds = %originalBB307
  br i1 %1299, label %1308, label %1485, !dbg !3846

1308:                                             ; preds = %originalBBpart2317
  %1309 = load i32, i32* @x.63
  %1310 = load i32, i32* @y.64
  %1311 = sub i32 %1309, 1
  %1312 = mul i32 %1309, %1311
  %1313 = urem i32 %1312, 2
  %1314 = icmp eq i32 %1313, 0
  %1315 = icmp slt i32 %1310, 10
  %1316 = or i1 %1314, %1315
  br i1 %1316, label %originalBB319, label %originalBB319alteredBB

originalBB319:                                    ; preds = %1308, %originalBB319alteredBB
  %1317 = load i8*, i8** %21, align 8, !dbg !3847
  %1318 = load i64, i64* %28, align 8, !dbg !3848
  %1319 = add i64 %1318, 1, !dbg !3849
  %1320 = getelementptr inbounds i8, i8* %1317, i64 %1319, !dbg !3847
  %1321 = load i8, i8* %1320, align 1, !dbg !3847
  %1322 = sext i8 %1321 to i32, !dbg !3847
  %1323 = icmp sle i32 %1322, 57, !dbg !3850
  %1324 = load i32, i32* @x.63
  %1325 = load i32, i32* @y.64
  %1326 = sub i32 %1324, 1
  %1327 = mul i32 %1324, %1326
  %1328 = urem i32 %1327, 2
  %1329 = icmp eq i32 %1328, 0
  %1330 = icmp slt i32 %1325, 10
  %1331 = or i1 %1329, %1330
  br i1 %1331, label %originalBBpart2329, label %originalBB319alteredBB

originalBBpart2329:                               ; preds = %originalBB319
  br i1 %1323, label %1332, label %1485, !dbg !3851

1332:                                             ; preds = %originalBBpart2329
  %1333 = load i32, i32* @x.63
  %1334 = load i32, i32* @y.64
  %1335 = sub i32 %1333, 1
  %1336 = mul i32 %1333, %1335
  %1337 = urem i32 %1336, 2
  %1338 = icmp eq i32 %1337, 0
  %1339 = icmp slt i32 %1334, 10
  %1340 = or i1 %1338, %1339
  br i1 %1340, label %originalBB331, label %originalBB331alteredBB

originalBB331:                                    ; preds = %1332, %originalBB331alteredBB
  %1341 = load i32, i32* @x.63
  %1342 = load i32, i32* @y.64
  %1343 = sub i32 %1341, 1
  %1344 = mul i32 %1341, %1343
  %1345 = urem i32 %1344, 2
  %1346 = icmp eq i32 %1345, 0
  %1347 = icmp slt i32 %1342, 10
  %1348 = or i1 %1346, %1347
  br i1 %1348, label %originalBBpart2333, label %originalBB331alteredBB

originalBBpart2333:                               ; preds = %originalBB331
  br label %1349, !dbg !3852

1349:                                             ; preds = %originalBBpart2333
  %1350 = load i32, i32* @x.63
  %1351 = load i32, i32* @y.64
  %1352 = sub i32 %1350, 1
  %1353 = mul i32 %1350, %1352
  %1354 = urem i32 %1353, 2
  %1355 = icmp eq i32 %1354, 0
  %1356 = icmp slt i32 %1351, 10
  %1357 = or i1 %1355, %1356
  br i1 %1357, label %originalBB335, label %originalBB335alteredBB

originalBB335:                                    ; preds = %1349, %originalBB335alteredBB
  %1358 = load i64, i64* %29, align 8, !dbg !3854
  %1359 = load i64, i64* %20, align 8, !dbg !3854
  %1360 = icmp ult i64 %1358, %1359, !dbg !3854
  %1361 = load i32, i32* @x.63
  %1362 = load i32, i32* @y.64
  %1363 = sub i32 %1361, 1
  %1364 = mul i32 %1361, %1363
  %1365 = urem i32 %1364, 2
  %1366 = icmp eq i32 %1365, 0
  %1367 = icmp slt i32 %1362, 10
  %1368 = or i1 %1366, %1367
  br i1 %1368, label %originalBBpart2337, label %originalBB335alteredBB

originalBBpart2337:                               ; preds = %originalBB335
  br i1 %1360, label %1369, label %1389, !dbg !3857

1369:                                             ; preds = %originalBBpart2337
  %1370 = load i32, i32* @x.63
  %1371 = load i32, i32* @y.64
  %1372 = sub i32 %1370, 1
  %1373 = mul i32 %1370, %1372
  %1374 = urem i32 %1373, 2
  %1375 = icmp eq i32 %1374, 0
  %1376 = icmp slt i32 %1371, 10
  %1377 = or i1 %1375, %1376
  br i1 %1377, label %originalBB339, label %originalBB339alteredBB

originalBB339:                                    ; preds = %1369, %originalBB339alteredBB
  %1378 = load i8*, i8** %19, align 8, !dbg !3854
  %1379 = load i64, i64* %29, align 8, !dbg !3854
  %1380 = getelementptr inbounds i8, i8* %1378, i64 %1379, !dbg !3854
  store i8 48, i8* %1380, align 1, !dbg !3854
  %1381 = load i32, i32* @x.63
  %1382 = load i32, i32* @y.64
  %1383 = sub i32 %1381, 1
  %1384 = mul i32 %1381, %1383
  %1385 = urem i32 %1384, 2
  %1386 = icmp eq i32 %1385, 0
  %1387 = icmp slt i32 %1382, 10
  %1388 = or i1 %1386, %1387
  br i1 %1388, label %originalBBpart2341, label %originalBB339alteredBB

originalBBpart2341:                               ; preds = %originalBB339
  br label %1389, !dbg !3854

1389:                                             ; preds = %originalBBpart2341, %originalBBpart2337
  %1390 = load i32, i32* @x.63
  %1391 = load i32, i32* @y.64
  %1392 = sub i32 %1390, 1
  %1393 = mul i32 %1390, %1392
  %1394 = urem i32 %1393, 2
  %1395 = icmp eq i32 %1394, 0
  %1396 = icmp slt i32 %1391, 10
  %1397 = or i1 %1395, %1396
  br i1 %1397, label %originalBB343, label %originalBB343alteredBB

originalBB343:                                    ; preds = %1389, %originalBB343alteredBB
  %1398 = load i64, i64* %29, align 8, !dbg !3857
  %1399 = add i64 %1398, 1, !dbg !3857
  store i64 %1399, i64* %29, align 8, !dbg !3857
  %1400 = load i32, i32* @x.63
  %1401 = load i32, i32* @y.64
  %1402 = sub i32 %1400, 1
  %1403 = mul i32 %1400, %1402
  %1404 = urem i32 %1403, 2
  %1405 = icmp eq i32 %1404, 0
  %1406 = icmp slt i32 %1401, 10
  %1407 = or i1 %1405, %1406
  br i1 %1407, label %originalBBpart2348, label %originalBB343alteredBB

originalBBpart2348:                               ; preds = %originalBB343
  br label %1408, !dbg !3857

1408:                                             ; preds = %originalBBpart2348
  br label %1409, !dbg !3858

1409:                                             ; preds = %1408
  %1410 = load i32, i32* @x.63
  %1411 = load i32, i32* @y.64
  %1412 = sub i32 %1410, 1
  %1413 = mul i32 %1410, %1412
  %1414 = urem i32 %1413, 2
  %1415 = icmp eq i32 %1414, 0
  %1416 = icmp slt i32 %1411, 10
  %1417 = or i1 %1415, %1416
  br i1 %1417, label %originalBB350, label %originalBB350alteredBB

originalBB350:                                    ; preds = %1409, %originalBB350alteredBB
  %1418 = load i64, i64* %29, align 8, !dbg !3859
  %1419 = load i64, i64* %20, align 8, !dbg !3859
  %1420 = icmp ult i64 %1418, %1419, !dbg !3859
  %1421 = load i32, i32* @x.63
  %1422 = load i32, i32* @y.64
  %1423 = sub i32 %1421, 1
  %1424 = mul i32 %1421, %1423
  %1425 = urem i32 %1424, 2
  %1426 = icmp eq i32 %1425, 0
  %1427 = icmp slt i32 %1422, 10
  %1428 = or i1 %1426, %1427
  br i1 %1428, label %originalBBpart2352, label %originalBB350alteredBB

originalBBpart2352:                               ; preds = %originalBB350
  br i1 %1420, label %1429, label %1449, !dbg !3862

1429:                                             ; preds = %originalBBpart2352
  %1430 = load i32, i32* @x.63
  %1431 = load i32, i32* @y.64
  %1432 = sub i32 %1430, 1
  %1433 = mul i32 %1430, %1432
  %1434 = urem i32 %1433, 2
  %1435 = icmp eq i32 %1434, 0
  %1436 = icmp slt i32 %1431, 10
  %1437 = or i1 %1435, %1436
  br i1 %1437, label %originalBB354, label %originalBB354alteredBB

originalBB354:                                    ; preds = %1429, %originalBB354alteredBB
  %1438 = load i8*, i8** %19, align 8, !dbg !3859
  %1439 = load i64, i64* %29, align 8, !dbg !3859
  %1440 = getelementptr inbounds i8, i8* %1438, i64 %1439, !dbg !3859
  store i8 48, i8* %1440, align 1, !dbg !3859
  %1441 = load i32, i32* @x.63
  %1442 = load i32, i32* @y.64
  %1443 = sub i32 %1441, 1
  %1444 = mul i32 %1441, %1443
  %1445 = urem i32 %1444, 2
  %1446 = icmp eq i32 %1445, 0
  %1447 = icmp slt i32 %1442, 10
  %1448 = or i1 %1446, %1447
  br i1 %1448, label %originalBBpart2356, label %originalBB354alteredBB

originalBBpart2356:                               ; preds = %originalBB354
  br label %1449, !dbg !3859

1449:                                             ; preds = %originalBBpart2356, %originalBBpart2352
  %1450 = load i32, i32* @x.63
  %1451 = load i32, i32* @y.64
  %1452 = sub i32 %1450, 1
  %1453 = mul i32 %1450, %1452
  %1454 = urem i32 %1453, 2
  %1455 = icmp eq i32 %1454, 0
  %1456 = icmp slt i32 %1451, 10
  %1457 = or i1 %1455, %1456
  br i1 %1457, label %originalBB358, label %originalBB358alteredBB

originalBB358:                                    ; preds = %1449, %originalBB358alteredBB
  %1458 = load i64, i64* %29, align 8, !dbg !3862
  %1459 = add i64 %1458, 1, !dbg !3862
  store i64 %1459, i64* %29, align 8, !dbg !3862
  %1460 = load i32, i32* @x.63
  %1461 = load i32, i32* @y.64
  %1462 = sub i32 %1460, 1
  %1463 = mul i32 %1460, %1462
  %1464 = urem i32 %1463, 2
  %1465 = icmp eq i32 %1464, 0
  %1466 = icmp slt i32 %1461, 10
  %1467 = or i1 %1465, %1466
  br i1 %1467, label %originalBBpart2368, label %originalBB358alteredBB

originalBBpart2368:                               ; preds = %originalBB358
  br label %1468, !dbg !3862

1468:                                             ; preds = %originalBBpart2368
  %1469 = load i32, i32* @x.63
  %1470 = load i32, i32* @y.64
  %1471 = sub i32 %1469, 1
  %1472 = mul i32 %1469, %1471
  %1473 = urem i32 %1472, 2
  %1474 = icmp eq i32 %1473, 0
  %1475 = icmp slt i32 %1470, 10
  %1476 = or i1 %1474, %1475
  br i1 %1476, label %originalBB370, label %originalBB370alteredBB

originalBB370:                                    ; preds = %1468, %originalBB370alteredBB
  %1477 = load i32, i32* @x.63
  %1478 = load i32, i32* @y.64
  %1479 = sub i32 %1477, 1
  %1480 = mul i32 %1477, %1479
  %1481 = urem i32 %1480, 2
  %1482 = icmp eq i32 %1481, 0
  %1483 = icmp slt i32 %1478, 10
  %1484 = or i1 %1482, %1483
  br i1 %1484, label %originalBBpart2372, label %originalBB370alteredBB

originalBBpart2372:                               ; preds = %originalBB370
  br label %1485, !dbg !3863

1485:                                             ; preds = %originalBBpart2372, %originalBBpart2329, %originalBBpart2317, %1279, %originalBBpart2305
  %1486 = load i32, i32* @x.63
  %1487 = load i32, i32* @y.64
  %1488 = sub i32 %1486, 1
  %1489 = mul i32 %1486, %1488
  %1490 = urem i32 %1489, 2
  %1491 = icmp eq i32 %1490, 0
  %1492 = icmp slt i32 %1487, 10
  %1493 = or i1 %1491, %1492
  br i1 %1493, label %originalBB374, label %originalBB374alteredBB

originalBB374:                                    ; preds = %1485, %originalBB374alteredBB
  store i8 48, i8* %39, align 1, !dbg !3864
  %1494 = load i32, i32* @x.63
  %1495 = load i32, i32* @y.64
  %1496 = sub i32 %1494, 1
  %1497 = mul i32 %1494, %1496
  %1498 = urem i32 %1497, 2
  %1499 = icmp eq i32 %1498, 0
  %1500 = icmp slt i32 %1495, 10
  %1501 = or i1 %1499, %1500
  br i1 %1501, label %originalBBpart2376, label %originalBB374alteredBB

originalBBpart2376:                               ; preds = %originalBB374
  br label %1540, !dbg !3865

1502:                                             ; preds = %892
  %1503 = load i32, i32* @x.63
  %1504 = load i32, i32* @y.64
  %1505 = sub i32 %1503, 1
  %1506 = mul i32 %1503, %1505
  %1507 = urem i32 %1506, 2
  %1508 = icmp eq i32 %1507, 0
  %1509 = icmp slt i32 %1504, 10
  %1510 = or i1 %1508, %1509
  br i1 %1510, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %1502, %originalBB378alteredBB
  %1511 = load i32, i32* %24, align 4, !dbg !3866
  %1512 = and i32 %1511, 1, !dbg !3868
  %1513 = icmp ne i32 %1512, 0, !dbg !3868
  %1514 = load i32, i32* @x.63
  %1515 = load i32, i32* @y.64
  %1516 = sub i32 %1514, 1
  %1517 = mul i32 %1514, %1516
  %1518 = urem i32 %1517, 2
  %1519 = icmp eq i32 %1518, 0
  %1520 = icmp slt i32 %1515, 10
  %1521 = or i1 %1519, %1520
  br i1 %1521, label %originalBBpart2388, label %originalBB378alteredBB

originalBBpart2388:                               ; preds = %originalBB378
  br i1 %1513, label %1522, label %1523, !dbg !3869

1522:                                             ; preds = %originalBBpart2388
  br label %4985, !dbg !3870

1523:                                             ; preds = %originalBBpart2388
  %1524 = load i32, i32* @x.63
  %1525 = load i32, i32* @y.64
  %1526 = sub i32 %1524, 1
  %1527 = mul i32 %1524, %1526
  %1528 = urem i32 %1527, 2
  %1529 = icmp eq i32 %1528, 0
  %1530 = icmp slt i32 %1525, 10
  %1531 = or i1 %1529, %1530
  br i1 %1531, label %originalBB390, label %originalBB390alteredBB

originalBB390:                                    ; preds = %1523, %originalBB390alteredBB
  %1532 = load i32, i32* @x.63
  %1533 = load i32, i32* @y.64
  %1534 = sub i32 %1532, 1
  %1535 = mul i32 %1532, %1534
  %1536 = urem i32 %1535, 2
  %1537 = icmp eq i32 %1536, 0
  %1538 = icmp slt i32 %1533, 10
  %1539 = or i1 %1537, %1538
  br i1 %1539, label %originalBBpart2392, label %originalBB390alteredBB

originalBBpart2392:                               ; preds = %originalBB390
  br label %1540

1540:                                             ; preds = %originalBBpart2392, %originalBBpart2376
  %1541 = load i32, i32* @x.63
  %1542 = load i32, i32* @y.64
  %1543 = sub i32 %1541, 1
  %1544 = mul i32 %1541, %1543
  %1545 = urem i32 %1544, 2
  %1546 = icmp eq i32 %1545, 0
  %1547 = icmp slt i32 %1542, 10
  %1548 = or i1 %1546, %1547
  br i1 %1548, label %originalBB394, label %originalBB394alteredBB

originalBB394:                                    ; preds = %1540, %originalBB394alteredBB
  %1549 = load i32, i32* @x.63
  %1550 = load i32, i32* @y.64
  %1551 = sub i32 %1549, 1
  %1552 = mul i32 %1549, %1551
  %1553 = urem i32 %1552, 2
  %1554 = icmp eq i32 %1553, 0
  %1555 = icmp slt i32 %1550, 10
  %1556 = or i1 %1554, %1555
  br i1 %1556, label %originalBBpart2396, label %originalBB394alteredBB

originalBBpart2396:                               ; preds = %originalBB394
  br label %4345, !dbg !3871

1557:                                             ; preds = %885
  %1558 = load i32, i32* @x.63
  %1559 = load i32, i32* @y.64
  %1560 = sub i32 %1558, 1
  %1561 = mul i32 %1558, %1560
  %1562 = urem i32 %1561, 2
  %1563 = icmp eq i32 %1562, 0
  %1564 = icmp slt i32 %1559, 10
  %1565 = or i1 %1563, %1564
  br i1 %1565, label %originalBB398, label %originalBB398alteredBB

originalBB398:                                    ; preds = %1557, %originalBB398alteredBB
  %1566 = load i32, i32* %23, align 4, !dbg !3872
  %1567 = load i32, i32* @x.63
  %1568 = load i32, i32* @y.64
  %1569 = sub i32 %1567, 1
  %1570 = mul i32 %1567, %1569
  %1571 = urem i32 %1570, 2
  %1572 = icmp eq i32 %1571, 0
  %1573 = icmp slt i32 %1568, 10
  %1574 = or i1 %1572, %1573
  br i1 %1574, label %originalBBpart2400, label %originalBB398alteredBB

originalBBpart2400:                               ; preds = %originalBB398
  switch i32 %1566, label %2019 [
    i32 2, label %1575
    i32 5, label %1612
  ], !dbg !3873

1575:                                             ; preds = %originalBBpart2400
  %1576 = load i32, i32* @x.63
  %1577 = load i32, i32* @y.64
  %1578 = sub i32 %1576, 1
  %1579 = mul i32 %1576, %1578
  %1580 = urem i32 %1579, 2
  %1581 = icmp eq i32 %1580, 0
  %1582 = icmp slt i32 %1577, 10
  %1583 = or i1 %1581, %1582
  br i1 %1583, label %originalBB402, label %originalBB402alteredBB

originalBB402:                                    ; preds = %1575, %originalBB402alteredBB
  %1584 = load i8, i8* %35, align 1, !dbg !3874
  %1585 = trunc i8 %1584 to i1, !dbg !3874
  %1586 = load i32, i32* @x.63
  %1587 = load i32, i32* @y.64
  %1588 = sub i32 %1586, 1
  %1589 = mul i32 %1586, %1588
  %1590 = urem i32 %1589, 2
  %1591 = icmp eq i32 %1590, 0
  %1592 = icmp slt i32 %1587, 10
  %1593 = or i1 %1591, %1592
  br i1 %1593, label %originalBBpart2404, label %originalBB402alteredBB

originalBBpart2404:                               ; preds = %originalBB402
  br i1 %1585, label %1594, label %1611, !dbg !3877

1594:                                             ; preds = %originalBBpart2404
  %1595 = load i32, i32* @x.63
  %1596 = load i32, i32* @y.64
  %1597 = sub i32 %1595, 1
  %1598 = mul i32 %1595, %1597
  %1599 = urem i32 %1598, 2
  %1600 = icmp eq i32 %1599, 0
  %1601 = icmp slt i32 %1596, 10
  %1602 = or i1 %1600, %1601
  br i1 %1602, label %originalBB406, label %originalBB406alteredBB

originalBB406:                                    ; preds = %1594, %originalBB406alteredBB
  %1603 = load i32, i32* @x.63
  %1604 = load i32, i32* @y.64
  %1605 = sub i32 %1603, 1
  %1606 = mul i32 %1603, %1605
  %1607 = urem i32 %1606, 2
  %1608 = icmp eq i32 %1607, 0
  %1609 = icmp slt i32 %1604, 10
  %1610 = or i1 %1608, %1609
  br i1 %1610, label %originalBBpart2408, label %originalBB406alteredBB

originalBBpart2408:                               ; preds = %originalBB406
  br label %5422, !dbg !3878

1611:                                             ; preds = %originalBBpart2404
  br label %2036, !dbg !3879

1612:                                             ; preds = %originalBBpart2400
  %1613 = load i32, i32* @x.63
  %1614 = load i32, i32* @y.64
  %1615 = sub i32 %1613, 1
  %1616 = mul i32 %1613, %1615
  %1617 = urem i32 %1616, 2
  %1618 = icmp eq i32 %1617, 0
  %1619 = icmp slt i32 %1614, 10
  %1620 = or i1 %1618, %1619
  br i1 %1620, label %originalBB410, label %originalBB410alteredBB

originalBB410:                                    ; preds = %1612, %originalBB410alteredBB
  %1621 = load i32, i32* %24, align 4, !dbg !3880
  %1622 = and i32 %1621, 4, !dbg !3882
  %1623 = icmp ne i32 %1622, 0, !dbg !3882
  %1624 = load i32, i32* @x.63
  %1625 = load i32, i32* @y.64
  %1626 = sub i32 %1624, 1
  %1627 = mul i32 %1624, %1626
  %1628 = urem i32 %1627, 2
  %1629 = icmp eq i32 %1628, 0
  %1630 = icmp slt i32 %1625, 10
  %1631 = or i1 %1629, %1630
  br i1 %1631, label %originalBBpart2419, label %originalBB410alteredBB

originalBBpart2419:                               ; preds = %originalBB410
  br i1 %1623, label %1632, label %2018, !dbg !3883

1632:                                             ; preds = %originalBBpart2419
  %1633 = load i32, i32* @x.63
  %1634 = load i32, i32* @y.64
  %1635 = sub i32 %1633, 1
  %1636 = mul i32 %1633, %1635
  %1637 = urem i32 %1636, 2
  %1638 = icmp eq i32 %1637, 0
  %1639 = icmp slt i32 %1634, 10
  %1640 = or i1 %1638, %1639
  br i1 %1640, label %originalBB421, label %originalBB421alteredBB

originalBB421:                                    ; preds = %1632, %originalBB421alteredBB
  %1641 = load i64, i64* %28, align 8, !dbg !3884
  %1642 = add i64 %1641, 2, !dbg !3885
  %1643 = load i64, i64* %22, align 8, !dbg !3886
  %1644 = icmp ult i64 %1642, %1643, !dbg !3887
  %1645 = load i32, i32* @x.63
  %1646 = load i32, i32* @y.64
  %1647 = sub i32 %1645, 1
  %1648 = mul i32 %1645, %1647
  %1649 = urem i32 %1648, 2
  %1650 = icmp eq i32 %1649, 0
  %1651 = icmp slt i32 %1646, 10
  %1652 = or i1 %1650, %1651
  br i1 %1652, label %originalBBpart2434, label %originalBB421alteredBB

originalBBpart2434:                               ; preds = %originalBB421
  br i1 %1644, label %1653, label %2018, !dbg !3888

1653:                                             ; preds = %originalBBpart2434
  %1654 = load i8*, i8** %21, align 8, !dbg !3889
  %1655 = load i64, i64* %28, align 8, !dbg !3890
  %1656 = add i64 %1655, 1, !dbg !3891
  %1657 = getelementptr inbounds i8, i8* %1654, i64 %1656, !dbg !3889
  %1658 = load i8, i8* %1657, align 1, !dbg !3889
  %1659 = sext i8 %1658 to i32, !dbg !3889
  %1660 = icmp eq i32 %1659, 63, !dbg !3892
  br i1 %1660, label %1661, label %2018, !dbg !3893

1661:                                             ; preds = %1653
  %1662 = load i32, i32* @x.63
  %1663 = load i32, i32* @y.64
  %1664 = sub i32 %1662, 1
  %1665 = mul i32 %1662, %1664
  %1666 = urem i32 %1665, 2
  %1667 = icmp eq i32 %1666, 0
  %1668 = icmp slt i32 %1663, 10
  %1669 = or i1 %1667, %1668
  br i1 %1669, label %originalBB436, label %originalBB436alteredBB

originalBB436:                                    ; preds = %1661, %originalBB436alteredBB
  %1670 = load i8*, i8** %21, align 8, !dbg !3894
  %1671 = load i64, i64* %28, align 8, !dbg !3895
  %1672 = add i64 %1671, 2, !dbg !3896
  %1673 = getelementptr inbounds i8, i8* %1670, i64 %1672, !dbg !3894
  %1674 = load i8, i8* %1673, align 1, !dbg !3894
  %1675 = sext i8 %1674 to i32, !dbg !3894
  %1676 = load i32, i32* @x.63
  %1677 = load i32, i32* @y.64
  %1678 = sub i32 %1676, 1
  %1679 = mul i32 %1676, %1678
  %1680 = urem i32 %1679, 2
  %1681 = icmp eq i32 %1680, 0
  %1682 = icmp slt i32 %1677, 10
  %1683 = or i1 %1681, %1682
  br i1 %1683, label %originalBBpart2440, label %originalBB436alteredBB

originalBBpart2440:                               ; preds = %originalBB436
  switch i32 %1675, label %2000 [
    i32 33, label %1684
    i32 39, label %1684
    i32 40, label %1684
    i32 41, label %1684
    i32 45, label %1684
    i32 47, label %1684
    i32 60, label %1684
    i32 61, label %1684
    i32 62, label %1684
  ], !dbg !3897

1684:                                             ; preds = %originalBBpart2440, %originalBBpart2440, %originalBBpart2440, %originalBBpart2440, %originalBBpart2440, %originalBBpart2440, %originalBBpart2440, %originalBBpart2440, %originalBBpart2440
  %1685 = load i32, i32* @x.63
  %1686 = load i32, i32* @y.64
  %1687 = sub i32 %1685, 1
  %1688 = mul i32 %1685, %1687
  %1689 = urem i32 %1688, 2
  %1690 = icmp eq i32 %1689, 0
  %1691 = icmp slt i32 %1686, 10
  %1692 = or i1 %1690, %1691
  br i1 %1692, label %originalBB442, label %originalBB442alteredBB

originalBB442:                                    ; preds = %1684, %originalBB442alteredBB
  %1693 = load i8, i8* %35, align 1, !dbg !3898
  %1694 = trunc i8 %1693 to i1, !dbg !3898
  %1695 = load i32, i32* @x.63
  %1696 = load i32, i32* @y.64
  %1697 = sub i32 %1695, 1
  %1698 = mul i32 %1695, %1697
  %1699 = urem i32 %1698, 2
  %1700 = icmp eq i32 %1699, 0
  %1701 = icmp slt i32 %1696, 10
  %1702 = or i1 %1700, %1701
  br i1 %1702, label %originalBBpart2444, label %originalBB442alteredBB

originalBBpart2444:                               ; preds = %originalBB442
  br i1 %1694, label %1703, label %1704, !dbg !3901

1703:                                             ; preds = %originalBBpart2444
  br label %5422, !dbg !3902

1704:                                             ; preds = %originalBBpart2444
  %1705 = load i32, i32* @x.63
  %1706 = load i32, i32* @y.64
  %1707 = sub i32 %1705, 1
  %1708 = mul i32 %1705, %1707
  %1709 = urem i32 %1708, 2
  %1710 = icmp eq i32 %1709, 0
  %1711 = icmp slt i32 %1706, 10
  %1712 = or i1 %1710, %1711
  br i1 %1712, label %originalBB446, label %originalBB446alteredBB

originalBB446:                                    ; preds = %1704, %originalBB446alteredBB
  %1713 = load i8*, i8** %21, align 8, !dbg !3903
  %1714 = load i64, i64* %28, align 8, !dbg !3904
  %1715 = add i64 %1714, 2, !dbg !3905
  %1716 = getelementptr inbounds i8, i8* %1713, i64 %1715, !dbg !3903
  %1717 = load i8, i8* %1716, align 1, !dbg !3903
  store i8 %1717, i8* %39, align 1, !dbg !3906
  %1718 = load i64, i64* %28, align 8, !dbg !3907
  %1719 = add i64 %1718, 2, !dbg !3907
  store i64 %1719, i64* %28, align 8, !dbg !3907
  %1720 = load i32, i32* @x.63
  %1721 = load i32, i32* @y.64
  %1722 = sub i32 %1720, 1
  %1723 = mul i32 %1720, %1722
  %1724 = urem i32 %1723, 2
  %1725 = icmp eq i32 %1724, 0
  %1726 = icmp slt i32 %1721, 10
  %1727 = or i1 %1725, %1726
  br i1 %1727, label %originalBBpart2465, label %originalBB446alteredBB

originalBBpart2465:                               ; preds = %originalBB446
  br label %1728, !dbg !3908

1728:                                             ; preds = %originalBBpart2465
  %1729 = load i32, i32* @x.63
  %1730 = load i32, i32* @y.64
  %1731 = sub i32 %1729, 1
  %1732 = mul i32 %1729, %1731
  %1733 = urem i32 %1732, 2
  %1734 = icmp eq i32 %1733, 0
  %1735 = icmp slt i32 %1730, 10
  %1736 = or i1 %1734, %1735
  br i1 %1736, label %originalBB467, label %originalBB467alteredBB

originalBB467:                                    ; preds = %1728, %originalBB467alteredBB
  %1737 = load i64, i64* %29, align 8, !dbg !3909
  %1738 = load i64, i64* %20, align 8, !dbg !3909
  %1739 = icmp ult i64 %1737, %1738, !dbg !3909
  %1740 = load i32, i32* @x.63
  %1741 = load i32, i32* @y.64
  %1742 = sub i32 %1740, 1
  %1743 = mul i32 %1740, %1742
  %1744 = urem i32 %1743, 2
  %1745 = icmp eq i32 %1744, 0
  %1746 = icmp slt i32 %1741, 10
  %1747 = or i1 %1745, %1746
  br i1 %1747, label %originalBBpart2469, label %originalBB467alteredBB

originalBBpart2469:                               ; preds = %originalBB467
  br i1 %1739, label %1748, label %1768, !dbg !3912

1748:                                             ; preds = %originalBBpart2469
  %1749 = load i32, i32* @x.63
  %1750 = load i32, i32* @y.64
  %1751 = sub i32 %1749, 1
  %1752 = mul i32 %1749, %1751
  %1753 = urem i32 %1752, 2
  %1754 = icmp eq i32 %1753, 0
  %1755 = icmp slt i32 %1750, 10
  %1756 = or i1 %1754, %1755
  br i1 %1756, label %originalBB471, label %originalBB471alteredBB

originalBB471:                                    ; preds = %1748, %originalBB471alteredBB
  %1757 = load i8*, i8** %19, align 8, !dbg !3909
  %1758 = load i64, i64* %29, align 8, !dbg !3909
  %1759 = getelementptr inbounds i8, i8* %1757, i64 %1758, !dbg !3909
  store i8 63, i8* %1759, align 1, !dbg !3909
  %1760 = load i32, i32* @x.63
  %1761 = load i32, i32* @y.64
  %1762 = sub i32 %1760, 1
  %1763 = mul i32 %1760, %1762
  %1764 = urem i32 %1763, 2
  %1765 = icmp eq i32 %1764, 0
  %1766 = icmp slt i32 %1761, 10
  %1767 = or i1 %1765, %1766
  br i1 %1767, label %originalBBpart2473, label %originalBB471alteredBB

originalBBpart2473:                               ; preds = %originalBB471
  br label %1768, !dbg !3909

1768:                                             ; preds = %originalBBpart2473, %originalBBpart2469
  %1769 = load i32, i32* @x.63
  %1770 = load i32, i32* @y.64
  %1771 = sub i32 %1769, 1
  %1772 = mul i32 %1769, %1771
  %1773 = urem i32 %1772, 2
  %1774 = icmp eq i32 %1773, 0
  %1775 = icmp slt i32 %1770, 10
  %1776 = or i1 %1774, %1775
  br i1 %1776, label %originalBB475, label %originalBB475alteredBB

originalBB475:                                    ; preds = %1768, %originalBB475alteredBB
  %1777 = load i64, i64* %29, align 8, !dbg !3912
  %1778 = add i64 %1777, 1, !dbg !3912
  store i64 %1778, i64* %29, align 8, !dbg !3912
  %1779 = load i32, i32* @x.63
  %1780 = load i32, i32* @y.64
  %1781 = sub i32 %1779, 1
  %1782 = mul i32 %1779, %1781
  %1783 = urem i32 %1782, 2
  %1784 = icmp eq i32 %1783, 0
  %1785 = icmp slt i32 %1780, 10
  %1786 = or i1 %1784, %1785
  br i1 %1786, label %originalBBpart2485, label %originalBB475alteredBB

originalBBpart2485:                               ; preds = %originalBB475
  br label %1787, !dbg !3912

1787:                                             ; preds = %originalBBpart2485
  %1788 = load i32, i32* @x.63
  %1789 = load i32, i32* @y.64
  %1790 = sub i32 %1788, 1
  %1791 = mul i32 %1788, %1790
  %1792 = urem i32 %1791, 2
  %1793 = icmp eq i32 %1792, 0
  %1794 = icmp slt i32 %1789, 10
  %1795 = or i1 %1793, %1794
  br i1 %1795, label %originalBB487, label %originalBB487alteredBB

originalBB487:                                    ; preds = %1787, %originalBB487alteredBB
  %1796 = load i32, i32* @x.63
  %1797 = load i32, i32* @y.64
  %1798 = sub i32 %1796, 1
  %1799 = mul i32 %1796, %1798
  %1800 = urem i32 %1799, 2
  %1801 = icmp eq i32 %1800, 0
  %1802 = icmp slt i32 %1797, 10
  %1803 = or i1 %1801, %1802
  br i1 %1803, label %originalBBpart2489, label %originalBB487alteredBB

originalBBpart2489:                               ; preds = %originalBB487
  br label %1804, !dbg !3913

1804:                                             ; preds = %originalBBpart2489
  %1805 = load i32, i32* @x.63
  %1806 = load i32, i32* @y.64
  %1807 = sub i32 %1805, 1
  %1808 = mul i32 %1805, %1807
  %1809 = urem i32 %1808, 2
  %1810 = icmp eq i32 %1809, 0
  %1811 = icmp slt i32 %1806, 10
  %1812 = or i1 %1810, %1811
  br i1 %1812, label %originalBB491, label %originalBB491alteredBB

originalBB491:                                    ; preds = %1804, %originalBB491alteredBB
  %1813 = load i64, i64* %29, align 8, !dbg !3914
  %1814 = load i64, i64* %20, align 8, !dbg !3914
  %1815 = icmp ult i64 %1813, %1814, !dbg !3914
  %1816 = load i32, i32* @x.63
  %1817 = load i32, i32* @y.64
  %1818 = sub i32 %1816, 1
  %1819 = mul i32 %1816, %1818
  %1820 = urem i32 %1819, 2
  %1821 = icmp eq i32 %1820, 0
  %1822 = icmp slt i32 %1817, 10
  %1823 = or i1 %1821, %1822
  br i1 %1823, label %originalBBpart2493, label %originalBB491alteredBB

originalBBpart2493:                               ; preds = %originalBB491
  br i1 %1815, label %1824, label %1844, !dbg !3917

1824:                                             ; preds = %originalBBpart2493
  %1825 = load i32, i32* @x.63
  %1826 = load i32, i32* @y.64
  %1827 = sub i32 %1825, 1
  %1828 = mul i32 %1825, %1827
  %1829 = urem i32 %1828, 2
  %1830 = icmp eq i32 %1829, 0
  %1831 = icmp slt i32 %1826, 10
  %1832 = or i1 %1830, %1831
  br i1 %1832, label %originalBB495, label %originalBB495alteredBB

originalBB495:                                    ; preds = %1824, %originalBB495alteredBB
  %1833 = load i8*, i8** %19, align 8, !dbg !3914
  %1834 = load i64, i64* %29, align 8, !dbg !3914
  %1835 = getelementptr inbounds i8, i8* %1833, i64 %1834, !dbg !3914
  store i8 34, i8* %1835, align 1, !dbg !3914
  %1836 = load i32, i32* @x.63
  %1837 = load i32, i32* @y.64
  %1838 = sub i32 %1836, 1
  %1839 = mul i32 %1836, %1838
  %1840 = urem i32 %1839, 2
  %1841 = icmp eq i32 %1840, 0
  %1842 = icmp slt i32 %1837, 10
  %1843 = or i1 %1841, %1842
  br i1 %1843, label %originalBBpart2497, label %originalBB495alteredBB

originalBBpart2497:                               ; preds = %originalBB495
  br label %1844, !dbg !3914

1844:                                             ; preds = %originalBBpart2497, %originalBBpart2493
  %1845 = load i64, i64* %29, align 8, !dbg !3917
  %1846 = add i64 %1845, 1, !dbg !3917
  store i64 %1846, i64* %29, align 8, !dbg !3917
  br label %1847, !dbg !3917

1847:                                             ; preds = %1844
  %1848 = load i32, i32* @x.63
  %1849 = load i32, i32* @y.64
  %1850 = sub i32 %1848, 1
  %1851 = mul i32 %1848, %1850
  %1852 = urem i32 %1851, 2
  %1853 = icmp eq i32 %1852, 0
  %1854 = icmp slt i32 %1849, 10
  %1855 = or i1 %1853, %1854
  br i1 %1855, label %originalBB499, label %originalBB499alteredBB

originalBB499:                                    ; preds = %1847, %originalBB499alteredBB
  %1856 = load i32, i32* @x.63
  %1857 = load i32, i32* @y.64
  %1858 = sub i32 %1856, 1
  %1859 = mul i32 %1856, %1858
  %1860 = urem i32 %1859, 2
  %1861 = icmp eq i32 %1860, 0
  %1862 = icmp slt i32 %1857, 10
  %1863 = or i1 %1861, %1862
  br i1 %1863, label %originalBBpart2501, label %originalBB499alteredBB

originalBBpart2501:                               ; preds = %originalBB499
  br label %1864, !dbg !3918

1864:                                             ; preds = %originalBBpart2501
  %1865 = load i32, i32* @x.63
  %1866 = load i32, i32* @y.64
  %1867 = sub i32 %1865, 1
  %1868 = mul i32 %1865, %1867
  %1869 = urem i32 %1868, 2
  %1870 = icmp eq i32 %1869, 0
  %1871 = icmp slt i32 %1866, 10
  %1872 = or i1 %1870, %1871
  br i1 %1872, label %originalBB503, label %originalBB503alteredBB

originalBB503:                                    ; preds = %1864, %originalBB503alteredBB
  %1873 = load i64, i64* %29, align 8, !dbg !3919
  %1874 = load i64, i64* %20, align 8, !dbg !3919
  %1875 = icmp ult i64 %1873, %1874, !dbg !3919
  %1876 = load i32, i32* @x.63
  %1877 = load i32, i32* @y.64
  %1878 = sub i32 %1876, 1
  %1879 = mul i32 %1876, %1878
  %1880 = urem i32 %1879, 2
  %1881 = icmp eq i32 %1880, 0
  %1882 = icmp slt i32 %1877, 10
  %1883 = or i1 %1881, %1882
  br i1 %1883, label %originalBBpart2505, label %originalBB503alteredBB

originalBBpart2505:                               ; preds = %originalBB503
  br i1 %1875, label %1884, label %1904, !dbg !3922

1884:                                             ; preds = %originalBBpart2505
  %1885 = load i32, i32* @x.63
  %1886 = load i32, i32* @y.64
  %1887 = sub i32 %1885, 1
  %1888 = mul i32 %1885, %1887
  %1889 = urem i32 %1888, 2
  %1890 = icmp eq i32 %1889, 0
  %1891 = icmp slt i32 %1886, 10
  %1892 = or i1 %1890, %1891
  br i1 %1892, label %originalBB507, label %originalBB507alteredBB

originalBB507:                                    ; preds = %1884, %originalBB507alteredBB
  %1893 = load i8*, i8** %19, align 8, !dbg !3919
  %1894 = load i64, i64* %29, align 8, !dbg !3919
  %1895 = getelementptr inbounds i8, i8* %1893, i64 %1894, !dbg !3919
  store i8 34, i8* %1895, align 1, !dbg !3919
  %1896 = load i32, i32* @x.63
  %1897 = load i32, i32* @y.64
  %1898 = sub i32 %1896, 1
  %1899 = mul i32 %1896, %1898
  %1900 = urem i32 %1899, 2
  %1901 = icmp eq i32 %1900, 0
  %1902 = icmp slt i32 %1897, 10
  %1903 = or i1 %1901, %1902
  br i1 %1903, label %originalBBpart2509, label %originalBB507alteredBB

originalBBpart2509:                               ; preds = %originalBB507
  br label %1904, !dbg !3919

1904:                                             ; preds = %originalBBpart2509, %originalBBpart2505
  %1905 = load i64, i64* %29, align 8, !dbg !3922
  %1906 = add i64 %1905, 1, !dbg !3922
  store i64 %1906, i64* %29, align 8, !dbg !3922
  br label %1907, !dbg !3922

1907:                                             ; preds = %1904
  %1908 = load i32, i32* @x.63
  %1909 = load i32, i32* @y.64
  %1910 = sub i32 %1908, 1
  %1911 = mul i32 %1908, %1910
  %1912 = urem i32 %1911, 2
  %1913 = icmp eq i32 %1912, 0
  %1914 = icmp slt i32 %1909, 10
  %1915 = or i1 %1913, %1914
  br i1 %1915, label %originalBB511, label %originalBB511alteredBB

originalBB511:                                    ; preds = %1907, %originalBB511alteredBB
  %1916 = load i32, i32* @x.63
  %1917 = load i32, i32* @y.64
  %1918 = sub i32 %1916, 1
  %1919 = mul i32 %1916, %1918
  %1920 = urem i32 %1919, 2
  %1921 = icmp eq i32 %1920, 0
  %1922 = icmp slt i32 %1917, 10
  %1923 = or i1 %1921, %1922
  br i1 %1923, label %originalBBpart2513, label %originalBB511alteredBB

originalBBpart2513:                               ; preds = %originalBB511
  br label %1924, !dbg !3923

1924:                                             ; preds = %originalBBpart2513
  %1925 = load i32, i32* @x.63
  %1926 = load i32, i32* @y.64
  %1927 = sub i32 %1925, 1
  %1928 = mul i32 %1925, %1927
  %1929 = urem i32 %1928, 2
  %1930 = icmp eq i32 %1929, 0
  %1931 = icmp slt i32 %1926, 10
  %1932 = or i1 %1930, %1931
  br i1 %1932, label %originalBB515, label %originalBB515alteredBB

originalBB515:                                    ; preds = %1924, %originalBB515alteredBB
  %1933 = load i64, i64* %29, align 8, !dbg !3924
  %1934 = load i64, i64* %20, align 8, !dbg !3924
  %1935 = icmp ult i64 %1933, %1934, !dbg !3924
  %1936 = load i32, i32* @x.63
  %1937 = load i32, i32* @y.64
  %1938 = sub i32 %1936, 1
  %1939 = mul i32 %1936, %1938
  %1940 = urem i32 %1939, 2
  %1941 = icmp eq i32 %1940, 0
  %1942 = icmp slt i32 %1937, 10
  %1943 = or i1 %1941, %1942
  br i1 %1943, label %originalBBpart2517, label %originalBB515alteredBB

originalBBpart2517:                               ; preds = %originalBB515
  br i1 %1935, label %1944, label %1964, !dbg !3927

1944:                                             ; preds = %originalBBpart2517
  %1945 = load i32, i32* @x.63
  %1946 = load i32, i32* @y.64
  %1947 = sub i32 %1945, 1
  %1948 = mul i32 %1945, %1947
  %1949 = urem i32 %1948, 2
  %1950 = icmp eq i32 %1949, 0
  %1951 = icmp slt i32 %1946, 10
  %1952 = or i1 %1950, %1951
  br i1 %1952, label %originalBB519, label %originalBB519alteredBB

originalBB519:                                    ; preds = %1944, %originalBB519alteredBB
  %1953 = load i8*, i8** %19, align 8, !dbg !3924
  %1954 = load i64, i64* %29, align 8, !dbg !3924
  %1955 = getelementptr inbounds i8, i8* %1953, i64 %1954, !dbg !3924
  store i8 63, i8* %1955, align 1, !dbg !3924
  %1956 = load i32, i32* @x.63
  %1957 = load i32, i32* @y.64
  %1958 = sub i32 %1956, 1
  %1959 = mul i32 %1956, %1958
  %1960 = urem i32 %1959, 2
  %1961 = icmp eq i32 %1960, 0
  %1962 = icmp slt i32 %1957, 10
  %1963 = or i1 %1961, %1962
  br i1 %1963, label %originalBBpart2521, label %originalBB519alteredBB

originalBBpart2521:                               ; preds = %originalBB519
  br label %1964, !dbg !3924

1964:                                             ; preds = %originalBBpart2521, %originalBBpart2517
  %1965 = load i32, i32* @x.63
  %1966 = load i32, i32* @y.64
  %1967 = sub i32 %1965, 1
  %1968 = mul i32 %1965, %1967
  %1969 = urem i32 %1968, 2
  %1970 = icmp eq i32 %1969, 0
  %1971 = icmp slt i32 %1966, 10
  %1972 = or i1 %1970, %1971
  br i1 %1972, label %originalBB523, label %originalBB523alteredBB

originalBB523:                                    ; preds = %1964, %originalBB523alteredBB
  %1973 = load i64, i64* %29, align 8, !dbg !3927
  %1974 = add i64 %1973, 1, !dbg !3927
  store i64 %1974, i64* %29, align 8, !dbg !3927
  %1975 = load i32, i32* @x.63
  %1976 = load i32, i32* @y.64
  %1977 = sub i32 %1975, 1
  %1978 = mul i32 %1975, %1977
  %1979 = urem i32 %1978, 2
  %1980 = icmp eq i32 %1979, 0
  %1981 = icmp slt i32 %1976, 10
  %1982 = or i1 %1980, %1981
  br i1 %1982, label %originalBBpart2528, label %originalBB523alteredBB

originalBBpart2528:                               ; preds = %originalBB523
  br label %1983, !dbg !3927

1983:                                             ; preds = %originalBBpart2528
  %1984 = load i32, i32* @x.63
  %1985 = load i32, i32* @y.64
  %1986 = sub i32 %1984, 1
  %1987 = mul i32 %1984, %1986
  %1988 = urem i32 %1987, 2
  %1989 = icmp eq i32 %1988, 0
  %1990 = icmp slt i32 %1985, 10
  %1991 = or i1 %1989, %1990
  br i1 %1991, label %originalBB530, label %originalBB530alteredBB

originalBB530:                                    ; preds = %1983, %originalBB530alteredBB
  %1992 = load i32, i32* @x.63
  %1993 = load i32, i32* @y.64
  %1994 = sub i32 %1992, 1
  %1995 = mul i32 %1992, %1994
  %1996 = urem i32 %1995, 2
  %1997 = icmp eq i32 %1996, 0
  %1998 = icmp slt i32 %1993, 10
  %1999 = or i1 %1997, %1998
  br i1 %1999, label %originalBBpart2532, label %originalBB530alteredBB

originalBBpart2532:                               ; preds = %originalBB530
  br label %2017, !dbg !3928

2000:                                             ; preds = %originalBBpart2440
  %2001 = load i32, i32* @x.63
  %2002 = load i32, i32* @y.64
  %2003 = sub i32 %2001, 1
  %2004 = mul i32 %2001, %2003
  %2005 = urem i32 %2004, 2
  %2006 = icmp eq i32 %2005, 0
  %2007 = icmp slt i32 %2002, 10
  %2008 = or i1 %2006, %2007
  br i1 %2008, label %originalBB534, label %originalBB534alteredBB

originalBB534:                                    ; preds = %2000, %originalBB534alteredBB
  %2009 = load i32, i32* @x.63
  %2010 = load i32, i32* @y.64
  %2011 = sub i32 %2009, 1
  %2012 = mul i32 %2009, %2011
  %2013 = urem i32 %2012, 2
  %2014 = icmp eq i32 %2013, 0
  %2015 = icmp slt i32 %2010, 10
  %2016 = or i1 %2014, %2015
  br i1 %2016, label %originalBBpart2536, label %originalBB534alteredBB

originalBBpart2536:                               ; preds = %originalBB534
  br label %2017, !dbg !3929

2017:                                             ; preds = %originalBBpart2536, %originalBBpart2532
  br label %2018, !dbg !3930

2018:                                             ; preds = %2017, %1653, %originalBBpart2434, %originalBBpart2419
  br label %2036, !dbg !3931

2019:                                             ; preds = %originalBBpart2400
  %2020 = load i32, i32* @x.63
  %2021 = load i32, i32* @y.64
  %2022 = sub i32 %2020, 1
  %2023 = mul i32 %2020, %2022
  %2024 = urem i32 %2023, 2
  %2025 = icmp eq i32 %2024, 0
  %2026 = icmp slt i32 %2021, 10
  %2027 = or i1 %2025, %2026
  br i1 %2027, label %originalBB538, label %originalBB538alteredBB

originalBB538:                                    ; preds = %2019, %originalBB538alteredBB
  %2028 = load i32, i32* @x.63
  %2029 = load i32, i32* @y.64
  %2030 = sub i32 %2028, 1
  %2031 = mul i32 %2028, %2030
  %2032 = urem i32 %2031, 2
  %2033 = icmp eq i32 %2032, 0
  %2034 = icmp slt i32 %2029, 10
  %2035 = or i1 %2033, %2034
  br i1 %2035, label %originalBBpart2540, label %originalBB538alteredBB

originalBBpart2540:                               ; preds = %originalBB538
  br label %2036, !dbg !3932

2036:                                             ; preds = %originalBBpart2540, %2018, %1611
  br label %4345, !dbg !3933

2037:                                             ; preds = %885
  %2038 = load i32, i32* @x.63
  %2039 = load i32, i32* @y.64
  %2040 = sub i32 %2038, 1
  %2041 = mul i32 %2038, %2040
  %2042 = urem i32 %2041, 2
  %2043 = icmp eq i32 %2042, 0
  %2044 = icmp slt i32 %2039, 10
  %2045 = or i1 %2043, %2044
  br i1 %2045, label %originalBB542, label %originalBB542alteredBB

originalBB542:                                    ; preds = %2037, %originalBB542alteredBB
  store i8 97, i8* %40, align 1, !dbg !3934
  %2046 = load i32, i32* @x.63
  %2047 = load i32, i32* @y.64
  %2048 = sub i32 %2046, 1
  %2049 = mul i32 %2046, %2048
  %2050 = urem i32 %2049, 2
  %2051 = icmp eq i32 %2050, 0
  %2052 = icmp slt i32 %2047, 10
  %2053 = or i1 %2051, %2052
  br i1 %2053, label %originalBBpart2544, label %originalBB542alteredBB

originalBBpart2544:                               ; preds = %originalBB542
  br label %2344, !dbg !3935

2054:                                             ; preds = %885
  %2055 = load i32, i32* @x.63
  %2056 = load i32, i32* @y.64
  %2057 = sub i32 %2055, 1
  %2058 = mul i32 %2055, %2057
  %2059 = urem i32 %2058, 2
  %2060 = icmp eq i32 %2059, 0
  %2061 = icmp slt i32 %2056, 10
  %2062 = or i1 %2060, %2061
  br i1 %2062, label %originalBB546, label %originalBB546alteredBB

originalBB546:                                    ; preds = %2054, %originalBB546alteredBB
  store i8 98, i8* %40, align 1, !dbg !3936
  %2063 = load i32, i32* @x.63
  %2064 = load i32, i32* @y.64
  %2065 = sub i32 %2063, 1
  %2066 = mul i32 %2063, %2065
  %2067 = urem i32 %2066, 2
  %2068 = icmp eq i32 %2067, 0
  %2069 = icmp slt i32 %2064, 10
  %2070 = or i1 %2068, %2069
  br i1 %2070, label %originalBBpart2548, label %originalBB546alteredBB

originalBBpart2548:                               ; preds = %originalBB546
  br label %2344, !dbg !3937

2071:                                             ; preds = %885
  %2072 = load i32, i32* @x.63
  %2073 = load i32, i32* @y.64
  %2074 = sub i32 %2072, 1
  %2075 = mul i32 %2072, %2074
  %2076 = urem i32 %2075, 2
  %2077 = icmp eq i32 %2076, 0
  %2078 = icmp slt i32 %2073, 10
  %2079 = or i1 %2077, %2078
  br i1 %2079, label %originalBB550, label %originalBB550alteredBB

originalBB550:                                    ; preds = %2071, %originalBB550alteredBB
  store i8 102, i8* %40, align 1, !dbg !3938
  %2080 = load i32, i32* @x.63
  %2081 = load i32, i32* @y.64
  %2082 = sub i32 %2080, 1
  %2083 = mul i32 %2080, %2082
  %2084 = urem i32 %2083, 2
  %2085 = icmp eq i32 %2084, 0
  %2086 = icmp slt i32 %2081, 10
  %2087 = or i1 %2085, %2086
  br i1 %2087, label %originalBBpart2552, label %originalBB550alteredBB

originalBBpart2552:                               ; preds = %originalBB550
  br label %2344, !dbg !3939

2088:                                             ; preds = %885
  %2089 = load i32, i32* @x.63
  %2090 = load i32, i32* @y.64
  %2091 = sub i32 %2089, 1
  %2092 = mul i32 %2089, %2091
  %2093 = urem i32 %2092, 2
  %2094 = icmp eq i32 %2093, 0
  %2095 = icmp slt i32 %2090, 10
  %2096 = or i1 %2094, %2095
  br i1 %2096, label %originalBB554, label %originalBB554alteredBB

originalBB554:                                    ; preds = %2088, %originalBB554alteredBB
  store i8 110, i8* %40, align 1, !dbg !3940
  %2097 = load i32, i32* @x.63
  %2098 = load i32, i32* @y.64
  %2099 = sub i32 %2097, 1
  %2100 = mul i32 %2097, %2099
  %2101 = urem i32 %2100, 2
  %2102 = icmp eq i32 %2101, 0
  %2103 = icmp slt i32 %2098, 10
  %2104 = or i1 %2102, %2103
  br i1 %2104, label %originalBBpart2556, label %originalBB554alteredBB

originalBBpart2556:                               ; preds = %originalBB554
  br label %2288, !dbg !3941

2105:                                             ; preds = %885
  store i8 114, i8* %40, align 1, !dbg !3942
  br label %2288, !dbg !3943

2106:                                             ; preds = %885
  %2107 = load i32, i32* @x.63
  %2108 = load i32, i32* @y.64
  %2109 = sub i32 %2107, 1
  %2110 = mul i32 %2107, %2109
  %2111 = urem i32 %2110, 2
  %2112 = icmp eq i32 %2111, 0
  %2113 = icmp slt i32 %2108, 10
  %2114 = or i1 %2112, %2113
  br i1 %2114, label %originalBB558, label %originalBB558alteredBB

originalBB558:                                    ; preds = %2106, %originalBB558alteredBB
  store i8 116, i8* %40, align 1, !dbg !3944
  %2115 = load i32, i32* @x.63
  %2116 = load i32, i32* @y.64
  %2117 = sub i32 %2115, 1
  %2118 = mul i32 %2115, %2117
  %2119 = urem i32 %2118, 2
  %2120 = icmp eq i32 %2119, 0
  %2121 = icmp slt i32 %2116, 10
  %2122 = or i1 %2120, %2121
  br i1 %2122, label %originalBBpart2560, label %originalBB558alteredBB

originalBBpart2560:                               ; preds = %originalBB558
  br label %2288, !dbg !3945

2123:                                             ; preds = %885
  %2124 = load i32, i32* @x.63
  %2125 = load i32, i32* @y.64
  %2126 = sub i32 %2124, 1
  %2127 = mul i32 %2124, %2126
  %2128 = urem i32 %2127, 2
  %2129 = icmp eq i32 %2128, 0
  %2130 = icmp slt i32 %2125, 10
  %2131 = or i1 %2129, %2130
  br i1 %2131, label %originalBB562, label %originalBB562alteredBB

originalBB562:                                    ; preds = %2123, %originalBB562alteredBB
  store i8 118, i8* %40, align 1, !dbg !3946
  %2132 = load i32, i32* @x.63
  %2133 = load i32, i32* @y.64
  %2134 = sub i32 %2132, 1
  %2135 = mul i32 %2132, %2134
  %2136 = urem i32 %2135, 2
  %2137 = icmp eq i32 %2136, 0
  %2138 = icmp slt i32 %2133, 10
  %2139 = or i1 %2137, %2138
  br i1 %2139, label %originalBBpart2564, label %originalBB562alteredBB

originalBBpart2564:                               ; preds = %originalBB562
  br label %2344, !dbg !3947

2140:                                             ; preds = %885
  %2141 = load i8, i8* %39, align 1, !dbg !3948
  store i8 %2141, i8* %40, align 1, !dbg !3949
  %2142 = load i32, i32* %23, align 4, !dbg !3950
  %2143 = icmp eq i32 %2142, 2, !dbg !3952
  br i1 %2143, label %2144, label %2197, !dbg !3953

2144:                                             ; preds = %2140
  %2145 = load i32, i32* @x.63
  %2146 = load i32, i32* @y.64
  %2147 = sub i32 %2145, 1
  %2148 = mul i32 %2145, %2147
  %2149 = urem i32 %2148, 2
  %2150 = icmp eq i32 %2149, 0
  %2151 = icmp slt i32 %2146, 10
  %2152 = or i1 %2150, %2151
  br i1 %2152, label %originalBB566, label %originalBB566alteredBB

originalBB566:                                    ; preds = %2144, %originalBB566alteredBB
  %2153 = load i8, i8* %35, align 1, !dbg !3954
  %2154 = trunc i8 %2153 to i1, !dbg !3954
  %2155 = load i32, i32* @x.63
  %2156 = load i32, i32* @y.64
  %2157 = sub i32 %2155, 1
  %2158 = mul i32 %2155, %2157
  %2159 = urem i32 %2158, 2
  %2160 = icmp eq i32 %2159, 0
  %2161 = icmp slt i32 %2156, 10
  %2162 = or i1 %2160, %2161
  br i1 %2162, label %originalBBpart2568, label %originalBB566alteredBB

originalBBpart2568:                               ; preds = %originalBB566
  br i1 %2154, label %2163, label %2180, !dbg !3957

2163:                                             ; preds = %originalBBpart2568
  %2164 = load i32, i32* @x.63
  %2165 = load i32, i32* @y.64
  %2166 = sub i32 %2164, 1
  %2167 = mul i32 %2164, %2166
  %2168 = urem i32 %2167, 2
  %2169 = icmp eq i32 %2168, 0
  %2170 = icmp slt i32 %2165, 10
  %2171 = or i1 %2169, %2170
  br i1 %2171, label %originalBB570, label %originalBB570alteredBB

originalBB570:                                    ; preds = %2163, %originalBB570alteredBB
  %2172 = load i32, i32* @x.63
  %2173 = load i32, i32* @y.64
  %2174 = sub i32 %2172, 1
  %2175 = mul i32 %2172, %2174
  %2176 = urem i32 %2175, 2
  %2177 = icmp eq i32 %2176, 0
  %2178 = icmp slt i32 %2173, 10
  %2179 = or i1 %2177, %2178
  br i1 %2179, label %originalBBpart2572, label %originalBB570alteredBB

originalBBpart2572:                               ; preds = %originalBB570
  br label %5422, !dbg !3958

2180:                                             ; preds = %originalBBpart2568
  %2181 = load i32, i32* @x.63
  %2182 = load i32, i32* @y.64
  %2183 = sub i32 %2181, 1
  %2184 = mul i32 %2181, %2183
  %2185 = urem i32 %2184, 2
  %2186 = icmp eq i32 %2185, 0
  %2187 = icmp slt i32 %2182, 10
  %2188 = or i1 %2186, %2187
  br i1 %2188, label %originalBB574, label %originalBB574alteredBB

originalBB574:                                    ; preds = %2180, %originalBB574alteredBB
  %2189 = load i32, i32* @x.63
  %2190 = load i32, i32* @y.64
  %2191 = sub i32 %2189, 1
  %2192 = mul i32 %2189, %2191
  %2193 = urem i32 %2192, 2
  %2194 = icmp eq i32 %2193, 0
  %2195 = icmp slt i32 %2190, 10
  %2196 = or i1 %2194, %2195
  br i1 %2196, label %originalBBpart2576, label %originalBB574alteredBB

originalBBpart2576:                               ; preds = %originalBB574
  br label %4758, !dbg !3959

2197:                                             ; preds = %2140
  %2198 = load i32, i32* @x.63
  %2199 = load i32, i32* @y.64
  %2200 = sub i32 %2198, 1
  %2201 = mul i32 %2198, %2200
  %2202 = urem i32 %2201, 2
  %2203 = icmp eq i32 %2202, 0
  %2204 = icmp slt i32 %2199, 10
  %2205 = or i1 %2203, %2204
  br i1 %2205, label %originalBB578, label %originalBB578alteredBB

originalBB578:                                    ; preds = %2197, %originalBB578alteredBB
  %2206 = load i8, i8* %33, align 1, !dbg !3960
  %2207 = trunc i8 %2206 to i1, !dbg !3960
  %2208 = load i32, i32* @x.63
  %2209 = load i32, i32* @y.64
  %2210 = sub i32 %2208, 1
  %2211 = mul i32 %2208, %2210
  %2212 = urem i32 %2211, 2
  %2213 = icmp eq i32 %2212, 0
  %2214 = icmp slt i32 %2209, 10
  %2215 = or i1 %2213, %2214
  br i1 %2215, label %originalBBpart2580, label %originalBB578alteredBB

originalBBpart2580:                               ; preds = %originalBB578
  br i1 %2207, label %2216, label %2271, !dbg !3962

2216:                                             ; preds = %originalBBpart2580
  %2217 = load i32, i32* @x.63
  %2218 = load i32, i32* @y.64
  %2219 = sub i32 %2217, 1
  %2220 = mul i32 %2217, %2219
  %2221 = urem i32 %2220, 2
  %2222 = icmp eq i32 %2221, 0
  %2223 = icmp slt i32 %2218, 10
  %2224 = or i1 %2222, %2223
  br i1 %2224, label %originalBB582, label %originalBB582alteredBB

originalBB582:                                    ; preds = %2216, %originalBB582alteredBB
  %2225 = load i8, i8* %35, align 1, !dbg !3963
  %2226 = trunc i8 %2225 to i1, !dbg !3963
  %2227 = load i32, i32* @x.63
  %2228 = load i32, i32* @y.64
  %2229 = sub i32 %2227, 1
  %2230 = mul i32 %2227, %2229
  %2231 = urem i32 %2230, 2
  %2232 = icmp eq i32 %2231, 0
  %2233 = icmp slt i32 %2228, 10
  %2234 = or i1 %2232, %2233
  br i1 %2234, label %originalBBpart2584, label %originalBB582alteredBB

originalBBpart2584:                               ; preds = %originalBB582
  br i1 %2226, label %2235, label %2271, !dbg !3964

2235:                                             ; preds = %originalBBpart2584
  %2236 = load i32, i32* @x.63
  %2237 = load i32, i32* @y.64
  %2238 = sub i32 %2236, 1
  %2239 = mul i32 %2236, %2238
  %2240 = urem i32 %2239, 2
  %2241 = icmp eq i32 %2240, 0
  %2242 = icmp slt i32 %2237, 10
  %2243 = or i1 %2241, %2242
  br i1 %2243, label %originalBB586, label %originalBB586alteredBB

originalBB586:                                    ; preds = %2235, %originalBB586alteredBB
  %2244 = load i64, i64* %32, align 8, !dbg !3965
  %2245 = icmp ne i64 %2244, 0, !dbg !3965
  %2246 = load i32, i32* @x.63
  %2247 = load i32, i32* @y.64
  %2248 = sub i32 %2246, 1
  %2249 = mul i32 %2246, %2248
  %2250 = urem i32 %2249, 2
  %2251 = icmp eq i32 %2250, 0
  %2252 = icmp slt i32 %2247, 10
  %2253 = or i1 %2251, %2252
  br i1 %2253, label %originalBBpart2588, label %originalBB586alteredBB

originalBBpart2588:                               ; preds = %originalBB586
  br i1 %2245, label %2254, label %2271, !dbg !3966

2254:                                             ; preds = %originalBBpart2588
  %2255 = load i32, i32* @x.63
  %2256 = load i32, i32* @y.64
  %2257 = sub i32 %2255, 1
  %2258 = mul i32 %2255, %2257
  %2259 = urem i32 %2258, 2
  %2260 = icmp eq i32 %2259, 0
  %2261 = icmp slt i32 %2256, 10
  %2262 = or i1 %2260, %2261
  br i1 %2262, label %originalBB590, label %originalBB590alteredBB

originalBB590:                                    ; preds = %2254, %originalBB590alteredBB
  %2263 = load i32, i32* @x.63
  %2264 = load i32, i32* @y.64
  %2265 = sub i32 %2263, 1
  %2266 = mul i32 %2263, %2265
  %2267 = urem i32 %2266, 2
  %2268 = icmp eq i32 %2267, 0
  %2269 = icmp slt i32 %2264, 10
  %2270 = or i1 %2268, %2269
  br i1 %2270, label %originalBBpart2592, label %originalBB590alteredBB

originalBBpart2592:                               ; preds = %originalBB590
  br label %4758, !dbg !3967

2271:                                             ; preds = %originalBBpart2588, %originalBBpart2584, %originalBBpart2580
  %2272 = load i32, i32* @x.63
  %2273 = load i32, i32* @y.64
  %2274 = sub i32 %2272, 1
  %2275 = mul i32 %2272, %2274
  %2276 = urem i32 %2275, 2
  %2277 = icmp eq i32 %2276, 0
  %2278 = icmp slt i32 %2273, 10
  %2279 = or i1 %2277, %2278
  br i1 %2279, label %originalBB594, label %originalBB594alteredBB

originalBB594:                                    ; preds = %2271, %originalBB594alteredBB
  %2280 = load i32, i32* @x.63
  %2281 = load i32, i32* @y.64
  %2282 = sub i32 %2280, 1
  %2283 = mul i32 %2280, %2282
  %2284 = urem i32 %2283, 2
  %2285 = icmp eq i32 %2284, 0
  %2286 = icmp slt i32 %2281, 10
  %2287 = or i1 %2285, %2286
  br i1 %2287, label %originalBBpart2596, label %originalBB594alteredBB

originalBBpart2596:                               ; preds = %originalBB594
  br label %2288, !dbg !3965

2288:                                             ; preds = %originalBBpart2596, %originalBBpart2560, %2105, %originalBBpart2556
  call void @llvm.dbg.label(metadata !3968), !dbg !3969
  %2289 = load i32, i32* %23, align 4, !dbg !3970
  %2290 = icmp eq i32 %2289, 2, !dbg !3972
  br i1 %2290, label %2291, label %2327, !dbg !3973

2291:                                             ; preds = %2288
  %2292 = load i32, i32* @x.63
  %2293 = load i32, i32* @y.64
  %2294 = sub i32 %2292, 1
  %2295 = mul i32 %2292, %2294
  %2296 = urem i32 %2295, 2
  %2297 = icmp eq i32 %2296, 0
  %2298 = icmp slt i32 %2293, 10
  %2299 = or i1 %2297, %2298
  br i1 %2299, label %originalBB598, label %originalBB598alteredBB

originalBB598:                                    ; preds = %2291, %originalBB598alteredBB
  %2300 = load i8, i8* %35, align 1, !dbg !3974
  %2301 = trunc i8 %2300 to i1, !dbg !3974
  %2302 = load i32, i32* @x.63
  %2303 = load i32, i32* @y.64
  %2304 = sub i32 %2302, 1
  %2305 = mul i32 %2302, %2304
  %2306 = urem i32 %2305, 2
  %2307 = icmp eq i32 %2306, 0
  %2308 = icmp slt i32 %2303, 10
  %2309 = or i1 %2307, %2308
  br i1 %2309, label %originalBBpart2600, label %originalBB598alteredBB

originalBBpart2600:                               ; preds = %originalBB598
  br i1 %2301, label %2310, label %2327, !dbg !3975

2310:                                             ; preds = %originalBBpart2600
  %2311 = load i32, i32* @x.63
  %2312 = load i32, i32* @y.64
  %2313 = sub i32 %2311, 1
  %2314 = mul i32 %2311, %2313
  %2315 = urem i32 %2314, 2
  %2316 = icmp eq i32 %2315, 0
  %2317 = icmp slt i32 %2312, 10
  %2318 = or i1 %2316, %2317
  br i1 %2318, label %originalBB602, label %originalBB602alteredBB

originalBB602:                                    ; preds = %2310, %originalBB602alteredBB
  %2319 = load i32, i32* @x.63
  %2320 = load i32, i32* @y.64
  %2321 = sub i32 %2319, 1
  %2322 = mul i32 %2319, %2321
  %2323 = urem i32 %2322, 2
  %2324 = icmp eq i32 %2323, 0
  %2325 = icmp slt i32 %2320, 10
  %2326 = or i1 %2324, %2325
  br i1 %2326, label %originalBBpart2604, label %originalBB602alteredBB

originalBBpart2604:                               ; preds = %originalBB602
  br label %5422, !dbg !3976

2327:                                             ; preds = %originalBBpart2600, %2288
  %2328 = load i32, i32* @x.63
  %2329 = load i32, i32* @y.64
  %2330 = sub i32 %2328, 1
  %2331 = mul i32 %2328, %2330
  %2332 = urem i32 %2331, 2
  %2333 = icmp eq i32 %2332, 0
  %2334 = icmp slt i32 %2329, 10
  %2335 = or i1 %2333, %2334
  br i1 %2335, label %originalBB606, label %originalBB606alteredBB

originalBB606:                                    ; preds = %2327, %originalBB606alteredBB
  %2336 = load i32, i32* @x.63
  %2337 = load i32, i32* @y.64
  %2338 = sub i32 %2336, 1
  %2339 = mul i32 %2336, %2338
  %2340 = urem i32 %2339, 2
  %2341 = icmp eq i32 %2340, 0
  %2342 = icmp slt i32 %2337, 10
  %2343 = or i1 %2341, %2342
  br i1 %2343, label %originalBBpart2608, label %originalBB606alteredBB

originalBBpart2608:                               ; preds = %originalBB606
  br label %2344, !dbg !3974

2344:                                             ; preds = %originalBBpart2608, %originalBBpart2564, %originalBBpart2552, %originalBBpart2548, %originalBBpart2544
  call void @llvm.dbg.label(metadata !3977), !dbg !3978
  %2345 = load i8, i8* %33, align 1, !dbg !3979
  %2346 = trunc i8 %2345 to i1, !dbg !3979
  br i1 %2346, label %2347, label %2365, !dbg !3981

2347:                                             ; preds = %2344
  %2348 = load i32, i32* @x.63
  %2349 = load i32, i32* @y.64
  %2350 = sub i32 %2348, 1
  %2351 = mul i32 %2348, %2350
  %2352 = urem i32 %2351, 2
  %2353 = icmp eq i32 %2352, 0
  %2354 = icmp slt i32 %2349, 10
  %2355 = or i1 %2353, %2354
  br i1 %2355, label %originalBB610, label %originalBB610alteredBB

originalBB610:                                    ; preds = %2347, %originalBB610alteredBB
  %2356 = load i8, i8* %40, align 1, !dbg !3982
  store i8 %2356, i8* %39, align 1, !dbg !3984
  %2357 = load i32, i32* @x.63
  %2358 = load i32, i32* @y.64
  %2359 = sub i32 %2357, 1
  %2360 = mul i32 %2357, %2359
  %2361 = urem i32 %2360, 2
  %2362 = icmp eq i32 %2361, 0
  %2363 = icmp slt i32 %2358, 10
  %2364 = or i1 %2362, %2363
  br i1 %2364, label %originalBBpart2612, label %originalBB610alteredBB

originalBBpart2612:                               ; preds = %originalBB610
  br label %4440, !dbg !3985

2365:                                             ; preds = %2344
  %2366 = load i32, i32* @x.63
  %2367 = load i32, i32* @y.64
  %2368 = sub i32 %2366, 1
  %2369 = mul i32 %2366, %2368
  %2370 = urem i32 %2369, 2
  %2371 = icmp eq i32 %2370, 0
  %2372 = icmp slt i32 %2367, 10
  %2373 = or i1 %2371, %2372
  br i1 %2373, label %originalBB614, label %originalBB614alteredBB

originalBB614:                                    ; preds = %2365, %originalBB614alteredBB
  %2374 = load i32, i32* @x.63
  %2375 = load i32, i32* @y.64
  %2376 = sub i32 %2374, 1
  %2377 = mul i32 %2374, %2376
  %2378 = urem i32 %2377, 2
  %2379 = icmp eq i32 %2378, 0
  %2380 = icmp slt i32 %2375, 10
  %2381 = or i1 %2379, %2380
  br i1 %2381, label %originalBBpart2616, label %originalBB614alteredBB

originalBBpart2616:                               ; preds = %originalBB614
  br label %4345, !dbg !3986

2382:                                             ; preds = %885, %885
  %2383 = load i64, i64* %22, align 8, !dbg !3987
  %2384 = icmp eq i64 %2383, -1, !dbg !3989
  br i1 %2384, label %2385, label %2407, !dbg !3990

2385:                                             ; preds = %2382
  %2386 = load i32, i32* @x.63
  %2387 = load i32, i32* @y.64
  %2388 = sub i32 %2386, 1
  %2389 = mul i32 %2386, %2388
  %2390 = urem i32 %2389, 2
  %2391 = icmp eq i32 %2390, 0
  %2392 = icmp slt i32 %2387, 10
  %2393 = or i1 %2391, %2392
  br i1 %2393, label %originalBB618, label %originalBB618alteredBB

originalBB618:                                    ; preds = %2385, %originalBB618alteredBB
  %2394 = load i8*, i8** %21, align 8, !dbg !3991
  %2395 = getelementptr inbounds i8, i8* %2394, i64 1, !dbg !3991
  %2396 = load i8, i8* %2395, align 1, !dbg !3991
  %2397 = sext i8 %2396 to i32, !dbg !3991
  %2398 = icmp eq i32 %2397, 0, !dbg !3992
  %2399 = load i32, i32* @x.63
  %2400 = load i32, i32* @y.64
  %2401 = sub i32 %2399, 1
  %2402 = mul i32 %2399, %2401
  %2403 = urem i32 %2402, 2
  %2404 = icmp eq i32 %2403, 0
  %2405 = icmp slt i32 %2400, 10
  %2406 = or i1 %2404, %2405
  br i1 %2406, label %originalBBpart2620, label %originalBB618alteredBB

originalBBpart2620:                               ; preds = %originalBB618
  br i1 %2398, label %2427, label %2426, !dbg !3987

2407:                                             ; preds = %2382
  %2408 = load i32, i32* @x.63
  %2409 = load i32, i32* @y.64
  %2410 = sub i32 %2408, 1
  %2411 = mul i32 %2408, %2410
  %2412 = urem i32 %2411, 2
  %2413 = icmp eq i32 %2412, 0
  %2414 = icmp slt i32 %2409, 10
  %2415 = or i1 %2413, %2414
  br i1 %2415, label %originalBB622, label %originalBB622alteredBB

originalBB622:                                    ; preds = %2407, %originalBB622alteredBB
  %2416 = load i64, i64* %22, align 8, !dbg !3993
  %2417 = icmp eq i64 %2416, 1, !dbg !3994
  %2418 = load i32, i32* @x.63
  %2419 = load i32, i32* @y.64
  %2420 = sub i32 %2418, 1
  %2421 = mul i32 %2418, %2420
  %2422 = urem i32 %2421, 2
  %2423 = icmp eq i32 %2422, 0
  %2424 = icmp slt i32 %2419, 10
  %2425 = or i1 %2423, %2424
  br i1 %2425, label %originalBBpart2624, label %originalBB622alteredBB

originalBBpart2624:                               ; preds = %originalBB622
  br i1 %2417, label %2427, label %2426, !dbg !3990

2426:                                             ; preds = %originalBBpart2624, %originalBBpart2620
  br label %4345, !dbg !3995

2427:                                             ; preds = %originalBBpart2624, %originalBBpart2620
  %2428 = load i32, i32* @x.63
  %2429 = load i32, i32* @y.64
  %2430 = sub i32 %2428, 1
  %2431 = mul i32 %2428, %2430
  %2432 = urem i32 %2431, 2
  %2433 = icmp eq i32 %2432, 0
  %2434 = icmp slt i32 %2429, 10
  %2435 = or i1 %2433, %2434
  br i1 %2435, label %originalBB626, label %originalBB626alteredBB

originalBB626:                                    ; preds = %2427, %originalBB626alteredBB
  %2436 = load i32, i32* @x.63
  %2437 = load i32, i32* @y.64
  %2438 = sub i32 %2436, 1
  %2439 = mul i32 %2436, %2438
  %2440 = urem i32 %2439, 2
  %2441 = icmp eq i32 %2440, 0
  %2442 = icmp slt i32 %2437, 10
  %2443 = or i1 %2441, %2442
  br i1 %2443, label %originalBBpart2628, label %originalBB626alteredBB

originalBBpart2628:                               ; preds = %originalBB626
  br label %2444, !dbg !3996

2444:                                             ; preds = %originalBBpart2628, %885, %885
  %2445 = load i32, i32* @x.63
  %2446 = load i32, i32* @y.64
  %2447 = sub i32 %2445, 1
  %2448 = mul i32 %2445, %2447
  %2449 = urem i32 %2448, 2
  %2450 = icmp eq i32 %2449, 0
  %2451 = icmp slt i32 %2446, 10
  %2452 = or i1 %2450, %2451
  br i1 %2452, label %originalBB630, label %originalBB630alteredBB

originalBB630:                                    ; preds = %2444, %originalBB630alteredBB
  %2453 = load i64, i64* %28, align 8, !dbg !3997
  %2454 = icmp ne i64 %2453, 0, !dbg !3999
  %2455 = load i32, i32* @x.63
  %2456 = load i32, i32* @y.64
  %2457 = sub i32 %2455, 1
  %2458 = mul i32 %2455, %2457
  %2459 = urem i32 %2458, 2
  %2460 = icmp eq i32 %2459, 0
  %2461 = icmp slt i32 %2456, 10
  %2462 = or i1 %2460, %2461
  br i1 %2462, label %originalBBpart2632, label %originalBB630alteredBB

originalBBpart2632:                               ; preds = %originalBB630
  br i1 %2454, label %2463, label %2464, !dbg !4000

2463:                                             ; preds = %originalBBpart2632
  br label %4345, !dbg !4001

2464:                                             ; preds = %originalBBpart2632
  %2465 = load i32, i32* @x.63
  %2466 = load i32, i32* @y.64
  %2467 = sub i32 %2465, 1
  %2468 = mul i32 %2465, %2467
  %2469 = urem i32 %2468, 2
  %2470 = icmp eq i32 %2469, 0
  %2471 = icmp slt i32 %2466, 10
  %2472 = or i1 %2470, %2471
  br i1 %2472, label %originalBB634, label %originalBB634alteredBB

originalBB634:                                    ; preds = %2464, %originalBB634alteredBB
  %2473 = load i32, i32* @x.63
  %2474 = load i32, i32* @y.64
  %2475 = sub i32 %2473, 1
  %2476 = mul i32 %2473, %2475
  %2477 = urem i32 %2476, 2
  %2478 = icmp eq i32 %2477, 0
  %2479 = icmp slt i32 %2474, 10
  %2480 = or i1 %2478, %2479
  br i1 %2480, label %originalBBpart2636, label %originalBB634alteredBB

originalBBpart2636:                               ; preds = %originalBB634
  br label %2481, !dbg !4002

2481:                                             ; preds = %originalBBpart2636, %885
  store i8 1, i8* %43, align 1, !dbg !4003
  br label %2482, !dbg !4004

2482:                                             ; preds = %2481, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885
  %2483 = load i32, i32* %23, align 4, !dbg !4005
  %2484 = icmp eq i32 %2483, 2, !dbg !4007
  br i1 %2484, label %2485, label %2521, !dbg !4008

2485:                                             ; preds = %2482
  %2486 = load i32, i32* @x.63
  %2487 = load i32, i32* @y.64
  %2488 = sub i32 %2486, 1
  %2489 = mul i32 %2486, %2488
  %2490 = urem i32 %2489, 2
  %2491 = icmp eq i32 %2490, 0
  %2492 = icmp slt i32 %2487, 10
  %2493 = or i1 %2491, %2492
  br i1 %2493, label %originalBB638, label %originalBB638alteredBB

originalBB638:                                    ; preds = %2485, %originalBB638alteredBB
  %2494 = load i8, i8* %35, align 1, !dbg !4009
  %2495 = trunc i8 %2494 to i1, !dbg !4009
  %2496 = load i32, i32* @x.63
  %2497 = load i32, i32* @y.64
  %2498 = sub i32 %2496, 1
  %2499 = mul i32 %2496, %2498
  %2500 = urem i32 %2499, 2
  %2501 = icmp eq i32 %2500, 0
  %2502 = icmp slt i32 %2497, 10
  %2503 = or i1 %2501, %2502
  br i1 %2503, label %originalBBpart2640, label %originalBB638alteredBB

originalBBpart2640:                               ; preds = %originalBB638
  br i1 %2495, label %2504, label %2521, !dbg !4010

2504:                                             ; preds = %originalBBpart2640
  %2505 = load i32, i32* @x.63
  %2506 = load i32, i32* @y.64
  %2507 = sub i32 %2505, 1
  %2508 = mul i32 %2505, %2507
  %2509 = urem i32 %2508, 2
  %2510 = icmp eq i32 %2509, 0
  %2511 = icmp slt i32 %2506, 10
  %2512 = or i1 %2510, %2511
  br i1 %2512, label %originalBB642, label %originalBB642alteredBB

originalBB642:                                    ; preds = %2504, %originalBB642alteredBB
  %2513 = load i32, i32* @x.63
  %2514 = load i32, i32* @y.64
  %2515 = sub i32 %2513, 1
  %2516 = mul i32 %2513, %2515
  %2517 = urem i32 %2516, 2
  %2518 = icmp eq i32 %2517, 0
  %2519 = icmp slt i32 %2514, 10
  %2520 = or i1 %2518, %2519
  br i1 %2520, label %originalBBpart2644, label %originalBB642alteredBB

originalBBpart2644:                               ; preds = %originalBB642
  br label %5422, !dbg !4011

2521:                                             ; preds = %originalBBpart2640, %2482
  br label %4345, !dbg !4012

2522:                                             ; preds = %885
  %2523 = load i32, i32* @x.63
  %2524 = load i32, i32* @y.64
  %2525 = sub i32 %2523, 1
  %2526 = mul i32 %2523, %2525
  %2527 = urem i32 %2526, 2
  %2528 = icmp eq i32 %2527, 0
  %2529 = icmp slt i32 %2524, 10
  %2530 = or i1 %2528, %2529
  br i1 %2530, label %originalBB646, label %originalBB646alteredBB

originalBB646:                                    ; preds = %2522, %originalBB646alteredBB
  store i8 1, i8* %37, align 1, !dbg !4013
  store i8 1, i8* %43, align 1, !dbg !4014
  %2531 = load i32, i32* %23, align 4, !dbg !4015
  %2532 = icmp eq i32 %2531, 2, !dbg !4017
  %2533 = load i32, i32* @x.63
  %2534 = load i32, i32* @y.64
  %2535 = sub i32 %2533, 1
  %2536 = mul i32 %2533, %2535
  %2537 = urem i32 %2536, 2
  %2538 = icmp eq i32 %2537, 0
  %2539 = icmp slt i32 %2534, 10
  %2540 = or i1 %2538, %2539
  br i1 %2540, label %originalBBpart2648, label %originalBB646alteredBB

originalBBpart2648:                               ; preds = %originalBB646
  br i1 %2532, label %2541, label %2814, !dbg !4018

2541:                                             ; preds = %originalBBpart2648
  %2542 = load i32, i32* @x.63
  %2543 = load i32, i32* @y.64
  %2544 = sub i32 %2542, 1
  %2545 = mul i32 %2542, %2544
  %2546 = urem i32 %2545, 2
  %2547 = icmp eq i32 %2546, 0
  %2548 = icmp slt i32 %2543, 10
  %2549 = or i1 %2547, %2548
  br i1 %2549, label %originalBB650, label %originalBB650alteredBB

originalBB650:                                    ; preds = %2541, %originalBB650alteredBB
  %2550 = load i8, i8* %35, align 1, !dbg !4019
  %2551 = trunc i8 %2550 to i1, !dbg !4019
  %2552 = load i32, i32* @x.63
  %2553 = load i32, i32* @y.64
  %2554 = sub i32 %2552, 1
  %2555 = mul i32 %2552, %2554
  %2556 = urem i32 %2555, 2
  %2557 = icmp eq i32 %2556, 0
  %2558 = icmp slt i32 %2553, 10
  %2559 = or i1 %2557, %2558
  br i1 %2559, label %originalBBpart2652, label %originalBB650alteredBB

originalBBpart2652:                               ; preds = %originalBB650
  br i1 %2551, label %2560, label %2577, !dbg !4022

2560:                                             ; preds = %originalBBpart2652
  %2561 = load i32, i32* @x.63
  %2562 = load i32, i32* @y.64
  %2563 = sub i32 %2561, 1
  %2564 = mul i32 %2561, %2563
  %2565 = urem i32 %2564, 2
  %2566 = icmp eq i32 %2565, 0
  %2567 = icmp slt i32 %2562, 10
  %2568 = or i1 %2566, %2567
  br i1 %2568, label %originalBB654, label %originalBB654alteredBB

originalBB654:                                    ; preds = %2560, %originalBB654alteredBB
  %2569 = load i32, i32* @x.63
  %2570 = load i32, i32* @y.64
  %2571 = sub i32 %2569, 1
  %2572 = mul i32 %2569, %2571
  %2573 = urem i32 %2572, 2
  %2574 = icmp eq i32 %2573, 0
  %2575 = icmp slt i32 %2570, 10
  %2576 = or i1 %2574, %2575
  br i1 %2576, label %originalBBpart2656, label %originalBB654alteredBB

originalBBpart2656:                               ; preds = %originalBB654
  br label %5422, !dbg !4023

2577:                                             ; preds = %originalBBpart2652
  %2578 = load i32, i32* @x.63
  %2579 = load i32, i32* @y.64
  %2580 = sub i32 %2578, 1
  %2581 = mul i32 %2578, %2580
  %2582 = urem i32 %2581, 2
  %2583 = icmp eq i32 %2582, 0
  %2584 = icmp slt i32 %2579, 10
  %2585 = or i1 %2583, %2584
  br i1 %2585, label %originalBB658, label %originalBB658alteredBB

originalBB658:                                    ; preds = %2577, %originalBB658alteredBB
  %2586 = load i64, i64* %20, align 8, !dbg !4024
  %2587 = icmp ne i64 %2586, 0, !dbg !4024
  %2588 = load i32, i32* @x.63
  %2589 = load i32, i32* @y.64
  %2590 = sub i32 %2588, 1
  %2591 = mul i32 %2588, %2590
  %2592 = urem i32 %2591, 2
  %2593 = icmp eq i32 %2592, 0
  %2594 = icmp slt i32 %2589, 10
  %2595 = or i1 %2593, %2594
  br i1 %2595, label %originalBBpart2660, label %originalBB658alteredBB

originalBBpart2660:                               ; preds = %originalBB658
  br i1 %2587, label %2596, label %2617, !dbg !4026

2596:                                             ; preds = %originalBBpart2660
  %2597 = load i64, i64* %30, align 8, !dbg !4027
  %2598 = icmp ne i64 %2597, 0, !dbg !4027
  br i1 %2598, label %2617, label %2599, !dbg !4028

2599:                                             ; preds = %2596
  %2600 = load i32, i32* @x.63
  %2601 = load i32, i32* @y.64
  %2602 = sub i32 %2600, 1
  %2603 = mul i32 %2600, %2602
  %2604 = urem i32 %2603, 2
  %2605 = icmp eq i32 %2604, 0
  %2606 = icmp slt i32 %2601, 10
  %2607 = or i1 %2605, %2606
  br i1 %2607, label %originalBB662, label %originalBB662alteredBB

originalBB662:                                    ; preds = %2599, %originalBB662alteredBB
  %2608 = load i64, i64* %20, align 8, !dbg !4029
  store i64 %2608, i64* %30, align 8, !dbg !4031
  store i64 0, i64* %20, align 8, !dbg !4032
  %2609 = load i32, i32* @x.63
  %2610 = load i32, i32* @y.64
  %2611 = sub i32 %2609, 1
  %2612 = mul i32 %2609, %2611
  %2613 = urem i32 %2612, 2
  %2614 = icmp eq i32 %2613, 0
  %2615 = icmp slt i32 %2610, 10
  %2616 = or i1 %2614, %2615
  br i1 %2616, label %originalBBpart2664, label %originalBB662alteredBB

originalBBpart2664:                               ; preds = %originalBB662
  br label %2617, !dbg !4033

2617:                                             ; preds = %originalBBpart2664, %2596, %originalBBpart2660
  br label %2618, !dbg !4034

2618:                                             ; preds = %2617
  %2619 = load i32, i32* @x.63
  %2620 = load i32, i32* @y.64
  %2621 = sub i32 %2619, 1
  %2622 = mul i32 %2619, %2621
  %2623 = urem i32 %2622, 2
  %2624 = icmp eq i32 %2623, 0
  %2625 = icmp slt i32 %2620, 10
  %2626 = or i1 %2624, %2625
  br i1 %2626, label %originalBB666, label %originalBB666alteredBB

originalBB666:                                    ; preds = %2618, %originalBB666alteredBB
  %2627 = load i64, i64* %29, align 8, !dbg !4035
  %2628 = load i64, i64* %20, align 8, !dbg !4035
  %2629 = icmp ult i64 %2627, %2628, !dbg !4035
  %2630 = load i32, i32* @x.63
  %2631 = load i32, i32* @y.64
  %2632 = sub i32 %2630, 1
  %2633 = mul i32 %2630, %2632
  %2634 = urem i32 %2633, 2
  %2635 = icmp eq i32 %2634, 0
  %2636 = icmp slt i32 %2631, 10
  %2637 = or i1 %2635, %2636
  br i1 %2637, label %originalBBpart2668, label %originalBB666alteredBB

originalBBpart2668:                               ; preds = %originalBB666
  br i1 %2629, label %2638, label %2658, !dbg !4038

2638:                                             ; preds = %originalBBpart2668
  %2639 = load i32, i32* @x.63
  %2640 = load i32, i32* @y.64
  %2641 = sub i32 %2639, 1
  %2642 = mul i32 %2639, %2641
  %2643 = urem i32 %2642, 2
  %2644 = icmp eq i32 %2643, 0
  %2645 = icmp slt i32 %2640, 10
  %2646 = or i1 %2644, %2645
  br i1 %2646, label %originalBB670, label %originalBB670alteredBB

originalBB670:                                    ; preds = %2638, %originalBB670alteredBB
  %2647 = load i8*, i8** %19, align 8, !dbg !4035
  %2648 = load i64, i64* %29, align 8, !dbg !4035
  %2649 = getelementptr inbounds i8, i8* %2647, i64 %2648, !dbg !4035
  store i8 39, i8* %2649, align 1, !dbg !4035
  %2650 = load i32, i32* @x.63
  %2651 = load i32, i32* @y.64
  %2652 = sub i32 %2650, 1
  %2653 = mul i32 %2650, %2652
  %2654 = urem i32 %2653, 2
  %2655 = icmp eq i32 %2654, 0
  %2656 = icmp slt i32 %2651, 10
  %2657 = or i1 %2655, %2656
  br i1 %2657, label %originalBBpart2672, label %originalBB670alteredBB

originalBBpart2672:                               ; preds = %originalBB670
  br label %2658, !dbg !4035

2658:                                             ; preds = %originalBBpart2672, %originalBBpart2668
  %2659 = load i32, i32* @x.63
  %2660 = load i32, i32* @y.64
  %2661 = sub i32 %2659, 1
  %2662 = mul i32 %2659, %2661
  %2663 = urem i32 %2662, 2
  %2664 = icmp eq i32 %2663, 0
  %2665 = icmp slt i32 %2660, 10
  %2666 = or i1 %2664, %2665
  br i1 %2666, label %originalBB674, label %originalBB674alteredBB

originalBB674:                                    ; preds = %2658, %originalBB674alteredBB
  %2667 = load i64, i64* %29, align 8, !dbg !4038
  %2668 = add i64 %2667, 1, !dbg !4038
  store i64 %2668, i64* %29, align 8, !dbg !4038
  %2669 = load i32, i32* @x.63
  %2670 = load i32, i32* @y.64
  %2671 = sub i32 %2669, 1
  %2672 = mul i32 %2669, %2671
  %2673 = urem i32 %2672, 2
  %2674 = icmp eq i32 %2673, 0
  %2675 = icmp slt i32 %2670, 10
  %2676 = or i1 %2674, %2675
  br i1 %2676, label %originalBBpart2680, label %originalBB674alteredBB

originalBBpart2680:                               ; preds = %originalBB674
  br label %2677, !dbg !4038

2677:                                             ; preds = %originalBBpart2680
  br label %2678, !dbg !4039

2678:                                             ; preds = %2677
  %2679 = load i32, i32* @x.63
  %2680 = load i32, i32* @y.64
  %2681 = sub i32 %2679, 1
  %2682 = mul i32 %2679, %2681
  %2683 = urem i32 %2682, 2
  %2684 = icmp eq i32 %2683, 0
  %2685 = icmp slt i32 %2680, 10
  %2686 = or i1 %2684, %2685
  br i1 %2686, label %originalBB682, label %originalBB682alteredBB

originalBB682:                                    ; preds = %2678, %originalBB682alteredBB
  %2687 = load i64, i64* %29, align 8, !dbg !4040
  %2688 = load i64, i64* %20, align 8, !dbg !4040
  %2689 = icmp ult i64 %2687, %2688, !dbg !4040
  %2690 = load i32, i32* @x.63
  %2691 = load i32, i32* @y.64
  %2692 = sub i32 %2690, 1
  %2693 = mul i32 %2690, %2692
  %2694 = urem i32 %2693, 2
  %2695 = icmp eq i32 %2694, 0
  %2696 = icmp slt i32 %2691, 10
  %2697 = or i1 %2695, %2696
  br i1 %2697, label %originalBBpart2684, label %originalBB682alteredBB

originalBBpart2684:                               ; preds = %originalBB682
  br i1 %2689, label %2698, label %2718, !dbg !4043

2698:                                             ; preds = %originalBBpart2684
  %2699 = load i32, i32* @x.63
  %2700 = load i32, i32* @y.64
  %2701 = sub i32 %2699, 1
  %2702 = mul i32 %2699, %2701
  %2703 = urem i32 %2702, 2
  %2704 = icmp eq i32 %2703, 0
  %2705 = icmp slt i32 %2700, 10
  %2706 = or i1 %2704, %2705
  br i1 %2706, label %originalBB686, label %originalBB686alteredBB

originalBB686:                                    ; preds = %2698, %originalBB686alteredBB
  %2707 = load i8*, i8** %19, align 8, !dbg !4040
  %2708 = load i64, i64* %29, align 8, !dbg !4040
  %2709 = getelementptr inbounds i8, i8* %2707, i64 %2708, !dbg !4040
  store i8 92, i8* %2709, align 1, !dbg !4040
  %2710 = load i32, i32* @x.63
  %2711 = load i32, i32* @y.64
  %2712 = sub i32 %2710, 1
  %2713 = mul i32 %2710, %2712
  %2714 = urem i32 %2713, 2
  %2715 = icmp eq i32 %2714, 0
  %2716 = icmp slt i32 %2711, 10
  %2717 = or i1 %2715, %2716
  br i1 %2717, label %originalBBpart2688, label %originalBB686alteredBB

originalBBpart2688:                               ; preds = %originalBB686
  br label %2718, !dbg !4040

2718:                                             ; preds = %originalBBpart2688, %originalBBpart2684
  %2719 = load i32, i32* @x.63
  %2720 = load i32, i32* @y.64
  %2721 = sub i32 %2719, 1
  %2722 = mul i32 %2719, %2721
  %2723 = urem i32 %2722, 2
  %2724 = icmp eq i32 %2723, 0
  %2725 = icmp slt i32 %2720, 10
  %2726 = or i1 %2724, %2725
  br i1 %2726, label %originalBB690, label %originalBB690alteredBB

originalBB690:                                    ; preds = %2718, %originalBB690alteredBB
  %2727 = load i64, i64* %29, align 8, !dbg !4043
  %2728 = add i64 %2727, 1, !dbg !4043
  store i64 %2728, i64* %29, align 8, !dbg !4043
  %2729 = load i32, i32* @x.63
  %2730 = load i32, i32* @y.64
  %2731 = sub i32 %2729, 1
  %2732 = mul i32 %2729, %2731
  %2733 = urem i32 %2732, 2
  %2734 = icmp eq i32 %2733, 0
  %2735 = icmp slt i32 %2730, 10
  %2736 = or i1 %2734, %2735
  br i1 %2736, label %originalBBpart2700, label %originalBB690alteredBB

originalBBpart2700:                               ; preds = %originalBB690
  br label %2737, !dbg !4043

2737:                                             ; preds = %originalBBpart2700
  %2738 = load i32, i32* @x.63
  %2739 = load i32, i32* @y.64
  %2740 = sub i32 %2738, 1
  %2741 = mul i32 %2738, %2740
  %2742 = urem i32 %2741, 2
  %2743 = icmp eq i32 %2742, 0
  %2744 = icmp slt i32 %2739, 10
  %2745 = or i1 %2743, %2744
  br i1 %2745, label %originalBB702, label %originalBB702alteredBB

originalBB702:                                    ; preds = %2737, %originalBB702alteredBB
  %2746 = load i32, i32* @x.63
  %2747 = load i32, i32* @y.64
  %2748 = sub i32 %2746, 1
  %2749 = mul i32 %2746, %2748
  %2750 = urem i32 %2749, 2
  %2751 = icmp eq i32 %2750, 0
  %2752 = icmp slt i32 %2747, 10
  %2753 = or i1 %2751, %2752
  br i1 %2753, label %originalBBpart2704, label %originalBB702alteredBB

originalBBpart2704:                               ; preds = %originalBB702
  br label %2754, !dbg !4044

2754:                                             ; preds = %originalBBpart2704
  %2755 = load i32, i32* @x.63
  %2756 = load i32, i32* @y.64
  %2757 = sub i32 %2755, 1
  %2758 = mul i32 %2755, %2757
  %2759 = urem i32 %2758, 2
  %2760 = icmp eq i32 %2759, 0
  %2761 = icmp slt i32 %2756, 10
  %2762 = or i1 %2760, %2761
  br i1 %2762, label %originalBB706, label %originalBB706alteredBB

originalBB706:                                    ; preds = %2754, %originalBB706alteredBB
  %2763 = load i64, i64* %29, align 8, !dbg !4045
  %2764 = load i64, i64* %20, align 8, !dbg !4045
  %2765 = icmp ult i64 %2763, %2764, !dbg !4045
  %2766 = load i32, i32* @x.63
  %2767 = load i32, i32* @y.64
  %2768 = sub i32 %2766, 1
  %2769 = mul i32 %2766, %2768
  %2770 = urem i32 %2769, 2
  %2771 = icmp eq i32 %2770, 0
  %2772 = icmp slt i32 %2767, 10
  %2773 = or i1 %2771, %2772
  br i1 %2773, label %originalBBpart2708, label %originalBB706alteredBB

originalBBpart2708:                               ; preds = %originalBB706
  br i1 %2765, label %2774, label %2794, !dbg !4048

2774:                                             ; preds = %originalBBpart2708
  %2775 = load i32, i32* @x.63
  %2776 = load i32, i32* @y.64
  %2777 = sub i32 %2775, 1
  %2778 = mul i32 %2775, %2777
  %2779 = urem i32 %2778, 2
  %2780 = icmp eq i32 %2779, 0
  %2781 = icmp slt i32 %2776, 10
  %2782 = or i1 %2780, %2781
  br i1 %2782, label %originalBB710, label %originalBB710alteredBB

originalBB710:                                    ; preds = %2774, %originalBB710alteredBB
  %2783 = load i8*, i8** %19, align 8, !dbg !4045
  %2784 = load i64, i64* %29, align 8, !dbg !4045
  %2785 = getelementptr inbounds i8, i8* %2783, i64 %2784, !dbg !4045
  store i8 39, i8* %2785, align 1, !dbg !4045
  %2786 = load i32, i32* @x.63
  %2787 = load i32, i32* @y.64
  %2788 = sub i32 %2786, 1
  %2789 = mul i32 %2786, %2788
  %2790 = urem i32 %2789, 2
  %2791 = icmp eq i32 %2790, 0
  %2792 = icmp slt i32 %2787, 10
  %2793 = or i1 %2791, %2792
  br i1 %2793, label %originalBBpart2712, label %originalBB710alteredBB

originalBBpart2712:                               ; preds = %originalBB710
  br label %2794, !dbg !4045

2794:                                             ; preds = %originalBBpart2712, %originalBBpart2708
  %2795 = load i64, i64* %29, align 8, !dbg !4048
  %2796 = add i64 %2795, 1, !dbg !4048
  store i64 %2796, i64* %29, align 8, !dbg !4048
  br label %2797, !dbg !4048

2797:                                             ; preds = %2794
  %2798 = load i32, i32* @x.63
  %2799 = load i32, i32* @y.64
  %2800 = sub i32 %2798, 1
  %2801 = mul i32 %2798, %2800
  %2802 = urem i32 %2801, 2
  %2803 = icmp eq i32 %2802, 0
  %2804 = icmp slt i32 %2799, 10
  %2805 = or i1 %2803, %2804
  br i1 %2805, label %originalBB714, label %originalBB714alteredBB

originalBB714:                                    ; preds = %2797, %originalBB714alteredBB
  store i8 0, i8* %36, align 1, !dbg !4049
  %2806 = load i32, i32* @x.63
  %2807 = load i32, i32* @y.64
  %2808 = sub i32 %2806, 1
  %2809 = mul i32 %2806, %2808
  %2810 = urem i32 %2809, 2
  %2811 = icmp eq i32 %2810, 0
  %2812 = icmp slt i32 %2807, 10
  %2813 = or i1 %2811, %2812
  br i1 %2813, label %originalBBpart2716, label %originalBB714alteredBB

originalBBpart2716:                               ; preds = %originalBB714
  br label %2814, !dbg !4050

2814:                                             ; preds = %originalBBpart2716, %originalBBpart2648
  %2815 = load i32, i32* @x.63
  %2816 = load i32, i32* @y.64
  %2817 = sub i32 %2815, 1
  %2818 = mul i32 %2815, %2817
  %2819 = urem i32 %2818, 2
  %2820 = icmp eq i32 %2819, 0
  %2821 = icmp slt i32 %2816, 10
  %2822 = or i1 %2820, %2821
  br i1 %2822, label %originalBB718, label %originalBB718alteredBB

originalBB718:                                    ; preds = %2814, %originalBB718alteredBB
  %2823 = load i32, i32* @x.63
  %2824 = load i32, i32* @y.64
  %2825 = sub i32 %2823, 1
  %2826 = mul i32 %2823, %2825
  %2827 = urem i32 %2826, 2
  %2828 = icmp eq i32 %2827, 0
  %2829 = icmp slt i32 %2824, 10
  %2830 = or i1 %2828, %2829
  br i1 %2830, label %originalBBpart2720, label %originalBB718alteredBB

originalBBpart2720:                               ; preds = %originalBB718
  br label %4345, !dbg !4051

2831:                                             ; preds = %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885, %885
  %2832 = load i32, i32* @x.63
  %2833 = load i32, i32* @y.64
  %2834 = sub i32 %2832, 1
  %2835 = mul i32 %2832, %2834
  %2836 = urem i32 %2835, 2
  %2837 = icmp eq i32 %2836, 0
  %2838 = icmp slt i32 %2833, 10
  %2839 = or i1 %2837, %2838
  br i1 %2839, label %originalBB722, label %originalBB722alteredBB

originalBB722:                                    ; preds = %2831, %originalBB722alteredBB
  store i8 1, i8* %43, align 1, !dbg !4052
  %2840 = load i32, i32* @x.63
  %2841 = load i32, i32* @y.64
  %2842 = sub i32 %2840, 1
  %2843 = mul i32 %2840, %2842
  %2844 = urem i32 %2843, 2
  %2845 = icmp eq i32 %2844, 0
  %2846 = icmp slt i32 %2841, 10
  %2847 = or i1 %2845, %2846
  br i1 %2847, label %originalBBpart2724, label %originalBB722alteredBB

originalBBpart2724:                               ; preds = %originalBB722
  br label %4345, !dbg !4053

2848:                                             ; preds = %885
  call void @llvm.dbg.declare(metadata i64* %44, metadata !4054, metadata !DIExpression()), !dbg !4056
  call void @llvm.dbg.declare(metadata i8* %45, metadata !4057, metadata !DIExpression()), !dbg !4058
  %2849 = load i32, i32* @x.63
  %2850 = load i32, i32* @y.64
  %2851 = sub i32 %2849, 1
  %2852 = mul i32 %2849, %2851
  %2853 = urem i32 %2852, 2
  %2854 = icmp eq i32 %2853, 0
  %2855 = icmp slt i32 %2850, 10
  %2856 = or i1 %2854, %2855
  br i1 %2856, label %originalBB726, label %originalBB726alteredBB

originalBB726:                                    ; preds = %2848, %originalBB726alteredBB
  %2857 = load i8, i8* %34, align 1, !dbg !4059
  %2858 = trunc i8 %2857 to i1, !dbg !4059
  %2859 = load i32, i32* @x.63
  %2860 = load i32, i32* @y.64
  %2861 = sub i32 %2859, 1
  %2862 = mul i32 %2859, %2861
  %2863 = urem i32 %2862, 2
  %2864 = icmp eq i32 %2863, 0
  %2865 = icmp slt i32 %2860, 10
  %2866 = or i1 %2864, %2865
  br i1 %2866, label %originalBBpart2728, label %originalBB726alteredBB

originalBBpart2728:                               ; preds = %originalBB726
  br i1 %2858, label %2867, label %2879, !dbg !4061

2867:                                             ; preds = %originalBBpart2728
  store i64 1, i64* %44, align 8, !dbg !4062
  %2868 = call i16** @__ctype_b_loc() #15, !dbg !4064
  %2869 = load i16*, i16** %2868, align 8, !dbg !4064
  %2870 = load i8, i8* %39, align 1, !dbg !4064
  %2871 = zext i8 %2870 to i32, !dbg !4064
  %2872 = sext i32 %2871 to i64, !dbg !4064
  %2873 = getelementptr inbounds i16, i16* %2869, i64 %2872, !dbg !4064
  %2874 = load i16, i16* %2873, align 2, !dbg !4064
  %2875 = zext i16 %2874 to i32, !dbg !4064
  %2876 = and i32 %2875, 16384, !dbg !4064
  %2877 = icmp ne i32 %2876, 0, !dbg !4065
  %2878 = zext i1 %2877 to i8, !dbg !4066
  store i8 %2878, i8* %45, align 1, !dbg !4066
  br label %3376, !dbg !4067

2879:                                             ; preds = %originalBBpart2728
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !4068, metadata !DIExpression()), !dbg !4082
  %2880 = load i32, i32* @x.63
  %2881 = load i32, i32* @y.64
  %2882 = sub i32 %2880, 1
  %2883 = mul i32 %2880, %2882
  %2884 = urem i32 %2883, 2
  %2885 = icmp eq i32 %2884, 0
  %2886 = icmp slt i32 %2881, 10
  %2887 = or i1 %2885, %2886
  br i1 %2887, label %originalBB730, label %originalBB730alteredBB

originalBB730:                                    ; preds = %2879, %originalBB730alteredBB
  %2888 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !4083
  call void @llvm.memset.p0i8.i64(i8* align 4 %2888, i8 0, i64 8, i1 false), !dbg !4083
  store i64 0, i64* %44, align 8, !dbg !4084
  store i8 1, i8* %45, align 1, !dbg !4085
  %2889 = load i64, i64* %22, align 8, !dbg !4086
  %2890 = icmp eq i64 %2889, -1, !dbg !4088
  %2891 = load i32, i32* @x.63
  %2892 = load i32, i32* @y.64
  %2893 = sub i32 %2891, 1
  %2894 = mul i32 %2891, %2893
  %2895 = urem i32 %2894, 2
  %2896 = icmp eq i32 %2895, 0
  %2897 = icmp slt i32 %2892, 10
  %2898 = or i1 %2896, %2897
  br i1 %2898, label %originalBBpart2732, label %originalBB730alteredBB

originalBBpart2732:                               ; preds = %originalBB730
  br i1 %2890, label %2899, label %2918, !dbg !4089

2899:                                             ; preds = %originalBBpart2732
  %2900 = load i32, i32* @x.63
  %2901 = load i32, i32* @y.64
  %2902 = sub i32 %2900, 1
  %2903 = mul i32 %2900, %2902
  %2904 = urem i32 %2903, 2
  %2905 = icmp eq i32 %2904, 0
  %2906 = icmp slt i32 %2901, 10
  %2907 = or i1 %2905, %2906
  br i1 %2907, label %originalBB734, label %originalBB734alteredBB

originalBB734:                                    ; preds = %2899, %originalBB734alteredBB
  %2908 = load i8*, i8** %21, align 8, !dbg !4090
  %2909 = call i64 @strlen(i8* %2908) #13, !dbg !4091
  store i64 %2909, i64* %22, align 8, !dbg !4092
  %2910 = load i32, i32* @x.63
  %2911 = load i32, i32* @y.64
  %2912 = sub i32 %2910, 1
  %2913 = mul i32 %2910, %2912
  %2914 = urem i32 %2913, 2
  %2915 = icmp eq i32 %2914, 0
  %2916 = icmp slt i32 %2911, 10
  %2917 = or i1 %2915, %2916
  br i1 %2917, label %originalBBpart2736, label %originalBB734alteredBB

originalBBpart2736:                               ; preds = %originalBB734
  br label %2918, !dbg !4093

2918:                                             ; preds = %originalBBpart2736, %originalBBpart2732
  %2919 = load i32, i32* @x.63
  %2920 = load i32, i32* @y.64
  %2921 = sub i32 %2919, 1
  %2922 = mul i32 %2919, %2921
  %2923 = urem i32 %2922, 2
  %2924 = icmp eq i32 %2923, 0
  %2925 = icmp slt i32 %2920, 10
  %2926 = or i1 %2924, %2925
  br i1 %2926, label %originalBB738, label %originalBB738alteredBB

originalBB738:                                    ; preds = %2918, %originalBB738alteredBB
  %2927 = load i32, i32* @x.63
  %2928 = load i32, i32* @y.64
  %2929 = sub i32 %2927, 1
  %2930 = mul i32 %2927, %2929
  %2931 = urem i32 %2930, 2
  %2932 = icmp eq i32 %2931, 0
  %2933 = icmp slt i32 %2928, 10
  %2934 = or i1 %2932, %2933
  br i1 %2934, label %originalBBpart2740, label %originalBB738alteredBB

originalBBpart2740:                               ; preds = %originalBB738
  br label %2935, !dbg !4094

2935:                                             ; preds = %originalBBpart2891, %originalBBpart2740
  call void @llvm.dbg.declare(metadata i32* %47, metadata !4095, metadata !DIExpression()), !dbg !4098
  call void @llvm.dbg.declare(metadata i64* %48, metadata !4099, metadata !DIExpression()), !dbg !4100
  %2936 = load i32, i32* @x.63
  %2937 = load i32, i32* @y.64
  %2938 = sub i32 %2936, 1
  %2939 = mul i32 %2936, %2938
  %2940 = urem i32 %2939, 2
  %2941 = icmp eq i32 %2940, 0
  %2942 = icmp slt i32 %2937, 10
  %2943 = or i1 %2941, %2942
  br i1 %2943, label %originalBB742, label %originalBB742alteredBB

originalBB742:                                    ; preds = %2935, %originalBB742alteredBB
  %2944 = load i8*, i8** %21, align 8, !dbg !4101
  %2945 = load i64, i64* %28, align 8, !dbg !4102
  %2946 = load i64, i64* %44, align 8, !dbg !4103
  %2947 = add i64 %2945, %2946, !dbg !4104
  %2948 = getelementptr inbounds i8, i8* %2944, i64 %2947, !dbg !4101
  %2949 = load i64, i64* %22, align 8, !dbg !4105
  %2950 = load i64, i64* %28, align 8, !dbg !4106
  %2951 = load i64, i64* %44, align 8, !dbg !4107
  %2952 = add i64 %2950, %2951, !dbg !4108
  %2953 = sub i64 %2949, %2952, !dbg !4109
  %2954 = call i64 @rpl_mbrtowc(i32* %47, i8* %2948, i64 %2953, %struct.__mbstate_t* %46), !dbg !4110
  store i64 %2954, i64* %48, align 8, !dbg !4100
  %2955 = load i64, i64* %48, align 8, !dbg !4111
  %2956 = icmp eq i64 %2955, 0, !dbg !4113
  %2957 = load i32, i32* @x.63
  %2958 = load i32, i32* @y.64
  %2959 = sub i32 %2957, 1
  %2960 = mul i32 %2957, %2959
  %2961 = urem i32 %2960, 2
  %2962 = icmp eq i32 %2961, 0
  %2963 = icmp slt i32 %2958, 10
  %2964 = or i1 %2962, %2963
  br i1 %2964, label %originalBBpart2757, label %originalBB742alteredBB

originalBBpart2757:                               ; preds = %originalBB742
  br i1 %2956, label %2965, label %2966, !dbg !4114

2965:                                             ; preds = %originalBBpart2757
  br label %3375, !dbg !4115

2966:                                             ; preds = %originalBBpart2757
  %2967 = load i32, i32* @x.63
  %2968 = load i32, i32* @y.64
  %2969 = sub i32 %2967, 1
  %2970 = mul i32 %2967, %2969
  %2971 = urem i32 %2970, 2
  %2972 = icmp eq i32 %2971, 0
  %2973 = icmp slt i32 %2968, 10
  %2974 = or i1 %2972, %2973
  br i1 %2974, label %originalBB759, label %originalBB759alteredBB

originalBB759:                                    ; preds = %2966, %originalBB759alteredBB
  %2975 = load i64, i64* %48, align 8, !dbg !4116
  %2976 = icmp eq i64 %2975, -1, !dbg !4118
  %2977 = load i32, i32* @x.63
  %2978 = load i32, i32* @y.64
  %2979 = sub i32 %2977, 1
  %2980 = mul i32 %2977, %2979
  %2981 = urem i32 %2980, 2
  %2982 = icmp eq i32 %2981, 0
  %2983 = icmp slt i32 %2978, 10
  %2984 = or i1 %2982, %2983
  br i1 %2984, label %originalBBpart2761, label %originalBB759alteredBB

originalBBpart2761:                               ; preds = %originalBB759
  br i1 %2976, label %2985, label %3002, !dbg !4119

2985:                                             ; preds = %originalBBpart2761
  %2986 = load i32, i32* @x.63
  %2987 = load i32, i32* @y.64
  %2988 = sub i32 %2986, 1
  %2989 = mul i32 %2986, %2988
  %2990 = urem i32 %2989, 2
  %2991 = icmp eq i32 %2990, 0
  %2992 = icmp slt i32 %2987, 10
  %2993 = or i1 %2991, %2992
  br i1 %2993, label %originalBB763, label %originalBB763alteredBB

originalBB763:                                    ; preds = %2985, %originalBB763alteredBB
  store i8 0, i8* %45, align 1, !dbg !4120
  %2994 = load i32, i32* @x.63
  %2995 = load i32, i32* @y.64
  %2996 = sub i32 %2994, 1
  %2997 = mul i32 %2994, %2996
  %2998 = urem i32 %2997, 2
  %2999 = icmp eq i32 %2998, 0
  %3000 = icmp slt i32 %2995, 10
  %3001 = or i1 %2999, %3000
  br i1 %3001, label %originalBBpart2765, label %originalBB763alteredBB

originalBBpart2765:                               ; preds = %originalBB763
  br label %3375, !dbg !4122

3002:                                             ; preds = %originalBBpart2761
  %3003 = load i32, i32* @x.63
  %3004 = load i32, i32* @y.64
  %3005 = sub i32 %3003, 1
  %3006 = mul i32 %3003, %3005
  %3007 = urem i32 %3006, 2
  %3008 = icmp eq i32 %3007, 0
  %3009 = icmp slt i32 %3004, 10
  %3010 = or i1 %3008, %3009
  br i1 %3010, label %originalBB767, label %originalBB767alteredBB

originalBB767:                                    ; preds = %3002, %originalBB767alteredBB
  %3011 = load i64, i64* %48, align 8, !dbg !4123
  %3012 = icmp eq i64 %3011, -2, !dbg !4125
  %3013 = load i32, i32* @x.63
  %3014 = load i32, i32* @y.64
  %3015 = sub i32 %3013, 1
  %3016 = mul i32 %3013, %3015
  %3017 = urem i32 %3016, 2
  %3018 = icmp eq i32 %3017, 0
  %3019 = icmp slt i32 %3014, 10
  %3020 = or i1 %3018, %3019
  br i1 %3020, label %originalBBpart2769, label %originalBB767alteredBB

originalBBpart2769:                               ; preds = %originalBB767
  br i1 %3012, label %3021, label %3107, !dbg !4126

3021:                                             ; preds = %originalBBpart2769
  %3022 = load i32, i32* @x.63
  %3023 = load i32, i32* @y.64
  %3024 = sub i32 %3022, 1
  %3025 = mul i32 %3022, %3024
  %3026 = urem i32 %3025, 2
  %3027 = icmp eq i32 %3026, 0
  %3028 = icmp slt i32 %3023, 10
  %3029 = or i1 %3027, %3028
  br i1 %3029, label %originalBB771, label %originalBB771alteredBB

originalBB771:                                    ; preds = %3021, %originalBB771alteredBB
  store i8 0, i8* %45, align 1, !dbg !4127
  %3030 = load i32, i32* @x.63
  %3031 = load i32, i32* @y.64
  %3032 = sub i32 %3030, 1
  %3033 = mul i32 %3030, %3032
  %3034 = urem i32 %3033, 2
  %3035 = icmp eq i32 %3034, 0
  %3036 = icmp slt i32 %3031, 10
  %3037 = or i1 %3035, %3036
  br i1 %3037, label %originalBBpart2773, label %originalBB771alteredBB

originalBBpart2773:                               ; preds = %originalBB771
  br label %3038, !dbg !4129

3038:                                             ; preds = %originalBBpart2814, %originalBBpart2773
  %3039 = load i32, i32* @x.63
  %3040 = load i32, i32* @y.64
  %3041 = sub i32 %3039, 1
  %3042 = mul i32 %3039, %3041
  %3043 = urem i32 %3042, 2
  %3044 = icmp eq i32 %3043, 0
  %3045 = icmp slt i32 %3040, 10
  %3046 = or i1 %3044, %3045
  br i1 %3046, label %originalBB775, label %originalBB775alteredBB

originalBB775:                                    ; preds = %3038, %originalBB775alteredBB
  %3047 = load i64, i64* %28, align 8, !dbg !4130
  %3048 = load i64, i64* %44, align 8, !dbg !4131
  %3049 = add i64 %3047, %3048, !dbg !4132
  %3050 = load i64, i64* %22, align 8, !dbg !4133
  %3051 = icmp ult i64 %3049, %3050, !dbg !4134
  %3052 = load i32, i32* @x.63
  %3053 = load i32, i32* @y.64
  %3054 = sub i32 %3052, 1
  %3055 = mul i32 %3052, %3054
  %3056 = urem i32 %3055, 2
  %3057 = icmp eq i32 %3056, 0
  %3058 = icmp slt i32 %3053, 10
  %3059 = or i1 %3057, %3058
  br i1 %3059, label %originalBBpart2792, label %originalBB775alteredBB

originalBBpart2792:                               ; preds = %originalBB775
  br i1 %3051, label %3060, label %3085, !dbg !4135

3060:                                             ; preds = %originalBBpart2792
  %3061 = load i32, i32* @x.63
  %3062 = load i32, i32* @y.64
  %3063 = sub i32 %3061, 1
  %3064 = mul i32 %3061, %3063
  %3065 = urem i32 %3064, 2
  %3066 = icmp eq i32 %3065, 0
  %3067 = icmp slt i32 %3062, 10
  %3068 = or i1 %3066, %3067
  br i1 %3068, label %originalBB794, label %originalBB794alteredBB

originalBB794:                                    ; preds = %3060, %originalBB794alteredBB
  %3069 = load i8*, i8** %21, align 8, !dbg !4136
  %3070 = load i64, i64* %28, align 8, !dbg !4137
  %3071 = load i64, i64* %44, align 8, !dbg !4138
  %3072 = add i64 %3070, %3071, !dbg !4139
  %3073 = getelementptr inbounds i8, i8* %3069, i64 %3072, !dbg !4136
  %3074 = load i8, i8* %3073, align 1, !dbg !4136
  %3075 = sext i8 %3074 to i32, !dbg !4136
  %3076 = icmp ne i32 %3075, 0, !dbg !4135
  %3077 = load i32, i32* @x.63
  %3078 = load i32, i32* @y.64
  %3079 = sub i32 %3077, 1
  %3080 = mul i32 %3077, %3079
  %3081 = urem i32 %3080, 2
  %3082 = icmp eq i32 %3081, 0
  %3083 = icmp slt i32 %3078, 10
  %3084 = or i1 %3082, %3083
  br i1 %3084, label %originalBBpart2803, label %originalBB794alteredBB

originalBBpart2803:                               ; preds = %originalBB794
  br label %3085

3085:                                             ; preds = %originalBBpart2803, %originalBBpart2792
  %3086 = phi i1 [ false, %originalBBpart2792 ], [ %3076, %originalBBpart2803 ], !dbg !4140
  br i1 %3086, label %3087, label %3106, !dbg !4129

3087:                                             ; preds = %3085
  %3088 = load i32, i32* @x.63
  %3089 = load i32, i32* @y.64
  %3090 = sub i32 %3088, 1
  %3091 = mul i32 %3088, %3090
  %3092 = urem i32 %3091, 2
  %3093 = icmp eq i32 %3092, 0
  %3094 = icmp slt i32 %3089, 10
  %3095 = or i1 %3093, %3094
  br i1 %3095, label %originalBB805, label %originalBB805alteredBB

originalBB805:                                    ; preds = %3087, %originalBB805alteredBB
  %3096 = load i64, i64* %44, align 8, !dbg !4141
  %3097 = add i64 %3096, 1, !dbg !4141
  store i64 %3097, i64* %44, align 8, !dbg !4141
  %3098 = load i32, i32* @x.63
  %3099 = load i32, i32* @y.64
  %3100 = sub i32 %3098, 1
  %3101 = mul i32 %3098, %3100
  %3102 = urem i32 %3101, 2
  %3103 = icmp eq i32 %3102, 0
  %3104 = icmp slt i32 %3099, 10
  %3105 = or i1 %3103, %3104
  br i1 %3105, label %originalBBpart2814, label %originalBB805alteredBB

originalBBpart2814:                               ; preds = %originalBB805
  br label %3038, !dbg !4129, !llvm.loop !4142

3106:                                             ; preds = %3085
  br label %3375, !dbg !4143

3107:                                             ; preds = %originalBBpart2769
  %3108 = load i32, i32* @x.63
  %3109 = load i32, i32* @y.64
  %3110 = sub i32 %3108, 1
  %3111 = mul i32 %3108, %3110
  %3112 = urem i32 %3111, 2
  %3113 = icmp eq i32 %3112, 0
  %3114 = icmp slt i32 %3109, 10
  %3115 = or i1 %3113, %3114
  br i1 %3115, label %originalBB816, label %originalBB816alteredBB

originalBB816:                                    ; preds = %3107, %originalBB816alteredBB
  %3116 = load i8, i8* %35, align 1, !dbg !4144
  %3117 = trunc i8 %3116 to i1, !dbg !4144
  %3118 = load i32, i32* @x.63
  %3119 = load i32, i32* @y.64
  %3120 = sub i32 %3118, 1
  %3121 = mul i32 %3118, %3120
  %3122 = urem i32 %3121, 2
  %3123 = icmp eq i32 %3122, 0
  %3124 = icmp slt i32 %3119, 10
  %3125 = or i1 %3123, %3124
  br i1 %3125, label %originalBBpart2818, label %originalBB816alteredBB

originalBBpart2818:                               ; preds = %originalBB816
  br i1 %3117, label %3126, label %3295, !dbg !4147

3126:                                             ; preds = %originalBBpart2818
  %3127 = load i32, i32* @x.63
  %3128 = load i32, i32* @y.64
  %3129 = sub i32 %3127, 1
  %3130 = mul i32 %3127, %3129
  %3131 = urem i32 %3130, 2
  %3132 = icmp eq i32 %3131, 0
  %3133 = icmp slt i32 %3128, 10
  %3134 = or i1 %3132, %3133
  br i1 %3134, label %originalBB820, label %originalBB820alteredBB

originalBB820:                                    ; preds = %3126, %originalBB820alteredBB
  %3135 = load i32, i32* %23, align 4, !dbg !4148
  %3136 = icmp eq i32 %3135, 2, !dbg !4149
  %3137 = load i32, i32* @x.63
  %3138 = load i32, i32* @y.64
  %3139 = sub i32 %3137, 1
  %3140 = mul i32 %3137, %3139
  %3141 = urem i32 %3140, 2
  %3142 = icmp eq i32 %3141, 0
  %3143 = icmp slt i32 %3138, 10
  %3144 = or i1 %3142, %3143
  br i1 %3144, label %originalBBpart2822, label %originalBB820alteredBB

originalBBpart2822:                               ; preds = %originalBB820
  br i1 %3136, label %3145, label %3295, !dbg !4150

3145:                                             ; preds = %originalBBpart2822
  call void @llvm.dbg.declare(metadata i64* %49, metadata !4151, metadata !DIExpression()), !dbg !4153
  %3146 = load i32, i32* @x.63
  %3147 = load i32, i32* @y.64
  %3148 = sub i32 %3146, 1
  %3149 = mul i32 %3146, %3148
  %3150 = urem i32 %3149, 2
  %3151 = icmp eq i32 %3150, 0
  %3152 = icmp slt i32 %3147, 10
  %3153 = or i1 %3151, %3152
  br i1 %3153, label %originalBB824, label %originalBB824alteredBB

originalBB824:                                    ; preds = %3145, %originalBB824alteredBB
  store i64 1, i64* %49, align 8, !dbg !4154
  %3154 = load i32, i32* @x.63
  %3155 = load i32, i32* @y.64
  %3156 = sub i32 %3154, 1
  %3157 = mul i32 %3154, %3156
  %3158 = urem i32 %3157, 2
  %3159 = icmp eq i32 %3158, 0
  %3160 = icmp slt i32 %3155, 10
  %3161 = or i1 %3159, %3160
  br i1 %3161, label %originalBBpart2826, label %originalBB824alteredBB

originalBBpart2826:                               ; preds = %originalBB824
  br label %3162, !dbg !4156

3162:                                             ; preds = %originalBBpart2863, %originalBBpart2826
  %3163 = load i32, i32* @x.63
  %3164 = load i32, i32* @y.64
  %3165 = sub i32 %3163, 1
  %3166 = mul i32 %3163, %3165
  %3167 = urem i32 %3166, 2
  %3168 = icmp eq i32 %3167, 0
  %3169 = icmp slt i32 %3164, 10
  %3170 = or i1 %3168, %3169
  br i1 %3170, label %originalBB828, label %originalBB828alteredBB

originalBB828:                                    ; preds = %3162, %originalBB828alteredBB
  %3171 = load i64, i64* %49, align 8, !dbg !4157
  %3172 = load i64, i64* %48, align 8, !dbg !4159
  %3173 = icmp ult i64 %3171, %3172, !dbg !4160
  %3174 = load i32, i32* @x.63
  %3175 = load i32, i32* @y.64
  %3176 = sub i32 %3174, 1
  %3177 = mul i32 %3174, %3176
  %3178 = urem i32 %3177, 2
  %3179 = icmp eq i32 %3178, 0
  %3180 = icmp slt i32 %3175, 10
  %3181 = or i1 %3179, %3180
  br i1 %3181, label %originalBBpart2830, label %originalBB828alteredBB

originalBBpart2830:                               ; preds = %originalBB828
  br i1 %3173, label %3182, label %3278, !dbg !4161

3182:                                             ; preds = %originalBBpart2830
  %3183 = load i32, i32* @x.63
  %3184 = load i32, i32* @y.64
  %3185 = sub i32 %3183, 1
  %3186 = mul i32 %3183, %3185
  %3187 = urem i32 %3186, 2
  %3188 = icmp eq i32 %3187, 0
  %3189 = icmp slt i32 %3184, 10
  %3190 = or i1 %3188, %3189
  br i1 %3190, label %originalBB832, label %originalBB832alteredBB

originalBB832:                                    ; preds = %3182, %originalBB832alteredBB
  %3191 = load i8*, i8** %21, align 8, !dbg !4162
  %3192 = load i64, i64* %28, align 8, !dbg !4163
  %3193 = load i64, i64* %44, align 8, !dbg !4164
  %3194 = add i64 %3192, %3193, !dbg !4165
  %3195 = load i64, i64* %49, align 8, !dbg !4166
  %3196 = add i64 %3194, %3195, !dbg !4167
  %3197 = getelementptr inbounds i8, i8* %3191, i64 %3196, !dbg !4162
  %3198 = load i8, i8* %3197, align 1, !dbg !4162
  %3199 = sext i8 %3198 to i32, !dbg !4162
  %3200 = load i32, i32* @x.63
  %3201 = load i32, i32* @y.64
  %3202 = sub i32 %3200, 1
  %3203 = mul i32 %3200, %3202
  %3204 = urem i32 %3203, 2
  %3205 = icmp eq i32 %3204, 0
  %3206 = icmp slt i32 %3201, 10
  %3207 = or i1 %3205, %3206
  br i1 %3207, label %originalBBpart2839, label %originalBB832alteredBB

originalBBpart2839:                               ; preds = %originalBB832
  switch i32 %3199, label %3225 [
    i32 91, label %3208
    i32 92, label %3208
    i32 94, label %3208
    i32 96, label %3208
    i32 124, label %3208
  ], !dbg !4168

3208:                                             ; preds = %originalBBpart2839, %originalBBpart2839, %originalBBpart2839, %originalBBpart2839, %originalBBpart2839
  %3209 = load i32, i32* @x.63
  %3210 = load i32, i32* @y.64
  %3211 = sub i32 %3209, 1
  %3212 = mul i32 %3209, %3211
  %3213 = urem i32 %3212, 2
  %3214 = icmp eq i32 %3213, 0
  %3215 = icmp slt i32 %3210, 10
  %3216 = or i1 %3214, %3215
  br i1 %3216, label %originalBB841, label %originalBB841alteredBB

originalBB841:                                    ; preds = %3208, %originalBB841alteredBB
  %3217 = load i32, i32* @x.63
  %3218 = load i32, i32* @y.64
  %3219 = sub i32 %3217, 1
  %3220 = mul i32 %3217, %3219
  %3221 = urem i32 %3220, 2
  %3222 = icmp eq i32 %3221, 0
  %3223 = icmp slt i32 %3218, 10
  %3224 = or i1 %3222, %3223
  br i1 %3224, label %originalBBpart2843, label %originalBB841alteredBB

originalBBpart2843:                               ; preds = %originalBB841
  br label %5422, !dbg !4169

3225:                                             ; preds = %originalBBpart2839
  %3226 = load i32, i32* @x.63
  %3227 = load i32, i32* @y.64
  %3228 = sub i32 %3226, 1
  %3229 = mul i32 %3226, %3228
  %3230 = urem i32 %3229, 2
  %3231 = icmp eq i32 %3230, 0
  %3232 = icmp slt i32 %3227, 10
  %3233 = or i1 %3231, %3232
  br i1 %3233, label %originalBB845, label %originalBB845alteredBB

originalBB845:                                    ; preds = %3225, %originalBB845alteredBB
  %3234 = load i32, i32* @x.63
  %3235 = load i32, i32* @y.64
  %3236 = sub i32 %3234, 1
  %3237 = mul i32 %3234, %3236
  %3238 = urem i32 %3237, 2
  %3239 = icmp eq i32 %3238, 0
  %3240 = icmp slt i32 %3235, 10
  %3241 = or i1 %3239, %3240
  br i1 %3241, label %originalBBpart2847, label %originalBB845alteredBB

originalBBpart2847:                               ; preds = %originalBB845
  br label %3242, !dbg !4171

3242:                                             ; preds = %originalBBpart2847
  %3243 = load i32, i32* @x.63
  %3244 = load i32, i32* @y.64
  %3245 = sub i32 %3243, 1
  %3246 = mul i32 %3243, %3245
  %3247 = urem i32 %3246, 2
  %3248 = icmp eq i32 %3247, 0
  %3249 = icmp slt i32 %3244, 10
  %3250 = or i1 %3248, %3249
  br i1 %3250, label %originalBB849, label %originalBB849alteredBB

originalBB849:                                    ; preds = %3242, %originalBB849alteredBB
  %3251 = load i32, i32* @x.63
  %3252 = load i32, i32* @y.64
  %3253 = sub i32 %3251, 1
  %3254 = mul i32 %3251, %3253
  %3255 = urem i32 %3254, 2
  %3256 = icmp eq i32 %3255, 0
  %3257 = icmp slt i32 %3252, 10
  %3258 = or i1 %3256, %3257
  br i1 %3258, label %originalBBpart2851, label %originalBB849alteredBB

originalBBpart2851:                               ; preds = %originalBB849
  br label %3259, !dbg !4172

3259:                                             ; preds = %originalBBpart2851
  %3260 = load i32, i32* @x.63
  %3261 = load i32, i32* @y.64
  %3262 = sub i32 %3260, 1
  %3263 = mul i32 %3260, %3262
  %3264 = urem i32 %3263, 2
  %3265 = icmp eq i32 %3264, 0
  %3266 = icmp slt i32 %3261, 10
  %3267 = or i1 %3265, %3266
  br i1 %3267, label %originalBB853, label %originalBB853alteredBB

originalBB853:                                    ; preds = %3259, %originalBB853alteredBB
  %3268 = load i64, i64* %49, align 8, !dbg !4173
  %3269 = add i64 %3268, 1, !dbg !4173
  store i64 %3269, i64* %49, align 8, !dbg !4173
  %3270 = load i32, i32* @x.63
  %3271 = load i32, i32* @y.64
  %3272 = sub i32 %3270, 1
  %3273 = mul i32 %3270, %3272
  %3274 = urem i32 %3273, 2
  %3275 = icmp eq i32 %3274, 0
  %3276 = icmp slt i32 %3271, 10
  %3277 = or i1 %3275, %3276
  br i1 %3277, label %originalBBpart2863, label %originalBB853alteredBB

originalBBpart2863:                               ; preds = %originalBB853
  br label %3162, !dbg !4174, !llvm.loop !4175

3278:                                             ; preds = %originalBBpart2830
  %3279 = load i32, i32* @x.63
  %3280 = load i32, i32* @y.64
  %3281 = sub i32 %3279, 1
  %3282 = mul i32 %3279, %3281
  %3283 = urem i32 %3282, 2
  %3284 = icmp eq i32 %3283, 0
  %3285 = icmp slt i32 %3280, 10
  %3286 = or i1 %3284, %3285
  br i1 %3286, label %originalBB865, label %originalBB865alteredBB

originalBB865:                                    ; preds = %3278, %originalBB865alteredBB
  %3287 = load i32, i32* @x.63
  %3288 = load i32, i32* @y.64
  %3289 = sub i32 %3287, 1
  %3290 = mul i32 %3287, %3289
  %3291 = urem i32 %3290, 2
  %3292 = icmp eq i32 %3291, 0
  %3293 = icmp slt i32 %3288, 10
  %3294 = or i1 %3292, %3293
  br i1 %3294, label %originalBBpart2867, label %originalBB865alteredBB

originalBBpart2867:                               ; preds = %originalBB865
  br label %3295, !dbg !4177

3295:                                             ; preds = %originalBBpart2867, %originalBBpart2822, %originalBBpart2818
  %3296 = load i32, i32* @x.63
  %3297 = load i32, i32* @y.64
  %3298 = sub i32 %3296, 1
  %3299 = mul i32 %3296, %3298
  %3300 = urem i32 %3299, 2
  %3301 = icmp eq i32 %3300, 0
  %3302 = icmp slt i32 %3297, 10
  %3303 = or i1 %3301, %3302
  br i1 %3303, label %originalBB869, label %originalBB869alteredBB

originalBB869:                                    ; preds = %3295, %originalBB869alteredBB
  %3304 = load i32, i32* %47, align 4, !dbg !4178
  %3305 = call i32 @iswprint(i32 %3304) #10, !dbg !4180
  %3306 = icmp ne i32 %3305, 0, !dbg !4180
  %3307 = load i32, i32* @x.63
  %3308 = load i32, i32* @y.64
  %3309 = sub i32 %3307, 1
  %3310 = mul i32 %3307, %3309
  %3311 = urem i32 %3310, 2
  %3312 = icmp eq i32 %3311, 0
  %3313 = icmp slt i32 %3308, 10
  %3314 = or i1 %3312, %3313
  br i1 %3314, label %originalBBpart2871, label %originalBB869alteredBB

originalBBpart2871:                               ; preds = %originalBB869
  br i1 %3306, label %3316, label %3315, !dbg !4181

3315:                                             ; preds = %originalBBpart2871
  store i8 0, i8* %45, align 1, !dbg !4182
  br label %3316, !dbg !4183

3316:                                             ; preds = %3315, %originalBBpart2871
  %3317 = load i64, i64* %48, align 8, !dbg !4184
  %3318 = load i64, i64* %44, align 8, !dbg !4185
  %3319 = add i64 %3318, %3317, !dbg !4185
  store i64 %3319, i64* %44, align 8, !dbg !4185
  br label %3320

3320:                                             ; preds = %3316
  br label %3321

3321:                                             ; preds = %3320
  %3322 = load i32, i32* @x.63
  %3323 = load i32, i32* @y.64
  %3324 = sub i32 %3322, 1
  %3325 = mul i32 %3322, %3324
  %3326 = urem i32 %3325, 2
  %3327 = icmp eq i32 %3326, 0
  %3328 = icmp slt i32 %3323, 10
  %3329 = or i1 %3327, %3328
  br i1 %3329, label %originalBB873, label %originalBB873alteredBB

originalBB873:                                    ; preds = %3321, %originalBB873alteredBB
  %3330 = load i32, i32* @x.63
  %3331 = load i32, i32* @y.64
  %3332 = sub i32 %3330, 1
  %3333 = mul i32 %3330, %3332
  %3334 = urem i32 %3333, 2
  %3335 = icmp eq i32 %3334, 0
  %3336 = icmp slt i32 %3331, 10
  %3337 = or i1 %3335, %3336
  br i1 %3337, label %originalBBpart2875, label %originalBB873alteredBB

originalBBpart2875:                               ; preds = %originalBB873
  br label %3338

3338:                                             ; preds = %originalBBpart2875
  %3339 = load i32, i32* @x.63
  %3340 = load i32, i32* @y.64
  %3341 = sub i32 %3339, 1
  %3342 = mul i32 %3339, %3341
  %3343 = urem i32 %3342, 2
  %3344 = icmp eq i32 %3343, 0
  %3345 = icmp slt i32 %3340, 10
  %3346 = or i1 %3344, %3345
  br i1 %3346, label %originalBB877, label %originalBB877alteredBB

originalBB877:                                    ; preds = %3338, %originalBB877alteredBB
  %3347 = load i32, i32* @x.63
  %3348 = load i32, i32* @y.64
  %3349 = sub i32 %3347, 1
  %3350 = mul i32 %3347, %3349
  %3351 = urem i32 %3350, 2
  %3352 = icmp eq i32 %3351, 0
  %3353 = icmp slt i32 %3348, 10
  %3354 = or i1 %3352, %3353
  br i1 %3354, label %originalBBpart2879, label %originalBB877alteredBB

originalBBpart2879:                               ; preds = %originalBB877
  br label %3355, !dbg !4186

3355:                                             ; preds = %originalBBpart2879
  %3356 = load i32, i32* @x.63
  %3357 = load i32, i32* @y.64
  %3358 = sub i32 %3356, 1
  %3359 = mul i32 %3356, %3358
  %3360 = urem i32 %3359, 2
  %3361 = icmp eq i32 %3360, 0
  %3362 = icmp slt i32 %3357, 10
  %3363 = or i1 %3361, %3362
  br i1 %3363, label %originalBB881, label %originalBB881alteredBB

originalBB881:                                    ; preds = %3355, %originalBB881alteredBB
  %3364 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !4187
  %3365 = icmp ne i32 %3364, 0, !dbg !4188
  %3366 = xor i1 %3365, true, !dbg !4188
  %3367 = load i32, i32* @x.63
  %3368 = load i32, i32* @y.64
  %3369 = sub i32 %3367, 1
  %3370 = mul i32 %3367, %3369
  %3371 = urem i32 %3370, 2
  %3372 = icmp eq i32 %3371, 0
  %3373 = icmp slt i32 %3368, 10
  %3374 = or i1 %3372, %3373
  br i1 %3374, label %originalBBpart2891, label %originalBB881alteredBB

originalBBpart2891:                               ; preds = %originalBB881
  br i1 %3366, label %2935, label %3375, !dbg !4186, !llvm.loop !4189

3375:                                             ; preds = %originalBBpart2891, %3106, %originalBBpart2765, %2965
  br label %3376

3376:                                             ; preds = %3375, %2867
  %3377 = load i32, i32* @x.63
  %3378 = load i32, i32* @y.64
  %3379 = sub i32 %3377, 1
  %3380 = mul i32 %3377, %3379
  %3381 = urem i32 %3380, 2
  %3382 = icmp eq i32 %3381, 0
  %3383 = icmp slt i32 %3378, 10
  %3384 = or i1 %3382, %3383
  br i1 %3384, label %originalBB893, label %originalBB893alteredBB

originalBB893:                                    ; preds = %3376, %originalBB893alteredBB
  %3385 = load i8, i8* %45, align 1, !dbg !4191
  %3386 = trunc i8 %3385 to i1, !dbg !4191
  %3387 = zext i1 %3386 to i8, !dbg !4192
  store i8 %3387, i8* %43, align 1, !dbg !4192
  %3388 = load i64, i64* %44, align 8, !dbg !4193
  %3389 = icmp ult i64 1, %3388, !dbg !4195
  %3390 = load i32, i32* @x.63
  %3391 = load i32, i32* @y.64
  %3392 = sub i32 %3390, 1
  %3393 = mul i32 %3390, %3392
  %3394 = urem i32 %3393, 2
  %3395 = icmp eq i32 %3394, 0
  %3396 = icmp slt i32 %3391, 10
  %3397 = or i1 %3395, %3396
  br i1 %3397, label %originalBBpart2895, label %originalBB893alteredBB

originalBBpart2895:                               ; preds = %originalBB893
  br i1 %3389, label %3436, label %3398, !dbg !4196

3398:                                             ; preds = %originalBBpart2895
  %3399 = load i32, i32* @x.63
  %3400 = load i32, i32* @y.64
  %3401 = sub i32 %3399, 1
  %3402 = mul i32 %3399, %3401
  %3403 = urem i32 %3402, 2
  %3404 = icmp eq i32 %3403, 0
  %3405 = icmp slt i32 %3400, 10
  %3406 = or i1 %3404, %3405
  br i1 %3406, label %originalBB897, label %originalBB897alteredBB

originalBB897:                                    ; preds = %3398, %originalBB897alteredBB
  %3407 = load i8, i8* %33, align 1, !dbg !4197
  %3408 = trunc i8 %3407 to i1, !dbg !4197
  %3409 = load i32, i32* @x.63
  %3410 = load i32, i32* @y.64
  %3411 = sub i32 %3409, 1
  %3412 = mul i32 %3409, %3411
  %3413 = urem i32 %3412, 2
  %3414 = icmp eq i32 %3413, 0
  %3415 = icmp slt i32 %3410, 10
  %3416 = or i1 %3414, %3415
  br i1 %3416, label %originalBBpart2899, label %originalBB897alteredBB

originalBBpart2899:                               ; preds = %originalBB897
  br i1 %3408, label %3417, label %4344, !dbg !4198

3417:                                             ; preds = %originalBBpart2899
  %3418 = load i32, i32* @x.63
  %3419 = load i32, i32* @y.64
  %3420 = sub i32 %3418, 1
  %3421 = mul i32 %3418, %3420
  %3422 = urem i32 %3421, 2
  %3423 = icmp eq i32 %3422, 0
  %3424 = icmp slt i32 %3419, 10
  %3425 = or i1 %3423, %3424
  br i1 %3425, label %originalBB901, label %originalBB901alteredBB

originalBB901:                                    ; preds = %3417, %originalBB901alteredBB
  %3426 = load i8, i8* %45, align 1, !dbg !4199
  %3427 = trunc i8 %3426 to i1, !dbg !4199
  %3428 = load i32, i32* @x.63
  %3429 = load i32, i32* @y.64
  %3430 = sub i32 %3428, 1
  %3431 = mul i32 %3428, %3430
  %3432 = urem i32 %3431, 2
  %3433 = icmp eq i32 %3432, 0
  %3434 = icmp slt i32 %3429, 10
  %3435 = or i1 %3433, %3434
  br i1 %3435, label %originalBBpart2903, label %originalBB901alteredBB

originalBBpart2903:                               ; preds = %originalBB901
  br i1 %3427, label %4344, label %3436, !dbg !4200

3436:                                             ; preds = %originalBBpart2903, %originalBBpart2895
  call void @llvm.dbg.declare(metadata i64* %50, metadata !4201, metadata !DIExpression()), !dbg !4203
  %3437 = load i64, i64* %28, align 8, !dbg !4204
  %3438 = load i64, i64* %44, align 8, !dbg !4205
  %3439 = add i64 %3437, %3438, !dbg !4206
  store i64 %3439, i64* %50, align 8, !dbg !4203
  br label %3440, !dbg !4207

3440:                                             ; preds = %4321, %3436
  %3441 = load i32, i32* @x.63
  %3442 = load i32, i32* @y.64
  %3443 = sub i32 %3441, 1
  %3444 = mul i32 %3441, %3443
  %3445 = urem i32 %3444, 2
  %3446 = icmp eq i32 %3445, 0
  %3447 = icmp slt i32 %3442, 10
  %3448 = or i1 %3446, %3447
  br i1 %3448, label %originalBB905, label %originalBB905alteredBB

originalBB905:                                    ; preds = %3440, %originalBB905alteredBB
  %3449 = load i8, i8* %33, align 1, !dbg !4208
  %3450 = trunc i8 %3449 to i1, !dbg !4208
  %3451 = load i32, i32* @x.63
  %3452 = load i32, i32* @y.64
  %3453 = sub i32 %3451, 1
  %3454 = mul i32 %3451, %3453
  %3455 = urem i32 %3454, 2
  %3456 = icmp eq i32 %3455, 0
  %3457 = icmp slt i32 %3452, 10
  %3458 = or i1 %3456, %3457
  br i1 %3458, label %originalBBpart2907, label %originalBB905alteredBB

originalBBpart2907:                               ; preds = %originalBB905
  br i1 %3450, label %3459, label %3964, !dbg !4213

3459:                                             ; preds = %originalBBpart2907
  %3460 = load i32, i32* @x.63
  %3461 = load i32, i32* @y.64
  %3462 = sub i32 %3460, 1
  %3463 = mul i32 %3460, %3462
  %3464 = urem i32 %3463, 2
  %3465 = icmp eq i32 %3464, 0
  %3466 = icmp slt i32 %3461, 10
  %3467 = or i1 %3465, %3466
  br i1 %3467, label %originalBB909, label %originalBB909alteredBB

originalBB909:                                    ; preds = %3459, %originalBB909alteredBB
  %3468 = load i8, i8* %45, align 1, !dbg !4214
  %3469 = trunc i8 %3468 to i1, !dbg !4214
  %3470 = load i32, i32* @x.63
  %3471 = load i32, i32* @y.64
  %3472 = sub i32 %3470, 1
  %3473 = mul i32 %3470, %3472
  %3474 = urem i32 %3473, 2
  %3475 = icmp eq i32 %3474, 0
  %3476 = icmp slt i32 %3471, 10
  %3477 = or i1 %3475, %3476
  br i1 %3477, label %originalBBpart2911, label %originalBB909alteredBB

originalBBpart2911:                               ; preds = %originalBB909
  br i1 %3469, label %3964, label %3478, !dbg !4215

3478:                                             ; preds = %originalBBpart2911
  br label %3479, !dbg !4216

3479:                                             ; preds = %3478
  %3480 = load i32, i32* @x.63
  %3481 = load i32, i32* @y.64
  %3482 = sub i32 %3480, 1
  %3483 = mul i32 %3480, %3482
  %3484 = urem i32 %3483, 2
  %3485 = icmp eq i32 %3484, 0
  %3486 = icmp slt i32 %3481, 10
  %3487 = or i1 %3485, %3486
  br i1 %3487, label %originalBB913, label %originalBB913alteredBB

originalBB913:                                    ; preds = %3479, %originalBB913alteredBB
  %3488 = load i8, i8* %35, align 1, !dbg !4218
  %3489 = trunc i8 %3488 to i1, !dbg !4218
  %3490 = load i32, i32* @x.63
  %3491 = load i32, i32* @y.64
  %3492 = sub i32 %3490, 1
  %3493 = mul i32 %3490, %3492
  %3494 = urem i32 %3493, 2
  %3495 = icmp eq i32 %3494, 0
  %3496 = icmp slt i32 %3491, 10
  %3497 = or i1 %3495, %3496
  br i1 %3497, label %originalBBpart2915, label %originalBB913alteredBB

originalBBpart2915:                               ; preds = %originalBB913
  br i1 %3489, label %3498, label %3515, !dbg !4221

3498:                                             ; preds = %originalBBpart2915
  %3499 = load i32, i32* @x.63
  %3500 = load i32, i32* @y.64
  %3501 = sub i32 %3499, 1
  %3502 = mul i32 %3499, %3501
  %3503 = urem i32 %3502, 2
  %3504 = icmp eq i32 %3503, 0
  %3505 = icmp slt i32 %3500, 10
  %3506 = or i1 %3504, %3505
  br i1 %3506, label %originalBB917, label %originalBB917alteredBB

originalBB917:                                    ; preds = %3498, %originalBB917alteredBB
  %3507 = load i32, i32* @x.63
  %3508 = load i32, i32* @y.64
  %3509 = sub i32 %3507, 1
  %3510 = mul i32 %3507, %3509
  %3511 = urem i32 %3510, 2
  %3512 = icmp eq i32 %3511, 0
  %3513 = icmp slt i32 %3508, 10
  %3514 = or i1 %3512, %3513
  br i1 %3514, label %originalBBpart2919, label %originalBB917alteredBB

originalBBpart2919:                               ; preds = %originalBB917
  br label %5422, !dbg !4218

3515:                                             ; preds = %originalBBpart2915
  %3516 = load i32, i32* @x.63
  %3517 = load i32, i32* @y.64
  %3518 = sub i32 %3516, 1
  %3519 = mul i32 %3516, %3518
  %3520 = urem i32 %3519, 2
  %3521 = icmp eq i32 %3520, 0
  %3522 = icmp slt i32 %3517, 10
  %3523 = or i1 %3521, %3522
  br i1 %3523, label %originalBB921, label %originalBB921alteredBB

originalBB921:                                    ; preds = %3515, %originalBB921alteredBB
  store i8 1, i8* %42, align 1, !dbg !4221
  %3524 = load i32, i32* %23, align 4, !dbg !4222
  %3525 = icmp eq i32 %3524, 2, !dbg !4222
  %3526 = load i32, i32* @x.63
  %3527 = load i32, i32* @y.64
  %3528 = sub i32 %3526, 1
  %3529 = mul i32 %3526, %3528
  %3530 = urem i32 %3529, 2
  %3531 = icmp eq i32 %3530, 0
  %3532 = icmp slt i32 %3527, 10
  %3533 = or i1 %3531, %3532
  br i1 %3533, label %originalBBpart2923, label %originalBB921alteredBB

originalBBpart2923:                               ; preds = %originalBB921
  br i1 %3525, label %3534, label %3734, !dbg !4222

3534:                                             ; preds = %originalBBpart2923
  %3535 = load i32, i32* @x.63
  %3536 = load i32, i32* @y.64
  %3537 = sub i32 %3535, 1
  %3538 = mul i32 %3535, %3537
  %3539 = urem i32 %3538, 2
  %3540 = icmp eq i32 %3539, 0
  %3541 = icmp slt i32 %3536, 10
  %3542 = or i1 %3540, %3541
  br i1 %3542, label %originalBB925, label %originalBB925alteredBB

originalBB925:                                    ; preds = %3534, %originalBB925alteredBB
  %3543 = load i8, i8* %36, align 1, !dbg !4222
  %3544 = trunc i8 %3543 to i1, !dbg !4222
  %3545 = load i32, i32* @x.63
  %3546 = load i32, i32* @y.64
  %3547 = sub i32 %3545, 1
  %3548 = mul i32 %3545, %3547
  %3549 = urem i32 %3548, 2
  %3550 = icmp eq i32 %3549, 0
  %3551 = icmp slt i32 %3546, 10
  %3552 = or i1 %3550, %3551
  br i1 %3552, label %originalBBpart2927, label %originalBB925alteredBB

originalBBpart2927:                               ; preds = %originalBB925
  br i1 %3544, label %3734, label %3553, !dbg !4221

3553:                                             ; preds = %originalBBpart2927
  %3554 = load i32, i32* @x.63
  %3555 = load i32, i32* @y.64
  %3556 = sub i32 %3554, 1
  %3557 = mul i32 %3554, %3556
  %3558 = urem i32 %3557, 2
  %3559 = icmp eq i32 %3558, 0
  %3560 = icmp slt i32 %3555, 10
  %3561 = or i1 %3559, %3560
  br i1 %3561, label %originalBB929, label %originalBB929alteredBB

originalBB929:                                    ; preds = %3553, %originalBB929alteredBB
  %3562 = load i32, i32* @x.63
  %3563 = load i32, i32* @y.64
  %3564 = sub i32 %3562, 1
  %3565 = mul i32 %3562, %3564
  %3566 = urem i32 %3565, 2
  %3567 = icmp eq i32 %3566, 0
  %3568 = icmp slt i32 %3563, 10
  %3569 = or i1 %3567, %3568
  br i1 %3569, label %originalBBpart2931, label %originalBB929alteredBB

originalBBpart2931:                               ; preds = %originalBB929
  br label %3570, !dbg !4224

3570:                                             ; preds = %originalBBpart2931
  %3571 = load i32, i32* @x.63
  %3572 = load i32, i32* @y.64
  %3573 = sub i32 %3571, 1
  %3574 = mul i32 %3571, %3573
  %3575 = urem i32 %3574, 2
  %3576 = icmp eq i32 %3575, 0
  %3577 = icmp slt i32 %3572, 10
  %3578 = or i1 %3576, %3577
  br i1 %3578, label %originalBB933, label %originalBB933alteredBB

originalBB933:                                    ; preds = %3570, %originalBB933alteredBB
  %3579 = load i64, i64* %29, align 8, !dbg !4226
  %3580 = load i64, i64* %20, align 8, !dbg !4226
  %3581 = icmp ult i64 %3579, %3580, !dbg !4226
  %3582 = load i32, i32* @x.63
  %3583 = load i32, i32* @y.64
  %3584 = sub i32 %3582, 1
  %3585 = mul i32 %3582, %3584
  %3586 = urem i32 %3585, 2
  %3587 = icmp eq i32 %3586, 0
  %3588 = icmp slt i32 %3583, 10
  %3589 = or i1 %3587, %3588
  br i1 %3589, label %originalBBpart2935, label %originalBB933alteredBB

originalBBpart2935:                               ; preds = %originalBB933
  br i1 %3581, label %3590, label %3610, !dbg !4229

3590:                                             ; preds = %originalBBpart2935
  %3591 = load i32, i32* @x.63
  %3592 = load i32, i32* @y.64
  %3593 = sub i32 %3591, 1
  %3594 = mul i32 %3591, %3593
  %3595 = urem i32 %3594, 2
  %3596 = icmp eq i32 %3595, 0
  %3597 = icmp slt i32 %3592, 10
  %3598 = or i1 %3596, %3597
  br i1 %3598, label %originalBB937, label %originalBB937alteredBB

originalBB937:                                    ; preds = %3590, %originalBB937alteredBB
  %3599 = load i8*, i8** %19, align 8, !dbg !4226
  %3600 = load i64, i64* %29, align 8, !dbg !4226
  %3601 = getelementptr inbounds i8, i8* %3599, i64 %3600, !dbg !4226
  store i8 39, i8* %3601, align 1, !dbg !4226
  %3602 = load i32, i32* @x.63
  %3603 = load i32, i32* @y.64
  %3604 = sub i32 %3602, 1
  %3605 = mul i32 %3602, %3604
  %3606 = urem i32 %3605, 2
  %3607 = icmp eq i32 %3606, 0
  %3608 = icmp slt i32 %3603, 10
  %3609 = or i1 %3607, %3608
  br i1 %3609, label %originalBBpart2939, label %originalBB937alteredBB

originalBBpart2939:                               ; preds = %originalBB937
  br label %3610, !dbg !4226

3610:                                             ; preds = %originalBBpart2939, %originalBBpart2935
  %3611 = load i64, i64* %29, align 8, !dbg !4229
  %3612 = add i64 %3611, 1, !dbg !4229
  store i64 %3612, i64* %29, align 8, !dbg !4229
  br label %3613, !dbg !4229

3613:                                             ; preds = %3610
  %3614 = load i32, i32* @x.63
  %3615 = load i32, i32* @y.64
  %3616 = sub i32 %3614, 1
  %3617 = mul i32 %3614, %3616
  %3618 = urem i32 %3617, 2
  %3619 = icmp eq i32 %3618, 0
  %3620 = icmp slt i32 %3615, 10
  %3621 = or i1 %3619, %3620
  br i1 %3621, label %originalBB941, label %originalBB941alteredBB

originalBB941:                                    ; preds = %3613, %originalBB941alteredBB
  %3622 = load i32, i32* @x.63
  %3623 = load i32, i32* @y.64
  %3624 = sub i32 %3622, 1
  %3625 = mul i32 %3622, %3624
  %3626 = urem i32 %3625, 2
  %3627 = icmp eq i32 %3626, 0
  %3628 = icmp slt i32 %3623, 10
  %3629 = or i1 %3627, %3628
  br i1 %3629, label %originalBBpart2943, label %originalBB941alteredBB

originalBBpart2943:                               ; preds = %originalBB941
  br label %3630, !dbg !4224

3630:                                             ; preds = %originalBBpart2943
  %3631 = load i32, i32* @x.63
  %3632 = load i32, i32* @y.64
  %3633 = sub i32 %3631, 1
  %3634 = mul i32 %3631, %3633
  %3635 = urem i32 %3634, 2
  %3636 = icmp eq i32 %3635, 0
  %3637 = icmp slt i32 %3632, 10
  %3638 = or i1 %3636, %3637
  br i1 %3638, label %originalBB945, label %originalBB945alteredBB

originalBB945:                                    ; preds = %3630, %originalBB945alteredBB
  %3639 = load i64, i64* %29, align 8, !dbg !4230
  %3640 = load i64, i64* %20, align 8, !dbg !4230
  %3641 = icmp ult i64 %3639, %3640, !dbg !4230
  %3642 = load i32, i32* @x.63
  %3643 = load i32, i32* @y.64
  %3644 = sub i32 %3642, 1
  %3645 = mul i32 %3642, %3644
  %3646 = urem i32 %3645, 2
  %3647 = icmp eq i32 %3646, 0
  %3648 = icmp slt i32 %3643, 10
  %3649 = or i1 %3647, %3648
  br i1 %3649, label %originalBBpart2947, label %originalBB945alteredBB

originalBBpart2947:                               ; preds = %originalBB945
  br i1 %3641, label %3650, label %3654, !dbg !4233

3650:                                             ; preds = %originalBBpart2947
  %3651 = load i8*, i8** %19, align 8, !dbg !4230
  %3652 = load i64, i64* %29, align 8, !dbg !4230
  %3653 = getelementptr inbounds i8, i8* %3651, i64 %3652, !dbg !4230
  store i8 36, i8* %3653, align 1, !dbg !4230
  br label %3654, !dbg !4230

3654:                                             ; preds = %3650, %originalBBpart2947
  %3655 = load i64, i64* %29, align 8, !dbg !4233
  %3656 = add i64 %3655, 1, !dbg !4233
  store i64 %3656, i64* %29, align 8, !dbg !4233
  br label %3657, !dbg !4233

3657:                                             ; preds = %3654
  %3658 = load i32, i32* @x.63
  %3659 = load i32, i32* @y.64
  %3660 = sub i32 %3658, 1
  %3661 = mul i32 %3658, %3660
  %3662 = urem i32 %3661, 2
  %3663 = icmp eq i32 %3662, 0
  %3664 = icmp slt i32 %3659, 10
  %3665 = or i1 %3663, %3664
  br i1 %3665, label %originalBB949, label %originalBB949alteredBB

originalBB949:                                    ; preds = %3657, %originalBB949alteredBB
  %3666 = load i32, i32* @x.63
  %3667 = load i32, i32* @y.64
  %3668 = sub i32 %3666, 1
  %3669 = mul i32 %3666, %3668
  %3670 = urem i32 %3669, 2
  %3671 = icmp eq i32 %3670, 0
  %3672 = icmp slt i32 %3667, 10
  %3673 = or i1 %3671, %3672
  br i1 %3673, label %originalBBpart2951, label %originalBB949alteredBB

originalBBpart2951:                               ; preds = %originalBB949
  br label %3674, !dbg !4224

3674:                                             ; preds = %originalBBpart2951
  %3675 = load i64, i64* %29, align 8, !dbg !4234
  %3676 = load i64, i64* %20, align 8, !dbg !4234
  %3677 = icmp ult i64 %3675, %3676, !dbg !4234
  br i1 %3677, label %3678, label %3698, !dbg !4237

3678:                                             ; preds = %3674
  %3679 = load i32, i32* @x.63
  %3680 = load i32, i32* @y.64
  %3681 = sub i32 %3679, 1
  %3682 = mul i32 %3679, %3681
  %3683 = urem i32 %3682, 2
  %3684 = icmp eq i32 %3683, 0
  %3685 = icmp slt i32 %3680, 10
  %3686 = or i1 %3684, %3685
  br i1 %3686, label %originalBB953, label %originalBB953alteredBB

originalBB953:                                    ; preds = %3678, %originalBB953alteredBB
  %3687 = load i8*, i8** %19, align 8, !dbg !4234
  %3688 = load i64, i64* %29, align 8, !dbg !4234
  %3689 = getelementptr inbounds i8, i8* %3687, i64 %3688, !dbg !4234
  store i8 39, i8* %3689, align 1, !dbg !4234
  %3690 = load i32, i32* @x.63
  %3691 = load i32, i32* @y.64
  %3692 = sub i32 %3690, 1
  %3693 = mul i32 %3690, %3692
  %3694 = urem i32 %3693, 2
  %3695 = icmp eq i32 %3694, 0
  %3696 = icmp slt i32 %3691, 10
  %3697 = or i1 %3695, %3696
  br i1 %3697, label %originalBBpart2955, label %originalBB953alteredBB

originalBBpart2955:                               ; preds = %originalBB953
  br label %3698, !dbg !4234

3698:                                             ; preds = %originalBBpart2955, %3674
  %3699 = load i32, i32* @x.63
  %3700 = load i32, i32* @y.64
  %3701 = sub i32 %3699, 1
  %3702 = mul i32 %3699, %3701
  %3703 = urem i32 %3702, 2
  %3704 = icmp eq i32 %3703, 0
  %3705 = icmp slt i32 %3700, 10
  %3706 = or i1 %3704, %3705
  br i1 %3706, label %originalBB957, label %originalBB957alteredBB

originalBB957:                                    ; preds = %3698, %originalBB957alteredBB
  %3707 = load i64, i64* %29, align 8, !dbg !4237
  %3708 = add i64 %3707, 1, !dbg !4237
  store i64 %3708, i64* %29, align 8, !dbg !4237
  %3709 = load i32, i32* @x.63
  %3710 = load i32, i32* @y.64
  %3711 = sub i32 %3709, 1
  %3712 = mul i32 %3709, %3711
  %3713 = urem i32 %3712, 2
  %3714 = icmp eq i32 %3713, 0
  %3715 = icmp slt i32 %3710, 10
  %3716 = or i1 %3714, %3715
  br i1 %3716, label %originalBBpart2969, label %originalBB957alteredBB

originalBBpart2969:                               ; preds = %originalBB957
  br label %3717, !dbg !4237

3717:                                             ; preds = %originalBBpart2969
  %3718 = load i32, i32* @x.63
  %3719 = load i32, i32* @y.64
  %3720 = sub i32 %3718, 1
  %3721 = mul i32 %3718, %3720
  %3722 = urem i32 %3721, 2
  %3723 = icmp eq i32 %3722, 0
  %3724 = icmp slt i32 %3719, 10
  %3725 = or i1 %3723, %3724
  br i1 %3725, label %originalBB971, label %originalBB971alteredBB

originalBB971:                                    ; preds = %3717, %originalBB971alteredBB
  store i8 1, i8* %36, align 1, !dbg !4224
  %3726 = load i32, i32* @x.63
  %3727 = load i32, i32* @y.64
  %3728 = sub i32 %3726, 1
  %3729 = mul i32 %3726, %3728
  %3730 = urem i32 %3729, 2
  %3731 = icmp eq i32 %3730, 0
  %3732 = icmp slt i32 %3727, 10
  %3733 = or i1 %3731, %3732
  br i1 %3733, label %originalBBpart2973, label %originalBB971alteredBB

originalBBpart2973:                               ; preds = %originalBB971
  br label %3734, !dbg !4224

3734:                                             ; preds = %originalBBpart2973, %originalBBpart2927, %originalBBpart2923
  %3735 = load i32, i32* @x.63
  %3736 = load i32, i32* @y.64
  %3737 = sub i32 %3735, 1
  %3738 = mul i32 %3735, %3737
  %3739 = urem i32 %3738, 2
  %3740 = icmp eq i32 %3739, 0
  %3741 = icmp slt i32 %3736, 10
  %3742 = or i1 %3740, %3741
  br i1 %3742, label %originalBB975, label %originalBB975alteredBB

originalBB975:                                    ; preds = %3734, %originalBB975alteredBB
  %3743 = load i32, i32* @x.63
  %3744 = load i32, i32* @y.64
  %3745 = sub i32 %3743, 1
  %3746 = mul i32 %3743, %3745
  %3747 = urem i32 %3746, 2
  %3748 = icmp eq i32 %3747, 0
  %3749 = icmp slt i32 %3744, 10
  %3750 = or i1 %3748, %3749
  br i1 %3750, label %originalBBpart2977, label %originalBB975alteredBB

originalBBpart2977:                               ; preds = %originalBB975
  br label %3751, !dbg !4221

3751:                                             ; preds = %originalBBpart2977
  %3752 = load i64, i64* %29, align 8, !dbg !4238
  %3753 = load i64, i64* %20, align 8, !dbg !4238
  %3754 = icmp ult i64 %3752, %3753, !dbg !4238
  br i1 %3754, label %3755, label %3775, !dbg !4241

3755:                                             ; preds = %3751
  %3756 = load i32, i32* @x.63
  %3757 = load i32, i32* @y.64
  %3758 = sub i32 %3756, 1
  %3759 = mul i32 %3756, %3758
  %3760 = urem i32 %3759, 2
  %3761 = icmp eq i32 %3760, 0
  %3762 = icmp slt i32 %3757, 10
  %3763 = or i1 %3761, %3762
  br i1 %3763, label %originalBB979, label %originalBB979alteredBB

originalBB979:                                    ; preds = %3755, %originalBB979alteredBB
  %3764 = load i8*, i8** %19, align 8, !dbg !4238
  %3765 = load i64, i64* %29, align 8, !dbg !4238
  %3766 = getelementptr inbounds i8, i8* %3764, i64 %3765, !dbg !4238
  store i8 92, i8* %3766, align 1, !dbg !4238
  %3767 = load i32, i32* @x.63
  %3768 = load i32, i32* @y.64
  %3769 = sub i32 %3767, 1
  %3770 = mul i32 %3767, %3769
  %3771 = urem i32 %3770, 2
  %3772 = icmp eq i32 %3771, 0
  %3773 = icmp slt i32 %3768, 10
  %3774 = or i1 %3772, %3773
  br i1 %3774, label %originalBBpart2981, label %originalBB979alteredBB

originalBBpart2981:                               ; preds = %originalBB979
  br label %3775, !dbg !4238

3775:                                             ; preds = %originalBBpart2981, %3751
  %3776 = load i32, i32* @x.63
  %3777 = load i32, i32* @y.64
  %3778 = sub i32 %3776, 1
  %3779 = mul i32 %3776, %3778
  %3780 = urem i32 %3779, 2
  %3781 = icmp eq i32 %3780, 0
  %3782 = icmp slt i32 %3777, 10
  %3783 = or i1 %3781, %3782
  br i1 %3783, label %originalBB983, label %originalBB983alteredBB

originalBB983:                                    ; preds = %3775, %originalBB983alteredBB
  %3784 = load i64, i64* %29, align 8, !dbg !4241
  %3785 = add i64 %3784, 1, !dbg !4241
  store i64 %3785, i64* %29, align 8, !dbg !4241
  %3786 = load i32, i32* @x.63
  %3787 = load i32, i32* @y.64
  %3788 = sub i32 %3786, 1
  %3789 = mul i32 %3786, %3788
  %3790 = urem i32 %3789, 2
  %3791 = icmp eq i32 %3790, 0
  %3792 = icmp slt i32 %3787, 10
  %3793 = or i1 %3791, %3792
  br i1 %3793, label %originalBBpart2997, label %originalBB983alteredBB

originalBBpart2997:                               ; preds = %originalBB983
  br label %3794, !dbg !4241

3794:                                             ; preds = %originalBBpart2997
  %3795 = load i32, i32* @x.63
  %3796 = load i32, i32* @y.64
  %3797 = sub i32 %3795, 1
  %3798 = mul i32 %3795, %3797
  %3799 = urem i32 %3798, 2
  %3800 = icmp eq i32 %3799, 0
  %3801 = icmp slt i32 %3796, 10
  %3802 = or i1 %3800, %3801
  br i1 %3802, label %originalBB999, label %originalBB999alteredBB

originalBB999:                                    ; preds = %3794, %originalBB999alteredBB
  %3803 = load i32, i32* @x.63
  %3804 = load i32, i32* @y.64
  %3805 = sub i32 %3803, 1
  %3806 = mul i32 %3803, %3805
  %3807 = urem i32 %3806, 2
  %3808 = icmp eq i32 %3807, 0
  %3809 = icmp slt i32 %3804, 10
  %3810 = or i1 %3808, %3809
  br i1 %3810, label %originalBBpart21001, label %originalBB999alteredBB

originalBBpart21001:                              ; preds = %originalBB999
  br label %3811, !dbg !4221

3811:                                             ; preds = %originalBBpart21001
  br label %3812, !dbg !4242

3812:                                             ; preds = %3811
  %3813 = load i32, i32* @x.63
  %3814 = load i32, i32* @y.64
  %3815 = sub i32 %3813, 1
  %3816 = mul i32 %3813, %3815
  %3817 = urem i32 %3816, 2
  %3818 = icmp eq i32 %3817, 0
  %3819 = icmp slt i32 %3814, 10
  %3820 = or i1 %3818, %3819
  br i1 %3820, label %originalBB1003, label %originalBB1003alteredBB

originalBB1003:                                   ; preds = %3812, %originalBB1003alteredBB
  %3821 = load i64, i64* %29, align 8, !dbg !4243
  %3822 = load i64, i64* %20, align 8, !dbg !4243
  %3823 = icmp ult i64 %3821, %3822, !dbg !4243
  %3824 = load i32, i32* @x.63
  %3825 = load i32, i32* @y.64
  %3826 = sub i32 %3824, 1
  %3827 = mul i32 %3824, %3826
  %3828 = urem i32 %3827, 2
  %3829 = icmp eq i32 %3828, 0
  %3830 = icmp slt i32 %3825, 10
  %3831 = or i1 %3829, %3830
  br i1 %3831, label %originalBBpart21005, label %originalBB1003alteredBB

originalBBpart21005:                              ; preds = %originalBB1003
  br i1 %3823, label %3832, label %3857, !dbg !4246

3832:                                             ; preds = %originalBBpart21005
  %3833 = load i32, i32* @x.63
  %3834 = load i32, i32* @y.64
  %3835 = sub i32 %3833, 1
  %3836 = mul i32 %3833, %3835
  %3837 = urem i32 %3836, 2
  %3838 = icmp eq i32 %3837, 0
  %3839 = icmp slt i32 %3834, 10
  %3840 = or i1 %3838, %3839
  br i1 %3840, label %originalBB1007, label %originalBB1007alteredBB

originalBB1007:                                   ; preds = %3832, %originalBB1007alteredBB
  %3841 = load i8, i8* %39, align 1, !dbg !4243
  %3842 = zext i8 %3841 to i32, !dbg !4243
  %3843 = ashr i32 %3842, 6, !dbg !4243
  %3844 = add nsw i32 48, %3843, !dbg !4243
  %3845 = trunc i32 %3844 to i8, !dbg !4243
  %3846 = load i8*, i8** %19, align 8, !dbg !4243
  %3847 = load i64, i64* %29, align 8, !dbg !4243
  %3848 = getelementptr inbounds i8, i8* %3846, i64 %3847, !dbg !4243
  store i8 %3845, i8* %3848, align 1, !dbg !4243
  %3849 = load i32, i32* @x.63
  %3850 = load i32, i32* @y.64
  %3851 = sub i32 %3849, 1
  %3852 = mul i32 %3849, %3851
  %3853 = urem i32 %3852, 2
  %3854 = icmp eq i32 %3853, 0
  %3855 = icmp slt i32 %3850, 10
  %3856 = or i1 %3854, %3855
  br i1 %3856, label %originalBBpart21034, label %originalBB1007alteredBB

originalBBpart21034:                              ; preds = %originalBB1007
  br label %3857, !dbg !4243

3857:                                             ; preds = %originalBBpart21034, %originalBBpart21005
  %3858 = load i32, i32* @x.63
  %3859 = load i32, i32* @y.64
  %3860 = sub i32 %3858, 1
  %3861 = mul i32 %3858, %3860
  %3862 = urem i32 %3861, 2
  %3863 = icmp eq i32 %3862, 0
  %3864 = icmp slt i32 %3859, 10
  %3865 = or i1 %3863, %3864
  br i1 %3865, label %originalBB1036, label %originalBB1036alteredBB

originalBB1036:                                   ; preds = %3857, %originalBB1036alteredBB
  %3866 = load i64, i64* %29, align 8, !dbg !4246
  %3867 = add i64 %3866, 1, !dbg !4246
  store i64 %3867, i64* %29, align 8, !dbg !4246
  %3868 = load i32, i32* @x.63
  %3869 = load i32, i32* @y.64
  %3870 = sub i32 %3868, 1
  %3871 = mul i32 %3868, %3870
  %3872 = urem i32 %3871, 2
  %3873 = icmp eq i32 %3872, 0
  %3874 = icmp slt i32 %3869, 10
  %3875 = or i1 %3873, %3874
  br i1 %3875, label %originalBBpart21040, label %originalBB1036alteredBB

originalBBpart21040:                              ; preds = %originalBB1036
  br label %3876, !dbg !4246

3876:                                             ; preds = %originalBBpart21040
  %3877 = load i32, i32* @x.63
  %3878 = load i32, i32* @y.64
  %3879 = sub i32 %3877, 1
  %3880 = mul i32 %3877, %3879
  %3881 = urem i32 %3880, 2
  %3882 = icmp eq i32 %3881, 0
  %3883 = icmp slt i32 %3878, 10
  %3884 = or i1 %3882, %3883
  br i1 %3884, label %originalBB1042, label %originalBB1042alteredBB

originalBB1042:                                   ; preds = %3876, %originalBB1042alteredBB
  %3885 = load i32, i32* @x.63
  %3886 = load i32, i32* @y.64
  %3887 = sub i32 %3885, 1
  %3888 = mul i32 %3885, %3887
  %3889 = urem i32 %3888, 2
  %3890 = icmp eq i32 %3889, 0
  %3891 = icmp slt i32 %3886, 10
  %3892 = or i1 %3890, %3891
  br i1 %3892, label %originalBBpart21044, label %originalBB1042alteredBB

originalBBpart21044:                              ; preds = %originalBB1042
  br label %3893, !dbg !4247

3893:                                             ; preds = %originalBBpart21044
  %3894 = load i32, i32* @x.63
  %3895 = load i32, i32* @y.64
  %3896 = sub i32 %3894, 1
  %3897 = mul i32 %3894, %3896
  %3898 = urem i32 %3897, 2
  %3899 = icmp eq i32 %3898, 0
  %3900 = icmp slt i32 %3895, 10
  %3901 = or i1 %3899, %3900
  br i1 %3901, label %originalBB1046, label %originalBB1046alteredBB

originalBB1046:                                   ; preds = %3893, %originalBB1046alteredBB
  %3902 = load i64, i64* %29, align 8, !dbg !4248
  %3903 = load i64, i64* %20, align 8, !dbg !4248
  %3904 = icmp ult i64 %3902, %3903, !dbg !4248
  %3905 = load i32, i32* @x.63
  %3906 = load i32, i32* @y.64
  %3907 = sub i32 %3905, 1
  %3908 = mul i32 %3905, %3907
  %3909 = urem i32 %3908, 2
  %3910 = icmp eq i32 %3909, 0
  %3911 = icmp slt i32 %3906, 10
  %3912 = or i1 %3910, %3911
  br i1 %3912, label %originalBBpart21048, label %originalBB1046alteredBB

originalBBpart21048:                              ; preds = %originalBB1046
  br i1 %3904, label %3913, label %3923, !dbg !4251

3913:                                             ; preds = %originalBBpart21048
  %3914 = load i8, i8* %39, align 1, !dbg !4248
  %3915 = zext i8 %3914 to i32, !dbg !4248
  %3916 = ashr i32 %3915, 3, !dbg !4248
  %3917 = and i32 %3916, 7, !dbg !4248
  %3918 = add nsw i32 48, %3917, !dbg !4248
  %3919 = trunc i32 %3918 to i8, !dbg !4248
  %3920 = load i8*, i8** %19, align 8, !dbg !4248
  %3921 = load i64, i64* %29, align 8, !dbg !4248
  %3922 = getelementptr inbounds i8, i8* %3920, i64 %3921, !dbg !4248
  store i8 %3919, i8* %3922, align 1, !dbg !4248
  br label %3923, !dbg !4248

3923:                                             ; preds = %3913, %originalBBpart21048
  %3924 = load i32, i32* @x.63
  %3925 = load i32, i32* @y.64
  %3926 = sub i32 %3924, 1
  %3927 = mul i32 %3924, %3926
  %3928 = urem i32 %3927, 2
  %3929 = icmp eq i32 %3928, 0
  %3930 = icmp slt i32 %3925, 10
  %3931 = or i1 %3929, %3930
  br i1 %3931, label %originalBB1050, label %originalBB1050alteredBB

originalBB1050:                                   ; preds = %3923, %originalBB1050alteredBB
  %3932 = load i64, i64* %29, align 8, !dbg !4251
  %3933 = add i64 %3932, 1, !dbg !4251
  store i64 %3933, i64* %29, align 8, !dbg !4251
  %3934 = load i32, i32* @x.63
  %3935 = load i32, i32* @y.64
  %3936 = sub i32 %3934, 1
  %3937 = mul i32 %3934, %3936
  %3938 = urem i32 %3937, 2
  %3939 = icmp eq i32 %3938, 0
  %3940 = icmp slt i32 %3935, 10
  %3941 = or i1 %3939, %3940
  br i1 %3941, label %originalBBpart21065, label %originalBB1050alteredBB

originalBBpart21065:                              ; preds = %originalBB1050
  br label %3942, !dbg !4251

3942:                                             ; preds = %originalBBpart21065
  %3943 = load i32, i32* @x.63
  %3944 = load i32, i32* @y.64
  %3945 = sub i32 %3943, 1
  %3946 = mul i32 %3943, %3945
  %3947 = urem i32 %3946, 2
  %3948 = icmp eq i32 %3947, 0
  %3949 = icmp slt i32 %3944, 10
  %3950 = or i1 %3948, %3949
  br i1 %3950, label %originalBB1067, label %originalBB1067alteredBB

originalBB1067:                                   ; preds = %3942, %originalBB1067alteredBB
  %3951 = load i8, i8* %39, align 1, !dbg !4252
  %3952 = zext i8 %3951 to i32, !dbg !4252
  %3953 = and i32 %3952, 7, !dbg !4253
  %3954 = add nsw i32 48, %3953, !dbg !4254
  %3955 = trunc i32 %3954 to i8, !dbg !4255
  store i8 %3955, i8* %39, align 1, !dbg !4256
  %3956 = load i32, i32* @x.63
  %3957 = load i32, i32* @y.64
  %3958 = sub i32 %3956, 1
  %3959 = mul i32 %3956, %3958
  %3960 = urem i32 %3959, 2
  %3961 = icmp eq i32 %3960, 0
  %3962 = icmp slt i32 %3957, 10
  %3963 = or i1 %3961, %3962
  br i1 %3963, label %originalBBpart21080, label %originalBB1067alteredBB

originalBBpart21080:                              ; preds = %originalBB1067
  br label %4061, !dbg !4257

3964:                                             ; preds = %originalBBpart2911, %originalBBpart2907
  %3965 = load i32, i32* @x.63
  %3966 = load i32, i32* @y.64
  %3967 = sub i32 %3965, 1
  %3968 = mul i32 %3965, %3967
  %3969 = urem i32 %3968, 2
  %3970 = icmp eq i32 %3969, 0
  %3971 = icmp slt i32 %3966, 10
  %3972 = or i1 %3970, %3971
  br i1 %3972, label %originalBB1082, label %originalBB1082alteredBB

originalBB1082:                                   ; preds = %3964, %originalBB1082alteredBB
  %3973 = load i8, i8* %41, align 1, !dbg !4258
  %3974 = trunc i8 %3973 to i1, !dbg !4258
  %3975 = load i32, i32* @x.63
  %3976 = load i32, i32* @y.64
  %3977 = sub i32 %3975, 1
  %3978 = mul i32 %3975, %3977
  %3979 = urem i32 %3978, 2
  %3980 = icmp eq i32 %3979, 0
  %3981 = icmp slt i32 %3976, 10
  %3982 = or i1 %3980, %3981
  br i1 %3982, label %originalBBpart21084, label %originalBB1082alteredBB

originalBBpart21084:                              ; preds = %originalBB1082
  br i1 %3974, label %3983, label %4044, !dbg !4260

3983:                                             ; preds = %originalBBpart21084
  %3984 = load i32, i32* @x.63
  %3985 = load i32, i32* @y.64
  %3986 = sub i32 %3984, 1
  %3987 = mul i32 %3984, %3986
  %3988 = urem i32 %3987, 2
  %3989 = icmp eq i32 %3988, 0
  %3990 = icmp slt i32 %3985, 10
  %3991 = or i1 %3989, %3990
  br i1 %3991, label %originalBB1086, label %originalBB1086alteredBB

originalBB1086:                                   ; preds = %3983, %originalBB1086alteredBB
  %3992 = load i32, i32* @x.63
  %3993 = load i32, i32* @y.64
  %3994 = sub i32 %3992, 1
  %3995 = mul i32 %3992, %3994
  %3996 = urem i32 %3995, 2
  %3997 = icmp eq i32 %3996, 0
  %3998 = icmp slt i32 %3993, 10
  %3999 = or i1 %3997, %3998
  br i1 %3999, label %originalBBpart21088, label %originalBB1086alteredBB

originalBBpart21088:                              ; preds = %originalBB1086
  br label %4000, !dbg !4261

4000:                                             ; preds = %originalBBpart21088
  %4001 = load i32, i32* @x.63
  %4002 = load i32, i32* @y.64
  %4003 = sub i32 %4001, 1
  %4004 = mul i32 %4001, %4003
  %4005 = urem i32 %4004, 2
  %4006 = icmp eq i32 %4005, 0
  %4007 = icmp slt i32 %4002, 10
  %4008 = or i1 %4006, %4007
  br i1 %4008, label %originalBB1090, label %originalBB1090alteredBB

originalBB1090:                                   ; preds = %4000, %originalBB1090alteredBB
  %4009 = load i64, i64* %29, align 8, !dbg !4263
  %4010 = load i64, i64* %20, align 8, !dbg !4263
  %4011 = icmp ult i64 %4009, %4010, !dbg !4263
  %4012 = load i32, i32* @x.63
  %4013 = load i32, i32* @y.64
  %4014 = sub i32 %4012, 1
  %4015 = mul i32 %4012, %4014
  %4016 = urem i32 %4015, 2
  %4017 = icmp eq i32 %4016, 0
  %4018 = icmp slt i32 %4013, 10
  %4019 = or i1 %4017, %4018
  br i1 %4019, label %originalBBpart21092, label %originalBB1090alteredBB

originalBBpart21092:                              ; preds = %originalBB1090
  br i1 %4011, label %4020, label %4040, !dbg !4266

4020:                                             ; preds = %originalBBpart21092
  %4021 = load i32, i32* @x.63
  %4022 = load i32, i32* @y.64
  %4023 = sub i32 %4021, 1
  %4024 = mul i32 %4021, %4023
  %4025 = urem i32 %4024, 2
  %4026 = icmp eq i32 %4025, 0
  %4027 = icmp slt i32 %4022, 10
  %4028 = or i1 %4026, %4027
  br i1 %4028, label %originalBB1094, label %originalBB1094alteredBB

originalBB1094:                                   ; preds = %4020, %originalBB1094alteredBB
  %4029 = load i8*, i8** %19, align 8, !dbg !4263
  %4030 = load i64, i64* %29, align 8, !dbg !4263
  %4031 = getelementptr inbounds i8, i8* %4029, i64 %4030, !dbg !4263
  store i8 92, i8* %4031, align 1, !dbg !4263
  %4032 = load i32, i32* @x.63
  %4033 = load i32, i32* @y.64
  %4034 = sub i32 %4032, 1
  %4035 = mul i32 %4032, %4034
  %4036 = urem i32 %4035, 2
  %4037 = icmp eq i32 %4036, 0
  %4038 = icmp slt i32 %4033, 10
  %4039 = or i1 %4037, %4038
  br i1 %4039, label %originalBBpart21096, label %originalBB1094alteredBB

originalBBpart21096:                              ; preds = %originalBB1094
  br label %4040, !dbg !4263

4040:                                             ; preds = %originalBBpart21096, %originalBBpart21092
  %4041 = load i64, i64* %29, align 8, !dbg !4266
  %4042 = add i64 %4041, 1, !dbg !4266
  store i64 %4042, i64* %29, align 8, !dbg !4266
  br label %4043, !dbg !4266

4043:                                             ; preds = %4040
  store i8 0, i8* %41, align 1, !dbg !4267
  br label %4044, !dbg !4268

4044:                                             ; preds = %4043, %originalBBpart21084
  %4045 = load i32, i32* @x.63
  %4046 = load i32, i32* @y.64
  %4047 = sub i32 %4045, 1
  %4048 = mul i32 %4045, %4047
  %4049 = urem i32 %4048, 2
  %4050 = icmp eq i32 %4049, 0
  %4051 = icmp slt i32 %4046, 10
  %4052 = or i1 %4050, %4051
  br i1 %4052, label %originalBB1098, label %originalBB1098alteredBB

originalBB1098:                                   ; preds = %4044, %originalBB1098alteredBB
  %4053 = load i32, i32* @x.63
  %4054 = load i32, i32* @y.64
  %4055 = sub i32 %4053, 1
  %4056 = mul i32 %4053, %4055
  %4057 = urem i32 %4056, 2
  %4058 = icmp eq i32 %4057, 0
  %4059 = icmp slt i32 %4054, 10
  %4060 = or i1 %4058, %4059
  br i1 %4060, label %originalBBpart21100, label %originalBB1098alteredBB

originalBBpart21100:                              ; preds = %originalBB1098
  br label %4061

4061:                                             ; preds = %originalBBpart21100, %originalBBpart21080
  %4062 = load i64, i64* %50, align 8, !dbg !4269
  %4063 = load i64, i64* %28, align 8, !dbg !4271
  %4064 = add i64 %4063, 1, !dbg !4272
  %4065 = icmp ule i64 %4062, %4064, !dbg !4273
  br i1 %4065, label %4066, label %4067, !dbg !4274

4066:                                             ; preds = %4061
  br label %4327, !dbg !4275

4067:                                             ; preds = %4061
  %4068 = load i32, i32* @x.63
  %4069 = load i32, i32* @y.64
  %4070 = sub i32 %4068, 1
  %4071 = mul i32 %4068, %4070
  %4072 = urem i32 %4071, 2
  %4073 = icmp eq i32 %4072, 0
  %4074 = icmp slt i32 %4069, 10
  %4075 = or i1 %4073, %4074
  br i1 %4075, label %originalBB1102, label %originalBB1102alteredBB

originalBB1102:                                   ; preds = %4067, %originalBB1102alteredBB
  %4076 = load i32, i32* @x.63
  %4077 = load i32, i32* @y.64
  %4078 = sub i32 %4076, 1
  %4079 = mul i32 %4076, %4078
  %4080 = urem i32 %4079, 2
  %4081 = icmp eq i32 %4080, 0
  %4082 = icmp slt i32 %4077, 10
  %4083 = or i1 %4081, %4082
  br i1 %4083, label %originalBBpart21104, label %originalBB1102alteredBB

originalBBpart21104:                              ; preds = %originalBB1102
  br label %4084, !dbg !4276

4084:                                             ; preds = %originalBBpart21104
  %4085 = load i32, i32* @x.63
  %4086 = load i32, i32* @y.64
  %4087 = sub i32 %4085, 1
  %4088 = mul i32 %4085, %4087
  %4089 = urem i32 %4088, 2
  %4090 = icmp eq i32 %4089, 0
  %4091 = icmp slt i32 %4086, 10
  %4092 = or i1 %4090, %4091
  br i1 %4092, label %originalBB1106, label %originalBB1106alteredBB

originalBB1106:                                   ; preds = %4084, %originalBB1106alteredBB
  %4093 = load i8, i8* %36, align 1, !dbg !4277
  %4094 = trunc i8 %4093 to i1, !dbg !4277
  %4095 = load i32, i32* @x.63
  %4096 = load i32, i32* @y.64
  %4097 = sub i32 %4095, 1
  %4098 = mul i32 %4095, %4097
  %4099 = urem i32 %4098, 2
  %4100 = icmp eq i32 %4099, 0
  %4101 = icmp slt i32 %4096, 10
  %4102 = or i1 %4100, %4101
  br i1 %4102, label %originalBBpart21108, label %originalBB1106alteredBB

originalBBpart21108:                              ; preds = %originalBB1106
  br i1 %4094, label %4103, label %4243, !dbg !4277

4103:                                             ; preds = %originalBBpart21108
  %4104 = load i32, i32* @x.63
  %4105 = load i32, i32* @y.64
  %4106 = sub i32 %4104, 1
  %4107 = mul i32 %4104, %4106
  %4108 = urem i32 %4107, 2
  %4109 = icmp eq i32 %4108, 0
  %4110 = icmp slt i32 %4105, 10
  %4111 = or i1 %4109, %4110
  br i1 %4111, label %originalBB1110, label %originalBB1110alteredBB

originalBB1110:                                   ; preds = %4103, %originalBB1110alteredBB
  %4112 = load i8, i8* %42, align 1, !dbg !4277
  %4113 = trunc i8 %4112 to i1, !dbg !4277
  %4114 = load i32, i32* @x.63
  %4115 = load i32, i32* @y.64
  %4116 = sub i32 %4114, 1
  %4117 = mul i32 %4114, %4116
  %4118 = urem i32 %4117, 2
  %4119 = icmp eq i32 %4118, 0
  %4120 = icmp slt i32 %4115, 10
  %4121 = or i1 %4119, %4120
  br i1 %4121, label %originalBBpart21112, label %originalBB1110alteredBB

originalBBpart21112:                              ; preds = %originalBB1110
  br i1 %4113, label %4243, label %4122, !dbg !4280

4122:                                             ; preds = %originalBBpart21112
  br label %4123, !dbg !4281

4123:                                             ; preds = %4122
  %4124 = load i32, i32* @x.63
  %4125 = load i32, i32* @y.64
  %4126 = sub i32 %4124, 1
  %4127 = mul i32 %4124, %4126
  %4128 = urem i32 %4127, 2
  %4129 = icmp eq i32 %4128, 0
  %4130 = icmp slt i32 %4125, 10
  %4131 = or i1 %4129, %4130
  br i1 %4131, label %originalBB1114, label %originalBB1114alteredBB

originalBB1114:                                   ; preds = %4123, %originalBB1114alteredBB
  %4132 = load i64, i64* %29, align 8, !dbg !4283
  %4133 = load i64, i64* %20, align 8, !dbg !4283
  %4134 = icmp ult i64 %4132, %4133, !dbg !4283
  %4135 = load i32, i32* @x.63
  %4136 = load i32, i32* @y.64
  %4137 = sub i32 %4135, 1
  %4138 = mul i32 %4135, %4137
  %4139 = urem i32 %4138, 2
  %4140 = icmp eq i32 %4139, 0
  %4141 = icmp slt i32 %4136, 10
  %4142 = or i1 %4140, %4141
  br i1 %4142, label %originalBBpart21116, label %originalBB1114alteredBB

originalBBpart21116:                              ; preds = %originalBB1114
  br i1 %4134, label %4143, label %4147, !dbg !4286

4143:                                             ; preds = %originalBBpart21116
  %4144 = load i8*, i8** %19, align 8, !dbg !4283
  %4145 = load i64, i64* %29, align 8, !dbg !4283
  %4146 = getelementptr inbounds i8, i8* %4144, i64 %4145, !dbg !4283
  store i8 39, i8* %4146, align 1, !dbg !4283
  br label %4147, !dbg !4283

4147:                                             ; preds = %4143, %originalBBpart21116
  %4148 = load i32, i32* @x.63
  %4149 = load i32, i32* @y.64
  %4150 = sub i32 %4148, 1
  %4151 = mul i32 %4148, %4150
  %4152 = urem i32 %4151, 2
  %4153 = icmp eq i32 %4152, 0
  %4154 = icmp slt i32 %4149, 10
  %4155 = or i1 %4153, %4154
  br i1 %4155, label %originalBB1118, label %originalBB1118alteredBB

originalBB1118:                                   ; preds = %4147, %originalBB1118alteredBB
  %4156 = load i64, i64* %29, align 8, !dbg !4286
  %4157 = add i64 %4156, 1, !dbg !4286
  store i64 %4157, i64* %29, align 8, !dbg !4286
  %4158 = load i32, i32* @x.63
  %4159 = load i32, i32* @y.64
  %4160 = sub i32 %4158, 1
  %4161 = mul i32 %4158, %4160
  %4162 = urem i32 %4161, 2
  %4163 = icmp eq i32 %4162, 0
  %4164 = icmp slt i32 %4159, 10
  %4165 = or i1 %4163, %4164
  br i1 %4165, label %originalBBpart21122, label %originalBB1118alteredBB

originalBBpart21122:                              ; preds = %originalBB1118
  br label %4166, !dbg !4286

4166:                                             ; preds = %originalBBpart21122
  %4167 = load i32, i32* @x.63
  %4168 = load i32, i32* @y.64
  %4169 = sub i32 %4167, 1
  %4170 = mul i32 %4167, %4169
  %4171 = urem i32 %4170, 2
  %4172 = icmp eq i32 %4171, 0
  %4173 = icmp slt i32 %4168, 10
  %4174 = or i1 %4172, %4173
  br i1 %4174, label %originalBB1124, label %originalBB1124alteredBB

originalBB1124:                                   ; preds = %4166, %originalBB1124alteredBB
  %4175 = load i32, i32* @x.63
  %4176 = load i32, i32* @y.64
  %4177 = sub i32 %4175, 1
  %4178 = mul i32 %4175, %4177
  %4179 = urem i32 %4178, 2
  %4180 = icmp eq i32 %4179, 0
  %4181 = icmp slt i32 %4176, 10
  %4182 = or i1 %4180, %4181
  br i1 %4182, label %originalBBpart21126, label %originalBB1124alteredBB

originalBBpart21126:                              ; preds = %originalBB1124
  br label %4183, !dbg !4281

4183:                                             ; preds = %originalBBpart21126
  %4184 = load i32, i32* @x.63
  %4185 = load i32, i32* @y.64
  %4186 = sub i32 %4184, 1
  %4187 = mul i32 %4184, %4186
  %4188 = urem i32 %4187, 2
  %4189 = icmp eq i32 %4188, 0
  %4190 = icmp slt i32 %4185, 10
  %4191 = or i1 %4189, %4190
  br i1 %4191, label %originalBB1128, label %originalBB1128alteredBB

originalBB1128:                                   ; preds = %4183, %originalBB1128alteredBB
  %4192 = load i64, i64* %29, align 8, !dbg !4287
  %4193 = load i64, i64* %20, align 8, !dbg !4287
  %4194 = icmp ult i64 %4192, %4193, !dbg !4287
  %4195 = load i32, i32* @x.63
  %4196 = load i32, i32* @y.64
  %4197 = sub i32 %4195, 1
  %4198 = mul i32 %4195, %4197
  %4199 = urem i32 %4198, 2
  %4200 = icmp eq i32 %4199, 0
  %4201 = icmp slt i32 %4196, 10
  %4202 = or i1 %4200, %4201
  br i1 %4202, label %originalBBpart21130, label %originalBB1128alteredBB

originalBBpart21130:                              ; preds = %originalBB1128
  br i1 %4194, label %4203, label %4223, !dbg !4290

4203:                                             ; preds = %originalBBpart21130
  %4204 = load i32, i32* @x.63
  %4205 = load i32, i32* @y.64
  %4206 = sub i32 %4204, 1
  %4207 = mul i32 %4204, %4206
  %4208 = urem i32 %4207, 2
  %4209 = icmp eq i32 %4208, 0
  %4210 = icmp slt i32 %4205, 10
  %4211 = or i1 %4209, %4210
  br i1 %4211, label %originalBB1132, label %originalBB1132alteredBB

originalBB1132:                                   ; preds = %4203, %originalBB1132alteredBB
  %4212 = load i8*, i8** %19, align 8, !dbg !4287
  %4213 = load i64, i64* %29, align 8, !dbg !4287
  %4214 = getelementptr inbounds i8, i8* %4212, i64 %4213, !dbg !4287
  store i8 39, i8* %4214, align 1, !dbg !4287
  %4215 = load i32, i32* @x.63
  %4216 = load i32, i32* @y.64
  %4217 = sub i32 %4215, 1
  %4218 = mul i32 %4215, %4217
  %4219 = urem i32 %4218, 2
  %4220 = icmp eq i32 %4219, 0
  %4221 = icmp slt i32 %4216, 10
  %4222 = or i1 %4220, %4221
  br i1 %4222, label %originalBBpart21134, label %originalBB1132alteredBB

originalBBpart21134:                              ; preds = %originalBB1132
  br label %4223, !dbg !4287

4223:                                             ; preds = %originalBBpart21134, %originalBBpart21130
  %4224 = load i64, i64* %29, align 8, !dbg !4290
  %4225 = add i64 %4224, 1, !dbg !4290
  store i64 %4225, i64* %29, align 8, !dbg !4290
  br label %4226, !dbg !4290

4226:                                             ; preds = %4223
  %4227 = load i32, i32* @x.63
  %4228 = load i32, i32* @y.64
  %4229 = sub i32 %4227, 1
  %4230 = mul i32 %4227, %4229
  %4231 = urem i32 %4230, 2
  %4232 = icmp eq i32 %4231, 0
  %4233 = icmp slt i32 %4228, 10
  %4234 = or i1 %4232, %4233
  br i1 %4234, label %originalBB1136, label %originalBB1136alteredBB

originalBB1136:                                   ; preds = %4226, %originalBB1136alteredBB
  store i8 0, i8* %36, align 1, !dbg !4281
  %4235 = load i32, i32* @x.63
  %4236 = load i32, i32* @y.64
  %4237 = sub i32 %4235, 1
  %4238 = mul i32 %4235, %4237
  %4239 = urem i32 %4238, 2
  %4240 = icmp eq i32 %4239, 0
  %4241 = icmp slt i32 %4236, 10
  %4242 = or i1 %4240, %4241
  br i1 %4242, label %originalBBpart21138, label %originalBB1136alteredBB

originalBBpart21138:                              ; preds = %originalBB1136
  br label %4243, !dbg !4281

4243:                                             ; preds = %originalBBpart21138, %originalBBpart21112, %originalBBpart21108
  %4244 = load i32, i32* @x.63
  %4245 = load i32, i32* @y.64
  %4246 = sub i32 %4244, 1
  %4247 = mul i32 %4244, %4246
  %4248 = urem i32 %4247, 2
  %4249 = icmp eq i32 %4248, 0
  %4250 = icmp slt i32 %4245, 10
  %4251 = or i1 %4249, %4250
  br i1 %4251, label %originalBB1140, label %originalBB1140alteredBB

originalBB1140:                                   ; preds = %4243, %originalBB1140alteredBB
  %4252 = load i32, i32* @x.63
  %4253 = load i32, i32* @y.64
  %4254 = sub i32 %4252, 1
  %4255 = mul i32 %4252, %4254
  %4256 = urem i32 %4255, 2
  %4257 = icmp eq i32 %4256, 0
  %4258 = icmp slt i32 %4253, 10
  %4259 = or i1 %4257, %4258
  br i1 %4259, label %originalBBpart21142, label %originalBB1140alteredBB

originalBBpart21142:                              ; preds = %originalBB1140
  br label %4260, !dbg !4280

4260:                                             ; preds = %originalBBpart21142
  %4261 = load i32, i32* @x.63
  %4262 = load i32, i32* @y.64
  %4263 = sub i32 %4261, 1
  %4264 = mul i32 %4261, %4263
  %4265 = urem i32 %4264, 2
  %4266 = icmp eq i32 %4265, 0
  %4267 = icmp slt i32 %4262, 10
  %4268 = or i1 %4266, %4267
  br i1 %4268, label %originalBB1144, label %originalBB1144alteredBB

originalBB1144:                                   ; preds = %4260, %originalBB1144alteredBB
  %4269 = load i32, i32* @x.63
  %4270 = load i32, i32* @y.64
  %4271 = sub i32 %4269, 1
  %4272 = mul i32 %4269, %4271
  %4273 = urem i32 %4272, 2
  %4274 = icmp eq i32 %4273, 0
  %4275 = icmp slt i32 %4270, 10
  %4276 = or i1 %4274, %4275
  br i1 %4276, label %originalBBpart21146, label %originalBB1144alteredBB

originalBBpart21146:                              ; preds = %originalBB1144
  br label %4277, !dbg !4291

4277:                                             ; preds = %originalBBpart21146
  %4278 = load i32, i32* @x.63
  %4279 = load i32, i32* @y.64
  %4280 = sub i32 %4278, 1
  %4281 = mul i32 %4278, %4280
  %4282 = urem i32 %4281, 2
  %4283 = icmp eq i32 %4282, 0
  %4284 = icmp slt i32 %4279, 10
  %4285 = or i1 %4283, %4284
  br i1 %4285, label %originalBB1148, label %originalBB1148alteredBB

originalBB1148:                                   ; preds = %4277, %originalBB1148alteredBB
  %4286 = load i64, i64* %29, align 8, !dbg !4292
  %4287 = load i64, i64* %20, align 8, !dbg !4292
  %4288 = icmp ult i64 %4286, %4287, !dbg !4292
  %4289 = load i32, i32* @x.63
  %4290 = load i32, i32* @y.64
  %4291 = sub i32 %4289, 1
  %4292 = mul i32 %4289, %4291
  %4293 = urem i32 %4292, 2
  %4294 = icmp eq i32 %4293, 0
  %4295 = icmp slt i32 %4290, 10
  %4296 = or i1 %4294, %4295
  br i1 %4296, label %originalBBpart21150, label %originalBB1148alteredBB

originalBBpart21150:                              ; preds = %originalBB1148
  br i1 %4288, label %4297, label %4318, !dbg !4295

4297:                                             ; preds = %originalBBpart21150
  %4298 = load i32, i32* @x.63
  %4299 = load i32, i32* @y.64
  %4300 = sub i32 %4298, 1
  %4301 = mul i32 %4298, %4300
  %4302 = urem i32 %4301, 2
  %4303 = icmp eq i32 %4302, 0
  %4304 = icmp slt i32 %4299, 10
  %4305 = or i1 %4303, %4304
  br i1 %4305, label %originalBB1152, label %originalBB1152alteredBB

originalBB1152:                                   ; preds = %4297, %originalBB1152alteredBB
  %4306 = load i8, i8* %39, align 1, !dbg !4292
  %4307 = load i8*, i8** %19, align 8, !dbg !4292
  %4308 = load i64, i64* %29, align 8, !dbg !4292
  %4309 = getelementptr inbounds i8, i8* %4307, i64 %4308, !dbg !4292
  store i8 %4306, i8* %4309, align 1, !dbg !4292
  %4310 = load i32, i32* @x.63
  %4311 = load i32, i32* @y.64
  %4312 = sub i32 %4310, 1
  %4313 = mul i32 %4310, %4312
  %4314 = urem i32 %4313, 2
  %4315 = icmp eq i32 %4314, 0
  %4316 = icmp slt i32 %4311, 10
  %4317 = or i1 %4315, %4316
  br i1 %4317, label %originalBBpart21154, label %originalBB1152alteredBB

originalBBpart21154:                              ; preds = %originalBB1152
  br label %4318, !dbg !4292

4318:                                             ; preds = %originalBBpart21154, %originalBBpart21150
  %4319 = load i64, i64* %29, align 8, !dbg !4295
  %4320 = add i64 %4319, 1, !dbg !4295
  store i64 %4320, i64* %29, align 8, !dbg !4295
  br label %4321, !dbg !4295

4321:                                             ; preds = %4318
  %4322 = load i8*, i8** %21, align 8, !dbg !4296
  %4323 = load i64, i64* %28, align 8, !dbg !4297
  %4324 = add i64 %4323, 1, !dbg !4297
  store i64 %4324, i64* %28, align 8, !dbg !4297
  %4325 = getelementptr inbounds i8, i8* %4322, i64 %4324, !dbg !4296
  %4326 = load i8, i8* %4325, align 1, !dbg !4296
  store i8 %4326, i8* %39, align 1, !dbg !4298
  br label %3440, !dbg !4299, !llvm.loop !4300

4327:                                             ; preds = %4066
  %4328 = load i32, i32* @x.63
  %4329 = load i32, i32* @y.64
  %4330 = sub i32 %4328, 1
  %4331 = mul i32 %4328, %4330
  %4332 = urem i32 %4331, 2
  %4333 = icmp eq i32 %4332, 0
  %4334 = icmp slt i32 %4329, 10
  %4335 = or i1 %4333, %4334
  br i1 %4335, label %originalBB1156, label %originalBB1156alteredBB

originalBB1156:                                   ; preds = %4327, %originalBB1156alteredBB
  %4336 = load i32, i32* @x.63
  %4337 = load i32, i32* @y.64
  %4338 = sub i32 %4336, 1
  %4339 = mul i32 %4336, %4338
  %4340 = urem i32 %4339, 2
  %4341 = icmp eq i32 %4340, 0
  %4342 = icmp slt i32 %4337, 10
  %4343 = or i1 %4341, %4342
  br i1 %4343, label %originalBBpart21158, label %originalBB1156alteredBB

originalBBpart21158:                              ; preds = %originalBB1156
  br label %4758, !dbg !4303

4344:                                             ; preds = %originalBBpart2903, %originalBBpart2899
  br label %4345, !dbg !4304

4345:                                             ; preds = %4344, %originalBBpart2724, %originalBBpart2720, %2521, %2463, %2426, %originalBBpart2616, %2036, %originalBBpart2396
  %4346 = load i8, i8* %33, align 1, !dbg !4305
  %4347 = trunc i8 %4346 to i1, !dbg !4305
  br i1 %4347, label %4348, label %4367, !dbg !4307

4348:                                             ; preds = %4345
  %4349 = load i32, i32* @x.63
  %4350 = load i32, i32* @y.64
  %4351 = sub i32 %4349, 1
  %4352 = mul i32 %4349, %4351
  %4353 = urem i32 %4352, 2
  %4354 = icmp eq i32 %4353, 0
  %4355 = icmp slt i32 %4350, 10
  %4356 = or i1 %4354, %4355
  br i1 %4356, label %originalBB1160, label %originalBB1160alteredBB

originalBB1160:                                   ; preds = %4348, %originalBB1160alteredBB
  %4357 = load i32, i32* %23, align 4, !dbg !4308
  %4358 = icmp ne i32 %4357, 2, !dbg !4309
  %4359 = load i32, i32* @x.63
  %4360 = load i32, i32* @y.64
  %4361 = sub i32 %4359, 1
  %4362 = mul i32 %4359, %4361
  %4363 = urem i32 %4362, 2
  %4364 = icmp eq i32 %4363, 0
  %4365 = icmp slt i32 %4360, 10
  %4366 = or i1 %4364, %4365
  br i1 %4366, label %originalBBpart21162, label %originalBB1160alteredBB

originalBBpart21162:                              ; preds = %originalBB1160
  br i1 %4358, label %4370, label %4367, !dbg !4310

4367:                                             ; preds = %originalBBpart21162, %4345
  %4368 = load i8, i8* %35, align 1, !dbg !4311
  %4369 = trunc i8 %4368 to i1, !dbg !4311
  br i1 %4369, label %4370, label %4403, !dbg !4312

4370:                                             ; preds = %4367, %originalBBpart21162
  %4371 = load i32, i32* @x.63
  %4372 = load i32, i32* @y.64
  %4373 = sub i32 %4371, 1
  %4374 = mul i32 %4371, %4373
  %4375 = urem i32 %4374, 2
  %4376 = icmp eq i32 %4375, 0
  %4377 = icmp slt i32 %4372, 10
  %4378 = or i1 %4376, %4377
  br i1 %4378, label %originalBB1164, label %originalBB1164alteredBB

originalBB1164:                                   ; preds = %4370, %originalBB1164alteredBB
  %4379 = load i32*, i32** %25, align 8, !dbg !4313
  %4380 = icmp ne i32* %4379, null, !dbg !4313
  %4381 = load i32, i32* @x.63
  %4382 = load i32, i32* @y.64
  %4383 = sub i32 %4381, 1
  %4384 = mul i32 %4381, %4383
  %4385 = urem i32 %4384, 2
  %4386 = icmp eq i32 %4385, 0
  %4387 = icmp slt i32 %4382, 10
  %4388 = or i1 %4386, %4387
  br i1 %4388, label %originalBBpart21166, label %originalBB1164alteredBB

originalBBpart21166:                              ; preds = %originalBB1164
  br i1 %4380, label %4389, label %4403, !dbg !4314

4389:                                             ; preds = %originalBBpart21166
  %4390 = load i32*, i32** %25, align 8, !dbg !4315
  %4391 = load i8, i8* %39, align 1, !dbg !4316
  %4392 = zext i8 %4391 to i64, !dbg !4316
  %4393 = udiv i64 %4392, 32, !dbg !4317
  %4394 = getelementptr inbounds i32, i32* %4390, i64 %4393, !dbg !4315
  %4395 = load i32, i32* %4394, align 4, !dbg !4315
  %4396 = load i8, i8* %39, align 1, !dbg !4318
  %4397 = zext i8 %4396 to i64, !dbg !4318
  %4398 = urem i64 %4397, 32, !dbg !4319
  %4399 = trunc i64 %4398 to i32, !dbg !4320
  %4400 = lshr i32 %4395, %4399, !dbg !4320
  %4401 = and i32 %4400, 1, !dbg !4321
  %4402 = icmp ne i32 %4401, 0, !dbg !4321
  br i1 %4402, label %4423, label %4403, !dbg !4322

4403:                                             ; preds = %4389, %originalBBpart21166, %4367
  %4404 = load i8, i8* %41, align 1, !dbg !4323
  %4405 = trunc i8 %4404 to i1, !dbg !4323
  br i1 %4405, label %4423, label %4406, !dbg !4324

4406:                                             ; preds = %4403
  %4407 = load i32, i32* @x.63
  %4408 = load i32, i32* @y.64
  %4409 = sub i32 %4407, 1
  %4410 = mul i32 %4407, %4409
  %4411 = urem i32 %4410, 2
  %4412 = icmp eq i32 %4411, 0
  %4413 = icmp slt i32 %4408, 10
  %4414 = or i1 %4412, %4413
  br i1 %4414, label %originalBB1168, label %originalBB1168alteredBB

originalBB1168:                                   ; preds = %4406, %originalBB1168alteredBB
  %4415 = load i32, i32* @x.63
  %4416 = load i32, i32* @y.64
  %4417 = sub i32 %4415, 1
  %4418 = mul i32 %4415, %4417
  %4419 = urem i32 %4418, 2
  %4420 = icmp eq i32 %4419, 0
  %4421 = icmp slt i32 %4416, 10
  %4422 = or i1 %4420, %4421
  br i1 %4422, label %originalBBpart21170, label %originalBB1168alteredBB

originalBBpart21170:                              ; preds = %originalBB1168
  br label %4758, !dbg !4325

4423:                                             ; preds = %4403, %4389
  %4424 = load i32, i32* @x.63
  %4425 = load i32, i32* @y.64
  %4426 = sub i32 %4424, 1
  %4427 = mul i32 %4424, %4426
  %4428 = urem i32 %4427, 2
  %4429 = icmp eq i32 %4428, 0
  %4430 = icmp slt i32 %4425, 10
  %4431 = or i1 %4429, %4430
  br i1 %4431, label %originalBB1172, label %originalBB1172alteredBB

originalBB1172:                                   ; preds = %4423, %originalBB1172alteredBB
  %4432 = load i32, i32* @x.63
  %4433 = load i32, i32* @y.64
  %4434 = sub i32 %4432, 1
  %4435 = mul i32 %4432, %4434
  %4436 = urem i32 %4435, 2
  %4437 = icmp eq i32 %4436, 0
  %4438 = icmp slt i32 %4433, 10
  %4439 = or i1 %4437, %4438
  br i1 %4439, label %originalBBpart21174, label %originalBB1172alteredBB

originalBBpart21174:                              ; preds = %originalBB1172
  br label %4440, !dbg !4323

4440:                                             ; preds = %originalBBpart21174, %originalBBpart2612
  call void @llvm.dbg.label(metadata !4326), !dbg !4327
  br label %4441, !dbg !4328

4441:                                             ; preds = %4440
  %4442 = load i8, i8* %35, align 1, !dbg !4329
  %4443 = trunc i8 %4442 to i1, !dbg !4329
  br i1 %4443, label %4444, label %4461, !dbg !4332

4444:                                             ; preds = %4441
  %4445 = load i32, i32* @x.63
  %4446 = load i32, i32* @y.64
  %4447 = sub i32 %4445, 1
  %4448 = mul i32 %4445, %4447
  %4449 = urem i32 %4448, 2
  %4450 = icmp eq i32 %4449, 0
  %4451 = icmp slt i32 %4446, 10
  %4452 = or i1 %4450, %4451
  br i1 %4452, label %originalBB1176, label %originalBB1176alteredBB

originalBB1176:                                   ; preds = %4444, %originalBB1176alteredBB
  %4453 = load i32, i32* @x.63
  %4454 = load i32, i32* @y.64
  %4455 = sub i32 %4453, 1
  %4456 = mul i32 %4453, %4455
  %4457 = urem i32 %4456, 2
  %4458 = icmp eq i32 %4457, 0
  %4459 = icmp slt i32 %4454, 10
  %4460 = or i1 %4458, %4459
  br i1 %4460, label %originalBBpart21178, label %originalBB1176alteredBB

originalBBpart21178:                              ; preds = %originalBB1176
  br label %5422, !dbg !4329

4461:                                             ; preds = %4441
  %4462 = load i32, i32* @x.63
  %4463 = load i32, i32* @y.64
  %4464 = sub i32 %4462, 1
  %4465 = mul i32 %4462, %4464
  %4466 = urem i32 %4465, 2
  %4467 = icmp eq i32 %4466, 0
  %4468 = icmp slt i32 %4463, 10
  %4469 = or i1 %4467, %4468
  br i1 %4469, label %originalBB1180, label %originalBB1180alteredBB

originalBB1180:                                   ; preds = %4461, %originalBB1180alteredBB
  store i8 1, i8* %42, align 1, !dbg !4332
  %4470 = load i32, i32* %23, align 4, !dbg !4333
  %4471 = icmp eq i32 %4470, 2, !dbg !4333
  %4472 = load i32, i32* @x.63
  %4473 = load i32, i32* @y.64
  %4474 = sub i32 %4472, 1
  %4475 = mul i32 %4472, %4474
  %4476 = urem i32 %4475, 2
  %4477 = icmp eq i32 %4476, 0
  %4478 = icmp slt i32 %4473, 10
  %4479 = or i1 %4477, %4478
  br i1 %4479, label %originalBBpart21182, label %originalBB1180alteredBB

originalBBpart21182:                              ; preds = %originalBB1180
  br i1 %4471, label %4480, label %4664, !dbg !4333

4480:                                             ; preds = %originalBBpart21182
  %4481 = load i32, i32* @x.63
  %4482 = load i32, i32* @y.64
  %4483 = sub i32 %4481, 1
  %4484 = mul i32 %4481, %4483
  %4485 = urem i32 %4484, 2
  %4486 = icmp eq i32 %4485, 0
  %4487 = icmp slt i32 %4482, 10
  %4488 = or i1 %4486, %4487
  br i1 %4488, label %originalBB1184, label %originalBB1184alteredBB

originalBB1184:                                   ; preds = %4480, %originalBB1184alteredBB
  %4489 = load i8, i8* %36, align 1, !dbg !4333
  %4490 = trunc i8 %4489 to i1, !dbg !4333
  %4491 = load i32, i32* @x.63
  %4492 = load i32, i32* @y.64
  %4493 = sub i32 %4491, 1
  %4494 = mul i32 %4491, %4493
  %4495 = urem i32 %4494, 2
  %4496 = icmp eq i32 %4495, 0
  %4497 = icmp slt i32 %4492, 10
  %4498 = or i1 %4496, %4497
  br i1 %4498, label %originalBBpart21186, label %originalBB1184alteredBB

originalBBpart21186:                              ; preds = %originalBB1184
  br i1 %4490, label %4664, label %4499, !dbg !4332

4499:                                             ; preds = %originalBBpart21186
  %4500 = load i32, i32* @x.63
  %4501 = load i32, i32* @y.64
  %4502 = sub i32 %4500, 1
  %4503 = mul i32 %4500, %4502
  %4504 = urem i32 %4503, 2
  %4505 = icmp eq i32 %4504, 0
  %4506 = icmp slt i32 %4501, 10
  %4507 = or i1 %4505, %4506
  br i1 %4507, label %originalBB1188, label %originalBB1188alteredBB

originalBB1188:                                   ; preds = %4499, %originalBB1188alteredBB
  %4508 = load i32, i32* @x.63
  %4509 = load i32, i32* @y.64
  %4510 = sub i32 %4508, 1
  %4511 = mul i32 %4508, %4510
  %4512 = urem i32 %4511, 2
  %4513 = icmp eq i32 %4512, 0
  %4514 = icmp slt i32 %4509, 10
  %4515 = or i1 %4513, %4514
  br i1 %4515, label %originalBBpart21190, label %originalBB1188alteredBB

originalBBpart21190:                              ; preds = %originalBB1188
  br label %4516, !dbg !4335

4516:                                             ; preds = %originalBBpart21190
  %4517 = load i32, i32* @x.63
  %4518 = load i32, i32* @y.64
  %4519 = sub i32 %4517, 1
  %4520 = mul i32 %4517, %4519
  %4521 = urem i32 %4520, 2
  %4522 = icmp eq i32 %4521, 0
  %4523 = icmp slt i32 %4518, 10
  %4524 = or i1 %4522, %4523
  br i1 %4524, label %originalBB1192, label %originalBB1192alteredBB

originalBB1192:                                   ; preds = %4516, %originalBB1192alteredBB
  %4525 = load i64, i64* %29, align 8, !dbg !4337
  %4526 = load i64, i64* %20, align 8, !dbg !4337
  %4527 = icmp ult i64 %4525, %4526, !dbg !4337
  %4528 = load i32, i32* @x.63
  %4529 = load i32, i32* @y.64
  %4530 = sub i32 %4528, 1
  %4531 = mul i32 %4528, %4530
  %4532 = urem i32 %4531, 2
  %4533 = icmp eq i32 %4532, 0
  %4534 = icmp slt i32 %4529, 10
  %4535 = or i1 %4533, %4534
  br i1 %4535, label %originalBBpart21194, label %originalBB1192alteredBB

originalBBpart21194:                              ; preds = %originalBB1192
  br i1 %4527, label %4536, label %4540, !dbg !4340

4536:                                             ; preds = %originalBBpart21194
  %4537 = load i8*, i8** %19, align 8, !dbg !4337
  %4538 = load i64, i64* %29, align 8, !dbg !4337
  %4539 = getelementptr inbounds i8, i8* %4537, i64 %4538, !dbg !4337
  store i8 39, i8* %4539, align 1, !dbg !4337
  br label %4540, !dbg !4337

4540:                                             ; preds = %4536, %originalBBpart21194
  %4541 = load i32, i32* @x.63
  %4542 = load i32, i32* @y.64
  %4543 = sub i32 %4541, 1
  %4544 = mul i32 %4541, %4543
  %4545 = urem i32 %4544, 2
  %4546 = icmp eq i32 %4545, 0
  %4547 = icmp slt i32 %4542, 10
  %4548 = or i1 %4546, %4547
  br i1 %4548, label %originalBB1196, label %originalBB1196alteredBB

originalBB1196:                                   ; preds = %4540, %originalBB1196alteredBB
  %4549 = load i64, i64* %29, align 8, !dbg !4340
  %4550 = add i64 %4549, 1, !dbg !4340
  store i64 %4550, i64* %29, align 8, !dbg !4340
  %4551 = load i32, i32* @x.63
  %4552 = load i32, i32* @y.64
  %4553 = sub i32 %4551, 1
  %4554 = mul i32 %4551, %4553
  %4555 = urem i32 %4554, 2
  %4556 = icmp eq i32 %4555, 0
  %4557 = icmp slt i32 %4552, 10
  %4558 = or i1 %4556, %4557
  br i1 %4558, label %originalBBpart21206, label %originalBB1196alteredBB

originalBBpart21206:                              ; preds = %originalBB1196
  br label %4559, !dbg !4340

4559:                                             ; preds = %originalBBpart21206
  %4560 = load i32, i32* @x.63
  %4561 = load i32, i32* @y.64
  %4562 = sub i32 %4560, 1
  %4563 = mul i32 %4560, %4562
  %4564 = urem i32 %4563, 2
  %4565 = icmp eq i32 %4564, 0
  %4566 = icmp slt i32 %4561, 10
  %4567 = or i1 %4565, %4566
  br i1 %4567, label %originalBB1208, label %originalBB1208alteredBB

originalBB1208:                                   ; preds = %4559, %originalBB1208alteredBB
  %4568 = load i32, i32* @x.63
  %4569 = load i32, i32* @y.64
  %4570 = sub i32 %4568, 1
  %4571 = mul i32 %4568, %4570
  %4572 = urem i32 %4571, 2
  %4573 = icmp eq i32 %4572, 0
  %4574 = icmp slt i32 %4569, 10
  %4575 = or i1 %4573, %4574
  br i1 %4575, label %originalBBpart21210, label %originalBB1208alteredBB

originalBBpart21210:                              ; preds = %originalBB1208
  br label %4576, !dbg !4335

4576:                                             ; preds = %originalBBpart21210
  %4577 = load i32, i32* @x.63
  %4578 = load i32, i32* @y.64
  %4579 = sub i32 %4577, 1
  %4580 = mul i32 %4577, %4579
  %4581 = urem i32 %4580, 2
  %4582 = icmp eq i32 %4581, 0
  %4583 = icmp slt i32 %4578, 10
  %4584 = or i1 %4582, %4583
  br i1 %4584, label %originalBB1212, label %originalBB1212alteredBB

originalBB1212:                                   ; preds = %4576, %originalBB1212alteredBB
  %4585 = load i64, i64* %29, align 8, !dbg !4341
  %4586 = load i64, i64* %20, align 8, !dbg !4341
  %4587 = icmp ult i64 %4585, %4586, !dbg !4341
  %4588 = load i32, i32* @x.63
  %4589 = load i32, i32* @y.64
  %4590 = sub i32 %4588, 1
  %4591 = mul i32 %4588, %4590
  %4592 = urem i32 %4591, 2
  %4593 = icmp eq i32 %4592, 0
  %4594 = icmp slt i32 %4589, 10
  %4595 = or i1 %4593, %4594
  br i1 %4595, label %originalBBpart21214, label %originalBB1212alteredBB

originalBBpart21214:                              ; preds = %originalBB1212
  br i1 %4587, label %4596, label %4616, !dbg !4344

4596:                                             ; preds = %originalBBpart21214
  %4597 = load i32, i32* @x.63
  %4598 = load i32, i32* @y.64
  %4599 = sub i32 %4597, 1
  %4600 = mul i32 %4597, %4599
  %4601 = urem i32 %4600, 2
  %4602 = icmp eq i32 %4601, 0
  %4603 = icmp slt i32 %4598, 10
  %4604 = or i1 %4602, %4603
  br i1 %4604, label %originalBB1216, label %originalBB1216alteredBB

originalBB1216:                                   ; preds = %4596, %originalBB1216alteredBB
  %4605 = load i8*, i8** %19, align 8, !dbg !4341
  %4606 = load i64, i64* %29, align 8, !dbg !4341
  %4607 = getelementptr inbounds i8, i8* %4605, i64 %4606, !dbg !4341
  store i8 36, i8* %4607, align 1, !dbg !4341
  %4608 = load i32, i32* @x.63
  %4609 = load i32, i32* @y.64
  %4610 = sub i32 %4608, 1
  %4611 = mul i32 %4608, %4610
  %4612 = urem i32 %4611, 2
  %4613 = icmp eq i32 %4612, 0
  %4614 = icmp slt i32 %4609, 10
  %4615 = or i1 %4613, %4614
  br i1 %4615, label %originalBBpart21218, label %originalBB1216alteredBB

originalBBpart21218:                              ; preds = %originalBB1216
  br label %4616, !dbg !4341

4616:                                             ; preds = %originalBBpart21218, %originalBBpart21214
  %4617 = load i32, i32* @x.63
  %4618 = load i32, i32* @y.64
  %4619 = sub i32 %4617, 1
  %4620 = mul i32 %4617, %4619
  %4621 = urem i32 %4620, 2
  %4622 = icmp eq i32 %4621, 0
  %4623 = icmp slt i32 %4618, 10
  %4624 = or i1 %4622, %4623
  br i1 %4624, label %originalBB1220, label %originalBB1220alteredBB

originalBB1220:                                   ; preds = %4616, %originalBB1220alteredBB
  %4625 = load i64, i64* %29, align 8, !dbg !4344
  %4626 = add i64 %4625, 1, !dbg !4344
  store i64 %4626, i64* %29, align 8, !dbg !4344
  %4627 = load i32, i32* @x.63
  %4628 = load i32, i32* @y.64
  %4629 = sub i32 %4627, 1
  %4630 = mul i32 %4627, %4629
  %4631 = urem i32 %4630, 2
  %4632 = icmp eq i32 %4631, 0
  %4633 = icmp slt i32 %4628, 10
  %4634 = or i1 %4632, %4633
  br i1 %4634, label %originalBBpart21226, label %originalBB1220alteredBB

originalBBpart21226:                              ; preds = %originalBB1220
  br label %4635, !dbg !4344

4635:                                             ; preds = %originalBBpart21226
  br label %4636, !dbg !4335

4636:                                             ; preds = %4635
  %4637 = load i64, i64* %29, align 8, !dbg !4345
  %4638 = load i64, i64* %20, align 8, !dbg !4345
  %4639 = icmp ult i64 %4637, %4638, !dbg !4345
  br i1 %4639, label %4640, label %4660, !dbg !4348

4640:                                             ; preds = %4636
  %4641 = load i32, i32* @x.63
  %4642 = load i32, i32* @y.64
  %4643 = sub i32 %4641, 1
  %4644 = mul i32 %4641, %4643
  %4645 = urem i32 %4644, 2
  %4646 = icmp eq i32 %4645, 0
  %4647 = icmp slt i32 %4642, 10
  %4648 = or i1 %4646, %4647
  br i1 %4648, label %originalBB1228, label %originalBB1228alteredBB

originalBB1228:                                   ; preds = %4640, %originalBB1228alteredBB
  %4649 = load i8*, i8** %19, align 8, !dbg !4345
  %4650 = load i64, i64* %29, align 8, !dbg !4345
  %4651 = getelementptr inbounds i8, i8* %4649, i64 %4650, !dbg !4345
  store i8 39, i8* %4651, align 1, !dbg !4345
  %4652 = load i32, i32* @x.63
  %4653 = load i32, i32* @y.64
  %4654 = sub i32 %4652, 1
  %4655 = mul i32 %4652, %4654
  %4656 = urem i32 %4655, 2
  %4657 = icmp eq i32 %4656, 0
  %4658 = icmp slt i32 %4653, 10
  %4659 = or i1 %4657, %4658
  br i1 %4659, label %originalBBpart21230, label %originalBB1228alteredBB

originalBBpart21230:                              ; preds = %originalBB1228
  br label %4660, !dbg !4345

4660:                                             ; preds = %originalBBpart21230, %4636
  %4661 = load i64, i64* %29, align 8, !dbg !4348
  %4662 = add i64 %4661, 1, !dbg !4348
  store i64 %4662, i64* %29, align 8, !dbg !4348
  br label %4663, !dbg !4348

4663:                                             ; preds = %4660
  store i8 1, i8* %36, align 1, !dbg !4335
  br label %4664, !dbg !4335

4664:                                             ; preds = %4663, %originalBBpart21186, %originalBBpart21182
  %4665 = load i32, i32* @x.63
  %4666 = load i32, i32* @y.64
  %4667 = sub i32 %4665, 1
  %4668 = mul i32 %4665, %4667
  %4669 = urem i32 %4668, 2
  %4670 = icmp eq i32 %4669, 0
  %4671 = icmp slt i32 %4666, 10
  %4672 = or i1 %4670, %4671
  br i1 %4672, label %originalBB1232, label %originalBB1232alteredBB

originalBB1232:                                   ; preds = %4664, %originalBB1232alteredBB
  %4673 = load i32, i32* @x.63
  %4674 = load i32, i32* @y.64
  %4675 = sub i32 %4673, 1
  %4676 = mul i32 %4673, %4675
  %4677 = urem i32 %4676, 2
  %4678 = icmp eq i32 %4677, 0
  %4679 = icmp slt i32 %4674, 10
  %4680 = or i1 %4678, %4679
  br i1 %4680, label %originalBBpart21234, label %originalBB1232alteredBB

originalBBpart21234:                              ; preds = %originalBB1232
  br label %4681, !dbg !4332

4681:                                             ; preds = %originalBBpart21234
  %4682 = load i64, i64* %29, align 8, !dbg !4349
  %4683 = load i64, i64* %20, align 8, !dbg !4349
  %4684 = icmp ult i64 %4682, %4683, !dbg !4349
  br i1 %4684, label %4685, label %4705, !dbg !4352

4685:                                             ; preds = %4681
  %4686 = load i32, i32* @x.63
  %4687 = load i32, i32* @y.64
  %4688 = sub i32 %4686, 1
  %4689 = mul i32 %4686, %4688
  %4690 = urem i32 %4689, 2
  %4691 = icmp eq i32 %4690, 0
  %4692 = icmp slt i32 %4687, 10
  %4693 = or i1 %4691, %4692
  br i1 %4693, label %originalBB1236, label %originalBB1236alteredBB

originalBB1236:                                   ; preds = %4685, %originalBB1236alteredBB
  %4694 = load i8*, i8** %19, align 8, !dbg !4349
  %4695 = load i64, i64* %29, align 8, !dbg !4349
  %4696 = getelementptr inbounds i8, i8* %4694, i64 %4695, !dbg !4349
  store i8 92, i8* %4696, align 1, !dbg !4349
  %4697 = load i32, i32* @x.63
  %4698 = load i32, i32* @y.64
  %4699 = sub i32 %4697, 1
  %4700 = mul i32 %4697, %4699
  %4701 = urem i32 %4700, 2
  %4702 = icmp eq i32 %4701, 0
  %4703 = icmp slt i32 %4698, 10
  %4704 = or i1 %4702, %4703
  br i1 %4704, label %originalBBpart21238, label %originalBB1236alteredBB

originalBBpart21238:                              ; preds = %originalBB1236
  br label %4705, !dbg !4349

4705:                                             ; preds = %originalBBpart21238, %4681
  %4706 = load i32, i32* @x.63
  %4707 = load i32, i32* @y.64
  %4708 = sub i32 %4706, 1
  %4709 = mul i32 %4706, %4708
  %4710 = urem i32 %4709, 2
  %4711 = icmp eq i32 %4710, 0
  %4712 = icmp slt i32 %4707, 10
  %4713 = or i1 %4711, %4712
  br i1 %4713, label %originalBB1240, label %originalBB1240alteredBB

originalBB1240:                                   ; preds = %4705, %originalBB1240alteredBB
  %4714 = load i64, i64* %29, align 8, !dbg !4352
  %4715 = add i64 %4714, 1, !dbg !4352
  store i64 %4715, i64* %29, align 8, !dbg !4352
  %4716 = load i32, i32* @x.63
  %4717 = load i32, i32* @y.64
  %4718 = sub i32 %4716, 1
  %4719 = mul i32 %4716, %4718
  %4720 = urem i32 %4719, 2
  %4721 = icmp eq i32 %4720, 0
  %4722 = icmp slt i32 %4717, 10
  %4723 = or i1 %4721, %4722
  br i1 %4723, label %originalBBpart21250, label %originalBB1240alteredBB

originalBBpart21250:                              ; preds = %originalBB1240
  br label %4724, !dbg !4352

4724:                                             ; preds = %originalBBpart21250
  %4725 = load i32, i32* @x.63
  %4726 = load i32, i32* @y.64
  %4727 = sub i32 %4725, 1
  %4728 = mul i32 %4725, %4727
  %4729 = urem i32 %4728, 2
  %4730 = icmp eq i32 %4729, 0
  %4731 = icmp slt i32 %4726, 10
  %4732 = or i1 %4730, %4731
  br i1 %4732, label %originalBB1252, label %originalBB1252alteredBB

originalBB1252:                                   ; preds = %4724, %originalBB1252alteredBB
  %4733 = load i32, i32* @x.63
  %4734 = load i32, i32* @y.64
  %4735 = sub i32 %4733, 1
  %4736 = mul i32 %4733, %4735
  %4737 = urem i32 %4736, 2
  %4738 = icmp eq i32 %4737, 0
  %4739 = icmp slt i32 %4734, 10
  %4740 = or i1 %4738, %4739
  br i1 %4740, label %originalBBpart21254, label %originalBB1252alteredBB

originalBBpart21254:                              ; preds = %originalBB1252
  br label %4741, !dbg !4332

4741:                                             ; preds = %originalBBpart21254
  %4742 = load i32, i32* @x.63
  %4743 = load i32, i32* @y.64
  %4744 = sub i32 %4742, 1
  %4745 = mul i32 %4742, %4744
  %4746 = urem i32 %4745, 2
  %4747 = icmp eq i32 %4746, 0
  %4748 = icmp slt i32 %4743, 10
  %4749 = or i1 %4747, %4748
  br i1 %4749, label %originalBB1256, label %originalBB1256alteredBB

originalBB1256:                                   ; preds = %4741, %originalBB1256alteredBB
  %4750 = load i32, i32* @x.63
  %4751 = load i32, i32* @y.64
  %4752 = sub i32 %4750, 1
  %4753 = mul i32 %4750, %4752
  %4754 = urem i32 %4753, 2
  %4755 = icmp eq i32 %4754, 0
  %4756 = icmp slt i32 %4751, 10
  %4757 = or i1 %4755, %4756
  br i1 %4757, label %originalBBpart21258, label %originalBB1256alteredBB

originalBBpart21258:                              ; preds = %originalBB1256
  br label %4758, !dbg !4332

4758:                                             ; preds = %originalBBpart21258, %originalBBpart21170, %originalBBpart21158, %originalBBpart2592, %originalBBpart2576
  call void @llvm.dbg.label(metadata !4353), !dbg !4354
  %4759 = load i32, i32* @x.63
  %4760 = load i32, i32* @y.64
  %4761 = sub i32 %4759, 1
  %4762 = mul i32 %4759, %4761
  %4763 = urem i32 %4762, 2
  %4764 = icmp eq i32 %4763, 0
  %4765 = icmp slt i32 %4760, 10
  %4766 = or i1 %4764, %4765
  br i1 %4766, label %originalBB1260, label %originalBB1260alteredBB

originalBB1260:                                   ; preds = %4758, %originalBB1260alteredBB
  %4767 = load i32, i32* @x.63
  %4768 = load i32, i32* @y.64
  %4769 = sub i32 %4767, 1
  %4770 = mul i32 %4767, %4769
  %4771 = urem i32 %4770, 2
  %4772 = icmp eq i32 %4771, 0
  %4773 = icmp slt i32 %4768, 10
  %4774 = or i1 %4772, %4773
  br i1 %4774, label %originalBBpart21262, label %originalBB1260alteredBB

originalBBpart21262:                              ; preds = %originalBB1260
  br label %4775, !dbg !4355

4775:                                             ; preds = %originalBBpart21262
  %4776 = load i32, i32* @x.63
  %4777 = load i32, i32* @y.64
  %4778 = sub i32 %4776, 1
  %4779 = mul i32 %4776, %4778
  %4780 = urem i32 %4779, 2
  %4781 = icmp eq i32 %4780, 0
  %4782 = icmp slt i32 %4777, 10
  %4783 = or i1 %4781, %4782
  br i1 %4783, label %originalBB1264, label %originalBB1264alteredBB

originalBB1264:                                   ; preds = %4775, %originalBB1264alteredBB
  %4784 = load i8, i8* %36, align 1, !dbg !4356
  %4785 = trunc i8 %4784 to i1, !dbg !4356
  %4786 = load i32, i32* @x.63
  %4787 = load i32, i32* @y.64
  %4788 = sub i32 %4786, 1
  %4789 = mul i32 %4786, %4788
  %4790 = urem i32 %4789, 2
  %4791 = icmp eq i32 %4790, 0
  %4792 = icmp slt i32 %4787, 10
  %4793 = or i1 %4791, %4792
  br i1 %4793, label %originalBBpart21266, label %originalBB1264alteredBB

originalBBpart21266:                              ; preds = %originalBB1264
  br i1 %4785, label %4794, label %4886, !dbg !4356

4794:                                             ; preds = %originalBBpart21266
  %4795 = load i8, i8* %42, align 1, !dbg !4356
  %4796 = trunc i8 %4795 to i1, !dbg !4356
  br i1 %4796, label %4886, label %4797, !dbg !4359

4797:                                             ; preds = %4794
  %4798 = load i32, i32* @x.63
  %4799 = load i32, i32* @y.64
  %4800 = sub i32 %4798, 1
  %4801 = mul i32 %4798, %4800
  %4802 = urem i32 %4801, 2
  %4803 = icmp eq i32 %4802, 0
  %4804 = icmp slt i32 %4799, 10
  %4805 = or i1 %4803, %4804
  br i1 %4805, label %originalBB1268, label %originalBB1268alteredBB

originalBB1268:                                   ; preds = %4797, %originalBB1268alteredBB
  %4806 = load i32, i32* @x.63
  %4807 = load i32, i32* @y.64
  %4808 = sub i32 %4806, 1
  %4809 = mul i32 %4806, %4808
  %4810 = urem i32 %4809, 2
  %4811 = icmp eq i32 %4810, 0
  %4812 = icmp slt i32 %4807, 10
  %4813 = or i1 %4811, %4812
  br i1 %4813, label %originalBBpart21270, label %originalBB1268alteredBB

originalBBpart21270:                              ; preds = %originalBB1268
  br label %4814, !dbg !4360

4814:                                             ; preds = %originalBBpart21270
  %4815 = load i64, i64* %29, align 8, !dbg !4362
  %4816 = load i64, i64* %20, align 8, !dbg !4362
  %4817 = icmp ult i64 %4815, %4816, !dbg !4362
  br i1 %4817, label %4818, label %4822, !dbg !4365

4818:                                             ; preds = %4814
  %4819 = load i8*, i8** %19, align 8, !dbg !4362
  %4820 = load i64, i64* %29, align 8, !dbg !4362
  %4821 = getelementptr inbounds i8, i8* %4819, i64 %4820, !dbg !4362
  store i8 39, i8* %4821, align 1, !dbg !4362
  br label %4822, !dbg !4362

4822:                                             ; preds = %4818, %4814
  %4823 = load i64, i64* %29, align 8, !dbg !4365
  %4824 = add i64 %4823, 1, !dbg !4365
  store i64 %4824, i64* %29, align 8, !dbg !4365
  br label %4825, !dbg !4365

4825:                                             ; preds = %4822
  %4826 = load i32, i32* @x.63
  %4827 = load i32, i32* @y.64
  %4828 = sub i32 %4826, 1
  %4829 = mul i32 %4826, %4828
  %4830 = urem i32 %4829, 2
  %4831 = icmp eq i32 %4830, 0
  %4832 = icmp slt i32 %4827, 10
  %4833 = or i1 %4831, %4832
  br i1 %4833, label %originalBB1272, label %originalBB1272alteredBB

originalBB1272:                                   ; preds = %4825, %originalBB1272alteredBB
  %4834 = load i32, i32* @x.63
  %4835 = load i32, i32* @y.64
  %4836 = sub i32 %4834, 1
  %4837 = mul i32 %4834, %4836
  %4838 = urem i32 %4837, 2
  %4839 = icmp eq i32 %4838, 0
  %4840 = icmp slt i32 %4835, 10
  %4841 = or i1 %4839, %4840
  br i1 %4841, label %originalBBpart21274, label %originalBB1272alteredBB

originalBBpart21274:                              ; preds = %originalBB1272
  br label %4842, !dbg !4360

4842:                                             ; preds = %originalBBpart21274
  %4843 = load i32, i32* @x.63
  %4844 = load i32, i32* @y.64
  %4845 = sub i32 %4843, 1
  %4846 = mul i32 %4843, %4845
  %4847 = urem i32 %4846, 2
  %4848 = icmp eq i32 %4847, 0
  %4849 = icmp slt i32 %4844, 10
  %4850 = or i1 %4848, %4849
  br i1 %4850, label %originalBB1276, label %originalBB1276alteredBB

originalBB1276:                                   ; preds = %4842, %originalBB1276alteredBB
  %4851 = load i64, i64* %29, align 8, !dbg !4366
  %4852 = load i64, i64* %20, align 8, !dbg !4366
  %4853 = icmp ult i64 %4851, %4852, !dbg !4366
  %4854 = load i32, i32* @x.63
  %4855 = load i32, i32* @y.64
  %4856 = sub i32 %4854, 1
  %4857 = mul i32 %4854, %4856
  %4858 = urem i32 %4857, 2
  %4859 = icmp eq i32 %4858, 0
  %4860 = icmp slt i32 %4855, 10
  %4861 = or i1 %4859, %4860
  br i1 %4861, label %originalBBpart21278, label %originalBB1276alteredBB

originalBBpart21278:                              ; preds = %originalBB1276
  br i1 %4853, label %4862, label %4882, !dbg !4369

4862:                                             ; preds = %originalBBpart21278
  %4863 = load i32, i32* @x.63
  %4864 = load i32, i32* @y.64
  %4865 = sub i32 %4863, 1
  %4866 = mul i32 %4863, %4865
  %4867 = urem i32 %4866, 2
  %4868 = icmp eq i32 %4867, 0
  %4869 = icmp slt i32 %4864, 10
  %4870 = or i1 %4868, %4869
  br i1 %4870, label %originalBB1280, label %originalBB1280alteredBB

originalBB1280:                                   ; preds = %4862, %originalBB1280alteredBB
  %4871 = load i8*, i8** %19, align 8, !dbg !4366
  %4872 = load i64, i64* %29, align 8, !dbg !4366
  %4873 = getelementptr inbounds i8, i8* %4871, i64 %4872, !dbg !4366
  store i8 39, i8* %4873, align 1, !dbg !4366
  %4874 = load i32, i32* @x.63
  %4875 = load i32, i32* @y.64
  %4876 = sub i32 %4874, 1
  %4877 = mul i32 %4874, %4876
  %4878 = urem i32 %4877, 2
  %4879 = icmp eq i32 %4878, 0
  %4880 = icmp slt i32 %4875, 10
  %4881 = or i1 %4879, %4880
  br i1 %4881, label %originalBBpart21282, label %originalBB1280alteredBB

originalBBpart21282:                              ; preds = %originalBB1280
  br label %4882, !dbg !4366

4882:                                             ; preds = %originalBBpart21282, %originalBBpart21278
  %4883 = load i64, i64* %29, align 8, !dbg !4369
  %4884 = add i64 %4883, 1, !dbg !4369
  store i64 %4884, i64* %29, align 8, !dbg !4369
  br label %4885, !dbg !4369

4885:                                             ; preds = %4882
  store i8 0, i8* %36, align 1, !dbg !4360
  br label %4886, !dbg !4360

4886:                                             ; preds = %4885, %4794, %originalBBpart21266
  br label %4887, !dbg !4359

4887:                                             ; preds = %4886
  %4888 = load i32, i32* @x.63
  %4889 = load i32, i32* @y.64
  %4890 = sub i32 %4888, 1
  %4891 = mul i32 %4888, %4890
  %4892 = urem i32 %4891, 2
  %4893 = icmp eq i32 %4892, 0
  %4894 = icmp slt i32 %4889, 10
  %4895 = or i1 %4893, %4894
  br i1 %4895, label %originalBB1284, label %originalBB1284alteredBB

originalBB1284:                                   ; preds = %4887, %originalBB1284alteredBB
  %4896 = load i32, i32* @x.63
  %4897 = load i32, i32* @y.64
  %4898 = sub i32 %4896, 1
  %4899 = mul i32 %4896, %4898
  %4900 = urem i32 %4899, 2
  %4901 = icmp eq i32 %4900, 0
  %4902 = icmp slt i32 %4897, 10
  %4903 = or i1 %4901, %4902
  br i1 %4903, label %originalBBpart21286, label %originalBB1284alteredBB

originalBBpart21286:                              ; preds = %originalBB1284
  br label %4904, !dbg !4370

4904:                                             ; preds = %originalBBpart21286
  %4905 = load i32, i32* @x.63
  %4906 = load i32, i32* @y.64
  %4907 = sub i32 %4905, 1
  %4908 = mul i32 %4905, %4907
  %4909 = urem i32 %4908, 2
  %4910 = icmp eq i32 %4909, 0
  %4911 = icmp slt i32 %4906, 10
  %4912 = or i1 %4910, %4911
  br i1 %4912, label %originalBB1288, label %originalBB1288alteredBB

originalBB1288:                                   ; preds = %4904, %originalBB1288alteredBB
  %4913 = load i64, i64* %29, align 8, !dbg !4371
  %4914 = load i64, i64* %20, align 8, !dbg !4371
  %4915 = icmp ult i64 %4913, %4914, !dbg !4371
  %4916 = load i32, i32* @x.63
  %4917 = load i32, i32* @y.64
  %4918 = sub i32 %4916, 1
  %4919 = mul i32 %4916, %4918
  %4920 = urem i32 %4919, 2
  %4921 = icmp eq i32 %4920, 0
  %4922 = icmp slt i32 %4917, 10
  %4923 = or i1 %4921, %4922
  br i1 %4923, label %originalBBpart21290, label %originalBB1288alteredBB

originalBBpart21290:                              ; preds = %originalBB1288
  br i1 %4915, label %4924, label %4945, !dbg !4374

4924:                                             ; preds = %originalBBpart21290
  %4925 = load i32, i32* @x.63
  %4926 = load i32, i32* @y.64
  %4927 = sub i32 %4925, 1
  %4928 = mul i32 %4925, %4927
  %4929 = urem i32 %4928, 2
  %4930 = icmp eq i32 %4929, 0
  %4931 = icmp slt i32 %4926, 10
  %4932 = or i1 %4930, %4931
  br i1 %4932, label %originalBB1292, label %originalBB1292alteredBB

originalBB1292:                                   ; preds = %4924, %originalBB1292alteredBB
  %4933 = load i8, i8* %39, align 1, !dbg !4371
  %4934 = load i8*, i8** %19, align 8, !dbg !4371
  %4935 = load i64, i64* %29, align 8, !dbg !4371
  %4936 = getelementptr inbounds i8, i8* %4934, i64 %4935, !dbg !4371
  store i8 %4933, i8* %4936, align 1, !dbg !4371
  %4937 = load i32, i32* @x.63
  %4938 = load i32, i32* @y.64
  %4939 = sub i32 %4937, 1
  %4940 = mul i32 %4937, %4939
  %4941 = urem i32 %4940, 2
  %4942 = icmp eq i32 %4941, 0
  %4943 = icmp slt i32 %4938, 10
  %4944 = or i1 %4942, %4943
  br i1 %4944, label %originalBBpart21294, label %originalBB1292alteredBB

originalBBpart21294:                              ; preds = %originalBB1292
  br label %4945, !dbg !4371

4945:                                             ; preds = %originalBBpart21294, %originalBBpart21290
  %4946 = load i32, i32* @x.63
  %4947 = load i32, i32* @y.64
  %4948 = sub i32 %4946, 1
  %4949 = mul i32 %4946, %4948
  %4950 = urem i32 %4949, 2
  %4951 = icmp eq i32 %4950, 0
  %4952 = icmp slt i32 %4947, 10
  %4953 = or i1 %4951, %4952
  br i1 %4953, label %originalBB1296, label %originalBB1296alteredBB

originalBB1296:                                   ; preds = %4945, %originalBB1296alteredBB
  %4954 = load i64, i64* %29, align 8, !dbg !4374
  %4955 = add i64 %4954, 1, !dbg !4374
  store i64 %4955, i64* %29, align 8, !dbg !4374
  %4956 = load i32, i32* @x.63
  %4957 = load i32, i32* @y.64
  %4958 = sub i32 %4956, 1
  %4959 = mul i32 %4956, %4958
  %4960 = urem i32 %4959, 2
  %4961 = icmp eq i32 %4960, 0
  %4962 = icmp slt i32 %4957, 10
  %4963 = or i1 %4961, %4962
  br i1 %4963, label %originalBBpart21309, label %originalBB1296alteredBB

originalBBpart21309:                              ; preds = %originalBB1296
  br label %4964, !dbg !4374

4964:                                             ; preds = %originalBBpart21309
  %4965 = load i8, i8* %43, align 1, !dbg !4375
  %4966 = trunc i8 %4965 to i1, !dbg !4375
  br i1 %4966, label %4968, label %4967, !dbg !4377

4967:                                             ; preds = %4964
  store i8 0, i8* %38, align 1, !dbg !4378
  br label %4968, !dbg !4379

4968:                                             ; preds = %4967, %4964
  %4969 = load i32, i32* @x.63
  %4970 = load i32, i32* @y.64
  %4971 = sub i32 %4969, 1
  %4972 = mul i32 %4969, %4971
  %4973 = urem i32 %4972, 2
  %4974 = icmp eq i32 %4973, 0
  %4975 = icmp slt i32 %4970, 10
  %4976 = or i1 %4974, %4975
  br i1 %4976, label %originalBB1311, label %originalBB1311alteredBB

originalBB1311:                                   ; preds = %4968, %originalBB1311alteredBB
  %4977 = load i32, i32* @x.63
  %4978 = load i32, i32* @y.64
  %4979 = sub i32 %4977, 1
  %4980 = mul i32 %4977, %4979
  %4981 = urem i32 %4980, 2
  %4982 = icmp eq i32 %4981, 0
  %4983 = icmp slt i32 %4978, 10
  %4984 = or i1 %4982, %4983
  br i1 %4984, label %originalBBpart21313, label %originalBB1311alteredBB

originalBBpart21313:                              ; preds = %originalBB1311
  br label %4985, !dbg !4380

4985:                                             ; preds = %originalBBpart21313, %1522
  %4986 = load i32, i32* @x.63
  %4987 = load i32, i32* @y.64
  %4988 = sub i32 %4986, 1
  %4989 = mul i32 %4986, %4988
  %4990 = urem i32 %4989, 2
  %4991 = icmp eq i32 %4990, 0
  %4992 = icmp slt i32 %4987, 10
  %4993 = or i1 %4991, %4992
  br i1 %4993, label %originalBB1315, label %originalBB1315alteredBB

originalBB1315:                                   ; preds = %4985, %originalBB1315alteredBB
  %4994 = load i64, i64* %28, align 8, !dbg !4381
  %4995 = add i64 %4994, 1, !dbg !4381
  store i64 %4995, i64* %28, align 8, !dbg !4381
  %4996 = load i32, i32* @x.63
  %4997 = load i32, i32* @y.64
  %4998 = sub i32 %4996, 1
  %4999 = mul i32 %4996, %4998
  %5000 = urem i32 %4999, 2
  %5001 = icmp eq i32 %5000, 0
  %5002 = icmp slt i32 %4997, 10
  %5003 = or i1 %5001, %5002
  br i1 %5003, label %originalBBpart21324, label %originalBB1315alteredBB

originalBBpart21324:                              ; preds = %originalBB1315
  br label %650, !dbg !4382, !llvm.loop !4383

5004:                                             ; preds = %originalBBpart2179
  %5005 = load i32, i32* @x.63
  %5006 = load i32, i32* @y.64
  %5007 = sub i32 %5005, 1
  %5008 = mul i32 %5005, %5007
  %5009 = urem i32 %5008, 2
  %5010 = icmp eq i32 %5009, 0
  %5011 = icmp slt i32 %5006, 10
  %5012 = or i1 %5010, %5011
  br i1 %5012, label %originalBB1326, label %originalBB1326alteredBB

originalBB1326:                                   ; preds = %5004, %originalBB1326alteredBB
  %5013 = load i64, i64* %29, align 8, !dbg !4385
  %5014 = icmp eq i64 %5013, 0, !dbg !4387
  %5015 = load i32, i32* @x.63
  %5016 = load i32, i32* @y.64
  %5017 = sub i32 %5015, 1
  %5018 = mul i32 %5015, %5017
  %5019 = urem i32 %5018, 2
  %5020 = icmp eq i32 %5019, 0
  %5021 = icmp slt i32 %5016, 10
  %5022 = or i1 %5020, %5021
  br i1 %5022, label %originalBBpart21328, label %originalBB1326alteredBB

originalBBpart21328:                              ; preds = %originalBB1326
  br i1 %5014, label %5023, label %5062, !dbg !4388

5023:                                             ; preds = %originalBBpart21328
  %5024 = load i32, i32* @x.63
  %5025 = load i32, i32* @y.64
  %5026 = sub i32 %5024, 1
  %5027 = mul i32 %5024, %5026
  %5028 = urem i32 %5027, 2
  %5029 = icmp eq i32 %5028, 0
  %5030 = icmp slt i32 %5025, 10
  %5031 = or i1 %5029, %5030
  br i1 %5031, label %originalBB1330, label %originalBB1330alteredBB

originalBB1330:                                   ; preds = %5023, %originalBB1330alteredBB
  %5032 = load i32, i32* %23, align 4, !dbg !4389
  %5033 = icmp eq i32 %5032, 2, !dbg !4390
  %5034 = load i32, i32* @x.63
  %5035 = load i32, i32* @y.64
  %5036 = sub i32 %5034, 1
  %5037 = mul i32 %5034, %5036
  %5038 = urem i32 %5037, 2
  %5039 = icmp eq i32 %5038, 0
  %5040 = icmp slt i32 %5035, 10
  %5041 = or i1 %5039, %5040
  br i1 %5041, label %originalBBpart21332, label %originalBB1330alteredBB

originalBBpart21332:                              ; preds = %originalBB1330
  br i1 %5033, label %5042, label %5062, !dbg !4391

5042:                                             ; preds = %originalBBpart21332
  %5043 = load i32, i32* @x.63
  %5044 = load i32, i32* @y.64
  %5045 = sub i32 %5043, 1
  %5046 = mul i32 %5043, %5045
  %5047 = urem i32 %5046, 2
  %5048 = icmp eq i32 %5047, 0
  %5049 = icmp slt i32 %5044, 10
  %5050 = or i1 %5048, %5049
  br i1 %5050, label %originalBB1334, label %originalBB1334alteredBB

originalBB1334:                                   ; preds = %5042, %originalBB1334alteredBB
  %5051 = load i8, i8* %35, align 1, !dbg !4392
  %5052 = trunc i8 %5051 to i1, !dbg !4392
  %5053 = load i32, i32* @x.63
  %5054 = load i32, i32* @y.64
  %5055 = sub i32 %5053, 1
  %5056 = mul i32 %5053, %5055
  %5057 = urem i32 %5056, 2
  %5058 = icmp eq i32 %5057, 0
  %5059 = icmp slt i32 %5054, 10
  %5060 = or i1 %5058, %5059
  br i1 %5060, label %originalBBpart21336, label %originalBB1334alteredBB

originalBBpart21336:                              ; preds = %originalBB1334
  br i1 %5052, label %5061, label %5062, !dbg !4393

5061:                                             ; preds = %originalBBpart21336
  br label %5422, !dbg !4394

5062:                                             ; preds = %originalBBpart21336, %originalBBpart21332, %originalBBpart21328
  %5063 = load i32, i32* @x.63
  %5064 = load i32, i32* @y.64
  %5065 = sub i32 %5063, 1
  %5066 = mul i32 %5063, %5065
  %5067 = urem i32 %5066, 2
  %5068 = icmp eq i32 %5067, 0
  %5069 = icmp slt i32 %5064, 10
  %5070 = or i1 %5068, %5069
  br i1 %5070, label %originalBB1338, label %originalBB1338alteredBB

originalBB1338:                                   ; preds = %5062, %originalBB1338alteredBB
  %5071 = load i32, i32* %23, align 4, !dbg !4395
  %5072 = icmp eq i32 %5071, 2, !dbg !4397
  %5073 = load i32, i32* @x.63
  %5074 = load i32, i32* @y.64
  %5075 = sub i32 %5073, 1
  %5076 = mul i32 %5073, %5075
  %5077 = urem i32 %5076, 2
  %5078 = icmp eq i32 %5077, 0
  %5079 = icmp slt i32 %5074, 10
  %5080 = or i1 %5078, %5079
  br i1 %5080, label %originalBBpart21340, label %originalBB1338alteredBB

originalBBpart21340:                              ; preds = %originalBB1338
  br i1 %5072, label %5081, label %5222, !dbg !4398

5081:                                             ; preds = %originalBBpart21340
  %5082 = load i8, i8* %35, align 1, !dbg !4399
  %5083 = trunc i8 %5082 to i1, !dbg !4399
  br i1 %5083, label %5222, label %5084, !dbg !4400

5084:                                             ; preds = %5081
  %5085 = load i32, i32* @x.63
  %5086 = load i32, i32* @y.64
  %5087 = sub i32 %5085, 1
  %5088 = mul i32 %5085, %5087
  %5089 = urem i32 %5088, 2
  %5090 = icmp eq i32 %5089, 0
  %5091 = icmp slt i32 %5086, 10
  %5092 = or i1 %5090, %5091
  br i1 %5092, label %originalBB1342, label %originalBB1342alteredBB

originalBB1342:                                   ; preds = %5084, %originalBB1342alteredBB
  %5093 = load i8, i8* %37, align 1, !dbg !4401
  %5094 = trunc i8 %5093 to i1, !dbg !4401
  %5095 = load i32, i32* @x.63
  %5096 = load i32, i32* @y.64
  %5097 = sub i32 %5095, 1
  %5098 = mul i32 %5095, %5097
  %5099 = urem i32 %5098, 2
  %5100 = icmp eq i32 %5099, 0
  %5101 = icmp slt i32 %5096, 10
  %5102 = or i1 %5100, %5101
  br i1 %5102, label %originalBBpart21344, label %originalBB1342alteredBB

originalBBpart21344:                              ; preds = %originalBB1342
  br i1 %5094, label %5103, label %5222, !dbg !4402

5103:                                             ; preds = %originalBBpart21344
  %5104 = load i32, i32* @x.63
  %5105 = load i32, i32* @y.64
  %5106 = sub i32 %5104, 1
  %5107 = mul i32 %5104, %5106
  %5108 = urem i32 %5107, 2
  %5109 = icmp eq i32 %5108, 0
  %5110 = icmp slt i32 %5105, 10
  %5111 = or i1 %5109, %5110
  br i1 %5111, label %originalBB1346, label %originalBB1346alteredBB

originalBB1346:                                   ; preds = %5103, %originalBB1346alteredBB
  %5112 = load i8, i8* %38, align 1, !dbg !4403
  %5113 = trunc i8 %5112 to i1, !dbg !4403
  %5114 = load i32, i32* @x.63
  %5115 = load i32, i32* @y.64
  %5116 = sub i32 %5114, 1
  %5117 = mul i32 %5114, %5116
  %5118 = urem i32 %5117, 2
  %5119 = icmp eq i32 %5118, 0
  %5120 = icmp slt i32 %5115, 10
  %5121 = or i1 %5119, %5120
  br i1 %5121, label %originalBBpart21348, label %originalBB1346alteredBB

originalBBpart21348:                              ; preds = %originalBB1346
  br i1 %5113, label %5122, label %5148, !dbg !4406

5122:                                             ; preds = %originalBBpart21348
  %5123 = load i32, i32* @x.63
  %5124 = load i32, i32* @y.64
  %5125 = sub i32 %5123, 1
  %5126 = mul i32 %5123, %5125
  %5127 = urem i32 %5126, 2
  %5128 = icmp eq i32 %5127, 0
  %5129 = icmp slt i32 %5124, 10
  %5130 = or i1 %5128, %5129
  br i1 %5130, label %originalBB1350, label %originalBB1350alteredBB

originalBB1350:                                   ; preds = %5122, %originalBB1350alteredBB
  %5131 = load i8*, i8** %19, align 8, !dbg !4407
  %5132 = load i64, i64* %30, align 8, !dbg !4408
  %5133 = load i8*, i8** %21, align 8, !dbg !4409
  %5134 = load i64, i64* %22, align 8, !dbg !4410
  %5135 = load i32, i32* %24, align 4, !dbg !4411
  %5136 = load i32*, i32** %25, align 8, !dbg !4412
  %5137 = load i8*, i8** %26, align 8, !dbg !4413
  %5138 = load i8*, i8** %27, align 8, !dbg !4414
  %5139 = call i64 @quotearg_buffer_restyled(i8* %5131, i64 %5132, i8* %5133, i64 %5134, i32 5, i32 %5135, i32* %5136, i8* %5137, i8* %5138), !dbg !4415
  store i64 %5139, i64* %18, align 8, !dbg !4416
  %5140 = load i32, i32* @x.63
  %5141 = load i32, i32* @y.64
  %5142 = sub i32 %5140, 1
  %5143 = mul i32 %5140, %5142
  %5144 = urem i32 %5143, 2
  %5145 = icmp eq i32 %5144, 0
  %5146 = icmp slt i32 %5141, 10
  %5147 = or i1 %5145, %5146
  br i1 %5147, label %originalBBpart21352, label %originalBB1350alteredBB

originalBBpart21352:                              ; preds = %originalBB1350
  br label %5488, !dbg !4416

5148:                                             ; preds = %originalBBpart21348
  %5149 = load i32, i32* @x.63
  %5150 = load i32, i32* @y.64
  %5151 = sub i32 %5149, 1
  %5152 = mul i32 %5149, %5151
  %5153 = urem i32 %5152, 2
  %5154 = icmp eq i32 %5153, 0
  %5155 = icmp slt i32 %5150, 10
  %5156 = or i1 %5154, %5155
  br i1 %5156, label %originalBB1354, label %originalBB1354alteredBB

originalBB1354:                                   ; preds = %5148, %originalBB1354alteredBB
  %5157 = load i64, i64* %20, align 8, !dbg !4417
  %5158 = icmp ne i64 %5157, 0, !dbg !4417
  %5159 = load i32, i32* @x.63
  %5160 = load i32, i32* @y.64
  %5161 = sub i32 %5159, 1
  %5162 = mul i32 %5159, %5161
  %5163 = urem i32 %5162, 2
  %5164 = icmp eq i32 %5163, 0
  %5165 = icmp slt i32 %5160, 10
  %5166 = or i1 %5164, %5165
  br i1 %5166, label %originalBBpart21356, label %originalBB1354alteredBB

originalBBpart21356:                              ; preds = %originalBB1354
  br i1 %5158, label %5188, label %5167, !dbg !4419

5167:                                             ; preds = %originalBBpart21356
  %5168 = load i32, i32* @x.63
  %5169 = load i32, i32* @y.64
  %5170 = sub i32 %5168, 1
  %5171 = mul i32 %5168, %5170
  %5172 = urem i32 %5171, 2
  %5173 = icmp eq i32 %5172, 0
  %5174 = icmp slt i32 %5169, 10
  %5175 = or i1 %5173, %5174
  br i1 %5175, label %originalBB1358, label %originalBB1358alteredBB

originalBB1358:                                   ; preds = %5167, %originalBB1358alteredBB
  %5176 = load i64, i64* %30, align 8, !dbg !4420
  %5177 = icmp ne i64 %5176, 0, !dbg !4420
  %5178 = load i32, i32* @x.63
  %5179 = load i32, i32* @y.64
  %5180 = sub i32 %5178, 1
  %5181 = mul i32 %5178, %5180
  %5182 = urem i32 %5181, 2
  %5183 = icmp eq i32 %5182, 0
  %5184 = icmp slt i32 %5179, 10
  %5185 = or i1 %5183, %5184
  br i1 %5185, label %originalBBpart21360, label %originalBB1358alteredBB

originalBBpart21360:                              ; preds = %originalBB1358
  br i1 %5177, label %5186, label %5188, !dbg !4421

5186:                                             ; preds = %originalBBpart21360
  %5187 = load i64, i64* %30, align 8, !dbg !4422
  store i64 %5187, i64* %20, align 8, !dbg !4424
  store i64 0, i64* %29, align 8, !dbg !4425
  br label %66, !dbg !4426

5188:                                             ; preds = %originalBBpart21360, %originalBBpart21356
  %5189 = load i32, i32* @x.63
  %5190 = load i32, i32* @y.64
  %5191 = sub i32 %5189, 1
  %5192 = mul i32 %5189, %5191
  %5193 = urem i32 %5192, 2
  %5194 = icmp eq i32 %5193, 0
  %5195 = icmp slt i32 %5190, 10
  %5196 = or i1 %5194, %5195
  br i1 %5196, label %originalBB1362, label %originalBB1362alteredBB

originalBB1362:                                   ; preds = %5188, %originalBB1362alteredBB
  %5197 = load i32, i32* @x.63
  %5198 = load i32, i32* @y.64
  %5199 = sub i32 %5197, 1
  %5200 = mul i32 %5197, %5199
  %5201 = urem i32 %5200, 2
  %5202 = icmp eq i32 %5201, 0
  %5203 = icmp slt i32 %5198, 10
  %5204 = or i1 %5202, %5203
  br i1 %5204, label %originalBBpart21364, label %originalBB1362alteredBB

originalBBpart21364:                              ; preds = %originalBB1362
  br label %5205

5205:                                             ; preds = %originalBBpart21364
  %5206 = load i32, i32* @x.63
  %5207 = load i32, i32* @y.64
  %5208 = sub i32 %5206, 1
  %5209 = mul i32 %5206, %5208
  %5210 = urem i32 %5209, 2
  %5211 = icmp eq i32 %5210, 0
  %5212 = icmp slt i32 %5207, 10
  %5213 = or i1 %5211, %5212
  br i1 %5213, label %originalBB1366, label %originalBB1366alteredBB

originalBB1366:                                   ; preds = %5205, %originalBB1366alteredBB
  %5214 = load i32, i32* @x.63
  %5215 = load i32, i32* @y.64
  %5216 = sub i32 %5214, 1
  %5217 = mul i32 %5214, %5216
  %5218 = urem i32 %5217, 2
  %5219 = icmp eq i32 %5218, 0
  %5220 = icmp slt i32 %5215, 10
  %5221 = or i1 %5219, %5220
  br i1 %5221, label %originalBBpart21368, label %originalBB1366alteredBB

originalBBpart21368:                              ; preds = %originalBB1366
  br label %5222, !dbg !4427

5222:                                             ; preds = %originalBBpart21368, %originalBBpart21344, %5081, %originalBBpart21340
  %5223 = load i32, i32* @x.63
  %5224 = load i32, i32* @y.64
  %5225 = sub i32 %5223, 1
  %5226 = mul i32 %5223, %5225
  %5227 = urem i32 %5226, 2
  %5228 = icmp eq i32 %5227, 0
  %5229 = icmp slt i32 %5224, 10
  %5230 = or i1 %5228, %5229
  br i1 %5230, label %originalBB1370, label %originalBB1370alteredBB

originalBB1370:                                   ; preds = %5222, %originalBB1370alteredBB
  %5231 = load i8*, i8** %31, align 8, !dbg !4428
  %5232 = icmp ne i8* %5231, null, !dbg !4428
  %5233 = load i32, i32* @x.63
  %5234 = load i32, i32* @y.64
  %5235 = sub i32 %5233, 1
  %5236 = mul i32 %5233, %5235
  %5237 = urem i32 %5236, 2
  %5238 = icmp eq i32 %5237, 0
  %5239 = icmp slt i32 %5234, 10
  %5240 = or i1 %5238, %5239
  br i1 %5240, label %originalBBpart21372, label %originalBB1370alteredBB

originalBBpart21372:                              ; preds = %originalBB1370
  br i1 %5232, label %5241, label %5396, !dbg !4430

5241:                                             ; preds = %originalBBpart21372
  %5242 = load i32, i32* @x.63
  %5243 = load i32, i32* @y.64
  %5244 = sub i32 %5242, 1
  %5245 = mul i32 %5242, %5244
  %5246 = urem i32 %5245, 2
  %5247 = icmp eq i32 %5246, 0
  %5248 = icmp slt i32 %5243, 10
  %5249 = or i1 %5247, %5248
  br i1 %5249, label %originalBB1374, label %originalBB1374alteredBB

originalBB1374:                                   ; preds = %5241, %originalBB1374alteredBB
  %5250 = load i8, i8* %35, align 1, !dbg !4431
  %5251 = trunc i8 %5250 to i1, !dbg !4431
  %5252 = load i32, i32* @x.63
  %5253 = load i32, i32* @y.64
  %5254 = sub i32 %5252, 1
  %5255 = mul i32 %5252, %5254
  %5256 = urem i32 %5255, 2
  %5257 = icmp eq i32 %5256, 0
  %5258 = icmp slt i32 %5253, 10
  %5259 = or i1 %5257, %5258
  br i1 %5259, label %originalBBpart21376, label %originalBB1374alteredBB

originalBBpart21376:                              ; preds = %originalBB1374
  br i1 %5251, label %5396, label %5260, !dbg !4432

5260:                                             ; preds = %originalBBpart21376
  %5261 = load i32, i32* @x.63
  %5262 = load i32, i32* @y.64
  %5263 = sub i32 %5261, 1
  %5264 = mul i32 %5261, %5263
  %5265 = urem i32 %5264, 2
  %5266 = icmp eq i32 %5265, 0
  %5267 = icmp slt i32 %5262, 10
  %5268 = or i1 %5266, %5267
  br i1 %5268, label %originalBB1378, label %originalBB1378alteredBB

originalBB1378:                                   ; preds = %5260, %originalBB1378alteredBB
  %5269 = load i32, i32* @x.63
  %5270 = load i32, i32* @y.64
  %5271 = sub i32 %5269, 1
  %5272 = mul i32 %5269, %5271
  %5273 = urem i32 %5272, 2
  %5274 = icmp eq i32 %5273, 0
  %5275 = icmp slt i32 %5270, 10
  %5276 = or i1 %5274, %5275
  br i1 %5276, label %originalBBpart21380, label %originalBB1378alteredBB

originalBBpart21380:                              ; preds = %originalBB1378
  br label %5277, !dbg !4433

5277:                                             ; preds = %originalBBpart21415, %originalBBpart21380
  %5278 = load i32, i32* @x.63
  %5279 = load i32, i32* @y.64
  %5280 = sub i32 %5278, 1
  %5281 = mul i32 %5278, %5280
  %5282 = urem i32 %5281, 2
  %5283 = icmp eq i32 %5282, 0
  %5284 = icmp slt i32 %5279, 10
  %5285 = or i1 %5283, %5284
  br i1 %5285, label %originalBB1382, label %originalBB1382alteredBB

originalBB1382:                                   ; preds = %5277, %originalBB1382alteredBB
  %5286 = load i8*, i8** %31, align 8, !dbg !4434
  %5287 = load i8, i8* %5286, align 1, !dbg !4437
  %5288 = icmp ne i8 %5287, 0, !dbg !4438
  %5289 = load i32, i32* @x.63
  %5290 = load i32, i32* @y.64
  %5291 = sub i32 %5289, 1
  %5292 = mul i32 %5289, %5291
  %5293 = urem i32 %5292, 2
  %5294 = icmp eq i32 %5293, 0
  %5295 = icmp slt i32 %5290, 10
  %5296 = or i1 %5294, %5295
  br i1 %5296, label %originalBBpart21384, label %originalBB1382alteredBB

originalBBpart21384:                              ; preds = %originalBB1382
  br i1 %5288, label %5297, label %5379, !dbg !4438

5297:                                             ; preds = %originalBBpart21384
  %5298 = load i32, i32* @x.63
  %5299 = load i32, i32* @y.64
  %5300 = sub i32 %5298, 1
  %5301 = mul i32 %5298, %5300
  %5302 = urem i32 %5301, 2
  %5303 = icmp eq i32 %5302, 0
  %5304 = icmp slt i32 %5299, 10
  %5305 = or i1 %5303, %5304
  br i1 %5305, label %originalBB1386, label %originalBB1386alteredBB

originalBB1386:                                   ; preds = %5297, %originalBB1386alteredBB
  %5306 = load i32, i32* @x.63
  %5307 = load i32, i32* @y.64
  %5308 = sub i32 %5306, 1
  %5309 = mul i32 %5306, %5308
  %5310 = urem i32 %5309, 2
  %5311 = icmp eq i32 %5310, 0
  %5312 = icmp slt i32 %5307, 10
  %5313 = or i1 %5311, %5312
  br i1 %5313, label %originalBBpart21388, label %originalBB1386alteredBB

originalBBpart21388:                              ; preds = %originalBB1386
  br label %5314, !dbg !4439

5314:                                             ; preds = %originalBBpart21388
  %5315 = load i32, i32* @x.63
  %5316 = load i32, i32* @y.64
  %5317 = sub i32 %5315, 1
  %5318 = mul i32 %5315, %5317
  %5319 = urem i32 %5318, 2
  %5320 = icmp eq i32 %5319, 0
  %5321 = icmp slt i32 %5316, 10
  %5322 = or i1 %5320, %5321
  br i1 %5322, label %originalBB1390, label %originalBB1390alteredBB

originalBB1390:                                   ; preds = %5314, %originalBB1390alteredBB
  %5323 = load i64, i64* %29, align 8, !dbg !4440
  %5324 = load i64, i64* %20, align 8, !dbg !4440
  %5325 = icmp ult i64 %5323, %5324, !dbg !4440
  %5326 = load i32, i32* @x.63
  %5327 = load i32, i32* @y.64
  %5328 = sub i32 %5326, 1
  %5329 = mul i32 %5326, %5328
  %5330 = urem i32 %5329, 2
  %5331 = icmp eq i32 %5330, 0
  %5332 = icmp slt i32 %5327, 10
  %5333 = or i1 %5331, %5332
  br i1 %5333, label %originalBBpart21392, label %originalBB1390alteredBB

originalBBpart21392:                              ; preds = %originalBB1390
  br i1 %5325, label %5334, label %5340, !dbg !4443

5334:                                             ; preds = %originalBBpart21392
  %5335 = load i8*, i8** %31, align 8, !dbg !4440
  %5336 = load i8, i8* %5335, align 1, !dbg !4440
  %5337 = load i8*, i8** %19, align 8, !dbg !4440
  %5338 = load i64, i64* %29, align 8, !dbg !4440
  %5339 = getelementptr inbounds i8, i8* %5337, i64 %5338, !dbg !4440
  store i8 %5336, i8* %5339, align 1, !dbg !4440
  br label %5340, !dbg !4440

5340:                                             ; preds = %5334, %originalBBpart21392
  %5341 = load i32, i32* @x.63
  %5342 = load i32, i32* @y.64
  %5343 = sub i32 %5341, 1
  %5344 = mul i32 %5341, %5343
  %5345 = urem i32 %5344, 2
  %5346 = icmp eq i32 %5345, 0
  %5347 = icmp slt i32 %5342, 10
  %5348 = or i1 %5346, %5347
  br i1 %5348, label %originalBB1394, label %originalBB1394alteredBB

originalBB1394:                                   ; preds = %5340, %originalBB1394alteredBB
  %5349 = load i64, i64* %29, align 8, !dbg !4443
  %5350 = add i64 %5349, 1, !dbg !4443
  store i64 %5350, i64* %29, align 8, !dbg !4443
  %5351 = load i32, i32* @x.63
  %5352 = load i32, i32* @y.64
  %5353 = sub i32 %5351, 1
  %5354 = mul i32 %5351, %5353
  %5355 = urem i32 %5354, 2
  %5356 = icmp eq i32 %5355, 0
  %5357 = icmp slt i32 %5352, 10
  %5358 = or i1 %5356, %5357
  br i1 %5358, label %originalBBpart21411, label %originalBB1394alteredBB

originalBBpart21411:                              ; preds = %originalBB1394
  br label %5359, !dbg !4443

5359:                                             ; preds = %originalBBpart21411
  br label %5360, !dbg !4443

5360:                                             ; preds = %5359
  %5361 = load i32, i32* @x.63
  %5362 = load i32, i32* @y.64
  %5363 = sub i32 %5361, 1
  %5364 = mul i32 %5361, %5363
  %5365 = urem i32 %5364, 2
  %5366 = icmp eq i32 %5365, 0
  %5367 = icmp slt i32 %5362, 10
  %5368 = or i1 %5366, %5367
  br i1 %5368, label %originalBB1413, label %originalBB1413alteredBB

originalBB1413:                                   ; preds = %5360, %originalBB1413alteredBB
  %5369 = load i8*, i8** %31, align 8, !dbg !4444
  %5370 = getelementptr inbounds i8, i8* %5369, i32 1, !dbg !4444
  store i8* %5370, i8** %31, align 8, !dbg !4444
  %5371 = load i32, i32* @x.63
  %5372 = load i32, i32* @y.64
  %5373 = sub i32 %5371, 1
  %5374 = mul i32 %5371, %5373
  %5375 = urem i32 %5374, 2
  %5376 = icmp eq i32 %5375, 0
  %5377 = icmp slt i32 %5372, 10
  %5378 = or i1 %5376, %5377
  br i1 %5378, label %originalBBpart21415, label %originalBB1413alteredBB

originalBBpart21415:                              ; preds = %originalBB1413
  br label %5277, !dbg !4445, !llvm.loop !4446

5379:                                             ; preds = %originalBBpart21384
  %5380 = load i32, i32* @x.63
  %5381 = load i32, i32* @y.64
  %5382 = sub i32 %5380, 1
  %5383 = mul i32 %5380, %5382
  %5384 = urem i32 %5383, 2
  %5385 = icmp eq i32 %5384, 0
  %5386 = icmp slt i32 %5381, 10
  %5387 = or i1 %5385, %5386
  br i1 %5387, label %originalBB1417, label %originalBB1417alteredBB

originalBB1417:                                   ; preds = %5379, %originalBB1417alteredBB
  %5388 = load i32, i32* @x.63
  %5389 = load i32, i32* @y.64
  %5390 = sub i32 %5388, 1
  %5391 = mul i32 %5388, %5390
  %5392 = urem i32 %5391, 2
  %5393 = icmp eq i32 %5392, 0
  %5394 = icmp slt i32 %5389, 10
  %5395 = or i1 %5393, %5394
  br i1 %5395, label %originalBBpart21419, label %originalBB1417alteredBB

originalBBpart21419:                              ; preds = %originalBB1417
  br label %5396, !dbg !4447

5396:                                             ; preds = %originalBBpart21419, %originalBBpart21376, %originalBBpart21372
  %5397 = load i64, i64* %29, align 8, !dbg !4448
  %5398 = load i64, i64* %20, align 8, !dbg !4450
  %5399 = icmp ult i64 %5397, %5398, !dbg !4451
  br i1 %5399, label %5400, label %5404, !dbg !4452

5400:                                             ; preds = %5396
  %5401 = load i8*, i8** %19, align 8, !dbg !4453
  %5402 = load i64, i64* %29, align 8, !dbg !4454
  %5403 = getelementptr inbounds i8, i8* %5401, i64 %5402, !dbg !4453
  store i8 0, i8* %5403, align 1, !dbg !4455
  br label %5404, !dbg !4453

5404:                                             ; preds = %5400, %5396
  %5405 = load i32, i32* @x.63
  %5406 = load i32, i32* @y.64
  %5407 = sub i32 %5405, 1
  %5408 = mul i32 %5405, %5407
  %5409 = urem i32 %5408, 2
  %5410 = icmp eq i32 %5409, 0
  %5411 = icmp slt i32 %5406, 10
  %5412 = or i1 %5410, %5411
  br i1 %5412, label %originalBB1421, label %originalBB1421alteredBB

originalBB1421:                                   ; preds = %5404, %originalBB1421alteredBB
  %5413 = load i64, i64* %29, align 8, !dbg !4456
  store i64 %5413, i64* %18, align 8, !dbg !4457
  %5414 = load i32, i32* @x.63
  %5415 = load i32, i32* @y.64
  %5416 = sub i32 %5414, 1
  %5417 = mul i32 %5414, %5416
  %5418 = urem i32 %5417, 2
  %5419 = icmp eq i32 %5418, 0
  %5420 = icmp slt i32 %5415, 10
  %5421 = or i1 %5419, %5420
  br i1 %5421, label %originalBBpart21423, label %originalBB1421alteredBB

originalBBpart21423:                              ; preds = %originalBB1421
  br label %5488, !dbg !4457

5422:                                             ; preds = %5061, %originalBBpart21178, %originalBBpart2919, %originalBBpart2843, %originalBBpart2656, %originalBBpart2644, %originalBBpart2604, %originalBBpart2572, %1703, %originalBBpart2408, %originalBBpart2219, %originalBBpart2207
  call void @llvm.dbg.label(metadata !4458), !dbg !4459
  %5423 = load i32, i32* @x.63
  %5424 = load i32, i32* @y.64
  %5425 = sub i32 %5423, 1
  %5426 = mul i32 %5423, %5425
  %5427 = urem i32 %5426, 2
  %5428 = icmp eq i32 %5427, 0
  %5429 = icmp slt i32 %5424, 10
  %5430 = or i1 %5428, %5429
  br i1 %5430, label %originalBB1425, label %originalBB1425alteredBB

originalBB1425:                                   ; preds = %5422, %originalBB1425alteredBB
  %5431 = load i32, i32* %23, align 4, !dbg !4460
  %5432 = icmp eq i32 %5431, 2, !dbg !4462
  %5433 = load i32, i32* @x.63
  %5434 = load i32, i32* @y.64
  %5435 = sub i32 %5433, 1
  %5436 = mul i32 %5433, %5435
  %5437 = urem i32 %5436, 2
  %5438 = icmp eq i32 %5437, 0
  %5439 = icmp slt i32 %5434, 10
  %5440 = or i1 %5438, %5439
  br i1 %5440, label %originalBBpart21427, label %originalBB1425alteredBB

originalBBpart21427:                              ; preds = %originalBB1425
  br i1 %5432, label %5441, label %5461, !dbg !4463

5441:                                             ; preds = %originalBBpart21427
  %5442 = load i32, i32* @x.63
  %5443 = load i32, i32* @y.64
  %5444 = sub i32 %5442, 1
  %5445 = mul i32 %5442, %5444
  %5446 = urem i32 %5445, 2
  %5447 = icmp eq i32 %5446, 0
  %5448 = icmp slt i32 %5443, 10
  %5449 = or i1 %5447, %5448
  br i1 %5449, label %originalBB1429, label %originalBB1429alteredBB

originalBB1429:                                   ; preds = %5441, %originalBB1429alteredBB
  %5450 = load i8, i8* %33, align 1, !dbg !4464
  %5451 = trunc i8 %5450 to i1, !dbg !4464
  %5452 = load i32, i32* @x.63
  %5453 = load i32, i32* @y.64
  %5454 = sub i32 %5452, 1
  %5455 = mul i32 %5452, %5454
  %5456 = urem i32 %5455, 2
  %5457 = icmp eq i32 %5456, 0
  %5458 = icmp slt i32 %5453, 10
  %5459 = or i1 %5457, %5458
  br i1 %5459, label %originalBBpart21431, label %originalBB1429alteredBB

originalBBpart21431:                              ; preds = %originalBB1429
  br i1 %5451, label %5460, label %5461, !dbg !4465

5460:                                             ; preds = %originalBBpart21431
  store i32 4, i32* %23, align 4, !dbg !4466
  br label %5461, !dbg !4467

5461:                                             ; preds = %5460, %originalBBpart21431, %originalBBpart21427
  %5462 = load i32, i32* @x.63
  %5463 = load i32, i32* @y.64
  %5464 = sub i32 %5462, 1
  %5465 = mul i32 %5462, %5464
  %5466 = urem i32 %5465, 2
  %5467 = icmp eq i32 %5466, 0
  %5468 = icmp slt i32 %5463, 10
  %5469 = or i1 %5467, %5468
  br i1 %5469, label %originalBB1433, label %originalBB1433alteredBB

originalBB1433:                                   ; preds = %5461, %originalBB1433alteredBB
  %5470 = load i8*, i8** %19, align 8, !dbg !4468
  %5471 = load i64, i64* %20, align 8, !dbg !4469
  %5472 = load i8*, i8** %21, align 8, !dbg !4470
  %5473 = load i64, i64* %22, align 8, !dbg !4471
  %5474 = load i32, i32* %23, align 4, !dbg !4472
  %5475 = load i32, i32* %24, align 4, !dbg !4473
  %5476 = and i32 %5475, -3, !dbg !4474
  %5477 = load i8*, i8** %26, align 8, !dbg !4475
  %5478 = load i8*, i8** %27, align 8, !dbg !4476
  %5479 = call i64 @quotearg_buffer_restyled(i8* %5470, i64 %5471, i8* %5472, i64 %5473, i32 %5474, i32 %5476, i32* null, i8* %5477, i8* %5478), !dbg !4477
  store i64 %5479, i64* %18, align 8, !dbg !4478
  %5480 = load i32, i32* @x.63
  %5481 = load i32, i32* @y.64
  %5482 = sub i32 %5480, 1
  %5483 = mul i32 %5480, %5482
  %5484 = urem i32 %5483, 2
  %5485 = icmp eq i32 %5484, 0
  %5486 = icmp slt i32 %5481, 10
  %5487 = or i1 %5485, %5486
  br i1 %5487, label %originalBBpart21449, label %originalBB1433alteredBB

originalBBpart21449:                              ; preds = %originalBB1433
  br label %5488, !dbg !4478

5488:                                             ; preds = %originalBBpart21449, %originalBBpart21423, %originalBBpart21352
  %5489 = load i32, i32* @x.63
  %5490 = load i32, i32* @y.64
  %5491 = sub i32 %5489, 1
  %5492 = mul i32 %5489, %5491
  %5493 = urem i32 %5492, 2
  %5494 = icmp eq i32 %5493, 0
  %5495 = icmp slt i32 %5490, 10
  %5496 = or i1 %5494, %5495
  br i1 %5496, label %originalBB1451, label %originalBB1451alteredBB

originalBB1451:                                   ; preds = %5488, %originalBB1451alteredBB
  %5497 = load i64, i64* %18, align 8, !dbg !4479
  %5498 = load i32, i32* @x.63
  %5499 = load i32, i32* @y.64
  %5500 = sub i32 %5498, 1
  %5501 = mul i32 %5498, %5500
  %5502 = urem i32 %5501, 2
  %5503 = icmp eq i32 %5502, 0
  %5504 = icmp slt i32 %5499, 10
  %5505 = or i1 %5503, %5504
  br i1 %5505, label %originalBBpart21453, label %originalBB1451alteredBB

originalBBpart21453:                              ; preds = %originalBB1451
  ret i64 %5497, !dbg !4479

originalBBalteredBB:                              ; preds = %originalBB, %9
  %5506 = alloca i64, align 8
  %5507 = alloca i8*, align 8
  %5508 = alloca i64, align 8
  %5509 = alloca i8*, align 8
  %5510 = alloca i64, align 8
  %5511 = alloca i32, align 4
  %5512 = alloca i32, align 4
  %5513 = alloca i32*, align 8
  %5514 = alloca i8*, align 8
  %5515 = alloca i8*, align 8
  %5516 = alloca i64, align 8
  %5517 = alloca i64, align 8
  %5518 = alloca i64, align 8
  %5519 = alloca i8*, align 8
  %5520 = alloca i64, align 8
  %5521 = alloca i8, align 1
  %5522 = alloca i8, align 1
  %5523 = alloca i8, align 1
  %5524 = alloca i8, align 1
  %5525 = alloca i8, align 1
  %5526 = alloca i8, align 1
  %5527 = alloca i8, align 1
  %5528 = alloca i8, align 1
  %5529 = alloca i8, align 1
  %5530 = alloca i8, align 1
  %5531 = alloca i8, align 1
  %5532 = alloca i64, align 8
  %5533 = alloca i8, align 1
  %5534 = alloca %struct.__mbstate_t, align 4
  %5535 = alloca i32, align 4
  %5536 = alloca i64, align 8
  %5537 = alloca i64, align 8
  %5538 = alloca i64, align 8
  store i8* %0, i8** %5507, align 8
  call void @llvm.dbg.declare(metadata i8** %5507, metadata !4480, metadata !DIExpression()), !dbg !3603
  store i64 %1, i64* %5508, align 8
  call void @llvm.dbg.declare(metadata i64* %5508, metadata !4512, metadata !DIExpression()), !dbg !3605
  store i8* %2, i8** %5509, align 8
  call void @llvm.dbg.declare(metadata i8** %5509, metadata !4513, metadata !DIExpression()), !dbg !3607
  store i64 %3, i64* %5510, align 8
  call void @llvm.dbg.declare(metadata i64* %5510, metadata !4514, metadata !DIExpression()), !dbg !3609
  store i32 %4, i32* %5511, align 4
  call void @llvm.dbg.declare(metadata i32* %5511, metadata !4515, metadata !DIExpression()), !dbg !3611
  store i32 %5, i32* %5512, align 4
  call void @llvm.dbg.declare(metadata i32* %5512, metadata !4516, metadata !DIExpression()), !dbg !3613
  store i32* %6, i32** %5513, align 8
  call void @llvm.dbg.declare(metadata i32** %5513, metadata !4517, metadata !DIExpression()), !dbg !3615
  store i8* %7, i8** %5514, align 8
  call void @llvm.dbg.declare(metadata i8** %5514, metadata !4518, metadata !DIExpression()), !dbg !3617
  store i8* %8, i8** %5515, align 8
  call void @llvm.dbg.declare(metadata i8** %5515, metadata !4519, metadata !DIExpression()), !dbg !3619
  call void @llvm.dbg.declare(metadata i64* %5516, metadata !4520, metadata !DIExpression()), !dbg !3621
  call void @llvm.dbg.declare(metadata i64* %5517, metadata !4521, metadata !DIExpression()), !dbg !3623
  store i64 0, i64* %5517, align 8, !dbg !3623
  call void @llvm.dbg.declare(metadata i64* %5518, metadata !4522, metadata !DIExpression()), !dbg !3625
  store i64 0, i64* %5518, align 8, !dbg !3625
  call void @llvm.dbg.declare(metadata i8** %5519, metadata !4523, metadata !DIExpression()), !dbg !3627
  store i8* null, i8** %5519, align 8, !dbg !3627
  call void @llvm.dbg.declare(metadata i64* %5520, metadata !4524, metadata !DIExpression()), !dbg !3629
  store i64 0, i64* %5520, align 8, !dbg !3629
  call void @llvm.dbg.declare(metadata i8* %5521, metadata !4525, metadata !DIExpression()), !dbg !3631
  store i8 0, i8* %5521, align 1, !dbg !3631
  call void @llvm.dbg.declare(metadata i8* %5522, metadata !4526, metadata !DIExpression()), !dbg !3633
  %5539 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !3634
  %5540 = icmp eq i64 %5539, 1, !dbg !3635
  %5541 = zext i1 %5540 to i8, !dbg !3633
  store i8 %5541, i8* %5522, align 1, !dbg !3633
  call void @llvm.dbg.declare(metadata i8* %5523, metadata !4527, metadata !DIExpression()), !dbg !3637
  %5542 = load i32, i32* %5512, align 4, !dbg !3638
  %_ = sub i32 %5542, 2
  %gen = mul i32 %_, 2
  %_1 = shl i32 %5542, 2
  %_2 = shl i32 %5542, 2
  %_3 = sub i32 0, %5542
  %gen4 = add i32 %_3, 2
  %_5 = shl i32 %5542, 2
  %_6 = sub i32 0, %5542
  %gen7 = add i32 %_6, 2
  %5543 = and i32 %5542, 2, !dbg !3639
  %5544 = icmp ne i32 %5543, 0, !dbg !3640
  %5545 = zext i1 %5544 to i8, !dbg !3637
  store i8 %5545, i8* %5523, align 1, !dbg !3637
  call void @llvm.dbg.declare(metadata i8* %5524, metadata !4528, metadata !DIExpression()), !dbg !3642
  store i8 0, i8* %5524, align 1, !dbg !3642
  call void @llvm.dbg.declare(metadata i8* %5525, metadata !4529, metadata !DIExpression()), !dbg !3644
  store i8 0, i8* %5525, align 1, !dbg !3644
  call void @llvm.dbg.declare(metadata i8* %5526, metadata !4530, metadata !DIExpression()), !dbg !3646
  store i8 1, i8* %5526, align 1, !dbg !3646
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %66
  %5546 = load i32, i32* %23, align 4, !dbg !3650
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %84
  store i32 5, i32* %23, align 4, !dbg !3652
  store i8 1, i8* %35, align 1, !dbg !3654
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %101
  %5547 = load i8, i8* %35, align 1, !dbg !3656
  %5548 = trunc i8 %5547 to i1, !dbg !3656
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %120
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %137
  %5549 = load i64, i64* %29, align 8, !dbg !3660
  %5550 = load i64, i64* %20, align 8, !dbg !3660
  %5551 = icmp ult i64 %5549, %5550, !dbg !3660
  br label %originalBB24

originalBB28alteredBB:                            ; preds = %originalBB28, %157
  %5552 = load i8*, i8** %19, align 8, !dbg !3660
  %5553 = load i64, i64* %29, align 8, !dbg !3660
  %5554 = getelementptr inbounds i8, i8* %5552, i64 %5553, !dbg !3660
  store i8 34, i8* %5554, align 1, !dbg !3660
  br label %originalBB28

originalBB32alteredBB:                            ; preds = %originalBB32, %180
  br label %originalBB32

originalBB36alteredBB:                            ; preds = %originalBB36, %198
  store i8 1, i8* %33, align 1, !dbg !3668
  store i8 0, i8* %35, align 1, !dbg !3669
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %215
  %5555 = load i32, i32* %23, align 4, !dbg !3671
  %5556 = icmp ne i32 %5555, 10, !dbg !3674
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %234
  %5557 = load i32, i32* %23, align 4, !dbg !3676
  %5558 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.121, i64 0, i64 0), i32 %5557), !dbg !3678
  store i8* %5558, i8** %26, align 8, !dbg !3679
  %5559 = load i32, i32* %23, align 4, !dbg !3680
  %5560 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i32 %5559), !dbg !3681
  store i8* %5560, i8** %27, align 8, !dbg !3682
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %255
  %5561 = load i8, i8* %35, align 1, !dbg !3684
  %5562 = trunc i8 %5561 to i1, !dbg !3684
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %276
  %5563 = load i8*, i8** %31, align 8, !dbg !3691
  %5564 = load i8, i8* %5563, align 1, !dbg !3693
  %5565 = icmp ne i8 %5564, 0, !dbg !3694
  br label %originalBB52

originalBB56alteredBB:                            ; preds = %originalBB56, %301
  %5566 = load i8*, i8** %31, align 8, !dbg !3696
  %5567 = load i8, i8* %5566, align 1, !dbg !3696
  %5568 = load i8*, i8** %19, align 8, !dbg !3696
  %5569 = load i64, i64* %29, align 8, !dbg !3696
  %5570 = getelementptr inbounds i8, i8* %5568, i64 %5569, !dbg !3696
  store i8 %5567, i8* %5570, align 1, !dbg !3696
  br label %originalBB56

originalBB60alteredBB:                            ; preds = %originalBB60, %323
  %5571 = load i64, i64* %29, align 8, !dbg !3699
  %_61 = shl i64 %5571, 1
  %_62 = sub i64 %5571, 1
  %gen63 = mul i64 %_62, 1
  %5572 = add i64 %5571, 1, !dbg !3699
  store i64 %5572, i64* %29, align 8, !dbg !3699
  br label %originalBB60

originalBB67alteredBB:                            ; preds = %originalBB67, %342
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %359
  %5573 = load i8*, i8** %31, align 8, !dbg !3700
  %5574 = getelementptr inbounds i8, i8* %5573, i32 1, !dbg !3700
  store i8* %5574, i8** %31, align 8, !dbg !3700
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %378
  br label %originalBB75

originalBB79alteredBB:                            ; preds = %originalBB79, %395
  store i8 1, i8* %33, align 1, !dbg !3704
  %5575 = load i8*, i8** %27, align 8, !dbg !3705
  store i8* %5575, i8** %31, align 8, !dbg !3706
  %5576 = load i8*, i8** %31, align 8, !dbg !3707
  %5577 = call i64 @strlen(i8* %5576) #13, !dbg !3708
  store i64 %5577, i64* %32, align 8, !dbg !3709
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %415
  store i8 1, i8* %33, align 1, !dbg !3711
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %432
  store i8 1, i8* %35, align 1, !dbg !3713
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %449
  %5578 = load i8, i8* %35, align 1, !dbg !3715
  %5579 = trunc i8 %5578 to i1, !dbg !3715
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %469
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %486
  store i32 2, i32* %23, align 4, !dbg !3721
  %5580 = load i8, i8* %35, align 1, !dbg !3722
  %5581 = trunc i8 %5580 to i1, !dbg !3722
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %506
  %5582 = load i64, i64* %29, align 8, !dbg !3726
  %5583 = load i64, i64* %20, align 8, !dbg !3726
  %5584 = icmp ult i64 %5582, %5583, !dbg !3726
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %526
  %5585 = load i8*, i8** %19, align 8, !dbg !3726
  %5586 = load i64, i64* %29, align 8, !dbg !3726
  %5587 = getelementptr inbounds i8, i8* %5585, i64 %5586, !dbg !3726
  store i8 39, i8* %5587, align 1, !dbg !3726
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %546
  %5588 = load i64, i64* %29, align 8, !dbg !3729
  %_112 = shl i64 %5588, 1
  %_113 = shl i64 %5588, 1
  %_114 = sub i64 0, %5588
  %gen115 = add i64 %_114, 1
  %_116 = sub i64 0, %5588
  %gen117 = add i64 %_116, 1
  %_118 = sub i64 0, %5588
  %gen119 = add i64 %_118, 1
  %_120 = sub i64 %5588, 1
  %gen121 = mul i64 %_120, 1
  %_122 = sub i64 %5588, 1
  %gen123 = mul i64 %_122, 1
  %_124 = sub i64 0, %5588
  %gen125 = add i64 %_124, 1
  %_126 = shl i64 %5588, 1
  %5589 = add i64 %5588, 1, !dbg !3729
  store i64 %5589, i64* %29, align 8, !dbg !3729
  br label %originalBB111

originalBB130alteredBB:                           ; preds = %originalBB130, %565
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %582
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), i8** %31, align 8, !dbg !3730
  store i64 1, i64* %32, align 8, !dbg !3731
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %599
  store i8 0, i8* %35, align 1, !dbg !3733
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %616
  call void @abort() #12, !dbg !3735
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %633
  store i64 0, i64* %28, align 8, !dbg !3736
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %650
  %5590 = load i64, i64* %22, align 8, !dbg !3739
  %5591 = icmp eq i64 %5590, -1, !dbg !3741
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %669
  %5592 = load i8*, i8** %21, align 8, !dbg !3742
  %5593 = load i64, i64* %28, align 8, !dbg !3743
  %5594 = getelementptr inbounds i8, i8* %5592, i64 %5593, !dbg !3742
  %5595 = load i8, i8* %5594, align 1, !dbg !3742
  %5596 = sext i8 %5595 to i32, !dbg !3742
  %5597 = icmp eq i32 %5596, 0, !dbg !3744
  %5598 = zext i1 %5597 to i32, !dbg !3744
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %693
  %5599 = load i64, i64* %28, align 8, !dbg !3745
  %5600 = load i64, i64* %22, align 8, !dbg !3746
  %5601 = icmp eq i64 %5599, %5600, !dbg !3747
  %5602 = zext i1 %5601 to i32, !dbg !3747
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %714
  %5603 = icmp ne i32 %715, 0, !dbg !3748
  %_163 = sub i1 false, %5603
  %gen164 = add i1 %_163, true
  %_165 = sub i1 false, %5603
  %gen166 = add i1 %_165, true
  %_167 = sub i1 false, %5603
  %gen168 = add i1 %_167, true
  %_169 = sub i1 false, %5603
  %gen170 = add i1 %_169, true
  %_171 = sub i1 false, %5603
  %gen172 = add i1 %_171, true
  %_173 = shl i1 %5603, true
  %_174 = sub i1 false, %5603
  %gen175 = add i1 %_174, true
  %_176 = sub i1 false, %5603
  %gen177 = add i1 %_176, true
  %5604 = xor i1 %5603, true, !dbg !3748
  br label %originalBB162

originalBB181alteredBB:                           ; preds = %originalBB181, %737
  %5605 = load i32, i32* %23, align 4, !dbg !3764
  %5606 = icmp ne i32 %5605, 2, !dbg !3765
  br label %originalBB181

originalBB185alteredBB:                           ; preds = %originalBB185, %759
  %5607 = load i64, i64* %28, align 8, !dbg !3769
  %5608 = load i64, i64* %32, align 8, !dbg !3770
  %5609 = add i64 %5607, %5608, !dbg !3771
  %5610 = load i64, i64* %22, align 8, !dbg !3772
  %5611 = icmp eq i64 %5610, -1, !dbg !3773
  br label %originalBB185

originalBB189alteredBB:                           ; preds = %originalBB189, %781
  %5612 = load i64, i64* %32, align 8, !dbg !3775
  %5613 = icmp ult i64 1, %5612, !dbg !3776
  br label %originalBB189

originalBB193alteredBB:                           ; preds = %originalBB193, %800
  %5614 = load i8*, i8** %21, align 8, !dbg !3777
  %5615 = call i64 @strlen(i8* %5614) #13, !dbg !3778
  store i64 %5615, i64* %22, align 8, !dbg !3779
  br label %originalBB193

originalBB197alteredBB:                           ; preds = %originalBB197, %821
  %5616 = icmp ule i64 %770, %822, !dbg !3781
  br label %originalBB197

originalBB201alteredBB:                           ; preds = %originalBB201, %848
  %5617 = load i8, i8* %35, align 1, !dbg !3791
  %5618 = trunc i8 %5617 to i1, !dbg !3791
  br label %originalBB201

originalBB205alteredBB:                           ; preds = %originalBB205, %867
  br label %originalBB205

originalBB209alteredBB:                           ; preds = %originalBB209, %895
  br label %originalBB209

originalBB213alteredBB:                           ; preds = %originalBB213, %912
  %5619 = load i8, i8* %35, align 1, !dbg !3809
  %5620 = trunc i8 %5619 to i1, !dbg !3809
  br label %originalBB213

originalBB217alteredBB:                           ; preds = %originalBB217, %931
  br label %originalBB217

originalBB221alteredBB:                           ; preds = %originalBB221, %948
  store i8 1, i8* %42, align 1, !dbg !3812
  %5621 = load i32, i32* %23, align 4, !dbg !3813
  %5622 = icmp eq i32 %5621, 2, !dbg !3813
  br label %originalBB221

originalBB225alteredBB:                           ; preds = %originalBB225, %970
  br label %originalBB225

originalBB229alteredBB:                           ; preds = %originalBB229, %991
  %5623 = load i8*, i8** %19, align 8, !dbg !3817
  %5624 = load i64, i64* %29, align 8, !dbg !3817
  %5625 = getelementptr inbounds i8, i8* %5623, i64 %5624, !dbg !3817
  store i8 39, i8* %5625, align 1, !dbg !3817
  br label %originalBB229

originalBB233alteredBB:                           ; preds = %originalBB233, %1011
  %5626 = load i64, i64* %29, align 8, !dbg !3820
  %_234 = sub i64 0, %5626
  %gen235 = add i64 %_234, 1
  %_236 = shl i64 %5626, 1
  %_237 = shl i64 %5626, 1
  %5627 = add i64 %5626, 1, !dbg !3820
  store i64 %5627, i64* %29, align 8, !dbg !3820
  br label %originalBB233

originalBB241alteredBB:                           ; preds = %originalBB241, %1030
  br label %originalBB241

originalBB245alteredBB:                           ; preds = %originalBB245, %1047
  %5628 = load i64, i64* %29, align 8, !dbg !3821
  %5629 = load i64, i64* %20, align 8, !dbg !3821
  %5630 = icmp ult i64 %5628, %5629, !dbg !3821
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %1067
  %5631 = load i8*, i8** %19, align 8, !dbg !3821
  %5632 = load i64, i64* %29, align 8, !dbg !3821
  %5633 = getelementptr inbounds i8, i8* %5631, i64 %5632, !dbg !3821
  store i8 36, i8* %5633, align 1, !dbg !3821
  br label %originalBB249

originalBB253alteredBB:                           ; preds = %originalBB253, %1087
  %5634 = load i64, i64* %29, align 8, !dbg !3824
  %_254 = sub i64 0, %5634
  %gen255 = add i64 %_254, 1
  %_256 = shl i64 %5634, 1
  %_257 = sub i64 0, %5634
  %gen258 = add i64 %_257, 1
  %_259 = shl i64 %5634, 1
  %5635 = add i64 %5634, 1, !dbg !3824
  store i64 %5635, i64* %29, align 8, !dbg !3824
  br label %originalBB253

originalBB263alteredBB:                           ; preds = %originalBB263, %1107
  %5636 = load i64, i64* %29, align 8, !dbg !3825
  %5637 = load i64, i64* %20, align 8, !dbg !3825
  %5638 = icmp ult i64 %5636, %5637, !dbg !3825
  br label %originalBB263

originalBB267alteredBB:                           ; preds = %originalBB267, %1127
  %5639 = load i8*, i8** %19, align 8, !dbg !3825
  %5640 = load i64, i64* %29, align 8, !dbg !3825
  %5641 = getelementptr inbounds i8, i8* %5639, i64 %5640, !dbg !3825
  store i8 39, i8* %5641, align 1, !dbg !3825
  br label %originalBB267

originalBB271alteredBB:                           ; preds = %originalBB271, %1147
  %5642 = load i64, i64* %29, align 8, !dbg !3828
  %_272 = sub i64 0, %5642
  %gen273 = add i64 %_272, 1
  %5643 = add i64 %5642, 1, !dbg !3828
  store i64 %5643, i64* %29, align 8, !dbg !3828
  br label %originalBB271

originalBB278alteredBB:                           ; preds = %originalBB278, %1166
  store i8 1, i8* %36, align 1, !dbg !3815
  br label %originalBB278

originalBB282alteredBB:                           ; preds = %originalBB282, %1183
  br label %originalBB282

originalBB286alteredBB:                           ; preds = %originalBB286, %1204
  %5644 = load i8*, i8** %19, align 8, !dbg !3829
  %5645 = load i64, i64* %29, align 8, !dbg !3829
  %5646 = getelementptr inbounds i8, i8* %5644, i64 %5645, !dbg !3829
  store i8 92, i8* %5646, align 1, !dbg !3829
  br label %originalBB286

originalBB290alteredBB:                           ; preds = %originalBB290, %1224
  %5647 = load i64, i64* %29, align 8, !dbg !3832
  %_291 = shl i64 %5647, 1
  %_292 = sub i64 %5647, 1
  %gen293 = mul i64 %_292, 1
  %_294 = sub i64 %5647, 1
  %gen295 = mul i64 %_294, 1
  %5648 = add i64 %5647, 1, !dbg !3832
  store i64 %5648, i64* %29, align 8, !dbg !3832
  br label %originalBB290

originalBB299alteredBB:                           ; preds = %originalBB299, %1243
  br label %originalBB299

originalBB303alteredBB:                           ; preds = %originalBB303, %1260
  %5649 = load i32, i32* %23, align 4, !dbg !3833
  %5650 = icmp ne i32 %5649, 2, !dbg !3835
  br label %originalBB303

originalBB307alteredBB:                           ; preds = %originalBB307, %1284
  %5651 = load i8*, i8** %21, align 8, !dbg !3842
  %5652 = load i64, i64* %28, align 8, !dbg !3843
  %_308 = sub i64 0, %5652
  %gen309 = add i64 %_308, 1
  %_310 = sub i64 %5652, 1
  %gen311 = mul i64 %_310, 1
  %_312 = sub i64 %5652, 1
  %gen313 = mul i64 %_312, 1
  %_314 = sub i64 0, %5652
  %gen315 = add i64 %_314, 1
  %5653 = add i64 %5652, 1, !dbg !3844
  %5654 = getelementptr inbounds i8, i8* %5651, i64 %5653, !dbg !3842
  %5655 = load i8, i8* %5654, align 1, !dbg !3842
  %5656 = sext i8 %5655 to i32, !dbg !3842
  %5657 = icmp sle i32 48, %5656, !dbg !3845
  br label %originalBB307

originalBB319alteredBB:                           ; preds = %originalBB319, %1308
  %5658 = load i8*, i8** %21, align 8, !dbg !3847
  %5659 = load i64, i64* %28, align 8, !dbg !3848
  %_320 = sub i64 %5659, 1
  %gen321 = mul i64 %_320, 1
  %_322 = sub i64 0, %5659
  %gen323 = add i64 %_322, 1
  %_324 = shl i64 %5659, 1
  %_325 = sub i64 %5659, 1
  %gen326 = mul i64 %_325, 1
  %_327 = shl i64 %5659, 1
  %5660 = add i64 %5659, 1, !dbg !3849
  %5661 = getelementptr inbounds i8, i8* %5658, i64 %5660, !dbg !3847
  %5662 = load i8, i8* %5661, align 1, !dbg !3847
  %5663 = sext i8 %5662 to i32, !dbg !3847
  %5664 = icmp sle i32 %5663, 57, !dbg !3850
  br label %originalBB319

originalBB331alteredBB:                           ; preds = %originalBB331, %1332
  br label %originalBB331

originalBB335alteredBB:                           ; preds = %originalBB335, %1349
  %5665 = load i64, i64* %29, align 8, !dbg !3854
  %5666 = load i64, i64* %20, align 8, !dbg !3854
  %5667 = icmp ult i64 %5665, %5666, !dbg !3854
  br label %originalBB335

originalBB339alteredBB:                           ; preds = %originalBB339, %1369
  %5668 = load i8*, i8** %19, align 8, !dbg !3854
  %5669 = load i64, i64* %29, align 8, !dbg !3854
  %5670 = getelementptr inbounds i8, i8* %5668, i64 %5669, !dbg !3854
  store i8 48, i8* %5670, align 1, !dbg !3854
  br label %originalBB339

originalBB343alteredBB:                           ; preds = %originalBB343, %1389
  %5671 = load i64, i64* %29, align 8, !dbg !3857
  %_344 = sub i64 0, %5671
  %gen345 = add i64 %_344, 1
  %_346 = shl i64 %5671, 1
  %5672 = add i64 %5671, 1, !dbg !3857
  store i64 %5672, i64* %29, align 8, !dbg !3857
  br label %originalBB343

originalBB350alteredBB:                           ; preds = %originalBB350, %1409
  %5673 = load i64, i64* %29, align 8, !dbg !3859
  %5674 = load i64, i64* %20, align 8, !dbg !3859
  %5675 = icmp ult i64 %5673, %5674, !dbg !3859
  br label %originalBB350

originalBB354alteredBB:                           ; preds = %originalBB354, %1429
  %5676 = load i8*, i8** %19, align 8, !dbg !3859
  %5677 = load i64, i64* %29, align 8, !dbg !3859
  %5678 = getelementptr inbounds i8, i8* %5676, i64 %5677, !dbg !3859
  store i8 48, i8* %5678, align 1, !dbg !3859
  br label %originalBB354

originalBB358alteredBB:                           ; preds = %originalBB358, %1449
  %5679 = load i64, i64* %29, align 8, !dbg !3862
  %_359 = sub i64 0, %5679
  %gen360 = add i64 %_359, 1
  %_361 = sub i64 %5679, 1
  %gen362 = mul i64 %_361, 1
  %_363 = sub i64 %5679, 1
  %gen364 = mul i64 %_363, 1
  %_365 = sub i64 0, %5679
  %gen366 = add i64 %_365, 1
  %5680 = add i64 %5679, 1, !dbg !3862
  store i64 %5680, i64* %29, align 8, !dbg !3862
  br label %originalBB358

originalBB370alteredBB:                           ; preds = %originalBB370, %1468
  br label %originalBB370

originalBB374alteredBB:                           ; preds = %originalBB374, %1485
  store i8 48, i8* %39, align 1, !dbg !3864
  br label %originalBB374

originalBB378alteredBB:                           ; preds = %originalBB378, %1502
  %5681 = load i32, i32* %24, align 4, !dbg !3866
  %_379 = sub i32 %5681, 1
  %gen380 = mul i32 %_379, 1
  %_381 = shl i32 %5681, 1
  %_382 = shl i32 %5681, 1
  %_383 = sub i32 0, %5681
  %gen384 = add i32 %_383, 1
  %_385 = sub i32 0, %5681
  %gen386 = add i32 %_385, 1
  %5682 = and i32 %5681, 1, !dbg !3868
  %5683 = icmp ne i32 %5682, 0, !dbg !3868
  br label %originalBB378

originalBB390alteredBB:                           ; preds = %originalBB390, %1523
  br label %originalBB390

originalBB394alteredBB:                           ; preds = %originalBB394, %1540
  br label %originalBB394

originalBB398alteredBB:                           ; preds = %originalBB398, %1557
  %5684 = load i32, i32* %23, align 4, !dbg !3872
  br label %originalBB398

originalBB402alteredBB:                           ; preds = %originalBB402, %1575
  %5685 = load i8, i8* %35, align 1, !dbg !3874
  %5686 = trunc i8 %5685 to i1, !dbg !3874
  br label %originalBB402

originalBB406alteredBB:                           ; preds = %originalBB406, %1594
  br label %originalBB406

originalBB410alteredBB:                           ; preds = %originalBB410, %1612
  %5687 = load i32, i32* %24, align 4, !dbg !3880
  %_411 = sub i32 %5687, 4
  %gen412 = mul i32 %_411, 4
  %_413 = sub i32 %5687, 4
  %gen414 = mul i32 %_413, 4
  %_415 = shl i32 %5687, 4
  %_416 = sub i32 0, %5687
  %gen417 = add i32 %_416, 4
  %5688 = and i32 %5687, 4, !dbg !3882
  %5689 = icmp ne i32 %5688, 0, !dbg !3882
  br label %originalBB410

originalBB421alteredBB:                           ; preds = %originalBB421, %1632
  %5690 = load i64, i64* %28, align 8, !dbg !3884
  %_422 = sub i64 %5690, 2
  %gen423 = mul i64 %_422, 2
  %_424 = sub i64 0, %5690
  %gen425 = add i64 %_424, 2
  %_426 = sub i64 0, %5690
  %gen427 = add i64 %_426, 2
  %_428 = sub i64 %5690, 2
  %gen429 = mul i64 %_428, 2
  %_430 = sub i64 %5690, 2
  %gen431 = mul i64 %_430, 2
  %_432 = shl i64 %5690, 2
  %5691 = add i64 %5690, 2, !dbg !3885
  %5692 = load i64, i64* %22, align 8, !dbg !3886
  %5693 = icmp ult i64 %5691, %5692, !dbg !3887
  br label %originalBB421

originalBB436alteredBB:                           ; preds = %originalBB436, %1661
  %5694 = load i8*, i8** %21, align 8, !dbg !3894
  %5695 = load i64, i64* %28, align 8, !dbg !3895
  %_437 = sub i64 0, %5695
  %gen438 = add i64 %_437, 2
  %5696 = add i64 %5695, 2, !dbg !3896
  %5697 = getelementptr inbounds i8, i8* %5694, i64 %5696, !dbg !3894
  %5698 = load i8, i8* %5697, align 1, !dbg !3894
  %5699 = sext i8 %5698 to i32, !dbg !3894
  br label %originalBB436

originalBB442alteredBB:                           ; preds = %originalBB442, %1684
  %5700 = load i8, i8* %35, align 1, !dbg !3898
  %5701 = trunc i8 %5700 to i1, !dbg !3898
  br label %originalBB442

originalBB446alteredBB:                           ; preds = %originalBB446, %1704
  %5702 = load i8*, i8** %21, align 8, !dbg !3903
  %5703 = load i64, i64* %28, align 8, !dbg !3904
  %_447 = shl i64 %5703, 2
  %_448 = shl i64 %5703, 2
  %_449 = shl i64 %5703, 2
  %_450 = sub i64 0, %5703
  %gen451 = add i64 %_450, 2
  %_452 = sub i64 %5703, 2
  %gen453 = mul i64 %_452, 2
  %_454 = shl i64 %5703, 2
  %_455 = sub i64 0, %5703
  %gen456 = add i64 %_455, 2
  %5704 = add i64 %5703, 2, !dbg !3905
  %5705 = getelementptr inbounds i8, i8* %5702, i64 %5704, !dbg !3903
  %5706 = load i8, i8* %5705, align 1, !dbg !3903
  store i8 %5706, i8* %39, align 1, !dbg !3906
  %5707 = load i64, i64* %28, align 8, !dbg !3907
  %_457 = sub i64 0, %5707
  %gen458 = add i64 %_457, 2
  %_459 = sub i64 %5707, 2
  %gen460 = mul i64 %_459, 2
  %_461 = shl i64 %5707, 2
  %_462 = shl i64 %5707, 2
  %_463 = shl i64 %5707, 2
  %5708 = add i64 %5707, 2, !dbg !3907
  store i64 %5708, i64* %28, align 8, !dbg !3907
  br label %originalBB446

originalBB467alteredBB:                           ; preds = %originalBB467, %1728
  %5709 = load i64, i64* %29, align 8, !dbg !3909
  %5710 = load i64, i64* %20, align 8, !dbg !3909
  %5711 = icmp ult i64 %5709, %5710, !dbg !3909
  br label %originalBB467

originalBB471alteredBB:                           ; preds = %originalBB471, %1748
  %5712 = load i8*, i8** %19, align 8, !dbg !3909
  %5713 = load i64, i64* %29, align 8, !dbg !3909
  %5714 = getelementptr inbounds i8, i8* %5712, i64 %5713, !dbg !3909
  store i8 63, i8* %5714, align 1, !dbg !3909
  br label %originalBB471

originalBB475alteredBB:                           ; preds = %originalBB475, %1768
  %5715 = load i64, i64* %29, align 8, !dbg !3912
  %_476 = shl i64 %5715, 1
  %_477 = shl i64 %5715, 1
  %_478 = sub i64 %5715, 1
  %gen479 = mul i64 %_478, 1
  %_480 = sub i64 %5715, 1
  %gen481 = mul i64 %_480, 1
  %_482 = sub i64 %5715, 1
  %gen483 = mul i64 %_482, 1
  %5716 = add i64 %5715, 1, !dbg !3912
  store i64 %5716, i64* %29, align 8, !dbg !3912
  br label %originalBB475

originalBB487alteredBB:                           ; preds = %originalBB487, %1787
  br label %originalBB487

originalBB491alteredBB:                           ; preds = %originalBB491, %1804
  %5717 = load i64, i64* %29, align 8, !dbg !3914
  %5718 = load i64, i64* %20, align 8, !dbg !3914
  %5719 = icmp ult i64 %5717, %5718, !dbg !3914
  br label %originalBB491

originalBB495alteredBB:                           ; preds = %originalBB495, %1824
  %5720 = load i8*, i8** %19, align 8, !dbg !3914
  %5721 = load i64, i64* %29, align 8, !dbg !3914
  %5722 = getelementptr inbounds i8, i8* %5720, i64 %5721, !dbg !3914
  store i8 34, i8* %5722, align 1, !dbg !3914
  br label %originalBB495

originalBB499alteredBB:                           ; preds = %originalBB499, %1847
  br label %originalBB499

originalBB503alteredBB:                           ; preds = %originalBB503, %1864
  %5723 = load i64, i64* %29, align 8, !dbg !3919
  %5724 = load i64, i64* %20, align 8, !dbg !3919
  %5725 = icmp ult i64 %5723, %5724, !dbg !3919
  br label %originalBB503

originalBB507alteredBB:                           ; preds = %originalBB507, %1884
  %5726 = load i8*, i8** %19, align 8, !dbg !3919
  %5727 = load i64, i64* %29, align 8, !dbg !3919
  %5728 = getelementptr inbounds i8, i8* %5726, i64 %5727, !dbg !3919
  store i8 34, i8* %5728, align 1, !dbg !3919
  br label %originalBB507

originalBB511alteredBB:                           ; preds = %originalBB511, %1907
  br label %originalBB511

originalBB515alteredBB:                           ; preds = %originalBB515, %1924
  %5729 = load i64, i64* %29, align 8, !dbg !3924
  %5730 = load i64, i64* %20, align 8, !dbg !3924
  %5731 = icmp ult i64 %5729, %5730, !dbg !3924
  br label %originalBB515

originalBB519alteredBB:                           ; preds = %originalBB519, %1944
  %5732 = load i8*, i8** %19, align 8, !dbg !3924
  %5733 = load i64, i64* %29, align 8, !dbg !3924
  %5734 = getelementptr inbounds i8, i8* %5732, i64 %5733, !dbg !3924
  store i8 63, i8* %5734, align 1, !dbg !3924
  br label %originalBB519

originalBB523alteredBB:                           ; preds = %originalBB523, %1964
  %5735 = load i64, i64* %29, align 8, !dbg !3927
  %_524 = shl i64 %5735, 1
  %_525 = shl i64 %5735, 1
  %_526 = shl i64 %5735, 1
  %5736 = add i64 %5735, 1, !dbg !3927
  store i64 %5736, i64* %29, align 8, !dbg !3927
  br label %originalBB523

originalBB530alteredBB:                           ; preds = %originalBB530, %1983
  br label %originalBB530

originalBB534alteredBB:                           ; preds = %originalBB534, %2000
  br label %originalBB534

originalBB538alteredBB:                           ; preds = %originalBB538, %2019
  br label %originalBB538

originalBB542alteredBB:                           ; preds = %originalBB542, %2037
  store i8 97, i8* %40, align 1, !dbg !3934
  br label %originalBB542

originalBB546alteredBB:                           ; preds = %originalBB546, %2054
  store i8 98, i8* %40, align 1, !dbg !3936
  br label %originalBB546

originalBB550alteredBB:                           ; preds = %originalBB550, %2071
  store i8 102, i8* %40, align 1, !dbg !3938
  br label %originalBB550

originalBB554alteredBB:                           ; preds = %originalBB554, %2088
  store i8 110, i8* %40, align 1, !dbg !3940
  br label %originalBB554

originalBB558alteredBB:                           ; preds = %originalBB558, %2106
  store i8 116, i8* %40, align 1, !dbg !3944
  br label %originalBB558

originalBB562alteredBB:                           ; preds = %originalBB562, %2123
  store i8 118, i8* %40, align 1, !dbg !3946
  br label %originalBB562

originalBB566alteredBB:                           ; preds = %originalBB566, %2144
  %5737 = load i8, i8* %35, align 1, !dbg !3954
  %5738 = trunc i8 %5737 to i1, !dbg !3954
  br label %originalBB566

originalBB570alteredBB:                           ; preds = %originalBB570, %2163
  br label %originalBB570

originalBB574alteredBB:                           ; preds = %originalBB574, %2180
  br label %originalBB574

originalBB578alteredBB:                           ; preds = %originalBB578, %2197
  %5739 = load i8, i8* %33, align 1, !dbg !3960
  %5740 = trunc i8 %5739 to i1, !dbg !3960
  br label %originalBB578

originalBB582alteredBB:                           ; preds = %originalBB582, %2216
  %5741 = load i8, i8* %35, align 1, !dbg !3963
  %5742 = trunc i8 %5741 to i1, !dbg !3963
  br label %originalBB582

originalBB586alteredBB:                           ; preds = %originalBB586, %2235
  %5743 = load i64, i64* %32, align 8, !dbg !3965
  %5744 = icmp ne i64 %5743, 0, !dbg !3965
  br label %originalBB586

originalBB590alteredBB:                           ; preds = %originalBB590, %2254
  br label %originalBB590

originalBB594alteredBB:                           ; preds = %originalBB594, %2271
  br label %originalBB594

originalBB598alteredBB:                           ; preds = %originalBB598, %2291
  %5745 = load i8, i8* %35, align 1, !dbg !3974
  %5746 = trunc i8 %5745 to i1, !dbg !3974
  br label %originalBB598

originalBB602alteredBB:                           ; preds = %originalBB602, %2310
  br label %originalBB602

originalBB606alteredBB:                           ; preds = %originalBB606, %2327
  br label %originalBB606

originalBB610alteredBB:                           ; preds = %originalBB610, %2347
  %5747 = load i8, i8* %40, align 1, !dbg !3982
  store i8 %5747, i8* %39, align 1, !dbg !3984
  br label %originalBB610

originalBB614alteredBB:                           ; preds = %originalBB614, %2365
  br label %originalBB614

originalBB618alteredBB:                           ; preds = %originalBB618, %2385
  %5748 = load i8*, i8** %21, align 8, !dbg !3991
  %5749 = getelementptr inbounds i8, i8* %5748, i64 1, !dbg !3991
  %5750 = load i8, i8* %5749, align 1, !dbg !3991
  %5751 = sext i8 %5750 to i32, !dbg !3991
  %5752 = icmp eq i32 %5751, 0, !dbg !3992
  br label %originalBB618

originalBB622alteredBB:                           ; preds = %originalBB622, %2407
  %5753 = load i64, i64* %22, align 8, !dbg !3993
  %5754 = icmp eq i64 %5753, 1, !dbg !3994
  br label %originalBB622

originalBB626alteredBB:                           ; preds = %originalBB626, %2427
  br label %originalBB626

originalBB630alteredBB:                           ; preds = %originalBB630, %2444
  %5755 = load i64, i64* %28, align 8, !dbg !3997
  %5756 = icmp ne i64 %5755, 0, !dbg !3999
  br label %originalBB630

originalBB634alteredBB:                           ; preds = %originalBB634, %2464
  br label %originalBB634

originalBB638alteredBB:                           ; preds = %originalBB638, %2485
  %5757 = load i8, i8* %35, align 1, !dbg !4009
  %5758 = trunc i8 %5757 to i1, !dbg !4009
  br label %originalBB638

originalBB642alteredBB:                           ; preds = %originalBB642, %2504
  br label %originalBB642

originalBB646alteredBB:                           ; preds = %originalBB646, %2522
  store i8 1, i8* %37, align 1, !dbg !4013
  store i8 1, i8* %43, align 1, !dbg !4014
  %5759 = load i32, i32* %23, align 4, !dbg !4015
  %5760 = icmp eq i32 %5759, 2, !dbg !4017
  br label %originalBB646

originalBB650alteredBB:                           ; preds = %originalBB650, %2541
  %5761 = load i8, i8* %35, align 1, !dbg !4019
  %5762 = trunc i8 %5761 to i1, !dbg !4019
  br label %originalBB650

originalBB654alteredBB:                           ; preds = %originalBB654, %2560
  br label %originalBB654

originalBB658alteredBB:                           ; preds = %originalBB658, %2577
  %5763 = load i64, i64* %20, align 8, !dbg !4024
  %5764 = icmp ne i64 %5763, 0, !dbg !4024
  br label %originalBB658

originalBB662alteredBB:                           ; preds = %originalBB662, %2599
  %5765 = load i64, i64* %20, align 8, !dbg !4029
  store i64 %5765, i64* %30, align 8, !dbg !4031
  store i64 0, i64* %20, align 8, !dbg !4032
  br label %originalBB662

originalBB666alteredBB:                           ; preds = %originalBB666, %2618
  %5766 = load i64, i64* %29, align 8, !dbg !4035
  %5767 = load i64, i64* %20, align 8, !dbg !4035
  %5768 = icmp ult i64 %5766, %5767, !dbg !4035
  br label %originalBB666

originalBB670alteredBB:                           ; preds = %originalBB670, %2638
  %5769 = load i8*, i8** %19, align 8, !dbg !4035
  %5770 = load i64, i64* %29, align 8, !dbg !4035
  %5771 = getelementptr inbounds i8, i8* %5769, i64 %5770, !dbg !4035
  store i8 39, i8* %5771, align 1, !dbg !4035
  br label %originalBB670

originalBB674alteredBB:                           ; preds = %originalBB674, %2658
  %5772 = load i64, i64* %29, align 8, !dbg !4038
  %_675 = sub i64 0, %5772
  %gen676 = add i64 %_675, 1
  %_677 = sub i64 %5772, 1
  %gen678 = mul i64 %_677, 1
  %5773 = add i64 %5772, 1, !dbg !4038
  store i64 %5773, i64* %29, align 8, !dbg !4038
  br label %originalBB674

originalBB682alteredBB:                           ; preds = %originalBB682, %2678
  %5774 = load i64, i64* %29, align 8, !dbg !4040
  %5775 = load i64, i64* %20, align 8, !dbg !4040
  %5776 = icmp ult i64 %5774, %5775, !dbg !4040
  br label %originalBB682

originalBB686alteredBB:                           ; preds = %originalBB686, %2698
  %5777 = load i8*, i8** %19, align 8, !dbg !4040
  %5778 = load i64, i64* %29, align 8, !dbg !4040
  %5779 = getelementptr inbounds i8, i8* %5777, i64 %5778, !dbg !4040
  store i8 92, i8* %5779, align 1, !dbg !4040
  br label %originalBB686

originalBB690alteredBB:                           ; preds = %originalBB690, %2718
  %5780 = load i64, i64* %29, align 8, !dbg !4043
  %_691 = shl i64 %5780, 1
  %_692 = shl i64 %5780, 1
  %_693 = sub i64 %5780, 1
  %gen694 = mul i64 %_693, 1
  %_695 = sub i64 %5780, 1
  %gen696 = mul i64 %_695, 1
  %_697 = sub i64 0, %5780
  %gen698 = add i64 %_697, 1
  %5781 = add i64 %5780, 1, !dbg !4043
  store i64 %5781, i64* %29, align 8, !dbg !4043
  br label %originalBB690

originalBB702alteredBB:                           ; preds = %originalBB702, %2737
  br label %originalBB702

originalBB706alteredBB:                           ; preds = %originalBB706, %2754
  %5782 = load i64, i64* %29, align 8, !dbg !4045
  %5783 = load i64, i64* %20, align 8, !dbg !4045
  %5784 = icmp ult i64 %5782, %5783, !dbg !4045
  br label %originalBB706

originalBB710alteredBB:                           ; preds = %originalBB710, %2774
  %5785 = load i8*, i8** %19, align 8, !dbg !4045
  %5786 = load i64, i64* %29, align 8, !dbg !4045
  %5787 = getelementptr inbounds i8, i8* %5785, i64 %5786, !dbg !4045
  store i8 39, i8* %5787, align 1, !dbg !4045
  br label %originalBB710

originalBB714alteredBB:                           ; preds = %originalBB714, %2797
  store i8 0, i8* %36, align 1, !dbg !4049
  br label %originalBB714

originalBB718alteredBB:                           ; preds = %originalBB718, %2814
  br label %originalBB718

originalBB722alteredBB:                           ; preds = %originalBB722, %2831
  store i8 1, i8* %43, align 1, !dbg !4052
  br label %originalBB722

originalBB726alteredBB:                           ; preds = %originalBB726, %2848
  %5788 = load i8, i8* %34, align 1, !dbg !4059
  %5789 = trunc i8 %5788 to i1, !dbg !4059
  br label %originalBB726

originalBB730alteredBB:                           ; preds = %originalBB730, %2879
  %5790 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !4083
  call void @llvm.memset.p0i8.i64(i8* align 4 %5790, i8 0, i64 8, i1 false), !dbg !4083
  store i64 0, i64* %44, align 8, !dbg !4084
  store i8 1, i8* %45, align 1, !dbg !4085
  %5791 = load i64, i64* %22, align 8, !dbg !4086
  %5792 = icmp eq i64 %5791, -1, !dbg !4088
  br label %originalBB730

originalBB734alteredBB:                           ; preds = %originalBB734, %2899
  %5793 = load i8*, i8** %21, align 8, !dbg !4090
  %5794 = call i64 @strlen(i8* %5793) #13, !dbg !4091
  store i64 %5794, i64* %22, align 8, !dbg !4092
  br label %originalBB734

originalBB738alteredBB:                           ; preds = %originalBB738, %2918
  br label %originalBB738

originalBB742alteredBB:                           ; preds = %originalBB742, %2935
  %5795 = load i8*, i8** %21, align 8, !dbg !4101
  %5796 = load i64, i64* %28, align 8, !dbg !4102
  %5797 = load i64, i64* %44, align 8, !dbg !4103
  %_743 = shl i64 %5796, %5797
  %_744 = sub i64 %5796, %5797
  %gen745 = mul i64 %_744, %5797
  %_746 = sub i64 %5796, %5797
  %gen747 = mul i64 %_746, %5797
  %_748 = sub i64 %5796, %5797
  %gen749 = mul i64 %_748, %5797
  %_750 = shl i64 %5796, %5797
  %5798 = add i64 %5796, %5797, !dbg !4104
  %5799 = getelementptr inbounds i8, i8* %5795, i64 %5798, !dbg !4101
  %5800 = load i64, i64* %22, align 8, !dbg !4105
  %5801 = load i64, i64* %28, align 8, !dbg !4106
  %5802 = load i64, i64* %44, align 8, !dbg !4107
  %_751 = sub i64 %5801, %5802
  %gen752 = mul i64 %_751, %5802
  %5803 = add i64 %5801, %5802, !dbg !4108
  %_753 = sub i64 0, %5800
  %gen754 = add i64 %_753, %5803
  %_755 = shl i64 %5800, %5803
  %5804 = sub i64 %5800, %5803, !dbg !4109
  %5805 = call i64 @rpl_mbrtowc(i32* %47, i8* %5799, i64 %5804, %struct.__mbstate_t* %46), !dbg !4110
  store i64 %5805, i64* %48, align 8, !dbg !4100
  %5806 = load i64, i64* %48, align 8, !dbg !4111
  %5807 = icmp eq i64 %5806, 0, !dbg !4113
  br label %originalBB742

originalBB759alteredBB:                           ; preds = %originalBB759, %2966
  %5808 = load i64, i64* %48, align 8, !dbg !4116
  %5809 = icmp eq i64 %5808, -1, !dbg !4118
  br label %originalBB759

originalBB763alteredBB:                           ; preds = %originalBB763, %2985
  store i8 0, i8* %45, align 1, !dbg !4120
  br label %originalBB763

originalBB767alteredBB:                           ; preds = %originalBB767, %3002
  %5810 = load i64, i64* %48, align 8, !dbg !4123
  %5811 = icmp eq i64 %5810, -2, !dbg !4125
  br label %originalBB767

originalBB771alteredBB:                           ; preds = %originalBB771, %3021
  store i8 0, i8* %45, align 1, !dbg !4127
  br label %originalBB771

originalBB775alteredBB:                           ; preds = %originalBB775, %3038
  %5812 = load i64, i64* %28, align 8, !dbg !4130
  %5813 = load i64, i64* %44, align 8, !dbg !4131
  %_776 = sub i64 %5812, %5813
  %gen777 = mul i64 %_776, %5813
  %_778 = sub i64 %5812, %5813
  %gen779 = mul i64 %_778, %5813
  %_780 = sub i64 0, %5812
  %gen781 = add i64 %_780, %5813
  %_782 = sub i64 0, %5812
  %gen783 = add i64 %_782, %5813
  %_784 = shl i64 %5812, %5813
  %_785 = sub i64 0, %5812
  %gen786 = add i64 %_785, %5813
  %_787 = sub i64 0, %5812
  %gen788 = add i64 %_787, %5813
  %_789 = sub i64 0, %5812
  %gen790 = add i64 %_789, %5813
  %5814 = add i64 %5812, %5813, !dbg !4132
  %5815 = load i64, i64* %22, align 8, !dbg !4133
  %5816 = icmp ult i64 %5814, %5815, !dbg !4134
  br label %originalBB775

originalBB794alteredBB:                           ; preds = %originalBB794, %3060
  %5817 = load i8*, i8** %21, align 8, !dbg !4136
  %5818 = load i64, i64* %28, align 8, !dbg !4137
  %5819 = load i64, i64* %44, align 8, !dbg !4138
  %_795 = sub i64 0, %5818
  %gen796 = add i64 %_795, %5819
  %_797 = shl i64 %5818, %5819
  %_798 = sub i64 0, %5818
  %gen799 = add i64 %_798, %5819
  %_800 = sub i64 %5818, %5819
  %gen801 = mul i64 %_800, %5819
  %5820 = add i64 %5818, %5819, !dbg !4139
  %5821 = getelementptr inbounds i8, i8* %5817, i64 %5820, !dbg !4136
  %5822 = load i8, i8* %5821, align 1, !dbg !4136
  %5823 = sext i8 %5822 to i32, !dbg !4136
  %5824 = icmp ne i32 %5823, 0, !dbg !4135
  br label %originalBB794

originalBB805alteredBB:                           ; preds = %originalBB805, %3087
  %5825 = load i64, i64* %44, align 8, !dbg !4141
  %_806 = shl i64 %5825, 1
  %_807 = shl i64 %5825, 1
  %_808 = sub i64 %5825, 1
  %gen809 = mul i64 %_808, 1
  %_810 = shl i64 %5825, 1
  %_811 = sub i64 %5825, 1
  %gen812 = mul i64 %_811, 1
  %5826 = add i64 %5825, 1, !dbg !4141
  store i64 %5826, i64* %44, align 8, !dbg !4141
  br label %originalBB805

originalBB816alteredBB:                           ; preds = %originalBB816, %3107
  %5827 = load i8, i8* %35, align 1, !dbg !4144
  %5828 = trunc i8 %5827 to i1, !dbg !4144
  br label %originalBB816

originalBB820alteredBB:                           ; preds = %originalBB820, %3126
  %5829 = load i32, i32* %23, align 4, !dbg !4148
  %5830 = icmp eq i32 %5829, 2, !dbg !4149
  br label %originalBB820

originalBB824alteredBB:                           ; preds = %originalBB824, %3145
  store i64 1, i64* %49, align 8, !dbg !4154
  br label %originalBB824

originalBB828alteredBB:                           ; preds = %originalBB828, %3162
  %5831 = load i64, i64* %49, align 8, !dbg !4157
  %5832 = load i64, i64* %48, align 8, !dbg !4159
  %5833 = icmp ult i64 %5831, %5832, !dbg !4160
  br label %originalBB828

originalBB832alteredBB:                           ; preds = %originalBB832, %3182
  %5834 = load i8*, i8** %21, align 8, !dbg !4162
  %5835 = load i64, i64* %28, align 8, !dbg !4163
  %5836 = load i64, i64* %44, align 8, !dbg !4164
  %_833 = sub i64 0, %5835
  %gen834 = add i64 %_833, %5836
  %_835 = shl i64 %5835, %5836
  %_836 = sub i64 0, %5835
  %gen837 = add i64 %_836, %5836
  %5837 = add i64 %5835, %5836, !dbg !4165
  %5838 = load i64, i64* %49, align 8, !dbg !4166
  %5839 = add i64 %5837, %5838, !dbg !4167
  %5840 = getelementptr inbounds i8, i8* %5834, i64 %5839, !dbg !4162
  %5841 = load i8, i8* %5840, align 1, !dbg !4162
  %5842 = sext i8 %5841 to i32, !dbg !4162
  br label %originalBB832

originalBB841alteredBB:                           ; preds = %originalBB841, %3208
  br label %originalBB841

originalBB845alteredBB:                           ; preds = %originalBB845, %3225
  br label %originalBB845

originalBB849alteredBB:                           ; preds = %originalBB849, %3242
  br label %originalBB849

originalBB853alteredBB:                           ; preds = %originalBB853, %3259
  %5843 = load i64, i64* %49, align 8, !dbg !4173
  %_854 = sub i64 0, %5843
  %gen855 = add i64 %_854, 1
  %_856 = sub i64 %5843, 1
  %gen857 = mul i64 %_856, 1
  %_858 = shl i64 %5843, 1
  %_859 = sub i64 %5843, 1
  %gen860 = mul i64 %_859, 1
  %_861 = shl i64 %5843, 1
  %5844 = add i64 %5843, 1, !dbg !4173
  store i64 %5844, i64* %49, align 8, !dbg !4173
  br label %originalBB853

originalBB865alteredBB:                           ; preds = %originalBB865, %3278
  br label %originalBB865

originalBB869alteredBB:                           ; preds = %originalBB869, %3295
  %5845 = load i32, i32* %47, align 4, !dbg !4178
  %5846 = call i32 @iswprint(i32 %5845) #10, !dbg !4180
  %5847 = icmp ne i32 %5846, 0, !dbg !4180
  br label %originalBB869

originalBB873alteredBB:                           ; preds = %originalBB873, %3321
  br label %originalBB873

originalBB877alteredBB:                           ; preds = %originalBB877, %3338
  br label %originalBB877

originalBB881alteredBB:                           ; preds = %originalBB881, %3355
  %5848 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !4187
  %5849 = icmp ne i32 %5848, 0, !dbg !4188
  %_882 = sub i1 %5849, true
  %gen883 = mul i1 %_882, true
  %_884 = shl i1 %5849, true
  %_885 = sub i1 %5849, true
  %gen886 = mul i1 %_885, true
  %_887 = shl i1 %5849, true
  %_888 = sub i1 false, %5849
  %gen889 = add i1 %_888, true
  %5850 = xor i1 %5849, true, !dbg !4188
  br label %originalBB881

originalBB893alteredBB:                           ; preds = %originalBB893, %3376
  %5851 = load i8, i8* %45, align 1, !dbg !4191
  %5852 = trunc i8 %5851 to i1, !dbg !4191
  %5853 = zext i1 %5852 to i8, !dbg !4192
  store i8 %5853, i8* %43, align 1, !dbg !4192
  %5854 = load i64, i64* %44, align 8, !dbg !4193
  %5855 = icmp ult i64 1, %5854, !dbg !4195
  br label %originalBB893

originalBB897alteredBB:                           ; preds = %originalBB897, %3398
  %5856 = load i8, i8* %33, align 1, !dbg !4197
  %5857 = trunc i8 %5856 to i1, !dbg !4197
  br label %originalBB897

originalBB901alteredBB:                           ; preds = %originalBB901, %3417
  %5858 = load i8, i8* %45, align 1, !dbg !4199
  %5859 = trunc i8 %5858 to i1, !dbg !4199
  br label %originalBB901

originalBB905alteredBB:                           ; preds = %originalBB905, %3440
  %5860 = load i8, i8* %33, align 1, !dbg !4208
  %5861 = trunc i8 %5860 to i1, !dbg !4208
  br label %originalBB905

originalBB909alteredBB:                           ; preds = %originalBB909, %3459
  %5862 = load i8, i8* %45, align 1, !dbg !4214
  %5863 = trunc i8 %5862 to i1, !dbg !4214
  br label %originalBB909

originalBB913alteredBB:                           ; preds = %originalBB913, %3479
  %5864 = load i8, i8* %35, align 1, !dbg !4218
  %5865 = trunc i8 %5864 to i1, !dbg !4218
  br label %originalBB913

originalBB917alteredBB:                           ; preds = %originalBB917, %3498
  br label %originalBB917

originalBB921alteredBB:                           ; preds = %originalBB921, %3515
  store i8 1, i8* %42, align 1, !dbg !4221
  %5866 = load i32, i32* %23, align 4, !dbg !4222
  %5867 = icmp eq i32 %5866, 2, !dbg !4222
  br label %originalBB921

originalBB925alteredBB:                           ; preds = %originalBB925, %3534
  %5868 = load i8, i8* %36, align 1, !dbg !4222
  %5869 = trunc i8 %5868 to i1, !dbg !4222
  br label %originalBB925

originalBB929alteredBB:                           ; preds = %originalBB929, %3553
  br label %originalBB929

originalBB933alteredBB:                           ; preds = %originalBB933, %3570
  %5870 = load i64, i64* %29, align 8, !dbg !4226
  %5871 = load i64, i64* %20, align 8, !dbg !4226
  %5872 = icmp ult i64 %5870, %5871, !dbg !4226
  br label %originalBB933

originalBB937alteredBB:                           ; preds = %originalBB937, %3590
  %5873 = load i8*, i8** %19, align 8, !dbg !4226
  %5874 = load i64, i64* %29, align 8, !dbg !4226
  %5875 = getelementptr inbounds i8, i8* %5873, i64 %5874, !dbg !4226
  store i8 39, i8* %5875, align 1, !dbg !4226
  br label %originalBB937

originalBB941alteredBB:                           ; preds = %originalBB941, %3613
  br label %originalBB941

originalBB945alteredBB:                           ; preds = %originalBB945, %3630
  %5876 = load i64, i64* %29, align 8, !dbg !4230
  %5877 = load i64, i64* %20, align 8, !dbg !4230
  %5878 = icmp ult i64 %5876, %5877, !dbg !4230
  br label %originalBB945

originalBB949alteredBB:                           ; preds = %originalBB949, %3657
  br label %originalBB949

originalBB953alteredBB:                           ; preds = %originalBB953, %3678
  %5879 = load i8*, i8** %19, align 8, !dbg !4234
  %5880 = load i64, i64* %29, align 8, !dbg !4234
  %5881 = getelementptr inbounds i8, i8* %5879, i64 %5880, !dbg !4234
  store i8 39, i8* %5881, align 1, !dbg !4234
  br label %originalBB953

originalBB957alteredBB:                           ; preds = %originalBB957, %3698
  %5882 = load i64, i64* %29, align 8, !dbg !4237
  %_958 = sub i64 %5882, 1
  %gen959 = mul i64 %_958, 1
  %_960 = sub i64 0, %5882
  %gen961 = add i64 %_960, 1
  %_962 = sub i64 %5882, 1
  %gen963 = mul i64 %_962, 1
  %_964 = sub i64 %5882, 1
  %gen965 = mul i64 %_964, 1
  %_966 = sub i64 0, %5882
  %gen967 = add i64 %_966, 1
  %5883 = add i64 %5882, 1, !dbg !4237
  store i64 %5883, i64* %29, align 8, !dbg !4237
  br label %originalBB957

originalBB971alteredBB:                           ; preds = %originalBB971, %3717
  store i8 1, i8* %36, align 1, !dbg !4224
  br label %originalBB971

originalBB975alteredBB:                           ; preds = %originalBB975, %3734
  br label %originalBB975

originalBB979alteredBB:                           ; preds = %originalBB979, %3755
  %5884 = load i8*, i8** %19, align 8, !dbg !4238
  %5885 = load i64, i64* %29, align 8, !dbg !4238
  %5886 = getelementptr inbounds i8, i8* %5884, i64 %5885, !dbg !4238
  store i8 92, i8* %5886, align 1, !dbg !4238
  br label %originalBB979

originalBB983alteredBB:                           ; preds = %originalBB983, %3775
  %5887 = load i64, i64* %29, align 8, !dbg !4241
  %_984 = sub i64 %5887, 1
  %gen985 = mul i64 %_984, 1
  %_986 = sub i64 0, %5887
  %gen987 = add i64 %_986, 1
  %_988 = sub i64 %5887, 1
  %gen989 = mul i64 %_988, 1
  %_990 = sub i64 %5887, 1
  %gen991 = mul i64 %_990, 1
  %_992 = shl i64 %5887, 1
  %_993 = shl i64 %5887, 1
  %_994 = sub i64 %5887, 1
  %gen995 = mul i64 %_994, 1
  %5888 = add i64 %5887, 1, !dbg !4241
  store i64 %5888, i64* %29, align 8, !dbg !4241
  br label %originalBB983

originalBB999alteredBB:                           ; preds = %originalBB999, %3794
  br label %originalBB999

originalBB1003alteredBB:                          ; preds = %originalBB1003, %3812
  %5889 = load i64, i64* %29, align 8, !dbg !4243
  %5890 = load i64, i64* %20, align 8, !dbg !4243
  %5891 = icmp ult i64 %5889, %5890, !dbg !4243
  br label %originalBB1003

originalBB1007alteredBB:                          ; preds = %originalBB1007, %3832
  %5892 = load i8, i8* %39, align 1, !dbg !4243
  %5893 = zext i8 %5892 to i32, !dbg !4243
  %_1008 = sub i32 %5893, 6
  %gen1009 = mul i32 %_1008, 6
  %_1010 = sub i32 0, %5893
  %gen1011 = add i32 %_1010, 6
  %_1012 = sub i32 0, %5893
  %gen1013 = add i32 %_1012, 6
  %_1014 = shl i32 %5893, 6
  %_1015 = shl i32 %5893, 6
  %_1016 = sub i32 0, %5893
  %gen1017 = add i32 %_1016, 6
  %5894 = ashr i32 %5893, 6, !dbg !4243
  %_1018 = shl i32 48, %5894
  %_1019 = shl i32 48, %5894
  %_1020 = sub i32 0, 48
  %gen1021 = add i32 %_1020, %5894
  %_1022 = sub i32 0, 48
  %gen1023 = add i32 %_1022, %5894
  %_1024 = sub i32 48, %5894
  %gen1025 = mul i32 %_1024, %5894
  %_1026 = sub i32 0, 48
  %gen1027 = add i32 %_1026, %5894
  %_1028 = sub i32 0, 48
  %gen1029 = add i32 %_1028, %5894
  %_1030 = shl i32 48, %5894
  %_1031 = sub i32 0, 48
  %gen1032 = add i32 %_1031, %5894
  %5895 = add nsw i32 48, %5894, !dbg !4243
  %5896 = trunc i32 %5895 to i8, !dbg !4243
  %5897 = load i8*, i8** %19, align 8, !dbg !4243
  %5898 = load i64, i64* %29, align 8, !dbg !4243
  %5899 = getelementptr inbounds i8, i8* %5897, i64 %5898, !dbg !4243
  store i8 %5896, i8* %5899, align 1, !dbg !4243
  br label %originalBB1007

originalBB1036alteredBB:                          ; preds = %originalBB1036, %3857
  %5900 = load i64, i64* %29, align 8, !dbg !4246
  %_1037 = sub i64 %5900, 1
  %gen1038 = mul i64 %_1037, 1
  %5901 = add i64 %5900, 1, !dbg !4246
  store i64 %5901, i64* %29, align 8, !dbg !4246
  br label %originalBB1036

originalBB1042alteredBB:                          ; preds = %originalBB1042, %3876
  br label %originalBB1042

originalBB1046alteredBB:                          ; preds = %originalBB1046, %3893
  %5902 = load i64, i64* %29, align 8, !dbg !4248
  %5903 = load i64, i64* %20, align 8, !dbg !4248
  %5904 = icmp ult i64 %5902, %5903, !dbg !4248
  br label %originalBB1046

originalBB1050alteredBB:                          ; preds = %originalBB1050, %3923
  %5905 = load i64, i64* %29, align 8, !dbg !4251
  %_1051 = shl i64 %5905, 1
  %_1052 = sub i64 %5905, 1
  %gen1053 = mul i64 %_1052, 1
  %_1054 = sub i64 0, %5905
  %gen1055 = add i64 %_1054, 1
  %_1056 = sub i64 %5905, 1
  %gen1057 = mul i64 %_1056, 1
  %_1058 = sub i64 %5905, 1
  %gen1059 = mul i64 %_1058, 1
  %_1060 = sub i64 %5905, 1
  %gen1061 = mul i64 %_1060, 1
  %_1062 = sub i64 %5905, 1
  %gen1063 = mul i64 %_1062, 1
  %5906 = add i64 %5905, 1, !dbg !4251
  store i64 %5906, i64* %29, align 8, !dbg !4251
  br label %originalBB1050

originalBB1067alteredBB:                          ; preds = %originalBB1067, %3942
  %5907 = load i8, i8* %39, align 1, !dbg !4252
  %5908 = zext i8 %5907 to i32, !dbg !4252
  %_1068 = sub i32 0, %5908
  %gen1069 = add i32 %_1068, 7
  %_1070 = shl i32 %5908, 7
  %_1071 = shl i32 %5908, 7
  %_1072 = shl i32 %5908, 7
  %5909 = and i32 %5908, 7, !dbg !4253
  %_1073 = sub i32 48, %5909
  %gen1074 = mul i32 %_1073, %5909
  %_1075 = sub i32 48, %5909
  %gen1076 = mul i32 %_1075, %5909
  %_1077 = sub i32 48, %5909
  %gen1078 = mul i32 %_1077, %5909
  %5910 = add nsw i32 48, %5909, !dbg !4254
  %5911 = trunc i32 %5910 to i8, !dbg !4255
  store i8 %5911, i8* %39, align 1, !dbg !4256
  br label %originalBB1067

originalBB1082alteredBB:                          ; preds = %originalBB1082, %3964
  %5912 = load i8, i8* %41, align 1, !dbg !4258
  %5913 = trunc i8 %5912 to i1, !dbg !4258
  br label %originalBB1082

originalBB1086alteredBB:                          ; preds = %originalBB1086, %3983
  br label %originalBB1086

originalBB1090alteredBB:                          ; preds = %originalBB1090, %4000
  %5914 = load i64, i64* %29, align 8, !dbg !4263
  %5915 = load i64, i64* %20, align 8, !dbg !4263
  %5916 = icmp ult i64 %5914, %5915, !dbg !4263
  br label %originalBB1090

originalBB1094alteredBB:                          ; preds = %originalBB1094, %4020
  %5917 = load i8*, i8** %19, align 8, !dbg !4263
  %5918 = load i64, i64* %29, align 8, !dbg !4263
  %5919 = getelementptr inbounds i8, i8* %5917, i64 %5918, !dbg !4263
  store i8 92, i8* %5919, align 1, !dbg !4263
  br label %originalBB1094

originalBB1098alteredBB:                          ; preds = %originalBB1098, %4044
  br label %originalBB1098

originalBB1102alteredBB:                          ; preds = %originalBB1102, %4067
  br label %originalBB1102

originalBB1106alteredBB:                          ; preds = %originalBB1106, %4084
  %5920 = load i8, i8* %36, align 1, !dbg !4277
  %5921 = trunc i8 %5920 to i1, !dbg !4277
  br label %originalBB1106

originalBB1110alteredBB:                          ; preds = %originalBB1110, %4103
  %5922 = load i8, i8* %42, align 1, !dbg !4277
  %5923 = trunc i8 %5922 to i1, !dbg !4277
  br label %originalBB1110

originalBB1114alteredBB:                          ; preds = %originalBB1114, %4123
  %5924 = load i64, i64* %29, align 8, !dbg !4283
  %5925 = load i64, i64* %20, align 8, !dbg !4283
  %5926 = icmp ult i64 %5924, %5925, !dbg !4283
  br label %originalBB1114

originalBB1118alteredBB:                          ; preds = %originalBB1118, %4147
  %5927 = load i64, i64* %29, align 8, !dbg !4286
  %_1119 = sub i64 0, %5927
  %gen1120 = add i64 %_1119, 1
  %5928 = add i64 %5927, 1, !dbg !4286
  store i64 %5928, i64* %29, align 8, !dbg !4286
  br label %originalBB1118

originalBB1124alteredBB:                          ; preds = %originalBB1124, %4166
  br label %originalBB1124

originalBB1128alteredBB:                          ; preds = %originalBB1128, %4183
  %5929 = load i64, i64* %29, align 8, !dbg !4287
  %5930 = load i64, i64* %20, align 8, !dbg !4287
  %5931 = icmp ult i64 %5929, %5930, !dbg !4287
  br label %originalBB1128

originalBB1132alteredBB:                          ; preds = %originalBB1132, %4203
  %5932 = load i8*, i8** %19, align 8, !dbg !4287
  %5933 = load i64, i64* %29, align 8, !dbg !4287
  %5934 = getelementptr inbounds i8, i8* %5932, i64 %5933, !dbg !4287
  store i8 39, i8* %5934, align 1, !dbg !4287
  br label %originalBB1132

originalBB1136alteredBB:                          ; preds = %originalBB1136, %4226
  store i8 0, i8* %36, align 1, !dbg !4281
  br label %originalBB1136

originalBB1140alteredBB:                          ; preds = %originalBB1140, %4243
  br label %originalBB1140

originalBB1144alteredBB:                          ; preds = %originalBB1144, %4260
  br label %originalBB1144

originalBB1148alteredBB:                          ; preds = %originalBB1148, %4277
  %5935 = load i64, i64* %29, align 8, !dbg !4292
  %5936 = load i64, i64* %20, align 8, !dbg !4292
  %5937 = icmp ult i64 %5935, %5936, !dbg !4292
  br label %originalBB1148

originalBB1152alteredBB:                          ; preds = %originalBB1152, %4297
  %5938 = load i8, i8* %39, align 1, !dbg !4292
  %5939 = load i8*, i8** %19, align 8, !dbg !4292
  %5940 = load i64, i64* %29, align 8, !dbg !4292
  %5941 = getelementptr inbounds i8, i8* %5939, i64 %5940, !dbg !4292
  store i8 %5938, i8* %5941, align 1, !dbg !4292
  br label %originalBB1152

originalBB1156alteredBB:                          ; preds = %originalBB1156, %4327
  br label %originalBB1156

originalBB1160alteredBB:                          ; preds = %originalBB1160, %4348
  %5942 = load i32, i32* %23, align 4, !dbg !4308
  %5943 = icmp ne i32 %5942, 2, !dbg !4309
  br label %originalBB1160

originalBB1164alteredBB:                          ; preds = %originalBB1164, %4370
  %5944 = load i32*, i32** %25, align 8, !dbg !4313
  %5945 = icmp ne i32* %5944, null, !dbg !4313
  br label %originalBB1164

originalBB1168alteredBB:                          ; preds = %originalBB1168, %4406
  br label %originalBB1168

originalBB1172alteredBB:                          ; preds = %originalBB1172, %4423
  br label %originalBB1172

originalBB1176alteredBB:                          ; preds = %originalBB1176, %4444
  br label %originalBB1176

originalBB1180alteredBB:                          ; preds = %originalBB1180, %4461
  store i8 1, i8* %42, align 1, !dbg !4332
  %5946 = load i32, i32* %23, align 4, !dbg !4333
  %5947 = icmp eq i32 %5946, 2, !dbg !4333
  br label %originalBB1180

originalBB1184alteredBB:                          ; preds = %originalBB1184, %4480
  %5948 = load i8, i8* %36, align 1, !dbg !4333
  %5949 = trunc i8 %5948 to i1, !dbg !4333
  br label %originalBB1184

originalBB1188alteredBB:                          ; preds = %originalBB1188, %4499
  br label %originalBB1188

originalBB1192alteredBB:                          ; preds = %originalBB1192, %4516
  %5950 = load i64, i64* %29, align 8, !dbg !4337
  %5951 = load i64, i64* %20, align 8, !dbg !4337
  %5952 = icmp ult i64 %5950, %5951, !dbg !4337
  br label %originalBB1192

originalBB1196alteredBB:                          ; preds = %originalBB1196, %4540
  %5953 = load i64, i64* %29, align 8, !dbg !4340
  %_1197 = sub i64 %5953, 1
  %gen1198 = mul i64 %_1197, 1
  %_1199 = shl i64 %5953, 1
  %_1200 = sub i64 %5953, 1
  %gen1201 = mul i64 %_1200, 1
  %_1202 = sub i64 %5953, 1
  %gen1203 = mul i64 %_1202, 1
  %_1204 = shl i64 %5953, 1
  %5954 = add i64 %5953, 1, !dbg !4340
  store i64 %5954, i64* %29, align 8, !dbg !4340
  br label %originalBB1196

originalBB1208alteredBB:                          ; preds = %originalBB1208, %4559
  br label %originalBB1208

originalBB1212alteredBB:                          ; preds = %originalBB1212, %4576
  %5955 = load i64, i64* %29, align 8, !dbg !4341
  %5956 = load i64, i64* %20, align 8, !dbg !4341
  %5957 = icmp ult i64 %5955, %5956, !dbg !4341
  br label %originalBB1212

originalBB1216alteredBB:                          ; preds = %originalBB1216, %4596
  %5958 = load i8*, i8** %19, align 8, !dbg !4341
  %5959 = load i64, i64* %29, align 8, !dbg !4341
  %5960 = getelementptr inbounds i8, i8* %5958, i64 %5959, !dbg !4341
  store i8 36, i8* %5960, align 1, !dbg !4341
  br label %originalBB1216

originalBB1220alteredBB:                          ; preds = %originalBB1220, %4616
  %5961 = load i64, i64* %29, align 8, !dbg !4344
  %_1221 = sub i64 0, %5961
  %gen1222 = add i64 %_1221, 1
  %_1223 = shl i64 %5961, 1
  %_1224 = shl i64 %5961, 1
  %5962 = add i64 %5961, 1, !dbg !4344
  store i64 %5962, i64* %29, align 8, !dbg !4344
  br label %originalBB1220

originalBB1228alteredBB:                          ; preds = %originalBB1228, %4640
  %5963 = load i8*, i8** %19, align 8, !dbg !4345
  %5964 = load i64, i64* %29, align 8, !dbg !4345
  %5965 = getelementptr inbounds i8, i8* %5963, i64 %5964, !dbg !4345
  store i8 39, i8* %5965, align 1, !dbg !4345
  br label %originalBB1228

originalBB1232alteredBB:                          ; preds = %originalBB1232, %4664
  br label %originalBB1232

originalBB1236alteredBB:                          ; preds = %originalBB1236, %4685
  %5966 = load i8*, i8** %19, align 8, !dbg !4349
  %5967 = load i64, i64* %29, align 8, !dbg !4349
  %5968 = getelementptr inbounds i8, i8* %5966, i64 %5967, !dbg !4349
  store i8 92, i8* %5968, align 1, !dbg !4349
  br label %originalBB1236

originalBB1240alteredBB:                          ; preds = %originalBB1240, %4705
  %5969 = load i64, i64* %29, align 8, !dbg !4352
  %_1241 = shl i64 %5969, 1
  %_1242 = shl i64 %5969, 1
  %_1243 = sub i64 %5969, 1
  %gen1244 = mul i64 %_1243, 1
  %_1245 = sub i64 0, %5969
  %gen1246 = add i64 %_1245, 1
  %_1247 = sub i64 %5969, 1
  %gen1248 = mul i64 %_1247, 1
  %5970 = add i64 %5969, 1, !dbg !4352
  store i64 %5970, i64* %29, align 8, !dbg !4352
  br label %originalBB1240

originalBB1252alteredBB:                          ; preds = %originalBB1252, %4724
  br label %originalBB1252

originalBB1256alteredBB:                          ; preds = %originalBB1256, %4741
  br label %originalBB1256

originalBB1260alteredBB:                          ; preds = %originalBB1260, %4758
  br label %originalBB1260

originalBB1264alteredBB:                          ; preds = %originalBB1264, %4775
  %5971 = load i8, i8* %36, align 1, !dbg !4356
  %5972 = trunc i8 %5971 to i1, !dbg !4356
  br label %originalBB1264

originalBB1268alteredBB:                          ; preds = %originalBB1268, %4797
  br label %originalBB1268

originalBB1272alteredBB:                          ; preds = %originalBB1272, %4825
  br label %originalBB1272

originalBB1276alteredBB:                          ; preds = %originalBB1276, %4842
  %5973 = load i64, i64* %29, align 8, !dbg !4366
  %5974 = load i64, i64* %20, align 8, !dbg !4366
  %5975 = icmp ult i64 %5973, %5974, !dbg !4366
  br label %originalBB1276

originalBB1280alteredBB:                          ; preds = %originalBB1280, %4862
  %5976 = load i8*, i8** %19, align 8, !dbg !4366
  %5977 = load i64, i64* %29, align 8, !dbg !4366
  %5978 = getelementptr inbounds i8, i8* %5976, i64 %5977, !dbg !4366
  store i8 39, i8* %5978, align 1, !dbg !4366
  br label %originalBB1280

originalBB1284alteredBB:                          ; preds = %originalBB1284, %4887
  br label %originalBB1284

originalBB1288alteredBB:                          ; preds = %originalBB1288, %4904
  %5979 = load i64, i64* %29, align 8, !dbg !4371
  %5980 = load i64, i64* %20, align 8, !dbg !4371
  %5981 = icmp ult i64 %5979, %5980, !dbg !4371
  br label %originalBB1288

originalBB1292alteredBB:                          ; preds = %originalBB1292, %4924
  %5982 = load i8, i8* %39, align 1, !dbg !4371
  %5983 = load i8*, i8** %19, align 8, !dbg !4371
  %5984 = load i64, i64* %29, align 8, !dbg !4371
  %5985 = getelementptr inbounds i8, i8* %5983, i64 %5984, !dbg !4371
  store i8 %5982, i8* %5985, align 1, !dbg !4371
  br label %originalBB1292

originalBB1296alteredBB:                          ; preds = %originalBB1296, %4945
  %5986 = load i64, i64* %29, align 8, !dbg !4374
  %_1297 = sub i64 0, %5986
  %gen1298 = add i64 %_1297, 1
  %_1299 = shl i64 %5986, 1
  %_1300 = shl i64 %5986, 1
  %_1301 = sub i64 0, %5986
  %gen1302 = add i64 %_1301, 1
  %_1303 = shl i64 %5986, 1
  %_1304 = sub i64 %5986, 1
  %gen1305 = mul i64 %_1304, 1
  %_1306 = shl i64 %5986, 1
  %_1307 = shl i64 %5986, 1
  %5987 = add i64 %5986, 1, !dbg !4374
  store i64 %5987, i64* %29, align 8, !dbg !4374
  br label %originalBB1296

originalBB1311alteredBB:                          ; preds = %originalBB1311, %4968
  br label %originalBB1311

originalBB1315alteredBB:                          ; preds = %originalBB1315, %4985
  %5988 = load i64, i64* %28, align 8, !dbg !4381
  %_1316 = sub i64 0, %5988
  %gen1317 = add i64 %_1316, 1
  %_1318 = shl i64 %5988, 1
  %_1319 = sub i64 %5988, 1
  %gen1320 = mul i64 %_1319, 1
  %_1321 = sub i64 0, %5988
  %gen1322 = add i64 %_1321, 1
  %5989 = add i64 %5988, 1, !dbg !4381
  store i64 %5989, i64* %28, align 8, !dbg !4381
  br label %originalBB1315

originalBB1326alteredBB:                          ; preds = %originalBB1326, %5004
  %5990 = load i64, i64* %29, align 8, !dbg !4385
  %5991 = icmp eq i64 %5990, 0, !dbg !4387
  br label %originalBB1326

originalBB1330alteredBB:                          ; preds = %originalBB1330, %5023
  %5992 = load i32, i32* %23, align 4, !dbg !4389
  %5993 = icmp eq i32 %5992, 2, !dbg !4390
  br label %originalBB1330

originalBB1334alteredBB:                          ; preds = %originalBB1334, %5042
  %5994 = load i8, i8* %35, align 1, !dbg !4392
  %5995 = trunc i8 %5994 to i1, !dbg !4392
  br label %originalBB1334

originalBB1338alteredBB:                          ; preds = %originalBB1338, %5062
  %5996 = load i32, i32* %23, align 4, !dbg !4395
  %5997 = icmp eq i32 %5996, 2, !dbg !4397
  br label %originalBB1338

originalBB1342alteredBB:                          ; preds = %originalBB1342, %5084
  %5998 = load i8, i8* %37, align 1, !dbg !4401
  %5999 = trunc i8 %5998 to i1, !dbg !4401
  br label %originalBB1342

originalBB1346alteredBB:                          ; preds = %originalBB1346, %5103
  %6000 = load i8, i8* %38, align 1, !dbg !4403
  %6001 = trunc i8 %6000 to i1, !dbg !4403
  br label %originalBB1346

originalBB1350alteredBB:                          ; preds = %originalBB1350, %5122
  %6002 = load i8*, i8** %19, align 8, !dbg !4407
  %6003 = load i64, i64* %30, align 8, !dbg !4408
  %6004 = load i8*, i8** %21, align 8, !dbg !4409
  %6005 = load i64, i64* %22, align 8, !dbg !4410
  %6006 = load i32, i32* %24, align 4, !dbg !4411
  %6007 = load i32*, i32** %25, align 8, !dbg !4412
  %6008 = load i8*, i8** %26, align 8, !dbg !4413
  %6009 = load i8*, i8** %27, align 8, !dbg !4414
  %6010 = call i64 @quotearg_buffer_restyled(i8* %6002, i64 %6003, i8* %6004, i64 %6005, i32 5, i32 %6006, i32* %6007, i8* %6008, i8* %6009), !dbg !4415
  store i64 %6010, i64* %18, align 8, !dbg !4416
  br label %originalBB1350

originalBB1354alteredBB:                          ; preds = %originalBB1354, %5148
  %6011 = load i64, i64* %20, align 8, !dbg !4417
  %6012 = icmp ne i64 %6011, 0, !dbg !4417
  br label %originalBB1354

originalBB1358alteredBB:                          ; preds = %originalBB1358, %5167
  %6013 = load i64, i64* %30, align 8, !dbg !4420
  %6014 = icmp ne i64 %6013, 0, !dbg !4420
  br label %originalBB1358

originalBB1362alteredBB:                          ; preds = %originalBB1362, %5188
  br label %originalBB1362

originalBB1366alteredBB:                          ; preds = %originalBB1366, %5205
  br label %originalBB1366

originalBB1370alteredBB:                          ; preds = %originalBB1370, %5222
  %6015 = load i8*, i8** %31, align 8, !dbg !4428
  %6016 = icmp ne i8* %6015, null, !dbg !4428
  br label %originalBB1370

originalBB1374alteredBB:                          ; preds = %originalBB1374, %5241
  %6017 = load i8, i8* %35, align 1, !dbg !4431
  %6018 = trunc i8 %6017 to i1, !dbg !4431
  br label %originalBB1374

originalBB1378alteredBB:                          ; preds = %originalBB1378, %5260
  br label %originalBB1378

originalBB1382alteredBB:                          ; preds = %originalBB1382, %5277
  %6019 = load i8*, i8** %31, align 8, !dbg !4434
  %6020 = load i8, i8* %6019, align 1, !dbg !4437
  %6021 = icmp ne i8 %6020, 0, !dbg !4438
  br label %originalBB1382

originalBB1386alteredBB:                          ; preds = %originalBB1386, %5297
  br label %originalBB1386

originalBB1390alteredBB:                          ; preds = %originalBB1390, %5314
  %6022 = load i64, i64* %29, align 8, !dbg !4440
  %6023 = load i64, i64* %20, align 8, !dbg !4440
  %6024 = icmp ult i64 %6022, %6023, !dbg !4440
  br label %originalBB1390

originalBB1394alteredBB:                          ; preds = %originalBB1394, %5340
  %6025 = load i64, i64* %29, align 8, !dbg !4443
  %_1395 = sub i64 %6025, 1
  %gen1396 = mul i64 %_1395, 1
  %_1397 = sub i64 %6025, 1
  %gen1398 = mul i64 %_1397, 1
  %_1399 = sub i64 0, %6025
  %gen1400 = add i64 %_1399, 1
  %_1401 = sub i64 0, %6025
  %gen1402 = add i64 %_1401, 1
  %_1403 = sub i64 %6025, 1
  %gen1404 = mul i64 %_1403, 1
  %_1405 = sub i64 %6025, 1
  %gen1406 = mul i64 %_1405, 1
  %_1407 = sub i64 %6025, 1
  %gen1408 = mul i64 %_1407, 1
  %_1409 = shl i64 %6025, 1
  %6026 = add i64 %6025, 1, !dbg !4443
  store i64 %6026, i64* %29, align 8, !dbg !4443
  br label %originalBB1394

originalBB1413alteredBB:                          ; preds = %originalBB1413, %5360
  %6027 = load i8*, i8** %31, align 8, !dbg !4444
  %6028 = getelementptr inbounds i8, i8* %6027, i32 1, !dbg !4444
  store i8* %6028, i8** %31, align 8, !dbg !4444
  br label %originalBB1413

originalBB1417alteredBB:                          ; preds = %originalBB1417, %5379
  br label %originalBB1417

originalBB1421alteredBB:                          ; preds = %originalBB1421, %5404
  %6029 = load i64, i64* %29, align 8, !dbg !4456
  store i64 %6029, i64* %18, align 8, !dbg !4457
  br label %originalBB1421

originalBB1425alteredBB:                          ; preds = %originalBB1425, %5422
  %6030 = load i32, i32* %23, align 4, !dbg !4460
  %6031 = icmp eq i32 %6030, 2, !dbg !4462
  br label %originalBB1425

originalBB1429alteredBB:                          ; preds = %originalBB1429, %5441
  %6032 = load i8, i8* %33, align 1, !dbg !4464
  %6033 = trunc i8 %6032 to i1, !dbg !4464
  br label %originalBB1429

originalBB1433alteredBB:                          ; preds = %originalBB1433, %5461
  %6034 = load i8*, i8** %19, align 8, !dbg !4468
  %6035 = load i64, i64* %20, align 8, !dbg !4469
  %6036 = load i8*, i8** %21, align 8, !dbg !4470
  %6037 = load i64, i64* %22, align 8, !dbg !4471
  %6038 = load i32, i32* %23, align 4, !dbg !4472
  %6039 = load i32, i32* %24, align 4, !dbg !4473
  %_1434 = sub i32 %6039, -3
  %gen1435 = mul i32 %_1434, -3
  %_1436 = sub i32 0, %6039
  %gen1437 = add i32 %_1436, -3
  %_1438 = sub i32 0, %6039
  %gen1439 = add i32 %_1438, -3
  %_1440 = sub i32 %6039, -3
  %gen1441 = mul i32 %_1440, -3
  %_1442 = sub i32 0, %6039
  %gen1443 = add i32 %_1442, -3
  %_1444 = shl i32 %6039, -3
  %_1445 = shl i32 %6039, -3
  %_1446 = sub i32 0, %6039
  %gen1447 = add i32 %_1446, -3
  %6040 = and i32 %6039, -3, !dbg !4474
  %6041 = load i8*, i8** %26, align 8, !dbg !4475
  %6042 = load i8*, i8** %27, align 8, !dbg !4476
  %6043 = call i64 @quotearg_buffer_restyled(i8* %6034, i64 %6035, i8* %6036, i64 %6037, i32 %6038, i32 %6040, i32* null, i8* %6041, i8* %6042), !dbg !4477
  store i64 %6043, i64* %18, align 8, !dbg !4478
  br label %originalBB1433

originalBB1451alteredBB:                          ; preds = %originalBB1451, %5488
  %6044 = load i64, i64* %18, align 8, !dbg !4479
  br label %originalBB1451
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !4531 {
  %3 = load i32, i32* @x.65
  %4 = load i32, i32* @y.66
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4534, metadata !DIExpression()), !dbg !4535
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4536, metadata !DIExpression()), !dbg !4537
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4538, metadata !DIExpression()), !dbg !4539
  %16 = load i8*, i8** %12, align 8, !dbg !4540
  %17 = call i8* @gettext(i8* %16) #10, !dbg !4540
  store i8* %17, i8** %14, align 8, !dbg !4539
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4541, metadata !DIExpression()), !dbg !4542
  %18 = load i8*, i8** %14, align 8, !dbg !4543
  %19 = load i8*, i8** %12, align 8, !dbg !4545
  %20 = icmp ne i8* %18, %19, !dbg !4546
  %21 = load i32, i32* @x.65
  %22 = load i32, i32* @y.66
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !4547

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.65
  %31 = load i32, i32* @y.66
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !4548
  store i8* %38, i8** %11, align 8, !dbg !4549
  %39 = load i32, i32* @x.65
  %40 = load i32, i32* @y.66
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %125, !dbg !4549

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.65
  %49 = load i32, i32* @y.66
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !4550
  store i8* %56, i8** %15, align 8, !dbg !4551
  %57 = load i8*, i8** %15, align 8, !dbg !4552
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.123, i64 0, i64 0)) #13, !dbg !4552
  %59 = icmp eq i32 %58, 0, !dbg !4552
  %60 = load i32, i32* @x.65
  %61 = load i32, i32* @y.66
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %76, !dbg !4554

68:                                               ; preds = %originalBBpart28
  %69 = load i8*, i8** %12, align 8, !dbg !4555
  %70 = getelementptr inbounds i8, i8* %69, i64 0, !dbg !4555
  %71 = load i8, i8* %70, align 1, !dbg !4555
  %72 = sext i8 %71 to i32, !dbg !4555
  %73 = icmp eq i32 %72, 96, !dbg !4556
  %74 = zext i1 %73 to i64, !dbg !4555
  %75 = select i1 %73, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.124, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.125, i64 0, i64 0), !dbg !4555
  store i8* %75, i8** %11, align 8, !dbg !4557
  br label %125, !dbg !4557

76:                                               ; preds = %originalBBpart28
  %77 = load i8*, i8** %15, align 8, !dbg !4558
  %78 = call i32 @c_strcasecmp(i8* %77, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.126, i64 0, i64 0)) #13, !dbg !4558
  %79 = icmp eq i32 %78, 0, !dbg !4558
  br i1 %79, label %80, label %104, !dbg !4560

80:                                               ; preds = %76
  %81 = load i32, i32* @x.65
  %82 = load i32, i32* @y.66
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %89 = load i8*, i8** %12, align 8, !dbg !4561
  %90 = getelementptr inbounds i8, i8* %89, i64 0, !dbg !4561
  %91 = load i8, i8* %90, align 1, !dbg !4561
  %92 = sext i8 %91 to i32, !dbg !4561
  %93 = icmp eq i32 %92, 96, !dbg !4562
  %94 = zext i1 %93 to i64, !dbg !4561
  %95 = select i1 %93, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.127, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.128, i64 0, i64 0), !dbg !4561
  store i8* %95, i8** %11, align 8, !dbg !4563
  %96 = load i32, i32* @x.65
  %97 = load i32, i32* @y.66
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %125, !dbg !4563

104:                                              ; preds = %76
  %105 = load i32, i32* @x.65
  %106 = load i32, i32* @y.66
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %104, %originalBB14alteredBB
  %113 = load i32, i32* %13, align 4, !dbg !4564
  %114 = icmp eq i32 %113, 9, !dbg !4565
  %115 = zext i1 %114 to i64, !dbg !4564
  %116 = select i1 %114, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.120, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), !dbg !4564
  store i8* %116, i8** %11, align 8, !dbg !4566
  %117 = load i32, i32* @x.65
  %118 = load i32, i32* @y.66
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %125, !dbg !4566

125:                                              ; preds = %originalBBpart216, %originalBBpart212, %68, %originalBBpart24
  %126 = load i8*, i8** %11, align 8, !dbg !4567
  ret i8* %126, !dbg !4567

originalBBalteredBB:                              ; preds = %originalBB, %2
  %127 = alloca i8*, align 8
  %128 = alloca i8*, align 8
  %129 = alloca i32, align 4
  %130 = alloca i8*, align 8
  %131 = alloca i8*, align 8
  store i8* %0, i8** %128, align 8
  call void @llvm.dbg.declare(metadata i8** %128, metadata !4568, metadata !DIExpression()), !dbg !4535
  store i32 %1, i32* %129, align 4
  call void @llvm.dbg.declare(metadata i32* %129, metadata !4600, metadata !DIExpression()), !dbg !4537
  call void @llvm.dbg.declare(metadata i8** %130, metadata !4601, metadata !DIExpression()), !dbg !4539
  %132 = load i8*, i8** %128, align 8, !dbg !4540
  %133 = call i8* @gettext(i8* %132) #10, !dbg !4540
  store i8* %133, i8** %130, align 8, !dbg !4539
  call void @llvm.dbg.declare(metadata i8** %131, metadata !4602, metadata !DIExpression()), !dbg !4542
  %134 = load i8*, i8** %130, align 8, !dbg !4543
  %135 = load i8*, i8** %128, align 8, !dbg !4545
  %136 = icmp ne i8* %134, %135, !dbg !4546
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %137 = load i8*, i8** %14, align 8, !dbg !4548
  store i8* %137, i8** %11, align 8, !dbg !4549
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %138 = call i8* @locale_charset(), !dbg !4550
  store i8* %138, i8** %15, align 8, !dbg !4551
  %139 = load i8*, i8** %15, align 8, !dbg !4552
  %140 = call i32 @c_strcasecmp(i8* %139, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.123, i64 0, i64 0)) #13, !dbg !4552
  %141 = icmp eq i32 %140, 0, !dbg !4552
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  %142 = load i8*, i8** %12, align 8, !dbg !4561
  %143 = getelementptr inbounds i8, i8* %142, i64 0, !dbg !4561
  %144 = load i8, i8* %143, align 1, !dbg !4561
  %145 = sext i8 %144 to i32, !dbg !4561
  %146 = icmp eq i32 %145, 96, !dbg !4562
  %147 = zext i1 %146 to i64, !dbg !4561
  %148 = select i1 %146, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.127, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.128, i64 0, i64 0), !dbg !4561
  store i8* %148, i8** %11, align 8, !dbg !4563
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %104
  %149 = load i32, i32* %13, align 4, !dbg !4564
  %150 = icmp eq i32 %149, 9, !dbg !4565
  %151 = zext i1 %150 to i64, !dbg !4564
  %152 = select i1 %150, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.120, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.122, i64 0, i64 0), !dbg !4564
  store i8* %152, i8** %11, align 8, !dbg !4566
  br label %originalBB14
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !4603 {
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !4606, metadata !DIExpression()), !dbg !4607
  store i8 %1, i8* %4, align 1
  call void @llvm.dbg.declare(metadata i8* %4, metadata !4608, metadata !DIExpression()), !dbg !4609
  %5 = load i8*, i8** %3, align 8, !dbg !4610
  %6 = load i8, i8* %4, align 1, !dbg !4611
  %7 = call i8* @quotearg_char_mem(i8* %5, i64 -1, i8 signext %6), !dbg !4612
  ret i8* %7, !dbg !4613
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !4614 {
  %2 = load i32, i32* @x.69
  %3 = load i32, i32* @y.70
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !4615, metadata !DIExpression()), !dbg !4616
  %11 = load i8*, i8** %10, align 8, !dbg !4617
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !4618
  %13 = load i32, i32* @x.69
  %14 = load i32, i32* @y.70
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !4619

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !4620, metadata !DIExpression()), !dbg !4616
  %22 = load i8*, i8** %21, align 8, !dbg !4617
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !4618
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_style_colon(i32, i32, i8*) #4 !dbg !4652 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca %struct.quoting_options, align 8
  %8 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !4655, metadata !DIExpression()), !dbg !4656
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !4657, metadata !DIExpression()), !dbg !4658
  store i8* %2, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !4659, metadata !DIExpression()), !dbg !4660
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %7, metadata !4661, metadata !DIExpression()), !dbg !4662
  %9 = load i32, i32* %5, align 4, !dbg !4663
  call void @quoting_options_from_style(%struct.quoting_options* sret %8, i32 %9), !dbg !4664
  %10 = bitcast %struct.quoting_options* %7 to i8*, !dbg !4664
  %11 = bitcast %struct.quoting_options* %8 to i8*, !dbg !4664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 56, i1 false), !dbg !4664
  %12 = call i32 @set_char_quoting(%struct.quoting_options* %7, i8 signext 58, i32 1), !dbg !4665
  %13 = load i32, i32* %4, align 4, !dbg !4666
  %14 = load i8*, i8** %6, align 8, !dbg !4667
  %15 = call i8* @quotearg_n_options(i32 %13, i8* %14, i64 -1, %struct.quoting_options* %7), !dbg !4668
  ret i8* %15, !dbg !4669
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret, i32) #4 !dbg !4670 {
  %3 = load i32, i32* @x.73
  %4 = load i32, i32* @y.74
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  store i32 %1, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4673, metadata !DIExpression()), !dbg !4674
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %0, metadata !4675, metadata !DIExpression()), !dbg !4676
  %12 = bitcast %struct.quoting_options* %0 to i8*, !dbg !4676
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 56, i1 false), !dbg !4676
  %13 = load i32, i32* %11, align 4, !dbg !4677
  %14 = icmp eq i32 %13, 10, !dbg !4679
  %15 = load i32, i32* @x.73
  %16 = load i32, i32* @y.74
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %40, !dbg !4680

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.73
  %25 = load i32, i32* @y.74
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  call void @abort() #12, !dbg !4681
  %32 = load i32, i32* @x.73
  %33 = load i32, i32* @y.74
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !4681

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.73
  %42 = load i32, i32* @y.74
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = load i32, i32* %11, align 4, !dbg !4682
  %50 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !4683
  store i32 %49, i32* %50, align 8, !dbg !4684
  %51 = load i32, i32* @x.73
  %52 = load i32, i32* @y.74
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !4685

originalBBalteredBB:                              ; preds = %originalBB, %2
  %59 = alloca i32, align 4
  store i32 %1, i32* %59, align 4
  call void @llvm.dbg.declare(metadata i32* %59, metadata !4686, metadata !DIExpression()), !dbg !4674
  call void @llvm.dbg.declare(metadata !4, metadata !4720, metadata !DIExpression()), !dbg !4676
  %60 = bitcast %struct.quoting_options* %0 to i8*, !dbg !4676
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 56, i1 false), !dbg !4676
  %61 = load i32, i32* %59, align 4, !dbg !4677
  %62 = icmp eq i32 %61, 10, !dbg !4679
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  call void @abort() #12, !dbg !4681
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %63 = load i32, i32* %11, align 4, !dbg !4682
  %64 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !4683
  store i32 %63, i32* %64, align 8, !dbg !4684
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !4721 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !4724, metadata !DIExpression()), !dbg !4725
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4726, metadata !DIExpression()), !dbg !4727
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !4728, metadata !DIExpression()), !dbg !4729
  %7 = load i32, i32* %4, align 4, !dbg !4730
  %8 = load i8*, i8** %5, align 8, !dbg !4731
  %9 = load i64, i64* %6, align 8, !dbg !4732
  %10 = call i8* @quotearg_n_options(i32 %7, i8* %8, i64 %9, %struct.quoting_options* @quote_quoting_options), !dbg !4733
  ret i8* %10, !dbg !4734
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !4735 {
  %3 = load i32, i32* @x.77
  %4 = load i32, i32* @y.78
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4738, metadata !DIExpression()), !dbg !4739
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !4740, metadata !DIExpression()), !dbg !4741
  %13 = load i32, i32* %11, align 4, !dbg !4742
  %14 = load i8*, i8** %12, align 8, !dbg !4743
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !4744
  %16 = load i32, i32* @x.77
  %17 = load i32, i32* @y.78
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !4745

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !4746, metadata !DIExpression()), !dbg !4739
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !4778, metadata !DIExpression()), !dbg !4741
  %26 = load i32, i32* %24, align 4, !dbg !4742
  %27 = load i8*, i8** %25, align 8, !dbg !4743
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !4744
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !4779 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !4782, metadata !DIExpression()), !dbg !4783
  %3 = load i8*, i8** %2, align 8, !dbg !4784
  %4 = call i8* @quote_n(i32 0, i8* %3), !dbg !4785
  ret i8* %4, !dbg !4786
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !4787 {
  %4 = load i32, i32* @x.81
  %5 = load i32, i32* @y.82
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !4791, metadata !DIExpression()), !dbg !4792
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !4793, metadata !DIExpression()), !dbg !4794
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !4795, metadata !DIExpression()), !dbg !4796
  %15 = load i32, i32* %12, align 4, !dbg !4797
  %16 = load i8*, i8** %13, align 8, !dbg !4798
  %17 = load i64, i64* %14, align 8, !dbg !4799
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !4800
  %19 = load i32, i32* @x.81
  %20 = load i32, i32* @y.82
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !4801

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !4802, metadata !DIExpression()), !dbg !4792
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !4805, metadata !DIExpression()), !dbg !4794
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !4806, metadata !DIExpression()), !dbg !4796
  %30 = load i32, i32* %27, align 4, !dbg !4797
  %31 = load i8*, i8** %28, align 8, !dbg !4798
  %32 = load i64, i64* %29, align 8, !dbg !4799
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !4800
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !4807 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !4808, metadata !DIExpression()), !dbg !4809
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !4810, metadata !DIExpression()), !dbg !4811
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !4812, metadata !DIExpression()), !dbg !4813
  call void @llvm.dbg.declare(metadata i8** %8, metadata !4814, metadata !DIExpression()), !dbg !4815
  %10 = load i32, i32* %5, align 4, !dbg !4816
  %11 = call i8* @setlocale_null_androidfix(i32 %10), !dbg !4817
  store i8* %11, i8** %8, align 8, !dbg !4815
  %12 = load i8*, i8** %8, align 8, !dbg !4818
  %13 = icmp eq i8* %12, null, !dbg !4820
  br i1 %13, label %14, label %69, !dbg !4821

14:                                               ; preds = %3
  %15 = load i32, i32* @x.83
  %16 = load i32, i32* @y.84
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %14, %originalBBalteredBB
  %23 = load i64, i64* %7, align 8, !dbg !4822
  %24 = icmp ugt i64 %23, 0, !dbg !4825
  %25 = load i32, i32* @x.83
  %26 = load i32, i32* @y.84
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %24, label %33, label %52, !dbg !4826

33:                                               ; preds = %originalBBpart2
  %34 = load i32, i32* @x.83
  %35 = load i32, i32* @y.84
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %6, align 8, !dbg !4827
  %43 = getelementptr inbounds i8, i8* %42, i64 0, !dbg !4827
  store i8 0, i8* %43, align 1, !dbg !4828
  %44 = load i32, i32* @x.83
  %45 = load i32, i32* @y.84
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %52, !dbg !4827

52:                                               ; preds = %originalBBpart24, %originalBBpart2
  %53 = load i32, i32* @x.83
  %54 = load i32, i32* @y.84
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  store i32 22, i32* %4, align 4, !dbg !4829
  %61 = load i32, i32* @x.83
  %62 = load i32, i32* @y.84
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %141, !dbg !4829

69:                                               ; preds = %3
  call void @llvm.dbg.declare(metadata i64* %9, metadata !4830, metadata !DIExpression()), !dbg !4832
  %70 = load i8*, i8** %8, align 8, !dbg !4833
  %71 = call i64 @strlen(i8* %70) #13, !dbg !4834
  store i64 %71, i64* %9, align 8, !dbg !4832
  %72 = load i64, i64* %9, align 8, !dbg !4835
  %73 = load i64, i64* %7, align 8, !dbg !4837
  %74 = icmp ult i64 %72, %73, !dbg !4838
  br i1 %74, label %75, label %80, !dbg !4839

75:                                               ; preds = %69
  %76 = load i8*, i8** %6, align 8, !dbg !4840
  %77 = load i8*, i8** %8, align 8, !dbg !4842
  %78 = load i64, i64* %9, align 8, !dbg !4843
  %79 = add i64 %78, 1, !dbg !4844
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 %79, i1 false), !dbg !4845
  store i32 0, i32* %4, align 4, !dbg !4846
  br label %141, !dbg !4846

80:                                               ; preds = %69
  %81 = load i32, i32* @x.83
  %82 = load i32, i32* @y.84
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %89 = load i64, i64* %7, align 8, !dbg !4847
  %90 = icmp ugt i64 %89, 0, !dbg !4850
  %91 = load i32, i32* @x.83
  %92 = load i32, i32* @y.84
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %90, label %99, label %124, !dbg !4851

99:                                               ; preds = %originalBBpart212
  %100 = load i32, i32* @x.83
  %101 = load i32, i32* @y.84
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %99, %originalBB14alteredBB
  %108 = load i8*, i8** %6, align 8, !dbg !4852
  %109 = load i8*, i8** %8, align 8, !dbg !4854
  %110 = load i64, i64* %7, align 8, !dbg !4855
  %111 = sub i64 %110, 1, !dbg !4856
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %108, i8* align 1 %109, i64 %111, i1 false), !dbg !4857
  %112 = load i8*, i8** %6, align 8, !dbg !4858
  %113 = load i64, i64* %7, align 8, !dbg !4859
  %114 = sub i64 %113, 1, !dbg !4860
  %115 = getelementptr inbounds i8, i8* %112, i64 %114, !dbg !4858
  store i8 0, i8* %115, align 1, !dbg !4861
  %116 = load i32, i32* @x.83
  %117 = load i32, i32* @y.84
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart236, label %originalBB14alteredBB

originalBBpart236:                                ; preds = %originalBB14
  br label %124, !dbg !4862

124:                                              ; preds = %originalBBpart236, %originalBBpart212
  %125 = load i32, i32* @x.83
  %126 = load i32, i32* @y.84
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %124, %originalBB38alteredBB
  store i32 34, i32* %4, align 4, !dbg !4863
  %133 = load i32, i32* @x.83
  %134 = load i32, i32* @y.84
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %141, !dbg !4863

141:                                              ; preds = %originalBBpart240, %75, %originalBBpart28
  %142 = load i32, i32* %4, align 4, !dbg !4864
  ret i32 %142, !dbg !4864

originalBBalteredBB:                              ; preds = %originalBB, %14
  %143 = load i64, i64* %7, align 8, !dbg !4822
  %144 = icmp ugt i64 %143, 0, !dbg !4825
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %145 = load i8*, i8** %6, align 8, !dbg !4827
  %146 = getelementptr inbounds i8, i8* %145, i64 0, !dbg !4827
  store i8 0, i8* %146, align 1, !dbg !4828
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  store i32 22, i32* %4, align 4, !dbg !4829
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  %147 = load i64, i64* %7, align 8, !dbg !4847
  %148 = icmp ugt i64 %147, 0, !dbg !4850
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %99
  %149 = load i8*, i8** %6, align 8, !dbg !4852
  %150 = load i8*, i8** %8, align 8, !dbg !4854
  %151 = load i64, i64* %7, align 8, !dbg !4855
  %_ = shl i64 %151, 1
  %_15 = sub i64 0, %151
  %gen = add i64 %_15, 1
  %_16 = sub i64 0, %151
  %gen17 = add i64 %_16, 1
  %_18 = sub i64 %151, 1
  %gen19 = mul i64 %_18, 1
  %_20 = sub i64 %151, 1
  %gen21 = mul i64 %_20, 1
  %_22 = sub i64 0, %151
  %gen23 = add i64 %_22, 1
  %_24 = sub i64 %151, 1
  %gen25 = mul i64 %_24, 1
  %152 = sub i64 %151, 1, !dbg !4856
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %149, i8* align 1 %150, i64 %152, i1 false), !dbg !4857
  %153 = load i8*, i8** %6, align 8, !dbg !4858
  %154 = load i64, i64* %7, align 8, !dbg !4859
  %_26 = sub i64 %154, 1
  %gen27 = mul i64 %_26, 1
  %_28 = sub i64 0, %154
  %gen29 = add i64 %_28, 1
  %_30 = sub i64 %154, 1
  %gen31 = mul i64 %_30, 1
  %_32 = shl i64 %154, 1
  %_33 = sub i64 %154, 1
  %gen34 = mul i64 %_33, 1
  %155 = sub i64 %154, 1, !dbg !4860
  %156 = getelementptr inbounds i8, i8* %153, i64 %155, !dbg !4858
  store i8 0, i8* %156, align 1, !dbg !4861
  br label %originalBB14

originalBB38alteredBB:                            ; preds = %originalBB38, %124
  store i32 34, i32* %4, align 4, !dbg !4863
  br label %originalBB38
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !4865 {
  %2 = load i32, i32* @x.85
  %3 = load i32, i32* @y.86
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !4868, metadata !DIExpression()), !dbg !4869
  call void @llvm.dbg.declare(metadata i8** %11, metadata !4870, metadata !DIExpression()), !dbg !4871
  %12 = load i32, i32* %10, align 4, !dbg !4872
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !4873
  store i8* %13, i8** %11, align 8, !dbg !4871
  %14 = load i8*, i8** %11, align 8, !dbg !4874
  %15 = load i32, i32* @x.85
  %16 = load i32, i32* @y.86
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !4875

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !4876, metadata !DIExpression()), !dbg !4869
  call void @llvm.dbg.declare(metadata i8** %24, metadata !4879, metadata !DIExpression()), !dbg !4871
  %25 = load i32, i32* %23, align 4, !dbg !4872
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !4873
  store i8* %26, i8** %24, align 8, !dbg !4871
  %27 = load i8*, i8** %24, align 8, !dbg !4874
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !4880 {
  %7 = load i32, i32* @x.87
  %8 = load i32, i32* @y.88
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !4934, metadata !DIExpression()), !dbg !4935
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !4936, metadata !DIExpression()), !dbg !4937
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !4938, metadata !DIExpression()), !dbg !4939
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !4940, metadata !DIExpression()), !dbg !4941
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !4942, metadata !DIExpression()), !dbg !4943
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !4944, metadata !DIExpression()), !dbg !4945
  %21 = load i8*, i8** %16, align 8, !dbg !4946
  %22 = icmp ne i8* %21, null, !dbg !4946
  %23 = load i32, i32* @x.87
  %24 = load i32, i32* @y.88
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %37, !dbg !4948

31:                                               ; preds = %originalBBpart2
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4949
  %33 = load i8*, i8** %16, align 8, !dbg !4950
  %34 = load i8*, i8** %17, align 8, !dbg !4951
  %35 = load i8*, i8** %18, align 8, !dbg !4952
  %36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.137, i64 0, i64 0), i8* %33, i8* %34, i8* %35), !dbg !4953
  br label %42, !dbg !4953

37:                                               ; preds = %originalBBpart2
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4954
  %39 = load i8*, i8** %17, align 8, !dbg !4955
  %40 = load i8*, i8** %18, align 8, !dbg !4956
  %41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.138, i64 0, i64 0), i8* %39, i8* %40), !dbg !4957
  br label %42

42:                                               ; preds = %37, %31
  %43 = load i32, i32* @x.87
  %44 = load i32, i32* @y.88
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %42, %originalBB1alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4958
  %52 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.139, i64 0, i64 0)) #10, !dbg !4959
  %53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %52, i32 2020), !dbg !4960
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4961
  %55 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.140, i64 0, i64 0), %struct._IO_FILE* %54), !dbg !4961
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4962
  %57 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.141, i64 0, i64 0)) #10, !dbg !4963
  %58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* %57, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.142, i64 0, i64 0)), !dbg !4964
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4965
  %60 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.140, i64 0, i64 0), %struct._IO_FILE* %59), !dbg !4965
  %61 = load i64, i64* %20, align 8, !dbg !4966
  %62 = load i32, i32* @x.87
  %63 = load i32, i32* @y.88
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  switch i64 %61, label %386 [
    i64 0, label %70
    i64 1, label %87
    i64 2, label %110
    i64 3, label %136
    i64 4, label %165
    i64 5, label %197
    i64 6, label %232
    i64 7, label %270
    i64 8, label %311
    i64 9, label %355
  ], !dbg !4967

70:                                               ; preds = %originalBBpart24
  %71 = load i32, i32* @x.87
  %72 = load i32, i32* @y.88
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %70, %originalBB6alteredBB
  %79 = load i32, i32* @x.87
  %80 = load i32, i32* @y.88
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %433, !dbg !4968

87:                                               ; preds = %originalBBpart24
  %88 = load i32, i32* @x.87
  %89 = load i32, i32* @y.88
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %87, %originalBB10alteredBB
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4970
  %97 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.143, i64 0, i64 0)) #10, !dbg !4971
  %98 = load i8**, i8*** %19, align 8, !dbg !4972
  %99 = getelementptr inbounds i8*, i8** %98, i64 0, !dbg !4972
  %100 = load i8*, i8** %99, align 8, !dbg !4972
  %101 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %96, i8* %97, i8* %100), !dbg !4973
  %102 = load i32, i32* @x.87
  %103 = load i32, i32* @y.88
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %433, !dbg !4974

110:                                              ; preds = %originalBBpart24
  %111 = load i32, i32* @x.87
  %112 = load i32, i32* @y.88
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %110, %originalBB14alteredBB
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4975
  %120 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.144, i64 0, i64 0)) #10, !dbg !4976
  %121 = load i8**, i8*** %19, align 8, !dbg !4977
  %122 = getelementptr inbounds i8*, i8** %121, i64 0, !dbg !4977
  %123 = load i8*, i8** %122, align 8, !dbg !4977
  %124 = load i8**, i8*** %19, align 8, !dbg !4978
  %125 = getelementptr inbounds i8*, i8** %124, i64 1, !dbg !4978
  %126 = load i8*, i8** %125, align 8, !dbg !4978
  %127 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %119, i8* %120, i8* %123, i8* %126), !dbg !4979
  %128 = load i32, i32* @x.87
  %129 = load i32, i32* @y.88
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %433, !dbg !4980

136:                                              ; preds = %originalBBpart24
  %137 = load i32, i32* @x.87
  %138 = load i32, i32* @y.88
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %136, %originalBB18alteredBB
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4981
  %146 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.145, i64 0, i64 0)) #10, !dbg !4982
  %147 = load i8**, i8*** %19, align 8, !dbg !4983
  %148 = getelementptr inbounds i8*, i8** %147, i64 0, !dbg !4983
  %149 = load i8*, i8** %148, align 8, !dbg !4983
  %150 = load i8**, i8*** %19, align 8, !dbg !4984
  %151 = getelementptr inbounds i8*, i8** %150, i64 1, !dbg !4984
  %152 = load i8*, i8** %151, align 8, !dbg !4984
  %153 = load i8**, i8*** %19, align 8, !dbg !4985
  %154 = getelementptr inbounds i8*, i8** %153, i64 2, !dbg !4985
  %155 = load i8*, i8** %154, align 8, !dbg !4985
  %156 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %145, i8* %146, i8* %149, i8* %152, i8* %155), !dbg !4986
  %157 = load i32, i32* @x.87
  %158 = load i32, i32* @y.88
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %433, !dbg !4987

165:                                              ; preds = %originalBBpart24
  %166 = load i32, i32* @x.87
  %167 = load i32, i32* @y.88
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %165, %originalBB22alteredBB
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4988
  %175 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.146, i64 0, i64 0)) #10, !dbg !4989
  %176 = load i8**, i8*** %19, align 8, !dbg !4990
  %177 = getelementptr inbounds i8*, i8** %176, i64 0, !dbg !4990
  %178 = load i8*, i8** %177, align 8, !dbg !4990
  %179 = load i8**, i8*** %19, align 8, !dbg !4991
  %180 = getelementptr inbounds i8*, i8** %179, i64 1, !dbg !4991
  %181 = load i8*, i8** %180, align 8, !dbg !4991
  %182 = load i8**, i8*** %19, align 8, !dbg !4992
  %183 = getelementptr inbounds i8*, i8** %182, i64 2, !dbg !4992
  %184 = load i8*, i8** %183, align 8, !dbg !4992
  %185 = load i8**, i8*** %19, align 8, !dbg !4993
  %186 = getelementptr inbounds i8*, i8** %185, i64 3, !dbg !4993
  %187 = load i8*, i8** %186, align 8, !dbg !4993
  %188 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %174, i8* %175, i8* %178, i8* %181, i8* %184, i8* %187), !dbg !4994
  %189 = load i32, i32* @x.87
  %190 = load i32, i32* @y.88
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %433, !dbg !4995

197:                                              ; preds = %originalBBpart24
  %198 = load i32, i32* @x.87
  %199 = load i32, i32* @y.88
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %197, %originalBB26alteredBB
  %206 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4996
  %207 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.147, i64 0, i64 0)) #10, !dbg !4997
  %208 = load i8**, i8*** %19, align 8, !dbg !4998
  %209 = getelementptr inbounds i8*, i8** %208, i64 0, !dbg !4998
  %210 = load i8*, i8** %209, align 8, !dbg !4998
  %211 = load i8**, i8*** %19, align 8, !dbg !4999
  %212 = getelementptr inbounds i8*, i8** %211, i64 1, !dbg !4999
  %213 = load i8*, i8** %212, align 8, !dbg !4999
  %214 = load i8**, i8*** %19, align 8, !dbg !5000
  %215 = getelementptr inbounds i8*, i8** %214, i64 2, !dbg !5000
  %216 = load i8*, i8** %215, align 8, !dbg !5000
  %217 = load i8**, i8*** %19, align 8, !dbg !5001
  %218 = getelementptr inbounds i8*, i8** %217, i64 3, !dbg !5001
  %219 = load i8*, i8** %218, align 8, !dbg !5001
  %220 = load i8**, i8*** %19, align 8, !dbg !5002
  %221 = getelementptr inbounds i8*, i8** %220, i64 4, !dbg !5002
  %222 = load i8*, i8** %221, align 8, !dbg !5002
  %223 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %206, i8* %207, i8* %210, i8* %213, i8* %216, i8* %219, i8* %222), !dbg !5003
  %224 = load i32, i32* @x.87
  %225 = load i32, i32* @y.88
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %433, !dbg !5004

232:                                              ; preds = %originalBBpart24
  %233 = load i32, i32* @x.87
  %234 = load i32, i32* @y.88
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %232, %originalBB30alteredBB
  %241 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !5005
  %242 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.148, i64 0, i64 0)) #10, !dbg !5006
  %243 = load i8**, i8*** %19, align 8, !dbg !5007
  %244 = getelementptr inbounds i8*, i8** %243, i64 0, !dbg !5007
  %245 = load i8*, i8** %244, align 8, !dbg !5007
  %246 = load i8**, i8*** %19, align 8, !dbg !5008
  %247 = getelementptr inbounds i8*, i8** %246, i64 1, !dbg !5008
  %248 = load i8*, i8** %247, align 8, !dbg !5008
  %249 = load i8**, i8*** %19, align 8, !dbg !5009
  %250 = getelementptr inbounds i8*, i8** %249, i64 2, !dbg !5009
  %251 = load i8*, i8** %250, align 8, !dbg !5009
  %252 = load i8**, i8*** %19, align 8, !dbg !5010
  %253 = getelementptr inbounds i8*, i8** %252, i64 3, !dbg !5010
  %254 = load i8*, i8** %253, align 8, !dbg !5010
  %255 = load i8**, i8*** %19, align 8, !dbg !5011
  %256 = getelementptr inbounds i8*, i8** %255, i64 4, !dbg !5011
  %257 = load i8*, i8** %256, align 8, !dbg !5011
  %258 = load i8**, i8*** %19, align 8, !dbg !5012
  %259 = getelementptr inbounds i8*, i8** %258, i64 5, !dbg !5012
  %260 = load i8*, i8** %259, align 8, !dbg !5012
  %261 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %241, i8* %242, i8* %245, i8* %248, i8* %251, i8* %254, i8* %257, i8* %260), !dbg !5013
  %262 = load i32, i32* @x.87
  %263 = load i32, i32* @y.88
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %433, !dbg !5014

270:                                              ; preds = %originalBBpart24
  %271 = load i32, i32* @x.87
  %272 = load i32, i32* @y.88
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %270, %originalBB34alteredBB
  %279 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !5015
  %280 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.149, i64 0, i64 0)) #10, !dbg !5016
  %281 = load i8**, i8*** %19, align 8, !dbg !5017
  %282 = getelementptr inbounds i8*, i8** %281, i64 0, !dbg !5017
  %283 = load i8*, i8** %282, align 8, !dbg !5017
  %284 = load i8**, i8*** %19, align 8, !dbg !5018
  %285 = getelementptr inbounds i8*, i8** %284, i64 1, !dbg !5018
  %286 = load i8*, i8** %285, align 8, !dbg !5018
  %287 = load i8**, i8*** %19, align 8, !dbg !5019
  %288 = getelementptr inbounds i8*, i8** %287, i64 2, !dbg !5019
  %289 = load i8*, i8** %288, align 8, !dbg !5019
  %290 = load i8**, i8*** %19, align 8, !dbg !5020
  %291 = getelementptr inbounds i8*, i8** %290, i64 3, !dbg !5020
  %292 = load i8*, i8** %291, align 8, !dbg !5020
  %293 = load i8**, i8*** %19, align 8, !dbg !5021
  %294 = getelementptr inbounds i8*, i8** %293, i64 4, !dbg !5021
  %295 = load i8*, i8** %294, align 8, !dbg !5021
  %296 = load i8**, i8*** %19, align 8, !dbg !5022
  %297 = getelementptr inbounds i8*, i8** %296, i64 5, !dbg !5022
  %298 = load i8*, i8** %297, align 8, !dbg !5022
  %299 = load i8**, i8*** %19, align 8, !dbg !5023
  %300 = getelementptr inbounds i8*, i8** %299, i64 6, !dbg !5023
  %301 = load i8*, i8** %300, align 8, !dbg !5023
  %302 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %279, i8* %280, i8* %283, i8* %286, i8* %289, i8* %292, i8* %295, i8* %298, i8* %301), !dbg !5024
  %303 = load i32, i32* @x.87
  %304 = load i32, i32* @y.88
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %433, !dbg !5025

311:                                              ; preds = %originalBBpart24
  %312 = load i32, i32* @x.87
  %313 = load i32, i32* @y.88
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %311, %originalBB38alteredBB
  %320 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !5026
  %321 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.150, i64 0, i64 0)) #10, !dbg !5027
  %322 = load i8**, i8*** %19, align 8, !dbg !5028
  %323 = getelementptr inbounds i8*, i8** %322, i64 0, !dbg !5028
  %324 = load i8*, i8** %323, align 8, !dbg !5028
  %325 = load i8**, i8*** %19, align 8, !dbg !5029
  %326 = getelementptr inbounds i8*, i8** %325, i64 1, !dbg !5029
  %327 = load i8*, i8** %326, align 8, !dbg !5029
  %328 = load i8**, i8*** %19, align 8, !dbg !5030
  %329 = getelementptr inbounds i8*, i8** %328, i64 2, !dbg !5030
  %330 = load i8*, i8** %329, align 8, !dbg !5030
  %331 = load i8**, i8*** %19, align 8, !dbg !5031
  %332 = getelementptr inbounds i8*, i8** %331, i64 3, !dbg !5031
  %333 = load i8*, i8** %332, align 8, !dbg !5031
  %334 = load i8**, i8*** %19, align 8, !dbg !5032
  %335 = getelementptr inbounds i8*, i8** %334, i64 4, !dbg !5032
  %336 = load i8*, i8** %335, align 8, !dbg !5032
  %337 = load i8**, i8*** %19, align 8, !dbg !5033
  %338 = getelementptr inbounds i8*, i8** %337, i64 5, !dbg !5033
  %339 = load i8*, i8** %338, align 8, !dbg !5033
  %340 = load i8**, i8*** %19, align 8, !dbg !5034
  %341 = getelementptr inbounds i8*, i8** %340, i64 6, !dbg !5034
  %342 = load i8*, i8** %341, align 8, !dbg !5034
  %343 = load i8**, i8*** %19, align 8, !dbg !5035
  %344 = getelementptr inbounds i8*, i8** %343, i64 7, !dbg !5035
  %345 = load i8*, i8** %344, align 8, !dbg !5035
  %346 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %320, i8* %321, i8* %324, i8* %327, i8* %330, i8* %333, i8* %336, i8* %339, i8* %342, i8* %345), !dbg !5036
  %347 = load i32, i32* @x.87
  %348 = load i32, i32* @y.88
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %433, !dbg !5037

355:                                              ; preds = %originalBBpart24
  %356 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !5038
  %357 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.151, i64 0, i64 0)) #10, !dbg !5039
  %358 = load i8**, i8*** %19, align 8, !dbg !5040
  %359 = getelementptr inbounds i8*, i8** %358, i64 0, !dbg !5040
  %360 = load i8*, i8** %359, align 8, !dbg !5040
  %361 = load i8**, i8*** %19, align 8, !dbg !5041
  %362 = getelementptr inbounds i8*, i8** %361, i64 1, !dbg !5041
  %363 = load i8*, i8** %362, align 8, !dbg !5041
  %364 = load i8**, i8*** %19, align 8, !dbg !5042
  %365 = getelementptr inbounds i8*, i8** %364, i64 2, !dbg !5042
  %366 = load i8*, i8** %365, align 8, !dbg !5042
  %367 = load i8**, i8*** %19, align 8, !dbg !5043
  %368 = getelementptr inbounds i8*, i8** %367, i64 3, !dbg !5043
  %369 = load i8*, i8** %368, align 8, !dbg !5043
  %370 = load i8**, i8*** %19, align 8, !dbg !5044
  %371 = getelementptr inbounds i8*, i8** %370, i64 4, !dbg !5044
  %372 = load i8*, i8** %371, align 8, !dbg !5044
  %373 = load i8**, i8*** %19, align 8, !dbg !5045
  %374 = getelementptr inbounds i8*, i8** %373, i64 5, !dbg !5045
  %375 = load i8*, i8** %374, align 8, !dbg !5045
  %376 = load i8**, i8*** %19, align 8, !dbg !5046
  %377 = getelementptr inbounds i8*, i8** %376, i64 6, !dbg !5046
  %378 = load i8*, i8** %377, align 8, !dbg !5046
  %379 = load i8**, i8*** %19, align 8, !dbg !5047
  %380 = getelementptr inbounds i8*, i8** %379, i64 7, !dbg !5047
  %381 = load i8*, i8** %380, align 8, !dbg !5047
  %382 = load i8**, i8*** %19, align 8, !dbg !5048
  %383 = getelementptr inbounds i8*, i8** %382, i64 8, !dbg !5048
  %384 = load i8*, i8** %383, align 8, !dbg !5048
  %385 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %356, i8* %357, i8* %360, i8* %363, i8* %366, i8* %369, i8* %372, i8* %375, i8* %378, i8* %381, i8* %384), !dbg !5049
  br label %433, !dbg !5050

386:                                              ; preds = %originalBBpart24
  %387 = load i32, i32* @x.87
  %388 = load i32, i32* @y.88
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %386, %originalBB42alteredBB
  %395 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !5051
  %396 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.152, i64 0, i64 0)) #10, !dbg !5052
  %397 = load i8**, i8*** %19, align 8, !dbg !5053
  %398 = getelementptr inbounds i8*, i8** %397, i64 0, !dbg !5053
  %399 = load i8*, i8** %398, align 8, !dbg !5053
  %400 = load i8**, i8*** %19, align 8, !dbg !5054
  %401 = getelementptr inbounds i8*, i8** %400, i64 1, !dbg !5054
  %402 = load i8*, i8** %401, align 8, !dbg !5054
  %403 = load i8**, i8*** %19, align 8, !dbg !5055
  %404 = getelementptr inbounds i8*, i8** %403, i64 2, !dbg !5055
  %405 = load i8*, i8** %404, align 8, !dbg !5055
  %406 = load i8**, i8*** %19, align 8, !dbg !5056
  %407 = getelementptr inbounds i8*, i8** %406, i64 3, !dbg !5056
  %408 = load i8*, i8** %407, align 8, !dbg !5056
  %409 = load i8**, i8*** %19, align 8, !dbg !5057
  %410 = getelementptr inbounds i8*, i8** %409, i64 4, !dbg !5057
  %411 = load i8*, i8** %410, align 8, !dbg !5057
  %412 = load i8**, i8*** %19, align 8, !dbg !5058
  %413 = getelementptr inbounds i8*, i8** %412, i64 5, !dbg !5058
  %414 = load i8*, i8** %413, align 8, !dbg !5058
  %415 = load i8**, i8*** %19, align 8, !dbg !5059
  %416 = getelementptr inbounds i8*, i8** %415, i64 6, !dbg !5059
  %417 = load i8*, i8** %416, align 8, !dbg !5059
  %418 = load i8**, i8*** %19, align 8, !dbg !5060
  %419 = getelementptr inbounds i8*, i8** %418, i64 7, !dbg !5060
  %420 = load i8*, i8** %419, align 8, !dbg !5060
  %421 = load i8**, i8*** %19, align 8, !dbg !5061
  %422 = getelementptr inbounds i8*, i8** %421, i64 8, !dbg !5061
  %423 = load i8*, i8** %422, align 8, !dbg !5061
  %424 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %395, i8* %396, i8* %399, i8* %402, i8* %405, i8* %408, i8* %411, i8* %414, i8* %417, i8* %420, i8* %423), !dbg !5062
  %425 = load i32, i32* @x.87
  %426 = load i32, i32* @y.88
  %427 = sub i32 %425, 1
  %428 = mul i32 %425, %427
  %429 = urem i32 %428, 2
  %430 = icmp eq i32 %429, 0
  %431 = icmp slt i32 %426, 10
  %432 = or i1 %430, %431
  br i1 %432, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %433, !dbg !5063

433:                                              ; preds = %originalBBpart244, %355, %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216, %originalBBpart212, %originalBBpart28
  %434 = load i32, i32* @x.87
  %435 = load i32, i32* @y.88
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %433, %originalBB46alteredBB
  %442 = load i32, i32* @x.87
  %443 = load i32, i32* @y.88
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  ret void, !dbg !5064

originalBBalteredBB:                              ; preds = %originalBB, %6
  %450 = alloca %struct._IO_FILE*, align 8
  %451 = alloca i8*, align 8
  %452 = alloca i8*, align 8
  %453 = alloca i8*, align 8
  %454 = alloca i8**, align 8
  %455 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %450, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %450, metadata !5065, metadata !DIExpression()), !dbg !4935
  store i8* %1, i8** %451, align 8
  call void @llvm.dbg.declare(metadata i8** %451, metadata !5104, metadata !DIExpression()), !dbg !4937
  store i8* %2, i8** %452, align 8
  call void @llvm.dbg.declare(metadata i8** %452, metadata !5105, metadata !DIExpression()), !dbg !4939
  store i8* %3, i8** %453, align 8
  call void @llvm.dbg.declare(metadata i8** %453, metadata !5106, metadata !DIExpression()), !dbg !4941
  store i8** %4, i8*** %454, align 8
  call void @llvm.dbg.declare(metadata i8*** %454, metadata !5107, metadata !DIExpression()), !dbg !4943
  store i64 %5, i64* %455, align 8
  call void @llvm.dbg.declare(metadata i64* %455, metadata !5108, metadata !DIExpression()), !dbg !4945
  %456 = load i8*, i8** %451, align 8, !dbg !4946
  %457 = icmp ne i8* %456, null, !dbg !4946
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %42
  %458 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4958
  %459 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.139, i64 0, i64 0)) #10, !dbg !4959
  %460 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %458, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %459, i32 2020), !dbg !4960
  %461 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4961
  %462 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.140, i64 0, i64 0), %struct._IO_FILE* %461), !dbg !4961
  %463 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4962
  %464 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.141, i64 0, i64 0)) #10, !dbg !4963
  %465 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %463, i8* %464, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.142, i64 0, i64 0)), !dbg !4964
  %466 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4965
  %467 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.140, i64 0, i64 0), %struct._IO_FILE* %466), !dbg !4965
  %468 = load i64, i64* %20, align 8, !dbg !4966
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %70
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %87
  %469 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4970
  %470 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.143, i64 0, i64 0)) #10, !dbg !4971
  %471 = load i8**, i8*** %19, align 8, !dbg !4972
  %472 = getelementptr inbounds i8*, i8** %471, i64 0, !dbg !4972
  %473 = load i8*, i8** %472, align 8, !dbg !4972
  %474 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %469, i8* %470, i8* %473), !dbg !4973
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %110
  %475 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4975
  %476 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.144, i64 0, i64 0)) #10, !dbg !4976
  %477 = load i8**, i8*** %19, align 8, !dbg !4977
  %478 = getelementptr inbounds i8*, i8** %477, i64 0, !dbg !4977
  %479 = load i8*, i8** %478, align 8, !dbg !4977
  %480 = load i8**, i8*** %19, align 8, !dbg !4978
  %481 = getelementptr inbounds i8*, i8** %480, i64 1, !dbg !4978
  %482 = load i8*, i8** %481, align 8, !dbg !4978
  %483 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %475, i8* %476, i8* %479, i8* %482), !dbg !4979
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %136
  %484 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4981
  %485 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.145, i64 0, i64 0)) #10, !dbg !4982
  %486 = load i8**, i8*** %19, align 8, !dbg !4983
  %487 = getelementptr inbounds i8*, i8** %486, i64 0, !dbg !4983
  %488 = load i8*, i8** %487, align 8, !dbg !4983
  %489 = load i8**, i8*** %19, align 8, !dbg !4984
  %490 = getelementptr inbounds i8*, i8** %489, i64 1, !dbg !4984
  %491 = load i8*, i8** %490, align 8, !dbg !4984
  %492 = load i8**, i8*** %19, align 8, !dbg !4985
  %493 = getelementptr inbounds i8*, i8** %492, i64 2, !dbg !4985
  %494 = load i8*, i8** %493, align 8, !dbg !4985
  %495 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %484, i8* %485, i8* %488, i8* %491, i8* %494), !dbg !4986
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %165
  %496 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4988
  %497 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.146, i64 0, i64 0)) #10, !dbg !4989
  %498 = load i8**, i8*** %19, align 8, !dbg !4990
  %499 = getelementptr inbounds i8*, i8** %498, i64 0, !dbg !4990
  %500 = load i8*, i8** %499, align 8, !dbg !4990
  %501 = load i8**, i8*** %19, align 8, !dbg !4991
  %502 = getelementptr inbounds i8*, i8** %501, i64 1, !dbg !4991
  %503 = load i8*, i8** %502, align 8, !dbg !4991
  %504 = load i8**, i8*** %19, align 8, !dbg !4992
  %505 = getelementptr inbounds i8*, i8** %504, i64 2, !dbg !4992
  %506 = load i8*, i8** %505, align 8, !dbg !4992
  %507 = load i8**, i8*** %19, align 8, !dbg !4993
  %508 = getelementptr inbounds i8*, i8** %507, i64 3, !dbg !4993
  %509 = load i8*, i8** %508, align 8, !dbg !4993
  %510 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %496, i8* %497, i8* %500, i8* %503, i8* %506, i8* %509), !dbg !4994
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %197
  %511 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !4996
  %512 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.147, i64 0, i64 0)) #10, !dbg !4997
  %513 = load i8**, i8*** %19, align 8, !dbg !4998
  %514 = getelementptr inbounds i8*, i8** %513, i64 0, !dbg !4998
  %515 = load i8*, i8** %514, align 8, !dbg !4998
  %516 = load i8**, i8*** %19, align 8, !dbg !4999
  %517 = getelementptr inbounds i8*, i8** %516, i64 1, !dbg !4999
  %518 = load i8*, i8** %517, align 8, !dbg !4999
  %519 = load i8**, i8*** %19, align 8, !dbg !5000
  %520 = getelementptr inbounds i8*, i8** %519, i64 2, !dbg !5000
  %521 = load i8*, i8** %520, align 8, !dbg !5000
  %522 = load i8**, i8*** %19, align 8, !dbg !5001
  %523 = getelementptr inbounds i8*, i8** %522, i64 3, !dbg !5001
  %524 = load i8*, i8** %523, align 8, !dbg !5001
  %525 = load i8**, i8*** %19, align 8, !dbg !5002
  %526 = getelementptr inbounds i8*, i8** %525, i64 4, !dbg !5002
  %527 = load i8*, i8** %526, align 8, !dbg !5002
  %528 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %511, i8* %512, i8* %515, i8* %518, i8* %521, i8* %524, i8* %527), !dbg !5003
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %232
  %529 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !5005
  %530 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.148, i64 0, i64 0)) #10, !dbg !5006
  %531 = load i8**, i8*** %19, align 8, !dbg !5007
  %532 = getelementptr inbounds i8*, i8** %531, i64 0, !dbg !5007
  %533 = load i8*, i8** %532, align 8, !dbg !5007
  %534 = load i8**, i8*** %19, align 8, !dbg !5008
  %535 = getelementptr inbounds i8*, i8** %534, i64 1, !dbg !5008
  %536 = load i8*, i8** %535, align 8, !dbg !5008
  %537 = load i8**, i8*** %19, align 8, !dbg !5009
  %538 = getelementptr inbounds i8*, i8** %537, i64 2, !dbg !5009
  %539 = load i8*, i8** %538, align 8, !dbg !5009
  %540 = load i8**, i8*** %19, align 8, !dbg !5010
  %541 = getelementptr inbounds i8*, i8** %540, i64 3, !dbg !5010
  %542 = load i8*, i8** %541, align 8, !dbg !5010
  %543 = load i8**, i8*** %19, align 8, !dbg !5011
  %544 = getelementptr inbounds i8*, i8** %543, i64 4, !dbg !5011
  %545 = load i8*, i8** %544, align 8, !dbg !5011
  %546 = load i8**, i8*** %19, align 8, !dbg !5012
  %547 = getelementptr inbounds i8*, i8** %546, i64 5, !dbg !5012
  %548 = load i8*, i8** %547, align 8, !dbg !5012
  %549 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %529, i8* %530, i8* %533, i8* %536, i8* %539, i8* %542, i8* %545, i8* %548), !dbg !5013
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %270
  %550 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !5015
  %551 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.149, i64 0, i64 0)) #10, !dbg !5016
  %552 = load i8**, i8*** %19, align 8, !dbg !5017
  %553 = getelementptr inbounds i8*, i8** %552, i64 0, !dbg !5017
  %554 = load i8*, i8** %553, align 8, !dbg !5017
  %555 = load i8**, i8*** %19, align 8, !dbg !5018
  %556 = getelementptr inbounds i8*, i8** %555, i64 1, !dbg !5018
  %557 = load i8*, i8** %556, align 8, !dbg !5018
  %558 = load i8**, i8*** %19, align 8, !dbg !5019
  %559 = getelementptr inbounds i8*, i8** %558, i64 2, !dbg !5019
  %560 = load i8*, i8** %559, align 8, !dbg !5019
  %561 = load i8**, i8*** %19, align 8, !dbg !5020
  %562 = getelementptr inbounds i8*, i8** %561, i64 3, !dbg !5020
  %563 = load i8*, i8** %562, align 8, !dbg !5020
  %564 = load i8**, i8*** %19, align 8, !dbg !5021
  %565 = getelementptr inbounds i8*, i8** %564, i64 4, !dbg !5021
  %566 = load i8*, i8** %565, align 8, !dbg !5021
  %567 = load i8**, i8*** %19, align 8, !dbg !5022
  %568 = getelementptr inbounds i8*, i8** %567, i64 5, !dbg !5022
  %569 = load i8*, i8** %568, align 8, !dbg !5022
  %570 = load i8**, i8*** %19, align 8, !dbg !5023
  %571 = getelementptr inbounds i8*, i8** %570, i64 6, !dbg !5023
  %572 = load i8*, i8** %571, align 8, !dbg !5023
  %573 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %550, i8* %551, i8* %554, i8* %557, i8* %560, i8* %563, i8* %566, i8* %569, i8* %572), !dbg !5024
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %311
  %574 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !5026
  %575 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.150, i64 0, i64 0)) #10, !dbg !5027
  %576 = load i8**, i8*** %19, align 8, !dbg !5028
  %577 = getelementptr inbounds i8*, i8** %576, i64 0, !dbg !5028
  %578 = load i8*, i8** %577, align 8, !dbg !5028
  %579 = load i8**, i8*** %19, align 8, !dbg !5029
  %580 = getelementptr inbounds i8*, i8** %579, i64 1, !dbg !5029
  %581 = load i8*, i8** %580, align 8, !dbg !5029
  %582 = load i8**, i8*** %19, align 8, !dbg !5030
  %583 = getelementptr inbounds i8*, i8** %582, i64 2, !dbg !5030
  %584 = load i8*, i8** %583, align 8, !dbg !5030
  %585 = load i8**, i8*** %19, align 8, !dbg !5031
  %586 = getelementptr inbounds i8*, i8** %585, i64 3, !dbg !5031
  %587 = load i8*, i8** %586, align 8, !dbg !5031
  %588 = load i8**, i8*** %19, align 8, !dbg !5032
  %589 = getelementptr inbounds i8*, i8** %588, i64 4, !dbg !5032
  %590 = load i8*, i8** %589, align 8, !dbg !5032
  %591 = load i8**, i8*** %19, align 8, !dbg !5033
  %592 = getelementptr inbounds i8*, i8** %591, i64 5, !dbg !5033
  %593 = load i8*, i8** %592, align 8, !dbg !5033
  %594 = load i8**, i8*** %19, align 8, !dbg !5034
  %595 = getelementptr inbounds i8*, i8** %594, i64 6, !dbg !5034
  %596 = load i8*, i8** %595, align 8, !dbg !5034
  %597 = load i8**, i8*** %19, align 8, !dbg !5035
  %598 = getelementptr inbounds i8*, i8** %597, i64 7, !dbg !5035
  %599 = load i8*, i8** %598, align 8, !dbg !5035
  %600 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %574, i8* %575, i8* %578, i8* %581, i8* %584, i8* %587, i8* %590, i8* %593, i8* %596, i8* %599), !dbg !5036
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %386
  %601 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !5051
  %602 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.152, i64 0, i64 0)) #10, !dbg !5052
  %603 = load i8**, i8*** %19, align 8, !dbg !5053
  %604 = getelementptr inbounds i8*, i8** %603, i64 0, !dbg !5053
  %605 = load i8*, i8** %604, align 8, !dbg !5053
  %606 = load i8**, i8*** %19, align 8, !dbg !5054
  %607 = getelementptr inbounds i8*, i8** %606, i64 1, !dbg !5054
  %608 = load i8*, i8** %607, align 8, !dbg !5054
  %609 = load i8**, i8*** %19, align 8, !dbg !5055
  %610 = getelementptr inbounds i8*, i8** %609, i64 2, !dbg !5055
  %611 = load i8*, i8** %610, align 8, !dbg !5055
  %612 = load i8**, i8*** %19, align 8, !dbg !5056
  %613 = getelementptr inbounds i8*, i8** %612, i64 3, !dbg !5056
  %614 = load i8*, i8** %613, align 8, !dbg !5056
  %615 = load i8**, i8*** %19, align 8, !dbg !5057
  %616 = getelementptr inbounds i8*, i8** %615, i64 4, !dbg !5057
  %617 = load i8*, i8** %616, align 8, !dbg !5057
  %618 = load i8**, i8*** %19, align 8, !dbg !5058
  %619 = getelementptr inbounds i8*, i8** %618, i64 5, !dbg !5058
  %620 = load i8*, i8** %619, align 8, !dbg !5058
  %621 = load i8**, i8*** %19, align 8, !dbg !5059
  %622 = getelementptr inbounds i8*, i8** %621, i64 6, !dbg !5059
  %623 = load i8*, i8** %622, align 8, !dbg !5059
  %624 = load i8**, i8*** %19, align 8, !dbg !5060
  %625 = getelementptr inbounds i8*, i8** %624, i64 7, !dbg !5060
  %626 = load i8*, i8** %625, align 8, !dbg !5060
  %627 = load i8**, i8*** %19, align 8, !dbg !5061
  %628 = getelementptr inbounds i8*, i8** %627, i64 8, !dbg !5061
  %629 = load i8*, i8** %628, align 8, !dbg !5061
  %630 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %601, i8* %602, i8* %605, i8* %608, i8* %611, i8* %614, i8* %617, i8* %620, i8* %623, i8* %626, i8* %629), !dbg !5062
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %433
  br label %originalBB46
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !5109 {
  %6 = alloca %struct._IO_FILE*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.__va_list_tag*, align 8
  %11 = alloca i64, align 8
  %12 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %6, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %6, metadata !5119, metadata !DIExpression()), !dbg !5120
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !5121, metadata !DIExpression()), !dbg !5122
  store i8* %2, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !5123, metadata !DIExpression()), !dbg !5124
  store i8* %3, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !5125, metadata !DIExpression()), !dbg !5126
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %10, metadata !5127, metadata !DIExpression()), !dbg !5128
  call void @llvm.dbg.declare(metadata i64* %11, metadata !5129, metadata !DIExpression()), !dbg !5130
  call void @llvm.dbg.declare(metadata [10 x i8*]* %12, metadata !5131, metadata !DIExpression()), !dbg !5133
  store i64 0, i64* %11, align 8, !dbg !5134
  br label %13, !dbg !5136

13:                                               ; preds = %originalBBpart228, %5
  %14 = load i32, i32* @x.89
  %15 = load i32, i32* @y.90
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %13, %originalBBalteredBB
  %22 = load i64, i64* %11, align 8, !dbg !5137
  %23 = icmp ult i64 %22, 10, !dbg !5139
  %24 = load i32, i32* @x.89
  %25 = load i32, i32* @y.90
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %118, !dbg !5140

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.89
  %34 = load i32, i32* @y.90
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct.__va_list_tag*, %struct.__va_list_tag** %10, align 8, !dbg !5141
  %42 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %41, i32 0, i32 0, !dbg !5141
  %43 = load i32, i32* %42, align 8, !dbg !5141
  %44 = icmp ule i32 %43, 40, !dbg !5141
  %45 = load i32, i32* @x.89
  %46 = load i32, i32* @y.90
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %44, label %53, label %75, !dbg !5141

53:                                               ; preds = %originalBBpart24
  %54 = load i32, i32* @x.89
  %55 = load i32, i32* @y.90
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %41, i32 0, i32 3, !dbg !5141
  %63 = load i8*, i8** %62, align 8, !dbg !5141
  %64 = getelementptr i8, i8* %63, i32 %43, !dbg !5141
  %65 = bitcast i8* %64 to i8**, !dbg !5141
  %66 = add i32 %43, 8, !dbg !5141
  store i32 %66, i32* %42, align 8, !dbg !5141
  %67 = load i32, i32* @x.89
  %68 = load i32, i32* @y.90
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart210, label %originalBB6alteredBB

originalBBpart210:                                ; preds = %originalBB6
  br label %96, !dbg !5141

75:                                               ; preds = %originalBBpart24
  %76 = load i32, i32* @x.89
  %77 = load i32, i32* @y.90
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %75, %originalBB12alteredBB
  %84 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %41, i32 0, i32 2, !dbg !5141
  %85 = load i8*, i8** %84, align 8, !dbg !5141
  %86 = bitcast i8* %85 to i8**, !dbg !5141
  %87 = getelementptr i8, i8* %85, i32 8, !dbg !5141
  store i8* %87, i8** %84, align 8, !dbg !5141
  %88 = load i32, i32* @x.89
  %89 = load i32, i32* @y.90
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br label %96, !dbg !5141

96:                                               ; preds = %originalBBpart214, %originalBBpart210
  %97 = phi i8** [ %65, %originalBBpart210 ], [ %86, %originalBBpart214 ], !dbg !5141
  %98 = load i32, i32* @x.89
  %99 = load i32, i32* @y.90
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %96, %originalBB16alteredBB
  %106 = load i8*, i8** %97, align 8, !dbg !5141
  %107 = load i64, i64* %11, align 8, !dbg !5142
  %108 = getelementptr inbounds [10 x i8*], [10 x i8*]* %12, i64 0, i64 %107, !dbg !5143
  store i8* %106, i8** %108, align 8, !dbg !5144
  %109 = icmp ne i8* %106, null, !dbg !5145
  %110 = load i32, i32* @x.89
  %111 = load i32, i32* @y.90
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br label %118

118:                                              ; preds = %originalBBpart218, %originalBBpart2
  %119 = phi i1 [ false, %originalBBpart2 ], [ %109, %originalBBpart218 ], !dbg !5146
  %120 = load i32, i32* @x.89
  %121 = load i32, i32* @y.90
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %118, %originalBB20alteredBB
  %128 = load i32, i32* @x.89
  %129 = load i32, i32* @y.90
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br i1 %119, label %136, label %156, !dbg !5147

136:                                              ; preds = %originalBBpart222
  br label %137, !dbg !5147

137:                                              ; preds = %136
  %138 = load i32, i32* @x.89
  %139 = load i32, i32* @y.90
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %137, %originalBB24alteredBB
  %146 = load i64, i64* %11, align 8, !dbg !5148
  %147 = add i64 %146, 1, !dbg !5148
  store i64 %147, i64* %11, align 8, !dbg !5148
  %148 = load i32, i32* @x.89
  %149 = load i32, i32* @y.90
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart228, label %originalBB24alteredBB

originalBBpart228:                                ; preds = %originalBB24
  br label %13, !dbg !5149, !llvm.loop !5150

156:                                              ; preds = %originalBBpart222
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !dbg !5152
  %158 = load i8*, i8** %7, align 8, !dbg !5153
  %159 = load i8*, i8** %8, align 8, !dbg !5154
  %160 = load i8*, i8** %9, align 8, !dbg !5155
  %161 = getelementptr inbounds [10 x i8*], [10 x i8*]* %12, i64 0, i64 0, !dbg !5156
  %162 = load i64, i64* %11, align 8, !dbg !5157
  call void @version_etc_arn(%struct._IO_FILE* %157, i8* %158, i8* %159, i8* %160, i8** %161, i64 %162), !dbg !5158
  ret void, !dbg !5159

originalBBalteredBB:                              ; preds = %originalBB, %13
  %163 = load i64, i64* %11, align 8, !dbg !5137
  %164 = icmp ult i64 %163, 10, !dbg !5139
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %165 = load %struct.__va_list_tag*, %struct.__va_list_tag** %10, align 8, !dbg !5141
  %166 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %165, i32 0, i32 0, !dbg !5141
  %167 = load i32, i32* %166, align 8, !dbg !5141
  %168 = icmp ule i32 %167, 40, !dbg !5141
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %169 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %41, i32 0, i32 3, !dbg !5141
  %170 = load i8*, i8** %169, align 8, !dbg !5141
  %171 = getelementptr i8, i8* %170, i32 %43, !dbg !5141
  %172 = bitcast i8* %171 to i8**, !dbg !5141
  %_ = shl i32 %43, 8
  %_7 = shl i32 %43, 8
  %_8 = shl i32 %43, 8
  %173 = add i32 %43, 8, !dbg !5141
  store i32 %173, i32* %42, align 8, !dbg !5141
  br label %originalBB6

originalBB12alteredBB:                            ; preds = %originalBB12, %75
  %174 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %41, i32 0, i32 2, !dbg !5141
  %175 = load i8*, i8** %174, align 8, !dbg !5141
  %176 = bitcast i8* %175 to i8**, !dbg !5141
  %177 = getelementptr i8, i8* %175, i32 8, !dbg !5141
  store i8* %177, i8** %174, align 8, !dbg !5141
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %96
  %178 = load i8*, i8** %97, align 8, !dbg !5141
  %179 = load i64, i64* %11, align 8, !dbg !5142
  %180 = getelementptr inbounds [10 x i8*], [10 x i8*]* %12, i64 0, i64 %179, !dbg !5143
  store i8* %178, i8** %180, align 8, !dbg !5144
  %181 = icmp ne i8* %178, null, !dbg !5145
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %118
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %137
  %182 = load i64, i64* %11, align 8, !dbg !5148
  %_25 = sub i64 %182, 1
  %gen = mul i64 %_25, 1
  %_26 = shl i64 %182, 1
  %183 = add i64 %182, 1, !dbg !5148
  store i64 %183, i64* %11, align 8, !dbg !5148
  br label %originalBB24
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !5160 {
  %5 = load i32, i32* @x.91
  %6 = load i32, i32* @y.92
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !5163, metadata !DIExpression()), !dbg !5164
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !5165, metadata !DIExpression()), !dbg !5166
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !5167, metadata !DIExpression()), !dbg !5168
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !5169, metadata !DIExpression()), !dbg !5170
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !5171, metadata !DIExpression()), !dbg !5178
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !5179
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !5179
  call void @llvm.va_start(i8* %19), !dbg !5179
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !5180
  %21 = load i8*, i8** %14, align 8, !dbg !5181
  %22 = load i8*, i8** %15, align 8, !dbg !5182
  %23 = load i8*, i8** %16, align 8, !dbg !5183
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !5184
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !5185
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !5186
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !5186
  call void @llvm.va_end(i8* %26), !dbg !5186
  %27 = load i32, i32* @x.91
  %28 = load i32, i32* @y.92
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !5187

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !5188, metadata !DIExpression()), !dbg !5164
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !5227, metadata !DIExpression()), !dbg !5166
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !5228, metadata !DIExpression()), !dbg !5168
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !5229, metadata !DIExpression()), !dbg !5170
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !5230, metadata !DIExpression()), !dbg !5178
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !5179
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !5179
  call void @llvm.va_start(i8* %41), !dbg !5179
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !5180
  %43 = load i8*, i8** %36, align 8, !dbg !5181
  %44 = load i8*, i8** %37, align 8, !dbg !5182
  %45 = load i8*, i8** %38, align 8, !dbg !5183
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !5184
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !5185
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !5186
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !5186
  call void @llvm.va_end(i8* %48), !dbg !5186
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !5241 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !5245, metadata !DIExpression()), !dbg !5246
  call void @llvm.dbg.declare(metadata i8** %3, metadata !5247, metadata !DIExpression()), !dbg !5248
  %4 = load i64, i64* %2, align 8, !dbg !5249
  %5 = call noalias i8* @malloc(i64 %4) #10, !dbg !5250
  store i8* %5, i8** %3, align 8, !dbg !5248
  %6 = load i8*, i8** %3, align 8, !dbg !5251
  %7 = icmp ne i8* %6, null, !dbg !5251
  br i1 %7, label %12, label %8, !dbg !5253

8:                                                ; preds = %1
  %9 = load i64, i64* %2, align 8, !dbg !5254
  %10 = icmp ne i64 %9, 0, !dbg !5255
  br i1 %10, label %11, label %12, !dbg !5256

11:                                               ; preds = %8
  call void @xalloc_die() #14, !dbg !5257
  unreachable, !dbg !5257

12:                                               ; preds = %8, %1
  %13 = load i32, i32* @x.93
  %14 = load i32, i32* @y.94
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %12, %originalBBalteredBB
  %21 = load i8*, i8** %3, align 8, !dbg !5258
  %22 = load i32, i32* @x.93
  %23 = load i32, i32* @y.94
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !5259

originalBBalteredBB:                              ; preds = %originalBB, %12
  %30 = load i8*, i8** %3, align 8, !dbg !5258
  br label %originalBB
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !5260 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !5263, metadata !DIExpression()), !dbg !5264
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !5265, metadata !DIExpression()), !dbg !5266
  %6 = load i64, i64* %5, align 8, !dbg !5267
  %7 = icmp ne i64 %6, 0, !dbg !5267
  br i1 %7, label %29, label %8, !dbg !5269

8:                                                ; preds = %2
  %9 = load i32, i32* @x.95
  %10 = load i32, i32* @y.96
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load i8*, i8** %4, align 8, !dbg !5270
  %18 = icmp ne i8* %17, null, !dbg !5270
  %19 = load i32, i32* @x.95
  %20 = load i32, i32* @y.96
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %29, !dbg !5271

27:                                               ; preds = %originalBBpart2
  %28 = load i8*, i8** %4, align 8, !dbg !5272
  call void @free(i8* %28) #10, !dbg !5274
  store i8* null, i8** %3, align 8, !dbg !5275
  br label %89, !dbg !5275

29:                                               ; preds = %originalBBpart2, %2
  %30 = load i8*, i8** %4, align 8, !dbg !5276
  %31 = load i64, i64* %5, align 8, !dbg !5277
  %32 = call i8* @realloc(i8* %30, i64 %31) #10, !dbg !5278
  store i8* %32, i8** %4, align 8, !dbg !5279
  %33 = load i8*, i8** %4, align 8, !dbg !5280
  %34 = icmp ne i8* %33, null, !dbg !5280
  br i1 %34, label %71, label %35, !dbg !5282

35:                                               ; preds = %29
  %36 = load i32, i32* @x.95
  %37 = load i32, i32* @y.96
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %35, %originalBB1alteredBB
  %44 = load i64, i64* %5, align 8, !dbg !5283
  %45 = icmp ne i64 %44, 0, !dbg !5283
  %46 = load i32, i32* @x.95
  %47 = load i32, i32* @y.96
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %45, label %54, label %71, !dbg !5284

54:                                               ; preds = %originalBBpart24
  %55 = load i32, i32* @x.95
  %56 = load i32, i32* @y.96
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !5285
  %63 = load i32, i32* @x.95
  %64 = load i32, i32* @y.96
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !5285

71:                                               ; preds = %originalBBpart24, %29
  %72 = load i32, i32* @x.95
  %73 = load i32, i32* @y.96
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %71, %originalBB10alteredBB
  %80 = load i8*, i8** %4, align 8, !dbg !5286
  store i8* %80, i8** %3, align 8, !dbg !5287
  %81 = load i32, i32* @x.95
  %82 = load i32, i32* @y.96
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %89, !dbg !5287

89:                                               ; preds = %originalBBpart212, %27
  %90 = load i32, i32* @x.95
  %91 = load i32, i32* @y.96
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %89, %originalBB14alteredBB
  %98 = load i8*, i8** %3, align 8, !dbg !5288
  %99 = load i32, i32* @x.95
  %100 = load i32, i32* @y.96
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %98, !dbg !5288

originalBBalteredBB:                              ; preds = %originalBB, %8
  %107 = load i8*, i8** %4, align 8, !dbg !5270
  %108 = icmp ne i8* %107, null, !dbg !5270
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %35
  %109 = load i64, i64* %5, align 8, !dbg !5283
  %110 = icmp ne i64 %109, 0, !dbg !5283
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  call void @xalloc_die() #14, !dbg !5285
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %71
  %111 = load i8*, i8** %4, align 8, !dbg !5286
  store i8* %111, i8** %3, align 8, !dbg !5287
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %89
  %112 = load i8*, i8** %3, align 8, !dbg !5288
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @x2nrealloc(i8*, i64*, i64) #4 !dbg !5289 {
  %4 = load i32, i32* @x.97
  %5 = load i32, i32* @y.98
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !5294, metadata !DIExpression()), !dbg !5295
  store i64* %1, i64** %13, align 8
  call void @llvm.dbg.declare(metadata i64** %13, metadata !5296, metadata !DIExpression()), !dbg !5297
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !5298, metadata !DIExpression()), !dbg !5299
  call void @llvm.dbg.declare(metadata i64* %15, metadata !5300, metadata !DIExpression()), !dbg !5301
  %16 = load i64*, i64** %13, align 8, !dbg !5302
  %17 = load i64, i64* %16, align 8, !dbg !5303
  store i64 %17, i64* %15, align 8, !dbg !5301
  %18 = load i8*, i8** %12, align 8, !dbg !5304
  %19 = icmp ne i8* %18, null, !dbg !5304
  %20 = load i32, i32* @x.97
  %21 = load i32, i32* @y.98
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %19, label %96, label %28, !dbg !5306

28:                                               ; preds = %originalBBpart2
  %29 = load i32, i32* @x.97
  %30 = load i32, i32* @y.98
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = load i64, i64* %15, align 8, !dbg !5307
  %38 = icmp ne i64 %37, 0, !dbg !5307
  %39 = load i32, i32* @x.97
  %40 = load i32, i32* @y.98
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %57, label %47, !dbg !5310

47:                                               ; preds = %originalBBpart24
  %48 = load i64, i64* %14, align 8, !dbg !5311
  %49 = udiv i64 128, %48, !dbg !5313
  store i64 %49, i64* %15, align 8, !dbg !5314
  %50 = load i64, i64* %15, align 8, !dbg !5315
  %51 = icmp ne i64 %50, 0, !dbg !5316
  %52 = xor i1 %51, true, !dbg !5316
  %53 = zext i1 %52 to i32, !dbg !5316
  %54 = sext i32 %53 to i64, !dbg !5316
  %55 = load i64, i64* %15, align 8, !dbg !5317
  %56 = add i64 %55, %54, !dbg !5317
  store i64 %56, i64* %15, align 8, !dbg !5317
  br label %57, !dbg !5318

57:                                               ; preds = %47, %originalBBpart24
  %58 = load i64, i64* %14, align 8, !dbg !5319
  %59 = udiv i64 9223372036854775807, %58, !dbg !5319
  %60 = load i64, i64* %15, align 8, !dbg !5319
  %61 = icmp ult i64 %59, %60, !dbg !5319
  br i1 %61, label %62, label %79, !dbg !5321

62:                                               ; preds = %57
  %63 = load i32, i32* @x.97
  %64 = load i32, i32* @y.98
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %62, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !5322
  %71 = load i32, i32* @x.97
  %72 = load i32, i32* @y.98
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !5322

79:                                               ; preds = %57
  %80 = load i32, i32* @x.97
  %81 = load i32, i32* @y.98
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i32, i32* @x.97
  %89 = load i32, i32* @y.98
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %156, !dbg !5323

96:                                               ; preds = %originalBBpart2
  %97 = load i32, i32* @x.97
  %98 = load i32, i32* @y.98
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %96, %originalBB14alteredBB
  %105 = load i64, i64* %14, align 8, !dbg !5324
  %106 = udiv i64 6148914691236517204, %105, !dbg !5327
  %107 = load i64, i64* %15, align 8, !dbg !5328
  %108 = icmp ule i64 %106, %107, !dbg !5329
  %109 = load i32, i32* @x.97
  %110 = load i32, i32* @y.98
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart218, label %originalBB14alteredBB

originalBBpart218:                                ; preds = %originalBB14
  br i1 %108, label %117, label %134, !dbg !5330

117:                                              ; preds = %originalBBpart218
  %118 = load i32, i32* @x.97
  %119 = load i32, i32* @y.98
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %117, %originalBB20alteredBB
  call void @xalloc_die() #14, !dbg !5331
  %126 = load i32, i32* @x.97
  %127 = load i32, i32* @y.98
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  unreachable, !dbg !5331

134:                                              ; preds = %originalBBpart218
  %135 = load i32, i32* @x.97
  %136 = load i32, i32* @y.98
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %134, %originalBB24alteredBB
  %143 = load i64, i64* %15, align 8, !dbg !5332
  %144 = udiv i64 %143, 2, !dbg !5333
  %145 = add i64 %144, 1, !dbg !5334
  %146 = load i64, i64* %15, align 8, !dbg !5335
  %147 = add i64 %146, %145, !dbg !5335
  store i64 %147, i64* %15, align 8, !dbg !5335
  %148 = load i32, i32* @x.97
  %149 = load i32, i32* @y.98
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart258, label %originalBB24alteredBB

originalBBpart258:                                ; preds = %originalBB24
  br label %156

156:                                              ; preds = %originalBBpart258, %originalBBpart212
  %157 = load i64, i64* %15, align 8, !dbg !5336
  %158 = load i64*, i64** %13, align 8, !dbg !5337
  store i64 %157, i64* %158, align 8, !dbg !5338
  %159 = load i8*, i8** %12, align 8, !dbg !5339
  %160 = load i64, i64* %15, align 8, !dbg !5340
  %161 = load i64, i64* %14, align 8, !dbg !5341
  %162 = mul i64 %160, %161, !dbg !5342
  %163 = call i8* @xrealloc(i8* %159, i64 %162), !dbg !5343
  ret i8* %163, !dbg !5344

originalBBalteredBB:                              ; preds = %originalBB, %3
  %164 = alloca i8*, align 8
  %165 = alloca i64*, align 8
  %166 = alloca i64, align 8
  %167 = alloca i64, align 8
  store i8* %0, i8** %164, align 8
  call void @llvm.dbg.declare(metadata i8** %164, metadata !5345, metadata !DIExpression()), !dbg !5295
  store i64* %1, i64** %165, align 8
  call void @llvm.dbg.declare(metadata i64** %165, metadata !5348, metadata !DIExpression()), !dbg !5297
  store i64 %2, i64* %166, align 8
  call void @llvm.dbg.declare(metadata i64* %166, metadata !5349, metadata !DIExpression()), !dbg !5299
  call void @llvm.dbg.declare(metadata i64* %167, metadata !5350, metadata !DIExpression()), !dbg !5301
  %168 = load i64*, i64** %165, align 8, !dbg !5302
  %169 = load i64, i64* %168, align 8, !dbg !5303
  store i64 %169, i64* %167, align 8, !dbg !5301
  %170 = load i8*, i8** %164, align 8, !dbg !5304
  %171 = icmp ne i8* %170, null, !dbg !5304
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %172 = load i64, i64* %15, align 8, !dbg !5307
  %173 = icmp ne i64 %172, 0, !dbg !5307
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %62
  call void @xalloc_die() #14, !dbg !5322
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %96
  %174 = load i64, i64* %14, align 8, !dbg !5324
  %_ = shl i64 6148914691236517204, %174
  %_15 = sub i64 0, 6148914691236517204
  %gen = add i64 %_15, %174
  %_16 = shl i64 6148914691236517204, %174
  %175 = udiv i64 6148914691236517204, %174, !dbg !5327
  %176 = load i64, i64* %15, align 8, !dbg !5328
  %177 = icmp ule i64 %175, %176, !dbg !5329
  br label %originalBB14

originalBB20alteredBB:                            ; preds = %originalBB20, %117
  call void @xalloc_die() #14, !dbg !5331
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %134
  %178 = load i64, i64* %15, align 8, !dbg !5332
  %_25 = sub i64 %178, 2
  %gen26 = mul i64 %_25, 2
  %_27 = sub i64 0, %178
  %gen28 = add i64 %_27, 2
  %_29 = sub i64 0, %178
  %gen30 = add i64 %_29, 2
  %_31 = sub i64 %178, 2
  %gen32 = mul i64 %_31, 2
  %_33 = sub i64 0, %178
  %gen34 = add i64 %_33, 2
  %_35 = sub i64 %178, 2
  %gen36 = mul i64 %_35, 2
  %_37 = shl i64 %178, 2
  %179 = udiv i64 %178, 2, !dbg !5333
  %_38 = sub i64 %179, 1
  %gen39 = mul i64 %_38, 1
  %_40 = sub i64 0, %179
  %gen41 = add i64 %_40, 1
  %180 = add i64 %179, 1, !dbg !5334
  %181 = load i64, i64* %15, align 8, !dbg !5335
  %_42 = sub i64 0, %181
  %gen43 = add i64 %_42, %180
  %_44 = sub i64 0, %181
  %gen45 = add i64 %_44, %180
  %_46 = sub i64 %181, %180
  %gen47 = mul i64 %_46, %180
  %_48 = sub i64 %181, %180
  %gen49 = mul i64 %_48, %180
  %_50 = shl i64 %181, %180
  %_51 = sub i64 %181, %180
  %gen52 = mul i64 %_51, %180
  %_53 = sub i64 %181, %180
  %gen54 = mul i64 %_53, %180
  %_55 = sub i64 0, %181
  %gen56 = add i64 %_55, %180
  %182 = add i64 %181, %180, !dbg !5335
  store i64 %182, i64* %15, align 8, !dbg !5335
  br label %originalBB24
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !5351 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !5354, metadata !DIExpression()), !dbg !5355
  %3 = load i64, i64* %2, align 8, !dbg !5356
  %4 = call noalias i8* @xmalloc(i64 %3), !dbg !5356
  ret i8* %4, !dbg !5357
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !5358 {
  %1 = load i32, i32* @x.101
  %2 = load i32, i32* @y.102
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !5360
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.165, i64 0, i64 0)) #10, !dbg !5361
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i64 0, i64 0), i8* %10), !dbg !5362
  call void @abort() #12, !dbg !5363
  %11 = load i32, i32* @x.101
  %12 = load i32, i32* @y.102
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !5363

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !5360
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.165, i64 0, i64 0)) #10, !dbg !5361
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.166, i64 0, i64 0), i8* %20), !dbg !5362
  call void @abort() #12, !dbg !5363
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !5364 {
  %5 = load i32, i32* @x.103
  %6 = load i32, i32* @y.104
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !5380, metadata !DIExpression()), !dbg !5381
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !5382, metadata !DIExpression()), !dbg !5383
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !5384, metadata !DIExpression()), !dbg !5385
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !5386, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.declare(metadata i64* %18, metadata !5388, metadata !DIExpression()), !dbg !5389
  call void @llvm.dbg.declare(metadata i32* %19, metadata !5390, metadata !DIExpression()), !dbg !5391
  %21 = load i32*, i32** %14, align 8, !dbg !5392
  %22 = icmp ne i32* %21, null, !dbg !5392
  %23 = load i32, i32* @x.103
  %24 = load i32, i32* @y.104
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !5394

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.103
  %33 = load i32, i32* @y.104
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !5395
  %40 = load i32, i32* @x.103
  %41 = load i32, i32* @y.104
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !5396

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32*, i32** %14, align 8, !dbg !5397
  %50 = load i8*, i8** %15, align 8, !dbg !5398
  %51 = load i64, i64* %16, align 8, !dbg !5399
  %52 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !5400
  %53 = call i64 @mbrtowc(i32* %49, i8* %50, i64 %51, %struct.__mbstate_t* %52) #10, !dbg !5401
  store i64 %53, i64* %18, align 8, !dbg !5402
  %54 = load i64, i64* %18, align 8, !dbg !5403
  %55 = icmp ule i64 -2, %54, !dbg !5405
  br i1 %55, label %56, label %115, !dbg !5406

56:                                               ; preds = %48
  %57 = load i32, i32* @x.103
  %58 = load i32, i32* @y.104
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i64, i64* %16, align 8, !dbg !5407
  %66 = icmp ne i64 %65, 0, !dbg !5408
  %67 = load i32, i32* @x.103
  %68 = load i32, i32* @y.104
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %115, !dbg !5409

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.103
  %77 = load i32, i32* @y.104
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call zeroext i1 @hard_locale(i32 0), !dbg !5410
  %85 = load i32, i32* @x.103
  %86 = load i32, i32* @y.104
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %84, label %115, label %93, !dbg !5411

93:                                               ; preds = %originalBBpart212
  call void @llvm.dbg.declare(metadata i8* %20, metadata !5412, metadata !DIExpression()), !dbg !5414
  %94 = load i32, i32* @x.103
  %95 = load i32, i32* @y.104
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  %102 = load i8*, i8** %15, align 8, !dbg !5415
  %103 = load i8, i8* %102, align 1, !dbg !5416
  store i8 %103, i8* %20, align 1, !dbg !5414
  %104 = load i8, i8* %20, align 1, !dbg !5417
  %105 = zext i8 %104 to i32, !dbg !5417
  %106 = load i32*, i32** %14, align 8, !dbg !5418
  store i32 %105, i32* %106, align 4, !dbg !5419
  store i64 1, i64* %13, align 8, !dbg !5420
  %107 = load i32, i32* @x.103
  %108 = load i32, i32* @y.104
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %117, !dbg !5420

115:                                              ; preds = %originalBBpart212, %originalBBpart28, %48
  %116 = load i64, i64* %18, align 8, !dbg !5421
  store i64 %116, i64* %13, align 8, !dbg !5422
  br label %117, !dbg !5422

117:                                              ; preds = %115, %originalBBpart216
  %118 = load i32, i32* @x.103
  %119 = load i32, i32* @y.104
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  %126 = load i64, i64* %13, align 8, !dbg !5423
  %127 = load i32, i32* @x.103
  %128 = load i32, i32* @y.104
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i64 %126, !dbg !5423

originalBBalteredBB:                              ; preds = %originalBB, %4
  %135 = alloca i64, align 8
  %136 = alloca i32*, align 8
  %137 = alloca i8*, align 8
  %138 = alloca i64, align 8
  %139 = alloca %struct.__mbstate_t*, align 8
  %140 = alloca i64, align 8
  %141 = alloca i32, align 4
  %142 = alloca i8, align 1
  store i32* %0, i32** %136, align 8
  call void @llvm.dbg.declare(metadata i32** %136, metadata !5424, metadata !DIExpression()), !dbg !5381
  store i8* %1, i8** %137, align 8
  call void @llvm.dbg.declare(metadata i8** %137, metadata !5440, metadata !DIExpression()), !dbg !5383
  store i64 %2, i64* %138, align 8
  call void @llvm.dbg.declare(metadata i64* %138, metadata !5441, metadata !DIExpression()), !dbg !5385
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %139, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %139, metadata !5442, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.declare(metadata i64* %140, metadata !5443, metadata !DIExpression()), !dbg !5389
  call void @llvm.dbg.declare(metadata i32* %141, metadata !5444, metadata !DIExpression()), !dbg !5391
  %143 = load i32*, i32** %136, align 8, !dbg !5392
  %144 = icmp ne i32* %143, null, !dbg !5392
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !5395
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %145 = load i64, i64* %16, align 8, !dbg !5407
  %146 = icmp ne i64 %145, 0, !dbg !5408
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %147 = call zeroext i1 @hard_locale(i32 0), !dbg !5410
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  %148 = load i8*, i8** %15, align 8, !dbg !5415
  %149 = load i8, i8* %148, align 1, !dbg !5416
  store i8 %149, i8* %20, align 1, !dbg !5414
  %150 = load i8, i8* %20, align 1, !dbg !5417
  %151 = zext i8 %150 to i32, !dbg !5417
  %152 = load i32*, i32** %14, align 8, !dbg !5418
  store i32 %151, i32* %152, align 4, !dbg !5419
  store i64 1, i64* %13, align 8, !dbg !5420
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  %153 = load i64, i64* %13, align 8, !dbg !5423
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @extract_trimmed_name(%struct.utmpx*) #4 !dbg !5445 {
  %2 = load i32, i32* @x.105
  %3 = load i32, i32* @y.106
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.utmpx*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %10, metadata !5473, metadata !DIExpression()), !dbg !5474
  call void @llvm.dbg.declare(metadata i8** %11, metadata !5475, metadata !DIExpression()), !dbg !5476
  call void @llvm.dbg.declare(metadata i8** %12, metadata !5477, metadata !DIExpression()), !dbg !5478
  %13 = call noalias i8* @xmalloc(i64 33), !dbg !5479
  store i8* %13, i8** %12, align 8, !dbg !5480
  %14 = load i8*, i8** %12, align 8, !dbg !5481
  %15 = load %struct.utmpx*, %struct.utmpx** %10, align 8, !dbg !5482
  %16 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %15, i32 0, i32 4, !dbg !5482
  %17 = getelementptr inbounds [32 x i8], [32 x i8]* %16, i64 0, i64 0, !dbg !5482
  %18 = call i8* @strncpy(i8* %14, i8* %17, i64 32) #10, !dbg !5483
  %19 = load i8*, i8** %12, align 8, !dbg !5484
  %20 = getelementptr inbounds i8, i8* %19, i64 32, !dbg !5484
  store i8 0, i8* %20, align 1, !dbg !5485
  %21 = load i8*, i8** %12, align 8, !dbg !5486
  %22 = load i8*, i8** %12, align 8, !dbg !5488
  %23 = call i64 @strlen(i8* %22) #13, !dbg !5489
  %24 = getelementptr inbounds i8, i8* %21, i64 %23, !dbg !5490
  store i8* %24, i8** %11, align 8, !dbg !5491
  %25 = load i32, i32* @x.105
  %26 = load i32, i32* @y.106
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %33, !dbg !5492

33:                                               ; preds = %94, %originalBBpart2
  %34 = load i32, i32* @x.105
  %35 = load i32, i32* @y.106
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %12, align 8, !dbg !5493
  %43 = load i8*, i8** %11, align 8, !dbg !5495
  %44 = icmp ult i8* %42, %43, !dbg !5496
  %45 = load i32, i32* @x.105
  %46 = load i32, i32* @y.106
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %44, label %53, label %75, !dbg !5497

53:                                               ; preds = %originalBBpart24
  %54 = load i32, i32* @x.105
  %55 = load i32, i32* @y.106
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i8*, i8** %11, align 8, !dbg !5498
  %63 = getelementptr inbounds i8, i8* %62, i64 -1, !dbg !5498
  %64 = load i8, i8* %63, align 1, !dbg !5498
  %65 = sext i8 %64 to i32, !dbg !5498
  %66 = icmp eq i32 %65, 32, !dbg !5499
  %67 = load i32, i32* @x.105
  %68 = load i32, i32* @y.106
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %75

75:                                               ; preds = %originalBBpart28, %originalBBpart24
  %76 = phi i1 [ false, %originalBBpart24 ], [ %66, %originalBBpart28 ], !dbg !5500
  br i1 %76, label %77, label %97, !dbg !5501

77:                                               ; preds = %75
  %78 = load i32, i32* @x.105
  %79 = load i32, i32* @y.106
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load i32, i32* @x.105
  %87 = load i32, i32* @y.106
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %94, !dbg !5502

94:                                               ; preds = %originalBBpart212
  %95 = load i8*, i8** %11, align 8, !dbg !5503
  %96 = getelementptr inbounds i8, i8* %95, i32 -1, !dbg !5503
  store i8* %96, i8** %11, align 8, !dbg !5503
  store i8 0, i8* %96, align 1, !dbg !5504
  br label %33, !dbg !5505, !llvm.loop !5506

97:                                               ; preds = %75
  %98 = load i8*, i8** %12, align 8, !dbg !5508
  ret i8* %98, !dbg !5509

originalBBalteredBB:                              ; preds = %originalBB, %1
  %99 = alloca %struct.utmpx*, align 8
  %100 = alloca i8*, align 8
  %101 = alloca i8*, align 8
  store %struct.utmpx* %0, %struct.utmpx** %99, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %99, metadata !5510, metadata !DIExpression()), !dbg !5474
  call void @llvm.dbg.declare(metadata i8** %100, metadata !5539, metadata !DIExpression()), !dbg !5476
  call void @llvm.dbg.declare(metadata i8** %101, metadata !5540, metadata !DIExpression()), !dbg !5478
  %102 = call noalias i8* @xmalloc(i64 33), !dbg !5479
  store i8* %102, i8** %101, align 8, !dbg !5480
  %103 = load i8*, i8** %101, align 8, !dbg !5481
  %104 = load %struct.utmpx*, %struct.utmpx** %99, align 8, !dbg !5482
  %105 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %104, i32 0, i32 4, !dbg !5482
  %106 = getelementptr inbounds [32 x i8], [32 x i8]* %105, i64 0, i64 0, !dbg !5482
  %107 = call i8* @strncpy(i8* %103, i8* %106, i64 32) #10, !dbg !5483
  %108 = load i8*, i8** %101, align 8, !dbg !5484
  %109 = getelementptr inbounds i8, i8* %108, i64 32, !dbg !5484
  store i8 0, i8* %109, align 1, !dbg !5485
  %110 = load i8*, i8** %101, align 8, !dbg !5486
  %111 = load i8*, i8** %101, align 8, !dbg !5488
  %112 = call i64 @strlen(i8* %111) #13, !dbg !5489
  %113 = getelementptr inbounds i8, i8* %110, i64 %112, !dbg !5490
  store i8* %113, i8** %100, align 8, !dbg !5491
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %114 = load i8*, i8** %12, align 8, !dbg !5493
  %115 = load i8*, i8** %11, align 8, !dbg !5495
  %116 = icmp ult i8* %114, %115, !dbg !5496
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %117 = load i8*, i8** %11, align 8, !dbg !5498
  %118 = getelementptr inbounds i8, i8* %117, i64 -1, !dbg !5498
  %119 = load i8, i8* %118, align 1, !dbg !5498
  %120 = sext i8 %119 to i32, !dbg !5498
  %121 = icmp eq i32 %120, 32, !dbg !5499
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @strncpy(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @read_utmp(i8*, i64*, %struct.utmpx**, i32) #4 !dbg !5541 {
  %5 = alloca i8*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca %struct.utmpx**, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.utmpx*, align 8
  %12 = alloca %struct.utmpx*, align 8
  store i8* %0, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !5546, metadata !DIExpression()), !dbg !5547
  store i64* %1, i64** %6, align 8
  call void @llvm.dbg.declare(metadata i64** %6, metadata !5548, metadata !DIExpression()), !dbg !5549
  store %struct.utmpx** %2, %struct.utmpx*** %7, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx*** %7, metadata !5550, metadata !DIExpression()), !dbg !5551
  store i32 %3, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !5552, metadata !DIExpression()), !dbg !5553
  call void @llvm.dbg.declare(metadata i64* %9, metadata !5554, metadata !DIExpression()), !dbg !5555
  store i64 0, i64* %9, align 8, !dbg !5555
  call void @llvm.dbg.declare(metadata i64* %10, metadata !5556, metadata !DIExpression()), !dbg !5557
  store i64 0, i64* %10, align 8, !dbg !5557
  call void @llvm.dbg.declare(metadata %struct.utmpx** %11, metadata !5558, metadata !DIExpression()), !dbg !5559
  store %struct.utmpx* null, %struct.utmpx** %11, align 8, !dbg !5559
  call void @llvm.dbg.declare(metadata %struct.utmpx** %12, metadata !5560, metadata !DIExpression()), !dbg !5561
  %13 = load i8*, i8** %5, align 8, !dbg !5562
  %14 = call i32 @utmpxname(i8* %13), !dbg !5563
  call void @setutxent(), !dbg !5564
  br label %15, !dbg !5565

15:                                               ; preds = %originalBBpart213, %4
  %16 = load i32, i32* @x.107
  %17 = load i32, i32* @y.108
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  %24 = call %struct.utmpx* @getutxent(), !dbg !5566
  store %struct.utmpx* %24, %struct.utmpx** %12, align 8, !dbg !5567
  %25 = icmp ne %struct.utmpx* %24, null, !dbg !5568
  %26 = load i32, i32* @x.107
  %27 = load i32, i32* @y.108
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %25, label %34, label %88, !dbg !5565

34:                                               ; preds = %originalBBpart2
  %35 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !5569
  %36 = load i32, i32* %8, align 4, !dbg !5571
  %37 = call zeroext i1 @desirable_utmp_entry(%struct.utmpx* %35, i32 %36), !dbg !5572
  br i1 %37, label %38, label %71, !dbg !5573

38:                                               ; preds = %34
  %39 = load i64, i64* %9, align 8, !dbg !5574
  %40 = load i64, i64* %10, align 8, !dbg !5577
  %41 = icmp eq i64 %39, %40, !dbg !5578
  br i1 %41, label %42, label %47, !dbg !5579

42:                                               ; preds = %38
  %43 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !5580
  %44 = bitcast %struct.utmpx* %43 to i8*, !dbg !5580
  %45 = call i8* @x2nrealloc(i8* %44, i64* %10, i64 384), !dbg !5581
  %46 = bitcast i8* %45 to %struct.utmpx*, !dbg !5581
  store %struct.utmpx* %46, %struct.utmpx** %11, align 8, !dbg !5582
  br label %47, !dbg !5583

47:                                               ; preds = %42, %38
  %48 = load i32, i32* @x.107
  %49 = load i32, i32* @y.108
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %47, %originalBB1alteredBB
  %56 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !5584
  %57 = load i64, i64* %9, align 8, !dbg !5585
  %58 = add i64 %57, 1, !dbg !5585
  store i64 %58, i64* %9, align 8, !dbg !5585
  %59 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %56, i64 %57, !dbg !5584
  %60 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !5586
  %61 = bitcast %struct.utmpx* %59 to i8*, !dbg !5587
  %62 = bitcast %struct.utmpx* %60 to i8*, !dbg !5587
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %62, i64 384, i1 false), !dbg !5587
  %63 = load i32, i32* @x.107
  %64 = load i32, i32* @y.108
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart29, label %originalBB1alteredBB

originalBBpart29:                                 ; preds = %originalBB1
  br label %71, !dbg !5588

71:                                               ; preds = %originalBBpart29, %34
  %72 = load i32, i32* @x.107
  %73 = load i32, i32* @y.108
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %71, %originalBB11alteredBB
  %80 = load i32, i32* @x.107
  %81 = load i32, i32* @y.108
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %15, !dbg !5565, !llvm.loop !5589

88:                                               ; preds = %originalBBpart2
  %89 = load i32, i32* @x.107
  %90 = load i32, i32* @y.108
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %88, %originalBB15alteredBB
  call void @endutxent(), !dbg !5591
  %97 = load i64, i64* %9, align 8, !dbg !5592
  %98 = load i64*, i64** %6, align 8, !dbg !5593
  store i64 %97, i64* %98, align 8, !dbg !5594
  %99 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !5595
  %100 = load %struct.utmpx**, %struct.utmpx*** %7, align 8, !dbg !5596
  store %struct.utmpx* %99, %struct.utmpx** %100, align 8, !dbg !5597
  %101 = load i32, i32* @x.107
  %102 = load i32, i32* @y.108
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  ret i32 0, !dbg !5598

originalBBalteredBB:                              ; preds = %originalBB, %15
  %109 = call %struct.utmpx* @getutxent(), !dbg !5566
  store %struct.utmpx* %109, %struct.utmpx** %12, align 8, !dbg !5567
  %110 = icmp ne %struct.utmpx* %109, null, !dbg !5568
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %47
  %111 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !5584
  %112 = load i64, i64* %9, align 8, !dbg !5585
  %_ = sub i64 %112, 1
  %gen = mul i64 %_, 1
  %_2 = sub i64 0, %112
  %gen3 = add i64 %_2, 1
  %_4 = shl i64 %112, 1
  %_5 = shl i64 %112, 1
  %_6 = sub i64 0, %112
  %gen7 = add i64 %_6, 1
  %113 = add i64 %112, 1, !dbg !5585
  store i64 %113, i64* %9, align 8, !dbg !5585
  %114 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %111, i64 %112, !dbg !5584
  %115 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !5586
  %116 = bitcast %struct.utmpx* %114 to i8*, !dbg !5587
  %117 = bitcast %struct.utmpx* %115 to i8*, !dbg !5587
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %116, i8* align 4 %117, i64 384, i1 false), !dbg !5587
  br label %originalBB1

originalBB11alteredBB:                            ; preds = %originalBB11, %71
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %88
  call void @endutxent(), !dbg !5591
  %118 = load i64, i64* %9, align 8, !dbg !5592
  %119 = load i64*, i64** %6, align 8, !dbg !5593
  store i64 %118, i64* %119, align 8, !dbg !5594
  %120 = load %struct.utmpx*, %struct.utmpx** %11, align 8, !dbg !5595
  %121 = load %struct.utmpx**, %struct.utmpx*** %7, align 8, !dbg !5596
  store %struct.utmpx* %120, %struct.utmpx** %121, align 8, !dbg !5597
  br label %originalBB15
}

declare dso_local i32 @utmpxname(i8*) #3

declare dso_local void @setutxent() #3

declare dso_local %struct.utmpx* @getutxent() #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @desirable_utmp_entry(%struct.utmpx*, i32) #4 !dbg !5599 {
  %3 = load i32, i32* @x.109
  %4 = load i32, i32* @y.110
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i1, align 1
  %12 = alloca %struct.utmpx*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8, align 1
  store %struct.utmpx* %0, %struct.utmpx** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %12, metadata !5602, metadata !DIExpression()), !dbg !5603
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5604, metadata !DIExpression()), !dbg !5605
  call void @llvm.dbg.declare(metadata i8* %14, metadata !5606, metadata !DIExpression()), !dbg !5607
  %15 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !5608
  %16 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %15, i32 0, i32 4, !dbg !5608
  %17 = getelementptr inbounds [32 x i8], [32 x i8]* %16, i64 0, i64 0, !dbg !5608
  %18 = load i8, i8* %17, align 4, !dbg !5608
  %19 = sext i8 %18 to i32, !dbg !5608
  %20 = icmp ne i32 %19, 0, !dbg !5608
  %21 = load i32, i32* @x.109
  %22 = load i32, i32* @y.110
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %228, !dbg !5608

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.109
  %31 = load i32, i32* @y.110
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !5608
  %39 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %38, i32 0, i32 0, !dbg !5608
  %40 = load i16, i16* %39, align 4, !dbg !5608
  %41 = sext i16 %40 to i32, !dbg !5608
  %42 = load i32, i32* @x.109
  %43 = load i32, i32* @y.110
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %50, !dbg !5608

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.109
  %52 = load i32, i32* @y.110
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %collatzVar = alloca i32
  %59 = load i32, i32* @x.109
  %60 = load i32, i32* @y.110
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %67

67:                                               ; preds = %originalBBpart28
  %68 = load i32, i32* @inVal0
  %69 = icmp sgt i32 %68, 1
  br i1 %69, label %71, label %70

70:                                               ; preds = %67
  store i32 52, i32* %collatzVar
  br label %71

71:                                               ; preds = %70, %67
  %72 = load i8**, i8*** @inVal1
  %73 = getelementptr inbounds i8*, i8** %72, i64 1
  %74 = load i8*, i8** %73
  %controle = call i32 @controle(i8* %74, i32 7)
  store i32 %controle, i32* %collatzVar
  br label %75

75:                                               ; preds = %originalBBpart261, %originalBBpart257, %71
  %76 = load i32, i32* @x.109
  %77 = load i32, i32* @y.110
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = load i32, i32* %collatzVar
  %85 = icmp sgt i32 %84, 1
  %86 = load i32, i32* @x.109
  %87 = load i32, i32* @y.110
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %85, label %94, label %193

94:                                               ; preds = %originalBBpart212
  %95 = load i32, i32* @x.109
  %96 = load i32, i32* @y.110
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %94, %originalBB14alteredBB
  %103 = load i32, i32* %collatzVar
  %104 = srem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = load i32, i32* @x.109
  %107 = load i32, i32* @y.110
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart218, label %originalBB14alteredBB

originalBBpart218:                                ; preds = %originalBB14
  br i1 %105, label %114, label %133

114:                                              ; preds = %originalBBpart218
  %115 = load i32, i32* @x.109
  %116 = load i32, i32* @y.110
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %114, %originalBB20alteredBB
  %123 = load i32, i32* %collatzVar
  %124 = sdiv i32 %123, 2
  store i32 %124, i32* %collatzVar
  %125 = load i32, i32* @x.109
  %126 = load i32, i32* @y.110
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart232, label %originalBB20alteredBB

originalBBpart232:                                ; preds = %originalBB20
  br label %153

133:                                              ; preds = %originalBBpart218
  %134 = load i32, i32* @x.109
  %135 = load i32, i32* @y.110
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %133, %originalBB34alteredBB
  %142 = load i32, i32* %collatzVar
  %143 = mul i32 %142, 3
  %144 = add i32 %143, 1
  store i32 %144, i32* %collatzVar
  %145 = load i32, i32* @x.109
  %146 = load i32, i32* @y.110
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart251, label %originalBB34alteredBB

originalBBpart251:                                ; preds = %originalBB34
  br label %153

153:                                              ; preds = %originalBBpart251, %originalBBpart232
  %154 = load i32, i32* @x.109
  %155 = load i32, i32* @y.110
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %153, %originalBB53alteredBB
  %162 = load i32, i32* %collatzVar
  %163 = sub i32 %41, %162
  %164 = icmp sgt i32 %163, 5
  %165 = load i32, i32* @x.109
  %166 = load i32, i32* @y.110
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart257, label %originalBB53alteredBB

originalBBpart257:                                ; preds = %originalBB53
  br i1 %164, label %173, label %75

173:                                              ; preds = %originalBBpart257
  %174 = load i32, i32* @x.109
  %175 = load i32, i32* @y.110
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %173, %originalBB59alteredBB
  %182 = load i32, i32* %collatzVar
  %183 = add i32 %41, %182
  %184 = icmp slt i32 %183, 9
  %185 = load i32, i32* @x.109
  %186 = load i32, i32* @y.110
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br i1 %184, label %210, label %75

193:                                              ; preds = %originalBBpart212
  %194 = load i32, i32* @x.109
  %195 = load i32, i32* @y.110
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %193, %originalBB63alteredBB
  %202 = load i32, i32* @x.109
  %203 = load i32, i32* @y.110
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %210, !dbg !5608

210:                                              ; preds = %originalBBpart265, %originalBBpart261
  %211 = phi i1 [ true, %originalBBpart261 ], [ false, %originalBBpart265 ]
  %212 = load i32, i32* @x.109
  %213 = load i32, i32* @y.110
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %210, %originalBB67alteredBB
  %220 = load i32, i32* @x.109
  %221 = load i32, i32* @y.110
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br label %228

228:                                              ; preds = %originalBBpart269, %originalBBpart2
  %229 = phi i1 [ false, %originalBBpart2 ], [ %211, %originalBBpart269 ], !dbg !5609
  %230 = load i32, i32* @x.109
  %231 = load i32, i32* @y.110
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %228, %originalBB71alteredBB
  %238 = zext i1 %229 to i8, !dbg !5607
  store i8 %238, i8* %14, align 1, !dbg !5607
  %239 = load i32, i32* %13, align 4, !dbg !5610
  %240 = and i32 %239, 2, !dbg !5612
  %241 = icmp ne i32 %240, 0, !dbg !5612
  %242 = load i32, i32* @x.109
  %243 = load i32, i32* @y.110
  %244 = sub i32 %242, 1
  %245 = mul i32 %242, %244
  %246 = urem i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %243, 10
  %249 = or i1 %247, %248
  br i1 %249, label %originalBBpart282, label %originalBB71alteredBB

originalBBpart282:                                ; preds = %originalBB71
  br i1 %241, label %250, label %270, !dbg !5613

250:                                              ; preds = %originalBBpart282
  %251 = load i32, i32* @x.109
  %252 = load i32, i32* @y.110
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %250, %originalBB84alteredBB
  %259 = load i8, i8* %14, align 1, !dbg !5614
  %260 = trunc i8 %259 to i1, !dbg !5614
  %261 = load i32, i32* @x.109
  %262 = load i32, i32* @y.110
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBBpart286, label %originalBB84alteredBB

originalBBpart286:                                ; preds = %originalBB84
  br i1 %260, label %270, label %269, !dbg !5615

269:                                              ; preds = %originalBBpart286
  store i1 false, i1* %11, align 1, !dbg !5616
  br label %342, !dbg !5616

270:                                              ; preds = %originalBBpart286, %originalBBpart282
  %271 = load i32, i32* %13, align 4, !dbg !5617
  %272 = and i32 %271, 1, !dbg !5619
  %273 = icmp ne i32 %272, 0, !dbg !5619
  br i1 %273, label %274, label %325, !dbg !5620

274:                                              ; preds = %270
  %275 = load i8, i8* %14, align 1, !dbg !5621
  %276 = trunc i8 %275 to i1, !dbg !5621
  br i1 %276, label %277, label %325, !dbg !5622

277:                                              ; preds = %274
  %278 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !5623
  %279 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %278, i32 0, i32 1, !dbg !5623
  %280 = load i32, i32* %279, align 4, !dbg !5623
  %281 = icmp slt i32 0, %280, !dbg !5624
  br i1 %281, label %282, label %325, !dbg !5625

282:                                              ; preds = %277
  %283 = load i32, i32* @x.109
  %284 = load i32, i32* @y.110
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %282, %originalBB88alteredBB
  %291 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !5626
  %292 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %291, i32 0, i32 1, !dbg !5626
  %293 = load i32, i32* %292, align 4, !dbg !5626
  %294 = call i32 @kill(i32 %293, i32 0) #10, !dbg !5627
  %295 = icmp slt i32 %294, 0, !dbg !5628
  %296 = load i32, i32* @x.109
  %297 = load i32, i32* @y.110
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBBpart290, label %originalBB88alteredBB

originalBBpart290:                                ; preds = %originalBB88
  br i1 %295, label %304, label %325, !dbg !5629

304:                                              ; preds = %originalBBpart290
  %305 = load i32, i32* @x.109
  %306 = load i32, i32* @y.110
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBB92, label %originalBB92alteredBB

originalBB92:                                     ; preds = %304, %originalBB92alteredBB
  %313 = call i32* @__errno_location() #15, !dbg !5630
  %314 = load i32, i32* %313, align 4, !dbg !5630
  %315 = icmp eq i32 %314, 3, !dbg !5631
  %316 = load i32, i32* @x.109
  %317 = load i32, i32* @y.110
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart294, label %originalBB92alteredBB

originalBBpart294:                                ; preds = %originalBB92
  br i1 %315, label %324, label %325, !dbg !5632

324:                                              ; preds = %originalBBpart294
  store i1 false, i1* %11, align 1, !dbg !5633
  br label %342, !dbg !5633

325:                                              ; preds = %originalBBpart294, %originalBBpart290, %277, %274, %270
  %326 = load i32, i32* @x.109
  %327 = load i32, i32* @y.110
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %325, %originalBB96alteredBB
  store i1 true, i1* %11, align 1, !dbg !5634
  %334 = load i32, i32* @x.109
  %335 = load i32, i32* @y.110
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %342, !dbg !5634

342:                                              ; preds = %originalBBpart298, %324, %269
  %343 = load i32, i32* @x.109
  %344 = load i32, i32* @y.110
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %342, %originalBB100alteredBB
  %351 = load i1, i1* %11, align 1, !dbg !5635
  %352 = load i32, i32* @x.109
  %353 = load i32, i32* @y.110
  %354 = sub i32 %352, 1
  %355 = mul i32 %352, %354
  %356 = urem i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %353, 10
  %359 = or i1 %357, %358
  br i1 %359, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  ret i1 %351, !dbg !5635

originalBBalteredBB:                              ; preds = %originalBB, %2
  %360 = alloca i1, align 1
  %361 = alloca %struct.utmpx*, align 8
  %362 = alloca i32, align 4
  %363 = alloca i8, align 1
  store %struct.utmpx* %0, %struct.utmpx** %361, align 8
  call void @llvm.dbg.declare(metadata %struct.utmpx** %361, metadata !5636, metadata !DIExpression()), !dbg !5603
  store i32 %1, i32* %362, align 4
  call void @llvm.dbg.declare(metadata i32* %362, metadata !5665, metadata !DIExpression()), !dbg !5605
  call void @llvm.dbg.declare(metadata i8* %363, metadata !5666, metadata !DIExpression()), !dbg !5607
  %364 = load %struct.utmpx*, %struct.utmpx** %361, align 8, !dbg !5608
  %365 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %364, i32 0, i32 4, !dbg !5608
  %366 = getelementptr inbounds [32 x i8], [32 x i8]* %365, i64 0, i64 0, !dbg !5608
  %367 = load i8, i8* %366, align 4, !dbg !5608
  %368 = sext i8 %367 to i32, !dbg !5608
  %369 = icmp ne i32 %368, 0, !dbg !5608
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %370 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !5608
  %371 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %370, i32 0, i32 0, !dbg !5608
  %372 = load i16, i16* %371, align 4, !dbg !5608
  %373 = sext i16 %372 to i32, !dbg !5608
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %collatzVaralteredBB = alloca i32
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %374 = load i32, i32* %collatzVar
  %375 = icmp sgt i32 %374, 1
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %94
  %376 = load i32, i32* %collatzVar
  %_ = sub i32 0, %376
  %gen = add i32 %_, 2
  %_15 = sub i32 %376, 2
  %gen16 = mul i32 %_15, 2
  %377 = srem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  br label %originalBB14

originalBB20alteredBB:                            ; preds = %originalBB20, %114
  %379 = load i32, i32* %collatzVar
  %_21 = sub i32 %379, 2
  %gen22 = mul i32 %_21, 2
  %_23 = sub i32 0, %379
  %gen24 = add i32 %_23, 2
  %_25 = shl i32 %379, 2
  %_26 = sub i32 %379, 2
  %gen27 = mul i32 %_26, 2
  %_28 = sub i32 0, %379
  %gen29 = add i32 %_28, 2
  %_30 = shl i32 %379, 2
  %380 = sdiv i32 %379, 2
  store i32 %380, i32* %collatzVar
  br label %originalBB20

originalBB34alteredBB:                            ; preds = %originalBB34, %133
  %381 = load i32, i32* %collatzVar
  %_35 = sub i32 %381, 3
  %gen36 = mul i32 %_35, 3
  %_37 = sub i32 %381, 3
  %gen38 = mul i32 %_37, 3
  %_39 = shl i32 %381, 3
  %_40 = shl i32 %381, 3
  %_41 = sub i32 0, %381
  %gen42 = add i32 %_41, 3
  %_43 = sub i32 %381, 3
  %gen44 = mul i32 %_43, 3
  %_45 = shl i32 %381, 3
  %382 = mul i32 %381, 3
  %_46 = sub i32 0, %382
  %gen47 = add i32 %_46, 1
  %_48 = sub i32 %382, 1
  %gen49 = mul i32 %_48, 1
  %383 = add i32 %382, 1
  store i32 %383, i32* %collatzVar
  br label %originalBB34

originalBB53alteredBB:                            ; preds = %originalBB53, %153
  %384 = load i32, i32* %collatzVar
  %_54 = sub i32 0, %41
  %gen55 = add i32 %_54, %384
  %385 = sub i32 %41, %384
  %386 = icmp sgt i32 %385, 5
  br label %originalBB53

originalBB59alteredBB:                            ; preds = %originalBB59, %173
  %387 = load i32, i32* %collatzVar
  %388 = add i32 %41, %387
  %389 = icmp slt i32 %388, 9
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %193
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %210
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %228
  %390 = zext i1 %229 to i8, !dbg !5607
  store i8 %390, i8* %14, align 1, !dbg !5607
  %391 = load i32, i32* %13, align 4, !dbg !5610
  %_72 = sub i32 %391, 2
  %gen73 = mul i32 %_72, 2
  %_74 = shl i32 %391, 2
  %_75 = sub i32 0, %391
  %gen76 = add i32 %_75, 2
  %_77 = sub i32 %391, 2
  %gen78 = mul i32 %_77, 2
  %_79 = sub i32 0, %391
  %gen80 = add i32 %_79, 2
  %392 = and i32 %391, 2, !dbg !5612
  %393 = icmp ne i32 %392, 0, !dbg !5612
  br label %originalBB71

originalBB84alteredBB:                            ; preds = %originalBB84, %250
  %394 = load i8, i8* %14, align 1, !dbg !5614
  %395 = trunc i8 %394 to i1, !dbg !5614
  br label %originalBB84

originalBB88alteredBB:                            ; preds = %originalBB88, %282
  %396 = load %struct.utmpx*, %struct.utmpx** %12, align 8, !dbg !5626
  %397 = getelementptr inbounds %struct.utmpx, %struct.utmpx* %396, i32 0, i32 1, !dbg !5626
  %398 = load i32, i32* %397, align 4, !dbg !5626
  %399 = call i32 @kill(i32 %398, i32 0) #10, !dbg !5627
  %400 = icmp slt i32 %399, 0, !dbg !5628
  br label %originalBB88

originalBB92alteredBB:                            ; preds = %originalBB92, %304
  %401 = call i32* @__errno_location() #15, !dbg !5630
  %402 = load i32, i32* %401, align 4, !dbg !5630
  %403 = icmp eq i32 %402, 3, !dbg !5631
  br label %originalBB92

originalBB96alteredBB:                            ; preds = %originalBB96, %325
  store i1 true, i1* %11, align 1, !dbg !5634
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %342
  %404 = load i1, i1* %11, align 1, !dbg !5635
  br label %originalBB100
}

declare dso_local void @endutxent() #3

; Function Attrs: nounwind
declare dso_local i32 @kill(i32, i32) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !5667 {
  %3 = load i32, i32* @x.111
  %4 = load i32, i32* @y.112
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !5671, metadata !DIExpression()), !dbg !5672
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !5673, metadata !DIExpression()), !dbg !5674
  call void @llvm.dbg.declare(metadata i8** %14, metadata !5675, metadata !DIExpression()), !dbg !5676
  %18 = load i8*, i8** %12, align 8, !dbg !5677
  store i8* %18, i8** %14, align 8, !dbg !5676
  call void @llvm.dbg.declare(metadata i8** %15, metadata !5678, metadata !DIExpression()), !dbg !5679
  %19 = load i8*, i8** %13, align 8, !dbg !5680
  store i8* %19, i8** %15, align 8, !dbg !5679
  call void @llvm.dbg.declare(metadata i8* %16, metadata !5681, metadata !DIExpression()), !dbg !5682
  call void @llvm.dbg.declare(metadata i8* %17, metadata !5683, metadata !DIExpression()), !dbg !5684
  %20 = load i8*, i8** %14, align 8, !dbg !5685
  %21 = load i8*, i8** %15, align 8, !dbg !5687
  %22 = icmp eq i8* %20, %21, !dbg !5688
  %23 = load i32, i32* @x.111
  %24 = load i32, i32* @y.112
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !5689

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.111
  %33 = load i32, i32* @y.112
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !5690
  %40 = load i32, i32* @x.111
  %41 = load i32, i32* @y.112
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %129, !dbg !5690

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.111
  %50 = load i32, i32* @y.112
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.111
  %58 = load i32, i32* @y.112
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !5691

65:                                               ; preds = %117, %originalBBpart28
  %66 = load i8*, i8** %14, align 8, !dbg !5692
  %67 = load i8, i8* %66, align 1, !dbg !5694
  %68 = zext i8 %67 to i32, !dbg !5694
  %69 = call i32 @c_tolower(i32 %68), !dbg !5695
  %70 = trunc i32 %69 to i8, !dbg !5695
  store i8 %70, i8* %16, align 1, !dbg !5696
  %71 = load i8*, i8** %15, align 8, !dbg !5697
  %72 = load i8, i8* %71, align 1, !dbg !5698
  %73 = zext i8 %72 to i32, !dbg !5698
  %74 = call i32 @c_tolower(i32 %73), !dbg !5699
  %75 = trunc i32 %74 to i8, !dbg !5699
  store i8 %75, i8* %17, align 1, !dbg !5700
  %76 = load i8, i8* %16, align 1, !dbg !5701
  %77 = zext i8 %76 to i32, !dbg !5701
  %78 = icmp eq i32 %77, 0, !dbg !5703
  br i1 %78, label %79, label %96, !dbg !5704

79:                                               ; preds = %65
  %80 = load i32, i32* @x.111
  %81 = load i32, i32* @y.112
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i32, i32* @x.111
  %89 = load i32, i32* @y.112
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %123, !dbg !5705

96:                                               ; preds = %65
  %97 = load i32, i32* @x.111
  %98 = load i32, i32* @y.112
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %96, %originalBB14alteredBB
  %105 = load i8*, i8** %14, align 8, !dbg !5706
  %106 = getelementptr inbounds i8, i8* %105, i32 1, !dbg !5706
  store i8* %106, i8** %14, align 8, !dbg !5706
  %107 = load i8*, i8** %15, align 8, !dbg !5707
  %108 = getelementptr inbounds i8, i8* %107, i32 1, !dbg !5707
  store i8* %108, i8** %15, align 8, !dbg !5707
  %109 = load i32, i32* @x.111
  %110 = load i32, i32* @y.112
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %117, !dbg !5708

117:                                              ; preds = %originalBBpart216
  %118 = load i8, i8* %16, align 1, !dbg !5709
  %119 = zext i8 %118 to i32, !dbg !5709
  %120 = load i8, i8* %17, align 1, !dbg !5710
  %121 = zext i8 %120 to i32, !dbg !5710
  %122 = icmp eq i32 %119, %121, !dbg !5711
  br i1 %122, label %65, label %123, !dbg !5708, !llvm.loop !5712

123:                                              ; preds = %117, %originalBBpart212
  %124 = load i8, i8* %16, align 1, !dbg !5714
  %125 = zext i8 %124 to i32, !dbg !5714
  %126 = load i8, i8* %17, align 1, !dbg !5716
  %127 = zext i8 %126 to i32, !dbg !5716
  %128 = sub nsw i32 %125, %127, !dbg !5717
  store i32 %128, i32* %11, align 4, !dbg !5718
  br label %129, !dbg !5718

129:                                              ; preds = %123, %originalBBpart24
  %130 = load i32, i32* @x.111
  %131 = load i32, i32* @y.112
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %129, %originalBB18alteredBB
  %138 = load i32, i32* %11, align 4, !dbg !5719
  %139 = load i32, i32* @x.111
  %140 = load i32, i32* @y.112
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i32 %138, !dbg !5719

originalBBalteredBB:                              ; preds = %originalBB, %2
  %147 = alloca i32, align 4
  %148 = alloca i8*, align 8
  %149 = alloca i8*, align 8
  %150 = alloca i8*, align 8
  %151 = alloca i8*, align 8
  %152 = alloca i8, align 1
  %153 = alloca i8, align 1
  store i8* %0, i8** %148, align 8
  call void @llvm.dbg.declare(metadata i8** %148, metadata !5720, metadata !DIExpression()), !dbg !5672
  store i8* %1, i8** %149, align 8
  call void @llvm.dbg.declare(metadata i8** %149, metadata !5723, metadata !DIExpression()), !dbg !5674
  call void @llvm.dbg.declare(metadata i8** %150, metadata !5724, metadata !DIExpression()), !dbg !5676
  %154 = load i8*, i8** %148, align 8, !dbg !5677
  store i8* %154, i8** %150, align 8, !dbg !5676
  call void @llvm.dbg.declare(metadata i8** %151, metadata !5725, metadata !DIExpression()), !dbg !5679
  %155 = load i8*, i8** %149, align 8, !dbg !5680
  store i8* %155, i8** %151, align 8, !dbg !5679
  call void @llvm.dbg.declare(metadata i8* %152, metadata !5726, metadata !DIExpression()), !dbg !5682
  call void @llvm.dbg.declare(metadata i8* %153, metadata !5727, metadata !DIExpression()), !dbg !5684
  %156 = load i8*, i8** %150, align 8, !dbg !5685
  %157 = load i8*, i8** %151, align 8, !dbg !5687
  %158 = icmp eq i8* %156, %157, !dbg !5688
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !5690
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %96
  %159 = load i8*, i8** %14, align 8, !dbg !5706
  %160 = getelementptr inbounds i8, i8* %159, i32 1, !dbg !5706
  store i8* %160, i8** %14, align 8, !dbg !5706
  %161 = load i8*, i8** %15, align 8, !dbg !5707
  %162 = getelementptr inbounds i8, i8* %161, i32 1, !dbg !5707
  store i8* %162, i8** %15, align 8, !dbg !5707
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %129
  %163 = load i32, i32* %11, align 4, !dbg !5719
  br label %originalBB18
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !5728 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !5766, metadata !DIExpression()), !dbg !5767
  call void @llvm.dbg.declare(metadata i8* %4, metadata !5768, metadata !DIExpression()), !dbg !5770
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5771
  %8 = call i64 @__fpending(%struct._IO_FILE* %7) #10, !dbg !5772
  %9 = icmp ne i64 %8, 0, !dbg !5773
  %10 = zext i1 %9 to i8, !dbg !5770
  store i8 %10, i8* %4, align 1, !dbg !5770
  call void @llvm.dbg.declare(metadata i8* %5, metadata !5774, metadata !DIExpression()), !dbg !5775
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5776
  %12 = call i32 @ferror_unlocked(%struct._IO_FILE* %11) #10, !dbg !5776
  %13 = icmp ne i32 %12, 0, !dbg !5777
  %14 = zext i1 %13 to i8, !dbg !5775
  store i8 %14, i8* %5, align 1, !dbg !5775
  call void @llvm.dbg.declare(metadata i8* %6, metadata !5778, metadata !DIExpression()), !dbg !5779
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !5780
  %16 = call i32 @rpl_fclose(%struct._IO_FILE* %15), !dbg !5781
  %17 = icmp ne i32 %16, 0, !dbg !5782
  %18 = zext i1 %17 to i8, !dbg !5779
  store i8 %18, i8* %6, align 1, !dbg !5779
  %19 = load i8, i8* %5, align 1, !dbg !5783
  %20 = trunc i8 %19 to i1, !dbg !5783
  br i1 %20, label %79, label %21, !dbg !5785

21:                                               ; preds = %1
  %22 = load i32, i32* @x.113
  %23 = load i32, i32* @y.114
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %21, %originalBBalteredBB
  %30 = load i8, i8* %6, align 1, !dbg !5786
  %31 = trunc i8 %30 to i1, !dbg !5786
  %32 = load i32, i32* @x.113
  %33 = load i32, i32* @y.114
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %101, !dbg !5787

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.113
  %42 = load i32, i32* @y.114
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %40, %originalBB1alteredBB
  %49 = load i8, i8* %4, align 1, !dbg !5788
  %50 = trunc i8 %49 to i1, !dbg !5788
  %51 = load i32, i32* @x.113
  %52 = load i32, i32* @y.114
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %79, label %59, !dbg !5789

59:                                               ; preds = %originalBBpart24
  %60 = load i32, i32* @x.113
  %61 = load i32, i32* @y.114
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = call i32* @__errno_location() #15, !dbg !5790
  %69 = load i32, i32* %68, align 4, !dbg !5790
  %70 = icmp ne i32 %69, 9, !dbg !5791
  %71 = load i32, i32* @x.113
  %72 = load i32, i32* @y.114
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %101, !dbg !5792

79:                                               ; preds = %originalBBpart28, %originalBBpart24, %1
  %80 = load i8, i8* %6, align 1, !dbg !5793
  %81 = trunc i8 %80 to i1, !dbg !5793
  br i1 %81, label %100, label %82, !dbg !5796

82:                                               ; preds = %79
  %83 = load i32, i32* @x.113
  %84 = load i32, i32* @y.114
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  %91 = call i32* @__errno_location() #15, !dbg !5797
  store i32 0, i32* %91, align 4, !dbg !5798
  %92 = load i32, i32* @x.113
  %93 = load i32, i32* @y.114
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !5797

100:                                              ; preds = %originalBBpart212, %79
  store i32 -1, i32* %2, align 4, !dbg !5799
  br label %118, !dbg !5799

101:                                              ; preds = %originalBBpart28, %originalBBpart2
  %102 = load i32, i32* @x.113
  %103 = load i32, i32* @y.114
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  store i32 0, i32* %2, align 4, !dbg !5800
  %110 = load i32, i32* @x.113
  %111 = load i32, i32* @y.114
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %118, !dbg !5800

118:                                              ; preds = %originalBBpart216, %100
  %119 = load i32, i32* @x.113
  %120 = load i32, i32* @y.114
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load i32, i32* %2, align 4, !dbg !5801
  %128 = load i32, i32* @x.113
  %129 = load i32, i32* @y.114
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i32 %127, !dbg !5801

originalBBalteredBB:                              ; preds = %originalBB, %21
  %136 = load i8, i8* %6, align 1, !dbg !5786
  %137 = trunc i8 %136 to i1, !dbg !5786
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %138 = load i8, i8* %4, align 1, !dbg !5788
  %139 = trunc i8 %138 to i1, !dbg !5788
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %140 = call i32* @__errno_location() #15, !dbg !5790
  %141 = load i32, i32* %140, align 4, !dbg !5790
  %142 = icmp ne i32 %141, 9, !dbg !5791
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  %143 = call i32* @__errno_location() #15, !dbg !5797
  store i32 0, i32* %143, align 4, !dbg !5798
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  store i32 0, i32* %2, align 4, !dbg !5800
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  %144 = load i32, i32* %2, align 4, !dbg !5801
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !5802 {
  %1 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %1, metadata !5806, metadata !DIExpression()), !dbg !5807
  %2 = call i8* @nl_langinfo(i32 14) #10, !dbg !5808
  store i8* %2, i8** %1, align 8, !dbg !5809
  %3 = load i8*, i8** %1, align 8, !dbg !5810
  %4 = icmp eq i8* %3, null, !dbg !5812
  br i1 %4, label %5, label %22, !dbg !5813

5:                                                ; preds = %0
  %6 = load i32, i32* @x.115
  %7 = load i32, i32* @y.116
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.179, i64 0, i64 0), i8** %1, align 8, !dbg !5814
  %14 = load i32, i32* @x.115
  %15 = load i32, i32* @y.116
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %22, !dbg !5815

22:                                               ; preds = %originalBBpart2, %0
  %23 = load i32, i32* @x.115
  %24 = load i32, i32* @y.116
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load i8*, i8** %1, align 8, !dbg !5816
  %32 = getelementptr inbounds i8, i8* %31, i64 0, !dbg !5816
  %33 = load i8, i8* %32, align 1, !dbg !5816
  %34 = sext i8 %33 to i32, !dbg !5816
  %35 = icmp eq i32 %34, 0, !dbg !5820
  %36 = load i32, i32* @x.115
  %37 = load i32, i32* @y.116
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %44, label %61, !dbg !5821

44:                                               ; preds = %originalBBpart24
  %45 = load i32, i32* @x.115
  %46 = load i32, i32* @y.116
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.180, i64 0, i64 0), i8** %1, align 8, !dbg !5822
  %53 = load i32, i32* @x.115
  %54 = load i32, i32* @y.116
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %61, !dbg !5823

61:                                               ; preds = %originalBBpart28, %originalBBpart24
  %62 = load i32, i32* @x.115
  %63 = load i32, i32* @y.116
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %1, align 8, !dbg !5824
  %71 = load i32, i32* @x.115
  %72 = load i32, i32* @y.116
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %70, !dbg !5825

originalBBalteredBB:                              ; preds = %originalBB, %5
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.179, i64 0, i64 0), i8** %1, align 8, !dbg !5814
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %79 = load i8*, i8** %1, align 8, !dbg !5816
  %80 = getelementptr inbounds i8, i8* %79, i64 0, !dbg !5816
  %81 = load i8, i8* %80, align 1, !dbg !5816
  %82 = sext i8 %81 to i32, !dbg !5816
  %83 = icmp eq i32 %82, 0, !dbg !5820
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.180, i64 0, i64 0), i8** %1, align 8, !dbg !5822
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %84 = load i8*, i8** %1, align 8, !dbg !5824
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !5826 {
  %2 = load i32, i32* @x.117
  %3 = load i32, i32* @y.118
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !5864, metadata !DIExpression()), !dbg !5865
  call void @llvm.dbg.declare(metadata i32* %12, metadata !5866, metadata !DIExpression()), !dbg !5867
  store i32 0, i32* %12, align 4, !dbg !5867
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5868, metadata !DIExpression()), !dbg !5869
  call void @llvm.dbg.declare(metadata i32* %14, metadata !5870, metadata !DIExpression()), !dbg !5871
  store i32 0, i32* %14, align 4, !dbg !5871
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5872
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !5873
  store i32 %16, i32* %13, align 4, !dbg !5874
  %17 = load i32, i32* %13, align 4, !dbg !5875
  %18 = icmp slt i32 %17, 0, !dbg !5877
  %19 = load i32, i32* @x.117
  %20 = load i32, i32* @y.118
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %46, !dbg !5878

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.117
  %29 = load i32, i32* @y.118
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5879
  %37 = call i32 @fclose(%struct._IO_FILE* %36), !dbg !5880
  store i32 %37, i32* %10, align 4, !dbg !5881
  %38 = load i32, i32* @x.117
  %39 = load i32, i32* @y.118
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %152, !dbg !5881

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.117
  %48 = load i32, i32* @y.118
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5882
  %56 = call i32 @__freading(%struct._IO_FILE* %55) #10, !dbg !5882
  %57 = icmp ne i32 %56, 0, !dbg !5882
  %58 = load i32, i32* @x.117
  %59 = load i32, i32* @y.118
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !5884

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.117
  %68 = load i32, i32* @y.118
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5885
  %76 = call i32 @fileno(%struct._IO_FILE* %75) #10, !dbg !5886
  %77 = call i64 @lseek(i32 %76, i64 0, i32 1) #10, !dbg !5887
  %78 = icmp ne i64 %77, -1, !dbg !5888
  %79 = load i32, i32* @x.117
  %80 = load i32, i32* @y.118
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %78, label %87, label %110, !dbg !5889

87:                                               ; preds = %originalBBpart212, %originalBBpart28
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5890
  %89 = call i32 @rpl_fflush(%struct._IO_FILE* %88), !dbg !5891
  %90 = icmp ne i32 %89, 0, !dbg !5891
  br i1 %90, label %91, label %110, !dbg !5892

91:                                               ; preds = %87
  %92 = load i32, i32* @x.117
  %93 = load i32, i32* @y.118
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call i32* @__errno_location() #15, !dbg !5893
  %101 = load i32, i32* %100, align 4, !dbg !5893
  store i32 %101, i32* %12, align 4, !dbg !5894
  %102 = load i32, i32* @x.117
  %103 = load i32, i32* @y.118
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %110, !dbg !5895

110:                                              ; preds = %originalBBpart216, %87, %originalBBpart212
  %111 = load i32, i32* @x.117
  %112 = load i32, i32* @y.118
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5896
  %120 = call i32 @fclose(%struct._IO_FILE* %119), !dbg !5897
  store i32 %120, i32* %14, align 4, !dbg !5898
  %121 = load i32, i32* %12, align 4, !dbg !5899
  %122 = icmp ne i32 %121, 0, !dbg !5901
  %123 = load i32, i32* @x.117
  %124 = load i32, i32* @y.118
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %122, label %131, label %150, !dbg !5902

131:                                              ; preds = %originalBBpart220
  %132 = load i32, i32* @x.117
  %133 = load i32, i32* @y.118
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i32, i32* %12, align 4, !dbg !5903
  %141 = call i32* @__errno_location() #15, !dbg !5905
  store i32 %140, i32* %141, align 4, !dbg !5906
  store i32 -1, i32* %14, align 4, !dbg !5907
  %142 = load i32, i32* @x.117
  %143 = load i32, i32* @y.118
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %150, !dbg !5908

150:                                              ; preds = %originalBBpart224, %originalBBpart220
  %151 = load i32, i32* %14, align 4, !dbg !5909
  store i32 %151, i32* %10, align 4, !dbg !5910
  br label %152, !dbg !5910

152:                                              ; preds = %150, %originalBBpart24
  %153 = load i32, i32* @x.117
  %154 = load i32, i32* @y.118
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %152, %originalBB26alteredBB
  %161 = load i32, i32* %10, align 4, !dbg !5911
  %162 = load i32, i32* @x.117
  %163 = load i32, i32* @y.118
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 %161, !dbg !5911

originalBBalteredBB:                              ; preds = %originalBB, %1
  %170 = alloca i32, align 4
  %171 = alloca %struct._IO_FILE*, align 8
  %172 = alloca i32, align 4
  %173 = alloca i32, align 4
  %174 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %171, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %171, metadata !5912, metadata !DIExpression()), !dbg !5865
  call void @llvm.dbg.declare(metadata i32* %172, metadata !5951, metadata !DIExpression()), !dbg !5867
  store i32 0, i32* %172, align 4, !dbg !5867
  call void @llvm.dbg.declare(metadata i32* %173, metadata !5952, metadata !DIExpression()), !dbg !5869
  call void @llvm.dbg.declare(metadata i32* %174, metadata !5953, metadata !DIExpression()), !dbg !5871
  store i32 0, i32* %174, align 4, !dbg !5871
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** %171, align 8, !dbg !5872
  %176 = call i32 @fileno(%struct._IO_FILE* %175) #10, !dbg !5873
  store i32 %176, i32* %173, align 4, !dbg !5874
  %177 = load i32, i32* %173, align 4, !dbg !5875
  %178 = icmp slt i32 %177, 0, !dbg !5877
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5879
  %180 = call i32 @fclose(%struct._IO_FILE* %179), !dbg !5880
  store i32 %180, i32* %10, align 4, !dbg !5881
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5882
  %182 = call i32 @__freading(%struct._IO_FILE* %181) #10, !dbg !5882
  %183 = icmp ne i32 %182, 0, !dbg !5882
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %184 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5885
  %185 = call i32 @fileno(%struct._IO_FILE* %184) #10, !dbg !5886
  %186 = call i64 @lseek(i32 %185, i64 0, i32 1) #10, !dbg !5887
  %187 = icmp ne i64 %186, -1, !dbg !5888
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %188 = call i32* @__errno_location() #15, !dbg !5893
  %189 = load i32, i32* %188, align 4, !dbg !5893
  store i32 %189, i32* %12, align 4, !dbg !5894
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5896
  %191 = call i32 @fclose(%struct._IO_FILE* %190), !dbg !5897
  store i32 %191, i32* %14, align 4, !dbg !5898
  %192 = load i32, i32* %12, align 4, !dbg !5899
  %193 = icmp ne i32 %192, 0, !dbg !5901
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %194 = load i32, i32* %12, align 4, !dbg !5903
  %195 = call i32* @__errno_location() #15, !dbg !5905
  store i32 %194, i32* %195, align 4, !dbg !5906
  store i32 -1, i32* %14, align 4, !dbg !5907
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %152
  %196 = load i32, i32* %10, align 4, !dbg !5911
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !5954 {
  %2 = load i32, i32* @x.119
  %3 = load i32, i32* @y.120
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !5992, metadata !DIExpression()), !dbg !5993
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5994
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !5996
  %14 = load i32, i32* @x.119
  %15 = load i32, i32* @y.120
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !5997

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.119
  %24 = load i32, i32* @y.120
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5998
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !5998
  %33 = icmp ne i32 %32, 0, !dbg !5998
  %34 = load i32, i32* @x.119
  %35 = load i32, i32* @y.120
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !5999

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.119
  %44 = load i32, i32* @y.120
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !6000
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !6001
  store i32 %52, i32* %10, align 4, !dbg !6002
  %53 = load i32, i32* @x.119
  %54 = load i32, i32* @y.120
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !6002

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.119
  %63 = load i32, i32* @y.120
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !6003
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !6004
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !6005
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !6006
  store i32 %72, i32* %10, align 4, !dbg !6007
  %73 = load i32, i32* @x.119
  %74 = load i32, i32* @y.120
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !6007

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* %10, align 4, !dbg !6008
  ret i32 %82, !dbg !6008

originalBBalteredBB:                              ; preds = %originalBB, %1
  %83 = alloca i32, align 4
  %84 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %84, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %84, metadata !6009, metadata !DIExpression()), !dbg !5993
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** %84, align 8, !dbg !5994
  %86 = icmp eq %struct._IO_FILE* %85, null, !dbg !5996
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !5998
  %88 = call i32 @__freading(%struct._IO_FILE* %87) #10, !dbg !5998
  %89 = icmp ne i32 %88, 0, !dbg !5998
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !6000
  %91 = call i32 @fflush(%struct._IO_FILE* %90), !dbg !6001
  store i32 %91, i32* %10, align 4, !dbg !6002
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !6003
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %92), !dbg !6004
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !6005
  %94 = call i32 @fflush(%struct._IO_FILE* %93), !dbg !6006
  store i32 %94, i32* %10, align 4, !dbg !6007
  br label %originalBB10
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !6048 {
  %2 = load i32, i32* @x.121
  %3 = load i32, i32* @y.122
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !6051, metadata !DIExpression()), !dbg !6052
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !6053
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !6055
  %13 = load i32, i32* %12, align 8, !dbg !6055
  %14 = and i32 %13, 256, !dbg !6056
  %15 = icmp ne i32 %14, 0, !dbg !6056
  %16 = load i32, i32* @x.121
  %17 = load i32, i32* @y.122
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !6057

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.121
  %26 = load i32, i32* @y.122
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %24, %originalBB7alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !6058
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !6059
  %35 = load i32, i32* @x.121
  %36 = load i32, i32* @y.122
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart29, label %originalBB7alteredBB

originalBBpart29:                                 ; preds = %originalBB7
  br label %43, !dbg !6059

43:                                               ; preds = %originalBBpart29, %originalBBpart2
  ret void, !dbg !6060

originalBBalteredBB:                              ; preds = %originalBB, %1
  %44 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %44, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %44, metadata !6061, metadata !DIExpression()), !dbg !6052
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %44, align 8, !dbg !6053
  %46 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %45, i32 0, i32 0, !dbg !6055
  %47 = load i32, i32* %46, align 8, !dbg !6055
  %_ = sub i32 %47, 256
  %gen = mul i32 %_, 256
  %_1 = shl i32 %47, 256
  %_2 = sub i32 0, %47
  %gen3 = add i32 %_2, 256
  %_4 = sub i32 0, %47
  %gen5 = add i32 %_4, 256
  %_6 = shl i32 %47, 256
  %48 = and i32 %47, 256, !dbg !6056
  %49 = icmp ne i32 %48, 0, !dbg !6056
  br label %originalBB

originalBB7alteredBB:                             ; preds = %originalBB7, %24
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !6058
  %51 = call i32 @rpl_fseeko(%struct._IO_FILE* %50, i64 0, i32 1), !dbg !6059
  br label %originalBB7
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !6100 {
  %4 = load i32, i32* @x.123
  %5 = load i32, i32* @y.124
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !6139, metadata !DIExpression()), !dbg !6140
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !6141, metadata !DIExpression()), !dbg !6142
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !6143, metadata !DIExpression()), !dbg !6144
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6145
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !6147
  %19 = load i8*, i8** %18, align 8, !dbg !6147
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6148
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !6149
  %22 = load i8*, i8** %21, align 8, !dbg !6149
  %23 = icmp eq i8* %19, %22, !dbg !6150
  %24 = load i32, i32* @x.123
  %25 = load i32, i32* @y.124
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %142, !dbg !6151

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.123
  %34 = load i32, i32* @y.124
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6152
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !6153
  %43 = load i8*, i8** %42, align 8, !dbg !6153
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6154
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !6155
  %46 = load i8*, i8** %45, align 8, !dbg !6155
  %47 = icmp eq i8* %43, %46, !dbg !6156
  %48 = load i32, i32* @x.123
  %49 = load i32, i32* @y.124
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %142, !dbg !6157

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.123
  %58 = load i32, i32* @y.124
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6158
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !6159
  %67 = load i8*, i8** %66, align 8, !dbg !6159
  %68 = icmp eq i8* %67, null, !dbg !6160
  %69 = load i32, i32* @x.123
  %70 = load i32, i32* @y.124
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %142, !dbg !6161

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !6162, metadata !DIExpression()), !dbg !6164
  %78 = load i32, i32* @x.123
  %79 = load i32, i32* @y.124
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6165
  %87 = call i32 @fileno(%struct._IO_FILE* %86) #10, !dbg !6166
  %88 = load i64, i64* %14, align 8, !dbg !6167
  %89 = load i32, i32* %15, align 4, !dbg !6168
  %90 = call i64 @lseek(i32 %87, i64 %88, i32 %89) #10, !dbg !6169
  store i64 %90, i64* %16, align 8, !dbg !6164
  %91 = load i64, i64* %16, align 8, !dbg !6170
  %92 = icmp eq i64 %91, -1, !dbg !6172
  %93 = load i32, i32* @x.123
  %94 = load i32, i32* @y.124
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %92, label %101, label %118, !dbg !6173

101:                                              ; preds = %originalBBpart212
  %102 = load i32, i32* @x.123
  %103 = load i32, i32* @y.124
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  store i32 -1, i32* %12, align 4, !dbg !6174
  %110 = load i32, i32* @x.123
  %111 = load i32, i32* @y.124
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %147, !dbg !6174

118:                                              ; preds = %originalBBpart212
  %119 = load i32, i32* @x.123
  %120 = load i32, i32* @y.124
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6176
  %128 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %127, i32 0, i32 0, !dbg !6177
  %129 = load i32, i32* %128, align 8, !dbg !6178
  %130 = and i32 %129, -17, !dbg !6178
  store i32 %130, i32* %128, align 8, !dbg !6178
  %131 = load i64, i64* %16, align 8, !dbg !6179
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6180
  %133 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %132, i32 0, i32 21, !dbg !6181
  store i64 %131, i64* %133, align 8, !dbg !6182
  store i32 0, i32* %12, align 4, !dbg !6183
  %134 = load i32, i32* @x.123
  %135 = load i32, i32* @y.124
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart228, label %originalBB18alteredBB

originalBBpart228:                                ; preds = %originalBB18
  br label %147, !dbg !6183

142:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %143 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6184
  %144 = load i64, i64* %14, align 8, !dbg !6185
  %145 = load i32, i32* %15, align 4, !dbg !6186
  %146 = call i32 @fseeko(%struct._IO_FILE* %143, i64 %144, i32 %145), !dbg !6187
  store i32 %146, i32* %12, align 4, !dbg !6188
  br label %147, !dbg !6188

147:                                              ; preds = %142, %originalBBpart228, %originalBBpart216
  %148 = load i32, i32* %12, align 4, !dbg !6189
  ret i32 %148, !dbg !6189

originalBBalteredBB:                              ; preds = %originalBB, %3
  %149 = alloca i32, align 4
  %150 = alloca %struct._IO_FILE*, align 8
  %151 = alloca i64, align 8
  %152 = alloca i32, align 4
  %153 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %150, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %150, metadata !6190, metadata !DIExpression()), !dbg !6140
  store i64 %1, i64* %151, align 8
  call void @llvm.dbg.declare(metadata i64* %151, metadata !6229, metadata !DIExpression()), !dbg !6142
  store i32 %2, i32* %152, align 4
  call void @llvm.dbg.declare(metadata i32* %152, metadata !6230, metadata !DIExpression()), !dbg !6144
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** %150, align 8, !dbg !6145
  %155 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %154, i32 0, i32 2, !dbg !6147
  %156 = load i8*, i8** %155, align 8, !dbg !6147
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** %150, align 8, !dbg !6148
  %158 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %157, i32 0, i32 1, !dbg !6149
  %159 = load i8*, i8** %158, align 8, !dbg !6149
  %160 = icmp eq i8* %156, %159, !dbg !6150
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %161 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6152
  %162 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %161, i32 0, i32 5, !dbg !6153
  %163 = load i8*, i8** %162, align 8, !dbg !6153
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6154
  %165 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %164, i32 0, i32 4, !dbg !6155
  %166 = load i8*, i8** %165, align 8, !dbg !6155
  %167 = icmp eq i8* %163, %166, !dbg !6156
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6158
  %169 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %168, i32 0, i32 9, !dbg !6159
  %170 = load i8*, i8** %169, align 8, !dbg !6159
  %171 = icmp eq i8* %170, null, !dbg !6160
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6165
  %173 = call i32 @fileno(%struct._IO_FILE* %172) #10, !dbg !6166
  %174 = load i64, i64* %14, align 8, !dbg !6167
  %175 = load i32, i32* %15, align 4, !dbg !6168
  %176 = call i64 @lseek(i32 %173, i64 %174, i32 %175) #10, !dbg !6169
  store i64 %176, i64* %16, align 8, !dbg !6164
  %177 = load i64, i64* %16, align 8, !dbg !6170
  %178 = icmp eq i64 %177, -1, !dbg !6172
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  store i32 -1, i32* %12, align 4, !dbg !6174
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6176
  %180 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %179, i32 0, i32 0, !dbg !6177
  %181 = load i32, i32* %180, align 8, !dbg !6178
  %_ = shl i32 %181, -17
  %_19 = sub i32 0, %181
  %gen = add i32 %_19, -17
  %_20 = shl i32 %181, -17
  %_21 = sub i32 %181, -17
  %gen22 = mul i32 %_21, -17
  %_23 = sub i32 %181, -17
  %gen24 = mul i32 %_23, -17
  %_25 = sub i32 %181, -17
  %gen26 = mul i32 %_25, -17
  %182 = and i32 %181, -17, !dbg !6178
  store i32 %182, i32* %180, align 8, !dbg !6178
  %183 = load i64, i64* %16, align 8, !dbg !6179
  %184 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !6180
  %185 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %184, i32 0, i32 21, !dbg !6181
  store i64 %183, i64* %185, align 8, !dbg !6182
  store i32 0, i32* %12, align 4, !dbg !6183
  br label %originalBB18
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.125
  %4 = load i32, i32* @y.126
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.125
  %14 = load i32, i32* @y.126
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.125
  %23 = load i32, i32* @y.126
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.125
  %34 = load i32, i32* @y.126
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart213, label %originalBB1alteredBB

originalBBpart213:                                ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.125
  %43 = load i32, i32* @y.126
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %41, %originalBB15alteredBB
  %50 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal2, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %50, i8* %0)
  %52 = icmp eq i32 %51, 0
  %53 = load i32, i32* @x.125
  %54 = load i32, i32* @y.126
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %52, label %61, label %80

61:                                               ; preds = %originalBBpart217
  %62 = icmp eq i32 %1, -1
  br i1 %62, label %63, label %80

63:                                               ; preds = %61
  %64 = load i32, i32* @x.125
  %65 = load i32, i32* @y.126
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %63, %originalBB19alteredBB
  %72 = load i32, i32* @x.125
  %73 = load i32, i32* @y.126
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  ret i32 5

80:                                               ; preds = %61, %originalBBpart217
  %81 = load i32, i32* @x.125
  %82 = load i32, i32* @y.126
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %80, %originalBB23alteredBB
  %89 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %90 = call i32 @strcmp(i8* %89, i8* %0)
  %91 = icmp eq i32 %90, 0
  %92 = load i32, i32* @x.125
  %93 = load i32, i32* @y.126
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br i1 %91, label %100, label %135

100:                                              ; preds = %originalBBpart225
  %101 = load i32, i32* @x.125
  %102 = load i32, i32* @y.126
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %100, %originalBB27alteredBB
  %109 = icmp eq i32 %1, 7
  %110 = load i32, i32* @x.125
  %111 = load i32, i32* @y.126
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %109, label %118, label %135

118:                                              ; preds = %originalBBpart229
  %119 = load i32, i32* @x.125
  %120 = load i32, i32* @y.126
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %118, %originalBB31alteredBB
  %127 = load i32, i32* @x.125
  %128 = load i32, i32* @y.126
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  ret i32 3

135:                                              ; preds = %originalBBpart229, %originalBBpart225
  %136 = load i32, i32* @x.125
  %137 = load i32, i32* @y.126
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %135, %originalBB35alteredBB
  %144 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %145 = call i32 @strcmp(i8* %144, i8* %0)
  %146 = icmp eq i32 %145, 0
  %147 = load i32, i32* @x.125
  %148 = load i32, i32* @y.126
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br i1 %146, label %155, label %190

155:                                              ; preds = %originalBBpart237
  %156 = load i32, i32* @x.125
  %157 = load i32, i32* @y.126
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %155, %originalBB39alteredBB
  %164 = icmp eq i32 %1, -3
  %165 = load i32, i32* @x.125
  %166 = load i32, i32* @y.126
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br i1 %164, label %173, label %190

173:                                              ; preds = %originalBBpart241
  %174 = load i32, i32* @x.125
  %175 = load i32, i32* @y.126
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %173, %originalBB43alteredBB
  %182 = load i32, i32* @x.125
  %183 = load i32, i32* @y.126
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  ret i32 3

190:                                              ; preds = %originalBBpart241, %originalBBpart237
  %191 = load i32, i32* @x.125
  %192 = load i32, i32* @y.126
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %190, %originalBB47alteredBB
  %199 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %200 = call i32 @strcmp(i8* %199, i8* %0)
  %201 = icmp eq i32 %200, 0
  %202 = load i32, i32* @x.125
  %203 = load i32, i32* @y.126
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br i1 %201, label %210, label %245

210:                                              ; preds = %originalBBpart249
  %211 = load i32, i32* @x.125
  %212 = load i32, i32* @y.126
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %210, %originalBB51alteredBB
  %219 = icmp eq i32 %1, 0
  %220 = load i32, i32* @x.125
  %221 = load i32, i32* @y.126
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br i1 %219, label %228, label %245

228:                                              ; preds = %originalBBpart253
  %229 = load i32, i32* @x.125
  %230 = load i32, i32* @y.126
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %228, %originalBB55alteredBB
  %237 = load i32, i32* @x.125
  %238 = load i32, i32* @y.126
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  ret i32 5

245:                                              ; preds = %originalBBpart253, %originalBBpart249
  %246 = load i32, i32* @x.125
  %247 = load i32, i32* @y.126
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %245, %originalBB59alteredBB
  call void @srand(i32 %1)
  %254 = call i32 @rand()
  %255 = srem i32 %254, 50000
  %256 = add i32 %255, 2
  %257 = load i32, i32* @x.125
  %258 = load i32, i32* @y.126
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart277, label %originalBB59alteredBB

originalBBpart277:                                ; preds = %originalBB59
  ret i32 %256

originalBBalteredBB:                              ; preds = %originalBB, %2
  %265 = load i32, i32* @inVal0
  %266 = icmp sgt i32 %265, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %267 = call i32 @rand()
  %_ = shl i32 %267, 50000
  %_2 = sub i32 0, %267
  %gen = add i32 %_2, 50000
  %_3 = shl i32 %267, 50000
  %268 = srem i32 %267, 50000
  %_4 = shl i32 %268, 2
  %_5 = sub i32 0, %268
  %gen6 = add i32 %_5, 2
  %_7 = sub i32 0, %268
  %gen8 = add i32 %_7, 2
  %_9 = shl i32 %268, 2
  %_10 = sub i32 0, %268
  %gen11 = add i32 %_10, 2
  %269 = add i32 %268, 2
  br label %originalBB1

originalBB15alteredBB:                            ; preds = %originalBB15, %41
  %270 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal2, i32 0, i32 0
  %271 = call i32 @strcmp(i8* %270, i8* %0)
  %272 = icmp eq i32 %271, 0
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %63
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %80
  %273 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %274 = call i32 @strcmp(i8* %273, i8* %0)
  %275 = icmp eq i32 %274, 0
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %100
  %276 = icmp eq i32 %1, 7
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %118
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %135
  %277 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %278 = call i32 @strcmp(i8* %277, i8* %0)
  %279 = icmp eq i32 %278, 0
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %155
  %280 = icmp eq i32 %1, -3
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %173
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %190
  %281 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %282 = call i32 @strcmp(i8* %281, i8* %0)
  %283 = icmp eq i32 %282, 0
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %210
  %284 = icmp eq i32 %1, 0
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %228
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %245
  call void @srand(i32 %1)
  %285 = call i32 @rand()
  %_60 = sub i32 %285, 50000
  %gen61 = mul i32 %_60, 50000
  %_62 = shl i32 %285, 50000
  %_63 = shl i32 %285, 50000
  %_64 = shl i32 %285, 50000
  %_65 = shl i32 %285, 50000
  %_66 = sub i32 0, %285
  %gen67 = add i32 %_66, 50000
  %_68 = shl i32 %285, 50000
  %286 = srem i32 %285, 50000
  %_69 = shl i32 %286, 2
  %_70 = shl i32 %286, 2
  %_71 = sub i32 %286, 2
  %gen72 = mul i32 %_71, 2
  %_73 = sub i32 0, %286
  %gen74 = add i32 %_73, 2
  %_75 = shl i32 %286, 2
  %287 = add i32 %286, 2
  br label %originalBB59
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !155, !286, !160, !198, !206, !288, !290, !213, !220, !296, !299, !279, !301, !304, !306, !309, !312, !318, !320, !322, !324, !326}
!llvm.ident = !{!328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328, !328}
!llvm.module.flags = !{!329, !330, !331, !332, !333}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 162, type: !141, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !15, nameTableKind: None)
!3 = !DIFile(filename: "src/who.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !8, !9, !13, !14}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!9 = !DIDerivedType(tag: DW_TAG_typedef, name: "time_t", file: !10, line: 7, baseType: !11)
!10 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/time_t.h", directory: "")
!11 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !12, line: 160, baseType: !13)
!12 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!13 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!14 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!15 = !{!16, !19, !21, !23, !25, !27, !29, !31, !33, !35, !37, !39, !41, !43, !45, !47, !51, !0, !54, !62, !108, !113, !118, !123, !131, !136, !138}
!16 = !DIGlobalVariableExpression(var: !17, expr: !DIExpression())
!17 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!18 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "short_list", scope: !2, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!21 = !DIGlobalVariableExpression(var: !22, expr: !DIExpression())
!22 = distinct !DIGlobalVariable(name: "short_output", scope: !2, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "include_idle", scope: !2, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "include_heading", scope: !2, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!27 = !DIGlobalVariableExpression(var: !28, expr: !DIExpression())
!28 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!29 = !DIGlobalVariableExpression(var: !30, expr: !DIExpression())
!30 = distinct !DIGlobalVariable(name: "include_exit", scope: !2, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!33 = !DIGlobalVariableExpression(var: !34, expr: !DIExpression())
!34 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "need_login", scope: !2, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!37 = !DIGlobalVariableExpression(var: !38, expr: !DIExpression())
!38 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!41 = !DIGlobalVariableExpression(var: !42, expr: !DIExpression())
!42 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!43 = !DIGlobalVariableExpression(var: !44, expr: !DIExpression())
!44 = distinct !DIGlobalVariable(name: "need_users", scope: !2, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!45 = !DIGlobalVariableExpression(var: !46, expr: !DIExpression())
!46 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!47 = !DIGlobalVariableExpression(var: !48, expr: !DIExpression())
!48 = distinct !DIGlobalVariable(name: "time_format", scope: !2, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!49 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !50, size: 64)
!50 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!51 = !DIGlobalVariableExpression(var: !52, expr: !DIExpression())
!52 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!53 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!54 = !DIGlobalVariableExpression(var: !55, expr: !DIExpression())
!55 = distinct !DIGlobalVariable(name: "mesg", scope: !56, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!56 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!57 = !DISubroutineType(types: !58)
!58 = !{null, !53, !49, !50, !53, !49, !49, !49, !49, !49, !49}
!59 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 24, elements: !60)
!60 = !{!61}
!61 = !DISubrange(count: 3)
!62 = !DIGlobalVariableExpression(var: !63, expr: !DIExpression())
!63 = distinct !DIGlobalVariable(name: "hoststr", scope: !64, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!64 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !65, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!65 = !DISubroutineType(types: !66)
!66 = !{null, !67, !9}
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64)
!68 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !69)
!69 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !71)
!70 = !DIFile(filename: "./lib/readutmp.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!71 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !73)
!72 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/utmpx.h", directory: "")
!73 = !{!74, !75, !77, !81, !85, !86, !90, !95, !97, !102, !104}
!74 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !71, file: !72, line: 57, baseType: !14, size: 16)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !71, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!76 = !DIDerivedType(tag: DW_TAG_typedef, name: "__pid_t", file: !12, line: 154, baseType: !53)
!77 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !71, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!78 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 256, elements: !79)
!79 = !{!80}
!80 = !DISubrange(count: 32)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !71, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!82 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 32, elements: !83)
!83 = !{!84}
!84 = !DISubrange(count: 4)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !71, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !71, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2048, elements: !88)
!88 = !{!89}
!89 = !DISubrange(count: 256)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !71, file: !72, line: 67, baseType: !91, size: 32, offset: 2656)
!91 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !92)
!92 = !{!93, !94}
!93 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !91, file: !72, line: 45, baseType: !14, size: 16)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !91, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !71, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!96 = !DIDerivedType(tag: DW_TAG_typedef, name: "__int32_t", file: !12, line: 41, baseType: !53)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !71, file: !72, line: 79, baseType: !98, size: 64, offset: 2720)
!98 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !71, file: !72, line: 75, size: 64, elements: !99)
!99 = !{!100, !101}
!100 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !98, file: !72, line: 77, baseType: !96, size: 32)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !98, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !71, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!103 = !DICompositeType(tag: DW_TAG_array_type, baseType: !96, size: 128, elements: !83)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !71, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!105 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 160, elements: !106)
!106 = !{!107}
!107 = !DISubrange(count: 20)
!108 = !DIGlobalVariableExpression(var: !109, expr: !DIExpression())
!109 = distinct !DIGlobalVariable(name: "hostlen", scope: !64, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!110 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !111, line: 46, baseType: !112)
!111 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!112 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!113 = !DIGlobalVariableExpression(var: !114, expr: !DIExpression())
!114 = distinct !DIGlobalVariable(name: "now", scope: !115, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!115 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!116 = !DISubroutineType(types: !117)
!117 = !{!49, !9, !9}
!118 = !DIGlobalVariableExpression(var: !119, expr: !DIExpression())
!119 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !115, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!120 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 48, elements: !121)
!121 = !{!122}
!122 = !DISubrange(count: 6)
!123 = !DIGlobalVariableExpression(var: !124, expr: !DIExpression())
!124 = distinct !DIGlobalVariable(name: "buf", scope: !125, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!125 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !126, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!126 = !DISubroutineType(types: !127)
!127 = !{!49, !67}
!128 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 264, elements: !129)
!129 = !{!130}
!130 = !DISubrange(count: 33)
!131 = !DIGlobalVariableExpression(var: !132, expr: !DIExpression())
!132 = distinct !DIGlobalVariable(name: "runlevline", scope: !133, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!133 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !134, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!134 = !DISubroutineType(types: !135)
!135 = !{null, !67}
!136 = !DIGlobalVariableExpression(var: !137, expr: !DIExpression())
!137 = distinct !DIGlobalVariable(name: "comment", scope: !133, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!138 = !DIGlobalVariableExpression(var: !139, expr: !DIExpression())
!139 = distinct !DIGlobalVariable(name: "exitstr", scope: !140, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!140 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !134, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!141 = !DICompositeType(tag: DW_TAG_array_type, baseType: !142, size: 4608, elements: !151)
!142 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !143)
!143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !145)
!144 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!145 = !{!146, !147, !148, !150}
!146 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !143, file: !144, line: 52, baseType: !49, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !143, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!148 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !143, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !143, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!151 = !{!152}
!152 = !DISubrange(count: 18)
!153 = !DIGlobalVariableExpression(var: !154, expr: !DIExpression())
!154 = distinct !DIGlobalVariable(name: "Version", scope: !155, file: !156, line: 2, type: !49, isLocal: false, isDefinition: true)
!155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !157, nameTableKind: None)
!156 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!157 = !{!153}
!158 = !DIGlobalVariableExpression(var: !159, expr: !DIExpression())
!159 = distinct !DIGlobalVariable(name: "last_cherror", scope: !160, file: !166, line: 28, type: !53, isLocal: true, isDefinition: true)
!160 = distinct !DICompileUnit(language: DW_LANG_C99, file: !161, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !162, nameTableKind: None)
!161 = !DIFile(filename: "./lib/canon-host.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!162 = !{!163, !158}
!163 = !DIGlobalVariableExpression(var: !164, expr: !DIExpression())
!164 = distinct !DIGlobalVariable(name: "hints", scope: !165, file: !166, line: 64, type: !169, isLocal: true, isDefinition: true)
!165 = distinct !DISubprogram(name: "canon_host_r", scope: !166, file: !166, line: 61, type: !167, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !160, retainedNodes: !4)
!166 = !DIFile(filename: "lib/canon-host.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!167 = !DISubroutineType(types: !168)
!168 = !{!6, !49, !149}
!169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "addrinfo", file: !170, line: 565, size: 384, elements: !171)
!170 = !DIFile(filename: "/usr/include/netdb.h", directory: "")
!171 = !{!172, !173, !174, !175, !176, !181, !193, !194}
!172 = !DIDerivedType(tag: DW_TAG_member, name: "ai_flags", scope: !169, file: !170, line: 567, baseType: !53, size: 32)
!173 = !DIDerivedType(tag: DW_TAG_member, name: "ai_family", scope: !169, file: !170, line: 568, baseType: !53, size: 32, offset: 32)
!174 = !DIDerivedType(tag: DW_TAG_member, name: "ai_socktype", scope: !169, file: !170, line: 569, baseType: !53, size: 32, offset: 64)
!175 = !DIDerivedType(tag: DW_TAG_member, name: "ai_protocol", scope: !169, file: !170, line: 570, baseType: !53, size: 32, offset: 96)
!176 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addrlen", scope: !169, file: !170, line: 571, baseType: !177, size: 32, offset: 128)
!177 = !DIDerivedType(tag: DW_TAG_typedef, name: "socklen_t", file: !178, line: 33, baseType: !179)
!178 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/socket.h", directory: "")
!179 = !DIDerivedType(tag: DW_TAG_typedef, name: "__socklen_t", file: !12, line: 209, baseType: !180)
!180 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!181 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addr", scope: !169, file: !170, line: 572, baseType: !182, size: 64, offset: 192)
!182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !183, size: 64)
!183 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr", file: !178, line: 178, size: 128, elements: !184)
!184 = !{!185, !189}
!185 = !DIDerivedType(tag: DW_TAG_member, name: "sa_family", scope: !183, file: !178, line: 180, baseType: !186, size: 16)
!186 = !DIDerivedType(tag: DW_TAG_typedef, name: "sa_family_t", file: !187, line: 28, baseType: !188)
!187 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/sockaddr.h", directory: "")
!188 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "sa_data", scope: !183, file: !178, line: 181, baseType: !190, size: 112, offset: 16)
!190 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 112, elements: !191)
!191 = !{!192}
!192 = !DISubrange(count: 14)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "ai_canonname", scope: !169, file: !170, line: 573, baseType: !6, size: 64, offset: 256)
!194 = !DIDerivedType(tag: DW_TAG_member, name: "ai_next", scope: !169, file: !170, line: 574, baseType: !195, size: 64, offset: 320)
!195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !169, size: 64)
!196 = !DIGlobalVariableExpression(var: !197, expr: !DIExpression())
!197 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !198, file: !203, line: 56, type: !18, isLocal: true, isDefinition: true)
!198 = distinct !DICompileUnit(language: DW_LANG_C99, file: !199, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !200, nameTableKind: None)
!199 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!200 = !{!201, !196}
!201 = !DIGlobalVariableExpression(var: !202, expr: !DIExpression())
!202 = distinct !DIGlobalVariable(name: "file_name", scope: !198, file: !203, line: 46, type: !49, isLocal: true, isDefinition: true)
!203 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!204 = !DIGlobalVariableExpression(var: !205, expr: !DIExpression())
!205 = distinct !DIGlobalVariable(name: "exit_failure", scope: !206, file: !209, line: 24, type: !210, isLocal: false, isDefinition: true)
!206 = distinct !DICompileUnit(language: DW_LANG_C99, file: !207, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !208, nameTableKind: None)
!207 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!208 = !{!204}
!209 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!210 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !53)
!211 = !DIGlobalVariableExpression(var: !212, expr: !DIExpression())
!212 = distinct !DIGlobalVariable(name: "program_name", scope: !213, file: !217, line: 33, type: !49, isLocal: false, isDefinition: true)
!213 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, globals: !216, nameTableKind: None)
!214 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!215 = !{!8, !6}
!216 = !{!211}
!217 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!218 = !DIGlobalVariableExpression(var: !219, expr: !DIExpression())
!219 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !220, file: !241, line: 116, type: !254, isLocal: true, isDefinition: true)
!220 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !238, nameTableKind: None)
!221 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!222 = !{!223}
!223 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !224, line: 32, baseType: !180, size: 32, elements: !225)
!224 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!225 = !{!226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236}
!226 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!227 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!228 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!229 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!230 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!231 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!232 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!233 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!234 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!235 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!236 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!237 = !{!53, !188, !110}
!238 = !{!239, !246, !252, !218, !264, !266, !273, !275}
!239 = !DIGlobalVariableExpression(var: !240, expr: !DIExpression())
!240 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !220, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!241 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!242 = !DICompositeType(tag: DW_TAG_array_type, baseType: !243, size: 704, elements: !244)
!243 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !49)
!244 = !{!245}
!245 = !DISubrange(count: 11)
!246 = !DIGlobalVariableExpression(var: !247, expr: !DIExpression())
!247 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !220, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!248 = !DICompositeType(tag: DW_TAG_array_type, baseType: !249, size: 320, elements: !250)
!249 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !223)
!250 = !{!251}
!251 = !DISubrange(count: 10)
!252 = !DIGlobalVariableExpression(var: !253, expr: !DIExpression())
!253 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !220, file: !241, line: 1052, type: !254, isLocal: false, isDefinition: true)
!254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !255)
!255 = !{!256, !257, !258, !262, !263}
!256 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !254, file: !241, line: 68, baseType: !223, size: 32)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !254, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !254, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!259 = !DICompositeType(tag: DW_TAG_array_type, baseType: !180, size: 256, elements: !260)
!260 = !{!261}
!261 = !DISubrange(count: 8)
!262 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !254, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !254, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!264 = !DIGlobalVariableExpression(var: !265, expr: !DIExpression())
!265 = distinct !DIGlobalVariable(name: "slot0", scope: !220, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!266 = !DIGlobalVariableExpression(var: !267, expr: !DIExpression())
!267 = distinct !DIGlobalVariable(name: "slotvec", scope: !220, file: !241, line: 845, type: !268, isLocal: true, isDefinition: true)
!268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !269, size: 64)
!269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !270)
!270 = !{!271, !272}
!271 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !269, file: !241, line: 836, baseType: !110, size: 64)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !269, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!273 = !DIGlobalVariableExpression(var: !274, expr: !DIExpression())
!274 = distinct !DIGlobalVariable(name: "nslots", scope: !220, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!275 = !DIGlobalVariableExpression(var: !276, expr: !DIExpression())
!276 = distinct !DIGlobalVariable(name: "slotvec0", scope: !220, file: !241, line: 844, type: !269, isLocal: true, isDefinition: true)
!277 = !DIGlobalVariableExpression(var: !278, expr: !DIExpression())
!278 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !279, file: !282, line: 26, type: !283, isLocal: false, isDefinition: true)
!279 = distinct !DICompileUnit(language: DW_LANG_C99, file: !280, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !281, nameTableKind: None)
!280 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!281 = !{!277}
!282 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !50, size: 376, elements: !284)
!284 = !{!285}
!285 = !DISubrange(count: 47)
!286 = distinct !DICompileUnit(language: DW_LANG_C99, file: !287, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!287 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!288 = distinct !DICompileUnit(language: DW_LANG_C99, file: !289, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!289 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!290 = distinct !DICompileUnit(language: DW_LANG_C99, file: !291, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !292, nameTableKind: None)
!291 = !DIFile(filename: "./lib/imaxtostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!292 = !{!293}
!293 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !294, line: 101, baseType: !295)
!294 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!295 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !12, line: 72, baseType: !13)
!296 = distinct !DICompileUnit(language: DW_LANG_C99, file: !297, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!297 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!298 = !{!8}
!299 = distinct !DICompileUnit(language: DW_LANG_C99, file: !300, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!300 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!301 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!302 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!303 = !{!110, !6, !8}
!304 = distinct !DICompileUnit(language: DW_LANG_C99, file: !305, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!305 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!306 = distinct !DICompileUnit(language: DW_LANG_C99, file: !307, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !308, nameTableKind: None)
!307 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!308 = !{!110}
!309 = distinct !DICompileUnit(language: DW_LANG_C99, file: !310, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !311, nameTableKind: None)
!310 = !DIFile(filename: "./lib/readutmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!311 = !{!6, !8}
!312 = distinct !DICompileUnit(language: DW_LANG_C99, file: !313, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !314, nameTableKind: None)
!313 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!314 = !{!315}
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64)
!316 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !317)
!317 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!318 = distinct !DICompileUnit(language: DW_LANG_C99, file: !319, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!319 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!320 = distinct !DICompileUnit(language: DW_LANG_C99, file: !321, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!321 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!322 = distinct !DICompileUnit(language: DW_LANG_C99, file: !323, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!323 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!324 = distinct !DICompileUnit(language: DW_LANG_C99, file: !325, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!325 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!326 = distinct !DICompileUnit(language: DW_LANG_C99, file: !327, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!327 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!328 = !{!"clang version 9.0.1-12 "}
!329 = !{i32 2, !"Dwarf Version", i32 4}
!330 = !{i32 2, !"Debug Info Version", i32 3}
!331 = !{i32 1, !"wchar_size", i32 4}
!332 = !{i32 1, !"ThinLTO", i32 0}
!333 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!334 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 638, type: !335, scopeLine: 639, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!335 = !DISubroutineType(types: !336)
!336 = !{null, !53}
!337 = !DILocalVariable(name: "status", arg: 1, scope: !334, file: !3, line: 638, type: !53)
!338 = !DILocation(line: 638, column: 12, scope: !334)
!339 = !DILocation(line: 640, column: 7, scope: !340)
!340 = distinct !DILexicalBlock(scope: !334, file: !3, line: 640, column: 7)
!341 = !DILocation(line: 640, column: 14, scope: !340)
!342 = !DILocation(line: 640, column: 7, scope: !334)
!343 = !DILocation(line: 641, column: 5, scope: !340)
!344 = !DILocation(line: 641, column: 5, scope: !345)
!345 = distinct !DILexicalBlock(scope: !340, file: !3, line: 641, column: 5)
!346 = !DILocation(line: 644, column: 15, scope: !347)
!347 = distinct !DILexicalBlock(scope: !340, file: !3, line: 643, column: 5)
!348 = !DILocation(line: 644, column: 66, scope: !347)
!349 = !DILocation(line: 644, column: 7, scope: !347)
!350 = !DILocation(line: 645, column: 7, scope: !347)
!351 = !DILocation(line: 648, column: 7, scope: !347)
!352 = !DILocation(line: 655, column: 7, scope: !347)
!353 = !DILocation(line: 658, column: 7, scope: !347)
!354 = !DILocation(line: 663, column: 7, scope: !347)
!355 = !DILocation(line: 669, column: 7, scope: !347)
!356 = !DILocation(line: 675, column: 7, scope: !347)
!357 = !DILocation(line: 676, column: 7, scope: !347)
!358 = !DILocation(line: 677, column: 15, scope: !347)
!359 = !DILocation(line: 677, column: 7, scope: !347)
!360 = !DILocation(line: 682, column: 7, scope: !347)
!361 = !DILocation(line: 684, column: 9, scope: !334)
!362 = !DILocation(line: 684, column: 3, scope: !334)
!363 = !DILocalVariable(name: "status", arg: 1, scope: !364, file: !3, line: 638, type: !53)
!364 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 638, type: !335, scopeLine: 639, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !365, retainedNodes: !4)
!365 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !366, nameTableKind: None)
!366 = !{!367, !369, !371, !373, !375, !377, !379, !381, !383, !385, !387, !389, !391, !393, !395, !397, !399, !401, !411, !414, !443, !445, !448, !450, !455, !460, !462}
!367 = !DIGlobalVariableExpression(var: !368, expr: !DIExpression())
!368 = distinct !DIGlobalVariable(name: "do_lookup", scope: !365, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!369 = !DIGlobalVariableExpression(var: !370, expr: !DIExpression())
!370 = distinct !DIGlobalVariable(name: "short_list", scope: !365, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!371 = !DIGlobalVariableExpression(var: !372, expr: !DIExpression())
!372 = distinct !DIGlobalVariable(name: "short_output", scope: !365, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!373 = !DIGlobalVariableExpression(var: !374, expr: !DIExpression())
!374 = distinct !DIGlobalVariable(name: "include_idle", scope: !365, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!375 = !DIGlobalVariableExpression(var: !376, expr: !DIExpression())
!376 = distinct !DIGlobalVariable(name: "include_heading", scope: !365, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!377 = !DIGlobalVariableExpression(var: !378, expr: !DIExpression())
!378 = distinct !DIGlobalVariable(name: "include_mesg", scope: !365, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!379 = !DIGlobalVariableExpression(var: !380, expr: !DIExpression())
!380 = distinct !DIGlobalVariable(name: "include_exit", scope: !365, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!381 = !DIGlobalVariableExpression(var: !382, expr: !DIExpression())
!382 = distinct !DIGlobalVariable(name: "need_boottime", scope: !365, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!383 = !DIGlobalVariableExpression(var: !384, expr: !DIExpression())
!384 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !365, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!385 = !DIGlobalVariableExpression(var: !386, expr: !DIExpression())
!386 = distinct !DIGlobalVariable(name: "need_login", scope: !365, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!387 = !DIGlobalVariableExpression(var: !388, expr: !DIExpression())
!388 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !365, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!389 = !DIGlobalVariableExpression(var: !390, expr: !DIExpression())
!390 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !365, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!391 = !DIGlobalVariableExpression(var: !392, expr: !DIExpression())
!392 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !365, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!393 = !DIGlobalVariableExpression(var: !394, expr: !DIExpression())
!394 = distinct !DIGlobalVariable(name: "need_users", scope: !365, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!395 = !DIGlobalVariableExpression(var: !396, expr: !DIExpression())
!396 = distinct !DIGlobalVariable(name: "my_line_only", scope: !365, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!397 = !DIGlobalVariableExpression(var: !398, expr: !DIExpression())
!398 = distinct !DIGlobalVariable(name: "time_format", scope: !365, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!399 = !DIGlobalVariableExpression(var: !400, expr: !DIExpression())
!400 = distinct !DIGlobalVariable(name: "time_format_width", scope: !365, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!401 = !DIGlobalVariableExpression(var: !402, expr: !DIExpression())
!402 = distinct !DIGlobalVariable(name: "longopts", scope: !365, file: !3, line: 162, type: !403, isLocal: true, isDefinition: true)
!403 = !DICompositeType(tag: DW_TAG_array_type, baseType: !404, size: 4608, elements: !151)
!404 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !405)
!405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !406)
!406 = !{!407, !408, !409, !410}
!407 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !405, file: !144, line: 52, baseType: !49, size: 64)
!408 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !405, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!409 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !405, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !405, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!411 = !DIGlobalVariableExpression(var: !412, expr: !DIExpression())
!412 = distinct !DIGlobalVariable(name: "mesg", scope: !413, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!413 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!414 = !DIGlobalVariableExpression(var: !415, expr: !DIExpression())
!415 = distinct !DIGlobalVariable(name: "hoststr", scope: !416, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!416 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !417, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!417 = !DISubroutineType(types: !418)
!418 = !{null, !419, !9}
!419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !420, size: 64)
!420 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !422)
!422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !423)
!423 = !{!424, !425, !426, !427, !428, !429, !430, !435, !436, !441, !442}
!424 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !422, file: !72, line: 57, baseType: !14, size: 16)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !422, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!426 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !422, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!427 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !422, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !422, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !422, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!430 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !422, file: !72, line: 67, baseType: !431, size: 32, offset: 2656)
!431 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !432)
!432 = !{!433, !434}
!433 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !431, file: !72, line: 45, baseType: !14, size: 16)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !431, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !422, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !422, file: !72, line: 79, baseType: !437, size: 64, offset: 2720)
!437 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !422, file: !72, line: 75, size: 64, elements: !438)
!438 = !{!439, !440}
!439 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !437, file: !72, line: 77, baseType: !96, size: 32)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !437, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !422, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !422, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!443 = !DIGlobalVariableExpression(var: !444, expr: !DIExpression())
!444 = distinct !DIGlobalVariable(name: "hostlen", scope: !416, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!445 = !DIGlobalVariableExpression(var: !446, expr: !DIExpression())
!446 = distinct !DIGlobalVariable(name: "now", scope: !447, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!447 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!448 = !DIGlobalVariableExpression(var: !449, expr: !DIExpression())
!449 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !447, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!450 = !DIGlobalVariableExpression(var: !451, expr: !DIExpression())
!451 = distinct !DIGlobalVariable(name: "buf", scope: !452, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!452 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !453, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!453 = !DISubroutineType(types: !454)
!454 = !{!49, !419}
!455 = !DIGlobalVariableExpression(var: !456, expr: !DIExpression())
!456 = distinct !DIGlobalVariable(name: "runlevline", scope: !457, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!457 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !458, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!458 = !DISubroutineType(types: !459)
!459 = !{null, !419}
!460 = !DIGlobalVariableExpression(var: !461, expr: !DIExpression())
!461 = distinct !DIGlobalVariable(name: "comment", scope: !457, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!462 = !DIGlobalVariableExpression(var: !463, expr: !DIExpression())
!463 = distinct !DIGlobalVariable(name: "exitstr", scope: !464, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!464 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !458, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !365, retainedNodes: !4)
!465 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !466, file: !466, line: 634, type: !467, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!466 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!467 = !DISubroutineType(types: !468)
!468 = !{null, !49}
!469 = !DILocalVariable(name: "program", arg: 1, scope: !465, file: !466, line: 634, type: !49)
!470 = !DILocation(line: 634, column: 34, scope: !465)
!471 = !DILocalVariable(name: "infomap", scope: !465, file: !466, line: 636, type: !472)
!472 = !DICompositeType(tag: DW_TAG_array_type, baseType: !473, size: 896, elements: !478)
!473 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !474)
!474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !465, file: !466, line: 636, size: 128, elements: !475)
!475 = !{!476, !477}
!476 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !474, file: !466, line: 636, baseType: !49, size: 64)
!477 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !474, file: !466, line: 636, baseType: !49, size: 64, offset: 64)
!478 = !{!479}
!479 = !DISubrange(count: 7)
!480 = !DILocation(line: 636, column: 67, scope: !465)
!481 = !DILocalVariable(name: "node", scope: !465, file: !466, line: 646, type: !49)
!482 = !DILocation(line: 646, column: 15, scope: !465)
!483 = !DILocation(line: 646, column: 22, scope: !465)
!484 = !DILocalVariable(name: "map_prog", scope: !465, file: !466, line: 647, type: !485)
!485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !473, size: 64)
!486 = !DILocation(line: 647, column: 25, scope: !465)
!487 = !DILocation(line: 647, column: 36, scope: !465)
!488 = !DILocation(line: 649, column: 3, scope: !465)
!489 = !DILocation(line: 649, column: 10, scope: !465)
!490 = !DILocation(line: 649, column: 20, scope: !465)
!491 = !DILocation(line: 649, column: 28, scope: !465)
!492 = !DILocation(line: 649, column: 33, scope: !465)
!493 = !DILocation(line: 649, column: 31, scope: !465)
!494 = !DILocation(line: 0, scope: !465)
!495 = !DILocation(line: 650, column: 13, scope: !465)
!496 = distinct !{!496, !488, !495}
!497 = !DILocation(line: 652, column: 7, scope: !498)
!498 = distinct !DILexicalBlock(scope: !465, file: !466, line: 652, column: 7)
!499 = !DILocation(line: 652, column: 17, scope: !498)
!500 = !DILocation(line: 652, column: 7, scope: !465)
!501 = !DILocation(line: 653, column: 12, scope: !498)
!502 = !DILocation(line: 653, column: 22, scope: !498)
!503 = !DILocation(line: 653, column: 10, scope: !498)
!504 = !DILocation(line: 653, column: 5, scope: !498)
!505 = !DILocation(line: 655, column: 11, scope: !465)
!506 = !DILocation(line: 655, column: 3, scope: !465)
!507 = !DILocalVariable(name: "lc_messages", scope: !465, file: !466, line: 659, type: !49)
!508 = !DILocation(line: 659, column: 15, scope: !465)
!509 = !DILocation(line: 659, column: 29, scope: !465)
!510 = !DILocation(line: 660, column: 7, scope: !511)
!511 = distinct !DILexicalBlock(scope: !465, file: !466, line: 660, column: 7)
!512 = !DILocation(line: 660, column: 19, scope: !511)
!513 = !DILocation(line: 660, column: 22, scope: !511)
!514 = !DILocation(line: 660, column: 7, scope: !465)
!515 = !DILocation(line: 666, column: 7, scope: !516)
!516 = distinct !DILexicalBlock(scope: !511, file: !466, line: 661, column: 5)
!517 = !DILocation(line: 668, column: 5, scope: !516)
!518 = !DILocation(line: 669, column: 11, scope: !465)
!519 = !DILocation(line: 670, column: 24, scope: !465)
!520 = !DILocation(line: 669, column: 3, scope: !465)
!521 = !DILocation(line: 671, column: 11, scope: !465)
!522 = !DILocation(line: 672, column: 11, scope: !465)
!523 = !DILocation(line: 672, column: 17, scope: !465)
!524 = !DILocation(line: 672, column: 25, scope: !465)
!525 = !DILocation(line: 672, column: 22, scope: !465)
!526 = !DILocation(line: 671, column: 3, scope: !465)
!527 = !DILocation(line: 673, column: 1, scope: !465)
!528 = !DILocalVariable(name: "program", arg: 1, scope: !529, file: !466, line: 634, type: !49)
!529 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !466, file: !466, line: 634, type: !467, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!530 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !531, nameTableKind: None)
!531 = !{!532, !534, !536, !538, !540, !542, !544, !546, !548, !550, !552, !554, !556, !558, !560, !562, !564, !566, !576, !579, !608, !610, !613, !615, !620, !625, !627}
!532 = !DIGlobalVariableExpression(var: !533, expr: !DIExpression())
!533 = distinct !DIGlobalVariable(name: "do_lookup", scope: !530, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!534 = !DIGlobalVariableExpression(var: !535, expr: !DIExpression())
!535 = distinct !DIGlobalVariable(name: "short_list", scope: !530, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!536 = !DIGlobalVariableExpression(var: !537, expr: !DIExpression())
!537 = distinct !DIGlobalVariable(name: "short_output", scope: !530, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!538 = !DIGlobalVariableExpression(var: !539, expr: !DIExpression())
!539 = distinct !DIGlobalVariable(name: "include_idle", scope: !530, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!540 = !DIGlobalVariableExpression(var: !541, expr: !DIExpression())
!541 = distinct !DIGlobalVariable(name: "include_heading", scope: !530, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!542 = !DIGlobalVariableExpression(var: !543, expr: !DIExpression())
!543 = distinct !DIGlobalVariable(name: "include_mesg", scope: !530, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!544 = !DIGlobalVariableExpression(var: !545, expr: !DIExpression())
!545 = distinct !DIGlobalVariable(name: "include_exit", scope: !530, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!546 = !DIGlobalVariableExpression(var: !547, expr: !DIExpression())
!547 = distinct !DIGlobalVariable(name: "need_boottime", scope: !530, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!548 = !DIGlobalVariableExpression(var: !549, expr: !DIExpression())
!549 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !530, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!550 = !DIGlobalVariableExpression(var: !551, expr: !DIExpression())
!551 = distinct !DIGlobalVariable(name: "need_login", scope: !530, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!552 = !DIGlobalVariableExpression(var: !553, expr: !DIExpression())
!553 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !530, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!554 = !DIGlobalVariableExpression(var: !555, expr: !DIExpression())
!555 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !530, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!556 = !DIGlobalVariableExpression(var: !557, expr: !DIExpression())
!557 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !530, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!558 = !DIGlobalVariableExpression(var: !559, expr: !DIExpression())
!559 = distinct !DIGlobalVariable(name: "need_users", scope: !530, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!560 = !DIGlobalVariableExpression(var: !561, expr: !DIExpression())
!561 = distinct !DIGlobalVariable(name: "my_line_only", scope: !530, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!562 = !DIGlobalVariableExpression(var: !563, expr: !DIExpression())
!563 = distinct !DIGlobalVariable(name: "time_format", scope: !530, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!564 = !DIGlobalVariableExpression(var: !565, expr: !DIExpression())
!565 = distinct !DIGlobalVariable(name: "time_format_width", scope: !530, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!566 = !DIGlobalVariableExpression(var: !567, expr: !DIExpression())
!567 = distinct !DIGlobalVariable(name: "longopts", scope: !530, file: !3, line: 162, type: !568, isLocal: true, isDefinition: true)
!568 = !DICompositeType(tag: DW_TAG_array_type, baseType: !569, size: 4608, elements: !151)
!569 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !570)
!570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !571)
!571 = !{!572, !573, !574, !575}
!572 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !570, file: !144, line: 52, baseType: !49, size: 64)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !570, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !570, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !570, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!576 = !DIGlobalVariableExpression(var: !577, expr: !DIExpression())
!577 = distinct !DIGlobalVariable(name: "mesg", scope: !578, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!578 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!579 = !DIGlobalVariableExpression(var: !580, expr: !DIExpression())
!580 = distinct !DIGlobalVariable(name: "hoststr", scope: !581, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!581 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !582, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!582 = !DISubroutineType(types: !583)
!583 = !{null, !584, !9}
!584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !585, size: 64)
!585 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !586)
!586 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !587)
!587 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !588)
!588 = !{!589, !590, !591, !592, !593, !594, !595, !600, !601, !606, !607}
!589 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !587, file: !72, line: 57, baseType: !14, size: 16)
!590 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !587, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !587, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!592 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !587, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!593 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !587, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !587, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!595 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !587, file: !72, line: 67, baseType: !596, size: 32, offset: 2656)
!596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !597)
!597 = !{!598, !599}
!598 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !596, file: !72, line: 45, baseType: !14, size: 16)
!599 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !596, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!600 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !587, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!601 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !587, file: !72, line: 79, baseType: !602, size: 64, offset: 2720)
!602 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !587, file: !72, line: 75, size: 64, elements: !603)
!603 = !{!604, !605}
!604 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !602, file: !72, line: 77, baseType: !96, size: 32)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !602, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !587, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !587, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!608 = !DIGlobalVariableExpression(var: !609, expr: !DIExpression())
!609 = distinct !DIGlobalVariable(name: "hostlen", scope: !581, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!610 = !DIGlobalVariableExpression(var: !611, expr: !DIExpression())
!611 = distinct !DIGlobalVariable(name: "now", scope: !612, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!612 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!613 = !DIGlobalVariableExpression(var: !614, expr: !DIExpression())
!614 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !612, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!615 = !DIGlobalVariableExpression(var: !616, expr: !DIExpression())
!616 = distinct !DIGlobalVariable(name: "buf", scope: !617, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!617 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !618, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!618 = !DISubroutineType(types: !619)
!619 = !{!49, !584}
!620 = !DIGlobalVariableExpression(var: !621, expr: !DIExpression())
!621 = distinct !DIGlobalVariable(name: "runlevline", scope: !622, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!622 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !623, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!623 = !DISubroutineType(types: !624)
!624 = !{null, !584}
!625 = !DIGlobalVariableExpression(var: !626, expr: !DIExpression())
!626 = distinct !DIGlobalVariable(name: "comment", scope: !622, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!627 = !DIGlobalVariableExpression(var: !628, expr: !DIExpression())
!628 = distinct !DIGlobalVariable(name: "exitstr", scope: !629, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!629 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !623, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !530, retainedNodes: !4)
!630 = !DILocalVariable(name: "infomap", scope: !529, file: !466, line: 636, type: !631)
!631 = !DICompositeType(tag: DW_TAG_array_type, baseType: !632, size: 896, elements: !478)
!632 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !633)
!633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !529, file: !466, line: 636, size: 128, elements: !634)
!634 = !{!635, !636}
!635 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !633, file: !466, line: 636, baseType: !49, size: 64)
!636 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !633, file: !466, line: 636, baseType: !49, size: 64, offset: 64)
!637 = !DILocalVariable(name: "node", scope: !529, file: !466, line: 646, type: !49)
!638 = !DILocalVariable(name: "map_prog", scope: !529, file: !466, line: 647, type: !639)
!639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !632, size: 64)
!640 = !DILocalVariable(name: "lc_messages", scope: !641, file: !466, line: 659, type: !49)
!641 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !466, file: !466, line: 634, type: !467, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!642 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !643, nameTableKind: None)
!643 = !{!644, !646, !648, !650, !652, !654, !656, !658, !660, !662, !664, !666, !668, !670, !672, !674, !676, !678, !688, !691, !720, !722, !725, !727, !732, !737, !739}
!644 = !DIGlobalVariableExpression(var: !645, expr: !DIExpression())
!645 = distinct !DIGlobalVariable(name: "do_lookup", scope: !642, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!646 = !DIGlobalVariableExpression(var: !647, expr: !DIExpression())
!647 = distinct !DIGlobalVariable(name: "short_list", scope: !642, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!648 = !DIGlobalVariableExpression(var: !649, expr: !DIExpression())
!649 = distinct !DIGlobalVariable(name: "short_output", scope: !642, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!650 = !DIGlobalVariableExpression(var: !651, expr: !DIExpression())
!651 = distinct !DIGlobalVariable(name: "include_idle", scope: !642, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!652 = !DIGlobalVariableExpression(var: !653, expr: !DIExpression())
!653 = distinct !DIGlobalVariable(name: "include_heading", scope: !642, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!654 = !DIGlobalVariableExpression(var: !655, expr: !DIExpression())
!655 = distinct !DIGlobalVariable(name: "include_mesg", scope: !642, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!656 = !DIGlobalVariableExpression(var: !657, expr: !DIExpression())
!657 = distinct !DIGlobalVariable(name: "include_exit", scope: !642, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!658 = !DIGlobalVariableExpression(var: !659, expr: !DIExpression())
!659 = distinct !DIGlobalVariable(name: "need_boottime", scope: !642, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!660 = !DIGlobalVariableExpression(var: !661, expr: !DIExpression())
!661 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !642, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!662 = !DIGlobalVariableExpression(var: !663, expr: !DIExpression())
!663 = distinct !DIGlobalVariable(name: "need_login", scope: !642, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!664 = !DIGlobalVariableExpression(var: !665, expr: !DIExpression())
!665 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !642, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!666 = !DIGlobalVariableExpression(var: !667, expr: !DIExpression())
!667 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !642, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!668 = !DIGlobalVariableExpression(var: !669, expr: !DIExpression())
!669 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !642, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!670 = !DIGlobalVariableExpression(var: !671, expr: !DIExpression())
!671 = distinct !DIGlobalVariable(name: "need_users", scope: !642, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!672 = !DIGlobalVariableExpression(var: !673, expr: !DIExpression())
!673 = distinct !DIGlobalVariable(name: "my_line_only", scope: !642, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!674 = !DIGlobalVariableExpression(var: !675, expr: !DIExpression())
!675 = distinct !DIGlobalVariable(name: "time_format", scope: !642, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!676 = !DIGlobalVariableExpression(var: !677, expr: !DIExpression())
!677 = distinct !DIGlobalVariable(name: "time_format_width", scope: !642, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!678 = !DIGlobalVariableExpression(var: !679, expr: !DIExpression())
!679 = distinct !DIGlobalVariable(name: "longopts", scope: !642, file: !3, line: 162, type: !680, isLocal: true, isDefinition: true)
!680 = !DICompositeType(tag: DW_TAG_array_type, baseType: !681, size: 4608, elements: !151)
!681 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !682)
!682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !683)
!683 = !{!684, !685, !686, !687}
!684 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !682, file: !144, line: 52, baseType: !49, size: 64)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !682, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !682, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !682, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!688 = !DIGlobalVariableExpression(var: !689, expr: !DIExpression())
!689 = distinct !DIGlobalVariable(name: "mesg", scope: !690, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!690 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!691 = !DIGlobalVariableExpression(var: !692, expr: !DIExpression())
!692 = distinct !DIGlobalVariable(name: "hoststr", scope: !693, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!693 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !694, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!694 = !DISubroutineType(types: !695)
!695 = !{null, !696, !9}
!696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !697, size: 64)
!697 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !698)
!698 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !699)
!699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !700)
!700 = !{!701, !702, !703, !704, !705, !706, !707, !712, !713, !718, !719}
!701 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !699, file: !72, line: 57, baseType: !14, size: 16)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !699, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !699, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !699, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !699, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !699, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !699, file: !72, line: 67, baseType: !708, size: 32, offset: 2656)
!708 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !709)
!709 = !{!710, !711}
!710 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !708, file: !72, line: 45, baseType: !14, size: 16)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !708, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!712 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !699, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !699, file: !72, line: 79, baseType: !714, size: 64, offset: 2720)
!714 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !699, file: !72, line: 75, size: 64, elements: !715)
!715 = !{!716, !717}
!716 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !714, file: !72, line: 77, baseType: !96, size: 32)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !714, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !699, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !699, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!720 = !DIGlobalVariableExpression(var: !721, expr: !DIExpression())
!721 = distinct !DIGlobalVariable(name: "hostlen", scope: !693, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!722 = !DIGlobalVariableExpression(var: !723, expr: !DIExpression())
!723 = distinct !DIGlobalVariable(name: "now", scope: !724, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!724 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!725 = !DIGlobalVariableExpression(var: !726, expr: !DIExpression())
!726 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !724, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!727 = !DIGlobalVariableExpression(var: !728, expr: !DIExpression())
!728 = distinct !DIGlobalVariable(name: "buf", scope: !729, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!729 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !730, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!730 = !DISubroutineType(types: !731)
!731 = !{!49, !696}
!732 = !DIGlobalVariableExpression(var: !733, expr: !DIExpression())
!733 = distinct !DIGlobalVariable(name: "runlevline", scope: !734, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!734 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !735, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!735 = !DISubroutineType(types: !736)
!736 = !{null, !696}
!737 = !DIGlobalVariableExpression(var: !738, expr: !DIExpression())
!738 = distinct !DIGlobalVariable(name: "comment", scope: !734, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!739 = !DIGlobalVariableExpression(var: !740, expr: !DIExpression())
!740 = distinct !DIGlobalVariable(name: "exitstr", scope: !741, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!741 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !735, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !642, retainedNodes: !4)
!742 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 688, type: !743, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!743 = !DISubroutineType(types: !744)
!744 = !{!53, !53, !745}
!745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!746 = !DILocalVariable(name: "argc", arg: 1, scope: !742, file: !3, line: 688, type: !53)
!747 = !DILocation(line: 688, column: 11, scope: !742)
!748 = !DILocalVariable(name: "argv", arg: 2, scope: !742, file: !3, line: 688, type: !745)
!749 = !DILocation(line: 688, column: 24, scope: !742)
!750 = !DILocalVariable(name: "optc", scope: !742, file: !3, line: 690, type: !53)
!751 = !DILocation(line: 690, column: 7, scope: !742)
!752 = !DILocalVariable(name: "assumptions", scope: !742, file: !3, line: 691, type: !18)
!753 = !DILocation(line: 691, column: 8, scope: !742)
!754 = !DILocation(line: 694, column: 21, scope: !742)
!755 = !DILocation(line: 694, column: 3, scope: !742)
!756 = !DILocation(line: 695, column: 3, scope: !742)
!757 = !DILocation(line: 696, column: 3, scope: !742)
!758 = !DILocation(line: 697, column: 3, scope: !742)
!759 = !DILocation(line: 699, column: 3, scope: !742)
!760 = !DILocation(line: 701, column: 3, scope: !742)
!761 = !DILocation(line: 701, column: 31, scope: !742)
!762 = !DILocation(line: 701, column: 37, scope: !742)
!763 = !DILocation(line: 701, column: 18, scope: !742)
!764 = !DILocation(line: 701, column: 16, scope: !742)
!765 = !DILocation(line: 702, column: 10, scope: !742)
!766 = !DILocation(line: 704, column: 15, scope: !767)
!767 = distinct !DILexicalBlock(scope: !742, file: !3, line: 703, column: 5)
!768 = !DILocation(line: 704, column: 7, scope: !767)
!769 = !DILocation(line: 707, column: 25, scope: !770)
!770 = distinct !DILexicalBlock(scope: !767, file: !3, line: 705, column: 9)
!771 = !DILocation(line: 708, column: 26, scope: !770)
!772 = !DILocation(line: 709, column: 22, scope: !770)
!773 = !DILocation(line: 710, column: 26, scope: !770)
!774 = !DILocation(line: 711, column: 25, scope: !770)
!775 = !DILocation(line: 712, column: 28, scope: !770)
!776 = !DILocation(line: 713, column: 22, scope: !770)
!777 = !DILocation(line: 714, column: 24, scope: !770)
!778 = !DILocation(line: 715, column: 24, scope: !770)
!779 = !DILocation(line: 716, column: 24, scope: !770)
!780 = !DILocation(line: 717, column: 23, scope: !770)
!781 = !DILocation(line: 718, column: 11, scope: !770)
!782 = !DILocation(line: 721, column: 25, scope: !770)
!783 = !DILocation(line: 722, column: 23, scope: !770)
!784 = !DILocation(line: 723, column: 11, scope: !770)
!785 = !DILocation(line: 726, column: 26, scope: !770)
!786 = !DILocation(line: 727, column: 24, scope: !770)
!787 = !DILocation(line: 728, column: 24, scope: !770)
!788 = !DILocation(line: 729, column: 23, scope: !770)
!789 = !DILocation(line: 730, column: 11, scope: !770)
!790 = !DILocation(line: 733, column: 27, scope: !770)
!791 = !DILocation(line: 734, column: 11, scope: !770)
!792 = !DILocation(line: 737, column: 22, scope: !770)
!793 = !DILocation(line: 738, column: 24, scope: !770)
!794 = !DILocation(line: 739, column: 23, scope: !770)
!795 = !DILocation(line: 740, column: 11, scope: !770)
!796 = !DILocation(line: 743, column: 24, scope: !770)
!797 = !DILocation(line: 744, column: 11, scope: !770)
!798 = !DILocation(line: 747, column: 26, scope: !770)
!799 = !DILocation(line: 748, column: 23, scope: !770)
!800 = !DILocation(line: 749, column: 11, scope: !770)
!801 = !DILocation(line: 752, column: 22, scope: !770)
!802 = !DILocation(line: 753, column: 11, scope: !770)
!803 = !DILocation(line: 756, column: 25, scope: !770)
!804 = !DILocation(line: 757, column: 24, scope: !770)
!805 = !DILocation(line: 758, column: 23, scope: !770)
!806 = !DILocation(line: 759, column: 11, scope: !770)
!807 = !DILocation(line: 762, column: 24, scope: !770)
!808 = !DILocation(line: 763, column: 11, scope: !770)
!809 = !DILocation(line: 766, column: 28, scope: !770)
!810 = !DILocation(line: 767, column: 23, scope: !770)
!811 = !DILocation(line: 768, column: 11, scope: !770)
!812 = !DILocation(line: 772, column: 24, scope: !770)
!813 = !DILocation(line: 773, column: 11, scope: !770)
!814 = !DILocation(line: 776, column: 22, scope: !770)
!815 = !DILocation(line: 777, column: 24, scope: !770)
!816 = !DILocation(line: 778, column: 23, scope: !770)
!817 = !DILocation(line: 779, column: 11, scope: !770)
!818 = !DILocation(line: 782, column: 21, scope: !770)
!819 = !DILocation(line: 783, column: 11, scope: !770)
!820 = !DILocation(line: 785, column: 9, scope: !770)
!821 = !DILocation(line: 787, column: 9, scope: !770)
!822 = !DILocation(line: 790, column: 11, scope: !770)
!823 = distinct !{!823, !760, !824}
!824 = !DILocation(line: 792, column: 5, scope: !742)
!825 = !DILocation(line: 794, column: 7, scope: !826)
!826 = distinct !DILexicalBlock(scope: !742, file: !3, line: 794, column: 7)
!827 = !DILocation(line: 794, column: 7, scope: !742)
!828 = !DILocation(line: 796, column: 18, scope: !829)
!829 = distinct !DILexicalBlock(scope: !826, file: !3, line: 795, column: 5)
!830 = !DILocation(line: 797, column: 20, scope: !829)
!831 = !DILocation(line: 798, column: 5, scope: !829)
!832 = !DILocation(line: 800, column: 7, scope: !833)
!833 = distinct !DILexicalBlock(scope: !742, file: !3, line: 800, column: 7)
!834 = !DILocation(line: 800, column: 7, scope: !742)
!835 = !DILocation(line: 802, column: 20, scope: !836)
!836 = distinct !DILexicalBlock(scope: !833, file: !3, line: 801, column: 5)
!837 = !DILocation(line: 803, column: 5, scope: !836)
!838 = !DILocation(line: 805, column: 7, scope: !839)
!839 = distinct !DILexicalBlock(scope: !742, file: !3, line: 805, column: 7)
!840 = !DILocation(line: 805, column: 7, scope: !742)
!841 = !DILocation(line: 807, column: 19, scope: !842)
!842 = distinct !DILexicalBlock(scope: !839, file: !3, line: 806, column: 5)
!843 = !DILocation(line: 808, column: 25, scope: !842)
!844 = !DILocation(line: 809, column: 5, scope: !842)
!845 = !DILocation(line: 812, column: 19, scope: !846)
!846 = distinct !DILexicalBlock(scope: !839, file: !3, line: 811, column: 5)
!847 = !DILocation(line: 813, column: 25, scope: !846)
!848 = !DILocation(line: 816, column: 11, scope: !742)
!849 = !DILocation(line: 816, column: 18, scope: !742)
!850 = !DILocation(line: 816, column: 16, scope: !742)
!851 = !DILocation(line: 816, column: 3, scope: !742)
!852 = !DILocation(line: 819, column: 20, scope: !853)
!853 = distinct !DILexicalBlock(scope: !742, file: !3, line: 817, column: 5)
!854 = !DILocation(line: 820, column: 7, scope: !853)
!855 = !DILocation(line: 823, column: 7, scope: !853)
!856 = !DILocation(line: 824, column: 7, scope: !853)
!857 = !DILocation(line: 827, column: 12, scope: !853)
!858 = !DILocation(line: 827, column: 17, scope: !853)
!859 = !DILocation(line: 827, column: 7, scope: !853)
!860 = !DILocation(line: 828, column: 7, scope: !853)
!861 = !DILocation(line: 831, column: 20, scope: !853)
!862 = !DILocation(line: 831, column: 50, scope: !853)
!863 = !DILocation(line: 831, column: 55, scope: !853)
!864 = !DILocation(line: 831, column: 62, scope: !853)
!865 = !DILocation(line: 831, column: 43, scope: !853)
!866 = !DILocation(line: 831, column: 7, scope: !853)
!867 = !DILocation(line: 832, column: 7, scope: !853)
!868 = !DILocation(line: 835, column: 3, scope: !742)
!869 = !DILocalVariable(name: "argc", arg: 1, scope: !870, file: !3, line: 688, type: !53)
!870 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 688, type: !743, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !871, retainedNodes: !4)
!871 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !872, nameTableKind: None)
!872 = !{!873, !875, !877, !879, !881, !883, !885, !887, !889, !891, !893, !895, !897, !899, !901, !903, !905, !907, !917, !920, !949, !951, !954, !956, !961, !966, !968}
!873 = !DIGlobalVariableExpression(var: !874, expr: !DIExpression())
!874 = distinct !DIGlobalVariable(name: "do_lookup", scope: !871, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!875 = !DIGlobalVariableExpression(var: !876, expr: !DIExpression())
!876 = distinct !DIGlobalVariable(name: "short_list", scope: !871, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!877 = !DIGlobalVariableExpression(var: !878, expr: !DIExpression())
!878 = distinct !DIGlobalVariable(name: "short_output", scope: !871, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!879 = !DIGlobalVariableExpression(var: !880, expr: !DIExpression())
!880 = distinct !DIGlobalVariable(name: "include_idle", scope: !871, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!881 = !DIGlobalVariableExpression(var: !882, expr: !DIExpression())
!882 = distinct !DIGlobalVariable(name: "include_heading", scope: !871, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!883 = !DIGlobalVariableExpression(var: !884, expr: !DIExpression())
!884 = distinct !DIGlobalVariable(name: "include_mesg", scope: !871, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!885 = !DIGlobalVariableExpression(var: !886, expr: !DIExpression())
!886 = distinct !DIGlobalVariable(name: "include_exit", scope: !871, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!887 = !DIGlobalVariableExpression(var: !888, expr: !DIExpression())
!888 = distinct !DIGlobalVariable(name: "need_boottime", scope: !871, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!889 = !DIGlobalVariableExpression(var: !890, expr: !DIExpression())
!890 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !871, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!891 = !DIGlobalVariableExpression(var: !892, expr: !DIExpression())
!892 = distinct !DIGlobalVariable(name: "need_login", scope: !871, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!893 = !DIGlobalVariableExpression(var: !894, expr: !DIExpression())
!894 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !871, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!895 = !DIGlobalVariableExpression(var: !896, expr: !DIExpression())
!896 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !871, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!897 = !DIGlobalVariableExpression(var: !898, expr: !DIExpression())
!898 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !871, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!899 = !DIGlobalVariableExpression(var: !900, expr: !DIExpression())
!900 = distinct !DIGlobalVariable(name: "need_users", scope: !871, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!901 = !DIGlobalVariableExpression(var: !902, expr: !DIExpression())
!902 = distinct !DIGlobalVariable(name: "my_line_only", scope: !871, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!903 = !DIGlobalVariableExpression(var: !904, expr: !DIExpression())
!904 = distinct !DIGlobalVariable(name: "time_format", scope: !871, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!905 = !DIGlobalVariableExpression(var: !906, expr: !DIExpression())
!906 = distinct !DIGlobalVariable(name: "time_format_width", scope: !871, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!907 = !DIGlobalVariableExpression(var: !908, expr: !DIExpression())
!908 = distinct !DIGlobalVariable(name: "longopts", scope: !871, file: !3, line: 162, type: !909, isLocal: true, isDefinition: true)
!909 = !DICompositeType(tag: DW_TAG_array_type, baseType: !910, size: 4608, elements: !151)
!910 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !911)
!911 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !912)
!912 = !{!913, !914, !915, !916}
!913 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !911, file: !144, line: 52, baseType: !49, size: 64)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !911, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !911, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !911, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!917 = !DIGlobalVariableExpression(var: !918, expr: !DIExpression())
!918 = distinct !DIGlobalVariable(name: "mesg", scope: !919, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!919 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!920 = !DIGlobalVariableExpression(var: !921, expr: !DIExpression())
!921 = distinct !DIGlobalVariable(name: "hoststr", scope: !922, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!922 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !923, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!923 = !DISubroutineType(types: !924)
!924 = !{null, !925, !9}
!925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !926, size: 64)
!926 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !927)
!927 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !928)
!928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !929)
!929 = !{!930, !931, !932, !933, !934, !935, !936, !941, !942, !947, !948}
!930 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !928, file: !72, line: 57, baseType: !14, size: 16)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !928, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !928, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !928, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !928, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !928, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !928, file: !72, line: 67, baseType: !937, size: 32, offset: 2656)
!937 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !938)
!938 = !{!939, !940}
!939 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !937, file: !72, line: 45, baseType: !14, size: 16)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !937, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !928, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !928, file: !72, line: 79, baseType: !943, size: 64, offset: 2720)
!943 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !928, file: !72, line: 75, size: 64, elements: !944)
!944 = !{!945, !946}
!945 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !943, file: !72, line: 77, baseType: !96, size: 32)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !943, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !928, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !928, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!949 = !DIGlobalVariableExpression(var: !950, expr: !DIExpression())
!950 = distinct !DIGlobalVariable(name: "hostlen", scope: !922, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!951 = !DIGlobalVariableExpression(var: !952, expr: !DIExpression())
!952 = distinct !DIGlobalVariable(name: "now", scope: !953, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!953 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!954 = !DIGlobalVariableExpression(var: !955, expr: !DIExpression())
!955 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !953, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!956 = !DIGlobalVariableExpression(var: !957, expr: !DIExpression())
!957 = distinct !DIGlobalVariable(name: "buf", scope: !958, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!958 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !959, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!959 = !DISubroutineType(types: !960)
!960 = !{!49, !925}
!961 = !DIGlobalVariableExpression(var: !962, expr: !DIExpression())
!962 = distinct !DIGlobalVariable(name: "runlevline", scope: !963, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!963 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !964, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!964 = !DISubroutineType(types: !965)
!965 = !{null, !925}
!966 = !DIGlobalVariableExpression(var: !967, expr: !DIExpression())
!967 = distinct !DIGlobalVariable(name: "comment", scope: !963, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!968 = !DIGlobalVariableExpression(var: !969, expr: !DIExpression())
!969 = distinct !DIGlobalVariable(name: "exitstr", scope: !970, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!970 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !964, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !871, retainedNodes: !4)
!971 = !DILocalVariable(name: "argv", arg: 2, scope: !870, file: !3, line: 688, type: !745)
!972 = !DILocalVariable(name: "optc", scope: !870, file: !3, line: 690, type: !53)
!973 = !DILocalVariable(name: "assumptions", scope: !870, file: !3, line: 691, type: !18)
!974 = distinct !DISubprogram(name: "who", scope: !3, file: !3, line: 621, type: !975, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!975 = !DISubroutineType(types: !976)
!976 = !{null, !49, !53}
!977 = !DILocalVariable(name: "filename", arg: 1, scope: !974, file: !3, line: 621, type: !49)
!978 = !DILocation(line: 621, column: 18, scope: !974)
!979 = !DILocalVariable(name: "options", arg: 2, scope: !974, file: !3, line: 621, type: !53)
!980 = !DILocation(line: 621, column: 32, scope: !974)
!981 = !DILocalVariable(name: "n_users", scope: !974, file: !3, line: 623, type: !110)
!982 = !DILocation(line: 623, column: 10, scope: !974)
!983 = !DILocalVariable(name: "utmp_buf", scope: !974, file: !3, line: 624, type: !984)
!984 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !69, size: 64)
!985 = !DILocation(line: 624, column: 16, scope: !974)
!986 = !DILocation(line: 626, column: 18, scope: !987)
!987 = distinct !DILexicalBlock(scope: !974, file: !3, line: 626, column: 7)
!988 = !DILocation(line: 626, column: 49, scope: !987)
!989 = !DILocation(line: 626, column: 7, scope: !987)
!990 = !DILocation(line: 626, column: 58, scope: !987)
!991 = !DILocation(line: 626, column: 7, scope: !974)
!992 = !DILocation(line: 627, column: 5, scope: !987)
!993 = !DILocation(line: 629, column: 7, scope: !994)
!994 = distinct !DILexicalBlock(scope: !974, file: !3, line: 629, column: 7)
!995 = !DILocation(line: 629, column: 7, scope: !974)
!996 = !DILocation(line: 630, column: 23, scope: !994)
!997 = !DILocation(line: 630, column: 32, scope: !994)
!998 = !DILocation(line: 630, column: 5, scope: !994)
!999 = !DILocation(line: 632, column: 19, scope: !994)
!1000 = !DILocation(line: 632, column: 28, scope: !994)
!1001 = !DILocation(line: 632, column: 5, scope: !994)
!1002 = !DILocation(line: 634, column: 9, scope: !974)
!1003 = !DILocation(line: 634, column: 3, scope: !974)
!1004 = !DILocation(line: 635, column: 1, scope: !974)
!1005 = !DILocalVariable(name: "filename", arg: 1, scope: !1006, file: !3, line: 621, type: !49)
!1006 = distinct !DISubprogram(name: "who", scope: !3, file: !3, line: 621, type: !975, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1007 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1008, nameTableKind: None)
!1008 = !{!1009, !1011, !1013, !1015, !1017, !1019, !1021, !1023, !1025, !1027, !1029, !1031, !1033, !1035, !1037, !1039, !1041, !1043, !1053, !1056, !1085, !1087, !1090, !1092, !1097, !1102, !1104}
!1009 = !DIGlobalVariableExpression(var: !1010, expr: !DIExpression())
!1010 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1007, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1011 = !DIGlobalVariableExpression(var: !1012, expr: !DIExpression())
!1012 = distinct !DIGlobalVariable(name: "short_list", scope: !1007, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1013 = !DIGlobalVariableExpression(var: !1014, expr: !DIExpression())
!1014 = distinct !DIGlobalVariable(name: "short_output", scope: !1007, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1015 = !DIGlobalVariableExpression(var: !1016, expr: !DIExpression())
!1016 = distinct !DIGlobalVariable(name: "include_idle", scope: !1007, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1017 = !DIGlobalVariableExpression(var: !1018, expr: !DIExpression())
!1018 = distinct !DIGlobalVariable(name: "include_heading", scope: !1007, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1019 = !DIGlobalVariableExpression(var: !1020, expr: !DIExpression())
!1020 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1007, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1021 = !DIGlobalVariableExpression(var: !1022, expr: !DIExpression())
!1022 = distinct !DIGlobalVariable(name: "include_exit", scope: !1007, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1023 = !DIGlobalVariableExpression(var: !1024, expr: !DIExpression())
!1024 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1007, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1025 = !DIGlobalVariableExpression(var: !1026, expr: !DIExpression())
!1026 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1007, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1027 = !DIGlobalVariableExpression(var: !1028, expr: !DIExpression())
!1028 = distinct !DIGlobalVariable(name: "need_login", scope: !1007, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1029 = !DIGlobalVariableExpression(var: !1030, expr: !DIExpression())
!1030 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1007, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1031 = !DIGlobalVariableExpression(var: !1032, expr: !DIExpression())
!1032 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1007, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1033 = !DIGlobalVariableExpression(var: !1034, expr: !DIExpression())
!1034 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1007, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1035 = !DIGlobalVariableExpression(var: !1036, expr: !DIExpression())
!1036 = distinct !DIGlobalVariable(name: "need_users", scope: !1007, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1037 = !DIGlobalVariableExpression(var: !1038, expr: !DIExpression())
!1038 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1007, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1039 = !DIGlobalVariableExpression(var: !1040, expr: !DIExpression())
!1040 = distinct !DIGlobalVariable(name: "time_format", scope: !1007, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1041 = !DIGlobalVariableExpression(var: !1042, expr: !DIExpression())
!1042 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1007, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1043 = !DIGlobalVariableExpression(var: !1044, expr: !DIExpression())
!1044 = distinct !DIGlobalVariable(name: "longopts", scope: !1007, file: !3, line: 162, type: !1045, isLocal: true, isDefinition: true)
!1045 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1046, size: 4608, elements: !151)
!1046 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1047)
!1047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1048)
!1048 = !{!1049, !1050, !1051, !1052}
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1047, file: !144, line: 52, baseType: !49, size: 64)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1047, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1047, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1047, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1053 = !DIGlobalVariableExpression(var: !1054, expr: !DIExpression())
!1054 = distinct !DIGlobalVariable(name: "mesg", scope: !1055, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1055 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1056 = !DIGlobalVariableExpression(var: !1057, expr: !DIExpression())
!1057 = distinct !DIGlobalVariable(name: "hoststr", scope: !1058, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1058 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1059, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1059 = !DISubroutineType(types: !1060)
!1060 = !{null, !1061, !9}
!1061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1062, size: 64)
!1062 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1063)
!1063 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1064)
!1064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1065)
!1065 = !{!1066, !1067, !1068, !1069, !1070, !1071, !1072, !1077, !1078, !1083, !1084}
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1064, file: !72, line: 57, baseType: !14, size: 16)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1064, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1064, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1064, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1064, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1064, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1064, file: !72, line: 67, baseType: !1073, size: 32, offset: 2656)
!1073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1074)
!1074 = !{!1075, !1076}
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1073, file: !72, line: 45, baseType: !14, size: 16)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1073, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1064, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1064, file: !72, line: 79, baseType: !1079, size: 64, offset: 2720)
!1079 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1064, file: !72, line: 75, size: 64, elements: !1080)
!1080 = !{!1081, !1082}
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1079, file: !72, line: 77, baseType: !96, size: 32)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1079, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1064, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1064, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1085 = !DIGlobalVariableExpression(var: !1086, expr: !DIExpression())
!1086 = distinct !DIGlobalVariable(name: "hostlen", scope: !1058, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1087 = !DIGlobalVariableExpression(var: !1088, expr: !DIExpression())
!1088 = distinct !DIGlobalVariable(name: "now", scope: !1089, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1089 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1090 = !DIGlobalVariableExpression(var: !1091, expr: !DIExpression())
!1091 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1089, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1092 = !DIGlobalVariableExpression(var: !1093, expr: !DIExpression())
!1093 = distinct !DIGlobalVariable(name: "buf", scope: !1094, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1094 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1095, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1095 = !DISubroutineType(types: !1096)
!1096 = !{!49, !1061}
!1097 = !DIGlobalVariableExpression(var: !1098, expr: !DIExpression())
!1098 = distinct !DIGlobalVariable(name: "runlevline", scope: !1099, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1099 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1100, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1100 = !DISubroutineType(types: !1101)
!1101 = !{null, !1061}
!1102 = !DIGlobalVariableExpression(var: !1103, expr: !DIExpression())
!1103 = distinct !DIGlobalVariable(name: "comment", scope: !1099, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1104 = !DIGlobalVariableExpression(var: !1105, expr: !DIExpression())
!1105 = distinct !DIGlobalVariable(name: "exitstr", scope: !1106, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1106 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1100, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1007, retainedNodes: !4)
!1107 = !DILocalVariable(name: "options", arg: 2, scope: !1006, file: !3, line: 621, type: !53)
!1108 = !DILocalVariable(name: "n_users", scope: !1006, file: !3, line: 623, type: !110)
!1109 = !DILocalVariable(name: "utmp_buf", scope: !1006, file: !3, line: 624, type: !1110)
!1110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1063, size: 64)
!1111 = distinct !DISubprogram(name: "list_entries_who", scope: !3, file: !3, line: 537, type: !1112, scopeLine: 538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1112 = !DISubroutineType(types: !1113)
!1113 = !{null, !110, !67}
!1114 = !DILocalVariable(name: "n", arg: 1, scope: !1111, file: !3, line: 537, type: !110)
!1115 = !DILocation(line: 537, column: 26, scope: !1111)
!1116 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !1111, file: !3, line: 537, type: !67)
!1117 = !DILocation(line: 537, column: 48, scope: !1111)
!1118 = !DILocalVariable(name: "entries", scope: !1111, file: !3, line: 539, type: !112)
!1119 = !DILocation(line: 539, column: 21, scope: !1111)
!1120 = !DILocalVariable(name: "separator", scope: !1111, file: !3, line: 540, type: !49)
!1121 = !DILocation(line: 540, column: 15, scope: !1111)
!1122 = !DILocation(line: 542, column: 3, scope: !1111)
!1123 = !DILocation(line: 542, column: 11, scope: !1111)
!1124 = !DILocation(line: 544, column: 11, scope: !1125)
!1125 = distinct !DILexicalBlock(scope: !1126, file: !3, line: 544, column: 11)
!1126 = distinct !DILexicalBlock(scope: !1111, file: !3, line: 543, column: 5)
!1127 = !DILocation(line: 544, column: 11, scope: !1126)
!1128 = !DILocalVariable(name: "trimmed_name", scope: !1129, file: !3, line: 546, type: !6)
!1129 = distinct !DILexicalBlock(scope: !1125, file: !3, line: 545, column: 9)
!1130 = !DILocation(line: 546, column: 17, scope: !1129)
!1131 = !DILocation(line: 548, column: 48, scope: !1129)
!1132 = !DILocation(line: 548, column: 26, scope: !1129)
!1133 = !DILocation(line: 548, column: 24, scope: !1129)
!1134 = !DILocation(line: 550, column: 27, scope: !1129)
!1135 = !DILocation(line: 550, column: 38, scope: !1129)
!1136 = !DILocation(line: 550, column: 11, scope: !1129)
!1137 = !DILocation(line: 551, column: 17, scope: !1129)
!1138 = !DILocation(line: 551, column: 11, scope: !1129)
!1139 = !DILocation(line: 552, column: 21, scope: !1129)
!1140 = !DILocation(line: 553, column: 18, scope: !1129)
!1141 = !DILocation(line: 554, column: 9, scope: !1129)
!1142 = !DILocation(line: 555, column: 15, scope: !1126)
!1143 = distinct !{!1143, !1122, !1144}
!1144 = !DILocation(line: 556, column: 5, scope: !1111)
!1145 = !DILocation(line: 557, column: 11, scope: !1111)
!1146 = !DILocation(line: 557, column: 33, scope: !1111)
!1147 = !DILocation(line: 557, column: 3, scope: !1111)
!1148 = !DILocation(line: 558, column: 1, scope: !1111)
!1149 = distinct !DISubprogram(name: "scan_entries", scope: !3, file: !3, line: 569, type: !1112, scopeLine: 570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1150 = !DILocalVariable(name: "n", arg: 1, scope: !1149, file: !3, line: 569, type: !110)
!1151 = !DILocation(line: 569, column: 22, scope: !1149)
!1152 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !1149, file: !3, line: 569, type: !67)
!1153 = !DILocation(line: 569, column: 44, scope: !1149)
!1154 = !DILocalVariable(name: "ttyname_b", scope: !1149, file: !3, line: 571, type: !6)
!1155 = !DILocation(line: 571, column: 9, scope: !1149)
!1156 = !DILocalVariable(name: "boottime", scope: !1149, file: !3, line: 572, type: !9)
!1157 = !DILocation(line: 572, column: 10, scope: !1149)
!1158 = !DILocation(line: 574, column: 7, scope: !1159)
!1159 = distinct !DILexicalBlock(scope: !1149, file: !3, line: 574, column: 7)
!1160 = !DILocation(line: 574, column: 7, scope: !1149)
!1161 = !DILocation(line: 575, column: 5, scope: !1159)
!1162 = !DILocation(line: 577, column: 7, scope: !1163)
!1163 = distinct !DILexicalBlock(scope: !1149, file: !3, line: 577, column: 7)
!1164 = !DILocation(line: 577, column: 7, scope: !1149)
!1165 = !DILocation(line: 579, column: 19, scope: !1166)
!1166 = distinct !DILexicalBlock(scope: !1163, file: !3, line: 578, column: 5)
!1167 = !DILocation(line: 579, column: 17, scope: !1166)
!1168 = !DILocation(line: 580, column: 12, scope: !1169)
!1169 = distinct !DILexicalBlock(scope: !1166, file: !3, line: 580, column: 11)
!1170 = !DILocation(line: 580, column: 11, scope: !1166)
!1171 = !DILocation(line: 581, column: 9, scope: !1169)
!1172 = !DILocation(line: 582, column: 11, scope: !1173)
!1173 = distinct !DILexicalBlock(scope: !1166, file: !3, line: 582, column: 11)
!1174 = !DILocation(line: 582, column: 64, scope: !1173)
!1175 = !DILocation(line: 583, column: 19, scope: !1173)
!1176 = !DILocation(line: 583, column: 9, scope: !1173)
!1177 = !DILocation(line: 584, column: 5, scope: !1166)
!1178 = !DILocation(line: 586, column: 3, scope: !1149)
!1179 = !DILocation(line: 586, column: 11, scope: !1149)
!1180 = !DILocation(line: 588, column: 12, scope: !1181)
!1181 = distinct !DILexicalBlock(scope: !1182, file: !3, line: 588, column: 11)
!1182 = distinct !DILexicalBlock(scope: !1149, file: !3, line: 587, column: 5)
!1183 = !DILocation(line: 589, column: 11, scope: !1181)
!1184 = !DILocation(line: 589, column: 14, scope: !1181)
!1185 = !DILocation(line: 588, column: 11, scope: !1182)
!1186 = !DILocation(line: 592, column: 15, scope: !1187)
!1187 = distinct !DILexicalBlock(scope: !1188, file: !3, line: 592, column: 15)
!1188 = distinct !DILexicalBlock(scope: !1181, file: !3, line: 591, column: 9)
!1189 = !DILocation(line: 592, column: 26, scope: !1187)
!1190 = !DILocation(line: 592, column: 29, scope: !1187)
!1191 = !DILocation(line: 592, column: 15, scope: !1188)
!1192 = !DILocation(line: 593, column: 25, scope: !1187)
!1193 = !DILocation(line: 593, column: 35, scope: !1187)
!1194 = !DILocation(line: 593, column: 13, scope: !1187)
!1195 = !DILocation(line: 594, column: 20, scope: !1196)
!1196 = distinct !DILexicalBlock(scope: !1187, file: !3, line: 594, column: 20)
!1197 = !DILocation(line: 594, column: 34, scope: !1196)
!1198 = !DILocation(line: 594, column: 37, scope: !1196)
!1199 = !DILocation(line: 594, column: 20, scope: !1187)
!1200 = !DILocation(line: 595, column: 29, scope: !1196)
!1201 = !DILocation(line: 595, column: 13, scope: !1196)
!1202 = !DILocation(line: 596, column: 20, scope: !1203)
!1203 = distinct !DILexicalBlock(scope: !1196, file: !3, line: 596, column: 20)
!1204 = !DILocation(line: 596, column: 34, scope: !1203)
!1205 = !DILocation(line: 596, column: 37, scope: !1203)
!1206 = !DILocation(line: 596, column: 20, scope: !1196)
!1207 = !DILocation(line: 597, column: 29, scope: !1203)
!1208 = !DILocation(line: 597, column: 13, scope: !1203)
!1209 = !DILocation(line: 601, column: 20, scope: !1210)
!1210 = distinct !DILexicalBlock(scope: !1203, file: !3, line: 601, column: 20)
!1211 = !DILocation(line: 601, column: 37, scope: !1210)
!1212 = !DILocation(line: 601, column: 40, scope: !1210)
!1213 = !DILocation(line: 601, column: 20, scope: !1203)
!1214 = !DILocation(line: 602, column: 32, scope: !1210)
!1215 = !DILocation(line: 602, column: 13, scope: !1210)
!1216 = !DILocation(line: 603, column: 20, scope: !1217)
!1217 = distinct !DILexicalBlock(scope: !1210, file: !3, line: 603, column: 20)
!1218 = !DILocation(line: 603, column: 35, scope: !1217)
!1219 = !DILocation(line: 603, column: 38, scope: !1217)
!1220 = !DILocation(line: 603, column: 20, scope: !1210)
!1221 = !DILocation(line: 604, column: 30, scope: !1217)
!1222 = !DILocation(line: 604, column: 13, scope: !1217)
!1223 = !DILocation(line: 605, column: 20, scope: !1224)
!1224 = distinct !DILexicalBlock(scope: !1217, file: !3, line: 605, column: 20)
!1225 = !DILocation(line: 605, column: 31, scope: !1224)
!1226 = !DILocation(line: 605, column: 34, scope: !1224)
!1227 = !DILocation(line: 605, column: 20, scope: !1217)
!1228 = !DILocation(line: 606, column: 26, scope: !1224)
!1229 = !DILocation(line: 606, column: 13, scope: !1224)
!1230 = !DILocation(line: 607, column: 20, scope: !1231)
!1231 = distinct !DILexicalBlock(scope: !1224, file: !3, line: 607, column: 20)
!1232 = !DILocation(line: 607, column: 35, scope: !1231)
!1233 = !DILocation(line: 607, column: 38, scope: !1231)
!1234 = !DILocation(line: 607, column: 20, scope: !1224)
!1235 = !DILocation(line: 608, column: 30, scope: !1231)
!1236 = !DILocation(line: 608, column: 13, scope: !1231)
!1237 = !DILocation(line: 609, column: 9, scope: !1188)
!1238 = !DILocation(line: 611, column: 11, scope: !1239)
!1239 = distinct !DILexicalBlock(scope: !1182, file: !3, line: 611, column: 11)
!1240 = !DILocation(line: 611, column: 11, scope: !1182)
!1241 = !DILocation(line: 612, column: 20, scope: !1239)
!1242 = !DILocation(line: 612, column: 18, scope: !1239)
!1243 = !DILocation(line: 612, column: 9, scope: !1239)
!1244 = !DILocation(line: 614, column: 15, scope: !1182)
!1245 = distinct !{!1245, !1178, !1246}
!1246 = !DILocation(line: 615, column: 5, scope: !1149)
!1247 = !DILocation(line: 616, column: 1, scope: !1149)
!1248 = !DILocalVariable(name: "n", arg: 1, scope: !1249, file: !3, line: 569, type: !110)
!1249 = distinct !DISubprogram(name: "scan_entries", scope: !3, file: !3, line: 569, type: !1250, scopeLine: 570, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1276, retainedNodes: !4)
!1250 = !DISubroutineType(types: !1251)
!1251 = !{null, !110, !1252}
!1252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1253, size: 64)
!1253 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1254)
!1254 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1255)
!1255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1256)
!1256 = !{!1257, !1258, !1259, !1260, !1261, !1262, !1263, !1268, !1269, !1274, !1275}
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1255, file: !72, line: 57, baseType: !14, size: 16)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1255, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1255, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1255, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1255, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1255, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1255, file: !72, line: 67, baseType: !1264, size: 32, offset: 2656)
!1264 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1265)
!1265 = !{!1266, !1267}
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1264, file: !72, line: 45, baseType: !14, size: 16)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1264, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1255, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1255, file: !72, line: 79, baseType: !1270, size: 64, offset: 2720)
!1270 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1255, file: !72, line: 75, size: 64, elements: !1271)
!1271 = !{!1272, !1273}
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1270, file: !72, line: 77, baseType: !96, size: 32)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1270, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1255, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1255, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1276 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1277, nameTableKind: None)
!1277 = !{!1278, !1280, !1282, !1284, !1286, !1288, !1290, !1292, !1294, !1296, !1298, !1300, !1302, !1304, !1306, !1308, !1310, !1312, !1322, !1325, !1330, !1332, !1335, !1337, !1342, !1347, !1349}
!1278 = !DIGlobalVariableExpression(var: !1279, expr: !DIExpression())
!1279 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1276, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1280 = !DIGlobalVariableExpression(var: !1281, expr: !DIExpression())
!1281 = distinct !DIGlobalVariable(name: "short_list", scope: !1276, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1282 = !DIGlobalVariableExpression(var: !1283, expr: !DIExpression())
!1283 = distinct !DIGlobalVariable(name: "short_output", scope: !1276, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1284 = !DIGlobalVariableExpression(var: !1285, expr: !DIExpression())
!1285 = distinct !DIGlobalVariable(name: "include_idle", scope: !1276, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1286 = !DIGlobalVariableExpression(var: !1287, expr: !DIExpression())
!1287 = distinct !DIGlobalVariable(name: "include_heading", scope: !1276, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1288 = !DIGlobalVariableExpression(var: !1289, expr: !DIExpression())
!1289 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1276, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1290 = !DIGlobalVariableExpression(var: !1291, expr: !DIExpression())
!1291 = distinct !DIGlobalVariable(name: "include_exit", scope: !1276, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1292 = !DIGlobalVariableExpression(var: !1293, expr: !DIExpression())
!1293 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1276, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1294 = !DIGlobalVariableExpression(var: !1295, expr: !DIExpression())
!1295 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1276, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1296 = !DIGlobalVariableExpression(var: !1297, expr: !DIExpression())
!1297 = distinct !DIGlobalVariable(name: "need_login", scope: !1276, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1298 = !DIGlobalVariableExpression(var: !1299, expr: !DIExpression())
!1299 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1276, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1300 = !DIGlobalVariableExpression(var: !1301, expr: !DIExpression())
!1301 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1276, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1302 = !DIGlobalVariableExpression(var: !1303, expr: !DIExpression())
!1303 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1276, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1304 = !DIGlobalVariableExpression(var: !1305, expr: !DIExpression())
!1305 = distinct !DIGlobalVariable(name: "need_users", scope: !1276, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1306 = !DIGlobalVariableExpression(var: !1307, expr: !DIExpression())
!1307 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1276, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1308 = !DIGlobalVariableExpression(var: !1309, expr: !DIExpression())
!1309 = distinct !DIGlobalVariable(name: "time_format", scope: !1276, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1310 = !DIGlobalVariableExpression(var: !1311, expr: !DIExpression())
!1311 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1276, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1312 = !DIGlobalVariableExpression(var: !1313, expr: !DIExpression())
!1313 = distinct !DIGlobalVariable(name: "longopts", scope: !1276, file: !3, line: 162, type: !1314, isLocal: true, isDefinition: true)
!1314 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1315, size: 4608, elements: !151)
!1315 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1316)
!1316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1317)
!1317 = !{!1318, !1319, !1320, !1321}
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1316, file: !144, line: 52, baseType: !49, size: 64)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1316, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1316, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1316, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1322 = !DIGlobalVariableExpression(var: !1323, expr: !DIExpression())
!1323 = distinct !DIGlobalVariable(name: "mesg", scope: !1324, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1324 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1276, retainedNodes: !4)
!1325 = !DIGlobalVariableExpression(var: !1326, expr: !DIExpression())
!1326 = distinct !DIGlobalVariable(name: "hoststr", scope: !1327, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1327 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1328, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1276, retainedNodes: !4)
!1328 = !DISubroutineType(types: !1329)
!1329 = !{null, !1252, !9}
!1330 = !DIGlobalVariableExpression(var: !1331, expr: !DIExpression())
!1331 = distinct !DIGlobalVariable(name: "hostlen", scope: !1327, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1332 = !DIGlobalVariableExpression(var: !1333, expr: !DIExpression())
!1333 = distinct !DIGlobalVariable(name: "now", scope: !1334, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1334 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1276, retainedNodes: !4)
!1335 = !DIGlobalVariableExpression(var: !1336, expr: !DIExpression())
!1336 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1334, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1337 = !DIGlobalVariableExpression(var: !1338, expr: !DIExpression())
!1338 = distinct !DIGlobalVariable(name: "buf", scope: !1339, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1339 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1340, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1276, retainedNodes: !4)
!1340 = !DISubroutineType(types: !1341)
!1341 = !{!49, !1252}
!1342 = !DIGlobalVariableExpression(var: !1343, expr: !DIExpression())
!1343 = distinct !DIGlobalVariable(name: "runlevline", scope: !1344, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1344 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1345, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1276, retainedNodes: !4)
!1345 = !DISubroutineType(types: !1346)
!1346 = !{null, !1252}
!1347 = !DIGlobalVariableExpression(var: !1348, expr: !DIExpression())
!1348 = distinct !DIGlobalVariable(name: "comment", scope: !1344, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1349 = !DIGlobalVariableExpression(var: !1350, expr: !DIExpression())
!1350 = distinct !DIGlobalVariable(name: "exitstr", scope: !1351, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1351 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1345, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1276, retainedNodes: !4)
!1352 = !DILocalVariable(name: "utmp_buf", arg: 2, scope: !1249, file: !3, line: 569, type: !1252)
!1353 = !DILocalVariable(name: "ttyname_b", scope: !1249, file: !3, line: 571, type: !6)
!1354 = !DILocalVariable(name: "boottime", scope: !1249, file: !3, line: 572, type: !9)
!1355 = distinct !DISubprogram(name: "print_heading", scope: !3, file: !3, line: 561, type: !1356, scopeLine: 562, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1356 = !DISubroutineType(types: !1357)
!1357 = !{null}
!1358 = !DILocation(line: 563, column: 19, scope: !1355)
!1359 = !DILocation(line: 563, column: 39, scope: !1355)
!1360 = !DILocation(line: 563, column: 50, scope: !1355)
!1361 = !DILocation(line: 563, column: 61, scope: !1355)
!1362 = !DILocation(line: 564, column: 15, scope: !1355)
!1363 = !DILocation(line: 564, column: 25, scope: !1355)
!1364 = !DILocation(line: 564, column: 39, scope: !1355)
!1365 = !DILocation(line: 563, column: 3, scope: !1355)
!1366 = !DILocation(line: 565, column: 1, scope: !1355)
!1367 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !64, file: !3, line: 333, type: !67)
!1368 = !DILocation(line: 333, column: 32, scope: !64)
!1369 = !DILocalVariable(name: "boottime", arg: 2, scope: !64, file: !3, line: 333, type: !9)
!1370 = !DILocation(line: 333, column: 49, scope: !64)
!1371 = !DILocalVariable(name: "stats", scope: !64, file: !3, line: 335, type: !1372)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !1373, line: 46, size: 1152, elements: !1374)
!1373 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!1374 = !{!1375, !1377, !1379, !1381, !1383, !1385, !1387, !1388, !1389, !1391, !1393, !1395, !1402, !1403, !1404}
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !1372, file: !1373, line: 48, baseType: !1376, size: 64)
!1376 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !12, line: 145, baseType: !112)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !1372, file: !1373, line: 53, baseType: !1378, size: 64, offset: 64)
!1378 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !12, line: 148, baseType: !112)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !1372, file: !1373, line: 61, baseType: !1380, size: 64, offset: 128)
!1380 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !12, line: 151, baseType: !112)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !1372, file: !1373, line: 62, baseType: !1382, size: 32, offset: 192)
!1382 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !12, line: 150, baseType: !180)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !1372, file: !1373, line: 64, baseType: !1384, size: 32, offset: 224)
!1384 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !12, line: 146, baseType: !180)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !1372, file: !1373, line: 65, baseType: !1386, size: 32, offset: 256)
!1386 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !12, line: 147, baseType: !180)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !1372, file: !1373, line: 67, baseType: !53, size: 32, offset: 288)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !1372, file: !1373, line: 69, baseType: !1376, size: 64, offset: 320)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !1372, file: !1373, line: 74, baseType: !1390, size: 64, offset: 384)
!1390 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !12, line: 152, baseType: !13)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !1372, file: !1373, line: 78, baseType: !1392, size: 64, offset: 448)
!1392 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !12, line: 174, baseType: !13)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !1372, file: !1373, line: 80, baseType: !1394, size: 64, offset: 512)
!1394 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !12, line: 179, baseType: !13)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !1372, file: !1373, line: 91, baseType: !1396, size: 128, offset: 576)
!1396 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !1397, line: 10, size: 128, elements: !1398)
!1397 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!1398 = !{!1399, !1400}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1396, file: !1397, line: 12, baseType: !11, size: 64)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1396, file: !1397, line: 16, baseType: !1401, size: 64, offset: 64)
!1401 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !12, line: 196, baseType: !13)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !1372, file: !1373, line: 92, baseType: !1396, size: 128, offset: 704)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !1372, file: !1373, line: 93, baseType: !1396, size: 128, offset: 832)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1372, file: !1373, line: 106, baseType: !1405, size: 192, offset: 960)
!1405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1401, size: 192, elements: !60)
!1406 = !DILocation(line: 335, column: 15, scope: !64)
!1407 = !DILocalVariable(name: "last_change", scope: !64, file: !3, line: 336, type: !9)
!1408 = !DILocation(line: 336, column: 10, scope: !64)
!1409 = !DILocalVariable(name: "mesg", scope: !64, file: !3, line: 337, type: !7)
!1410 = !DILocation(line: 337, column: 8, scope: !64)
!1411 = !DILocalVariable(name: "idlestr", scope: !64, file: !3, line: 338, type: !1412)
!1412 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 56, elements: !478)
!1413 = !DILocation(line: 338, column: 8, scope: !64)
!1414 = !DILocalVariable(name: "line", scope: !64, file: !3, line: 347, type: !1415)
!1415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 304, elements: !1416)
!1416 = !{!1417}
!1417 = !DISubrange(count: 38)
!1418 = !DILocation(line: 347, column: 8, scope: !64)
!1419 = !DILocalVariable(name: "p", scope: !64, file: !3, line: 348, type: !6)
!1420 = !DILocation(line: 348, column: 9, scope: !64)
!1421 = !DILocation(line: 348, column: 13, scope: !64)
!1422 = !DILocalVariable(name: "pidstr", scope: !64, file: !3, line: 349, type: !1423)
!1423 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 96, elements: !1424)
!1424 = !{!1425}
!1425 = !DISubrange(count: 12)
!1426 = !DILocation(line: 349, column: 3, scope: !64)
!1427 = !DILocation(line: 354, column: 10, scope: !1428)
!1428 = distinct !DILexicalBlock(scope: !64, file: !3, line: 354, column: 8)
!1429 = !DILocation(line: 354, column: 8, scope: !64)
!1430 = !DILocation(line: 355, column: 17, scope: !1428)
!1431 = !DILocation(line: 355, column: 9, scope: !1428)
!1432 = !DILocation(line: 355, column: 7, scope: !1428)
!1433 = !DILocation(line: 355, column: 5, scope: !1428)
!1434 = !DILocation(line: 356, column: 12, scope: !64)
!1435 = !DILocation(line: 356, column: 15, scope: !64)
!1436 = !DILocation(line: 356, column: 25, scope: !64)
!1437 = !DILocation(line: 356, column: 3, scope: !64)
!1438 = !DILocation(line: 358, column: 13, scope: !1439)
!1439 = distinct !DILexicalBlock(scope: !64, file: !3, line: 358, column: 7)
!1440 = !DILocation(line: 358, column: 7, scope: !1439)
!1441 = !DILocation(line: 358, column: 27, scope: !1439)
!1442 = !DILocation(line: 358, column: 7, scope: !64)
!1443 = !DILocation(line: 360, column: 14, scope: !1444)
!1444 = distinct !DILexicalBlock(scope: !1439, file: !3, line: 359, column: 5)
!1445 = !DILocation(line: 360, column: 12, scope: !1444)
!1446 = !DILocation(line: 361, column: 27, scope: !1444)
!1447 = !DILocation(line: 361, column: 19, scope: !1444)
!1448 = !DILocation(line: 362, column: 5, scope: !1444)
!1449 = !DILocation(line: 365, column: 12, scope: !1450)
!1450 = distinct !DILexicalBlock(scope: !1439, file: !3, line: 364, column: 5)
!1451 = !DILocation(line: 366, column: 19, scope: !1450)
!1452 = !DILocation(line: 369, column: 7, scope: !1453)
!1453 = distinct !DILexicalBlock(scope: !64, file: !3, line: 369, column: 7)
!1454 = !DILocation(line: 369, column: 7, scope: !64)
!1455 = !DILocation(line: 370, column: 14, scope: !1453)
!1456 = !DILocation(line: 370, column: 57, scope: !1453)
!1457 = !DILocation(line: 370, column: 70, scope: !1453)
!1458 = !DILocation(line: 370, column: 44, scope: !1453)
!1459 = !DILocation(line: 370, column: 5, scope: !1453)
!1460 = !DILocation(line: 372, column: 14, scope: !1453)
!1461 = !DILocation(line: 372, column: 5, scope: !1453)
!1462 = !DILocation(line: 375, column: 7, scope: !1463)
!1463 = distinct !DILexicalBlock(scope: !64, file: !3, line: 375, column: 7)
!1464 = !DILocation(line: 375, column: 17, scope: !1463)
!1465 = !DILocation(line: 375, column: 7, scope: !64)
!1466 = !DILocalVariable(name: "ut_host", scope: !1467, file: !3, line: 377, type: !1468)
!1467 = distinct !DILexicalBlock(scope: !1463, file: !3, line: 376, column: 5)
!1468 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2056, elements: !1469)
!1469 = !{!1470}
!1470 = !DISubrange(count: 257)
!1471 = !DILocation(line: 377, column: 12, scope: !1467)
!1472 = !DILocalVariable(name: "host", scope: !1467, file: !3, line: 378, type: !6)
!1473 = !DILocation(line: 378, column: 13, scope: !1467)
!1474 = !DILocalVariable(name: "display", scope: !1467, file: !3, line: 379, type: !6)
!1475 = !DILocation(line: 379, column: 13, scope: !1467)
!1476 = !DILocation(line: 382, column: 16, scope: !1467)
!1477 = !DILocation(line: 382, column: 25, scope: !1467)
!1478 = !DILocation(line: 382, column: 35, scope: !1467)
!1479 = !DILocation(line: 382, column: 7, scope: !1467)
!1480 = !DILocation(line: 385, column: 25, scope: !1467)
!1481 = !DILocation(line: 385, column: 17, scope: !1467)
!1482 = !DILocation(line: 385, column: 15, scope: !1467)
!1483 = !DILocation(line: 386, column: 11, scope: !1484)
!1484 = distinct !DILexicalBlock(scope: !1467, file: !3, line: 386, column: 11)
!1485 = !DILocation(line: 386, column: 11, scope: !1467)
!1486 = !DILocation(line: 387, column: 17, scope: !1484)
!1487 = !DILocation(line: 387, column: 20, scope: !1484)
!1488 = !DILocation(line: 387, column: 9, scope: !1484)
!1489 = !DILocation(line: 389, column: 11, scope: !1490)
!1490 = distinct !DILexicalBlock(scope: !1467, file: !3, line: 389, column: 11)
!1491 = !DILocation(line: 389, column: 20, scope: !1490)
!1492 = !DILocation(line: 389, column: 23, scope: !1490)
!1493 = !DILocation(line: 389, column: 11, scope: !1467)
!1494 = !DILocation(line: 392, column: 30, scope: !1495)
!1495 = distinct !DILexicalBlock(scope: !1490, file: !3, line: 390, column: 9)
!1496 = !DILocation(line: 392, column: 18, scope: !1495)
!1497 = !DILocation(line: 392, column: 16, scope: !1495)
!1498 = !DILocation(line: 393, column: 9, scope: !1495)
!1499 = !DILocation(line: 395, column: 13, scope: !1500)
!1500 = distinct !DILexicalBlock(scope: !1467, file: !3, line: 395, column: 11)
!1501 = !DILocation(line: 395, column: 11, scope: !1467)
!1502 = !DILocation(line: 396, column: 16, scope: !1500)
!1503 = !DILocation(line: 396, column: 14, scope: !1500)
!1504 = !DILocation(line: 396, column: 9, scope: !1500)
!1505 = !DILocation(line: 398, column: 11, scope: !1506)
!1506 = distinct !DILexicalBlock(scope: !1467, file: !3, line: 398, column: 11)
!1507 = !DILocation(line: 398, column: 11, scope: !1467)
!1508 = !DILocation(line: 400, column: 15, scope: !1509)
!1509 = distinct !DILexicalBlock(scope: !1510, file: !3, line: 400, column: 15)
!1510 = distinct !DILexicalBlock(scope: !1506, file: !3, line: 399, column: 9)
!1511 = !DILocation(line: 400, column: 33, scope: !1509)
!1512 = !DILocation(line: 400, column: 25, scope: !1509)
!1513 = !DILocation(line: 400, column: 49, scope: !1509)
!1514 = !DILocation(line: 400, column: 41, scope: !1509)
!1515 = !DILocation(line: 400, column: 39, scope: !1509)
!1516 = !DILocation(line: 400, column: 58, scope: !1509)
!1517 = !DILocation(line: 400, column: 23, scope: !1509)
!1518 = !DILocation(line: 400, column: 15, scope: !1510)
!1519 = !DILocation(line: 402, column: 33, scope: !1520)
!1520 = distinct !DILexicalBlock(scope: !1509, file: !3, line: 401, column: 13)
!1521 = !DILocation(line: 402, column: 25, scope: !1520)
!1522 = !DILocation(line: 402, column: 49, scope: !1520)
!1523 = !DILocation(line: 402, column: 41, scope: !1520)
!1524 = !DILocation(line: 402, column: 39, scope: !1520)
!1525 = !DILocation(line: 402, column: 58, scope: !1520)
!1526 = !DILocation(line: 402, column: 23, scope: !1520)
!1527 = !DILocation(line: 403, column: 21, scope: !1520)
!1528 = !DILocation(line: 403, column: 15, scope: !1520)
!1529 = !DILocation(line: 404, column: 34, scope: !1520)
!1530 = !DILocation(line: 404, column: 25, scope: !1520)
!1531 = !DILocation(line: 404, column: 23, scope: !1520)
!1532 = !DILocation(line: 405, column: 13, scope: !1520)
!1533 = !DILocation(line: 406, column: 20, scope: !1510)
!1534 = !DILocation(line: 406, column: 40, scope: !1510)
!1535 = !DILocation(line: 406, column: 46, scope: !1510)
!1536 = !DILocation(line: 406, column: 11, scope: !1510)
!1537 = !DILocation(line: 407, column: 9, scope: !1510)
!1538 = !DILocation(line: 410, column: 15, scope: !1539)
!1539 = distinct !DILexicalBlock(scope: !1540, file: !3, line: 410, column: 15)
!1540 = distinct !DILexicalBlock(scope: !1506, file: !3, line: 409, column: 9)
!1541 = !DILocation(line: 410, column: 33, scope: !1539)
!1542 = !DILocation(line: 410, column: 25, scope: !1539)
!1543 = !DILocation(line: 410, column: 39, scope: !1539)
!1544 = !DILocation(line: 410, column: 23, scope: !1539)
!1545 = !DILocation(line: 410, column: 15, scope: !1540)
!1546 = !DILocation(line: 412, column: 33, scope: !1547)
!1547 = distinct !DILexicalBlock(scope: !1539, file: !3, line: 411, column: 13)
!1548 = !DILocation(line: 412, column: 25, scope: !1547)
!1549 = !DILocation(line: 412, column: 39, scope: !1547)
!1550 = !DILocation(line: 412, column: 23, scope: !1547)
!1551 = !DILocation(line: 413, column: 21, scope: !1547)
!1552 = !DILocation(line: 413, column: 15, scope: !1547)
!1553 = !DILocation(line: 414, column: 34, scope: !1547)
!1554 = !DILocation(line: 414, column: 25, scope: !1547)
!1555 = !DILocation(line: 414, column: 23, scope: !1547)
!1556 = !DILocation(line: 415, column: 13, scope: !1547)
!1557 = !DILocation(line: 416, column: 20, scope: !1540)
!1558 = !DILocation(line: 416, column: 37, scope: !1540)
!1559 = !DILocation(line: 416, column: 11, scope: !1540)
!1560 = !DILocation(line: 419, column: 11, scope: !1561)
!1561 = distinct !DILexicalBlock(scope: !1467, file: !3, line: 419, column: 11)
!1562 = !DILocation(line: 419, column: 19, scope: !1561)
!1563 = !DILocation(line: 419, column: 16, scope: !1561)
!1564 = !DILocation(line: 419, column: 11, scope: !1467)
!1565 = !DILocation(line: 420, column: 15, scope: !1561)
!1566 = !DILocation(line: 420, column: 9, scope: !1561)
!1567 = !DILocation(line: 421, column: 5, scope: !1467)
!1568 = !DILocation(line: 424, column: 11, scope: !1569)
!1569 = distinct !DILexicalBlock(scope: !1570, file: !3, line: 424, column: 11)
!1570 = distinct !DILexicalBlock(scope: !1463, file: !3, line: 423, column: 5)
!1571 = !DILocation(line: 424, column: 19, scope: !1569)
!1572 = !DILocation(line: 424, column: 11, scope: !1570)
!1573 = !DILocation(line: 426, column: 19, scope: !1574)
!1574 = distinct !DILexicalBlock(scope: !1569, file: !3, line: 425, column: 9)
!1575 = !DILocation(line: 427, column: 17, scope: !1574)
!1576 = !DILocation(line: 427, column: 11, scope: !1574)
!1577 = !DILocation(line: 428, column: 30, scope: !1574)
!1578 = !DILocation(line: 428, column: 21, scope: !1574)
!1579 = !DILocation(line: 428, column: 19, scope: !1574)
!1580 = !DILocation(line: 429, column: 9, scope: !1574)
!1581 = !DILocation(line: 430, column: 8, scope: !1570)
!1582 = !DILocation(line: 430, column: 16, scope: !1570)
!1583 = !DILocation(line: 434, column: 42, scope: !64)
!1584 = !DILocation(line: 434, column: 62, scope: !64)
!1585 = !DILocation(line: 435, column: 41, scope: !64)
!1586 = !DILocation(line: 435, column: 51, scope: !64)
!1587 = !DILocation(line: 436, column: 28, scope: !64)
!1588 = !DILocation(line: 436, column: 15, scope: !64)
!1589 = !DILocation(line: 436, column: 39, scope: !64)
!1590 = !DILocation(line: 436, column: 48, scope: !64)
!1591 = !DILocation(line: 437, column: 15, scope: !64)
!1592 = !DILocation(line: 437, column: 25, scope: !64)
!1593 = !DILocation(line: 434, column: 3, scope: !64)
!1594 = !DILocation(line: 438, column: 1, scope: !64)
!1595 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1596, file: !3, line: 333, type: !1599)
!1596 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1597, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1623, retainedNodes: !4)
!1597 = !DISubroutineType(types: !1598)
!1598 = !{null, !1599, !9}
!1599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1600, size: 64)
!1600 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1601)
!1601 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1602)
!1602 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1603)
!1603 = !{!1604, !1605, !1606, !1607, !1608, !1609, !1610, !1615, !1616, !1621, !1622}
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1602, file: !72, line: 57, baseType: !14, size: 16)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1602, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1602, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1602, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1602, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1602, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1602, file: !72, line: 67, baseType: !1611, size: 32, offset: 2656)
!1611 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1612)
!1612 = !{!1613, !1614}
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1611, file: !72, line: 45, baseType: !14, size: 16)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1611, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1602, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1602, file: !72, line: 79, baseType: !1617, size: 64, offset: 2720)
!1617 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1602, file: !72, line: 75, size: 64, elements: !1618)
!1618 = !{!1619, !1620}
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1617, file: !72, line: 77, baseType: !96, size: 32)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1617, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1602, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1602, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1623 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1624, nameTableKind: None)
!1624 = !{!1625, !1627, !1629, !1631, !1633, !1635, !1637, !1639, !1641, !1643, !1645, !1647, !1649, !1651, !1653, !1655, !1657, !1659, !1669, !1672, !1674, !1676, !1679, !1681, !1686, !1691, !1693}
!1625 = !DIGlobalVariableExpression(var: !1626, expr: !DIExpression())
!1626 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1623, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1627 = !DIGlobalVariableExpression(var: !1628, expr: !DIExpression())
!1628 = distinct !DIGlobalVariable(name: "short_list", scope: !1623, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1629 = !DIGlobalVariableExpression(var: !1630, expr: !DIExpression())
!1630 = distinct !DIGlobalVariable(name: "short_output", scope: !1623, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1631 = !DIGlobalVariableExpression(var: !1632, expr: !DIExpression())
!1632 = distinct !DIGlobalVariable(name: "include_idle", scope: !1623, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1633 = !DIGlobalVariableExpression(var: !1634, expr: !DIExpression())
!1634 = distinct !DIGlobalVariable(name: "include_heading", scope: !1623, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1635 = !DIGlobalVariableExpression(var: !1636, expr: !DIExpression())
!1636 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1623, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1637 = !DIGlobalVariableExpression(var: !1638, expr: !DIExpression())
!1638 = distinct !DIGlobalVariable(name: "include_exit", scope: !1623, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1639 = !DIGlobalVariableExpression(var: !1640, expr: !DIExpression())
!1640 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1623, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1641 = !DIGlobalVariableExpression(var: !1642, expr: !DIExpression())
!1642 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1623, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1643 = !DIGlobalVariableExpression(var: !1644, expr: !DIExpression())
!1644 = distinct !DIGlobalVariable(name: "need_login", scope: !1623, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1645 = !DIGlobalVariableExpression(var: !1646, expr: !DIExpression())
!1646 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1623, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1647 = !DIGlobalVariableExpression(var: !1648, expr: !DIExpression())
!1648 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1623, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1649 = !DIGlobalVariableExpression(var: !1650, expr: !DIExpression())
!1650 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1623, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1651 = !DIGlobalVariableExpression(var: !1652, expr: !DIExpression())
!1652 = distinct !DIGlobalVariable(name: "need_users", scope: !1623, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1653 = !DIGlobalVariableExpression(var: !1654, expr: !DIExpression())
!1654 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1623, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1655 = !DIGlobalVariableExpression(var: !1656, expr: !DIExpression())
!1656 = distinct !DIGlobalVariable(name: "time_format", scope: !1623, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1657 = !DIGlobalVariableExpression(var: !1658, expr: !DIExpression())
!1658 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1623, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1659 = !DIGlobalVariableExpression(var: !1660, expr: !DIExpression())
!1660 = distinct !DIGlobalVariable(name: "longopts", scope: !1623, file: !3, line: 162, type: !1661, isLocal: true, isDefinition: true)
!1661 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1662, size: 4608, elements: !151)
!1662 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1663)
!1663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1664)
!1664 = !{!1665, !1666, !1667, !1668}
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1663, file: !144, line: 52, baseType: !49, size: 64)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1663, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1663, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1663, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1669 = !DIGlobalVariableExpression(var: !1670, expr: !DIExpression())
!1670 = distinct !DIGlobalVariable(name: "mesg", scope: !1671, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1671 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1623, retainedNodes: !4)
!1672 = !DIGlobalVariableExpression(var: !1673, expr: !DIExpression())
!1673 = distinct !DIGlobalVariable(name: "hoststr", scope: !1596, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1674 = !DIGlobalVariableExpression(var: !1675, expr: !DIExpression())
!1675 = distinct !DIGlobalVariable(name: "hostlen", scope: !1596, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1676 = !DIGlobalVariableExpression(var: !1677, expr: !DIExpression())
!1677 = distinct !DIGlobalVariable(name: "now", scope: !1678, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1678 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1623, retainedNodes: !4)
!1679 = !DIGlobalVariableExpression(var: !1680, expr: !DIExpression())
!1680 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1678, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1681 = !DIGlobalVariableExpression(var: !1682, expr: !DIExpression())
!1682 = distinct !DIGlobalVariable(name: "buf", scope: !1683, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1683 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1684, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1623, retainedNodes: !4)
!1684 = !DISubroutineType(types: !1685)
!1685 = !{!49, !1599}
!1686 = !DIGlobalVariableExpression(var: !1687, expr: !DIExpression())
!1687 = distinct !DIGlobalVariable(name: "runlevline", scope: !1688, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1688 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1689, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1623, retainedNodes: !4)
!1689 = !DISubroutineType(types: !1690)
!1690 = !{null, !1599}
!1691 = !DIGlobalVariableExpression(var: !1692, expr: !DIExpression())
!1692 = distinct !DIGlobalVariable(name: "comment", scope: !1688, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1693 = !DIGlobalVariableExpression(var: !1694, expr: !DIExpression())
!1694 = distinct !DIGlobalVariable(name: "exitstr", scope: !1695, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1695 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1689, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1623, retainedNodes: !4)
!1696 = !DILocalVariable(name: "boottime", arg: 2, scope: !1596, file: !3, line: 333, type: !9)
!1697 = !DILocalVariable(name: "stats", scope: !1596, file: !3, line: 335, type: !1698)
!1698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !1373, line: 46, size: 1152, elements: !1699)
!1699 = !{!1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1716, !1717, !1718}
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !1698, file: !1373, line: 48, baseType: !1376, size: 64)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !1698, file: !1373, line: 53, baseType: !1378, size: 64, offset: 64)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !1698, file: !1373, line: 61, baseType: !1380, size: 64, offset: 128)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !1698, file: !1373, line: 62, baseType: !1382, size: 32, offset: 192)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !1698, file: !1373, line: 64, baseType: !1384, size: 32, offset: 224)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !1698, file: !1373, line: 65, baseType: !1386, size: 32, offset: 256)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !1698, file: !1373, line: 67, baseType: !53, size: 32, offset: 288)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !1698, file: !1373, line: 69, baseType: !1376, size: 64, offset: 320)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !1698, file: !1373, line: 74, baseType: !1390, size: 64, offset: 384)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !1698, file: !1373, line: 78, baseType: !1392, size: 64, offset: 448)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !1698, file: !1373, line: 80, baseType: !1394, size: 64, offset: 512)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !1698, file: !1373, line: 91, baseType: !1712, size: 128, offset: 576)
!1712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !1397, line: 10, size: 128, elements: !1713)
!1713 = !{!1714, !1715}
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1712, file: !1397, line: 12, baseType: !11, size: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1712, file: !1397, line: 16, baseType: !1401, size: 64, offset: 64)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !1698, file: !1373, line: 92, baseType: !1712, size: 128, offset: 704)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !1698, file: !1373, line: 93, baseType: !1712, size: 128, offset: 832)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1698, file: !1373, line: 106, baseType: !1405, size: 192, offset: 960)
!1719 = !DILocalVariable(name: "last_change", scope: !1596, file: !3, line: 336, type: !9)
!1720 = !DILocalVariable(name: "mesg", scope: !1596, file: !3, line: 337, type: !7)
!1721 = !DILocalVariable(name: "idlestr", scope: !1596, file: !3, line: 338, type: !1412)
!1722 = !DILocalVariable(name: "line", scope: !1596, file: !3, line: 347, type: !1415)
!1723 = !DILocalVariable(name: "p", scope: !1596, file: !3, line: 348, type: !6)
!1724 = !DILocalVariable(name: "pidstr", scope: !1596, file: !3, line: 349, type: !1423)
!1725 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !133, file: !3, line: 514, type: !67)
!1726 = !DILocation(line: 514, column: 36, scope: !133)
!1727 = !DILocalVariable(name: "last", scope: !133, file: !3, line: 517, type: !317)
!1728 = !DILocation(line: 517, column: 17, scope: !133)
!1729 = !DILocation(line: 517, column: 24, scope: !133)
!1730 = !DILocation(line: 517, column: 42, scope: !133)
!1731 = !DILocalVariable(name: "curr", scope: !133, file: !3, line: 518, type: !317)
!1732 = !DILocation(line: 518, column: 17, scope: !133)
!1733 = !DILocation(line: 518, column: 24, scope: !133)
!1734 = !DILocation(line: 518, column: 42, scope: !133)
!1735 = !DILocation(line: 520, column: 8, scope: !1736)
!1736 = distinct !DILexicalBlock(scope: !133, file: !3, line: 520, column: 7)
!1737 = !DILocation(line: 520, column: 7, scope: !133)
!1738 = !DILocation(line: 521, column: 35, scope: !1736)
!1739 = !DILocation(line: 521, column: 27, scope: !1736)
!1740 = !DILocation(line: 521, column: 51, scope: !1736)
!1741 = !DILocation(line: 521, column: 18, scope: !1736)
!1742 = !DILocation(line: 521, column: 16, scope: !1736)
!1743 = !DILocation(line: 521, column: 5, scope: !1736)
!1744 = !DILocation(line: 522, column: 12, scope: !133)
!1745 = !DILocation(line: 522, column: 33, scope: !133)
!1746 = !DILocation(line: 522, column: 49, scope: !133)
!1747 = !DILocation(line: 522, column: 3, scope: !133)
!1748 = !DILocation(line: 524, column: 8, scope: !1749)
!1749 = distinct !DILexicalBlock(scope: !133, file: !3, line: 524, column: 7)
!1750 = !DILocation(line: 524, column: 7, scope: !133)
!1751 = !DILocation(line: 525, column: 32, scope: !1749)
!1752 = !DILocation(line: 525, column: 24, scope: !1749)
!1753 = !DILocation(line: 525, column: 44, scope: !1749)
!1754 = !DILocation(line: 525, column: 15, scope: !1749)
!1755 = !DILocation(line: 525, column: 13, scope: !1749)
!1756 = !DILocation(line: 525, column: 5, scope: !1749)
!1757 = !DILocation(line: 526, column: 12, scope: !133)
!1758 = !DILocation(line: 526, column: 29, scope: !133)
!1759 = !DILocation(line: 526, column: 42, scope: !133)
!1760 = !DILocation(line: 526, column: 47, scope: !133)
!1761 = !DILocation(line: 526, column: 41, scope: !133)
!1762 = !DILocation(line: 526, column: 63, scope: !133)
!1763 = !DILocation(line: 526, column: 3, scope: !133)
!1764 = !DILocation(line: 528, column: 32, scope: !133)
!1765 = !DILocation(line: 528, column: 57, scope: !133)
!1766 = !DILocation(line: 528, column: 44, scope: !133)
!1767 = !DILocation(line: 529, column: 34, scope: !133)
!1768 = !DILocation(line: 529, column: 23, scope: !133)
!1769 = !DILocation(line: 529, column: 42, scope: !133)
!1770 = !DILocation(line: 528, column: 3, scope: !133)
!1771 = !DILocation(line: 531, column: 3, scope: !133)
!1772 = distinct !DISubprogram(name: "print_boottime", scope: !3, file: !3, line: 441, type: !134, scopeLine: 442, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1773 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1772, file: !3, line: 441, type: !67)
!1774 = !DILocation(line: 441, column: 36, scope: !1772)
!1775 = !DILocation(line: 443, column: 32, scope: !1772)
!1776 = !DILocation(line: 444, column: 28, scope: !1772)
!1777 = !DILocation(line: 444, column: 15, scope: !1772)
!1778 = !DILocation(line: 443, column: 3, scope: !1772)
!1779 = !DILocation(line: 445, column: 1, scope: !1772)
!1780 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1781, file: !3, line: 441, type: !1784)
!1781 = distinct !DISubprogram(name: "print_boottime", scope: !3, file: !3, line: 441, type: !1782, scopeLine: 442, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1808, retainedNodes: !4)
!1782 = !DISubroutineType(types: !1783)
!1783 = !{null, !1784}
!1784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1785, size: 64)
!1785 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1786)
!1786 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1787)
!1787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1788)
!1788 = !{!1789, !1790, !1791, !1792, !1793, !1794, !1795, !1800, !1801, !1806, !1807}
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1787, file: !72, line: 57, baseType: !14, size: 16)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1787, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1787, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1787, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1787, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1787, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1787, file: !72, line: 67, baseType: !1796, size: 32, offset: 2656)
!1796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1797)
!1797 = !{!1798, !1799}
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1796, file: !72, line: 45, baseType: !14, size: 16)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1796, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1787, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1787, file: !72, line: 79, baseType: !1802, size: 64, offset: 2720)
!1802 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1787, file: !72, line: 75, size: 64, elements: !1803)
!1803 = !{!1804, !1805}
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1802, file: !72, line: 77, baseType: !96, size: 32)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1802, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1787, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1787, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1808 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1809, nameTableKind: None)
!1809 = !{!1810, !1812, !1814, !1816, !1818, !1820, !1822, !1824, !1826, !1828, !1830, !1832, !1834, !1836, !1838, !1840, !1842, !1844, !1854, !1857, !1862, !1864, !1867, !1869, !1874, !1877, !1879}
!1810 = !DIGlobalVariableExpression(var: !1811, expr: !DIExpression())
!1811 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1808, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1812 = !DIGlobalVariableExpression(var: !1813, expr: !DIExpression())
!1813 = distinct !DIGlobalVariable(name: "short_list", scope: !1808, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1814 = !DIGlobalVariableExpression(var: !1815, expr: !DIExpression())
!1815 = distinct !DIGlobalVariable(name: "short_output", scope: !1808, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1816 = !DIGlobalVariableExpression(var: !1817, expr: !DIExpression())
!1817 = distinct !DIGlobalVariable(name: "include_idle", scope: !1808, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1818 = !DIGlobalVariableExpression(var: !1819, expr: !DIExpression())
!1819 = distinct !DIGlobalVariable(name: "include_heading", scope: !1808, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1820 = !DIGlobalVariableExpression(var: !1821, expr: !DIExpression())
!1821 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1808, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1822 = !DIGlobalVariableExpression(var: !1823, expr: !DIExpression())
!1823 = distinct !DIGlobalVariable(name: "include_exit", scope: !1808, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1824 = !DIGlobalVariableExpression(var: !1825, expr: !DIExpression())
!1825 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1808, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1826 = !DIGlobalVariableExpression(var: !1827, expr: !DIExpression())
!1827 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1808, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1828 = !DIGlobalVariableExpression(var: !1829, expr: !DIExpression())
!1829 = distinct !DIGlobalVariable(name: "need_login", scope: !1808, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1830 = !DIGlobalVariableExpression(var: !1831, expr: !DIExpression())
!1831 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1808, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1832 = !DIGlobalVariableExpression(var: !1833, expr: !DIExpression())
!1833 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1808, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1834 = !DIGlobalVariableExpression(var: !1835, expr: !DIExpression())
!1835 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1808, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1836 = !DIGlobalVariableExpression(var: !1837, expr: !DIExpression())
!1837 = distinct !DIGlobalVariable(name: "need_users", scope: !1808, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1838 = !DIGlobalVariableExpression(var: !1839, expr: !DIExpression())
!1839 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1808, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1840 = !DIGlobalVariableExpression(var: !1841, expr: !DIExpression())
!1841 = distinct !DIGlobalVariable(name: "time_format", scope: !1808, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1842 = !DIGlobalVariableExpression(var: !1843, expr: !DIExpression())
!1843 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1808, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1844 = !DIGlobalVariableExpression(var: !1845, expr: !DIExpression())
!1845 = distinct !DIGlobalVariable(name: "longopts", scope: !1808, file: !3, line: 162, type: !1846, isLocal: true, isDefinition: true)
!1846 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1847, size: 4608, elements: !151)
!1847 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1848)
!1848 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1849)
!1849 = !{!1850, !1851, !1852, !1853}
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1848, file: !144, line: 52, baseType: !49, size: 64)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1848, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1848, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1848, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1854 = !DIGlobalVariableExpression(var: !1855, expr: !DIExpression())
!1855 = distinct !DIGlobalVariable(name: "mesg", scope: !1856, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1856 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1808, retainedNodes: !4)
!1857 = !DIGlobalVariableExpression(var: !1858, expr: !DIExpression())
!1858 = distinct !DIGlobalVariable(name: "hoststr", scope: !1859, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1859 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1860, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1808, retainedNodes: !4)
!1860 = !DISubroutineType(types: !1861)
!1861 = !{null, !1784, !9}
!1862 = !DIGlobalVariableExpression(var: !1863, expr: !DIExpression())
!1863 = distinct !DIGlobalVariable(name: "hostlen", scope: !1859, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1864 = !DIGlobalVariableExpression(var: !1865, expr: !DIExpression())
!1865 = distinct !DIGlobalVariable(name: "now", scope: !1866, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1866 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1808, retainedNodes: !4)
!1867 = !DIGlobalVariableExpression(var: !1868, expr: !DIExpression())
!1868 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1866, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1869 = !DIGlobalVariableExpression(var: !1870, expr: !DIExpression())
!1870 = distinct !DIGlobalVariable(name: "buf", scope: !1871, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1871 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1872, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1808, retainedNodes: !4)
!1872 = !DISubroutineType(types: !1873)
!1873 = !{!49, !1784}
!1874 = !DIGlobalVariableExpression(var: !1875, expr: !DIExpression())
!1875 = distinct !DIGlobalVariable(name: "runlevline", scope: !1876, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1876 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1782, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1808, retainedNodes: !4)
!1877 = !DIGlobalVariableExpression(var: !1878, expr: !DIExpression())
!1878 = distinct !DIGlobalVariable(name: "comment", scope: !1876, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1879 = !DIGlobalVariableExpression(var: !1880, expr: !DIExpression())
!1880 = distinct !DIGlobalVariable(name: "exitstr", scope: !1881, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1881 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1782, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1808, retainedNodes: !4)
!1882 = distinct !DISubprogram(name: "print_clockchange", scope: !3, file: !3, line: 506, type: !134, scopeLine: 507, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1883 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1882, file: !3, line: 506, type: !67)
!1884 = !DILocation(line: 506, column: 39, scope: !1882)
!1885 = !DILocation(line: 509, column: 32, scope: !1882)
!1886 = !DILocation(line: 510, column: 28, scope: !1882)
!1887 = !DILocation(line: 510, column: 15, scope: !1882)
!1888 = !DILocation(line: 509, column: 3, scope: !1882)
!1889 = !DILocation(line: 511, column: 1, scope: !1882)
!1890 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1891, file: !3, line: 506, type: !1894)
!1891 = distinct !DISubprogram(name: "print_clockchange", scope: !3, file: !3, line: 506, type: !1892, scopeLine: 507, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!1892 = !DISubroutineType(types: !1893)
!1893 = !{null, !1894}
!1894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1895, size: 64)
!1895 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1896)
!1896 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !1897)
!1897 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !1898)
!1898 = !{!1899, !1900, !1901, !1902, !1903, !1904, !1905, !1910, !1911, !1916, !1917}
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !1897, file: !72, line: 57, baseType: !14, size: 16)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !1897, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !1897, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !1897, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !1897, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !1897, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !1897, file: !72, line: 67, baseType: !1906, size: 32, offset: 2656)
!1906 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !1907)
!1907 = !{!1908, !1909}
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !1906, file: !72, line: 45, baseType: !14, size: 16)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !1906, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !1897, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !1897, file: !72, line: 79, baseType: !1912, size: 64, offset: 2720)
!1912 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1897, file: !72, line: 75, size: 64, elements: !1913)
!1913 = !{!1914, !1915}
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1912, file: !72, line: 77, baseType: !96, size: 32)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !1912, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !1897, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1897, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!1918 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1919, nameTableKind: None)
!1919 = !{!1920, !1922, !1924, !1926, !1928, !1930, !1932, !1934, !1936, !1938, !1940, !1942, !1944, !1946, !1948, !1950, !1952, !1954, !1964, !1967, !1972, !1974, !1977, !1979, !1984, !1987, !1989}
!1920 = !DIGlobalVariableExpression(var: !1921, expr: !DIExpression())
!1921 = distinct !DIGlobalVariable(name: "do_lookup", scope: !1918, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!1922 = !DIGlobalVariableExpression(var: !1923, expr: !DIExpression())
!1923 = distinct !DIGlobalVariable(name: "short_list", scope: !1918, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!1924 = !DIGlobalVariableExpression(var: !1925, expr: !DIExpression())
!1925 = distinct !DIGlobalVariable(name: "short_output", scope: !1918, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!1926 = !DIGlobalVariableExpression(var: !1927, expr: !DIExpression())
!1927 = distinct !DIGlobalVariable(name: "include_idle", scope: !1918, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!1928 = !DIGlobalVariableExpression(var: !1929, expr: !DIExpression())
!1929 = distinct !DIGlobalVariable(name: "include_heading", scope: !1918, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!1930 = !DIGlobalVariableExpression(var: !1931, expr: !DIExpression())
!1931 = distinct !DIGlobalVariable(name: "include_mesg", scope: !1918, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!1932 = !DIGlobalVariableExpression(var: !1933, expr: !DIExpression())
!1933 = distinct !DIGlobalVariable(name: "include_exit", scope: !1918, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!1934 = !DIGlobalVariableExpression(var: !1935, expr: !DIExpression())
!1935 = distinct !DIGlobalVariable(name: "need_boottime", scope: !1918, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!1936 = !DIGlobalVariableExpression(var: !1937, expr: !DIExpression())
!1937 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !1918, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!1938 = !DIGlobalVariableExpression(var: !1939, expr: !DIExpression())
!1939 = distinct !DIGlobalVariable(name: "need_login", scope: !1918, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!1940 = !DIGlobalVariableExpression(var: !1941, expr: !DIExpression())
!1941 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !1918, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!1942 = !DIGlobalVariableExpression(var: !1943, expr: !DIExpression())
!1943 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !1918, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!1944 = !DIGlobalVariableExpression(var: !1945, expr: !DIExpression())
!1945 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !1918, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!1946 = !DIGlobalVariableExpression(var: !1947, expr: !DIExpression())
!1947 = distinct !DIGlobalVariable(name: "need_users", scope: !1918, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!1948 = !DIGlobalVariableExpression(var: !1949, expr: !DIExpression())
!1949 = distinct !DIGlobalVariable(name: "my_line_only", scope: !1918, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!1950 = !DIGlobalVariableExpression(var: !1951, expr: !DIExpression())
!1951 = distinct !DIGlobalVariable(name: "time_format", scope: !1918, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!1952 = !DIGlobalVariableExpression(var: !1953, expr: !DIExpression())
!1953 = distinct !DIGlobalVariable(name: "time_format_width", scope: !1918, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!1954 = !DIGlobalVariableExpression(var: !1955, expr: !DIExpression())
!1955 = distinct !DIGlobalVariable(name: "longopts", scope: !1918, file: !3, line: 162, type: !1956, isLocal: true, isDefinition: true)
!1956 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1957, size: 4608, elements: !151)
!1957 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1958)
!1958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !1959)
!1959 = !{!1960, !1961, !1962, !1963}
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1958, file: !144, line: 52, baseType: !49, size: 64)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1958, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1958, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1958, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!1964 = !DIGlobalVariableExpression(var: !1965, expr: !DIExpression())
!1965 = distinct !DIGlobalVariable(name: "mesg", scope: !1966, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!1966 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!1967 = !DIGlobalVariableExpression(var: !1968, expr: !DIExpression())
!1968 = distinct !DIGlobalVariable(name: "hoststr", scope: !1969, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!1969 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !1970, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!1970 = !DISubroutineType(types: !1971)
!1971 = !{null, !1894, !9}
!1972 = !DIGlobalVariableExpression(var: !1973, expr: !DIExpression())
!1973 = distinct !DIGlobalVariable(name: "hostlen", scope: !1969, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!1974 = !DIGlobalVariableExpression(var: !1975, expr: !DIExpression())
!1975 = distinct !DIGlobalVariable(name: "now", scope: !1976, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!1976 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!1977 = !DIGlobalVariableExpression(var: !1978, expr: !DIExpression())
!1978 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !1976, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!1979 = !DIGlobalVariableExpression(var: !1980, expr: !DIExpression())
!1980 = distinct !DIGlobalVariable(name: "buf", scope: !1981, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!1981 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !1982, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!1982 = !DISubroutineType(types: !1983)
!1983 = !{!49, !1894}
!1984 = !DIGlobalVariableExpression(var: !1985, expr: !DIExpression())
!1985 = distinct !DIGlobalVariable(name: "runlevline", scope: !1986, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1986 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !1892, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!1987 = !DIGlobalVariableExpression(var: !1988, expr: !DIExpression())
!1988 = distinct !DIGlobalVariable(name: "comment", scope: !1986, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!1989 = !DIGlobalVariableExpression(var: !1990, expr: !DIExpression())
!1990 = distinct !DIGlobalVariable(name: "exitstr", scope: !1991, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!1991 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !1892, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1918, retainedNodes: !4)
!1992 = distinct !DISubprogram(name: "print_initspawn", scope: !3, file: !3, line: 495, type: !134, scopeLine: 496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1993 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !1992, file: !3, line: 495, type: !67)
!1994 = !DILocation(line: 495, column: 37, scope: !1992)
!1995 = !DILocalVariable(name: "comment", scope: !1992, file: !3, line: 497, type: !6)
!1996 = !DILocation(line: 497, column: 9, scope: !1992)
!1997 = !DILocation(line: 497, column: 43, scope: !1992)
!1998 = !DILocation(line: 497, column: 19, scope: !1992)
!1999 = !DILocalVariable(name: "pidstr", scope: !1992, file: !3, line: 498, type: !1423)
!2000 = !DILocation(line: 498, column: 3, scope: !1992)
!2001 = !DILocation(line: 500, column: 54, scope: !1992)
!2002 = !DILocation(line: 500, column: 64, scope: !1992)
!2003 = !DILocation(line: 501, column: 28, scope: !1992)
!2004 = !DILocation(line: 501, column: 15, scope: !1992)
!2005 = !DILocation(line: 501, column: 43, scope: !1992)
!2006 = !DILocation(line: 501, column: 51, scope: !1992)
!2007 = !DILocation(line: 500, column: 3, scope: !1992)
!2008 = !DILocation(line: 502, column: 9, scope: !1992)
!2009 = !DILocation(line: 502, column: 3, scope: !1992)
!2010 = !DILocation(line: 503, column: 1, scope: !1992)
!2011 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2012, file: !3, line: 495, type: !2015)
!2012 = distinct !DISubprogram(name: "print_initspawn", scope: !3, file: !3, line: 495, type: !2013, scopeLine: 496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2039, retainedNodes: !4)
!2013 = !DISubroutineType(types: !2014)
!2014 = !{null, !2015}
!2015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2016, size: 64)
!2016 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2017)
!2017 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2018)
!2018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2019)
!2019 = !{!2020, !2021, !2022, !2023, !2024, !2025, !2026, !2031, !2032, !2037, !2038}
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2018, file: !72, line: 57, baseType: !14, size: 16)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2018, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2018, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2018, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2018, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2018, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2018, file: !72, line: 67, baseType: !2027, size: 32, offset: 2656)
!2027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2028)
!2028 = !{!2029, !2030}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2027, file: !72, line: 45, baseType: !14, size: 16)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2027, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2018, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2018, file: !72, line: 79, baseType: !2033, size: 64, offset: 2720)
!2033 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2018, file: !72, line: 75, size: 64, elements: !2034)
!2034 = !{!2035, !2036}
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2033, file: !72, line: 77, baseType: !96, size: 32)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2033, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2018, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2018, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2039 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2040, nameTableKind: None)
!2040 = !{!2041, !2043, !2045, !2047, !2049, !2051, !2053, !2055, !2057, !2059, !2061, !2063, !2065, !2067, !2069, !2071, !2073, !2075, !2085, !2088, !2093, !2095, !2098, !2100, !2105, !2108, !2110}
!2041 = !DIGlobalVariableExpression(var: !2042, expr: !DIExpression())
!2042 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2039, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2043 = !DIGlobalVariableExpression(var: !2044, expr: !DIExpression())
!2044 = distinct !DIGlobalVariable(name: "short_list", scope: !2039, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2045 = !DIGlobalVariableExpression(var: !2046, expr: !DIExpression())
!2046 = distinct !DIGlobalVariable(name: "short_output", scope: !2039, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2047 = !DIGlobalVariableExpression(var: !2048, expr: !DIExpression())
!2048 = distinct !DIGlobalVariable(name: "include_idle", scope: !2039, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2049 = !DIGlobalVariableExpression(var: !2050, expr: !DIExpression())
!2050 = distinct !DIGlobalVariable(name: "include_heading", scope: !2039, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2051 = !DIGlobalVariableExpression(var: !2052, expr: !DIExpression())
!2052 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2039, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2053 = !DIGlobalVariableExpression(var: !2054, expr: !DIExpression())
!2054 = distinct !DIGlobalVariable(name: "include_exit", scope: !2039, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2055 = !DIGlobalVariableExpression(var: !2056, expr: !DIExpression())
!2056 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2039, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2057 = !DIGlobalVariableExpression(var: !2058, expr: !DIExpression())
!2058 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2039, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2059 = !DIGlobalVariableExpression(var: !2060, expr: !DIExpression())
!2060 = distinct !DIGlobalVariable(name: "need_login", scope: !2039, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2061 = !DIGlobalVariableExpression(var: !2062, expr: !DIExpression())
!2062 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2039, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2063 = !DIGlobalVariableExpression(var: !2064, expr: !DIExpression())
!2064 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2039, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2065 = !DIGlobalVariableExpression(var: !2066, expr: !DIExpression())
!2066 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2039, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2067 = !DIGlobalVariableExpression(var: !2068, expr: !DIExpression())
!2068 = distinct !DIGlobalVariable(name: "need_users", scope: !2039, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2069 = !DIGlobalVariableExpression(var: !2070, expr: !DIExpression())
!2070 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2039, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2071 = !DIGlobalVariableExpression(var: !2072, expr: !DIExpression())
!2072 = distinct !DIGlobalVariable(name: "time_format", scope: !2039, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2073 = !DIGlobalVariableExpression(var: !2074, expr: !DIExpression())
!2074 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2039, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2075 = !DIGlobalVariableExpression(var: !2076, expr: !DIExpression())
!2076 = distinct !DIGlobalVariable(name: "longopts", scope: !2039, file: !3, line: 162, type: !2077, isLocal: true, isDefinition: true)
!2077 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2078, size: 4608, elements: !151)
!2078 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2079)
!2079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2080)
!2080 = !{!2081, !2082, !2083, !2084}
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2079, file: !144, line: 52, baseType: !49, size: 64)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2079, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2079, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2079, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2085 = !DIGlobalVariableExpression(var: !2086, expr: !DIExpression())
!2086 = distinct !DIGlobalVariable(name: "mesg", scope: !2087, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2087 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2039, retainedNodes: !4)
!2088 = !DIGlobalVariableExpression(var: !2089, expr: !DIExpression())
!2089 = distinct !DIGlobalVariable(name: "hoststr", scope: !2090, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2090 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2091, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2039, retainedNodes: !4)
!2091 = !DISubroutineType(types: !2092)
!2092 = !{null, !2015, !9}
!2093 = !DIGlobalVariableExpression(var: !2094, expr: !DIExpression())
!2094 = distinct !DIGlobalVariable(name: "hostlen", scope: !2090, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2095 = !DIGlobalVariableExpression(var: !2096, expr: !DIExpression())
!2096 = distinct !DIGlobalVariable(name: "now", scope: !2097, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2097 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2039, retainedNodes: !4)
!2098 = !DIGlobalVariableExpression(var: !2099, expr: !DIExpression())
!2099 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2097, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2100 = !DIGlobalVariableExpression(var: !2101, expr: !DIExpression())
!2101 = distinct !DIGlobalVariable(name: "buf", scope: !2102, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2102 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2103, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2039, retainedNodes: !4)
!2103 = !DISubroutineType(types: !2104)
!2104 = !{!49, !2015}
!2105 = !DIGlobalVariableExpression(var: !2106, expr: !DIExpression())
!2106 = distinct !DIGlobalVariable(name: "runlevline", scope: !2107, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2107 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2013, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2039, retainedNodes: !4)
!2108 = !DIGlobalVariableExpression(var: !2109, expr: !DIExpression())
!2109 = distinct !DIGlobalVariable(name: "comment", scope: !2107, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2110 = !DIGlobalVariableExpression(var: !2111, expr: !DIExpression())
!2111 = distinct !DIGlobalVariable(name: "exitstr", scope: !2112, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2112 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2013, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2039, retainedNodes: !4)
!2113 = !DILocalVariable(name: "comment", scope: !2012, file: !3, line: 497, type: !6)
!2114 = !DILocalVariable(name: "pidstr", scope: !2012, file: !3, line: 498, type: !1423)
!2115 = distinct !DISubprogram(name: "print_login", scope: !3, file: !3, line: 482, type: !134, scopeLine: 483, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2116 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2115, file: !3, line: 482, type: !67)
!2117 = !DILocation(line: 482, column: 33, scope: !2115)
!2118 = !DILocalVariable(name: "comment", scope: !2115, file: !3, line: 484, type: !6)
!2119 = !DILocation(line: 484, column: 9, scope: !2115)
!2120 = !DILocation(line: 484, column: 43, scope: !2115)
!2121 = !DILocation(line: 484, column: 19, scope: !2115)
!2122 = !DILocalVariable(name: "pidstr", scope: !2115, file: !3, line: 485, type: !1423)
!2123 = !DILocation(line: 485, column: 3, scope: !2115)
!2124 = !DILocation(line: 489, column: 19, scope: !2115)
!2125 = !DILocation(line: 489, column: 62, scope: !2115)
!2126 = !DILocation(line: 489, column: 72, scope: !2115)
!2127 = !DILocation(line: 490, column: 28, scope: !2115)
!2128 = !DILocation(line: 490, column: 15, scope: !2115)
!2129 = !DILocation(line: 490, column: 43, scope: !2115)
!2130 = !DILocation(line: 490, column: 51, scope: !2115)
!2131 = !DILocation(line: 489, column: 3, scope: !2115)
!2132 = !DILocation(line: 491, column: 9, scope: !2115)
!2133 = !DILocation(line: 491, column: 3, scope: !2115)
!2134 = !DILocation(line: 492, column: 1, scope: !2115)
!2135 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2136, file: !3, line: 482, type: !2139)
!2136 = distinct !DISubprogram(name: "print_login", scope: !3, file: !3, line: 482, type: !2137, scopeLine: 483, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2163, retainedNodes: !4)
!2137 = !DISubroutineType(types: !2138)
!2138 = !{null, !2139}
!2139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2140, size: 64)
!2140 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2141)
!2141 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2142)
!2142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2143)
!2143 = !{!2144, !2145, !2146, !2147, !2148, !2149, !2150, !2155, !2156, !2161, !2162}
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2142, file: !72, line: 57, baseType: !14, size: 16)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2142, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2142, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2142, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2142, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2142, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2142, file: !72, line: 67, baseType: !2151, size: 32, offset: 2656)
!2151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2152)
!2152 = !{!2153, !2154}
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2151, file: !72, line: 45, baseType: !14, size: 16)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2151, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2142, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2142, file: !72, line: 79, baseType: !2157, size: 64, offset: 2720)
!2157 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2142, file: !72, line: 75, size: 64, elements: !2158)
!2158 = !{!2159, !2160}
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2157, file: !72, line: 77, baseType: !96, size: 32)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2157, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2142, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2142, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2163 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2164, nameTableKind: None)
!2164 = !{!2165, !2167, !2169, !2171, !2173, !2175, !2177, !2179, !2181, !2183, !2185, !2187, !2189, !2191, !2193, !2195, !2197, !2199, !2209, !2212, !2217, !2219, !2222, !2224, !2229, !2232, !2234}
!2165 = !DIGlobalVariableExpression(var: !2166, expr: !DIExpression())
!2166 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2163, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2167 = !DIGlobalVariableExpression(var: !2168, expr: !DIExpression())
!2168 = distinct !DIGlobalVariable(name: "short_list", scope: !2163, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2169 = !DIGlobalVariableExpression(var: !2170, expr: !DIExpression())
!2170 = distinct !DIGlobalVariable(name: "short_output", scope: !2163, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2171 = !DIGlobalVariableExpression(var: !2172, expr: !DIExpression())
!2172 = distinct !DIGlobalVariable(name: "include_idle", scope: !2163, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2173 = !DIGlobalVariableExpression(var: !2174, expr: !DIExpression())
!2174 = distinct !DIGlobalVariable(name: "include_heading", scope: !2163, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2175 = !DIGlobalVariableExpression(var: !2176, expr: !DIExpression())
!2176 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2163, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2177 = !DIGlobalVariableExpression(var: !2178, expr: !DIExpression())
!2178 = distinct !DIGlobalVariable(name: "include_exit", scope: !2163, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2179 = !DIGlobalVariableExpression(var: !2180, expr: !DIExpression())
!2180 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2163, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2181 = !DIGlobalVariableExpression(var: !2182, expr: !DIExpression())
!2182 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2163, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2183 = !DIGlobalVariableExpression(var: !2184, expr: !DIExpression())
!2184 = distinct !DIGlobalVariable(name: "need_login", scope: !2163, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2185 = !DIGlobalVariableExpression(var: !2186, expr: !DIExpression())
!2186 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2163, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2187 = !DIGlobalVariableExpression(var: !2188, expr: !DIExpression())
!2188 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2163, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2189 = !DIGlobalVariableExpression(var: !2190, expr: !DIExpression())
!2190 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2163, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2191 = !DIGlobalVariableExpression(var: !2192, expr: !DIExpression())
!2192 = distinct !DIGlobalVariable(name: "need_users", scope: !2163, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2193 = !DIGlobalVariableExpression(var: !2194, expr: !DIExpression())
!2194 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2163, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2195 = !DIGlobalVariableExpression(var: !2196, expr: !DIExpression())
!2196 = distinct !DIGlobalVariable(name: "time_format", scope: !2163, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2197 = !DIGlobalVariableExpression(var: !2198, expr: !DIExpression())
!2198 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2163, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2199 = !DIGlobalVariableExpression(var: !2200, expr: !DIExpression())
!2200 = distinct !DIGlobalVariable(name: "longopts", scope: !2163, file: !3, line: 162, type: !2201, isLocal: true, isDefinition: true)
!2201 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2202, size: 4608, elements: !151)
!2202 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2203)
!2203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2204)
!2204 = !{!2205, !2206, !2207, !2208}
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2203, file: !144, line: 52, baseType: !49, size: 64)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2203, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2203, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2203, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2209 = !DIGlobalVariableExpression(var: !2210, expr: !DIExpression())
!2210 = distinct !DIGlobalVariable(name: "mesg", scope: !2211, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2211 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2163, retainedNodes: !4)
!2212 = !DIGlobalVariableExpression(var: !2213, expr: !DIExpression())
!2213 = distinct !DIGlobalVariable(name: "hoststr", scope: !2214, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2214 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2215, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2163, retainedNodes: !4)
!2215 = !DISubroutineType(types: !2216)
!2216 = !{null, !2139, !9}
!2217 = !DIGlobalVariableExpression(var: !2218, expr: !DIExpression())
!2218 = distinct !DIGlobalVariable(name: "hostlen", scope: !2214, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2219 = !DIGlobalVariableExpression(var: !2220, expr: !DIExpression())
!2220 = distinct !DIGlobalVariable(name: "now", scope: !2221, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2221 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2163, retainedNodes: !4)
!2222 = !DIGlobalVariableExpression(var: !2223, expr: !DIExpression())
!2223 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2221, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2224 = !DIGlobalVariableExpression(var: !2225, expr: !DIExpression())
!2225 = distinct !DIGlobalVariable(name: "buf", scope: !2226, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2226 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2227, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2163, retainedNodes: !4)
!2227 = !DISubroutineType(types: !2228)
!2228 = !{!49, !2139}
!2229 = !DIGlobalVariableExpression(var: !2230, expr: !DIExpression())
!2230 = distinct !DIGlobalVariable(name: "runlevline", scope: !2231, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2231 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2137, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2163, retainedNodes: !4)
!2232 = !DIGlobalVariableExpression(var: !2233, expr: !DIExpression())
!2233 = distinct !DIGlobalVariable(name: "comment", scope: !2231, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2234 = !DIGlobalVariableExpression(var: !2235, expr: !DIExpression())
!2235 = distinct !DIGlobalVariable(name: "exitstr", scope: !2236, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2236 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2137, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2163, retainedNodes: !4)
!2237 = !DILocalVariable(name: "comment", scope: !2136, file: !3, line: 484, type: !6)
!2238 = !DILocalVariable(name: "pidstr", scope: !2136, file: !3, line: 485, type: !1423)
!2239 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !140, file: !3, line: 459, type: !67)
!2240 = !DILocation(line: 459, column: 37, scope: !140)
!2241 = !DILocalVariable(name: "comment", scope: !140, file: !3, line: 462, type: !6)
!2242 = !DILocation(line: 462, column: 9, scope: !140)
!2243 = !DILocation(line: 462, column: 43, scope: !140)
!2244 = !DILocation(line: 462, column: 19, scope: !140)
!2245 = !DILocalVariable(name: "pidstr", scope: !140, file: !3, line: 463, type: !1423)
!2246 = !DILocation(line: 463, column: 3, scope: !140)
!2247 = !DILocation(line: 465, column: 8, scope: !2248)
!2248 = distinct !DILexicalBlock(scope: !140, file: !3, line: 465, column: 7)
!2249 = !DILocation(line: 465, column: 7, scope: !140)
!2250 = !DILocation(line: 466, column: 32, scope: !2248)
!2251 = !DILocation(line: 466, column: 24, scope: !2248)
!2252 = !DILocation(line: 467, column: 24, scope: !2248)
!2253 = !DILocation(line: 467, column: 78, scope: !2248)
!2254 = !DILocation(line: 468, column: 34, scope: !2248)
!2255 = !DILocation(line: 468, column: 26, scope: !2248)
!2256 = !DILocation(line: 468, column: 24, scope: !2248)
!2257 = !DILocation(line: 469, column: 24, scope: !2248)
!2258 = !DILocation(line: 470, column: 24, scope: !2248)
!2259 = !DILocation(line: 466, column: 15, scope: !2248)
!2260 = !DILocation(line: 466, column: 13, scope: !2248)
!2261 = !DILocation(line: 466, column: 5, scope: !2248)
!2262 = !DILocation(line: 471, column: 12, scope: !140)
!2263 = !DILocation(line: 471, column: 34, scope: !140)
!2264 = !DILocation(line: 471, column: 46, scope: !140)
!2265 = !DILocation(line: 472, column: 12, scope: !140)
!2266 = !DILocation(line: 472, column: 24, scope: !140)
!2267 = !DILocation(line: 471, column: 3, scope: !140)
!2268 = !DILocation(line: 476, column: 54, scope: !140)
!2269 = !DILocation(line: 476, column: 64, scope: !140)
!2270 = !DILocation(line: 477, column: 28, scope: !140)
!2271 = !DILocation(line: 477, column: 15, scope: !140)
!2272 = !DILocation(line: 477, column: 43, scope: !140)
!2273 = !DILocation(line: 477, column: 51, scope: !140)
!2274 = !DILocation(line: 477, column: 60, scope: !140)
!2275 = !DILocation(line: 476, column: 3, scope: !140)
!2276 = !DILocation(line: 478, column: 9, scope: !140)
!2277 = !DILocation(line: 478, column: 3, scope: !140)
!2278 = !DILocation(line: 479, column: 1, scope: !140)
!2279 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2280, file: !3, line: 459, type: !2283)
!2280 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2281, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2307, retainedNodes: !4)
!2281 = !DISubroutineType(types: !2282)
!2282 = !{null, !2283}
!2283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2284, size: 64)
!2284 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2285)
!2285 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2286)
!2286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2287)
!2287 = !{!2288, !2289, !2290, !2291, !2292, !2293, !2294, !2299, !2300, !2305, !2306}
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2286, file: !72, line: 57, baseType: !14, size: 16)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2286, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2286, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2286, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2286, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2286, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2286, file: !72, line: 67, baseType: !2295, size: 32, offset: 2656)
!2295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2296)
!2296 = !{!2297, !2298}
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2295, file: !72, line: 45, baseType: !14, size: 16)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2295, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2286, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2286, file: !72, line: 79, baseType: !2301, size: 64, offset: 2720)
!2301 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2286, file: !72, line: 75, size: 64, elements: !2302)
!2302 = !{!2303, !2304}
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2301, file: !72, line: 77, baseType: !96, size: 32)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2301, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2286, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2286, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2307 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2308, nameTableKind: None)
!2308 = !{!2309, !2311, !2313, !2315, !2317, !2319, !2321, !2323, !2325, !2327, !2329, !2331, !2333, !2335, !2337, !2339, !2341, !2343, !2353, !2356, !2361, !2363, !2366, !2368, !2373, !2376, !2378}
!2309 = !DIGlobalVariableExpression(var: !2310, expr: !DIExpression())
!2310 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2307, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2311 = !DIGlobalVariableExpression(var: !2312, expr: !DIExpression())
!2312 = distinct !DIGlobalVariable(name: "short_list", scope: !2307, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2313 = !DIGlobalVariableExpression(var: !2314, expr: !DIExpression())
!2314 = distinct !DIGlobalVariable(name: "short_output", scope: !2307, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2315 = !DIGlobalVariableExpression(var: !2316, expr: !DIExpression())
!2316 = distinct !DIGlobalVariable(name: "include_idle", scope: !2307, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2317 = !DIGlobalVariableExpression(var: !2318, expr: !DIExpression())
!2318 = distinct !DIGlobalVariable(name: "include_heading", scope: !2307, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2319 = !DIGlobalVariableExpression(var: !2320, expr: !DIExpression())
!2320 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2307, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2321 = !DIGlobalVariableExpression(var: !2322, expr: !DIExpression())
!2322 = distinct !DIGlobalVariable(name: "include_exit", scope: !2307, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2323 = !DIGlobalVariableExpression(var: !2324, expr: !DIExpression())
!2324 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2307, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2325 = !DIGlobalVariableExpression(var: !2326, expr: !DIExpression())
!2326 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2307, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2327 = !DIGlobalVariableExpression(var: !2328, expr: !DIExpression())
!2328 = distinct !DIGlobalVariable(name: "need_login", scope: !2307, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2329 = !DIGlobalVariableExpression(var: !2330, expr: !DIExpression())
!2330 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2307, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2331 = !DIGlobalVariableExpression(var: !2332, expr: !DIExpression())
!2332 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2307, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2333 = !DIGlobalVariableExpression(var: !2334, expr: !DIExpression())
!2334 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2307, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2335 = !DIGlobalVariableExpression(var: !2336, expr: !DIExpression())
!2336 = distinct !DIGlobalVariable(name: "need_users", scope: !2307, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2337 = !DIGlobalVariableExpression(var: !2338, expr: !DIExpression())
!2338 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2307, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2339 = !DIGlobalVariableExpression(var: !2340, expr: !DIExpression())
!2340 = distinct !DIGlobalVariable(name: "time_format", scope: !2307, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2341 = !DIGlobalVariableExpression(var: !2342, expr: !DIExpression())
!2342 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2307, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2343 = !DIGlobalVariableExpression(var: !2344, expr: !DIExpression())
!2344 = distinct !DIGlobalVariable(name: "longopts", scope: !2307, file: !3, line: 162, type: !2345, isLocal: true, isDefinition: true)
!2345 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2346, size: 4608, elements: !151)
!2346 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2347)
!2347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2348)
!2348 = !{!2349, !2350, !2351, !2352}
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2347, file: !144, line: 52, baseType: !49, size: 64)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2347, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2347, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2347, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2353 = !DIGlobalVariableExpression(var: !2354, expr: !DIExpression())
!2354 = distinct !DIGlobalVariable(name: "mesg", scope: !2355, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2355 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2307, retainedNodes: !4)
!2356 = !DIGlobalVariableExpression(var: !2357, expr: !DIExpression())
!2357 = distinct !DIGlobalVariable(name: "hoststr", scope: !2358, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2358 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2359, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2307, retainedNodes: !4)
!2359 = !DISubroutineType(types: !2360)
!2360 = !{null, !2283, !9}
!2361 = !DIGlobalVariableExpression(var: !2362, expr: !DIExpression())
!2362 = distinct !DIGlobalVariable(name: "hostlen", scope: !2358, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2363 = !DIGlobalVariableExpression(var: !2364, expr: !DIExpression())
!2364 = distinct !DIGlobalVariable(name: "now", scope: !2365, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2365 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2307, retainedNodes: !4)
!2366 = !DIGlobalVariableExpression(var: !2367, expr: !DIExpression())
!2367 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2365, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2368 = !DIGlobalVariableExpression(var: !2369, expr: !DIExpression())
!2369 = distinct !DIGlobalVariable(name: "buf", scope: !2370, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2370 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2371, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2307, retainedNodes: !4)
!2371 = !DISubroutineType(types: !2372)
!2372 = !{!49, !2283}
!2373 = !DIGlobalVariableExpression(var: !2374, expr: !DIExpression())
!2374 = distinct !DIGlobalVariable(name: "runlevline", scope: !2375, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2375 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2281, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2307, retainedNodes: !4)
!2376 = !DIGlobalVariableExpression(var: !2377, expr: !DIExpression())
!2377 = distinct !DIGlobalVariable(name: "comment", scope: !2375, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2378 = !DIGlobalVariableExpression(var: !2379, expr: !DIExpression())
!2379 = distinct !DIGlobalVariable(name: "exitstr", scope: !2280, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2380 = !DILocalVariable(name: "comment", scope: !2280, file: !3, line: 462, type: !6)
!2381 = !DILocalVariable(name: "pidstr", scope: !2280, file: !3, line: 463, type: !1423)
!2382 = distinct !DISubprogram(name: "make_id_equals_comment", scope: !3, file: !3, line: 448, type: !2383, scopeLine: 449, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2383 = !DISubroutineType(types: !2384)
!2384 = !{!6, !67}
!2385 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2382, file: !3, line: 448, type: !67)
!2386 = !DILocation(line: 448, column: 44, scope: !2382)
!2387 = !DILocalVariable(name: "utmpsize", scope: !2382, file: !3, line: 450, type: !110)
!2388 = !DILocation(line: 450, column: 10, scope: !2382)
!2389 = !DILocalVariable(name: "comment", scope: !2382, file: !3, line: 451, type: !6)
!2390 = !DILocation(line: 451, column: 9, scope: !2382)
!2391 = !DILocation(line: 451, column: 36, scope: !2382)
!2392 = !DILocation(line: 451, column: 28, scope: !2382)
!2393 = !DILocation(line: 451, column: 48, scope: !2382)
!2394 = !DILocation(line: 451, column: 46, scope: !2382)
!2395 = !DILocation(line: 451, column: 57, scope: !2382)
!2396 = !DILocation(line: 451, column: 19, scope: !2382)
!2397 = !DILocation(line: 453, column: 11, scope: !2382)
!2398 = !DILocation(line: 453, column: 20, scope: !2382)
!2399 = !DILocation(line: 453, column: 3, scope: !2382)
!2400 = !DILocation(line: 454, column: 12, scope: !2382)
!2401 = !DILocation(line: 454, column: 21, scope: !2382)
!2402 = !DILocation(line: 454, column: 39, scope: !2382)
!2403 = !DILocation(line: 454, column: 3, scope: !2382)
!2404 = !DILocation(line: 455, column: 10, scope: !2382)
!2405 = !DILocation(line: 455, column: 3, scope: !2382)
!2406 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !125, file: !3, line: 218, type: !67)
!2407 = !DILocation(line: 218, column: 33, scope: !125)
!2408 = !DILocalVariable(name: "t", scope: !125, file: !3, line: 228, type: !9)
!2409 = !DILocation(line: 228, column: 10, scope: !125)
!2410 = !DILocation(line: 228, column: 14, scope: !125)
!2411 = !DILocalVariable(name: "tmp", scope: !125, file: !3, line: 229, type: !2412)
!2412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2413, size: 64)
!2413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !2414, line: 7, size: 448, elements: !2415)
!2414 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h", directory: "")
!2415 = !{!2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426}
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !2413, file: !2414, line: 9, baseType: !53, size: 32)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !2413, file: !2414, line: 10, baseType: !53, size: 32, offset: 32)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !2413, file: !2414, line: 11, baseType: !53, size: 32, offset: 64)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !2413, file: !2414, line: 12, baseType: !53, size: 32, offset: 96)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !2413, file: !2414, line: 13, baseType: !53, size: 32, offset: 128)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !2413, file: !2414, line: 14, baseType: !53, size: 32, offset: 160)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !2413, file: !2414, line: 15, baseType: !53, size: 32, offset: 192)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !2413, file: !2414, line: 16, baseType: !53, size: 32, offset: 224)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !2413, file: !2414, line: 17, baseType: !53, size: 32, offset: 256)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "tm_gmtoff", scope: !2413, file: !2414, line: 20, baseType: !13, size: 64, offset: 320)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "tm_zone", scope: !2413, file: !2414, line: 21, baseType: !49, size: 64, offset: 384)
!2427 = !DILocation(line: 229, column: 14, scope: !125)
!2428 = !DILocation(line: 229, column: 20, scope: !125)
!2429 = !DILocation(line: 231, column: 7, scope: !2430)
!2430 = distinct !DILexicalBlock(scope: !125, file: !3, line: 231, column: 7)
!2431 = !DILocation(line: 231, column: 7, scope: !125)
!2432 = !DILocation(line: 233, column: 34, scope: !2433)
!2433 = distinct !DILexicalBlock(scope: !2430, file: !3, line: 232, column: 5)
!2434 = !DILocation(line: 233, column: 47, scope: !2433)
!2435 = !DILocation(line: 233, column: 7, scope: !2433)
!2436 = !DILocation(line: 234, column: 7, scope: !2433)
!2437 = !DILocation(line: 237, column: 23, scope: !2430)
!2438 = !DILocation(line: 237, column: 12, scope: !2430)
!2439 = !DILocation(line: 237, column: 5, scope: !2430)
!2440 = !DILocation(line: 238, column: 1, scope: !125)
!2441 = !DILocalVariable(name: "utmp_ent", arg: 1, scope: !2442, file: !3, line: 218, type: !2445)
!2442 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2443, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2469, retainedNodes: !4)
!2443 = !DISubroutineType(types: !2444)
!2444 = !{!49, !2445}
!2445 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2446, size: 64)
!2446 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2447)
!2447 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2448)
!2448 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2449)
!2449 = !{!2450, !2451, !2452, !2453, !2454, !2455, !2456, !2461, !2462, !2467, !2468}
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2448, file: !72, line: 57, baseType: !14, size: 16)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2448, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2448, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2448, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2448, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2448, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2448, file: !72, line: 67, baseType: !2457, size: 32, offset: 2656)
!2457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2458)
!2458 = !{!2459, !2460}
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2457, file: !72, line: 45, baseType: !14, size: 16)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2457, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2448, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2448, file: !72, line: 79, baseType: !2463, size: 64, offset: 2720)
!2463 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2448, file: !72, line: 75, size: 64, elements: !2464)
!2464 = !{!2465, !2466}
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2463, file: !72, line: 77, baseType: !96, size: 32)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2463, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2467 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2448, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2448, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2469 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2470, nameTableKind: None)
!2470 = !{!2471, !2473, !2475, !2477, !2479, !2481, !2483, !2485, !2487, !2489, !2491, !2493, !2495, !2497, !2499, !2501, !2503, !2505, !2515, !2518, !2523, !2525, !2528, !2530, !2532, !2537, !2539}
!2471 = !DIGlobalVariableExpression(var: !2472, expr: !DIExpression())
!2472 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2469, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2473 = !DIGlobalVariableExpression(var: !2474, expr: !DIExpression())
!2474 = distinct !DIGlobalVariable(name: "short_list", scope: !2469, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2475 = !DIGlobalVariableExpression(var: !2476, expr: !DIExpression())
!2476 = distinct !DIGlobalVariable(name: "short_output", scope: !2469, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2477 = !DIGlobalVariableExpression(var: !2478, expr: !DIExpression())
!2478 = distinct !DIGlobalVariable(name: "include_idle", scope: !2469, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2479 = !DIGlobalVariableExpression(var: !2480, expr: !DIExpression())
!2480 = distinct !DIGlobalVariable(name: "include_heading", scope: !2469, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2481 = !DIGlobalVariableExpression(var: !2482, expr: !DIExpression())
!2482 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2469, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2483 = !DIGlobalVariableExpression(var: !2484, expr: !DIExpression())
!2484 = distinct !DIGlobalVariable(name: "include_exit", scope: !2469, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2485 = !DIGlobalVariableExpression(var: !2486, expr: !DIExpression())
!2486 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2469, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2487 = !DIGlobalVariableExpression(var: !2488, expr: !DIExpression())
!2488 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2469, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2489 = !DIGlobalVariableExpression(var: !2490, expr: !DIExpression())
!2490 = distinct !DIGlobalVariable(name: "need_login", scope: !2469, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2491 = !DIGlobalVariableExpression(var: !2492, expr: !DIExpression())
!2492 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2469, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2493 = !DIGlobalVariableExpression(var: !2494, expr: !DIExpression())
!2494 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2469, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2495 = !DIGlobalVariableExpression(var: !2496, expr: !DIExpression())
!2496 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2469, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2497 = !DIGlobalVariableExpression(var: !2498, expr: !DIExpression())
!2498 = distinct !DIGlobalVariable(name: "need_users", scope: !2469, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2499 = !DIGlobalVariableExpression(var: !2500, expr: !DIExpression())
!2500 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2469, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2501 = !DIGlobalVariableExpression(var: !2502, expr: !DIExpression())
!2502 = distinct !DIGlobalVariable(name: "time_format", scope: !2469, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2503 = !DIGlobalVariableExpression(var: !2504, expr: !DIExpression())
!2504 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2469, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2505 = !DIGlobalVariableExpression(var: !2506, expr: !DIExpression())
!2506 = distinct !DIGlobalVariable(name: "longopts", scope: !2469, file: !3, line: 162, type: !2507, isLocal: true, isDefinition: true)
!2507 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2508, size: 4608, elements: !151)
!2508 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2509)
!2509 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2510)
!2510 = !{!2511, !2512, !2513, !2514}
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2509, file: !144, line: 52, baseType: !49, size: 64)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2509, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2509, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2509, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2515 = !DIGlobalVariableExpression(var: !2516, expr: !DIExpression())
!2516 = distinct !DIGlobalVariable(name: "mesg", scope: !2517, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2517 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2469, retainedNodes: !4)
!2518 = !DIGlobalVariableExpression(var: !2519, expr: !DIExpression())
!2519 = distinct !DIGlobalVariable(name: "hoststr", scope: !2520, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2520 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2521, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2469, retainedNodes: !4)
!2521 = !DISubroutineType(types: !2522)
!2522 = !{null, !2445, !9}
!2523 = !DIGlobalVariableExpression(var: !2524, expr: !DIExpression())
!2524 = distinct !DIGlobalVariable(name: "hostlen", scope: !2520, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2525 = !DIGlobalVariableExpression(var: !2526, expr: !DIExpression())
!2526 = distinct !DIGlobalVariable(name: "now", scope: !2527, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2527 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2469, retainedNodes: !4)
!2528 = !DIGlobalVariableExpression(var: !2529, expr: !DIExpression())
!2529 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2527, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2530 = !DIGlobalVariableExpression(var: !2531, expr: !DIExpression())
!2531 = distinct !DIGlobalVariable(name: "buf", scope: !2442, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2532 = !DIGlobalVariableExpression(var: !2533, expr: !DIExpression())
!2533 = distinct !DIGlobalVariable(name: "runlevline", scope: !2534, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2534 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2535, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2469, retainedNodes: !4)
!2535 = !DISubroutineType(types: !2536)
!2536 = !{null, !2445}
!2537 = !DIGlobalVariableExpression(var: !2538, expr: !DIExpression())
!2538 = distinct !DIGlobalVariable(name: "comment", scope: !2534, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2539 = !DIGlobalVariableExpression(var: !2540, expr: !DIExpression())
!2540 = distinct !DIGlobalVariable(name: "exitstr", scope: !2541, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2541 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2535, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2469, retainedNodes: !4)
!2542 = !DILocalVariable(name: "t", scope: !2442, file: !3, line: 228, type: !9)
!2543 = !DILocalVariable(name: "tmp", scope: !2442, file: !3, line: 229, type: !2544)
!2544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2545, size: 64)
!2545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tm", file: !2414, line: 7, size: 448, elements: !2546)
!2546 = !{!2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557}
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "tm_sec", scope: !2545, file: !2414, line: 9, baseType: !53, size: 32)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "tm_min", scope: !2545, file: !2414, line: 10, baseType: !53, size: 32, offset: 32)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "tm_hour", scope: !2545, file: !2414, line: 11, baseType: !53, size: 32, offset: 64)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mday", scope: !2545, file: !2414, line: 12, baseType: !53, size: 32, offset: 96)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "tm_mon", scope: !2545, file: !2414, line: 13, baseType: !53, size: 32, offset: 128)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "tm_year", scope: !2545, file: !2414, line: 14, baseType: !53, size: 32, offset: 160)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "tm_wday", scope: !2545, file: !2414, line: 15, baseType: !53, size: 32, offset: 192)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "tm_yday", scope: !2545, file: !2414, line: 16, baseType: !53, size: 32, offset: 224)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "tm_isdst", scope: !2545, file: !2414, line: 17, baseType: !53, size: 32, offset: 256)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "tm_gmtoff", scope: !2545, file: !2414, line: 20, baseType: !13, size: 64, offset: 320)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "tm_zone", scope: !2545, file: !2414, line: 21, baseType: !49, size: 64, offset: 384)
!2558 = !DILocalVariable(name: "userlen", arg: 1, scope: !56, file: !3, line: 244, type: !53)
!2559 = !DILocation(line: 244, column: 17, scope: !56)
!2560 = !DILocalVariable(name: "user", arg: 2, scope: !56, file: !3, line: 244, type: !49)
!2561 = !DILocation(line: 244, column: 38, scope: !56)
!2562 = !DILocalVariable(name: "state", arg: 3, scope: !56, file: !3, line: 244, type: !50)
!2563 = !DILocation(line: 244, column: 55, scope: !56)
!2564 = !DILocalVariable(name: "linelen", arg: 4, scope: !56, file: !3, line: 245, type: !53)
!2565 = !DILocation(line: 245, column: 17, scope: !56)
!2566 = !DILocalVariable(name: "line", arg: 5, scope: !56, file: !3, line: 245, type: !49)
!2567 = !DILocation(line: 245, column: 38, scope: !56)
!2568 = !DILocalVariable(name: "time_str", arg: 6, scope: !56, file: !3, line: 246, type: !49)
!2569 = !DILocation(line: 246, column: 25, scope: !56)
!2570 = !DILocalVariable(name: "idle", arg: 7, scope: !56, file: !3, line: 246, type: !49)
!2571 = !DILocation(line: 246, column: 47, scope: !56)
!2572 = !DILocalVariable(name: "pid", arg: 8, scope: !56, file: !3, line: 246, type: !49)
!2573 = !DILocation(line: 246, column: 65, scope: !56)
!2574 = !DILocalVariable(name: "comment", arg: 9, scope: !56, file: !3, line: 247, type: !49)
!2575 = !DILocation(line: 247, column: 25, scope: !56)
!2576 = !DILocalVariable(name: "exitstr", arg: 10, scope: !56, file: !3, line: 247, type: !49)
!2577 = !DILocation(line: 247, column: 46, scope: !56)
!2578 = !DILocalVariable(name: "buf", scope: !56, file: !3, line: 250, type: !6)
!2579 = !DILocation(line: 250, column: 9, scope: !56)
!2580 = !DILocalVariable(name: "x_idle", scope: !56, file: !3, line: 251, type: !2581)
!2581 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !260)
!2582 = !DILocation(line: 251, column: 8, scope: !56)
!2583 = !DILocalVariable(name: "x_pid", scope: !56, file: !3, line: 252, type: !2584)
!2584 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 104, elements: !2585)
!2585 = !{!2586}
!2586 = !DISubrange(count: 13)
!2587 = !DILocation(line: 252, column: 8, scope: !56)
!2588 = !DILocalVariable(name: "x_exitstr", scope: !56, file: !3, line: 253, type: !6)
!2589 = !DILocation(line: 253, column: 9, scope: !56)
!2590 = !DILocalVariable(name: "err", scope: !56, file: !3, line: 254, type: !53)
!2591 = !DILocation(line: 254, column: 7, scope: !56)
!2592 = !DILocation(line: 256, column: 13, scope: !56)
!2593 = !DILocation(line: 256, column: 11, scope: !56)
!2594 = !DILocation(line: 258, column: 7, scope: !2595)
!2595 = distinct !DILexicalBlock(scope: !56, file: !3, line: 258, column: 7)
!2596 = !DILocation(line: 258, column: 20, scope: !2595)
!2597 = !DILocation(line: 258, column: 24, scope: !2595)
!2598 = !DILocation(line: 258, column: 37, scope: !2595)
!2599 = !DILocation(line: 258, column: 48, scope: !2595)
!2600 = !DILocation(line: 258, column: 40, scope: !2595)
!2601 = !DILocation(line: 258, column: 54, scope: !2595)
!2602 = !DILocation(line: 258, column: 7, scope: !56)
!2603 = !DILocation(line: 259, column: 14, scope: !2595)
!2604 = !DILocation(line: 259, column: 31, scope: !2595)
!2605 = !DILocation(line: 259, column: 5, scope: !2595)
!2606 = !DILocation(line: 261, column: 5, scope: !2595)
!2607 = !DILocation(line: 261, column: 13, scope: !2595)
!2608 = !DILocation(line: 263, column: 8, scope: !2609)
!2609 = distinct !DILexicalBlock(scope: !56, file: !3, line: 263, column: 7)
!2610 = !DILocation(line: 263, column: 21, scope: !2609)
!2611 = !DILocation(line: 263, column: 32, scope: !2609)
!2612 = !DILocation(line: 263, column: 24, scope: !2609)
!2613 = !DILocation(line: 263, column: 37, scope: !2609)
!2614 = !DILocation(line: 263, column: 7, scope: !56)
!2615 = !DILocation(line: 264, column: 14, scope: !2609)
!2616 = !DILocation(line: 264, column: 30, scope: !2609)
!2617 = !DILocation(line: 264, column: 5, scope: !2609)
!2618 = !DILocation(line: 266, column: 5, scope: !2609)
!2619 = !DILocation(line: 266, column: 12, scope: !2609)
!2620 = !DILocation(line: 268, column: 24, scope: !56)
!2621 = !DILocation(line: 268, column: 43, scope: !56)
!2622 = !DILocation(line: 268, column: 41, scope: !56)
!2623 = !DILocation(line: 268, column: 70, scope: !56)
!2624 = !DILocation(line: 268, column: 15, scope: !56)
!2625 = !DILocation(line: 268, column: 13, scope: !56)
!2626 = !DILocation(line: 269, column: 7, scope: !2627)
!2627 = distinct !DILexicalBlock(scope: !56, file: !3, line: 269, column: 7)
!2628 = !DILocation(line: 269, column: 7, scope: !56)
!2629 = !DILocation(line: 270, column: 14, scope: !2627)
!2630 = !DILocation(line: 270, column: 35, scope: !2627)
!2631 = !DILocation(line: 270, column: 5, scope: !2627)
!2632 = !DILocation(line: 272, column: 6, scope: !2627)
!2633 = !DILocation(line: 272, column: 16, scope: !2627)
!2634 = !DILocation(line: 284, column: 19, scope: !56)
!2635 = !DILocation(line: 284, column: 28, scope: !56)
!2636 = !DILocation(line: 284, column: 35, scope: !56)
!2637 = !DILocation(line: 285, column: 19, scope: !56)
!2638 = !DILocation(line: 286, column: 19, scope: !56)
!2639 = !DILocation(line: 286, column: 28, scope: !56)
!2640 = !DILocation(line: 287, column: 19, scope: !56)
!2641 = !DILocation(line: 288, column: 19, scope: !56)
!2642 = !DILocation(line: 289, column: 19, scope: !56)
!2643 = !DILocation(line: 290, column: 19, scope: !56)
!2644 = !DILocation(line: 295, column: 19, scope: !56)
!2645 = !DILocation(line: 296, column: 19, scope: !56)
!2646 = !DILocation(line: 274, column: 9, scope: !56)
!2647 = !DILocation(line: 274, column: 7, scope: !56)
!2648 = !DILocation(line: 298, column: 7, scope: !2649)
!2649 = distinct !DILexicalBlock(scope: !56, file: !3, line: 298, column: 7)
!2650 = !DILocation(line: 298, column: 11, scope: !2649)
!2651 = !DILocation(line: 299, column: 5, scope: !2649)
!2652 = !DILocalVariable(name: "p", scope: !2653, file: !3, line: 303, type: !6)
!2653 = distinct !DILexicalBlock(scope: !56, file: !3, line: 301, column: 3)
!2654 = !DILocation(line: 303, column: 11, scope: !2653)
!2655 = !DILocation(line: 303, column: 15, scope: !2653)
!2656 = !DILocation(line: 303, column: 29, scope: !2653)
!2657 = !DILocation(line: 303, column: 21, scope: !2653)
!2658 = !DILocation(line: 303, column: 19, scope: !2653)
!2659 = !DILocation(line: 304, column: 5, scope: !2653)
!2660 = !DILocation(line: 304, column: 13, scope: !2653)
!2661 = !DILocation(line: 304, column: 12, scope: !2653)
!2662 = !DILocation(line: 304, column: 17, scope: !2653)
!2663 = distinct !{!2663, !2659, !2664}
!2664 = !DILocation(line: 305, column: 18, scope: !2653)
!2665 = !DILocation(line: 306, column: 7, scope: !2653)
!2666 = !DILocation(line: 306, column: 9, scope: !2653)
!2667 = !DILocation(line: 306, column: 14, scope: !2653)
!2668 = !DILocation(line: 309, column: 9, scope: !56)
!2669 = !DILocation(line: 309, column: 3, scope: !56)
!2670 = !DILocation(line: 310, column: 9, scope: !56)
!2671 = !DILocation(line: 310, column: 3, scope: !56)
!2672 = !DILocation(line: 311, column: 9, scope: !56)
!2673 = !DILocation(line: 311, column: 3, scope: !56)
!2674 = !DILocation(line: 312, column: 1, scope: !56)
!2675 = !DILocalVariable(name: "userlen", arg: 1, scope: !2676, file: !3, line: 244, type: !53)
!2676 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2677, retainedNodes: !4)
!2677 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2678, nameTableKind: None)
!2678 = !{!2679, !2681, !2683, !2685, !2687, !2689, !2691, !2693, !2695, !2697, !2699, !2701, !2703, !2705, !2707, !2709, !2711, !2713, !2723, !2725, !2754, !2756, !2759, !2761, !2766, !2771, !2773}
!2679 = !DIGlobalVariableExpression(var: !2680, expr: !DIExpression())
!2680 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2677, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2681 = !DIGlobalVariableExpression(var: !2682, expr: !DIExpression())
!2682 = distinct !DIGlobalVariable(name: "short_list", scope: !2677, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2683 = !DIGlobalVariableExpression(var: !2684, expr: !DIExpression())
!2684 = distinct !DIGlobalVariable(name: "short_output", scope: !2677, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2685 = !DIGlobalVariableExpression(var: !2686, expr: !DIExpression())
!2686 = distinct !DIGlobalVariable(name: "include_idle", scope: !2677, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2687 = !DIGlobalVariableExpression(var: !2688, expr: !DIExpression())
!2688 = distinct !DIGlobalVariable(name: "include_heading", scope: !2677, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2689 = !DIGlobalVariableExpression(var: !2690, expr: !DIExpression())
!2690 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2677, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2691 = !DIGlobalVariableExpression(var: !2692, expr: !DIExpression())
!2692 = distinct !DIGlobalVariable(name: "include_exit", scope: !2677, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2693 = !DIGlobalVariableExpression(var: !2694, expr: !DIExpression())
!2694 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2677, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2695 = !DIGlobalVariableExpression(var: !2696, expr: !DIExpression())
!2696 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2677, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2697 = !DIGlobalVariableExpression(var: !2698, expr: !DIExpression())
!2698 = distinct !DIGlobalVariable(name: "need_login", scope: !2677, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2699 = !DIGlobalVariableExpression(var: !2700, expr: !DIExpression())
!2700 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2677, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2701 = !DIGlobalVariableExpression(var: !2702, expr: !DIExpression())
!2702 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2677, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2703 = !DIGlobalVariableExpression(var: !2704, expr: !DIExpression())
!2704 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2677, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2705 = !DIGlobalVariableExpression(var: !2706, expr: !DIExpression())
!2706 = distinct !DIGlobalVariable(name: "need_users", scope: !2677, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2707 = !DIGlobalVariableExpression(var: !2708, expr: !DIExpression())
!2708 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2677, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2709 = !DIGlobalVariableExpression(var: !2710, expr: !DIExpression())
!2710 = distinct !DIGlobalVariable(name: "time_format", scope: !2677, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2711 = !DIGlobalVariableExpression(var: !2712, expr: !DIExpression())
!2712 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2677, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2713 = !DIGlobalVariableExpression(var: !2714, expr: !DIExpression())
!2714 = distinct !DIGlobalVariable(name: "longopts", scope: !2677, file: !3, line: 162, type: !2715, isLocal: true, isDefinition: true)
!2715 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2716, size: 4608, elements: !151)
!2716 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2717)
!2717 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2718)
!2718 = !{!2719, !2720, !2721, !2722}
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2717, file: !144, line: 52, baseType: !49, size: 64)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2717, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2717, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2717, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2723 = !DIGlobalVariableExpression(var: !2724, expr: !DIExpression())
!2724 = distinct !DIGlobalVariable(name: "mesg", scope: !2676, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2725 = !DIGlobalVariableExpression(var: !2726, expr: !DIExpression())
!2726 = distinct !DIGlobalVariable(name: "hoststr", scope: !2727, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2727 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2728, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2677, retainedNodes: !4)
!2728 = !DISubroutineType(types: !2729)
!2729 = !{null, !2730, !9}
!2730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2731, size: 64)
!2731 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2732)
!2732 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2733)
!2733 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2734)
!2734 = !{!2735, !2736, !2737, !2738, !2739, !2740, !2741, !2746, !2747, !2752, !2753}
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2733, file: !72, line: 57, baseType: !14, size: 16)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2733, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2733, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2733, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2733, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2733, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2733, file: !72, line: 67, baseType: !2742, size: 32, offset: 2656)
!2742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2743)
!2743 = !{!2744, !2745}
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2742, file: !72, line: 45, baseType: !14, size: 16)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2742, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2733, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2733, file: !72, line: 79, baseType: !2748, size: 64, offset: 2720)
!2748 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2733, file: !72, line: 75, size: 64, elements: !2749)
!2749 = !{!2750, !2751}
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2748, file: !72, line: 77, baseType: !96, size: 32)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2748, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2733, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2733, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2754 = !DIGlobalVariableExpression(var: !2755, expr: !DIExpression())
!2755 = distinct !DIGlobalVariable(name: "hostlen", scope: !2727, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2756 = !DIGlobalVariableExpression(var: !2757, expr: !DIExpression())
!2757 = distinct !DIGlobalVariable(name: "now", scope: !2758, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2758 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2677, retainedNodes: !4)
!2759 = !DIGlobalVariableExpression(var: !2760, expr: !DIExpression())
!2760 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2758, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2761 = !DIGlobalVariableExpression(var: !2762, expr: !DIExpression())
!2762 = distinct !DIGlobalVariable(name: "buf", scope: !2763, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2763 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2764, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2677, retainedNodes: !4)
!2764 = !DISubroutineType(types: !2765)
!2765 = !{!49, !2730}
!2766 = !DIGlobalVariableExpression(var: !2767, expr: !DIExpression())
!2767 = distinct !DIGlobalVariable(name: "runlevline", scope: !2768, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2768 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2769, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2677, retainedNodes: !4)
!2769 = !DISubroutineType(types: !2770)
!2770 = !{null, !2730}
!2771 = !DIGlobalVariableExpression(var: !2772, expr: !DIExpression())
!2772 = distinct !DIGlobalVariable(name: "comment", scope: !2768, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2773 = !DIGlobalVariableExpression(var: !2774, expr: !DIExpression())
!2774 = distinct !DIGlobalVariable(name: "exitstr", scope: !2775, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2775 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2769, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2677, retainedNodes: !4)
!2776 = !DILocalVariable(name: "user", arg: 2, scope: !2676, file: !3, line: 244, type: !49)
!2777 = !DILocalVariable(name: "state", arg: 3, scope: !2676, file: !3, line: 244, type: !50)
!2778 = !DILocalVariable(name: "linelen", arg: 4, scope: !2676, file: !3, line: 245, type: !53)
!2779 = !DILocalVariable(name: "line", arg: 5, scope: !2676, file: !3, line: 245, type: !49)
!2780 = !DILocalVariable(name: "time_str", arg: 6, scope: !2676, file: !3, line: 246, type: !49)
!2781 = !DILocalVariable(name: "idle", arg: 7, scope: !2676, file: !3, line: 246, type: !49)
!2782 = !DILocalVariable(name: "pid", arg: 8, scope: !2676, file: !3, line: 246, type: !49)
!2783 = !DILocalVariable(name: "comment", arg: 9, scope: !2676, file: !3, line: 247, type: !49)
!2784 = !DILocalVariable(name: "exitstr", arg: 10, scope: !2676, file: !3, line: 247, type: !49)
!2785 = !DILocalVariable(name: "buf", scope: !2676, file: !3, line: 250, type: !6)
!2786 = !DILocalVariable(name: "x_idle", scope: !2676, file: !3, line: 251, type: !2581)
!2787 = !DILocalVariable(name: "x_pid", scope: !2676, file: !3, line: 252, type: !2584)
!2788 = !DILocalVariable(name: "x_exitstr", scope: !2676, file: !3, line: 253, type: !6)
!2789 = !DILocalVariable(name: "err", scope: !2676, file: !3, line: 254, type: !53)
!2790 = distinct !DISubprogram(name: "timetostr", scope: !466, file: !466, line: 690, type: !2791, scopeLine: 691, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2791 = !DISubroutineType(types: !2792)
!2792 = !{!6, !9, !6}
!2793 = !DILocalVariable(name: "t", arg: 1, scope: !2790, file: !466, line: 690, type: !9)
!2794 = !DILocation(line: 690, column: 19, scope: !2790)
!2795 = !DILocalVariable(name: "buf", arg: 2, scope: !2790, file: !466, line: 690, type: !6)
!2796 = !DILocation(line: 690, column: 28, scope: !2790)
!2797 = !DILocation(line: 693, column: 24, scope: !2790)
!2798 = !DILocation(line: 693, column: 27, scope: !2790)
!2799 = !DILocation(line: 693, column: 13, scope: !2790)
!2800 = !DILocation(line: 692, column: 3, scope: !2790)
!2801 = distinct !DISubprogram(name: "stzncpy", scope: !466, file: !466, line: 741, type: !2802, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2802 = !DISubroutineType(types: !2803)
!2803 = !{!6, !2804, !2805, !110}
!2804 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !6)
!2805 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !49)
!2806 = !DILocalVariable(name: "dest", arg: 1, scope: !2801, file: !466, line: 741, type: !2804)
!2807 = !DILocation(line: 741, column: 25, scope: !2801)
!2808 = !DILocalVariable(name: "src", arg: 2, scope: !2801, file: !466, line: 741, type: !2805)
!2809 = !DILocation(line: 741, column: 52, scope: !2801)
!2810 = !DILocalVariable(name: "len", arg: 3, scope: !2801, file: !466, line: 741, type: !110)
!2811 = !DILocation(line: 741, column: 64, scope: !2801)
!2812 = !DILocalVariable(name: "src_end", scope: !2801, file: !466, line: 743, type: !49)
!2813 = !DILocation(line: 743, column: 15, scope: !2801)
!2814 = !DILocation(line: 743, column: 25, scope: !2801)
!2815 = !DILocation(line: 743, column: 31, scope: !2801)
!2816 = !DILocation(line: 743, column: 29, scope: !2801)
!2817 = !DILocation(line: 744, column: 3, scope: !2801)
!2818 = !DILocation(line: 744, column: 10, scope: !2801)
!2819 = !DILocation(line: 744, column: 16, scope: !2801)
!2820 = !DILocation(line: 744, column: 14, scope: !2801)
!2821 = !DILocation(line: 744, column: 24, scope: !2801)
!2822 = !DILocation(line: 744, column: 28, scope: !2801)
!2823 = !DILocation(line: 744, column: 27, scope: !2801)
!2824 = !DILocation(line: 0, scope: !2801)
!2825 = !DILocation(line: 745, column: 19, scope: !2801)
!2826 = !DILocation(line: 745, column: 15, scope: !2801)
!2827 = !DILocation(line: 745, column: 10, scope: !2801)
!2828 = !DILocation(line: 745, column: 13, scope: !2801)
!2829 = distinct !{!2829, !2817, !2825}
!2830 = !DILocation(line: 746, column: 4, scope: !2801)
!2831 = !DILocation(line: 746, column: 9, scope: !2801)
!2832 = !DILocation(line: 747, column: 10, scope: !2801)
!2833 = !DILocation(line: 747, column: 3, scope: !2801)
!2834 = distinct !DISubprogram(name: "is_tty_writable", scope: !3, file: !3, line: 317, type: !2835, scopeLine: 318, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!2835 = !DISubroutineType(types: !2836)
!2836 = !{!18, !2837}
!2837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2838, size: 64)
!2838 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1372)
!2839 = !DILocalVariable(name: "pstat", arg: 1, scope: !2834, file: !3, line: 317, type: !2837)
!2840 = !DILocation(line: 317, column: 37, scope: !2834)
!2841 = !DILocation(line: 327, column: 10, scope: !2834)
!2842 = !DILocation(line: 327, column: 17, scope: !2834)
!2843 = !DILocation(line: 327, column: 25, scope: !2834)
!2844 = !DILocation(line: 327, column: 3, scope: !2834)
!2845 = !DILocalVariable(name: "pstat", arg: 1, scope: !2846, file: !3, line: 317, type: !2849)
!2846 = distinct !DISubprogram(name: "is_tty_writable", scope: !3, file: !3, line: 317, type: !2847, scopeLine: 318, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2872, retainedNodes: !4)
!2847 = !DISubroutineType(types: !2848)
!2848 = !{!18, !2849}
!2849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2850, size: 64)
!2850 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2851)
!2851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !1373, line: 46, size: 1152, elements: !2852)
!2852 = !{!2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2869, !2870, !2871}
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2851, file: !1373, line: 48, baseType: !1376, size: 64)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2851, file: !1373, line: 53, baseType: !1378, size: 64, offset: 64)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2851, file: !1373, line: 61, baseType: !1380, size: 64, offset: 128)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2851, file: !1373, line: 62, baseType: !1382, size: 32, offset: 192)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2851, file: !1373, line: 64, baseType: !1384, size: 32, offset: 224)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2851, file: !1373, line: 65, baseType: !1386, size: 32, offset: 256)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2851, file: !1373, line: 67, baseType: !53, size: 32, offset: 288)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2851, file: !1373, line: 69, baseType: !1376, size: 64, offset: 320)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2851, file: !1373, line: 74, baseType: !1390, size: 64, offset: 384)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2851, file: !1373, line: 78, baseType: !1392, size: 64, offset: 448)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2851, file: !1373, line: 80, baseType: !1394, size: 64, offset: 512)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2851, file: !1373, line: 91, baseType: !2865, size: 128, offset: 576)
!2865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !1397, line: 10, size: 128, elements: !2866)
!2866 = !{!2867, !2868}
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2865, file: !1397, line: 12, baseType: !11, size: 64)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !2865, file: !1397, line: 16, baseType: !1401, size: 64, offset: 64)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2851, file: !1373, line: 92, baseType: !2865, size: 128, offset: 704)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2851, file: !1373, line: 93, baseType: !2865, size: 128, offset: 832)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2851, file: !1373, line: 106, baseType: !1405, size: 192, offset: 960)
!2872 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !2873, nameTableKind: None)
!2873 = !{!2874, !2876, !2878, !2880, !2882, !2884, !2886, !2888, !2890, !2892, !2894, !2896, !2898, !2900, !2902, !2904, !2906, !2908, !2918, !2921, !2950, !2952, !2955, !2957, !2962, !2967, !2969}
!2874 = !DIGlobalVariableExpression(var: !2875, expr: !DIExpression())
!2875 = distinct !DIGlobalVariable(name: "do_lookup", scope: !2872, file: !3, line: 102, type: !18, isLocal: true, isDefinition: true)
!2876 = !DIGlobalVariableExpression(var: !2877, expr: !DIExpression())
!2877 = distinct !DIGlobalVariable(name: "short_list", scope: !2872, file: !3, line: 107, type: !18, isLocal: true, isDefinition: true)
!2878 = !DIGlobalVariableExpression(var: !2879, expr: !DIExpression())
!2879 = distinct !DIGlobalVariable(name: "short_output", scope: !2872, file: !3, line: 110, type: !18, isLocal: true, isDefinition: true)
!2880 = !DIGlobalVariableExpression(var: !2881, expr: !DIExpression())
!2881 = distinct !DIGlobalVariable(name: "include_idle", scope: !2872, file: !3, line: 115, type: !18, isLocal: true, isDefinition: true)
!2882 = !DIGlobalVariableExpression(var: !2883, expr: !DIExpression())
!2883 = distinct !DIGlobalVariable(name: "include_heading", scope: !2872, file: !3, line: 118, type: !18, isLocal: true, isDefinition: true)
!2884 = !DIGlobalVariableExpression(var: !2885, expr: !DIExpression())
!2885 = distinct !DIGlobalVariable(name: "include_mesg", scope: !2872, file: !3, line: 122, type: !18, isLocal: true, isDefinition: true)
!2886 = !DIGlobalVariableExpression(var: !2887, expr: !DIExpression())
!2887 = distinct !DIGlobalVariable(name: "include_exit", scope: !2872, file: !3, line: 125, type: !18, isLocal: true, isDefinition: true)
!2888 = !DIGlobalVariableExpression(var: !2889, expr: !DIExpression())
!2889 = distinct !DIGlobalVariable(name: "need_boottime", scope: !2872, file: !3, line: 128, type: !18, isLocal: true, isDefinition: true)
!2890 = !DIGlobalVariableExpression(var: !2891, expr: !DIExpression())
!2891 = distinct !DIGlobalVariable(name: "need_deadprocs", scope: !2872, file: !3, line: 131, type: !18, isLocal: true, isDefinition: true)
!2892 = !DIGlobalVariableExpression(var: !2893, expr: !DIExpression())
!2893 = distinct !DIGlobalVariable(name: "need_login", scope: !2872, file: !3, line: 134, type: !18, isLocal: true, isDefinition: true)
!2894 = !DIGlobalVariableExpression(var: !2895, expr: !DIExpression())
!2895 = distinct !DIGlobalVariable(name: "need_initspawn", scope: !2872, file: !3, line: 137, type: !18, isLocal: true, isDefinition: true)
!2896 = !DIGlobalVariableExpression(var: !2897, expr: !DIExpression())
!2897 = distinct !DIGlobalVariable(name: "need_clockchange", scope: !2872, file: !3, line: 140, type: !18, isLocal: true, isDefinition: true)
!2898 = !DIGlobalVariableExpression(var: !2899, expr: !DIExpression())
!2899 = distinct !DIGlobalVariable(name: "need_runlevel", scope: !2872, file: !3, line: 143, type: !18, isLocal: true, isDefinition: true)
!2900 = !DIGlobalVariableExpression(var: !2901, expr: !DIExpression())
!2901 = distinct !DIGlobalVariable(name: "need_users", scope: !2872, file: !3, line: 146, type: !18, isLocal: true, isDefinition: true)
!2902 = !DIGlobalVariableExpression(var: !2903, expr: !DIExpression())
!2903 = distinct !DIGlobalVariable(name: "my_line_only", scope: !2872, file: !3, line: 149, type: !18, isLocal: true, isDefinition: true)
!2904 = !DIGlobalVariableExpression(var: !2905, expr: !DIExpression())
!2905 = distinct !DIGlobalVariable(name: "time_format", scope: !2872, file: !3, line: 153, type: !49, isLocal: true, isDefinition: true)
!2906 = !DIGlobalVariableExpression(var: !2907, expr: !DIExpression())
!2907 = distinct !DIGlobalVariable(name: "time_format_width", scope: !2872, file: !3, line: 154, type: !53, isLocal: true, isDefinition: true)
!2908 = !DIGlobalVariableExpression(var: !2909, expr: !DIExpression())
!2909 = distinct !DIGlobalVariable(name: "longopts", scope: !2872, file: !3, line: 162, type: !2910, isLocal: true, isDefinition: true)
!2910 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2911, size: 4608, elements: !151)
!2911 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2912)
!2912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !144, line: 50, size: 256, elements: !2913)
!2913 = !{!2914, !2915, !2916, !2917}
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2912, file: !144, line: 52, baseType: !49, size: 64)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !2912, file: !144, line: 55, baseType: !53, size: 32, offset: 64)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !2912, file: !144, line: 56, baseType: !149, size: 64, offset: 128)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2912, file: !144, line: 57, baseType: !53, size: 32, offset: 192)
!2918 = !DIGlobalVariableExpression(var: !2919, expr: !DIExpression())
!2919 = distinct !DIGlobalVariable(name: "mesg", scope: !2920, file: !3, line: 249, type: !59, isLocal: true, isDefinition: true)
!2920 = distinct !DISubprogram(name: "print_line", scope: !3, file: !3, line: 244, type: !57, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2872, retainedNodes: !4)
!2921 = !DIGlobalVariableExpression(var: !2922, expr: !DIExpression())
!2922 = distinct !DIGlobalVariable(name: "hoststr", scope: !2923, file: !3, line: 339, type: !6, isLocal: true, isDefinition: true)
!2923 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 333, type: !2924, scopeLine: 334, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2872, retainedNodes: !4)
!2924 = !DISubroutineType(types: !2925)
!2925 = !{null, !2926, !9}
!2926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2927, size: 64)
!2927 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2928)
!2928 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !2929)
!2929 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !2930)
!2930 = !{!2931, !2932, !2933, !2934, !2935, !2936, !2937, !2942, !2943, !2948, !2949}
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !2929, file: !72, line: 57, baseType: !14, size: 16)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !2929, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !2929, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !2929, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !2929, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !2929, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !2929, file: !72, line: 67, baseType: !2938, size: 32, offset: 2656)
!2938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !2939)
!2939 = !{!2940, !2941}
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !2938, file: !72, line: 45, baseType: !14, size: 16)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !2938, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !2929, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !2929, file: !72, line: 79, baseType: !2944, size: 64, offset: 2720)
!2944 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2929, file: !72, line: 75, size: 64, elements: !2945)
!2945 = !{!2946, !2947}
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2944, file: !72, line: 77, baseType: !96, size: 32)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !2944, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !2929, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2929, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!2950 = !DIGlobalVariableExpression(var: !2951, expr: !DIExpression())
!2951 = distinct !DIGlobalVariable(name: "hostlen", scope: !2923, file: !3, line: 341, type: !110, isLocal: true, isDefinition: true)
!2952 = !DIGlobalVariableExpression(var: !2953, expr: !DIExpression())
!2953 = distinct !DIGlobalVariable(name: "now", scope: !2954, file: !3, line: 190, type: !9, isLocal: true, isDefinition: true)
!2954 = distinct !DISubprogram(name: "idle_string", scope: !3, file: !3, line: 188, type: !116, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2872, retainedNodes: !4)
!2955 = !DIGlobalVariableExpression(var: !2956, expr: !DIExpression())
!2956 = distinct !DIGlobalVariable(name: "idle_hhmm", scope: !2954, file: !3, line: 202, type: !120, isLocal: true, isDefinition: true)
!2957 = !DIGlobalVariableExpression(var: !2958, expr: !DIExpression())
!2958 = distinct !DIGlobalVariable(name: "buf", scope: !2959, file: !3, line: 220, type: !128, isLocal: true, isDefinition: true)
!2959 = distinct !DISubprogram(name: "time_string", scope: !3, file: !3, line: 218, type: !2960, scopeLine: 219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2872, retainedNodes: !4)
!2960 = !DISubroutineType(types: !2961)
!2961 = !{!49, !2926}
!2962 = !DIGlobalVariableExpression(var: !2963, expr: !DIExpression())
!2963 = distinct !DIGlobalVariable(name: "runlevline", scope: !2964, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2964 = distinct !DISubprogram(name: "print_runlevel", scope: !3, file: !3, line: 514, type: !2965, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2872, retainedNodes: !4)
!2965 = !DISubroutineType(types: !2966)
!2966 = !{null, !2926}
!2967 = !DIGlobalVariableExpression(var: !2968, expr: !DIExpression())
!2968 = distinct !DIGlobalVariable(name: "comment", scope: !2964, file: !3, line: 516, type: !6, isLocal: true, isDefinition: true)
!2969 = !DIGlobalVariableExpression(var: !2970, expr: !DIExpression())
!2970 = distinct !DIGlobalVariable(name: "exitstr", scope: !2971, file: !3, line: 461, type: !6, isLocal: true, isDefinition: true)
!2971 = distinct !DISubprogram(name: "print_deadprocs", scope: !3, file: !3, line: 459, type: !2965, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2872, retainedNodes: !4)
!2972 = !DILocalVariable(name: "when", arg: 1, scope: !115, file: !3, line: 188, type: !9)
!2973 = !DILocation(line: 188, column: 21, scope: !115)
!2974 = !DILocalVariable(name: "boottime", arg: 2, scope: !115, file: !3, line: 188, type: !9)
!2975 = !DILocation(line: 188, column: 34, scope: !115)
!2976 = !DILocation(line: 192, column: 7, scope: !2977)
!2977 = distinct !DILexicalBlock(scope: !115, file: !3, line: 192, column: 7)
!2978 = !DILocation(line: 192, column: 11, scope: !2977)
!2979 = !DILocation(line: 192, column: 7, scope: !115)
!2980 = !DILocation(line: 193, column: 5, scope: !2977)
!2981 = !DILocation(line: 195, column: 7, scope: !2982)
!2982 = distinct !DILexicalBlock(scope: !115, file: !3, line: 195, column: 7)
!2983 = !DILocation(line: 195, column: 18, scope: !2982)
!2984 = !DILocation(line: 195, column: 16, scope: !2982)
!2985 = !DILocation(line: 195, column: 23, scope: !2982)
!2986 = !DILocation(line: 195, column: 26, scope: !2982)
!2987 = !DILocation(line: 195, column: 30, scope: !2982)
!2988 = !DILocation(line: 195, column: 47, scope: !2982)
!2989 = !DILocation(line: 195, column: 45, scope: !2982)
!2990 = !DILocation(line: 195, column: 52, scope: !2982)
!2991 = !DILocation(line: 195, column: 55, scope: !2982)
!2992 = !DILocation(line: 195, column: 63, scope: !2982)
!2993 = !DILocation(line: 195, column: 60, scope: !2982)
!2994 = !DILocation(line: 195, column: 7, scope: !115)
!2995 = !DILocalVariable(name: "seconds_idle", scope: !2996, file: !3, line: 197, type: !53)
!2996 = distinct !DILexicalBlock(scope: !2982, file: !3, line: 196, column: 5)
!2997 = !DILocation(line: 197, column: 11, scope: !2996)
!2998 = !DILocation(line: 197, column: 26, scope: !2996)
!2999 = !DILocation(line: 197, column: 32, scope: !2996)
!3000 = !DILocation(line: 197, column: 30, scope: !2996)
!3001 = !DILocation(line: 198, column: 11, scope: !3002)
!3002 = distinct !DILexicalBlock(scope: !2996, file: !3, line: 198, column: 11)
!3003 = !DILocation(line: 198, column: 24, scope: !3002)
!3004 = !DILocation(line: 198, column: 11, scope: !2996)
!3005 = !DILocation(line: 199, column: 9, scope: !3002)
!3006 = !DILocation(line: 205, column: 11, scope: !3007)
!3007 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 205, column: 11)
!3008 = distinct !DILexicalBlock(scope: !3009, file: !3, line: 205, column: 11)
!3009 = distinct !DILexicalBlock(scope: !3002, file: !3, line: 201, column: 9)
!3010 = !DILocation(line: 205, column: 11, scope: !3008)
!3011 = !DILocation(line: 207, column: 20, scope: !3009)
!3012 = !DILocation(line: 207, column: 33, scope: !3009)
!3013 = !DILocation(line: 208, column: 21, scope: !3009)
!3014 = !DILocation(line: 208, column: 34, scope: !3009)
!3015 = !DILocation(line: 208, column: 47, scope: !3009)
!3016 = !DILocation(line: 206, column: 11, scope: !3009)
!3017 = !DILocation(line: 209, column: 11, scope: !3009)
!3018 = !DILocation(line: 213, column: 10, scope: !115)
!3019 = !DILocation(line: 213, column: 3, scope: !115)
!3020 = !DILocation(line: 214, column: 1, scope: !115)
!3021 = distinct !DISubprogram(name: "c_isprint", scope: !3022, file: !3022, line: 272, type: !3023, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !286, retainedNodes: !4)
!3022 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3023 = !DISubroutineType(types: !3024)
!3024 = !{!18, !53}
!3025 = !DILocalVariable(name: "c", arg: 1, scope: !3021, file: !3022, line: 272, type: !53)
!3026 = !DILocation(line: 272, column: 16, scope: !3021)
!3027 = !DILocation(line: 274, column: 11, scope: !3021)
!3028 = !DILocation(line: 274, column: 3, scope: !3021)
!3029 = !DILocation(line: 281, column: 7, scope: !3030)
!3030 = distinct !DILexicalBlock(scope: !3021, file: !3022, line: 275, column: 5)
!3031 = !DILocation(line: 283, column: 7, scope: !3030)
!3032 = !DILocation(line: 285, column: 1, scope: !3021)
!3033 = !DILocalVariable(name: "c", arg: 1, scope: !3034, file: !3022, line: 272, type: !53)
!3034 = distinct !DISubprogram(name: "c_isprint", scope: !3022, file: !3022, line: 272, type: !3023, scopeLine: 273, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3035, retainedNodes: !4)
!3035 = distinct !DICompileUnit(language: DW_LANG_C99, file: !287, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3036 = distinct !DISubprogram(name: "c_tolower", scope: !3022, file: !3022, line: 337, type: !3037, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !286, retainedNodes: !4)
!3037 = !DISubroutineType(types: !3038)
!3038 = !{!53, !53}
!3039 = !DILocalVariable(name: "c", arg: 1, scope: !3036, file: !3022, line: 337, type: !53)
!3040 = !DILocation(line: 337, column: 16, scope: !3036)
!3041 = !DILocation(line: 339, column: 11, scope: !3036)
!3042 = !DILocation(line: 339, column: 3, scope: !3036)
!3043 = !DILocation(line: 342, column: 14, scope: !3044)
!3044 = distinct !DILexicalBlock(scope: !3036, file: !3022, line: 340, column: 5)
!3045 = !DILocation(line: 342, column: 16, scope: !3044)
!3046 = !DILocation(line: 342, column: 22, scope: !3044)
!3047 = !DILocation(line: 342, column: 7, scope: !3044)
!3048 = !DILocation(line: 344, column: 14, scope: !3044)
!3049 = !DILocation(line: 344, column: 7, scope: !3044)
!3050 = !DILocation(line: 346, column: 1, scope: !3036)
!3051 = !DILocalVariable(name: "c", arg: 1, scope: !3052, file: !3022, line: 337, type: !53)
!3052 = distinct !DISubprogram(name: "c_tolower", scope: !3022, file: !3022, line: 337, type: !3037, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3053, retainedNodes: !4)
!3053 = distinct !DICompileUnit(language: DW_LANG_C99, file: !287, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3054 = distinct !DISubprogram(name: "canon_host", scope: !166, file: !166, line: 33, type: !3055, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !160, retainedNodes: !4)
!3055 = !DISubroutineType(types: !3056)
!3056 = !{!6, !49}
!3057 = !DILocalVariable(name: "host", arg: 1, scope: !3054, file: !166, line: 33, type: !49)
!3058 = !DILocation(line: 33, column: 25, scope: !3054)
!3059 = !DILocation(line: 35, column: 24, scope: !3054)
!3060 = !DILocation(line: 35, column: 10, scope: !3054)
!3061 = !DILocation(line: 35, column: 3, scope: !3054)
!3062 = !DILocalVariable(name: "host", arg: 1, scope: !165, file: !166, line: 61, type: !49)
!3063 = !DILocation(line: 61, column: 27, scope: !165)
!3064 = !DILocalVariable(name: "cherror", arg: 2, scope: !165, file: !166, line: 61, type: !149)
!3065 = !DILocation(line: 61, column: 38, scope: !165)
!3066 = !DILocalVariable(name: "retval", scope: !165, file: !166, line: 63, type: !6)
!3067 = !DILocation(line: 63, column: 9, scope: !165)
!3068 = !DILocalVariable(name: "res", scope: !165, file: !166, line: 65, type: !195)
!3069 = !DILocation(line: 65, column: 20, scope: !165)
!3070 = !DILocalVariable(name: "status", scope: !165, file: !166, line: 66, type: !53)
!3071 = !DILocation(line: 66, column: 7, scope: !165)
!3072 = !DILocation(line: 68, column: 18, scope: !165)
!3073 = !DILocation(line: 69, column: 25, scope: !165)
!3074 = !DILocation(line: 69, column: 12, scope: !165)
!3075 = !DILocation(line: 69, column: 10, scope: !165)
!3076 = !DILocation(line: 70, column: 8, scope: !3077)
!3077 = distinct !DILexicalBlock(scope: !165, file: !166, line: 70, column: 7)
!3078 = !DILocation(line: 70, column: 7, scope: !165)
!3079 = !DILocation(line: 75, column: 24, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3077, file: !166, line: 71, column: 5)
!3081 = !DILocation(line: 75, column: 29, scope: !3080)
!3082 = !DILocation(line: 75, column: 44, scope: !3080)
!3083 = !DILocation(line: 75, column: 49, scope: !3080)
!3084 = !DILocation(line: 75, column: 64, scope: !3080)
!3085 = !DILocation(line: 75, column: 16, scope: !3080)
!3086 = !DILocation(line: 75, column: 14, scope: !3080)
!3087 = !DILocation(line: 76, column: 12, scope: !3088)
!3088 = distinct !DILexicalBlock(scope: !3080, file: !166, line: 76, column: 11)
!3089 = !DILocation(line: 76, column: 19, scope: !3088)
!3090 = !DILocation(line: 76, column: 22, scope: !3088)
!3091 = !DILocation(line: 76, column: 11, scope: !3080)
!3092 = !DILocation(line: 77, column: 10, scope: !3088)
!3093 = !DILocation(line: 77, column: 18, scope: !3088)
!3094 = !DILocation(line: 77, column: 9, scope: !3088)
!3095 = !DILocation(line: 78, column: 21, scope: !3080)
!3096 = !DILocation(line: 78, column: 7, scope: !3080)
!3097 = !DILocation(line: 79, column: 5, scope: !3080)
!3098 = !DILocation(line: 80, column: 12, scope: !3099)
!3099 = distinct !DILexicalBlock(scope: !3077, file: !166, line: 80, column: 12)
!3100 = !DILocation(line: 80, column: 12, scope: !3077)
!3101 = !DILocation(line: 81, column: 16, scope: !3099)
!3102 = !DILocation(line: 81, column: 6, scope: !3099)
!3103 = !DILocation(line: 81, column: 14, scope: !3099)
!3104 = !DILocation(line: 81, column: 5, scope: !3099)
!3105 = !DILocation(line: 83, column: 10, scope: !165)
!3106 = !DILocation(line: 83, column: 3, scope: !165)
!3107 = !DILocalVariable(name: "host", arg: 1, scope: !3108, file: !166, line: 61, type: !49)
!3108 = distinct !DISubprogram(name: "canon_host_r", scope: !166, file: !166, line: 61, type: !167, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3109, retainedNodes: !4)
!3109 = distinct !DICompileUnit(language: DW_LANG_C99, file: !161, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !3110, nameTableKind: None)
!3110 = !{!3111, !3129}
!3111 = !DIGlobalVariableExpression(var: !3112, expr: !DIExpression())
!3112 = distinct !DIGlobalVariable(name: "hints", scope: !3108, file: !166, line: 64, type: !3113, isLocal: true, isDefinition: true)
!3113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "addrinfo", file: !170, line: 565, size: 384, elements: !3114)
!3114 = !{!3115, !3116, !3117, !3118, !3119, !3120, !3126, !3127}
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "ai_flags", scope: !3113, file: !170, line: 567, baseType: !53, size: 32)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "ai_family", scope: !3113, file: !170, line: 568, baseType: !53, size: 32, offset: 32)
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "ai_socktype", scope: !3113, file: !170, line: 569, baseType: !53, size: 32, offset: 64)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "ai_protocol", scope: !3113, file: !170, line: 570, baseType: !53, size: 32, offset: 96)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addrlen", scope: !3113, file: !170, line: 571, baseType: !177, size: 32, offset: 128)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "ai_addr", scope: !3113, file: !170, line: 572, baseType: !3121, size: 64, offset: 192)
!3121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3122, size: 64)
!3122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sockaddr", file: !178, line: 178, size: 128, elements: !3123)
!3123 = !{!3124, !3125}
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "sa_family", scope: !3122, file: !178, line: 180, baseType: !186, size: 16)
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "sa_data", scope: !3122, file: !178, line: 181, baseType: !190, size: 112, offset: 16)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "ai_canonname", scope: !3113, file: !170, line: 573, baseType: !6, size: 64, offset: 256)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "ai_next", scope: !3113, file: !170, line: 574, baseType: !3128, size: 64, offset: 320)
!3128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3113, size: 64)
!3129 = !DIGlobalVariableExpression(var: !3130, expr: !DIExpression())
!3130 = distinct !DIGlobalVariable(name: "last_cherror", scope: !3109, file: !166, line: 28, type: !53, isLocal: true, isDefinition: true)
!3131 = !DILocalVariable(name: "cherror", arg: 2, scope: !3108, file: !166, line: 61, type: !149)
!3132 = !DILocalVariable(name: "retval", scope: !3108, file: !166, line: 63, type: !6)
!3133 = !DILocalVariable(name: "res", scope: !3108, file: !166, line: 65, type: !3128)
!3134 = !DILocalVariable(name: "status", scope: !3108, file: !166, line: 66, type: !53)
!3135 = distinct !DISubprogram(name: "close_stdout", scope: !203, file: !203, line: 117, type: !1356, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !198, retainedNodes: !4)
!3136 = !DILocation(line: 119, column: 21, scope: !3137)
!3137 = distinct !DILexicalBlock(scope: !3135, file: !203, line: 119, column: 7)
!3138 = !DILocation(line: 119, column: 7, scope: !3137)
!3139 = !DILocation(line: 119, column: 29, scope: !3137)
!3140 = !DILocation(line: 120, column: 7, scope: !3137)
!3141 = !DILocation(line: 120, column: 12, scope: !3137)
!3142 = !DILocation(line: 120, column: 25, scope: !3137)
!3143 = !DILocation(line: 120, column: 28, scope: !3137)
!3144 = !DILocation(line: 120, column: 34, scope: !3137)
!3145 = !DILocation(line: 119, column: 7, scope: !3135)
!3146 = !DILocalVariable(name: "write_error", scope: !3147, file: !203, line: 122, type: !49)
!3147 = distinct !DILexicalBlock(scope: !3137, file: !203, line: 121, column: 5)
!3148 = !DILocation(line: 122, column: 19, scope: !3147)
!3149 = !DILocation(line: 122, column: 33, scope: !3147)
!3150 = !DILocation(line: 123, column: 11, scope: !3151)
!3151 = distinct !DILexicalBlock(scope: !3147, file: !203, line: 123, column: 11)
!3152 = !DILocation(line: 123, column: 11, scope: !3147)
!3153 = !DILocation(line: 124, column: 19, scope: !3151)
!3154 = !DILocation(line: 124, column: 52, scope: !3151)
!3155 = !DILocation(line: 124, column: 36, scope: !3151)
!3156 = !DILocation(line: 125, column: 16, scope: !3151)
!3157 = !DILocation(line: 124, column: 9, scope: !3151)
!3158 = !DILocation(line: 127, column: 19, scope: !3151)
!3159 = !DILocation(line: 127, column: 32, scope: !3151)
!3160 = !DILocation(line: 127, column: 9, scope: !3151)
!3161 = !DILocation(line: 129, column: 14, scope: !3147)
!3162 = !DILocation(line: 129, column: 7, scope: !3147)
!3163 = !DILocation(line: 134, column: 42, scope: !3164)
!3164 = distinct !DILexicalBlock(scope: !3135, file: !203, line: 134, column: 7)
!3165 = !DILocation(line: 134, column: 28, scope: !3164)
!3166 = !DILocation(line: 134, column: 50, scope: !3164)
!3167 = !DILocation(line: 134, column: 7, scope: !3135)
!3168 = !DILocation(line: 135, column: 12, scope: !3164)
!3169 = !DILocation(line: 135, column: 5, scope: !3164)
!3170 = !DILocation(line: 136, column: 1, scope: !3135)
!3171 = distinct !DISubprogram(name: "hard_locale", scope: !3172, file: !3172, line: 27, type: !3023, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !288, retainedNodes: !4)
!3172 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3173 = !DILocalVariable(name: "category", arg: 1, scope: !3171, file: !3172, line: 27, type: !53)
!3174 = !DILocation(line: 27, column: 18, scope: !3171)
!3175 = !DILocalVariable(name: "locale", scope: !3171, file: !3172, line: 29, type: !1468)
!3176 = !DILocation(line: 29, column: 8, scope: !3171)
!3177 = !DILocation(line: 31, column: 25, scope: !3178)
!3178 = distinct !DILexicalBlock(scope: !3171, file: !3172, line: 31, column: 7)
!3179 = !DILocation(line: 31, column: 35, scope: !3178)
!3180 = !DILocation(line: 31, column: 7, scope: !3178)
!3181 = !DILocation(line: 31, column: 7, scope: !3171)
!3182 = !DILocation(line: 32, column: 5, scope: !3178)
!3183 = !DILocation(line: 34, column: 20, scope: !3171)
!3184 = !DILocation(line: 34, column: 12, scope: !3171)
!3185 = !DILocation(line: 34, column: 33, scope: !3171)
!3186 = !DILocation(line: 34, column: 49, scope: !3171)
!3187 = !DILocation(line: 34, column: 41, scope: !3171)
!3188 = !DILocation(line: 34, column: 66, scope: !3171)
!3189 = !DILocation(line: 34, column: 38, scope: !3171)
!3190 = !DILocation(line: 34, column: 10, scope: !3171)
!3191 = !DILocation(line: 34, column: 3, scope: !3171)
!3192 = !DILocation(line: 35, column: 1, scope: !3171)
!3193 = !DILocalVariable(name: "category", arg: 1, scope: !3194, file: !3172, line: 27, type: !53)
!3194 = distinct !DISubprogram(name: "hard_locale", scope: !3172, file: !3172, line: 27, type: !3023, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3195, retainedNodes: !4)
!3195 = distinct !DICompileUnit(language: DW_LANG_C99, file: !289, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3196 = !DILocalVariable(name: "locale", scope: !3194, file: !3172, line: 29, type: !1468)
!3197 = distinct !DISubprogram(name: "imaxtostr", scope: !3198, file: !3198, line: 36, type: !3199, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !290, retainedNodes: !4)
!3198 = !DIFile(filename: "./lib/anytostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3199 = !DISubroutineType(types: !3200)
!3200 = !{!6, !293, !6}
!3201 = !DILocalVariable(name: "i", arg: 1, scope: !3197, file: !3198, line: 36, type: !293)
!3202 = !DILocation(line: 36, column: 19, scope: !3197)
!3203 = !DILocalVariable(name: "buf", arg: 2, scope: !3197, file: !3198, line: 36, type: !6)
!3204 = !DILocation(line: 36, column: 28, scope: !3197)
!3205 = !DILocalVariable(name: "p", scope: !3197, file: !3198, line: 38, type: !6)
!3206 = !DILocation(line: 38, column: 9, scope: !3197)
!3207 = !DILocation(line: 38, column: 13, scope: !3197)
!3208 = !DILocation(line: 38, column: 17, scope: !3197)
!3209 = !DILocation(line: 39, column: 4, scope: !3197)
!3210 = !DILocation(line: 39, column: 6, scope: !3197)
!3211 = !DILocation(line: 41, column: 7, scope: !3212)
!3212 = distinct !DILexicalBlock(scope: !3197, file: !3198, line: 41, column: 7)
!3213 = !DILocation(line: 41, column: 9, scope: !3212)
!3214 = !DILocation(line: 41, column: 7, scope: !3197)
!3215 = !DILocation(line: 43, column: 7, scope: !3216)
!3216 = distinct !DILexicalBlock(scope: !3212, file: !3198, line: 42, column: 5)
!3217 = !DILocation(line: 44, column: 22, scope: !3216)
!3218 = !DILocation(line: 44, column: 24, scope: !3216)
!3219 = !DILocation(line: 44, column: 20, scope: !3216)
!3220 = !DILocation(line: 44, column: 16, scope: !3216)
!3221 = !DILocation(line: 44, column: 10, scope: !3216)
!3222 = !DILocation(line: 44, column: 14, scope: !3216)
!3223 = !DILocation(line: 44, column: 9, scope: !3216)
!3224 = !DILocation(line: 45, column: 17, scope: !3216)
!3225 = !DILocation(line: 45, column: 24, scope: !3216)
!3226 = distinct !{!3226, !3215, !3227}
!3227 = !DILocation(line: 45, column: 28, scope: !3216)
!3228 = !DILocation(line: 47, column: 8, scope: !3216)
!3229 = !DILocation(line: 47, column: 12, scope: !3216)
!3230 = !DILocation(line: 48, column: 5, scope: !3216)
!3231 = !DILocation(line: 51, column: 7, scope: !3232)
!3232 = distinct !DILexicalBlock(scope: !3212, file: !3198, line: 50, column: 5)
!3233 = !DILocation(line: 52, column: 22, scope: !3232)
!3234 = !DILocation(line: 52, column: 24, scope: !3232)
!3235 = !DILocation(line: 52, column: 20, scope: !3232)
!3236 = !DILocation(line: 52, column: 16, scope: !3232)
!3237 = !DILocation(line: 52, column: 10, scope: !3232)
!3238 = !DILocation(line: 52, column: 14, scope: !3232)
!3239 = !DILocation(line: 52, column: 9, scope: !3232)
!3240 = !DILocation(line: 53, column: 17, scope: !3232)
!3241 = !DILocation(line: 53, column: 24, scope: !3232)
!3242 = distinct !{!3242, !3231, !3243}
!3243 = !DILocation(line: 53, column: 28, scope: !3232)
!3244 = !DILocation(line: 56, column: 10, scope: !3197)
!3245 = !DILocation(line: 56, column: 3, scope: !3197)
!3246 = !DILocalVariable(name: "i", arg: 1, scope: !3247, file: !3198, line: 36, type: !293)
!3247 = distinct !DISubprogram(name: "imaxtostr", scope: !3198, file: !3198, line: 36, type: !3199, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3248, retainedNodes: !4)
!3248 = distinct !DICompileUnit(language: DW_LANG_C99, file: !291, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !292, nameTableKind: None)
!3249 = !DILocalVariable(name: "buf", arg: 2, scope: !3247, file: !3198, line: 36, type: !6)
!3250 = !DILocalVariable(name: "p", scope: !3247, file: !3198, line: 38, type: !6)
!3251 = distinct !DISubprogram(name: "set_program_name", scope: !217, file: !217, line: 39, type: !467, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!3252 = !DILocalVariable(name: "argv0", arg: 1, scope: !3251, file: !217, line: 39, type: !49)
!3253 = !DILocation(line: 39, column: 31, scope: !3251)
!3254 = !DILocalVariable(name: "slash", scope: !3251, file: !217, line: 46, type: !49)
!3255 = !DILocation(line: 46, column: 15, scope: !3251)
!3256 = !DILocalVariable(name: "base", scope: !3251, file: !217, line: 47, type: !49)
!3257 = !DILocation(line: 47, column: 15, scope: !3251)
!3258 = !DILocation(line: 51, column: 7, scope: !3259)
!3259 = distinct !DILexicalBlock(scope: !3251, file: !217, line: 51, column: 7)
!3260 = !DILocation(line: 51, column: 13, scope: !3259)
!3261 = !DILocation(line: 51, column: 7, scope: !3251)
!3262 = !DILocation(line: 55, column: 14, scope: !3263)
!3263 = distinct !DILexicalBlock(scope: !3259, file: !217, line: 52, column: 5)
!3264 = !DILocation(line: 54, column: 7, scope: !3263)
!3265 = !DILocation(line: 56, column: 7, scope: !3263)
!3266 = !DILocation(line: 59, column: 20, scope: !3251)
!3267 = !DILocation(line: 59, column: 11, scope: !3251)
!3268 = !DILocation(line: 59, column: 9, scope: !3251)
!3269 = !DILocation(line: 60, column: 11, scope: !3251)
!3270 = !DILocation(line: 60, column: 17, scope: !3251)
!3271 = !DILocation(line: 60, column: 27, scope: !3251)
!3272 = !DILocation(line: 60, column: 33, scope: !3251)
!3273 = !DILocation(line: 60, column: 39, scope: !3251)
!3274 = !DILocation(line: 60, column: 8, scope: !3251)
!3275 = !DILocation(line: 61, column: 7, scope: !3276)
!3276 = distinct !DILexicalBlock(scope: !3251, file: !217, line: 61, column: 7)
!3277 = !DILocation(line: 61, column: 14, scope: !3276)
!3278 = !DILocation(line: 61, column: 12, scope: !3276)
!3279 = !DILocation(line: 61, column: 20, scope: !3276)
!3280 = !DILocation(line: 61, column: 25, scope: !3276)
!3281 = !DILocation(line: 61, column: 37, scope: !3276)
!3282 = !DILocation(line: 61, column: 42, scope: !3276)
!3283 = !DILocation(line: 61, column: 28, scope: !3276)
!3284 = !DILocation(line: 61, column: 61, scope: !3276)
!3285 = !DILocation(line: 61, column: 7, scope: !3251)
!3286 = !DILocation(line: 63, column: 15, scope: !3287)
!3287 = distinct !DILexicalBlock(scope: !3276, file: !217, line: 62, column: 5)
!3288 = !DILocation(line: 63, column: 13, scope: !3287)
!3289 = !DILocation(line: 64, column: 20, scope: !3290)
!3290 = distinct !DILexicalBlock(scope: !3287, file: !217, line: 64, column: 11)
!3291 = !DILocation(line: 64, column: 11, scope: !3290)
!3292 = !DILocation(line: 64, column: 36, scope: !3290)
!3293 = !DILocation(line: 64, column: 11, scope: !3287)
!3294 = !DILocation(line: 66, column: 19, scope: !3295)
!3295 = distinct !DILexicalBlock(scope: !3290, file: !217, line: 65, column: 9)
!3296 = !DILocation(line: 66, column: 24, scope: !3295)
!3297 = !DILocation(line: 66, column: 17, scope: !3295)
!3298 = !DILocation(line: 70, column: 52, scope: !3295)
!3299 = !DILocation(line: 70, column: 41, scope: !3295)
!3300 = !DILocation(line: 72, column: 9, scope: !3295)
!3301 = !DILocation(line: 73, column: 5, scope: !3287)
!3302 = !DILocation(line: 84, column: 18, scope: !3251)
!3303 = !DILocation(line: 84, column: 16, scope: !3251)
!3304 = !DILocation(line: 90, column: 38, scope: !3251)
!3305 = !DILocation(line: 90, column: 27, scope: !3251)
!3306 = !DILocation(line: 92, column: 1, scope: !3251)
!3307 = distinct !DISubprogram(name: "set_char_quoting", scope: !241, file: !241, line: 152, type: !3308, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3308 = !DISubroutineType(types: !3309)
!3309 = !{!53, !3310, !7, !53}
!3310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !254, size: 64)
!3311 = !DILocalVariable(name: "o", arg: 1, scope: !3307, file: !241, line: 152, type: !3310)
!3312 = !DILocation(line: 152, column: 43, scope: !3307)
!3313 = !DILocalVariable(name: "c", arg: 2, scope: !3307, file: !241, line: 152, type: !7)
!3314 = !DILocation(line: 152, column: 51, scope: !3307)
!3315 = !DILocalVariable(name: "i", arg: 3, scope: !3307, file: !241, line: 152, type: !53)
!3316 = !DILocation(line: 152, column: 58, scope: !3307)
!3317 = !DILocalVariable(name: "uc", scope: !3307, file: !241, line: 154, type: !317)
!3318 = !DILocation(line: 154, column: 17, scope: !3307)
!3319 = !DILocation(line: 154, column: 22, scope: !3307)
!3320 = !DILocalVariable(name: "p", scope: !3307, file: !241, line: 155, type: !3321)
!3321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !180, size: 64)
!3322 = !DILocation(line: 155, column: 17, scope: !3307)
!3323 = !DILocation(line: 156, column: 6, scope: !3307)
!3324 = !DILocation(line: 156, column: 10, scope: !3307)
!3325 = !DILocation(line: 156, column: 41, scope: !3307)
!3326 = !DILocation(line: 156, column: 5, scope: !3307)
!3327 = !DILocation(line: 156, column: 59, scope: !3307)
!3328 = !DILocation(line: 156, column: 62, scope: !3307)
!3329 = !DILocation(line: 156, column: 57, scope: !3307)
!3330 = !DILocalVariable(name: "shift", scope: !3307, file: !241, line: 157, type: !53)
!3331 = !DILocation(line: 157, column: 7, scope: !3307)
!3332 = !DILocation(line: 157, column: 15, scope: !3307)
!3333 = !DILocation(line: 157, column: 18, scope: !3307)
!3334 = !DILocalVariable(name: "r", scope: !3307, file: !241, line: 158, type: !53)
!3335 = !DILocation(line: 158, column: 7, scope: !3307)
!3336 = !DILocation(line: 158, column: 13, scope: !3307)
!3337 = !DILocation(line: 158, column: 12, scope: !3307)
!3338 = !DILocation(line: 158, column: 18, scope: !3307)
!3339 = !DILocation(line: 158, column: 15, scope: !3307)
!3340 = !DILocation(line: 158, column: 25, scope: !3307)
!3341 = !DILocation(line: 159, column: 11, scope: !3307)
!3342 = !DILocation(line: 159, column: 13, scope: !3307)
!3343 = !DILocation(line: 159, column: 20, scope: !3307)
!3344 = !DILocation(line: 159, column: 18, scope: !3307)
!3345 = !DILocation(line: 159, column: 26, scope: !3307)
!3346 = !DILocation(line: 159, column: 23, scope: !3307)
!3347 = !DILocation(line: 159, column: 4, scope: !3307)
!3348 = !DILocation(line: 159, column: 6, scope: !3307)
!3349 = !DILocation(line: 160, column: 10, scope: !3307)
!3350 = !DILocation(line: 160, column: 3, scope: !3307)
!3351 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !241, file: !241, line: 982, type: !3352, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3352 = !DISubroutineType(types: !3353)
!3353 = !{!6, !49, !110, !7}
!3354 = !DILocalVariable(name: "arg", arg: 1, scope: !3351, file: !241, line: 982, type: !49)
!3355 = !DILocation(line: 982, column: 32, scope: !3351)
!3356 = !DILocalVariable(name: "argsize", arg: 2, scope: !3351, file: !241, line: 982, type: !110)
!3357 = !DILocation(line: 982, column: 44, scope: !3351)
!3358 = !DILocalVariable(name: "ch", arg: 3, scope: !3351, file: !241, line: 982, type: !7)
!3359 = !DILocation(line: 982, column: 58, scope: !3351)
!3360 = !DILocalVariable(name: "options", scope: !3351, file: !241, line: 984, type: !254)
!3361 = !DILocation(line: 984, column: 26, scope: !3351)
!3362 = !DILocation(line: 985, column: 13, scope: !3351)
!3363 = !DILocation(line: 986, column: 31, scope: !3351)
!3364 = !DILocation(line: 986, column: 3, scope: !3351)
!3365 = !DILocation(line: 987, column: 33, scope: !3351)
!3366 = !DILocation(line: 987, column: 38, scope: !3351)
!3367 = !DILocation(line: 987, column: 10, scope: !3351)
!3368 = !DILocation(line: 987, column: 3, scope: !3351)
!3369 = distinct !DISubprogram(name: "quotearg_n_options", scope: !241, file: !241, line: 877, type: !3370, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3370 = !DISubroutineType(types: !3371)
!3371 = !{!6, !53, !49, !110, !3372}
!3372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3373, size: 64)
!3373 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !254)
!3374 = !DILocalVariable(name: "n", arg: 1, scope: !3369, file: !241, line: 877, type: !53)
!3375 = !DILocation(line: 877, column: 25, scope: !3369)
!3376 = !DILocalVariable(name: "arg", arg: 2, scope: !3369, file: !241, line: 877, type: !49)
!3377 = !DILocation(line: 877, column: 40, scope: !3369)
!3378 = !DILocalVariable(name: "argsize", arg: 3, scope: !3369, file: !241, line: 877, type: !110)
!3379 = !DILocation(line: 877, column: 52, scope: !3369)
!3380 = !DILocalVariable(name: "options", arg: 4, scope: !3369, file: !241, line: 878, type: !3372)
!3381 = !DILocation(line: 878, column: 51, scope: !3369)
!3382 = !DILocalVariable(name: "e", scope: !3369, file: !241, line: 880, type: !53)
!3383 = !DILocation(line: 880, column: 7, scope: !3369)
!3384 = !DILocation(line: 880, column: 11, scope: !3369)
!3385 = !DILocalVariable(name: "sv", scope: !3369, file: !241, line: 882, type: !268)
!3386 = !DILocation(line: 882, column: 19, scope: !3369)
!3387 = !DILocation(line: 882, column: 24, scope: !3369)
!3388 = !DILocation(line: 884, column: 7, scope: !3389)
!3389 = distinct !DILexicalBlock(scope: !3369, file: !241, line: 884, column: 7)
!3390 = !DILocation(line: 884, column: 9, scope: !3389)
!3391 = !DILocation(line: 884, column: 7, scope: !3369)
!3392 = !DILocation(line: 885, column: 5, scope: !3389)
!3393 = !DILocation(line: 887, column: 7, scope: !3394)
!3394 = distinct !DILexicalBlock(scope: !3369, file: !241, line: 887, column: 7)
!3395 = !DILocation(line: 887, column: 17, scope: !3394)
!3396 = !DILocation(line: 887, column: 14, scope: !3394)
!3397 = !DILocation(line: 887, column: 7, scope: !3369)
!3398 = !DILocalVariable(name: "preallocated", scope: !3399, file: !241, line: 889, type: !18)
!3399 = distinct !DILexicalBlock(scope: !3394, file: !241, line: 888, column: 5)
!3400 = !DILocation(line: 889, column: 12, scope: !3399)
!3401 = !DILocation(line: 889, column: 28, scope: !3399)
!3402 = !DILocation(line: 889, column: 31, scope: !3399)
!3403 = !DILocalVariable(name: "nmax", scope: !3399, file: !241, line: 890, type: !53)
!3404 = !DILocation(line: 890, column: 11, scope: !3399)
!3405 = !DILocation(line: 892, column: 11, scope: !3406)
!3406 = distinct !DILexicalBlock(scope: !3399, file: !241, line: 892, column: 11)
!3407 = !DILocation(line: 892, column: 18, scope: !3406)
!3408 = !DILocation(line: 892, column: 16, scope: !3406)
!3409 = !DILocation(line: 892, column: 11, scope: !3399)
!3410 = !DILocation(line: 893, column: 9, scope: !3406)
!3411 = !DILocation(line: 895, column: 32, scope: !3399)
!3412 = !DILocation(line: 895, column: 54, scope: !3399)
!3413 = !DILocation(line: 895, column: 59, scope: !3399)
!3414 = !DILocation(line: 895, column: 61, scope: !3399)
!3415 = !DILocation(line: 895, column: 58, scope: !3399)
!3416 = !DILocation(line: 895, column: 66, scope: !3399)
!3417 = !DILocation(line: 895, column: 22, scope: !3399)
!3418 = !DILocation(line: 895, column: 20, scope: !3399)
!3419 = !DILocation(line: 895, column: 15, scope: !3399)
!3420 = !DILocation(line: 896, column: 11, scope: !3421)
!3421 = distinct !DILexicalBlock(scope: !3399, file: !241, line: 896, column: 11)
!3422 = !DILocation(line: 896, column: 11, scope: !3399)
!3423 = !DILocation(line: 897, column: 10, scope: !3421)
!3424 = !DILocation(line: 897, column: 15, scope: !3421)
!3425 = !DILocation(line: 897, column: 9, scope: !3421)
!3426 = !DILocation(line: 898, column: 15, scope: !3399)
!3427 = !DILocation(line: 898, column: 20, scope: !3399)
!3428 = !DILocation(line: 898, column: 18, scope: !3399)
!3429 = !DILocation(line: 898, column: 7, scope: !3399)
!3430 = !DILocation(line: 898, column: 32, scope: !3399)
!3431 = !DILocation(line: 898, column: 34, scope: !3399)
!3432 = !DILocation(line: 898, column: 40, scope: !3399)
!3433 = !DILocation(line: 898, column: 38, scope: !3399)
!3434 = !DILocation(line: 898, column: 31, scope: !3399)
!3435 = !DILocation(line: 898, column: 48, scope: !3399)
!3436 = !DILocation(line: 899, column: 16, scope: !3399)
!3437 = !DILocation(line: 899, column: 18, scope: !3399)
!3438 = !DILocation(line: 899, column: 14, scope: !3399)
!3439 = !DILocation(line: 900, column: 5, scope: !3399)
!3440 = !DILocalVariable(name: "size", scope: !3441, file: !241, line: 903, type: !110)
!3441 = distinct !DILexicalBlock(scope: !3369, file: !241, line: 902, column: 3)
!3442 = !DILocation(line: 903, column: 12, scope: !3441)
!3443 = !DILocation(line: 903, column: 19, scope: !3441)
!3444 = !DILocation(line: 903, column: 22, scope: !3441)
!3445 = !DILocation(line: 903, column: 25, scope: !3441)
!3446 = !DILocalVariable(name: "val", scope: !3441, file: !241, line: 904, type: !6)
!3447 = !DILocation(line: 904, column: 11, scope: !3441)
!3448 = !DILocation(line: 904, column: 17, scope: !3441)
!3449 = !DILocation(line: 904, column: 20, scope: !3441)
!3450 = !DILocation(line: 904, column: 23, scope: !3441)
!3451 = !DILocalVariable(name: "flags", scope: !3441, file: !241, line: 906, type: !53)
!3452 = !DILocation(line: 906, column: 9, scope: !3441)
!3453 = !DILocation(line: 906, column: 17, scope: !3441)
!3454 = !DILocation(line: 906, column: 26, scope: !3441)
!3455 = !DILocation(line: 906, column: 32, scope: !3441)
!3456 = !DILocalVariable(name: "qsize", scope: !3441, file: !241, line: 907, type: !110)
!3457 = !DILocation(line: 907, column: 12, scope: !3441)
!3458 = !DILocation(line: 907, column: 46, scope: !3441)
!3459 = !DILocation(line: 907, column: 51, scope: !3441)
!3460 = !DILocation(line: 907, column: 57, scope: !3441)
!3461 = !DILocation(line: 907, column: 62, scope: !3441)
!3462 = !DILocation(line: 908, column: 46, scope: !3441)
!3463 = !DILocation(line: 908, column: 55, scope: !3441)
!3464 = !DILocation(line: 908, column: 62, scope: !3441)
!3465 = !DILocation(line: 909, column: 46, scope: !3441)
!3466 = !DILocation(line: 909, column: 55, scope: !3441)
!3467 = !DILocation(line: 910, column: 46, scope: !3441)
!3468 = !DILocation(line: 910, column: 55, scope: !3441)
!3469 = !DILocation(line: 911, column: 46, scope: !3441)
!3470 = !DILocation(line: 911, column: 55, scope: !3441)
!3471 = !DILocation(line: 907, column: 20, scope: !3441)
!3472 = !DILocation(line: 913, column: 9, scope: !3473)
!3473 = distinct !DILexicalBlock(scope: !3441, file: !241, line: 913, column: 9)
!3474 = !DILocation(line: 913, column: 17, scope: !3473)
!3475 = !DILocation(line: 913, column: 14, scope: !3473)
!3476 = !DILocation(line: 913, column: 9, scope: !3441)
!3477 = !DILocation(line: 915, column: 29, scope: !3478)
!3478 = distinct !DILexicalBlock(scope: !3473, file: !241, line: 914, column: 7)
!3479 = !DILocation(line: 915, column: 35, scope: !3478)
!3480 = !DILocation(line: 915, column: 27, scope: !3478)
!3481 = !DILocation(line: 915, column: 9, scope: !3478)
!3482 = !DILocation(line: 915, column: 12, scope: !3478)
!3483 = !DILocation(line: 915, column: 15, scope: !3478)
!3484 = !DILocation(line: 915, column: 20, scope: !3478)
!3485 = !DILocation(line: 916, column: 13, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3478, file: !241, line: 916, column: 13)
!3487 = !DILocation(line: 916, column: 17, scope: !3486)
!3488 = !DILocation(line: 916, column: 13, scope: !3478)
!3489 = !DILocation(line: 917, column: 17, scope: !3486)
!3490 = !DILocation(line: 917, column: 11, scope: !3486)
!3491 = !DILocation(line: 918, column: 39, scope: !3478)
!3492 = !DILocation(line: 918, column: 27, scope: !3478)
!3493 = !DILocation(line: 918, column: 25, scope: !3478)
!3494 = !DILocation(line: 918, column: 9, scope: !3478)
!3495 = !DILocation(line: 918, column: 12, scope: !3478)
!3496 = !DILocation(line: 918, column: 15, scope: !3478)
!3497 = !DILocation(line: 918, column: 19, scope: !3478)
!3498 = !DILocation(line: 919, column: 35, scope: !3478)
!3499 = !DILocation(line: 919, column: 40, scope: !3478)
!3500 = !DILocation(line: 919, column: 46, scope: !3478)
!3501 = !DILocation(line: 919, column: 51, scope: !3478)
!3502 = !DILocation(line: 919, column: 60, scope: !3478)
!3503 = !DILocation(line: 919, column: 69, scope: !3478)
!3504 = !DILocation(line: 920, column: 35, scope: !3478)
!3505 = !DILocation(line: 920, column: 42, scope: !3478)
!3506 = !DILocation(line: 920, column: 51, scope: !3478)
!3507 = !DILocation(line: 921, column: 35, scope: !3478)
!3508 = !DILocation(line: 921, column: 44, scope: !3478)
!3509 = !DILocation(line: 922, column: 35, scope: !3478)
!3510 = !DILocation(line: 922, column: 44, scope: !3478)
!3511 = !DILocation(line: 919, column: 9, scope: !3478)
!3512 = !DILocation(line: 923, column: 7, scope: !3478)
!3513 = !DILocation(line: 925, column: 13, scope: !3441)
!3514 = !DILocation(line: 925, column: 5, scope: !3441)
!3515 = !DILocation(line: 925, column: 11, scope: !3441)
!3516 = !DILocation(line: 926, column: 12, scope: !3441)
!3517 = !DILocation(line: 926, column: 5, scope: !3441)
!3518 = !DILocalVariable(name: "n", arg: 1, scope: !3519, file: !241, line: 877, type: !53)
!3519 = distinct !DISubprogram(name: "quotearg_n_options", scope: !241, file: !241, line: 877, type: !3520, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3531, retainedNodes: !4)
!3520 = !DISubroutineType(types: !3521)
!3521 = !{!6, !53, !49, !110, !3522}
!3522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3523, size: 64)
!3523 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3524)
!3524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !3525)
!3525 = !{!3526, !3527, !3528, !3529, !3530}
!3526 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3524, file: !241, line: 68, baseType: !223, size: 32)
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3524, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3524, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!3529 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3524, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3524, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!3531 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !3532, nameTableKind: None)
!3532 = !{!3533, !3535, !3537, !3539, !3541, !3543, !3550, !3552}
!3533 = !DIGlobalVariableExpression(var: !3534, expr: !DIExpression())
!3534 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3531, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!3535 = !DIGlobalVariableExpression(var: !3536, expr: !DIExpression())
!3536 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3531, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!3537 = !DIGlobalVariableExpression(var: !3538, expr: !DIExpression())
!3538 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3531, file: !241, line: 1052, type: !3524, isLocal: false, isDefinition: true)
!3539 = !DIGlobalVariableExpression(var: !3540, expr: !DIExpression())
!3540 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3531, file: !241, line: 116, type: !3524, isLocal: true, isDefinition: true)
!3541 = !DIGlobalVariableExpression(var: !3542, expr: !DIExpression())
!3542 = distinct !DIGlobalVariable(name: "slot0", scope: !3531, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!3543 = !DIGlobalVariableExpression(var: !3544, expr: !DIExpression())
!3544 = distinct !DIGlobalVariable(name: "slotvec", scope: !3531, file: !241, line: 845, type: !3545, isLocal: true, isDefinition: true)
!3545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3546, size: 64)
!3546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !3547)
!3547 = !{!3548, !3549}
!3548 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3546, file: !241, line: 836, baseType: !110, size: 64)
!3549 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3546, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!3550 = !DIGlobalVariableExpression(var: !3551, expr: !DIExpression())
!3551 = distinct !DIGlobalVariable(name: "nslots", scope: !3531, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!3552 = !DIGlobalVariableExpression(var: !3553, expr: !DIExpression())
!3553 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3531, file: !241, line: 844, type: !3546, isLocal: true, isDefinition: true)
!3554 = !DILocalVariable(name: "arg", arg: 2, scope: !3519, file: !241, line: 877, type: !49)
!3555 = !DILocalVariable(name: "argsize", arg: 3, scope: !3519, file: !241, line: 877, type: !110)
!3556 = !DILocalVariable(name: "options", arg: 4, scope: !3519, file: !241, line: 878, type: !3522)
!3557 = !DILocalVariable(name: "e", scope: !3519, file: !241, line: 880, type: !53)
!3558 = !DILocalVariable(name: "sv", scope: !3519, file: !241, line: 882, type: !3545)
!3559 = !DILocalVariable(name: "nmax", scope: !3560, file: !241, line: 890, type: !53)
!3560 = distinct !DILexicalBlock(scope: !3561, file: !241, line: 888, column: 5)
!3561 = distinct !DILexicalBlock(scope: !3562, file: !241, line: 887, column: 7)
!3562 = distinct !DISubprogram(name: "quotearg_n_options", scope: !241, file: !241, line: 877, type: !3563, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3574, retainedNodes: !4)
!3563 = !DISubroutineType(types: !3564)
!3564 = !{!6, !53, !49, !110, !3565}
!3565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3566, size: 64)
!3566 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3567)
!3567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !3568)
!3568 = !{!3569, !3570, !3571, !3572, !3573}
!3569 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3567, file: !241, line: 68, baseType: !223, size: 32)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3567, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!3571 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3567, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!3572 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3567, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3567, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!3574 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !3575, nameTableKind: None)
!3575 = !{!3576, !3578, !3580, !3582, !3584, !3586, !3593, !3595}
!3576 = !DIGlobalVariableExpression(var: !3577, expr: !DIExpression())
!3577 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3574, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!3578 = !DIGlobalVariableExpression(var: !3579, expr: !DIExpression())
!3579 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3574, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!3580 = !DIGlobalVariableExpression(var: !3581, expr: !DIExpression())
!3581 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3574, file: !241, line: 1052, type: !3567, isLocal: false, isDefinition: true)
!3582 = !DIGlobalVariableExpression(var: !3583, expr: !DIExpression())
!3583 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3574, file: !241, line: 116, type: !3567, isLocal: true, isDefinition: true)
!3584 = !DIGlobalVariableExpression(var: !3585, expr: !DIExpression())
!3585 = distinct !DIGlobalVariable(name: "slot0", scope: !3574, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!3586 = !DIGlobalVariableExpression(var: !3587, expr: !DIExpression())
!3587 = distinct !DIGlobalVariable(name: "slotvec", scope: !3574, file: !241, line: 845, type: !3588, isLocal: true, isDefinition: true)
!3588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3589, size: 64)
!3589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !3590)
!3590 = !{!3591, !3592}
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3589, file: !241, line: 836, baseType: !110, size: 64)
!3592 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3589, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!3593 = !DIGlobalVariableExpression(var: !3594, expr: !DIExpression())
!3594 = distinct !DIGlobalVariable(name: "nslots", scope: !3574, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!3595 = !DIGlobalVariableExpression(var: !3596, expr: !DIExpression())
!3596 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3574, file: !241, line: 844, type: !3589, isLocal: true, isDefinition: true)
!3597 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !241, file: !241, line: 256, type: !3598, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3598 = !DISubroutineType(types: !3599)
!3599 = !{!110, !6, !110, !49, !110, !223, !53, !3600, !49, !49}
!3600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3601, size: 64)
!3601 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !180)
!3602 = !DILocalVariable(name: "buffer", arg: 1, scope: !3597, file: !241, line: 256, type: !6)
!3603 = !DILocation(line: 256, column: 33, scope: !3597)
!3604 = !DILocalVariable(name: "buffersize", arg: 2, scope: !3597, file: !241, line: 256, type: !110)
!3605 = !DILocation(line: 256, column: 48, scope: !3597)
!3606 = !DILocalVariable(name: "arg", arg: 3, scope: !3597, file: !241, line: 257, type: !49)
!3607 = !DILocation(line: 257, column: 39, scope: !3597)
!3608 = !DILocalVariable(name: "argsize", arg: 4, scope: !3597, file: !241, line: 257, type: !110)
!3609 = !DILocation(line: 257, column: 51, scope: !3597)
!3610 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !3597, file: !241, line: 258, type: !223)
!3611 = !DILocation(line: 258, column: 46, scope: !3597)
!3612 = !DILocalVariable(name: "flags", arg: 6, scope: !3597, file: !241, line: 258, type: !53)
!3613 = !DILocation(line: 258, column: 65, scope: !3597)
!3614 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !3597, file: !241, line: 259, type: !3600)
!3615 = !DILocation(line: 259, column: 47, scope: !3597)
!3616 = !DILocalVariable(name: "left_quote", arg: 8, scope: !3597, file: !241, line: 260, type: !49)
!3617 = !DILocation(line: 260, column: 39, scope: !3597)
!3618 = !DILocalVariable(name: "right_quote", arg: 9, scope: !3597, file: !241, line: 261, type: !49)
!3619 = !DILocation(line: 261, column: 39, scope: !3597)
!3620 = !DILocalVariable(name: "i", scope: !3597, file: !241, line: 263, type: !110)
!3621 = !DILocation(line: 263, column: 10, scope: !3597)
!3622 = !DILocalVariable(name: "len", scope: !3597, file: !241, line: 264, type: !110)
!3623 = !DILocation(line: 264, column: 10, scope: !3597)
!3624 = !DILocalVariable(name: "orig_buffersize", scope: !3597, file: !241, line: 265, type: !110)
!3625 = !DILocation(line: 265, column: 10, scope: !3597)
!3626 = !DILocalVariable(name: "quote_string", scope: !3597, file: !241, line: 266, type: !49)
!3627 = !DILocation(line: 266, column: 15, scope: !3597)
!3628 = !DILocalVariable(name: "quote_string_len", scope: !3597, file: !241, line: 267, type: !110)
!3629 = !DILocation(line: 267, column: 10, scope: !3597)
!3630 = !DILocalVariable(name: "backslash_escapes", scope: !3597, file: !241, line: 268, type: !18)
!3631 = !DILocation(line: 268, column: 8, scope: !3597)
!3632 = !DILocalVariable(name: "unibyte_locale", scope: !3597, file: !241, line: 269, type: !18)
!3633 = !DILocation(line: 269, column: 8, scope: !3597)
!3634 = !DILocation(line: 269, column: 25, scope: !3597)
!3635 = !DILocation(line: 269, column: 36, scope: !3597)
!3636 = !DILocalVariable(name: "elide_outer_quotes", scope: !3597, file: !241, line: 270, type: !18)
!3637 = !DILocation(line: 270, column: 8, scope: !3597)
!3638 = !DILocation(line: 270, column: 30, scope: !3597)
!3639 = !DILocation(line: 270, column: 36, scope: !3597)
!3640 = !DILocation(line: 270, column: 61, scope: !3597)
!3641 = !DILocalVariable(name: "pending_shell_escape_end", scope: !3597, file: !241, line: 271, type: !18)
!3642 = !DILocation(line: 271, column: 8, scope: !3597)
!3643 = !DILocalVariable(name: "encountered_single_quote", scope: !3597, file: !241, line: 272, type: !18)
!3644 = !DILocation(line: 272, column: 8, scope: !3597)
!3645 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !3597, file: !241, line: 273, type: !18)
!3646 = !DILocation(line: 273, column: 8, scope: !3597)
!3647 = !DILocation(line: 273, column: 3, scope: !3597)
!3648 = !DILabel(scope: !3597, name: "process_input", file: !241, line: 314)
!3649 = !DILocation(line: 314, column: 2, scope: !3597)
!3650 = !DILocation(line: 316, column: 11, scope: !3597)
!3651 = !DILocation(line: 316, column: 3, scope: !3597)
!3652 = !DILocation(line: 319, column: 21, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3597, file: !241, line: 317, column: 5)
!3654 = !DILocation(line: 320, column: 26, scope: !3653)
!3655 = !DILocation(line: 321, column: 7, scope: !3653)
!3656 = !DILocation(line: 323, column: 12, scope: !3657)
!3657 = distinct !DILexicalBlock(scope: !3653, file: !241, line: 323, column: 11)
!3658 = !DILocation(line: 323, column: 11, scope: !3653)
!3659 = !DILocation(line: 324, column: 9, scope: !3657)
!3660 = !DILocation(line: 324, column: 9, scope: !3661)
!3661 = distinct !DILexicalBlock(scope: !3662, file: !241, line: 324, column: 9)
!3662 = distinct !DILexicalBlock(scope: !3657, file: !241, line: 324, column: 9)
!3663 = !DILocation(line: 324, column: 9, scope: !3662)
!3664 = !DILocation(line: 325, column: 25, scope: !3653)
!3665 = !DILocation(line: 326, column: 20, scope: !3653)
!3666 = !DILocation(line: 327, column: 24, scope: !3653)
!3667 = !DILocation(line: 328, column: 7, scope: !3653)
!3668 = !DILocation(line: 331, column: 25, scope: !3653)
!3669 = !DILocation(line: 332, column: 26, scope: !3653)
!3670 = !DILocation(line: 333, column: 7, scope: !3653)
!3671 = !DILocation(line: 339, column: 13, scope: !3672)
!3672 = distinct !DILexicalBlock(scope: !3673, file: !241, line: 339, column: 13)
!3673 = distinct !DILexicalBlock(scope: !3653, file: !241, line: 338, column: 7)
!3674 = !DILocation(line: 339, column: 27, scope: !3672)
!3675 = !DILocation(line: 339, column: 13, scope: !3673)
!3676 = !DILocation(line: 362, column: 50, scope: !3677)
!3677 = distinct !DILexicalBlock(scope: !3672, file: !241, line: 340, column: 11)
!3678 = !DILocation(line: 362, column: 26, scope: !3677)
!3679 = !DILocation(line: 362, column: 24, scope: !3677)
!3680 = !DILocation(line: 363, column: 51, scope: !3677)
!3681 = !DILocation(line: 363, column: 27, scope: !3677)
!3682 = !DILocation(line: 363, column: 25, scope: !3677)
!3683 = !DILocation(line: 364, column: 11, scope: !3677)
!3684 = !DILocation(line: 365, column: 14, scope: !3685)
!3685 = distinct !DILexicalBlock(scope: !3673, file: !241, line: 365, column: 13)
!3686 = !DILocation(line: 365, column: 13, scope: !3673)
!3687 = !DILocation(line: 366, column: 31, scope: !3688)
!3688 = distinct !DILexicalBlock(scope: !3685, file: !241, line: 366, column: 11)
!3689 = !DILocation(line: 366, column: 29, scope: !3688)
!3690 = !DILocation(line: 366, column: 16, scope: !3688)
!3691 = !DILocation(line: 366, column: 44, scope: !3692)
!3692 = distinct !DILexicalBlock(scope: !3688, file: !241, line: 366, column: 11)
!3693 = !DILocation(line: 366, column: 43, scope: !3692)
!3694 = !DILocation(line: 366, column: 11, scope: !3688)
!3695 = !DILocation(line: 367, column: 13, scope: !3692)
!3696 = !DILocation(line: 367, column: 13, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3698, file: !241, line: 367, column: 13)
!3698 = distinct !DILexicalBlock(scope: !3692, file: !241, line: 367, column: 13)
!3699 = !DILocation(line: 367, column: 13, scope: !3698)
!3700 = !DILocation(line: 366, column: 70, scope: !3692)
!3701 = !DILocation(line: 366, column: 11, scope: !3692)
!3702 = distinct !{!3702, !3694, !3703}
!3703 = !DILocation(line: 367, column: 13, scope: !3688)
!3704 = !DILocation(line: 368, column: 27, scope: !3673)
!3705 = !DILocation(line: 369, column: 24, scope: !3673)
!3706 = !DILocation(line: 369, column: 22, scope: !3673)
!3707 = !DILocation(line: 370, column: 36, scope: !3673)
!3708 = !DILocation(line: 370, column: 28, scope: !3673)
!3709 = !DILocation(line: 370, column: 26, scope: !3673)
!3710 = !DILocation(line: 372, column: 7, scope: !3653)
!3711 = !DILocation(line: 375, column: 25, scope: !3653)
!3712 = !DILocation(line: 376, column: 7, scope: !3653)
!3713 = !DILocation(line: 378, column: 26, scope: !3653)
!3714 = !DILocation(line: 379, column: 7, scope: !3653)
!3715 = !DILocation(line: 381, column: 12, scope: !3716)
!3716 = distinct !DILexicalBlock(scope: !3653, file: !241, line: 381, column: 11)
!3717 = !DILocation(line: 381, column: 11, scope: !3653)
!3718 = !DILocation(line: 382, column: 27, scope: !3716)
!3719 = !DILocation(line: 382, column: 9, scope: !3716)
!3720 = !DILocation(line: 383, column: 7, scope: !3653)
!3721 = !DILocation(line: 385, column: 21, scope: !3653)
!3722 = !DILocation(line: 386, column: 12, scope: !3723)
!3723 = distinct !DILexicalBlock(scope: !3653, file: !241, line: 386, column: 11)
!3724 = !DILocation(line: 386, column: 11, scope: !3653)
!3725 = !DILocation(line: 387, column: 9, scope: !3723)
!3726 = !DILocation(line: 387, column: 9, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3728, file: !241, line: 387, column: 9)
!3728 = distinct !DILexicalBlock(scope: !3723, file: !241, line: 387, column: 9)
!3729 = !DILocation(line: 387, column: 9, scope: !3728)
!3730 = !DILocation(line: 388, column: 20, scope: !3653)
!3731 = !DILocation(line: 389, column: 24, scope: !3653)
!3732 = !DILocation(line: 390, column: 7, scope: !3653)
!3733 = !DILocation(line: 393, column: 26, scope: !3653)
!3734 = !DILocation(line: 394, column: 7, scope: !3653)
!3735 = !DILocation(line: 397, column: 7, scope: !3653)
!3736 = !DILocation(line: 400, column: 10, scope: !3737)
!3737 = distinct !DILexicalBlock(scope: !3597, file: !241, line: 400, column: 3)
!3738 = !DILocation(line: 400, column: 8, scope: !3737)
!3739 = !DILocation(line: 400, column: 19, scope: !3740)
!3740 = distinct !DILexicalBlock(scope: !3737, file: !241, line: 400, column: 3)
!3741 = !DILocation(line: 400, column: 27, scope: !3740)
!3742 = !DILocation(line: 400, column: 41, scope: !3740)
!3743 = !DILocation(line: 400, column: 45, scope: !3740)
!3744 = !DILocation(line: 400, column: 48, scope: !3740)
!3745 = !DILocation(line: 400, column: 58, scope: !3740)
!3746 = !DILocation(line: 400, column: 63, scope: !3740)
!3747 = !DILocation(line: 400, column: 60, scope: !3740)
!3748 = !DILocation(line: 400, column: 16, scope: !3740)
!3749 = !DILocation(line: 400, column: 3, scope: !3737)
!3750 = !DILocalVariable(name: "c", scope: !3751, file: !241, line: 402, type: !317)
!3751 = distinct !DILexicalBlock(scope: !3740, file: !241, line: 401, column: 5)
!3752 = !DILocation(line: 402, column: 21, scope: !3751)
!3753 = !DILocalVariable(name: "esc", scope: !3751, file: !241, line: 403, type: !317)
!3754 = !DILocation(line: 403, column: 21, scope: !3751)
!3755 = !DILocalVariable(name: "is_right_quote", scope: !3751, file: !241, line: 404, type: !18)
!3756 = !DILocation(line: 404, column: 12, scope: !3751)
!3757 = !DILocalVariable(name: "escaping", scope: !3751, file: !241, line: 405, type: !18)
!3758 = !DILocation(line: 405, column: 12, scope: !3751)
!3759 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !3751, file: !241, line: 406, type: !18)
!3760 = !DILocation(line: 406, column: 12, scope: !3751)
!3761 = !DILocation(line: 408, column: 11, scope: !3762)
!3762 = distinct !DILexicalBlock(scope: !3751, file: !241, line: 408, column: 11)
!3763 = !DILocation(line: 409, column: 11, scope: !3762)
!3764 = !DILocation(line: 409, column: 14, scope: !3762)
!3765 = !DILocation(line: 409, column: 28, scope: !3762)
!3766 = !DILocation(line: 410, column: 11, scope: !3762)
!3767 = !DILocation(line: 410, column: 14, scope: !3762)
!3768 = !DILocation(line: 411, column: 11, scope: !3762)
!3769 = !DILocation(line: 411, column: 15, scope: !3762)
!3770 = !DILocation(line: 411, column: 19, scope: !3762)
!3771 = !DILocation(line: 411, column: 17, scope: !3762)
!3772 = !DILocation(line: 412, column: 19, scope: !3762)
!3773 = !DILocation(line: 412, column: 27, scope: !3762)
!3774 = !DILocation(line: 412, column: 39, scope: !3762)
!3775 = !DILocation(line: 412, column: 46, scope: !3762)
!3776 = !DILocation(line: 412, column: 44, scope: !3762)
!3777 = !DILocation(line: 416, column: 40, scope: !3762)
!3778 = !DILocation(line: 416, column: 32, scope: !3762)
!3779 = !DILocation(line: 416, column: 30, scope: !3762)
!3780 = !DILocation(line: 416, column: 48, scope: !3762)
!3781 = !DILocation(line: 412, column: 15, scope: !3762)
!3782 = !DILocation(line: 417, column: 11, scope: !3762)
!3783 = !DILocation(line: 417, column: 22, scope: !3762)
!3784 = !DILocation(line: 417, column: 28, scope: !3762)
!3785 = !DILocation(line: 417, column: 26, scope: !3762)
!3786 = !DILocation(line: 417, column: 31, scope: !3762)
!3787 = !DILocation(line: 417, column: 45, scope: !3762)
!3788 = !DILocation(line: 417, column: 14, scope: !3762)
!3789 = !DILocation(line: 417, column: 63, scope: !3762)
!3790 = !DILocation(line: 408, column: 11, scope: !3751)
!3791 = !DILocation(line: 419, column: 15, scope: !3792)
!3792 = distinct !DILexicalBlock(scope: !3793, file: !241, line: 419, column: 15)
!3793 = distinct !DILexicalBlock(scope: !3762, file: !241, line: 418, column: 9)
!3794 = !DILocation(line: 419, column: 15, scope: !3793)
!3795 = !DILocation(line: 420, column: 13, scope: !3792)
!3796 = !DILocation(line: 421, column: 26, scope: !3793)
!3797 = !DILocation(line: 422, column: 9, scope: !3793)
!3798 = !DILocation(line: 424, column: 11, scope: !3751)
!3799 = !DILocation(line: 424, column: 15, scope: !3751)
!3800 = !DILocation(line: 424, column: 9, scope: !3751)
!3801 = !DILocation(line: 425, column: 15, scope: !3751)
!3802 = !DILocation(line: 425, column: 7, scope: !3751)
!3803 = !DILocation(line: 428, column: 15, scope: !3804)
!3804 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 428, column: 15)
!3805 = distinct !DILexicalBlock(scope: !3751, file: !241, line: 426, column: 9)
!3806 = !DILocation(line: 428, column: 15, scope: !3805)
!3807 = !DILocation(line: 430, column: 15, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3804, file: !241, line: 429, column: 13)
!3809 = !DILocation(line: 430, column: 15, scope: !3810)
!3810 = distinct !DILexicalBlock(scope: !3811, file: !241, line: 430, column: 15)
!3811 = distinct !DILexicalBlock(scope: !3808, file: !241, line: 430, column: 15)
!3812 = !DILocation(line: 430, column: 15, scope: !3811)
!3813 = !DILocation(line: 430, column: 15, scope: !3814)
!3814 = distinct !DILexicalBlock(scope: !3811, file: !241, line: 430, column: 15)
!3815 = !DILocation(line: 430, column: 15, scope: !3816)
!3816 = distinct !DILexicalBlock(scope: !3814, file: !241, line: 430, column: 15)
!3817 = !DILocation(line: 430, column: 15, scope: !3818)
!3818 = distinct !DILexicalBlock(scope: !3819, file: !241, line: 430, column: 15)
!3819 = distinct !DILexicalBlock(scope: !3816, file: !241, line: 430, column: 15)
!3820 = !DILocation(line: 430, column: 15, scope: !3819)
!3821 = !DILocation(line: 430, column: 15, scope: !3822)
!3822 = distinct !DILexicalBlock(scope: !3823, file: !241, line: 430, column: 15)
!3823 = distinct !DILexicalBlock(scope: !3816, file: !241, line: 430, column: 15)
!3824 = !DILocation(line: 430, column: 15, scope: !3823)
!3825 = !DILocation(line: 430, column: 15, scope: !3826)
!3826 = distinct !DILexicalBlock(scope: !3827, file: !241, line: 430, column: 15)
!3827 = distinct !DILexicalBlock(scope: !3816, file: !241, line: 430, column: 15)
!3828 = !DILocation(line: 430, column: 15, scope: !3827)
!3829 = !DILocation(line: 430, column: 15, scope: !3830)
!3830 = distinct !DILexicalBlock(scope: !3831, file: !241, line: 430, column: 15)
!3831 = distinct !DILexicalBlock(scope: !3811, file: !241, line: 430, column: 15)
!3832 = !DILocation(line: 430, column: 15, scope: !3831)
!3833 = !DILocation(line: 437, column: 19, scope: !3834)
!3834 = distinct !DILexicalBlock(scope: !3808, file: !241, line: 437, column: 19)
!3835 = !DILocation(line: 437, column: 33, scope: !3834)
!3836 = !DILocation(line: 438, column: 19, scope: !3834)
!3837 = !DILocation(line: 438, column: 22, scope: !3834)
!3838 = !DILocation(line: 438, column: 24, scope: !3834)
!3839 = !DILocation(line: 438, column: 30, scope: !3834)
!3840 = !DILocation(line: 438, column: 28, scope: !3834)
!3841 = !DILocation(line: 438, column: 38, scope: !3834)
!3842 = !DILocation(line: 438, column: 48, scope: !3834)
!3843 = !DILocation(line: 438, column: 52, scope: !3834)
!3844 = !DILocation(line: 438, column: 54, scope: !3834)
!3845 = !DILocation(line: 438, column: 45, scope: !3834)
!3846 = !DILocation(line: 438, column: 59, scope: !3834)
!3847 = !DILocation(line: 438, column: 62, scope: !3834)
!3848 = !DILocation(line: 438, column: 66, scope: !3834)
!3849 = !DILocation(line: 438, column: 68, scope: !3834)
!3850 = !DILocation(line: 438, column: 73, scope: !3834)
!3851 = !DILocation(line: 437, column: 19, scope: !3808)
!3852 = !DILocation(line: 440, column: 19, scope: !3853)
!3853 = distinct !DILexicalBlock(scope: !3834, file: !241, line: 439, column: 17)
!3854 = !DILocation(line: 440, column: 19, scope: !3855)
!3855 = distinct !DILexicalBlock(scope: !3856, file: !241, line: 440, column: 19)
!3856 = distinct !DILexicalBlock(scope: !3853, file: !241, line: 440, column: 19)
!3857 = !DILocation(line: 440, column: 19, scope: !3856)
!3858 = !DILocation(line: 441, column: 19, scope: !3853)
!3859 = !DILocation(line: 441, column: 19, scope: !3860)
!3860 = distinct !DILexicalBlock(scope: !3861, file: !241, line: 441, column: 19)
!3861 = distinct !DILexicalBlock(scope: !3853, file: !241, line: 441, column: 19)
!3862 = !DILocation(line: 441, column: 19, scope: !3861)
!3863 = !DILocation(line: 442, column: 17, scope: !3853)
!3864 = !DILocation(line: 443, column: 17, scope: !3808)
!3865 = !DILocation(line: 448, column: 13, scope: !3808)
!3866 = !DILocation(line: 449, column: 20, scope: !3867)
!3867 = distinct !DILexicalBlock(scope: !3804, file: !241, line: 449, column: 20)
!3868 = !DILocation(line: 449, column: 26, scope: !3867)
!3869 = !DILocation(line: 449, column: 20, scope: !3804)
!3870 = !DILocation(line: 450, column: 13, scope: !3867)
!3871 = !DILocation(line: 451, column: 11, scope: !3805)
!3872 = !DILocation(line: 454, column: 19, scope: !3805)
!3873 = !DILocation(line: 454, column: 11, scope: !3805)
!3874 = !DILocation(line: 457, column: 19, scope: !3875)
!3875 = distinct !DILexicalBlock(scope: !3876, file: !241, line: 457, column: 19)
!3876 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 455, column: 13)
!3877 = !DILocation(line: 457, column: 19, scope: !3876)
!3878 = !DILocation(line: 458, column: 17, scope: !3875)
!3879 = !DILocation(line: 459, column: 15, scope: !3876)
!3880 = !DILocation(line: 462, column: 20, scope: !3881)
!3881 = distinct !DILexicalBlock(scope: !3876, file: !241, line: 462, column: 19)
!3882 = !DILocation(line: 462, column: 26, scope: !3881)
!3883 = !DILocation(line: 463, column: 19, scope: !3881)
!3884 = !DILocation(line: 463, column: 22, scope: !3881)
!3885 = !DILocation(line: 463, column: 24, scope: !3881)
!3886 = !DILocation(line: 463, column: 30, scope: !3881)
!3887 = !DILocation(line: 463, column: 28, scope: !3881)
!3888 = !DILocation(line: 463, column: 38, scope: !3881)
!3889 = !DILocation(line: 463, column: 41, scope: !3881)
!3890 = !DILocation(line: 463, column: 45, scope: !3881)
!3891 = !DILocation(line: 463, column: 47, scope: !3881)
!3892 = !DILocation(line: 463, column: 52, scope: !3881)
!3893 = !DILocation(line: 462, column: 19, scope: !3876)
!3894 = !DILocation(line: 464, column: 25, scope: !3881)
!3895 = !DILocation(line: 464, column: 29, scope: !3881)
!3896 = !DILocation(line: 464, column: 31, scope: !3881)
!3897 = !DILocation(line: 464, column: 17, scope: !3881)
!3898 = !DILocation(line: 471, column: 25, scope: !3899)
!3899 = distinct !DILexicalBlock(scope: !3900, file: !241, line: 471, column: 25)
!3900 = distinct !DILexicalBlock(scope: !3881, file: !241, line: 465, column: 19)
!3901 = !DILocation(line: 471, column: 25, scope: !3900)
!3902 = !DILocation(line: 472, column: 23, scope: !3899)
!3903 = !DILocation(line: 473, column: 25, scope: !3900)
!3904 = !DILocation(line: 473, column: 29, scope: !3900)
!3905 = !DILocation(line: 473, column: 31, scope: !3900)
!3906 = !DILocation(line: 473, column: 23, scope: !3900)
!3907 = !DILocation(line: 474, column: 23, scope: !3900)
!3908 = !DILocation(line: 475, column: 21, scope: !3900)
!3909 = !DILocation(line: 475, column: 21, scope: !3910)
!3910 = distinct !DILexicalBlock(scope: !3911, file: !241, line: 475, column: 21)
!3911 = distinct !DILexicalBlock(scope: !3900, file: !241, line: 475, column: 21)
!3912 = !DILocation(line: 475, column: 21, scope: !3911)
!3913 = !DILocation(line: 476, column: 21, scope: !3900)
!3914 = !DILocation(line: 476, column: 21, scope: !3915)
!3915 = distinct !DILexicalBlock(scope: !3916, file: !241, line: 476, column: 21)
!3916 = distinct !DILexicalBlock(scope: !3900, file: !241, line: 476, column: 21)
!3917 = !DILocation(line: 476, column: 21, scope: !3916)
!3918 = !DILocation(line: 477, column: 21, scope: !3900)
!3919 = !DILocation(line: 477, column: 21, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3921, file: !241, line: 477, column: 21)
!3921 = distinct !DILexicalBlock(scope: !3900, file: !241, line: 477, column: 21)
!3922 = !DILocation(line: 477, column: 21, scope: !3921)
!3923 = !DILocation(line: 478, column: 21, scope: !3900)
!3924 = !DILocation(line: 478, column: 21, scope: !3925)
!3925 = distinct !DILexicalBlock(scope: !3926, file: !241, line: 478, column: 21)
!3926 = distinct !DILexicalBlock(scope: !3900, file: !241, line: 478, column: 21)
!3927 = !DILocation(line: 478, column: 21, scope: !3926)
!3928 = !DILocation(line: 479, column: 21, scope: !3900)
!3929 = !DILocation(line: 482, column: 21, scope: !3900)
!3930 = !DILocation(line: 483, column: 19, scope: !3900)
!3931 = !DILocation(line: 484, column: 15, scope: !3876)
!3932 = !DILocation(line: 487, column: 15, scope: !3876)
!3933 = !DILocation(line: 489, column: 11, scope: !3805)
!3934 = !DILocation(line: 491, column: 24, scope: !3805)
!3935 = !DILocation(line: 491, column: 31, scope: !3805)
!3936 = !DILocation(line: 492, column: 24, scope: !3805)
!3937 = !DILocation(line: 492, column: 31, scope: !3805)
!3938 = !DILocation(line: 493, column: 24, scope: !3805)
!3939 = !DILocation(line: 493, column: 31, scope: !3805)
!3940 = !DILocation(line: 494, column: 24, scope: !3805)
!3941 = !DILocation(line: 494, column: 31, scope: !3805)
!3942 = !DILocation(line: 495, column: 24, scope: !3805)
!3943 = !DILocation(line: 495, column: 31, scope: !3805)
!3944 = !DILocation(line: 496, column: 24, scope: !3805)
!3945 = !DILocation(line: 496, column: 31, scope: !3805)
!3946 = !DILocation(line: 497, column: 24, scope: !3805)
!3947 = !DILocation(line: 497, column: 31, scope: !3805)
!3948 = !DILocation(line: 498, column: 26, scope: !3805)
!3949 = !DILocation(line: 498, column: 24, scope: !3805)
!3950 = !DILocation(line: 500, column: 15, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 500, column: 15)
!3952 = !DILocation(line: 500, column: 29, scope: !3951)
!3953 = !DILocation(line: 500, column: 15, scope: !3805)
!3954 = !DILocation(line: 502, column: 19, scope: !3955)
!3955 = distinct !DILexicalBlock(scope: !3956, file: !241, line: 502, column: 19)
!3956 = distinct !DILexicalBlock(scope: !3951, file: !241, line: 501, column: 13)
!3957 = !DILocation(line: 502, column: 19, scope: !3956)
!3958 = !DILocation(line: 503, column: 17, scope: !3955)
!3959 = !DILocation(line: 504, column: 15, scope: !3956)
!3960 = !DILocation(line: 509, column: 15, scope: !3961)
!3961 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 509, column: 15)
!3962 = !DILocation(line: 509, column: 33, scope: !3961)
!3963 = !DILocation(line: 509, column: 36, scope: !3961)
!3964 = !DILocation(line: 509, column: 55, scope: !3961)
!3965 = !DILocation(line: 509, column: 58, scope: !3961)
!3966 = !DILocation(line: 509, column: 15, scope: !3805)
!3967 = !DILocation(line: 510, column: 13, scope: !3961)
!3968 = !DILabel(scope: !3805, name: "c_and_shell_escape", file: !241, line: 512)
!3969 = !DILocation(line: 512, column: 9, scope: !3805)
!3970 = !DILocation(line: 513, column: 15, scope: !3971)
!3971 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 513, column: 15)
!3972 = !DILocation(line: 513, column: 29, scope: !3971)
!3973 = !DILocation(line: 514, column: 15, scope: !3971)
!3974 = !DILocation(line: 514, column: 18, scope: !3971)
!3975 = !DILocation(line: 513, column: 15, scope: !3805)
!3976 = !DILocation(line: 515, column: 13, scope: !3971)
!3977 = !DILabel(scope: !3805, name: "c_escape", file: !241, line: 517)
!3978 = !DILocation(line: 517, column: 9, scope: !3805)
!3979 = !DILocation(line: 518, column: 15, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 518, column: 15)
!3981 = !DILocation(line: 518, column: 15, scope: !3805)
!3982 = !DILocation(line: 520, column: 19, scope: !3983)
!3983 = distinct !DILexicalBlock(scope: !3980, file: !241, line: 519, column: 13)
!3984 = !DILocation(line: 520, column: 17, scope: !3983)
!3985 = !DILocation(line: 521, column: 15, scope: !3983)
!3986 = !DILocation(line: 523, column: 11, scope: !3805)
!3987 = !DILocation(line: 526, column: 18, scope: !3988)
!3988 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 526, column: 15)
!3989 = !DILocation(line: 526, column: 26, scope: !3988)
!3990 = !DILocation(line: 526, column: 15, scope: !3805)
!3991 = !DILocation(line: 526, column: 40, scope: !3988)
!3992 = !DILocation(line: 526, column: 47, scope: !3988)
!3993 = !DILocation(line: 526, column: 57, scope: !3988)
!3994 = !DILocation(line: 526, column: 65, scope: !3988)
!3995 = !DILocation(line: 527, column: 13, scope: !3988)
!3996 = !DILocation(line: 528, column: 11, scope: !3805)
!3997 = !DILocation(line: 530, column: 15, scope: !3998)
!3998 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 530, column: 15)
!3999 = !DILocation(line: 530, column: 17, scope: !3998)
!4000 = !DILocation(line: 530, column: 15, scope: !3805)
!4001 = !DILocation(line: 531, column: 13, scope: !3998)
!4002 = !DILocation(line: 532, column: 11, scope: !3805)
!4003 = !DILocation(line: 534, column: 36, scope: !3805)
!4004 = !DILocation(line: 535, column: 11, scope: !3805)
!4005 = !DILocation(line: 548, column: 15, scope: !4006)
!4006 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 548, column: 15)
!4007 = !DILocation(line: 548, column: 29, scope: !4006)
!4008 = !DILocation(line: 549, column: 15, scope: !4006)
!4009 = !DILocation(line: 549, column: 18, scope: !4006)
!4010 = !DILocation(line: 548, column: 15, scope: !3805)
!4011 = !DILocation(line: 550, column: 13, scope: !4006)
!4012 = !DILocation(line: 551, column: 11, scope: !3805)
!4013 = !DILocation(line: 554, column: 36, scope: !3805)
!4014 = !DILocation(line: 555, column: 36, scope: !3805)
!4015 = !DILocation(line: 556, column: 15, scope: !4016)
!4016 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 556, column: 15)
!4017 = !DILocation(line: 556, column: 29, scope: !4016)
!4018 = !DILocation(line: 556, column: 15, scope: !3805)
!4019 = !DILocation(line: 558, column: 19, scope: !4020)
!4020 = distinct !DILexicalBlock(scope: !4021, file: !241, line: 558, column: 19)
!4021 = distinct !DILexicalBlock(scope: !4016, file: !241, line: 557, column: 13)
!4022 = !DILocation(line: 558, column: 19, scope: !4021)
!4023 = !DILocation(line: 559, column: 17, scope: !4020)
!4024 = !DILocation(line: 561, column: 19, scope: !4025)
!4025 = distinct !DILexicalBlock(scope: !4021, file: !241, line: 561, column: 19)
!4026 = !DILocation(line: 561, column: 30, scope: !4025)
!4027 = !DILocation(line: 561, column: 35, scope: !4025)
!4028 = !DILocation(line: 561, column: 19, scope: !4021)
!4029 = !DILocation(line: 566, column: 37, scope: !4030)
!4030 = distinct !DILexicalBlock(scope: !4025, file: !241, line: 562, column: 17)
!4031 = !DILocation(line: 566, column: 35, scope: !4030)
!4032 = !DILocation(line: 567, column: 30, scope: !4030)
!4033 = !DILocation(line: 568, column: 17, scope: !4030)
!4034 = !DILocation(line: 570, column: 15, scope: !4021)
!4035 = !DILocation(line: 570, column: 15, scope: !4036)
!4036 = distinct !DILexicalBlock(scope: !4037, file: !241, line: 570, column: 15)
!4037 = distinct !DILexicalBlock(scope: !4021, file: !241, line: 570, column: 15)
!4038 = !DILocation(line: 570, column: 15, scope: !4037)
!4039 = !DILocation(line: 571, column: 15, scope: !4021)
!4040 = !DILocation(line: 571, column: 15, scope: !4041)
!4041 = distinct !DILexicalBlock(scope: !4042, file: !241, line: 571, column: 15)
!4042 = distinct !DILexicalBlock(scope: !4021, file: !241, line: 571, column: 15)
!4043 = !DILocation(line: 571, column: 15, scope: !4042)
!4044 = !DILocation(line: 572, column: 15, scope: !4021)
!4045 = !DILocation(line: 572, column: 15, scope: !4046)
!4046 = distinct !DILexicalBlock(scope: !4047, file: !241, line: 572, column: 15)
!4047 = distinct !DILexicalBlock(scope: !4021, file: !241, line: 572, column: 15)
!4048 = !DILocation(line: 572, column: 15, scope: !4047)
!4049 = !DILocation(line: 573, column: 40, scope: !4021)
!4050 = !DILocation(line: 574, column: 13, scope: !4021)
!4051 = !DILocation(line: 575, column: 11, scope: !3805)
!4052 = !DILocation(line: 599, column: 36, scope: !3805)
!4053 = !DILocation(line: 600, column: 11, scope: !3805)
!4054 = !DILocalVariable(name: "m", scope: !4055, file: !241, line: 610, type: !110)
!4055 = distinct !DILexicalBlock(scope: !3805, file: !241, line: 608, column: 11)
!4056 = !DILocation(line: 610, column: 20, scope: !4055)
!4057 = !DILocalVariable(name: "printable", scope: !4055, file: !241, line: 612, type: !18)
!4058 = !DILocation(line: 612, column: 18, scope: !4055)
!4059 = !DILocation(line: 614, column: 17, scope: !4060)
!4060 = distinct !DILexicalBlock(scope: !4055, file: !241, line: 614, column: 17)
!4061 = !DILocation(line: 614, column: 17, scope: !4055)
!4062 = !DILocation(line: 616, column: 19, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4060, file: !241, line: 615, column: 15)
!4064 = !DILocation(line: 617, column: 29, scope: !4063)
!4065 = !DILocation(line: 617, column: 41, scope: !4063)
!4066 = !DILocation(line: 617, column: 27, scope: !4063)
!4067 = !DILocation(line: 618, column: 15, scope: !4063)
!4068 = !DILocalVariable(name: "mbstate", scope: !4069, file: !241, line: 621, type: !4070)
!4069 = distinct !DILexicalBlock(scope: !4060, file: !241, line: 620, column: 15)
!4070 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !4071, line: 6, baseType: !4072)
!4071 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!4072 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !4073, line: 21, baseType: !4074)
!4073 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!4074 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4073, line: 13, size: 64, elements: !4075)
!4075 = !{!4076, !4077}
!4076 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !4074, file: !4073, line: 15, baseType: !53, size: 32)
!4077 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !4074, file: !4073, line: 20, baseType: !4078, size: 32, offset: 32)
!4078 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4074, file: !4073, line: 16, size: 32, elements: !4079)
!4079 = !{!4080, !4081}
!4080 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !4078, file: !4073, line: 18, baseType: !180, size: 32)
!4081 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !4078, file: !4073, line: 19, baseType: !82, size: 32)
!4082 = !DILocation(line: 621, column: 27, scope: !4069)
!4083 = !DILocation(line: 622, column: 17, scope: !4069)
!4084 = !DILocation(line: 624, column: 19, scope: !4069)
!4085 = !DILocation(line: 625, column: 27, scope: !4069)
!4086 = !DILocation(line: 626, column: 21, scope: !4087)
!4087 = distinct !DILexicalBlock(scope: !4069, file: !241, line: 626, column: 21)
!4088 = !DILocation(line: 626, column: 29, scope: !4087)
!4089 = !DILocation(line: 626, column: 21, scope: !4069)
!4090 = !DILocation(line: 627, column: 37, scope: !4087)
!4091 = !DILocation(line: 627, column: 29, scope: !4087)
!4092 = !DILocation(line: 627, column: 27, scope: !4087)
!4093 = !DILocation(line: 627, column: 19, scope: !4087)
!4094 = !DILocation(line: 629, column: 17, scope: !4069)
!4095 = !DILocalVariable(name: "w", scope: !4096, file: !241, line: 631, type: !4097)
!4096 = distinct !DILexicalBlock(scope: !4069, file: !241, line: 630, column: 19)
!4097 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !111, line: 74, baseType: !53)
!4098 = !DILocation(line: 631, column: 29, scope: !4096)
!4099 = !DILocalVariable(name: "bytes", scope: !4096, file: !241, line: 632, type: !110)
!4100 = !DILocation(line: 632, column: 28, scope: !4096)
!4101 = !DILocation(line: 632, column: 50, scope: !4096)
!4102 = !DILocation(line: 632, column: 54, scope: !4096)
!4103 = !DILocation(line: 632, column: 58, scope: !4096)
!4104 = !DILocation(line: 632, column: 56, scope: !4096)
!4105 = !DILocation(line: 633, column: 45, scope: !4096)
!4106 = !DILocation(line: 633, column: 56, scope: !4096)
!4107 = !DILocation(line: 633, column: 60, scope: !4096)
!4108 = !DILocation(line: 633, column: 58, scope: !4096)
!4109 = !DILocation(line: 633, column: 53, scope: !4096)
!4110 = !DILocation(line: 632, column: 36, scope: !4096)
!4111 = !DILocation(line: 634, column: 25, scope: !4112)
!4112 = distinct !DILexicalBlock(scope: !4096, file: !241, line: 634, column: 25)
!4113 = !DILocation(line: 634, column: 31, scope: !4112)
!4114 = !DILocation(line: 634, column: 25, scope: !4096)
!4115 = !DILocation(line: 635, column: 23, scope: !4112)
!4116 = !DILocation(line: 636, column: 30, scope: !4117)
!4117 = distinct !DILexicalBlock(scope: !4112, file: !241, line: 636, column: 30)
!4118 = !DILocation(line: 636, column: 36, scope: !4117)
!4119 = !DILocation(line: 636, column: 30, scope: !4112)
!4120 = !DILocation(line: 638, column: 35, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4117, file: !241, line: 637, column: 23)
!4122 = !DILocation(line: 639, column: 25, scope: !4121)
!4123 = !DILocation(line: 641, column: 30, scope: !4124)
!4124 = distinct !DILexicalBlock(scope: !4117, file: !241, line: 641, column: 30)
!4125 = !DILocation(line: 641, column: 36, scope: !4124)
!4126 = !DILocation(line: 641, column: 30, scope: !4117)
!4127 = !DILocation(line: 643, column: 35, scope: !4128)
!4128 = distinct !DILexicalBlock(scope: !4124, file: !241, line: 642, column: 23)
!4129 = !DILocation(line: 644, column: 25, scope: !4128)
!4130 = !DILocation(line: 644, column: 32, scope: !4128)
!4131 = !DILocation(line: 644, column: 36, scope: !4128)
!4132 = !DILocation(line: 644, column: 34, scope: !4128)
!4133 = !DILocation(line: 644, column: 40, scope: !4128)
!4134 = !DILocation(line: 644, column: 38, scope: !4128)
!4135 = !DILocation(line: 644, column: 48, scope: !4128)
!4136 = !DILocation(line: 644, column: 51, scope: !4128)
!4137 = !DILocation(line: 644, column: 55, scope: !4128)
!4138 = !DILocation(line: 644, column: 59, scope: !4128)
!4139 = !DILocation(line: 644, column: 57, scope: !4128)
!4140 = !DILocation(line: 0, scope: !4128)
!4141 = !DILocation(line: 645, column: 28, scope: !4128)
!4142 = distinct !{!4142, !4129, !4141}
!4143 = !DILocation(line: 646, column: 25, scope: !4128)
!4144 = !DILocation(line: 654, column: 44, scope: !4145)
!4145 = distinct !DILexicalBlock(scope: !4146, file: !241, line: 654, column: 29)
!4146 = distinct !DILexicalBlock(scope: !4124, file: !241, line: 649, column: 23)
!4147 = !DILocation(line: 655, column: 29, scope: !4145)
!4148 = !DILocation(line: 655, column: 32, scope: !4145)
!4149 = !DILocation(line: 655, column: 46, scope: !4145)
!4150 = !DILocation(line: 654, column: 29, scope: !4146)
!4151 = !DILocalVariable(name: "j", scope: !4152, file: !241, line: 657, type: !110)
!4152 = distinct !DILexicalBlock(scope: !4145, file: !241, line: 656, column: 27)
!4153 = !DILocation(line: 657, column: 36, scope: !4152)
!4154 = !DILocation(line: 658, column: 36, scope: !4155)
!4155 = distinct !DILexicalBlock(scope: !4152, file: !241, line: 658, column: 29)
!4156 = !DILocation(line: 658, column: 34, scope: !4155)
!4157 = !DILocation(line: 658, column: 41, scope: !4158)
!4158 = distinct !DILexicalBlock(scope: !4155, file: !241, line: 658, column: 29)
!4159 = !DILocation(line: 658, column: 45, scope: !4158)
!4160 = !DILocation(line: 658, column: 43, scope: !4158)
!4161 = !DILocation(line: 658, column: 29, scope: !4155)
!4162 = !DILocation(line: 659, column: 39, scope: !4158)
!4163 = !DILocation(line: 659, column: 43, scope: !4158)
!4164 = !DILocation(line: 659, column: 47, scope: !4158)
!4165 = !DILocation(line: 659, column: 45, scope: !4158)
!4166 = !DILocation(line: 659, column: 51, scope: !4158)
!4167 = !DILocation(line: 659, column: 49, scope: !4158)
!4168 = !DILocation(line: 659, column: 31, scope: !4158)
!4169 = !DILocation(line: 663, column: 35, scope: !4170)
!4170 = distinct !DILexicalBlock(scope: !4158, file: !241, line: 660, column: 33)
!4171 = !DILocation(line: 666, column: 35, scope: !4170)
!4172 = !DILocation(line: 667, column: 33, scope: !4170)
!4173 = !DILocation(line: 658, column: 53, scope: !4158)
!4174 = !DILocation(line: 658, column: 29, scope: !4158)
!4175 = distinct !{!4175, !4161, !4176}
!4176 = !DILocation(line: 667, column: 33, scope: !4155)
!4177 = !DILocation(line: 668, column: 27, scope: !4152)
!4178 = !DILocation(line: 670, column: 41, scope: !4179)
!4179 = distinct !DILexicalBlock(scope: !4146, file: !241, line: 670, column: 29)
!4180 = !DILocation(line: 670, column: 31, scope: !4179)
!4181 = !DILocation(line: 670, column: 29, scope: !4146)
!4182 = !DILocation(line: 671, column: 37, scope: !4179)
!4183 = !DILocation(line: 671, column: 27, scope: !4179)
!4184 = !DILocation(line: 672, column: 30, scope: !4146)
!4185 = !DILocation(line: 672, column: 27, scope: !4146)
!4186 = !DILocation(line: 674, column: 19, scope: !4096)
!4187 = !DILocation(line: 675, column: 26, scope: !4069)
!4188 = !DILocation(line: 675, column: 24, scope: !4069)
!4189 = distinct !{!4189, !4094, !4190}
!4190 = !DILocation(line: 675, column: 44, scope: !4069)
!4191 = !DILocation(line: 678, column: 40, scope: !4055)
!4192 = !DILocation(line: 678, column: 38, scope: !4055)
!4193 = !DILocation(line: 680, column: 21, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4055, file: !241, line: 680, column: 17)
!4195 = !DILocation(line: 680, column: 19, scope: !4194)
!4196 = !DILocation(line: 680, column: 23, scope: !4194)
!4197 = !DILocation(line: 680, column: 27, scope: !4194)
!4198 = !DILocation(line: 680, column: 45, scope: !4194)
!4199 = !DILocation(line: 680, column: 50, scope: !4194)
!4200 = !DILocation(line: 680, column: 17, scope: !4055)
!4201 = !DILocalVariable(name: "ilim", scope: !4202, file: !241, line: 684, type: !110)
!4202 = distinct !DILexicalBlock(scope: !4194, file: !241, line: 681, column: 15)
!4203 = !DILocation(line: 684, column: 24, scope: !4202)
!4204 = !DILocation(line: 684, column: 31, scope: !4202)
!4205 = !DILocation(line: 684, column: 35, scope: !4202)
!4206 = !DILocation(line: 684, column: 33, scope: !4202)
!4207 = !DILocation(line: 686, column: 17, scope: !4202)
!4208 = !DILocation(line: 688, column: 25, scope: !4209)
!4209 = distinct !DILexicalBlock(scope: !4210, file: !241, line: 688, column: 25)
!4210 = distinct !DILexicalBlock(scope: !4211, file: !241, line: 687, column: 19)
!4211 = distinct !DILexicalBlock(scope: !4212, file: !241, line: 686, column: 17)
!4212 = distinct !DILexicalBlock(scope: !4202, file: !241, line: 686, column: 17)
!4213 = !DILocation(line: 688, column: 43, scope: !4209)
!4214 = !DILocation(line: 688, column: 48, scope: !4209)
!4215 = !DILocation(line: 688, column: 25, scope: !4210)
!4216 = !DILocation(line: 690, column: 25, scope: !4217)
!4217 = distinct !DILexicalBlock(scope: !4209, file: !241, line: 689, column: 23)
!4218 = !DILocation(line: 690, column: 25, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4220, file: !241, line: 690, column: 25)
!4220 = distinct !DILexicalBlock(scope: !4217, file: !241, line: 690, column: 25)
!4221 = !DILocation(line: 690, column: 25, scope: !4220)
!4222 = !DILocation(line: 690, column: 25, scope: !4223)
!4223 = distinct !DILexicalBlock(scope: !4220, file: !241, line: 690, column: 25)
!4224 = !DILocation(line: 690, column: 25, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4223, file: !241, line: 690, column: 25)
!4226 = !DILocation(line: 690, column: 25, scope: !4227)
!4227 = distinct !DILexicalBlock(scope: !4228, file: !241, line: 690, column: 25)
!4228 = distinct !DILexicalBlock(scope: !4225, file: !241, line: 690, column: 25)
!4229 = !DILocation(line: 690, column: 25, scope: !4228)
!4230 = !DILocation(line: 690, column: 25, scope: !4231)
!4231 = distinct !DILexicalBlock(scope: !4232, file: !241, line: 690, column: 25)
!4232 = distinct !DILexicalBlock(scope: !4225, file: !241, line: 690, column: 25)
!4233 = !DILocation(line: 690, column: 25, scope: !4232)
!4234 = !DILocation(line: 690, column: 25, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4236, file: !241, line: 690, column: 25)
!4236 = distinct !DILexicalBlock(scope: !4225, file: !241, line: 690, column: 25)
!4237 = !DILocation(line: 690, column: 25, scope: !4236)
!4238 = !DILocation(line: 690, column: 25, scope: !4239)
!4239 = distinct !DILexicalBlock(scope: !4240, file: !241, line: 690, column: 25)
!4240 = distinct !DILexicalBlock(scope: !4220, file: !241, line: 690, column: 25)
!4241 = !DILocation(line: 690, column: 25, scope: !4240)
!4242 = !DILocation(line: 691, column: 25, scope: !4217)
!4243 = !DILocation(line: 691, column: 25, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4245, file: !241, line: 691, column: 25)
!4245 = distinct !DILexicalBlock(scope: !4217, file: !241, line: 691, column: 25)
!4246 = !DILocation(line: 691, column: 25, scope: !4245)
!4247 = !DILocation(line: 692, column: 25, scope: !4217)
!4248 = !DILocation(line: 692, column: 25, scope: !4249)
!4249 = distinct !DILexicalBlock(scope: !4250, file: !241, line: 692, column: 25)
!4250 = distinct !DILexicalBlock(scope: !4217, file: !241, line: 692, column: 25)
!4251 = !DILocation(line: 692, column: 25, scope: !4250)
!4252 = !DILocation(line: 693, column: 36, scope: !4217)
!4253 = !DILocation(line: 693, column: 38, scope: !4217)
!4254 = !DILocation(line: 693, column: 33, scope: !4217)
!4255 = !DILocation(line: 693, column: 29, scope: !4217)
!4256 = !DILocation(line: 693, column: 27, scope: !4217)
!4257 = !DILocation(line: 694, column: 23, scope: !4217)
!4258 = !DILocation(line: 695, column: 30, scope: !4259)
!4259 = distinct !DILexicalBlock(scope: !4209, file: !241, line: 695, column: 30)
!4260 = !DILocation(line: 695, column: 30, scope: !4209)
!4261 = !DILocation(line: 697, column: 25, scope: !4262)
!4262 = distinct !DILexicalBlock(scope: !4259, file: !241, line: 696, column: 23)
!4263 = !DILocation(line: 697, column: 25, scope: !4264)
!4264 = distinct !DILexicalBlock(scope: !4265, file: !241, line: 697, column: 25)
!4265 = distinct !DILexicalBlock(scope: !4262, file: !241, line: 697, column: 25)
!4266 = !DILocation(line: 697, column: 25, scope: !4265)
!4267 = !DILocation(line: 698, column: 40, scope: !4262)
!4268 = !DILocation(line: 699, column: 23, scope: !4262)
!4269 = !DILocation(line: 700, column: 25, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4210, file: !241, line: 700, column: 25)
!4271 = !DILocation(line: 700, column: 33, scope: !4270)
!4272 = !DILocation(line: 700, column: 35, scope: !4270)
!4273 = !DILocation(line: 700, column: 30, scope: !4270)
!4274 = !DILocation(line: 700, column: 25, scope: !4210)
!4275 = !DILocation(line: 701, column: 23, scope: !4270)
!4276 = !DILocation(line: 702, column: 21, scope: !4210)
!4277 = !DILocation(line: 702, column: 21, scope: !4278)
!4278 = distinct !DILexicalBlock(scope: !4279, file: !241, line: 702, column: 21)
!4279 = distinct !DILexicalBlock(scope: !4210, file: !241, line: 702, column: 21)
!4280 = !DILocation(line: 702, column: 21, scope: !4279)
!4281 = !DILocation(line: 702, column: 21, scope: !4282)
!4282 = distinct !DILexicalBlock(scope: !4278, file: !241, line: 702, column: 21)
!4283 = !DILocation(line: 702, column: 21, scope: !4284)
!4284 = distinct !DILexicalBlock(scope: !4285, file: !241, line: 702, column: 21)
!4285 = distinct !DILexicalBlock(scope: !4282, file: !241, line: 702, column: 21)
!4286 = !DILocation(line: 702, column: 21, scope: !4285)
!4287 = !DILocation(line: 702, column: 21, scope: !4288)
!4288 = distinct !DILexicalBlock(scope: !4289, file: !241, line: 702, column: 21)
!4289 = distinct !DILexicalBlock(scope: !4282, file: !241, line: 702, column: 21)
!4290 = !DILocation(line: 702, column: 21, scope: !4289)
!4291 = !DILocation(line: 703, column: 21, scope: !4210)
!4292 = !DILocation(line: 703, column: 21, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4294, file: !241, line: 703, column: 21)
!4294 = distinct !DILexicalBlock(scope: !4210, file: !241, line: 703, column: 21)
!4295 = !DILocation(line: 703, column: 21, scope: !4294)
!4296 = !DILocation(line: 704, column: 25, scope: !4210)
!4297 = !DILocation(line: 704, column: 29, scope: !4210)
!4298 = !DILocation(line: 704, column: 23, scope: !4210)
!4299 = !DILocation(line: 686, column: 17, scope: !4211)
!4300 = distinct !{!4300, !4301, !4302}
!4301 = !DILocation(line: 686, column: 17, scope: !4212)
!4302 = !DILocation(line: 705, column: 19, scope: !4212)
!4303 = !DILocation(line: 707, column: 17, scope: !4202)
!4304 = !DILocation(line: 710, column: 9, scope: !3805)
!4305 = !DILocation(line: 712, column: 16, scope: !4306)
!4306 = distinct !DILexicalBlock(scope: !3751, file: !241, line: 712, column: 11)
!4307 = !DILocation(line: 712, column: 34, scope: !4306)
!4308 = !DILocation(line: 712, column: 37, scope: !4306)
!4309 = !DILocation(line: 712, column: 51, scope: !4306)
!4310 = !DILocation(line: 713, column: 15, scope: !4306)
!4311 = !DILocation(line: 713, column: 18, scope: !4306)
!4312 = !DILocation(line: 714, column: 14, scope: !4306)
!4313 = !DILocation(line: 714, column: 17, scope: !4306)
!4314 = !DILocation(line: 715, column: 14, scope: !4306)
!4315 = !DILocation(line: 715, column: 17, scope: !4306)
!4316 = !DILocation(line: 715, column: 33, scope: !4306)
!4317 = !DILocation(line: 715, column: 35, scope: !4306)
!4318 = !DILocation(line: 715, column: 51, scope: !4306)
!4319 = !DILocation(line: 715, column: 53, scope: !4306)
!4320 = !DILocation(line: 715, column: 47, scope: !4306)
!4321 = !DILocation(line: 715, column: 65, scope: !4306)
!4322 = !DILocation(line: 716, column: 11, scope: !4306)
!4323 = !DILocation(line: 716, column: 15, scope: !4306)
!4324 = !DILocation(line: 712, column: 11, scope: !3751)
!4325 = !DILocation(line: 717, column: 9, scope: !4306)
!4326 = !DILabel(scope: !3751, name: "store_escape", file: !241, line: 719)
!4327 = !DILocation(line: 719, column: 5, scope: !3751)
!4328 = !DILocation(line: 720, column: 7, scope: !3751)
!4329 = !DILocation(line: 720, column: 7, scope: !4330)
!4330 = distinct !DILexicalBlock(scope: !4331, file: !241, line: 720, column: 7)
!4331 = distinct !DILexicalBlock(scope: !3751, file: !241, line: 720, column: 7)
!4332 = !DILocation(line: 720, column: 7, scope: !4331)
!4333 = !DILocation(line: 720, column: 7, scope: !4334)
!4334 = distinct !DILexicalBlock(scope: !4331, file: !241, line: 720, column: 7)
!4335 = !DILocation(line: 720, column: 7, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4334, file: !241, line: 720, column: 7)
!4337 = !DILocation(line: 720, column: 7, scope: !4338)
!4338 = distinct !DILexicalBlock(scope: !4339, file: !241, line: 720, column: 7)
!4339 = distinct !DILexicalBlock(scope: !4336, file: !241, line: 720, column: 7)
!4340 = !DILocation(line: 720, column: 7, scope: !4339)
!4341 = !DILocation(line: 720, column: 7, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4343, file: !241, line: 720, column: 7)
!4343 = distinct !DILexicalBlock(scope: !4336, file: !241, line: 720, column: 7)
!4344 = !DILocation(line: 720, column: 7, scope: !4343)
!4345 = !DILocation(line: 720, column: 7, scope: !4346)
!4346 = distinct !DILexicalBlock(scope: !4347, file: !241, line: 720, column: 7)
!4347 = distinct !DILexicalBlock(scope: !4336, file: !241, line: 720, column: 7)
!4348 = !DILocation(line: 720, column: 7, scope: !4347)
!4349 = !DILocation(line: 720, column: 7, scope: !4350)
!4350 = distinct !DILexicalBlock(scope: !4351, file: !241, line: 720, column: 7)
!4351 = distinct !DILexicalBlock(scope: !4331, file: !241, line: 720, column: 7)
!4352 = !DILocation(line: 720, column: 7, scope: !4351)
!4353 = !DILabel(scope: !3751, name: "store_c", file: !241, line: 722)
!4354 = !DILocation(line: 722, column: 5, scope: !3751)
!4355 = !DILocation(line: 723, column: 7, scope: !3751)
!4356 = !DILocation(line: 723, column: 7, scope: !4357)
!4357 = distinct !DILexicalBlock(scope: !4358, file: !241, line: 723, column: 7)
!4358 = distinct !DILexicalBlock(scope: !3751, file: !241, line: 723, column: 7)
!4359 = !DILocation(line: 723, column: 7, scope: !4358)
!4360 = !DILocation(line: 723, column: 7, scope: !4361)
!4361 = distinct !DILexicalBlock(scope: !4357, file: !241, line: 723, column: 7)
!4362 = !DILocation(line: 723, column: 7, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !4364, file: !241, line: 723, column: 7)
!4364 = distinct !DILexicalBlock(scope: !4361, file: !241, line: 723, column: 7)
!4365 = !DILocation(line: 723, column: 7, scope: !4364)
!4366 = !DILocation(line: 723, column: 7, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4368, file: !241, line: 723, column: 7)
!4368 = distinct !DILexicalBlock(scope: !4361, file: !241, line: 723, column: 7)
!4369 = !DILocation(line: 723, column: 7, scope: !4368)
!4370 = !DILocation(line: 724, column: 7, scope: !3751)
!4371 = !DILocation(line: 724, column: 7, scope: !4372)
!4372 = distinct !DILexicalBlock(scope: !4373, file: !241, line: 724, column: 7)
!4373 = distinct !DILexicalBlock(scope: !3751, file: !241, line: 724, column: 7)
!4374 = !DILocation(line: 724, column: 7, scope: !4373)
!4375 = !DILocation(line: 726, column: 13, scope: !4376)
!4376 = distinct !DILexicalBlock(scope: !3751, file: !241, line: 726, column: 11)
!4377 = !DILocation(line: 726, column: 11, scope: !3751)
!4378 = !DILocation(line: 727, column: 38, scope: !4376)
!4379 = !DILocation(line: 727, column: 9, scope: !4376)
!4380 = !DILocation(line: 728, column: 5, scope: !3751)
!4381 = !DILocation(line: 400, column: 75, scope: !3740)
!4382 = !DILocation(line: 400, column: 3, scope: !3740)
!4383 = distinct !{!4383, !3749, !4384}
!4384 = !DILocation(line: 728, column: 5, scope: !3737)
!4385 = !DILocation(line: 730, column: 7, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !3597, file: !241, line: 730, column: 7)
!4387 = !DILocation(line: 730, column: 11, scope: !4386)
!4388 = !DILocation(line: 730, column: 16, scope: !4386)
!4389 = !DILocation(line: 730, column: 19, scope: !4386)
!4390 = !DILocation(line: 730, column: 33, scope: !4386)
!4391 = !DILocation(line: 731, column: 7, scope: !4386)
!4392 = !DILocation(line: 731, column: 10, scope: !4386)
!4393 = !DILocation(line: 730, column: 7, scope: !3597)
!4394 = !DILocation(line: 732, column: 5, scope: !4386)
!4395 = !DILocation(line: 738, column: 7, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !3597, file: !241, line: 738, column: 7)
!4397 = !DILocation(line: 738, column: 21, scope: !4396)
!4398 = !DILocation(line: 738, column: 51, scope: !4396)
!4399 = !DILocation(line: 738, column: 56, scope: !4396)
!4400 = !DILocation(line: 739, column: 7, scope: !4396)
!4401 = !DILocation(line: 739, column: 10, scope: !4396)
!4402 = !DILocation(line: 738, column: 7, scope: !3597)
!4403 = !DILocation(line: 741, column: 11, scope: !4404)
!4404 = distinct !DILexicalBlock(scope: !4405, file: !241, line: 741, column: 11)
!4405 = distinct !DILexicalBlock(scope: !4396, file: !241, line: 740, column: 5)
!4406 = !DILocation(line: 741, column: 11, scope: !4405)
!4407 = !DILocation(line: 742, column: 42, scope: !4404)
!4408 = !DILocation(line: 742, column: 50, scope: !4404)
!4409 = !DILocation(line: 742, column: 67, scope: !4404)
!4410 = !DILocation(line: 742, column: 72, scope: !4404)
!4411 = !DILocation(line: 744, column: 42, scope: !4404)
!4412 = !DILocation(line: 744, column: 49, scope: !4404)
!4413 = !DILocation(line: 745, column: 42, scope: !4404)
!4414 = !DILocation(line: 745, column: 54, scope: !4404)
!4415 = !DILocation(line: 742, column: 16, scope: !4404)
!4416 = !DILocation(line: 742, column: 9, scope: !4404)
!4417 = !DILocation(line: 746, column: 18, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4404, file: !241, line: 746, column: 16)
!4419 = !DILocation(line: 746, column: 29, scope: !4418)
!4420 = !DILocation(line: 746, column: 32, scope: !4418)
!4421 = !DILocation(line: 746, column: 16, scope: !4404)
!4422 = !DILocation(line: 749, column: 24, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4418, file: !241, line: 747, column: 9)
!4424 = !DILocation(line: 749, column: 22, scope: !4423)
!4425 = !DILocation(line: 750, column: 15, scope: !4423)
!4426 = !DILocation(line: 751, column: 11, scope: !4423)
!4427 = !DILocation(line: 753, column: 5, scope: !4405)
!4428 = !DILocation(line: 755, column: 7, scope: !4429)
!4429 = distinct !DILexicalBlock(scope: !3597, file: !241, line: 755, column: 7)
!4430 = !DILocation(line: 755, column: 20, scope: !4429)
!4431 = !DILocation(line: 755, column: 24, scope: !4429)
!4432 = !DILocation(line: 755, column: 7, scope: !3597)
!4433 = !DILocation(line: 756, column: 5, scope: !4429)
!4434 = !DILocation(line: 756, column: 13, scope: !4435)
!4435 = distinct !DILexicalBlock(scope: !4436, file: !241, line: 756, column: 5)
!4436 = distinct !DILexicalBlock(scope: !4429, file: !241, line: 756, column: 5)
!4437 = !DILocation(line: 756, column: 12, scope: !4435)
!4438 = !DILocation(line: 756, column: 5, scope: !4436)
!4439 = !DILocation(line: 757, column: 7, scope: !4435)
!4440 = !DILocation(line: 757, column: 7, scope: !4441)
!4441 = distinct !DILexicalBlock(scope: !4442, file: !241, line: 757, column: 7)
!4442 = distinct !DILexicalBlock(scope: !4435, file: !241, line: 757, column: 7)
!4443 = !DILocation(line: 757, column: 7, scope: !4442)
!4444 = !DILocation(line: 756, column: 39, scope: !4435)
!4445 = !DILocation(line: 756, column: 5, scope: !4435)
!4446 = distinct !{!4446, !4438, !4447}
!4447 = !DILocation(line: 757, column: 7, scope: !4436)
!4448 = !DILocation(line: 759, column: 7, scope: !4449)
!4449 = distinct !DILexicalBlock(scope: !3597, file: !241, line: 759, column: 7)
!4450 = !DILocation(line: 759, column: 13, scope: !4449)
!4451 = !DILocation(line: 759, column: 11, scope: !4449)
!4452 = !DILocation(line: 759, column: 7, scope: !3597)
!4453 = !DILocation(line: 760, column: 5, scope: !4449)
!4454 = !DILocation(line: 760, column: 12, scope: !4449)
!4455 = !DILocation(line: 760, column: 17, scope: !4449)
!4456 = !DILocation(line: 761, column: 10, scope: !3597)
!4457 = !DILocation(line: 761, column: 3, scope: !3597)
!4458 = !DILabel(scope: !3597, name: "force_outer_quoting_style", file: !241, line: 763)
!4459 = !DILocation(line: 763, column: 2, scope: !3597)
!4460 = !DILocation(line: 766, column: 7, scope: !4461)
!4461 = distinct !DILexicalBlock(scope: !3597, file: !241, line: 766, column: 7)
!4462 = !DILocation(line: 766, column: 21, scope: !4461)
!4463 = !DILocation(line: 766, column: 51, scope: !4461)
!4464 = !DILocation(line: 766, column: 54, scope: !4461)
!4465 = !DILocation(line: 766, column: 7, scope: !3597)
!4466 = !DILocation(line: 767, column: 19, scope: !4461)
!4467 = !DILocation(line: 767, column: 5, scope: !4461)
!4468 = !DILocation(line: 768, column: 36, scope: !3597)
!4469 = !DILocation(line: 768, column: 44, scope: !3597)
!4470 = !DILocation(line: 768, column: 56, scope: !3597)
!4471 = !DILocation(line: 768, column: 61, scope: !3597)
!4472 = !DILocation(line: 769, column: 36, scope: !3597)
!4473 = !DILocation(line: 770, column: 36, scope: !3597)
!4474 = !DILocation(line: 770, column: 42, scope: !3597)
!4475 = !DILocation(line: 771, column: 36, scope: !3597)
!4476 = !DILocation(line: 771, column: 48, scope: !3597)
!4477 = !DILocation(line: 768, column: 10, scope: !3597)
!4478 = !DILocation(line: 768, column: 3, scope: !3597)
!4479 = !DILocation(line: 772, column: 1, scope: !3597)
!4480 = !DILocalVariable(name: "buffer", arg: 1, scope: !4481, file: !241, line: 256, type: !6)
!4481 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !241, file: !241, line: 256, type: !3598, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4482, retainedNodes: !4)
!4482 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4483, nameTableKind: None)
!4483 = !{!4484, !4486, !4488, !4497, !4499, !4501, !4508, !4510}
!4484 = !DIGlobalVariableExpression(var: !4485, expr: !DIExpression())
!4485 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4482, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4486 = !DIGlobalVariableExpression(var: !4487, expr: !DIExpression())
!4487 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4482, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4488 = !DIGlobalVariableExpression(var: !4489, expr: !DIExpression())
!4489 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4482, file: !241, line: 1052, type: !4490, isLocal: false, isDefinition: true)
!4490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4491)
!4491 = !{!4492, !4493, !4494, !4495, !4496}
!4492 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4490, file: !241, line: 68, baseType: !223, size: 32)
!4493 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4490, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4494 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4490, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4495 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4490, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4496 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4490, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4497 = !DIGlobalVariableExpression(var: !4498, expr: !DIExpression())
!4498 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4482, file: !241, line: 116, type: !4490, isLocal: true, isDefinition: true)
!4499 = !DIGlobalVariableExpression(var: !4500, expr: !DIExpression())
!4500 = distinct !DIGlobalVariable(name: "slot0", scope: !4482, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4501 = !DIGlobalVariableExpression(var: !4502, expr: !DIExpression())
!4502 = distinct !DIGlobalVariable(name: "slotvec", scope: !4482, file: !241, line: 845, type: !4503, isLocal: true, isDefinition: true)
!4503 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4504, size: 64)
!4504 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4505)
!4505 = !{!4506, !4507}
!4506 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4504, file: !241, line: 836, baseType: !110, size: 64)
!4507 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4504, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4508 = !DIGlobalVariableExpression(var: !4509, expr: !DIExpression())
!4509 = distinct !DIGlobalVariable(name: "nslots", scope: !4482, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4510 = !DIGlobalVariableExpression(var: !4511, expr: !DIExpression())
!4511 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4482, file: !241, line: 844, type: !4504, isLocal: true, isDefinition: true)
!4512 = !DILocalVariable(name: "buffersize", arg: 2, scope: !4481, file: !241, line: 256, type: !110)
!4513 = !DILocalVariable(name: "arg", arg: 3, scope: !4481, file: !241, line: 257, type: !49)
!4514 = !DILocalVariable(name: "argsize", arg: 4, scope: !4481, file: !241, line: 257, type: !110)
!4515 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !4481, file: !241, line: 258, type: !223)
!4516 = !DILocalVariable(name: "flags", arg: 6, scope: !4481, file: !241, line: 258, type: !53)
!4517 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !4481, file: !241, line: 259, type: !3600)
!4518 = !DILocalVariable(name: "left_quote", arg: 8, scope: !4481, file: !241, line: 260, type: !49)
!4519 = !DILocalVariable(name: "right_quote", arg: 9, scope: !4481, file: !241, line: 261, type: !49)
!4520 = !DILocalVariable(name: "i", scope: !4481, file: !241, line: 263, type: !110)
!4521 = !DILocalVariable(name: "len", scope: !4481, file: !241, line: 264, type: !110)
!4522 = !DILocalVariable(name: "orig_buffersize", scope: !4481, file: !241, line: 265, type: !110)
!4523 = !DILocalVariable(name: "quote_string", scope: !4481, file: !241, line: 266, type: !49)
!4524 = !DILocalVariable(name: "quote_string_len", scope: !4481, file: !241, line: 267, type: !110)
!4525 = !DILocalVariable(name: "backslash_escapes", scope: !4481, file: !241, line: 268, type: !18)
!4526 = !DILocalVariable(name: "unibyte_locale", scope: !4481, file: !241, line: 269, type: !18)
!4527 = !DILocalVariable(name: "elide_outer_quotes", scope: !4481, file: !241, line: 270, type: !18)
!4528 = !DILocalVariable(name: "pending_shell_escape_end", scope: !4481, file: !241, line: 271, type: !18)
!4529 = !DILocalVariable(name: "encountered_single_quote", scope: !4481, file: !241, line: 272, type: !18)
!4530 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !4481, file: !241, line: 273, type: !18)
!4531 = distinct !DISubprogram(name: "gettext_quote", scope: !241, file: !241, line: 207, type: !4532, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4532 = !DISubroutineType(types: !4533)
!4533 = !{!49, !49, !223}
!4534 = !DILocalVariable(name: "msgid", arg: 1, scope: !4531, file: !241, line: 207, type: !49)
!4535 = !DILocation(line: 207, column: 28, scope: !4531)
!4536 = !DILocalVariable(name: "s", arg: 2, scope: !4531, file: !241, line: 207, type: !223)
!4537 = !DILocation(line: 207, column: 54, scope: !4531)
!4538 = !DILocalVariable(name: "translation", scope: !4531, file: !241, line: 209, type: !49)
!4539 = !DILocation(line: 209, column: 15, scope: !4531)
!4540 = !DILocation(line: 209, column: 29, scope: !4531)
!4541 = !DILocalVariable(name: "locale_code", scope: !4531, file: !241, line: 210, type: !49)
!4542 = !DILocation(line: 210, column: 15, scope: !4531)
!4543 = !DILocation(line: 212, column: 7, scope: !4544)
!4544 = distinct !DILexicalBlock(scope: !4531, file: !241, line: 212, column: 7)
!4545 = !DILocation(line: 212, column: 22, scope: !4544)
!4546 = !DILocation(line: 212, column: 19, scope: !4544)
!4547 = !DILocation(line: 212, column: 7, scope: !4531)
!4548 = !DILocation(line: 213, column: 12, scope: !4544)
!4549 = !DILocation(line: 213, column: 5, scope: !4544)
!4550 = !DILocation(line: 233, column: 17, scope: !4531)
!4551 = !DILocation(line: 233, column: 15, scope: !4531)
!4552 = !DILocation(line: 234, column: 7, scope: !4553)
!4553 = distinct !DILexicalBlock(scope: !4531, file: !241, line: 234, column: 7)
!4554 = !DILocation(line: 234, column: 7, scope: !4531)
!4555 = !DILocation(line: 235, column: 12, scope: !4553)
!4556 = !DILocation(line: 235, column: 21, scope: !4553)
!4557 = !DILocation(line: 235, column: 5, scope: !4553)
!4558 = !DILocation(line: 236, column: 7, scope: !4559)
!4559 = distinct !DILexicalBlock(scope: !4531, file: !241, line: 236, column: 7)
!4560 = !DILocation(line: 236, column: 7, scope: !4531)
!4561 = !DILocation(line: 237, column: 12, scope: !4559)
!4562 = !DILocation(line: 237, column: 21, scope: !4559)
!4563 = !DILocation(line: 237, column: 5, scope: !4559)
!4564 = !DILocation(line: 239, column: 11, scope: !4531)
!4565 = !DILocation(line: 239, column: 13, scope: !4531)
!4566 = !DILocation(line: 239, column: 3, scope: !4531)
!4567 = !DILocation(line: 240, column: 1, scope: !4531)
!4568 = !DILocalVariable(name: "msgid", arg: 1, scope: !4569, file: !241, line: 207, type: !49)
!4569 = distinct !DISubprogram(name: "gettext_quote", scope: !241, file: !241, line: 207, type: !4532, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4570, retainedNodes: !4)
!4570 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4571, nameTableKind: None)
!4571 = !{!4572, !4574, !4576, !4585, !4587, !4589, !4596, !4598}
!4572 = !DIGlobalVariableExpression(var: !4573, expr: !DIExpression())
!4573 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4570, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4574 = !DIGlobalVariableExpression(var: !4575, expr: !DIExpression())
!4575 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4570, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4576 = !DIGlobalVariableExpression(var: !4577, expr: !DIExpression())
!4577 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4570, file: !241, line: 1052, type: !4578, isLocal: false, isDefinition: true)
!4578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4579)
!4579 = !{!4580, !4581, !4582, !4583, !4584}
!4580 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4578, file: !241, line: 68, baseType: !223, size: 32)
!4581 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4578, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4582 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4578, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4583 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4578, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4584 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4578, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4585 = !DIGlobalVariableExpression(var: !4586, expr: !DIExpression())
!4586 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4570, file: !241, line: 116, type: !4578, isLocal: true, isDefinition: true)
!4587 = !DIGlobalVariableExpression(var: !4588, expr: !DIExpression())
!4588 = distinct !DIGlobalVariable(name: "slot0", scope: !4570, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4589 = !DIGlobalVariableExpression(var: !4590, expr: !DIExpression())
!4590 = distinct !DIGlobalVariable(name: "slotvec", scope: !4570, file: !241, line: 845, type: !4591, isLocal: true, isDefinition: true)
!4591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4592, size: 64)
!4592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4593)
!4593 = !{!4594, !4595}
!4594 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4592, file: !241, line: 836, baseType: !110, size: 64)
!4595 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4592, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4596 = !DIGlobalVariableExpression(var: !4597, expr: !DIExpression())
!4597 = distinct !DIGlobalVariable(name: "nslots", scope: !4570, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4598 = !DIGlobalVariableExpression(var: !4599, expr: !DIExpression())
!4599 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4570, file: !241, line: 844, type: !4592, isLocal: true, isDefinition: true)
!4600 = !DILocalVariable(name: "s", arg: 2, scope: !4569, file: !241, line: 207, type: !223)
!4601 = !DILocalVariable(name: "translation", scope: !4569, file: !241, line: 209, type: !49)
!4602 = !DILocalVariable(name: "locale_code", scope: !4569, file: !241, line: 210, type: !49)
!4603 = distinct !DISubprogram(name: "quotearg_char", scope: !241, file: !241, line: 991, type: !4604, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4604 = !DISubroutineType(types: !4605)
!4605 = !{!6, !49, !7}
!4606 = !DILocalVariable(name: "arg", arg: 1, scope: !4603, file: !241, line: 991, type: !49)
!4607 = !DILocation(line: 991, column: 28, scope: !4603)
!4608 = !DILocalVariable(name: "ch", arg: 2, scope: !4603, file: !241, line: 991, type: !7)
!4609 = !DILocation(line: 991, column: 38, scope: !4603)
!4610 = !DILocation(line: 993, column: 29, scope: !4603)
!4611 = !DILocation(line: 993, column: 44, scope: !4603)
!4612 = !DILocation(line: 993, column: 10, scope: !4603)
!4613 = !DILocation(line: 993, column: 3, scope: !4603)
!4614 = distinct !DISubprogram(name: "quotearg_colon", scope: !241, file: !241, line: 997, type: !3055, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4615 = !DILocalVariable(name: "arg", arg: 1, scope: !4614, file: !241, line: 997, type: !49)
!4616 = !DILocation(line: 997, column: 29, scope: !4614)
!4617 = !DILocation(line: 999, column: 25, scope: !4614)
!4618 = !DILocation(line: 999, column: 10, scope: !4614)
!4619 = !DILocation(line: 999, column: 3, scope: !4614)
!4620 = !DILocalVariable(name: "arg", arg: 1, scope: !4621, file: !241, line: 997, type: !49)
!4621 = distinct !DISubprogram(name: "quotearg_colon", scope: !241, file: !241, line: 997, type: !3055, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4622, retainedNodes: !4)
!4622 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4623, nameTableKind: None)
!4623 = !{!4624, !4626, !4628, !4637, !4639, !4641, !4648, !4650}
!4624 = !DIGlobalVariableExpression(var: !4625, expr: !DIExpression())
!4625 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4622, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4626 = !DIGlobalVariableExpression(var: !4627, expr: !DIExpression())
!4627 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4622, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4628 = !DIGlobalVariableExpression(var: !4629, expr: !DIExpression())
!4629 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4622, file: !241, line: 1052, type: !4630, isLocal: false, isDefinition: true)
!4630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4631)
!4631 = !{!4632, !4633, !4634, !4635, !4636}
!4632 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4630, file: !241, line: 68, baseType: !223, size: 32)
!4633 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4630, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4634 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4630, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4635 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4630, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4636 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4630, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4637 = !DIGlobalVariableExpression(var: !4638, expr: !DIExpression())
!4638 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4622, file: !241, line: 116, type: !4630, isLocal: true, isDefinition: true)
!4639 = !DIGlobalVariableExpression(var: !4640, expr: !DIExpression())
!4640 = distinct !DIGlobalVariable(name: "slot0", scope: !4622, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4641 = !DIGlobalVariableExpression(var: !4642, expr: !DIExpression())
!4642 = distinct !DIGlobalVariable(name: "slotvec", scope: !4622, file: !241, line: 845, type: !4643, isLocal: true, isDefinition: true)
!4643 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4644, size: 64)
!4644 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4645)
!4645 = !{!4646, !4647}
!4646 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4644, file: !241, line: 836, baseType: !110, size: 64)
!4647 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4644, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4648 = !DIGlobalVariableExpression(var: !4649, expr: !DIExpression())
!4649 = distinct !DIGlobalVariable(name: "nslots", scope: !4622, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4650 = !DIGlobalVariableExpression(var: !4651, expr: !DIExpression())
!4651 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4622, file: !241, line: 844, type: !4644, isLocal: true, isDefinition: true)
!4652 = distinct !DISubprogram(name: "quotearg_n_style_colon", scope: !241, file: !241, line: 1009, type: !4653, scopeLine: 1010, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4653 = !DISubroutineType(types: !4654)
!4654 = !{!6, !53, !223, !49}
!4655 = !DILocalVariable(name: "n", arg: 1, scope: !4652, file: !241, line: 1009, type: !53)
!4656 = !DILocation(line: 1009, column: 29, scope: !4652)
!4657 = !DILocalVariable(name: "s", arg: 2, scope: !4652, file: !241, line: 1009, type: !223)
!4658 = !DILocation(line: 1009, column: 51, scope: !4652)
!4659 = !DILocalVariable(name: "arg", arg: 3, scope: !4652, file: !241, line: 1009, type: !49)
!4660 = !DILocation(line: 1009, column: 66, scope: !4652)
!4661 = !DILocalVariable(name: "options", scope: !4652, file: !241, line: 1011, type: !254)
!4662 = !DILocation(line: 1011, column: 26, scope: !4652)
!4663 = !DILocation(line: 1012, column: 41, scope: !4652)
!4664 = !DILocation(line: 1012, column: 13, scope: !4652)
!4665 = !DILocation(line: 1013, column: 3, scope: !4652)
!4666 = !DILocation(line: 1014, column: 30, scope: !4652)
!4667 = !DILocation(line: 1014, column: 33, scope: !4652)
!4668 = !DILocation(line: 1014, column: 10, scope: !4652)
!4669 = !DILocation(line: 1014, column: 3, scope: !4652)
!4670 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !241, file: !241, line: 193, type: !4671, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4671 = !DISubroutineType(types: !4672)
!4672 = !{!254, !223}
!4673 = !DILocalVariable(name: "style", arg: 1, scope: !4670, file: !241, line: 193, type: !223)
!4674 = !DILocation(line: 193, column: 48, scope: !4670)
!4675 = !DILocalVariable(name: "o", scope: !4670, file: !241, line: 195, type: !254)
!4676 = !DILocation(line: 195, column: 26, scope: !4670)
!4677 = !DILocation(line: 196, column: 7, scope: !4678)
!4678 = distinct !DILexicalBlock(scope: !4670, file: !241, line: 196, column: 7)
!4679 = !DILocation(line: 196, column: 13, scope: !4678)
!4680 = !DILocation(line: 196, column: 7, scope: !4670)
!4681 = !DILocation(line: 197, column: 5, scope: !4678)
!4682 = !DILocation(line: 198, column: 13, scope: !4670)
!4683 = !DILocation(line: 198, column: 5, scope: !4670)
!4684 = !DILocation(line: 198, column: 11, scope: !4670)
!4685 = !DILocation(line: 199, column: 3, scope: !4670)
!4686 = !DILocalVariable(name: "style", arg: 1, scope: !4687, file: !241, line: 193, type: !223)
!4687 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !241, file: !241, line: 193, type: !4688, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4697, retainedNodes: !4)
!4688 = !DISubroutineType(types: !4689)
!4689 = !{!4690, !223}
!4690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4691)
!4691 = !{!4692, !4693, !4694, !4695, !4696}
!4692 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4690, file: !241, line: 68, baseType: !223, size: 32)
!4693 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4690, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4694 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4690, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4695 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4690, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4696 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4690, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4697 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4698, nameTableKind: None)
!4698 = !{!4699, !4701, !4703, !4705, !4707, !4709, !4716, !4718}
!4699 = !DIGlobalVariableExpression(var: !4700, expr: !DIExpression())
!4700 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4697, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4701 = !DIGlobalVariableExpression(var: !4702, expr: !DIExpression())
!4702 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4697, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4703 = !DIGlobalVariableExpression(var: !4704, expr: !DIExpression())
!4704 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4697, file: !241, line: 1052, type: !4690, isLocal: false, isDefinition: true)
!4705 = !DIGlobalVariableExpression(var: !4706, expr: !DIExpression())
!4706 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4697, file: !241, line: 116, type: !4690, isLocal: true, isDefinition: true)
!4707 = !DIGlobalVariableExpression(var: !4708, expr: !DIExpression())
!4708 = distinct !DIGlobalVariable(name: "slot0", scope: !4697, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4709 = !DIGlobalVariableExpression(var: !4710, expr: !DIExpression())
!4710 = distinct !DIGlobalVariable(name: "slotvec", scope: !4697, file: !241, line: 845, type: !4711, isLocal: true, isDefinition: true)
!4711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4712, size: 64)
!4712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4713)
!4713 = !{!4714, !4715}
!4714 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4712, file: !241, line: 836, baseType: !110, size: 64)
!4715 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4712, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4716 = !DIGlobalVariableExpression(var: !4717, expr: !DIExpression())
!4717 = distinct !DIGlobalVariable(name: "nslots", scope: !4697, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4718 = !DIGlobalVariableExpression(var: !4719, expr: !DIExpression())
!4719 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4697, file: !241, line: 844, type: !4712, isLocal: true, isDefinition: true)
!4720 = !DILocalVariable(name: "o", scope: !4687, file: !241, line: 195, type: !4690)
!4721 = distinct !DISubprogram(name: "quote_n_mem", scope: !241, file: !241, line: 1061, type: !4722, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4722 = !DISubroutineType(types: !4723)
!4723 = !{!49, !53, !49, !110}
!4724 = !DILocalVariable(name: "n", arg: 1, scope: !4721, file: !241, line: 1061, type: !53)
!4725 = !DILocation(line: 1061, column: 18, scope: !4721)
!4726 = !DILocalVariable(name: "arg", arg: 2, scope: !4721, file: !241, line: 1061, type: !49)
!4727 = !DILocation(line: 1061, column: 33, scope: !4721)
!4728 = !DILocalVariable(name: "argsize", arg: 3, scope: !4721, file: !241, line: 1061, type: !110)
!4729 = !DILocation(line: 1061, column: 45, scope: !4721)
!4730 = !DILocation(line: 1063, column: 30, scope: !4721)
!4731 = !DILocation(line: 1063, column: 33, scope: !4721)
!4732 = !DILocation(line: 1063, column: 38, scope: !4721)
!4733 = !DILocation(line: 1063, column: 10, scope: !4721)
!4734 = !DILocation(line: 1063, column: 3, scope: !4721)
!4735 = distinct !DISubprogram(name: "quote_n", scope: !241, file: !241, line: 1073, type: !4736, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4736 = !DISubroutineType(types: !4737)
!4737 = !{!49, !53, !49}
!4738 = !DILocalVariable(name: "n", arg: 1, scope: !4735, file: !241, line: 1073, type: !53)
!4739 = !DILocation(line: 1073, column: 14, scope: !4735)
!4740 = !DILocalVariable(name: "arg", arg: 2, scope: !4735, file: !241, line: 1073, type: !49)
!4741 = !DILocation(line: 1073, column: 29, scope: !4735)
!4742 = !DILocation(line: 1075, column: 23, scope: !4735)
!4743 = !DILocation(line: 1075, column: 26, scope: !4735)
!4744 = !DILocation(line: 1075, column: 10, scope: !4735)
!4745 = !DILocation(line: 1075, column: 3, scope: !4735)
!4746 = !DILocalVariable(name: "n", arg: 1, scope: !4747, file: !241, line: 1073, type: !53)
!4747 = distinct !DISubprogram(name: "quote_n", scope: !241, file: !241, line: 1073, type: !4736, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4748, retainedNodes: !4)
!4748 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !237, globals: !4749, nameTableKind: None)
!4749 = !{!4750, !4752, !4754, !4763, !4765, !4767, !4774, !4776}
!4750 = !DIGlobalVariableExpression(var: !4751, expr: !DIExpression())
!4751 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !4748, file: !241, line: 85, type: !242, isLocal: false, isDefinition: true)
!4752 = !DIGlobalVariableExpression(var: !4753, expr: !DIExpression())
!4753 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !4748, file: !241, line: 101, type: !248, isLocal: false, isDefinition: true)
!4754 = !DIGlobalVariableExpression(var: !4755, expr: !DIExpression())
!4755 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !4748, file: !241, line: 1052, type: !4756, isLocal: false, isDefinition: true)
!4756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !241, line: 65, size: 448, elements: !4757)
!4757 = !{!4758, !4759, !4760, !4761, !4762}
!4758 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !4756, file: !241, line: 68, baseType: !223, size: 32)
!4759 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4756, file: !241, line: 71, baseType: !53, size: 32, offset: 32)
!4760 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !4756, file: !241, line: 75, baseType: !259, size: 256, offset: 64)
!4761 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !4756, file: !241, line: 78, baseType: !49, size: 64, offset: 320)
!4762 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !4756, file: !241, line: 81, baseType: !49, size: 64, offset: 384)
!4763 = !DIGlobalVariableExpression(var: !4764, expr: !DIExpression())
!4764 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !4748, file: !241, line: 116, type: !4756, isLocal: true, isDefinition: true)
!4765 = !DIGlobalVariableExpression(var: !4766, expr: !DIExpression())
!4766 = distinct !DIGlobalVariable(name: "slot0", scope: !4748, file: !241, line: 842, type: !87, isLocal: true, isDefinition: true)
!4767 = !DIGlobalVariableExpression(var: !4768, expr: !DIExpression())
!4768 = distinct !DIGlobalVariable(name: "slotvec", scope: !4748, file: !241, line: 845, type: !4769, isLocal: true, isDefinition: true)
!4769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4770, size: 64)
!4770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !241, line: 834, size: 128, elements: !4771)
!4771 = !{!4772, !4773}
!4772 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4770, file: !241, line: 836, baseType: !110, size: 64)
!4773 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !4770, file: !241, line: 837, baseType: !6, size: 64, offset: 64)
!4774 = !DIGlobalVariableExpression(var: !4775, expr: !DIExpression())
!4775 = distinct !DIGlobalVariable(name: "nslots", scope: !4748, file: !241, line: 843, type: !53, isLocal: true, isDefinition: true)
!4776 = !DIGlobalVariableExpression(var: !4777, expr: !DIExpression())
!4777 = distinct !DIGlobalVariable(name: "slotvec0", scope: !4748, file: !241, line: 844, type: !4770, isLocal: true, isDefinition: true)
!4778 = !DILocalVariable(name: "arg", arg: 2, scope: !4747, file: !241, line: 1073, type: !49)
!4779 = distinct !DISubprogram(name: "quote", scope: !241, file: !241, line: 1079, type: !4780, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4780 = !DISubroutineType(types: !4781)
!4781 = !{!49, !49}
!4782 = !DILocalVariable(name: "arg", arg: 1, scope: !4779, file: !241, line: 1079, type: !49)
!4783 = !DILocation(line: 1079, column: 20, scope: !4779)
!4784 = !DILocation(line: 1081, column: 22, scope: !4779)
!4785 = !DILocation(line: 1081, column: 10, scope: !4779)
!4786 = !DILocation(line: 1081, column: 3, scope: !4779)
!4787 = distinct !DISubprogram(name: "setlocale_null_r", scope: !4788, file: !4788, line: 269, type: !4789, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !296, retainedNodes: !4)
!4788 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4789 = !DISubroutineType(types: !4790)
!4790 = !{!53, !53, !6, !110}
!4791 = !DILocalVariable(name: "category", arg: 1, scope: !4787, file: !4788, line: 269, type: !53)
!4792 = !DILocation(line: 269, column: 23, scope: !4787)
!4793 = !DILocalVariable(name: "buf", arg: 2, scope: !4787, file: !4788, line: 269, type: !6)
!4794 = !DILocation(line: 269, column: 39, scope: !4787)
!4795 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4787, file: !4788, line: 269, type: !110)
!4796 = !DILocation(line: 269, column: 51, scope: !4787)
!4797 = !DILocation(line: 274, column: 35, scope: !4787)
!4798 = !DILocation(line: 274, column: 45, scope: !4787)
!4799 = !DILocation(line: 274, column: 50, scope: !4787)
!4800 = !DILocation(line: 274, column: 10, scope: !4787)
!4801 = !DILocation(line: 274, column: 3, scope: !4787)
!4802 = !DILocalVariable(name: "category", arg: 1, scope: !4803, file: !4788, line: 269, type: !53)
!4803 = distinct !DISubprogram(name: "setlocale_null_r", scope: !4788, file: !4788, line: 269, type: !4789, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4804, retainedNodes: !4)
!4804 = distinct !DICompileUnit(language: DW_LANG_C99, file: !297, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!4805 = !DILocalVariable(name: "buf", arg: 2, scope: !4803, file: !4788, line: 269, type: !6)
!4806 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4803, file: !4788, line: 269, type: !110)
!4807 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !4788, file: !4788, line: 91, type: !4789, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !296, retainedNodes: !4)
!4808 = !DILocalVariable(name: "category", arg: 1, scope: !4807, file: !4788, line: 91, type: !53)
!4809 = !DILocation(line: 91, column: 30, scope: !4807)
!4810 = !DILocalVariable(name: "buf", arg: 2, scope: !4807, file: !4788, line: 91, type: !6)
!4811 = !DILocation(line: 91, column: 46, scope: !4807)
!4812 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4807, file: !4788, line: 91, type: !110)
!4813 = !DILocation(line: 91, column: 58, scope: !4807)
!4814 = !DILocalVariable(name: "result", scope: !4807, file: !4788, line: 140, type: !49)
!4815 = !DILocation(line: 140, column: 15, scope: !4807)
!4816 = !DILocation(line: 140, column: 51, scope: !4807)
!4817 = !DILocation(line: 140, column: 24, scope: !4807)
!4818 = !DILocation(line: 142, column: 7, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4807, file: !4788, line: 142, column: 7)
!4820 = !DILocation(line: 142, column: 14, scope: !4819)
!4821 = !DILocation(line: 142, column: 7, scope: !4807)
!4822 = !DILocation(line: 145, column: 11, scope: !4823)
!4823 = distinct !DILexicalBlock(scope: !4824, file: !4788, line: 145, column: 11)
!4824 = distinct !DILexicalBlock(scope: !4819, file: !4788, line: 143, column: 5)
!4825 = !DILocation(line: 145, column: 19, scope: !4823)
!4826 = !DILocation(line: 145, column: 11, scope: !4824)
!4827 = !DILocation(line: 149, column: 9, scope: !4823)
!4828 = !DILocation(line: 149, column: 16, scope: !4823)
!4829 = !DILocation(line: 150, column: 7, scope: !4824)
!4830 = !DILocalVariable(name: "length", scope: !4831, file: !4788, line: 154, type: !110)
!4831 = distinct !DILexicalBlock(scope: !4819, file: !4788, line: 153, column: 5)
!4832 = !DILocation(line: 154, column: 14, scope: !4831)
!4833 = !DILocation(line: 154, column: 31, scope: !4831)
!4834 = !DILocation(line: 154, column: 23, scope: !4831)
!4835 = !DILocation(line: 155, column: 11, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4831, file: !4788, line: 155, column: 11)
!4837 = !DILocation(line: 155, column: 20, scope: !4836)
!4838 = !DILocation(line: 155, column: 18, scope: !4836)
!4839 = !DILocation(line: 155, column: 11, scope: !4831)
!4840 = !DILocation(line: 157, column: 19, scope: !4841)
!4841 = distinct !DILexicalBlock(scope: !4836, file: !4788, line: 156, column: 9)
!4842 = !DILocation(line: 157, column: 24, scope: !4841)
!4843 = !DILocation(line: 157, column: 32, scope: !4841)
!4844 = !DILocation(line: 157, column: 39, scope: !4841)
!4845 = !DILocation(line: 157, column: 11, scope: !4841)
!4846 = !DILocation(line: 158, column: 11, scope: !4841)
!4847 = !DILocation(line: 162, column: 15, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4849, file: !4788, line: 162, column: 15)
!4849 = distinct !DILexicalBlock(scope: !4836, file: !4788, line: 161, column: 9)
!4850 = !DILocation(line: 162, column: 23, scope: !4848)
!4851 = !DILocation(line: 162, column: 15, scope: !4849)
!4852 = !DILocation(line: 167, column: 23, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4848, file: !4788, line: 163, column: 13)
!4854 = !DILocation(line: 167, column: 28, scope: !4853)
!4855 = !DILocation(line: 167, column: 36, scope: !4853)
!4856 = !DILocation(line: 167, column: 44, scope: !4853)
!4857 = !DILocation(line: 167, column: 15, scope: !4853)
!4858 = !DILocation(line: 168, column: 15, scope: !4853)
!4859 = !DILocation(line: 168, column: 19, scope: !4853)
!4860 = !DILocation(line: 168, column: 27, scope: !4853)
!4861 = !DILocation(line: 168, column: 32, scope: !4853)
!4862 = !DILocation(line: 169, column: 13, scope: !4853)
!4863 = !DILocation(line: 170, column: 11, scope: !4849)
!4864 = !DILocation(line: 174, column: 1, scope: !4807)
!4865 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !4788, file: !4788, line: 60, type: !4866, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !296, retainedNodes: !4)
!4866 = !DISubroutineType(types: !4867)
!4867 = !{!49, !53}
!4868 = !DILocalVariable(name: "category", arg: 1, scope: !4865, file: !4788, line: 60, type: !53)
!4869 = !DILocation(line: 60, column: 32, scope: !4865)
!4870 = !DILocalVariable(name: "result", scope: !4865, file: !4788, line: 62, type: !49)
!4871 = !DILocation(line: 62, column: 15, scope: !4865)
!4872 = !DILocation(line: 62, column: 35, scope: !4865)
!4873 = !DILocation(line: 62, column: 24, scope: !4865)
!4874 = !DILocation(line: 87, column: 10, scope: !4865)
!4875 = !DILocation(line: 87, column: 3, scope: !4865)
!4876 = !DILocalVariable(name: "category", arg: 1, scope: !4877, file: !4788, line: 60, type: !53)
!4877 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !4788, file: !4788, line: 60, type: !4866, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4878, retainedNodes: !4)
!4878 = distinct !DICompileUnit(language: DW_LANG_C99, file: !297, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!4879 = !DILocalVariable(name: "result", scope: !4877, file: !4788, line: 62, type: !49)
!4880 = distinct !DISubprogram(name: "version_etc_arn", scope: !4881, file: !4881, line: 61, type: !4882, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !299, retainedNodes: !4)
!4881 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4882 = !DISubroutineType(types: !4883)
!4883 = !{null, !4884, !49, !49, !49, !4933, !110}
!4884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4885, size: 64)
!4885 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !4887)
!4886 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!4887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !4889)
!4888 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!4889 = !{!4890, !4891, !4892, !4893, !4894, !4895, !4896, !4897, !4898, !4899, !4900, !4901, !4902, !4905, !4907, !4908, !4909, !4910, !4911, !4913, !4917, !4920, !4922, !4925, !4928, !4929, !4930, !4931, !4932}
!4890 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4887, file: !4888, line: 51, baseType: !53, size: 32)
!4891 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4887, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!4892 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4887, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!4893 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4887, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!4894 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4887, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!4895 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4887, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!4896 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4887, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!4897 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4887, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!4898 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4887, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!4899 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4887, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!4900 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4887, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!4901 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4887, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!4902 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4887, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!4903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4904, size: 64)
!4904 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !4888, line: 36, flags: DIFlagFwdDecl)
!4905 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4887, file: !4888, line: 70, baseType: !4906, size: 64, offset: 832)
!4906 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4887, size: 64)
!4907 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4887, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!4908 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4887, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!4909 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4887, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!4910 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4887, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!4911 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4887, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!4912 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!4913 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4887, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!4914 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 8, elements: !4915)
!4915 = !{!4916}
!4916 = !DISubrange(count: 1)
!4917 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4887, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!4918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4919, size: 64)
!4919 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !4888, line: 43, baseType: null)
!4920 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4887, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!4921 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !12, line: 153, baseType: !13)
!4922 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4887, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!4923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4924, size: 64)
!4924 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !4888, line: 37, flags: DIFlagFwdDecl)
!4925 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4887, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!4926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4927, size: 64)
!4927 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !4888, line: 38, flags: DIFlagFwdDecl)
!4928 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4887, file: !4888, line: 93, baseType: !4906, size: 64, offset: 1344)
!4929 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4887, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!4930 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4887, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!4931 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4887, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!4932 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4887, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!4933 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !243, size: 64)
!4934 = !DILocalVariable(name: "stream", arg: 1, scope: !4880, file: !4881, line: 61, type: !4884)
!4935 = !DILocation(line: 61, column: 24, scope: !4880)
!4936 = !DILocalVariable(name: "command_name", arg: 2, scope: !4880, file: !4881, line: 62, type: !49)
!4937 = !DILocation(line: 62, column: 30, scope: !4880)
!4938 = !DILocalVariable(name: "package", arg: 3, scope: !4880, file: !4881, line: 62, type: !49)
!4939 = !DILocation(line: 62, column: 56, scope: !4880)
!4940 = !DILocalVariable(name: "version", arg: 4, scope: !4880, file: !4881, line: 63, type: !49)
!4941 = !DILocation(line: 63, column: 30, scope: !4880)
!4942 = !DILocalVariable(name: "authors", arg: 5, scope: !4880, file: !4881, line: 64, type: !4933)
!4943 = !DILocation(line: 64, column: 39, scope: !4880)
!4944 = !DILocalVariable(name: "n_authors", arg: 6, scope: !4880, file: !4881, line: 64, type: !110)
!4945 = !DILocation(line: 64, column: 55, scope: !4880)
!4946 = !DILocation(line: 66, column: 7, scope: !4947)
!4947 = distinct !DILexicalBlock(scope: !4880, file: !4881, line: 66, column: 7)
!4948 = !DILocation(line: 66, column: 7, scope: !4880)
!4949 = !DILocation(line: 67, column: 14, scope: !4947)
!4950 = !DILocation(line: 67, column: 38, scope: !4947)
!4951 = !DILocation(line: 67, column: 52, scope: !4947)
!4952 = !DILocation(line: 67, column: 61, scope: !4947)
!4953 = !DILocation(line: 67, column: 5, scope: !4947)
!4954 = !DILocation(line: 69, column: 14, scope: !4947)
!4955 = !DILocation(line: 69, column: 33, scope: !4947)
!4956 = !DILocation(line: 69, column: 42, scope: !4947)
!4957 = !DILocation(line: 69, column: 5, scope: !4947)
!4958 = !DILocation(line: 83, column: 12, scope: !4880)
!4959 = !DILocation(line: 83, column: 43, scope: !4880)
!4960 = !DILocation(line: 83, column: 3, scope: !4880)
!4961 = !DILocation(line: 85, column: 3, scope: !4880)
!4962 = !DILocation(line: 88, column: 12, scope: !4880)
!4963 = !DILocation(line: 88, column: 20, scope: !4880)
!4964 = !DILocation(line: 88, column: 3, scope: !4880)
!4965 = !DILocation(line: 95, column: 3, scope: !4880)
!4966 = !DILocation(line: 97, column: 11, scope: !4880)
!4967 = !DILocation(line: 97, column: 3, scope: !4880)
!4968 = !DILocation(line: 102, column: 7, scope: !4969)
!4969 = distinct !DILexicalBlock(scope: !4880, file: !4881, line: 98, column: 5)
!4970 = !DILocation(line: 105, column: 16, scope: !4969)
!4971 = !DILocation(line: 105, column: 24, scope: !4969)
!4972 = !DILocation(line: 105, column: 47, scope: !4969)
!4973 = !DILocation(line: 105, column: 7, scope: !4969)
!4974 = !DILocation(line: 106, column: 7, scope: !4969)
!4975 = !DILocation(line: 109, column: 16, scope: !4969)
!4976 = !DILocation(line: 109, column: 24, scope: !4969)
!4977 = !DILocation(line: 109, column: 54, scope: !4969)
!4978 = !DILocation(line: 109, column: 66, scope: !4969)
!4979 = !DILocation(line: 109, column: 7, scope: !4969)
!4980 = !DILocation(line: 110, column: 7, scope: !4969)
!4981 = !DILocation(line: 113, column: 16, scope: !4969)
!4982 = !DILocation(line: 113, column: 24, scope: !4969)
!4983 = !DILocation(line: 114, column: 16, scope: !4969)
!4984 = !DILocation(line: 114, column: 28, scope: !4969)
!4985 = !DILocation(line: 114, column: 40, scope: !4969)
!4986 = !DILocation(line: 113, column: 7, scope: !4969)
!4987 = !DILocation(line: 115, column: 7, scope: !4969)
!4988 = !DILocation(line: 120, column: 16, scope: !4969)
!4989 = !DILocation(line: 120, column: 24, scope: !4969)
!4990 = !DILocation(line: 121, column: 16, scope: !4969)
!4991 = !DILocation(line: 121, column: 28, scope: !4969)
!4992 = !DILocation(line: 121, column: 40, scope: !4969)
!4993 = !DILocation(line: 121, column: 52, scope: !4969)
!4994 = !DILocation(line: 120, column: 7, scope: !4969)
!4995 = !DILocation(line: 122, column: 7, scope: !4969)
!4996 = !DILocation(line: 127, column: 16, scope: !4969)
!4997 = !DILocation(line: 127, column: 24, scope: !4969)
!4998 = !DILocation(line: 128, column: 16, scope: !4969)
!4999 = !DILocation(line: 128, column: 28, scope: !4969)
!5000 = !DILocation(line: 128, column: 40, scope: !4969)
!5001 = !DILocation(line: 128, column: 52, scope: !4969)
!5002 = !DILocation(line: 128, column: 64, scope: !4969)
!5003 = !DILocation(line: 127, column: 7, scope: !4969)
!5004 = !DILocation(line: 129, column: 7, scope: !4969)
!5005 = !DILocation(line: 134, column: 16, scope: !4969)
!5006 = !DILocation(line: 134, column: 24, scope: !4969)
!5007 = !DILocation(line: 135, column: 16, scope: !4969)
!5008 = !DILocation(line: 135, column: 28, scope: !4969)
!5009 = !DILocation(line: 135, column: 40, scope: !4969)
!5010 = !DILocation(line: 135, column: 52, scope: !4969)
!5011 = !DILocation(line: 135, column: 64, scope: !4969)
!5012 = !DILocation(line: 136, column: 16, scope: !4969)
!5013 = !DILocation(line: 134, column: 7, scope: !4969)
!5014 = !DILocation(line: 137, column: 7, scope: !4969)
!5015 = !DILocation(line: 142, column: 16, scope: !4969)
!5016 = !DILocation(line: 142, column: 24, scope: !4969)
!5017 = !DILocation(line: 143, column: 16, scope: !4969)
!5018 = !DILocation(line: 143, column: 28, scope: !4969)
!5019 = !DILocation(line: 143, column: 40, scope: !4969)
!5020 = !DILocation(line: 143, column: 52, scope: !4969)
!5021 = !DILocation(line: 143, column: 64, scope: !4969)
!5022 = !DILocation(line: 144, column: 16, scope: !4969)
!5023 = !DILocation(line: 144, column: 28, scope: !4969)
!5024 = !DILocation(line: 142, column: 7, scope: !4969)
!5025 = !DILocation(line: 145, column: 7, scope: !4969)
!5026 = !DILocation(line: 150, column: 16, scope: !4969)
!5027 = !DILocation(line: 150, column: 24, scope: !4969)
!5028 = !DILocation(line: 152, column: 17, scope: !4969)
!5029 = !DILocation(line: 152, column: 29, scope: !4969)
!5030 = !DILocation(line: 152, column: 41, scope: !4969)
!5031 = !DILocation(line: 152, column: 53, scope: !4969)
!5032 = !DILocation(line: 152, column: 65, scope: !4969)
!5033 = !DILocation(line: 153, column: 17, scope: !4969)
!5034 = !DILocation(line: 153, column: 29, scope: !4969)
!5035 = !DILocation(line: 153, column: 41, scope: !4969)
!5036 = !DILocation(line: 150, column: 7, scope: !4969)
!5037 = !DILocation(line: 154, column: 7, scope: !4969)
!5038 = !DILocation(line: 159, column: 16, scope: !4969)
!5039 = !DILocation(line: 159, column: 24, scope: !4969)
!5040 = !DILocation(line: 161, column: 16, scope: !4969)
!5041 = !DILocation(line: 161, column: 28, scope: !4969)
!5042 = !DILocation(line: 161, column: 40, scope: !4969)
!5043 = !DILocation(line: 161, column: 52, scope: !4969)
!5044 = !DILocation(line: 161, column: 64, scope: !4969)
!5045 = !DILocation(line: 162, column: 16, scope: !4969)
!5046 = !DILocation(line: 162, column: 28, scope: !4969)
!5047 = !DILocation(line: 162, column: 40, scope: !4969)
!5048 = !DILocation(line: 162, column: 52, scope: !4969)
!5049 = !DILocation(line: 159, column: 7, scope: !4969)
!5050 = !DILocation(line: 163, column: 7, scope: !4969)
!5051 = !DILocation(line: 170, column: 16, scope: !4969)
!5052 = !DILocation(line: 170, column: 24, scope: !4969)
!5053 = !DILocation(line: 172, column: 17, scope: !4969)
!5054 = !DILocation(line: 172, column: 29, scope: !4969)
!5055 = !DILocation(line: 172, column: 41, scope: !4969)
!5056 = !DILocation(line: 172, column: 53, scope: !4969)
!5057 = !DILocation(line: 172, column: 65, scope: !4969)
!5058 = !DILocation(line: 173, column: 17, scope: !4969)
!5059 = !DILocation(line: 173, column: 29, scope: !4969)
!5060 = !DILocation(line: 173, column: 41, scope: !4969)
!5061 = !DILocation(line: 173, column: 53, scope: !4969)
!5062 = !DILocation(line: 170, column: 7, scope: !4969)
!5063 = !DILocation(line: 174, column: 7, scope: !4969)
!5064 = !DILocation(line: 176, column: 1, scope: !4880)
!5065 = !DILocalVariable(name: "stream", arg: 1, scope: !5066, file: !4881, line: 61, type: !5069)
!5066 = distinct !DISubprogram(name: "version_etc_arn", scope: !4881, file: !4881, line: 61, type: !5067, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5103, retainedNodes: !4)
!5067 = !DISubroutineType(types: !5068)
!5068 = !{null, !5069, !49, !49, !49, !4933, !110}
!5069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5070, size: 64)
!5070 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !5071)
!5071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !5072)
!5072 = !{!5073, !5074, !5075, !5076, !5077, !5078, !5079, !5080, !5081, !5082, !5083, !5084, !5085, !5086, !5088, !5089, !5090, !5091, !5092, !5093, !5094, !5095, !5096, !5097, !5098, !5099, !5100, !5101, !5102}
!5073 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5071, file: !4888, line: 51, baseType: !53, size: 32)
!5074 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5071, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!5075 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5071, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!5076 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5071, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!5077 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5071, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!5078 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5071, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!5079 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5071, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!5080 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5071, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!5081 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5071, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!5082 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5071, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!5083 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5071, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!5084 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5071, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!5085 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5071, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!5086 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5071, file: !4888, line: 70, baseType: !5087, size: 64, offset: 832)
!5087 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5071, size: 64)
!5088 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5071, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!5089 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5071, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!5090 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5071, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!5091 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5071, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!5092 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5071, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!5093 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5071, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!5094 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5071, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!5095 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5071, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!5096 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5071, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!5097 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5071, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!5098 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5071, file: !4888, line: 93, baseType: !5087, size: 64, offset: 1344)
!5099 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5071, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!5100 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5071, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!5101 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5071, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!5102 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5071, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!5103 = distinct !DICompileUnit(language: DW_LANG_C99, file: !300, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!5104 = !DILocalVariable(name: "command_name", arg: 2, scope: !5066, file: !4881, line: 62, type: !49)
!5105 = !DILocalVariable(name: "package", arg: 3, scope: !5066, file: !4881, line: 62, type: !49)
!5106 = !DILocalVariable(name: "version", arg: 4, scope: !5066, file: !4881, line: 63, type: !49)
!5107 = !DILocalVariable(name: "authors", arg: 5, scope: !5066, file: !4881, line: 64, type: !4933)
!5108 = !DILocalVariable(name: "n_authors", arg: 6, scope: !5066, file: !4881, line: 64, type: !110)
!5109 = distinct !DISubprogram(name: "version_etc_va", scope: !4881, file: !4881, line: 199, type: !5110, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !299, retainedNodes: !4)
!5110 = !DISubroutineType(types: !5111)
!5111 = !{null, !4884, !49, !49, !49, !5112}
!5112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5113, size: 64)
!5113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !300, line: 192, size: 192, elements: !5114)
!5114 = !{!5115, !5116, !5117, !5118}
!5115 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !5113, file: !300, line: 192, baseType: !180, size: 32)
!5116 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !5113, file: !300, line: 192, baseType: !180, size: 32, offset: 32)
!5117 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !5113, file: !300, line: 192, baseType: !8, size: 64, offset: 64)
!5118 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !5113, file: !300, line: 192, baseType: !8, size: 64, offset: 128)
!5119 = !DILocalVariable(name: "stream", arg: 1, scope: !5109, file: !4881, line: 199, type: !4884)
!5120 = !DILocation(line: 199, column: 23, scope: !5109)
!5121 = !DILocalVariable(name: "command_name", arg: 2, scope: !5109, file: !4881, line: 200, type: !49)
!5122 = !DILocation(line: 200, column: 29, scope: !5109)
!5123 = !DILocalVariable(name: "package", arg: 3, scope: !5109, file: !4881, line: 200, type: !49)
!5124 = !DILocation(line: 200, column: 55, scope: !5109)
!5125 = !DILocalVariable(name: "version", arg: 4, scope: !5109, file: !4881, line: 201, type: !49)
!5126 = !DILocation(line: 201, column: 29, scope: !5109)
!5127 = !DILocalVariable(name: "authors", arg: 5, scope: !5109, file: !4881, line: 201, type: !5112)
!5128 = !DILocation(line: 201, column: 46, scope: !5109)
!5129 = !DILocalVariable(name: "n_authors", scope: !5109, file: !4881, line: 203, type: !110)
!5130 = !DILocation(line: 203, column: 10, scope: !5109)
!5131 = !DILocalVariable(name: "authtab", scope: !5109, file: !4881, line: 204, type: !5132)
!5132 = !DICompositeType(tag: DW_TAG_array_type, baseType: !49, size: 640, elements: !250)
!5133 = !DILocation(line: 204, column: 15, scope: !5109)
!5134 = !DILocation(line: 206, column: 18, scope: !5135)
!5135 = distinct !DILexicalBlock(scope: !5109, file: !4881, line: 206, column: 3)
!5136 = !DILocation(line: 206, column: 8, scope: !5135)
!5137 = !DILocation(line: 207, column: 8, scope: !5138)
!5138 = distinct !DILexicalBlock(scope: !5135, file: !4881, line: 206, column: 3)
!5139 = !DILocation(line: 207, column: 18, scope: !5138)
!5140 = !DILocation(line: 208, column: 10, scope: !5138)
!5141 = !DILocation(line: 208, column: 35, scope: !5138)
!5142 = !DILocation(line: 208, column: 22, scope: !5138)
!5143 = !DILocation(line: 208, column: 14, scope: !5138)
!5144 = !DILocation(line: 208, column: 33, scope: !5138)
!5145 = !DILocation(line: 208, column: 67, scope: !5138)
!5146 = !DILocation(line: 0, scope: !5138)
!5147 = !DILocation(line: 206, column: 3, scope: !5135)
!5148 = !DILocation(line: 209, column: 17, scope: !5138)
!5149 = !DILocation(line: 206, column: 3, scope: !5138)
!5150 = distinct !{!5150, !5147, !5151}
!5151 = !DILocation(line: 210, column: 5, scope: !5135)
!5152 = !DILocation(line: 211, column: 20, scope: !5109)
!5153 = !DILocation(line: 211, column: 28, scope: !5109)
!5154 = !DILocation(line: 211, column: 42, scope: !5109)
!5155 = !DILocation(line: 211, column: 51, scope: !5109)
!5156 = !DILocation(line: 212, column: 20, scope: !5109)
!5157 = !DILocation(line: 212, column: 29, scope: !5109)
!5158 = !DILocation(line: 211, column: 3, scope: !5109)
!5159 = !DILocation(line: 213, column: 1, scope: !5109)
!5160 = distinct !DISubprogram(name: "version_etc", scope: !4881, file: !4881, line: 230, type: !5161, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !299, retainedNodes: !4)
!5161 = !DISubroutineType(types: !5162)
!5162 = !{null, !4884, !49, !49, !49, null}
!5163 = !DILocalVariable(name: "stream", arg: 1, scope: !5160, file: !4881, line: 230, type: !4884)
!5164 = !DILocation(line: 230, column: 20, scope: !5160)
!5165 = !DILocalVariable(name: "command_name", arg: 2, scope: !5160, file: !4881, line: 231, type: !49)
!5166 = !DILocation(line: 231, column: 26, scope: !5160)
!5167 = !DILocalVariable(name: "package", arg: 3, scope: !5160, file: !4881, line: 231, type: !49)
!5168 = !DILocation(line: 231, column: 52, scope: !5160)
!5169 = !DILocalVariable(name: "version", arg: 4, scope: !5160, file: !4881, line: 232, type: !49)
!5170 = !DILocation(line: 232, column: 26, scope: !5160)
!5171 = !DILocalVariable(name: "authors", scope: !5160, file: !4881, line: 234, type: !5172)
!5172 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !5173, line: 52, baseType: !5174)
!5173 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!5174 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !5175, line: 32, baseType: !5176)
!5175 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!5176 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !300, line: 234, baseType: !5177)
!5177 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5113, size: 192, elements: !4915)
!5178 = !DILocation(line: 234, column: 11, scope: !5160)
!5179 = !DILocation(line: 236, column: 3, scope: !5160)
!5180 = !DILocation(line: 237, column: 19, scope: !5160)
!5181 = !DILocation(line: 237, column: 27, scope: !5160)
!5182 = !DILocation(line: 237, column: 41, scope: !5160)
!5183 = !DILocation(line: 237, column: 50, scope: !5160)
!5184 = !DILocation(line: 237, column: 59, scope: !5160)
!5185 = !DILocation(line: 237, column: 3, scope: !5160)
!5186 = !DILocation(line: 238, column: 3, scope: !5160)
!5187 = !DILocation(line: 239, column: 1, scope: !5160)
!5188 = !DILocalVariable(name: "stream", arg: 1, scope: !5189, file: !4881, line: 230, type: !5192)
!5189 = distinct !DISubprogram(name: "version_etc", scope: !4881, file: !4881, line: 230, type: !5190, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5226, retainedNodes: !4)
!5190 = !DISubroutineType(types: !5191)
!5191 = !{null, !5192, !49, !49, !49, null}
!5192 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5193, size: 64)
!5193 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !5194)
!5194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !5195)
!5195 = !{!5196, !5197, !5198, !5199, !5200, !5201, !5202, !5203, !5204, !5205, !5206, !5207, !5208, !5209, !5211, !5212, !5213, !5214, !5215, !5216, !5217, !5218, !5219, !5220, !5221, !5222, !5223, !5224, !5225}
!5196 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5194, file: !4888, line: 51, baseType: !53, size: 32)
!5197 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5194, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!5198 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5194, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!5199 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5194, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!5200 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5194, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!5201 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5194, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!5202 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5194, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!5203 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5194, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!5204 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5194, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!5205 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5194, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!5206 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5194, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!5207 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5194, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!5208 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5194, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!5209 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5194, file: !4888, line: 70, baseType: !5210, size: 64, offset: 832)
!5210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5194, size: 64)
!5211 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5194, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!5212 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5194, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!5213 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5194, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!5214 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5194, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!5215 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5194, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!5216 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5194, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!5217 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5194, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!5218 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5194, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!5219 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5194, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!5220 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5194, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!5221 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5194, file: !4888, line: 93, baseType: !5210, size: 64, offset: 1344)
!5222 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5194, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!5223 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5194, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!5224 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5194, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!5225 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5194, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!5226 = distinct !DICompileUnit(language: DW_LANG_C99, file: !300, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!5227 = !DILocalVariable(name: "command_name", arg: 2, scope: !5189, file: !4881, line: 231, type: !49)
!5228 = !DILocalVariable(name: "package", arg: 3, scope: !5189, file: !4881, line: 231, type: !49)
!5229 = !DILocalVariable(name: "version", arg: 4, scope: !5189, file: !4881, line: 232, type: !49)
!5230 = !DILocalVariable(name: "authors", scope: !5189, file: !4881, line: 234, type: !5231)
!5231 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !5173, line: 52, baseType: !5232)
!5232 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !5175, line: 32, baseType: !5233)
!5233 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !300, line: 234, baseType: !5234)
!5234 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5235, size: 192, elements: !4915)
!5235 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !300, line: 192, size: 192, elements: !5236)
!5236 = !{!5237, !5238, !5239, !5240}
!5237 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !5235, file: !300, line: 192, baseType: !180, size: 32)
!5238 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !5235, file: !300, line: 192, baseType: !180, size: 32, offset: 32)
!5239 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !5235, file: !300, line: 192, baseType: !8, size: 64, offset: 64)
!5240 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !5235, file: !300, line: 192, baseType: !8, size: 64, offset: 128)
!5241 = distinct !DISubprogram(name: "xmalloc", scope: !5242, file: !5242, line: 39, type: !5243, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!5242 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5243 = !DISubroutineType(types: !5244)
!5244 = !{!8, !110}
!5245 = !DILocalVariable(name: "n", arg: 1, scope: !5241, file: !5242, line: 39, type: !110)
!5246 = !DILocation(line: 39, column: 17, scope: !5241)
!5247 = !DILocalVariable(name: "p", scope: !5241, file: !5242, line: 41, type: !8)
!5248 = !DILocation(line: 41, column: 9, scope: !5241)
!5249 = !DILocation(line: 41, column: 21, scope: !5241)
!5250 = !DILocation(line: 41, column: 13, scope: !5241)
!5251 = !DILocation(line: 42, column: 8, scope: !5252)
!5252 = distinct !DILexicalBlock(scope: !5241, file: !5242, line: 42, column: 7)
!5253 = !DILocation(line: 42, column: 10, scope: !5252)
!5254 = !DILocation(line: 42, column: 13, scope: !5252)
!5255 = !DILocation(line: 42, column: 15, scope: !5252)
!5256 = !DILocation(line: 42, column: 7, scope: !5241)
!5257 = !DILocation(line: 43, column: 5, scope: !5252)
!5258 = !DILocation(line: 44, column: 10, scope: !5241)
!5259 = !DILocation(line: 44, column: 3, scope: !5241)
!5260 = distinct !DISubprogram(name: "xrealloc", scope: !5242, file: !5242, line: 51, type: !5261, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!5261 = !DISubroutineType(types: !5262)
!5262 = !{!8, !8, !110}
!5263 = !DILocalVariable(name: "p", arg: 1, scope: !5260, file: !5242, line: 51, type: !8)
!5264 = !DILocation(line: 51, column: 17, scope: !5260)
!5265 = !DILocalVariable(name: "n", arg: 2, scope: !5260, file: !5242, line: 51, type: !110)
!5266 = !DILocation(line: 51, column: 27, scope: !5260)
!5267 = !DILocation(line: 53, column: 8, scope: !5268)
!5268 = distinct !DILexicalBlock(scope: !5260, file: !5242, line: 53, column: 7)
!5269 = !DILocation(line: 53, column: 10, scope: !5268)
!5270 = !DILocation(line: 53, column: 13, scope: !5268)
!5271 = !DILocation(line: 53, column: 7, scope: !5260)
!5272 = !DILocation(line: 57, column: 13, scope: !5273)
!5273 = distinct !DILexicalBlock(scope: !5268, file: !5242, line: 54, column: 5)
!5274 = !DILocation(line: 57, column: 7, scope: !5273)
!5275 = !DILocation(line: 58, column: 7, scope: !5273)
!5276 = !DILocation(line: 61, column: 16, scope: !5260)
!5277 = !DILocation(line: 61, column: 19, scope: !5260)
!5278 = !DILocation(line: 61, column: 7, scope: !5260)
!5279 = !DILocation(line: 61, column: 5, scope: !5260)
!5280 = !DILocation(line: 62, column: 8, scope: !5281)
!5281 = distinct !DILexicalBlock(scope: !5260, file: !5242, line: 62, column: 7)
!5282 = !DILocation(line: 62, column: 10, scope: !5281)
!5283 = !DILocation(line: 62, column: 13, scope: !5281)
!5284 = !DILocation(line: 62, column: 7, scope: !5260)
!5285 = !DILocation(line: 63, column: 5, scope: !5281)
!5286 = !DILocation(line: 64, column: 10, scope: !5260)
!5287 = !DILocation(line: 64, column: 3, scope: !5260)
!5288 = !DILocation(line: 65, column: 1, scope: !5260)
!5289 = distinct !DISubprogram(name: "x2nrealloc", scope: !5290, file: !5290, line: 174, type: !5291, scopeLine: 175, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!5290 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5291 = !DISubroutineType(types: !5292)
!5292 = !{!8, !8, !5293, !110}
!5293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!5294 = !DILocalVariable(name: "p", arg: 1, scope: !5289, file: !5290, line: 174, type: !8)
!5295 = !DILocation(line: 174, column: 19, scope: !5289)
!5296 = !DILocalVariable(name: "pn", arg: 2, scope: !5289, file: !5290, line: 174, type: !5293)
!5297 = !DILocation(line: 174, column: 30, scope: !5289)
!5298 = !DILocalVariable(name: "s", arg: 3, scope: !5289, file: !5290, line: 174, type: !110)
!5299 = !DILocation(line: 174, column: 41, scope: !5289)
!5300 = !DILocalVariable(name: "n", scope: !5289, file: !5290, line: 176, type: !110)
!5301 = !DILocation(line: 176, column: 10, scope: !5289)
!5302 = !DILocation(line: 176, column: 15, scope: !5289)
!5303 = !DILocation(line: 176, column: 14, scope: !5289)
!5304 = !DILocation(line: 178, column: 9, scope: !5305)
!5305 = distinct !DILexicalBlock(scope: !5289, file: !5290, line: 178, column: 7)
!5306 = !DILocation(line: 178, column: 7, scope: !5289)
!5307 = !DILocation(line: 180, column: 13, scope: !5308)
!5308 = distinct !DILexicalBlock(scope: !5309, file: !5290, line: 180, column: 11)
!5309 = distinct !DILexicalBlock(scope: !5305, file: !5290, line: 179, column: 5)
!5310 = !DILocation(line: 180, column: 11, scope: !5309)
!5311 = !DILocation(line: 188, column: 32, scope: !5312)
!5312 = distinct !DILexicalBlock(scope: !5308, file: !5290, line: 181, column: 9)
!5313 = !DILocation(line: 188, column: 30, scope: !5312)
!5314 = !DILocation(line: 188, column: 13, scope: !5312)
!5315 = !DILocation(line: 189, column: 17, scope: !5312)
!5316 = !DILocation(line: 189, column: 16, scope: !5312)
!5317 = !DILocation(line: 189, column: 13, scope: !5312)
!5318 = !DILocation(line: 190, column: 9, scope: !5312)
!5319 = !DILocation(line: 191, column: 11, scope: !5320)
!5320 = distinct !DILexicalBlock(scope: !5309, file: !5290, line: 191, column: 11)
!5321 = !DILocation(line: 191, column: 11, scope: !5309)
!5322 = !DILocation(line: 192, column: 9, scope: !5320)
!5323 = !DILocation(line: 193, column: 5, scope: !5309)
!5324 = !DILocation(line: 200, column: 71, scope: !5325)
!5325 = distinct !DILexicalBlock(scope: !5326, file: !5290, line: 200, column: 11)
!5326 = distinct !DILexicalBlock(scope: !5305, file: !5290, line: 195, column: 5)
!5327 = !DILocation(line: 200, column: 69, scope: !5325)
!5328 = !DILocation(line: 201, column: 14, scope: !5325)
!5329 = !DILocation(line: 201, column: 11, scope: !5325)
!5330 = !DILocation(line: 200, column: 11, scope: !5326)
!5331 = !DILocation(line: 202, column: 9, scope: !5325)
!5332 = !DILocation(line: 203, column: 12, scope: !5326)
!5333 = !DILocation(line: 203, column: 14, scope: !5326)
!5334 = !DILocation(line: 203, column: 18, scope: !5326)
!5335 = !DILocation(line: 203, column: 9, scope: !5326)
!5336 = !DILocation(line: 206, column: 9, scope: !5289)
!5337 = !DILocation(line: 206, column: 4, scope: !5289)
!5338 = !DILocation(line: 206, column: 7, scope: !5289)
!5339 = !DILocation(line: 207, column: 20, scope: !5289)
!5340 = !DILocation(line: 207, column: 23, scope: !5289)
!5341 = !DILocation(line: 207, column: 27, scope: !5289)
!5342 = !DILocation(line: 207, column: 25, scope: !5289)
!5343 = !DILocation(line: 207, column: 10, scope: !5289)
!5344 = !DILocation(line: 207, column: 3, scope: !5289)
!5345 = !DILocalVariable(name: "p", arg: 1, scope: !5346, file: !5290, line: 174, type: !8)
!5346 = distinct !DISubprogram(name: "x2nrealloc", scope: !5290, file: !5290, line: 174, type: !5291, scopeLine: 175, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5347, retainedNodes: !4)
!5347 = distinct !DICompileUnit(language: DW_LANG_C99, file: !302, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !303, nameTableKind: None)
!5348 = !DILocalVariable(name: "pn", arg: 2, scope: !5346, file: !5290, line: 174, type: !5293)
!5349 = !DILocalVariable(name: "s", arg: 3, scope: !5346, file: !5290, line: 174, type: !110)
!5350 = !DILocalVariable(name: "n", scope: !5346, file: !5290, line: 176, type: !110)
!5351 = distinct !DISubprogram(name: "xcharalloc", scope: !5290, file: !5290, line: 216, type: !5352, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !301, retainedNodes: !4)
!5352 = !DISubroutineType(types: !5353)
!5353 = !{!6, !110}
!5354 = !DILocalVariable(name: "n", arg: 1, scope: !5351, file: !5290, line: 216, type: !110)
!5355 = !DILocation(line: 216, column: 20, scope: !5351)
!5356 = !DILocation(line: 218, column: 10, scope: !5351)
!5357 = !DILocation(line: 218, column: 3, scope: !5351)
!5358 = distinct !DISubprogram(name: "xalloc_die", scope: !5359, file: !5359, line: 32, type: !1356, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !304, retainedNodes: !4)
!5359 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5360 = !DILocation(line: 34, column: 10, scope: !5358)
!5361 = !DILocation(line: 34, column: 33, scope: !5358)
!5362 = !DILocation(line: 34, column: 3, scope: !5358)
!5363 = !DILocation(line: 40, column: 3, scope: !5358)
!5364 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !5365, file: !5365, line: 86, type: !5366, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !306, retainedNodes: !4)
!5365 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5366 = !DISubroutineType(types: !5367)
!5367 = !{!110, !5368, !49, !110, !5369}
!5368 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4097, size: 64)
!5369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5370, size: 64)
!5370 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !4071, line: 6, baseType: !5371)
!5371 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !4073, line: 21, baseType: !5372)
!5372 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4073, line: 13, size: 64, elements: !5373)
!5373 = !{!5374, !5375}
!5374 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !5372, file: !4073, line: 15, baseType: !53, size: 32)
!5375 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !5372, file: !4073, line: 20, baseType: !5376, size: 32, offset: 32)
!5376 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !5372, file: !4073, line: 16, size: 32, elements: !5377)
!5377 = !{!5378, !5379}
!5378 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !5376, file: !4073, line: 18, baseType: !180, size: 32)
!5379 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !5376, file: !4073, line: 19, baseType: !82, size: 32)
!5380 = !DILocalVariable(name: "pwc", arg: 1, scope: !5364, file: !5365, line: 86, type: !5368)
!5381 = !DILocation(line: 86, column: 23, scope: !5364)
!5382 = !DILocalVariable(name: "s", arg: 2, scope: !5364, file: !5365, line: 86, type: !49)
!5383 = !DILocation(line: 86, column: 40, scope: !5364)
!5384 = !DILocalVariable(name: "n", arg: 3, scope: !5364, file: !5365, line: 86, type: !110)
!5385 = !DILocation(line: 86, column: 50, scope: !5364)
!5386 = !DILocalVariable(name: "ps", arg: 4, scope: !5364, file: !5365, line: 86, type: !5369)
!5387 = !DILocation(line: 86, column: 64, scope: !5364)
!5388 = !DILocalVariable(name: "ret", scope: !5364, file: !5365, line: 88, type: !110)
!5389 = !DILocation(line: 88, column: 10, scope: !5364)
!5390 = !DILocalVariable(name: "wc", scope: !5364, file: !5365, line: 89, type: !4097)
!5391 = !DILocation(line: 89, column: 11, scope: !5364)
!5392 = !DILocation(line: 105, column: 9, scope: !5393)
!5393 = distinct !DILexicalBlock(scope: !5364, file: !5365, line: 105, column: 7)
!5394 = !DILocation(line: 105, column: 7, scope: !5364)
!5395 = !DILocation(line: 106, column: 9, scope: !5393)
!5396 = !DILocation(line: 106, column: 5, scope: !5393)
!5397 = !DILocation(line: 145, column: 18, scope: !5364)
!5398 = !DILocation(line: 145, column: 23, scope: !5364)
!5399 = !DILocation(line: 145, column: 26, scope: !5364)
!5400 = !DILocation(line: 145, column: 29, scope: !5364)
!5401 = !DILocation(line: 145, column: 9, scope: !5364)
!5402 = !DILocation(line: 145, column: 7, scope: !5364)
!5403 = !DILocation(line: 154, column: 22, scope: !5404)
!5404 = distinct !DILexicalBlock(scope: !5364, file: !5365, line: 154, column: 7)
!5405 = !DILocation(line: 154, column: 19, scope: !5404)
!5406 = !DILocation(line: 154, column: 26, scope: !5404)
!5407 = !DILocation(line: 154, column: 29, scope: !5404)
!5408 = !DILocation(line: 154, column: 31, scope: !5404)
!5409 = !DILocation(line: 154, column: 36, scope: !5404)
!5410 = !DILocation(line: 154, column: 41, scope: !5404)
!5411 = !DILocation(line: 154, column: 7, scope: !5364)
!5412 = !DILocalVariable(name: "uc", scope: !5413, file: !5365, line: 156, type: !317)
!5413 = distinct !DILexicalBlock(scope: !5404, file: !5365, line: 155, column: 5)
!5414 = !DILocation(line: 156, column: 21, scope: !5413)
!5415 = !DILocation(line: 156, column: 27, scope: !5413)
!5416 = !DILocation(line: 156, column: 26, scope: !5413)
!5417 = !DILocation(line: 157, column: 14, scope: !5413)
!5418 = !DILocation(line: 157, column: 8, scope: !5413)
!5419 = !DILocation(line: 157, column: 12, scope: !5413)
!5420 = !DILocation(line: 158, column: 7, scope: !5413)
!5421 = !DILocation(line: 162, column: 10, scope: !5364)
!5422 = !DILocation(line: 162, column: 3, scope: !5364)
!5423 = !DILocation(line: 163, column: 1, scope: !5364)
!5424 = !DILocalVariable(name: "pwc", arg: 1, scope: !5425, file: !5365, line: 86, type: !5368)
!5425 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !5365, file: !5365, line: 86, type: !5426, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5439, retainedNodes: !4)
!5426 = !DISubroutineType(types: !5427)
!5427 = !{!110, !5368, !49, !110, !5428}
!5428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5429, size: 64)
!5429 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !4071, line: 6, baseType: !5430)
!5430 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !4073, line: 21, baseType: !5431)
!5431 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4073, line: 13, size: 64, elements: !5432)
!5432 = !{!5433, !5434}
!5433 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !5431, file: !4073, line: 15, baseType: !53, size: 32)
!5434 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !5431, file: !4073, line: 20, baseType: !5435, size: 32, offset: 32)
!5435 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !5431, file: !4073, line: 16, size: 32, elements: !5436)
!5436 = !{!5437, !5438}
!5437 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !5435, file: !4073, line: 18, baseType: !180, size: 32)
!5438 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !5435, file: !4073, line: 19, baseType: !82, size: 32)
!5439 = distinct !DICompileUnit(language: DW_LANG_C99, file: !307, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !308, nameTableKind: None)
!5440 = !DILocalVariable(name: "s", arg: 2, scope: !5425, file: !5365, line: 86, type: !49)
!5441 = !DILocalVariable(name: "n", arg: 3, scope: !5425, file: !5365, line: 86, type: !110)
!5442 = !DILocalVariable(name: "ps", arg: 4, scope: !5425, file: !5365, line: 86, type: !5428)
!5443 = !DILocalVariable(name: "ret", scope: !5425, file: !5365, line: 88, type: !110)
!5444 = !DILocalVariable(name: "wc", scope: !5425, file: !5365, line: 89, type: !4097)
!5445 = distinct !DISubprogram(name: "extract_trimmed_name", scope: !5446, file: !5446, line: 49, type: !5447, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !309, retainedNodes: !4)
!5446 = !DIFile(filename: "lib/readutmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5447 = !DISubroutineType(types: !5448)
!5448 = !{!6, !5449}
!5449 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5450, size: 64)
!5450 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5451)
!5451 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !5452)
!5452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !5453)
!5453 = !{!5454, !5455, !5456, !5457, !5458, !5459, !5460, !5465, !5466, !5471, !5472}
!5454 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !5452, file: !72, line: 57, baseType: !14, size: 16)
!5455 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !5452, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!5456 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !5452, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!5457 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !5452, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!5458 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !5452, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!5459 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !5452, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!5460 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !5452, file: !72, line: 67, baseType: !5461, size: 32, offset: 2656)
!5461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !5462)
!5462 = !{!5463, !5464}
!5463 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !5461, file: !72, line: 45, baseType: !14, size: 16)
!5464 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !5461, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!5465 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !5452, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!5466 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !5452, file: !72, line: 79, baseType: !5467, size: 64, offset: 2720)
!5467 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !5452, file: !72, line: 75, size: 64, elements: !5468)
!5468 = !{!5469, !5470}
!5469 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !5467, file: !72, line: 77, baseType: !96, size: 32)
!5470 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !5467, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!5471 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !5452, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!5472 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !5452, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!5473 = !DILocalVariable(name: "ut", arg: 1, scope: !5445, file: !5446, line: 49, type: !5449)
!5474 = !DILocation(line: 49, column: 42, scope: !5445)
!5475 = !DILocalVariable(name: "p", scope: !5445, file: !5446, line: 51, type: !6)
!5476 = !DILocation(line: 51, column: 9, scope: !5445)
!5477 = !DILocalVariable(name: "trimmed_name", scope: !5445, file: !5446, line: 51, type: !6)
!5478 = !DILocation(line: 51, column: 13, scope: !5445)
!5479 = !DILocation(line: 53, column: 18, scope: !5445)
!5480 = !DILocation(line: 53, column: 16, scope: !5445)
!5481 = !DILocation(line: 54, column: 12, scope: !5445)
!5482 = !DILocation(line: 54, column: 26, scope: !5445)
!5483 = !DILocation(line: 54, column: 3, scope: !5445)
!5484 = !DILocation(line: 58, column: 3, scope: !5445)
!5485 = !DILocation(line: 58, column: 39, scope: !5445)
!5486 = !DILocation(line: 59, column: 12, scope: !5487)
!5487 = distinct !DILexicalBlock(scope: !5445, file: !5446, line: 59, column: 3)
!5488 = !DILocation(line: 59, column: 35, scope: !5487)
!5489 = !DILocation(line: 59, column: 27, scope: !5487)
!5490 = !DILocation(line: 59, column: 25, scope: !5487)
!5491 = !DILocation(line: 59, column: 10, scope: !5487)
!5492 = !DILocation(line: 59, column: 8, scope: !5487)
!5493 = !DILocation(line: 60, column: 8, scope: !5494)
!5494 = distinct !DILexicalBlock(scope: !5487, file: !5446, line: 59, column: 3)
!5495 = !DILocation(line: 60, column: 23, scope: !5494)
!5496 = !DILocation(line: 60, column: 21, scope: !5494)
!5497 = !DILocation(line: 60, column: 25, scope: !5494)
!5498 = !DILocation(line: 60, column: 28, scope: !5494)
!5499 = !DILocation(line: 60, column: 34, scope: !5494)
!5500 = !DILocation(line: 0, scope: !5494)
!5501 = !DILocation(line: 59, column: 3, scope: !5487)
!5502 = !DILocation(line: 62, column: 5, scope: !5494)
!5503 = !DILocation(line: 61, column: 9, scope: !5494)
!5504 = !DILocation(line: 61, column: 13, scope: !5494)
!5505 = !DILocation(line: 59, column: 3, scope: !5494)
!5506 = distinct !{!5506, !5501, !5507}
!5507 = !DILocation(line: 62, column: 5, scope: !5487)
!5508 = !DILocation(line: 63, column: 10, scope: !5445)
!5509 = !DILocation(line: 63, column: 3, scope: !5445)
!5510 = !DILocalVariable(name: "ut", arg: 1, scope: !5511, file: !5446, line: 49, type: !5514)
!5511 = distinct !DISubprogram(name: "extract_trimmed_name", scope: !5446, file: !5446, line: 49, type: !5512, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5538, retainedNodes: !4)
!5512 = !DISubroutineType(types: !5513)
!5513 = !{!6, !5514}
!5514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5515, size: 64)
!5515 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5516)
!5516 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !5517)
!5517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !5518)
!5518 = !{!5519, !5520, !5521, !5522, !5523, !5524, !5525, !5530, !5531, !5536, !5537}
!5519 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !5517, file: !72, line: 57, baseType: !14, size: 16)
!5520 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !5517, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!5521 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !5517, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!5522 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !5517, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!5523 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !5517, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!5524 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !5517, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!5525 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !5517, file: !72, line: 67, baseType: !5526, size: 32, offset: 2656)
!5526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !5527)
!5527 = !{!5528, !5529}
!5528 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !5526, file: !72, line: 45, baseType: !14, size: 16)
!5529 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !5526, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!5530 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !5517, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!5531 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !5517, file: !72, line: 79, baseType: !5532, size: 64, offset: 2720)
!5532 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !5517, file: !72, line: 75, size: 64, elements: !5533)
!5533 = !{!5534, !5535}
!5534 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !5532, file: !72, line: 77, baseType: !96, size: 32)
!5535 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !5532, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!5536 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !5517, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!5537 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !5517, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!5538 = distinct !DICompileUnit(language: DW_LANG_C99, file: !310, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !311, nameTableKind: None)
!5539 = !DILocalVariable(name: "p", scope: !5511, file: !5446, line: 51, type: !6)
!5540 = !DILocalVariable(name: "trimmed_name", scope: !5511, file: !5446, line: 51, type: !6)
!5541 = distinct !DISubprogram(name: "read_utmp", scope: !5446, file: !5446, line: 92, type: !5542, scopeLine: 94, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !309, retainedNodes: !4)
!5542 = !DISubroutineType(types: !5543)
!5543 = !{!53, !49, !5293, !5544, !53}
!5544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5545, size: 64)
!5545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5451, size: 64)
!5546 = !DILocalVariable(name: "file", arg: 1, scope: !5541, file: !5446, line: 92, type: !49)
!5547 = !DILocation(line: 92, column: 24, scope: !5541)
!5548 = !DILocalVariable(name: "n_entries", arg: 2, scope: !5541, file: !5446, line: 92, type: !5293)
!5549 = !DILocation(line: 92, column: 38, scope: !5541)
!5550 = !DILocalVariable(name: "utmp_buf", arg: 3, scope: !5541, file: !5446, line: 92, type: !5544)
!5551 = !DILocation(line: 92, column: 63, scope: !5541)
!5552 = !DILocalVariable(name: "options", arg: 4, scope: !5541, file: !5446, line: 93, type: !53)
!5553 = !DILocation(line: 93, column: 16, scope: !5541)
!5554 = !DILocalVariable(name: "n_read", scope: !5541, file: !5446, line: 95, type: !110)
!5555 = !DILocation(line: 95, column: 10, scope: !5541)
!5556 = !DILocalVariable(name: "n_alloc", scope: !5541, file: !5446, line: 96, type: !110)
!5557 = !DILocation(line: 96, column: 10, scope: !5541)
!5558 = !DILocalVariable(name: "utmp", scope: !5541, file: !5446, line: 97, type: !5545)
!5559 = !DILocation(line: 97, column: 16, scope: !5541)
!5560 = !DILocalVariable(name: "u", scope: !5541, file: !5446, line: 98, type: !5545)
!5561 = !DILocation(line: 98, column: 16, scope: !5541)
!5562 = !DILocation(line: 104, column: 32, scope: !5541)
!5563 = !DILocation(line: 104, column: 3, scope: !5541)
!5564 = !DILocation(line: 106, column: 3, scope: !5541)
!5565 = !DILocation(line: 108, column: 3, scope: !5541)
!5566 = !DILocation(line: 108, column: 15, scope: !5541)
!5567 = !DILocation(line: 108, column: 13, scope: !5541)
!5568 = !DILocation(line: 108, column: 32, scope: !5541)
!5569 = !DILocation(line: 109, column: 31, scope: !5570)
!5570 = distinct !DILexicalBlock(scope: !5541, file: !5446, line: 109, column: 9)
!5571 = !DILocation(line: 109, column: 34, scope: !5570)
!5572 = !DILocation(line: 109, column: 9, scope: !5570)
!5573 = !DILocation(line: 109, column: 9, scope: !5541)
!5574 = !DILocation(line: 111, column: 13, scope: !5575)
!5575 = distinct !DILexicalBlock(scope: !5576, file: !5446, line: 111, column: 13)
!5576 = distinct !DILexicalBlock(scope: !5570, file: !5446, line: 110, column: 7)
!5577 = !DILocation(line: 111, column: 23, scope: !5575)
!5578 = !DILocation(line: 111, column: 20, scope: !5575)
!5579 = !DILocation(line: 111, column: 13, scope: !5576)
!5580 = !DILocation(line: 112, column: 30, scope: !5575)
!5581 = !DILocation(line: 112, column: 18, scope: !5575)
!5582 = !DILocation(line: 112, column: 16, scope: !5575)
!5583 = !DILocation(line: 112, column: 11, scope: !5575)
!5584 = !DILocation(line: 114, column: 9, scope: !5576)
!5585 = !DILocation(line: 114, column: 20, scope: !5576)
!5586 = !DILocation(line: 114, column: 27, scope: !5576)
!5587 = !DILocation(line: 114, column: 26, scope: !5576)
!5588 = !DILocation(line: 115, column: 7, scope: !5576)
!5589 = distinct !{!5589, !5565, !5590}
!5590 = !DILocation(line: 115, column: 7, scope: !5541)
!5591 = !DILocation(line: 117, column: 3, scope: !5541)
!5592 = !DILocation(line: 119, column: 16, scope: !5541)
!5593 = !DILocation(line: 119, column: 4, scope: !5541)
!5594 = !DILocation(line: 119, column: 14, scope: !5541)
!5595 = !DILocation(line: 120, column: 15, scope: !5541)
!5596 = !DILocation(line: 120, column: 4, scope: !5541)
!5597 = !DILocation(line: 120, column: 13, scope: !5541)
!5598 = !DILocation(line: 122, column: 3, scope: !5541)
!5599 = distinct !DISubprogram(name: "desirable_utmp_entry", scope: !5446, file: !5446, line: 69, type: !5600, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !309, retainedNodes: !4)
!5600 = !DISubroutineType(types: !5601)
!5601 = !{!18, !5449, !53}
!5602 = !DILocalVariable(name: "u", arg: 1, scope: !5599, file: !5446, line: 69, type: !5449)
!5603 = !DILocation(line: 69, column: 42, scope: !5599)
!5604 = !DILocalVariable(name: "options", arg: 2, scope: !5599, file: !5446, line: 69, type: !53)
!5605 = !DILocation(line: 69, column: 49, scope: !5599)
!5606 = !DILocalVariable(name: "user_proc", scope: !5599, file: !5446, line: 71, type: !18)
!5607 = !DILocation(line: 71, column: 8, scope: !5599)
!5608 = !DILocation(line: 71, column: 20, scope: !5599)
!5609 = !DILocation(line: 0, scope: !5599)
!5610 = !DILocation(line: 72, column: 8, scope: !5611)
!5611 = distinct !DILexicalBlock(scope: !5599, file: !5446, line: 72, column: 7)
!5612 = !DILocation(line: 72, column: 16, scope: !5611)
!5613 = !DILocation(line: 72, column: 42, scope: !5611)
!5614 = !DILocation(line: 72, column: 46, scope: !5611)
!5615 = !DILocation(line: 72, column: 7, scope: !5599)
!5616 = !DILocation(line: 73, column: 5, scope: !5611)
!5617 = !DILocation(line: 74, column: 8, scope: !5618)
!5618 = distinct !DILexicalBlock(scope: !5599, file: !5446, line: 74, column: 7)
!5619 = !DILocation(line: 74, column: 16, scope: !5618)
!5620 = !DILocation(line: 75, column: 7, scope: !5618)
!5621 = !DILocation(line: 75, column: 10, scope: !5618)
!5622 = !DILocation(line: 76, column: 7, scope: !5618)
!5623 = !DILocation(line: 76, column: 14, scope: !5618)
!5624 = !DILocation(line: 76, column: 12, scope: !5618)
!5625 = !DILocation(line: 77, column: 7, scope: !5618)
!5626 = !DILocation(line: 77, column: 17, scope: !5618)
!5627 = !DILocation(line: 77, column: 11, scope: !5618)
!5628 = !DILocation(line: 77, column: 32, scope: !5618)
!5629 = !DILocation(line: 77, column: 36, scope: !5618)
!5630 = !DILocation(line: 77, column: 39, scope: !5618)
!5631 = !DILocation(line: 77, column: 45, scope: !5618)
!5632 = !DILocation(line: 74, column: 7, scope: !5599)
!5633 = !DILocation(line: 78, column: 5, scope: !5618)
!5634 = !DILocation(line: 79, column: 3, scope: !5599)
!5635 = !DILocation(line: 80, column: 1, scope: !5599)
!5636 = !DILocalVariable(name: "u", arg: 1, scope: !5637, file: !5446, line: 69, type: !5640)
!5637 = distinct !DISubprogram(name: "desirable_utmp_entry", scope: !5446, file: !5446, line: 69, type: !5638, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !5664, retainedNodes: !4)
!5638 = !DISubroutineType(types: !5639)
!5639 = !{!18, !5640, !53}
!5640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5641, size: 64)
!5641 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5642)
!5642 = !DIDerivedType(tag: DW_TAG_typedef, name: "STRUCT_UTMP", file: !70, line: 146, baseType: !5643)
!5643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utmpx", file: !72, line: 55, size: 3072, elements: !5644)
!5644 = !{!5645, !5646, !5647, !5648, !5649, !5650, !5651, !5656, !5657, !5662, !5663}
!5645 = !DIDerivedType(tag: DW_TAG_member, name: "ut_type", scope: !5643, file: !72, line: 57, baseType: !14, size: 16)
!5646 = !DIDerivedType(tag: DW_TAG_member, name: "ut_pid", scope: !5643, file: !72, line: 58, baseType: !76, size: 32, offset: 32)
!5647 = !DIDerivedType(tag: DW_TAG_member, name: "ut_line", scope: !5643, file: !72, line: 59, baseType: !78, size: 256, offset: 64)
!5648 = !DIDerivedType(tag: DW_TAG_member, name: "ut_id", scope: !5643, file: !72, line: 61, baseType: !82, size: 32, offset: 320)
!5649 = !DIDerivedType(tag: DW_TAG_member, name: "ut_user", scope: !5643, file: !72, line: 63, baseType: !78, size: 256, offset: 352)
!5650 = !DIDerivedType(tag: DW_TAG_member, name: "ut_host", scope: !5643, file: !72, line: 65, baseType: !87, size: 2048, offset: 608)
!5651 = !DIDerivedType(tag: DW_TAG_member, name: "ut_exit", scope: !5643, file: !72, line: 67, baseType: !5652, size: 32, offset: 2656)
!5652 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__exit_status", file: !72, line: 42, size: 32, elements: !5653)
!5653 = !{!5654, !5655}
!5654 = !DIDerivedType(tag: DW_TAG_member, name: "e_termination", scope: !5652, file: !72, line: 45, baseType: !14, size: 16)
!5655 = !DIDerivedType(tag: DW_TAG_member, name: "e_exit", scope: !5652, file: !72, line: 46, baseType: !14, size: 16, offset: 16)
!5656 = !DIDerivedType(tag: DW_TAG_member, name: "ut_session", scope: !5643, file: !72, line: 74, baseType: !96, size: 32, offset: 2688)
!5657 = !DIDerivedType(tag: DW_TAG_member, name: "ut_tv", scope: !5643, file: !72, line: 79, baseType: !5658, size: 64, offset: 2720)
!5658 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !5643, file: !72, line: 75, size: 64, elements: !5659)
!5659 = !{!5660, !5661}
!5660 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !5658, file: !72, line: 77, baseType: !96, size: 32)
!5661 = !DIDerivedType(tag: DW_TAG_member, name: "tv_usec", scope: !5658, file: !72, line: 78, baseType: !96, size: 32, offset: 32)
!5662 = !DIDerivedType(tag: DW_TAG_member, name: "ut_addr_v6", scope: !5643, file: !72, line: 84, baseType: !103, size: 128, offset: 2784)
!5663 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !5643, file: !72, line: 85, baseType: !105, size: 160, offset: 2912)
!5664 = distinct !DICompileUnit(language: DW_LANG_C99, file: !310, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !311, nameTableKind: None)
!5665 = !DILocalVariable(name: "options", arg: 2, scope: !5637, file: !5446, line: 69, type: !53)
!5666 = !DILocalVariable(name: "user_proc", scope: !5637, file: !5446, line: 71, type: !18)
!5667 = distinct !DISubprogram(name: "c_strcasecmp", scope: !5668, file: !5668, line: 27, type: !5669, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !312, retainedNodes: !4)
!5668 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5669 = !DISubroutineType(types: !5670)
!5670 = !{!53, !49, !49}
!5671 = !DILocalVariable(name: "s1", arg: 1, scope: !5667, file: !5668, line: 27, type: !49)
!5672 = !DILocation(line: 27, column: 27, scope: !5667)
!5673 = !DILocalVariable(name: "s2", arg: 2, scope: !5667, file: !5668, line: 27, type: !49)
!5674 = !DILocation(line: 27, column: 43, scope: !5667)
!5675 = !DILocalVariable(name: "p1", scope: !5667, file: !5668, line: 29, type: !315)
!5676 = !DILocation(line: 29, column: 33, scope: !5667)
!5677 = !DILocation(line: 29, column: 62, scope: !5667)
!5678 = !DILocalVariable(name: "p2", scope: !5667, file: !5668, line: 30, type: !315)
!5679 = !DILocation(line: 30, column: 33, scope: !5667)
!5680 = !DILocation(line: 30, column: 62, scope: !5667)
!5681 = !DILocalVariable(name: "c1", scope: !5667, file: !5668, line: 31, type: !317)
!5682 = !DILocation(line: 31, column: 17, scope: !5667)
!5683 = !DILocalVariable(name: "c2", scope: !5667, file: !5668, line: 31, type: !317)
!5684 = !DILocation(line: 31, column: 21, scope: !5667)
!5685 = !DILocation(line: 33, column: 7, scope: !5686)
!5686 = distinct !DILexicalBlock(scope: !5667, file: !5668, line: 33, column: 7)
!5687 = !DILocation(line: 33, column: 13, scope: !5686)
!5688 = !DILocation(line: 33, column: 10, scope: !5686)
!5689 = !DILocation(line: 33, column: 7, scope: !5667)
!5690 = !DILocation(line: 34, column: 5, scope: !5686)
!5691 = !DILocation(line: 36, column: 3, scope: !5667)
!5692 = !DILocation(line: 38, column: 24, scope: !5693)
!5693 = distinct !DILexicalBlock(scope: !5667, file: !5668, line: 37, column: 5)
!5694 = !DILocation(line: 38, column: 23, scope: !5693)
!5695 = !DILocation(line: 38, column: 12, scope: !5693)
!5696 = !DILocation(line: 38, column: 10, scope: !5693)
!5697 = !DILocation(line: 39, column: 24, scope: !5693)
!5698 = !DILocation(line: 39, column: 23, scope: !5693)
!5699 = !DILocation(line: 39, column: 12, scope: !5693)
!5700 = !DILocation(line: 39, column: 10, scope: !5693)
!5701 = !DILocation(line: 41, column: 11, scope: !5702)
!5702 = distinct !DILexicalBlock(scope: !5693, file: !5668, line: 41, column: 11)
!5703 = !DILocation(line: 41, column: 14, scope: !5702)
!5704 = !DILocation(line: 41, column: 11, scope: !5693)
!5705 = !DILocation(line: 42, column: 9, scope: !5702)
!5706 = !DILocation(line: 44, column: 7, scope: !5693)
!5707 = !DILocation(line: 45, column: 7, scope: !5693)
!5708 = !DILocation(line: 46, column: 5, scope: !5693)
!5709 = !DILocation(line: 47, column: 10, scope: !5667)
!5710 = !DILocation(line: 47, column: 16, scope: !5667)
!5711 = !DILocation(line: 47, column: 13, scope: !5667)
!5712 = distinct !{!5712, !5691, !5713}
!5713 = !DILocation(line: 47, column: 18, scope: !5667)
!5714 = !DILocation(line: 50, column: 12, scope: !5715)
!5715 = distinct !DILexicalBlock(scope: !5667, file: !5668, line: 49, column: 7)
!5716 = !DILocation(line: 50, column: 17, scope: !5715)
!5717 = !DILocation(line: 50, column: 15, scope: !5715)
!5718 = !DILocation(line: 50, column: 5, scope: !5715)
!5719 = !DILocation(line: 56, column: 1, scope: !5667)
!5720 = !DILocalVariable(name: "s1", arg: 1, scope: !5721, file: !5668, line: 27, type: !49)
!5721 = distinct !DISubprogram(name: "c_strcasecmp", scope: !5668, file: !5668, line: 27, type: !5669, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5722, retainedNodes: !4)
!5722 = distinct !DICompileUnit(language: DW_LANG_C99, file: !313, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !314, nameTableKind: None)
!5723 = !DILocalVariable(name: "s2", arg: 2, scope: !5721, file: !5668, line: 27, type: !49)
!5724 = !DILocalVariable(name: "p1", scope: !5721, file: !5668, line: 29, type: !315)
!5725 = !DILocalVariable(name: "p2", scope: !5721, file: !5668, line: 30, type: !315)
!5726 = !DILocalVariable(name: "c1", scope: !5721, file: !5668, line: 31, type: !317)
!5727 = !DILocalVariable(name: "c2", scope: !5721, file: !5668, line: 31, type: !317)
!5728 = distinct !DISubprogram(name: "close_stream", scope: !5729, file: !5729, line: 56, type: !5730, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !318, retainedNodes: !4)
!5729 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5730 = !DISubroutineType(types: !5731)
!5731 = !{!53, !5732}
!5732 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5733, size: 64)
!5733 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !5734)
!5734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !5735)
!5735 = !{!5736, !5737, !5738, !5739, !5740, !5741, !5742, !5743, !5744, !5745, !5746, !5747, !5748, !5749, !5751, !5752, !5753, !5754, !5755, !5756, !5757, !5758, !5759, !5760, !5761, !5762, !5763, !5764, !5765}
!5736 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5734, file: !4888, line: 51, baseType: !53, size: 32)
!5737 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5734, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!5738 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5734, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!5739 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5734, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!5740 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5734, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!5741 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5734, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!5742 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5734, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!5743 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5734, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!5744 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5734, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!5745 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5734, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!5746 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5734, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!5747 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5734, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!5748 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5734, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!5749 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5734, file: !4888, line: 70, baseType: !5750, size: 64, offset: 832)
!5750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5734, size: 64)
!5751 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5734, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!5752 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5734, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!5753 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5734, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!5754 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5734, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!5755 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5734, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!5756 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5734, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!5757 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5734, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!5758 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5734, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!5759 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5734, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!5760 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5734, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!5761 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5734, file: !4888, line: 93, baseType: !5750, size: 64, offset: 1344)
!5762 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5734, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!5763 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5734, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!5764 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5734, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!5765 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5734, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!5766 = !DILocalVariable(name: "stream", arg: 1, scope: !5728, file: !5729, line: 56, type: !5732)
!5767 = !DILocation(line: 56, column: 21, scope: !5728)
!5768 = !DILocalVariable(name: "some_pending", scope: !5728, file: !5729, line: 58, type: !5769)
!5769 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !18)
!5770 = !DILocation(line: 58, column: 14, scope: !5728)
!5771 = !DILocation(line: 58, column: 42, scope: !5728)
!5772 = !DILocation(line: 58, column: 30, scope: !5728)
!5773 = !DILocation(line: 58, column: 50, scope: !5728)
!5774 = !DILocalVariable(name: "prev_fail", scope: !5728, file: !5729, line: 59, type: !5769)
!5775 = !DILocation(line: 59, column: 14, scope: !5728)
!5776 = !DILocation(line: 59, column: 27, scope: !5728)
!5777 = !DILocation(line: 59, column: 43, scope: !5728)
!5778 = !DILocalVariable(name: "fclose_fail", scope: !5728, file: !5729, line: 60, type: !5769)
!5779 = !DILocation(line: 60, column: 14, scope: !5728)
!5780 = !DILocation(line: 60, column: 37, scope: !5728)
!5781 = !DILocation(line: 60, column: 29, scope: !5728)
!5782 = !DILocation(line: 60, column: 45, scope: !5728)
!5783 = !DILocation(line: 70, column: 7, scope: !5784)
!5784 = distinct !DILexicalBlock(scope: !5728, file: !5729, line: 70, column: 7)
!5785 = !DILocation(line: 70, column: 17, scope: !5784)
!5786 = !DILocation(line: 70, column: 21, scope: !5784)
!5787 = !DILocation(line: 70, column: 33, scope: !5784)
!5788 = !DILocation(line: 70, column: 37, scope: !5784)
!5789 = !DILocation(line: 70, column: 50, scope: !5784)
!5790 = !DILocation(line: 70, column: 53, scope: !5784)
!5791 = !DILocation(line: 70, column: 59, scope: !5784)
!5792 = !DILocation(line: 70, column: 7, scope: !5728)
!5793 = !DILocation(line: 72, column: 13, scope: !5794)
!5794 = distinct !DILexicalBlock(scope: !5795, file: !5729, line: 72, column: 11)
!5795 = distinct !DILexicalBlock(scope: !5784, file: !5729, line: 71, column: 5)
!5796 = !DILocation(line: 72, column: 11, scope: !5795)
!5797 = !DILocation(line: 73, column: 9, scope: !5794)
!5798 = !DILocation(line: 73, column: 15, scope: !5794)
!5799 = !DILocation(line: 74, column: 7, scope: !5795)
!5800 = !DILocation(line: 77, column: 3, scope: !5728)
!5801 = !DILocation(line: 78, column: 1, scope: !5728)
!5802 = distinct !DISubprogram(name: "locale_charset", scope: !5803, file: !5803, line: 831, type: !5804, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !320, retainedNodes: !4)
!5803 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5804 = !DISubroutineType(types: !5805)
!5805 = !{!49}
!5806 = !DILocalVariable(name: "codeset", scope: !5802, file: !5803, line: 833, type: !49)
!5807 = !DILocation(line: 833, column: 15, scope: !5802)
!5808 = !DILocation(line: 847, column: 13, scope: !5802)
!5809 = !DILocation(line: 847, column: 11, scope: !5802)
!5810 = !DILocation(line: 911, column: 7, scope: !5811)
!5811 = distinct !DILexicalBlock(scope: !5802, file: !5803, line: 911, column: 7)
!5812 = !DILocation(line: 911, column: 15, scope: !5811)
!5813 = !DILocation(line: 911, column: 7, scope: !5802)
!5814 = !DILocation(line: 913, column: 13, scope: !5811)
!5815 = !DILocation(line: 913, column: 5, scope: !5811)
!5816 = !DILocation(line: 1070, column: 13, scope: !5817)
!5817 = distinct !DILexicalBlock(scope: !5818, file: !5803, line: 1070, column: 13)
!5818 = distinct !DILexicalBlock(scope: !5819, file: !5803, line: 1060, column: 7)
!5819 = distinct !DILexicalBlock(scope: !5802, file: !5803, line: 1019, column: 3)
!5820 = !DILocation(line: 1070, column: 24, scope: !5817)
!5821 = !DILocation(line: 1070, column: 13, scope: !5818)
!5822 = !DILocation(line: 1071, column: 19, scope: !5817)
!5823 = !DILocation(line: 1071, column: 11, scope: !5817)
!5824 = !DILocation(line: 1158, column: 10, scope: !5802)
!5825 = !DILocation(line: 1158, column: 3, scope: !5802)
!5826 = distinct !DISubprogram(name: "rpl_fclose", scope: !5827, file: !5827, line: 58, type: !5828, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !322, retainedNodes: !4)
!5827 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5828 = !DISubroutineType(types: !5829)
!5829 = !{!53, !5830}
!5830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5831, size: 64)
!5831 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !5832)
!5832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !5833)
!5833 = !{!5834, !5835, !5836, !5837, !5838, !5839, !5840, !5841, !5842, !5843, !5844, !5845, !5846, !5847, !5849, !5850, !5851, !5852, !5853, !5854, !5855, !5856, !5857, !5858, !5859, !5860, !5861, !5862, !5863}
!5834 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5832, file: !4888, line: 51, baseType: !53, size: 32)
!5835 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5832, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!5836 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5832, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!5837 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5832, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!5838 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5832, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!5839 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5832, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!5840 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5832, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!5841 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5832, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!5842 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5832, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!5843 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5832, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!5844 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5832, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!5845 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5832, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!5846 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5832, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!5847 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5832, file: !4888, line: 70, baseType: !5848, size: 64, offset: 832)
!5848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5832, size: 64)
!5849 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5832, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!5850 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5832, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!5851 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5832, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!5852 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5832, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!5853 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5832, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!5854 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5832, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!5855 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5832, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!5856 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5832, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!5857 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5832, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!5858 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5832, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!5859 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5832, file: !4888, line: 93, baseType: !5848, size: 64, offset: 1344)
!5860 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5832, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!5861 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5832, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!5862 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5832, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!5863 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5832, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!5864 = !DILocalVariable(name: "fp", arg: 1, scope: !5826, file: !5827, line: 58, type: !5830)
!5865 = !DILocation(line: 58, column: 19, scope: !5826)
!5866 = !DILocalVariable(name: "saved_errno", scope: !5826, file: !5827, line: 60, type: !53)
!5867 = !DILocation(line: 60, column: 7, scope: !5826)
!5868 = !DILocalVariable(name: "fd", scope: !5826, file: !5827, line: 61, type: !53)
!5869 = !DILocation(line: 61, column: 7, scope: !5826)
!5870 = !DILocalVariable(name: "result", scope: !5826, file: !5827, line: 62, type: !53)
!5871 = !DILocation(line: 62, column: 7, scope: !5826)
!5872 = !DILocation(line: 65, column: 16, scope: !5826)
!5873 = !DILocation(line: 65, column: 8, scope: !5826)
!5874 = !DILocation(line: 65, column: 6, scope: !5826)
!5875 = !DILocation(line: 66, column: 7, scope: !5876)
!5876 = distinct !DILexicalBlock(scope: !5826, file: !5827, line: 66, column: 7)
!5877 = !DILocation(line: 66, column: 10, scope: !5876)
!5878 = !DILocation(line: 66, column: 7, scope: !5826)
!5879 = !DILocation(line: 67, column: 28, scope: !5876)
!5880 = !DILocation(line: 67, column: 12, scope: !5876)
!5881 = !DILocation(line: 67, column: 5, scope: !5876)
!5882 = !DILocation(line: 72, column: 9, scope: !5883)
!5883 = distinct !DILexicalBlock(scope: !5826, file: !5827, line: 72, column: 7)
!5884 = !DILocation(line: 72, column: 23, scope: !5883)
!5885 = !DILocation(line: 72, column: 41, scope: !5883)
!5886 = !DILocation(line: 72, column: 33, scope: !5883)
!5887 = !DILocation(line: 72, column: 26, scope: !5883)
!5888 = !DILocation(line: 72, column: 59, scope: !5883)
!5889 = !DILocation(line: 73, column: 7, scope: !5883)
!5890 = !DILocation(line: 73, column: 18, scope: !5883)
!5891 = !DILocation(line: 73, column: 10, scope: !5883)
!5892 = !DILocation(line: 72, column: 7, scope: !5826)
!5893 = !DILocation(line: 74, column: 19, scope: !5883)
!5894 = !DILocation(line: 74, column: 17, scope: !5883)
!5895 = !DILocation(line: 74, column: 5, scope: !5883)
!5896 = !DILocation(line: 100, column: 28, scope: !5826)
!5897 = !DILocation(line: 100, column: 12, scope: !5826)
!5898 = !DILocation(line: 100, column: 10, scope: !5826)
!5899 = !DILocation(line: 105, column: 7, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5826, file: !5827, line: 105, column: 7)
!5901 = !DILocation(line: 105, column: 19, scope: !5900)
!5902 = !DILocation(line: 105, column: 7, scope: !5826)
!5903 = !DILocation(line: 107, column: 15, scope: !5904)
!5904 = distinct !DILexicalBlock(scope: !5900, file: !5827, line: 106, column: 5)
!5905 = !DILocation(line: 107, column: 7, scope: !5904)
!5906 = !DILocation(line: 107, column: 13, scope: !5904)
!5907 = !DILocation(line: 108, column: 14, scope: !5904)
!5908 = !DILocation(line: 109, column: 5, scope: !5904)
!5909 = !DILocation(line: 111, column: 10, scope: !5826)
!5910 = !DILocation(line: 111, column: 3, scope: !5826)
!5911 = !DILocation(line: 112, column: 1, scope: !5826)
!5912 = !DILocalVariable(name: "fp", arg: 1, scope: !5913, file: !5827, line: 58, type: !5916)
!5913 = distinct !DISubprogram(name: "rpl_fclose", scope: !5827, file: !5827, line: 58, type: !5914, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5950, retainedNodes: !4)
!5914 = !DISubroutineType(types: !5915)
!5915 = !{!53, !5916}
!5916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5917, size: 64)
!5917 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !5918)
!5918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !5919)
!5919 = !{!5920, !5921, !5922, !5923, !5924, !5925, !5926, !5927, !5928, !5929, !5930, !5931, !5932, !5933, !5935, !5936, !5937, !5938, !5939, !5940, !5941, !5942, !5943, !5944, !5945, !5946, !5947, !5948, !5949}
!5920 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5918, file: !4888, line: 51, baseType: !53, size: 32)
!5921 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5918, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!5922 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5918, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!5923 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5918, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!5924 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5918, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!5925 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5918, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!5926 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5918, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!5927 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5918, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!5928 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5918, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!5929 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5918, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!5930 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5918, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!5931 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5918, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!5932 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5918, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!5933 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5918, file: !4888, line: 70, baseType: !5934, size: 64, offset: 832)
!5934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5918, size: 64)
!5935 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5918, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!5936 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5918, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!5937 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5918, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!5938 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5918, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!5939 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5918, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!5940 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5918, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!5941 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5918, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!5942 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5918, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!5943 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5918, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!5944 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5918, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!5945 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5918, file: !4888, line: 93, baseType: !5934, size: 64, offset: 1344)
!5946 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5918, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!5947 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5918, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!5948 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5918, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!5949 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5918, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!5950 = distinct !DICompileUnit(language: DW_LANG_C99, file: !323, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!5951 = !DILocalVariable(name: "saved_errno", scope: !5913, file: !5827, line: 60, type: !53)
!5952 = !DILocalVariable(name: "fd", scope: !5913, file: !5827, line: 61, type: !53)
!5953 = !DILocalVariable(name: "result", scope: !5913, file: !5827, line: 62, type: !53)
!5954 = distinct !DISubprogram(name: "rpl_fflush", scope: !5955, file: !5955, line: 129, type: !5956, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !324, retainedNodes: !4)
!5955 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5956 = !DISubroutineType(types: !5957)
!5957 = !{!53, !5958}
!5958 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5959, size: 64)
!5959 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !5960)
!5960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !5961)
!5961 = !{!5962, !5963, !5964, !5965, !5966, !5967, !5968, !5969, !5970, !5971, !5972, !5973, !5974, !5975, !5977, !5978, !5979, !5980, !5981, !5982, !5983, !5984, !5985, !5986, !5987, !5988, !5989, !5990, !5991}
!5962 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5960, file: !4888, line: 51, baseType: !53, size: 32)
!5963 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5960, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!5964 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5960, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!5965 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5960, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!5966 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5960, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!5967 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5960, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!5968 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5960, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!5969 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5960, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!5970 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5960, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!5971 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5960, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!5972 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5960, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!5973 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5960, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!5974 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5960, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!5975 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5960, file: !4888, line: 70, baseType: !5976, size: 64, offset: 832)
!5976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5960, size: 64)
!5977 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5960, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!5978 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5960, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!5979 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5960, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!5980 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5960, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!5981 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5960, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!5982 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5960, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!5983 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5960, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!5984 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5960, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!5985 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5960, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!5986 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5960, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!5987 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5960, file: !4888, line: 93, baseType: !5976, size: 64, offset: 1344)
!5988 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5960, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!5989 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5960, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!5990 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5960, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!5991 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5960, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!5992 = !DILocalVariable(name: "stream", arg: 1, scope: !5954, file: !5955, line: 129, type: !5958)
!5993 = !DILocation(line: 129, column: 19, scope: !5954)
!5994 = !DILocation(line: 150, column: 7, scope: !5995)
!5995 = distinct !DILexicalBlock(scope: !5954, file: !5955, line: 150, column: 7)
!5996 = !DILocation(line: 150, column: 14, scope: !5995)
!5997 = !DILocation(line: 150, column: 22, scope: !5995)
!5998 = !DILocation(line: 150, column: 27, scope: !5995)
!5999 = !DILocation(line: 150, column: 7, scope: !5954)
!6000 = !DILocation(line: 151, column: 20, scope: !5995)
!6001 = !DILocation(line: 151, column: 12, scope: !5995)
!6002 = !DILocation(line: 151, column: 5, scope: !5995)
!6003 = !DILocation(line: 156, column: 44, scope: !5954)
!6004 = !DILocation(line: 156, column: 3, scope: !5954)
!6005 = !DILocation(line: 158, column: 18, scope: !5954)
!6006 = !DILocation(line: 158, column: 10, scope: !5954)
!6007 = !DILocation(line: 158, column: 3, scope: !5954)
!6008 = !DILocation(line: 235, column: 1, scope: !5954)
!6009 = !DILocalVariable(name: "stream", arg: 1, scope: !6010, file: !5955, line: 129, type: !6013)
!6010 = distinct !DISubprogram(name: "rpl_fflush", scope: !5955, file: !5955, line: 129, type: !6011, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6047, retainedNodes: !4)
!6011 = !DISubroutineType(types: !6012)
!6012 = !{!53, !6013}
!6013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6014, size: 64)
!6014 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !6015)
!6015 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !6016)
!6016 = !{!6017, !6018, !6019, !6020, !6021, !6022, !6023, !6024, !6025, !6026, !6027, !6028, !6029, !6030, !6032, !6033, !6034, !6035, !6036, !6037, !6038, !6039, !6040, !6041, !6042, !6043, !6044, !6045, !6046}
!6017 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6015, file: !4888, line: 51, baseType: !53, size: 32)
!6018 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6015, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!6019 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6015, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!6020 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6015, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!6021 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6015, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!6022 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6015, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!6023 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6015, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!6024 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6015, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!6025 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6015, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!6026 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6015, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!6027 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6015, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!6028 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6015, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!6029 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6015, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!6030 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6015, file: !4888, line: 70, baseType: !6031, size: 64, offset: 832)
!6031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6015, size: 64)
!6032 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6015, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!6033 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6015, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!6034 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6015, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!6035 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6015, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!6036 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6015, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!6037 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6015, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!6038 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6015, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!6039 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6015, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!6040 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6015, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!6041 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6015, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!6042 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6015, file: !4888, line: 93, baseType: !6031, size: 64, offset: 1344)
!6043 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6015, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!6044 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6015, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!6045 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6015, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!6046 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6015, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!6047 = distinct !DICompileUnit(language: DW_LANG_C99, file: !325, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!6048 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !5955, file: !5955, line: 41, type: !6049, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !324, retainedNodes: !4)
!6049 = !DISubroutineType(types: !6050)
!6050 = !{null, !5958}
!6051 = !DILocalVariable(name: "fp", arg: 1, scope: !6048, file: !5955, line: 41, type: !5958)
!6052 = !DILocation(line: 41, column: 48, scope: !6048)
!6053 = !DILocation(line: 43, column: 7, scope: !6054)
!6054 = distinct !DILexicalBlock(scope: !6048, file: !5955, line: 43, column: 7)
!6055 = !DILocation(line: 43, column: 11, scope: !6054)
!6056 = !DILocation(line: 43, column: 18, scope: !6054)
!6057 = !DILocation(line: 43, column: 7, scope: !6048)
!6058 = !DILocation(line: 45, column: 13, scope: !6054)
!6059 = !DILocation(line: 45, column: 5, scope: !6054)
!6060 = !DILocation(line: 46, column: 1, scope: !6048)
!6061 = !DILocalVariable(name: "fp", arg: 1, scope: !6062, file: !5955, line: 41, type: !6065)
!6062 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !5955, file: !5955, line: 41, type: !6063, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !6099, retainedNodes: !4)
!6063 = !DISubroutineType(types: !6064)
!6064 = !{null, !6065}
!6065 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6066, size: 64)
!6066 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !6067)
!6067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !6068)
!6068 = !{!6069, !6070, !6071, !6072, !6073, !6074, !6075, !6076, !6077, !6078, !6079, !6080, !6081, !6082, !6084, !6085, !6086, !6087, !6088, !6089, !6090, !6091, !6092, !6093, !6094, !6095, !6096, !6097, !6098}
!6069 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6067, file: !4888, line: 51, baseType: !53, size: 32)
!6070 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6067, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!6071 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6067, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!6072 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6067, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!6073 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6067, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!6074 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6067, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!6075 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6067, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!6076 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6067, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!6077 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6067, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!6078 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6067, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!6079 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6067, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!6080 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6067, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!6081 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6067, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!6082 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6067, file: !4888, line: 70, baseType: !6083, size: 64, offset: 832)
!6083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6067, size: 64)
!6084 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6067, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!6085 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6067, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!6086 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6067, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!6087 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6067, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!6088 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6067, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!6089 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6067, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!6090 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6067, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!6091 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6067, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!6092 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6067, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!6093 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6067, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!6094 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6067, file: !4888, line: 93, baseType: !6083, size: 64, offset: 1344)
!6095 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6067, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!6096 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6067, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!6097 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6067, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!6098 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6067, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!6099 = distinct !DICompileUnit(language: DW_LANG_C99, file: !325, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!6100 = distinct !DISubprogram(name: "rpl_fseeko", scope: !6101, file: !6101, line: 28, type: !6102, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !326, retainedNodes: !4)
!6101 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!6102 = !DISubroutineType(types: !6103)
!6103 = !{!53, !6104, !6138, !53}
!6104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6105, size: 64)
!6105 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !6106)
!6106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !6107)
!6107 = !{!6108, !6109, !6110, !6111, !6112, !6113, !6114, !6115, !6116, !6117, !6118, !6119, !6120, !6121, !6123, !6124, !6125, !6126, !6127, !6128, !6129, !6130, !6131, !6132, !6133, !6134, !6135, !6136, !6137}
!6108 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6106, file: !4888, line: 51, baseType: !53, size: 32)
!6109 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6106, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!6110 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6106, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!6111 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6106, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!6112 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6106, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!6113 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6106, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!6114 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6106, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!6115 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6106, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!6116 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6106, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!6117 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6106, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!6118 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6106, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!6119 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6106, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!6120 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6106, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!6121 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6106, file: !4888, line: 70, baseType: !6122, size: 64, offset: 832)
!6122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6106, size: 64)
!6123 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6106, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!6124 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6106, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!6125 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6106, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!6126 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6106, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!6127 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6106, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!6128 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6106, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!6129 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6106, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!6130 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6106, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!6131 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6106, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!6132 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6106, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!6133 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6106, file: !4888, line: 93, baseType: !6122, size: 64, offset: 1344)
!6134 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6106, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!6135 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6106, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!6136 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6106, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!6137 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6106, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!6138 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !5173, line: 63, baseType: !1390)
!6139 = !DILocalVariable(name: "fp", arg: 1, scope: !6100, file: !6101, line: 28, type: !6104)
!6140 = !DILocation(line: 28, column: 15, scope: !6100)
!6141 = !DILocalVariable(name: "offset", arg: 2, scope: !6100, file: !6101, line: 28, type: !6138)
!6142 = !DILocation(line: 28, column: 25, scope: !6100)
!6143 = !DILocalVariable(name: "whence", arg: 3, scope: !6100, file: !6101, line: 28, type: !53)
!6144 = !DILocation(line: 28, column: 37, scope: !6100)
!6145 = !DILocation(line: 52, column: 7, scope: !6146)
!6146 = distinct !DILexicalBlock(scope: !6100, file: !6101, line: 52, column: 7)
!6147 = !DILocation(line: 52, column: 11, scope: !6146)
!6148 = !DILocation(line: 52, column: 27, scope: !6146)
!6149 = !DILocation(line: 52, column: 31, scope: !6146)
!6150 = !DILocation(line: 52, column: 24, scope: !6146)
!6151 = !DILocation(line: 53, column: 7, scope: !6146)
!6152 = !DILocation(line: 53, column: 10, scope: !6146)
!6153 = !DILocation(line: 53, column: 14, scope: !6146)
!6154 = !DILocation(line: 53, column: 31, scope: !6146)
!6155 = !DILocation(line: 53, column: 35, scope: !6146)
!6156 = !DILocation(line: 53, column: 28, scope: !6146)
!6157 = !DILocation(line: 54, column: 7, scope: !6146)
!6158 = !DILocation(line: 54, column: 10, scope: !6146)
!6159 = !DILocation(line: 54, column: 14, scope: !6146)
!6160 = !DILocation(line: 54, column: 28, scope: !6146)
!6161 = !DILocation(line: 52, column: 7, scope: !6100)
!6162 = !DILocalVariable(name: "pos", scope: !6163, file: !6101, line: 117, type: !6138)
!6163 = distinct !DILexicalBlock(scope: !6146, file: !6101, line: 113, column: 5)
!6164 = !DILocation(line: 117, column: 13, scope: !6163)
!6165 = !DILocation(line: 117, column: 34, scope: !6163)
!6166 = !DILocation(line: 117, column: 26, scope: !6163)
!6167 = !DILocation(line: 117, column: 39, scope: !6163)
!6168 = !DILocation(line: 117, column: 47, scope: !6163)
!6169 = !DILocation(line: 117, column: 19, scope: !6163)
!6170 = !DILocation(line: 118, column: 11, scope: !6171)
!6171 = distinct !DILexicalBlock(scope: !6163, file: !6101, line: 118, column: 11)
!6172 = !DILocation(line: 118, column: 15, scope: !6171)
!6173 = !DILocation(line: 118, column: 11, scope: !6163)
!6174 = !DILocation(line: 124, column: 11, scope: !6175)
!6175 = distinct !DILexicalBlock(scope: !6171, file: !6101, line: 119, column: 9)
!6176 = !DILocation(line: 129, column: 7, scope: !6163)
!6177 = !DILocation(line: 129, column: 11, scope: !6163)
!6178 = !DILocation(line: 129, column: 18, scope: !6163)
!6179 = !DILocation(line: 130, column: 21, scope: !6163)
!6180 = !DILocation(line: 130, column: 7, scope: !6163)
!6181 = !DILocation(line: 130, column: 11, scope: !6163)
!6182 = !DILocation(line: 130, column: 19, scope: !6163)
!6183 = !DILocation(line: 161, column: 7, scope: !6163)
!6184 = !DILocation(line: 163, column: 18, scope: !6100)
!6185 = !DILocation(line: 163, column: 22, scope: !6100)
!6186 = !DILocation(line: 163, column: 30, scope: !6100)
!6187 = !DILocation(line: 163, column: 10, scope: !6100)
!6188 = !DILocation(line: 163, column: 3, scope: !6100)
!6189 = !DILocation(line: 164, column: 1, scope: !6100)
!6190 = !DILocalVariable(name: "fp", arg: 1, scope: !6191, file: !6101, line: 28, type: !6194)
!6191 = distinct !DISubprogram(name: "rpl_fseeko", scope: !6101, file: !6101, line: 28, type: !6192, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !6228, retainedNodes: !4)
!6192 = !DISubroutineType(types: !6193)
!6193 = !{!53, !6194, !6138, !53}
!6194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6195, size: 64)
!6195 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !4886, line: 7, baseType: !6196)
!6196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !4888, line: 49, size: 1728, elements: !6197)
!6197 = !{!6198, !6199, !6200, !6201, !6202, !6203, !6204, !6205, !6206, !6207, !6208, !6209, !6210, !6211, !6213, !6214, !6215, !6216, !6217, !6218, !6219, !6220, !6221, !6222, !6223, !6224, !6225, !6226, !6227}
!6198 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !6196, file: !4888, line: 51, baseType: !53, size: 32)
!6199 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !6196, file: !4888, line: 54, baseType: !6, size: 64, offset: 64)
!6200 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !6196, file: !4888, line: 55, baseType: !6, size: 64, offset: 128)
!6201 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !6196, file: !4888, line: 56, baseType: !6, size: 64, offset: 192)
!6202 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !6196, file: !4888, line: 57, baseType: !6, size: 64, offset: 256)
!6203 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !6196, file: !4888, line: 58, baseType: !6, size: 64, offset: 320)
!6204 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !6196, file: !4888, line: 59, baseType: !6, size: 64, offset: 384)
!6205 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !6196, file: !4888, line: 60, baseType: !6, size: 64, offset: 448)
!6206 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !6196, file: !4888, line: 61, baseType: !6, size: 64, offset: 512)
!6207 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !6196, file: !4888, line: 64, baseType: !6, size: 64, offset: 576)
!6208 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !6196, file: !4888, line: 65, baseType: !6, size: 64, offset: 640)
!6209 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !6196, file: !4888, line: 66, baseType: !6, size: 64, offset: 704)
!6210 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !6196, file: !4888, line: 68, baseType: !4903, size: 64, offset: 768)
!6211 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !6196, file: !4888, line: 70, baseType: !6212, size: 64, offset: 832)
!6212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6196, size: 64)
!6213 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !6196, file: !4888, line: 72, baseType: !53, size: 32, offset: 896)
!6214 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !6196, file: !4888, line: 73, baseType: !53, size: 32, offset: 928)
!6215 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !6196, file: !4888, line: 74, baseType: !1390, size: 64, offset: 960)
!6216 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !6196, file: !4888, line: 77, baseType: !188, size: 16, offset: 1024)
!6217 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !6196, file: !4888, line: 78, baseType: !4912, size: 8, offset: 1040)
!6218 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !6196, file: !4888, line: 79, baseType: !4914, size: 8, offset: 1048)
!6219 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !6196, file: !4888, line: 81, baseType: !4918, size: 64, offset: 1088)
!6220 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !6196, file: !4888, line: 89, baseType: !4921, size: 64, offset: 1152)
!6221 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !6196, file: !4888, line: 91, baseType: !4923, size: 64, offset: 1216)
!6222 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !6196, file: !4888, line: 92, baseType: !4926, size: 64, offset: 1280)
!6223 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !6196, file: !4888, line: 93, baseType: !6212, size: 64, offset: 1344)
!6224 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !6196, file: !4888, line: 94, baseType: !8, size: 64, offset: 1408)
!6225 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !6196, file: !4888, line: 95, baseType: !110, size: 64, offset: 1472)
!6226 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !6196, file: !4888, line: 96, baseType: !53, size: 32, offset: 1536)
!6227 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !6196, file: !4888, line: 98, baseType: !105, size: 160, offset: 1568)
!6228 = distinct !DICompileUnit(language: DW_LANG_C99, file: !327, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !298, nameTableKind: None)
!6229 = !DILocalVariable(name: "offset", arg: 2, scope: !6191, file: !6101, line: 28, type: !6138)
!6230 = !DILocalVariable(name: "whence", arg: 3, scope: !6191, file: !6101, line: 28, type: !53)
