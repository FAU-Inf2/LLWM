; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.passwd = type { i8*, i8*, i32, i32, i8*, i8*, i8* }
%struct.group = type { i8*, i8*, i32, i8** }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"Usage: %s [OPTION]... [USER]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [105 x i8] c"Print user and group information for each specified USER,\0Aor (when USER omitted) for the current user.\0A\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [521 x i8] c"  -a             ignore, for compatibility with other versions\0A  -Z, --context  print only the security context of the process\0A  -g, --group    print only the effective group ID\0A  -G, --groups   print all group IDs\0A  -n, --name     print a name instead of a number, for -ugG\0A  -r, --real     print the real ID instead of the effective ID, with -ugG\0A  -u, --user     print only the effective user ID\0A  -z, --zero     delimit entries with NUL characters, not whitespace;\0A                   not permitted in default format\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [71 x i8] c"\0AWithout any OPTION, print some useful set of identified information.\0A\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"id\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.29, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.35 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.36 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.37 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.38 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.39 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.40 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.41 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.8 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.29 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.30 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.31 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.33 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.34 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"agnruzGZ\00", align 1
@longopts = internal constant [10 x %struct.option] [%struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i32 0, i32 0), i32 0, i32* null, i32 90 }, %struct.option { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i32 0, i32 0), i32 0, i32* null, i32 103 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.44, i32 0, i32 0), i32 0, i32* null, i32 71 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), i32 0, i32* null, i32 117 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), i32 0, i32* null, i32 122 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.49, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.50, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@.str.12 = private unnamed_addr constant [55 x i8] c"--context (-Z) works only on an SELinux-enabled kernel\00", align 1
@just_context = internal global i8 0, align 1, !dbg !25
@just_group = internal global i8 0, align 1, !dbg !28
@use_name = internal global i8 0, align 1, !dbg !30
@use_real = internal global i8 0, align 1, !dbg !32
@just_user = internal global i8 0, align 1, !dbg !34
@opt_zero = internal global i8 0, align 1, !dbg !36
@just_group_list = internal global i8 0, align 1, !dbg !38
@.str.14 = private unnamed_addr constant [15 x i8] c"Arnold Robbins\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@optind = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [50 x i8] c"cannot print security context when user specified\00", align 1
@.str.17 = private unnamed_addr constant [44 x i8] c"cannot print \22only\22 of more than one choice\00", align 1
@.str.18 = private unnamed_addr constant [54 x i8] c"cannot print only names or real IDs in default format\00", align 1
@.str.19 = private unnamed_addr constant [46 x i8] c"option --zero not permitted in default format\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@context = internal global i8* null, align 8, !dbg !40
@.str.21 = private unnamed_addr constant [26 x i8] c"can't get process context\00", align 1
@multiple_users = internal global i8 0, align 1, !dbg !42
@euid = internal global i32 0, align 4, !dbg !17
@.str.22 = private unnamed_addr constant [17 x i8] c"%s: no such user\00", align 1
@ok = internal global i8 1, align 1, !dbg !44
@ruid = internal global i32 0, align 4, !dbg !10
@egid = internal global i32 0, align 4, !dbg !23
@rgid = internal global i32 0, align 4, !dbg !19
@.str.23 = private unnamed_addr constant [25 x i8] c"cannot get effective UID\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"cannot get real UID\00", align 1
@.str.25 = private unnamed_addr constant [25 x i8] c"cannot get effective GID\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"cannot get real GID\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"uid=%s\00", align 1
@.str.53 = private unnamed_addr constant [5 x i8] c"(%s)\00", align 1
@.str.54 = private unnamed_addr constant [8 x i8] c" gid=%s\00", align 1
@.str.55 = private unnamed_addr constant [9 x i8] c" euid=%s\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c" egid=%s\00", align 1
@.str.57 = private unnamed_addr constant [33 x i8] c"failed to get groups for user %s\00", align 1
@.str.58 = private unnamed_addr constant [45 x i8] c"failed to get groups for the current process\00", align 1
@.str.59 = private unnamed_addr constant [9 x i8] c" groups=\00", align 1
@.str.60 = private unnamed_addr constant [12 x i8] c" context=%s\00", align 1
@gidtostr_ptr.buf = internal global [21 x i8] zeroinitializer, align 16, !dbg !56
@uidtostr_ptr.buf = internal global [21 x i8] zeroinitializer, align 16, !dbg !46
@.str.51 = private unnamed_addr constant [32 x i8] c"cannot find name for user ID %s\00", align 1
@.str.42 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"group\00", align 1
@.str.44 = private unnamed_addr constant [7 x i8] c"groups\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"real\00", align 1
@.str.47 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@.str.48 = private unnamed_addr constant [5 x i8] c"zero\00", align 1
@.str.49 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.50 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.61 = private unnamed_addr constant [33 x i8] c"failed to get groups for user %s\00", align 1
@.str.1.62 = private unnamed_addr constant [45 x i8] c"failed to get groups for the current process\00", align 1
@.str.2.63 = private unnamed_addr constant [34 x i8] c"cannot find name for group ID %lu\00", align 1
@gidtostr_ptr.buf.65 = internal global [21 x i8] zeroinitializer, align 16, !dbg !78
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.68, i32 0, i32 0), align 8, !dbg !86
@.str.68 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !91
@.str.71 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !96
@.str.1.72 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.73 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !99
@.str.80 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.81 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.82 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !106
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !113
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !165
@nslots = internal global i32 1, align 4, !dbg !172
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !174
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !160
@.str.10.85 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.86 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.87 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.88 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.89 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.90 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.91 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.92 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.93 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !148
@parse_with_separator.E_bad_spec = internal global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.105, i32 0, i32 0), align 8, !dbg !176
@.str.3.102 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@parse_with_separator.E_invalid_user = internal global i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.104, i32 0, i32 0), align 8, !dbg !189
@parse_with_separator.E_invalid_group = internal global i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.103, i32 0, i32 0), align 8, !dbg !191
@.str.1.103 = private unnamed_addr constant [14 x i8] c"invalid group\00", align 1
@.str.104 = private unnamed_addr constant [13 x i8] c"invalid user\00", align 1
@.str.2.105 = private unnamed_addr constant [13 x i8] c"invalid spec\00", align 1
@.str.106 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.107 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.108 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.109 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.110 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.111 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.112 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.113 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.114 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.115 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.116 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.117 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.118 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.119 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.120 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.121 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !193
@.str.1.136 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.137 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.142 = private unnamed_addr constant [38 x i8] c"0 <= strtol_base && strtol_base <= 36\00", align 1
@.str.1.143 = private unnamed_addr constant [16 x i8] c"./lib/xstrtol.c\00", align 1
@__PRETTY_FUNCTION__.xstrtoul = private unnamed_addr constant [81 x i8] c"strtol_error xstrtoul(const char *, char **, int, unsigned long *, const char *)\00", align 1
@.str.152 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.153 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.156 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.157 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [2 x i8] c"+\00"
@.compVal1 = private global [4 x i8] c"\01  \00"
@.compVal2 = private global [1 x i8] zeroinitializer
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0
@x.101 = common global i32 0
@y.102 = common global i32 0
@x.103 = common global i32 0
@y.104 = common global i32 0
@x.105 = common global i32 0
@y.106 = common global i32 0
@x.107 = common global i32 0
@y.108 = common global i32 0
@x.109 = common global i32 0
@y.110 = common global i32 0
@x.111 = common global i32 0
@y.112 = common global i32 0
@x.113 = common global i32 0
@y.114 = common global i32 0
@x.115 = common global i32 0
@y.116 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !269 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !272, metadata !DIExpression()), !dbg !273
  %3 = load i32, i32* %2, align 4, !dbg !274
  %4 = icmp ne i32 %3, 0, !dbg !276
  br i1 %4, label %5, label %28, !dbg !277

5:                                                ; preds = %1
  %6 = load i32, i32* @x
  %7 = load i32, i32* @y
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = load i32, i32* @x
  %15 = load i32, i32* @y
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %22, !dbg !278

22:                                               ; preds = %originalBBpart2
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !279
  %24 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !279
  %25 = load i8*, i8** @program_name, align 8, !dbg !279
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* %24, i8* %25), !dbg !279
  br label %27, !dbg !279

27:                                               ; preds = %22
  br label %47, !dbg !279

28:                                               ; preds = %1
  %29 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !281
  %30 = load i8*, i8** @program_name, align 8, !dbg !283
  %31 = call i32 (i8*, ...) @printf(i8* %29, i8* %30), !dbg !284
  %32 = call i8* @gettext(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !285
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !285
  %34 = call i32 @fputs_unlocked(i8* %32, %struct._IO_FILE* %33), !dbg !285
  %35 = call i8* @gettext(i8* getelementptr inbounds ([521 x i8], [521 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !286
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !286
  %37 = call i32 @fputs_unlocked(i8* %35, %struct._IO_FILE* %36), !dbg !286
  %38 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !287
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !287
  %40 = call i32 @fputs_unlocked(i8* %38, %struct._IO_FILE* %39), !dbg !287
  %41 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !288
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !288
  %43 = call i32 @fputs_unlocked(i8* %41, %struct._IO_FILE* %42), !dbg !288
  %44 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !289
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !289
  %46 = call i32 @fputs_unlocked(i8* %44, %struct._IO_FILE* %45), !dbg !289
  call void @emit_ancillary_info(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)), !dbg !290
  br label %47

47:                                               ; preds = %28, %27
  %48 = load i32, i32* %2, align 4, !dbg !291
  call void @exit(i32 %48) #12, !dbg !292
  unreachable, !dbg !292

originalBBalteredBB:                              ; preds = %originalBB, %5
  br label %originalBB
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !293 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !297, metadata !DIExpression()), !dbg !298
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !299, metadata !DIExpression()), !dbg !308
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !308
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !308
  call void @llvm.dbg.declare(metadata i8** %12, metadata !309, metadata !DIExpression()), !dbg !310
  %16 = load i8*, i8** %10, align 8, !dbg !311
  store i8* %16, i8** %12, align 8, !dbg !310
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !312, metadata !DIExpression()), !dbg !314
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !315
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !314
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !316

26:                                               ; preds = %57, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !317
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !318
  %37 = load i8*, i8** %36, align 8, !dbg !318
  %38 = icmp ne i8* %37, null, !dbg !317
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %55, !dbg !319

47:                                               ; preds = %originalBBpart24
  %48 = load i8*, i8** %10, align 8, !dbg !320
  %49 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !320
  %50 = getelementptr inbounds %struct.infomap, %struct.infomap* %49, i32 0, i32 0, !dbg !320
  %51 = load i8*, i8** %50, align 8, !dbg !320
  %52 = call i32 @strcmp(i8* %48, i8* %51) #13, !dbg !320
  %53 = icmp eq i32 %52, 0, !dbg !320
  %54 = xor i1 %53, true, !dbg !321
  br label %55

55:                                               ; preds = %47, %originalBBpart24
  %56 = phi i1 [ false, %originalBBpart24 ], [ %54, %47 ], !dbg !322
  br i1 %56, label %57, label %60, !dbg !316

57:                                               ; preds = %55
  %58 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !323
  %59 = getelementptr inbounds %struct.infomap, %struct.infomap* %58, i32 1, !dbg !323
  store %struct.infomap* %59, %struct.infomap** %13, align 8, !dbg !323
  br label %26, !dbg !316, !llvm.loop !324

60:                                               ; preds = %55
  %61 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !325
  %62 = getelementptr inbounds %struct.infomap, %struct.infomap* %61, i32 0, i32 1, !dbg !327
  %63 = load i8*, i8** %62, align 8, !dbg !327
  %64 = icmp ne i8* %63, null, !dbg !325
  br i1 %64, label %65, label %85, !dbg !328

65:                                               ; preds = %60
  %66 = load i32, i32* @x.1
  %67 = load i32, i32* @y.2
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %65, %originalBB6alteredBB
  %74 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !329
  %75 = getelementptr inbounds %struct.infomap, %struct.infomap* %74, i32 0, i32 1, !dbg !330
  %76 = load i8*, i8** %75, align 8, !dbg !330
  store i8* %76, i8** %12, align 8, !dbg !331
  %77 = load i32, i32* @x.1
  %78 = load i32, i32* @y.2
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %85, !dbg !332

85:                                               ; preds = %originalBBpart28, %60
  %86 = load i32, i32* @x.1
  %87 = load i32, i32* @y.2
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %85, %originalBB10alteredBB
  %94 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !333
  %95 = call i32 (i8*, ...) @printf(i8* %94, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0)), !dbg !334
  call void @llvm.dbg.declare(metadata i8** %14, metadata !335, metadata !DIExpression()), !dbg !336
  %96 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !337
  store i8* %96, i8** %14, align 8, !dbg !336
  %97 = load i8*, i8** %14, align 8, !dbg !338
  %98 = icmp ne i8* %97, null, !dbg !338
  %99 = load i32, i32* @x.1
  %100 = load i32, i32* @y.2
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %98, label %107, label %131, !dbg !340

107:                                              ; preds = %originalBBpart212
  %108 = load i8*, i8** %14, align 8, !dbg !341
  %109 = call i32 @strncmp(i8* %108, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.37, i64 0, i64 0), i64 3) #13, !dbg !341
  %110 = icmp ne i32 %109, 0, !dbg !341
  br i1 %110, label %111, label %131, !dbg !342

111:                                              ; preds = %107
  %112 = load i32, i32* @x.1
  %113 = load i32, i32* @y.2
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %111, %originalBB14alteredBB
  %120 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !343
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !343
  %122 = call i32 @fputs_unlocked(i8* %120, %struct._IO_FILE* %121), !dbg !343
  %123 = load i32, i32* @x.1
  %124 = load i32, i32* @y.2
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %131, !dbg !345

131:                                              ; preds = %originalBBpart216, %107, %originalBBpart212
  %132 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !346
  %133 = load i8*, i8** %10, align 8, !dbg !347
  %134 = call i32 (i8*, ...) @printf(i8* %132, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0), i8* %133), !dbg !348
  %135 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.40, i64 0, i64 0)) #10, !dbg !349
  %136 = load i8*, i8** %12, align 8, !dbg !350
  %137 = load i8*, i8** %12, align 8, !dbg !351
  %138 = load i8*, i8** %10, align 8, !dbg !352
  %139 = icmp eq i8* %137, %138, !dbg !353
  %140 = zext i1 %139 to i64, !dbg !351
  %141 = select i1 %139, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.41, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0), !dbg !351
  %142 = call i32 (i8*, ...) @printf(i8* %135, i8* %136, i8* %141), !dbg !354
  ret void, !dbg !355

originalBBalteredBB:                              ; preds = %originalBB, %1
  %143 = alloca i8*, align 8
  %144 = alloca [7 x %struct.infomap], align 16
  %145 = alloca i8*, align 8
  %146 = alloca %struct.infomap*, align 8
  %147 = alloca i8*, align 8
  store i8* %0, i8** %143, align 8
  call void @llvm.dbg.declare(metadata i8** %143, metadata !356, metadata !DIExpression()), !dbg !298
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %144, metadata !404, metadata !DIExpression()), !dbg !308
  %148 = bitcast [7 x %struct.infomap]* %144 to i8*, !dbg !308
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %148, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !308
  call void @llvm.dbg.declare(metadata i8** %145, metadata !411, metadata !DIExpression()), !dbg !310
  %149 = load i8*, i8** %143, align 8, !dbg !311
  store i8* %149, i8** %145, align 8, !dbg !310
  call void @llvm.dbg.declare(metadata %struct.infomap** %146, metadata !412, metadata !DIExpression()), !dbg !314
  %150 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %144, i64 0, i64 0, !dbg !315
  store %struct.infomap* %150, %struct.infomap** %146, align 8, !dbg !314
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %151 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !317
  %152 = getelementptr inbounds %struct.infomap, %struct.infomap* %151, i32 0, i32 0, !dbg !318
  %153 = load i8*, i8** %152, align 8, !dbg !318
  %154 = icmp ne i8* %153, null, !dbg !317
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %65
  %155 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !329
  %156 = getelementptr inbounds %struct.infomap, %struct.infomap* %155, i32 0, i32 1, !dbg !330
  %157 = load i8*, i8** %156, align 8, !dbg !330
  store i8* %157, i8** %12, align 8, !dbg !331
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %85
  %158 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.35, i64 0, i64 0)) #10, !dbg !333
  %159 = call i32 (i8*, ...) @printf(i8* %158, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.36, i64 0, i64 0)), !dbg !334
  call void @llvm.dbg.declare(metadata !4, metadata !414, metadata !DIExpression()), !dbg !336
  %160 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !337
  store i8* %160, i8** %14, align 8, !dbg !336
  %161 = load i8*, i8** %14, align 8, !dbg !338
  %162 = icmp ne i8* %161, null, !dbg !338
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %111
  %163 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.38, i64 0, i64 0)) #10, !dbg !343
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !343
  %165 = call i32 @fputs_unlocked(i8* %163, %struct._IO_FILE* %164), !dbg !343
  br label %originalBB14
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !462 {
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca %struct.passwd*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !465, metadata !DIExpression()), !dbg !466
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !467, metadata !DIExpression()), !dbg !468
  call void @llvm.dbg.declare(metadata i32* %6, metadata !469, metadata !DIExpression()), !dbg !470
  call void @llvm.dbg.declare(metadata i32* %7, metadata !471, metadata !DIExpression()), !dbg !472
  store i32 0, i32* %7, align 4, !dbg !472
  call void @llvm.dbg.declare(metadata i8* %8, metadata !473, metadata !DIExpression()), !dbg !474
  %16 = call zeroext i1 @is_smack_enabled(), !dbg !475
  %17 = zext i1 %16 to i8, !dbg !474
  store i8 %17, i8* %8, align 1, !dbg !474
  call void @llvm.dbg.declare(metadata i8** %9, metadata !476, metadata !DIExpression()), !dbg !477
  store i8* null, i8** %9, align 8, !dbg !477
  %18 = load i8**, i8*** %5, align 8, !dbg !478
  %19 = getelementptr inbounds i8*, i8** %18, i64 0, !dbg !478
  %20 = load i8*, i8** %19, align 8, !dbg !478
  call void @set_program_name(i8* %20), !dbg !479
  %21 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0)) #10, !dbg !480
  %22 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !481
  %23 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !482
  %24 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !483
  br label %25, !dbg !484

25:                                               ; preds = %originalBBpart224, %2
  %26 = load i32, i32* %4, align 4, !dbg !485
  %27 = load i8**, i8*** %5, align 8, !dbg !486
  %28 = call i32 @getopt_long(i32 %26, i8** %27, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0), %struct.option* getelementptr inbounds ([10 x %struct.option], [10 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !487
  store i32 %28, i32* %6, align 4, !dbg !488
  %29 = icmp ne i32 %28, -1, !dbg !489
  br i1 %29, label %30, label %163, !dbg !484

30:                                               ; preds = %25
  %31 = load i32, i32* %6, align 4, !dbg !490
  switch i32 %31, label %129 [
    i32 97, label %32
    i32 90, label %49
    i32 103, label %55
    i32 110, label %72
    i32 114, label %73
    i32 117, label %90
    i32 122, label %91
    i32 71, label %92
    i32 -130, label %109
    i32 -131, label %110
  ], !dbg !492

32:                                               ; preds = %30
  %33 = load i32, i32* @x.3
  %34 = load i32, i32* @y.4
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %32, %originalBBalteredBB
  %41 = load i32, i32* @x.3
  %42 = load i32, i32* @y.4
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %146, !dbg !493

49:                                               ; preds = %30
  %50 = load i32, i32* %7, align 4, !dbg !495
  %51 = icmp ne i32 %50, 0, !dbg !495
  br i1 %51, label %54, label %52, !dbg !497

52:                                               ; preds = %49
  %53 = call i8* @gettext(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !498
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %53), !dbg !498
  unreachable, !dbg !498

54:                                               ; preds = %49
  store i8 1, i8* @just_context, align 1, !dbg !499
  br label %146, !dbg !500

55:                                               ; preds = %30
  %56 = load i32, i32* @x.3
  %57 = load i32, i32* @y.4
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %55, %originalBB1alteredBB
  store i8 1, i8* @just_group, align 1, !dbg !501
  %64 = load i32, i32* @x.3
  %65 = load i32, i32* @y.4
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %146, !dbg !502

72:                                               ; preds = %30
  store i8 1, i8* @use_name, align 1, !dbg !503
  br label %146, !dbg !504

73:                                               ; preds = %30
  %74 = load i32, i32* @x.3
  %75 = load i32, i32* @y.4
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %73, %originalBB6alteredBB
  store i8 1, i8* @use_real, align 1, !dbg !505
  %82 = load i32, i32* @x.3
  %83 = load i32, i32* @y.4
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %146, !dbg !506

90:                                               ; preds = %30
  store i8 1, i8* @just_user, align 1, !dbg !507
  br label %146, !dbg !508

91:                                               ; preds = %30
  store i8 1, i8* @opt_zero, align 1, !dbg !509
  br label %146, !dbg !510

92:                                               ; preds = %30
  %93 = load i32, i32* @x.3
  %94 = load i32, i32* @y.4
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %92, %originalBB10alteredBB
  store i8 1, i8* @just_group_list, align 1, !dbg !511
  %101 = load i32, i32* @x.3
  %102 = load i32, i32* @y.4
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %146, !dbg !512

109:                                              ; preds = %30
  call void @usage(i32 0) #14, !dbg !513
  unreachable, !dbg !513

110:                                              ; preds = %30
  %111 = load i32, i32* @x.3
  %112 = load i32, i32* @y.4
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %110, %originalBB14alteredBB
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !514
  %120 = load i8*, i8** @Version, align 8, !dbg !514
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %119, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* %120, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !514
  call void @exit(i32 0) #12, !dbg !514
  %121 = load i32, i32* @x.3
  %122 = load i32, i32* @y.4
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !514

129:                                              ; preds = %30
  %130 = load i32, i32* @x.3
  %131 = load i32, i32* @y.4
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %129, %originalBB18alteredBB
  call void @usage(i32 1) #14, !dbg !515
  %138 = load i32, i32* @x.3
  %139 = load i32, i32* @y.4
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !515

146:                                              ; preds = %originalBBpart212, %91, %90, %originalBBpart28, %72, %originalBBpart24, %54, %originalBBpart2
  %147 = load i32, i32* @x.3
  %148 = load i32, i32* @y.4
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %146, %originalBB22alteredBB
  %155 = load i32, i32* @x.3
  %156 = load i32, i32* @y.4
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %25, !dbg !484, !llvm.loop !516

163:                                              ; preds = %25
  call void @llvm.dbg.declare(metadata i64* %10, metadata !518, metadata !DIExpression()), !dbg !519
  %164 = load i32, i32* %4, align 4, !dbg !520
  %165 = load i32, i32* @optind, align 4, !dbg !521
  %166 = sub nsw i32 %164, %165, !dbg !522
  %167 = sext i32 %166 to i64, !dbg !520
  store i64 %167, i64* %10, align 8, !dbg !519
  %168 = load i64, i64* %10, align 8, !dbg !523
  %169 = icmp ne i64 %168, 0, !dbg !523
  br i1 %169, label %170, label %191, !dbg !525

170:                                              ; preds = %163
  %171 = load i8, i8* @just_context, align 1, !dbg !526
  %172 = trunc i8 %171 to i1, !dbg !526
  br i1 %172, label %173, label %191, !dbg !527

173:                                              ; preds = %170
  %174 = load i32, i32* @x.3
  %175 = load i32, i32* @y.4
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %173, %originalBB26alteredBB
  %182 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !528
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %182), !dbg !528
  %183 = load i32, i32* @x.3
  %184 = load i32, i32* @y.4
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  unreachable, !dbg !528

191:                                              ; preds = %170, %163
  %192 = load i32, i32* @x.3
  %193 = load i32, i32* @y.4
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %191, %originalBB30alteredBB
  %200 = load i8, i8* @just_user, align 1, !dbg !529
  %201 = trunc i8 %200 to i1, !dbg !529
  %202 = zext i1 %201 to i32, !dbg !529
  %203 = load i8, i8* @just_group, align 1, !dbg !531
  %204 = trunc i8 %203 to i1, !dbg !531
  %205 = zext i1 %204 to i32, !dbg !531
  %206 = add nsw i32 %202, %205, !dbg !532
  %207 = load i8, i8* @just_group_list, align 1, !dbg !533
  %208 = trunc i8 %207 to i1, !dbg !533
  %209 = zext i1 %208 to i32, !dbg !533
  %210 = add nsw i32 %206, %209, !dbg !534
  %211 = load i8, i8* @just_context, align 1, !dbg !535
  %212 = trunc i8 %211 to i1, !dbg !535
  %213 = zext i1 %212 to i32, !dbg !535
  %214 = add nsw i32 %210, %213, !dbg !536
  %215 = icmp sgt i32 %214, 1, !dbg !537
  %216 = load i32, i32* @x.3
  %217 = load i32, i32* @y.4
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBBpart252, label %originalBB30alteredBB

originalBBpart252:                                ; preds = %originalBB30
  br i1 %215, label %224, label %242, !dbg !538

224:                                              ; preds = %originalBBpart252
  %225 = load i32, i32* @x.3
  %226 = load i32, i32* @y.4
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %224, %originalBB54alteredBB
  %233 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.17, i64 0, i64 0)) #10, !dbg !539
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %233), !dbg !539
  %234 = load i32, i32* @x.3
  %235 = load i32, i32* @y.4
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  unreachable, !dbg !539

242:                                              ; preds = %originalBBpart252
  call void @llvm.dbg.declare(metadata i8* %11, metadata !540, metadata !DIExpression()), !dbg !541
  %243 = load i32, i32* @x.3
  %244 = load i32, i32* @y.4
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %242, %originalBB58alteredBB
  %251 = load i8, i8* @just_user, align 1, !dbg !542
  %252 = trunc i8 %251 to i1, !dbg !542
  %253 = load i32, i32* @x.3
  %254 = load i32, i32* @y.4
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %252, label %302, label %261, !dbg !543

261:                                              ; preds = %originalBBpart260
  %262 = load i32, i32* @x.3
  %263 = load i32, i32* @y.4
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %261, %originalBB62alteredBB
  %270 = load i8, i8* @just_group, align 1, !dbg !544
  %271 = trunc i8 %270 to i1, !dbg !544
  %272 = load i32, i32* @x.3
  %273 = load i32, i32* @y.4
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %271, label %302, label %280, !dbg !545

280:                                              ; preds = %originalBBpart264
  %281 = load i8, i8* @just_group_list, align 1, !dbg !546
  %282 = trunc i8 %281 to i1, !dbg !546
  br i1 %282, label %302, label %283, !dbg !547

283:                                              ; preds = %280
  %284 = load i32, i32* @x.3
  %285 = load i32, i32* @y.4
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %283, %originalBB66alteredBB
  %292 = load i8, i8* @just_context, align 1, !dbg !548
  %293 = trunc i8 %292 to i1, !dbg !548
  %294 = load i32, i32* @x.3
  %295 = load i32, i32* @y.4
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %302, !dbg !547

302:                                              ; preds = %originalBBpart268, %280, %originalBBpart264, %originalBBpart260
  %303 = phi i1 [ true, %280 ], [ true, %originalBBpart264 ], [ true, %originalBBpart260 ], [ %293, %originalBBpart268 ]
  %304 = xor i1 %303, true, !dbg !549
  %305 = zext i1 %304 to i8, !dbg !541
  store i8 %305, i8* %11, align 1, !dbg !541
  %306 = load i8, i8* %11, align 1, !dbg !550
  %307 = trunc i8 %306 to i1, !dbg !550
  br i1 %307, label %308, label %364, !dbg !552

308:                                              ; preds = %302
  %309 = load i32, i32* @x.3
  %310 = load i32, i32* @y.4
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %308, %originalBB70alteredBB
  %317 = load i8, i8* @use_real, align 1, !dbg !553
  %318 = trunc i8 %317 to i1, !dbg !553
  %319 = load i32, i32* @x.3
  %320 = load i32, i32* @y.4
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br i1 %318, label %346, label %327, !dbg !554

327:                                              ; preds = %originalBBpart272
  %328 = load i32, i32* @x.3
  %329 = load i32, i32* @y.4
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %327, %originalBB74alteredBB
  %336 = load i8, i8* @use_name, align 1, !dbg !555
  %337 = trunc i8 %336 to i1, !dbg !555
  %338 = load i32, i32* @x.3
  %339 = load i32, i32* @y.4
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %337, label %346, label %364, !dbg !556

346:                                              ; preds = %originalBBpart276, %originalBBpart272
  %347 = load i32, i32* @x.3
  %348 = load i32, i32* @y.4
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %346, %originalBB78alteredBB
  %355 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0)) #10, !dbg !557
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %355), !dbg !557
  %356 = load i32, i32* @x.3
  %357 = load i32, i32* @y.4
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  unreachable, !dbg !557

364:                                              ; preds = %originalBBpart276, %302
  %365 = load i32, i32* @x.3
  %366 = load i32, i32* @y.4
  %367 = sub i32 %365, 1
  %368 = mul i32 %365, %367
  %369 = urem i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %370, %371
  br i1 %372, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %364, %originalBB82alteredBB
  %373 = load i8, i8* %11, align 1, !dbg !558
  %374 = trunc i8 %373 to i1, !dbg !558
  %375 = load i32, i32* @x.3
  %376 = load i32, i32* @y.4
  %377 = sub i32 %375, 1
  %378 = mul i32 %375, %377
  %379 = urem i32 %378, 2
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %376, 10
  %382 = or i1 %380, %381
  br i1 %382, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %374, label %383, label %404, !dbg !560

383:                                              ; preds = %originalBBpart284
  %384 = load i8, i8* @opt_zero, align 1, !dbg !561
  %385 = trunc i8 %384 to i1, !dbg !561
  br i1 %385, label %386, label %404, !dbg !562

386:                                              ; preds = %383
  %387 = load i32, i32* @x.3
  %388 = load i32, i32* @y.4
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %386, %originalBB86alteredBB
  %395 = call i8* @gettext(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.19, i64 0, i64 0)) #10, !dbg !563
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %395), !dbg !563
  %396 = load i32, i32* @x.3
  %397 = load i32, i32* @y.4
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  unreachable, !dbg !563

404:                                              ; preds = %383, %originalBBpart284
  %405 = load i64, i64* %10, align 8, !dbg !564
  br label %406, !dbg !566

406:                                              ; preds = %404
  %407 = load i32, i32* @x.3
  %408 = load i32, i32* @y.4
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %406, %originalBB90alteredBB
  %collatzVar = alloca i32
  %415 = load i32, i32* @x.3
  %416 = load i32, i32* @y.4
  %417 = sub i32 %415, 1
  %418 = mul i32 %415, %417
  %419 = urem i32 %418, 2
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %420, %421
  br i1 %422, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br label %423

423:                                              ; preds = %originalBBpart292
  %424 = load i32, i32* @x.3
  %425 = load i32, i32* @y.4
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %423, %originalBB94alteredBB
  %432 = load i32, i32* @inVal0
  %433 = icmp sgt i32 %432, 1
  %434 = load i32, i32* @x.3
  %435 = load i32, i32* @y.4
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br i1 %433, label %459, label %442

442:                                              ; preds = %originalBBpart296
  %443 = load i32, i32* @x.3
  %444 = load i32, i32* @y.4
  %445 = sub i32 %443, 1
  %446 = mul i32 %443, %445
  %447 = urem i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %448, %449
  br i1 %450, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %442, %originalBB98alteredBB
  store i32 88, i32* %collatzVar
  %451 = load i32, i32* @x.3
  %452 = load i32, i32* @y.4
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br label %459

459:                                              ; preds = %originalBBpart2100, %originalBBpart296
  %460 = load i8**, i8*** @inVal1
  %461 = getelementptr inbounds i8*, i8** %460, i64 1
  %462 = load i8*, i8** %461
  %463 = trunc i64 0 to i32
  %controle = call i32 @controle(i8* %462, i32 %463)
  store i32 %controle, i32* %collatzVar
  br label %464

464:                                              ; preds = %originalBBpart2141, %originalBBpart2126, %459
  %465 = load i32, i32* %collatzVar
  %466 = icmp sgt i32 %465, 1
  br i1 %466, label %467, label %648

467:                                              ; preds = %464
  %468 = load i32, i32* @x.3
  %469 = load i32, i32* @y.4
  %470 = sub i32 %468, 1
  %471 = mul i32 %468, %470
  %472 = urem i32 %471, 2
  %473 = icmp eq i32 %472, 0
  %474 = icmp slt i32 %469, 10
  %475 = or i1 %473, %474
  br i1 %475, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %467, %originalBB102alteredBB
  %476 = load i32, i32* %collatzVar
  %477 = srem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = load i32, i32* @x.3
  %480 = load i32, i32* @y.4
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBBpart2114, label %originalBB102alteredBB

originalBBpart2114:                               ; preds = %originalBB102
  br i1 %478, label %487, label %490

487:                                              ; preds = %originalBBpart2114
  %488 = load i32, i32* %collatzVar
  %489 = sdiv i32 %488, 2
  store i32 %489, i32* %collatzVar
  br label %494

490:                                              ; preds = %originalBBpart2114
  %491 = load i32, i32* %collatzVar
  %492 = mul i32 %491, 3
  %493 = add i32 %492, 1
  store i32 %493, i32* %collatzVar
  br label %494

494:                                              ; preds = %490, %487
  %495 = load i32, i32* @x.3
  %496 = load i32, i32* @y.4
  %497 = sub i32 %495, 1
  %498 = mul i32 %495, %497
  %499 = urem i32 %498, 2
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %500, %501
  br i1 %502, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %494, %originalBB116alteredBB
  %503 = load i32, i32* %collatzVar
  %504 = sext i32 %503 to i64
  %505 = sext i32 -2 to i64
  %506 = sub i64 %405, %504
  %507 = icmp sgt i64 %506, %505
  %508 = load i32, i32* @x.3
  %509 = load i32, i32* @y.4
  %510 = sub i32 %508, 1
  %511 = mul i32 %508, %510
  %512 = urem i32 %511, 2
  %513 = icmp eq i32 %512, 0
  %514 = icmp slt i32 %509, 10
  %515 = or i1 %513, %514
  br i1 %515, label %originalBBpart2126, label %originalBB116alteredBB

originalBBpart2126:                               ; preds = %originalBB116
  br i1 %507, label %516, label %464

516:                                              ; preds = %originalBBpart2126
  %517 = load i32, i32* @x.3
  %518 = load i32, i32* @y.4
  %519 = sub i32 %517, 1
  %520 = mul i32 %517, %519
  %521 = urem i32 %520, 2
  %522 = icmp eq i32 %521, 0
  %523 = icmp slt i32 %518, 10
  %524 = or i1 %522, %523
  br i1 %524, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %516, %originalBB128alteredBB
  %525 = load i32, i32* %collatzVar
  %526 = sext i32 %525 to i64
  %527 = sext i32 2 to i64
  %528 = add i64 %405, %526
  %529 = icmp slt i64 %528, %527
  %530 = load i32, i32* @x.3
  %531 = load i32, i32* @y.4
  %532 = sub i32 %530, 1
  %533 = mul i32 %530, %532
  %534 = urem i32 %533, 2
  %535 = icmp eq i32 %534, 0
  %536 = icmp slt i32 %531, 10
  %537 = or i1 %535, %536
  br i1 %537, label %originalBBpart2141, label %originalBB128alteredBB

originalBBpart2141:                               ; preds = %originalBB128
  br i1 %529, label %538, label %464

538:                                              ; preds = %originalBBpart2141
  %539 = load i32, i32* @x.3
  %540 = load i32, i32* @y.4
  %541 = sub i32 %539, 1
  %542 = mul i32 %539, %541
  %543 = urem i32 %542, 2
  %544 = icmp eq i32 %543, 0
  %545 = icmp slt i32 %540, 10
  %546 = or i1 %544, %545
  br i1 %546, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %538, %originalBB143alteredBB
  %547 = load i8, i8* @just_context, align 1, !dbg !567
  %548 = trunc i8 %547 to i1, !dbg !567
  %549 = load i32, i32* @x.3
  %550 = load i32, i32* @y.4
  %551 = sub i32 %549, 1
  %552 = mul i32 %549, %551
  %553 = urem i32 %552, 2
  %554 = icmp eq i32 %553, 0
  %555 = icmp slt i32 %550, 10
  %556 = or i1 %554, %555
  br i1 %556, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br i1 %548, label %579, label %557, !dbg !568

557:                                              ; preds = %originalBBpart2145
  %558 = load i8, i8* %11, align 1, !dbg !569
  %559 = trunc i8 %558 to i1, !dbg !569
  br i1 %559, label %560, label %648, !dbg !570

560:                                              ; preds = %557
  %561 = load i32, i32* @x.3
  %562 = load i32, i32* @y.4
  %563 = sub i32 %561, 1
  %564 = mul i32 %561, %563
  %565 = urem i32 %564, 2
  %566 = icmp eq i32 %565, 0
  %567 = icmp slt i32 %562, 10
  %568 = or i1 %566, %567
  br i1 %568, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %560, %originalBB147alteredBB
  %569 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0)) #10, !dbg !571
  %570 = icmp ne i8* %569, null, !dbg !571
  %571 = load i32, i32* @x.3
  %572 = load i32, i32* @y.4
  %573 = sub i32 %571, 1
  %574 = mul i32 %571, %573
  %575 = urem i32 %574, 2
  %576 = icmp eq i32 %575, 0
  %577 = icmp slt i32 %572, 10
  %578 = or i1 %576, %577
  br i1 %578, label %originalBBpart2149, label %originalBB147alteredBB

originalBBpart2149:                               ; preds = %originalBB147
  br i1 %570, label %648, label %579, !dbg !572

579:                                              ; preds = %originalBBpart2149, %originalBBpart2145
  %580 = load i32, i32* @x.3
  %581 = load i32, i32* @y.4
  %582 = sub i32 %580, 1
  %583 = mul i32 %580, %582
  %584 = urem i32 %583, 2
  %585 = icmp eq i32 %584, 0
  %586 = icmp slt i32 %581, 10
  %587 = or i1 %585, %586
  br i1 %587, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %579, %originalBB151alteredBB
  %588 = load i32, i32* %7, align 4, !dbg !573
  %589 = icmp ne i32 %588, 0, !dbg !573
  %590 = load i32, i32* @x.3
  %591 = load i32, i32* @y.4
  %592 = sub i32 %590, 1
  %593 = mul i32 %590, %592
  %594 = urem i32 %593, 2
  %595 = icmp eq i32 %594, 0
  %596 = icmp slt i32 %591, 10
  %597 = or i1 %595, %596
  br i1 %597, label %originalBBpart2153, label %originalBB151alteredBB

originalBBpart2153:                               ; preds = %originalBB151
  br i1 %589, label %598, label %604, !dbg !576

598:                                              ; preds = %originalBBpart2153
  %599 = call i32 @getcon(i8** @context), !dbg !577
  %600 = icmp ne i32 %599, 0, !dbg !577
  br i1 %600, label %601, label %604, !dbg !578

601:                                              ; preds = %598
  %602 = load i8, i8* @just_context, align 1, !dbg !579
  %603 = trunc i8 %602 to i1, !dbg !579
  br i1 %603, label %629, label %604, !dbg !580

604:                                              ; preds = %601, %598, %originalBBpart2153
  %605 = load i8, i8* %8, align 1, !dbg !581
  %606 = trunc i8 %605 to i1, !dbg !581
  br i1 %606, label %607, label %647, !dbg !582

607:                                              ; preds = %604
  %608 = call i64 @smack_new_label_from_self(i8** @context), !dbg !583
  %609 = icmp slt i64 %608, 0, !dbg !584
  br i1 %609, label %610, label %647, !dbg !585

610:                                              ; preds = %607
  %611 = load i32, i32* @x.3
  %612 = load i32, i32* @y.4
  %613 = sub i32 %611, 1
  %614 = mul i32 %611, %613
  %615 = urem i32 %614, 2
  %616 = icmp eq i32 %615, 0
  %617 = icmp slt i32 %612, 10
  %618 = or i1 %616, %617
  br i1 %618, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %610, %originalBB155alteredBB
  %619 = load i8, i8* @just_context, align 1, !dbg !586
  %620 = trunc i8 %619 to i1, !dbg !586
  %621 = load i32, i32* @x.3
  %622 = load i32, i32* @y.4
  %623 = sub i32 %621, 1
  %624 = mul i32 %621, %623
  %625 = urem i32 %624, 2
  %626 = icmp eq i32 %625, 0
  %627 = icmp slt i32 %622, 10
  %628 = or i1 %626, %627
  br i1 %628, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  br i1 %620, label %629, label %647, !dbg !587

629:                                              ; preds = %originalBBpart2157, %601
  %630 = load i32, i32* @x.3
  %631 = load i32, i32* @y.4
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %629, %originalBB159alteredBB
  %638 = call i8* @gettext(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0)) #10, !dbg !588
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %638), !dbg !588
  %639 = load i32, i32* @x.3
  %640 = load i32, i32* @y.4
  %641 = sub i32 %639, 1
  %642 = mul i32 %639, %641
  %643 = urem i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = icmp slt i32 %640, 10
  %646 = or i1 %644, %645
  br i1 %646, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  unreachable, !dbg !588

647:                                              ; preds = %originalBBpart2157, %607, %604
  br label %648, !dbg !589

648:                                              ; preds = %647, %originalBBpart2149, %557, %464
  %649 = load i32, i32* @x.3
  %650 = load i32, i32* @y.4
  %651 = sub i32 %649, 1
  %652 = mul i32 %649, %651
  %653 = urem i32 %652, 2
  %654 = icmp eq i32 %653, 0
  %655 = icmp slt i32 %650, 10
  %656 = or i1 %654, %655
  br i1 %656, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %648, %originalBB163alteredBB
  %657 = load i64, i64* %10, align 8, !dbg !590
  %658 = icmp uge i64 %657, 1, !dbg !592
  %659 = load i32, i32* @x.3
  %660 = load i32, i32* @y.4
  %661 = sub i32 %659, 1
  %662 = mul i32 %659, %661
  %663 = urem i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = icmp slt i32 %660, 10
  %666 = or i1 %664, %665
  br i1 %666, label %originalBBpart2165, label %originalBB163alteredBB

originalBBpart2165:                               ; preds = %originalBB163
  br i1 %658, label %667, label %800, !dbg !593

667:                                              ; preds = %originalBBpart2165
  %668 = load i32, i32* @x.3
  %669 = load i32, i32* @y.4
  %670 = sub i32 %668, 1
  %671 = mul i32 %668, %670
  %672 = urem i32 %671, 2
  %673 = icmp eq i32 %672, 0
  %674 = icmp slt i32 %669, 10
  %675 = or i1 %673, %674
  br i1 %675, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %667, %originalBB167alteredBB
  %676 = load i64, i64* %10, align 8, !dbg !594
  %677 = icmp ugt i64 %676, 1, !dbg !596
  %678 = zext i1 %677 to i64, !dbg !594
  %679 = select i1 %677, i32 1, i32 0, !dbg !594
  %680 = icmp ne i32 %679, 0, !dbg !594
  %681 = zext i1 %680 to i8, !dbg !597
  store i8 %681, i8* @multiple_users, align 1, !dbg !597
  %682 = load i32, i32* @optind, align 4, !dbg !598
  %683 = sext i32 %682 to i64, !dbg !598
  %684 = load i64, i64* %10, align 8, !dbg !599
  %685 = add i64 %684, %683, !dbg !599
  store i64 %685, i64* %10, align 8, !dbg !599
  %686 = load i32, i32* @x.3
  %687 = load i32, i32* @y.4
  %688 = sub i32 %686, 1
  %689 = mul i32 %686, %688
  %690 = urem i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = icmp slt i32 %687, 10
  %693 = or i1 %691, %692
  br i1 %693, label %originalBBpart2182, label %originalBB167alteredBB

originalBBpart2182:                               ; preds = %originalBB167
  br label %694, !dbg !600

694:                                              ; preds = %796, %originalBBpart2182
  %695 = load i32, i32* @x.3
  %696 = load i32, i32* @y.4
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBB184, label %originalBB184alteredBB

originalBB184:                                    ; preds = %694, %originalBB184alteredBB
  %703 = load i32, i32* @optind, align 4, !dbg !601
  %704 = sext i32 %703 to i64, !dbg !601
  %705 = load i64, i64* %10, align 8, !dbg !604
  %706 = icmp ult i64 %704, %705, !dbg !605
  %707 = load i32, i32* @x.3
  %708 = load i32, i32* @y.4
  %709 = sub i32 %707, 1
  %710 = mul i32 %707, %709
  %711 = urem i32 %710, 2
  %712 = icmp eq i32 %711, 0
  %713 = icmp slt i32 %708, 10
  %714 = or i1 %712, %713
  br i1 %714, label %originalBBpart2186, label %originalBB184alteredBB

originalBBpart2186:                               ; preds = %originalBB184
  br i1 %706, label %715, label %799, !dbg !606

715:                                              ; preds = %originalBBpart2186
  call void @llvm.dbg.declare(metadata %struct.passwd** %12, metadata !607, metadata !DIExpression()), !dbg !620
  %716 = load i32, i32* @x.3
  %717 = load i32, i32* @y.4
  %718 = sub i32 %716, 1
  %719 = mul i32 %716, %718
  %720 = urem i32 %719, 2
  %721 = icmp eq i32 %720, 0
  %722 = icmp slt i32 %717, 10
  %723 = or i1 %721, %722
  br i1 %723, label %originalBB188, label %originalBB188alteredBB

originalBB188:                                    ; preds = %715, %originalBB188alteredBB
  store %struct.passwd* null, %struct.passwd** %12, align 8, !dbg !620
  call void @llvm.dbg.declare(metadata i8** %13, metadata !621, metadata !DIExpression()), !dbg !622
  %724 = load i8**, i8*** %5, align 8, !dbg !623
  %725 = load i32, i32* @optind, align 4, !dbg !624
  %726 = sext i32 %725 to i64, !dbg !623
  %727 = getelementptr inbounds i8*, i8** %724, i64 %726, !dbg !623
  %728 = load i8*, i8** %727, align 8, !dbg !623
  store i8* %728, i8** %13, align 8, !dbg !622
  %729 = load i8*, i8** %13, align 8, !dbg !625
  %730 = load i8, i8* %729, align 1, !dbg !627
  %731 = icmp ne i8 %730, 0, !dbg !627
  %732 = load i32, i32* @x.3
  %733 = load i32, i32* @y.4
  %734 = sub i32 %732, 1
  %735 = mul i32 %732, %734
  %736 = urem i32 %735, 2
  %737 = icmp eq i32 %736, 0
  %738 = icmp slt i32 %733, 10
  %739 = or i1 %737, %738
  br i1 %739, label %originalBBpart2190, label %originalBB188alteredBB

originalBBpart2190:                               ; preds = %originalBB188
  br i1 %731, label %740, label %748, !dbg !628

740:                                              ; preds = %originalBBpart2190
  %741 = load i8*, i8** %13, align 8, !dbg !629
  %742 = call i8* @parse_user_spec(i8* %741, i32* @euid, i32* null, i8** null, i8** null), !dbg !632
  %743 = icmp eq i8* %742, null, !dbg !633
  br i1 %743, label %744, label %747, !dbg !634

744:                                              ; preds = %740
  %745 = load i32, i32* @euid, align 4, !dbg !635
  %746 = call %struct.passwd* @getpwuid(i32 %745), !dbg !637
  store %struct.passwd* %746, %struct.passwd** %12, align 8, !dbg !638
  br label %747, !dbg !639

747:                                              ; preds = %744, %740
  br label %748, !dbg !640

748:                                              ; preds = %747, %originalBBpart2190
  %749 = load %struct.passwd*, %struct.passwd** %12, align 8, !dbg !641
  %750 = icmp eq %struct.passwd* %749, null, !dbg !643
  br i1 %750, label %751, label %783, !dbg !644

751:                                              ; preds = %748
  %752 = load i32, i32* @x.3
  %753 = load i32, i32* @y.4
  %754 = sub i32 %752, 1
  %755 = mul i32 %752, %754
  %756 = urem i32 %755, 2
  %757 = icmp eq i32 %756, 0
  %758 = icmp slt i32 %753, 10
  %759 = or i1 %757, %758
  br i1 %759, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %751, %originalBB192alteredBB
  %760 = call i32* @__errno_location() #15, !dbg !645
  %761 = load i32, i32* %760, align 4, !dbg !645
  %762 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !647
  %763 = load i8**, i8*** %5, align 8, !dbg !648
  %764 = load i32, i32* @optind, align 4, !dbg !649
  %765 = sext i32 %764 to i64, !dbg !648
  %766 = getelementptr inbounds i8*, i8** %763, i64 %765, !dbg !648
  %767 = load i8*, i8** %766, align 8, !dbg !648
  %768 = call i8* @quote(i8* %767), !dbg !650
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %761, i8* %762, i8* %768), !dbg !651
  %769 = load i8, i8* @ok, align 1, !dbg !652
  %770 = trunc i8 %769 to i1, !dbg !652
  %771 = zext i1 %770 to i32, !dbg !652
  %772 = and i32 %771, 0, !dbg !652
  %773 = icmp ne i32 %772, 0, !dbg !652
  %774 = zext i1 %773 to i8, !dbg !652
  store i8 %774, i8* @ok, align 1, !dbg !652
  %775 = load i32, i32* @x.3
  %776 = load i32, i32* @y.4
  %777 = sub i32 %775, 1
  %778 = mul i32 %775, %777
  %779 = urem i32 %778, 2
  %780 = icmp eq i32 %779, 0
  %781 = icmp slt i32 %776, 10
  %782 = or i1 %780, %781
  br i1 %782, label %originalBBpart2200, label %originalBB192alteredBB

originalBBpart2200:                               ; preds = %originalBB192
  br label %796, !dbg !653

783:                                              ; preds = %748
  %784 = load %struct.passwd*, %struct.passwd** %12, align 8, !dbg !654
  %785 = getelementptr inbounds %struct.passwd, %struct.passwd* %784, i32 0, i32 0, !dbg !655
  %786 = load i8*, i8** %785, align 8, !dbg !655
  %787 = call noalias i8* @xstrdup(i8* %786), !dbg !656
  store i8* %787, i8** %9, align 8, !dbg !657
  %788 = load %struct.passwd*, %struct.passwd** %12, align 8, !dbg !658
  %789 = getelementptr inbounds %struct.passwd, %struct.passwd* %788, i32 0, i32 2, !dbg !659
  %790 = load i32, i32* %789, align 8, !dbg !659
  store i32 %790, i32* @euid, align 4, !dbg !660
  store i32 %790, i32* @ruid, align 4, !dbg !661
  %791 = load %struct.passwd*, %struct.passwd** %12, align 8, !dbg !662
  %792 = getelementptr inbounds %struct.passwd, %struct.passwd* %791, i32 0, i32 3, !dbg !663
  %793 = load i32, i32* %792, align 4, !dbg !663
  store i32 %793, i32* @egid, align 4, !dbg !664
  store i32 %793, i32* @rgid, align 4, !dbg !665
  %794 = load i8*, i8** %9, align 8, !dbg !666
  call void @print_stuff(i8* %794), !dbg !667
  %795 = load i8*, i8** %9, align 8, !dbg !668
  call void @free(i8* %795) #10, !dbg !669
  br label %796, !dbg !670

796:                                              ; preds = %783, %originalBBpart2200
  %797 = load i32, i32* @optind, align 4, !dbg !671
  %798 = add nsw i32 %797, 1, !dbg !671
  store i32 %798, i32* @optind, align 4, !dbg !671
  br label %694, !dbg !672, !llvm.loop !673

799:                                              ; preds = %originalBBpart2186
  br label %1175, !dbg !675

800:                                              ; preds = %originalBBpart2165
  call void @llvm.dbg.declare(metadata i32* %14, metadata !676, metadata !DIExpression()), !dbg !678
  %801 = load i32, i32* @x.3
  %802 = load i32, i32* @y.4
  %803 = sub i32 %801, 1
  %804 = mul i32 %801, %803
  %805 = urem i32 %804, 2
  %806 = icmp eq i32 %805, 0
  %807 = icmp slt i32 %802, 10
  %808 = or i1 %806, %807
  br i1 %808, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %800, %originalBB202alteredBB
  store i32 -1, i32* %14, align 4, !dbg !678
  call void @llvm.dbg.declare(metadata i32* %15, metadata !679, metadata !DIExpression()), !dbg !680
  store i32 -1, i32* %15, align 4, !dbg !680
  %809 = load i8, i8* @just_user, align 1, !dbg !681
  %810 = trunc i8 %809 to i1, !dbg !681
  %811 = load i32, i32* @x.3
  %812 = load i32, i32* @y.4
  %813 = sub i32 %811, 1
  %814 = mul i32 %811, %813
  %815 = urem i32 %814, 2
  %816 = icmp eq i32 %815, 0
  %817 = icmp slt i32 %812, 10
  %818 = or i1 %816, %817
  br i1 %818, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br i1 %810, label %819, label %822, !dbg !683

819:                                              ; preds = %originalBBpart2204
  %820 = load i8, i8* @use_real, align 1, !dbg !684
  %821 = trunc i8 %820 to i1, !dbg !684
  br i1 %821, label %894, label %847, !dbg !681

822:                                              ; preds = %originalBBpart2204
  %823 = load i8, i8* @just_group, align 1, !dbg !685
  %824 = trunc i8 %823 to i1, !dbg !685
  br i1 %824, label %894, label %825, !dbg !686

825:                                              ; preds = %822
  %826 = load i8, i8* @just_group_list, align 1, !dbg !687
  %827 = trunc i8 %826 to i1, !dbg !687
  br i1 %827, label %894, label %828, !dbg !688

828:                                              ; preds = %825
  %829 = load i32, i32* @x.3
  %830 = load i32, i32* @y.4
  %831 = sub i32 %829, 1
  %832 = mul i32 %829, %831
  %833 = urem i32 %832, 2
  %834 = icmp eq i32 %833, 0
  %835 = icmp slt i32 %830, 10
  %836 = or i1 %834, %835
  br i1 %836, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %828, %originalBB206alteredBB
  %837 = load i8, i8* @just_context, align 1, !dbg !689
  %838 = trunc i8 %837 to i1, !dbg !689
  %839 = load i32, i32* @x.3
  %840 = load i32, i32* @y.4
  %841 = sub i32 %839, 1
  %842 = mul i32 %839, %841
  %843 = urem i32 %842, 2
  %844 = icmp eq i32 %843, 0
  %845 = icmp slt i32 %840, 10
  %846 = or i1 %844, %845
  br i1 %846, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br i1 %838, label %894, label %847, !dbg !683

847:                                              ; preds = %originalBBpart2208, %819
  %848 = call i32* @__errno_location() #15, !dbg !690
  store i32 0, i32* %848, align 4, !dbg !692
  %849 = call i32 @geteuid() #10, !dbg !693
  store i32 %849, i32* @euid, align 4, !dbg !694
  %850 = load i32, i32* @euid, align 4, !dbg !695
  %851 = load i32, i32* %14, align 4, !dbg !697
  %852 = icmp eq i32 %850, %851, !dbg !698
  br i1 %852, label %853, label %877, !dbg !699

853:                                              ; preds = %847
  %854 = load i32, i32* @x.3
  %855 = load i32, i32* @y.4
  %856 = sub i32 %854, 1
  %857 = mul i32 %854, %856
  %858 = urem i32 %857, 2
  %859 = icmp eq i32 %858, 0
  %860 = icmp slt i32 %855, 10
  %861 = or i1 %859, %860
  br i1 %861, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %853, %originalBB210alteredBB
  %862 = call i32* @__errno_location() #15, !dbg !700
  %863 = load i32, i32* %862, align 4, !dbg !700
  %864 = icmp ne i32 %863, 0, !dbg !700
  %865 = load i32, i32* @x.3
  %866 = load i32, i32* @y.4
  %867 = sub i32 %865, 1
  %868 = mul i32 %865, %867
  %869 = urem i32 %868, 2
  %870 = icmp eq i32 %869, 0
  %871 = icmp slt i32 %866, 10
  %872 = or i1 %870, %871
  br i1 %872, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br i1 %864, label %873, label %877, !dbg !701

873:                                              ; preds = %originalBBpart2212
  %874 = call i32* @__errno_location() #15, !dbg !702
  %875 = load i32, i32* %874, align 4, !dbg !702
  %876 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.23, i64 0, i64 0)) #10, !dbg !702
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %875, i8* %876), !dbg !702
  unreachable, !dbg !702

877:                                              ; preds = %originalBBpart2212, %847
  %878 = load i32, i32* @x.3
  %879 = load i32, i32* @y.4
  %880 = sub i32 %878, 1
  %881 = mul i32 %878, %880
  %882 = urem i32 %881, 2
  %883 = icmp eq i32 %882, 0
  %884 = icmp slt i32 %879, 10
  %885 = or i1 %883, %884
  br i1 %885, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %877, %originalBB214alteredBB
  %886 = load i32, i32* @x.3
  %887 = load i32, i32* @y.4
  %888 = sub i32 %886, 1
  %889 = mul i32 %886, %888
  %890 = urem i32 %889, 2
  %891 = icmp eq i32 %890, 0
  %892 = icmp slt i32 %887, 10
  %893 = or i1 %891, %892
  br i1 %893, label %originalBBpart2216, label %originalBB214alteredBB

originalBBpart2216:                               ; preds = %originalBB214
  br label %894, !dbg !703

894:                                              ; preds = %originalBBpart2216, %originalBBpart2208, %825, %822, %819
  %895 = load i8, i8* @just_user, align 1, !dbg !704
  %896 = trunc i8 %895 to i1, !dbg !704
  br i1 %896, label %897, label %916, !dbg !706

897:                                              ; preds = %894
  %898 = load i32, i32* @x.3
  %899 = load i32, i32* @y.4
  %900 = sub i32 %898, 1
  %901 = mul i32 %898, %900
  %902 = urem i32 %901, 2
  %903 = icmp eq i32 %902, 0
  %904 = icmp slt i32 %899, 10
  %905 = or i1 %903, %904
  br i1 %905, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %897, %originalBB218alteredBB
  %906 = load i8, i8* @use_real, align 1, !dbg !707
  %907 = trunc i8 %906 to i1, !dbg !707
  %908 = load i32, i32* @x.3
  %909 = load i32, i32* @y.4
  %910 = sub i32 %908, 1
  %911 = mul i32 %908, %910
  %912 = urem i32 %911, 2
  %913 = icmp eq i32 %912, 0
  %914 = icmp slt i32 %909, 10
  %915 = or i1 %913, %914
  br i1 %915, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br i1 %907, label %957, label %1004, !dbg !704

916:                                              ; preds = %894
  %917 = load i8, i8* @just_group, align 1, !dbg !708
  %918 = trunc i8 %917 to i1, !dbg !708
  br i1 %918, label %1004, label %919, !dbg !709

919:                                              ; preds = %916
  %920 = load i32, i32* @x.3
  %921 = load i32, i32* @y.4
  %922 = sub i32 %920, 1
  %923 = mul i32 %920, %922
  %924 = urem i32 %923, 2
  %925 = icmp eq i32 %924, 0
  %926 = icmp slt i32 %921, 10
  %927 = or i1 %925, %926
  br i1 %927, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %919, %originalBB222alteredBB
  %928 = load i8, i8* @just_group_list, align 1, !dbg !710
  %929 = trunc i8 %928 to i1, !dbg !710
  %930 = load i32, i32* @x.3
  %931 = load i32, i32* @y.4
  %932 = sub i32 %930, 1
  %933 = mul i32 %930, %932
  %934 = urem i32 %933, 2
  %935 = icmp eq i32 %934, 0
  %936 = icmp slt i32 %931, 10
  %937 = or i1 %935, %936
  br i1 %937, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br i1 %929, label %957, label %938, !dbg !711

938:                                              ; preds = %originalBBpart2224
  %939 = load i32, i32* @x.3
  %940 = load i32, i32* @y.4
  %941 = sub i32 %939, 1
  %942 = mul i32 %939, %941
  %943 = urem i32 %942, 2
  %944 = icmp eq i32 %943, 0
  %945 = icmp slt i32 %940, 10
  %946 = or i1 %944, %945
  br i1 %946, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %938, %originalBB226alteredBB
  %947 = load i8, i8* @just_context, align 1, !dbg !712
  %948 = trunc i8 %947 to i1, !dbg !712
  %949 = load i32, i32* @x.3
  %950 = load i32, i32* @y.4
  %951 = sub i32 %949, 1
  %952 = mul i32 %949, %951
  %953 = urem i32 %952, 2
  %954 = icmp eq i32 %953, 0
  %955 = icmp slt i32 %950, 10
  %956 = or i1 %954, %955
  br i1 %956, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br i1 %948, label %1004, label %957, !dbg !706

957:                                              ; preds = %originalBBpart2228, %originalBBpart2224, %originalBBpart2220
  %958 = load i32, i32* @x.3
  %959 = load i32, i32* @y.4
  %960 = sub i32 %958, 1
  %961 = mul i32 %958, %960
  %962 = urem i32 %961, 2
  %963 = icmp eq i32 %962, 0
  %964 = icmp slt i32 %959, 10
  %965 = or i1 %963, %964
  br i1 %965, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %957, %originalBB230alteredBB
  %966 = call i32* @__errno_location() #15, !dbg !713
  store i32 0, i32* %966, align 4, !dbg !715
  %967 = call i32 @getuid() #10, !dbg !716
  store i32 %967, i32* @ruid, align 4, !dbg !717
  %968 = load i32, i32* @ruid, align 4, !dbg !718
  %969 = load i32, i32* %14, align 4, !dbg !720
  %970 = icmp eq i32 %968, %969, !dbg !721
  %971 = load i32, i32* @x.3
  %972 = load i32, i32* @y.4
  %973 = sub i32 %971, 1
  %974 = mul i32 %971, %973
  %975 = urem i32 %974, 2
  %976 = icmp eq i32 %975, 0
  %977 = icmp slt i32 %972, 10
  %978 = or i1 %976, %977
  br i1 %978, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  br i1 %970, label %979, label %1003, !dbg !722

979:                                              ; preds = %originalBBpart2232
  %980 = load i32, i32* @x.3
  %981 = load i32, i32* @y.4
  %982 = sub i32 %980, 1
  %983 = mul i32 %980, %982
  %984 = urem i32 %983, 2
  %985 = icmp eq i32 %984, 0
  %986 = icmp slt i32 %981, 10
  %987 = or i1 %985, %986
  br i1 %987, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %979, %originalBB234alteredBB
  %988 = call i32* @__errno_location() #15, !dbg !723
  %989 = load i32, i32* %988, align 4, !dbg !723
  %990 = icmp ne i32 %989, 0, !dbg !723
  %991 = load i32, i32* @x.3
  %992 = load i32, i32* @y.4
  %993 = sub i32 %991, 1
  %994 = mul i32 %991, %993
  %995 = urem i32 %994, 2
  %996 = icmp eq i32 %995, 0
  %997 = icmp slt i32 %992, 10
  %998 = or i1 %996, %997
  br i1 %998, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  br i1 %990, label %999, label %1003, !dbg !724

999:                                              ; preds = %originalBBpart2236
  %1000 = call i32* @__errno_location() #15, !dbg !725
  %1001 = load i32, i32* %1000, align 4, !dbg !725
  %1002 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i64 0, i64 0)) #10, !dbg !725
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1001, i8* %1002), !dbg !725
  unreachable, !dbg !725

1003:                                             ; preds = %originalBBpart2236, %originalBBpart2232
  br label %1004, !dbg !726

1004:                                             ; preds = %1003, %originalBBpart2228, %916, %originalBBpart2220
  %1005 = load i32, i32* @x.3
  %1006 = load i32, i32* @y.4
  %1007 = sub i32 %1005, 1
  %1008 = mul i32 %1005, %1007
  %1009 = urem i32 %1008, 2
  %1010 = icmp eq i32 %1009, 0
  %1011 = icmp slt i32 %1006, 10
  %1012 = or i1 %1010, %1011
  br i1 %1012, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %1004, %originalBB238alteredBB
  %1013 = load i8, i8* @just_user, align 1, !dbg !727
  %1014 = trunc i8 %1013 to i1, !dbg !727
  %1015 = load i32, i32* @x.3
  %1016 = load i32, i32* @y.4
  %1017 = sub i32 %1015, 1
  %1018 = mul i32 %1015, %1017
  %1019 = urem i32 %1018, 2
  %1020 = icmp eq i32 %1019, 0
  %1021 = icmp slt i32 %1016, 10
  %1022 = or i1 %1020, %1021
  br i1 %1022, label %originalBBpart2240, label %originalBB238alteredBB

originalBBpart2240:                               ; preds = %originalBB238
  br i1 %1014, label %1173, label %1023, !dbg !729

1023:                                             ; preds = %originalBBpart2240
  %1024 = load i32, i32* @x.3
  %1025 = load i32, i32* @y.4
  %1026 = sub i32 %1024, 1
  %1027 = mul i32 %1024, %1026
  %1028 = urem i32 %1027, 2
  %1029 = icmp eq i32 %1028, 0
  %1030 = icmp slt i32 %1025, 10
  %1031 = or i1 %1029, %1030
  br i1 %1031, label %originalBB242, label %originalBB242alteredBB

originalBB242:                                    ; preds = %1023, %originalBB242alteredBB
  %1032 = load i8, i8* @just_group, align 1, !dbg !730
  %1033 = trunc i8 %1032 to i1, !dbg !730
  %1034 = load i32, i32* @x.3
  %1035 = load i32, i32* @y.4
  %1036 = sub i32 %1034, 1
  %1037 = mul i32 %1034, %1036
  %1038 = urem i32 %1037, 2
  %1039 = icmp eq i32 %1038, 0
  %1040 = icmp slt i32 %1035, 10
  %1041 = or i1 %1039, %1040
  br i1 %1041, label %originalBBpart2244, label %originalBB242alteredBB

originalBBpart2244:                               ; preds = %originalBB242
  br i1 %1033, label %1064, label %1042, !dbg !731

1042:                                             ; preds = %originalBBpart2244
  %1043 = load i8, i8* @just_group_list, align 1, !dbg !732
  %1044 = trunc i8 %1043 to i1, !dbg !732
  br i1 %1044, label %1064, label %1045, !dbg !733

1045:                                             ; preds = %1042
  %1046 = load i32, i32* @x.3
  %1047 = load i32, i32* @y.4
  %1048 = sub i32 %1046, 1
  %1049 = mul i32 %1046, %1048
  %1050 = urem i32 %1049, 2
  %1051 = icmp eq i32 %1050, 0
  %1052 = icmp slt i32 %1047, 10
  %1053 = or i1 %1051, %1052
  br i1 %1053, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %1045, %originalBB246alteredBB
  %1054 = load i8, i8* @just_context, align 1, !dbg !734
  %1055 = trunc i8 %1054 to i1, !dbg !734
  %1056 = load i32, i32* @x.3
  %1057 = load i32, i32* @y.4
  %1058 = sub i32 %1056, 1
  %1059 = mul i32 %1056, %1058
  %1060 = urem i32 %1059, 2
  %1061 = icmp eq i32 %1060, 0
  %1062 = icmp slt i32 %1057, 10
  %1063 = or i1 %1061, %1062
  br i1 %1063, label %originalBBpart2248, label %originalBB246alteredBB

originalBBpart2248:                               ; preds = %originalBB246
  br i1 %1055, label %1173, label %1064, !dbg !735

1064:                                             ; preds = %originalBBpart2248, %1042, %originalBBpart2244
  %1065 = call i32* @__errno_location() #15, !dbg !736
  store i32 0, i32* %1065, align 4, !dbg !738
  %1066 = call i32 @getegid() #10, !dbg !739
  store i32 %1066, i32* @egid, align 4, !dbg !740
  %1067 = load i32, i32* @egid, align 4, !dbg !741
  %1068 = load i32, i32* %15, align 4, !dbg !743
  %1069 = icmp eq i32 %1067, %1068, !dbg !744
  br i1 %1069, label %1070, label %1110, !dbg !745

1070:                                             ; preds = %1064
  %1071 = load i32, i32* @x.3
  %1072 = load i32, i32* @y.4
  %1073 = sub i32 %1071, 1
  %1074 = mul i32 %1071, %1073
  %1075 = urem i32 %1074, 2
  %1076 = icmp eq i32 %1075, 0
  %1077 = icmp slt i32 %1072, 10
  %1078 = or i1 %1076, %1077
  br i1 %1078, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %1070, %originalBB250alteredBB
  %1079 = call i32* @__errno_location() #15, !dbg !746
  %1080 = load i32, i32* %1079, align 4, !dbg !746
  %1081 = icmp ne i32 %1080, 0, !dbg !746
  %1082 = load i32, i32* @x.3
  %1083 = load i32, i32* @y.4
  %1084 = sub i32 %1082, 1
  %1085 = mul i32 %1082, %1084
  %1086 = urem i32 %1085, 2
  %1087 = icmp eq i32 %1086, 0
  %1088 = icmp slt i32 %1083, 10
  %1089 = or i1 %1087, %1088
  br i1 %1089, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br i1 %1081, label %1090, label %1110, !dbg !747

1090:                                             ; preds = %originalBBpart2252
  %1091 = load i32, i32* @x.3
  %1092 = load i32, i32* @y.4
  %1093 = sub i32 %1091, 1
  %1094 = mul i32 %1091, %1093
  %1095 = urem i32 %1094, 2
  %1096 = icmp eq i32 %1095, 0
  %1097 = icmp slt i32 %1092, 10
  %1098 = or i1 %1096, %1097
  br i1 %1098, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %1090, %originalBB254alteredBB
  %1099 = call i32* @__errno_location() #15, !dbg !748
  %1100 = load i32, i32* %1099, align 4, !dbg !748
  %1101 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !748
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1100, i8* %1101), !dbg !748
  %1102 = load i32, i32* @x.3
  %1103 = load i32, i32* @y.4
  %1104 = sub i32 %1102, 1
  %1105 = mul i32 %1102, %1104
  %1106 = urem i32 %1105, 2
  %1107 = icmp eq i32 %1106, 0
  %1108 = icmp slt i32 %1103, 10
  %1109 = or i1 %1107, %1108
  br i1 %1109, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  unreachable, !dbg !748

1110:                                             ; preds = %originalBBpart2252, %1064
  %1111 = load i32, i32* @x.3
  %1112 = load i32, i32* @y.4
  %1113 = sub i32 %1111, 1
  %1114 = mul i32 %1111, %1113
  %1115 = urem i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  %1117 = icmp slt i32 %1112, 10
  %1118 = or i1 %1116, %1117
  br i1 %1118, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %1110, %originalBB258alteredBB
  %1119 = call i32* @__errno_location() #15, !dbg !749
  store i32 0, i32* %1119, align 4, !dbg !750
  %1120 = call i32 @getgid() #10, !dbg !751
  store i32 %1120, i32* @rgid, align 4, !dbg !752
  %1121 = load i32, i32* @rgid, align 4, !dbg !753
  %1122 = load i32, i32* %15, align 4, !dbg !755
  %1123 = icmp eq i32 %1121, %1122, !dbg !756
  %1124 = load i32, i32* @x.3
  %1125 = load i32, i32* @y.4
  %1126 = sub i32 %1124, 1
  %1127 = mul i32 %1124, %1126
  %1128 = urem i32 %1127, 2
  %1129 = icmp eq i32 %1128, 0
  %1130 = icmp slt i32 %1125, 10
  %1131 = or i1 %1129, %1130
  br i1 %1131, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br i1 %1123, label %1132, label %1172, !dbg !757

1132:                                             ; preds = %originalBBpart2260
  %1133 = load i32, i32* @x.3
  %1134 = load i32, i32* @y.4
  %1135 = sub i32 %1133, 1
  %1136 = mul i32 %1133, %1135
  %1137 = urem i32 %1136, 2
  %1138 = icmp eq i32 %1137, 0
  %1139 = icmp slt i32 %1134, 10
  %1140 = or i1 %1138, %1139
  br i1 %1140, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %1132, %originalBB262alteredBB
  %1141 = call i32* @__errno_location() #15, !dbg !758
  %1142 = load i32, i32* %1141, align 4, !dbg !758
  %1143 = icmp ne i32 %1142, 0, !dbg !758
  %1144 = load i32, i32* @x.3
  %1145 = load i32, i32* @y.4
  %1146 = sub i32 %1144, 1
  %1147 = mul i32 %1144, %1146
  %1148 = urem i32 %1147, 2
  %1149 = icmp eq i32 %1148, 0
  %1150 = icmp slt i32 %1145, 10
  %1151 = or i1 %1149, %1150
  br i1 %1151, label %originalBBpart2264, label %originalBB262alteredBB

originalBBpart2264:                               ; preds = %originalBB262
  br i1 %1143, label %1152, label %1172, !dbg !759

1152:                                             ; preds = %originalBBpart2264
  %1153 = load i32, i32* @x.3
  %1154 = load i32, i32* @y.4
  %1155 = sub i32 %1153, 1
  %1156 = mul i32 %1153, %1155
  %1157 = urem i32 %1156, 2
  %1158 = icmp eq i32 %1157, 0
  %1159 = icmp slt i32 %1154, 10
  %1160 = or i1 %1158, %1159
  br i1 %1160, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %1152, %originalBB266alteredBB
  %1161 = call i32* @__errno_location() #15, !dbg !760
  %1162 = load i32, i32* %1161, align 4, !dbg !760
  %1163 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !760
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1162, i8* %1163), !dbg !760
  %1164 = load i32, i32* @x.3
  %1165 = load i32, i32* @y.4
  %1166 = sub i32 %1164, 1
  %1167 = mul i32 %1164, %1166
  %1168 = urem i32 %1167, 2
  %1169 = icmp eq i32 %1168, 0
  %1170 = icmp slt i32 %1165, 10
  %1171 = or i1 %1169, %1170
  br i1 %1171, label %originalBBpart2268, label %originalBB266alteredBB

originalBBpart2268:                               ; preds = %originalBB266
  unreachable, !dbg !760

1172:                                             ; preds = %originalBBpart2264, %originalBBpart2260
  br label %1173, !dbg !761

1173:                                             ; preds = %1172, %originalBBpart2248, %originalBBpart2240
  %1174 = load i8*, i8** %9, align 8, !dbg !762
  call void @print_stuff(i8* %1174), !dbg !763
  br label %1175

1175:                                             ; preds = %1173, %799
  %1176 = load i8, i8* @ok, align 1, !dbg !764
  %1177 = trunc i8 %1176 to i1, !dbg !764
  %1178 = zext i1 %1177 to i64, !dbg !764
  %1179 = select i1 %1177, i32 0, i32 1, !dbg !764
  ret i32 %1179, !dbg !765

originalBBalteredBB:                              ; preds = %originalBB, %32
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %55
  store i8 1, i8* @just_group, align 1, !dbg !501
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %73
  store i8 1, i8* @use_real, align 1, !dbg !505
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %92
  store i8 1, i8* @just_group_list, align 1, !dbg !511
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %110
  %1180 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !514
  %1181 = load i8*, i8** @Version, align 8, !dbg !514
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %1180, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i8* %1181, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !514
  call void @exit(i32 0) #12, !dbg !514
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %129
  call void @usage(i32 1) #14, !dbg !515
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %146
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %173
  %1182 = call i8* @gettext(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !528
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1182), !dbg !528
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %191
  %1183 = load i8, i8* @just_user, align 1, !dbg !529
  %1184 = trunc i8 %1183 to i1, !dbg !529
  %1185 = zext i1 %1184 to i32, !dbg !529
  %1186 = load i8, i8* @just_group, align 1, !dbg !531
  %1187 = trunc i8 %1186 to i1, !dbg !531
  %1188 = zext i1 %1187 to i32, !dbg !531
  %_ = shl i32 %1185, %1188
  %1189 = add nsw i32 %1185, %1188, !dbg !532
  %1190 = load i8, i8* @just_group_list, align 1, !dbg !533
  %1191 = trunc i8 %1190 to i1, !dbg !533
  %1192 = zext i1 %1191 to i32, !dbg !533
  %_31 = sub i32 0, %1189
  %gen = add i32 %_31, %1192
  %_32 = sub i32 %1189, %1192
  %gen33 = mul i32 %_32, %1192
  %_34 = sub i32 %1189, %1192
  %gen35 = mul i32 %_34, %1192
  %_36 = shl i32 %1189, %1192
  %1193 = add nsw i32 %1189, %1192, !dbg !534
  %1194 = load i8, i8* @just_context, align 1, !dbg !535
  %1195 = trunc i8 %1194 to i1, !dbg !535
  %1196 = zext i1 %1195 to i32, !dbg !535
  %_37 = shl i32 %1193, %1196
  %_38 = sub i32 0, %1193
  %gen39 = add i32 %_38, %1196
  %_40 = shl i32 %1193, %1196
  %_41 = sub i32 0, %1193
  %gen42 = add i32 %_41, %1196
  %_43 = sub i32 %1193, %1196
  %gen44 = mul i32 %_43, %1196
  %_45 = sub i32 %1193, %1196
  %gen46 = mul i32 %_45, %1196
  %_47 = sub i32 %1193, %1196
  %gen48 = mul i32 %_47, %1196
  %_49 = shl i32 %1193, %1196
  %_50 = shl i32 %1193, %1196
  %1197 = add nsw i32 %1193, %1196, !dbg !536
  %1198 = icmp sgt i32 %1197, 1, !dbg !537
  br label %originalBB30

originalBB54alteredBB:                            ; preds = %originalBB54, %224
  %1199 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.17, i64 0, i64 0)) #10, !dbg !539
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1199), !dbg !539
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %242
  %1200 = load i8, i8* @just_user, align 1, !dbg !542
  %1201 = trunc i8 %1200 to i1, !dbg !542
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %261
  %1202 = load i8, i8* @just_group, align 1, !dbg !544
  %1203 = trunc i8 %1202 to i1, !dbg !544
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %283
  %1204 = load i8, i8* @just_context, align 1, !dbg !548
  %1205 = trunc i8 %1204 to i1, !dbg !548
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %308
  %1206 = load i8, i8* @use_real, align 1, !dbg !553
  %1207 = trunc i8 %1206 to i1, !dbg !553
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %327
  %1208 = load i8, i8* @use_name, align 1, !dbg !555
  %1209 = trunc i8 %1208 to i1, !dbg !555
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %346
  %1210 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.18, i64 0, i64 0)) #10, !dbg !557
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1210), !dbg !557
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %364
  %1211 = load i8, i8* %11, align 1, !dbg !558
  %1212 = trunc i8 %1211 to i1, !dbg !558
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %386
  %1213 = call i8* @gettext(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.19, i64 0, i64 0)) #10, !dbg !563
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1213), !dbg !563
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %406
  %collatzVaralteredBB = alloca i32
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %423
  %1214 = load i32, i32* @inVal0
  %1215 = icmp sgt i32 %1214, 1
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %442
  store i32 88, i32* %collatzVar
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %467
  %1216 = load i32, i32* %collatzVar
  %_103 = sub i32 0, %1216
  %gen104 = add i32 %_103, 2
  %_105 = sub i32 0, %1216
  %gen106 = add i32 %_105, 2
  %_107 = sub i32 %1216, 2
  %gen108 = mul i32 %_107, 2
  %_109 = sub i32 0, %1216
  %gen110 = add i32 %_109, 2
  %_111 = sub i32 %1216, 2
  %gen112 = mul i32 %_111, 2
  %1217 = srem i32 %1216, 2
  %1218 = icmp eq i32 %1217, 0
  br label %originalBB102

originalBB116alteredBB:                           ; preds = %originalBB116, %494
  %1219 = load i32, i32* %collatzVar
  %1220 = sext i32 %1219 to i64
  %1221 = sext i32 -2 to i64
  %_117 = sub i64 0, %405
  %gen118 = add i64 %_117, %1220
  %_119 = sub i64 0, %405
  %gen120 = add i64 %_119, %1220
  %_121 = sub i64 %405, %1220
  %gen122 = mul i64 %_121, %1220
  %_123 = sub i64 0, %405
  %gen124 = add i64 %_123, %1220
  %1222 = sub i64 %405, %1220
  %1223 = icmp sgt i64 %1222, %1221
  br label %originalBB116

originalBB128alteredBB:                           ; preds = %originalBB128, %516
  %1224 = load i32, i32* %collatzVar
  %1225 = sext i32 %1224 to i64
  %1226 = sext i32 2 to i64
  %_129 = shl i64 %405, %1225
  %_130 = sub i64 0, %405
  %gen131 = add i64 %_130, %1225
  %_132 = sub i64 0, %405
  %gen133 = add i64 %_132, %1225
  %_134 = shl i64 %405, %1225
  %_135 = sub i64 0, %405
  %gen136 = add i64 %_135, %1225
  %_137 = sub i64 %405, %1225
  %gen138 = mul i64 %_137, %1225
  %_139 = shl i64 %405, %1225
  %1227 = add i64 %405, %1225
  %1228 = icmp slt i64 %1227, %1226
  br label %originalBB128

originalBB143alteredBB:                           ; preds = %originalBB143, %538
  %1229 = load i8, i8* @just_context, align 1, !dbg !567
  %1230 = trunc i8 %1229 to i1, !dbg !567
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %560
  %1231 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0)) #10, !dbg !571
  %1232 = icmp ne i8* %1231, null, !dbg !571
  br label %originalBB147

originalBB151alteredBB:                           ; preds = %originalBB151, %579
  %1233 = load i32, i32* %7, align 4, !dbg !573
  %1234 = icmp ne i32 %1233, 0, !dbg !573
  br label %originalBB151

originalBB155alteredBB:                           ; preds = %originalBB155, %610
  %1235 = load i8, i8* @just_context, align 1, !dbg !586
  %1236 = trunc i8 %1235 to i1, !dbg !586
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %629
  %1237 = call i8* @gettext(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.21, i64 0, i64 0)) #10, !dbg !588
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %1237), !dbg !588
  br label %originalBB159

originalBB163alteredBB:                           ; preds = %originalBB163, %648
  %1238 = load i64, i64* %10, align 8, !dbg !590
  %1239 = icmp uge i64 %1238, 1, !dbg !592
  br label %originalBB163

originalBB167alteredBB:                           ; preds = %originalBB167, %667
  %1240 = load i64, i64* %10, align 8, !dbg !594
  %1241 = icmp ugt i64 %1240, 1, !dbg !596
  %1242 = zext i1 %1241 to i64, !dbg !594
  %1243 = select i1 %1241, i32 1, i32 0, !dbg !594
  %1244 = icmp ne i32 %1243, 0, !dbg !594
  %1245 = zext i1 %1244 to i8, !dbg !597
  store i8 %1245, i8* @multiple_users, align 1, !dbg !597
  %1246 = load i32, i32* @optind, align 4, !dbg !598
  %1247 = sext i32 %1246 to i64, !dbg !598
  %1248 = load i64, i64* %10, align 8, !dbg !599
  %_168 = sub i64 %1248, %1247
  %gen169 = mul i64 %_168, %1247
  %_170 = sub i64 0, %1248
  %gen171 = add i64 %_170, %1247
  %_172 = sub i64 0, %1248
  %gen173 = add i64 %_172, %1247
  %_174 = sub i64 0, %1248
  %gen175 = add i64 %_174, %1247
  %_176 = sub i64 %1248, %1247
  %gen177 = mul i64 %_176, %1247
  %_178 = sub i64 0, %1248
  %gen179 = add i64 %_178, %1247
  %_180 = shl i64 %1248, %1247
  %1249 = add i64 %1248, %1247, !dbg !599
  store i64 %1249, i64* %10, align 8, !dbg !599
  br label %originalBB167

originalBB184alteredBB:                           ; preds = %originalBB184, %694
  %1250 = load i32, i32* @optind, align 4, !dbg !601
  %1251 = sext i32 %1250 to i64, !dbg !601
  %1252 = load i64, i64* %10, align 8, !dbg !604
  %1253 = icmp ult i64 %1251, %1252, !dbg !605
  br label %originalBB184

originalBB188alteredBB:                           ; preds = %originalBB188, %715
  store %struct.passwd* null, %struct.passwd** %12, align 8, !dbg !620
  call void @llvm.dbg.declare(metadata !4, metadata !766, metadata !DIExpression()), !dbg !622
  %1254 = load i8**, i8*** %5, align 8, !dbg !623
  %1255 = load i32, i32* @optind, align 4, !dbg !624
  %1256 = sext i32 %1255 to i64, !dbg !623
  %1257 = getelementptr inbounds i8*, i8** %1254, i64 %1256, !dbg !623
  %1258 = load i8*, i8** %1257, align 8, !dbg !623
  store i8* %1258, i8** %13, align 8, !dbg !622
  %1259 = load i8*, i8** %13, align 8, !dbg !625
  %1260 = load i8, i8* %1259, align 1, !dbg !627
  %1261 = icmp ne i8 %1260, 0, !dbg !627
  br label %originalBB188

originalBB192alteredBB:                           ; preds = %originalBB192, %751
  %1262 = call i32* @__errno_location() #15, !dbg !645
  %1263 = load i32, i32* %1262, align 4, !dbg !645
  %1264 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !647
  %1265 = load i8**, i8*** %5, align 8, !dbg !648
  %1266 = load i32, i32* @optind, align 4, !dbg !649
  %1267 = sext i32 %1266 to i64, !dbg !648
  %1268 = getelementptr inbounds i8*, i8** %1265, i64 %1267, !dbg !648
  %1269 = load i8*, i8** %1268, align 8, !dbg !648
  %1270 = call i8* @quote(i8* %1269), !dbg !650
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %1263, i8* %1264, i8* %1270), !dbg !651
  %1271 = load i8, i8* @ok, align 1, !dbg !652
  %1272 = trunc i8 %1271 to i1, !dbg !652
  %1273 = zext i1 %1272 to i32, !dbg !652
  %_193 = sub i32 0, %1273
  %gen194 = add i32 %_193, 0
  %_195 = sub i32 0, %1273
  %gen196 = add i32 %_195, 0
  %_197 = sub i32 %1273, 0
  %gen198 = mul i32 %_197, 0
  %1274 = and i32 %1273, 0, !dbg !652
  %1275 = icmp ne i32 %1274, 0, !dbg !652
  %1276 = zext i1 %1275 to i8, !dbg !652
  store i8 %1276, i8* @ok, align 1, !dbg !652
  br label %originalBB192

originalBB202alteredBB:                           ; preds = %originalBB202, %800
  store i32 -1, i32* %14, align 4, !dbg !678
  call void @llvm.dbg.declare(metadata !4, metadata !819, metadata !DIExpression()), !dbg !680
  store i32 -1, i32* %15, align 4, !dbg !680
  %1277 = load i8, i8* @just_user, align 1, !dbg !681
  %1278 = trunc i8 %1277 to i1, !dbg !681
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %828
  %1279 = load i8, i8* @just_context, align 1, !dbg !689
  %1280 = trunc i8 %1279 to i1, !dbg !689
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %853
  %1281 = call i32* @__errno_location() #15, !dbg !700
  %1282 = load i32, i32* %1281, align 4, !dbg !700
  %1283 = icmp ne i32 %1282, 0, !dbg !700
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %877
  br label %originalBB214

originalBB218alteredBB:                           ; preds = %originalBB218, %897
  %1284 = load i8, i8* @use_real, align 1, !dbg !707
  %1285 = trunc i8 %1284 to i1, !dbg !707
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %919
  %1286 = load i8, i8* @just_group_list, align 1, !dbg !710
  %1287 = trunc i8 %1286 to i1, !dbg !710
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %938
  %1288 = load i8, i8* @just_context, align 1, !dbg !712
  %1289 = trunc i8 %1288 to i1, !dbg !712
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %957
  %1290 = call i32* @__errno_location() #15, !dbg !713
  store i32 0, i32* %1290, align 4, !dbg !715
  %1291 = call i32 @getuid() #10, !dbg !716
  store i32 %1291, i32* @ruid, align 4, !dbg !717
  %1292 = load i32, i32* @ruid, align 4, !dbg !718
  %1293 = load i32, i32* %14, align 4, !dbg !720
  %1294 = icmp eq i32 %1292, %1293, !dbg !721
  br label %originalBB230

originalBB234alteredBB:                           ; preds = %originalBB234, %979
  %1295 = call i32* @__errno_location() #15, !dbg !723
  %1296 = load i32, i32* %1295, align 4, !dbg !723
  %1297 = icmp ne i32 %1296, 0, !dbg !723
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %1004
  %1298 = load i8, i8* @just_user, align 1, !dbg !727
  %1299 = trunc i8 %1298 to i1, !dbg !727
  br label %originalBB238

originalBB242alteredBB:                           ; preds = %originalBB242, %1023
  %1300 = load i8, i8* @just_group, align 1, !dbg !730
  %1301 = trunc i8 %1300 to i1, !dbg !730
  br label %originalBB242

originalBB246alteredBB:                           ; preds = %originalBB246, %1045
  %1302 = load i8, i8* @just_context, align 1, !dbg !734
  %1303 = trunc i8 %1302 to i1, !dbg !734
  br label %originalBB246

originalBB250alteredBB:                           ; preds = %originalBB250, %1070
  %1304 = call i32* @__errno_location() #15, !dbg !746
  %1305 = load i32, i32* %1304, align 4, !dbg !746
  %1306 = icmp ne i32 %1305, 0, !dbg !746
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1090
  %1307 = call i32* @__errno_location() #15, !dbg !748
  %1308 = load i32, i32* %1307, align 4, !dbg !748
  %1309 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !748
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1308, i8* %1309), !dbg !748
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1110
  %1310 = call i32* @__errno_location() #15, !dbg !749
  store i32 0, i32* %1310, align 4, !dbg !750
  %1311 = call i32 @getgid() #10, !dbg !751
  store i32 %1311, i32* @rgid, align 4, !dbg !752
  %1312 = load i32, i32* @rgid, align 4, !dbg !753
  %1313 = load i32, i32* %15, align 4, !dbg !755
  %1314 = icmp eq i32 %1312, %1313, !dbg !756
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %1132
  %1315 = call i32* @__errno_location() #15, !dbg !758
  %1316 = load i32, i32* %1315, align 4, !dbg !758
  %1317 = icmp ne i32 %1316, 0, !dbg !758
  br label %originalBB262

originalBB266alteredBB:                           ; preds = %originalBB266, %1152
  %1318 = call i32* @__errno_location() #15, !dbg !760
  %1319 = load i32, i32* %1318, align 4, !dbg !760
  %1320 = call i8* @gettext(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !760
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1319, i8* %1320), !dbg !760
  br label %originalBB266
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @is_smack_enabled() #4 !dbg !869 {
  %1 = load i32, i32* @x.5
  %2 = load i32, i32* @y.6
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load i32, i32* @x.5
  %10 = load i32, i32* @y.6
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i1 false, !dbg !873

originalBBalteredBB:                              ; preds = %originalBB, %0
  br label %originalBB
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @smack_new_label_from_self(i8**) #4 !dbg !874 {
  %2 = alloca i8**, align 8
  store i8** %0, i8*** %2, align 8
  call void @llvm.dbg.declare(metadata i8*** %2, metadata !881, metadata !DIExpression()), !dbg !882
  ret i64 -1, !dbg !883
}

declare dso_local %struct.passwd* @getpwuid(i32) #3

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_stuff(i8*) #4 !dbg !884 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !885, metadata !DIExpression()), !dbg !886
  %3 = load i8, i8* @just_user, align 1, !dbg !887
  %4 = trunc i8 %3 to i1, !dbg !887
  br i1 %4, label %5, label %78, !dbg !889

5:                                                ; preds = %1
  %6 = load i32, i32* @x.9
  %7 = load i32, i32* @y.10
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = load i8, i8* @use_real, align 1, !dbg !890
  %15 = trunc i8 %14 to i1, !dbg !890
  %16 = load i32, i32* @x.9
  %17 = load i32, i32* @y.10
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %42, !dbg !890

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.9
  %26 = load i32, i32* @y.10
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i32, i32* @ruid, align 4, !dbg !891
  %34 = load i32, i32* @x.9
  %35 = load i32, i32* @y.10
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %60, !dbg !890

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.9
  %44 = load i32, i32* @y.10
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i32, i32* @euid, align 4, !dbg !892
  %52 = load i32, i32* @x.9
  %53 = load i32, i32* @y.10
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %60, !dbg !890

60:                                               ; preds = %originalBBpart28, %originalBBpart24
  %61 = phi i32 [ %33, %originalBBpart24 ], [ %51, %originalBBpart28 ], !dbg !890
  %62 = load i32, i32* @x.9
  %63 = load i32, i32* @y.10
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  call void @print_user(i32 %61), !dbg !893
  %70 = load i32, i32* @x.9
  %71 = load i32, i32* @y.10
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %279, !dbg !893

78:                                               ; preds = %1
  %79 = load i8, i8* @just_group, align 1, !dbg !894
  %80 = trunc i8 %79 to i1, !dbg !894
  br i1 %80, label %81, label %148, !dbg !896

81:                                               ; preds = %78
  %82 = load i32, i32* @x.9
  %83 = load i32, i32* @y.10
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i8, i8* @use_real, align 1, !dbg !897
  %91 = trunc i8 %90 to i1, !dbg !897
  %92 = load i32, i32* @x.9
  %93 = load i32, i32* @y.10
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %91, label %100, label %118, !dbg !897

100:                                              ; preds = %originalBBpart216
  %101 = load i32, i32* @x.9
  %102 = load i32, i32* @y.10
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %100, %originalBB18alteredBB
  %109 = load i32, i32* @rgid, align 4, !dbg !898
  %110 = load i32, i32* @x.9
  %111 = load i32, i32* @y.10
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %136, !dbg !897

118:                                              ; preds = %originalBBpart216
  %119 = load i32, i32* @x.9
  %120 = load i32, i32* @y.10
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %118, %originalBB22alteredBB
  %127 = load i32, i32* @egid, align 4, !dbg !899
  %128 = load i32, i32* @x.9
  %129 = load i32, i32* @y.10
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %136, !dbg !897

136:                                              ; preds = %originalBBpart224, %originalBBpart220
  %137 = phi i32 [ %109, %originalBBpart220 ], [ %127, %originalBBpart224 ], !dbg !897
  %138 = load i8, i8* @use_name, align 1, !dbg !900
  %139 = trunc i8 %138 to i1, !dbg !900
  %140 = call zeroext i1 @print_group(i32 %137, i1 zeroext %139), !dbg !901
  %141 = zext i1 %140 to i32, !dbg !901
  %142 = load i8, i8* @ok, align 1, !dbg !902
  %143 = trunc i8 %142 to i1, !dbg !902
  %144 = zext i1 %143 to i32, !dbg !902
  %145 = and i32 %144, %141, !dbg !902
  %146 = icmp ne i32 %145, 0, !dbg !902
  %147 = zext i1 %146 to i8, !dbg !902
  store i8 %147, i8* @ok, align 1, !dbg !902
  br label %262, !dbg !903

148:                                              ; preds = %78
  %149 = load i8, i8* @just_group_list, align 1, !dbg !904
  %150 = trunc i8 %149 to i1, !dbg !904
  br i1 %150, label %151, label %187, !dbg !906

151:                                              ; preds = %148
  %152 = load i32, i32* @x.9
  %153 = load i32, i32* @y.10
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %151, %originalBB26alteredBB
  %160 = load i8*, i8** %2, align 8, !dbg !907
  %161 = load i32, i32* @ruid, align 4, !dbg !908
  %162 = load i32, i32* @rgid, align 4, !dbg !909
  %163 = load i32, i32* @egid, align 4, !dbg !910
  %164 = load i8, i8* @use_name, align 1, !dbg !911
  %165 = trunc i8 %164 to i1, !dbg !911
  %166 = load i8, i8* @opt_zero, align 1, !dbg !912
  %167 = trunc i8 %166 to i1, !dbg !912
  %168 = zext i1 %167 to i64, !dbg !912
  %169 = select i1 %167, i32 0, i32 32, !dbg !912
  %170 = trunc i32 %169 to i8, !dbg !912
  %171 = call zeroext i1 @print_group_list(i8* %160, i32 %161, i32 %162, i32 %163, i1 zeroext %165, i8 signext %170), !dbg !913
  %172 = zext i1 %171 to i32, !dbg !913
  %173 = load i8, i8* @ok, align 1, !dbg !914
  %174 = trunc i8 %173 to i1, !dbg !914
  %175 = zext i1 %174 to i32, !dbg !914
  %176 = and i32 %175, %172, !dbg !914
  %177 = icmp ne i32 %176, 0, !dbg !914
  %178 = zext i1 %177 to i8, !dbg !914
  store i8 %178, i8* @ok, align 1, !dbg !914
  %179 = load i32, i32* @x.9
  %180 = load i32, i32* @y.10
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart231, label %originalBB26alteredBB

originalBBpart231:                                ; preds = %originalBB26
  br label %261, !dbg !915

187:                                              ; preds = %148
  %188 = load i32, i32* @x.9
  %189 = load i32, i32* @y.10
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %187, %originalBB33alteredBB
  %196 = load i8, i8* @just_context, align 1, !dbg !916
  %197 = trunc i8 %196 to i1, !dbg !916
  %198 = load i32, i32* @x.9
  %199 = load i32, i32* @y.10
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %197, label %206, label %226, !dbg !918

206:                                              ; preds = %originalBBpart235
  %207 = load i32, i32* @x.9
  %208 = load i32, i32* @y.10
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %206, %originalBB37alteredBB
  %215 = load i8*, i8** @context, align 8, !dbg !919
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !919
  %217 = call i32 @fputs_unlocked(i8* %215, %struct._IO_FILE* %216), !dbg !919
  %218 = load i32, i32* @x.9
  %219 = load i32, i32* @y.10
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %244, !dbg !919

226:                                              ; preds = %originalBBpart235
  %227 = load i32, i32* @x.9
  %228 = load i32, i32* @y.10
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %226, %originalBB41alteredBB
  %235 = load i8*, i8** %2, align 8, !dbg !920
  call void @print_full_info(i8* %235), !dbg !921
  %236 = load i32, i32* @x.9
  %237 = load i32, i32* @y.10
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br label %244

244:                                              ; preds = %originalBBpart243, %originalBBpart239
  %245 = load i32, i32* @x.9
  %246 = load i32, i32* @y.10
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %244, %originalBB45alteredBB
  %253 = load i32, i32* @x.9
  %254 = load i32, i32* @y.10
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br label %261

261:                                              ; preds = %originalBBpart247, %originalBBpart231
  br label %262

262:                                              ; preds = %261, %136
  %263 = load i32, i32* @x.9
  %264 = load i32, i32* @y.10
  %265 = sub i32 %263, 1
  %266 = mul i32 %263, %265
  %267 = urem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %268, %269
  br i1 %270, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %262, %originalBB49alteredBB
  %271 = load i32, i32* @x.9
  %272 = load i32, i32* @y.10
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br label %279

279:                                              ; preds = %originalBBpart251, %originalBBpart212
  %280 = load i8, i8* @opt_zero, align 1, !dbg !922
  %281 = trunc i8 %280 to i1, !dbg !922
  br i1 %281, label %282, label %323, !dbg !924

282:                                              ; preds = %279
  %283 = load i32, i32* @x.9
  %284 = load i32, i32* @y.10
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %282, %originalBB53alteredBB
  %291 = load i8, i8* @just_group_list, align 1, !dbg !925
  %292 = trunc i8 %291 to i1, !dbg !925
  %293 = load i32, i32* @x.9
  %294 = load i32, i32* @y.10
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br i1 %292, label %301, label %323, !dbg !926

301:                                              ; preds = %originalBBpart255
  %302 = load i32, i32* @x.9
  %303 = load i32, i32* @y.10
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %301, %originalBB57alteredBB
  %310 = load i8, i8* @multiple_users, align 1, !dbg !927
  %311 = trunc i8 %310 to i1, !dbg !927
  %312 = load i32, i32* @x.9
  %313 = load i32, i32* @y.10
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br i1 %311, label %320, label %323, !dbg !928

320:                                              ; preds = %originalBBpart259
  %321 = call i32 @putchar_unlocked(i32 0), !dbg !929
  %322 = call i32 @putchar_unlocked(i32 0), !dbg !931
  br label %345, !dbg !932

323:                                              ; preds = %originalBBpart259, %originalBBpart255, %279
  %324 = load i32, i32* @x.9
  %325 = load i32, i32* @y.10
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %323, %originalBB61alteredBB
  %332 = load i8, i8* @opt_zero, align 1, !dbg !933
  %333 = trunc i8 %332 to i1, !dbg !933
  %334 = zext i1 %333 to i64, !dbg !933
  %335 = select i1 %333, i32 0, i32 10, !dbg !933
  %336 = call i32 @putchar_unlocked(i32 %335), !dbg !933
  %337 = load i32, i32* @x.9
  %338 = load i32, i32* @y.10
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br label %345

345:                                              ; preds = %originalBBpart263, %320
  %346 = load i32, i32* @x.9
  %347 = load i32, i32* @y.10
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %345, %originalBB65alteredBB
  %354 = load i32, i32* @x.9
  %355 = load i32, i32* @y.10
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  ret void, !dbg !935

originalBBalteredBB:                              ; preds = %originalBB, %5
  %362 = load i8, i8* @use_real, align 1, !dbg !890
  %363 = trunc i8 %362 to i1, !dbg !890
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %364 = load i32, i32* @ruid, align 4, !dbg !891
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %365 = load i32, i32* @euid, align 4, !dbg !892
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  call void @print_user(i32 %61), !dbg !893
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %366 = load i8, i8* @use_real, align 1, !dbg !897
  %367 = trunc i8 %366 to i1, !dbg !897
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %100
  %368 = load i32, i32* @rgid, align 4, !dbg !898
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %118
  %369 = load i32, i32* @egid, align 4, !dbg !899
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %151
  %370 = load i8*, i8** %2, align 8, !dbg !907
  %371 = load i32, i32* @ruid, align 4, !dbg !908
  %372 = load i32, i32* @rgid, align 4, !dbg !909
  %373 = load i32, i32* @egid, align 4, !dbg !910
  %374 = load i8, i8* @use_name, align 1, !dbg !911
  %375 = trunc i8 %374 to i1, !dbg !911
  %376 = load i8, i8* @opt_zero, align 1, !dbg !912
  %377 = trunc i8 %376 to i1, !dbg !912
  %378 = zext i1 %377 to i64, !dbg !912
  %379 = select i1 %377, i32 0, i32 32, !dbg !912
  %380 = trunc i32 %379 to i8, !dbg !912
  %381 = call zeroext i1 @print_group_list(i8* %370, i32 %371, i32 %372, i32 %373, i1 zeroext %375, i8 signext %380), !dbg !913
  %382 = zext i1 %381 to i32, !dbg !913
  %383 = load i8, i8* @ok, align 1, !dbg !914
  %384 = trunc i8 %383 to i1, !dbg !914
  %385 = zext i1 %384 to i32, !dbg !914
  %_ = sub i32 %385, %382
  %gen = mul i32 %_, %382
  %_27 = sub i32 0, %385
  %gen28 = add i32 %_27, %382
  %386 = and i32 %385, %382, !dbg !914
  %387 = icmp ne i32 %386, 0, !dbg !914
  %388 = zext i1 %387 to i8, !dbg !914
  store i8 %388, i8* @ok, align 1, !dbg !914
  br label %originalBB26

originalBB33alteredBB:                            ; preds = %originalBB33, %187
  %389 = load i8, i8* @just_context, align 1, !dbg !916
  %390 = trunc i8 %389 to i1, !dbg !916
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %206
  %391 = load i8*, i8** @context, align 8, !dbg !919
  %392 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !919
  %393 = call i32 @fputs_unlocked(i8* %391, %struct._IO_FILE* %392), !dbg !919
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %226
  %394 = load i8*, i8** %2, align 8, !dbg !920
  call void @print_full_info(i8* %394), !dbg !921
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %244
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %262
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %282
  %395 = load i8, i8* @just_group_list, align 1, !dbg !925
  %396 = trunc i8 %395 to i1, !dbg !925
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %301
  %397 = load i8, i8* @multiple_users, align 1, !dbg !927
  %398 = trunc i8 %397 to i1, !dbg !927
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %323
  %399 = load i8, i8* @opt_zero, align 1, !dbg !933
  %400 = trunc i8 %399 to i1, !dbg !933
  %401 = zext i1 %400 to i64, !dbg !933
  %402 = select i1 %400, i32 0, i32 10, !dbg !933
  %403 = call i32 @putchar_unlocked(i32 %402), !dbg !933
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %345
  br label %originalBB65
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @geteuid() #2

; Function Attrs: nounwind
declare dso_local i32 @getuid() #2

; Function Attrs: nounwind
declare dso_local i32 @getegid() #2

; Function Attrs: nounwind
declare dso_local i32 @getgid() #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_user(i32) #4 !dbg !936 {
  %2 = load i32, i32* @x.11
  %3 = load i32, i32* @y.12
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct.passwd*, align 8
  %12 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !939, metadata !DIExpression()), !dbg !940
  call void @llvm.dbg.declare(metadata %struct.passwd** %11, metadata !941, metadata !DIExpression()), !dbg !942
  store %struct.passwd* null, %struct.passwd** %11, align 8, !dbg !942
  %13 = load i8, i8* @use_name, align 1, !dbg !943
  %14 = trunc i8 %13 to i1, !dbg !943
  %15 = load i32, i32* @x.11
  %16 = load i32, i32* @y.12
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %70, !dbg !945

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* %10, align 4, !dbg !946
  %25 = call %struct.passwd* @getpwuid(i32 %24), !dbg !948
  store %struct.passwd* %25, %struct.passwd** %11, align 8, !dbg !949
  %26 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !950
  %27 = icmp eq %struct.passwd* %26, null, !dbg !952
  br i1 %27, label %28, label %53, !dbg !953

28:                                               ; preds = %23
  %29 = load i32, i32* @x.11
  %30 = load i32, i32* @y.12
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !954
  %38 = call i8* @uidtostr_ptr(i32* %10), !dbg !956
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %37, i8* %38), !dbg !957
  %39 = load i8, i8* @ok, align 1, !dbg !958
  %40 = trunc i8 %39 to i1, !dbg !958
  %41 = zext i1 %40 to i32, !dbg !958
  %42 = and i32 %41, 0, !dbg !958
  %43 = icmp ne i32 %42, 0, !dbg !958
  %44 = zext i1 %43 to i8, !dbg !958
  store i8 %44, i8* @ok, align 1, !dbg !958
  %45 = load i32, i32* @x.11
  %46 = load i32, i32* @y.12
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %53, !dbg !959

53:                                               ; preds = %originalBBpart24, %23
  %54 = load i32, i32* @x.11
  %55 = load i32, i32* @y.12
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i32, i32* @x.11
  %63 = load i32, i32* @y.12
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %70, !dbg !960

70:                                               ; preds = %originalBBpart28, %originalBBpart2
  call void @llvm.dbg.declare(metadata i8** %12, metadata !961, metadata !DIExpression()), !dbg !962
  %71 = load i32, i32* @x.11
  %72 = load i32, i32* @y.12
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %70, %originalBB10alteredBB
  %79 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !963
  %80 = icmp ne %struct.passwd* %79, null, !dbg !963
  %81 = load i32, i32* @x.11
  %82 = load i32, i32* @y.12
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %80, label %89, label %93, !dbg !963

89:                                               ; preds = %originalBBpart212
  %90 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !964
  %91 = getelementptr inbounds %struct.passwd, %struct.passwd* %90, i32 0, i32 0, !dbg !965
  %92 = load i8*, i8** %91, align 8, !dbg !965
  br label %111, !dbg !963

93:                                               ; preds = %originalBBpart212
  %94 = load i32, i32* @x.11
  %95 = load i32, i32* @y.12
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  %102 = call i8* @uidtostr_ptr(i32* %10), !dbg !966
  %103 = load i32, i32* @x.11
  %104 = load i32, i32* @y.12
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %111, !dbg !963

111:                                              ; preds = %originalBBpart216, %89
  %112 = phi i8* [ %92, %89 ], [ %102, %originalBBpart216 ], !dbg !963
  store i8* %112, i8** %12, align 8, !dbg !962
  %113 = load i8*, i8** %12, align 8, !dbg !967
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !967
  %115 = call i32 @fputs_unlocked(i8* %113, %struct._IO_FILE* %114), !dbg !967
  ret void, !dbg !968

originalBBalteredBB:                              ; preds = %originalBB, %1
  %116 = alloca i32, align 4
  %117 = alloca %struct.passwd*, align 8
  %118 = alloca i8*, align 8
  store i32 %0, i32* %116, align 4
  call void @llvm.dbg.declare(metadata i32* %116, metadata !969, metadata !DIExpression()), !dbg !940
  call void @llvm.dbg.declare(metadata %struct.passwd** %117, metadata !1017, metadata !DIExpression()), !dbg !942
  store %struct.passwd* null, %struct.passwd** %117, align 8, !dbg !942
  %119 = load i8, i8* @use_name, align 1, !dbg !943
  %120 = trunc i8 %119 to i1, !dbg !943
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %121 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !954
  %122 = call i8* @uidtostr_ptr(i32* %10), !dbg !956
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %121, i8* %122), !dbg !957
  %123 = load i8, i8* @ok, align 1, !dbg !958
  %124 = trunc i8 %123 to i1, !dbg !958
  %125 = zext i1 %124 to i32, !dbg !958
  %_ = shl i32 %125, 0
  %_2 = shl i32 %125, 0
  %126 = and i32 %125, 0, !dbg !958
  %127 = icmp ne i32 %126, 0, !dbg !958
  %128 = zext i1 %127 to i8, !dbg !958
  store i8 %128, i8* @ok, align 1, !dbg !958
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %70
  %129 = load %struct.passwd*, %struct.passwd** %11, align 8, !dbg !963
  %130 = icmp ne %struct.passwd* %129, null, !dbg !963
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  %131 = call i8* @uidtostr_ptr(i32* %10), !dbg !966
  br label %originalBB14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_full_info(i8*) #4 !dbg !1028 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.passwd*, align 8
  %4 = alloca %struct.group*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !1029, metadata !DIExpression()), !dbg !1030
  call void @llvm.dbg.declare(metadata %struct.passwd** %3, metadata !1031, metadata !DIExpression()), !dbg !1032
  call void @llvm.dbg.declare(metadata %struct.group** %4, metadata !1033, metadata !DIExpression()), !dbg !1042
  %9 = call i8* @gettext(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0)) #10, !dbg !1043
  %10 = call i8* @uidtostr_ptr(i32* @ruid), !dbg !1044
  %11 = call i32 (i8*, ...) @printf(i8* %9, i8* %10), !dbg !1045
  %12 = load i32, i32* @ruid, align 4, !dbg !1046
  %13 = call %struct.passwd* @getpwuid(i32 %12), !dbg !1047
  store %struct.passwd* %13, %struct.passwd** %3, align 8, !dbg !1048
  %14 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1049
  %15 = icmp ne %struct.passwd* %14, null, !dbg !1049
  br i1 %15, label %16, label %37, !dbg !1051

16:                                               ; preds = %1
  %17 = load i32, i32* @x.13
  %18 = load i32, i32* @y.14
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1052
  %26 = getelementptr inbounds %struct.passwd, %struct.passwd* %25, i32 0, i32 0, !dbg !1053
  %27 = load i8*, i8** %26, align 8, !dbg !1053
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %27), !dbg !1054
  %29 = load i32, i32* @x.13
  %30 = load i32, i32* @y.14
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %37, !dbg !1054

37:                                               ; preds = %originalBBpart2, %1
  %38 = load i32, i32* @x.13
  %39 = load i32, i32* @y.14
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54, i64 0, i64 0)) #10, !dbg !1055
  %47 = call i8* @gidtostr_ptr(i32* @rgid), !dbg !1056
  %48 = call i32 (i8*, ...) @printf(i8* %46, i8* %47), !dbg !1057
  %49 = load i32, i32* @rgid, align 4, !dbg !1058
  %50 = call %struct.group* @getgrgid(i32 %49), !dbg !1059
  store %struct.group* %50, %struct.group** %4, align 8, !dbg !1060
  %51 = load %struct.group*, %struct.group** %4, align 8, !dbg !1061
  %52 = icmp ne %struct.group* %51, null, !dbg !1061
  %53 = load i32, i32* @x.13
  %54 = load i32, i32* @y.14
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %52, label %61, label %82, !dbg !1063

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.13
  %63 = load i32, i32* @y.14
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %61, %originalBB6alteredBB
  %70 = load %struct.group*, %struct.group** %4, align 8, !dbg !1064
  %71 = getelementptr inbounds %struct.group, %struct.group* %70, i32 0, i32 0, !dbg !1065
  %72 = load i8*, i8** %71, align 8, !dbg !1065
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %72), !dbg !1066
  %74 = load i32, i32* @x.13
  %75 = load i32, i32* @y.14
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %82, !dbg !1066

82:                                               ; preds = %originalBBpart28, %originalBBpart24
  %83 = load i32, i32* @euid, align 4, !dbg !1067
  %84 = load i32, i32* @ruid, align 4, !dbg !1069
  %85 = icmp ne i32 %83, %84, !dbg !1070
  br i1 %85, label %86, label %132, !dbg !1071

86:                                               ; preds = %82
  %87 = load i32, i32* @x.13
  %88 = load i32, i32* @y.14
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %86, %originalBB10alteredBB
  %95 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55, i64 0, i64 0)) #10, !dbg !1072
  %96 = call i8* @uidtostr_ptr(i32* @euid), !dbg !1074
  %97 = call i32 (i8*, ...) @printf(i8* %95, i8* %96), !dbg !1075
  %98 = load i32, i32* @euid, align 4, !dbg !1076
  %99 = call %struct.passwd* @getpwuid(i32 %98), !dbg !1077
  store %struct.passwd* %99, %struct.passwd** %3, align 8, !dbg !1078
  %100 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1079
  %101 = icmp ne %struct.passwd* %100, null, !dbg !1079
  %102 = load i32, i32* @x.13
  %103 = load i32, i32* @y.14
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %101, label %110, label %131, !dbg !1081

110:                                              ; preds = %originalBBpart212
  %111 = load i32, i32* @x.13
  %112 = load i32, i32* @y.14
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %110, %originalBB14alteredBB
  %119 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1082
  %120 = getelementptr inbounds %struct.passwd, %struct.passwd* %119, i32 0, i32 0, !dbg !1083
  %121 = load i8*, i8** %120, align 8, !dbg !1083
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %121), !dbg !1084
  %123 = load i32, i32* @x.13
  %124 = load i32, i32* @y.14
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %131, !dbg !1084

131:                                              ; preds = %originalBBpart216, %originalBBpart212
  br label %132, !dbg !1085

132:                                              ; preds = %131, %82
  %133 = load i32, i32* @x.13
  %134 = load i32, i32* @y.14
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %132, %originalBB18alteredBB
  %141 = load i32, i32* @egid, align 4, !dbg !1086
  %142 = load i32, i32* @rgid, align 4, !dbg !1088
  %143 = icmp ne i32 %141, %142, !dbg !1089
  %144 = load i32, i32* @x.13
  %145 = load i32, i32* @y.14
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %143, label %152, label %198, !dbg !1090

152:                                              ; preds = %originalBBpart220
  %153 = load i32, i32* @x.13
  %154 = load i32, i32* @y.14
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %152, %originalBB22alteredBB
  %161 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i64 0, i64 0)) #10, !dbg !1091
  %162 = call i8* @gidtostr_ptr(i32* @egid), !dbg !1093
  %163 = call i32 (i8*, ...) @printf(i8* %161, i8* %162), !dbg !1094
  %164 = load i32, i32* @egid, align 4, !dbg !1095
  %165 = call %struct.group* @getgrgid(i32 %164), !dbg !1096
  store %struct.group* %165, %struct.group** %4, align 8, !dbg !1097
  %166 = load %struct.group*, %struct.group** %4, align 8, !dbg !1098
  %167 = icmp ne %struct.group* %166, null, !dbg !1098
  %168 = load i32, i32* @x.13
  %169 = load i32, i32* @y.14
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %167, label %176, label %197, !dbg !1100

176:                                              ; preds = %originalBBpart224
  %177 = load i32, i32* @x.13
  %178 = load i32, i32* @y.14
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %176, %originalBB26alteredBB
  %185 = load %struct.group*, %struct.group** %4, align 8, !dbg !1101
  %186 = getelementptr inbounds %struct.group, %struct.group* %185, i32 0, i32 0, !dbg !1102
  %187 = load i8*, i8** %186, align 8, !dbg !1102
  %188 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %187), !dbg !1103
  %189 = load i32, i32* @x.13
  %190 = load i32, i32* @y.14
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %197, !dbg !1103

197:                                              ; preds = %originalBBpart228, %originalBBpart224
  br label %198, !dbg !1104

198:                                              ; preds = %197, %originalBBpart220
  call void @llvm.dbg.declare(metadata i32** %5, metadata !1105, metadata !DIExpression()), !dbg !1107
  call void @llvm.dbg.declare(metadata i32* %6, metadata !1108, metadata !DIExpression()), !dbg !1109
  %199 = load i32, i32* @x.13
  %200 = load i32, i32* @y.14
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %198, %originalBB30alteredBB
  %207 = load i8*, i8** %2, align 8, !dbg !1110
  %208 = icmp ne i8* %207, null, !dbg !1110
  %209 = load i32, i32* @x.13
  %210 = load i32, i32* @y.14
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %208, label %217, label %259, !dbg !1112

217:                                              ; preds = %originalBBpart232
  %218 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1113
  %219 = icmp ne %struct.passwd* %218, null, !dbg !1113
  br i1 %219, label %220, label %240, !dbg !1113

220:                                              ; preds = %217
  %221 = load i32, i32* @x.13
  %222 = load i32, i32* @y.14
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %220, %originalBB34alteredBB
  %229 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1114
  %230 = getelementptr inbounds %struct.passwd, %struct.passwd* %229, i32 0, i32 3, !dbg !1115
  %231 = load i32, i32* %230, align 4, !dbg !1115
  %232 = load i32, i32* @x.13
  %233 = load i32, i32* @y.14
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %241, !dbg !1113

240:                                              ; preds = %217
  br label %241, !dbg !1113

241:                                              ; preds = %240, %originalBBpart236
  %242 = phi i32 [ %231, %originalBBpart236 ], [ -1, %240 ], !dbg !1113
  %243 = load i32, i32* @x.13
  %244 = load i32, i32* @y.14
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %241, %originalBB38alteredBB
  store i32 %242, i32* %6, align 4, !dbg !1116
  %251 = load i32, i32* @x.13
  %252 = load i32, i32* @y.14
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %277, !dbg !1117

259:                                              ; preds = %originalBBpart232
  %260 = load i32, i32* @x.13
  %261 = load i32, i32* @y.14
  %262 = sub i32 %260, 1
  %263 = mul i32 %260, %262
  %264 = urem i32 %263, 2
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %265, %266
  br i1 %267, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %259, %originalBB42alteredBB
  %268 = load i32, i32* @egid, align 4, !dbg !1118
  store i32 %268, i32* %6, align 4, !dbg !1119
  %269 = load i32, i32* @x.13
  %270 = load i32, i32* @y.14
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %277

277:                                              ; preds = %originalBBpart244, %originalBBpart240
  call void @llvm.dbg.declare(metadata i32* %7, metadata !1120, metadata !DIExpression()), !dbg !1121
  %278 = load i32, i32* @x.13
  %279 = load i32, i32* @y.14
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %277, %originalBB46alteredBB
  %286 = load i8*, i8** %2, align 8, !dbg !1122
  %287 = load i32, i32* %6, align 4, !dbg !1123
  %288 = call i32 @xgetgroups(i8* %286, i32 %287, i32** %5), !dbg !1124
  store i32 %288, i32* %7, align 4, !dbg !1121
  %289 = load i32, i32* %7, align 4, !dbg !1125
  %290 = icmp slt i32 %289, 0, !dbg !1127
  %291 = load i32, i32* @x.13
  %292 = load i32, i32* @y.14
  %293 = sub i32 %291, 1
  %294 = mul i32 %291, %293
  %295 = urem i32 %294, 2
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %296, %297
  br i1 %298, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %290, label %299, label %367, !dbg !1128

299:                                              ; preds = %originalBBpart248
  %300 = load i32, i32* @x.13
  %301 = load i32, i32* @y.14
  %302 = sub i32 %300, 1
  %303 = mul i32 %300, %302
  %304 = urem i32 %303, 2
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %305, %306
  br i1 %307, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %299, %originalBB50alteredBB
  %308 = load i8*, i8** %2, align 8, !dbg !1129
  %309 = icmp ne i8* %308, null, !dbg !1129
  %310 = load i32, i32* @x.13
  %311 = load i32, i32* @y.14
  %312 = sub i32 %310, 1
  %313 = mul i32 %310, %312
  %314 = urem i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %315, %316
  br i1 %317, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %309, label %318, label %340, !dbg !1132

318:                                              ; preds = %originalBBpart252
  %319 = load i32, i32* @x.13
  %320 = load i32, i32* @y.14
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %318, %originalBB54alteredBB
  %327 = call i32* @__errno_location() #15, !dbg !1133
  %328 = load i32, i32* %327, align 4, !dbg !1133
  %329 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.57, i64 0, i64 0)) #10, !dbg !1134
  %330 = load i8*, i8** %2, align 8, !dbg !1135
  %331 = call i8* @quote(i8* %330), !dbg !1136
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %328, i8* %329, i8* %331), !dbg !1137
  %332 = load i32, i32* @x.13
  %333 = load i32, i32* @y.14
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %344, !dbg !1137

340:                                              ; preds = %originalBBpart252
  %341 = call i32* @__errno_location() #15, !dbg !1138
  %342 = load i32, i32* %341, align 4, !dbg !1138
  %343 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58, i64 0, i64 0)) #10, !dbg !1139
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %342, i8* %343), !dbg !1140
  br label %344

344:                                              ; preds = %340, %originalBBpart256
  %345 = load i32, i32* @x.13
  %346 = load i32, i32* @y.14
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %344, %originalBB58alteredBB
  %353 = load i8, i8* @ok, align 1, !dbg !1141
  %354 = trunc i8 %353 to i1, !dbg !1141
  %355 = zext i1 %354 to i32, !dbg !1141
  %356 = and i32 %355, 0, !dbg !1141
  %357 = icmp ne i32 %356, 0, !dbg !1141
  %358 = zext i1 %357 to i8, !dbg !1141
  store i8 %358, i8* @ok, align 1, !dbg !1141
  %359 = load i32, i32* @x.13
  %360 = load i32, i32* @y.14
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBBpart270, label %originalBB58alteredBB

originalBBpart270:                                ; preds = %originalBB58
  br label %578, !dbg !1142

367:                                              ; preds = %originalBBpart248
  %368 = load i32, i32* @x.13
  %369 = load i32, i32* @y.14
  %370 = sub i32 %368, 1
  %371 = mul i32 %368, %370
  %372 = urem i32 %371, 2
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %373, %374
  br i1 %375, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %367, %originalBB72alteredBB
  %376 = load i32, i32* %7, align 4, !dbg !1143
  %377 = icmp sgt i32 %376, 0, !dbg !1145
  %378 = load i32, i32* @x.13
  %379 = load i32, i32* @y.14
  %380 = sub i32 %378, 1
  %381 = mul i32 %378, %380
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %383, %384
  br i1 %385, label %originalBBpart274, label %originalBB72alteredBB

originalBBpart274:                                ; preds = %originalBB72
  br i1 %377, label %386, label %390, !dbg !1146

386:                                              ; preds = %originalBBpart274
  %387 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.59, i64 0, i64 0)) #10, !dbg !1147
  %388 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1147
  %389 = call i32 @fputs_unlocked(i8* %387, %struct._IO_FILE* %388), !dbg !1147
  br label %390, !dbg !1147

390:                                              ; preds = %386, %originalBBpart274
  call void @llvm.dbg.declare(metadata i32* %8, metadata !1148, metadata !DIExpression()), !dbg !1150
  %391 = load i32, i32* @x.13
  %392 = load i32, i32* @y.14
  %393 = sub i32 %391, 1
  %394 = mul i32 %391, %393
  %395 = urem i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %396, %397
  br i1 %398, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %390, %originalBB76alteredBB
  store i32 0, i32* %8, align 4, !dbg !1150
  %399 = load i32, i32* @x.13
  %400 = load i32, i32* @y.14
  %401 = sub i32 %399, 1
  %402 = mul i32 %399, %401
  %403 = urem i32 %402, 2
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %404, %405
  br i1 %406, label %originalBBpart278, label %originalBB76alteredBB

originalBBpart278:                                ; preds = %originalBB76
  br label %407, !dbg !1151

407:                                              ; preds = %originalBBpart2111, %originalBBpart278
  %408 = load i32, i32* @x.13
  %409 = load i32, i32* @y.14
  %410 = sub i32 %408, 1
  %411 = mul i32 %408, %410
  %412 = urem i32 %411, 2
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %413, %414
  br i1 %415, label %originalBB80, label %originalBB80alteredBB

originalBB80:                                     ; preds = %407, %originalBB80alteredBB
  %416 = load i32, i32* %8, align 4, !dbg !1152
  %417 = load i32, i32* %7, align 4, !dbg !1154
  %418 = icmp slt i32 %416, %417, !dbg !1155
  %419 = load i32, i32* @x.13
  %420 = load i32, i32* @y.14
  %421 = sub i32 %419, 1
  %422 = mul i32 %419, %421
  %423 = urem i32 %422, 2
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %424, %425
  br i1 %426, label %originalBBpart282, label %originalBB80alteredBB

originalBBpart282:                                ; preds = %originalBB80
  br i1 %418, label %427, label %553, !dbg !1156

427:                                              ; preds = %originalBBpart282
  %428 = load i32, i32* @x.13
  %429 = load i32, i32* @y.14
  %430 = sub i32 %428, 1
  %431 = mul i32 %428, %430
  %432 = urem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %433, %434
  br i1 %435, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %427, %originalBB84alteredBB
  %436 = load i32, i32* %8, align 4, !dbg !1157
  %437 = icmp sgt i32 %436, 0, !dbg !1160
  %438 = load i32, i32* @x.13
  %439 = load i32, i32* @y.14
  %440 = sub i32 %438, 1
  %441 = mul i32 %438, %440
  %442 = urem i32 %441, 2
  %443 = icmp eq i32 %442, 0
  %444 = icmp slt i32 %439, 10
  %445 = or i1 %443, %444
  br i1 %445, label %originalBBpart286, label %originalBB84alteredBB

originalBBpart286:                                ; preds = %originalBB84
  br i1 %437, label %446, label %464, !dbg !1161

446:                                              ; preds = %originalBBpart286
  %447 = load i32, i32* @x.13
  %448 = load i32, i32* @y.14
  %449 = sub i32 %447, 1
  %450 = mul i32 %447, %449
  %451 = urem i32 %450, 2
  %452 = icmp eq i32 %451, 0
  %453 = icmp slt i32 %448, 10
  %454 = or i1 %452, %453
  br i1 %454, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %446, %originalBB88alteredBB
  %455 = call i32 @putchar_unlocked(i32 44), !dbg !1162
  %456 = load i32, i32* @x.13
  %457 = load i32, i32* @y.14
  %458 = sub i32 %456, 1
  %459 = mul i32 %456, %458
  %460 = urem i32 %459, 2
  %461 = icmp eq i32 %460, 0
  %462 = icmp slt i32 %457, 10
  %463 = or i1 %461, %462
  br i1 %463, label %originalBBpart290, label %originalBB88alteredBB

originalBBpart290:                                ; preds = %originalBB88
  br label %464, !dbg !1162

464:                                              ; preds = %originalBBpart290, %originalBBpart286
  %465 = load i32, i32* @x.13
  %466 = load i32, i32* @y.14
  %467 = sub i32 %465, 1
  %468 = mul i32 %465, %467
  %469 = urem i32 %468, 2
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %470, %471
  br i1 %472, label %originalBB92, label %originalBB92alteredBB

originalBB92:                                     ; preds = %464, %originalBB92alteredBB
  %473 = load i32*, i32** %5, align 8, !dbg !1163
  %474 = load i32, i32* %8, align 4, !dbg !1163
  %475 = sext i32 %474 to i64, !dbg !1163
  %476 = getelementptr inbounds i32, i32* %473, i64 %475, !dbg !1163
  %477 = call i8* @gidtostr_ptr(i32* %476), !dbg !1163
  %478 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1163
  %479 = call i32 @fputs_unlocked(i8* %477, %struct._IO_FILE* %478), !dbg !1163
  %480 = load i32*, i32** %5, align 8, !dbg !1164
  %481 = load i32, i32* %8, align 4, !dbg !1165
  %482 = sext i32 %481 to i64, !dbg !1164
  %483 = getelementptr inbounds i32, i32* %480, i64 %482, !dbg !1164
  %484 = load i32, i32* %483, align 4, !dbg !1164
  %485 = call %struct.group* @getgrgid(i32 %484), !dbg !1166
  store %struct.group* %485, %struct.group** %4, align 8, !dbg !1167
  %486 = load %struct.group*, %struct.group** %4, align 8, !dbg !1168
  %487 = icmp ne %struct.group* %486, null, !dbg !1168
  %488 = load i32, i32* @x.13
  %489 = load i32, i32* @y.14
  %490 = sub i32 %488, 1
  %491 = mul i32 %488, %490
  %492 = urem i32 %491, 2
  %493 = icmp eq i32 %492, 0
  %494 = icmp slt i32 %489, 10
  %495 = or i1 %493, %494
  br i1 %495, label %originalBBpart294, label %originalBB92alteredBB

originalBBpart294:                                ; preds = %originalBB92
  br i1 %487, label %496, label %517, !dbg !1170

496:                                              ; preds = %originalBBpart294
  %497 = load i32, i32* @x.13
  %498 = load i32, i32* @y.14
  %499 = sub i32 %497, 1
  %500 = mul i32 %497, %499
  %501 = urem i32 %500, 2
  %502 = icmp eq i32 %501, 0
  %503 = icmp slt i32 %498, 10
  %504 = or i1 %502, %503
  br i1 %504, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %496, %originalBB96alteredBB
  %505 = load %struct.group*, %struct.group** %4, align 8, !dbg !1171
  %506 = getelementptr inbounds %struct.group, %struct.group* %505, i32 0, i32 0, !dbg !1172
  %507 = load i8*, i8** %506, align 8, !dbg !1172
  %508 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %507), !dbg !1173
  %509 = load i32, i32* @x.13
  %510 = load i32, i32* @y.14
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %517, !dbg !1173

517:                                              ; preds = %originalBBpart298, %originalBBpart294
  %518 = load i32, i32* @x.13
  %519 = load i32, i32* @y.14
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %517, %originalBB100alteredBB
  %526 = load i32, i32* @x.13
  %527 = load i32, i32* @y.14
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br label %534, !dbg !1174

534:                                              ; preds = %originalBBpart2102
  %535 = load i32, i32* @x.13
  %536 = load i32, i32* @y.14
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %534, %originalBB104alteredBB
  %543 = load i32, i32* %8, align 4, !dbg !1175
  %544 = add nsw i32 %543, 1, !dbg !1175
  store i32 %544, i32* %8, align 4, !dbg !1175
  %545 = load i32, i32* @x.13
  %546 = load i32, i32* @y.14
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBBpart2111, label %originalBB104alteredBB

originalBBpart2111:                               ; preds = %originalBB104
  br label %407, !dbg !1176, !llvm.loop !1177

553:                                              ; preds = %originalBBpart282
  %554 = load i32*, i32** %5, align 8, !dbg !1179
  %555 = bitcast i32* %554 to i8*, !dbg !1179
  call void @free(i8* %555) #10, !dbg !1180
  %556 = load i8*, i8** @context, align 8, !dbg !1181
  %557 = icmp ne i8* %556, null, !dbg !1181
  br i1 %557, label %558, label %578, !dbg !1183

558:                                              ; preds = %553
  %559 = load i32, i32* @x.13
  %560 = load i32, i32* @y.14
  %561 = sub i32 %559, 1
  %562 = mul i32 %559, %561
  %563 = urem i32 %562, 2
  %564 = icmp eq i32 %563, 0
  %565 = icmp slt i32 %560, 10
  %566 = or i1 %564, %565
  br i1 %566, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %558, %originalBB113alteredBB
  %567 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.60, i64 0, i64 0)) #10, !dbg !1184
  %568 = load i8*, i8** @context, align 8, !dbg !1185
  %569 = call i32 (i8*, ...) @printf(i8* %567, i8* %568), !dbg !1186
  %570 = load i32, i32* @x.13
  %571 = load i32, i32* @y.14
  %572 = sub i32 %570, 1
  %573 = mul i32 %570, %572
  %574 = urem i32 %573, 2
  %575 = icmp eq i32 %574, 0
  %576 = icmp slt i32 %571, 10
  %577 = or i1 %575, %576
  br i1 %577, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br label %578, !dbg !1186

578:                                              ; preds = %originalBBpart2115, %553, %originalBBpart270
  ret void, !dbg !1187

originalBBalteredBB:                              ; preds = %originalBB, %16
  %579 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1052
  %580 = getelementptr inbounds %struct.passwd, %struct.passwd* %579, i32 0, i32 0, !dbg !1053
  %581 = load i8*, i8** %580, align 8, !dbg !1053
  %582 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %581), !dbg !1054
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %583 = call i8* @gettext(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.54, i64 0, i64 0)) #10, !dbg !1055
  %584 = call i8* @gidtostr_ptr(i32* @rgid), !dbg !1056
  %585 = call i32 (i8*, ...) @printf(i8* %583, i8* %584), !dbg !1057
  %586 = load i32, i32* @rgid, align 4, !dbg !1058
  %587 = call %struct.group* @getgrgid(i32 %586), !dbg !1059
  store %struct.group* %587, %struct.group** %4, align 8, !dbg !1060
  %588 = load %struct.group*, %struct.group** %4, align 8, !dbg !1061
  %589 = icmp ne %struct.group* %588, null, !dbg !1061
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %61
  %590 = load %struct.group*, %struct.group** %4, align 8, !dbg !1064
  %591 = getelementptr inbounds %struct.group, %struct.group* %590, i32 0, i32 0, !dbg !1065
  %592 = load i8*, i8** %591, align 8, !dbg !1065
  %593 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %592), !dbg !1066
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %86
  %594 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.55, i64 0, i64 0)) #10, !dbg !1072
  %595 = call i8* @uidtostr_ptr(i32* @euid), !dbg !1074
  %596 = call i32 (i8*, ...) @printf(i8* %594, i8* %595), !dbg !1075
  %597 = load i32, i32* @euid, align 4, !dbg !1076
  %598 = call %struct.passwd* @getpwuid(i32 %597), !dbg !1077
  store %struct.passwd* %598, %struct.passwd** %3, align 8, !dbg !1078
  %599 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1079
  %600 = icmp ne %struct.passwd* %599, null, !dbg !1079
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %110
  %601 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1082
  %602 = getelementptr inbounds %struct.passwd, %struct.passwd* %601, i32 0, i32 0, !dbg !1083
  %603 = load i8*, i8** %602, align 8, !dbg !1083
  %604 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %603), !dbg !1084
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %132
  %605 = load i32, i32* @egid, align 4, !dbg !1086
  %606 = load i32, i32* @rgid, align 4, !dbg !1088
  %607 = icmp ne i32 %605, %606, !dbg !1089
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %152
  %608 = call i8* @gettext(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i64 0, i64 0)) #10, !dbg !1091
  %609 = call i8* @gidtostr_ptr(i32* @egid), !dbg !1093
  %610 = call i32 (i8*, ...) @printf(i8* %608, i8* %609), !dbg !1094
  %611 = load i32, i32* @egid, align 4, !dbg !1095
  %612 = call %struct.group* @getgrgid(i32 %611), !dbg !1096
  store %struct.group* %612, %struct.group** %4, align 8, !dbg !1097
  %613 = load %struct.group*, %struct.group** %4, align 8, !dbg !1098
  %614 = icmp ne %struct.group* %613, null, !dbg !1098
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %176
  %615 = load %struct.group*, %struct.group** %4, align 8, !dbg !1101
  %616 = getelementptr inbounds %struct.group, %struct.group* %615, i32 0, i32 0, !dbg !1102
  %617 = load i8*, i8** %616, align 8, !dbg !1102
  %618 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %617), !dbg !1103
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %198
  %619 = load i8*, i8** %2, align 8, !dbg !1110
  %620 = icmp ne i8* %619, null, !dbg !1110
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %220
  %621 = load %struct.passwd*, %struct.passwd** %3, align 8, !dbg !1114
  %622 = getelementptr inbounds %struct.passwd, %struct.passwd* %621, i32 0, i32 3, !dbg !1115
  %623 = load i32, i32* %622, align 4, !dbg !1115
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %241
  store i32 %242, i32* %6, align 4, !dbg !1116
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %259
  %624 = load i32, i32* @egid, align 4, !dbg !1118
  store i32 %624, i32* %6, align 4, !dbg !1119
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %277
  %625 = load i8*, i8** %2, align 8, !dbg !1122
  %626 = load i32, i32* %6, align 4, !dbg !1123
  %627 = call i32 @xgetgroups(i8* %625, i32 %626, i32** %5), !dbg !1124
  store i32 %627, i32* %7, align 4, !dbg !1121
  %628 = load i32, i32* %7, align 4, !dbg !1125
  %629 = icmp slt i32 %628, 0, !dbg !1127
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %299
  %630 = load i8*, i8** %2, align 8, !dbg !1129
  %631 = icmp ne i8* %630, null, !dbg !1129
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %318
  %632 = call i32* @__errno_location() #15, !dbg !1133
  %633 = load i32, i32* %632, align 4, !dbg !1133
  %634 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.57, i64 0, i64 0)) #10, !dbg !1134
  %635 = load i8*, i8** %2, align 8, !dbg !1135
  %636 = call i8* @quote(i8* %635), !dbg !1136
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %633, i8* %634, i8* %636), !dbg !1137
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %344
  %637 = load i8, i8* @ok, align 1, !dbg !1141
  %638 = trunc i8 %637 to i1, !dbg !1141
  %639 = zext i1 %638 to i32, !dbg !1141
  %_ = shl i32 %639, 0
  %_59 = shl i32 %639, 0
  %_60 = sub i32 0, %639
  %gen = add i32 %_60, 0
  %_61 = sub i32 0, %639
  %gen62 = add i32 %_61, 0
  %_63 = sub i32 0, %639
  %gen64 = add i32 %_63, 0
  %_65 = sub i32 0, %639
  %gen66 = add i32 %_65, 0
  %_67 = sub i32 0, %639
  %gen68 = add i32 %_67, 0
  %640 = and i32 %639, 0, !dbg !1141
  %641 = icmp ne i32 %640, 0, !dbg !1141
  %642 = zext i1 %641 to i8, !dbg !1141
  store i8 %642, i8* @ok, align 1, !dbg !1141
  br label %originalBB58

originalBB72alteredBB:                            ; preds = %originalBB72, %367
  %643 = load i32, i32* %7, align 4, !dbg !1143
  %644 = icmp sgt i32 %643, 0, !dbg !1145
  br label %originalBB72

originalBB76alteredBB:                            ; preds = %originalBB76, %390
  store i32 0, i32* %8, align 4, !dbg !1150
  br label %originalBB76

originalBB80alteredBB:                            ; preds = %originalBB80, %407
  %645 = load i32, i32* %8, align 4, !dbg !1152
  %646 = load i32, i32* %7, align 4, !dbg !1154
  %647 = icmp slt i32 %645, %646, !dbg !1155
  br label %originalBB80

originalBB84alteredBB:                            ; preds = %originalBB84, %427
  %648 = load i32, i32* %8, align 4, !dbg !1157
  %649 = icmp sgt i32 %648, 0, !dbg !1160
  br label %originalBB84

originalBB88alteredBB:                            ; preds = %originalBB88, %446
  %650 = call i32 @putchar_unlocked(i32 44), !dbg !1162
  br label %originalBB88

originalBB92alteredBB:                            ; preds = %originalBB92, %464
  %651 = load i32*, i32** %5, align 8, !dbg !1163
  %652 = load i32, i32* %8, align 4, !dbg !1163
  %653 = sext i32 %652 to i64, !dbg !1163
  %654 = getelementptr inbounds i32, i32* %651, i64 %653, !dbg !1163
  %655 = call i8* @gidtostr_ptr(i32* %654), !dbg !1163
  %656 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1163
  %657 = call i32 @fputs_unlocked(i8* %655, %struct._IO_FILE* %656), !dbg !1163
  %658 = load i32*, i32** %5, align 8, !dbg !1164
  %659 = load i32, i32* %8, align 4, !dbg !1165
  %660 = sext i32 %659 to i64, !dbg !1164
  %661 = getelementptr inbounds i32, i32* %658, i64 %660, !dbg !1164
  %662 = load i32, i32* %661, align 4, !dbg !1164
  %663 = call %struct.group* @getgrgid(i32 %662), !dbg !1166
  store %struct.group* %663, %struct.group** %4, align 8, !dbg !1167
  %664 = load %struct.group*, %struct.group** %4, align 8, !dbg !1168
  %665 = icmp ne %struct.group* %664, null, !dbg !1168
  br label %originalBB92

originalBB96alteredBB:                            ; preds = %originalBB96, %496
  %666 = load %struct.group*, %struct.group** %4, align 8, !dbg !1171
  %667 = getelementptr inbounds %struct.group, %struct.group* %666, i32 0, i32 0, !dbg !1172
  %668 = load i8*, i8** %667, align 8, !dbg !1172
  %669 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.53, i64 0, i64 0), i8* %668), !dbg !1173
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %517
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %534
  %670 = load i32, i32* %8, align 4, !dbg !1175
  %_105 = shl i32 %670, 1
  %_106 = sub i32 0, %670
  %gen107 = add i32 %_106, 1
  %_108 = sub i32 %670, 1
  %gen109 = mul i32 %_108, 1
  %671 = add nsw i32 %670, 1, !dbg !1175
  store i32 %671, i32* %8, align 4, !dbg !1175
  br label %originalBB104

originalBB113alteredBB:                           ; preds = %originalBB113, %558
  %672 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.60, i64 0, i64 0)) #10, !dbg !1184
  %673 = load i8*, i8** @context, align 8, !dbg !1185
  %674 = call i32 (i8*, ...) @printf(i8* %672, i8* %673), !dbg !1186
  br label %originalBB113
}

declare dso_local i32 @putchar_unlocked(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @uidtostr_ptr(i32*) #4 !dbg !48 {
  %2 = load i32, i32* @x.15
  %3 = load i32, i32* @y.16
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32*, align 8
  store i32* %0, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !1188, metadata !DIExpression()), !dbg !1189
  %11 = load i32*, i32** %10, align 8, !dbg !1190
  %12 = load i32, i32* %11, align 4, !dbg !1191
  %13 = zext i32 %12 to i64, !dbg !1191
  %14 = call i8* @umaxtostr(i64 %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @uidtostr_ptr.buf, i64 0, i64 0)), !dbg !1192
  %15 = load i32, i32* @x.15
  %16 = load i32, i32* @y.16
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !1193

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32*, align 8
  store i32* %0, i32** %23, align 8
  call void @llvm.dbg.declare(metadata i32** %23, metadata !1194, metadata !DIExpression()), !dbg !1189
  %24 = load i32*, i32** %23, align 8, !dbg !1190
  %25 = load i32, i32* %24, align 4, !dbg !1191
  %26 = zext i32 %25 to i64, !dbg !1191
  %27 = call i8* @umaxtostr(i64 %26, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @uidtostr_ptr.buf, i64 0, i64 0)), !dbg !1192
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gidtostr_ptr(i32*) #4 !dbg !58 {
  %2 = load i32, i32* @x.17
  %3 = load i32, i32* @y.18
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32*, align 8
  store i32* %0, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !1241, metadata !DIExpression()), !dbg !1242
  %11 = load i32*, i32** %10, align 8, !dbg !1243
  %12 = load i32, i32* %11, align 4, !dbg !1244
  %13 = zext i32 %12 to i64, !dbg !1244
  %14 = call i8* @umaxtostr(i64 %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf, i64 0, i64 0)), !dbg !1245
  %15 = load i32, i32* @x.17
  %16 = load i32, i32* @y.18
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !1246

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32*, align 8
  store i32* %0, i32** %23, align 8
  call void @llvm.dbg.declare(metadata i32** %23, metadata !1247, metadata !DIExpression()), !dbg !1242
  %24 = load i32*, i32** %23, align 8, !dbg !1243
  %25 = load i32, i32* %24, align 4, !dbg !1244
  %26 = zext i32 %25 to i64, !dbg !1244
  %27 = call i8* @umaxtostr(i64 %26, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf, i64 0, i64 0)), !dbg !1245
  br label %originalBB
}

declare dso_local %struct.group* @getgrgid(i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_group_list(i8*, i32, i32, i32, i1 zeroext, i8 signext) #4 !dbg !1294 {
  %7 = load i32, i32* @x.19
  %8 = load i32, i32* @y.20
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca i1, align 1
  %16 = alloca i8*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i8, align 1
  %23 = alloca %struct.passwd*, align 8
  %24 = alloca i32*, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store i8* %0, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !1297, metadata !DIExpression()), !dbg !1298
  store i32 %1, i32* %17, align 4
  call void @llvm.dbg.declare(metadata i32* %17, metadata !1299, metadata !DIExpression()), !dbg !1300
  store i32 %2, i32* %18, align 4
  call void @llvm.dbg.declare(metadata i32* %18, metadata !1301, metadata !DIExpression()), !dbg !1302
  store i32 %3, i32* %19, align 4
  call void @llvm.dbg.declare(metadata i32* %19, metadata !1303, metadata !DIExpression()), !dbg !1304
  %27 = zext i1 %4 to i8
  store i8 %27, i8* %20, align 1
  call void @llvm.dbg.declare(metadata i8* %20, metadata !1305, metadata !DIExpression()), !dbg !1306
  store i8 %5, i8* %21, align 1
  call void @llvm.dbg.declare(metadata i8* %21, metadata !1307, metadata !DIExpression()), !dbg !1308
  call void @llvm.dbg.declare(metadata i8* %22, metadata !1309, metadata !DIExpression()), !dbg !1310
  store i8 1, i8* %22, align 1, !dbg !1310
  call void @llvm.dbg.declare(metadata %struct.passwd** %23, metadata !1311, metadata !DIExpression()), !dbg !1322
  store %struct.passwd* null, %struct.passwd** %23, align 8, !dbg !1322
  %28 = load i8*, i8** %16, align 8, !dbg !1323
  %29 = icmp ne i8* %28, null, !dbg !1323
  %30 = load i32, i32* @x.19
  %31 = load i32, i32* @y.20
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %61, !dbg !1325

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x.19
  %40 = load i32, i32* @y.20
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %38, %originalBB1alteredBB
  %47 = load i32, i32* %17, align 4, !dbg !1326
  %48 = call %struct.passwd* @getpwuid(i32 %47), !dbg !1328
  store %struct.passwd* %48, %struct.passwd** %23, align 8, !dbg !1329
  %49 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1330
  %50 = icmp eq %struct.passwd* %49, null, !dbg !1332
  %51 = load i32, i32* @x.19
  %52 = load i32, i32* @y.20
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %59, label %60, !dbg !1333

59:                                               ; preds = %originalBBpart24
  store i8 0, i8* %22, align 1, !dbg !1334
  br label %60, !dbg !1335

60:                                               ; preds = %59, %originalBBpart24
  br label %61, !dbg !1336

61:                                               ; preds = %60, %originalBBpart2
  %62 = load i32, i32* %18, align 4, !dbg !1337
  %63 = load i8, i8* %20, align 1, !dbg !1339
  %64 = trunc i8 %63 to i1, !dbg !1339
  %65 = call zeroext i1 @print_group(i32 %62, i1 zeroext %64), !dbg !1340
  br i1 %65, label %67, label %66, !dbg !1341

66:                                               ; preds = %61
  store i8 0, i8* %22, align 1, !dbg !1342
  br label %67, !dbg !1343

67:                                               ; preds = %66, %61
  %68 = load i32, i32* %19, align 4, !dbg !1344
  %69 = load i32, i32* %18, align 4, !dbg !1346
  %70 = icmp ne i32 %68, %69, !dbg !1347
  br i1 %70, label %71, label %113, !dbg !1348

71:                                               ; preds = %67
  %72 = load i32, i32* @x.19
  %73 = load i32, i32* @y.20
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %71, %originalBB6alteredBB
  %80 = load i8, i8* %21, align 1, !dbg !1349
  %81 = sext i8 %80 to i32, !dbg !1349
  %82 = call i32 @putchar_unlocked(i32 %81), !dbg !1349
  %83 = load i32, i32* %19, align 4, !dbg !1351
  %84 = load i8, i8* %20, align 1, !dbg !1353
  %85 = trunc i8 %84 to i1, !dbg !1353
  %86 = call zeroext i1 @print_group(i32 %83, i1 zeroext %85), !dbg !1354
  %87 = load i32, i32* @x.19
  %88 = load i32, i32* @y.20
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %86, label %112, label %95, !dbg !1355

95:                                               ; preds = %originalBBpart28
  %96 = load i32, i32* @x.19
  %97 = load i32, i32* @y.20
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %95, %originalBB10alteredBB
  store i8 0, i8* %22, align 1, !dbg !1356
  %104 = load i32, i32* @x.19
  %105 = load i32, i32* @y.20
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %112, !dbg !1357

112:                                              ; preds = %originalBBpart212, %originalBBpart28
  br label %113, !dbg !1358

113:                                              ; preds = %112, %67
  call void @llvm.dbg.declare(metadata i32** %24, metadata !1359, metadata !DIExpression()), !dbg !1361
  call void @llvm.dbg.declare(metadata i32* %25, metadata !1362, metadata !DIExpression()), !dbg !1363
  %114 = load i32, i32* @x.19
  %115 = load i32, i32* @y.20
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %113, %originalBB14alteredBB
  %122 = load i8*, i8** %16, align 8, !dbg !1364
  %123 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1365
  %124 = icmp ne %struct.passwd* %123, null, !dbg !1365
  %125 = load i32, i32* @x.19
  %126 = load i32, i32* @y.20
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %124, label %133, label %153, !dbg !1365

133:                                              ; preds = %originalBBpart216
  %134 = load i32, i32* @x.19
  %135 = load i32, i32* @y.20
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %133, %originalBB18alteredBB
  %142 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1366
  %143 = getelementptr inbounds %struct.passwd, %struct.passwd* %142, i32 0, i32 3, !dbg !1367
  %144 = load i32, i32* %143, align 4, !dbg !1367
  %145 = load i32, i32* @x.19
  %146 = load i32, i32* @y.20
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %155, !dbg !1365

153:                                              ; preds = %originalBBpart216
  %154 = load i32, i32* %19, align 4, !dbg !1368
  br label %155, !dbg !1365

155:                                              ; preds = %153, %originalBBpart220
  %156 = phi i32 [ %144, %originalBBpart220 ], [ %154, %153 ], !dbg !1365
  %157 = load i32, i32* @x.19
  %158 = load i32, i32* @y.20
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %155, %originalBB22alteredBB
  %165 = call i32 @xgetgroups(i8* %122, i32 %156, i32** %24), !dbg !1369
  store i32 %165, i32* %25, align 4, !dbg !1363
  %166 = load i32, i32* %25, align 4, !dbg !1370
  %167 = icmp slt i32 %166, 0, !dbg !1372
  %168 = load i32, i32* @x.19
  %169 = load i32, i32* @y.20
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %167, label %176, label %222, !dbg !1373

176:                                              ; preds = %originalBBpart224
  %177 = load i8*, i8** %16, align 8, !dbg !1374
  %178 = icmp ne i8* %177, null, !dbg !1374
  br i1 %178, label %179, label %185, !dbg !1377

179:                                              ; preds = %176
  %180 = call i32* @__errno_location() #15, !dbg !1378
  %181 = load i32, i32* %180, align 4, !dbg !1378
  %182 = call i8* @gettext(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.61, i64 0, i64 0)) #10, !dbg !1380
  %183 = load i8*, i8** %16, align 8, !dbg !1381
  %184 = call i8* @quote(i8* %183), !dbg !1382
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %181, i8* %182, i8* %184), !dbg !1383
  br label %205, !dbg !1384

185:                                              ; preds = %176
  %186 = load i32, i32* @x.19
  %187 = load i32, i32* @y.20
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %185, %originalBB26alteredBB
  %194 = call i32* @__errno_location() #15, !dbg !1385
  %195 = load i32, i32* %194, align 4, !dbg !1385
  %196 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1.62, i64 0, i64 0)) #10, !dbg !1387
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %195, i8* %196), !dbg !1388
  %197 = load i32, i32* @x.19
  %198 = load i32, i32* @y.20
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %205

205:                                              ; preds = %originalBBpart228, %179
  %206 = load i32, i32* @x.19
  %207 = load i32, i32* @y.20
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %205, %originalBB30alteredBB
  store i1 false, i1* %15, align 1, !dbg !1389
  %214 = load i32, i32* @x.19
  %215 = load i32, i32* @y.20
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %346, !dbg !1389

222:                                              ; preds = %originalBBpart224
  call void @llvm.dbg.declare(metadata i32* %26, metadata !1390, metadata !DIExpression()), !dbg !1392
  %223 = load i32, i32* @x.19
  %224 = load i32, i32* @y.20
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %222, %originalBB34alteredBB
  store i32 0, i32* %26, align 4, !dbg !1392
  %231 = load i32, i32* @x.19
  %232 = load i32, i32* @y.20
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %239, !dbg !1393

239:                                              ; preds = %originalBBpart254, %originalBBpart236
  %240 = load i32, i32* %26, align 4, !dbg !1394
  %241 = load i32, i32* %25, align 4, !dbg !1396
  %242 = icmp slt i32 %240, %241, !dbg !1397
  br i1 %242, label %243, label %341, !dbg !1398

243:                                              ; preds = %239
  %244 = load i32*, i32** %24, align 8, !dbg !1399
  %245 = load i32, i32* %26, align 4, !dbg !1401
  %246 = sext i32 %245 to i64, !dbg !1399
  %247 = getelementptr inbounds i32, i32* %244, i64 %246, !dbg !1399
  %248 = load i32, i32* %247, align 4, !dbg !1399
  %249 = load i32, i32* %18, align 4, !dbg !1402
  %250 = icmp ne i32 %248, %249, !dbg !1403
  br i1 %250, label %251, label %321, !dbg !1404

251:                                              ; preds = %243
  %252 = load i32, i32* @x.19
  %253 = load i32, i32* @y.20
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %251, %originalBB38alteredBB
  %260 = load i32*, i32** %24, align 8, !dbg !1405
  %261 = load i32, i32* %26, align 4, !dbg !1406
  %262 = sext i32 %261 to i64, !dbg !1405
  %263 = getelementptr inbounds i32, i32* %260, i64 %262, !dbg !1405
  %264 = load i32, i32* %263, align 4, !dbg !1405
  %265 = load i32, i32* %19, align 4, !dbg !1407
  %266 = icmp ne i32 %264, %265, !dbg !1408
  %267 = load i32, i32* @x.19
  %268 = load i32, i32* @y.20
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %266, label %275, label %321, !dbg !1409

275:                                              ; preds = %originalBBpart240
  %276 = load i8, i8* %21, align 1, !dbg !1410
  %277 = sext i8 %276 to i32, !dbg !1410
  %278 = call i32 @putchar_unlocked(i32 %277), !dbg !1410
  %279 = load i32*, i32** %24, align 8, !dbg !1412
  %280 = load i32, i32* %26, align 4, !dbg !1414
  %281 = sext i32 %280 to i64, !dbg !1412
  %282 = getelementptr inbounds i32, i32* %279, i64 %281, !dbg !1412
  %283 = load i32, i32* %282, align 4, !dbg !1412
  %284 = load i8, i8* %20, align 1, !dbg !1415
  %285 = trunc i8 %284 to i1, !dbg !1415
  %286 = call zeroext i1 @print_group(i32 %283, i1 zeroext %285), !dbg !1416
  br i1 %286, label %304, label %287, !dbg !1417

287:                                              ; preds = %275
  %288 = load i32, i32* @x.19
  %289 = load i32, i32* @y.20
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %287, %originalBB42alteredBB
  store i8 0, i8* %22, align 1, !dbg !1418
  %296 = load i32, i32* @x.19
  %297 = load i32, i32* @y.20
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %304, !dbg !1419

304:                                              ; preds = %originalBBpart244, %275
  %305 = load i32, i32* @x.19
  %306 = load i32, i32* @y.20
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %304, %originalBB46alteredBB
  %313 = load i32, i32* @x.19
  %314 = load i32, i32* @y.20
  %315 = sub i32 %313, 1
  %316 = mul i32 %313, %315
  %317 = urem i32 %316, 2
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %318, %319
  br i1 %320, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %321, !dbg !1420

321:                                              ; preds = %originalBBpart248, %originalBBpart240, %243
  br label %322, !dbg !1407

322:                                              ; preds = %321
  %323 = load i32, i32* @x.19
  %324 = load i32, i32* @y.20
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %322, %originalBB50alteredBB
  %331 = load i32, i32* %26, align 4, !dbg !1421
  %332 = add nsw i32 %331, 1, !dbg !1421
  store i32 %332, i32* %26, align 4, !dbg !1421
  %333 = load i32, i32* @x.19
  %334 = load i32, i32* @y.20
  %335 = sub i32 %333, 1
  %336 = mul i32 %333, %335
  %337 = urem i32 %336, 2
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %338, %339
  br i1 %340, label %originalBBpart254, label %originalBB50alteredBB

originalBBpart254:                                ; preds = %originalBB50
  br label %239, !dbg !1422, !llvm.loop !1423

341:                                              ; preds = %239
  %342 = load i32*, i32** %24, align 8, !dbg !1425
  %343 = bitcast i32* %342 to i8*, !dbg !1425
  call void @free(i8* %343) #10, !dbg !1426
  %344 = load i8, i8* %22, align 1, !dbg !1427
  %345 = trunc i8 %344 to i1, !dbg !1427
  store i1 %345, i1* %15, align 1, !dbg !1428
  br label %346, !dbg !1428

346:                                              ; preds = %341, %originalBBpart232
  %347 = load i32, i32* @x.19
  %348 = load i32, i32* @y.20
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBB56, label %originalBB56alteredBB

originalBB56:                                     ; preds = %346, %originalBB56alteredBB
  %355 = load i1, i1* %15, align 1, !dbg !1429
  %356 = load i32, i32* @x.19
  %357 = load i32, i32* @y.20
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBBpart258, label %originalBB56alteredBB

originalBBpart258:                                ; preds = %originalBB56
  ret i1 %355, !dbg !1429

originalBBalteredBB:                              ; preds = %originalBB, %6
  %364 = alloca i1, align 1
  %365 = alloca i8*, align 8
  %366 = alloca i32, align 4
  %367 = alloca i32, align 4
  %368 = alloca i32, align 4
  %369 = alloca i8, align 1
  %370 = alloca i8, align 1
  %371 = alloca i8, align 1
  %372 = alloca %struct.passwd*, align 8
  %373 = alloca i32*, align 8
  %374 = alloca i32, align 4
  %375 = alloca i32, align 4
  store i8* %0, i8** %365, align 8
  call void @llvm.dbg.declare(metadata i8** %365, metadata !1430, metadata !DIExpression()), !dbg !1298
  store i32 %1, i32* %366, align 4
  call void @llvm.dbg.declare(metadata i32* %366, metadata !1437, metadata !DIExpression()), !dbg !1300
  store i32 %2, i32* %367, align 4
  call void @llvm.dbg.declare(metadata i32* %367, metadata !1438, metadata !DIExpression()), !dbg !1302
  store i32 %3, i32* %368, align 4
  call void @llvm.dbg.declare(metadata i32* %368, metadata !1439, metadata !DIExpression()), !dbg !1304
  %376 = zext i1 %4 to i8
  store i8 %376, i8* %369, align 1
  call void @llvm.dbg.declare(metadata i8* %369, metadata !1440, metadata !DIExpression()), !dbg !1306
  store i8 %5, i8* %370, align 1
  call void @llvm.dbg.declare(metadata i8* %370, metadata !1441, metadata !DIExpression()), !dbg !1308
  call void @llvm.dbg.declare(metadata i8* %371, metadata !1442, metadata !DIExpression()), !dbg !1310
  store i8 1, i8* %371, align 1, !dbg !1310
  call void @llvm.dbg.declare(metadata %struct.passwd** %372, metadata !1443, metadata !DIExpression()), !dbg !1322
  store %struct.passwd* null, %struct.passwd** %372, align 8, !dbg !1322
  %377 = load i8*, i8** %365, align 8, !dbg !1323
  %378 = icmp ne i8* %377, null, !dbg !1323
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  %379 = load i32, i32* %17, align 4, !dbg !1326
  %380 = call %struct.passwd* @getpwuid(i32 %379), !dbg !1328
  store %struct.passwd* %380, %struct.passwd** %23, align 8, !dbg !1329
  %381 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1330
  %382 = icmp eq %struct.passwd* %381, null, !dbg !1332
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %71
  %383 = load i8, i8* %21, align 1, !dbg !1349
  %384 = sext i8 %383 to i32, !dbg !1349
  %385 = call i32 @putchar_unlocked(i32 %384), !dbg !1349
  %386 = load i32, i32* %19, align 4, !dbg !1351
  %387 = load i8, i8* %20, align 1, !dbg !1353
  %388 = trunc i8 %387 to i1, !dbg !1353
  %389 = call zeroext i1 @print_group(i32 %386, i1 zeroext %388), !dbg !1354
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %95
  store i8 0, i8* %22, align 1, !dbg !1356
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %113
  %390 = load i8*, i8** %16, align 8, !dbg !1364
  %391 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1365
  %392 = icmp ne %struct.passwd* %391, null, !dbg !1365
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %133
  %393 = load %struct.passwd*, %struct.passwd** %23, align 8, !dbg !1366
  %394 = getelementptr inbounds %struct.passwd, %struct.passwd* %393, i32 0, i32 3, !dbg !1367
  %395 = load i32, i32* %394, align 4, !dbg !1367
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %155
  %396 = call i32 @xgetgroups(i8* %122, i32 %156, i32** %24), !dbg !1369
  store i32 %396, i32* %25, align 4, !dbg !1363
  %397 = load i32, i32* %25, align 4, !dbg !1370
  %398 = icmp slt i32 %397, 0, !dbg !1372
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %185
  %399 = call i32* @__errno_location() #15, !dbg !1385
  %400 = load i32, i32* %399, align 4, !dbg !1385
  %401 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.1.62, i64 0, i64 0)) #10, !dbg !1387
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %400, i8* %401), !dbg !1388
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %205
  store i1 false, i1* %15, align 1, !dbg !1389
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %222
  store i32 0, i32* %26, align 4, !dbg !1392
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %251
  %402 = load i32*, i32** %24, align 8, !dbg !1405
  %403 = load i32, i32* %26, align 4, !dbg !1406
  %404 = sext i32 %403 to i64, !dbg !1405
  %405 = getelementptr inbounds i32, i32* %402, i64 %404, !dbg !1405
  %406 = load i32, i32* %405, align 4, !dbg !1405
  %407 = load i32, i32* %19, align 4, !dbg !1407
  %408 = icmp ne i32 %406, %407, !dbg !1408
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %287
  store i8 0, i8* %22, align 1, !dbg !1418
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %304
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %322
  %409 = load i32, i32* %26, align 4, !dbg !1421
  %_ = sub i32 %409, 1
  %gen = mul i32 %_, 1
  %_51 = sub i32 %409, 1
  %gen52 = mul i32 %_51, 1
  %410 = add nsw i32 %409, 1, !dbg !1421
  store i32 %410, i32* %26, align 4, !dbg !1421
  br label %originalBB50

originalBB56alteredBB:                            ; preds = %originalBB56, %346
  %411 = load i1, i1* %15, align 1, !dbg !1429
  br label %originalBB56
}

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @print_group(i32, i1 zeroext) #4 !dbg !1454 {
  %3 = alloca i32, align 4
  %4 = alloca i8, align 1
  %5 = alloca %struct.group*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !1457, metadata !DIExpression()), !dbg !1458
  %8 = zext i1 %1 to i8
  store i8 %8, i8* %4, align 1
  call void @llvm.dbg.declare(metadata i8* %4, metadata !1459, metadata !DIExpression()), !dbg !1460
  call void @llvm.dbg.declare(metadata %struct.group** %5, metadata !1461, metadata !DIExpression()), !dbg !1469
  store %struct.group* null, %struct.group** %5, align 8, !dbg !1469
  call void @llvm.dbg.declare(metadata i8* %6, metadata !1470, metadata !DIExpression()), !dbg !1471
  store i8 1, i8* %6, align 1, !dbg !1471
  %9 = load i8, i8* %4, align 1, !dbg !1472
  %10 = trunc i8 %9 to i1, !dbg !1472
  br i1 %10, label %11, label %37, !dbg !1474

11:                                               ; preds = %2
  %12 = load i32, i32* %3, align 4, !dbg !1475
  %13 = call %struct.group* @getgrgid(i32 %12), !dbg !1477
  store %struct.group* %13, %struct.group** %5, align 8, !dbg !1478
  %14 = load %struct.group*, %struct.group** %5, align 8, !dbg !1479
  %15 = icmp eq %struct.group* %14, null, !dbg !1481
  br i1 %15, label %16, label %20, !dbg !1482

16:                                               ; preds = %11
  %17 = call i8* @gettext(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2.63, i64 0, i64 0)) #10, !dbg !1483
  %18 = load i32, i32* %3, align 4, !dbg !1485
  %19 = zext i32 %18 to i64, !dbg !1486
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %17, i64 %19), !dbg !1487
  store i8 0, i8* %6, align 1, !dbg !1488
  br label %20, !dbg !1489

20:                                               ; preds = %16, %11
  %21 = load i32, i32* @x.21
  %22 = load i32, i32* @y.22
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %20, %originalBBalteredBB
  %29 = load i32, i32* @x.21
  %30 = load i32, i32* @y.22
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %37, !dbg !1490

37:                                               ; preds = %originalBBpart2, %2
  call void @llvm.dbg.declare(metadata i8** %7, metadata !1491, metadata !DIExpression()), !dbg !1492
  %38 = load %struct.group*, %struct.group** %5, align 8, !dbg !1493
  %39 = icmp ne %struct.group* %38, null, !dbg !1493
  br i1 %39, label %40, label %44, !dbg !1493

40:                                               ; preds = %37
  %41 = load %struct.group*, %struct.group** %5, align 8, !dbg !1494
  %42 = getelementptr inbounds %struct.group, %struct.group* %41, i32 0, i32 0, !dbg !1495
  %43 = load i8*, i8** %42, align 8, !dbg !1495
  br label %46, !dbg !1493

44:                                               ; preds = %37
  %45 = call i8* @gidtostr_ptr.64(i32* %3), !dbg !1496
  br label %46, !dbg !1493

46:                                               ; preds = %44, %40
  %47 = phi i8* [ %43, %40 ], [ %45, %44 ], !dbg !1493
  %48 = load i32, i32* @x.21
  %49 = load i32, i32* @y.22
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %46, %originalBB1alteredBB
  store i8* %47, i8** %7, align 8, !dbg !1492
  %56 = load i8*, i8** %7, align 8, !dbg !1497
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1497
  %58 = call i32 @fputs_unlocked(i8* %56, %struct._IO_FILE* %57), !dbg !1497
  %59 = load i8, i8* %6, align 1, !dbg !1498
  %60 = trunc i8 %59 to i1, !dbg !1498
  %61 = load i32, i32* @x.21
  %62 = load i32, i32* @y.22
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i1 %60, !dbg !1499

originalBBalteredBB:                              ; preds = %originalBB, %20
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %46
  store i8* %47, i8** %7, align 8, !dbg !1492
  %69 = load i8*, i8** %7, align 8, !dbg !1497
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1497
  %71 = call i32 @fputs_unlocked(i8* %69, %struct._IO_FILE* %70), !dbg !1497
  %72 = load i8, i8* %6, align 1, !dbg !1498
  %73 = trunc i8 %72 to i1, !dbg !1498
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gidtostr_ptr.64(i32*) #4 !dbg !80 {
  %2 = load i32, i32* @x.23
  %3 = load i32, i32* @y.24
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32*, align 8
  store i32* %0, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !1500, metadata !DIExpression()), !dbg !1501
  %11 = load i32*, i32** %10, align 8, !dbg !1502
  %12 = load i32, i32* %11, align 4, !dbg !1503
  %13 = zext i32 %12 to i64, !dbg !1503
  %14 = call i8* @umaxtostr(i64 %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf.65, i64 0, i64 0)), !dbg !1504
  %15 = load i32, i32* @x.23
  %16 = load i32, i32* @y.24
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !1505

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32*, align 8
  store i32* %0, i32** %23, align 8
  call void @llvm.dbg.declare(metadata i32** %23, metadata !1506, metadata !DIExpression()), !dbg !1501
  %24 = load i32*, i32** %23, align 8, !dbg !1502
  %25 = load i32, i32* %24, align 4, !dbg !1503
  %26 = zext i32 %25 to i64, !dbg !1503
  %27 = call i8* @umaxtostr(i64 %26, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @gidtostr_ptr.buf.65, i64 0, i64 0)), !dbg !1504
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !1512 {
  %1 = load i32, i32* @x.25
  %2 = load i32, i32* @y.26
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1515
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !1517
  %12 = icmp ne i32 %11, 0, !dbg !1518
  %13 = load i32, i32* @x.25
  %14 = load i32, i32* @y.26
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %76, !dbg !1519

21:                                               ; preds = %originalBBpart2
  %22 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1520
  %23 = trunc i8 %22 to i1, !dbg !1520
  br i1 %23, label %24, label %44, !dbg !1521

24:                                               ; preds = %21
  %25 = load i32, i32* @x.25
  %26 = load i32, i32* @y.26
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = call i32* @__errno_location() #15, !dbg !1522
  %34 = load i32, i32* %33, align 4, !dbg !1522
  %35 = icmp eq i32 %34, 32, !dbg !1523
  %36 = load i32, i32* @x.25
  %37 = load i32, i32* @y.26
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %76, label %44, !dbg !1524

44:                                               ; preds = %originalBBpart24, %21
  call void @llvm.dbg.declare(metadata i8** %9, metadata !1525, metadata !DIExpression()), !dbg !1527
  %45 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.71, i64 0, i64 0)) #10, !dbg !1528
  store i8* %45, i8** %9, align 8, !dbg !1527
  %46 = load i8*, i8** @file_name, align 8, !dbg !1529
  %47 = icmp ne i8* %46, null, !dbg !1529
  br i1 %47, label %48, label %54, !dbg !1531

48:                                               ; preds = %44
  %49 = call i32* @__errno_location() #15, !dbg !1532
  %50 = load i32, i32* %49, align 4, !dbg !1532
  %51 = load i8*, i8** @file_name, align 8, !dbg !1533
  %52 = call i8* @quotearg_colon(i8* %51), !dbg !1534
  %53 = load i8*, i8** %9, align 8, !dbg !1535
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %50, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.72, i64 0, i64 0), i8* %52, i8* %53), !dbg !1536
  br label %58, !dbg !1536

54:                                               ; preds = %44
  %55 = call i32* @__errno_location() #15, !dbg !1537
  %56 = load i32, i32* %55, align 4, !dbg !1537
  %57 = load i8*, i8** %9, align 8, !dbg !1538
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %56, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.73, i64 0, i64 0), i8* %57), !dbg !1539
  br label %58

58:                                               ; preds = %54, %48
  %59 = load i32, i32* @x.25
  %60 = load i32, i32* @y.26
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  %67 = load volatile i32, i32* @exit_failure, align 4, !dbg !1540
  call void @_exit(i32 %67) #14, !dbg !1541
  %68 = load i32, i32* @x.25
  %69 = load i32, i32* @y.26
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !1541

76:                                               ; preds = %originalBBpart24, %originalBBpart2
  %77 = load i32, i32* @x.25
  %78 = load i32, i32* @y.26
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %76, %originalBB10alteredBB
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1542
  %86 = call i32 @close_stream(%struct._IO_FILE* %85), !dbg !1544
  %87 = icmp ne i32 %86, 0, !dbg !1545
  %88 = load i32, i32* @x.25
  %89 = load i32, i32* @y.26
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %87, label %96, label %114, !dbg !1546

96:                                               ; preds = %originalBBpart212
  %97 = load i32, i32* @x.25
  %98 = load i32, i32* @y.26
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %96, %originalBB14alteredBB
  %105 = load volatile i32, i32* @exit_failure, align 4, !dbg !1547
  call void @_exit(i32 %105) #14, !dbg !1548
  %106 = load i32, i32* @x.25
  %107 = load i32, i32* @y.26
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !1548

114:                                              ; preds = %originalBBpart212
  %115 = load i32, i32* @x.25
  %116 = load i32, i32* @y.26
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  %123 = load i32, i32* @x.25
  %124 = load i32, i32* @y.26
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret void, !dbg !1549

originalBBalteredBB:                              ; preds = %originalBB, %0
  %131 = alloca i8*, align 8
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1515
  %133 = call i32 @close_stream(%struct._IO_FILE* %132), !dbg !1517
  %134 = icmp ne i32 %133, 0, !dbg !1518
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %135 = call i32* @__errno_location() #15, !dbg !1522
  %136 = load i32, i32* %135, align 4, !dbg !1522
  %137 = icmp eq i32 %136, 32, !dbg !1523
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  %138 = load volatile i32, i32* @exit_failure, align 4, !dbg !1540
  call void @_exit(i32 %138) #14, !dbg !1541
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %76
  %139 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1542
  %140 = call i32 @close_stream(%struct._IO_FILE* %139), !dbg !1544
  %141 = icmp ne i32 %140, 0, !dbg !1545
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %96
  %142 = load volatile i32, i32* @exit_failure, align 4, !dbg !1547
  call void @_exit(i32 %142) #14, !dbg !1548
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  br label %originalBB18
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @umaxtostr(i64, i8*) #4 !dbg !1550 {
  %3 = load i32, i32* @x.27
  %4 = load i32, i32* @y.28
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !1554, metadata !DIExpression()), !dbg !1555
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1556, metadata !DIExpression()), !dbg !1557
  call void @llvm.dbg.declare(metadata i8** %13, metadata !1558, metadata !DIExpression()), !dbg !1559
  %14 = load i8*, i8** %12, align 8, !dbg !1560
  %15 = getelementptr inbounds i8, i8* %14, i64 20, !dbg !1561
  store i8* %15, i8** %13, align 8, !dbg !1559
  %16 = load i8*, i8** %13, align 8, !dbg !1562
  store i8 0, i8* %16, align 1, !dbg !1563
  %17 = load i64, i64* %11, align 8, !dbg !1564
  %18 = icmp ult i64 %17, 0, !dbg !1566
  %19 = load i32, i32* @x.27
  %20 = load i32, i32* @y.28
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %90, !dbg !1567

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.27
  %29 = load i32, i32* @y.28
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* @x.27
  %37 = load i32, i32* @y.28
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %44, !dbg !1568

44:                                               ; preds = %originalBBpart211, %originalBBpart24
  %45 = load i64, i64* %11, align 8, !dbg !1570
  %46 = urem i64 %45, 10, !dbg !1571
  %47 = sub i64 48, %46, !dbg !1572
  %48 = trunc i64 %47 to i8, !dbg !1573
  %49 = load i8*, i8** %13, align 8, !dbg !1574
  %50 = getelementptr inbounds i8, i8* %49, i32 -1, !dbg !1574
  store i8* %50, i8** %13, align 8, !dbg !1574
  store i8 %48, i8* %50, align 1, !dbg !1575
  br label %51, !dbg !1576

51:                                               ; preds = %44
  %52 = load i32, i32* @x.27
  %53 = load i32, i32* @y.28
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %51, %originalBB6alteredBB
  %60 = load i64, i64* %11, align 8, !dbg !1577
  %61 = udiv i64 %60, 10, !dbg !1577
  store i64 %61, i64* %11, align 8, !dbg !1577
  %62 = icmp ne i64 %61, 0, !dbg !1578
  %63 = load i32, i32* @x.27
  %64 = load i32, i32* @y.28
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart211, label %originalBB6alteredBB

originalBBpart211:                                ; preds = %originalBB6
  br i1 %62, label %44, label %71, !dbg !1576, !llvm.loop !1579

71:                                               ; preds = %originalBBpart211
  %72 = load i32, i32* @x.27
  %73 = load i32, i32* @y.28
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %71, %originalBB13alteredBB
  %80 = load i8*, i8** %13, align 8, !dbg !1581
  %81 = getelementptr inbounds i8, i8* %80, i32 -1, !dbg !1581
  store i8* %81, i8** %13, align 8, !dbg !1581
  store i8 45, i8* %81, align 1, !dbg !1582
  %82 = load i32, i32* @x.27
  %83 = load i32, i32* @y.28
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br label %135, !dbg !1583

90:                                               ; preds = %originalBBpart2
  br label %91, !dbg !1584

91:                                               ; preds = %originalBBpart240, %90
  %92 = load i32, i32* @x.27
  %93 = load i32, i32* @y.28
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %91, %originalBB17alteredBB
  %100 = load i64, i64* %11, align 8, !dbg !1586
  %101 = urem i64 %100, 10, !dbg !1587
  %102 = add i64 48, %101, !dbg !1588
  %103 = trunc i64 %102 to i8, !dbg !1589
  %104 = load i8*, i8** %13, align 8, !dbg !1590
  %105 = getelementptr inbounds i8, i8* %104, i32 -1, !dbg !1590
  store i8* %105, i8** %13, align 8, !dbg !1590
  store i8 %103, i8* %105, align 1, !dbg !1591
  %106 = load i32, i32* @x.27
  %107 = load i32, i32* @y.28
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart232, label %originalBB17alteredBB

originalBBpart232:                                ; preds = %originalBB17
  br label %114, !dbg !1592

114:                                              ; preds = %originalBBpart232
  %115 = load i32, i32* @x.27
  %116 = load i32, i32* @y.28
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %114, %originalBB34alteredBB
  %123 = load i64, i64* %11, align 8, !dbg !1593
  %124 = udiv i64 %123, 10, !dbg !1593
  store i64 %124, i64* %11, align 8, !dbg !1593
  %125 = icmp ne i64 %124, 0, !dbg !1594
  %126 = load i32, i32* @x.27
  %127 = load i32, i32* @y.28
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart240, label %originalBB34alteredBB

originalBBpart240:                                ; preds = %originalBB34
  br i1 %125, label %91, label %134, !dbg !1592, !llvm.loop !1595

134:                                              ; preds = %originalBBpart240
  br label %135

135:                                              ; preds = %134, %originalBBpart215
  %136 = load i32, i32* @x.27
  %137 = load i32, i32* @y.28
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %135, %originalBB42alteredBB
  %144 = load i8*, i8** %13, align 8, !dbg !1597
  %145 = load i32, i32* @x.27
  %146 = load i32, i32* @y.28
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  ret i8* %144, !dbg !1598

originalBBalteredBB:                              ; preds = %originalBB, %2
  %153 = alloca i64, align 8
  %154 = alloca i8*, align 8
  %155 = alloca i8*, align 8
  store i64 %0, i64* %153, align 8
  call void @llvm.dbg.declare(metadata i64* %153, metadata !1599, metadata !DIExpression()), !dbg !1555
  store i8* %1, i8** %154, align 8
  call void @llvm.dbg.declare(metadata i8** %154, metadata !1602, metadata !DIExpression()), !dbg !1557
  call void @llvm.dbg.declare(metadata i8** %155, metadata !1603, metadata !DIExpression()), !dbg !1559
  %156 = load i8*, i8** %154, align 8, !dbg !1560
  %157 = getelementptr inbounds i8, i8* %156, i64 20, !dbg !1561
  store i8* %157, i8** %155, align 8, !dbg !1559
  %158 = load i8*, i8** %155, align 8, !dbg !1562
  store i8 0, i8* %158, align 1, !dbg !1563
  %159 = load i64, i64* %153, align 8, !dbg !1564
  %160 = icmp ult i64 %159, 0, !dbg !1566
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %51
  %161 = load i64, i64* %11, align 8, !dbg !1577
  %_ = shl i64 %161, 10
  %_7 = sub i64 %161, 10
  %gen = mul i64 %_7, 10
  %_8 = sub i64 0, %161
  %gen9 = add i64 %_8, 10
  %162 = udiv i64 %161, 10, !dbg !1577
  store i64 %162, i64* %11, align 8, !dbg !1577
  %163 = icmp ne i64 %162, 0, !dbg !1578
  br label %originalBB6

originalBB13alteredBB:                            ; preds = %originalBB13, %71
  %164 = load i8*, i8** %13, align 8, !dbg !1581
  %165 = getelementptr inbounds i8, i8* %164, i32 -1, !dbg !1581
  store i8* %165, i8** %13, align 8, !dbg !1581
  store i8 45, i8* %165, align 1, !dbg !1582
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %91
  %166 = load i64, i64* %11, align 8, !dbg !1586
  %_18 = sub i64 0, %166
  %gen19 = add i64 %_18, 10
  %_20 = shl i64 %166, 10
  %167 = urem i64 %166, 10, !dbg !1587
  %_21 = sub i64 0, 48
  %gen22 = add i64 %_21, %167
  %_23 = sub i64 48, %167
  %gen24 = mul i64 %_23, %167
  %_25 = sub i64 0, 48
  %gen26 = add i64 %_25, %167
  %_27 = shl i64 48, %167
  %_28 = shl i64 48, %167
  %_29 = sub i64 0, 48
  %gen30 = add i64 %_29, %167
  %168 = add i64 48, %167, !dbg !1588
  %169 = trunc i64 %168 to i8, !dbg !1589
  %170 = load i8*, i8** %13, align 8, !dbg !1590
  %171 = getelementptr inbounds i8, i8* %170, i32 -1, !dbg !1590
  store i8* %171, i8** %13, align 8, !dbg !1590
  store i8 %169, i8* %171, align 1, !dbg !1591
  br label %originalBB17

originalBB34alteredBB:                            ; preds = %originalBB34, %114
  %172 = load i64, i64* %11, align 8, !dbg !1593
  %_35 = sub i64 0, %172
  %gen36 = add i64 %_35, 10
  %_37 = sub i64 %172, 10
  %gen38 = mul i64 %_37, 10
  %173 = udiv i64 %172, 10, !dbg !1593
  store i64 %173, i64* %11, align 8, !dbg !1593
  %174 = icmp ne i64 %173, 0, !dbg !1594
  br label %originalBB34

originalBB42alteredBB:                            ; preds = %originalBB42, %135
  %175 = load i8*, i8** %13, align 8, !dbg !1597
  br label %originalBB42
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !1604 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !1605, metadata !DIExpression()), !dbg !1606
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1607, metadata !DIExpression()), !dbg !1608
  call void @llvm.dbg.declare(metadata i8** %4, metadata !1609, metadata !DIExpression()), !dbg !1610
  %5 = load i8*, i8** %2, align 8, !dbg !1611
  %6 = icmp eq i8* %5, null, !dbg !1613
  br i1 %6, label %7, label %26, !dbg !1614

7:                                                ; preds = %1
  %8 = load i32, i32* @x.29
  %9 = load i32, i32* @y.30
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %7, %originalBBalteredBB
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1615
  %17 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.80, i64 0, i64 0), %struct._IO_FILE* %16), !dbg !1617
  call void @abort() #12, !dbg !1618
  %18 = load i32, i32* @x.29
  %19 = load i32, i32* @y.30
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !1618

26:                                               ; preds = %1
  %27 = load i32, i32* @x.29
  %28 = load i32, i32* @y.30
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i8*, i8** %2, align 8, !dbg !1619
  %36 = call i8* @strrchr(i8* %35, i32 47) #13, !dbg !1620
  store i8* %36, i8** %3, align 8, !dbg !1621
  %37 = load i8*, i8** %3, align 8, !dbg !1622
  %38 = icmp ne i8* %37, null, !dbg !1623
  %39 = load i32, i32* @x.29
  %40 = load i32, i32* @y.30
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %66, !dbg !1622

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.29
  %49 = load i32, i32* @y.30
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %3, align 8, !dbg !1624
  %57 = getelementptr inbounds i8, i8* %56, i64 1, !dbg !1625
  %58 = load i32, i32* @x.29
  %59 = load i32, i32* @y.30
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68, !dbg !1622

66:                                               ; preds = %originalBBpart24
  %67 = load i8*, i8** %2, align 8, !dbg !1626
  br label %68, !dbg !1622

68:                                               ; preds = %66, %originalBBpart28
  %69 = phi i8* [ %57, %originalBBpart28 ], [ %67, %66 ], !dbg !1622
  %70 = load i32, i32* @x.29
  %71 = load i32, i32* @y.30
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  store i8* %69, i8** %4, align 8, !dbg !1627
  %78 = load i8*, i8** %4, align 8, !dbg !1628
  %79 = load i8*, i8** %2, align 8, !dbg !1630
  %80 = ptrtoint i8* %78 to i64, !dbg !1631
  %81 = ptrtoint i8* %79 to i64, !dbg !1631
  %82 = sub i64 %80, %81, !dbg !1631
  %83 = icmp sge i64 %82, 7, !dbg !1632
  %84 = load i32, i32* @x.29
  %85 = load i32, i32* @y.30
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart216, label %originalBB10alteredBB

originalBBpart216:                                ; preds = %originalBB10
  br i1 %83, label %92, label %155, !dbg !1633

92:                                               ; preds = %originalBBpart216
  %93 = load i32, i32* @x.29
  %94 = load i32, i32* @y.30
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %92, %originalBB18alteredBB
  %101 = load i8*, i8** %4, align 8, !dbg !1634
  %102 = getelementptr inbounds i8, i8* %101, i64 -7, !dbg !1635
  %103 = call i32 @strncmp(i8* %102, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.81, i64 0, i64 0), i64 7) #13, !dbg !1636
  %104 = icmp eq i32 %103, 0, !dbg !1637
  %105 = load i32, i32* @x.29
  %106 = load i32, i32* @y.30
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %104, label %113, label %155, !dbg !1638

113:                                              ; preds = %originalBBpart220
  %114 = load i32, i32* @x.29
  %115 = load i32, i32* @y.30
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %113, %originalBB22alteredBB
  %122 = load i8*, i8** %4, align 8, !dbg !1639
  store i8* %122, i8** %2, align 8, !dbg !1641
  %123 = load i8*, i8** %4, align 8, !dbg !1642
  %124 = call i32 @strncmp(i8* %123, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.82, i64 0, i64 0), i64 3) #13, !dbg !1644
  %125 = icmp eq i32 %124, 0, !dbg !1645
  %126 = load i32, i32* @x.29
  %127 = load i32, i32* @y.30
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %125, label %134, label %154, !dbg !1646

134:                                              ; preds = %originalBBpart224
  %135 = load i32, i32* @x.29
  %136 = load i32, i32* @y.30
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %134, %originalBB26alteredBB
  %143 = load i8*, i8** %4, align 8, !dbg !1647
  %144 = getelementptr inbounds i8, i8* %143, i64 3, !dbg !1649
  store i8* %144, i8** %2, align 8, !dbg !1650
  %145 = load i8*, i8** %2, align 8, !dbg !1651
  store i8* %145, i8** @program_invocation_short_name, align 8, !dbg !1652
  %146 = load i32, i32* @x.29
  %147 = load i32, i32* @y.30
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %154, !dbg !1653

154:                                              ; preds = %originalBBpart228, %originalBBpart224
  br label %155, !dbg !1654

155:                                              ; preds = %154, %originalBBpart220, %originalBBpart216
  %156 = load i32, i32* @x.29
  %157 = load i32, i32* @y.30
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %155, %originalBB30alteredBB
  %164 = load i8*, i8** %2, align 8, !dbg !1655
  store i8* %164, i8** @program_name, align 8, !dbg !1656
  %165 = load i8*, i8** %2, align 8, !dbg !1657
  store i8* %165, i8** @program_invocation_name, align 8, !dbg !1658
  %166 = load i32, i32* @x.29
  %167 = load i32, i32* @y.30
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret void, !dbg !1659

originalBBalteredBB:                              ; preds = %originalBB, %7
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1615
  %175 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.80, i64 0, i64 0), %struct._IO_FILE* %174), !dbg !1617
  call void @abort() #12, !dbg !1618
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %176 = load i8*, i8** %2, align 8, !dbg !1619
  %177 = call i8* @strrchr(i8* %176, i32 47) #13, !dbg !1620
  store i8* %177, i8** %3, align 8, !dbg !1621
  %178 = load i8*, i8** %3, align 8, !dbg !1622
  %179 = icmp ne i8* %178, null, !dbg !1623
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %180 = load i8*, i8** %3, align 8, !dbg !1624
  %181 = getelementptr inbounds i8, i8* %180, i64 1, !dbg !1625
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  store i8* %69, i8** %4, align 8, !dbg !1627
  %182 = load i8*, i8** %4, align 8, !dbg !1628
  %183 = load i8*, i8** %2, align 8, !dbg !1630
  %184 = ptrtoint i8* %182 to i64, !dbg !1631
  %185 = ptrtoint i8* %183 to i64, !dbg !1631
  %_ = shl i64 %184, %185
  %_11 = sub i64 0, %184
  %gen = add i64 %_11, %185
  %_12 = shl i64 %184, %185
  %_13 = sub i64 0, %184
  %gen14 = add i64 %_13, %185
  %186 = sub i64 %184, %185, !dbg !1631
  %187 = icmp sge i64 %186, 7, !dbg !1632
  br label %originalBB10

originalBB18alteredBB:                            ; preds = %originalBB18, %92
  %188 = load i8*, i8** %4, align 8, !dbg !1634
  %189 = getelementptr inbounds i8, i8* %188, i64 -7, !dbg !1635
  %190 = call i32 @strncmp(i8* %189, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.81, i64 0, i64 0), i64 7) #13, !dbg !1636
  %191 = icmp eq i32 %190, 0, !dbg !1637
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %113
  %192 = load i8*, i8** %4, align 8, !dbg !1639
  store i8* %192, i8** %2, align 8, !dbg !1641
  %193 = load i8*, i8** %4, align 8, !dbg !1642
  %194 = call i32 @strncmp(i8* %193, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.82, i64 0, i64 0), i64 3) #13, !dbg !1644
  %195 = icmp eq i32 %194, 0, !dbg !1645
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %134
  %196 = load i8*, i8** %4, align 8, !dbg !1647
  %197 = getelementptr inbounds i8, i8* %196, i64 3, !dbg !1649
  store i8* %197, i8** %2, align 8, !dbg !1650
  %198 = load i8*, i8** %2, align 8, !dbg !1651
  store i8* %198, i8** @program_invocation_short_name, align 8, !dbg !1652
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %155
  %199 = load i8*, i8** %2, align 8, !dbg !1655
  store i8* %199, i8** @program_name, align 8, !dbg !1656
  %200 = load i8*, i8** %2, align 8, !dbg !1657
  store i8* %200, i8** @program_invocation_name, align 8, !dbg !1658
  br label %originalBB30
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !1660 {
  %4 = alloca %struct.quoting_options*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %4, metadata !1664, metadata !DIExpression()), !dbg !1665
  store i8 %1, i8* %5, align 1
  call void @llvm.dbg.declare(metadata i8* %5, metadata !1666, metadata !DIExpression()), !dbg !1667
  store i32 %2, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !1668, metadata !DIExpression()), !dbg !1669
  call void @llvm.dbg.declare(metadata i8* %7, metadata !1670, metadata !DIExpression()), !dbg !1671
  %11 = load i8, i8* %5, align 1, !dbg !1672
  store i8 %11, i8* %7, align 1, !dbg !1671
  call void @llvm.dbg.declare(metadata i32** %8, metadata !1673, metadata !DIExpression()), !dbg !1675
  %12 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !1676
  %13 = icmp ne %struct.quoting_options* %12, null, !dbg !1676
  br i1 %13, label %14, label %32, !dbg !1676

14:                                               ; preds = %3
  %15 = load i32, i32* @x.31
  %16 = load i32, i32* @y.32
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %14, %originalBBalteredBB
  %23 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !1677
  %24 = load i32, i32* @x.31
  %25 = load i32, i32* @y.32
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %49, !dbg !1676

32:                                               ; preds = %3
  %33 = load i32, i32* @x.31
  %34 = load i32, i32* @y.32
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32, i32* @x.31
  %42 = load i32, i32* @y.32
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !1676

49:                                               ; preds = %originalBBpart24, %originalBBpart2
  %50 = phi %struct.quoting_options* [ %23, %originalBBpart2 ], [ @default_quoting_options, %originalBBpart24 ], !dbg !1676
  %51 = load i32, i32* @x.31
  %52 = load i32, i32* @y.32
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %59 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %50, i32 0, i32 2, !dbg !1678
  %60 = getelementptr inbounds [8 x i32], [8 x i32]* %59, i64 0, i64 0, !dbg !1679
  %61 = load i8, i8* %7, align 1, !dbg !1680
  %62 = zext i8 %61 to i64, !dbg !1680
  %63 = udiv i64 %62, 32, !dbg !1681
  %64 = getelementptr inbounds i32, i32* %60, i64 %63, !dbg !1682
  store i32* %64, i32** %8, align 8, !dbg !1675
  call void @llvm.dbg.declare(metadata i32* %9, metadata !1683, metadata !DIExpression()), !dbg !1684
  %65 = load i8, i8* %7, align 1, !dbg !1685
  %66 = zext i8 %65 to i64, !dbg !1685
  %67 = urem i64 %66, 32, !dbg !1686
  %68 = trunc i64 %67 to i32, !dbg !1685
  store i32 %68, i32* %9, align 4, !dbg !1684
  call void @llvm.dbg.declare(metadata i32* %10, metadata !1687, metadata !DIExpression()), !dbg !1688
  %69 = load i32*, i32** %8, align 8, !dbg !1689
  %70 = load i32, i32* %69, align 4, !dbg !1690
  %71 = load i32, i32* %9, align 4, !dbg !1691
  %72 = lshr i32 %70, %71, !dbg !1692
  %73 = and i32 %72, 1, !dbg !1693
  store i32 %73, i32* %10, align 4, !dbg !1688
  %74 = load i32, i32* %6, align 4, !dbg !1694
  %75 = and i32 %74, 1, !dbg !1695
  %76 = load i32, i32* %10, align 4, !dbg !1696
  %77 = xor i32 %75, %76, !dbg !1697
  %78 = load i32, i32* %9, align 4, !dbg !1698
  %79 = shl i32 %77, %78, !dbg !1699
  %80 = load i32*, i32** %8, align 8, !dbg !1700
  %81 = load i32, i32* %80, align 4, !dbg !1701
  %82 = xor i32 %81, %79, !dbg !1701
  store i32 %82, i32* %80, align 4, !dbg !1701
  %83 = load i32, i32* %10, align 4, !dbg !1702
  %84 = load i32, i32* @x.31
  %85 = load i32, i32* @y.32
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart262, label %originalBB6alteredBB

originalBBpart262:                                ; preds = %originalBB6
  ret i32 %83, !dbg !1703

originalBBalteredBB:                              ; preds = %originalBB, %14
  %92 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !1677
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %93 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %50, i32 0, i32 2, !dbg !1678
  %94 = getelementptr inbounds [8 x i32], [8 x i32]* %93, i64 0, i64 0, !dbg !1679
  %95 = load i8, i8* %7, align 1, !dbg !1680
  %96 = zext i8 %95 to i64, !dbg !1680
  %_ = shl i64 %96, 32
  %_7 = sub i64 0, %96
  %gen = add i64 %_7, 32
  %_8 = sub i64 0, %96
  %gen9 = add i64 %_8, 32
  %_10 = shl i64 %96, 32
  %_11 = sub i64 0, %96
  %gen12 = add i64 %_11, 32
  %97 = udiv i64 %96, 32, !dbg !1681
  %98 = getelementptr inbounds i32, i32* %94, i64 %97, !dbg !1682
  store i32* %98, i32** %8, align 8, !dbg !1675
  call void @llvm.dbg.declare(metadata !4, metadata !1704, metadata !DIExpression()), !dbg !1684
  %99 = load i8, i8* %7, align 1, !dbg !1685
  %100 = zext i8 %99 to i64, !dbg !1685
  %_13 = shl i64 %100, 32
  %_14 = sub i64 0, %100
  %gen15 = add i64 %_14, 32
  %_16 = shl i64 %100, 32
  %_17 = shl i64 %100, 32
  %101 = urem i64 %100, 32, !dbg !1686
  %102 = trunc i64 %101 to i32, !dbg !1685
  store i32 %102, i32* %9, align 4, !dbg !1684
  call void @llvm.dbg.declare(metadata !4, metadata !1739, metadata !DIExpression()), !dbg !1688
  %103 = load i32*, i32** %8, align 8, !dbg !1689
  %104 = load i32, i32* %103, align 4, !dbg !1690
  %105 = load i32, i32* %9, align 4, !dbg !1691
  %_18 = sub i32 %104, %105
  %gen19 = mul i32 %_18, %105
  %_20 = sub i32 %104, %105
  %gen21 = mul i32 %_20, %105
  %_22 = sub i32 %104, %105
  %gen23 = mul i32 %_22, %105
  %_24 = sub i32 0, %104
  %gen25 = add i32 %_24, %105
  %_26 = shl i32 %104, %105
  %_27 = sub i32 0, %104
  %gen28 = add i32 %_27, %105
  %106 = lshr i32 %104, %105, !dbg !1692
  %_29 = sub i32 %106, 1
  %gen30 = mul i32 %_29, 1
  %_31 = sub i32 %106, 1
  %gen32 = mul i32 %_31, 1
  %107 = and i32 %106, 1, !dbg !1693
  store i32 %107, i32* %10, align 4, !dbg !1688
  %108 = load i32, i32* %6, align 4, !dbg !1694
  %_33 = sub i32 0, %108
  %gen34 = add i32 %_33, 1
  %_35 = sub i32 0, %108
  %gen36 = add i32 %_35, 1
  %_37 = sub i32 %108, 1
  %gen38 = mul i32 %_37, 1
  %_39 = sub i32 %108, 1
  %gen40 = mul i32 %_39, 1
  %_41 = sub i32 0, %108
  %gen42 = add i32 %_41, 1
  %_43 = sub i32 0, %108
  %gen44 = add i32 %_43, 1
  %109 = and i32 %108, 1, !dbg !1695
  %110 = load i32, i32* %10, align 4, !dbg !1696
  %_45 = sub i32 0, %109
  %gen46 = add i32 %_45, %110
  %_47 = sub i32 %109, %110
  %gen48 = mul i32 %_47, %110
  %111 = xor i32 %109, %110, !dbg !1697
  %112 = load i32, i32* %9, align 4, !dbg !1698
  %_49 = shl i32 %111, %112
  %_50 = shl i32 %111, %112
  %_51 = sub i32 0, %111
  %gen52 = add i32 %_51, %112
  %_53 = shl i32 %111, %112
  %_54 = sub i32 0, %111
  %gen55 = add i32 %_54, %112
  %113 = shl i32 %111, %112, !dbg !1699
  %114 = load i32*, i32** %8, align 8, !dbg !1700
  %115 = load i32, i32* %114, align 4, !dbg !1701
  %_56 = shl i32 %115, %113
  %_57 = sub i32 %115, %113
  %gen58 = mul i32 %_57, %113
  %_59 = sub i32 0, %115
  %gen60 = add i32 %_59, %113
  %116 = xor i32 %115, %113, !dbg !1701
  store i32 %116, i32* %114, align 4, !dbg !1701
  %117 = load i32, i32* %10, align 4, !dbg !1702
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !1740 {
  %4 = load i32, i32* @x.33
  %5 = load i32, i32* @y.34
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1743, metadata !DIExpression()), !dbg !1744
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1745, metadata !DIExpression()), !dbg !1746
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !1747, metadata !DIExpression()), !dbg !1748
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !1749, metadata !DIExpression()), !dbg !1750
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !1751
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !1751
  %17 = load i8, i8* %14, align 1, !dbg !1752
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !1753
  %19 = load i8*, i8** %12, align 8, !dbg !1754
  %20 = load i64, i64* %13, align 8, !dbg !1755
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !1756
  %22 = load i32, i32* @x.33
  %23 = load i32, i32* @y.34
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !1757

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !1758, metadata !DIExpression()), !dbg !1744
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !1790, metadata !DIExpression()), !dbg !1746
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !1791, metadata !DIExpression()), !dbg !1748
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !1792, metadata !DIExpression()), !dbg !1750
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !1751
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !1751
  %35 = load i8, i8* %32, align 1, !dbg !1752
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !1753
  %37 = load i8*, i8** %30, align 8, !dbg !1754
  %38 = load i64, i64* %31, align 8, !dbg !1755
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !1756
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !1793 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.quoting_options*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.slotvec*, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1798, metadata !DIExpression()), !dbg !1799
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1800, metadata !DIExpression()), !dbg !1801
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1802, metadata !DIExpression()), !dbg !1803
  store %struct.quoting_options* %3, %struct.quoting_options** %8, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %8, metadata !1804, metadata !DIExpression()), !dbg !1805
  call void @llvm.dbg.declare(metadata i32* %9, metadata !1806, metadata !DIExpression()), !dbg !1807
  %17 = call i32* @__errno_location() #15, !dbg !1808
  %18 = load i32, i32* %17, align 4, !dbg !1808
  store i32 %18, i32* %9, align 4, !dbg !1807
  call void @llvm.dbg.declare(metadata %struct.slotvec** %10, metadata !1809, metadata !DIExpression()), !dbg !1810
  %19 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !1811
  store %struct.slotvec* %19, %struct.slotvec** %10, align 8, !dbg !1810
  %20 = load i32, i32* %5, align 4, !dbg !1812
  %21 = icmp slt i32 %20, 0, !dbg !1814
  br i1 %21, label %22, label %23, !dbg !1815

22:                                               ; preds = %4
  call void @abort() #12, !dbg !1816
  unreachable, !dbg !1816

23:                                               ; preds = %4
  %24 = load i32, i32* @nslots, align 4, !dbg !1817
  %25 = load i32, i32* %5, align 4, !dbg !1819
  %26 = icmp sle i32 %24, %25, !dbg !1820
  br i1 %26, label %27, label %117, !dbg !1821

27:                                               ; preds = %23
  call void @llvm.dbg.declare(metadata i8* %11, metadata !1822, metadata !DIExpression()), !dbg !1824
  %28 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1825
  %29 = icmp eq %struct.slotvec* %28, @slotvec0, !dbg !1826
  %30 = zext i1 %29 to i8, !dbg !1824
  store i8 %30, i8* %11, align 1, !dbg !1824
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1827, metadata !DIExpression()), !dbg !1828
  store i32 2147483646, i32* %12, align 4, !dbg !1828
  %31 = load i32, i32* %12, align 4, !dbg !1829
  %32 = load i32, i32* %5, align 4, !dbg !1831
  %33 = icmp slt i32 %31, %32, !dbg !1832
  br i1 %33, label %34, label %35, !dbg !1833

34:                                               ; preds = %27
  call void @xalloc_die() #14, !dbg !1834
  unreachable, !dbg !1834

35:                                               ; preds = %27
  %36 = load i32, i32* @x.35
  %37 = load i32, i32* @y.36
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %35, %originalBBalteredBB
  %44 = load i8, i8* %11, align 1, !dbg !1835
  %45 = trunc i8 %44 to i1, !dbg !1835
  %46 = load i32, i32* @x.35
  %47 = load i32, i32* @y.36
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %45, label %54, label %55, !dbg !1835

54:                                               ; preds = %originalBBpart2
  br label %73, !dbg !1835

55:                                               ; preds = %originalBBpart2
  %56 = load i32, i32* @x.35
  %57 = load i32, i32* @y.36
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %55, %originalBB1alteredBB
  %64 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1836
  %65 = load i32, i32* @x.35
  %66 = load i32, i32* @y.36
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %73, !dbg !1835

73:                                               ; preds = %originalBBpart24, %54
  %74 = phi %struct.slotvec* [ null, %54 ], [ %64, %originalBBpart24 ], !dbg !1835
  %75 = load i32, i32* @x.35
  %76 = load i32, i32* @y.36
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %73, %originalBB6alteredBB
  %83 = bitcast %struct.slotvec* %74 to i8*, !dbg !1835
  %84 = load i32, i32* %5, align 4, !dbg !1837
  %85 = add nsw i32 %84, 1, !dbg !1838
  %86 = sext i32 %85 to i64, !dbg !1839
  %87 = mul i64 %86, 16, !dbg !1840
  %88 = call i8* @xrealloc(i8* %83, i64 %87), !dbg !1841
  %89 = bitcast i8* %88 to %struct.slotvec*, !dbg !1841
  store %struct.slotvec* %89, %struct.slotvec** %10, align 8, !dbg !1842
  store %struct.slotvec* %89, %struct.slotvec** @slotvec, align 8, !dbg !1843
  %90 = load i8, i8* %11, align 1, !dbg !1844
  %91 = trunc i8 %90 to i1, !dbg !1844
  %92 = load i32, i32* @x.35
  %93 = load i32, i32* @y.36
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart214, label %originalBB6alteredBB

originalBBpart214:                                ; preds = %originalBB6
  br i1 %91, label %100, label %103, !dbg !1846

100:                                              ; preds = %originalBBpart214
  %101 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1847
  %102 = bitcast %struct.slotvec* %101 to i8*, !dbg !1848
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %102, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1848
  br label %103, !dbg !1849

103:                                              ; preds = %100, %originalBBpart214
  %104 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1850
  %105 = load i32, i32* @nslots, align 4, !dbg !1851
  %106 = sext i32 %105 to i64, !dbg !1852
  %107 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %104, i64 %106, !dbg !1852
  %108 = bitcast %struct.slotvec* %107 to i8*, !dbg !1853
  %109 = load i32, i32* %5, align 4, !dbg !1854
  %110 = add nsw i32 %109, 1, !dbg !1855
  %111 = load i32, i32* @nslots, align 4, !dbg !1856
  %112 = sub nsw i32 %110, %111, !dbg !1857
  %113 = sext i32 %112 to i64, !dbg !1858
  %114 = mul i64 %113, 16, !dbg !1859
  call void @llvm.memset.p0i8.i64(i8* align 8 %108, i8 0, i64 %114, i1 false), !dbg !1853
  %115 = load i32, i32* %5, align 4, !dbg !1860
  %116 = add nsw i32 %115, 1, !dbg !1861
  store i32 %116, i32* @nslots, align 4, !dbg !1862
  br label %117, !dbg !1863

117:                                              ; preds = %103, %23
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1864, metadata !DIExpression()), !dbg !1866
  %118 = load i32, i32* @x.35
  %119 = load i32, i32* @y.36
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %117, %originalBB16alteredBB
  %126 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1867
  %127 = load i32, i32* %5, align 4, !dbg !1868
  %128 = sext i32 %127 to i64, !dbg !1867
  %129 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %126, i64 %128, !dbg !1867
  %130 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %129, i32 0, i32 0, !dbg !1869
  %131 = load i64, i64* %130, align 8, !dbg !1869
  store i64 %131, i64* %13, align 8, !dbg !1866
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1870, metadata !DIExpression()), !dbg !1871
  %132 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1872
  %133 = load i32, i32* %5, align 4, !dbg !1873
  %134 = sext i32 %133 to i64, !dbg !1872
  %135 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %132, i64 %134, !dbg !1872
  %136 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %135, i32 0, i32 1, !dbg !1874
  %137 = load i8*, i8** %136, align 8, !dbg !1874
  store i8* %137, i8** %14, align 8, !dbg !1871
  call void @llvm.dbg.declare(metadata i32* %15, metadata !1875, metadata !DIExpression()), !dbg !1876
  %138 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1877
  %139 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %138, i32 0, i32 1, !dbg !1878
  %140 = load i32, i32* %139, align 4, !dbg !1878
  %141 = or i32 %140, 1, !dbg !1879
  store i32 %141, i32* %15, align 4, !dbg !1876
  call void @llvm.dbg.declare(metadata i64* %16, metadata !1880, metadata !DIExpression()), !dbg !1881
  %142 = load i8*, i8** %14, align 8, !dbg !1882
  %143 = load i64, i64* %13, align 8, !dbg !1883
  %144 = load i8*, i8** %6, align 8, !dbg !1884
  %145 = load i64, i64* %7, align 8, !dbg !1885
  %146 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1886
  %147 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %146, i32 0, i32 0, !dbg !1887
  %148 = load i32, i32* %147, align 8, !dbg !1887
  %149 = load i32, i32* %15, align 4, !dbg !1888
  %150 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1889
  %151 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %150, i32 0, i32 2, !dbg !1890
  %152 = getelementptr inbounds [8 x i32], [8 x i32]* %151, i64 0, i64 0, !dbg !1889
  %153 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1891
  %154 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %153, i32 0, i32 3, !dbg !1892
  %155 = load i8*, i8** %154, align 8, !dbg !1892
  %156 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1893
  %157 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %156, i32 0, i32 4, !dbg !1894
  %158 = load i8*, i8** %157, align 8, !dbg !1894
  %159 = call i64 @quotearg_buffer_restyled(i8* %142, i64 %143, i8* %144, i64 %145, i32 %148, i32 %149, i32* %152, i8* %155, i8* %158), !dbg !1895
  store i64 %159, i64* %16, align 8, !dbg !1881
  %160 = load i64, i64* %13, align 8, !dbg !1896
  %161 = load i64, i64* %16, align 8, !dbg !1898
  %162 = icmp ule i64 %160, %161, !dbg !1899
  %163 = load i32, i32* @x.35
  %164 = load i32, i32* @y.36
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart227, label %originalBB16alteredBB

originalBBpart227:                                ; preds = %originalBB16
  br i1 %162, label %171, label %241, !dbg !1900

171:                                              ; preds = %originalBBpart227
  %172 = load i32, i32* @x.35
  %173 = load i32, i32* @y.36
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %171, %originalBB29alteredBB
  %180 = load i64, i64* %16, align 8, !dbg !1901
  %181 = add i64 %180, 1, !dbg !1903
  store i64 %181, i64* %13, align 8, !dbg !1904
  %182 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1905
  %183 = load i32, i32* %5, align 4, !dbg !1906
  %184 = sext i32 %183 to i64, !dbg !1905
  %185 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %182, i64 %184, !dbg !1905
  %186 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %185, i32 0, i32 0, !dbg !1907
  store i64 %181, i64* %186, align 8, !dbg !1908
  %187 = load i8*, i8** %14, align 8, !dbg !1909
  %188 = icmp ne i8* %187, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1911
  %189 = load i32, i32* @x.35
  %190 = load i32, i32* @y.36
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart234, label %originalBB29alteredBB

originalBBpart234:                                ; preds = %originalBB29
  br i1 %188, label %197, label %199, !dbg !1912

197:                                              ; preds = %originalBBpart234
  %198 = load i8*, i8** %14, align 8, !dbg !1913
  call void @free(i8* %198) #10, !dbg !1914
  br label %199, !dbg !1914

199:                                              ; preds = %197, %originalBBpart234
  %200 = load i32, i32* @x.35
  %201 = load i32, i32* @y.36
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %199, %originalBB36alteredBB
  %208 = load i64, i64* %13, align 8, !dbg !1915
  %209 = call noalias i8* @xcharalloc(i64 %208), !dbg !1916
  store i8* %209, i8** %14, align 8, !dbg !1917
  %210 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1918
  %211 = load i32, i32* %5, align 4, !dbg !1919
  %212 = sext i32 %211 to i64, !dbg !1918
  %213 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %210, i64 %212, !dbg !1918
  %214 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %213, i32 0, i32 1, !dbg !1920
  store i8* %209, i8** %214, align 8, !dbg !1921
  %215 = load i8*, i8** %14, align 8, !dbg !1922
  %216 = load i64, i64* %13, align 8, !dbg !1923
  %217 = load i8*, i8** %6, align 8, !dbg !1924
  %218 = load i64, i64* %7, align 8, !dbg !1925
  %219 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1926
  %220 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %219, i32 0, i32 0, !dbg !1927
  %221 = load i32, i32* %220, align 8, !dbg !1927
  %222 = load i32, i32* %15, align 4, !dbg !1928
  %223 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1929
  %224 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %223, i32 0, i32 2, !dbg !1930
  %225 = getelementptr inbounds [8 x i32], [8 x i32]* %224, i64 0, i64 0, !dbg !1929
  %226 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1931
  %227 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %226, i32 0, i32 3, !dbg !1932
  %228 = load i8*, i8** %227, align 8, !dbg !1932
  %229 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1933
  %230 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %229, i32 0, i32 4, !dbg !1934
  %231 = load i8*, i8** %230, align 8, !dbg !1934
  %232 = call i64 @quotearg_buffer_restyled(i8* %215, i64 %216, i8* %217, i64 %218, i32 %221, i32 %222, i32* %225, i8* %228, i8* %231), !dbg !1935
  %233 = load i32, i32* @x.35
  %234 = load i32, i32* @y.36
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br label %241, !dbg !1936

241:                                              ; preds = %originalBBpart238, %originalBBpart227
  %242 = load i32, i32* %9, align 4, !dbg !1937
  %243 = call i32* @__errno_location() #15, !dbg !1938
  store i32 %242, i32* %243, align 4, !dbg !1939
  %244 = load i8*, i8** %14, align 8, !dbg !1940
  ret i8* %244, !dbg !1941

originalBBalteredBB:                              ; preds = %originalBB, %35
  %245 = load i8, i8* %11, align 1, !dbg !1835
  %246 = trunc i8 %245 to i1, !dbg !1835
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %55
  %247 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1836
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %73
  %248 = bitcast %struct.slotvec* %74 to i8*, !dbg !1835
  %249 = load i32, i32* %5, align 4, !dbg !1837
  %_ = sub i32 %249, 1
  %gen = mul i32 %_, 1
  %_7 = sub i32 %249, 1
  %gen8 = mul i32 %_7, 1
  %_9 = shl i32 %249, 1
  %250 = add nsw i32 %249, 1, !dbg !1838
  %251 = sext i32 %250 to i64, !dbg !1839
  %_10 = sub i64 %251, 16
  %gen11 = mul i64 %_10, 16
  %_12 = shl i64 %251, 16
  %252 = mul i64 %251, 16, !dbg !1840
  %253 = call i8* @xrealloc(i8* %248, i64 %252), !dbg !1841
  %254 = bitcast i8* %253 to %struct.slotvec*, !dbg !1841
  store %struct.slotvec* %254, %struct.slotvec** %10, align 8, !dbg !1842
  store %struct.slotvec* %254, %struct.slotvec** @slotvec, align 8, !dbg !1843
  %255 = load i8, i8* %11, align 1, !dbg !1844
  %256 = trunc i8 %255 to i1, !dbg !1844
  br label %originalBB6

originalBB16alteredBB:                            ; preds = %originalBB16, %117
  %257 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1867
  %258 = load i32, i32* %5, align 4, !dbg !1868
  %259 = sext i32 %258 to i64, !dbg !1867
  %260 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %257, i64 %259, !dbg !1867
  %261 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %260, i32 0, i32 0, !dbg !1869
  %262 = load i64, i64* %261, align 8, !dbg !1869
  store i64 %262, i64* %13, align 8, !dbg !1866
  call void @llvm.dbg.declare(metadata !4, metadata !1942, metadata !DIExpression()), !dbg !1871
  %263 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1872
  %264 = load i32, i32* %5, align 4, !dbg !1873
  %265 = sext i32 %264 to i64, !dbg !1872
  %266 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %263, i64 %265, !dbg !1872
  %267 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %266, i32 0, i32 1, !dbg !1874
  %268 = load i8*, i8** %267, align 8, !dbg !1874
  store i8* %268, i8** %14, align 8, !dbg !1871
  call void @llvm.dbg.declare(metadata !4, metadata !1979, metadata !DIExpression()), !dbg !1876
  %269 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1877
  %270 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %269, i32 0, i32 1, !dbg !1878
  %271 = load i32, i32* %270, align 4, !dbg !1878
  %_17 = sub i32 0, %271
  %gen18 = add i32 %_17, 1
  %_19 = sub i32 0, %271
  %gen20 = add i32 %_19, 1
  %_21 = sub i32 0, %271
  %gen22 = add i32 %_21, 1
  %_23 = sub i32 0, %271
  %gen24 = add i32 %_23, 1
  %272 = or i32 %271, 1, !dbg !1879
  store i32 %272, i32* %15, align 4, !dbg !1876
  call void @llvm.dbg.declare(metadata !4, metadata !1980, metadata !DIExpression()), !dbg !1881
  %273 = load i8*, i8** %14, align 8, !dbg !1882
  %274 = load i64, i64* %13, align 8, !dbg !1883
  %275 = load i8*, i8** %6, align 8, !dbg !1884
  %276 = load i64, i64* %7, align 8, !dbg !1885
  %277 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1886
  %278 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %277, i32 0, i32 0, !dbg !1887
  %279 = load i32, i32* %278, align 8, !dbg !1887
  %280 = load i32, i32* %15, align 4, !dbg !1888
  %281 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1889
  %282 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %281, i32 0, i32 2, !dbg !1890
  %283 = getelementptr inbounds [8 x i32], [8 x i32]* %282, i64 0, i64 0, !dbg !1889
  %284 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1891
  %285 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %284, i32 0, i32 3, !dbg !1892
  %286 = load i8*, i8** %285, align 8, !dbg !1892
  %287 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1893
  %288 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %287, i32 0, i32 4, !dbg !1894
  %289 = load i8*, i8** %288, align 8, !dbg !1894
  %290 = call i64 @quotearg_buffer_restyled(i8* %273, i64 %274, i8* %275, i64 %276, i32 %279, i32 %280, i32* %283, i8* %286, i8* %289), !dbg !1895
  store i64 %290, i64* %16, align 8, !dbg !1881
  %291 = load i64, i64* %13, align 8, !dbg !1896
  %292 = load i64, i64* %16, align 8, !dbg !1898
  %293 = icmp ule i64 %291, %292, !dbg !1899
  br label %originalBB16

originalBB29alteredBB:                            ; preds = %originalBB29, %171
  %294 = load i64, i64* %16, align 8, !dbg !1901
  %_30 = sub i64 0, %294
  %gen31 = add i64 %_30, 1
  %_32 = shl i64 %294, 1
  %295 = add i64 %294, 1, !dbg !1903
  store i64 %295, i64* %13, align 8, !dbg !1904
  %296 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1905
  %297 = load i32, i32* %5, align 4, !dbg !1906
  %298 = sext i32 %297 to i64, !dbg !1905
  %299 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %296, i64 %298, !dbg !1905
  %300 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %299, i32 0, i32 0, !dbg !1907
  store i64 %295, i64* %300, align 8, !dbg !1908
  %301 = load i8*, i8** %14, align 8, !dbg !1909
  %302 = icmp ne i8* %301, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1911
  br label %originalBB29

originalBB36alteredBB:                            ; preds = %originalBB36, %199
  %303 = load i64, i64* %13, align 8, !dbg !1915
  %304 = call noalias i8* @xcharalloc(i64 %303), !dbg !1916
  store i8* %304, i8** %14, align 8, !dbg !1917
  %305 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1918
  %306 = load i32, i32* %5, align 4, !dbg !1919
  %307 = sext i32 %306 to i64, !dbg !1918
  %308 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %305, i64 %307, !dbg !1918
  %309 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %308, i32 0, i32 1, !dbg !1920
  store i8* %304, i8** %309, align 8, !dbg !1921
  %310 = load i8*, i8** %14, align 8, !dbg !1922
  %311 = load i64, i64* %13, align 8, !dbg !1923
  %312 = load i8*, i8** %6, align 8, !dbg !1924
  %313 = load i64, i64* %7, align 8, !dbg !1925
  %314 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1926
  %315 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %314, i32 0, i32 0, !dbg !1927
  %316 = load i32, i32* %315, align 8, !dbg !1927
  %317 = load i32, i32* %15, align 4, !dbg !1928
  %318 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1929
  %319 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %318, i32 0, i32 2, !dbg !1930
  %320 = getelementptr inbounds [8 x i32], [8 x i32]* %319, i64 0, i64 0, !dbg !1929
  %321 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1931
  %322 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %321, i32 0, i32 3, !dbg !1932
  %323 = load i8*, i8** %322, align 8, !dbg !1932
  %324 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1933
  %325 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %324, i32 0, i32 4, !dbg !1934
  %326 = load i8*, i8** %325, align 8, !dbg !1934
  %327 = call i64 @quotearg_buffer_restyled(i8* %310, i64 %311, i8* %312, i64 %313, i32 %316, i32 %317, i32* %320, i8* %323, i8* %326), !dbg !1935
  br label %originalBB36
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !1981 {
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i64, align 8
  %25 = alloca i8, align 1
  %26 = alloca i8, align 1
  %27 = alloca i8, align 1
  %28 = alloca i8, align 1
  %29 = alloca i8, align 1
  %30 = alloca i8, align 1
  %31 = alloca i8, align 1
  %32 = alloca i8, align 1
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i64, align 8
  %37 = alloca i8, align 1
  %38 = alloca %struct.__mbstate_t, align 4
  %39 = alloca i32, align 4
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1986, metadata !DIExpression()), !dbg !1987
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !1988, metadata !DIExpression()), !dbg !1989
  store i8* %2, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !1990, metadata !DIExpression()), !dbg !1991
  store i64 %3, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !1992, metadata !DIExpression()), !dbg !1993
  store i32 %4, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !1994, metadata !DIExpression()), !dbg !1995
  store i32 %5, i32* %16, align 4
  call void @llvm.dbg.declare(metadata i32* %16, metadata !1996, metadata !DIExpression()), !dbg !1997
  store i32* %6, i32** %17, align 8
  call void @llvm.dbg.declare(metadata i32** %17, metadata !1998, metadata !DIExpression()), !dbg !1999
  store i8* %7, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !2000, metadata !DIExpression()), !dbg !2001
  store i8* %8, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !2002, metadata !DIExpression()), !dbg !2003
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2004, metadata !DIExpression()), !dbg !2005
  call void @llvm.dbg.declare(metadata i64* %21, metadata !2006, metadata !DIExpression()), !dbg !2007
  store i64 0, i64* %21, align 8, !dbg !2007
  call void @llvm.dbg.declare(metadata i64* %22, metadata !2008, metadata !DIExpression()), !dbg !2009
  store i64 0, i64* %22, align 8, !dbg !2009
  call void @llvm.dbg.declare(metadata i8** %23, metadata !2010, metadata !DIExpression()), !dbg !2011
  store i8* null, i8** %23, align 8, !dbg !2011
  call void @llvm.dbg.declare(metadata i64* %24, metadata !2012, metadata !DIExpression()), !dbg !2013
  store i64 0, i64* %24, align 8, !dbg !2013
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2014, metadata !DIExpression()), !dbg !2015
  store i8 0, i8* %25, align 1, !dbg !2015
  call void @llvm.dbg.declare(metadata i8* %26, metadata !2016, metadata !DIExpression()), !dbg !2017
  %43 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !2018
  %44 = icmp eq i64 %43, 1, !dbg !2019
  %45 = zext i1 %44 to i8, !dbg !2017
  store i8 %45, i8* %26, align 1, !dbg !2017
  call void @llvm.dbg.declare(metadata i8* %27, metadata !2020, metadata !DIExpression()), !dbg !2021
  %46 = load i32, i32* %16, align 4, !dbg !2022
  %47 = and i32 %46, 2, !dbg !2023
  %48 = icmp ne i32 %47, 0, !dbg !2024
  %49 = zext i1 %48 to i8, !dbg !2021
  store i8 %49, i8* %27, align 1, !dbg !2021
  call void @llvm.dbg.declare(metadata i8* %28, metadata !2025, metadata !DIExpression()), !dbg !2026
  store i8 0, i8* %28, align 1, !dbg !2026
  call void @llvm.dbg.declare(metadata i8* %29, metadata !2027, metadata !DIExpression()), !dbg !2028
  store i8 0, i8* %29, align 1, !dbg !2028
  call void @llvm.dbg.declare(metadata i8* %30, metadata !2029, metadata !DIExpression()), !dbg !2030
  store i8 1, i8* %30, align 1, !dbg !2030
  br label %50, !dbg !2031

50:                                               ; preds = %4034, %9
  call void @llvm.dbg.label(metadata !2032), !dbg !2033
  %51 = load i32, i32* @x.37
  %52 = load i32, i32* @y.38
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %50, %originalBBalteredBB
  %59 = load i32, i32* %15, align 4, !dbg !2034
  %60 = load i32, i32* @x.37
  %61 = load i32, i32* @y.38
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %59, label %392 [
    i32 6, label %68
    i32 5, label %85
    i32 7, label %182
    i32 8, label %183
    i32 9, label %183
    i32 10, label %183
    i32 3, label %303
    i32 1, label %320
    i32 4, label %321
    i32 2, label %342
    i32 0, label %375
  ], !dbg !2035

68:                                               ; preds = %originalBBpart2
  %69 = load i32, i32* @x.37
  %70 = load i32, i32* @y.38
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %68, %originalBB1alteredBB
  store i32 5, i32* %15, align 4, !dbg !2036
  store i8 1, i8* %27, align 1, !dbg !2038
  %77 = load i32, i32* @x.37
  %78 = load i32, i32* @y.38
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %85, !dbg !2039

85:                                               ; preds = %originalBBpart24, %originalBBpart2
  %86 = load i32, i32* @x.37
  %87 = load i32, i32* @y.38
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %85, %originalBB6alteredBB
  %94 = load i8, i8* %27, align 1, !dbg !2040
  %95 = trunc i8 %94 to i1, !dbg !2040
  %96 = load i32, i32* @x.37
  %97 = load i32, i32* @y.38
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %95, label %165, label %104, !dbg !2042

104:                                              ; preds = %originalBBpart28
  %105 = load i32, i32* @x.37
  %106 = load i32, i32* @y.38
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %104, %originalBB10alteredBB
  %113 = load i32, i32* @x.37
  %114 = load i32, i32* @y.38
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %121, !dbg !2043

121:                                              ; preds = %originalBBpart212
  %122 = load i64, i64* %21, align 8, !dbg !2044
  %123 = load i64, i64* %12, align 8, !dbg !2044
  %124 = icmp ult i64 %122, %123, !dbg !2044
  br i1 %124, label %125, label %129, !dbg !2047

125:                                              ; preds = %121
  %126 = load i8*, i8** %11, align 8, !dbg !2044
  %127 = load i64, i64* %21, align 8, !dbg !2044
  %128 = getelementptr inbounds i8, i8* %126, i64 %127, !dbg !2044
  store i8 34, i8* %128, align 1, !dbg !2044
  br label %129, !dbg !2044

129:                                              ; preds = %125, %121
  %130 = load i32, i32* @x.37
  %131 = load i32, i32* @y.38
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %129, %originalBB14alteredBB
  %138 = load i64, i64* %21, align 8, !dbg !2047
  %139 = add i64 %138, 1, !dbg !2047
  store i64 %139, i64* %21, align 8, !dbg !2047
  %140 = load i32, i32* @x.37
  %141 = load i32, i32* @y.38
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %148, !dbg !2047

148:                                              ; preds = %originalBBpart216
  %149 = load i32, i32* @x.37
  %150 = load i32, i32* @y.38
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %148, %originalBB18alteredBB
  %157 = load i32, i32* @x.37
  %158 = load i32, i32* @y.38
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %165, !dbg !2047

165:                                              ; preds = %originalBBpart220, %originalBBpart28
  %166 = load i32, i32* @x.37
  %167 = load i32, i32* @y.38
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %165, %originalBB22alteredBB
  store i8 1, i8* %25, align 1, !dbg !2048
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.85, i64 0, i64 0), i8** %23, align 8, !dbg !2049
  store i64 1, i64* %24, align 8, !dbg !2050
  %174 = load i32, i32* @x.37
  %175 = load i32, i32* @y.38
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %409, !dbg !2051

182:                                              ; preds = %originalBBpart2
  store i8 1, i8* %25, align 1, !dbg !2052
  store i8 0, i8* %27, align 1, !dbg !2053
  br label %409, !dbg !2054

183:                                              ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2
  %184 = load i32, i32* %15, align 4, !dbg !2055
  %185 = icmp ne i32 %184, 10, !dbg !2058
  br i1 %185, label %186, label %191, !dbg !2059

186:                                              ; preds = %183
  %187 = load i32, i32* %15, align 4, !dbg !2060
  %188 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.86, i64 0, i64 0), i32 %187), !dbg !2062
  store i8* %188, i8** %18, align 8, !dbg !2063
  %189 = load i32, i32* %15, align 4, !dbg !2064
  %190 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), i32 %189), !dbg !2065
  store i8* %190, i8** %19, align 8, !dbg !2066
  br label %191, !dbg !2067

191:                                              ; preds = %186, %183
  %192 = load i32, i32* @x.37
  %193 = load i32, i32* @y.38
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %191, %originalBB26alteredBB
  %200 = load i8, i8* %27, align 1, !dbg !2068
  %201 = trunc i8 %200 to i1, !dbg !2068
  %202 = load i32, i32* @x.37
  %203 = load i32, i32* @y.38
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %201, label %299, label %210, !dbg !2070

210:                                              ; preds = %originalBBpart228
  %211 = load i32, i32* @x.37
  %212 = load i32, i32* @y.38
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %210, %originalBB30alteredBB
  %219 = load i8*, i8** %18, align 8, !dbg !2071
  store i8* %219, i8** %23, align 8, !dbg !2073
  %220 = load i32, i32* @x.37
  %221 = load i32, i32* @y.38
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %228, !dbg !2074

228:                                              ; preds = %295, %originalBBpart232
  %229 = load i32, i32* @x.37
  %230 = load i32, i32* @y.38
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %228, %originalBB34alteredBB
  %237 = load i8*, i8** %23, align 8, !dbg !2075
  %238 = load i8, i8* %237, align 1, !dbg !2077
  %239 = icmp ne i8 %238, 0, !dbg !2078
  %240 = load i32, i32* @x.37
  %241 = load i32, i32* @y.38
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %239, label %248, label %298, !dbg !2078

248:                                              ; preds = %originalBBpart236
  br label %249, !dbg !2079

249:                                              ; preds = %248
  %250 = load i64, i64* %21, align 8, !dbg !2080
  %251 = load i64, i64* %12, align 8, !dbg !2080
  %252 = icmp ult i64 %250, %251, !dbg !2080
  br i1 %252, label %253, label %259, !dbg !2083

253:                                              ; preds = %249
  %254 = load i8*, i8** %23, align 8, !dbg !2080
  %255 = load i8, i8* %254, align 1, !dbg !2080
  %256 = load i8*, i8** %11, align 8, !dbg !2080
  %257 = load i64, i64* %21, align 8, !dbg !2080
  %258 = getelementptr inbounds i8, i8* %256, i64 %257, !dbg !2080
  store i8 %255, i8* %258, align 1, !dbg !2080
  br label %259, !dbg !2080

259:                                              ; preds = %253, %249
  %260 = load i32, i32* @x.37
  %261 = load i32, i32* @y.38
  %262 = sub i32 %260, 1
  %263 = mul i32 %260, %262
  %264 = urem i32 %263, 2
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %265, %266
  br i1 %267, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %259, %originalBB38alteredBB
  %268 = load i64, i64* %21, align 8, !dbg !2083
  %269 = add i64 %268, 1, !dbg !2083
  store i64 %269, i64* %21, align 8, !dbg !2083
  %270 = load i32, i32* @x.37
  %271 = load i32, i32* @y.38
  %272 = sub i32 %270, 1
  %273 = mul i32 %270, %272
  %274 = urem i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %275, %276
  br i1 %277, label %originalBBpart251, label %originalBB38alteredBB

originalBBpart251:                                ; preds = %originalBB38
  br label %278, !dbg !2083

278:                                              ; preds = %originalBBpart251
  %279 = load i32, i32* @x.37
  %280 = load i32, i32* @y.38
  %281 = sub i32 %279, 1
  %282 = mul i32 %279, %281
  %283 = urem i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %284, %285
  br i1 %286, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %278, %originalBB53alteredBB
  %287 = load i32, i32* @x.37
  %288 = load i32, i32* @y.38
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br label %295, !dbg !2083

295:                                              ; preds = %originalBBpart255
  %296 = load i8*, i8** %23, align 8, !dbg !2084
  %297 = getelementptr inbounds i8, i8* %296, i32 1, !dbg !2084
  store i8* %297, i8** %23, align 8, !dbg !2084
  br label %228, !dbg !2085, !llvm.loop !2086

298:                                              ; preds = %originalBBpart236
  br label %299, !dbg !2087

299:                                              ; preds = %298, %originalBBpart228
  store i8 1, i8* %25, align 1, !dbg !2088
  %300 = load i8*, i8** %19, align 8, !dbg !2089
  store i8* %300, i8** %23, align 8, !dbg !2090
  %301 = load i8*, i8** %23, align 8, !dbg !2091
  %302 = call i64 @strlen(i8* %301) #13, !dbg !2092
  store i64 %302, i64* %24, align 8, !dbg !2093
  br label %409, !dbg !2094

303:                                              ; preds = %originalBBpart2
  %304 = load i32, i32* @x.37
  %305 = load i32, i32* @y.38
  %306 = sub i32 %304, 1
  %307 = mul i32 %304, %306
  %308 = urem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  %310 = icmp slt i32 %305, 10
  %311 = or i1 %309, %310
  br i1 %311, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %303, %originalBB57alteredBB
  store i8 1, i8* %25, align 1, !dbg !2095
  %312 = load i32, i32* @x.37
  %313 = load i32, i32* @y.38
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br label %320, !dbg !2096

320:                                              ; preds = %originalBBpart259, %originalBBpart2
  store i8 1, i8* %27, align 1, !dbg !2097
  br label %321, !dbg !2098

321:                                              ; preds = %320, %originalBBpart2
  %322 = load i8, i8* %27, align 1, !dbg !2099
  %323 = trunc i8 %322 to i1, !dbg !2099
  br i1 %323, label %341, label %324, !dbg !2101

324:                                              ; preds = %321
  %325 = load i32, i32* @x.37
  %326 = load i32, i32* @y.38
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %324, %originalBB61alteredBB
  store i8 1, i8* %25, align 1, !dbg !2102
  %333 = load i32, i32* @x.37
  %334 = load i32, i32* @y.38
  %335 = sub i32 %333, 1
  %336 = mul i32 %333, %335
  %337 = urem i32 %336, 2
  %338 = icmp eq i32 %337, 0
  %339 = icmp slt i32 %334, 10
  %340 = or i1 %338, %339
  br i1 %340, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br label %341, !dbg !2103

341:                                              ; preds = %originalBBpart263, %321
  br label %342, !dbg !2104

342:                                              ; preds = %341, %originalBBpart2
  store i32 2, i32* %15, align 4, !dbg !2105
  %343 = load i8, i8* %27, align 1, !dbg !2106
  %344 = trunc i8 %343 to i1, !dbg !2106
  br i1 %344, label %374, label %345, !dbg !2108

345:                                              ; preds = %342
  br label %346, !dbg !2109

346:                                              ; preds = %345
  %347 = load i64, i64* %21, align 8, !dbg !2110
  %348 = load i64, i64* %12, align 8, !dbg !2110
  %349 = icmp ult i64 %347, %348, !dbg !2110
  br i1 %349, label %350, label %370, !dbg !2113

350:                                              ; preds = %346
  %351 = load i32, i32* @x.37
  %352 = load i32, i32* @y.38
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %350, %originalBB65alteredBB
  %359 = load i8*, i8** %11, align 8, !dbg !2110
  %360 = load i64, i64* %21, align 8, !dbg !2110
  %361 = getelementptr inbounds i8, i8* %359, i64 %360, !dbg !2110
  store i8 39, i8* %361, align 1, !dbg !2110
  %362 = load i32, i32* @x.37
  %363 = load i32, i32* @y.38
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br label %370, !dbg !2110

370:                                              ; preds = %originalBBpart267, %346
  %371 = load i64, i64* %21, align 8, !dbg !2113
  %372 = add i64 %371, 1, !dbg !2113
  store i64 %372, i64* %21, align 8, !dbg !2113
  br label %373, !dbg !2113

373:                                              ; preds = %370
  br label %374, !dbg !2113

374:                                              ; preds = %373, %342
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), i8** %23, align 8, !dbg !2114
  store i64 1, i64* %24, align 8, !dbg !2115
  br label %409, !dbg !2116

375:                                              ; preds = %originalBBpart2
  %376 = load i32, i32* @x.37
  %377 = load i32, i32* @y.38
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %375, %originalBB69alteredBB
  store i8 0, i8* %27, align 1, !dbg !2117
  %384 = load i32, i32* @x.37
  %385 = load i32, i32* @y.38
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %409, !dbg !2118

392:                                              ; preds = %originalBBpart2
  %393 = load i32, i32* @x.37
  %394 = load i32, i32* @y.38
  %395 = sub i32 %393, 1
  %396 = mul i32 %393, %395
  %397 = urem i32 %396, 2
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %398, %399
  br i1 %400, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %392, %originalBB73alteredBB
  call void @abort() #12, !dbg !2119
  %401 = load i32, i32* @x.37
  %402 = load i32, i32* @y.38
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  unreachable, !dbg !2119

409:                                              ; preds = %originalBBpart271, %374, %299, %182, %originalBBpart224
  store i64 0, i64* %20, align 8, !dbg !2120
  br label %410, !dbg !2122

410:                                              ; preds = %3897, %409
  %411 = load i64, i64* %14, align 8, !dbg !2123
  %412 = icmp eq i64 %411, -1, !dbg !2125
  br i1 %412, label %413, label %421, !dbg !2123

413:                                              ; preds = %410
  %414 = load i8*, i8** %13, align 8, !dbg !2126
  %415 = load i64, i64* %20, align 8, !dbg !2127
  %416 = getelementptr inbounds i8, i8* %414, i64 %415, !dbg !2126
  %417 = load i8, i8* %416, align 1, !dbg !2126
  %418 = sext i8 %417 to i32, !dbg !2126
  %419 = icmp eq i32 %418, 0, !dbg !2128
  %420 = zext i1 %419 to i32, !dbg !2128
  br label %442, !dbg !2123

421:                                              ; preds = %410
  %422 = load i32, i32* @x.37
  %423 = load i32, i32* @y.38
  %424 = sub i32 %422, 1
  %425 = mul i32 %422, %424
  %426 = urem i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %427, %428
  br i1 %429, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %421, %originalBB77alteredBB
  %430 = load i64, i64* %20, align 8, !dbg !2129
  %431 = load i64, i64* %14, align 8, !dbg !2130
  %432 = icmp eq i64 %430, %431, !dbg !2131
  %433 = zext i1 %432 to i32, !dbg !2131
  %434 = load i32, i32* @x.37
  %435 = load i32, i32* @y.38
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br label %442, !dbg !2123

442:                                              ; preds = %originalBBpart279, %413
  %443 = phi i32 [ %420, %413 ], [ %433, %originalBBpart279 ], !dbg !2123
  %444 = load i32, i32* @x.37
  %445 = load i32, i32* @y.38
  %446 = sub i32 %444, 1
  %447 = mul i32 %444, %446
  %448 = urem i32 %447, 2
  %449 = icmp eq i32 %448, 0
  %450 = icmp slt i32 %445, 10
  %451 = or i1 %449, %450
  br i1 %451, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %442, %originalBB81alteredBB
  %452 = icmp ne i32 %443, 0, !dbg !2132
  %453 = xor i1 %452, true, !dbg !2132
  %454 = load i32, i32* @x.37
  %455 = load i32, i32* @y.38
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBBpart287, label %originalBB81alteredBB

originalBBpart287:                                ; preds = %originalBB81
  br i1 %453, label %462, label %3900, !dbg !2133

462:                                              ; preds = %originalBBpart287
  call void @llvm.dbg.declare(metadata i8* %31, metadata !2134, metadata !DIExpression()), !dbg !2136
  call void @llvm.dbg.declare(metadata i8* %32, metadata !2137, metadata !DIExpression()), !dbg !2138
  call void @llvm.dbg.declare(metadata i8* %33, metadata !2139, metadata !DIExpression()), !dbg !2140
  store i8 0, i8* %33, align 1, !dbg !2140
  call void @llvm.dbg.declare(metadata i8* %34, metadata !2141, metadata !DIExpression()), !dbg !2142
  store i8 0, i8* %34, align 1, !dbg !2142
  call void @llvm.dbg.declare(metadata i8* %35, metadata !2143, metadata !DIExpression()), !dbg !2144
  store i8 0, i8* %35, align 1, !dbg !2144
  %463 = load i8, i8* %25, align 1, !dbg !2145
  %464 = trunc i8 %463 to i1, !dbg !2145
  br i1 %464, label %465, label %613, !dbg !2147

465:                                              ; preds = %462
  %466 = load i32, i32* @x.37
  %467 = load i32, i32* @y.38
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %465, %originalBB89alteredBB
  %474 = load i32, i32* %15, align 4, !dbg !2148
  %475 = icmp ne i32 %474, 2, !dbg !2149
  %476 = load i32, i32* @x.37
  %477 = load i32, i32* @y.38
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br i1 %475, label %484, label %613, !dbg !2150

484:                                              ; preds = %originalBBpart291
  %485 = load i64, i64* %24, align 8, !dbg !2151
  %486 = icmp ne i64 %485, 0, !dbg !2151
  br i1 %486, label %487, label %613, !dbg !2152

487:                                              ; preds = %484
  %488 = load i64, i64* %20, align 8, !dbg !2153
  %489 = load i64, i64* %24, align 8, !dbg !2154
  %490 = add i64 %488, %489, !dbg !2155
  %491 = load i64, i64* %14, align 8, !dbg !2156
  %492 = icmp eq i64 %491, -1, !dbg !2157
  br i1 %492, label %493, label %515, !dbg !2158

493:                                              ; preds = %487
  %494 = load i32, i32* @x.37
  %495 = load i32, i32* @y.38
  %496 = sub i32 %494, 1
  %497 = mul i32 %494, %496
  %498 = urem i32 %497, 2
  %499 = icmp eq i32 %498, 0
  %500 = icmp slt i32 %495, 10
  %501 = or i1 %499, %500
  br i1 %501, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %493, %originalBB93alteredBB
  %502 = load i64, i64* %24, align 8, !dbg !2159
  %503 = icmp ult i64 1, %502, !dbg !2160
  %504 = load i32, i32* @x.37
  %505 = load i32, i32* @y.38
  %506 = sub i32 %504, 1
  %507 = mul i32 %504, %506
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %509, %510
  br i1 %511, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br i1 %503, label %512, label %515, !dbg !2156

512:                                              ; preds = %originalBBpart295
  %513 = load i8*, i8** %13, align 8, !dbg !2161
  %514 = call i64 @strlen(i8* %513) #13, !dbg !2162
  store i64 %514, i64* %14, align 8, !dbg !2163
  br label %533, !dbg !2156

515:                                              ; preds = %originalBBpart295, %487
  %516 = load i32, i32* @x.37
  %517 = load i32, i32* @y.38
  %518 = sub i32 %516, 1
  %519 = mul i32 %516, %518
  %520 = urem i32 %519, 2
  %521 = icmp eq i32 %520, 0
  %522 = icmp slt i32 %517, 10
  %523 = or i1 %521, %522
  br i1 %523, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %515, %originalBB97alteredBB
  %524 = load i64, i64* %14, align 8, !dbg !2164
  %525 = load i32, i32* @x.37
  %526 = load i32, i32* @y.38
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %533, !dbg !2156

533:                                              ; preds = %originalBBpart299, %512
  %534 = phi i64 [ %514, %512 ], [ %524, %originalBBpart299 ], !dbg !2156
  %535 = load i32, i32* @x.37
  %536 = load i32, i32* @y.38
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %533, %originalBB101alteredBB
  %543 = icmp ule i64 %490, %534, !dbg !2165
  %544 = load i32, i32* @x.37
  %545 = load i32, i32* @y.38
  %546 = sub i32 %544, 1
  %547 = mul i32 %544, %546
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %545, 10
  %551 = or i1 %549, %550
  br i1 %551, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br i1 %543, label %552, label %613, !dbg !2166

552:                                              ; preds = %originalBBpart2103
  %553 = load i32, i32* @x.37
  %554 = load i32, i32* @y.38
  %555 = sub i32 %553, 1
  %556 = mul i32 %553, %555
  %557 = urem i32 %556, 2
  %558 = icmp eq i32 %557, 0
  %559 = icmp slt i32 %554, 10
  %560 = or i1 %558, %559
  br i1 %560, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %552, %originalBB105alteredBB
  %561 = load i8*, i8** %13, align 8, !dbg !2167
  %562 = load i64, i64* %20, align 8, !dbg !2168
  %563 = getelementptr inbounds i8, i8* %561, i64 %562, !dbg !2169
  %564 = load i8*, i8** %23, align 8, !dbg !2170
  %565 = load i64, i64* %24, align 8, !dbg !2171
  %566 = call i32 @memcmp(i8* %563, i8* %564, i64 %565) #13, !dbg !2172
  %567 = icmp eq i32 %566, 0, !dbg !2173
  %568 = load i32, i32* @x.37
  %569 = load i32, i32* @y.38
  %570 = sub i32 %568, 1
  %571 = mul i32 %568, %570
  %572 = urem i32 %571, 2
  %573 = icmp eq i32 %572, 0
  %574 = icmp slt i32 %569, 10
  %575 = or i1 %573, %574
  br i1 %575, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br i1 %567, label %576, label %613, !dbg !2174

576:                                              ; preds = %originalBBpart2107
  %577 = load i32, i32* @x.37
  %578 = load i32, i32* @y.38
  %579 = sub i32 %577, 1
  %580 = mul i32 %577, %579
  %581 = urem i32 %580, 2
  %582 = icmp eq i32 %581, 0
  %583 = icmp slt i32 %578, 10
  %584 = or i1 %582, %583
  br i1 %584, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %576, %originalBB109alteredBB
  %585 = load i8, i8* %27, align 1, !dbg !2175
  %586 = trunc i8 %585 to i1, !dbg !2175
  %587 = load i32, i32* @x.37
  %588 = load i32, i32* @y.38
  %589 = sub i32 %587, 1
  %590 = mul i32 %587, %589
  %591 = urem i32 %590, 2
  %592 = icmp eq i32 %591, 0
  %593 = icmp slt i32 %588, 10
  %594 = or i1 %592, %593
  br i1 %594, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br i1 %586, label %595, label %596, !dbg !2178

595:                                              ; preds = %originalBBpart2111
  br label %4222, !dbg !2179

596:                                              ; preds = %originalBBpart2111
  %597 = load i32, i32* @x.37
  %598 = load i32, i32* @y.38
  %599 = sub i32 %597, 1
  %600 = mul i32 %597, %599
  %601 = urem i32 %600, 2
  %602 = icmp eq i32 %601, 0
  %603 = icmp slt i32 %598, 10
  %604 = or i1 %602, %603
  br i1 %604, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %596, %originalBB113alteredBB
  store i8 1, i8* %33, align 1, !dbg !2180
  %605 = load i32, i32* @x.37
  %606 = load i32, i32* @y.38
  %607 = sub i32 %605, 1
  %608 = mul i32 %605, %607
  %609 = urem i32 %608, 2
  %610 = icmp eq i32 %609, 0
  %611 = icmp slt i32 %606, 10
  %612 = or i1 %610, %611
  br i1 %612, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br label %613, !dbg !2181

613:                                              ; preds = %originalBBpart2115, %originalBBpart2107, %originalBBpart2103, %484, %originalBBpart291, %462
  %614 = load i32, i32* @x.37
  %615 = load i32, i32* @y.38
  %616 = sub i32 %614, 1
  %617 = mul i32 %614, %616
  %618 = urem i32 %617, 2
  %619 = icmp eq i32 %618, 0
  %620 = icmp slt i32 %615, 10
  %621 = or i1 %619, %620
  br i1 %621, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %613, %originalBB117alteredBB
  %622 = load i8*, i8** %13, align 8, !dbg !2182
  %623 = load i64, i64* %20, align 8, !dbg !2183
  %624 = getelementptr inbounds i8, i8* %622, i64 %623, !dbg !2182
  %625 = load i8, i8* %624, align 1, !dbg !2182
  store i8 %625, i8* %31, align 1, !dbg !2184
  %626 = load i8, i8* %31, align 1, !dbg !2185
  %627 = zext i8 %626 to i32, !dbg !2185
  %628 = load i32, i32* @x.37
  %629 = load i32, i32* @y.38
  %630 = sub i32 %628, 1
  %631 = mul i32 %628, %630
  %632 = urem i32 %631, 2
  %633 = icmp eq i32 %632, 0
  %634 = icmp slt i32 %629, 10
  %635 = or i1 %633, %634
  br i1 %635, label %originalBBpart2119, label %originalBB117alteredBB

originalBBpart2119:                               ; preds = %originalBB117
  switch i32 %627, label %2080 [
    i32 0, label %636
    i32 63, label %1093
    i32 7, label %1477
    i32 8, label %1494
    i32 12, label %1511
    i32 10, label %1528
    i32 13, label %1545
    i32 9, label %1546
    i32 11, label %1547
    i32 92, label %1564
    i32 123, label %1774
    i32 125, label %1774
    i32 35, label %1820
    i32 126, label %1820
    i32 32, label %1841
    i32 33, label %1858
    i32 34, label %1858
    i32 36, label %1858
    i32 38, label %1858
    i32 40, label %1858
    i32 41, label %1858
    i32 42, label %1858
    i32 59, label %1858
    i32 60, label %1858
    i32 61, label %1858
    i32 62, label %1858
    i32 91, label %1858
    i32 94, label %1858
    i32 96, label %1858
    i32 124, label %1858
    i32 39, label %1898
    i32 37, label %2079
    i32 43, label %2079
    i32 44, label %2079
    i32 45, label %2079
    i32 46, label %2079
    i32 47, label %2079
    i32 48, label %2079
    i32 49, label %2079
    i32 50, label %2079
    i32 51, label %2079
    i32 52, label %2079
    i32 53, label %2079
    i32 54, label %2079
    i32 55, label %2079
    i32 56, label %2079
    i32 57, label %2079
    i32 58, label %2079
    i32 65, label %2079
    i32 66, label %2079
    i32 67, label %2079
    i32 68, label %2079
    i32 69, label %2079
    i32 70, label %2079
    i32 71, label %2079
    i32 72, label %2079
    i32 73, label %2079
    i32 74, label %2079
    i32 75, label %2079
    i32 76, label %2079
    i32 77, label %2079
    i32 78, label %2079
    i32 79, label %2079
    i32 80, label %2079
    i32 81, label %2079
    i32 82, label %2079
    i32 83, label %2079
    i32 84, label %2079
    i32 85, label %2079
    i32 86, label %2079
    i32 87, label %2079
    i32 88, label %2079
    i32 89, label %2079
    i32 90, label %2079
    i32 93, label %2079
    i32 95, label %2079
    i32 97, label %2079
    i32 98, label %2079
    i32 99, label %2079
    i32 100, label %2079
    i32 101, label %2079
    i32 102, label %2079
    i32 103, label %2079
    i32 104, label %2079
    i32 105, label %2079
    i32 106, label %2079
    i32 107, label %2079
    i32 108, label %2079
    i32 109, label %2079
    i32 110, label %2079
    i32 111, label %2079
    i32 112, label %2079
    i32 113, label %2079
    i32 114, label %2079
    i32 115, label %2079
    i32 116, label %2079
    i32 117, label %2079
    i32 118, label %2079
    i32 119, label %2079
    i32 120, label %2079
    i32 121, label %2079
    i32 122, label %2079
  ], !dbg !2186

636:                                              ; preds = %originalBBpart2119
  %637 = load i32, i32* @x.37
  %638 = load i32, i32* @y.38
  %639 = sub i32 %637, 1
  %640 = mul i32 %637, %639
  %641 = urem i32 %640, 2
  %642 = icmp eq i32 %641, 0
  %643 = icmp slt i32 %638, 10
  %644 = or i1 %642, %643
  br i1 %644, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %636, %originalBB121alteredBB
  %645 = load i8, i8* %25, align 1, !dbg !2187
  %646 = trunc i8 %645 to i1, !dbg !2187
  %647 = load i32, i32* @x.37
  %648 = load i32, i32* @y.38
  %649 = sub i32 %647, 1
  %650 = mul i32 %647, %649
  %651 = urem i32 %650, 2
  %652 = icmp eq i32 %651, 0
  %653 = icmp slt i32 %648, 10
  %654 = or i1 %652, %653
  br i1 %654, label %originalBBpart2123, label %originalBB121alteredBB

originalBBpart2123:                               ; preds = %originalBB121
  br i1 %646, label %655, label %1054, !dbg !2190

655:                                              ; preds = %originalBBpart2123
  %656 = load i32, i32* @x.37
  %657 = load i32, i32* @y.38
  %658 = sub i32 %656, 1
  %659 = mul i32 %656, %658
  %660 = urem i32 %659, 2
  %661 = icmp eq i32 %660, 0
  %662 = icmp slt i32 %657, 10
  %663 = or i1 %661, %662
  br i1 %663, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %655, %originalBB125alteredBB
  %664 = load i32, i32* @x.37
  %665 = load i32, i32* @y.38
  %666 = sub i32 %664, 1
  %667 = mul i32 %664, %666
  %668 = urem i32 %667, 2
  %669 = icmp eq i32 %668, 0
  %670 = icmp slt i32 %665, 10
  %671 = or i1 %669, %670
  br i1 %671, label %originalBBpart2127, label %originalBB125alteredBB

originalBBpart2127:                               ; preds = %originalBB125
  br label %672, !dbg !2191

672:                                              ; preds = %originalBBpart2127
  %673 = load i8, i8* %27, align 1, !dbg !2193
  %674 = trunc i8 %673 to i1, !dbg !2193
  br i1 %674, label %675, label %676, !dbg !2196

675:                                              ; preds = %672
  br label %4222, !dbg !2193

676:                                              ; preds = %672
  %677 = load i32, i32* @x.37
  %678 = load i32, i32* @y.38
  %679 = sub i32 %677, 1
  %680 = mul i32 %677, %679
  %681 = urem i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = icmp slt i32 %678, 10
  %684 = or i1 %682, %683
  br i1 %684, label %originalBB129, label %originalBB129alteredBB

originalBB129:                                    ; preds = %676, %originalBB129alteredBB
  store i8 1, i8* %34, align 1, !dbg !2196
  %685 = load i32, i32* %15, align 4, !dbg !2197
  %686 = icmp eq i32 %685, 2, !dbg !2197
  %687 = load i32, i32* @x.37
  %688 = load i32, i32* @y.38
  %689 = sub i32 %687, 1
  %690 = mul i32 %687, %689
  %691 = urem i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = icmp slt i32 %688, 10
  %694 = or i1 %692, %693
  br i1 %694, label %originalBBpart2131, label %originalBB129alteredBB

originalBBpart2131:                               ; preds = %originalBB129
  br i1 %686, label %695, label %847, !dbg !2197

695:                                              ; preds = %originalBBpart2131
  %696 = load i32, i32* @x.37
  %697 = load i32, i32* @y.38
  %698 = sub i32 %696, 1
  %699 = mul i32 %696, %698
  %700 = urem i32 %699, 2
  %701 = icmp eq i32 %700, 0
  %702 = icmp slt i32 %697, 10
  %703 = or i1 %701, %702
  br i1 %703, label %originalBB133, label %originalBB133alteredBB

originalBB133:                                    ; preds = %695, %originalBB133alteredBB
  %704 = load i8, i8* %28, align 1, !dbg !2197
  %705 = trunc i8 %704 to i1, !dbg !2197
  %706 = load i32, i32* @x.37
  %707 = load i32, i32* @y.38
  %708 = sub i32 %706, 1
  %709 = mul i32 %706, %708
  %710 = urem i32 %709, 2
  %711 = icmp eq i32 %710, 0
  %712 = icmp slt i32 %707, 10
  %713 = or i1 %711, %712
  br i1 %713, label %originalBBpart2135, label %originalBB133alteredBB

originalBBpart2135:                               ; preds = %originalBB133
  br i1 %705, label %847, label %714, !dbg !2196

714:                                              ; preds = %originalBBpart2135
  %715 = load i32, i32* @x.37
  %716 = load i32, i32* @y.38
  %717 = sub i32 %715, 1
  %718 = mul i32 %715, %717
  %719 = urem i32 %718, 2
  %720 = icmp eq i32 %719, 0
  %721 = icmp slt i32 %716, 10
  %722 = or i1 %720, %721
  br i1 %722, label %originalBB137, label %originalBB137alteredBB

originalBB137:                                    ; preds = %714, %originalBB137alteredBB
  %723 = load i32, i32* @x.37
  %724 = load i32, i32* @y.38
  %725 = sub i32 %723, 1
  %726 = mul i32 %723, %725
  %727 = urem i32 %726, 2
  %728 = icmp eq i32 %727, 0
  %729 = icmp slt i32 %724, 10
  %730 = or i1 %728, %729
  br i1 %730, label %originalBBpart2139, label %originalBB137alteredBB

originalBBpart2139:                               ; preds = %originalBB137
  br label %731, !dbg !2199

731:                                              ; preds = %originalBBpart2139
  %732 = load i64, i64* %21, align 8, !dbg !2201
  %733 = load i64, i64* %12, align 8, !dbg !2201
  %734 = icmp ult i64 %732, %733, !dbg !2201
  br i1 %734, label %735, label %755, !dbg !2204

735:                                              ; preds = %731
  %736 = load i32, i32* @x.37
  %737 = load i32, i32* @y.38
  %738 = sub i32 %736, 1
  %739 = mul i32 %736, %738
  %740 = urem i32 %739, 2
  %741 = icmp eq i32 %740, 0
  %742 = icmp slt i32 %737, 10
  %743 = or i1 %741, %742
  br i1 %743, label %originalBB141, label %originalBB141alteredBB

originalBB141:                                    ; preds = %735, %originalBB141alteredBB
  %744 = load i8*, i8** %11, align 8, !dbg !2201
  %745 = load i64, i64* %21, align 8, !dbg !2201
  %746 = getelementptr inbounds i8, i8* %744, i64 %745, !dbg !2201
  store i8 39, i8* %746, align 1, !dbg !2201
  %747 = load i32, i32* @x.37
  %748 = load i32, i32* @y.38
  %749 = sub i32 %747, 1
  %750 = mul i32 %747, %749
  %751 = urem i32 %750, 2
  %752 = icmp eq i32 %751, 0
  %753 = icmp slt i32 %748, 10
  %754 = or i1 %752, %753
  br i1 %754, label %originalBBpart2143, label %originalBB141alteredBB

originalBBpart2143:                               ; preds = %originalBB141
  br label %755, !dbg !2201

755:                                              ; preds = %originalBBpart2143, %731
  %756 = load i64, i64* %21, align 8, !dbg !2204
  %757 = add i64 %756, 1, !dbg !2204
  store i64 %757, i64* %21, align 8, !dbg !2204
  br label %758, !dbg !2204

758:                                              ; preds = %755
  %759 = load i32, i32* @x.37
  %760 = load i32, i32* @y.38
  %761 = sub i32 %759, 1
  %762 = mul i32 %759, %761
  %763 = urem i32 %762, 2
  %764 = icmp eq i32 %763, 0
  %765 = icmp slt i32 %760, 10
  %766 = or i1 %764, %765
  br i1 %766, label %originalBB145, label %originalBB145alteredBB

originalBB145:                                    ; preds = %758, %originalBB145alteredBB
  %767 = load i32, i32* @x.37
  %768 = load i32, i32* @y.38
  %769 = sub i32 %767, 1
  %770 = mul i32 %767, %769
  %771 = urem i32 %770, 2
  %772 = icmp eq i32 %771, 0
  %773 = icmp slt i32 %768, 10
  %774 = or i1 %772, %773
  br i1 %774, label %originalBBpart2147, label %originalBB145alteredBB

originalBBpart2147:                               ; preds = %originalBB145
  br label %775, !dbg !2199

775:                                              ; preds = %originalBBpart2147
  %776 = load i32, i32* @x.37
  %777 = load i32, i32* @y.38
  %778 = sub i32 %776, 1
  %779 = mul i32 %776, %778
  %780 = urem i32 %779, 2
  %781 = icmp eq i32 %780, 0
  %782 = icmp slt i32 %777, 10
  %783 = or i1 %781, %782
  br i1 %783, label %originalBB149, label %originalBB149alteredBB

originalBB149:                                    ; preds = %775, %originalBB149alteredBB
  %784 = load i64, i64* %21, align 8, !dbg !2205
  %785 = load i64, i64* %12, align 8, !dbg !2205
  %786 = icmp ult i64 %784, %785, !dbg !2205
  %787 = load i32, i32* @x.37
  %788 = load i32, i32* @y.38
  %789 = sub i32 %787, 1
  %790 = mul i32 %787, %789
  %791 = urem i32 %790, 2
  %792 = icmp eq i32 %791, 0
  %793 = icmp slt i32 %788, 10
  %794 = or i1 %792, %793
  br i1 %794, label %originalBBpart2151, label %originalBB149alteredBB

originalBBpart2151:                               ; preds = %originalBB149
  br i1 %786, label %795, label %799, !dbg !2208

795:                                              ; preds = %originalBBpart2151
  %796 = load i8*, i8** %11, align 8, !dbg !2205
  %797 = load i64, i64* %21, align 8, !dbg !2205
  %798 = getelementptr inbounds i8, i8* %796, i64 %797, !dbg !2205
  store i8 36, i8* %798, align 1, !dbg !2205
  br label %799, !dbg !2205

799:                                              ; preds = %795, %originalBBpart2151
  %800 = load i64, i64* %21, align 8, !dbg !2208
  %801 = add i64 %800, 1, !dbg !2208
  store i64 %801, i64* %21, align 8, !dbg !2208
  br label %802, !dbg !2208

802:                                              ; preds = %799
  %803 = load i32, i32* @x.37
  %804 = load i32, i32* @y.38
  %805 = sub i32 %803, 1
  %806 = mul i32 %803, %805
  %807 = urem i32 %806, 2
  %808 = icmp eq i32 %807, 0
  %809 = icmp slt i32 %804, 10
  %810 = or i1 %808, %809
  br i1 %810, label %originalBB153, label %originalBB153alteredBB

originalBB153:                                    ; preds = %802, %originalBB153alteredBB
  %811 = load i32, i32* @x.37
  %812 = load i32, i32* @y.38
  %813 = sub i32 %811, 1
  %814 = mul i32 %811, %813
  %815 = urem i32 %814, 2
  %816 = icmp eq i32 %815, 0
  %817 = icmp slt i32 %812, 10
  %818 = or i1 %816, %817
  br i1 %818, label %originalBBpart2155, label %originalBB153alteredBB

originalBBpart2155:                               ; preds = %originalBB153
  br label %819, !dbg !2199

819:                                              ; preds = %originalBBpart2155
  %820 = load i64, i64* %21, align 8, !dbg !2209
  %821 = load i64, i64* %12, align 8, !dbg !2209
  %822 = icmp ult i64 %820, %821, !dbg !2209
  br i1 %822, label %823, label %827, !dbg !2212

823:                                              ; preds = %819
  %824 = load i8*, i8** %11, align 8, !dbg !2209
  %825 = load i64, i64* %21, align 8, !dbg !2209
  %826 = getelementptr inbounds i8, i8* %824, i64 %825, !dbg !2209
  store i8 39, i8* %826, align 1, !dbg !2209
  br label %827, !dbg !2209

827:                                              ; preds = %823, %819
  %828 = load i64, i64* %21, align 8, !dbg !2212
  %829 = add i64 %828, 1, !dbg !2212
  store i64 %829, i64* %21, align 8, !dbg !2212
  br label %830, !dbg !2212

830:                                              ; preds = %827
  %831 = load i32, i32* @x.37
  %832 = load i32, i32* @y.38
  %833 = sub i32 %831, 1
  %834 = mul i32 %831, %833
  %835 = urem i32 %834, 2
  %836 = icmp eq i32 %835, 0
  %837 = icmp slt i32 %832, 10
  %838 = or i1 %836, %837
  br i1 %838, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %830, %originalBB157alteredBB
  store i8 1, i8* %28, align 1, !dbg !2199
  %839 = load i32, i32* @x.37
  %840 = load i32, i32* @y.38
  %841 = sub i32 %839, 1
  %842 = mul i32 %839, %841
  %843 = urem i32 %842, 2
  %844 = icmp eq i32 %843, 0
  %845 = icmp slt i32 %840, 10
  %846 = or i1 %844, %845
  br i1 %846, label %originalBBpart2159, label %originalBB157alteredBB

originalBBpart2159:                               ; preds = %originalBB157
  br label %847, !dbg !2199

847:                                              ; preds = %originalBBpart2159, %originalBBpart2135, %originalBBpart2131
  %848 = load i32, i32* @x.37
  %849 = load i32, i32* @y.38
  %850 = sub i32 %848, 1
  %851 = mul i32 %848, %850
  %852 = urem i32 %851, 2
  %853 = icmp eq i32 %852, 0
  %854 = icmp slt i32 %849, 10
  %855 = or i1 %853, %854
  br i1 %855, label %originalBB161, label %originalBB161alteredBB

originalBB161:                                    ; preds = %847, %originalBB161alteredBB
  %856 = load i32, i32* @x.37
  %857 = load i32, i32* @y.38
  %858 = sub i32 %856, 1
  %859 = mul i32 %856, %858
  %860 = urem i32 %859, 2
  %861 = icmp eq i32 %860, 0
  %862 = icmp slt i32 %857, 10
  %863 = or i1 %861, %862
  br i1 %863, label %originalBBpart2163, label %originalBB161alteredBB

originalBBpart2163:                               ; preds = %originalBB161
  br label %864, !dbg !2196

864:                                              ; preds = %originalBBpart2163
  %865 = load i64, i64* %21, align 8, !dbg !2213
  %866 = load i64, i64* %12, align 8, !dbg !2213
  %867 = icmp ult i64 %865, %866, !dbg !2213
  br i1 %867, label %868, label %888, !dbg !2216

868:                                              ; preds = %864
  %869 = load i32, i32* @x.37
  %870 = load i32, i32* @y.38
  %871 = sub i32 %869, 1
  %872 = mul i32 %869, %871
  %873 = urem i32 %872, 2
  %874 = icmp eq i32 %873, 0
  %875 = icmp slt i32 %870, 10
  %876 = or i1 %874, %875
  br i1 %876, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %868, %originalBB165alteredBB
  %877 = load i8*, i8** %11, align 8, !dbg !2213
  %878 = load i64, i64* %21, align 8, !dbg !2213
  %879 = getelementptr inbounds i8, i8* %877, i64 %878, !dbg !2213
  store i8 92, i8* %879, align 1, !dbg !2213
  %880 = load i32, i32* @x.37
  %881 = load i32, i32* @y.38
  %882 = sub i32 %880, 1
  %883 = mul i32 %880, %882
  %884 = urem i32 %883, 2
  %885 = icmp eq i32 %884, 0
  %886 = icmp slt i32 %881, 10
  %887 = or i1 %885, %886
  br i1 %887, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br label %888, !dbg !2213

888:                                              ; preds = %originalBBpart2167, %864
  %889 = load i32, i32* @x.37
  %890 = load i32, i32* @y.38
  %891 = sub i32 %889, 1
  %892 = mul i32 %889, %891
  %893 = urem i32 %892, 2
  %894 = icmp eq i32 %893, 0
  %895 = icmp slt i32 %890, 10
  %896 = or i1 %894, %895
  br i1 %896, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %888, %originalBB169alteredBB
  %897 = load i64, i64* %21, align 8, !dbg !2216
  %898 = add i64 %897, 1, !dbg !2216
  store i64 %898, i64* %21, align 8, !dbg !2216
  %899 = load i32, i32* @x.37
  %900 = load i32, i32* @y.38
  %901 = sub i32 %899, 1
  %902 = mul i32 %899, %901
  %903 = urem i32 %902, 2
  %904 = icmp eq i32 %903, 0
  %905 = icmp slt i32 %900, 10
  %906 = or i1 %904, %905
  br i1 %906, label %originalBBpart2171, label %originalBB169alteredBB

originalBBpart2171:                               ; preds = %originalBB169
  br label %907, !dbg !2216

907:                                              ; preds = %originalBBpart2171
  br label %908, !dbg !2196

908:                                              ; preds = %907
  %909 = load i32, i32* %15, align 4, !dbg !2217
  %910 = icmp ne i32 %909, 2, !dbg !2219
  br i1 %910, label %911, label %1037, !dbg !2220

911:                                              ; preds = %908
  %912 = load i64, i64* %20, align 8, !dbg !2221
  %913 = add i64 %912, 1, !dbg !2222
  %914 = load i64, i64* %14, align 8, !dbg !2223
  %915 = icmp ult i64 %913, %914, !dbg !2224
  br i1 %915, label %916, label %1037, !dbg !2225

916:                                              ; preds = %911
  %917 = load i8*, i8** %13, align 8, !dbg !2226
  %918 = load i64, i64* %20, align 8, !dbg !2227
  %919 = add i64 %918, 1, !dbg !2228
  %920 = getelementptr inbounds i8, i8* %917, i64 %919, !dbg !2226
  %921 = load i8, i8* %920, align 1, !dbg !2226
  %922 = sext i8 %921 to i32, !dbg !2226
  %923 = icmp sle i32 48, %922, !dbg !2229
  br i1 %923, label %924, label %1037, !dbg !2230

924:                                              ; preds = %916
  %925 = load i32, i32* @x.37
  %926 = load i32, i32* @y.38
  %927 = sub i32 %925, 1
  %928 = mul i32 %925, %927
  %929 = urem i32 %928, 2
  %930 = icmp eq i32 %929, 0
  %931 = icmp slt i32 %926, 10
  %932 = or i1 %930, %931
  br i1 %932, label %originalBB173, label %originalBB173alteredBB

originalBB173:                                    ; preds = %924, %originalBB173alteredBB
  %933 = load i8*, i8** %13, align 8, !dbg !2231
  %934 = load i64, i64* %20, align 8, !dbg !2232
  %935 = add i64 %934, 1, !dbg !2233
  %936 = getelementptr inbounds i8, i8* %933, i64 %935, !dbg !2231
  %937 = load i8, i8* %936, align 1, !dbg !2231
  %938 = sext i8 %937 to i32, !dbg !2231
  %939 = icmp sle i32 %938, 57, !dbg !2234
  %940 = load i32, i32* @x.37
  %941 = load i32, i32* @y.38
  %942 = sub i32 %940, 1
  %943 = mul i32 %940, %942
  %944 = urem i32 %943, 2
  %945 = icmp eq i32 %944, 0
  %946 = icmp slt i32 %941, 10
  %947 = or i1 %945, %946
  br i1 %947, label %originalBBpart2178, label %originalBB173alteredBB

originalBBpart2178:                               ; preds = %originalBB173
  br i1 %939, label %948, label %1037, !dbg !2235

948:                                              ; preds = %originalBBpart2178
  br label %949, !dbg !2236

949:                                              ; preds = %948
  %950 = load i64, i64* %21, align 8, !dbg !2238
  %951 = load i64, i64* %12, align 8, !dbg !2238
  %952 = icmp ult i64 %950, %951, !dbg !2238
  br i1 %952, label %953, label %973, !dbg !2241

953:                                              ; preds = %949
  %954 = load i32, i32* @x.37
  %955 = load i32, i32* @y.38
  %956 = sub i32 %954, 1
  %957 = mul i32 %954, %956
  %958 = urem i32 %957, 2
  %959 = icmp eq i32 %958, 0
  %960 = icmp slt i32 %955, 10
  %961 = or i1 %959, %960
  br i1 %961, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %953, %originalBB180alteredBB
  %962 = load i8*, i8** %11, align 8, !dbg !2238
  %963 = load i64, i64* %21, align 8, !dbg !2238
  %964 = getelementptr inbounds i8, i8* %962, i64 %963, !dbg !2238
  store i8 48, i8* %964, align 1, !dbg !2238
  %965 = load i32, i32* @x.37
  %966 = load i32, i32* @y.38
  %967 = sub i32 %965, 1
  %968 = mul i32 %965, %967
  %969 = urem i32 %968, 2
  %970 = icmp eq i32 %969, 0
  %971 = icmp slt i32 %966, 10
  %972 = or i1 %970, %971
  br i1 %972, label %originalBBpart2182, label %originalBB180alteredBB

originalBBpart2182:                               ; preds = %originalBB180
  br label %973, !dbg !2238

973:                                              ; preds = %originalBBpart2182, %949
  %974 = load i32, i32* @x.37
  %975 = load i32, i32* @y.38
  %976 = sub i32 %974, 1
  %977 = mul i32 %974, %976
  %978 = urem i32 %977, 2
  %979 = icmp eq i32 %978, 0
  %980 = icmp slt i32 %975, 10
  %981 = or i1 %979, %980
  br i1 %981, label %originalBB184, label %originalBB184alteredBB

originalBB184:                                    ; preds = %973, %originalBB184alteredBB
  %982 = load i64, i64* %21, align 8, !dbg !2241
  %983 = add i64 %982, 1, !dbg !2241
  store i64 %983, i64* %21, align 8, !dbg !2241
  %984 = load i32, i32* @x.37
  %985 = load i32, i32* @y.38
  %986 = sub i32 %984, 1
  %987 = mul i32 %984, %986
  %988 = urem i32 %987, 2
  %989 = icmp eq i32 %988, 0
  %990 = icmp slt i32 %985, 10
  %991 = or i1 %989, %990
  br i1 %991, label %originalBBpart2194, label %originalBB184alteredBB

originalBBpart2194:                               ; preds = %originalBB184
  br label %992, !dbg !2241

992:                                              ; preds = %originalBBpart2194
  br label %993, !dbg !2242

993:                                              ; preds = %992
  %994 = load i64, i64* %21, align 8, !dbg !2243
  %995 = load i64, i64* %12, align 8, !dbg !2243
  %996 = icmp ult i64 %994, %995, !dbg !2243
  br i1 %996, label %997, label %1017, !dbg !2246

997:                                              ; preds = %993
  %998 = load i32, i32* @x.37
  %999 = load i32, i32* @y.38
  %1000 = sub i32 %998, 1
  %1001 = mul i32 %998, %1000
  %1002 = urem i32 %1001, 2
  %1003 = icmp eq i32 %1002, 0
  %1004 = icmp slt i32 %999, 10
  %1005 = or i1 %1003, %1004
  br i1 %1005, label %originalBB196, label %originalBB196alteredBB

originalBB196:                                    ; preds = %997, %originalBB196alteredBB
  %1006 = load i8*, i8** %11, align 8, !dbg !2243
  %1007 = load i64, i64* %21, align 8, !dbg !2243
  %1008 = getelementptr inbounds i8, i8* %1006, i64 %1007, !dbg !2243
  store i8 48, i8* %1008, align 1, !dbg !2243
  %1009 = load i32, i32* @x.37
  %1010 = load i32, i32* @y.38
  %1011 = sub i32 %1009, 1
  %1012 = mul i32 %1009, %1011
  %1013 = urem i32 %1012, 2
  %1014 = icmp eq i32 %1013, 0
  %1015 = icmp slt i32 %1010, 10
  %1016 = or i1 %1014, %1015
  br i1 %1016, label %originalBBpart2198, label %originalBB196alteredBB

originalBBpart2198:                               ; preds = %originalBB196
  br label %1017, !dbg !2243

1017:                                             ; preds = %originalBBpart2198, %993
  %1018 = load i32, i32* @x.37
  %1019 = load i32, i32* @y.38
  %1020 = sub i32 %1018, 1
  %1021 = mul i32 %1018, %1020
  %1022 = urem i32 %1021, 2
  %1023 = icmp eq i32 %1022, 0
  %1024 = icmp slt i32 %1019, 10
  %1025 = or i1 %1023, %1024
  br i1 %1025, label %originalBB200, label %originalBB200alteredBB

originalBB200:                                    ; preds = %1017, %originalBB200alteredBB
  %1026 = load i64, i64* %21, align 8, !dbg !2246
  %1027 = add i64 %1026, 1, !dbg !2246
  store i64 %1027, i64* %21, align 8, !dbg !2246
  %1028 = load i32, i32* @x.37
  %1029 = load i32, i32* @y.38
  %1030 = sub i32 %1028, 1
  %1031 = mul i32 %1028, %1030
  %1032 = urem i32 %1031, 2
  %1033 = icmp eq i32 %1032, 0
  %1034 = icmp slt i32 %1029, 10
  %1035 = or i1 %1033, %1034
  br i1 %1035, label %originalBBpart2209, label %originalBB200alteredBB

originalBBpart2209:                               ; preds = %originalBB200
  br label %1036, !dbg !2246

1036:                                             ; preds = %originalBBpart2209
  br label %1037, !dbg !2247

1037:                                             ; preds = %1036, %originalBBpart2178, %916, %911, %908
  %1038 = load i32, i32* @x.37
  %1039 = load i32, i32* @y.38
  %1040 = sub i32 %1038, 1
  %1041 = mul i32 %1038, %1040
  %1042 = urem i32 %1041, 2
  %1043 = icmp eq i32 %1042, 0
  %1044 = icmp slt i32 %1039, 10
  %1045 = or i1 %1043, %1044
  br i1 %1045, label %originalBB211, label %originalBB211alteredBB

originalBB211:                                    ; preds = %1037, %originalBB211alteredBB
  store i8 48, i8* %31, align 1, !dbg !2248
  %1046 = load i32, i32* @x.37
  %1047 = load i32, i32* @y.38
  %1048 = sub i32 %1046, 1
  %1049 = mul i32 %1046, %1048
  %1050 = urem i32 %1049, 2
  %1051 = icmp eq i32 %1050, 0
  %1052 = icmp slt i32 %1047, 10
  %1053 = or i1 %1051, %1052
  br i1 %1053, label %originalBBpart2213, label %originalBB211alteredBB

originalBBpart2213:                               ; preds = %originalBB211
  br label %1076, !dbg !2249

1054:                                             ; preds = %originalBBpart2123
  %1055 = load i32, i32* %16, align 4, !dbg !2250
  %1056 = and i32 %1055, 1, !dbg !2252
  %1057 = icmp ne i32 %1056, 0, !dbg !2252
  br i1 %1057, label %1058, label %1075, !dbg !2253

1058:                                             ; preds = %1054
  %1059 = load i32, i32* @x.37
  %1060 = load i32, i32* @y.38
  %1061 = sub i32 %1059, 1
  %1062 = mul i32 %1059, %1061
  %1063 = urem i32 %1062, 2
  %1064 = icmp eq i32 %1063, 0
  %1065 = icmp slt i32 %1060, 10
  %1066 = or i1 %1064, %1065
  br i1 %1066, label %originalBB215, label %originalBB215alteredBB

originalBB215:                                    ; preds = %1058, %originalBB215alteredBB
  %1067 = load i32, i32* @x.37
  %1068 = load i32, i32* @y.38
  %1069 = sub i32 %1067, 1
  %1070 = mul i32 %1067, %1069
  %1071 = urem i32 %1070, 2
  %1072 = icmp eq i32 %1071, 0
  %1073 = icmp slt i32 %1068, 10
  %1074 = or i1 %1072, %1073
  br i1 %1074, label %originalBBpart2217, label %originalBB215alteredBB

originalBBpart2217:                               ; preds = %originalBB215
  br label %3897, !dbg !2254

1075:                                             ; preds = %1054
  br label %1076

1076:                                             ; preds = %1075, %originalBBpart2213
  %1077 = load i32, i32* @x.37
  %1078 = load i32, i32* @y.38
  %1079 = sub i32 %1077, 1
  %1080 = mul i32 %1077, %1079
  %1081 = urem i32 %1080, 2
  %1082 = icmp eq i32 %1081, 0
  %1083 = icmp slt i32 %1078, 10
  %1084 = or i1 %1082, %1083
  br i1 %1084, label %originalBB219, label %originalBB219alteredBB

originalBB219:                                    ; preds = %1076, %originalBB219alteredBB
  %1085 = load i32, i32* @x.37
  %1086 = load i32, i32* @y.38
  %1087 = sub i32 %1085, 1
  %1088 = mul i32 %1085, %1087
  %1089 = urem i32 %1088, 2
  %1090 = icmp eq i32 %1089, 0
  %1091 = icmp slt i32 %1086, 10
  %1092 = or i1 %1090, %1091
  br i1 %1092, label %originalBBpart2221, label %originalBB219alteredBB

originalBBpart2221:                               ; preds = %originalBB219
  br label %3353, !dbg !2255

1093:                                             ; preds = %originalBBpart2119
  %1094 = load i32, i32* @x.37
  %1095 = load i32, i32* @y.38
  %1096 = sub i32 %1094, 1
  %1097 = mul i32 %1094, %1096
  %1098 = urem i32 %1097, 2
  %1099 = icmp eq i32 %1098, 0
  %1100 = icmp slt i32 %1095, 10
  %1101 = or i1 %1099, %1100
  br i1 %1101, label %originalBB223, label %originalBB223alteredBB

originalBB223:                                    ; preds = %1093, %originalBB223alteredBB
  %1102 = load i32, i32* %15, align 4, !dbg !2256
  %1103 = load i32, i32* @x.37
  %1104 = load i32, i32* @y.38
  %1105 = sub i32 %1103, 1
  %1106 = mul i32 %1103, %1105
  %1107 = urem i32 %1106, 2
  %1108 = icmp eq i32 %1107, 0
  %1109 = icmp slt i32 %1104, 10
  %1110 = or i1 %1108, %1109
  br i1 %1110, label %originalBBpart2225, label %originalBB223alteredBB

originalBBpart2225:                               ; preds = %originalBB223
  switch i32 %1102, label %1459 [
    i32 2, label %1111
    i32 5, label %1132
  ], !dbg !2257

1111:                                             ; preds = %originalBBpart2225
  %1112 = load i32, i32* @x.37
  %1113 = load i32, i32* @y.38
  %1114 = sub i32 %1112, 1
  %1115 = mul i32 %1112, %1114
  %1116 = urem i32 %1115, 2
  %1117 = icmp eq i32 %1116, 0
  %1118 = icmp slt i32 %1113, 10
  %1119 = or i1 %1117, %1118
  br i1 %1119, label %originalBB227, label %originalBB227alteredBB

originalBB227:                                    ; preds = %1111, %originalBB227alteredBB
  %1120 = load i8, i8* %27, align 1, !dbg !2258
  %1121 = trunc i8 %1120 to i1, !dbg !2258
  %1122 = load i32, i32* @x.37
  %1123 = load i32, i32* @y.38
  %1124 = sub i32 %1122, 1
  %1125 = mul i32 %1122, %1124
  %1126 = urem i32 %1125, 2
  %1127 = icmp eq i32 %1126, 0
  %1128 = icmp slt i32 %1123, 10
  %1129 = or i1 %1127, %1128
  br i1 %1129, label %originalBBpart2229, label %originalBB227alteredBB

originalBBpart2229:                               ; preds = %originalBB227
  br i1 %1121, label %1130, label %1131, !dbg !2261

1130:                                             ; preds = %originalBBpart2229
  br label %4222, !dbg !2262

1131:                                             ; preds = %originalBBpart2229
  br label %1460, !dbg !2263

1132:                                             ; preds = %originalBBpart2225
  %1133 = load i32, i32* @x.37
  %1134 = load i32, i32* @y.38
  %1135 = sub i32 %1133, 1
  %1136 = mul i32 %1133, %1135
  %1137 = urem i32 %1136, 2
  %1138 = icmp eq i32 %1137, 0
  %1139 = icmp slt i32 %1134, 10
  %1140 = or i1 %1138, %1139
  br i1 %1140, label %originalBB231, label %originalBB231alteredBB

originalBB231:                                    ; preds = %1132, %originalBB231alteredBB
  %1141 = load i32, i32* %16, align 4, !dbg !2264
  %1142 = and i32 %1141, 4, !dbg !2266
  %1143 = icmp ne i32 %1142, 0, !dbg !2266
  %1144 = load i32, i32* @x.37
  %1145 = load i32, i32* @y.38
  %1146 = sub i32 %1144, 1
  %1147 = mul i32 %1144, %1146
  %1148 = urem i32 %1147, 2
  %1149 = icmp eq i32 %1148, 0
  %1150 = icmp slt i32 %1145, 10
  %1151 = or i1 %1149, %1150
  br i1 %1151, label %originalBBpart2244, label %originalBB231alteredBB

originalBBpart2244:                               ; preds = %originalBB231
  br i1 %1143, label %1152, label %1442, !dbg !2267

1152:                                             ; preds = %originalBBpart2244
  %1153 = load i32, i32* @x.37
  %1154 = load i32, i32* @y.38
  %1155 = sub i32 %1153, 1
  %1156 = mul i32 %1153, %1155
  %1157 = urem i32 %1156, 2
  %1158 = icmp eq i32 %1157, 0
  %1159 = icmp slt i32 %1154, 10
  %1160 = or i1 %1158, %1159
  br i1 %1160, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %1152, %originalBB246alteredBB
  %1161 = load i64, i64* %20, align 8, !dbg !2268
  %1162 = add i64 %1161, 2, !dbg !2269
  %1163 = load i64, i64* %14, align 8, !dbg !2270
  %1164 = icmp ult i64 %1162, %1163, !dbg !2271
  %1165 = load i32, i32* @x.37
  %1166 = load i32, i32* @y.38
  %1167 = sub i32 %1165, 1
  %1168 = mul i32 %1165, %1167
  %1169 = urem i32 %1168, 2
  %1170 = icmp eq i32 %1169, 0
  %1171 = icmp slt i32 %1166, 10
  %1172 = or i1 %1170, %1171
  br i1 %1172, label %originalBBpart2256, label %originalBB246alteredBB

originalBBpart2256:                               ; preds = %originalBB246
  br i1 %1164, label %1173, label %1442, !dbg !2272

1173:                                             ; preds = %originalBBpart2256
  %1174 = load i8*, i8** %13, align 8, !dbg !2273
  %1175 = load i64, i64* %20, align 8, !dbg !2274
  %1176 = add i64 %1175, 1, !dbg !2275
  %1177 = getelementptr inbounds i8, i8* %1174, i64 %1176, !dbg !2273
  %1178 = load i8, i8* %1177, align 1, !dbg !2273
  %1179 = sext i8 %1178 to i32, !dbg !2273
  %1180 = icmp eq i32 %1179, 63, !dbg !2276
  br i1 %1180, label %1181, label %1442, !dbg !2277

1181:                                             ; preds = %1173
  %1182 = load i32, i32* @x.37
  %1183 = load i32, i32* @y.38
  %1184 = sub i32 %1182, 1
  %1185 = mul i32 %1182, %1184
  %1186 = urem i32 %1185, 2
  %1187 = icmp eq i32 %1186, 0
  %1188 = icmp slt i32 %1183, 10
  %1189 = or i1 %1187, %1188
  br i1 %1189, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %1181, %originalBB258alteredBB
  %1190 = load i8*, i8** %13, align 8, !dbg !2278
  %1191 = load i64, i64* %20, align 8, !dbg !2279
  %1192 = add i64 %1191, 2, !dbg !2280
  %1193 = getelementptr inbounds i8, i8* %1190, i64 %1192, !dbg !2278
  %1194 = load i8, i8* %1193, align 1, !dbg !2278
  %1195 = sext i8 %1194 to i32, !dbg !2278
  %1196 = load i32, i32* @x.37
  %1197 = load i32, i32* @y.38
  %1198 = sub i32 %1196, 1
  %1199 = mul i32 %1196, %1198
  %1200 = urem i32 %1199, 2
  %1201 = icmp eq i32 %1200, 0
  %1202 = icmp slt i32 %1197, 10
  %1203 = or i1 %1201, %1202
  br i1 %1203, label %originalBBpart2267, label %originalBB258alteredBB

originalBBpart2267:                               ; preds = %originalBB258
  switch i32 %1195, label %1440 [
    i32 33, label %1204
    i32 39, label %1204
    i32 40, label %1204
    i32 41, label %1204
    i32 45, label %1204
    i32 47, label %1204
    i32 60, label %1204
    i32 61, label %1204
    i32 62, label %1204
  ], !dbg !2281

1204:                                             ; preds = %originalBBpart2267, %originalBBpart2267, %originalBBpart2267, %originalBBpart2267, %originalBBpart2267, %originalBBpart2267, %originalBBpart2267, %originalBBpart2267, %originalBBpart2267
  %1205 = load i32, i32* @x.37
  %1206 = load i32, i32* @y.38
  %1207 = sub i32 %1205, 1
  %1208 = mul i32 %1205, %1207
  %1209 = urem i32 %1208, 2
  %1210 = icmp eq i32 %1209, 0
  %1211 = icmp slt i32 %1206, 10
  %1212 = or i1 %1210, %1211
  br i1 %1212, label %originalBB269, label %originalBB269alteredBB

originalBB269:                                    ; preds = %1204, %originalBB269alteredBB
  %1213 = load i8, i8* %27, align 1, !dbg !2282
  %1214 = trunc i8 %1213 to i1, !dbg !2282
  %1215 = load i32, i32* @x.37
  %1216 = load i32, i32* @y.38
  %1217 = sub i32 %1215, 1
  %1218 = mul i32 %1215, %1217
  %1219 = urem i32 %1218, 2
  %1220 = icmp eq i32 %1219, 0
  %1221 = icmp slt i32 %1216, 10
  %1222 = or i1 %1220, %1221
  br i1 %1222, label %originalBBpart2271, label %originalBB269alteredBB

originalBBpart2271:                               ; preds = %originalBB269
  br i1 %1214, label %1223, label %1240, !dbg !2285

1223:                                             ; preds = %originalBBpart2271
  %1224 = load i32, i32* @x.37
  %1225 = load i32, i32* @y.38
  %1226 = sub i32 %1224, 1
  %1227 = mul i32 %1224, %1226
  %1228 = urem i32 %1227, 2
  %1229 = icmp eq i32 %1228, 0
  %1230 = icmp slt i32 %1225, 10
  %1231 = or i1 %1229, %1230
  br i1 %1231, label %originalBB273, label %originalBB273alteredBB

originalBB273:                                    ; preds = %1223, %originalBB273alteredBB
  %1232 = load i32, i32* @x.37
  %1233 = load i32, i32* @y.38
  %1234 = sub i32 %1232, 1
  %1235 = mul i32 %1232, %1234
  %1236 = urem i32 %1235, 2
  %1237 = icmp eq i32 %1236, 0
  %1238 = icmp slt i32 %1233, 10
  %1239 = or i1 %1237, %1238
  br i1 %1239, label %originalBBpart2275, label %originalBB273alteredBB

originalBBpart2275:                               ; preds = %originalBB273
  br label %4222, !dbg !2286

1240:                                             ; preds = %originalBBpart2271
  %1241 = load i32, i32* @x.37
  %1242 = load i32, i32* @y.38
  %1243 = sub i32 %1241, 1
  %1244 = mul i32 %1241, %1243
  %1245 = urem i32 %1244, 2
  %1246 = icmp eq i32 %1245, 0
  %1247 = icmp slt i32 %1242, 10
  %1248 = or i1 %1246, %1247
  br i1 %1248, label %originalBB277, label %originalBB277alteredBB

originalBB277:                                    ; preds = %1240, %originalBB277alteredBB
  %1249 = load i8*, i8** %13, align 8, !dbg !2287
  %1250 = load i64, i64* %20, align 8, !dbg !2288
  %1251 = add i64 %1250, 2, !dbg !2289
  %1252 = getelementptr inbounds i8, i8* %1249, i64 %1251, !dbg !2287
  %1253 = load i8, i8* %1252, align 1, !dbg !2287
  store i8 %1253, i8* %31, align 1, !dbg !2290
  %1254 = load i64, i64* %20, align 8, !dbg !2291
  %1255 = add i64 %1254, 2, !dbg !2291
  store i64 %1255, i64* %20, align 8, !dbg !2291
  %1256 = load i32, i32* @x.37
  %1257 = load i32, i32* @y.38
  %1258 = sub i32 %1256, 1
  %1259 = mul i32 %1256, %1258
  %1260 = urem i32 %1259, 2
  %1261 = icmp eq i32 %1260, 0
  %1262 = icmp slt i32 %1257, 10
  %1263 = or i1 %1261, %1262
  br i1 %1263, label %originalBBpart2291, label %originalBB277alteredBB

originalBBpart2291:                               ; preds = %originalBB277
  br label %1264, !dbg !2292

1264:                                             ; preds = %originalBBpart2291
  %1265 = load i64, i64* %21, align 8, !dbg !2293
  %1266 = load i64, i64* %12, align 8, !dbg !2293
  %1267 = icmp ult i64 %1265, %1266, !dbg !2293
  br i1 %1267, label %1268, label %1288, !dbg !2296

1268:                                             ; preds = %1264
  %1269 = load i32, i32* @x.37
  %1270 = load i32, i32* @y.38
  %1271 = sub i32 %1269, 1
  %1272 = mul i32 %1269, %1271
  %1273 = urem i32 %1272, 2
  %1274 = icmp eq i32 %1273, 0
  %1275 = icmp slt i32 %1270, 10
  %1276 = or i1 %1274, %1275
  br i1 %1276, label %originalBB293, label %originalBB293alteredBB

originalBB293:                                    ; preds = %1268, %originalBB293alteredBB
  %1277 = load i8*, i8** %11, align 8, !dbg !2293
  %1278 = load i64, i64* %21, align 8, !dbg !2293
  %1279 = getelementptr inbounds i8, i8* %1277, i64 %1278, !dbg !2293
  store i8 63, i8* %1279, align 1, !dbg !2293
  %1280 = load i32, i32* @x.37
  %1281 = load i32, i32* @y.38
  %1282 = sub i32 %1280, 1
  %1283 = mul i32 %1280, %1282
  %1284 = urem i32 %1283, 2
  %1285 = icmp eq i32 %1284, 0
  %1286 = icmp slt i32 %1281, 10
  %1287 = or i1 %1285, %1286
  br i1 %1287, label %originalBBpart2295, label %originalBB293alteredBB

originalBBpart2295:                               ; preds = %originalBB293
  br label %1288, !dbg !2293

1288:                                             ; preds = %originalBBpart2295, %1264
  %1289 = load i32, i32* @x.37
  %1290 = load i32, i32* @y.38
  %1291 = sub i32 %1289, 1
  %1292 = mul i32 %1289, %1291
  %1293 = urem i32 %1292, 2
  %1294 = icmp eq i32 %1293, 0
  %1295 = icmp slt i32 %1290, 10
  %1296 = or i1 %1294, %1295
  br i1 %1296, label %originalBB297, label %originalBB297alteredBB

originalBB297:                                    ; preds = %1288, %originalBB297alteredBB
  %1297 = load i64, i64* %21, align 8, !dbg !2296
  %1298 = add i64 %1297, 1, !dbg !2296
  store i64 %1298, i64* %21, align 8, !dbg !2296
  %1299 = load i32, i32* @x.37
  %1300 = load i32, i32* @y.38
  %1301 = sub i32 %1299, 1
  %1302 = mul i32 %1299, %1301
  %1303 = urem i32 %1302, 2
  %1304 = icmp eq i32 %1303, 0
  %1305 = icmp slt i32 %1300, 10
  %1306 = or i1 %1304, %1305
  br i1 %1306, label %originalBBpart2304, label %originalBB297alteredBB

originalBBpart2304:                               ; preds = %originalBB297
  br label %1307, !dbg !2296

1307:                                             ; preds = %originalBBpart2304
  br label %1308, !dbg !2297

1308:                                             ; preds = %1307
  %1309 = load i64, i64* %21, align 8, !dbg !2298
  %1310 = load i64, i64* %12, align 8, !dbg !2298
  %1311 = icmp ult i64 %1309, %1310, !dbg !2298
  br i1 %1311, label %1312, label %1332, !dbg !2301

1312:                                             ; preds = %1308
  %1313 = load i32, i32* @x.37
  %1314 = load i32, i32* @y.38
  %1315 = sub i32 %1313, 1
  %1316 = mul i32 %1313, %1315
  %1317 = urem i32 %1316, 2
  %1318 = icmp eq i32 %1317, 0
  %1319 = icmp slt i32 %1314, 10
  %1320 = or i1 %1318, %1319
  br i1 %1320, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %1312, %originalBB306alteredBB
  %1321 = load i8*, i8** %11, align 8, !dbg !2298
  %1322 = load i64, i64* %21, align 8, !dbg !2298
  %1323 = getelementptr inbounds i8, i8* %1321, i64 %1322, !dbg !2298
  store i8 34, i8* %1323, align 1, !dbg !2298
  %1324 = load i32, i32* @x.37
  %1325 = load i32, i32* @y.38
  %1326 = sub i32 %1324, 1
  %1327 = mul i32 %1324, %1326
  %1328 = urem i32 %1327, 2
  %1329 = icmp eq i32 %1328, 0
  %1330 = icmp slt i32 %1325, 10
  %1331 = or i1 %1329, %1330
  br i1 %1331, label %originalBBpart2308, label %originalBB306alteredBB

originalBBpart2308:                               ; preds = %originalBB306
  br label %1332, !dbg !2298

1332:                                             ; preds = %originalBBpart2308, %1308
  %1333 = load i32, i32* @x.37
  %1334 = load i32, i32* @y.38
  %1335 = sub i32 %1333, 1
  %1336 = mul i32 %1333, %1335
  %1337 = urem i32 %1336, 2
  %1338 = icmp eq i32 %1337, 0
  %1339 = icmp slt i32 %1334, 10
  %1340 = or i1 %1338, %1339
  br i1 %1340, label %originalBB310, label %originalBB310alteredBB

originalBB310:                                    ; preds = %1332, %originalBB310alteredBB
  %1341 = load i64, i64* %21, align 8, !dbg !2301
  %1342 = add i64 %1341, 1, !dbg !2301
  store i64 %1342, i64* %21, align 8, !dbg !2301
  %1343 = load i32, i32* @x.37
  %1344 = load i32, i32* @y.38
  %1345 = sub i32 %1343, 1
  %1346 = mul i32 %1343, %1345
  %1347 = urem i32 %1346, 2
  %1348 = icmp eq i32 %1347, 0
  %1349 = icmp slt i32 %1344, 10
  %1350 = or i1 %1348, %1349
  br i1 %1350, label %originalBBpart2318, label %originalBB310alteredBB

originalBBpart2318:                               ; preds = %originalBB310
  br label %1351, !dbg !2301

1351:                                             ; preds = %originalBBpart2318
  br label %1352, !dbg !2302

1352:                                             ; preds = %1351
  %1353 = load i32, i32* @x.37
  %1354 = load i32, i32* @y.38
  %1355 = sub i32 %1353, 1
  %1356 = mul i32 %1353, %1355
  %1357 = urem i32 %1356, 2
  %1358 = icmp eq i32 %1357, 0
  %1359 = icmp slt i32 %1354, 10
  %1360 = or i1 %1358, %1359
  br i1 %1360, label %originalBB320, label %originalBB320alteredBB

originalBB320:                                    ; preds = %1352, %originalBB320alteredBB
  %1361 = load i64, i64* %21, align 8, !dbg !2303
  %1362 = load i64, i64* %12, align 8, !dbg !2303
  %1363 = icmp ult i64 %1361, %1362, !dbg !2303
  %1364 = load i32, i32* @x.37
  %1365 = load i32, i32* @y.38
  %1366 = sub i32 %1364, 1
  %1367 = mul i32 %1364, %1366
  %1368 = urem i32 %1367, 2
  %1369 = icmp eq i32 %1368, 0
  %1370 = icmp slt i32 %1365, 10
  %1371 = or i1 %1369, %1370
  br i1 %1371, label %originalBBpart2322, label %originalBB320alteredBB

originalBBpart2322:                               ; preds = %originalBB320
  br i1 %1363, label %1372, label %1376, !dbg !2306

1372:                                             ; preds = %originalBBpart2322
  %1373 = load i8*, i8** %11, align 8, !dbg !2303
  %1374 = load i64, i64* %21, align 8, !dbg !2303
  %1375 = getelementptr inbounds i8, i8* %1373, i64 %1374, !dbg !2303
  store i8 34, i8* %1375, align 1, !dbg !2303
  br label %1376, !dbg !2303

1376:                                             ; preds = %1372, %originalBBpart2322
  %1377 = load i32, i32* @x.37
  %1378 = load i32, i32* @y.38
  %1379 = sub i32 %1377, 1
  %1380 = mul i32 %1377, %1379
  %1381 = urem i32 %1380, 2
  %1382 = icmp eq i32 %1381, 0
  %1383 = icmp slt i32 %1378, 10
  %1384 = or i1 %1382, %1383
  br i1 %1384, label %originalBB324, label %originalBB324alteredBB

originalBB324:                                    ; preds = %1376, %originalBB324alteredBB
  %1385 = load i64, i64* %21, align 8, !dbg !2306
  %1386 = add i64 %1385, 1, !dbg !2306
  store i64 %1386, i64* %21, align 8, !dbg !2306
  %1387 = load i32, i32* @x.37
  %1388 = load i32, i32* @y.38
  %1389 = sub i32 %1387, 1
  %1390 = mul i32 %1387, %1389
  %1391 = urem i32 %1390, 2
  %1392 = icmp eq i32 %1391, 0
  %1393 = icmp slt i32 %1388, 10
  %1394 = or i1 %1392, %1393
  br i1 %1394, label %originalBBpart2332, label %originalBB324alteredBB

originalBBpart2332:                               ; preds = %originalBB324
  br label %1395, !dbg !2306

1395:                                             ; preds = %originalBBpart2332
  %1396 = load i32, i32* @x.37
  %1397 = load i32, i32* @y.38
  %1398 = sub i32 %1396, 1
  %1399 = mul i32 %1396, %1398
  %1400 = urem i32 %1399, 2
  %1401 = icmp eq i32 %1400, 0
  %1402 = icmp slt i32 %1397, 10
  %1403 = or i1 %1401, %1402
  br i1 %1403, label %originalBB334, label %originalBB334alteredBB

originalBB334:                                    ; preds = %1395, %originalBB334alteredBB
  %1404 = load i32, i32* @x.37
  %1405 = load i32, i32* @y.38
  %1406 = sub i32 %1404, 1
  %1407 = mul i32 %1404, %1406
  %1408 = urem i32 %1407, 2
  %1409 = icmp eq i32 %1408, 0
  %1410 = icmp slt i32 %1405, 10
  %1411 = or i1 %1409, %1410
  br i1 %1411, label %originalBBpart2336, label %originalBB334alteredBB

originalBBpart2336:                               ; preds = %originalBB334
  br label %1412, !dbg !2307

1412:                                             ; preds = %originalBBpart2336
  %1413 = load i64, i64* %21, align 8, !dbg !2308
  %1414 = load i64, i64* %12, align 8, !dbg !2308
  %1415 = icmp ult i64 %1413, %1414, !dbg !2308
  br i1 %1415, label %1416, label %1436, !dbg !2311

1416:                                             ; preds = %1412
  %1417 = load i32, i32* @x.37
  %1418 = load i32, i32* @y.38
  %1419 = sub i32 %1417, 1
  %1420 = mul i32 %1417, %1419
  %1421 = urem i32 %1420, 2
  %1422 = icmp eq i32 %1421, 0
  %1423 = icmp slt i32 %1418, 10
  %1424 = or i1 %1422, %1423
  br i1 %1424, label %originalBB338, label %originalBB338alteredBB

originalBB338:                                    ; preds = %1416, %originalBB338alteredBB
  %1425 = load i8*, i8** %11, align 8, !dbg !2308
  %1426 = load i64, i64* %21, align 8, !dbg !2308
  %1427 = getelementptr inbounds i8, i8* %1425, i64 %1426, !dbg !2308
  store i8 63, i8* %1427, align 1, !dbg !2308
  %1428 = load i32, i32* @x.37
  %1429 = load i32, i32* @y.38
  %1430 = sub i32 %1428, 1
  %1431 = mul i32 %1428, %1430
  %1432 = urem i32 %1431, 2
  %1433 = icmp eq i32 %1432, 0
  %1434 = icmp slt i32 %1429, 10
  %1435 = or i1 %1433, %1434
  br i1 %1435, label %originalBBpart2340, label %originalBB338alteredBB

originalBBpart2340:                               ; preds = %originalBB338
  br label %1436, !dbg !2308

1436:                                             ; preds = %originalBBpart2340, %1412
  %1437 = load i64, i64* %21, align 8, !dbg !2311
  %1438 = add i64 %1437, 1, !dbg !2311
  store i64 %1438, i64* %21, align 8, !dbg !2311
  br label %1439, !dbg !2311

1439:                                             ; preds = %1436
  br label %1441, !dbg !2312

1440:                                             ; preds = %originalBBpart2267
  br label %1441, !dbg !2313

1441:                                             ; preds = %1440, %1439
  br label %1442, !dbg !2314

1442:                                             ; preds = %1441, %1173, %originalBBpart2256, %originalBBpart2244
  %1443 = load i32, i32* @x.37
  %1444 = load i32, i32* @y.38
  %1445 = sub i32 %1443, 1
  %1446 = mul i32 %1443, %1445
  %1447 = urem i32 %1446, 2
  %1448 = icmp eq i32 %1447, 0
  %1449 = icmp slt i32 %1444, 10
  %1450 = or i1 %1448, %1449
  br i1 %1450, label %originalBB342, label %originalBB342alteredBB

originalBB342:                                    ; preds = %1442, %originalBB342alteredBB
  %1451 = load i32, i32* @x.37
  %1452 = load i32, i32* @y.38
  %1453 = sub i32 %1451, 1
  %1454 = mul i32 %1451, %1453
  %1455 = urem i32 %1454, 2
  %1456 = icmp eq i32 %1455, 0
  %1457 = icmp slt i32 %1452, 10
  %1458 = or i1 %1456, %1457
  br i1 %1458, label %originalBBpart2344, label %originalBB342alteredBB

originalBBpart2344:                               ; preds = %originalBB342
  br label %1460, !dbg !2315

1459:                                             ; preds = %originalBBpart2225
  br label %1460, !dbg !2316

1460:                                             ; preds = %1459, %originalBBpart2344, %1131
  %1461 = load i32, i32* @x.37
  %1462 = load i32, i32* @y.38
  %1463 = sub i32 %1461, 1
  %1464 = mul i32 %1461, %1463
  %1465 = urem i32 %1464, 2
  %1466 = icmp eq i32 %1465, 0
  %1467 = icmp slt i32 %1462, 10
  %1468 = or i1 %1466, %1467
  br i1 %1468, label %originalBB346, label %originalBB346alteredBB

originalBB346:                                    ; preds = %1460, %originalBB346alteredBB
  %1469 = load i32, i32* @x.37
  %1470 = load i32, i32* @y.38
  %1471 = sub i32 %1469, 1
  %1472 = mul i32 %1469, %1471
  %1473 = urem i32 %1472, 2
  %1474 = icmp eq i32 %1473, 0
  %1475 = icmp slt i32 %1470, 10
  %1476 = or i1 %1474, %1475
  br i1 %1476, label %originalBBpart2348, label %originalBB346alteredBB

originalBBpart2348:                               ; preds = %originalBB346
  br label %3353, !dbg !2317

1477:                                             ; preds = %originalBBpart2119
  %1478 = load i32, i32* @x.37
  %1479 = load i32, i32* @y.38
  %1480 = sub i32 %1478, 1
  %1481 = mul i32 %1478, %1480
  %1482 = urem i32 %1481, 2
  %1483 = icmp eq i32 %1482, 0
  %1484 = icmp slt i32 %1479, 10
  %1485 = or i1 %1483, %1484
  br i1 %1485, label %originalBB350, label %originalBB350alteredBB

originalBB350:                                    ; preds = %1477, %originalBB350alteredBB
  store i8 97, i8* %32, align 1, !dbg !2318
  %1486 = load i32, i32* @x.37
  %1487 = load i32, i32* @y.38
  %1488 = sub i32 %1486, 1
  %1489 = mul i32 %1486, %1488
  %1490 = urem i32 %1489, 2
  %1491 = icmp eq i32 %1490, 0
  %1492 = icmp slt i32 %1487, 10
  %1493 = or i1 %1491, %1492
  br i1 %1493, label %originalBBpart2352, label %originalBB350alteredBB

originalBBpart2352:                               ; preds = %originalBB350
  br label %1736, !dbg !2319

1494:                                             ; preds = %originalBBpart2119
  %1495 = load i32, i32* @x.37
  %1496 = load i32, i32* @y.38
  %1497 = sub i32 %1495, 1
  %1498 = mul i32 %1495, %1497
  %1499 = urem i32 %1498, 2
  %1500 = icmp eq i32 %1499, 0
  %1501 = icmp slt i32 %1496, 10
  %1502 = or i1 %1500, %1501
  br i1 %1502, label %originalBB354, label %originalBB354alteredBB

originalBB354:                                    ; preds = %1494, %originalBB354alteredBB
  store i8 98, i8* %32, align 1, !dbg !2320
  %1503 = load i32, i32* @x.37
  %1504 = load i32, i32* @y.38
  %1505 = sub i32 %1503, 1
  %1506 = mul i32 %1503, %1505
  %1507 = urem i32 %1506, 2
  %1508 = icmp eq i32 %1507, 0
  %1509 = icmp slt i32 %1504, 10
  %1510 = or i1 %1508, %1509
  br i1 %1510, label %originalBBpart2356, label %originalBB354alteredBB

originalBBpart2356:                               ; preds = %originalBB354
  br label %1736, !dbg !2321

1511:                                             ; preds = %originalBBpart2119
  %1512 = load i32, i32* @x.37
  %1513 = load i32, i32* @y.38
  %1514 = sub i32 %1512, 1
  %1515 = mul i32 %1512, %1514
  %1516 = urem i32 %1515, 2
  %1517 = icmp eq i32 %1516, 0
  %1518 = icmp slt i32 %1513, 10
  %1519 = or i1 %1517, %1518
  br i1 %1519, label %originalBB358, label %originalBB358alteredBB

originalBB358:                                    ; preds = %1511, %originalBB358alteredBB
  store i8 102, i8* %32, align 1, !dbg !2322
  %1520 = load i32, i32* @x.37
  %1521 = load i32, i32* @y.38
  %1522 = sub i32 %1520, 1
  %1523 = mul i32 %1520, %1522
  %1524 = urem i32 %1523, 2
  %1525 = icmp eq i32 %1524, 0
  %1526 = icmp slt i32 %1521, 10
  %1527 = or i1 %1525, %1526
  br i1 %1527, label %originalBBpart2360, label %originalBB358alteredBB

originalBBpart2360:                               ; preds = %originalBB358
  br label %1736, !dbg !2323

1528:                                             ; preds = %originalBBpart2119
  %1529 = load i32, i32* @x.37
  %1530 = load i32, i32* @y.38
  %1531 = sub i32 %1529, 1
  %1532 = mul i32 %1529, %1531
  %1533 = urem i32 %1532, 2
  %1534 = icmp eq i32 %1533, 0
  %1535 = icmp slt i32 %1530, 10
  %1536 = or i1 %1534, %1535
  br i1 %1536, label %originalBB362, label %originalBB362alteredBB

originalBB362:                                    ; preds = %1528, %originalBB362alteredBB
  store i8 110, i8* %32, align 1, !dbg !2324
  %1537 = load i32, i32* @x.37
  %1538 = load i32, i32* @y.38
  %1539 = sub i32 %1537, 1
  %1540 = mul i32 %1537, %1539
  %1541 = urem i32 %1540, 2
  %1542 = icmp eq i32 %1541, 0
  %1543 = icmp slt i32 %1538, 10
  %1544 = or i1 %1542, %1543
  br i1 %1544, label %originalBBpart2364, label %originalBB362alteredBB

originalBBpart2364:                               ; preds = %originalBB362
  br label %1696, !dbg !2325

1545:                                             ; preds = %originalBBpart2119
  store i8 114, i8* %32, align 1, !dbg !2326
  br label %1696, !dbg !2327

1546:                                             ; preds = %originalBBpart2119
  store i8 116, i8* %32, align 1, !dbg !2328
  br label %1696, !dbg !2329

1547:                                             ; preds = %originalBBpart2119
  %1548 = load i32, i32* @x.37
  %1549 = load i32, i32* @y.38
  %1550 = sub i32 %1548, 1
  %1551 = mul i32 %1548, %1550
  %1552 = urem i32 %1551, 2
  %1553 = icmp eq i32 %1552, 0
  %1554 = icmp slt i32 %1549, 10
  %1555 = or i1 %1553, %1554
  br i1 %1555, label %originalBB366, label %originalBB366alteredBB

originalBB366:                                    ; preds = %1547, %originalBB366alteredBB
  store i8 118, i8* %32, align 1, !dbg !2330
  %1556 = load i32, i32* @x.37
  %1557 = load i32, i32* @y.38
  %1558 = sub i32 %1556, 1
  %1559 = mul i32 %1556, %1558
  %1560 = urem i32 %1559, 2
  %1561 = icmp eq i32 %1560, 0
  %1562 = icmp slt i32 %1557, 10
  %1563 = or i1 %1561, %1562
  br i1 %1563, label %originalBBpart2368, label %originalBB366alteredBB

originalBBpart2368:                               ; preds = %originalBB366
  br label %1736, !dbg !2331

1564:                                             ; preds = %originalBBpart2119
  %1565 = load i32, i32* @x.37
  %1566 = load i32, i32* @y.38
  %1567 = sub i32 %1565, 1
  %1568 = mul i32 %1565, %1567
  %1569 = urem i32 %1568, 2
  %1570 = icmp eq i32 %1569, 0
  %1571 = icmp slt i32 %1566, 10
  %1572 = or i1 %1570, %1571
  br i1 %1572, label %originalBB370, label %originalBB370alteredBB

originalBB370:                                    ; preds = %1564, %originalBB370alteredBB
  %1573 = load i8, i8* %31, align 1, !dbg !2332
  store i8 %1573, i8* %32, align 1, !dbg !2333
  %1574 = load i32, i32* %15, align 4, !dbg !2334
  %1575 = icmp eq i32 %1574, 2, !dbg !2336
  %1576 = load i32, i32* @x.37
  %1577 = load i32, i32* @y.38
  %1578 = sub i32 %1576, 1
  %1579 = mul i32 %1576, %1578
  %1580 = urem i32 %1579, 2
  %1581 = icmp eq i32 %1580, 0
  %1582 = icmp slt i32 %1577, 10
  %1583 = or i1 %1581, %1582
  br i1 %1583, label %originalBBpart2372, label %originalBB370alteredBB

originalBBpart2372:                               ; preds = %originalBB370
  br i1 %1575, label %1584, label %1621, !dbg !2337

1584:                                             ; preds = %originalBBpart2372
  %1585 = load i32, i32* @x.37
  %1586 = load i32, i32* @y.38
  %1587 = sub i32 %1585, 1
  %1588 = mul i32 %1585, %1587
  %1589 = urem i32 %1588, 2
  %1590 = icmp eq i32 %1589, 0
  %1591 = icmp slt i32 %1586, 10
  %1592 = or i1 %1590, %1591
  br i1 %1592, label %originalBB374, label %originalBB374alteredBB

originalBB374:                                    ; preds = %1584, %originalBB374alteredBB
  %1593 = load i8, i8* %27, align 1, !dbg !2338
  %1594 = trunc i8 %1593 to i1, !dbg !2338
  %1595 = load i32, i32* @x.37
  %1596 = load i32, i32* @y.38
  %1597 = sub i32 %1595, 1
  %1598 = mul i32 %1595, %1597
  %1599 = urem i32 %1598, 2
  %1600 = icmp eq i32 %1599, 0
  %1601 = icmp slt i32 %1596, 10
  %1602 = or i1 %1600, %1601
  br i1 %1602, label %originalBBpart2376, label %originalBB374alteredBB

originalBBpart2376:                               ; preds = %originalBB374
  br i1 %1594, label %1603, label %1620, !dbg !2341

1603:                                             ; preds = %originalBBpart2376
  %1604 = load i32, i32* @x.37
  %1605 = load i32, i32* @y.38
  %1606 = sub i32 %1604, 1
  %1607 = mul i32 %1604, %1606
  %1608 = urem i32 %1607, 2
  %1609 = icmp eq i32 %1608, 0
  %1610 = icmp slt i32 %1605, 10
  %1611 = or i1 %1609, %1610
  br i1 %1611, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %1603, %originalBB378alteredBB
  %1612 = load i32, i32* @x.37
  %1613 = load i32, i32* @y.38
  %1614 = sub i32 %1612, 1
  %1615 = mul i32 %1612, %1614
  %1616 = urem i32 %1615, 2
  %1617 = icmp eq i32 %1616, 0
  %1618 = icmp slt i32 %1613, 10
  %1619 = or i1 %1617, %1618
  br i1 %1619, label %originalBBpart2380, label %originalBB378alteredBB

originalBBpart2380:                               ; preds = %originalBB378
  br label %4222, !dbg !2342

1620:                                             ; preds = %originalBBpart2376
  br label %3654, !dbg !2343

1621:                                             ; preds = %originalBBpart2372
  %1622 = load i32, i32* @x.37
  %1623 = load i32, i32* @y.38
  %1624 = sub i32 %1622, 1
  %1625 = mul i32 %1622, %1624
  %1626 = urem i32 %1625, 2
  %1627 = icmp eq i32 %1626, 0
  %1628 = icmp slt i32 %1623, 10
  %1629 = or i1 %1627, %1628
  br i1 %1629, label %originalBB382, label %originalBB382alteredBB

originalBB382:                                    ; preds = %1621, %originalBB382alteredBB
  %1630 = load i8, i8* %25, align 1, !dbg !2344
  %1631 = trunc i8 %1630 to i1, !dbg !2344
  %1632 = load i32, i32* @x.37
  %1633 = load i32, i32* @y.38
  %1634 = sub i32 %1632, 1
  %1635 = mul i32 %1632, %1634
  %1636 = urem i32 %1635, 2
  %1637 = icmp eq i32 %1636, 0
  %1638 = icmp slt i32 %1633, 10
  %1639 = or i1 %1637, %1638
  br i1 %1639, label %originalBBpart2384, label %originalBB382alteredBB

originalBBpart2384:                               ; preds = %originalBB382
  br i1 %1631, label %1640, label %1679, !dbg !2346

1640:                                             ; preds = %originalBBpart2384
  %1641 = load i32, i32* @x.37
  %1642 = load i32, i32* @y.38
  %1643 = sub i32 %1641, 1
  %1644 = mul i32 %1641, %1643
  %1645 = urem i32 %1644, 2
  %1646 = icmp eq i32 %1645, 0
  %1647 = icmp slt i32 %1642, 10
  %1648 = or i1 %1646, %1647
  br i1 %1648, label %originalBB386, label %originalBB386alteredBB

originalBB386:                                    ; preds = %1640, %originalBB386alteredBB
  %1649 = load i8, i8* %27, align 1, !dbg !2347
  %1650 = trunc i8 %1649 to i1, !dbg !2347
  %1651 = load i32, i32* @x.37
  %1652 = load i32, i32* @y.38
  %1653 = sub i32 %1651, 1
  %1654 = mul i32 %1651, %1653
  %1655 = urem i32 %1654, 2
  %1656 = icmp eq i32 %1655, 0
  %1657 = icmp slt i32 %1652, 10
  %1658 = or i1 %1656, %1657
  br i1 %1658, label %originalBBpart2388, label %originalBB386alteredBB

originalBBpart2388:                               ; preds = %originalBB386
  br i1 %1650, label %1659, label %1679, !dbg !2348

1659:                                             ; preds = %originalBBpart2388
  %1660 = load i32, i32* @x.37
  %1661 = load i32, i32* @y.38
  %1662 = sub i32 %1660, 1
  %1663 = mul i32 %1660, %1662
  %1664 = urem i32 %1663, 2
  %1665 = icmp eq i32 %1664, 0
  %1666 = icmp slt i32 %1661, 10
  %1667 = or i1 %1665, %1666
  br i1 %1667, label %originalBB390, label %originalBB390alteredBB

originalBB390:                                    ; preds = %1659, %originalBB390alteredBB
  %1668 = load i64, i64* %24, align 8, !dbg !2349
  %1669 = icmp ne i64 %1668, 0, !dbg !2349
  %1670 = load i32, i32* @x.37
  %1671 = load i32, i32* @y.38
  %1672 = sub i32 %1670, 1
  %1673 = mul i32 %1670, %1672
  %1674 = urem i32 %1673, 2
  %1675 = icmp eq i32 %1674, 0
  %1676 = icmp slt i32 %1671, 10
  %1677 = or i1 %1675, %1676
  br i1 %1677, label %originalBBpart2392, label %originalBB390alteredBB

originalBBpart2392:                               ; preds = %originalBB390
  br i1 %1669, label %1678, label %1679, !dbg !2350

1678:                                             ; preds = %originalBBpart2392
  br label %3654, !dbg !2351

1679:                                             ; preds = %originalBBpart2392, %originalBBpart2388, %originalBBpart2384
  %1680 = load i32, i32* @x.37
  %1681 = load i32, i32* @y.38
  %1682 = sub i32 %1680, 1
  %1683 = mul i32 %1680, %1682
  %1684 = urem i32 %1683, 2
  %1685 = icmp eq i32 %1684, 0
  %1686 = icmp slt i32 %1681, 10
  %1687 = or i1 %1685, %1686
  br i1 %1687, label %originalBB394, label %originalBB394alteredBB

originalBB394:                                    ; preds = %1679, %originalBB394alteredBB
  %1688 = load i32, i32* @x.37
  %1689 = load i32, i32* @y.38
  %1690 = sub i32 %1688, 1
  %1691 = mul i32 %1688, %1690
  %1692 = urem i32 %1691, 2
  %1693 = icmp eq i32 %1692, 0
  %1694 = icmp slt i32 %1689, 10
  %1695 = or i1 %1693, %1694
  br i1 %1695, label %originalBBpart2396, label %originalBB394alteredBB

originalBBpart2396:                               ; preds = %originalBB394
  br label %1696, !dbg !2349

1696:                                             ; preds = %originalBBpart2396, %1546, %1545, %originalBBpart2364
  call void @llvm.dbg.label(metadata !2352), !dbg !2353
  %1697 = load i32, i32* %15, align 4, !dbg !2354
  %1698 = icmp eq i32 %1697, 2, !dbg !2356
  br i1 %1698, label %1699, label %1719, !dbg !2357

1699:                                             ; preds = %1696
  %1700 = load i8, i8* %27, align 1, !dbg !2358
  %1701 = trunc i8 %1700 to i1, !dbg !2358
  br i1 %1701, label %1702, label %1719, !dbg !2359

1702:                                             ; preds = %1699
  %1703 = load i32, i32* @x.37
  %1704 = load i32, i32* @y.38
  %1705 = sub i32 %1703, 1
  %1706 = mul i32 %1703, %1705
  %1707 = urem i32 %1706, 2
  %1708 = icmp eq i32 %1707, 0
  %1709 = icmp slt i32 %1704, 10
  %1710 = or i1 %1708, %1709
  br i1 %1710, label %originalBB398, label %originalBB398alteredBB

originalBB398:                                    ; preds = %1702, %originalBB398alteredBB
  %1711 = load i32, i32* @x.37
  %1712 = load i32, i32* @y.38
  %1713 = sub i32 %1711, 1
  %1714 = mul i32 %1711, %1713
  %1715 = urem i32 %1714, 2
  %1716 = icmp eq i32 %1715, 0
  %1717 = icmp slt i32 %1712, 10
  %1718 = or i1 %1716, %1717
  br i1 %1718, label %originalBBpart2400, label %originalBB398alteredBB

originalBBpart2400:                               ; preds = %originalBB398
  br label %4222, !dbg !2360

1719:                                             ; preds = %1699, %1696
  %1720 = load i32, i32* @x.37
  %1721 = load i32, i32* @y.38
  %1722 = sub i32 %1720, 1
  %1723 = mul i32 %1720, %1722
  %1724 = urem i32 %1723, 2
  %1725 = icmp eq i32 %1724, 0
  %1726 = icmp slt i32 %1721, 10
  %1727 = or i1 %1725, %1726
  br i1 %1727, label %originalBB402, label %originalBB402alteredBB

originalBB402:                                    ; preds = %1719, %originalBB402alteredBB
  %1728 = load i32, i32* @x.37
  %1729 = load i32, i32* @y.38
  %1730 = sub i32 %1728, 1
  %1731 = mul i32 %1728, %1730
  %1732 = urem i32 %1731, 2
  %1733 = icmp eq i32 %1732, 0
  %1734 = icmp slt i32 %1729, 10
  %1735 = or i1 %1733, %1734
  br i1 %1735, label %originalBBpart2404, label %originalBB402alteredBB

originalBBpart2404:                               ; preds = %originalBB402
  br label %1736, !dbg !2358

1736:                                             ; preds = %originalBBpart2404, %originalBBpart2368, %originalBBpart2360, %originalBBpart2356, %originalBBpart2352
  call void @llvm.dbg.label(metadata !2361), !dbg !2362
  %1737 = load i32, i32* @x.37
  %1738 = load i32, i32* @y.38
  %1739 = sub i32 %1737, 1
  %1740 = mul i32 %1737, %1739
  %1741 = urem i32 %1740, 2
  %1742 = icmp eq i32 %1741, 0
  %1743 = icmp slt i32 %1738, 10
  %1744 = or i1 %1742, %1743
  br i1 %1744, label %originalBB406, label %originalBB406alteredBB

originalBB406:                                    ; preds = %1736, %originalBB406alteredBB
  %1745 = load i8, i8* %25, align 1, !dbg !2363
  %1746 = trunc i8 %1745 to i1, !dbg !2363
  %1747 = load i32, i32* @x.37
  %1748 = load i32, i32* @y.38
  %1749 = sub i32 %1747, 1
  %1750 = mul i32 %1747, %1749
  %1751 = urem i32 %1750, 2
  %1752 = icmp eq i32 %1751, 0
  %1753 = icmp slt i32 %1748, 10
  %1754 = or i1 %1752, %1753
  br i1 %1754, label %originalBBpart2408, label %originalBB406alteredBB

originalBBpart2408:                               ; preds = %originalBB406
  br i1 %1746, label %1755, label %1773, !dbg !2365

1755:                                             ; preds = %originalBBpart2408
  %1756 = load i32, i32* @x.37
  %1757 = load i32, i32* @y.38
  %1758 = sub i32 %1756, 1
  %1759 = mul i32 %1756, %1758
  %1760 = urem i32 %1759, 2
  %1761 = icmp eq i32 %1760, 0
  %1762 = icmp slt i32 %1757, 10
  %1763 = or i1 %1761, %1762
  br i1 %1763, label %originalBB410, label %originalBB410alteredBB

originalBB410:                                    ; preds = %1755, %originalBB410alteredBB
  %1764 = load i8, i8* %32, align 1, !dbg !2366
  store i8 %1764, i8* %31, align 1, !dbg !2368
  %1765 = load i32, i32* @x.37
  %1766 = load i32, i32* @y.38
  %1767 = sub i32 %1765, 1
  %1768 = mul i32 %1765, %1767
  %1769 = urem i32 %1768, 2
  %1770 = icmp eq i32 %1769, 0
  %1771 = icmp slt i32 %1766, 10
  %1772 = or i1 %1770, %1771
  br i1 %1772, label %originalBBpart2412, label %originalBB410alteredBB

originalBBpart2412:                               ; preds = %originalBB410
  br label %3416, !dbg !2369

1773:                                             ; preds = %originalBBpart2408
  br label %3353, !dbg !2370

1774:                                             ; preds = %originalBBpart2119, %originalBBpart2119
  %1775 = load i64, i64* %14, align 8, !dbg !2371
  %1776 = icmp eq i64 %1775, -1, !dbg !2373
  br i1 %1776, label %1777, label %1783, !dbg !2374

1777:                                             ; preds = %1774
  %1778 = load i8*, i8** %13, align 8, !dbg !2375
  %1779 = getelementptr inbounds i8, i8* %1778, i64 1, !dbg !2375
  %1780 = load i8, i8* %1779, align 1, !dbg !2375
  %1781 = sext i8 %1780 to i32, !dbg !2375
  %1782 = icmp eq i32 %1781, 0, !dbg !2376
  br i1 %1782, label %1803, label %1802, !dbg !2371

1783:                                             ; preds = %1774
  %1784 = load i32, i32* @x.37
  %1785 = load i32, i32* @y.38
  %1786 = sub i32 %1784, 1
  %1787 = mul i32 %1784, %1786
  %1788 = urem i32 %1787, 2
  %1789 = icmp eq i32 %1788, 0
  %1790 = icmp slt i32 %1785, 10
  %1791 = or i1 %1789, %1790
  br i1 %1791, label %originalBB414, label %originalBB414alteredBB

originalBB414:                                    ; preds = %1783, %originalBB414alteredBB
  %1792 = load i64, i64* %14, align 8, !dbg !2377
  %1793 = icmp eq i64 %1792, 1, !dbg !2378
  %1794 = load i32, i32* @x.37
  %1795 = load i32, i32* @y.38
  %1796 = sub i32 %1794, 1
  %1797 = mul i32 %1794, %1796
  %1798 = urem i32 %1797, 2
  %1799 = icmp eq i32 %1798, 0
  %1800 = icmp slt i32 %1795, 10
  %1801 = or i1 %1799, %1800
  br i1 %1801, label %originalBBpart2416, label %originalBB414alteredBB

originalBBpart2416:                               ; preds = %originalBB414
  br i1 %1793, label %1803, label %1802, !dbg !2374

1802:                                             ; preds = %originalBBpart2416, %1777
  br label %3353, !dbg !2379

1803:                                             ; preds = %originalBBpart2416, %1777
  %1804 = load i32, i32* @x.37
  %1805 = load i32, i32* @y.38
  %1806 = sub i32 %1804, 1
  %1807 = mul i32 %1804, %1806
  %1808 = urem i32 %1807, 2
  %1809 = icmp eq i32 %1808, 0
  %1810 = icmp slt i32 %1805, 10
  %1811 = or i1 %1809, %1810
  br i1 %1811, label %originalBB418, label %originalBB418alteredBB

originalBB418:                                    ; preds = %1803, %originalBB418alteredBB
  %1812 = load i32, i32* @x.37
  %1813 = load i32, i32* @y.38
  %1814 = sub i32 %1812, 1
  %1815 = mul i32 %1812, %1814
  %1816 = urem i32 %1815, 2
  %1817 = icmp eq i32 %1816, 0
  %1818 = icmp slt i32 %1813, 10
  %1819 = or i1 %1817, %1818
  br i1 %1819, label %originalBBpart2420, label %originalBB418alteredBB

originalBBpart2420:                               ; preds = %originalBB418
  br label %1820, !dbg !2380

1820:                                             ; preds = %originalBBpart2420, %originalBBpart2119, %originalBBpart2119
  %1821 = load i32, i32* @x.37
  %1822 = load i32, i32* @y.38
  %1823 = sub i32 %1821, 1
  %1824 = mul i32 %1821, %1823
  %1825 = urem i32 %1824, 2
  %1826 = icmp eq i32 %1825, 0
  %1827 = icmp slt i32 %1822, 10
  %1828 = or i1 %1826, %1827
  br i1 %1828, label %originalBB422, label %originalBB422alteredBB

originalBB422:                                    ; preds = %1820, %originalBB422alteredBB
  %1829 = load i64, i64* %20, align 8, !dbg !2381
  %1830 = icmp ne i64 %1829, 0, !dbg !2383
  %1831 = load i32, i32* @x.37
  %1832 = load i32, i32* @y.38
  %1833 = sub i32 %1831, 1
  %1834 = mul i32 %1831, %1833
  %1835 = urem i32 %1834, 2
  %1836 = icmp eq i32 %1835, 0
  %1837 = icmp slt i32 %1832, 10
  %1838 = or i1 %1836, %1837
  br i1 %1838, label %originalBBpart2424, label %originalBB422alteredBB

originalBBpart2424:                               ; preds = %originalBB422
  br i1 %1830, label %1839, label %1840, !dbg !2384

1839:                                             ; preds = %originalBBpart2424
  br label %3353, !dbg !2385

1840:                                             ; preds = %originalBBpart2424
  br label %1841, !dbg !2386

1841:                                             ; preds = %1840, %originalBBpart2119
  %1842 = load i32, i32* @x.37
  %1843 = load i32, i32* @y.38
  %1844 = sub i32 %1842, 1
  %1845 = mul i32 %1842, %1844
  %1846 = urem i32 %1845, 2
  %1847 = icmp eq i32 %1846, 0
  %1848 = icmp slt i32 %1843, 10
  %1849 = or i1 %1847, %1848
  br i1 %1849, label %originalBB426, label %originalBB426alteredBB

originalBB426:                                    ; preds = %1841, %originalBB426alteredBB
  store i8 1, i8* %35, align 1, !dbg !2387
  %1850 = load i32, i32* @x.37
  %1851 = load i32, i32* @y.38
  %1852 = sub i32 %1850, 1
  %1853 = mul i32 %1850, %1852
  %1854 = urem i32 %1853, 2
  %1855 = icmp eq i32 %1854, 0
  %1856 = icmp slt i32 %1851, 10
  %1857 = or i1 %1855, %1856
  br i1 %1857, label %originalBBpart2428, label %originalBB426alteredBB

originalBBpart2428:                               ; preds = %originalBB426
  br label %1858, !dbg !2388

1858:                                             ; preds = %originalBBpart2428, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119
  %1859 = load i32, i32* %15, align 4, !dbg !2389
  %1860 = icmp eq i32 %1859, 2, !dbg !2391
  br i1 %1860, label %1861, label %1897, !dbg !2392

1861:                                             ; preds = %1858
  %1862 = load i32, i32* @x.37
  %1863 = load i32, i32* @y.38
  %1864 = sub i32 %1862, 1
  %1865 = mul i32 %1862, %1864
  %1866 = urem i32 %1865, 2
  %1867 = icmp eq i32 %1866, 0
  %1868 = icmp slt i32 %1863, 10
  %1869 = or i1 %1867, %1868
  br i1 %1869, label %originalBB430, label %originalBB430alteredBB

originalBB430:                                    ; preds = %1861, %originalBB430alteredBB
  %1870 = load i8, i8* %27, align 1, !dbg !2393
  %1871 = trunc i8 %1870 to i1, !dbg !2393
  %1872 = load i32, i32* @x.37
  %1873 = load i32, i32* @y.38
  %1874 = sub i32 %1872, 1
  %1875 = mul i32 %1872, %1874
  %1876 = urem i32 %1875, 2
  %1877 = icmp eq i32 %1876, 0
  %1878 = icmp slt i32 %1873, 10
  %1879 = or i1 %1877, %1878
  br i1 %1879, label %originalBBpart2432, label %originalBB430alteredBB

originalBBpart2432:                               ; preds = %originalBB430
  br i1 %1871, label %1880, label %1897, !dbg !2394

1880:                                             ; preds = %originalBBpart2432
  %1881 = load i32, i32* @x.37
  %1882 = load i32, i32* @y.38
  %1883 = sub i32 %1881, 1
  %1884 = mul i32 %1881, %1883
  %1885 = urem i32 %1884, 2
  %1886 = icmp eq i32 %1885, 0
  %1887 = icmp slt i32 %1882, 10
  %1888 = or i1 %1886, %1887
  br i1 %1888, label %originalBB434, label %originalBB434alteredBB

originalBB434:                                    ; preds = %1880, %originalBB434alteredBB
  %1889 = load i32, i32* @x.37
  %1890 = load i32, i32* @y.38
  %1891 = sub i32 %1889, 1
  %1892 = mul i32 %1889, %1891
  %1893 = urem i32 %1892, 2
  %1894 = icmp eq i32 %1893, 0
  %1895 = icmp slt i32 %1890, 10
  %1896 = or i1 %1894, %1895
  br i1 %1896, label %originalBBpart2436, label %originalBB434alteredBB

originalBBpart2436:                               ; preds = %originalBB434
  br label %4222, !dbg !2395

1897:                                             ; preds = %originalBBpart2432, %1858
  br label %3353, !dbg !2396

1898:                                             ; preds = %originalBBpart2119
  %1899 = load i32, i32* @x.37
  %1900 = load i32, i32* @y.38
  %1901 = sub i32 %1899, 1
  %1902 = mul i32 %1899, %1901
  %1903 = urem i32 %1902, 2
  %1904 = icmp eq i32 %1903, 0
  %1905 = icmp slt i32 %1900, 10
  %1906 = or i1 %1904, %1905
  br i1 %1906, label %originalBB438, label %originalBB438alteredBB

originalBB438:                                    ; preds = %1898, %originalBB438alteredBB
  store i8 1, i8* %29, align 1, !dbg !2397
  store i8 1, i8* %35, align 1, !dbg !2398
  %1907 = load i32, i32* %15, align 4, !dbg !2399
  %1908 = icmp eq i32 %1907, 2, !dbg !2401
  %1909 = load i32, i32* @x.37
  %1910 = load i32, i32* @y.38
  %1911 = sub i32 %1909, 1
  %1912 = mul i32 %1909, %1911
  %1913 = urem i32 %1912, 2
  %1914 = icmp eq i32 %1913, 0
  %1915 = icmp slt i32 %1910, 10
  %1916 = or i1 %1914, %1915
  br i1 %1916, label %originalBBpart2440, label %originalBB438alteredBB

originalBBpart2440:                               ; preds = %originalBB438
  br i1 %1908, label %1917, label %2078, !dbg !2402

1917:                                             ; preds = %originalBBpart2440
  %1918 = load i32, i32* @x.37
  %1919 = load i32, i32* @y.38
  %1920 = sub i32 %1918, 1
  %1921 = mul i32 %1918, %1920
  %1922 = urem i32 %1921, 2
  %1923 = icmp eq i32 %1922, 0
  %1924 = icmp slt i32 %1919, 10
  %1925 = or i1 %1923, %1924
  br i1 %1925, label %originalBB442, label %originalBB442alteredBB

originalBB442:                                    ; preds = %1917, %originalBB442alteredBB
  %1926 = load i8, i8* %27, align 1, !dbg !2403
  %1927 = trunc i8 %1926 to i1, !dbg !2403
  %1928 = load i32, i32* @x.37
  %1929 = load i32, i32* @y.38
  %1930 = sub i32 %1928, 1
  %1931 = mul i32 %1928, %1930
  %1932 = urem i32 %1931, 2
  %1933 = icmp eq i32 %1932, 0
  %1934 = icmp slt i32 %1929, 10
  %1935 = or i1 %1933, %1934
  br i1 %1935, label %originalBBpart2444, label %originalBB442alteredBB

originalBBpart2444:                               ; preds = %originalBB442
  br i1 %1927, label %1936, label %1937, !dbg !2406

1936:                                             ; preds = %originalBBpart2444
  br label %4222, !dbg !2407

1937:                                             ; preds = %originalBBpart2444
  %1938 = load i64, i64* %12, align 8, !dbg !2408
  %1939 = icmp ne i64 %1938, 0, !dbg !2408
  br i1 %1939, label %1940, label %1961, !dbg !2410

1940:                                             ; preds = %1937
  %1941 = load i64, i64* %22, align 8, !dbg !2411
  %1942 = icmp ne i64 %1941, 0, !dbg !2411
  br i1 %1942, label %1961, label %1943, !dbg !2412

1943:                                             ; preds = %1940
  %1944 = load i32, i32* @x.37
  %1945 = load i32, i32* @y.38
  %1946 = sub i32 %1944, 1
  %1947 = mul i32 %1944, %1946
  %1948 = urem i32 %1947, 2
  %1949 = icmp eq i32 %1948, 0
  %1950 = icmp slt i32 %1945, 10
  %1951 = or i1 %1949, %1950
  br i1 %1951, label %originalBB446, label %originalBB446alteredBB

originalBB446:                                    ; preds = %1943, %originalBB446alteredBB
  %1952 = load i64, i64* %12, align 8, !dbg !2413
  store i64 %1952, i64* %22, align 8, !dbg !2415
  store i64 0, i64* %12, align 8, !dbg !2416
  %1953 = load i32, i32* @x.37
  %1954 = load i32, i32* @y.38
  %1955 = sub i32 %1953, 1
  %1956 = mul i32 %1953, %1955
  %1957 = urem i32 %1956, 2
  %1958 = icmp eq i32 %1957, 0
  %1959 = icmp slt i32 %1954, 10
  %1960 = or i1 %1958, %1959
  br i1 %1960, label %originalBBpart2448, label %originalBB446alteredBB

originalBBpart2448:                               ; preds = %originalBB446
  br label %1961, !dbg !2417

1961:                                             ; preds = %originalBBpart2448, %1940, %1937
  %1962 = load i32, i32* @x.37
  %1963 = load i32, i32* @y.38
  %1964 = sub i32 %1962, 1
  %1965 = mul i32 %1962, %1964
  %1966 = urem i32 %1965, 2
  %1967 = icmp eq i32 %1966, 0
  %1968 = icmp slt i32 %1963, 10
  %1969 = or i1 %1967, %1968
  br i1 %1969, label %originalBB450, label %originalBB450alteredBB

originalBB450:                                    ; preds = %1961, %originalBB450alteredBB
  %1970 = load i32, i32* @x.37
  %1971 = load i32, i32* @y.38
  %1972 = sub i32 %1970, 1
  %1973 = mul i32 %1970, %1972
  %1974 = urem i32 %1973, 2
  %1975 = icmp eq i32 %1974, 0
  %1976 = icmp slt i32 %1971, 10
  %1977 = or i1 %1975, %1976
  br i1 %1977, label %originalBBpart2452, label %originalBB450alteredBB

originalBBpart2452:                               ; preds = %originalBB450
  br label %1978, !dbg !2418

1978:                                             ; preds = %originalBBpart2452
  %1979 = load i64, i64* %21, align 8, !dbg !2419
  %1980 = load i64, i64* %12, align 8, !dbg !2419
  %1981 = icmp ult i64 %1979, %1980, !dbg !2419
  br i1 %1981, label %1982, label %1986, !dbg !2422

1982:                                             ; preds = %1978
  %1983 = load i8*, i8** %11, align 8, !dbg !2419
  %1984 = load i64, i64* %21, align 8, !dbg !2419
  %1985 = getelementptr inbounds i8, i8* %1983, i64 %1984, !dbg !2419
  store i8 39, i8* %1985, align 1, !dbg !2419
  br label %1986, !dbg !2419

1986:                                             ; preds = %1982, %1978
  %1987 = load i64, i64* %21, align 8, !dbg !2422
  %1988 = add i64 %1987, 1, !dbg !2422
  store i64 %1988, i64* %21, align 8, !dbg !2422
  br label %1989, !dbg !2422

1989:                                             ; preds = %1986
  %1990 = load i32, i32* @x.37
  %1991 = load i32, i32* @y.38
  %1992 = sub i32 %1990, 1
  %1993 = mul i32 %1990, %1992
  %1994 = urem i32 %1993, 2
  %1995 = icmp eq i32 %1994, 0
  %1996 = icmp slt i32 %1991, 10
  %1997 = or i1 %1995, %1996
  br i1 %1997, label %originalBB454, label %originalBB454alteredBB

originalBB454:                                    ; preds = %1989, %originalBB454alteredBB
  %1998 = load i32, i32* @x.37
  %1999 = load i32, i32* @y.38
  %2000 = sub i32 %1998, 1
  %2001 = mul i32 %1998, %2000
  %2002 = urem i32 %2001, 2
  %2003 = icmp eq i32 %2002, 0
  %2004 = icmp slt i32 %1999, 10
  %2005 = or i1 %2003, %2004
  br i1 %2005, label %originalBBpart2456, label %originalBB454alteredBB

originalBBpart2456:                               ; preds = %originalBB454
  br label %2006, !dbg !2423

2006:                                             ; preds = %originalBBpart2456
  %2007 = load i64, i64* %21, align 8, !dbg !2424
  %2008 = load i64, i64* %12, align 8, !dbg !2424
  %2009 = icmp ult i64 %2007, %2008, !dbg !2424
  br i1 %2009, label %2010, label %2030, !dbg !2427

2010:                                             ; preds = %2006
  %2011 = load i32, i32* @x.37
  %2012 = load i32, i32* @y.38
  %2013 = sub i32 %2011, 1
  %2014 = mul i32 %2011, %2013
  %2015 = urem i32 %2014, 2
  %2016 = icmp eq i32 %2015, 0
  %2017 = icmp slt i32 %2012, 10
  %2018 = or i1 %2016, %2017
  br i1 %2018, label %originalBB458, label %originalBB458alteredBB

originalBB458:                                    ; preds = %2010, %originalBB458alteredBB
  %2019 = load i8*, i8** %11, align 8, !dbg !2424
  %2020 = load i64, i64* %21, align 8, !dbg !2424
  %2021 = getelementptr inbounds i8, i8* %2019, i64 %2020, !dbg !2424
  store i8 92, i8* %2021, align 1, !dbg !2424
  %2022 = load i32, i32* @x.37
  %2023 = load i32, i32* @y.38
  %2024 = sub i32 %2022, 1
  %2025 = mul i32 %2022, %2024
  %2026 = urem i32 %2025, 2
  %2027 = icmp eq i32 %2026, 0
  %2028 = icmp slt i32 %2023, 10
  %2029 = or i1 %2027, %2028
  br i1 %2029, label %originalBBpart2460, label %originalBB458alteredBB

originalBBpart2460:                               ; preds = %originalBB458
  br label %2030, !dbg !2424

2030:                                             ; preds = %originalBBpart2460, %2006
  %2031 = load i64, i64* %21, align 8, !dbg !2427
  %2032 = add i64 %2031, 1, !dbg !2427
  store i64 %2032, i64* %21, align 8, !dbg !2427
  br label %2033, !dbg !2427

2033:                                             ; preds = %2030
  br label %2034, !dbg !2428

2034:                                             ; preds = %2033
  %2035 = load i32, i32* @x.37
  %2036 = load i32, i32* @y.38
  %2037 = sub i32 %2035, 1
  %2038 = mul i32 %2035, %2037
  %2039 = urem i32 %2038, 2
  %2040 = icmp eq i32 %2039, 0
  %2041 = icmp slt i32 %2036, 10
  %2042 = or i1 %2040, %2041
  br i1 %2042, label %originalBB462, label %originalBB462alteredBB

originalBB462:                                    ; preds = %2034, %originalBB462alteredBB
  %2043 = load i64, i64* %21, align 8, !dbg !2429
  %2044 = load i64, i64* %12, align 8, !dbg !2429
  %2045 = icmp ult i64 %2043, %2044, !dbg !2429
  %2046 = load i32, i32* @x.37
  %2047 = load i32, i32* @y.38
  %2048 = sub i32 %2046, 1
  %2049 = mul i32 %2046, %2048
  %2050 = urem i32 %2049, 2
  %2051 = icmp eq i32 %2050, 0
  %2052 = icmp slt i32 %2047, 10
  %2053 = or i1 %2051, %2052
  br i1 %2053, label %originalBBpart2464, label %originalBB462alteredBB

originalBBpart2464:                               ; preds = %originalBB462
  br i1 %2045, label %2054, label %2074, !dbg !2432

2054:                                             ; preds = %originalBBpart2464
  %2055 = load i32, i32* @x.37
  %2056 = load i32, i32* @y.38
  %2057 = sub i32 %2055, 1
  %2058 = mul i32 %2055, %2057
  %2059 = urem i32 %2058, 2
  %2060 = icmp eq i32 %2059, 0
  %2061 = icmp slt i32 %2056, 10
  %2062 = or i1 %2060, %2061
  br i1 %2062, label %originalBB466, label %originalBB466alteredBB

originalBB466:                                    ; preds = %2054, %originalBB466alteredBB
  %2063 = load i8*, i8** %11, align 8, !dbg !2429
  %2064 = load i64, i64* %21, align 8, !dbg !2429
  %2065 = getelementptr inbounds i8, i8* %2063, i64 %2064, !dbg !2429
  store i8 39, i8* %2065, align 1, !dbg !2429
  %2066 = load i32, i32* @x.37
  %2067 = load i32, i32* @y.38
  %2068 = sub i32 %2066, 1
  %2069 = mul i32 %2066, %2068
  %2070 = urem i32 %2069, 2
  %2071 = icmp eq i32 %2070, 0
  %2072 = icmp slt i32 %2067, 10
  %2073 = or i1 %2071, %2072
  br i1 %2073, label %originalBBpart2468, label %originalBB466alteredBB

originalBBpart2468:                               ; preds = %originalBB466
  br label %2074, !dbg !2429

2074:                                             ; preds = %originalBBpart2468, %originalBBpart2464
  %2075 = load i64, i64* %21, align 8, !dbg !2432
  %2076 = add i64 %2075, 1, !dbg !2432
  store i64 %2076, i64* %21, align 8, !dbg !2432
  br label %2077, !dbg !2432

2077:                                             ; preds = %2074
  store i8 0, i8* %28, align 1, !dbg !2433
  br label %2078, !dbg !2434

2078:                                             ; preds = %2077, %originalBBpart2440
  br label %3353, !dbg !2435

2079:                                             ; preds = %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119, %originalBBpart2119
  store i8 1, i8* %35, align 1, !dbg !2436
  br label %3353, !dbg !2437

2080:                                             ; preds = %originalBBpart2119
  call void @llvm.dbg.declare(metadata i64* %36, metadata !2438, metadata !DIExpression()), !dbg !2440
  call void @llvm.dbg.declare(metadata i8* %37, metadata !2441, metadata !DIExpression()), !dbg !2442
  %2081 = load i32, i32* @x.37
  %2082 = load i32, i32* @y.38
  %2083 = sub i32 %2081, 1
  %2084 = mul i32 %2081, %2083
  %2085 = urem i32 %2084, 2
  %2086 = icmp eq i32 %2085, 0
  %2087 = icmp slt i32 %2082, 10
  %2088 = or i1 %2086, %2087
  br i1 %2088, label %originalBB470, label %originalBB470alteredBB

originalBB470:                                    ; preds = %2080, %originalBB470alteredBB
  %2089 = load i8, i8* %26, align 1, !dbg !2443
  %2090 = trunc i8 %2089 to i1, !dbg !2443
  %2091 = load i32, i32* @x.37
  %2092 = load i32, i32* @y.38
  %2093 = sub i32 %2091, 1
  %2094 = mul i32 %2091, %2093
  %2095 = urem i32 %2094, 2
  %2096 = icmp eq i32 %2095, 0
  %2097 = icmp slt i32 %2092, 10
  %2098 = or i1 %2096, %2097
  br i1 %2098, label %originalBBpart2472, label %originalBB470alteredBB

originalBBpart2472:                               ; preds = %originalBB470
  br i1 %2090, label %2099, label %2111, !dbg !2445

2099:                                             ; preds = %originalBBpart2472
  store i64 1, i64* %36, align 8, !dbg !2446
  %2100 = call i16** @__ctype_b_loc() #15, !dbg !2448
  %2101 = load i16*, i16** %2100, align 8, !dbg !2448
  %2102 = load i8, i8* %31, align 1, !dbg !2448
  %2103 = zext i8 %2102 to i32, !dbg !2448
  %2104 = sext i32 %2103 to i64, !dbg !2448
  %2105 = getelementptr inbounds i16, i16* %2101, i64 %2104, !dbg !2448
  %2106 = load i16, i16* %2105, align 2, !dbg !2448
  %2107 = zext i16 %2106 to i32, !dbg !2448
  %2108 = and i32 %2107, 16384, !dbg !2448
  %2109 = icmp ne i32 %2108, 0, !dbg !2449
  %2110 = zext i1 %2109 to i8, !dbg !2450
  store i8 %2110, i8* %37, align 1, !dbg !2450
  br label %2528, !dbg !2451

2111:                                             ; preds = %originalBBpart2472
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %38, metadata !2452, metadata !DIExpression()), !dbg !2469
  %2112 = load i32, i32* @x.37
  %2113 = load i32, i32* @y.38
  %2114 = sub i32 %2112, 1
  %2115 = mul i32 %2112, %2114
  %2116 = urem i32 %2115, 2
  %2117 = icmp eq i32 %2116, 0
  %2118 = icmp slt i32 %2113, 10
  %2119 = or i1 %2117, %2118
  br i1 %2119, label %originalBB474, label %originalBB474alteredBB

originalBB474:                                    ; preds = %2111, %originalBB474alteredBB
  %2120 = bitcast %struct.__mbstate_t* %38 to i8*, !dbg !2470
  call void @llvm.memset.p0i8.i64(i8* align 4 %2120, i8 0, i64 8, i1 false), !dbg !2470
  store i64 0, i64* %36, align 8, !dbg !2471
  store i8 1, i8* %37, align 1, !dbg !2472
  %2121 = load i64, i64* %14, align 8, !dbg !2473
  %2122 = icmp eq i64 %2121, -1, !dbg !2475
  %2123 = load i32, i32* @x.37
  %2124 = load i32, i32* @y.38
  %2125 = sub i32 %2123, 1
  %2126 = mul i32 %2123, %2125
  %2127 = urem i32 %2126, 2
  %2128 = icmp eq i32 %2127, 0
  %2129 = icmp slt i32 %2124, 10
  %2130 = or i1 %2128, %2129
  br i1 %2130, label %originalBBpart2476, label %originalBB474alteredBB

originalBBpart2476:                               ; preds = %originalBB474
  br i1 %2122, label %2131, label %2134, !dbg !2476

2131:                                             ; preds = %originalBBpart2476
  %2132 = load i8*, i8** %13, align 8, !dbg !2477
  %2133 = call i64 @strlen(i8* %2132) #13, !dbg !2478
  store i64 %2133, i64* %14, align 8, !dbg !2479
  br label %2134, !dbg !2480

2134:                                             ; preds = %2131, %originalBBpart2476
  %2135 = load i32, i32* @x.37
  %2136 = load i32, i32* @y.38
  %2137 = sub i32 %2135, 1
  %2138 = mul i32 %2135, %2137
  %2139 = urem i32 %2138, 2
  %2140 = icmp eq i32 %2139, 0
  %2141 = icmp slt i32 %2136, 10
  %2142 = or i1 %2140, %2141
  br i1 %2142, label %originalBB478, label %originalBB478alteredBB

originalBB478:                                    ; preds = %2134, %originalBB478alteredBB
  %2143 = load i32, i32* @x.37
  %2144 = load i32, i32* @y.38
  %2145 = sub i32 %2143, 1
  %2146 = mul i32 %2143, %2145
  %2147 = urem i32 %2146, 2
  %2148 = icmp eq i32 %2147, 0
  %2149 = icmp slt i32 %2144, 10
  %2150 = or i1 %2148, %2149
  br i1 %2150, label %originalBBpart2480, label %originalBB478alteredBB

originalBBpart2480:                               ; preds = %originalBB478
  br label %2151, !dbg !2481

2151:                                             ; preds = %2523, %originalBBpart2480
  call void @llvm.dbg.declare(metadata i32* %39, metadata !2482, metadata !DIExpression()), !dbg !2485
  call void @llvm.dbg.declare(metadata i64* %40, metadata !2486, metadata !DIExpression()), !dbg !2487
  %2152 = load i8*, i8** %13, align 8, !dbg !2488
  %2153 = load i64, i64* %20, align 8, !dbg !2489
  %2154 = load i64, i64* %36, align 8, !dbg !2490
  %2155 = add i64 %2153, %2154, !dbg !2491
  %2156 = getelementptr inbounds i8, i8* %2152, i64 %2155, !dbg !2488
  %2157 = load i64, i64* %14, align 8, !dbg !2492
  %2158 = load i64, i64* %20, align 8, !dbg !2493
  %2159 = load i64, i64* %36, align 8, !dbg !2494
  %2160 = add i64 %2158, %2159, !dbg !2495
  %2161 = sub i64 %2157, %2160, !dbg !2496
  %2162 = call i64 @rpl_mbrtowc(i32* %39, i8* %2156, i64 %2161, %struct.__mbstate_t* %38), !dbg !2497
  store i64 %2162, i64* %40, align 8, !dbg !2487
  %2163 = load i64, i64* %40, align 8, !dbg !2498
  %2164 = icmp eq i64 %2163, 0, !dbg !2500
  br i1 %2164, label %2165, label %2182, !dbg !2501

2165:                                             ; preds = %2151
  %2166 = load i32, i32* @x.37
  %2167 = load i32, i32* @y.38
  %2168 = sub i32 %2166, 1
  %2169 = mul i32 %2166, %2168
  %2170 = urem i32 %2169, 2
  %2171 = icmp eq i32 %2170, 0
  %2172 = icmp slt i32 %2167, 10
  %2173 = or i1 %2171, %2172
  br i1 %2173, label %originalBB482, label %originalBB482alteredBB

originalBB482:                                    ; preds = %2165, %originalBB482alteredBB
  %2174 = load i32, i32* @x.37
  %2175 = load i32, i32* @y.38
  %2176 = sub i32 %2174, 1
  %2177 = mul i32 %2174, %2176
  %2178 = urem i32 %2177, 2
  %2179 = icmp eq i32 %2178, 0
  %2180 = icmp slt i32 %2175, 10
  %2181 = or i1 %2179, %2180
  br i1 %2181, label %originalBBpart2484, label %originalBB482alteredBB

originalBBpart2484:                               ; preds = %originalBB482
  br label %2527, !dbg !2502

2182:                                             ; preds = %2151
  %2183 = load i64, i64* %40, align 8, !dbg !2503
  %2184 = icmp eq i64 %2183, -1, !dbg !2505
  br i1 %2184, label %2185, label %2186, !dbg !2506

2185:                                             ; preds = %2182
  store i8 0, i8* %37, align 1, !dbg !2507
  br label %2527, !dbg !2509

2186:                                             ; preds = %2182
  %2187 = load i32, i32* @x.37
  %2188 = load i32, i32* @y.38
  %2189 = sub i32 %2187, 1
  %2190 = mul i32 %2187, %2189
  %2191 = urem i32 %2190, 2
  %2192 = icmp eq i32 %2191, 0
  %2193 = icmp slt i32 %2188, 10
  %2194 = or i1 %2192, %2193
  br i1 %2194, label %originalBB486, label %originalBB486alteredBB

originalBB486:                                    ; preds = %2186, %originalBB486alteredBB
  %2195 = load i64, i64* %40, align 8, !dbg !2510
  %2196 = icmp eq i64 %2195, -2, !dbg !2512
  %2197 = load i32, i32* @x.37
  %2198 = load i32, i32* @y.38
  %2199 = sub i32 %2197, 1
  %2200 = mul i32 %2197, %2199
  %2201 = urem i32 %2200, 2
  %2202 = icmp eq i32 %2201, 0
  %2203 = icmp slt i32 %2198, 10
  %2204 = or i1 %2202, %2203
  br i1 %2204, label %originalBBpart2488, label %originalBB486alteredBB

originalBBpart2488:                               ; preds = %originalBB486
  br i1 %2196, label %2205, label %2307, !dbg !2513

2205:                                             ; preds = %originalBBpart2488
  store i8 0, i8* %37, align 1, !dbg !2514
  br label %2206, !dbg !2516

2206:                                             ; preds = %originalBBpart2526, %2205
  %2207 = load i32, i32* @x.37
  %2208 = load i32, i32* @y.38
  %2209 = sub i32 %2207, 1
  %2210 = mul i32 %2207, %2209
  %2211 = urem i32 %2210, 2
  %2212 = icmp eq i32 %2211, 0
  %2213 = icmp slt i32 %2208, 10
  %2214 = or i1 %2212, %2213
  br i1 %2214, label %originalBB490, label %originalBB490alteredBB

originalBB490:                                    ; preds = %2206, %originalBB490alteredBB
  %2215 = load i64, i64* %20, align 8, !dbg !2517
  %2216 = load i64, i64* %36, align 8, !dbg !2518
  %2217 = add i64 %2215, %2216, !dbg !2519
  %2218 = load i64, i64* %14, align 8, !dbg !2520
  %2219 = icmp ult i64 %2217, %2218, !dbg !2521
  %2220 = load i32, i32* @x.37
  %2221 = load i32, i32* @y.38
  %2222 = sub i32 %2220, 1
  %2223 = mul i32 %2220, %2222
  %2224 = urem i32 %2223, 2
  %2225 = icmp eq i32 %2224, 0
  %2226 = icmp slt i32 %2221, 10
  %2227 = or i1 %2225, %2226
  br i1 %2227, label %originalBBpart2498, label %originalBB490alteredBB

originalBBpart2498:                               ; preds = %originalBB490
  br i1 %2219, label %2228, label %2253, !dbg !2522

2228:                                             ; preds = %originalBBpart2498
  %2229 = load i32, i32* @x.37
  %2230 = load i32, i32* @y.38
  %2231 = sub i32 %2229, 1
  %2232 = mul i32 %2229, %2231
  %2233 = urem i32 %2232, 2
  %2234 = icmp eq i32 %2233, 0
  %2235 = icmp slt i32 %2230, 10
  %2236 = or i1 %2234, %2235
  br i1 %2236, label %originalBB500, label %originalBB500alteredBB

originalBB500:                                    ; preds = %2228, %originalBB500alteredBB
  %2237 = load i8*, i8** %13, align 8, !dbg !2523
  %2238 = load i64, i64* %20, align 8, !dbg !2524
  %2239 = load i64, i64* %36, align 8, !dbg !2525
  %2240 = add i64 %2238, %2239, !dbg !2526
  %2241 = getelementptr inbounds i8, i8* %2237, i64 %2240, !dbg !2523
  %2242 = load i8, i8* %2241, align 1, !dbg !2523
  %2243 = sext i8 %2242 to i32, !dbg !2523
  %2244 = icmp ne i32 %2243, 0, !dbg !2522
  %2245 = load i32, i32* @x.37
  %2246 = load i32, i32* @y.38
  %2247 = sub i32 %2245, 1
  %2248 = mul i32 %2245, %2247
  %2249 = urem i32 %2248, 2
  %2250 = icmp eq i32 %2249, 0
  %2251 = icmp slt i32 %2246, 10
  %2252 = or i1 %2250, %2251
  br i1 %2252, label %originalBBpart2516, label %originalBB500alteredBB

originalBBpart2516:                               ; preds = %originalBB500
  br label %2253

2253:                                             ; preds = %originalBBpart2516, %originalBBpart2498
  %2254 = phi i1 [ false, %originalBBpart2498 ], [ %2244, %originalBBpart2516 ], !dbg !2527
  %2255 = load i32, i32* @x.37
  %2256 = load i32, i32* @y.38
  %2257 = sub i32 %2255, 1
  %2258 = mul i32 %2255, %2257
  %2259 = urem i32 %2258, 2
  %2260 = icmp eq i32 %2259, 0
  %2261 = icmp slt i32 %2256, 10
  %2262 = or i1 %2260, %2261
  br i1 %2262, label %originalBB518, label %originalBB518alteredBB

originalBB518:                                    ; preds = %2253, %originalBB518alteredBB
  %2263 = load i32, i32* @x.37
  %2264 = load i32, i32* @y.38
  %2265 = sub i32 %2263, 1
  %2266 = mul i32 %2263, %2265
  %2267 = urem i32 %2266, 2
  %2268 = icmp eq i32 %2267, 0
  %2269 = icmp slt i32 %2264, 10
  %2270 = or i1 %2268, %2269
  br i1 %2270, label %originalBBpart2520, label %originalBB518alteredBB

originalBBpart2520:                               ; preds = %originalBB518
  br i1 %2254, label %2271, label %2290, !dbg !2516

2271:                                             ; preds = %originalBBpart2520
  %2272 = load i32, i32* @x.37
  %2273 = load i32, i32* @y.38
  %2274 = sub i32 %2272, 1
  %2275 = mul i32 %2272, %2274
  %2276 = urem i32 %2275, 2
  %2277 = icmp eq i32 %2276, 0
  %2278 = icmp slt i32 %2273, 10
  %2279 = or i1 %2277, %2278
  br i1 %2279, label %originalBB522, label %originalBB522alteredBB

originalBB522:                                    ; preds = %2271, %originalBB522alteredBB
  %2280 = load i64, i64* %36, align 8, !dbg !2528
  %2281 = add i64 %2280, 1, !dbg !2528
  store i64 %2281, i64* %36, align 8, !dbg !2528
  %2282 = load i32, i32* @x.37
  %2283 = load i32, i32* @y.38
  %2284 = sub i32 %2282, 1
  %2285 = mul i32 %2282, %2284
  %2286 = urem i32 %2285, 2
  %2287 = icmp eq i32 %2286, 0
  %2288 = icmp slt i32 %2283, 10
  %2289 = or i1 %2287, %2288
  br i1 %2289, label %originalBBpart2526, label %originalBB522alteredBB

originalBBpart2526:                               ; preds = %originalBB522
  br label %2206, !dbg !2516, !llvm.loop !2529

2290:                                             ; preds = %originalBBpart2520
  %2291 = load i32, i32* @x.37
  %2292 = load i32, i32* @y.38
  %2293 = sub i32 %2291, 1
  %2294 = mul i32 %2291, %2293
  %2295 = urem i32 %2294, 2
  %2296 = icmp eq i32 %2295, 0
  %2297 = icmp slt i32 %2292, 10
  %2298 = or i1 %2296, %2297
  br i1 %2298, label %originalBB528, label %originalBB528alteredBB

originalBB528:                                    ; preds = %2290, %originalBB528alteredBB
  %2299 = load i32, i32* @x.37
  %2300 = load i32, i32* @y.38
  %2301 = sub i32 %2299, 1
  %2302 = mul i32 %2299, %2301
  %2303 = urem i32 %2302, 2
  %2304 = icmp eq i32 %2303, 0
  %2305 = icmp slt i32 %2300, 10
  %2306 = or i1 %2304, %2305
  br i1 %2306, label %originalBBpart2530, label %originalBB528alteredBB

originalBBpart2530:                               ; preds = %originalBB528
  br label %2527, !dbg !2530

2307:                                             ; preds = %originalBBpart2488
  %2308 = load i8, i8* %27, align 1, !dbg !2531
  %2309 = trunc i8 %2308 to i1, !dbg !2531
  br i1 %2309, label %2310, label %2431, !dbg !2534

2310:                                             ; preds = %2307
  %2311 = load i32, i32* %15, align 4, !dbg !2535
  %2312 = icmp eq i32 %2311, 2, !dbg !2536
  br i1 %2312, label %2313, label %2431, !dbg !2537

2313:                                             ; preds = %2310
  call void @llvm.dbg.declare(metadata i64* %41, metadata !2538, metadata !DIExpression()), !dbg !2540
  %2314 = load i32, i32* @x.37
  %2315 = load i32, i32* @y.38
  %2316 = sub i32 %2314, 1
  %2317 = mul i32 %2314, %2316
  %2318 = urem i32 %2317, 2
  %2319 = icmp eq i32 %2318, 0
  %2320 = icmp slt i32 %2315, 10
  %2321 = or i1 %2319, %2320
  br i1 %2321, label %originalBB532, label %originalBB532alteredBB

originalBB532:                                    ; preds = %2313, %originalBB532alteredBB
  store i64 1, i64* %41, align 8, !dbg !2541
  %2322 = load i32, i32* @x.37
  %2323 = load i32, i32* @y.38
  %2324 = sub i32 %2322, 1
  %2325 = mul i32 %2322, %2324
  %2326 = urem i32 %2325, 2
  %2327 = icmp eq i32 %2326, 0
  %2328 = icmp slt i32 %2323, 10
  %2329 = or i1 %2327, %2328
  br i1 %2329, label %originalBBpart2534, label %originalBB532alteredBB

originalBBpart2534:                               ; preds = %originalBB532
  br label %2330, !dbg !2543

2330:                                             ; preds = %originalBBpart2568, %originalBBpart2534
  %2331 = load i32, i32* @x.37
  %2332 = load i32, i32* @y.38
  %2333 = sub i32 %2331, 1
  %2334 = mul i32 %2331, %2333
  %2335 = urem i32 %2334, 2
  %2336 = icmp eq i32 %2335, 0
  %2337 = icmp slt i32 %2332, 10
  %2338 = or i1 %2336, %2337
  br i1 %2338, label %originalBB536, label %originalBB536alteredBB

originalBB536:                                    ; preds = %2330, %originalBB536alteredBB
  %2339 = load i64, i64* %41, align 8, !dbg !2544
  %2340 = load i64, i64* %40, align 8, !dbg !2546
  %2341 = icmp ult i64 %2339, %2340, !dbg !2547
  %2342 = load i32, i32* @x.37
  %2343 = load i32, i32* @y.38
  %2344 = sub i32 %2342, 1
  %2345 = mul i32 %2342, %2344
  %2346 = urem i32 %2345, 2
  %2347 = icmp eq i32 %2346, 0
  %2348 = icmp slt i32 %2343, 10
  %2349 = or i1 %2347, %2348
  br i1 %2349, label %originalBBpart2538, label %originalBB536alteredBB

originalBBpart2538:                               ; preds = %originalBB536
  br i1 %2341, label %2350, label %2414, !dbg !2548

2350:                                             ; preds = %originalBBpart2538
  %2351 = load i32, i32* @x.37
  %2352 = load i32, i32* @y.38
  %2353 = sub i32 %2351, 1
  %2354 = mul i32 %2351, %2353
  %2355 = urem i32 %2354, 2
  %2356 = icmp eq i32 %2355, 0
  %2357 = icmp slt i32 %2352, 10
  %2358 = or i1 %2356, %2357
  br i1 %2358, label %originalBB540, label %originalBB540alteredBB

originalBB540:                                    ; preds = %2350, %originalBB540alteredBB
  %2359 = load i8*, i8** %13, align 8, !dbg !2549
  %2360 = load i64, i64* %20, align 8, !dbg !2550
  %2361 = load i64, i64* %36, align 8, !dbg !2551
  %2362 = add i64 %2360, %2361, !dbg !2552
  %2363 = load i64, i64* %41, align 8, !dbg !2553
  %2364 = add i64 %2362, %2363, !dbg !2554
  %2365 = getelementptr inbounds i8, i8* %2359, i64 %2364, !dbg !2549
  %2366 = load i8, i8* %2365, align 1, !dbg !2549
  %2367 = sext i8 %2366 to i32, !dbg !2549
  %2368 = load i32, i32* @x.37
  %2369 = load i32, i32* @y.38
  %2370 = sub i32 %2368, 1
  %2371 = mul i32 %2368, %2370
  %2372 = urem i32 %2371, 2
  %2373 = icmp eq i32 %2372, 0
  %2374 = icmp slt i32 %2369, 10
  %2375 = or i1 %2373, %2374
  br i1 %2375, label %originalBBpart2555, label %originalBB540alteredBB

originalBBpart2555:                               ; preds = %originalBB540
  switch i32 %2367, label %2393 [
    i32 91, label %2376
    i32 92, label %2376
    i32 94, label %2376
    i32 96, label %2376
    i32 124, label %2376
  ], !dbg !2555

2376:                                             ; preds = %originalBBpart2555, %originalBBpart2555, %originalBBpart2555, %originalBBpart2555, %originalBBpart2555
  %2377 = load i32, i32* @x.37
  %2378 = load i32, i32* @y.38
  %2379 = sub i32 %2377, 1
  %2380 = mul i32 %2377, %2379
  %2381 = urem i32 %2380, 2
  %2382 = icmp eq i32 %2381, 0
  %2383 = icmp slt i32 %2378, 10
  %2384 = or i1 %2382, %2383
  br i1 %2384, label %originalBB557, label %originalBB557alteredBB

originalBB557:                                    ; preds = %2376, %originalBB557alteredBB
  %2385 = load i32, i32* @x.37
  %2386 = load i32, i32* @y.38
  %2387 = sub i32 %2385, 1
  %2388 = mul i32 %2385, %2387
  %2389 = urem i32 %2388, 2
  %2390 = icmp eq i32 %2389, 0
  %2391 = icmp slt i32 %2386, 10
  %2392 = or i1 %2390, %2391
  br i1 %2392, label %originalBBpart2559, label %originalBB557alteredBB

originalBBpart2559:                               ; preds = %originalBB557
  br label %4222, !dbg !2556

2393:                                             ; preds = %originalBBpart2555
  br label %2394, !dbg !2558

2394:                                             ; preds = %2393
  br label %2395, !dbg !2559

2395:                                             ; preds = %2394
  %2396 = load i32, i32* @x.37
  %2397 = load i32, i32* @y.38
  %2398 = sub i32 %2396, 1
  %2399 = mul i32 %2396, %2398
  %2400 = urem i32 %2399, 2
  %2401 = icmp eq i32 %2400, 0
  %2402 = icmp slt i32 %2397, 10
  %2403 = or i1 %2401, %2402
  br i1 %2403, label %originalBB561, label %originalBB561alteredBB

originalBB561:                                    ; preds = %2395, %originalBB561alteredBB
  %2404 = load i64, i64* %41, align 8, !dbg !2560
  %2405 = add i64 %2404, 1, !dbg !2560
  store i64 %2405, i64* %41, align 8, !dbg !2560
  %2406 = load i32, i32* @x.37
  %2407 = load i32, i32* @y.38
  %2408 = sub i32 %2406, 1
  %2409 = mul i32 %2406, %2408
  %2410 = urem i32 %2409, 2
  %2411 = icmp eq i32 %2410, 0
  %2412 = icmp slt i32 %2407, 10
  %2413 = or i1 %2411, %2412
  br i1 %2413, label %originalBBpart2568, label %originalBB561alteredBB

originalBBpart2568:                               ; preds = %originalBB561
  br label %2330, !dbg !2561, !llvm.loop !2562

2414:                                             ; preds = %originalBBpart2538
  %2415 = load i32, i32* @x.37
  %2416 = load i32, i32* @y.38
  %2417 = sub i32 %2415, 1
  %2418 = mul i32 %2415, %2417
  %2419 = urem i32 %2418, 2
  %2420 = icmp eq i32 %2419, 0
  %2421 = icmp slt i32 %2416, 10
  %2422 = or i1 %2420, %2421
  br i1 %2422, label %originalBB570, label %originalBB570alteredBB

originalBB570:                                    ; preds = %2414, %originalBB570alteredBB
  %2423 = load i32, i32* @x.37
  %2424 = load i32, i32* @y.38
  %2425 = sub i32 %2423, 1
  %2426 = mul i32 %2423, %2425
  %2427 = urem i32 %2426, 2
  %2428 = icmp eq i32 %2427, 0
  %2429 = icmp slt i32 %2424, 10
  %2430 = or i1 %2428, %2429
  br i1 %2430, label %originalBBpart2572, label %originalBB570alteredBB

originalBBpart2572:                               ; preds = %originalBB570
  br label %2431, !dbg !2564

2431:                                             ; preds = %originalBBpart2572, %2310, %2307
  %2432 = load i32, i32* %39, align 4, !dbg !2565
  %2433 = call i32 @iswprint(i32 %2432) #10, !dbg !2567
  %2434 = icmp ne i32 %2433, 0, !dbg !2567
  br i1 %2434, label %2452, label %2435, !dbg !2568

2435:                                             ; preds = %2431
  %2436 = load i32, i32* @x.37
  %2437 = load i32, i32* @y.38
  %2438 = sub i32 %2436, 1
  %2439 = mul i32 %2436, %2438
  %2440 = urem i32 %2439, 2
  %2441 = icmp eq i32 %2440, 0
  %2442 = icmp slt i32 %2437, 10
  %2443 = or i1 %2441, %2442
  br i1 %2443, label %originalBB574, label %originalBB574alteredBB

originalBB574:                                    ; preds = %2435, %originalBB574alteredBB
  store i8 0, i8* %37, align 1, !dbg !2569
  %2444 = load i32, i32* @x.37
  %2445 = load i32, i32* @y.38
  %2446 = sub i32 %2444, 1
  %2447 = mul i32 %2444, %2446
  %2448 = urem i32 %2447, 2
  %2449 = icmp eq i32 %2448, 0
  %2450 = icmp slt i32 %2445, 10
  %2451 = or i1 %2449, %2450
  br i1 %2451, label %originalBBpart2576, label %originalBB574alteredBB

originalBBpart2576:                               ; preds = %originalBB574
  br label %2452, !dbg !2570

2452:                                             ; preds = %originalBBpart2576, %2431
  %2453 = load i32, i32* @x.37
  %2454 = load i32, i32* @y.38
  %2455 = sub i32 %2453, 1
  %2456 = mul i32 %2453, %2455
  %2457 = urem i32 %2456, 2
  %2458 = icmp eq i32 %2457, 0
  %2459 = icmp slt i32 %2454, 10
  %2460 = or i1 %2458, %2459
  br i1 %2460, label %originalBB578, label %originalBB578alteredBB

originalBB578:                                    ; preds = %2452, %originalBB578alteredBB
  %2461 = load i64, i64* %40, align 8, !dbg !2571
  %2462 = load i64, i64* %36, align 8, !dbg !2572
  %2463 = add i64 %2462, %2461, !dbg !2572
  store i64 %2463, i64* %36, align 8, !dbg !2572
  %2464 = load i32, i32* @x.37
  %2465 = load i32, i32* @y.38
  %2466 = sub i32 %2464, 1
  %2467 = mul i32 %2464, %2466
  %2468 = urem i32 %2467, 2
  %2469 = icmp eq i32 %2468, 0
  %2470 = icmp slt i32 %2465, 10
  %2471 = or i1 %2469, %2470
  br i1 %2471, label %originalBBpart2589, label %originalBB578alteredBB

originalBBpart2589:                               ; preds = %originalBB578
  br label %2472

2472:                                             ; preds = %originalBBpart2589
  %2473 = load i32, i32* @x.37
  %2474 = load i32, i32* @y.38
  %2475 = sub i32 %2473, 1
  %2476 = mul i32 %2473, %2475
  %2477 = urem i32 %2476, 2
  %2478 = icmp eq i32 %2477, 0
  %2479 = icmp slt i32 %2474, 10
  %2480 = or i1 %2478, %2479
  br i1 %2480, label %originalBB591, label %originalBB591alteredBB

originalBB591:                                    ; preds = %2472, %originalBB591alteredBB
  %2481 = load i32, i32* @x.37
  %2482 = load i32, i32* @y.38
  %2483 = sub i32 %2481, 1
  %2484 = mul i32 %2481, %2483
  %2485 = urem i32 %2484, 2
  %2486 = icmp eq i32 %2485, 0
  %2487 = icmp slt i32 %2482, 10
  %2488 = or i1 %2486, %2487
  br i1 %2488, label %originalBBpart2593, label %originalBB591alteredBB

originalBBpart2593:                               ; preds = %originalBB591
  br label %2489

2489:                                             ; preds = %originalBBpart2593
  %2490 = load i32, i32* @x.37
  %2491 = load i32, i32* @y.38
  %2492 = sub i32 %2490, 1
  %2493 = mul i32 %2490, %2492
  %2494 = urem i32 %2493, 2
  %2495 = icmp eq i32 %2494, 0
  %2496 = icmp slt i32 %2491, 10
  %2497 = or i1 %2495, %2496
  br i1 %2497, label %originalBB595, label %originalBB595alteredBB

originalBB595:                                    ; preds = %2489, %originalBB595alteredBB
  %2498 = load i32, i32* @x.37
  %2499 = load i32, i32* @y.38
  %2500 = sub i32 %2498, 1
  %2501 = mul i32 %2498, %2500
  %2502 = urem i32 %2501, 2
  %2503 = icmp eq i32 %2502, 0
  %2504 = icmp slt i32 %2499, 10
  %2505 = or i1 %2503, %2504
  br i1 %2505, label %originalBBpart2597, label %originalBB595alteredBB

originalBBpart2597:                               ; preds = %originalBB595
  br label %2506

2506:                                             ; preds = %originalBBpart2597
  %2507 = load i32, i32* @x.37
  %2508 = load i32, i32* @y.38
  %2509 = sub i32 %2507, 1
  %2510 = mul i32 %2507, %2509
  %2511 = urem i32 %2510, 2
  %2512 = icmp eq i32 %2511, 0
  %2513 = icmp slt i32 %2508, 10
  %2514 = or i1 %2512, %2513
  br i1 %2514, label %originalBB599, label %originalBB599alteredBB

originalBB599:                                    ; preds = %2506, %originalBB599alteredBB
  %2515 = load i32, i32* @x.37
  %2516 = load i32, i32* @y.38
  %2517 = sub i32 %2515, 1
  %2518 = mul i32 %2515, %2517
  %2519 = urem i32 %2518, 2
  %2520 = icmp eq i32 %2519, 0
  %2521 = icmp slt i32 %2516, 10
  %2522 = or i1 %2520, %2521
  br i1 %2522, label %originalBBpart2601, label %originalBB599alteredBB

originalBBpart2601:                               ; preds = %originalBB599
  br label %2523, !dbg !2573

2523:                                             ; preds = %originalBBpart2601
  %2524 = call i32 @mbsinit(%struct.__mbstate_t* %38) #13, !dbg !2574
  %2525 = icmp ne i32 %2524, 0, !dbg !2575
  %2526 = xor i1 %2525, true, !dbg !2575
  br i1 %2526, label %2151, label %2527, !dbg !2573, !llvm.loop !2576

2527:                                             ; preds = %2523, %originalBBpart2530, %2185, %originalBBpart2484
  br label %2528

2528:                                             ; preds = %2527, %2099
  %2529 = load i32, i32* @x.37
  %2530 = load i32, i32* @y.38
  %2531 = sub i32 %2529, 1
  %2532 = mul i32 %2529, %2531
  %2533 = urem i32 %2532, 2
  %2534 = icmp eq i32 %2533, 0
  %2535 = icmp slt i32 %2530, 10
  %2536 = or i1 %2534, %2535
  br i1 %2536, label %originalBB603, label %originalBB603alteredBB

originalBB603:                                    ; preds = %2528, %originalBB603alteredBB
  %2537 = load i8, i8* %37, align 1, !dbg !2578
  %2538 = trunc i8 %2537 to i1, !dbg !2578
  %2539 = zext i1 %2538 to i8, !dbg !2579
  store i8 %2539, i8* %35, align 1, !dbg !2579
  %2540 = load i64, i64* %36, align 8, !dbg !2580
  %2541 = icmp ult i64 1, %2540, !dbg !2582
  %2542 = load i32, i32* @x.37
  %2543 = load i32, i32* @y.38
  %2544 = sub i32 %2542, 1
  %2545 = mul i32 %2542, %2544
  %2546 = urem i32 %2545, 2
  %2547 = icmp eq i32 %2546, 0
  %2548 = icmp slt i32 %2543, 10
  %2549 = or i1 %2547, %2548
  br i1 %2549, label %originalBBpart2605, label %originalBB603alteredBB

originalBBpart2605:                               ; preds = %originalBB603
  br i1 %2541, label %2588, label %2550, !dbg !2583

2550:                                             ; preds = %originalBBpart2605
  %2551 = load i32, i32* @x.37
  %2552 = load i32, i32* @y.38
  %2553 = sub i32 %2551, 1
  %2554 = mul i32 %2551, %2553
  %2555 = urem i32 %2554, 2
  %2556 = icmp eq i32 %2555, 0
  %2557 = icmp slt i32 %2552, 10
  %2558 = or i1 %2556, %2557
  br i1 %2558, label %originalBB607, label %originalBB607alteredBB

originalBB607:                                    ; preds = %2550, %originalBB607alteredBB
  %2559 = load i8, i8* %25, align 1, !dbg !2584
  %2560 = trunc i8 %2559 to i1, !dbg !2584
  %2561 = load i32, i32* @x.37
  %2562 = load i32, i32* @y.38
  %2563 = sub i32 %2561, 1
  %2564 = mul i32 %2561, %2563
  %2565 = urem i32 %2564, 2
  %2566 = icmp eq i32 %2565, 0
  %2567 = icmp slt i32 %2562, 10
  %2568 = or i1 %2566, %2567
  br i1 %2568, label %originalBBpart2609, label %originalBB607alteredBB

originalBBpart2609:                               ; preds = %originalBB607
  br i1 %2560, label %2569, label %3352, !dbg !2585

2569:                                             ; preds = %originalBBpart2609
  %2570 = load i32, i32* @x.37
  %2571 = load i32, i32* @y.38
  %2572 = sub i32 %2570, 1
  %2573 = mul i32 %2570, %2572
  %2574 = urem i32 %2573, 2
  %2575 = icmp eq i32 %2574, 0
  %2576 = icmp slt i32 %2571, 10
  %2577 = or i1 %2575, %2576
  br i1 %2577, label %originalBB611, label %originalBB611alteredBB

originalBB611:                                    ; preds = %2569, %originalBB611alteredBB
  %2578 = load i8, i8* %37, align 1, !dbg !2586
  %2579 = trunc i8 %2578 to i1, !dbg !2586
  %2580 = load i32, i32* @x.37
  %2581 = load i32, i32* @y.38
  %2582 = sub i32 %2580, 1
  %2583 = mul i32 %2580, %2582
  %2584 = urem i32 %2583, 2
  %2585 = icmp eq i32 %2584, 0
  %2586 = icmp slt i32 %2581, 10
  %2587 = or i1 %2585, %2586
  br i1 %2587, label %originalBBpart2613, label %originalBB611alteredBB

originalBBpart2613:                               ; preds = %originalBB611
  br i1 %2579, label %3352, label %2588, !dbg !2587

2588:                                             ; preds = %originalBBpart2613, %originalBBpart2605
  call void @llvm.dbg.declare(metadata i64* %42, metadata !2588, metadata !DIExpression()), !dbg !2590
  %2589 = load i32, i32* @x.37
  %2590 = load i32, i32* @y.38
  %2591 = sub i32 %2589, 1
  %2592 = mul i32 %2589, %2591
  %2593 = urem i32 %2592, 2
  %2594 = icmp eq i32 %2593, 0
  %2595 = icmp slt i32 %2590, 10
  %2596 = or i1 %2594, %2595
  br i1 %2596, label %originalBB615, label %originalBB615alteredBB

originalBB615:                                    ; preds = %2588, %originalBB615alteredBB
  %2597 = load i64, i64* %20, align 8, !dbg !2591
  %2598 = load i64, i64* %36, align 8, !dbg !2592
  %2599 = add i64 %2597, %2598, !dbg !2593
  store i64 %2599, i64* %42, align 8, !dbg !2590
  %2600 = load i32, i32* @x.37
  %2601 = load i32, i32* @y.38
  %2602 = sub i32 %2600, 1
  %2603 = mul i32 %2600, %2602
  %2604 = urem i32 %2603, 2
  %2605 = icmp eq i32 %2604, 0
  %2606 = icmp slt i32 %2601, 10
  %2607 = or i1 %2605, %2606
  br i1 %2607, label %originalBBpart2617, label %originalBB615alteredBB

originalBBpart2617:                               ; preds = %originalBB615
  br label %2608, !dbg !2594

2608:                                             ; preds = %originalBBpart2855, %originalBBpart2617
  %2609 = load i8, i8* %25, align 1, !dbg !2595
  %2610 = trunc i8 %2609 to i1, !dbg !2595
  br i1 %2610, label %2611, label %2972, !dbg !2600

2611:                                             ; preds = %2608
  %2612 = load i8, i8* %37, align 1, !dbg !2601
  %2613 = trunc i8 %2612 to i1, !dbg !2601
  br i1 %2613, label %2972, label %2614, !dbg !2602

2614:                                             ; preds = %2611
  br label %2615, !dbg !2603

2615:                                             ; preds = %2614
  %2616 = load i8, i8* %27, align 1, !dbg !2605
  %2617 = trunc i8 %2616 to i1, !dbg !2605
  br i1 %2617, label %2618, label %2635, !dbg !2608

2618:                                             ; preds = %2615
  %2619 = load i32, i32* @x.37
  %2620 = load i32, i32* @y.38
  %2621 = sub i32 %2619, 1
  %2622 = mul i32 %2619, %2621
  %2623 = urem i32 %2622, 2
  %2624 = icmp eq i32 %2623, 0
  %2625 = icmp slt i32 %2620, 10
  %2626 = or i1 %2624, %2625
  br i1 %2626, label %originalBB619, label %originalBB619alteredBB

originalBB619:                                    ; preds = %2618, %originalBB619alteredBB
  %2627 = load i32, i32* @x.37
  %2628 = load i32, i32* @y.38
  %2629 = sub i32 %2627, 1
  %2630 = mul i32 %2627, %2629
  %2631 = urem i32 %2630, 2
  %2632 = icmp eq i32 %2631, 0
  %2633 = icmp slt i32 %2628, 10
  %2634 = or i1 %2632, %2633
  br i1 %2634, label %originalBBpart2621, label %originalBB619alteredBB

originalBBpart2621:                               ; preds = %originalBB619
  br label %4222, !dbg !2605

2635:                                             ; preds = %2615
  store i8 1, i8* %34, align 1, !dbg !2608
  %2636 = load i32, i32* %15, align 4, !dbg !2609
  %2637 = icmp eq i32 %2636, 2, !dbg !2609
  br i1 %2637, label %2638, label %2822, !dbg !2609

2638:                                             ; preds = %2635
  %2639 = load i8, i8* %28, align 1, !dbg !2609
  %2640 = trunc i8 %2639 to i1, !dbg !2609
  br i1 %2640, label %2822, label %2641, !dbg !2608

2641:                                             ; preds = %2638
  %2642 = load i32, i32* @x.37
  %2643 = load i32, i32* @y.38
  %2644 = sub i32 %2642, 1
  %2645 = mul i32 %2642, %2644
  %2646 = urem i32 %2645, 2
  %2647 = icmp eq i32 %2646, 0
  %2648 = icmp slt i32 %2643, 10
  %2649 = or i1 %2647, %2648
  br i1 %2649, label %originalBB623, label %originalBB623alteredBB

originalBB623:                                    ; preds = %2641, %originalBB623alteredBB
  %2650 = load i32, i32* @x.37
  %2651 = load i32, i32* @y.38
  %2652 = sub i32 %2650, 1
  %2653 = mul i32 %2650, %2652
  %2654 = urem i32 %2653, 2
  %2655 = icmp eq i32 %2654, 0
  %2656 = icmp slt i32 %2651, 10
  %2657 = or i1 %2655, %2656
  br i1 %2657, label %originalBBpart2625, label %originalBB623alteredBB

originalBBpart2625:                               ; preds = %originalBB623
  br label %2658, !dbg !2611

2658:                                             ; preds = %originalBBpart2625
  %2659 = load i64, i64* %21, align 8, !dbg !2613
  %2660 = load i64, i64* %12, align 8, !dbg !2613
  %2661 = icmp ult i64 %2659, %2660, !dbg !2613
  br i1 %2661, label %2662, label %2682, !dbg !2616

2662:                                             ; preds = %2658
  %2663 = load i32, i32* @x.37
  %2664 = load i32, i32* @y.38
  %2665 = sub i32 %2663, 1
  %2666 = mul i32 %2663, %2665
  %2667 = urem i32 %2666, 2
  %2668 = icmp eq i32 %2667, 0
  %2669 = icmp slt i32 %2664, 10
  %2670 = or i1 %2668, %2669
  br i1 %2670, label %originalBB627, label %originalBB627alteredBB

originalBB627:                                    ; preds = %2662, %originalBB627alteredBB
  %2671 = load i8*, i8** %11, align 8, !dbg !2613
  %2672 = load i64, i64* %21, align 8, !dbg !2613
  %2673 = getelementptr inbounds i8, i8* %2671, i64 %2672, !dbg !2613
  store i8 39, i8* %2673, align 1, !dbg !2613
  %2674 = load i32, i32* @x.37
  %2675 = load i32, i32* @y.38
  %2676 = sub i32 %2674, 1
  %2677 = mul i32 %2674, %2676
  %2678 = urem i32 %2677, 2
  %2679 = icmp eq i32 %2678, 0
  %2680 = icmp slt i32 %2675, 10
  %2681 = or i1 %2679, %2680
  br i1 %2681, label %originalBBpart2629, label %originalBB627alteredBB

originalBBpart2629:                               ; preds = %originalBB627
  br label %2682, !dbg !2613

2682:                                             ; preds = %originalBBpart2629, %2658
  %2683 = load i32, i32* @x.37
  %2684 = load i32, i32* @y.38
  %2685 = sub i32 %2683, 1
  %2686 = mul i32 %2683, %2685
  %2687 = urem i32 %2686, 2
  %2688 = icmp eq i32 %2687, 0
  %2689 = icmp slt i32 %2684, 10
  %2690 = or i1 %2688, %2689
  br i1 %2690, label %originalBB631, label %originalBB631alteredBB

originalBB631:                                    ; preds = %2682, %originalBB631alteredBB
  %2691 = load i64, i64* %21, align 8, !dbg !2616
  %2692 = add i64 %2691, 1, !dbg !2616
  store i64 %2692, i64* %21, align 8, !dbg !2616
  %2693 = load i32, i32* @x.37
  %2694 = load i32, i32* @y.38
  %2695 = sub i32 %2693, 1
  %2696 = mul i32 %2693, %2695
  %2697 = urem i32 %2696, 2
  %2698 = icmp eq i32 %2697, 0
  %2699 = icmp slt i32 %2694, 10
  %2700 = or i1 %2698, %2699
  br i1 %2700, label %originalBBpart2635, label %originalBB631alteredBB

originalBBpart2635:                               ; preds = %originalBB631
  br label %2701, !dbg !2616

2701:                                             ; preds = %originalBBpart2635
  br label %2702, !dbg !2611

2702:                                             ; preds = %2701
  %2703 = load i32, i32* @x.37
  %2704 = load i32, i32* @y.38
  %2705 = sub i32 %2703, 1
  %2706 = mul i32 %2703, %2705
  %2707 = urem i32 %2706, 2
  %2708 = icmp eq i32 %2707, 0
  %2709 = icmp slt i32 %2704, 10
  %2710 = or i1 %2708, %2709
  br i1 %2710, label %originalBB637, label %originalBB637alteredBB

originalBB637:                                    ; preds = %2702, %originalBB637alteredBB
  %2711 = load i64, i64* %21, align 8, !dbg !2617
  %2712 = load i64, i64* %12, align 8, !dbg !2617
  %2713 = icmp ult i64 %2711, %2712, !dbg !2617
  %2714 = load i32, i32* @x.37
  %2715 = load i32, i32* @y.38
  %2716 = sub i32 %2714, 1
  %2717 = mul i32 %2714, %2716
  %2718 = urem i32 %2717, 2
  %2719 = icmp eq i32 %2718, 0
  %2720 = icmp slt i32 %2715, 10
  %2721 = or i1 %2719, %2720
  br i1 %2721, label %originalBBpart2639, label %originalBB637alteredBB

originalBBpart2639:                               ; preds = %originalBB637
  br i1 %2713, label %2722, label %2742, !dbg !2620

2722:                                             ; preds = %originalBBpart2639
  %2723 = load i32, i32* @x.37
  %2724 = load i32, i32* @y.38
  %2725 = sub i32 %2723, 1
  %2726 = mul i32 %2723, %2725
  %2727 = urem i32 %2726, 2
  %2728 = icmp eq i32 %2727, 0
  %2729 = icmp slt i32 %2724, 10
  %2730 = or i1 %2728, %2729
  br i1 %2730, label %originalBB641, label %originalBB641alteredBB

originalBB641:                                    ; preds = %2722, %originalBB641alteredBB
  %2731 = load i8*, i8** %11, align 8, !dbg !2617
  %2732 = load i64, i64* %21, align 8, !dbg !2617
  %2733 = getelementptr inbounds i8, i8* %2731, i64 %2732, !dbg !2617
  store i8 36, i8* %2733, align 1, !dbg !2617
  %2734 = load i32, i32* @x.37
  %2735 = load i32, i32* @y.38
  %2736 = sub i32 %2734, 1
  %2737 = mul i32 %2734, %2736
  %2738 = urem i32 %2737, 2
  %2739 = icmp eq i32 %2738, 0
  %2740 = icmp slt i32 %2735, 10
  %2741 = or i1 %2739, %2740
  br i1 %2741, label %originalBBpart2643, label %originalBB641alteredBB

originalBBpart2643:                               ; preds = %originalBB641
  br label %2742, !dbg !2617

2742:                                             ; preds = %originalBBpart2643, %originalBBpart2639
  %2743 = load i32, i32* @x.37
  %2744 = load i32, i32* @y.38
  %2745 = sub i32 %2743, 1
  %2746 = mul i32 %2743, %2745
  %2747 = urem i32 %2746, 2
  %2748 = icmp eq i32 %2747, 0
  %2749 = icmp slt i32 %2744, 10
  %2750 = or i1 %2748, %2749
  br i1 %2750, label %originalBB645, label %originalBB645alteredBB

originalBB645:                                    ; preds = %2742, %originalBB645alteredBB
  %2751 = load i64, i64* %21, align 8, !dbg !2620
  %2752 = add i64 %2751, 1, !dbg !2620
  store i64 %2752, i64* %21, align 8, !dbg !2620
  %2753 = load i32, i32* @x.37
  %2754 = load i32, i32* @y.38
  %2755 = sub i32 %2753, 1
  %2756 = mul i32 %2753, %2755
  %2757 = urem i32 %2756, 2
  %2758 = icmp eq i32 %2757, 0
  %2759 = icmp slt i32 %2754, 10
  %2760 = or i1 %2758, %2759
  br i1 %2760, label %originalBBpart2653, label %originalBB645alteredBB

originalBBpart2653:                               ; preds = %originalBB645
  br label %2761, !dbg !2620

2761:                                             ; preds = %originalBBpart2653
  %2762 = load i32, i32* @x.37
  %2763 = load i32, i32* @y.38
  %2764 = sub i32 %2762, 1
  %2765 = mul i32 %2762, %2764
  %2766 = urem i32 %2765, 2
  %2767 = icmp eq i32 %2766, 0
  %2768 = icmp slt i32 %2763, 10
  %2769 = or i1 %2767, %2768
  br i1 %2769, label %originalBB655, label %originalBB655alteredBB

originalBB655:                                    ; preds = %2761, %originalBB655alteredBB
  %2770 = load i32, i32* @x.37
  %2771 = load i32, i32* @y.38
  %2772 = sub i32 %2770, 1
  %2773 = mul i32 %2770, %2772
  %2774 = urem i32 %2773, 2
  %2775 = icmp eq i32 %2774, 0
  %2776 = icmp slt i32 %2771, 10
  %2777 = or i1 %2775, %2776
  br i1 %2777, label %originalBBpart2657, label %originalBB655alteredBB

originalBBpart2657:                               ; preds = %originalBB655
  br label %2778, !dbg !2611

2778:                                             ; preds = %originalBBpart2657
  %2779 = load i64, i64* %21, align 8, !dbg !2621
  %2780 = load i64, i64* %12, align 8, !dbg !2621
  %2781 = icmp ult i64 %2779, %2780, !dbg !2621
  br i1 %2781, label %2782, label %2786, !dbg !2624

2782:                                             ; preds = %2778
  %2783 = load i8*, i8** %11, align 8, !dbg !2621
  %2784 = load i64, i64* %21, align 8, !dbg !2621
  %2785 = getelementptr inbounds i8, i8* %2783, i64 %2784, !dbg !2621
  store i8 39, i8* %2785, align 1, !dbg !2621
  br label %2786, !dbg !2621

2786:                                             ; preds = %2782, %2778
  %2787 = load i32, i32* @x.37
  %2788 = load i32, i32* @y.38
  %2789 = sub i32 %2787, 1
  %2790 = mul i32 %2787, %2789
  %2791 = urem i32 %2790, 2
  %2792 = icmp eq i32 %2791, 0
  %2793 = icmp slt i32 %2788, 10
  %2794 = or i1 %2792, %2793
  br i1 %2794, label %originalBB659, label %originalBB659alteredBB

originalBB659:                                    ; preds = %2786, %originalBB659alteredBB
  %2795 = load i64, i64* %21, align 8, !dbg !2624
  %2796 = add i64 %2795, 1, !dbg !2624
  store i64 %2796, i64* %21, align 8, !dbg !2624
  %2797 = load i32, i32* @x.37
  %2798 = load i32, i32* @y.38
  %2799 = sub i32 %2797, 1
  %2800 = mul i32 %2797, %2799
  %2801 = urem i32 %2800, 2
  %2802 = icmp eq i32 %2801, 0
  %2803 = icmp slt i32 %2798, 10
  %2804 = or i1 %2802, %2803
  br i1 %2804, label %originalBBpart2676, label %originalBB659alteredBB

originalBBpart2676:                               ; preds = %originalBB659
  br label %2805, !dbg !2624

2805:                                             ; preds = %originalBBpart2676
  %2806 = load i32, i32* @x.37
  %2807 = load i32, i32* @y.38
  %2808 = sub i32 %2806, 1
  %2809 = mul i32 %2806, %2808
  %2810 = urem i32 %2809, 2
  %2811 = icmp eq i32 %2810, 0
  %2812 = icmp slt i32 %2807, 10
  %2813 = or i1 %2811, %2812
  br i1 %2813, label %originalBB678, label %originalBB678alteredBB

originalBB678:                                    ; preds = %2805, %originalBB678alteredBB
  store i8 1, i8* %28, align 1, !dbg !2611
  %2814 = load i32, i32* @x.37
  %2815 = load i32, i32* @y.38
  %2816 = sub i32 %2814, 1
  %2817 = mul i32 %2814, %2816
  %2818 = urem i32 %2817, 2
  %2819 = icmp eq i32 %2818, 0
  %2820 = icmp slt i32 %2815, 10
  %2821 = or i1 %2819, %2820
  br i1 %2821, label %originalBBpart2680, label %originalBB678alteredBB

originalBBpart2680:                               ; preds = %originalBB678
  br label %2822, !dbg !2611

2822:                                             ; preds = %originalBBpart2680, %2638, %2635
  br label %2823, !dbg !2608

2823:                                             ; preds = %2822
  %2824 = load i64, i64* %21, align 8, !dbg !2625
  %2825 = load i64, i64* %12, align 8, !dbg !2625
  %2826 = icmp ult i64 %2824, %2825, !dbg !2625
  br i1 %2826, label %2827, label %2847, !dbg !2628

2827:                                             ; preds = %2823
  %2828 = load i32, i32* @x.37
  %2829 = load i32, i32* @y.38
  %2830 = sub i32 %2828, 1
  %2831 = mul i32 %2828, %2830
  %2832 = urem i32 %2831, 2
  %2833 = icmp eq i32 %2832, 0
  %2834 = icmp slt i32 %2829, 10
  %2835 = or i1 %2833, %2834
  br i1 %2835, label %originalBB682, label %originalBB682alteredBB

originalBB682:                                    ; preds = %2827, %originalBB682alteredBB
  %2836 = load i8*, i8** %11, align 8, !dbg !2625
  %2837 = load i64, i64* %21, align 8, !dbg !2625
  %2838 = getelementptr inbounds i8, i8* %2836, i64 %2837, !dbg !2625
  store i8 92, i8* %2838, align 1, !dbg !2625
  %2839 = load i32, i32* @x.37
  %2840 = load i32, i32* @y.38
  %2841 = sub i32 %2839, 1
  %2842 = mul i32 %2839, %2841
  %2843 = urem i32 %2842, 2
  %2844 = icmp eq i32 %2843, 0
  %2845 = icmp slt i32 %2840, 10
  %2846 = or i1 %2844, %2845
  br i1 %2846, label %originalBBpart2684, label %originalBB682alteredBB

originalBBpart2684:                               ; preds = %originalBB682
  br label %2847, !dbg !2625

2847:                                             ; preds = %originalBBpart2684, %2823
  %2848 = load i64, i64* %21, align 8, !dbg !2628
  %2849 = add i64 %2848, 1, !dbg !2628
  store i64 %2849, i64* %21, align 8, !dbg !2628
  br label %2850, !dbg !2628

2850:                                             ; preds = %2847
  br label %2851, !dbg !2608

2851:                                             ; preds = %2850
  %2852 = load i32, i32* @x.37
  %2853 = load i32, i32* @y.38
  %2854 = sub i32 %2852, 1
  %2855 = mul i32 %2852, %2854
  %2856 = urem i32 %2855, 2
  %2857 = icmp eq i32 %2856, 0
  %2858 = icmp slt i32 %2853, 10
  %2859 = or i1 %2857, %2858
  br i1 %2859, label %originalBB686, label %originalBB686alteredBB

originalBB686:                                    ; preds = %2851, %originalBB686alteredBB
  %2860 = load i32, i32* @x.37
  %2861 = load i32, i32* @y.38
  %2862 = sub i32 %2860, 1
  %2863 = mul i32 %2860, %2862
  %2864 = urem i32 %2863, 2
  %2865 = icmp eq i32 %2864, 0
  %2866 = icmp slt i32 %2861, 10
  %2867 = or i1 %2865, %2866
  br i1 %2867, label %originalBBpart2688, label %originalBB686alteredBB

originalBBpart2688:                               ; preds = %originalBB686
  br label %2868, !dbg !2629

2868:                                             ; preds = %originalBBpart2688
  %2869 = load i64, i64* %21, align 8, !dbg !2630
  %2870 = load i64, i64* %12, align 8, !dbg !2630
  %2871 = icmp ult i64 %2869, %2870, !dbg !2630
  br i1 %2871, label %2872, label %2881, !dbg !2633

2872:                                             ; preds = %2868
  %2873 = load i8, i8* %31, align 1, !dbg !2630
  %2874 = zext i8 %2873 to i32, !dbg !2630
  %2875 = ashr i32 %2874, 6, !dbg !2630
  %2876 = add nsw i32 48, %2875, !dbg !2630
  %2877 = trunc i32 %2876 to i8, !dbg !2630
  %2878 = load i8*, i8** %11, align 8, !dbg !2630
  %2879 = load i64, i64* %21, align 8, !dbg !2630
  %2880 = getelementptr inbounds i8, i8* %2878, i64 %2879, !dbg !2630
  store i8 %2877, i8* %2880, align 1, !dbg !2630
  br label %2881, !dbg !2630

2881:                                             ; preds = %2872, %2868
  %2882 = load i32, i32* @x.37
  %2883 = load i32, i32* @y.38
  %2884 = sub i32 %2882, 1
  %2885 = mul i32 %2882, %2884
  %2886 = urem i32 %2885, 2
  %2887 = icmp eq i32 %2886, 0
  %2888 = icmp slt i32 %2883, 10
  %2889 = or i1 %2887, %2888
  br i1 %2889, label %originalBB690, label %originalBB690alteredBB

originalBB690:                                    ; preds = %2881, %originalBB690alteredBB
  %2890 = load i64, i64* %21, align 8, !dbg !2633
  %2891 = add i64 %2890, 1, !dbg !2633
  store i64 %2891, i64* %21, align 8, !dbg !2633
  %2892 = load i32, i32* @x.37
  %2893 = load i32, i32* @y.38
  %2894 = sub i32 %2892, 1
  %2895 = mul i32 %2892, %2894
  %2896 = urem i32 %2895, 2
  %2897 = icmp eq i32 %2896, 0
  %2898 = icmp slt i32 %2893, 10
  %2899 = or i1 %2897, %2898
  br i1 %2899, label %originalBBpart2698, label %originalBB690alteredBB

originalBBpart2698:                               ; preds = %originalBB690
  br label %2900, !dbg !2633

2900:                                             ; preds = %originalBBpart2698
  br label %2901, !dbg !2634

2901:                                             ; preds = %2900
  %2902 = load i64, i64* %21, align 8, !dbg !2635
  %2903 = load i64, i64* %12, align 8, !dbg !2635
  %2904 = icmp ult i64 %2902, %2903, !dbg !2635
  br i1 %2904, label %2905, label %2931, !dbg !2638

2905:                                             ; preds = %2901
  %2906 = load i32, i32* @x.37
  %2907 = load i32, i32* @y.38
  %2908 = sub i32 %2906, 1
  %2909 = mul i32 %2906, %2908
  %2910 = urem i32 %2909, 2
  %2911 = icmp eq i32 %2910, 0
  %2912 = icmp slt i32 %2907, 10
  %2913 = or i1 %2911, %2912
  br i1 %2913, label %originalBB700, label %originalBB700alteredBB

originalBB700:                                    ; preds = %2905, %originalBB700alteredBB
  %2914 = load i8, i8* %31, align 1, !dbg !2635
  %2915 = zext i8 %2914 to i32, !dbg !2635
  %2916 = ashr i32 %2915, 3, !dbg !2635
  %2917 = and i32 %2916, 7, !dbg !2635
  %2918 = add nsw i32 48, %2917, !dbg !2635
  %2919 = trunc i32 %2918 to i8, !dbg !2635
  %2920 = load i8*, i8** %11, align 8, !dbg !2635
  %2921 = load i64, i64* %21, align 8, !dbg !2635
  %2922 = getelementptr inbounds i8, i8* %2920, i64 %2921, !dbg !2635
  store i8 %2919, i8* %2922, align 1, !dbg !2635
  %2923 = load i32, i32* @x.37
  %2924 = load i32, i32* @y.38
  %2925 = sub i32 %2923, 1
  %2926 = mul i32 %2923, %2925
  %2927 = urem i32 %2926, 2
  %2928 = icmp eq i32 %2927, 0
  %2929 = icmp slt i32 %2924, 10
  %2930 = or i1 %2928, %2929
  br i1 %2930, label %originalBBpart2717, label %originalBB700alteredBB

originalBBpart2717:                               ; preds = %originalBB700
  br label %2931, !dbg !2635

2931:                                             ; preds = %originalBBpart2717, %2901
  %2932 = load i32, i32* @x.37
  %2933 = load i32, i32* @y.38
  %2934 = sub i32 %2932, 1
  %2935 = mul i32 %2932, %2934
  %2936 = urem i32 %2935, 2
  %2937 = icmp eq i32 %2936, 0
  %2938 = icmp slt i32 %2933, 10
  %2939 = or i1 %2937, %2938
  br i1 %2939, label %originalBB719, label %originalBB719alteredBB

originalBB719:                                    ; preds = %2931, %originalBB719alteredBB
  %2940 = load i64, i64* %21, align 8, !dbg !2638
  %2941 = add i64 %2940, 1, !dbg !2638
  store i64 %2941, i64* %21, align 8, !dbg !2638
  %2942 = load i32, i32* @x.37
  %2943 = load i32, i32* @y.38
  %2944 = sub i32 %2942, 1
  %2945 = mul i32 %2942, %2944
  %2946 = urem i32 %2945, 2
  %2947 = icmp eq i32 %2946, 0
  %2948 = icmp slt i32 %2943, 10
  %2949 = or i1 %2947, %2948
  br i1 %2949, label %originalBBpart2732, label %originalBB719alteredBB

originalBBpart2732:                               ; preds = %originalBB719
  br label %2950, !dbg !2638

2950:                                             ; preds = %originalBBpart2732
  %2951 = load i32, i32* @x.37
  %2952 = load i32, i32* @y.38
  %2953 = sub i32 %2951, 1
  %2954 = mul i32 %2951, %2953
  %2955 = urem i32 %2954, 2
  %2956 = icmp eq i32 %2955, 0
  %2957 = icmp slt i32 %2952, 10
  %2958 = or i1 %2956, %2957
  br i1 %2958, label %originalBB734, label %originalBB734alteredBB

originalBB734:                                    ; preds = %2950, %originalBB734alteredBB
  %2959 = load i8, i8* %31, align 1, !dbg !2639
  %2960 = zext i8 %2959 to i32, !dbg !2639
  %2961 = and i32 %2960, 7, !dbg !2640
  %2962 = add nsw i32 48, %2961, !dbg !2641
  %2963 = trunc i32 %2962 to i8, !dbg !2642
  store i8 %2963, i8* %31, align 1, !dbg !2643
  %2964 = load i32, i32* @x.37
  %2965 = load i32, i32* @y.38
  %2966 = sub i32 %2964, 1
  %2967 = mul i32 %2964, %2966
  %2968 = urem i32 %2967, 2
  %2969 = icmp eq i32 %2968, 0
  %2970 = icmp slt i32 %2965, 10
  %2971 = or i1 %2969, %2970
  br i1 %2971, label %originalBBpart2758, label %originalBB734alteredBB

originalBBpart2758:                               ; preds = %originalBB734
  br label %3053, !dbg !2644

2972:                                             ; preds = %2611, %2608
  %2973 = load i8, i8* %33, align 1, !dbg !2645
  %2974 = trunc i8 %2973 to i1, !dbg !2645
  br i1 %2974, label %2975, label %3052, !dbg !2647

2975:                                             ; preds = %2972
  %2976 = load i32, i32* @x.37
  %2977 = load i32, i32* @y.38
  %2978 = sub i32 %2976, 1
  %2979 = mul i32 %2976, %2978
  %2980 = urem i32 %2979, 2
  %2981 = icmp eq i32 %2980, 0
  %2982 = icmp slt i32 %2977, 10
  %2983 = or i1 %2981, %2982
  br i1 %2983, label %originalBB760, label %originalBB760alteredBB

originalBB760:                                    ; preds = %2975, %originalBB760alteredBB
  %2984 = load i32, i32* @x.37
  %2985 = load i32, i32* @y.38
  %2986 = sub i32 %2984, 1
  %2987 = mul i32 %2984, %2986
  %2988 = urem i32 %2987, 2
  %2989 = icmp eq i32 %2988, 0
  %2990 = icmp slt i32 %2985, 10
  %2991 = or i1 %2989, %2990
  br i1 %2991, label %originalBBpart2762, label %originalBB760alteredBB

originalBBpart2762:                               ; preds = %originalBB760
  br label %2992, !dbg !2648

2992:                                             ; preds = %originalBBpart2762
  %2993 = load i32, i32* @x.37
  %2994 = load i32, i32* @y.38
  %2995 = sub i32 %2993, 1
  %2996 = mul i32 %2993, %2995
  %2997 = urem i32 %2996, 2
  %2998 = icmp eq i32 %2997, 0
  %2999 = icmp slt i32 %2994, 10
  %3000 = or i1 %2998, %2999
  br i1 %3000, label %originalBB764, label %originalBB764alteredBB

originalBB764:                                    ; preds = %2992, %originalBB764alteredBB
  %3001 = load i64, i64* %21, align 8, !dbg !2650
  %3002 = load i64, i64* %12, align 8, !dbg !2650
  %3003 = icmp ult i64 %3001, %3002, !dbg !2650
  %3004 = load i32, i32* @x.37
  %3005 = load i32, i32* @y.38
  %3006 = sub i32 %3004, 1
  %3007 = mul i32 %3004, %3006
  %3008 = urem i32 %3007, 2
  %3009 = icmp eq i32 %3008, 0
  %3010 = icmp slt i32 %3005, 10
  %3011 = or i1 %3009, %3010
  br i1 %3011, label %originalBBpart2766, label %originalBB764alteredBB

originalBBpart2766:                               ; preds = %originalBB764
  br i1 %3003, label %3012, label %3032, !dbg !2653

3012:                                             ; preds = %originalBBpart2766
  %3013 = load i32, i32* @x.37
  %3014 = load i32, i32* @y.38
  %3015 = sub i32 %3013, 1
  %3016 = mul i32 %3013, %3015
  %3017 = urem i32 %3016, 2
  %3018 = icmp eq i32 %3017, 0
  %3019 = icmp slt i32 %3014, 10
  %3020 = or i1 %3018, %3019
  br i1 %3020, label %originalBB768, label %originalBB768alteredBB

originalBB768:                                    ; preds = %3012, %originalBB768alteredBB
  %3021 = load i8*, i8** %11, align 8, !dbg !2650
  %3022 = load i64, i64* %21, align 8, !dbg !2650
  %3023 = getelementptr inbounds i8, i8* %3021, i64 %3022, !dbg !2650
  store i8 92, i8* %3023, align 1, !dbg !2650
  %3024 = load i32, i32* @x.37
  %3025 = load i32, i32* @y.38
  %3026 = sub i32 %3024, 1
  %3027 = mul i32 %3024, %3026
  %3028 = urem i32 %3027, 2
  %3029 = icmp eq i32 %3028, 0
  %3030 = icmp slt i32 %3025, 10
  %3031 = or i1 %3029, %3030
  br i1 %3031, label %originalBBpart2770, label %originalBB768alteredBB

originalBBpart2770:                               ; preds = %originalBB768
  br label %3032, !dbg !2650

3032:                                             ; preds = %originalBBpart2770, %originalBBpart2766
  %3033 = load i64, i64* %21, align 8, !dbg !2653
  %3034 = add i64 %3033, 1, !dbg !2653
  store i64 %3034, i64* %21, align 8, !dbg !2653
  br label %3035, !dbg !2653

3035:                                             ; preds = %3032
  %3036 = load i32, i32* @x.37
  %3037 = load i32, i32* @y.38
  %3038 = sub i32 %3036, 1
  %3039 = mul i32 %3036, %3038
  %3040 = urem i32 %3039, 2
  %3041 = icmp eq i32 %3040, 0
  %3042 = icmp slt i32 %3037, 10
  %3043 = or i1 %3041, %3042
  br i1 %3043, label %originalBB772, label %originalBB772alteredBB

originalBB772:                                    ; preds = %3035, %originalBB772alteredBB
  store i8 0, i8* %33, align 1, !dbg !2654
  %3044 = load i32, i32* @x.37
  %3045 = load i32, i32* @y.38
  %3046 = sub i32 %3044, 1
  %3047 = mul i32 %3044, %3046
  %3048 = urem i32 %3047, 2
  %3049 = icmp eq i32 %3048, 0
  %3050 = icmp slt i32 %3045, 10
  %3051 = or i1 %3049, %3050
  br i1 %3051, label %originalBBpart2774, label %originalBB772alteredBB

originalBBpart2774:                               ; preds = %originalBB772
  br label %3052, !dbg !2655

3052:                                             ; preds = %originalBBpart2774, %2972
  br label %3053

3053:                                             ; preds = %3052, %originalBBpart2758
  %3054 = load i64, i64* %42, align 8, !dbg !2656
  %3055 = load i64, i64* %20, align 8, !dbg !2658
  %3056 = add i64 %3055, 1, !dbg !2659
  %3057 = icmp ule i64 %3054, %3056, !dbg !2660
  br i1 %3057, label %3058, label %3075, !dbg !2661

3058:                                             ; preds = %3053
  %3059 = load i32, i32* @x.37
  %3060 = load i32, i32* @y.38
  %3061 = sub i32 %3059, 1
  %3062 = mul i32 %3059, %3061
  %3063 = urem i32 %3062, 2
  %3064 = icmp eq i32 %3063, 0
  %3065 = icmp slt i32 %3060, 10
  %3066 = or i1 %3064, %3065
  br i1 %3066, label %originalBB776, label %originalBB776alteredBB

originalBB776:                                    ; preds = %3058, %originalBB776alteredBB
  %3067 = load i32, i32* @x.37
  %3068 = load i32, i32* @y.38
  %3069 = sub i32 %3067, 1
  %3070 = mul i32 %3067, %3069
  %3071 = urem i32 %3070, 2
  %3072 = icmp eq i32 %3071, 0
  %3073 = icmp slt i32 %3068, 10
  %3074 = or i1 %3072, %3073
  br i1 %3074, label %originalBBpart2778, label %originalBB776alteredBB

originalBBpart2778:                               ; preds = %originalBB776
  br label %3335, !dbg !2662

3075:                                             ; preds = %3053
  %3076 = load i32, i32* @x.37
  %3077 = load i32, i32* @y.38
  %3078 = sub i32 %3076, 1
  %3079 = mul i32 %3076, %3078
  %3080 = urem i32 %3079, 2
  %3081 = icmp eq i32 %3080, 0
  %3082 = icmp slt i32 %3077, 10
  %3083 = or i1 %3081, %3082
  br i1 %3083, label %originalBB780, label %originalBB780alteredBB

originalBB780:                                    ; preds = %3075, %originalBB780alteredBB
  %3084 = load i32, i32* @x.37
  %3085 = load i32, i32* @y.38
  %3086 = sub i32 %3084, 1
  %3087 = mul i32 %3084, %3086
  %3088 = urem i32 %3087, 2
  %3089 = icmp eq i32 %3088, 0
  %3090 = icmp slt i32 %3085, 10
  %3091 = or i1 %3089, %3090
  br i1 %3091, label %originalBBpart2782, label %originalBB780alteredBB

originalBBpart2782:                               ; preds = %originalBB780
  br label %3092, !dbg !2663

3092:                                             ; preds = %originalBBpart2782
  %3093 = load i32, i32* @x.37
  %3094 = load i32, i32* @y.38
  %3095 = sub i32 %3093, 1
  %3096 = mul i32 %3093, %3095
  %3097 = urem i32 %3096, 2
  %3098 = icmp eq i32 %3097, 0
  %3099 = icmp slt i32 %3094, 10
  %3100 = or i1 %3098, %3099
  br i1 %3100, label %originalBB784, label %originalBB784alteredBB

originalBB784:                                    ; preds = %3092, %originalBB784alteredBB
  %3101 = load i8, i8* %28, align 1, !dbg !2664
  %3102 = trunc i8 %3101 to i1, !dbg !2664
  %3103 = load i32, i32* @x.37
  %3104 = load i32, i32* @y.38
  %3105 = sub i32 %3103, 1
  %3106 = mul i32 %3103, %3105
  %3107 = urem i32 %3106, 2
  %3108 = icmp eq i32 %3107, 0
  %3109 = icmp slt i32 %3104, 10
  %3110 = or i1 %3108, %3109
  br i1 %3110, label %originalBBpart2786, label %originalBB784alteredBB

originalBBpart2786:                               ; preds = %originalBB784
  br i1 %3102, label %3111, label %3267, !dbg !2664

3111:                                             ; preds = %originalBBpart2786
  %3112 = load i32, i32* @x.37
  %3113 = load i32, i32* @y.38
  %3114 = sub i32 %3112, 1
  %3115 = mul i32 %3112, %3114
  %3116 = urem i32 %3115, 2
  %3117 = icmp eq i32 %3116, 0
  %3118 = icmp slt i32 %3113, 10
  %3119 = or i1 %3117, %3118
  br i1 %3119, label %originalBB788, label %originalBB788alteredBB

originalBB788:                                    ; preds = %3111, %originalBB788alteredBB
  %3120 = load i8, i8* %34, align 1, !dbg !2664
  %3121 = trunc i8 %3120 to i1, !dbg !2664
  %3122 = load i32, i32* @x.37
  %3123 = load i32, i32* @y.38
  %3124 = sub i32 %3122, 1
  %3125 = mul i32 %3122, %3124
  %3126 = urem i32 %3125, 2
  %3127 = icmp eq i32 %3126, 0
  %3128 = icmp slt i32 %3123, 10
  %3129 = or i1 %3127, %3128
  br i1 %3129, label %originalBBpart2790, label %originalBB788alteredBB

originalBBpart2790:                               ; preds = %originalBB788
  br i1 %3121, label %3267, label %3130, !dbg !2667

3130:                                             ; preds = %originalBBpart2790
  %3131 = load i32, i32* @x.37
  %3132 = load i32, i32* @y.38
  %3133 = sub i32 %3131, 1
  %3134 = mul i32 %3131, %3133
  %3135 = urem i32 %3134, 2
  %3136 = icmp eq i32 %3135, 0
  %3137 = icmp slt i32 %3132, 10
  %3138 = or i1 %3136, %3137
  br i1 %3138, label %originalBB792, label %originalBB792alteredBB

originalBB792:                                    ; preds = %3130, %originalBB792alteredBB
  %3139 = load i32, i32* @x.37
  %3140 = load i32, i32* @y.38
  %3141 = sub i32 %3139, 1
  %3142 = mul i32 %3139, %3141
  %3143 = urem i32 %3142, 2
  %3144 = icmp eq i32 %3143, 0
  %3145 = icmp slt i32 %3140, 10
  %3146 = or i1 %3144, %3145
  br i1 %3146, label %originalBBpart2794, label %originalBB792alteredBB

originalBBpart2794:                               ; preds = %originalBB792
  br label %3147, !dbg !2668

3147:                                             ; preds = %originalBBpart2794
  %3148 = load i32, i32* @x.37
  %3149 = load i32, i32* @y.38
  %3150 = sub i32 %3148, 1
  %3151 = mul i32 %3148, %3150
  %3152 = urem i32 %3151, 2
  %3153 = icmp eq i32 %3152, 0
  %3154 = icmp slt i32 %3149, 10
  %3155 = or i1 %3153, %3154
  br i1 %3155, label %originalBB796, label %originalBB796alteredBB

originalBB796:                                    ; preds = %3147, %originalBB796alteredBB
  %3156 = load i64, i64* %21, align 8, !dbg !2670
  %3157 = load i64, i64* %12, align 8, !dbg !2670
  %3158 = icmp ult i64 %3156, %3157, !dbg !2670
  %3159 = load i32, i32* @x.37
  %3160 = load i32, i32* @y.38
  %3161 = sub i32 %3159, 1
  %3162 = mul i32 %3159, %3161
  %3163 = urem i32 %3162, 2
  %3164 = icmp eq i32 %3163, 0
  %3165 = icmp slt i32 %3160, 10
  %3166 = or i1 %3164, %3165
  br i1 %3166, label %originalBBpart2798, label %originalBB796alteredBB

originalBBpart2798:                               ; preds = %originalBB796
  br i1 %3158, label %3167, label %3187, !dbg !2673

3167:                                             ; preds = %originalBBpart2798
  %3168 = load i32, i32* @x.37
  %3169 = load i32, i32* @y.38
  %3170 = sub i32 %3168, 1
  %3171 = mul i32 %3168, %3170
  %3172 = urem i32 %3171, 2
  %3173 = icmp eq i32 %3172, 0
  %3174 = icmp slt i32 %3169, 10
  %3175 = or i1 %3173, %3174
  br i1 %3175, label %originalBB800, label %originalBB800alteredBB

originalBB800:                                    ; preds = %3167, %originalBB800alteredBB
  %3176 = load i8*, i8** %11, align 8, !dbg !2670
  %3177 = load i64, i64* %21, align 8, !dbg !2670
  %3178 = getelementptr inbounds i8, i8* %3176, i64 %3177, !dbg !2670
  store i8 39, i8* %3178, align 1, !dbg !2670
  %3179 = load i32, i32* @x.37
  %3180 = load i32, i32* @y.38
  %3181 = sub i32 %3179, 1
  %3182 = mul i32 %3179, %3181
  %3183 = urem i32 %3182, 2
  %3184 = icmp eq i32 %3183, 0
  %3185 = icmp slt i32 %3180, 10
  %3186 = or i1 %3184, %3185
  br i1 %3186, label %originalBBpart2802, label %originalBB800alteredBB

originalBBpart2802:                               ; preds = %originalBB800
  br label %3187, !dbg !2670

3187:                                             ; preds = %originalBBpart2802, %originalBBpart2798
  %3188 = load i64, i64* %21, align 8, !dbg !2673
  %3189 = add i64 %3188, 1, !dbg !2673
  store i64 %3189, i64* %21, align 8, !dbg !2673
  br label %3190, !dbg !2673

3190:                                             ; preds = %3187
  %3191 = load i32, i32* @x.37
  %3192 = load i32, i32* @y.38
  %3193 = sub i32 %3191, 1
  %3194 = mul i32 %3191, %3193
  %3195 = urem i32 %3194, 2
  %3196 = icmp eq i32 %3195, 0
  %3197 = icmp slt i32 %3192, 10
  %3198 = or i1 %3196, %3197
  br i1 %3198, label %originalBB804, label %originalBB804alteredBB

originalBB804:                                    ; preds = %3190, %originalBB804alteredBB
  %3199 = load i32, i32* @x.37
  %3200 = load i32, i32* @y.38
  %3201 = sub i32 %3199, 1
  %3202 = mul i32 %3199, %3201
  %3203 = urem i32 %3202, 2
  %3204 = icmp eq i32 %3203, 0
  %3205 = icmp slt i32 %3200, 10
  %3206 = or i1 %3204, %3205
  br i1 %3206, label %originalBBpart2806, label %originalBB804alteredBB

originalBBpart2806:                               ; preds = %originalBB804
  br label %3207, !dbg !2668

3207:                                             ; preds = %originalBBpart2806
  %3208 = load i64, i64* %21, align 8, !dbg !2674
  %3209 = load i64, i64* %12, align 8, !dbg !2674
  %3210 = icmp ult i64 %3208, %3209, !dbg !2674
  br i1 %3210, label %3211, label %3231, !dbg !2677

3211:                                             ; preds = %3207
  %3212 = load i32, i32* @x.37
  %3213 = load i32, i32* @y.38
  %3214 = sub i32 %3212, 1
  %3215 = mul i32 %3212, %3214
  %3216 = urem i32 %3215, 2
  %3217 = icmp eq i32 %3216, 0
  %3218 = icmp slt i32 %3213, 10
  %3219 = or i1 %3217, %3218
  br i1 %3219, label %originalBB808, label %originalBB808alteredBB

originalBB808:                                    ; preds = %3211, %originalBB808alteredBB
  %3220 = load i8*, i8** %11, align 8, !dbg !2674
  %3221 = load i64, i64* %21, align 8, !dbg !2674
  %3222 = getelementptr inbounds i8, i8* %3220, i64 %3221, !dbg !2674
  store i8 39, i8* %3222, align 1, !dbg !2674
  %3223 = load i32, i32* @x.37
  %3224 = load i32, i32* @y.38
  %3225 = sub i32 %3223, 1
  %3226 = mul i32 %3223, %3225
  %3227 = urem i32 %3226, 2
  %3228 = icmp eq i32 %3227, 0
  %3229 = icmp slt i32 %3224, 10
  %3230 = or i1 %3228, %3229
  br i1 %3230, label %originalBBpart2810, label %originalBB808alteredBB

originalBBpart2810:                               ; preds = %originalBB808
  br label %3231, !dbg !2674

3231:                                             ; preds = %originalBBpart2810, %3207
  %3232 = load i32, i32* @x.37
  %3233 = load i32, i32* @y.38
  %3234 = sub i32 %3232, 1
  %3235 = mul i32 %3232, %3234
  %3236 = urem i32 %3235, 2
  %3237 = icmp eq i32 %3236, 0
  %3238 = icmp slt i32 %3233, 10
  %3239 = or i1 %3237, %3238
  br i1 %3239, label %originalBB812, label %originalBB812alteredBB

originalBB812:                                    ; preds = %3231, %originalBB812alteredBB
  %3240 = load i64, i64* %21, align 8, !dbg !2677
  %3241 = add i64 %3240, 1, !dbg !2677
  store i64 %3241, i64* %21, align 8, !dbg !2677
  %3242 = load i32, i32* @x.37
  %3243 = load i32, i32* @y.38
  %3244 = sub i32 %3242, 1
  %3245 = mul i32 %3242, %3244
  %3246 = urem i32 %3245, 2
  %3247 = icmp eq i32 %3246, 0
  %3248 = icmp slt i32 %3243, 10
  %3249 = or i1 %3247, %3248
  br i1 %3249, label %originalBBpart2828, label %originalBB812alteredBB

originalBBpart2828:                               ; preds = %originalBB812
  br label %3250, !dbg !2677

3250:                                             ; preds = %originalBBpart2828
  %3251 = load i32, i32* @x.37
  %3252 = load i32, i32* @y.38
  %3253 = sub i32 %3251, 1
  %3254 = mul i32 %3251, %3253
  %3255 = urem i32 %3254, 2
  %3256 = icmp eq i32 %3255, 0
  %3257 = icmp slt i32 %3252, 10
  %3258 = or i1 %3256, %3257
  br i1 %3258, label %originalBB830, label %originalBB830alteredBB

originalBB830:                                    ; preds = %3250, %originalBB830alteredBB
  store i8 0, i8* %28, align 1, !dbg !2668
  %3259 = load i32, i32* @x.37
  %3260 = load i32, i32* @y.38
  %3261 = sub i32 %3259, 1
  %3262 = mul i32 %3259, %3261
  %3263 = urem i32 %3262, 2
  %3264 = icmp eq i32 %3263, 0
  %3265 = icmp slt i32 %3260, 10
  %3266 = or i1 %3264, %3265
  br i1 %3266, label %originalBBpart2832, label %originalBB830alteredBB

originalBBpart2832:                               ; preds = %originalBB830
  br label %3267, !dbg !2668

3267:                                             ; preds = %originalBBpart2832, %originalBBpart2790, %originalBBpart2786
  br label %3268, !dbg !2667

3268:                                             ; preds = %3267
  br label %3269, !dbg !2678

3269:                                             ; preds = %3268
  %3270 = load i32, i32* @x.37
  %3271 = load i32, i32* @y.38
  %3272 = sub i32 %3270, 1
  %3273 = mul i32 %3270, %3272
  %3274 = urem i32 %3273, 2
  %3275 = icmp eq i32 %3274, 0
  %3276 = icmp slt i32 %3271, 10
  %3277 = or i1 %3275, %3276
  br i1 %3277, label %originalBB834, label %originalBB834alteredBB

originalBB834:                                    ; preds = %3269, %originalBB834alteredBB
  %3278 = load i64, i64* %21, align 8, !dbg !2679
  %3279 = load i64, i64* %12, align 8, !dbg !2679
  %3280 = icmp ult i64 %3278, %3279, !dbg !2679
  %3281 = load i32, i32* @x.37
  %3282 = load i32, i32* @y.38
  %3283 = sub i32 %3281, 1
  %3284 = mul i32 %3281, %3283
  %3285 = urem i32 %3284, 2
  %3286 = icmp eq i32 %3285, 0
  %3287 = icmp slt i32 %3282, 10
  %3288 = or i1 %3286, %3287
  br i1 %3288, label %originalBBpart2836, label %originalBB834alteredBB

originalBBpart2836:                               ; preds = %originalBB834
  br i1 %3280, label %3289, label %3294, !dbg !2682

3289:                                             ; preds = %originalBBpart2836
  %3290 = load i8, i8* %31, align 1, !dbg !2679
  %3291 = load i8*, i8** %11, align 8, !dbg !2679
  %3292 = load i64, i64* %21, align 8, !dbg !2679
  %3293 = getelementptr inbounds i8, i8* %3291, i64 %3292, !dbg !2679
  store i8 %3290, i8* %3293, align 1, !dbg !2679
  br label %3294, !dbg !2679

3294:                                             ; preds = %3289, %originalBBpart2836
  %3295 = load i32, i32* @x.37
  %3296 = load i32, i32* @y.38
  %3297 = sub i32 %3295, 1
  %3298 = mul i32 %3295, %3297
  %3299 = urem i32 %3298, 2
  %3300 = icmp eq i32 %3299, 0
  %3301 = icmp slt i32 %3296, 10
  %3302 = or i1 %3300, %3301
  br i1 %3302, label %originalBB838, label %originalBB838alteredBB

originalBB838:                                    ; preds = %3294, %originalBB838alteredBB
  %3303 = load i64, i64* %21, align 8, !dbg !2682
  %3304 = add i64 %3303, 1, !dbg !2682
  store i64 %3304, i64* %21, align 8, !dbg !2682
  %3305 = load i32, i32* @x.37
  %3306 = load i32, i32* @y.38
  %3307 = sub i32 %3305, 1
  %3308 = mul i32 %3305, %3307
  %3309 = urem i32 %3308, 2
  %3310 = icmp eq i32 %3309, 0
  %3311 = icmp slt i32 %3306, 10
  %3312 = or i1 %3310, %3311
  br i1 %3312, label %originalBBpart2848, label %originalBB838alteredBB

originalBBpart2848:                               ; preds = %originalBB838
  br label %3313, !dbg !2682

3313:                                             ; preds = %originalBBpart2848
  %3314 = load i32, i32* @x.37
  %3315 = load i32, i32* @y.38
  %3316 = sub i32 %3314, 1
  %3317 = mul i32 %3314, %3316
  %3318 = urem i32 %3317, 2
  %3319 = icmp eq i32 %3318, 0
  %3320 = icmp slt i32 %3315, 10
  %3321 = or i1 %3319, %3320
  br i1 %3321, label %originalBB850, label %originalBB850alteredBB

originalBB850:                                    ; preds = %3313, %originalBB850alteredBB
  %3322 = load i8*, i8** %13, align 8, !dbg !2683
  %3323 = load i64, i64* %20, align 8, !dbg !2684
  %3324 = add i64 %3323, 1, !dbg !2684
  store i64 %3324, i64* %20, align 8, !dbg !2684
  %3325 = getelementptr inbounds i8, i8* %3322, i64 %3324, !dbg !2683
  %3326 = load i8, i8* %3325, align 1, !dbg !2683
  store i8 %3326, i8* %31, align 1, !dbg !2685
  %3327 = load i32, i32* @x.37
  %3328 = load i32, i32* @y.38
  %3329 = sub i32 %3327, 1
  %3330 = mul i32 %3327, %3329
  %3331 = urem i32 %3330, 2
  %3332 = icmp eq i32 %3331, 0
  %3333 = icmp slt i32 %3328, 10
  %3334 = or i1 %3332, %3333
  br i1 %3334, label %originalBBpart2855, label %originalBB850alteredBB

originalBBpart2855:                               ; preds = %originalBB850
  br label %2608, !dbg !2686, !llvm.loop !2687

3335:                                             ; preds = %originalBBpart2778
  %3336 = load i32, i32* @x.37
  %3337 = load i32, i32* @y.38
  %3338 = sub i32 %3336, 1
  %3339 = mul i32 %3336, %3338
  %3340 = urem i32 %3339, 2
  %3341 = icmp eq i32 %3340, 0
  %3342 = icmp slt i32 %3337, 10
  %3343 = or i1 %3341, %3342
  br i1 %3343, label %originalBB857, label %originalBB857alteredBB

originalBB857:                                    ; preds = %3335, %originalBB857alteredBB
  %3344 = load i32, i32* @x.37
  %3345 = load i32, i32* @y.38
  %3346 = sub i32 %3344, 1
  %3347 = mul i32 %3344, %3346
  %3348 = urem i32 %3347, 2
  %3349 = icmp eq i32 %3348, 0
  %3350 = icmp slt i32 %3345, 10
  %3351 = or i1 %3349, %3350
  br i1 %3351, label %originalBBpart2859, label %originalBB857alteredBB

originalBBpart2859:                               ; preds = %originalBB857
  br label %3654, !dbg !2690

3352:                                             ; preds = %originalBBpart2613, %originalBBpart2609
  br label %3353, !dbg !2691

3353:                                             ; preds = %3352, %2079, %2078, %1897, %1839, %1802, %1773, %originalBBpart2348, %originalBBpart2221
  %3354 = load i8, i8* %25, align 1, !dbg !2692
  %3355 = trunc i8 %3354 to i1, !dbg !2692
  br i1 %3355, label %3356, label %3359, !dbg !2694

3356:                                             ; preds = %3353
  %3357 = load i32, i32* %15, align 4, !dbg !2695
  %3358 = icmp ne i32 %3357, 2, !dbg !2696
  br i1 %3358, label %3378, label %3359, !dbg !2697

3359:                                             ; preds = %3356, %3353
  %3360 = load i32, i32* @x.37
  %3361 = load i32, i32* @y.38
  %3362 = sub i32 %3360, 1
  %3363 = mul i32 %3360, %3362
  %3364 = urem i32 %3363, 2
  %3365 = icmp eq i32 %3364, 0
  %3366 = icmp slt i32 %3361, 10
  %3367 = or i1 %3365, %3366
  br i1 %3367, label %originalBB861, label %originalBB861alteredBB

originalBB861:                                    ; preds = %3359, %originalBB861alteredBB
  %3368 = load i8, i8* %27, align 1, !dbg !2698
  %3369 = trunc i8 %3368 to i1, !dbg !2698
  %3370 = load i32, i32* @x.37
  %3371 = load i32, i32* @y.38
  %3372 = sub i32 %3370, 1
  %3373 = mul i32 %3370, %3372
  %3374 = urem i32 %3373, 2
  %3375 = icmp eq i32 %3374, 0
  %3376 = icmp slt i32 %3371, 10
  %3377 = or i1 %3375, %3376
  br i1 %3377, label %originalBBpart2863, label %originalBB861alteredBB

originalBBpart2863:                               ; preds = %originalBB861
  br i1 %3369, label %3378, label %3411, !dbg !2699

3378:                                             ; preds = %originalBBpart2863, %3356
  %3379 = load i32, i32* @x.37
  %3380 = load i32, i32* @y.38
  %3381 = sub i32 %3379, 1
  %3382 = mul i32 %3379, %3381
  %3383 = urem i32 %3382, 2
  %3384 = icmp eq i32 %3383, 0
  %3385 = icmp slt i32 %3380, 10
  %3386 = or i1 %3384, %3385
  br i1 %3386, label %originalBB865, label %originalBB865alteredBB

originalBB865:                                    ; preds = %3378, %originalBB865alteredBB
  %3387 = load i32*, i32** %17, align 8, !dbg !2700
  %3388 = icmp ne i32* %3387, null, !dbg !2700
  %3389 = load i32, i32* @x.37
  %3390 = load i32, i32* @y.38
  %3391 = sub i32 %3389, 1
  %3392 = mul i32 %3389, %3391
  %3393 = urem i32 %3392, 2
  %3394 = icmp eq i32 %3393, 0
  %3395 = icmp slt i32 %3390, 10
  %3396 = or i1 %3394, %3395
  br i1 %3396, label %originalBBpart2867, label %originalBB865alteredBB

originalBBpart2867:                               ; preds = %originalBB865
  br i1 %3388, label %3397, label %3411, !dbg !2701

3397:                                             ; preds = %originalBBpart2867
  %3398 = load i32*, i32** %17, align 8, !dbg !2702
  %3399 = load i8, i8* %31, align 1, !dbg !2703
  %3400 = zext i8 %3399 to i64, !dbg !2703
  %3401 = udiv i64 %3400, 32, !dbg !2704
  %3402 = getelementptr inbounds i32, i32* %3398, i64 %3401, !dbg !2702
  %3403 = load i32, i32* %3402, align 4, !dbg !2702
  %3404 = load i8, i8* %31, align 1, !dbg !2705
  %3405 = zext i8 %3404 to i64, !dbg !2705
  %3406 = urem i64 %3405, 32, !dbg !2706
  %3407 = trunc i64 %3406 to i32, !dbg !2707
  %3408 = lshr i32 %3403, %3407, !dbg !2707
  %3409 = and i32 %3408, 1, !dbg !2708
  %3410 = icmp ne i32 %3409, 0, !dbg !2708
  br i1 %3410, label %3415, label %3411, !dbg !2709

3411:                                             ; preds = %3397, %originalBBpart2867, %originalBBpart2863
  %3412 = load i8, i8* %33, align 1, !dbg !2710
  %3413 = trunc i8 %3412 to i1, !dbg !2710
  br i1 %3413, label %3415, label %3414, !dbg !2711

3414:                                             ; preds = %3411
  br label %3654, !dbg !2712

3415:                                             ; preds = %3411, %3397
  br label %3416, !dbg !2710

3416:                                             ; preds = %3415, %originalBBpart2412
  call void @llvm.dbg.label(metadata !2713), !dbg !2714
  %3417 = load i32, i32* @x.37
  %3418 = load i32, i32* @y.38
  %3419 = sub i32 %3417, 1
  %3420 = mul i32 %3417, %3419
  %3421 = urem i32 %3420, 2
  %3422 = icmp eq i32 %3421, 0
  %3423 = icmp slt i32 %3418, 10
  %3424 = or i1 %3422, %3423
  br i1 %3424, label %originalBB869, label %originalBB869alteredBB

originalBB869:                                    ; preds = %3416, %originalBB869alteredBB
  %3425 = load i32, i32* @x.37
  %3426 = load i32, i32* @y.38
  %3427 = sub i32 %3425, 1
  %3428 = mul i32 %3425, %3427
  %3429 = urem i32 %3428, 2
  %3430 = icmp eq i32 %3429, 0
  %3431 = icmp slt i32 %3426, 10
  %3432 = or i1 %3430, %3431
  br i1 %3432, label %originalBBpart2871, label %originalBB869alteredBB

originalBBpart2871:                               ; preds = %originalBB869
  br label %3433, !dbg !2715

3433:                                             ; preds = %originalBBpart2871
  %3434 = load i32, i32* @x.37
  %3435 = load i32, i32* @y.38
  %3436 = sub i32 %3434, 1
  %3437 = mul i32 %3434, %3436
  %3438 = urem i32 %3437, 2
  %3439 = icmp eq i32 %3438, 0
  %3440 = icmp slt i32 %3435, 10
  %3441 = or i1 %3439, %3440
  br i1 %3441, label %originalBB873, label %originalBB873alteredBB

originalBB873:                                    ; preds = %3433, %originalBB873alteredBB
  %3442 = load i8, i8* %27, align 1, !dbg !2716
  %3443 = trunc i8 %3442 to i1, !dbg !2716
  %3444 = load i32, i32* @x.37
  %3445 = load i32, i32* @y.38
  %3446 = sub i32 %3444, 1
  %3447 = mul i32 %3444, %3446
  %3448 = urem i32 %3447, 2
  %3449 = icmp eq i32 %3448, 0
  %3450 = icmp slt i32 %3445, 10
  %3451 = or i1 %3449, %3450
  br i1 %3451, label %originalBBpart2875, label %originalBB873alteredBB

originalBBpart2875:                               ; preds = %originalBB873
  br i1 %3443, label %3452, label %3453, !dbg !2719

3452:                                             ; preds = %originalBBpart2875
  br label %4222, !dbg !2716

3453:                                             ; preds = %originalBBpart2875
  store i8 1, i8* %34, align 1, !dbg !2719
  %3454 = load i32, i32* %15, align 4, !dbg !2720
  %3455 = icmp eq i32 %3454, 2, !dbg !2720
  br i1 %3455, label %3456, label %3592, !dbg !2720

3456:                                             ; preds = %3453
  %3457 = load i8, i8* %28, align 1, !dbg !2720
  %3458 = trunc i8 %3457 to i1, !dbg !2720
  br i1 %3458, label %3592, label %3459, !dbg !2719

3459:                                             ; preds = %3456
  br label %3460, !dbg !2722

3460:                                             ; preds = %3459
  %3461 = load i64, i64* %21, align 8, !dbg !2724
  %3462 = load i64, i64* %12, align 8, !dbg !2724
  %3463 = icmp ult i64 %3461, %3462, !dbg !2724
  br i1 %3463, label %3464, label %3468, !dbg !2727

3464:                                             ; preds = %3460
  %3465 = load i8*, i8** %11, align 8, !dbg !2724
  %3466 = load i64, i64* %21, align 8, !dbg !2724
  %3467 = getelementptr inbounds i8, i8* %3465, i64 %3466, !dbg !2724
  store i8 39, i8* %3467, align 1, !dbg !2724
  br label %3468, !dbg !2724

3468:                                             ; preds = %3464, %3460
  %3469 = load i64, i64* %21, align 8, !dbg !2727
  %3470 = add i64 %3469, 1, !dbg !2727
  store i64 %3470, i64* %21, align 8, !dbg !2727
  br label %3471, !dbg !2727

3471:                                             ; preds = %3468
  br label %3472, !dbg !2722

3472:                                             ; preds = %3471
  %3473 = load i32, i32* @x.37
  %3474 = load i32, i32* @y.38
  %3475 = sub i32 %3473, 1
  %3476 = mul i32 %3473, %3475
  %3477 = urem i32 %3476, 2
  %3478 = icmp eq i32 %3477, 0
  %3479 = icmp slt i32 %3474, 10
  %3480 = or i1 %3478, %3479
  br i1 %3480, label %originalBB877, label %originalBB877alteredBB

originalBB877:                                    ; preds = %3472, %originalBB877alteredBB
  %3481 = load i64, i64* %21, align 8, !dbg !2728
  %3482 = load i64, i64* %12, align 8, !dbg !2728
  %3483 = icmp ult i64 %3481, %3482, !dbg !2728
  %3484 = load i32, i32* @x.37
  %3485 = load i32, i32* @y.38
  %3486 = sub i32 %3484, 1
  %3487 = mul i32 %3484, %3486
  %3488 = urem i32 %3487, 2
  %3489 = icmp eq i32 %3488, 0
  %3490 = icmp slt i32 %3485, 10
  %3491 = or i1 %3489, %3490
  br i1 %3491, label %originalBBpart2879, label %originalBB877alteredBB

originalBBpart2879:                               ; preds = %originalBB877
  br i1 %3483, label %3492, label %3496, !dbg !2731

3492:                                             ; preds = %originalBBpart2879
  %3493 = load i8*, i8** %11, align 8, !dbg !2728
  %3494 = load i64, i64* %21, align 8, !dbg !2728
  %3495 = getelementptr inbounds i8, i8* %3493, i64 %3494, !dbg !2728
  store i8 36, i8* %3495, align 1, !dbg !2728
  br label %3496, !dbg !2728

3496:                                             ; preds = %3492, %originalBBpart2879
  %3497 = load i64, i64* %21, align 8, !dbg !2731
  %3498 = add i64 %3497, 1, !dbg !2731
  store i64 %3498, i64* %21, align 8, !dbg !2731
  br label %3499, !dbg !2731

3499:                                             ; preds = %3496
  %3500 = load i32, i32* @x.37
  %3501 = load i32, i32* @y.38
  %3502 = sub i32 %3500, 1
  %3503 = mul i32 %3500, %3502
  %3504 = urem i32 %3503, 2
  %3505 = icmp eq i32 %3504, 0
  %3506 = icmp slt i32 %3501, 10
  %3507 = or i1 %3505, %3506
  br i1 %3507, label %originalBB881, label %originalBB881alteredBB

originalBB881:                                    ; preds = %3499, %originalBB881alteredBB
  %3508 = load i32, i32* @x.37
  %3509 = load i32, i32* @y.38
  %3510 = sub i32 %3508, 1
  %3511 = mul i32 %3508, %3510
  %3512 = urem i32 %3511, 2
  %3513 = icmp eq i32 %3512, 0
  %3514 = icmp slt i32 %3509, 10
  %3515 = or i1 %3513, %3514
  br i1 %3515, label %originalBBpart2883, label %originalBB881alteredBB

originalBBpart2883:                               ; preds = %originalBB881
  br label %3516, !dbg !2722

3516:                                             ; preds = %originalBBpart2883
  %3517 = load i32, i32* @x.37
  %3518 = load i32, i32* @y.38
  %3519 = sub i32 %3517, 1
  %3520 = mul i32 %3517, %3519
  %3521 = urem i32 %3520, 2
  %3522 = icmp eq i32 %3521, 0
  %3523 = icmp slt i32 %3518, 10
  %3524 = or i1 %3522, %3523
  br i1 %3524, label %originalBB885, label %originalBB885alteredBB

originalBB885:                                    ; preds = %3516, %originalBB885alteredBB
  %3525 = load i64, i64* %21, align 8, !dbg !2732
  %3526 = load i64, i64* %12, align 8, !dbg !2732
  %3527 = icmp ult i64 %3525, %3526, !dbg !2732
  %3528 = load i32, i32* @x.37
  %3529 = load i32, i32* @y.38
  %3530 = sub i32 %3528, 1
  %3531 = mul i32 %3528, %3530
  %3532 = urem i32 %3531, 2
  %3533 = icmp eq i32 %3532, 0
  %3534 = icmp slt i32 %3529, 10
  %3535 = or i1 %3533, %3534
  br i1 %3535, label %originalBBpart2887, label %originalBB885alteredBB

originalBBpart2887:                               ; preds = %originalBB885
  br i1 %3527, label %3536, label %3556, !dbg !2735

3536:                                             ; preds = %originalBBpart2887
  %3537 = load i32, i32* @x.37
  %3538 = load i32, i32* @y.38
  %3539 = sub i32 %3537, 1
  %3540 = mul i32 %3537, %3539
  %3541 = urem i32 %3540, 2
  %3542 = icmp eq i32 %3541, 0
  %3543 = icmp slt i32 %3538, 10
  %3544 = or i1 %3542, %3543
  br i1 %3544, label %originalBB889, label %originalBB889alteredBB

originalBB889:                                    ; preds = %3536, %originalBB889alteredBB
  %3545 = load i8*, i8** %11, align 8, !dbg !2732
  %3546 = load i64, i64* %21, align 8, !dbg !2732
  %3547 = getelementptr inbounds i8, i8* %3545, i64 %3546, !dbg !2732
  store i8 39, i8* %3547, align 1, !dbg !2732
  %3548 = load i32, i32* @x.37
  %3549 = load i32, i32* @y.38
  %3550 = sub i32 %3548, 1
  %3551 = mul i32 %3548, %3550
  %3552 = urem i32 %3551, 2
  %3553 = icmp eq i32 %3552, 0
  %3554 = icmp slt i32 %3549, 10
  %3555 = or i1 %3553, %3554
  br i1 %3555, label %originalBBpart2891, label %originalBB889alteredBB

originalBBpart2891:                               ; preds = %originalBB889
  br label %3556, !dbg !2732

3556:                                             ; preds = %originalBBpart2891, %originalBBpart2887
  %3557 = load i32, i32* @x.37
  %3558 = load i32, i32* @y.38
  %3559 = sub i32 %3557, 1
  %3560 = mul i32 %3557, %3559
  %3561 = urem i32 %3560, 2
  %3562 = icmp eq i32 %3561, 0
  %3563 = icmp slt i32 %3558, 10
  %3564 = or i1 %3562, %3563
  br i1 %3564, label %originalBB893, label %originalBB893alteredBB

originalBB893:                                    ; preds = %3556, %originalBB893alteredBB
  %3565 = load i64, i64* %21, align 8, !dbg !2735
  %3566 = add i64 %3565, 1, !dbg !2735
  store i64 %3566, i64* %21, align 8, !dbg !2735
  %3567 = load i32, i32* @x.37
  %3568 = load i32, i32* @y.38
  %3569 = sub i32 %3567, 1
  %3570 = mul i32 %3567, %3569
  %3571 = urem i32 %3570, 2
  %3572 = icmp eq i32 %3571, 0
  %3573 = icmp slt i32 %3568, 10
  %3574 = or i1 %3572, %3573
  br i1 %3574, label %originalBBpart2897, label %originalBB893alteredBB

originalBBpart2897:                               ; preds = %originalBB893
  br label %3575, !dbg !2735

3575:                                             ; preds = %originalBBpart2897
  %3576 = load i32, i32* @x.37
  %3577 = load i32, i32* @y.38
  %3578 = sub i32 %3576, 1
  %3579 = mul i32 %3576, %3578
  %3580 = urem i32 %3579, 2
  %3581 = icmp eq i32 %3580, 0
  %3582 = icmp slt i32 %3577, 10
  %3583 = or i1 %3581, %3582
  br i1 %3583, label %originalBB899, label %originalBB899alteredBB

originalBB899:                                    ; preds = %3575, %originalBB899alteredBB
  store i8 1, i8* %28, align 1, !dbg !2722
  %3584 = load i32, i32* @x.37
  %3585 = load i32, i32* @y.38
  %3586 = sub i32 %3584, 1
  %3587 = mul i32 %3584, %3586
  %3588 = urem i32 %3587, 2
  %3589 = icmp eq i32 %3588, 0
  %3590 = icmp slt i32 %3585, 10
  %3591 = or i1 %3589, %3590
  br i1 %3591, label %originalBBpart2901, label %originalBB899alteredBB

originalBBpart2901:                               ; preds = %originalBB899
  br label %3592, !dbg !2722

3592:                                             ; preds = %originalBBpart2901, %3456, %3453
  %3593 = load i32, i32* @x.37
  %3594 = load i32, i32* @y.38
  %3595 = sub i32 %3593, 1
  %3596 = mul i32 %3593, %3595
  %3597 = urem i32 %3596, 2
  %3598 = icmp eq i32 %3597, 0
  %3599 = icmp slt i32 %3594, 10
  %3600 = or i1 %3598, %3599
  br i1 %3600, label %originalBB903, label %originalBB903alteredBB

originalBB903:                                    ; preds = %3592, %originalBB903alteredBB
  %3601 = load i32, i32* @x.37
  %3602 = load i32, i32* @y.38
  %3603 = sub i32 %3601, 1
  %3604 = mul i32 %3601, %3603
  %3605 = urem i32 %3604, 2
  %3606 = icmp eq i32 %3605, 0
  %3607 = icmp slt i32 %3602, 10
  %3608 = or i1 %3606, %3607
  br i1 %3608, label %originalBBpart2905, label %originalBB903alteredBB

originalBBpart2905:                               ; preds = %originalBB903
  br label %3609, !dbg !2719

3609:                                             ; preds = %originalBBpart2905
  %3610 = load i64, i64* %21, align 8, !dbg !2736
  %3611 = load i64, i64* %12, align 8, !dbg !2736
  %3612 = icmp ult i64 %3610, %3611, !dbg !2736
  br i1 %3612, label %3613, label %3633, !dbg !2739

3613:                                             ; preds = %3609
  %3614 = load i32, i32* @x.37
  %3615 = load i32, i32* @y.38
  %3616 = sub i32 %3614, 1
  %3617 = mul i32 %3614, %3616
  %3618 = urem i32 %3617, 2
  %3619 = icmp eq i32 %3618, 0
  %3620 = icmp slt i32 %3615, 10
  %3621 = or i1 %3619, %3620
  br i1 %3621, label %originalBB907, label %originalBB907alteredBB

originalBB907:                                    ; preds = %3613, %originalBB907alteredBB
  %3622 = load i8*, i8** %11, align 8, !dbg !2736
  %3623 = load i64, i64* %21, align 8, !dbg !2736
  %3624 = getelementptr inbounds i8, i8* %3622, i64 %3623, !dbg !2736
  store i8 92, i8* %3624, align 1, !dbg !2736
  %3625 = load i32, i32* @x.37
  %3626 = load i32, i32* @y.38
  %3627 = sub i32 %3625, 1
  %3628 = mul i32 %3625, %3627
  %3629 = urem i32 %3628, 2
  %3630 = icmp eq i32 %3629, 0
  %3631 = icmp slt i32 %3626, 10
  %3632 = or i1 %3630, %3631
  br i1 %3632, label %originalBBpart2909, label %originalBB907alteredBB

originalBBpart2909:                               ; preds = %originalBB907
  br label %3633, !dbg !2736

3633:                                             ; preds = %originalBBpart2909, %3609
  %3634 = load i64, i64* %21, align 8, !dbg !2739
  %3635 = add i64 %3634, 1, !dbg !2739
  store i64 %3635, i64* %21, align 8, !dbg !2739
  br label %3636, !dbg !2739

3636:                                             ; preds = %3633
  %3637 = load i32, i32* @x.37
  %3638 = load i32, i32* @y.38
  %3639 = sub i32 %3637, 1
  %3640 = mul i32 %3637, %3639
  %3641 = urem i32 %3640, 2
  %3642 = icmp eq i32 %3641, 0
  %3643 = icmp slt i32 %3638, 10
  %3644 = or i1 %3642, %3643
  br i1 %3644, label %originalBB911, label %originalBB911alteredBB

originalBB911:                                    ; preds = %3636, %originalBB911alteredBB
  %3645 = load i32, i32* @x.37
  %3646 = load i32, i32* @y.38
  %3647 = sub i32 %3645, 1
  %3648 = mul i32 %3645, %3647
  %3649 = urem i32 %3648, 2
  %3650 = icmp eq i32 %3649, 0
  %3651 = icmp slt i32 %3646, 10
  %3652 = or i1 %3650, %3651
  br i1 %3652, label %originalBBpart2913, label %originalBB911alteredBB

originalBBpart2913:                               ; preds = %originalBB911
  br label %3653, !dbg !2719

3653:                                             ; preds = %originalBBpart2913
  br label %3654, !dbg !2719

3654:                                             ; preds = %3653, %3414, %originalBBpart2859, %1678, %1620
  call void @llvm.dbg.label(metadata !2740), !dbg !2741
  %3655 = load i32, i32* @x.37
  %3656 = load i32, i32* @y.38
  %3657 = sub i32 %3655, 1
  %3658 = mul i32 %3655, %3657
  %3659 = urem i32 %3658, 2
  %3660 = icmp eq i32 %3659, 0
  %3661 = icmp slt i32 %3656, 10
  %3662 = or i1 %3660, %3661
  br i1 %3662, label %originalBB915, label %originalBB915alteredBB

originalBB915:                                    ; preds = %3654, %originalBB915alteredBB
  %3663 = load i32, i32* @x.37
  %3664 = load i32, i32* @y.38
  %3665 = sub i32 %3663, 1
  %3666 = mul i32 %3663, %3665
  %3667 = urem i32 %3666, 2
  %3668 = icmp eq i32 %3667, 0
  %3669 = icmp slt i32 %3664, 10
  %3670 = or i1 %3668, %3669
  br i1 %3670, label %originalBBpart2917, label %originalBB915alteredBB

originalBBpart2917:                               ; preds = %originalBB915
  br label %3671, !dbg !2742

3671:                                             ; preds = %originalBBpart2917
  %3672 = load i8, i8* %28, align 1, !dbg !2743
  %3673 = trunc i8 %3672 to i1, !dbg !2743
  br i1 %3673, label %3674, label %3814, !dbg !2743

3674:                                             ; preds = %3671
  %3675 = load i8, i8* %34, align 1, !dbg !2743
  %3676 = trunc i8 %3675 to i1, !dbg !2743
  br i1 %3676, label %3814, label %3677, !dbg !2746

3677:                                             ; preds = %3674
  %3678 = load i32, i32* @x.37
  %3679 = load i32, i32* @y.38
  %3680 = sub i32 %3678, 1
  %3681 = mul i32 %3678, %3680
  %3682 = urem i32 %3681, 2
  %3683 = icmp eq i32 %3682, 0
  %3684 = icmp slt i32 %3679, 10
  %3685 = or i1 %3683, %3684
  br i1 %3685, label %originalBB919, label %originalBB919alteredBB

originalBB919:                                    ; preds = %3677, %originalBB919alteredBB
  %3686 = load i32, i32* @x.37
  %3687 = load i32, i32* @y.38
  %3688 = sub i32 %3686, 1
  %3689 = mul i32 %3686, %3688
  %3690 = urem i32 %3689, 2
  %3691 = icmp eq i32 %3690, 0
  %3692 = icmp slt i32 %3687, 10
  %3693 = or i1 %3691, %3692
  br i1 %3693, label %originalBBpart2921, label %originalBB919alteredBB

originalBBpart2921:                               ; preds = %originalBB919
  br label %3694, !dbg !2747

3694:                                             ; preds = %originalBBpart2921
  %3695 = load i32, i32* @x.37
  %3696 = load i32, i32* @y.38
  %3697 = sub i32 %3695, 1
  %3698 = mul i32 %3695, %3697
  %3699 = urem i32 %3698, 2
  %3700 = icmp eq i32 %3699, 0
  %3701 = icmp slt i32 %3696, 10
  %3702 = or i1 %3700, %3701
  br i1 %3702, label %originalBB923, label %originalBB923alteredBB

originalBB923:                                    ; preds = %3694, %originalBB923alteredBB
  %3703 = load i64, i64* %21, align 8, !dbg !2749
  %3704 = load i64, i64* %12, align 8, !dbg !2749
  %3705 = icmp ult i64 %3703, %3704, !dbg !2749
  %3706 = load i32, i32* @x.37
  %3707 = load i32, i32* @y.38
  %3708 = sub i32 %3706, 1
  %3709 = mul i32 %3706, %3708
  %3710 = urem i32 %3709, 2
  %3711 = icmp eq i32 %3710, 0
  %3712 = icmp slt i32 %3707, 10
  %3713 = or i1 %3711, %3712
  br i1 %3713, label %originalBBpart2925, label %originalBB923alteredBB

originalBBpart2925:                               ; preds = %originalBB923
  br i1 %3705, label %3714, label %3734, !dbg !2752

3714:                                             ; preds = %originalBBpart2925
  %3715 = load i32, i32* @x.37
  %3716 = load i32, i32* @y.38
  %3717 = sub i32 %3715, 1
  %3718 = mul i32 %3715, %3717
  %3719 = urem i32 %3718, 2
  %3720 = icmp eq i32 %3719, 0
  %3721 = icmp slt i32 %3716, 10
  %3722 = or i1 %3720, %3721
  br i1 %3722, label %originalBB927, label %originalBB927alteredBB

originalBB927:                                    ; preds = %3714, %originalBB927alteredBB
  %3723 = load i8*, i8** %11, align 8, !dbg !2749
  %3724 = load i64, i64* %21, align 8, !dbg !2749
  %3725 = getelementptr inbounds i8, i8* %3723, i64 %3724, !dbg !2749
  store i8 39, i8* %3725, align 1, !dbg !2749
  %3726 = load i32, i32* @x.37
  %3727 = load i32, i32* @y.38
  %3728 = sub i32 %3726, 1
  %3729 = mul i32 %3726, %3728
  %3730 = urem i32 %3729, 2
  %3731 = icmp eq i32 %3730, 0
  %3732 = icmp slt i32 %3727, 10
  %3733 = or i1 %3731, %3732
  br i1 %3733, label %originalBBpart2929, label %originalBB927alteredBB

originalBBpart2929:                               ; preds = %originalBB927
  br label %3734, !dbg !2749

3734:                                             ; preds = %originalBBpart2929, %originalBBpart2925
  %3735 = load i64, i64* %21, align 8, !dbg !2752
  %3736 = add i64 %3735, 1, !dbg !2752
  store i64 %3736, i64* %21, align 8, !dbg !2752
  br label %3737, !dbg !2752

3737:                                             ; preds = %3734
  %3738 = load i32, i32* @x.37
  %3739 = load i32, i32* @y.38
  %3740 = sub i32 %3738, 1
  %3741 = mul i32 %3738, %3740
  %3742 = urem i32 %3741, 2
  %3743 = icmp eq i32 %3742, 0
  %3744 = icmp slt i32 %3739, 10
  %3745 = or i1 %3743, %3744
  br i1 %3745, label %originalBB931, label %originalBB931alteredBB

originalBB931:                                    ; preds = %3737, %originalBB931alteredBB
  %3746 = load i32, i32* @x.37
  %3747 = load i32, i32* @y.38
  %3748 = sub i32 %3746, 1
  %3749 = mul i32 %3746, %3748
  %3750 = urem i32 %3749, 2
  %3751 = icmp eq i32 %3750, 0
  %3752 = icmp slt i32 %3747, 10
  %3753 = or i1 %3751, %3752
  br i1 %3753, label %originalBBpart2933, label %originalBB931alteredBB

originalBBpart2933:                               ; preds = %originalBB931
  br label %3754, !dbg !2747

3754:                                             ; preds = %originalBBpart2933
  %3755 = load i32, i32* @x.37
  %3756 = load i32, i32* @y.38
  %3757 = sub i32 %3755, 1
  %3758 = mul i32 %3755, %3757
  %3759 = urem i32 %3758, 2
  %3760 = icmp eq i32 %3759, 0
  %3761 = icmp slt i32 %3756, 10
  %3762 = or i1 %3760, %3761
  br i1 %3762, label %originalBB935, label %originalBB935alteredBB

originalBB935:                                    ; preds = %3754, %originalBB935alteredBB
  %3763 = load i64, i64* %21, align 8, !dbg !2753
  %3764 = load i64, i64* %12, align 8, !dbg !2753
  %3765 = icmp ult i64 %3763, %3764, !dbg !2753
  %3766 = load i32, i32* @x.37
  %3767 = load i32, i32* @y.38
  %3768 = sub i32 %3766, 1
  %3769 = mul i32 %3766, %3768
  %3770 = urem i32 %3769, 2
  %3771 = icmp eq i32 %3770, 0
  %3772 = icmp slt i32 %3767, 10
  %3773 = or i1 %3771, %3772
  br i1 %3773, label %originalBBpart2937, label %originalBB935alteredBB

originalBBpart2937:                               ; preds = %originalBB935
  br i1 %3765, label %3774, label %3794, !dbg !2756

3774:                                             ; preds = %originalBBpart2937
  %3775 = load i32, i32* @x.37
  %3776 = load i32, i32* @y.38
  %3777 = sub i32 %3775, 1
  %3778 = mul i32 %3775, %3777
  %3779 = urem i32 %3778, 2
  %3780 = icmp eq i32 %3779, 0
  %3781 = icmp slt i32 %3776, 10
  %3782 = or i1 %3780, %3781
  br i1 %3782, label %originalBB939, label %originalBB939alteredBB

originalBB939:                                    ; preds = %3774, %originalBB939alteredBB
  %3783 = load i8*, i8** %11, align 8, !dbg !2753
  %3784 = load i64, i64* %21, align 8, !dbg !2753
  %3785 = getelementptr inbounds i8, i8* %3783, i64 %3784, !dbg !2753
  store i8 39, i8* %3785, align 1, !dbg !2753
  %3786 = load i32, i32* @x.37
  %3787 = load i32, i32* @y.38
  %3788 = sub i32 %3786, 1
  %3789 = mul i32 %3786, %3788
  %3790 = urem i32 %3789, 2
  %3791 = icmp eq i32 %3790, 0
  %3792 = icmp slt i32 %3787, 10
  %3793 = or i1 %3791, %3792
  br i1 %3793, label %originalBBpart2941, label %originalBB939alteredBB

originalBBpart2941:                               ; preds = %originalBB939
  br label %3794, !dbg !2753

3794:                                             ; preds = %originalBBpart2941, %originalBBpart2937
  %3795 = load i32, i32* @x.37
  %3796 = load i32, i32* @y.38
  %3797 = sub i32 %3795, 1
  %3798 = mul i32 %3795, %3797
  %3799 = urem i32 %3798, 2
  %3800 = icmp eq i32 %3799, 0
  %3801 = icmp slt i32 %3796, 10
  %3802 = or i1 %3800, %3801
  br i1 %3802, label %originalBB943, label %originalBB943alteredBB

originalBB943:                                    ; preds = %3794, %originalBB943alteredBB
  %3803 = load i64, i64* %21, align 8, !dbg !2756
  %3804 = add i64 %3803, 1, !dbg !2756
  store i64 %3804, i64* %21, align 8, !dbg !2756
  %3805 = load i32, i32* @x.37
  %3806 = load i32, i32* @y.38
  %3807 = sub i32 %3805, 1
  %3808 = mul i32 %3805, %3807
  %3809 = urem i32 %3808, 2
  %3810 = icmp eq i32 %3809, 0
  %3811 = icmp slt i32 %3806, 10
  %3812 = or i1 %3810, %3811
  br i1 %3812, label %originalBBpart2954, label %originalBB943alteredBB

originalBBpart2954:                               ; preds = %originalBB943
  br label %3813, !dbg !2756

3813:                                             ; preds = %originalBBpart2954
  store i8 0, i8* %28, align 1, !dbg !2747
  br label %3814, !dbg !2747

3814:                                             ; preds = %3813, %3674, %3671
  %3815 = load i32, i32* @x.37
  %3816 = load i32, i32* @y.38
  %3817 = sub i32 %3815, 1
  %3818 = mul i32 %3815, %3817
  %3819 = urem i32 %3818, 2
  %3820 = icmp eq i32 %3819, 0
  %3821 = icmp slt i32 %3816, 10
  %3822 = or i1 %3820, %3821
  br i1 %3822, label %originalBB956, label %originalBB956alteredBB

originalBB956:                                    ; preds = %3814, %originalBB956alteredBB
  %3823 = load i32, i32* @x.37
  %3824 = load i32, i32* @y.38
  %3825 = sub i32 %3823, 1
  %3826 = mul i32 %3823, %3825
  %3827 = urem i32 %3826, 2
  %3828 = icmp eq i32 %3827, 0
  %3829 = icmp slt i32 %3824, 10
  %3830 = or i1 %3828, %3829
  br i1 %3830, label %originalBBpart2958, label %originalBB956alteredBB

originalBBpart2958:                               ; preds = %originalBB956
  br label %3831, !dbg !2746

3831:                                             ; preds = %originalBBpart2958
  br label %3832, !dbg !2757

3832:                                             ; preds = %3831
  %3833 = load i64, i64* %21, align 8, !dbg !2758
  %3834 = load i64, i64* %12, align 8, !dbg !2758
  %3835 = icmp ult i64 %3833, %3834, !dbg !2758
  br i1 %3835, label %3836, label %3841, !dbg !2761

3836:                                             ; preds = %3832
  %3837 = load i8, i8* %31, align 1, !dbg !2758
  %3838 = load i8*, i8** %11, align 8, !dbg !2758
  %3839 = load i64, i64* %21, align 8, !dbg !2758
  %3840 = getelementptr inbounds i8, i8* %3838, i64 %3839, !dbg !2758
  store i8 %3837, i8* %3840, align 1, !dbg !2758
  br label %3841, !dbg !2758

3841:                                             ; preds = %3836, %3832
  %3842 = load i32, i32* @x.37
  %3843 = load i32, i32* @y.38
  %3844 = sub i32 %3842, 1
  %3845 = mul i32 %3842, %3844
  %3846 = urem i32 %3845, 2
  %3847 = icmp eq i32 %3846, 0
  %3848 = icmp slt i32 %3843, 10
  %3849 = or i1 %3847, %3848
  br i1 %3849, label %originalBB960, label %originalBB960alteredBB

originalBB960:                                    ; preds = %3841, %originalBB960alteredBB
  %3850 = load i64, i64* %21, align 8, !dbg !2761
  %3851 = add i64 %3850, 1, !dbg !2761
  store i64 %3851, i64* %21, align 8, !dbg !2761
  %3852 = load i32, i32* @x.37
  %3853 = load i32, i32* @y.38
  %3854 = sub i32 %3852, 1
  %3855 = mul i32 %3852, %3854
  %3856 = urem i32 %3855, 2
  %3857 = icmp eq i32 %3856, 0
  %3858 = icmp slt i32 %3853, 10
  %3859 = or i1 %3857, %3858
  br i1 %3859, label %originalBBpart2970, label %originalBB960alteredBB

originalBBpart2970:                               ; preds = %originalBB960
  br label %3860, !dbg !2761

3860:                                             ; preds = %originalBBpart2970
  %3861 = load i32, i32* @x.37
  %3862 = load i32, i32* @y.38
  %3863 = sub i32 %3861, 1
  %3864 = mul i32 %3861, %3863
  %3865 = urem i32 %3864, 2
  %3866 = icmp eq i32 %3865, 0
  %3867 = icmp slt i32 %3862, 10
  %3868 = or i1 %3866, %3867
  br i1 %3868, label %originalBB972, label %originalBB972alteredBB

originalBB972:                                    ; preds = %3860, %originalBB972alteredBB
  %3869 = load i8, i8* %35, align 1, !dbg !2762
  %3870 = trunc i8 %3869 to i1, !dbg !2762
  %3871 = load i32, i32* @x.37
  %3872 = load i32, i32* @y.38
  %3873 = sub i32 %3871, 1
  %3874 = mul i32 %3871, %3873
  %3875 = urem i32 %3874, 2
  %3876 = icmp eq i32 %3875, 0
  %3877 = icmp slt i32 %3872, 10
  %3878 = or i1 %3876, %3877
  br i1 %3878, label %originalBBpart2974, label %originalBB972alteredBB

originalBBpart2974:                               ; preds = %originalBB972
  br i1 %3870, label %3880, label %3879, !dbg !2764

3879:                                             ; preds = %originalBBpart2974
  store i8 0, i8* %30, align 1, !dbg !2765
  br label %3880, !dbg !2766

3880:                                             ; preds = %3879, %originalBBpart2974
  %3881 = load i32, i32* @x.37
  %3882 = load i32, i32* @y.38
  %3883 = sub i32 %3881, 1
  %3884 = mul i32 %3881, %3883
  %3885 = urem i32 %3884, 2
  %3886 = icmp eq i32 %3885, 0
  %3887 = icmp slt i32 %3882, 10
  %3888 = or i1 %3886, %3887
  br i1 %3888, label %originalBB976, label %originalBB976alteredBB

originalBB976:                                    ; preds = %3880, %originalBB976alteredBB
  %3889 = load i32, i32* @x.37
  %3890 = load i32, i32* @y.38
  %3891 = sub i32 %3889, 1
  %3892 = mul i32 %3889, %3891
  %3893 = urem i32 %3892, 2
  %3894 = icmp eq i32 %3893, 0
  %3895 = icmp slt i32 %3890, 10
  %3896 = or i1 %3894, %3895
  br i1 %3896, label %originalBBpart2978, label %originalBB976alteredBB

originalBBpart2978:                               ; preds = %originalBB976
  br label %3897, !dbg !2767

3897:                                             ; preds = %originalBBpart2978, %originalBBpart2217
  %3898 = load i64, i64* %20, align 8, !dbg !2768
  %3899 = add i64 %3898, 1, !dbg !2768
  store i64 %3899, i64* %20, align 8, !dbg !2768
  br label %410, !dbg !2769, !llvm.loop !2770

3900:                                             ; preds = %originalBBpart287
  %3901 = load i64, i64* %21, align 8, !dbg !2772
  %3902 = icmp eq i64 %3901, 0, !dbg !2774
  br i1 %3902, label %3903, label %3926, !dbg !2775

3903:                                             ; preds = %3900
  %3904 = load i32, i32* @x.37
  %3905 = load i32, i32* @y.38
  %3906 = sub i32 %3904, 1
  %3907 = mul i32 %3904, %3906
  %3908 = urem i32 %3907, 2
  %3909 = icmp eq i32 %3908, 0
  %3910 = icmp slt i32 %3905, 10
  %3911 = or i1 %3909, %3910
  br i1 %3911, label %originalBB980, label %originalBB980alteredBB

originalBB980:                                    ; preds = %3903, %originalBB980alteredBB
  %3912 = load i32, i32* %15, align 4, !dbg !2776
  %3913 = icmp eq i32 %3912, 2, !dbg !2777
  %3914 = load i32, i32* @x.37
  %3915 = load i32, i32* @y.38
  %3916 = sub i32 %3914, 1
  %3917 = mul i32 %3914, %3916
  %3918 = urem i32 %3917, 2
  %3919 = icmp eq i32 %3918, 0
  %3920 = icmp slt i32 %3915, 10
  %3921 = or i1 %3919, %3920
  br i1 %3921, label %originalBBpart2982, label %originalBB980alteredBB

originalBBpart2982:                               ; preds = %originalBB980
  br i1 %3913, label %3922, label %3926, !dbg !2778

3922:                                             ; preds = %originalBBpart2982
  %3923 = load i8, i8* %27, align 1, !dbg !2779
  %3924 = trunc i8 %3923 to i1, !dbg !2779
  br i1 %3924, label %3925, label %3926, !dbg !2780

3925:                                             ; preds = %3922
  br label %4222, !dbg !2781

3926:                                             ; preds = %3922, %originalBBpart2982, %3900
  %3927 = load i32, i32* @x.37
  %3928 = load i32, i32* @y.38
  %3929 = sub i32 %3927, 1
  %3930 = mul i32 %3927, %3929
  %3931 = urem i32 %3930, 2
  %3932 = icmp eq i32 %3931, 0
  %3933 = icmp slt i32 %3928, 10
  %3934 = or i1 %3932, %3933
  br i1 %3934, label %originalBB984, label %originalBB984alteredBB

originalBB984:                                    ; preds = %3926, %originalBB984alteredBB
  %3935 = load i32, i32* %15, align 4, !dbg !2782
  %3936 = icmp eq i32 %3935, 2, !dbg !2784
  %3937 = load i32, i32* @x.37
  %3938 = load i32, i32* @y.38
  %3939 = sub i32 %3937, 1
  %3940 = mul i32 %3937, %3939
  %3941 = urem i32 %3940, 2
  %3942 = icmp eq i32 %3941, 0
  %3943 = icmp slt i32 %3938, 10
  %3944 = or i1 %3942, %3943
  br i1 %3944, label %originalBBpart2986, label %originalBB984alteredBB

originalBBpart2986:                               ; preds = %originalBB984
  br i1 %3936, label %3945, label %4070, !dbg !2785

3945:                                             ; preds = %originalBBpart2986
  %3946 = load i32, i32* @x.37
  %3947 = load i32, i32* @y.38
  %3948 = sub i32 %3946, 1
  %3949 = mul i32 %3946, %3948
  %3950 = urem i32 %3949, 2
  %3951 = icmp eq i32 %3950, 0
  %3952 = icmp slt i32 %3947, 10
  %3953 = or i1 %3951, %3952
  br i1 %3953, label %originalBB988, label %originalBB988alteredBB

originalBB988:                                    ; preds = %3945, %originalBB988alteredBB
  %3954 = load i8, i8* %27, align 1, !dbg !2786
  %3955 = trunc i8 %3954 to i1, !dbg !2786
  %3956 = load i32, i32* @x.37
  %3957 = load i32, i32* @y.38
  %3958 = sub i32 %3956, 1
  %3959 = mul i32 %3956, %3958
  %3960 = urem i32 %3959, 2
  %3961 = icmp eq i32 %3960, 0
  %3962 = icmp slt i32 %3957, 10
  %3963 = or i1 %3961, %3962
  br i1 %3963, label %originalBBpart2990, label %originalBB988alteredBB

originalBBpart2990:                               ; preds = %originalBB988
  br i1 %3955, label %4070, label %3964, !dbg !2787

3964:                                             ; preds = %originalBBpart2990
  %3965 = load i8, i8* %29, align 1, !dbg !2788
  %3966 = trunc i8 %3965 to i1, !dbg !2788
  br i1 %3966, label %3967, label %4070, !dbg !2789

3967:                                             ; preds = %3964
  %3968 = load i32, i32* @x.37
  %3969 = load i32, i32* @y.38
  %3970 = sub i32 %3968, 1
  %3971 = mul i32 %3968, %3970
  %3972 = urem i32 %3971, 2
  %3973 = icmp eq i32 %3972, 0
  %3974 = icmp slt i32 %3969, 10
  %3975 = or i1 %3973, %3974
  br i1 %3975, label %originalBB992, label %originalBB992alteredBB

originalBB992:                                    ; preds = %3967, %originalBB992alteredBB
  %3976 = load i8, i8* %30, align 1, !dbg !2790
  %3977 = trunc i8 %3976 to i1, !dbg !2790
  %3978 = load i32, i32* @x.37
  %3979 = load i32, i32* @y.38
  %3980 = sub i32 %3978, 1
  %3981 = mul i32 %3978, %3980
  %3982 = urem i32 %3981, 2
  %3983 = icmp eq i32 %3982, 0
  %3984 = icmp slt i32 %3979, 10
  %3985 = or i1 %3983, %3984
  br i1 %3985, label %originalBBpart2994, label %originalBB992alteredBB

originalBBpart2994:                               ; preds = %originalBB992
  br i1 %3977, label %3986, label %4012, !dbg !2793

3986:                                             ; preds = %originalBBpart2994
  %3987 = load i32, i32* @x.37
  %3988 = load i32, i32* @y.38
  %3989 = sub i32 %3987, 1
  %3990 = mul i32 %3987, %3989
  %3991 = urem i32 %3990, 2
  %3992 = icmp eq i32 %3991, 0
  %3993 = icmp slt i32 %3988, 10
  %3994 = or i1 %3992, %3993
  br i1 %3994, label %originalBB996, label %originalBB996alteredBB

originalBB996:                                    ; preds = %3986, %originalBB996alteredBB
  %3995 = load i8*, i8** %11, align 8, !dbg !2794
  %3996 = load i64, i64* %22, align 8, !dbg !2795
  %3997 = load i8*, i8** %13, align 8, !dbg !2796
  %3998 = load i64, i64* %14, align 8, !dbg !2797
  %3999 = load i32, i32* %16, align 4, !dbg !2798
  %4000 = load i32*, i32** %17, align 8, !dbg !2799
  %4001 = load i8*, i8** %18, align 8, !dbg !2800
  %4002 = load i8*, i8** %19, align 8, !dbg !2801
  %4003 = call i64 @quotearg_buffer_restyled(i8* %3995, i64 %3996, i8* %3997, i64 %3998, i32 5, i32 %3999, i32* %4000, i8* %4001, i8* %4002), !dbg !2802
  store i64 %4003, i64* %10, align 8, !dbg !2803
  %4004 = load i32, i32* @x.37
  %4005 = load i32, i32* @y.38
  %4006 = sub i32 %4004, 1
  %4007 = mul i32 %4004, %4006
  %4008 = urem i32 %4007, 2
  %4009 = icmp eq i32 %4008, 0
  %4010 = icmp slt i32 %4005, 10
  %4011 = or i1 %4009, %4010
  br i1 %4011, label %originalBBpart2998, label %originalBB996alteredBB

originalBBpart2998:                               ; preds = %originalBB996
  br label %4256, !dbg !2803

4012:                                             ; preds = %originalBBpart2994
  %4013 = load i64, i64* %12, align 8, !dbg !2804
  %4014 = icmp ne i64 %4013, 0, !dbg !2804
  br i1 %4014, label %4036, label %4015, !dbg !2806

4015:                                             ; preds = %4012
  %4016 = load i32, i32* @x.37
  %4017 = load i32, i32* @y.38
  %4018 = sub i32 %4016, 1
  %4019 = mul i32 %4016, %4018
  %4020 = urem i32 %4019, 2
  %4021 = icmp eq i32 %4020, 0
  %4022 = icmp slt i32 %4017, 10
  %4023 = or i1 %4021, %4022
  br i1 %4023, label %originalBB1000, label %originalBB1000alteredBB

originalBB1000:                                   ; preds = %4015, %originalBB1000alteredBB
  %4024 = load i64, i64* %22, align 8, !dbg !2807
  %4025 = icmp ne i64 %4024, 0, !dbg !2807
  %4026 = load i32, i32* @x.37
  %4027 = load i32, i32* @y.38
  %4028 = sub i32 %4026, 1
  %4029 = mul i32 %4026, %4028
  %4030 = urem i32 %4029, 2
  %4031 = icmp eq i32 %4030, 0
  %4032 = icmp slt i32 %4027, 10
  %4033 = or i1 %4031, %4032
  br i1 %4033, label %originalBBpart21002, label %originalBB1000alteredBB

originalBBpart21002:                              ; preds = %originalBB1000
  br i1 %4025, label %4034, label %4036, !dbg !2808

4034:                                             ; preds = %originalBBpart21002
  %4035 = load i64, i64* %22, align 8, !dbg !2809
  store i64 %4035, i64* %12, align 8, !dbg !2811
  store i64 0, i64* %21, align 8, !dbg !2812
  br label %50, !dbg !2813

4036:                                             ; preds = %originalBBpart21002, %4012
  %4037 = load i32, i32* @x.37
  %4038 = load i32, i32* @y.38
  %4039 = sub i32 %4037, 1
  %4040 = mul i32 %4037, %4039
  %4041 = urem i32 %4040, 2
  %4042 = icmp eq i32 %4041, 0
  %4043 = icmp slt i32 %4038, 10
  %4044 = or i1 %4042, %4043
  br i1 %4044, label %originalBB1004, label %originalBB1004alteredBB

originalBB1004:                                   ; preds = %4036, %originalBB1004alteredBB
  %4045 = load i32, i32* @x.37
  %4046 = load i32, i32* @y.38
  %4047 = sub i32 %4045, 1
  %4048 = mul i32 %4045, %4047
  %4049 = urem i32 %4048, 2
  %4050 = icmp eq i32 %4049, 0
  %4051 = icmp slt i32 %4046, 10
  %4052 = or i1 %4050, %4051
  br i1 %4052, label %originalBBpart21006, label %originalBB1004alteredBB

originalBBpart21006:                              ; preds = %originalBB1004
  br label %4053

4053:                                             ; preds = %originalBBpart21006
  %4054 = load i32, i32* @x.37
  %4055 = load i32, i32* @y.38
  %4056 = sub i32 %4054, 1
  %4057 = mul i32 %4054, %4056
  %4058 = urem i32 %4057, 2
  %4059 = icmp eq i32 %4058, 0
  %4060 = icmp slt i32 %4055, 10
  %4061 = or i1 %4059, %4060
  br i1 %4061, label %originalBB1008, label %originalBB1008alteredBB

originalBB1008:                                   ; preds = %4053, %originalBB1008alteredBB
  %4062 = load i32, i32* @x.37
  %4063 = load i32, i32* @y.38
  %4064 = sub i32 %4062, 1
  %4065 = mul i32 %4062, %4064
  %4066 = urem i32 %4065, 2
  %4067 = icmp eq i32 %4066, 0
  %4068 = icmp slt i32 %4063, 10
  %4069 = or i1 %4067, %4068
  br i1 %4069, label %originalBBpart21010, label %originalBB1008alteredBB

originalBBpart21010:                              ; preds = %originalBB1008
  br label %4070, !dbg !2814

4070:                                             ; preds = %originalBBpart21010, %3964, %originalBBpart2990, %originalBBpart2986
  %4071 = load i32, i32* @x.37
  %4072 = load i32, i32* @y.38
  %4073 = sub i32 %4071, 1
  %4074 = mul i32 %4071, %4073
  %4075 = urem i32 %4074, 2
  %4076 = icmp eq i32 %4075, 0
  %4077 = icmp slt i32 %4072, 10
  %4078 = or i1 %4076, %4077
  br i1 %4078, label %originalBB1012, label %originalBB1012alteredBB

originalBB1012:                                   ; preds = %4070, %originalBB1012alteredBB
  %4079 = load i8*, i8** %23, align 8, !dbg !2815
  %4080 = icmp ne i8* %4079, null, !dbg !2815
  %4081 = load i32, i32* @x.37
  %4082 = load i32, i32* @y.38
  %4083 = sub i32 %4081, 1
  %4084 = mul i32 %4081, %4083
  %4085 = urem i32 %4084, 2
  %4086 = icmp eq i32 %4085, 0
  %4087 = icmp slt i32 %4082, 10
  %4088 = or i1 %4086, %4087
  br i1 %4088, label %originalBBpart21014, label %originalBB1012alteredBB

originalBBpart21014:                              ; preds = %originalBB1012
  br i1 %4080, label %4089, label %4180, !dbg !2817

4089:                                             ; preds = %originalBBpart21014
  %4090 = load i8, i8* %27, align 1, !dbg !2818
  %4091 = trunc i8 %4090 to i1, !dbg !2818
  br i1 %4091, label %4180, label %4092, !dbg !2819

4092:                                             ; preds = %4089
  %4093 = load i32, i32* @x.37
  %4094 = load i32, i32* @y.38
  %4095 = sub i32 %4093, 1
  %4096 = mul i32 %4093, %4095
  %4097 = urem i32 %4096, 2
  %4098 = icmp eq i32 %4097, 0
  %4099 = icmp slt i32 %4094, 10
  %4100 = or i1 %4098, %4099
  br i1 %4100, label %originalBB1016, label %originalBB1016alteredBB

originalBB1016:                                   ; preds = %4092, %originalBB1016alteredBB
  %4101 = load i32, i32* @x.37
  %4102 = load i32, i32* @y.38
  %4103 = sub i32 %4101, 1
  %4104 = mul i32 %4101, %4103
  %4105 = urem i32 %4104, 2
  %4106 = icmp eq i32 %4105, 0
  %4107 = icmp slt i32 %4102, 10
  %4108 = or i1 %4106, %4107
  br i1 %4108, label %originalBBpart21018, label %originalBB1016alteredBB

originalBBpart21018:                              ; preds = %originalBB1016
  br label %4109, !dbg !2820

4109:                                             ; preds = %4176, %originalBBpart21018
  %4110 = load i8*, i8** %23, align 8, !dbg !2821
  %4111 = load i8, i8* %4110, align 1, !dbg !2824
  %4112 = icmp ne i8 %4111, 0, !dbg !2825
  br i1 %4112, label %4113, label %4179, !dbg !2825

4113:                                             ; preds = %4109
  %4114 = load i32, i32* @x.37
  %4115 = load i32, i32* @y.38
  %4116 = sub i32 %4114, 1
  %4117 = mul i32 %4114, %4116
  %4118 = urem i32 %4117, 2
  %4119 = icmp eq i32 %4118, 0
  %4120 = icmp slt i32 %4115, 10
  %4121 = or i1 %4119, %4120
  br i1 %4121, label %originalBB1020, label %originalBB1020alteredBB

originalBB1020:                                   ; preds = %4113, %originalBB1020alteredBB
  %4122 = load i32, i32* @x.37
  %4123 = load i32, i32* @y.38
  %4124 = sub i32 %4122, 1
  %4125 = mul i32 %4122, %4124
  %4126 = urem i32 %4125, 2
  %4127 = icmp eq i32 %4126, 0
  %4128 = icmp slt i32 %4123, 10
  %4129 = or i1 %4127, %4128
  br i1 %4129, label %originalBBpart21022, label %originalBB1020alteredBB

originalBBpart21022:                              ; preds = %originalBB1020
  br label %4130, !dbg !2826

4130:                                             ; preds = %originalBBpart21022
  %4131 = load i64, i64* %21, align 8, !dbg !2827
  %4132 = load i64, i64* %12, align 8, !dbg !2827
  %4133 = icmp ult i64 %4131, %4132, !dbg !2827
  br i1 %4133, label %4134, label %4156, !dbg !2830

4134:                                             ; preds = %4130
  %4135 = load i32, i32* @x.37
  %4136 = load i32, i32* @y.38
  %4137 = sub i32 %4135, 1
  %4138 = mul i32 %4135, %4137
  %4139 = urem i32 %4138, 2
  %4140 = icmp eq i32 %4139, 0
  %4141 = icmp slt i32 %4136, 10
  %4142 = or i1 %4140, %4141
  br i1 %4142, label %originalBB1024, label %originalBB1024alteredBB

originalBB1024:                                   ; preds = %4134, %originalBB1024alteredBB
  %4143 = load i8*, i8** %23, align 8, !dbg !2827
  %4144 = load i8, i8* %4143, align 1, !dbg !2827
  %4145 = load i8*, i8** %11, align 8, !dbg !2827
  %4146 = load i64, i64* %21, align 8, !dbg !2827
  %4147 = getelementptr inbounds i8, i8* %4145, i64 %4146, !dbg !2827
  store i8 %4144, i8* %4147, align 1, !dbg !2827
  %4148 = load i32, i32* @x.37
  %4149 = load i32, i32* @y.38
  %4150 = sub i32 %4148, 1
  %4151 = mul i32 %4148, %4150
  %4152 = urem i32 %4151, 2
  %4153 = icmp eq i32 %4152, 0
  %4154 = icmp slt i32 %4149, 10
  %4155 = or i1 %4153, %4154
  br i1 %4155, label %originalBBpart21026, label %originalBB1024alteredBB

originalBBpart21026:                              ; preds = %originalBB1024
  br label %4156, !dbg !2827

4156:                                             ; preds = %originalBBpart21026, %4130
  %4157 = load i32, i32* @x.37
  %4158 = load i32, i32* @y.38
  %4159 = sub i32 %4157, 1
  %4160 = mul i32 %4157, %4159
  %4161 = urem i32 %4160, 2
  %4162 = icmp eq i32 %4161, 0
  %4163 = icmp slt i32 %4158, 10
  %4164 = or i1 %4162, %4163
  br i1 %4164, label %originalBB1028, label %originalBB1028alteredBB

originalBB1028:                                   ; preds = %4156, %originalBB1028alteredBB
  %4165 = load i64, i64* %21, align 8, !dbg !2830
  %4166 = add i64 %4165, 1, !dbg !2830
  store i64 %4166, i64* %21, align 8, !dbg !2830
  %4167 = load i32, i32* @x.37
  %4168 = load i32, i32* @y.38
  %4169 = sub i32 %4167, 1
  %4170 = mul i32 %4167, %4169
  %4171 = urem i32 %4170, 2
  %4172 = icmp eq i32 %4171, 0
  %4173 = icmp slt i32 %4168, 10
  %4174 = or i1 %4172, %4173
  br i1 %4174, label %originalBBpart21037, label %originalBB1028alteredBB

originalBBpart21037:                              ; preds = %originalBB1028
  br label %4175, !dbg !2830

4175:                                             ; preds = %originalBBpart21037
  br label %4176, !dbg !2830

4176:                                             ; preds = %4175
  %4177 = load i8*, i8** %23, align 8, !dbg !2831
  %4178 = getelementptr inbounds i8, i8* %4177, i32 1, !dbg !2831
  store i8* %4178, i8** %23, align 8, !dbg !2831
  br label %4109, !dbg !2832, !llvm.loop !2833

4179:                                             ; preds = %4109
  br label %4180, !dbg !2834

4180:                                             ; preds = %4179, %4089, %originalBBpart21014
  %4181 = load i64, i64* %21, align 8, !dbg !2835
  %4182 = load i64, i64* %12, align 8, !dbg !2837
  %4183 = icmp ult i64 %4181, %4182, !dbg !2838
  br i1 %4183, label %4184, label %4204, !dbg !2839

4184:                                             ; preds = %4180
  %4185 = load i32, i32* @x.37
  %4186 = load i32, i32* @y.38
  %4187 = sub i32 %4185, 1
  %4188 = mul i32 %4185, %4187
  %4189 = urem i32 %4188, 2
  %4190 = icmp eq i32 %4189, 0
  %4191 = icmp slt i32 %4186, 10
  %4192 = or i1 %4190, %4191
  br i1 %4192, label %originalBB1039, label %originalBB1039alteredBB

originalBB1039:                                   ; preds = %4184, %originalBB1039alteredBB
  %4193 = load i8*, i8** %11, align 8, !dbg !2840
  %4194 = load i64, i64* %21, align 8, !dbg !2841
  %4195 = getelementptr inbounds i8, i8* %4193, i64 %4194, !dbg !2840
  store i8 0, i8* %4195, align 1, !dbg !2842
  %4196 = load i32, i32* @x.37
  %4197 = load i32, i32* @y.38
  %4198 = sub i32 %4196, 1
  %4199 = mul i32 %4196, %4198
  %4200 = urem i32 %4199, 2
  %4201 = icmp eq i32 %4200, 0
  %4202 = icmp slt i32 %4197, 10
  %4203 = or i1 %4201, %4202
  br i1 %4203, label %originalBBpart21041, label %originalBB1039alteredBB

originalBBpart21041:                              ; preds = %originalBB1039
  br label %4204, !dbg !2840

4204:                                             ; preds = %originalBBpart21041, %4180
  %4205 = load i32, i32* @x.37
  %4206 = load i32, i32* @y.38
  %4207 = sub i32 %4205, 1
  %4208 = mul i32 %4205, %4207
  %4209 = urem i32 %4208, 2
  %4210 = icmp eq i32 %4209, 0
  %4211 = icmp slt i32 %4206, 10
  %4212 = or i1 %4210, %4211
  br i1 %4212, label %originalBB1043, label %originalBB1043alteredBB

originalBB1043:                                   ; preds = %4204, %originalBB1043alteredBB
  %4213 = load i64, i64* %21, align 8, !dbg !2843
  store i64 %4213, i64* %10, align 8, !dbg !2844
  %4214 = load i32, i32* @x.37
  %4215 = load i32, i32* @y.38
  %4216 = sub i32 %4214, 1
  %4217 = mul i32 %4214, %4216
  %4218 = urem i32 %4217, 2
  %4219 = icmp eq i32 %4218, 0
  %4220 = icmp slt i32 %4215, 10
  %4221 = or i1 %4219, %4220
  br i1 %4221, label %originalBBpart21045, label %originalBB1043alteredBB

originalBBpart21045:                              ; preds = %originalBB1043
  br label %4256, !dbg !2844

4222:                                             ; preds = %3925, %3452, %originalBBpart2621, %originalBBpart2559, %1936, %originalBBpart2436, %originalBBpart2400, %originalBBpart2380, %originalBBpart2275, %1130, %675, %595
  call void @llvm.dbg.label(metadata !2845), !dbg !2846
  %4223 = load i32, i32* %15, align 4, !dbg !2847
  %4224 = icmp eq i32 %4223, 2, !dbg !2849
  br i1 %4224, label %4225, label %4245, !dbg !2850

4225:                                             ; preds = %4222
  %4226 = load i8, i8* %25, align 1, !dbg !2851
  %4227 = trunc i8 %4226 to i1, !dbg !2851
  br i1 %4227, label %4228, label %4245, !dbg !2852

4228:                                             ; preds = %4225
  %4229 = load i32, i32* @x.37
  %4230 = load i32, i32* @y.38
  %4231 = sub i32 %4229, 1
  %4232 = mul i32 %4229, %4231
  %4233 = urem i32 %4232, 2
  %4234 = icmp eq i32 %4233, 0
  %4235 = icmp slt i32 %4230, 10
  %4236 = or i1 %4234, %4235
  br i1 %4236, label %originalBB1047, label %originalBB1047alteredBB

originalBB1047:                                   ; preds = %4228, %originalBB1047alteredBB
  store i32 4, i32* %15, align 4, !dbg !2853
  %4237 = load i32, i32* @x.37
  %4238 = load i32, i32* @y.38
  %4239 = sub i32 %4237, 1
  %4240 = mul i32 %4237, %4239
  %4241 = urem i32 %4240, 2
  %4242 = icmp eq i32 %4241, 0
  %4243 = icmp slt i32 %4238, 10
  %4244 = or i1 %4242, %4243
  br i1 %4244, label %originalBBpart21049, label %originalBB1047alteredBB

originalBBpart21049:                              ; preds = %originalBB1047
  br label %4245, !dbg !2854

4245:                                             ; preds = %originalBBpart21049, %4225, %4222
  %4246 = load i8*, i8** %11, align 8, !dbg !2855
  %4247 = load i64, i64* %12, align 8, !dbg !2856
  %4248 = load i8*, i8** %13, align 8, !dbg !2857
  %4249 = load i64, i64* %14, align 8, !dbg !2858
  %4250 = load i32, i32* %15, align 4, !dbg !2859
  %4251 = load i32, i32* %16, align 4, !dbg !2860
  %4252 = and i32 %4251, -3, !dbg !2861
  %4253 = load i8*, i8** %18, align 8, !dbg !2862
  %4254 = load i8*, i8** %19, align 8, !dbg !2863
  %4255 = call i64 @quotearg_buffer_restyled(i8* %4246, i64 %4247, i8* %4248, i64 %4249, i32 %4250, i32 %4252, i32* null, i8* %4253, i8* %4254), !dbg !2864
  store i64 %4255, i64* %10, align 8, !dbg !2865
  br label %4256, !dbg !2865

4256:                                             ; preds = %4245, %originalBBpart21045, %originalBBpart2998
  %4257 = load i64, i64* %10, align 8, !dbg !2866
  ret i64 %4257, !dbg !2866

originalBBalteredBB:                              ; preds = %originalBB, %50
  %4258 = load i32, i32* %15, align 4, !dbg !2034
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %68
  store i32 5, i32* %15, align 4, !dbg !2036
  store i8 1, i8* %27, align 1, !dbg !2038
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %85
  %4259 = load i8, i8* %27, align 1, !dbg !2040
  %4260 = trunc i8 %4259 to i1, !dbg !2040
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %104
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %129
  %4261 = load i64, i64* %21, align 8, !dbg !2047
  %_ = sub i64 %4261, 1
  %gen = mul i64 %_, 1
  %4262 = add i64 %4261, 1, !dbg !2047
  store i64 %4262, i64* %21, align 8, !dbg !2047
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %148
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %165
  store i8 1, i8* %25, align 1, !dbg !2048
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.85, i64 0, i64 0), i8** %23, align 8, !dbg !2049
  store i64 1, i64* %24, align 8, !dbg !2050
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %191
  %4263 = load i8, i8* %27, align 1, !dbg !2068
  %4264 = trunc i8 %4263 to i1, !dbg !2068
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %210
  %4265 = load i8*, i8** %18, align 8, !dbg !2071
  store i8* %4265, i8** %23, align 8, !dbg !2073
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %228
  %4266 = load i8*, i8** %23, align 8, !dbg !2075
  %4267 = load i8, i8* %4266, align 1, !dbg !2077
  %4268 = icmp ne i8 %4267, 0, !dbg !2078
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %259
  %4269 = load i64, i64* %21, align 8, !dbg !2083
  %_39 = sub i64 %4269, 1
  %gen40 = mul i64 %_39, 1
  %_41 = sub i64 %4269, 1
  %gen42 = mul i64 %_41, 1
  %_43 = sub i64 0, %4269
  %gen44 = add i64 %_43, 1
  %_45 = sub i64 0, %4269
  %gen46 = add i64 %_45, 1
  %_47 = shl i64 %4269, 1
  %_48 = sub i64 0, %4269
  %gen49 = add i64 %_48, 1
  %4270 = add i64 %4269, 1, !dbg !2083
  store i64 %4270, i64* %21, align 8, !dbg !2083
  br label %originalBB38

originalBB53alteredBB:                            ; preds = %originalBB53, %278
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %303
  store i8 1, i8* %25, align 1, !dbg !2095
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %324
  store i8 1, i8* %25, align 1, !dbg !2102
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %350
  %4271 = load i8*, i8** %11, align 8, !dbg !2110
  %4272 = load i64, i64* %21, align 8, !dbg !2110
  %4273 = getelementptr inbounds i8, i8* %4271, i64 %4272, !dbg !2110
  store i8 39, i8* %4273, align 1, !dbg !2110
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %375
  store i8 0, i8* %27, align 1, !dbg !2117
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %392
  call void @abort() #12, !dbg !2119
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %421
  %4274 = load i64, i64* %20, align 8, !dbg !2129
  %4275 = load i64, i64* %14, align 8, !dbg !2130
  %4276 = icmp eq i64 %4274, %4275, !dbg !2131
  %4277 = zext i1 %4276 to i32, !dbg !2131
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %442
  %4278 = icmp ne i32 %443, 0, !dbg !2132
  %_82 = sub i1 false, %4278
  %gen83 = add i1 %_82, true
  %_84 = sub i1 %4278, true
  %gen85 = mul i1 %_84, true
  %4279 = xor i1 %4278, true, !dbg !2132
  br label %originalBB81

originalBB89alteredBB:                            ; preds = %originalBB89, %465
  %4280 = load i32, i32* %15, align 4, !dbg !2148
  %4281 = icmp ne i32 %4280, 2, !dbg !2149
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %493
  %4282 = load i64, i64* %24, align 8, !dbg !2159
  %4283 = icmp ult i64 1, %4282, !dbg !2160
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %515
  %4284 = load i64, i64* %14, align 8, !dbg !2164
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %533
  %4285 = icmp ule i64 %490, %534, !dbg !2165
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %552
  %4286 = load i8*, i8** %13, align 8, !dbg !2167
  %4287 = load i64, i64* %20, align 8, !dbg !2168
  %4288 = getelementptr inbounds i8, i8* %4286, i64 %4287, !dbg !2169
  %4289 = load i8*, i8** %23, align 8, !dbg !2170
  %4290 = load i64, i64* %24, align 8, !dbg !2171
  %4291 = call i32 @memcmp(i8* %4288, i8* %4289, i64 %4290) #13, !dbg !2172
  %4292 = icmp eq i32 %4291, 0, !dbg !2173
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %576
  %4293 = load i8, i8* %27, align 1, !dbg !2175
  %4294 = trunc i8 %4293 to i1, !dbg !2175
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %596
  store i8 1, i8* %33, align 1, !dbg !2180
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %613
  %4295 = load i8*, i8** %13, align 8, !dbg !2182
  %4296 = load i64, i64* %20, align 8, !dbg !2183
  %4297 = getelementptr inbounds i8, i8* %4295, i64 %4296, !dbg !2182
  %4298 = load i8, i8* %4297, align 1, !dbg !2182
  store i8 %4298, i8* %31, align 1, !dbg !2184
  %4299 = load i8, i8* %31, align 1, !dbg !2185
  %4300 = zext i8 %4299 to i32, !dbg !2185
  br label %originalBB117

originalBB121alteredBB:                           ; preds = %originalBB121, %636
  %4301 = load i8, i8* %25, align 1, !dbg !2187
  %4302 = trunc i8 %4301 to i1, !dbg !2187
  br label %originalBB121

originalBB125alteredBB:                           ; preds = %originalBB125, %655
  br label %originalBB125

originalBB129alteredBB:                           ; preds = %originalBB129, %676
  store i8 1, i8* %34, align 1, !dbg !2196
  %4303 = load i32, i32* %15, align 4, !dbg !2197
  %4304 = icmp eq i32 %4303, 2, !dbg !2197
  br label %originalBB129

originalBB133alteredBB:                           ; preds = %originalBB133, %695
  %4305 = load i8, i8* %28, align 1, !dbg !2197
  %4306 = trunc i8 %4305 to i1, !dbg !2197
  br label %originalBB133

originalBB137alteredBB:                           ; preds = %originalBB137, %714
  br label %originalBB137

originalBB141alteredBB:                           ; preds = %originalBB141, %735
  %4307 = load i8*, i8** %11, align 8, !dbg !2201
  %4308 = load i64, i64* %21, align 8, !dbg !2201
  %4309 = getelementptr inbounds i8, i8* %4307, i64 %4308, !dbg !2201
  store i8 39, i8* %4309, align 1, !dbg !2201
  br label %originalBB141

originalBB145alteredBB:                           ; preds = %originalBB145, %758
  br label %originalBB145

originalBB149alteredBB:                           ; preds = %originalBB149, %775
  %4310 = load i64, i64* %21, align 8, !dbg !2205
  %4311 = load i64, i64* %12, align 8, !dbg !2205
  %4312 = icmp ult i64 %4310, %4311, !dbg !2205
  br label %originalBB149

originalBB153alteredBB:                           ; preds = %originalBB153, %802
  br label %originalBB153

originalBB157alteredBB:                           ; preds = %originalBB157, %830
  store i8 1, i8* %28, align 1, !dbg !2199
  br label %originalBB157

originalBB161alteredBB:                           ; preds = %originalBB161, %847
  br label %originalBB161

originalBB165alteredBB:                           ; preds = %originalBB165, %868
  %4313 = load i8*, i8** %11, align 8, !dbg !2213
  %4314 = load i64, i64* %21, align 8, !dbg !2213
  %4315 = getelementptr inbounds i8, i8* %4313, i64 %4314, !dbg !2213
  store i8 92, i8* %4315, align 1, !dbg !2213
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %888
  %4316 = load i64, i64* %21, align 8, !dbg !2216
  %4317 = add i64 %4316, 1, !dbg !2216
  store i64 %4317, i64* %21, align 8, !dbg !2216
  br label %originalBB169

originalBB173alteredBB:                           ; preds = %originalBB173, %924
  %4318 = load i8*, i8** %13, align 8, !dbg !2231
  %4319 = load i64, i64* %20, align 8, !dbg !2232
  %_174 = sub i64 %4319, 1
  %gen175 = mul i64 %_174, 1
  %_176 = shl i64 %4319, 1
  %4320 = add i64 %4319, 1, !dbg !2233
  %4321 = getelementptr inbounds i8, i8* %4318, i64 %4320, !dbg !2231
  %4322 = load i8, i8* %4321, align 1, !dbg !2231
  %4323 = sext i8 %4322 to i32, !dbg !2231
  %4324 = icmp sle i32 %4323, 57, !dbg !2234
  br label %originalBB173

originalBB180alteredBB:                           ; preds = %originalBB180, %953
  %4325 = load i8*, i8** %11, align 8, !dbg !2238
  %4326 = load i64, i64* %21, align 8, !dbg !2238
  %4327 = getelementptr inbounds i8, i8* %4325, i64 %4326, !dbg !2238
  store i8 48, i8* %4327, align 1, !dbg !2238
  br label %originalBB180

originalBB184alteredBB:                           ; preds = %originalBB184, %973
  %4328 = load i64, i64* %21, align 8, !dbg !2241
  %_185 = sub i64 %4328, 1
  %gen186 = mul i64 %_185, 1
  %_187 = sub i64 %4328, 1
  %gen188 = mul i64 %_187, 1
  %_189 = sub i64 %4328, 1
  %gen190 = mul i64 %_189, 1
  %_191 = sub i64 0, %4328
  %gen192 = add i64 %_191, 1
  %4329 = add i64 %4328, 1, !dbg !2241
  store i64 %4329, i64* %21, align 8, !dbg !2241
  br label %originalBB184

originalBB196alteredBB:                           ; preds = %originalBB196, %997
  %4330 = load i8*, i8** %11, align 8, !dbg !2243
  %4331 = load i64, i64* %21, align 8, !dbg !2243
  %4332 = getelementptr inbounds i8, i8* %4330, i64 %4331, !dbg !2243
  store i8 48, i8* %4332, align 1, !dbg !2243
  br label %originalBB196

originalBB200alteredBB:                           ; preds = %originalBB200, %1017
  %4333 = load i64, i64* %21, align 8, !dbg !2246
  %_201 = shl i64 %4333, 1
  %_202 = sub i64 0, %4333
  %gen203 = add i64 %_202, 1
  %_204 = sub i64 0, %4333
  %gen205 = add i64 %_204, 1
  %_206 = sub i64 0, %4333
  %gen207 = add i64 %_206, 1
  %4334 = add i64 %4333, 1, !dbg !2246
  store i64 %4334, i64* %21, align 8, !dbg !2246
  br label %originalBB200

originalBB211alteredBB:                           ; preds = %originalBB211, %1037
  store i8 48, i8* %31, align 1, !dbg !2248
  br label %originalBB211

originalBB215alteredBB:                           ; preds = %originalBB215, %1058
  br label %originalBB215

originalBB219alteredBB:                           ; preds = %originalBB219, %1076
  br label %originalBB219

originalBB223alteredBB:                           ; preds = %originalBB223, %1093
  %4335 = load i32, i32* %15, align 4, !dbg !2256
  br label %originalBB223

originalBB227alteredBB:                           ; preds = %originalBB227, %1111
  %4336 = load i8, i8* %27, align 1, !dbg !2258
  %4337 = trunc i8 %4336 to i1, !dbg !2258
  br label %originalBB227

originalBB231alteredBB:                           ; preds = %originalBB231, %1132
  %4338 = load i32, i32* %16, align 4, !dbg !2264
  %_232 = sub i32 0, %4338
  %gen233 = add i32 %_232, 4
  %_234 = sub i32 %4338, 4
  %gen235 = mul i32 %_234, 4
  %_236 = sub i32 %4338, 4
  %gen237 = mul i32 %_236, 4
  %_238 = sub i32 %4338, 4
  %gen239 = mul i32 %_238, 4
  %_240 = shl i32 %4338, 4
  %_241 = sub i32 0, %4338
  %gen242 = add i32 %_241, 4
  %4339 = and i32 %4338, 4, !dbg !2266
  %4340 = icmp ne i32 %4339, 0, !dbg !2266
  br label %originalBB231

originalBB246alteredBB:                           ; preds = %originalBB246, %1152
  %4341 = load i64, i64* %20, align 8, !dbg !2268
  %_247 = shl i64 %4341, 2
  %_248 = sub i64 0, %4341
  %gen249 = add i64 %_248, 2
  %_250 = sub i64 0, %4341
  %gen251 = add i64 %_250, 2
  %_252 = shl i64 %4341, 2
  %_253 = sub i64 0, %4341
  %gen254 = add i64 %_253, 2
  %4342 = add i64 %4341, 2, !dbg !2269
  %4343 = load i64, i64* %14, align 8, !dbg !2270
  %4344 = icmp ult i64 %4342, %4343, !dbg !2271
  br label %originalBB246

originalBB258alteredBB:                           ; preds = %originalBB258, %1181
  %4345 = load i8*, i8** %13, align 8, !dbg !2278
  %4346 = load i64, i64* %20, align 8, !dbg !2279
  %_259 = sub i64 %4346, 2
  %gen260 = mul i64 %_259, 2
  %_261 = sub i64 %4346, 2
  %gen262 = mul i64 %_261, 2
  %_263 = shl i64 %4346, 2
  %_264 = sub i64 %4346, 2
  %gen265 = mul i64 %_264, 2
  %4347 = add i64 %4346, 2, !dbg !2280
  %4348 = getelementptr inbounds i8, i8* %4345, i64 %4347, !dbg !2278
  %4349 = load i8, i8* %4348, align 1, !dbg !2278
  %4350 = sext i8 %4349 to i32, !dbg !2278
  br label %originalBB258

originalBB269alteredBB:                           ; preds = %originalBB269, %1204
  %4351 = load i8, i8* %27, align 1, !dbg !2282
  %4352 = trunc i8 %4351 to i1, !dbg !2282
  br label %originalBB269

originalBB273alteredBB:                           ; preds = %originalBB273, %1223
  br label %originalBB273

originalBB277alteredBB:                           ; preds = %originalBB277, %1240
  %4353 = load i8*, i8** %13, align 8, !dbg !2287
  %4354 = load i64, i64* %20, align 8, !dbg !2288
  %_278 = shl i64 %4354, 2
  %_279 = shl i64 %4354, 2
  %_280 = shl i64 %4354, 2
  %_281 = sub i64 %4354, 2
  %gen282 = mul i64 %_281, 2
  %_283 = shl i64 %4354, 2
  %_284 = sub i64 0, %4354
  %gen285 = add i64 %_284, 2
  %4355 = add i64 %4354, 2, !dbg !2289
  %4356 = getelementptr inbounds i8, i8* %4353, i64 %4355, !dbg !2287
  %4357 = load i8, i8* %4356, align 1, !dbg !2287
  store i8 %4357, i8* %31, align 1, !dbg !2290
  %4358 = load i64, i64* %20, align 8, !dbg !2291
  %_286 = sub i64 0, %4358
  %gen287 = add i64 %_286, 2
  %_288 = sub i64 %4358, 2
  %gen289 = mul i64 %_288, 2
  %4359 = add i64 %4358, 2, !dbg !2291
  store i64 %4359, i64* %20, align 8, !dbg !2291
  br label %originalBB277

originalBB293alteredBB:                           ; preds = %originalBB293, %1268
  %4360 = load i8*, i8** %11, align 8, !dbg !2293
  %4361 = load i64, i64* %21, align 8, !dbg !2293
  %4362 = getelementptr inbounds i8, i8* %4360, i64 %4361, !dbg !2293
  store i8 63, i8* %4362, align 1, !dbg !2293
  br label %originalBB293

originalBB297alteredBB:                           ; preds = %originalBB297, %1288
  %4363 = load i64, i64* %21, align 8, !dbg !2296
  %_298 = sub i64 %4363, 1
  %gen299 = mul i64 %_298, 1
  %_300 = sub i64 0, %4363
  %gen301 = add i64 %_300, 1
  %_302 = shl i64 %4363, 1
  %4364 = add i64 %4363, 1, !dbg !2296
  store i64 %4364, i64* %21, align 8, !dbg !2296
  br label %originalBB297

originalBB306alteredBB:                           ; preds = %originalBB306, %1312
  %4365 = load i8*, i8** %11, align 8, !dbg !2298
  %4366 = load i64, i64* %21, align 8, !dbg !2298
  %4367 = getelementptr inbounds i8, i8* %4365, i64 %4366, !dbg !2298
  store i8 34, i8* %4367, align 1, !dbg !2298
  br label %originalBB306

originalBB310alteredBB:                           ; preds = %originalBB310, %1332
  %4368 = load i64, i64* %21, align 8, !dbg !2301
  %_311 = sub i64 0, %4368
  %gen312 = add i64 %_311, 1
  %_313 = sub i64 0, %4368
  %gen314 = add i64 %_313, 1
  %_315 = sub i64 0, %4368
  %gen316 = add i64 %_315, 1
  %4369 = add i64 %4368, 1, !dbg !2301
  store i64 %4369, i64* %21, align 8, !dbg !2301
  br label %originalBB310

originalBB320alteredBB:                           ; preds = %originalBB320, %1352
  %4370 = load i64, i64* %21, align 8, !dbg !2303
  %4371 = load i64, i64* %12, align 8, !dbg !2303
  %4372 = icmp ult i64 %4370, %4371, !dbg !2303
  br label %originalBB320

originalBB324alteredBB:                           ; preds = %originalBB324, %1376
  %4373 = load i64, i64* %21, align 8, !dbg !2306
  %_325 = sub i64 %4373, 1
  %gen326 = mul i64 %_325, 1
  %_327 = sub i64 0, %4373
  %gen328 = add i64 %_327, 1
  %_329 = sub i64 %4373, 1
  %gen330 = mul i64 %_329, 1
  %4374 = add i64 %4373, 1, !dbg !2306
  store i64 %4374, i64* %21, align 8, !dbg !2306
  br label %originalBB324

originalBB334alteredBB:                           ; preds = %originalBB334, %1395
  br label %originalBB334

originalBB338alteredBB:                           ; preds = %originalBB338, %1416
  %4375 = load i8*, i8** %11, align 8, !dbg !2308
  %4376 = load i64, i64* %21, align 8, !dbg !2308
  %4377 = getelementptr inbounds i8, i8* %4375, i64 %4376, !dbg !2308
  store i8 63, i8* %4377, align 1, !dbg !2308
  br label %originalBB338

originalBB342alteredBB:                           ; preds = %originalBB342, %1442
  br label %originalBB342

originalBB346alteredBB:                           ; preds = %originalBB346, %1460
  br label %originalBB346

originalBB350alteredBB:                           ; preds = %originalBB350, %1477
  store i8 97, i8* %32, align 1, !dbg !2318
  br label %originalBB350

originalBB354alteredBB:                           ; preds = %originalBB354, %1494
  store i8 98, i8* %32, align 1, !dbg !2320
  br label %originalBB354

originalBB358alteredBB:                           ; preds = %originalBB358, %1511
  store i8 102, i8* %32, align 1, !dbg !2322
  br label %originalBB358

originalBB362alteredBB:                           ; preds = %originalBB362, %1528
  store i8 110, i8* %32, align 1, !dbg !2324
  br label %originalBB362

originalBB366alteredBB:                           ; preds = %originalBB366, %1547
  store i8 118, i8* %32, align 1, !dbg !2330
  br label %originalBB366

originalBB370alteredBB:                           ; preds = %originalBB370, %1564
  %4378 = load i8, i8* %31, align 1, !dbg !2332
  store i8 %4378, i8* %32, align 1, !dbg !2333
  %4379 = load i32, i32* %15, align 4, !dbg !2334
  %4380 = icmp eq i32 %4379, 2, !dbg !2336
  br label %originalBB370

originalBB374alteredBB:                           ; preds = %originalBB374, %1584
  %4381 = load i8, i8* %27, align 1, !dbg !2338
  %4382 = trunc i8 %4381 to i1, !dbg !2338
  br label %originalBB374

originalBB378alteredBB:                           ; preds = %originalBB378, %1603
  br label %originalBB378

originalBB382alteredBB:                           ; preds = %originalBB382, %1621
  %4383 = load i8, i8* %25, align 1, !dbg !2344
  %4384 = trunc i8 %4383 to i1, !dbg !2344
  br label %originalBB382

originalBB386alteredBB:                           ; preds = %originalBB386, %1640
  %4385 = load i8, i8* %27, align 1, !dbg !2347
  %4386 = trunc i8 %4385 to i1, !dbg !2347
  br label %originalBB386

originalBB390alteredBB:                           ; preds = %originalBB390, %1659
  %4387 = load i64, i64* %24, align 8, !dbg !2349
  %4388 = icmp ne i64 %4387, 0, !dbg !2349
  br label %originalBB390

originalBB394alteredBB:                           ; preds = %originalBB394, %1679
  br label %originalBB394

originalBB398alteredBB:                           ; preds = %originalBB398, %1702
  br label %originalBB398

originalBB402alteredBB:                           ; preds = %originalBB402, %1719
  br label %originalBB402

originalBB406alteredBB:                           ; preds = %originalBB406, %1736
  %4389 = load i8, i8* %25, align 1, !dbg !2363
  %4390 = trunc i8 %4389 to i1, !dbg !2363
  br label %originalBB406

originalBB410alteredBB:                           ; preds = %originalBB410, %1755
  %4391 = load i8, i8* %32, align 1, !dbg !2366
  store i8 %4391, i8* %31, align 1, !dbg !2368
  br label %originalBB410

originalBB414alteredBB:                           ; preds = %originalBB414, %1783
  %4392 = load i64, i64* %14, align 8, !dbg !2377
  %4393 = icmp eq i64 %4392, 1, !dbg !2378
  br label %originalBB414

originalBB418alteredBB:                           ; preds = %originalBB418, %1803
  br label %originalBB418

originalBB422alteredBB:                           ; preds = %originalBB422, %1820
  %4394 = load i64, i64* %20, align 8, !dbg !2381
  %4395 = icmp ne i64 %4394, 0, !dbg !2383
  br label %originalBB422

originalBB426alteredBB:                           ; preds = %originalBB426, %1841
  store i8 1, i8* %35, align 1, !dbg !2387
  br label %originalBB426

originalBB430alteredBB:                           ; preds = %originalBB430, %1861
  %4396 = load i8, i8* %27, align 1, !dbg !2393
  %4397 = trunc i8 %4396 to i1, !dbg !2393
  br label %originalBB430

originalBB434alteredBB:                           ; preds = %originalBB434, %1880
  br label %originalBB434

originalBB438alteredBB:                           ; preds = %originalBB438, %1898
  store i8 1, i8* %29, align 1, !dbg !2397
  store i8 1, i8* %35, align 1, !dbg !2398
  %4398 = load i32, i32* %15, align 4, !dbg !2399
  %4399 = icmp eq i32 %4398, 2, !dbg !2401
  br label %originalBB438

originalBB442alteredBB:                           ; preds = %originalBB442, %1917
  %4400 = load i8, i8* %27, align 1, !dbg !2403
  %4401 = trunc i8 %4400 to i1, !dbg !2403
  br label %originalBB442

originalBB446alteredBB:                           ; preds = %originalBB446, %1943
  %4402 = load i64, i64* %12, align 8, !dbg !2413
  store i64 %4402, i64* %22, align 8, !dbg !2415
  store i64 0, i64* %12, align 8, !dbg !2416
  br label %originalBB446

originalBB450alteredBB:                           ; preds = %originalBB450, %1961
  br label %originalBB450

originalBB454alteredBB:                           ; preds = %originalBB454, %1989
  br label %originalBB454

originalBB458alteredBB:                           ; preds = %originalBB458, %2010
  %4403 = load i8*, i8** %11, align 8, !dbg !2424
  %4404 = load i64, i64* %21, align 8, !dbg !2424
  %4405 = getelementptr inbounds i8, i8* %4403, i64 %4404, !dbg !2424
  store i8 92, i8* %4405, align 1, !dbg !2424
  br label %originalBB458

originalBB462alteredBB:                           ; preds = %originalBB462, %2034
  %4406 = load i64, i64* %21, align 8, !dbg !2429
  %4407 = load i64, i64* %12, align 8, !dbg !2429
  %4408 = icmp ult i64 %4406, %4407, !dbg !2429
  br label %originalBB462

originalBB466alteredBB:                           ; preds = %originalBB466, %2054
  %4409 = load i8*, i8** %11, align 8, !dbg !2429
  %4410 = load i64, i64* %21, align 8, !dbg !2429
  %4411 = getelementptr inbounds i8, i8* %4409, i64 %4410, !dbg !2429
  store i8 39, i8* %4411, align 1, !dbg !2429
  br label %originalBB466

originalBB470alteredBB:                           ; preds = %originalBB470, %2080
  %4412 = load i8, i8* %26, align 1, !dbg !2443
  %4413 = trunc i8 %4412 to i1, !dbg !2443
  br label %originalBB470

originalBB474alteredBB:                           ; preds = %originalBB474, %2111
  %4414 = bitcast %struct.__mbstate_t* %38 to i8*, !dbg !2470
  call void @llvm.memset.p0i8.i64(i8* align 4 %4414, i8 0, i64 8, i1 false), !dbg !2470
  store i64 0, i64* %36, align 8, !dbg !2471
  store i8 1, i8* %37, align 1, !dbg !2472
  %4415 = load i64, i64* %14, align 8, !dbg !2473
  %4416 = icmp eq i64 %4415, -1, !dbg !2475
  br label %originalBB474

originalBB478alteredBB:                           ; preds = %originalBB478, %2134
  br label %originalBB478

originalBB482alteredBB:                           ; preds = %originalBB482, %2165
  br label %originalBB482

originalBB486alteredBB:                           ; preds = %originalBB486, %2186
  %4417 = load i64, i64* %40, align 8, !dbg !2510
  %4418 = icmp eq i64 %4417, -2, !dbg !2512
  br label %originalBB486

originalBB490alteredBB:                           ; preds = %originalBB490, %2206
  %4419 = load i64, i64* %20, align 8, !dbg !2517
  %4420 = load i64, i64* %36, align 8, !dbg !2518
  %_491 = sub i64 0, %4419
  %gen492 = add i64 %_491, %4420
  %_493 = sub i64 %4419, %4420
  %gen494 = mul i64 %_493, %4420
  %_495 = sub i64 %4419, %4420
  %gen496 = mul i64 %_495, %4420
  %4421 = add i64 %4419, %4420, !dbg !2519
  %4422 = load i64, i64* %14, align 8, !dbg !2520
  %4423 = icmp ult i64 %4421, %4422, !dbg !2521
  br label %originalBB490

originalBB500alteredBB:                           ; preds = %originalBB500, %2228
  %4424 = load i8*, i8** %13, align 8, !dbg !2523
  %4425 = load i64, i64* %20, align 8, !dbg !2524
  %4426 = load i64, i64* %36, align 8, !dbg !2525
  %_501 = sub i64 0, %4425
  %gen502 = add i64 %_501, %4426
  %_503 = sub i64 %4425, %4426
  %gen504 = mul i64 %_503, %4426
  %_505 = sub i64 0, %4425
  %gen506 = add i64 %_505, %4426
  %_507 = sub i64 %4425, %4426
  %gen508 = mul i64 %_507, %4426
  %_509 = sub i64 0, %4425
  %gen510 = add i64 %_509, %4426
  %_511 = sub i64 %4425, %4426
  %gen512 = mul i64 %_511, %4426
  %_513 = sub i64 %4425, %4426
  %gen514 = mul i64 %_513, %4426
  %4427 = add i64 %4425, %4426, !dbg !2526
  %4428 = getelementptr inbounds i8, i8* %4424, i64 %4427, !dbg !2523
  %4429 = load i8, i8* %4428, align 1, !dbg !2523
  %4430 = sext i8 %4429 to i32, !dbg !2523
  %4431 = icmp ne i32 %4430, 0, !dbg !2522
  br label %originalBB500

originalBB518alteredBB:                           ; preds = %originalBB518, %2253
  br label %originalBB518

originalBB522alteredBB:                           ; preds = %originalBB522, %2271
  %4432 = load i64, i64* %36, align 8, !dbg !2528
  %_523 = sub i64 %4432, 1
  %gen524 = mul i64 %_523, 1
  %4433 = add i64 %4432, 1, !dbg !2528
  store i64 %4433, i64* %36, align 8, !dbg !2528
  br label %originalBB522

originalBB528alteredBB:                           ; preds = %originalBB528, %2290
  br label %originalBB528

originalBB532alteredBB:                           ; preds = %originalBB532, %2313
  store i64 1, i64* %41, align 8, !dbg !2541
  br label %originalBB532

originalBB536alteredBB:                           ; preds = %originalBB536, %2330
  %4434 = load i64, i64* %41, align 8, !dbg !2544
  %4435 = load i64, i64* %40, align 8, !dbg !2546
  %4436 = icmp ult i64 %4434, %4435, !dbg !2547
  br label %originalBB536

originalBB540alteredBB:                           ; preds = %originalBB540, %2350
  %4437 = load i8*, i8** %13, align 8, !dbg !2549
  %4438 = load i64, i64* %20, align 8, !dbg !2550
  %4439 = load i64, i64* %36, align 8, !dbg !2551
  %_541 = shl i64 %4438, %4439
  %4440 = add i64 %4438, %4439, !dbg !2552
  %4441 = load i64, i64* %41, align 8, !dbg !2553
  %_542 = sub i64 %4440, %4441
  %gen543 = mul i64 %_542, %4441
  %_544 = shl i64 %4440, %4441
  %_545 = shl i64 %4440, %4441
  %_546 = shl i64 %4440, %4441
  %_547 = shl i64 %4440, %4441
  %_548 = sub i64 0, %4440
  %gen549 = add i64 %_548, %4441
  %_550 = sub i64 %4440, %4441
  %gen551 = mul i64 %_550, %4441
  %_552 = sub i64 0, %4440
  %gen553 = add i64 %_552, %4441
  %4442 = add i64 %4440, %4441, !dbg !2554
  %4443 = getelementptr inbounds i8, i8* %4437, i64 %4442, !dbg !2549
  %4444 = load i8, i8* %4443, align 1, !dbg !2549
  %4445 = sext i8 %4444 to i32, !dbg !2549
  br label %originalBB540

originalBB557alteredBB:                           ; preds = %originalBB557, %2376
  br label %originalBB557

originalBB561alteredBB:                           ; preds = %originalBB561, %2395
  %4446 = load i64, i64* %41, align 8, !dbg !2560
  %_562 = sub i64 %4446, 1
  %gen563 = mul i64 %_562, 1
  %_564 = shl i64 %4446, 1
  %_565 = sub i64 %4446, 1
  %gen566 = mul i64 %_565, 1
  %4447 = add i64 %4446, 1, !dbg !2560
  store i64 %4447, i64* %41, align 8, !dbg !2560
  br label %originalBB561

originalBB570alteredBB:                           ; preds = %originalBB570, %2414
  br label %originalBB570

originalBB574alteredBB:                           ; preds = %originalBB574, %2435
  store i8 0, i8* %37, align 1, !dbg !2569
  br label %originalBB574

originalBB578alteredBB:                           ; preds = %originalBB578, %2452
  %4448 = load i64, i64* %40, align 8, !dbg !2571
  %4449 = load i64, i64* %36, align 8, !dbg !2572
  %_579 = sub i64 %4449, %4448
  %gen580 = mul i64 %_579, %4448
  %_581 = sub i64 0, %4449
  %gen582 = add i64 %_581, %4448
  %_583 = shl i64 %4449, %4448
  %_584 = shl i64 %4449, %4448
  %_585 = shl i64 %4449, %4448
  %_586 = sub i64 0, %4449
  %gen587 = add i64 %_586, %4448
  %4450 = add i64 %4449, %4448, !dbg !2572
  store i64 %4450, i64* %36, align 8, !dbg !2572
  br label %originalBB578

originalBB591alteredBB:                           ; preds = %originalBB591, %2472
  br label %originalBB591

originalBB595alteredBB:                           ; preds = %originalBB595, %2489
  br label %originalBB595

originalBB599alteredBB:                           ; preds = %originalBB599, %2506
  br label %originalBB599

originalBB603alteredBB:                           ; preds = %originalBB603, %2528
  %4451 = load i8, i8* %37, align 1, !dbg !2578
  %4452 = trunc i8 %4451 to i1, !dbg !2578
  %4453 = zext i1 %4452 to i8, !dbg !2579
  store i8 %4453, i8* %35, align 1, !dbg !2579
  %4454 = load i64, i64* %36, align 8, !dbg !2580
  %4455 = icmp ult i64 1, %4454, !dbg !2582
  br label %originalBB603

originalBB607alteredBB:                           ; preds = %originalBB607, %2550
  %4456 = load i8, i8* %25, align 1, !dbg !2584
  %4457 = trunc i8 %4456 to i1, !dbg !2584
  br label %originalBB607

originalBB611alteredBB:                           ; preds = %originalBB611, %2569
  %4458 = load i8, i8* %37, align 1, !dbg !2586
  %4459 = trunc i8 %4458 to i1, !dbg !2586
  br label %originalBB611

originalBB615alteredBB:                           ; preds = %originalBB615, %2588
  %4460 = load i64, i64* %20, align 8, !dbg !2591
  %4461 = load i64, i64* %36, align 8, !dbg !2592
  %4462 = add i64 %4460, %4461, !dbg !2593
  store i64 %4462, i64* %42, align 8, !dbg !2590
  br label %originalBB615

originalBB619alteredBB:                           ; preds = %originalBB619, %2618
  br label %originalBB619

originalBB623alteredBB:                           ; preds = %originalBB623, %2641
  br label %originalBB623

originalBB627alteredBB:                           ; preds = %originalBB627, %2662
  %4463 = load i8*, i8** %11, align 8, !dbg !2613
  %4464 = load i64, i64* %21, align 8, !dbg !2613
  %4465 = getelementptr inbounds i8, i8* %4463, i64 %4464, !dbg !2613
  store i8 39, i8* %4465, align 1, !dbg !2613
  br label %originalBB627

originalBB631alteredBB:                           ; preds = %originalBB631, %2682
  %4466 = load i64, i64* %21, align 8, !dbg !2616
  %_632 = sub i64 %4466, 1
  %gen633 = mul i64 %_632, 1
  %4467 = add i64 %4466, 1, !dbg !2616
  store i64 %4467, i64* %21, align 8, !dbg !2616
  br label %originalBB631

originalBB637alteredBB:                           ; preds = %originalBB637, %2702
  %4468 = load i64, i64* %21, align 8, !dbg !2617
  %4469 = load i64, i64* %12, align 8, !dbg !2617
  %4470 = icmp ult i64 %4468, %4469, !dbg !2617
  br label %originalBB637

originalBB641alteredBB:                           ; preds = %originalBB641, %2722
  %4471 = load i8*, i8** %11, align 8, !dbg !2617
  %4472 = load i64, i64* %21, align 8, !dbg !2617
  %4473 = getelementptr inbounds i8, i8* %4471, i64 %4472, !dbg !2617
  store i8 36, i8* %4473, align 1, !dbg !2617
  br label %originalBB641

originalBB645alteredBB:                           ; preds = %originalBB645, %2742
  %4474 = load i64, i64* %21, align 8, !dbg !2620
  %_646 = shl i64 %4474, 1
  %_647 = sub i64 %4474, 1
  %gen648 = mul i64 %_647, 1
  %_649 = shl i64 %4474, 1
  %_650 = sub i64 %4474, 1
  %gen651 = mul i64 %_650, 1
  %4475 = add i64 %4474, 1, !dbg !2620
  store i64 %4475, i64* %21, align 8, !dbg !2620
  br label %originalBB645

originalBB655alteredBB:                           ; preds = %originalBB655, %2761
  br label %originalBB655

originalBB659alteredBB:                           ; preds = %originalBB659, %2786
  %4476 = load i64, i64* %21, align 8, !dbg !2624
  %_660 = sub i64 %4476, 1
  %gen661 = mul i64 %_660, 1
  %_662 = sub i64 0, %4476
  %gen663 = add i64 %_662, 1
  %_664 = shl i64 %4476, 1
  %_665 = shl i64 %4476, 1
  %_666 = shl i64 %4476, 1
  %_667 = shl i64 %4476, 1
  %_668 = sub i64 %4476, 1
  %gen669 = mul i64 %_668, 1
  %_670 = sub i64 0, %4476
  %gen671 = add i64 %_670, 1
  %_672 = shl i64 %4476, 1
  %_673 = sub i64 %4476, 1
  %gen674 = mul i64 %_673, 1
  %4477 = add i64 %4476, 1, !dbg !2624
  store i64 %4477, i64* %21, align 8, !dbg !2624
  br label %originalBB659

originalBB678alteredBB:                           ; preds = %originalBB678, %2805
  store i8 1, i8* %28, align 1, !dbg !2611
  br label %originalBB678

originalBB682alteredBB:                           ; preds = %originalBB682, %2827
  %4478 = load i8*, i8** %11, align 8, !dbg !2625
  %4479 = load i64, i64* %21, align 8, !dbg !2625
  %4480 = getelementptr inbounds i8, i8* %4478, i64 %4479, !dbg !2625
  store i8 92, i8* %4480, align 1, !dbg !2625
  br label %originalBB682

originalBB686alteredBB:                           ; preds = %originalBB686, %2851
  br label %originalBB686

originalBB690alteredBB:                           ; preds = %originalBB690, %2881
  %4481 = load i64, i64* %21, align 8, !dbg !2633
  %_691 = shl i64 %4481, 1
  %_692 = sub i64 0, %4481
  %gen693 = add i64 %_692, 1
  %_694 = shl i64 %4481, 1
  %_695 = shl i64 %4481, 1
  %_696 = shl i64 %4481, 1
  %4482 = add i64 %4481, 1, !dbg !2633
  store i64 %4482, i64* %21, align 8, !dbg !2633
  br label %originalBB690

originalBB700alteredBB:                           ; preds = %originalBB700, %2905
  %4483 = load i8, i8* %31, align 1, !dbg !2635
  %4484 = zext i8 %4483 to i32, !dbg !2635
  %_701 = sub i32 0, %4484
  %gen702 = add i32 %_701, 3
  %_703 = sub i32 %4484, 3
  %gen704 = mul i32 %_703, 3
  %_705 = sub i32 0, %4484
  %gen706 = add i32 %_705, 3
  %_707 = shl i32 %4484, 3
  %4485 = ashr i32 %4484, 3, !dbg !2635
  %_708 = shl i32 %4485, 7
  %_709 = sub i32 0, %4485
  %gen710 = add i32 %_709, 7
  %_711 = shl i32 %4485, 7
  %4486 = and i32 %4485, 7, !dbg !2635
  %_712 = shl i32 48, %4486
  %_713 = shl i32 48, %4486
  %_714 = sub i32 0, 48
  %gen715 = add i32 %_714, %4486
  %4487 = add nsw i32 48, %4486, !dbg !2635
  %4488 = trunc i32 %4487 to i8, !dbg !2635
  %4489 = load i8*, i8** %11, align 8, !dbg !2635
  %4490 = load i64, i64* %21, align 8, !dbg !2635
  %4491 = getelementptr inbounds i8, i8* %4489, i64 %4490, !dbg !2635
  store i8 %4488, i8* %4491, align 1, !dbg !2635
  br label %originalBB700

originalBB719alteredBB:                           ; preds = %originalBB719, %2931
  %4492 = load i64, i64* %21, align 8, !dbg !2638
  %_720 = sub i64 %4492, 1
  %gen721 = mul i64 %_720, 1
  %_722 = sub i64 %4492, 1
  %gen723 = mul i64 %_722, 1
  %_724 = shl i64 %4492, 1
  %_725 = sub i64 0, %4492
  %gen726 = add i64 %_725, 1
  %_727 = sub i64 %4492, 1
  %gen728 = mul i64 %_727, 1
  %_729 = sub i64 0, %4492
  %gen730 = add i64 %_729, 1
  %4493 = add i64 %4492, 1, !dbg !2638
  store i64 %4493, i64* %21, align 8, !dbg !2638
  br label %originalBB719

originalBB734alteredBB:                           ; preds = %originalBB734, %2950
  %4494 = load i8, i8* %31, align 1, !dbg !2639
  %4495 = zext i8 %4494 to i32, !dbg !2639
  %_735 = sub i32 0, %4495
  %gen736 = add i32 %_735, 7
  %_737 = sub i32 0, %4495
  %gen738 = add i32 %_737, 7
  %_739 = sub i32 %4495, 7
  %gen740 = mul i32 %_739, 7
  %_741 = sub i32 0, %4495
  %gen742 = add i32 %_741, 7
  %4496 = and i32 %4495, 7, !dbg !2640
  %_743 = sub i32 0, 48
  %gen744 = add i32 %_743, %4496
  %_745 = sub i32 48, %4496
  %gen746 = mul i32 %_745, %4496
  %_747 = sub i32 0, 48
  %gen748 = add i32 %_747, %4496
  %_749 = shl i32 48, %4496
  %_750 = sub i32 0, 48
  %gen751 = add i32 %_750, %4496
  %_752 = sub i32 48, %4496
  %gen753 = mul i32 %_752, %4496
  %_754 = sub i32 48, %4496
  %gen755 = mul i32 %_754, %4496
  %_756 = shl i32 48, %4496
  %4497 = add nsw i32 48, %4496, !dbg !2641
  %4498 = trunc i32 %4497 to i8, !dbg !2642
  store i8 %4498, i8* %31, align 1, !dbg !2643
  br label %originalBB734

originalBB760alteredBB:                           ; preds = %originalBB760, %2975
  br label %originalBB760

originalBB764alteredBB:                           ; preds = %originalBB764, %2992
  %4499 = load i64, i64* %21, align 8, !dbg !2650
  %4500 = load i64, i64* %12, align 8, !dbg !2650
  %4501 = icmp ult i64 %4499, %4500, !dbg !2650
  br label %originalBB764

originalBB768alteredBB:                           ; preds = %originalBB768, %3012
  %4502 = load i8*, i8** %11, align 8, !dbg !2650
  %4503 = load i64, i64* %21, align 8, !dbg !2650
  %4504 = getelementptr inbounds i8, i8* %4502, i64 %4503, !dbg !2650
  store i8 92, i8* %4504, align 1, !dbg !2650
  br label %originalBB768

originalBB772alteredBB:                           ; preds = %originalBB772, %3035
  store i8 0, i8* %33, align 1, !dbg !2654
  br label %originalBB772

originalBB776alteredBB:                           ; preds = %originalBB776, %3058
  br label %originalBB776

originalBB780alteredBB:                           ; preds = %originalBB780, %3075
  br label %originalBB780

originalBB784alteredBB:                           ; preds = %originalBB784, %3092
  %4505 = load i8, i8* %28, align 1, !dbg !2664
  %4506 = trunc i8 %4505 to i1, !dbg !2664
  br label %originalBB784

originalBB788alteredBB:                           ; preds = %originalBB788, %3111
  %4507 = load i8, i8* %34, align 1, !dbg !2664
  %4508 = trunc i8 %4507 to i1, !dbg !2664
  br label %originalBB788

originalBB792alteredBB:                           ; preds = %originalBB792, %3130
  br label %originalBB792

originalBB796alteredBB:                           ; preds = %originalBB796, %3147
  %4509 = load i64, i64* %21, align 8, !dbg !2670
  %4510 = load i64, i64* %12, align 8, !dbg !2670
  %4511 = icmp ult i64 %4509, %4510, !dbg !2670
  br label %originalBB796

originalBB800alteredBB:                           ; preds = %originalBB800, %3167
  %4512 = load i8*, i8** %11, align 8, !dbg !2670
  %4513 = load i64, i64* %21, align 8, !dbg !2670
  %4514 = getelementptr inbounds i8, i8* %4512, i64 %4513, !dbg !2670
  store i8 39, i8* %4514, align 1, !dbg !2670
  br label %originalBB800

originalBB804alteredBB:                           ; preds = %originalBB804, %3190
  br label %originalBB804

originalBB808alteredBB:                           ; preds = %originalBB808, %3211
  %4515 = load i8*, i8** %11, align 8, !dbg !2674
  %4516 = load i64, i64* %21, align 8, !dbg !2674
  %4517 = getelementptr inbounds i8, i8* %4515, i64 %4516, !dbg !2674
  store i8 39, i8* %4517, align 1, !dbg !2674
  br label %originalBB808

originalBB812alteredBB:                           ; preds = %originalBB812, %3231
  %4518 = load i64, i64* %21, align 8, !dbg !2677
  %_813 = sub i64 %4518, 1
  %gen814 = mul i64 %_813, 1
  %_815 = shl i64 %4518, 1
  %_816 = sub i64 0, %4518
  %gen817 = add i64 %_816, 1
  %_818 = sub i64 0, %4518
  %gen819 = add i64 %_818, 1
  %_820 = shl i64 %4518, 1
  %_821 = sub i64 0, %4518
  %gen822 = add i64 %_821, 1
  %_823 = sub i64 0, %4518
  %gen824 = add i64 %_823, 1
  %_825 = sub i64 %4518, 1
  %gen826 = mul i64 %_825, 1
  %4519 = add i64 %4518, 1, !dbg !2677
  store i64 %4519, i64* %21, align 8, !dbg !2677
  br label %originalBB812

originalBB830alteredBB:                           ; preds = %originalBB830, %3250
  store i8 0, i8* %28, align 1, !dbg !2668
  br label %originalBB830

originalBB834alteredBB:                           ; preds = %originalBB834, %3269
  %4520 = load i64, i64* %21, align 8, !dbg !2679
  %4521 = load i64, i64* %12, align 8, !dbg !2679
  %4522 = icmp ult i64 %4520, %4521, !dbg !2679
  br label %originalBB834

originalBB838alteredBB:                           ; preds = %originalBB838, %3294
  %4523 = load i64, i64* %21, align 8, !dbg !2682
  %_839 = sub i64 %4523, 1
  %gen840 = mul i64 %_839, 1
  %_841 = sub i64 0, %4523
  %gen842 = add i64 %_841, 1
  %_843 = sub i64 %4523, 1
  %gen844 = mul i64 %_843, 1
  %_845 = sub i64 0, %4523
  %gen846 = add i64 %_845, 1
  %4524 = add i64 %4523, 1, !dbg !2682
  store i64 %4524, i64* %21, align 8, !dbg !2682
  br label %originalBB838

originalBB850alteredBB:                           ; preds = %originalBB850, %3313
  %4525 = load i8*, i8** %13, align 8, !dbg !2683
  %4526 = load i64, i64* %20, align 8, !dbg !2684
  %_851 = sub i64 %4526, 1
  %gen852 = mul i64 %_851, 1
  %_853 = shl i64 %4526, 1
  %4527 = add i64 %4526, 1, !dbg !2684
  store i64 %4527, i64* %20, align 8, !dbg !2684
  %4528 = getelementptr inbounds i8, i8* %4525, i64 %4527, !dbg !2683
  %4529 = load i8, i8* %4528, align 1, !dbg !2683
  store i8 %4529, i8* %31, align 1, !dbg !2685
  br label %originalBB850

originalBB857alteredBB:                           ; preds = %originalBB857, %3335
  br label %originalBB857

originalBB861alteredBB:                           ; preds = %originalBB861, %3359
  %4530 = load i8, i8* %27, align 1, !dbg !2698
  %4531 = trunc i8 %4530 to i1, !dbg !2698
  br label %originalBB861

originalBB865alteredBB:                           ; preds = %originalBB865, %3378
  %4532 = load i32*, i32** %17, align 8, !dbg !2700
  %4533 = icmp ne i32* %4532, null, !dbg !2700
  br label %originalBB865

originalBB869alteredBB:                           ; preds = %originalBB869, %3416
  br label %originalBB869

originalBB873alteredBB:                           ; preds = %originalBB873, %3433
  %4534 = load i8, i8* %27, align 1, !dbg !2716
  %4535 = trunc i8 %4534 to i1, !dbg !2716
  br label %originalBB873

originalBB877alteredBB:                           ; preds = %originalBB877, %3472
  %4536 = load i64, i64* %21, align 8, !dbg !2728
  %4537 = load i64, i64* %12, align 8, !dbg !2728
  %4538 = icmp ult i64 %4536, %4537, !dbg !2728
  br label %originalBB877

originalBB881alteredBB:                           ; preds = %originalBB881, %3499
  br label %originalBB881

originalBB885alteredBB:                           ; preds = %originalBB885, %3516
  %4539 = load i64, i64* %21, align 8, !dbg !2732
  %4540 = load i64, i64* %12, align 8, !dbg !2732
  %4541 = icmp ult i64 %4539, %4540, !dbg !2732
  br label %originalBB885

originalBB889alteredBB:                           ; preds = %originalBB889, %3536
  %4542 = load i8*, i8** %11, align 8, !dbg !2732
  %4543 = load i64, i64* %21, align 8, !dbg !2732
  %4544 = getelementptr inbounds i8, i8* %4542, i64 %4543, !dbg !2732
  store i8 39, i8* %4544, align 1, !dbg !2732
  br label %originalBB889

originalBB893alteredBB:                           ; preds = %originalBB893, %3556
  %4545 = load i64, i64* %21, align 8, !dbg !2735
  %_894 = sub i64 %4545, 1
  %gen895 = mul i64 %_894, 1
  %4546 = add i64 %4545, 1, !dbg !2735
  store i64 %4546, i64* %21, align 8, !dbg !2735
  br label %originalBB893

originalBB899alteredBB:                           ; preds = %originalBB899, %3575
  store i8 1, i8* %28, align 1, !dbg !2722
  br label %originalBB899

originalBB903alteredBB:                           ; preds = %originalBB903, %3592
  br label %originalBB903

originalBB907alteredBB:                           ; preds = %originalBB907, %3613
  %4547 = load i8*, i8** %11, align 8, !dbg !2736
  %4548 = load i64, i64* %21, align 8, !dbg !2736
  %4549 = getelementptr inbounds i8, i8* %4547, i64 %4548, !dbg !2736
  store i8 92, i8* %4549, align 1, !dbg !2736
  br label %originalBB907

originalBB911alteredBB:                           ; preds = %originalBB911, %3636
  br label %originalBB911

originalBB915alteredBB:                           ; preds = %originalBB915, %3654
  br label %originalBB915

originalBB919alteredBB:                           ; preds = %originalBB919, %3677
  br label %originalBB919

originalBB923alteredBB:                           ; preds = %originalBB923, %3694
  %4550 = load i64, i64* %21, align 8, !dbg !2749
  %4551 = load i64, i64* %12, align 8, !dbg !2749
  %4552 = icmp ult i64 %4550, %4551, !dbg !2749
  br label %originalBB923

originalBB927alteredBB:                           ; preds = %originalBB927, %3714
  %4553 = load i8*, i8** %11, align 8, !dbg !2749
  %4554 = load i64, i64* %21, align 8, !dbg !2749
  %4555 = getelementptr inbounds i8, i8* %4553, i64 %4554, !dbg !2749
  store i8 39, i8* %4555, align 1, !dbg !2749
  br label %originalBB927

originalBB931alteredBB:                           ; preds = %originalBB931, %3737
  br label %originalBB931

originalBB935alteredBB:                           ; preds = %originalBB935, %3754
  %4556 = load i64, i64* %21, align 8, !dbg !2753
  %4557 = load i64, i64* %12, align 8, !dbg !2753
  %4558 = icmp ult i64 %4556, %4557, !dbg !2753
  br label %originalBB935

originalBB939alteredBB:                           ; preds = %originalBB939, %3774
  %4559 = load i8*, i8** %11, align 8, !dbg !2753
  %4560 = load i64, i64* %21, align 8, !dbg !2753
  %4561 = getelementptr inbounds i8, i8* %4559, i64 %4560, !dbg !2753
  store i8 39, i8* %4561, align 1, !dbg !2753
  br label %originalBB939

originalBB943alteredBB:                           ; preds = %originalBB943, %3794
  %4562 = load i64, i64* %21, align 8, !dbg !2756
  %_944 = sub i64 0, %4562
  %gen945 = add i64 %_944, 1
  %_946 = sub i64 0, %4562
  %gen947 = add i64 %_946, 1
  %_948 = sub i64 %4562, 1
  %gen949 = mul i64 %_948, 1
  %_950 = sub i64 %4562, 1
  %gen951 = mul i64 %_950, 1
  %_952 = shl i64 %4562, 1
  %4563 = add i64 %4562, 1, !dbg !2756
  store i64 %4563, i64* %21, align 8, !dbg !2756
  br label %originalBB943

originalBB956alteredBB:                           ; preds = %originalBB956, %3814
  br label %originalBB956

originalBB960alteredBB:                           ; preds = %originalBB960, %3841
  %4564 = load i64, i64* %21, align 8, !dbg !2761
  %_961 = shl i64 %4564, 1
  %_962 = sub i64 0, %4564
  %gen963 = add i64 %_962, 1
  %_964 = sub i64 %4564, 1
  %gen965 = mul i64 %_964, 1
  %_966 = sub i64 %4564, 1
  %gen967 = mul i64 %_966, 1
  %_968 = shl i64 %4564, 1
  %4565 = add i64 %4564, 1, !dbg !2761
  store i64 %4565, i64* %21, align 8, !dbg !2761
  br label %originalBB960

originalBB972alteredBB:                           ; preds = %originalBB972, %3860
  %4566 = load i8, i8* %35, align 1, !dbg !2762
  %4567 = trunc i8 %4566 to i1, !dbg !2762
  br label %originalBB972

originalBB976alteredBB:                           ; preds = %originalBB976, %3880
  br label %originalBB976

originalBB980alteredBB:                           ; preds = %originalBB980, %3903
  %4568 = load i32, i32* %15, align 4, !dbg !2776
  %4569 = icmp eq i32 %4568, 2, !dbg !2777
  br label %originalBB980

originalBB984alteredBB:                           ; preds = %originalBB984, %3926
  %4570 = load i32, i32* %15, align 4, !dbg !2782
  %4571 = icmp eq i32 %4570, 2, !dbg !2784
  br label %originalBB984

originalBB988alteredBB:                           ; preds = %originalBB988, %3945
  %4572 = load i8, i8* %27, align 1, !dbg !2786
  %4573 = trunc i8 %4572 to i1, !dbg !2786
  br label %originalBB988

originalBB992alteredBB:                           ; preds = %originalBB992, %3967
  %4574 = load i8, i8* %30, align 1, !dbg !2790
  %4575 = trunc i8 %4574 to i1, !dbg !2790
  br label %originalBB992

originalBB996alteredBB:                           ; preds = %originalBB996, %3986
  %4576 = load i8*, i8** %11, align 8, !dbg !2794
  %4577 = load i64, i64* %22, align 8, !dbg !2795
  %4578 = load i8*, i8** %13, align 8, !dbg !2796
  %4579 = load i64, i64* %14, align 8, !dbg !2797
  %4580 = load i32, i32* %16, align 4, !dbg !2798
  %4581 = load i32*, i32** %17, align 8, !dbg !2799
  %4582 = load i8*, i8** %18, align 8, !dbg !2800
  %4583 = load i8*, i8** %19, align 8, !dbg !2801
  %4584 = call i64 @quotearg_buffer_restyled(i8* %4576, i64 %4577, i8* %4578, i64 %4579, i32 5, i32 %4580, i32* %4581, i8* %4582, i8* %4583), !dbg !2802
  store i64 %4584, i64* %10, align 8, !dbg !2803
  br label %originalBB996

originalBB1000alteredBB:                          ; preds = %originalBB1000, %4015
  %4585 = load i64, i64* %22, align 8, !dbg !2807
  %4586 = icmp ne i64 %4585, 0, !dbg !2807
  br label %originalBB1000

originalBB1004alteredBB:                          ; preds = %originalBB1004, %4036
  br label %originalBB1004

originalBB1008alteredBB:                          ; preds = %originalBB1008, %4053
  br label %originalBB1008

originalBB1012alteredBB:                          ; preds = %originalBB1012, %4070
  %4587 = load i8*, i8** %23, align 8, !dbg !2815
  %4588 = icmp ne i8* %4587, null, !dbg !2815
  br label %originalBB1012

originalBB1016alteredBB:                          ; preds = %originalBB1016, %4092
  br label %originalBB1016

originalBB1020alteredBB:                          ; preds = %originalBB1020, %4113
  br label %originalBB1020

originalBB1024alteredBB:                          ; preds = %originalBB1024, %4134
  %4589 = load i8*, i8** %23, align 8, !dbg !2827
  %4590 = load i8, i8* %4589, align 1, !dbg !2827
  %4591 = load i8*, i8** %11, align 8, !dbg !2827
  %4592 = load i64, i64* %21, align 8, !dbg !2827
  %4593 = getelementptr inbounds i8, i8* %4591, i64 %4592, !dbg !2827
  store i8 %4590, i8* %4593, align 1, !dbg !2827
  br label %originalBB1024

originalBB1028alteredBB:                          ; preds = %originalBB1028, %4156
  %4594 = load i64, i64* %21, align 8, !dbg !2830
  %_1029 = shl i64 %4594, 1
  %_1030 = sub i64 %4594, 1
  %gen1031 = mul i64 %_1030, 1
  %_1032 = sub i64 0, %4594
  %gen1033 = add i64 %_1032, 1
  %_1034 = sub i64 %4594, 1
  %gen1035 = mul i64 %_1034, 1
  %4595 = add i64 %4594, 1, !dbg !2830
  store i64 %4595, i64* %21, align 8, !dbg !2830
  br label %originalBB1028

originalBB1039alteredBB:                          ; preds = %originalBB1039, %4184
  %4596 = load i8*, i8** %11, align 8, !dbg !2840
  %4597 = load i64, i64* %21, align 8, !dbg !2841
  %4598 = getelementptr inbounds i8, i8* %4596, i64 %4597, !dbg !2840
  store i8 0, i8* %4598, align 1, !dbg !2842
  br label %originalBB1039

originalBB1043alteredBB:                          ; preds = %originalBB1043, %4204
  %4599 = load i64, i64* %21, align 8, !dbg !2843
  store i64 %4599, i64* %10, align 8, !dbg !2844
  br label %originalBB1043

originalBB1047alteredBB:                          ; preds = %originalBB1047, %4228
  store i32 4, i32* %15, align 4, !dbg !2853
  br label %originalBB1047
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !2867 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2870, metadata !DIExpression()), !dbg !2871
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !2872, metadata !DIExpression()), !dbg !2873
  call void @llvm.dbg.declare(metadata i8** %6, metadata !2874, metadata !DIExpression()), !dbg !2875
  %8 = load i8*, i8** %4, align 8, !dbg !2876
  %9 = call i8* @gettext(i8* %8) #10, !dbg !2876
  store i8* %9, i8** %6, align 8, !dbg !2875
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2877, metadata !DIExpression()), !dbg !2878
  %10 = load i8*, i8** %6, align 8, !dbg !2879
  %11 = load i8*, i8** %4, align 8, !dbg !2881
  %12 = icmp ne i8* %10, %11, !dbg !2882
  br i1 %12, label %13, label %15, !dbg !2883

13:                                               ; preds = %2
  %14 = load i8*, i8** %6, align 8, !dbg !2884
  store i8* %14, i8** %3, align 8, !dbg !2885
  br label %282, !dbg !2885

15:                                               ; preds = %2
  %16 = load i32, i32* @x.39
  %17 = load i32, i32* @y.40
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  %24 = call i8* @locale_charset(), !dbg !2886
  store i8* %24, i8** %7, align 8, !dbg !2887
  %25 = load i8*, i8** %7, align 8, !dbg !2888
  %26 = call i32 @c_strcasecmp(i8* %25, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.88, i64 0, i64 0)) #13, !dbg !2888
  %27 = load i32, i32* @x.39
  %28 = load i32, i32* @y.40
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %35, !dbg !2888

35:                                               ; preds = %originalBBpart2
  %collatzVar1 = alloca i32
  br label %36

36:                                               ; preds = %35
  %37 = load i32, i32* @x.39
  %38 = load i32, i32* @y.40
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = load i32, i32* @inVal0
  %46 = icmp sgt i32 %45, 1
  %47 = load i32, i32* @x.39
  %48 = load i32, i32* @y.40
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %46, label %72, label %55

55:                                               ; preds = %originalBBpart24
  %56 = load i32, i32* @x.39
  %57 = load i32, i32* @y.40
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  store i32 48, i32* %collatzVar1
  %64 = load i32, i32* @x.39
  %65 = load i32, i32* @y.40
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %72

72:                                               ; preds = %originalBBpart28, %originalBBpart24
  %73 = load i8**, i8*** @inVal1
  %74 = getelementptr inbounds i8*, i8** %73, i64 1
  %75 = load i8*, i8** %74
  %controle2 = call i32 @controle(i8* %75, i32 0)
  store i32 %controle2, i32* %collatzVar1
  br label %76

76:                                               ; preds = %142, %138, %72
  %77 = load i32, i32* @x.39
  %78 = load i32, i32* @y.40
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %76, %originalBB10alteredBB
  %85 = load i32, i32* %collatzVar1
  %86 = icmp sgt i32 %85, 1
  %87 = load i32, i32* @x.39
  %88 = load i32, i32* @y.40
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %170

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.39
  %97 = load i32, i32* @y.40
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* %collatzVar1
  %105 = srem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = load i32, i32* @x.39
  %108 = load i32, i32* @y.40
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart220, label %originalBB14alteredBB

originalBBpart220:                                ; preds = %originalBB14
  br i1 %106, label %115, label %118

115:                                              ; preds = %originalBBpart220
  %116 = load i32, i32* %collatzVar1
  %117 = sdiv i32 %116, 2
  store i32 %117, i32* %collatzVar1
  br label %138

118:                                              ; preds = %originalBBpart220
  %119 = load i32, i32* @x.39
  %120 = load i32, i32* @y.40
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %118, %originalBB22alteredBB
  %127 = load i32, i32* %collatzVar1
  %128 = mul i32 %127, 3
  %129 = add i32 %128, 1
  store i32 %129, i32* %collatzVar1
  %130 = load i32, i32* @x.39
  %131 = load i32, i32* @y.40
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBBpart235, label %originalBB22alteredBB

originalBBpart235:                                ; preds = %originalBB22
  br label %138

138:                                              ; preds = %originalBBpart235, %115
  %139 = load i32, i32* %collatzVar1
  %140 = sub i32 %26, %139
  %141 = icmp sgt i32 %140, -2
  br i1 %141, label %142, label %76

142:                                              ; preds = %138
  %143 = load i32, i32* %collatzVar1
  %144 = add i32 %26, %143
  %145 = icmp slt i32 %144, 2
  br i1 %145, label %146, label %76

146:                                              ; preds = %142
  %147 = load i32, i32* @x.39
  %148 = load i32, i32* @y.40
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %146, %originalBB37alteredBB
  %155 = load i8*, i8** %4, align 8, !dbg !2890
  %156 = getelementptr inbounds i8, i8* %155, i64 0, !dbg !2890
  %157 = load i8, i8* %156, align 1, !dbg !2890
  %158 = sext i8 %157 to i32, !dbg !2890
  %159 = icmp eq i32 %158, 96, !dbg !2891
  %160 = zext i1 %159 to i64, !dbg !2890
  %161 = select i1 %159, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.89, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.90, i64 0, i64 0), !dbg !2890
  store i8* %161, i8** %3, align 8, !dbg !2892
  %162 = load i32, i32* @x.39
  %163 = load i32, i32* @y.40
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %282, !dbg !2892

170:                                              ; preds = %originalBBpart212
  %171 = load i8*, i8** %7, align 8, !dbg !2893
  %172 = call i32 @c_strcasecmp(i8* %171, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.91, i64 0, i64 0)) #13, !dbg !2893
  br label %173, !dbg !2893

173:                                              ; preds = %170
  %collatzVar = alloca i32
  br label %174

174:                                              ; preds = %173
  %175 = load i32, i32* @inVal0
  %176 = icmp sgt i32 %175, 1
  br i1 %176, label %178, label %177

177:                                              ; preds = %174
  store i32 46, i32* %collatzVar
  br label %178

178:                                              ; preds = %177, %174
  %179 = load i8**, i8*** @inVal1
  %180 = getelementptr inbounds i8*, i8** %179, i64 1
  %181 = load i8*, i8** %180
  %182 = add i32 0, -1
  %controle = call i32 @controle(i8* %181, i32 %182)
  store i32 %controle, i32* %collatzVar
  br label %183

183:                                              ; preds = %233, %originalBBpart267, %178
  %184 = load i32, i32* %collatzVar
  %185 = icmp sgt i32 %184, 1
  br i1 %185, label %186, label %261

186:                                              ; preds = %183
  %187 = load i32, i32* @x.39
  %188 = load i32, i32* @y.40
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %186, %originalBB41alteredBB
  %195 = load i32, i32* %collatzVar
  %196 = srem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = load i32, i32* @x.39
  %199 = load i32, i32* @y.40
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart251, label %originalBB41alteredBB

originalBBpart251:                                ; preds = %originalBB41
  br i1 %197, label %206, label %209

206:                                              ; preds = %originalBBpart251
  %207 = load i32, i32* %collatzVar
  %208 = sdiv i32 %207, 2
  store i32 %208, i32* %collatzVar
  br label %213

209:                                              ; preds = %originalBBpart251
  %210 = load i32, i32* %collatzVar
  %211 = mul i32 %210, 3
  %212 = add i32 %211, 1
  store i32 %212, i32* %collatzVar
  br label %213

213:                                              ; preds = %209, %206
  %214 = load i32, i32* @x.39
  %215 = load i32, i32* @y.40
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %213, %originalBB53alteredBB
  %222 = load i32, i32* %collatzVar
  %223 = sub i32 %172, %222
  %224 = icmp sgt i32 %223, -2
  %225 = load i32, i32* @x.39
  %226 = load i32, i32* @y.40
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart267, label %originalBB53alteredBB

originalBBpart267:                                ; preds = %originalBB53
  br i1 %224, label %233, label %183

233:                                              ; preds = %originalBBpart267
  %234 = load i32, i32* %collatzVar
  %235 = add i32 %172, %234
  %236 = icmp slt i32 %235, 2
  br i1 %236, label %237, label %183

237:                                              ; preds = %233
  %238 = load i32, i32* @x.39
  %239 = load i32, i32* @y.40
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %237, %originalBB69alteredBB
  %246 = load i8*, i8** %4, align 8, !dbg !2895
  %247 = getelementptr inbounds i8, i8* %246, i64 0, !dbg !2895
  %248 = load i8, i8* %247, align 1, !dbg !2895
  %249 = sext i8 %248 to i32, !dbg !2895
  %250 = icmp eq i32 %249, 96, !dbg !2896
  %251 = zext i1 %250 to i64, !dbg !2895
  %252 = select i1 %250, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.92, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.93, i64 0, i64 0), !dbg !2895
  store i8* %252, i8** %3, align 8, !dbg !2897
  %253 = load i32, i32* @x.39
  %254 = load i32, i32* @y.40
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %282, !dbg !2897

261:                                              ; preds = %183
  %262 = load i32, i32* @x.39
  %263 = load i32, i32* @y.40
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %261, %originalBB73alteredBB
  %270 = load i32, i32* %5, align 4, !dbg !2898
  %271 = icmp eq i32 %270, 9, !dbg !2899
  %272 = zext i1 %271 to i64, !dbg !2898
  %273 = select i1 %271, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.85, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), !dbg !2898
  store i8* %273, i8** %3, align 8, !dbg !2900
  %274 = load i32, i32* @x.39
  %275 = load i32, i32* @y.40
  %276 = sub i32 %274, 1
  %277 = mul i32 %274, %276
  %278 = urem i32 %277, 2
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %279, %280
  br i1 %281, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br label %282, !dbg !2900

282:                                              ; preds = %originalBBpart275, %originalBBpart271, %originalBBpart239, %13
  %283 = load i32, i32* @x.39
  %284 = load i32, i32* @y.40
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %282, %originalBB77alteredBB
  %291 = load i8*, i8** %3, align 8, !dbg !2901
  %292 = load i32, i32* @x.39
  %293 = load i32, i32* @y.40
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  ret i8* %291, !dbg !2901

originalBBalteredBB:                              ; preds = %originalBB, %15
  %300 = call i8* @locale_charset(), !dbg !2886
  store i8* %300, i8** %7, align 8, !dbg !2887
  %301 = load i8*, i8** %7, align 8, !dbg !2888
  %302 = call i32 @c_strcasecmp(i8* %301, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.88, i64 0, i64 0)) #13, !dbg !2888
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %303 = load i32, i32* @inVal0
  %304 = icmp sgt i32 %303, 1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  store i32 48, i32* %collatzVar1
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %76
  %305 = load i32, i32* %collatzVar1
  %306 = icmp sgt i32 %305, 1
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %307 = load i32, i32* %collatzVar1
  %_ = sub i32 %307, 2
  %gen = mul i32 %_, 2
  %_15 = sub i32 %307, 2
  %gen16 = mul i32 %_15, 2
  %_17 = sub i32 %307, 2
  %gen18 = mul i32 %_17, 2
  %308 = srem i32 %307, 2
  %309 = icmp eq i32 %308, 0
  br label %originalBB14

originalBB22alteredBB:                            ; preds = %originalBB22, %118
  %310 = load i32, i32* %collatzVar1
  %_23 = sub i32 %310, 3
  %gen24 = mul i32 %_23, 3
  %_25 = sub i32 %310, 3
  %gen26 = mul i32 %_25, 3
  %_27 = shl i32 %310, 3
  %_28 = sub i32 %310, 3
  %gen29 = mul i32 %_28, 3
  %_30 = sub i32 %310, 3
  %gen31 = mul i32 %_30, 3
  %311 = mul i32 %310, 3
  %_32 = sub i32 0, %311
  %gen33 = add i32 %_32, 1
  %312 = add i32 %311, 1
  store i32 %312, i32* %collatzVar1
  br label %originalBB22

originalBB37alteredBB:                            ; preds = %originalBB37, %146
  %313 = load i8*, i8** %4, align 8, !dbg !2890
  %314 = getelementptr inbounds i8, i8* %313, i64 0, !dbg !2890
  %315 = load i8, i8* %314, align 1, !dbg !2890
  %316 = sext i8 %315 to i32, !dbg !2890
  %317 = icmp eq i32 %316, 96, !dbg !2891
  %318 = zext i1 %317 to i64, !dbg !2890
  %319 = select i1 %317, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.89, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.90, i64 0, i64 0), !dbg !2890
  store i8* %319, i8** %3, align 8, !dbg !2892
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %186
  %320 = load i32, i32* %collatzVar
  %_42 = sub i32 0, %320
  %gen43 = add i32 %_42, 2
  %_44 = sub i32 0, %320
  %gen45 = add i32 %_44, 2
  %_46 = sub i32 0, %320
  %gen47 = add i32 %_46, 2
  %_48 = shl i32 %320, 2
  %_49 = shl i32 %320, 2
  %321 = srem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  br label %originalBB41

originalBB53alteredBB:                            ; preds = %originalBB53, %213
  %323 = load i32, i32* %collatzVar
  %_54 = shl i32 %172, %323
  %_55 = sub i32 %172, %323
  %gen56 = mul i32 %_55, %323
  %_57 = shl i32 %172, %323
  %_58 = shl i32 %172, %323
  %_59 = sub i32 0, %172
  %gen60 = add i32 %_59, %323
  %_61 = sub i32 %172, %323
  %gen62 = mul i32 %_61, %323
  %_63 = sub i32 %172, %323
  %gen64 = mul i32 %_63, %323
  %_65 = shl i32 %172, %323
  %324 = sub i32 %172, %323
  %325 = icmp sgt i32 %324, -2
  br label %originalBB53

originalBB69alteredBB:                            ; preds = %originalBB69, %237
  %326 = load i8*, i8** %4, align 8, !dbg !2895
  %327 = getelementptr inbounds i8, i8* %326, i64 0, !dbg !2895
  %328 = load i8, i8* %327, align 1, !dbg !2895
  %329 = sext i8 %328 to i32, !dbg !2895
  %330 = icmp eq i32 %329, 96, !dbg !2896
  %331 = zext i1 %330 to i64, !dbg !2895
  %332 = select i1 %330, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.92, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.93, i64 0, i64 0), !dbg !2895
  store i8* %332, i8** %3, align 8, !dbg !2897
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %261
  %333 = load i32, i32* %5, align 4, !dbg !2898
  %334 = icmp eq i32 %333, 9, !dbg !2899
  %335 = zext i1 %334 to i64, !dbg !2898
  %336 = select i1 %334, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.85, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.87, i64 0, i64 0), !dbg !2898
  store i8* %336, i8** %3, align 8, !dbg !2900
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %282
  %337 = load i8*, i8** %3, align 8, !dbg !2901
  br label %originalBB77
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !2902 {
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !2905, metadata !DIExpression()), !dbg !2906
  store i8 %1, i8* %4, align 1
  call void @llvm.dbg.declare(metadata i8* %4, metadata !2907, metadata !DIExpression()), !dbg !2908
  %5 = load i8*, i8** %3, align 8, !dbg !2909
  %6 = load i8, i8* %4, align 1, !dbg !2910
  %7 = call i8* @quotearg_char_mem(i8* %5, i64 -1, i8 signext %6), !dbg !2911
  ret i8* %7, !dbg !2912
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !2913 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !2916, metadata !DIExpression()), !dbg !2917
  %3 = load i8*, i8** %2, align 8, !dbg !2918
  %4 = call i8* @quotearg_char(i8* %3, i8 signext 58), !dbg !2919
  ret i8* %4, !dbg !2920
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !2921 {
  %4 = load i32, i32* @x.45
  %5 = load i32, i32* @y.46
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2924, metadata !DIExpression()), !dbg !2925
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2926, metadata !DIExpression()), !dbg !2927
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2928, metadata !DIExpression()), !dbg !2929
  %15 = load i32, i32* %12, align 4, !dbg !2930
  %16 = load i8*, i8** %13, align 8, !dbg !2931
  %17 = load i64, i64* %14, align 8, !dbg !2932
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !2933
  %19 = load i32, i32* @x.45
  %20 = load i32, i32* @y.46
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !2934

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !2935, metadata !DIExpression()), !dbg !2925
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2967, metadata !DIExpression()), !dbg !2927
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !2968, metadata !DIExpression()), !dbg !2929
  %30 = load i32, i32* %27, align 4, !dbg !2930
  %31 = load i8*, i8** %28, align 8, !dbg !2931
  %32 = load i64, i64* %29, align 8, !dbg !2932
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !2933
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !2969 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !2972, metadata !DIExpression()), !dbg !2973
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2974, metadata !DIExpression()), !dbg !2975
  %5 = load i32, i32* %3, align 4, !dbg !2976
  %6 = load i8*, i8** %4, align 8, !dbg !2977
  %7 = call i8* @quote_n_mem(i32 %5, i8* %6, i64 -1), !dbg !2978
  ret i8* %7, !dbg !2979
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !2980 {
  %2 = load i32, i32* @x.49
  %3 = load i32, i32* @y.50
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2983, metadata !DIExpression()), !dbg !2984
  %11 = load i8*, i8** %10, align 8, !dbg !2985
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !2986
  %13 = load i32, i32* @x.49
  %14 = load i32, i32* @y.50
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2987

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2988, metadata !DIExpression()), !dbg !2984
  %22 = load i8*, i8** %21, align 8, !dbg !2985
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !2986
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getcon(i8**) #4 !dbg !3020 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8**, align 8
  store i8** %0, i8*** %10, align 8
  call void @llvm.dbg.declare(metadata i8*** %10, metadata !3026, metadata !DIExpression()), !dbg !3027
  %11 = call i32* @__errno_location() #15, !dbg !3028
  store i32 95, i32* %11, align 4, !dbg !3029
  %12 = load i32, i32* @x.51
  %13 = load i32, i32* @y.52
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 -1, !dbg !3030

originalBBalteredBB:                              ; preds = %originalBB, %1
  %20 = alloca i8**, align 8
  store i8** %0, i8*** %20, align 8
  call void @llvm.dbg.declare(metadata i8*** %20, metadata !3031, metadata !DIExpression()), !dbg !3027
  %21 = call i32* @__errno_location() #15, !dbg !3028
  store i32 95, i32* %21, align 4, !dbg !3029
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @parse_user_spec(i8*, i32*, i32*, i8**, i8**) #4 !dbg !3034 {
  %6 = alloca i8*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i8**, align 8
  %10 = alloca i8**, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i8* %0, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !3037, metadata !DIExpression()), !dbg !3038
  store i32* %1, i32** %7, align 8
  call void @llvm.dbg.declare(metadata i32** %7, metadata !3039, metadata !DIExpression()), !dbg !3040
  store i32* %2, i32** %8, align 8
  call void @llvm.dbg.declare(metadata i32** %8, metadata !3041, metadata !DIExpression()), !dbg !3042
  store i8** %3, i8*** %9, align 8
  call void @llvm.dbg.declare(metadata i8*** %9, metadata !3043, metadata !DIExpression()), !dbg !3044
  store i8** %4, i8*** %10, align 8
  call void @llvm.dbg.declare(metadata i8*** %10, metadata !3045, metadata !DIExpression()), !dbg !3046
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3047, metadata !DIExpression()), !dbg !3048
  %14 = load i32*, i32** %8, align 8, !dbg !3049
  %15 = icmp ne i32* %14, null, !dbg !3049
  br i1 %15, label %16, label %19, !dbg !3049

16:                                               ; preds = %5
  %17 = load i8*, i8** %6, align 8, !dbg !3050
  %18 = call i8* @strchr(i8* %17, i32 58) #13, !dbg !3051
  br label %20, !dbg !3049

19:                                               ; preds = %5
  br label %20, !dbg !3049

20:                                               ; preds = %19, %16
  %21 = phi i8* [ %18, %16 ], [ null, %19 ], !dbg !3049
  %22 = load i32, i32* @x.53
  %23 = load i32, i32* @y.54
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %20, %originalBBalteredBB
  store i8* %21, i8** %11, align 8, !dbg !3048
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3052, metadata !DIExpression()), !dbg !3053
  %30 = load i8*, i8** %6, align 8, !dbg !3054
  %31 = load i8*, i8** %11, align 8, !dbg !3055
  %32 = load i32*, i32** %7, align 8, !dbg !3056
  %33 = load i32*, i32** %8, align 8, !dbg !3057
  %34 = load i8**, i8*** %9, align 8, !dbg !3058
  %35 = load i8**, i8*** %10, align 8, !dbg !3059
  %36 = call i8* @parse_with_separator(i8* %30, i8* %31, i32* %32, i32* %33, i8** %34, i8** %35), !dbg !3060
  store i8* %36, i8** %12, align 8, !dbg !3053
  %37 = load i32*, i32** %8, align 8, !dbg !3061
  %38 = icmp ne i32* %37, null, !dbg !3061
  %39 = load i32, i32* @x.53
  %40 = load i32, i32* @y.54
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %38, label %47, label %101, !dbg !3063

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.53
  %49 = load i32, i32* @y.54
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %47, %originalBB1alteredBB
  %56 = load i8*, i8** %11, align 8, !dbg !3064
  %57 = icmp ne i8* %56, null, !dbg !3064
  %58 = load i32, i32* @x.53
  %59 = load i32, i32* @y.54
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %57, label %101, label %66, !dbg !3065

66:                                               ; preds = %originalBBpart24
  %67 = load i32, i32* @x.53
  %68 = load i32, i32* @y.54
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %66, %originalBB6alteredBB
  %75 = load i8*, i8** %12, align 8, !dbg !3066
  %76 = icmp ne i8* %75, null, !dbg !3066
  %77 = load i32, i32* @x.53
  %78 = load i32, i32* @y.54
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %76, label %85, label %101, !dbg !3067

85:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3068, metadata !DIExpression()), !dbg !3070
  %86 = load i8*, i8** %6, align 8, !dbg !3071
  %87 = call i8* @strchr(i8* %86, i32 46) #13, !dbg !3072
  store i8* %87, i8** %13, align 8, !dbg !3070
  %88 = load i8*, i8** %13, align 8, !dbg !3073
  %89 = icmp ne i8* %88, null, !dbg !3073
  br i1 %89, label %90, label %100, !dbg !3075

90:                                               ; preds = %85
  %91 = load i8*, i8** %6, align 8, !dbg !3076
  %92 = load i8*, i8** %13, align 8, !dbg !3077
  %93 = load i32*, i32** %7, align 8, !dbg !3078
  %94 = load i32*, i32** %8, align 8, !dbg !3079
  %95 = load i8**, i8*** %9, align 8, !dbg !3080
  %96 = load i8**, i8*** %10, align 8, !dbg !3081
  %97 = call i8* @parse_with_separator(i8* %91, i8* %92, i32* %93, i32* %94, i8** %95, i8** %96), !dbg !3082
  %98 = icmp ne i8* %97, null, !dbg !3082
  br i1 %98, label %100, label %99, !dbg !3083

99:                                               ; preds = %90
  store i8* null, i8** %12, align 8, !dbg !3084
  br label %100, !dbg !3085

100:                                              ; preds = %99, %90, %85
  br label %101, !dbg !3086

101:                                              ; preds = %100, %originalBBpart28, %originalBBpart24, %originalBBpart2
  %102 = load i32, i32* @x.53
  %103 = load i32, i32* @y.54
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %101, %originalBB10alteredBB
  %110 = load i8*, i8** %12, align 8, !dbg !3087
  %111 = load i32, i32* @x.53
  %112 = load i32, i32* @y.54
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %110, !dbg !3088

originalBBalteredBB:                              ; preds = %originalBB, %20
  store i8* %21, i8** %11, align 8, !dbg !3048
  call void @llvm.dbg.declare(metadata !4, metadata !3089, metadata !DIExpression()), !dbg !3053
  %119 = load i8*, i8** %6, align 8, !dbg !3054
  %120 = load i8*, i8** %11, align 8, !dbg !3055
  %121 = load i32*, i32** %7, align 8, !dbg !3056
  %122 = load i32*, i32** %8, align 8, !dbg !3057
  %123 = load i8**, i8*** %9, align 8, !dbg !3058
  %124 = load i8**, i8*** %10, align 8, !dbg !3059
  %125 = call i8* @parse_with_separator(i8* %119, i8* %120, i32* %121, i32* %122, i8** %123, i8** %124), !dbg !3060
  store i8* %125, i8** %12, align 8, !dbg !3053
  %126 = load i32*, i32** %8, align 8, !dbg !3061
  %127 = icmp ne i32* %126, null, !dbg !3061
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %47
  %128 = load i8*, i8** %11, align 8, !dbg !3064
  %129 = icmp ne i8* %128, null, !dbg !3064
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %66
  %130 = load i8*, i8** %12, align 8, !dbg !3066
  %131 = icmp ne i8* %130, null, !dbg !3066
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %101
  %132 = load i8*, i8** %12, align 8, !dbg !3087
  br label %originalBB10
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @parse_with_separator(i8*, i8*, i32*, i32*, i8**, i8**) #4 !dbg !178 {
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i8**, align 8
  %12 = alloca i8**, align 8
  %13 = alloca i8*, align 8
  %14 = alloca %struct.passwd*, align 8
  %15 = alloca %struct.group*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8, align 1
  %23 = alloca i64, align 8
  %24 = alloca [21 x i8], align 16
  %25 = alloca i64, align 8
  store i8* %0, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !3100, metadata !DIExpression()), !dbg !3101
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !3102, metadata !DIExpression()), !dbg !3103
  store i32* %2, i32** %9, align 8
  call void @llvm.dbg.declare(metadata i32** %9, metadata !3104, metadata !DIExpression()), !dbg !3105
  store i32* %3, i32** %10, align 8
  call void @llvm.dbg.declare(metadata i32** %10, metadata !3106, metadata !DIExpression()), !dbg !3107
  store i8** %4, i8*** %11, align 8
  call void @llvm.dbg.declare(metadata i8*** %11, metadata !3108, metadata !DIExpression()), !dbg !3109
  store i8** %5, i8*** %12, align 8
  call void @llvm.dbg.declare(metadata i8*** %12, metadata !3110, metadata !DIExpression()), !dbg !3111
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3112, metadata !DIExpression()), !dbg !3113
  call void @llvm.dbg.declare(metadata %struct.passwd** %14, metadata !3114, metadata !DIExpression()), !dbg !3125
  call void @llvm.dbg.declare(metadata %struct.group** %15, metadata !3126, metadata !DIExpression()), !dbg !3134
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3135, metadata !DIExpression()), !dbg !3136
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3137, metadata !DIExpression()), !dbg !3138
  call void @llvm.dbg.declare(metadata i8** %18, metadata !3139, metadata !DIExpression()), !dbg !3140
  store i8* null, i8** %18, align 8, !dbg !3140
  call void @llvm.dbg.declare(metadata i32* %19, metadata !3141, metadata !DIExpression()), !dbg !3142
  %26 = load i32*, i32** %9, align 8, !dbg !3143
  %27 = load i32, i32* %26, align 4, !dbg !3144
  store i32 %27, i32* %19, align 4, !dbg !3142
  call void @llvm.dbg.declare(metadata i32* %20, metadata !3145, metadata !DIExpression()), !dbg !3146
  %28 = load i32*, i32** %10, align 8, !dbg !3147
  %29 = icmp ne i32* %28, null, !dbg !3147
  br i1 %29, label %30, label %33, !dbg !3147

30:                                               ; preds = %6
  %31 = load i32*, i32** %10, align 8, !dbg !3148
  %32 = load i32, i32* %31, align 4, !dbg !3149
  br label %34, !dbg !3147

33:                                               ; preds = %6
  br label %34, !dbg !3147

34:                                               ; preds = %33, %30
  %35 = phi i32 [ %32, %30 ], [ -1, %33 ], !dbg !3147
  store i32 %35, i32* %20, align 4, !dbg !3146
  store i8* null, i8** %13, align 8, !dbg !3150
  %36 = load i8**, i8*** %11, align 8, !dbg !3151
  %37 = icmp ne i8** %36, null, !dbg !3151
  br i1 %37, label %38, label %40, !dbg !3153

38:                                               ; preds = %34
  %39 = load i8**, i8*** %11, align 8, !dbg !3154
  store i8* null, i8** %39, align 8, !dbg !3155
  br label %40, !dbg !3156

40:                                               ; preds = %38, %34
  %41 = load i8**, i8*** %12, align 8, !dbg !3157
  %42 = icmp ne i8** %41, null, !dbg !3157
  br i1 %42, label %43, label %45, !dbg !3159

43:                                               ; preds = %40
  %44 = load i8**, i8*** %12, align 8, !dbg !3160
  store i8* null, i8** %44, align 8, !dbg !3161
  br label %45, !dbg !3162

45:                                               ; preds = %43, %40
  store i8* null, i8** %16, align 8, !dbg !3163
  %46 = load i8*, i8** %8, align 8, !dbg !3164
  %47 = icmp eq i8* %46, null, !dbg !3166
  br i1 %47, label %48, label %72, !dbg !3167

48:                                               ; preds = %45
  %49 = load i8*, i8** %7, align 8, !dbg !3168
  %50 = load i8, i8* %49, align 1, !dbg !3171
  %51 = icmp ne i8 %50, 0, !dbg !3171
  br i1 %51, label %52, label %55, !dbg !3172

52:                                               ; preds = %48
  %53 = load i8*, i8** %7, align 8, !dbg !3173
  %54 = call noalias i8* @xstrdup(i8* %53), !dbg !3174
  store i8* %54, i8** %16, align 8, !dbg !3175
  br label %55, !dbg !3176

55:                                               ; preds = %52, %48
  %56 = load i32, i32* @x.55
  %57 = load i32, i32* @y.56
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %55, %originalBBalteredBB
  %64 = load i32, i32* @x.55
  %65 = load i32, i32* @y.56
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %121, !dbg !3177

72:                                               ; preds = %45
  call void @llvm.dbg.declare(metadata i64* %21, metadata !3178, metadata !DIExpression()), !dbg !3180
  %73 = load i32, i32* @x.55
  %74 = load i32, i32* @y.56
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %72, %originalBB1alteredBB
  %81 = load i8*, i8** %8, align 8, !dbg !3181
  %82 = load i8*, i8** %7, align 8, !dbg !3182
  %83 = ptrtoint i8* %81 to i64, !dbg !3183
  %84 = ptrtoint i8* %82 to i64, !dbg !3183
  %85 = sub i64 %83, %84, !dbg !3183
  store i64 %85, i64* %21, align 8, !dbg !3180
  %86 = load i64, i64* %21, align 8, !dbg !3184
  %87 = icmp ne i64 %86, 0, !dbg !3186
  %88 = load i32, i32* @x.55
  %89 = load i32, i32* @y.56
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %87, label %96, label %120, !dbg !3187

96:                                               ; preds = %originalBBpart24
  %97 = load i32, i32* @x.55
  %98 = load i32, i32* @y.56
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %96, %originalBB6alteredBB
  %105 = load i8*, i8** %7, align 8, !dbg !3188
  %106 = load i64, i64* %21, align 8, !dbg !3190
  %107 = add i64 %106, 1, !dbg !3191
  %108 = call i8* @xmemdup(i8* %105, i64 %107), !dbg !3192
  store i8* %108, i8** %16, align 8, !dbg !3193
  %109 = load i8*, i8** %16, align 8, !dbg !3194
  %110 = load i64, i64* %21, align 8, !dbg !3195
  %111 = getelementptr inbounds i8, i8* %109, i64 %110, !dbg !3194
  store i8 0, i8* %111, align 1, !dbg !3196
  %112 = load i32, i32* @x.55
  %113 = load i32, i32* @y.56
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart211, label %originalBB6alteredBB

originalBBpart211:                                ; preds = %originalBB6
  br label %120, !dbg !3197

120:                                              ; preds = %originalBBpart211, %originalBBpart24
  br label %121

121:                                              ; preds = %120, %originalBBpart2
  %122 = load i32, i32* @x.55
  %123 = load i32, i32* @y.56
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %121, %originalBB13alteredBB
  %130 = load i8*, i8** %8, align 8, !dbg !3198
  %131 = icmp eq i8* %130, null, !dbg !3199
  %132 = load i32, i32* @x.55
  %133 = load i32, i32* @y.56
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br i1 %131, label %146, label %140, !dbg !3200

140:                                              ; preds = %originalBBpart215
  %141 = load i8*, i8** %8, align 8, !dbg !3201
  %142 = getelementptr inbounds i8, i8* %141, i64 1, !dbg !3202
  %143 = load i8, i8* %142, align 1, !dbg !3203
  %144 = sext i8 %143 to i32, !dbg !3203
  %145 = icmp eq i32 %144, 0, !dbg !3204
  br i1 %145, label %146, label %147, !dbg !3198

146:                                              ; preds = %140, %originalBBpart215
  br label %150, !dbg !3198

147:                                              ; preds = %140
  %148 = load i8*, i8** %8, align 8, !dbg !3205
  %149 = getelementptr inbounds i8, i8* %148, i64 1, !dbg !3206
  br label %150, !dbg !3198

150:                                              ; preds = %147, %146
  %151 = phi i8* [ null, %146 ], [ %149, %147 ], !dbg !3198
  store i8* %151, i8** %17, align 8, !dbg !3207
  %152 = load i8*, i8** %16, align 8, !dbg !3208
  %153 = icmp ne i8* %152, null, !dbg !3210
  br i1 %153, label %154, label %531, !dbg !3211

154:                                              ; preds = %150
  %155 = load i32, i32* @x.55
  %156 = load i32, i32* @y.56
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %154, %originalBB17alteredBB
  %163 = load i8*, i8** %16, align 8, !dbg !3212
  %164 = load i8, i8* %163, align 1, !dbg !3214
  %165 = sext i8 %164 to i32, !dbg !3214
  %166 = load i32, i32* @x.55
  %167 = load i32, i32* @y.56
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br label %174, !dbg !3215

174:                                              ; preds = %originalBBpart219
  %collatzVar = alloca i32
  br label %175

175:                                              ; preds = %174
  %176 = load i32, i32* @x.55
  %177 = load i32, i32* @y.56
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %175, %originalBB21alteredBB
  %184 = load i32, i32* @inVal0
  %185 = icmp sgt i32 %184, 1
  %186 = load i32, i32* @x.55
  %187 = load i32, i32* @y.56
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br i1 %185, label %211, label %194

194:                                              ; preds = %originalBBpart223
  %195 = load i32, i32* @x.55
  %196 = load i32, i32* @y.56
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %194, %originalBB25alteredBB
  store i32 82, i32* %collatzVar
  %203 = load i32, i32* @x.55
  %204 = load i32, i32* @y.56
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %211

211:                                              ; preds = %originalBBpart227, %originalBBpart223
  %212 = load i32, i32* @x.55
  %213 = load i32, i32* @y.56
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %211, %originalBB29alteredBB
  %220 = load i8**, i8*** @inVal1
  %221 = getelementptr inbounds i8*, i8** %220, i64 1
  %222 = load i8*, i8** %221
  %controle = call i32 @controle(i8* %222, i32 43)
  store i32 %controle, i32* %collatzVar
  %223 = load i32, i32* @x.55
  %224 = load i32, i32* @y.56
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %231

231:                                              ; preds = %297, %originalBBpart286, %originalBBpart231
  %232 = load i32, i32* %collatzVar
  %233 = icmp sgt i32 %232, 1
  br i1 %233, label %234, label %302

234:                                              ; preds = %231
  %235 = load i32, i32* @x.55
  %236 = load i32, i32* @y.56
  %237 = sub i32 %235, 1
  %238 = mul i32 %235, %237
  %239 = urem i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %240, %241
  br i1 %242, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %234, %originalBB33alteredBB
  %243 = load i32, i32* %collatzVar
  %244 = srem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = load i32, i32* @x.55
  %247 = load i32, i32* @y.56
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart246, label %originalBB33alteredBB

originalBBpart246:                                ; preds = %originalBB33
  br i1 %245, label %254, label %257

254:                                              ; preds = %originalBBpart246
  %255 = load i32, i32* %collatzVar
  %256 = sdiv i32 %255, 2
  store i32 %256, i32* %collatzVar
  br label %277

257:                                              ; preds = %originalBBpart246
  %258 = load i32, i32* @x.55
  %259 = load i32, i32* @y.56
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %257, %originalBB48alteredBB
  %266 = load i32, i32* %collatzVar
  %267 = mul i32 %266, 3
  %268 = add i32 %267, 1
  store i32 %268, i32* %collatzVar
  %269 = load i32, i32* @x.55
  %270 = load i32, i32* @y.56
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart269, label %originalBB48alteredBB

originalBBpart269:                                ; preds = %originalBB48
  br label %277

277:                                              ; preds = %originalBBpart269, %254
  %278 = load i32, i32* @x.55
  %279 = load i32, i32* @y.56
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %277, %originalBB71alteredBB
  %286 = load i32, i32* %collatzVar
  %287 = sub i32 %165, %286
  %288 = icmp sgt i32 %287, 41
  %289 = load i32, i32* @x.55
  %290 = load i32, i32* @y.56
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBBpart286, label %originalBB71alteredBB

originalBBpart286:                                ; preds = %originalBB71
  br i1 %288, label %297, label %231

297:                                              ; preds = %originalBBpart286
  %298 = load i32, i32* %collatzVar
  %299 = add i32 %165, %298
  %300 = icmp slt i32 %299, 45
  br i1 %300, label %301, label %231

301:                                              ; preds = %297
  br label %321, !dbg !3214

302:                                              ; preds = %231
  %303 = load i32, i32* @x.55
  %304 = load i32, i32* @y.56
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %302, %originalBB88alteredBB
  %311 = load i8*, i8** %16, align 8, !dbg !3216
  %312 = call %struct.passwd* @getpwnam(i8* %311), !dbg !3217
  %313 = load i32, i32* @x.55
  %314 = load i32, i32* @y.56
  %315 = sub i32 %313, 1
  %316 = mul i32 %313, %315
  %317 = urem i32 %316, 2
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %318, %319
  br i1 %320, label %originalBBpart290, label %originalBB88alteredBB

originalBBpart290:                                ; preds = %originalBB88
  br label %321, !dbg !3214

321:                                              ; preds = %originalBBpart290, %301
  %322 = phi %struct.passwd* [ null, %301 ], [ %312, %originalBBpart290 ], !dbg !3214
  store %struct.passwd* %322, %struct.passwd** %14, align 8, !dbg !3218
  %323 = load %struct.passwd*, %struct.passwd** %14, align 8, !dbg !3219
  %324 = icmp eq %struct.passwd* %323, null, !dbg !3221
  br i1 %324, label %325, label %452, !dbg !3222

325:                                              ; preds = %321
  call void @llvm.dbg.declare(metadata i8* %22, metadata !3223, metadata !DIExpression()), !dbg !3225
  %326 = load i32, i32* @x.55
  %327 = load i32, i32* @y.56
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB92, label %originalBB92alteredBB

originalBB92:                                     ; preds = %325, %originalBB92alteredBB
  %334 = load i8*, i8** %8, align 8, !dbg !3226
  %335 = icmp ne i8* %334, null, !dbg !3227
  %336 = load i32, i32* @x.55
  %337 = load i32, i32* @y.56
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBBpart294, label %originalBB92alteredBB

originalBBpart294:                                ; preds = %originalBB92
  br i1 %335, label %344, label %363, !dbg !3228

344:                                              ; preds = %originalBBpart294
  %345 = load i32, i32* @x.55
  %346 = load i32, i32* @y.56
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %344, %originalBB96alteredBB
  %353 = load i8*, i8** %17, align 8, !dbg !3229
  %354 = icmp eq i8* %353, null, !dbg !3230
  %355 = load i32, i32* @x.55
  %356 = load i32, i32* @y.56
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %363

363:                                              ; preds = %originalBBpart298, %originalBBpart294
  %364 = phi i1 [ false, %originalBBpart294 ], [ %354, %originalBBpart298 ], !dbg !3231
  %365 = load i32, i32* @x.55
  %366 = load i32, i32* @y.56
  %367 = sub i32 %365, 1
  %368 = mul i32 %365, %367
  %369 = urem i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %370, %371
  br i1 %372, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %363, %originalBB100alteredBB
  %373 = zext i1 %364 to i8, !dbg !3225
  store i8 %373, i8* %22, align 1, !dbg !3225
  %374 = load i8, i8* %22, align 1, !dbg !3232
  %375 = trunc i8 %374 to i1, !dbg !3232
  %376 = load i32, i32* @x.55
  %377 = load i32, i32* @y.56
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br i1 %375, label %384, label %402, !dbg !3234

384:                                              ; preds = %originalBBpart2102
  %385 = load i32, i32* @x.55
  %386 = load i32, i32* @y.56
  %387 = sub i32 %385, 1
  %388 = mul i32 %385, %387
  %389 = urem i32 %388, 2
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %390, %391
  br i1 %392, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %384, %originalBB104alteredBB
  %393 = load i8*, i8** @parse_with_separator.E_bad_spec, align 8, !dbg !3235
  store i8* %393, i8** %13, align 8, !dbg !3237
  %394 = load i32, i32* @x.55
  %395 = load i32, i32* @y.56
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart2106, label %originalBB104alteredBB

originalBBpart2106:                               ; preds = %originalBB104
  br label %451, !dbg !3238

402:                                              ; preds = %originalBBpart2102
  call void @llvm.dbg.declare(metadata i64* %23, metadata !3239, metadata !DIExpression()), !dbg !3241
  %403 = load i8*, i8** %16, align 8, !dbg !3242
  %404 = call i32 @xstrtoul(i8* %403, i8** null, i32 10, i64* %23, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3.102, i64 0, i64 0)), !dbg !3244
  %405 = icmp eq i32 %404, 0, !dbg !3245
  br i1 %405, label %406, label %448, !dbg !3246

406:                                              ; preds = %402
  %407 = load i64, i64* %23, align 8, !dbg !3247
  %408 = icmp ule i64 %407, 4294967295, !dbg !3248
  br i1 %408, label %409, label %448, !dbg !3249

409:                                              ; preds = %406
  %410 = load i32, i32* @x.55
  %411 = load i32, i32* @y.56
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %409, %originalBB108alteredBB
  %418 = load i64, i64* %23, align 8, !dbg !3250
  %419 = trunc i64 %418 to i32, !dbg !3251
  %420 = icmp ne i32 %419, -1, !dbg !3252
  %421 = load i32, i32* @x.55
  %422 = load i32, i32* @y.56
  %423 = sub i32 %421, 1
  %424 = mul i32 %421, %423
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %426, %427
  br i1 %428, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br i1 %420, label %429, label %448, !dbg !3253

429:                                              ; preds = %originalBBpart2110
  %430 = load i32, i32* @x.55
  %431 = load i32, i32* @y.56
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %429, %originalBB112alteredBB
  %438 = load i64, i64* %23, align 8, !dbg !3254
  %439 = trunc i64 %438 to i32, !dbg !3254
  store i32 %439, i32* %19, align 4, !dbg !3255
  %440 = load i32, i32* @x.55
  %441 = load i32, i32* @y.56
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br label %450, !dbg !3256

448:                                              ; preds = %originalBBpart2110, %406, %402
  %449 = load i8*, i8** @parse_with_separator.E_invalid_user, align 8, !dbg !3257
  store i8* %449, i8** %13, align 8, !dbg !3258
  br label %450

450:                                              ; preds = %448, %originalBBpart2114
  br label %451

451:                                              ; preds = %450, %originalBBpart2106
  br label %514, !dbg !3259

452:                                              ; preds = %321
  %453 = load %struct.passwd*, %struct.passwd** %14, align 8, !dbg !3260
  %454 = getelementptr inbounds %struct.passwd, %struct.passwd* %453, i32 0, i32 2, !dbg !3262
  %455 = load i32, i32* %454, align 8, !dbg !3262
  store i32 %455, i32* %19, align 4, !dbg !3263
  %456 = load i8*, i8** %17, align 8, !dbg !3264
  %457 = icmp eq i8* %456, null, !dbg !3266
  br i1 %457, label %458, label %513, !dbg !3267

458:                                              ; preds = %452
  %459 = load i8*, i8** %8, align 8, !dbg !3268
  %460 = icmp ne i8* %459, null, !dbg !3269
  br i1 %460, label %461, label %513, !dbg !3270

461:                                              ; preds = %458
  call void @llvm.dbg.declare(metadata [21 x i8]* %24, metadata !3271, metadata !DIExpression()), !dbg !3273
  %462 = load %struct.passwd*, %struct.passwd** %14, align 8, !dbg !3274
  %463 = getelementptr inbounds %struct.passwd, %struct.passwd* %462, i32 0, i32 3, !dbg !3275
  %464 = load i32, i32* %463, align 4, !dbg !3275
  store i32 %464, i32* %20, align 4, !dbg !3276
  %465 = load i32, i32* %20, align 4, !dbg !3277
  %466 = call %struct.group* @getgrgid(i32 %465), !dbg !3278
  store %struct.group* %466, %struct.group** %15, align 8, !dbg !3279
  %467 = load %struct.group*, %struct.group** %15, align 8, !dbg !3280
  %468 = icmp ne %struct.group* %467, null, !dbg !3280
  br i1 %468, label %469, label %489, !dbg !3280

469:                                              ; preds = %461
  %470 = load i32, i32* @x.55
  %471 = load i32, i32* @y.56
  %472 = sub i32 %470, 1
  %473 = mul i32 %470, %472
  %474 = urem i32 %473, 2
  %475 = icmp eq i32 %474, 0
  %476 = icmp slt i32 %471, 10
  %477 = or i1 %475, %476
  br i1 %477, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %469, %originalBB116alteredBB
  %478 = load %struct.group*, %struct.group** %15, align 8, !dbg !3281
  %479 = getelementptr inbounds %struct.group, %struct.group* %478, i32 0, i32 0, !dbg !3282
  %480 = load i8*, i8** %479, align 8, !dbg !3282
  %481 = load i32, i32* @x.55
  %482 = load i32, i32* @y.56
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  br label %494, !dbg !3280

489:                                              ; preds = %461
  %490 = load i32, i32* %20, align 4, !dbg !3283
  %491 = zext i32 %490 to i64, !dbg !3283
  %492 = getelementptr inbounds [21 x i8], [21 x i8]* %24, i64 0, i64 0, !dbg !3284
  %493 = call i8* @umaxtostr(i64 %491, i8* %492), !dbg !3285
  br label %494, !dbg !3280

494:                                              ; preds = %489, %originalBBpart2118
  %495 = phi i8* [ %480, %originalBBpart2118 ], [ %493, %489 ], !dbg !3280
  %496 = load i32, i32* @x.55
  %497 = load i32, i32* @y.56
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %494, %originalBB120alteredBB
  %504 = call noalias i8* @xstrdup(i8* %495), !dbg !3286
  store i8* %504, i8** %18, align 8, !dbg !3287
  call void @endgrent(), !dbg !3288
  %505 = load i32, i32* @x.55
  %506 = load i32, i32* @y.56
  %507 = sub i32 %505, 1
  %508 = mul i32 %505, %507
  %509 = urem i32 %508, 2
  %510 = icmp eq i32 %509, 0
  %511 = icmp slt i32 %506, 10
  %512 = or i1 %510, %511
  br i1 %512, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br label %513, !dbg !3289

513:                                              ; preds = %originalBBpart2122, %458, %452
  br label %514

514:                                              ; preds = %513, %451
  %515 = load i32, i32* @x.55
  %516 = load i32, i32* @y.56
  %517 = sub i32 %515, 1
  %518 = mul i32 %515, %517
  %519 = urem i32 %518, 2
  %520 = icmp eq i32 %519, 0
  %521 = icmp slt i32 %516, 10
  %522 = or i1 %520, %521
  br i1 %522, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %514, %originalBB124alteredBB
  call void @endpwent(), !dbg !3290
  %523 = load i32, i32* @x.55
  %524 = load i32, i32* @y.56
  %525 = sub i32 %523, 1
  %526 = mul i32 %523, %525
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %524, 10
  %530 = or i1 %528, %529
  br i1 %530, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br label %531, !dbg !3291

531:                                              ; preds = %originalBBpart2126, %150
  %532 = load i32, i32* @x.55
  %533 = load i32, i32* @y.56
  %534 = sub i32 %532, 1
  %535 = mul i32 %532, %534
  %536 = urem i32 %535, 2
  %537 = icmp eq i32 %536, 0
  %538 = icmp slt i32 %533, 10
  %539 = or i1 %537, %538
  br i1 %539, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %531, %originalBB128alteredBB
  %540 = load i8*, i8** %17, align 8, !dbg !3292
  %541 = icmp ne i8* %540, null, !dbg !3294
  %542 = load i32, i32* @x.55
  %543 = load i32, i32* @y.56
  %544 = sub i32 %542, 1
  %545 = mul i32 %542, %544
  %546 = urem i32 %545, 2
  %547 = icmp eq i32 %546, 0
  %548 = icmp slt i32 %543, 10
  %549 = or i1 %547, %548
  br i1 %549, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  br i1 %541, label %550, label %654, !dbg !3295

550:                                              ; preds = %originalBBpart2130
  %551 = load i8*, i8** %13, align 8, !dbg !3296
  %552 = icmp eq i8* %551, null, !dbg !3297
  br i1 %552, label %553, label %654, !dbg !3298

553:                                              ; preds = %550
  %554 = load i32, i32* @x.55
  %555 = load i32, i32* @y.56
  %556 = sub i32 %554, 1
  %557 = mul i32 %554, %556
  %558 = urem i32 %557, 2
  %559 = icmp eq i32 %558, 0
  %560 = icmp slt i32 %555, 10
  %561 = or i1 %559, %560
  br i1 %561, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %553, %originalBB132alteredBB
  %562 = load i8*, i8** %17, align 8, !dbg !3299
  %563 = load i8, i8* %562, align 1, !dbg !3301
  %564 = sext i8 %563 to i32, !dbg !3301
  %565 = icmp eq i32 %564, 43, !dbg !3302
  %566 = load i32, i32* @x.55
  %567 = load i32, i32* @y.56
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  br i1 %565, label %574, label %591, !dbg !3301

574:                                              ; preds = %originalBBpart2134
  %575 = load i32, i32* @x.55
  %576 = load i32, i32* @y.56
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %574, %originalBB136alteredBB
  %583 = load i32, i32* @x.55
  %584 = load i32, i32* @y.56
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br label %610, !dbg !3301

591:                                              ; preds = %originalBBpart2134
  %592 = load i32, i32* @x.55
  %593 = load i32, i32* @y.56
  %594 = sub i32 %592, 1
  %595 = mul i32 %592, %594
  %596 = urem i32 %595, 2
  %597 = icmp eq i32 %596, 0
  %598 = icmp slt i32 %593, 10
  %599 = or i1 %597, %598
  br i1 %599, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %591, %originalBB140alteredBB
  %600 = load i8*, i8** %17, align 8, !dbg !3303
  %601 = call %struct.group* @getgrnam(i8* %600), !dbg !3304
  %602 = load i32, i32* @x.55
  %603 = load i32, i32* @y.56
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBBpart2142, label %originalBB140alteredBB

originalBBpart2142:                               ; preds = %originalBB140
  br label %610, !dbg !3301

610:                                              ; preds = %originalBBpart2142, %originalBBpart2138
  %611 = phi %struct.group* [ null, %originalBBpart2138 ], [ %601, %originalBBpart2142 ], !dbg !3301
  store %struct.group* %611, %struct.group** %15, align 8, !dbg !3305
  %612 = load %struct.group*, %struct.group** %15, align 8, !dbg !3306
  %613 = icmp eq %struct.group* %612, null, !dbg !3308
  br i1 %613, label %614, label %647, !dbg !3309

614:                                              ; preds = %610
  call void @llvm.dbg.declare(metadata i64* %25, metadata !3310, metadata !DIExpression()), !dbg !3312
  %615 = load i8*, i8** %17, align 8, !dbg !3313
  %616 = call i32 @xstrtoul(i8* %615, i8** null, i32 10, i64* %25, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.3.102, i64 0, i64 0)), !dbg !3315
  %617 = icmp eq i32 %616, 0, !dbg !3316
  br i1 %617, label %618, label %644, !dbg !3317

618:                                              ; preds = %614
  %619 = load i32, i32* @x.55
  %620 = load i32, i32* @y.56
  %621 = sub i32 %619, 1
  %622 = mul i32 %619, %621
  %623 = urem i32 %622, 2
  %624 = icmp eq i32 %623, 0
  %625 = icmp slt i32 %620, 10
  %626 = or i1 %624, %625
  br i1 %626, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %618, %originalBB144alteredBB
  %627 = load i64, i64* %25, align 8, !dbg !3318
  %628 = icmp ule i64 %627, 4294967295, !dbg !3319
  %629 = load i32, i32* @x.55
  %630 = load i32, i32* @y.56
  %631 = sub i32 %629, 1
  %632 = mul i32 %629, %631
  %633 = urem i32 %632, 2
  %634 = icmp eq i32 %633, 0
  %635 = icmp slt i32 %630, 10
  %636 = or i1 %634, %635
  br i1 %636, label %originalBBpart2146, label %originalBB144alteredBB

originalBBpart2146:                               ; preds = %originalBB144
  br i1 %628, label %637, label %644, !dbg !3320

637:                                              ; preds = %originalBBpart2146
  %638 = load i64, i64* %25, align 8, !dbg !3321
  %639 = trunc i64 %638 to i32, !dbg !3322
  %640 = icmp ne i32 %639, -1, !dbg !3323
  br i1 %640, label %641, label %644, !dbg !3324

641:                                              ; preds = %637
  %642 = load i64, i64* %25, align 8, !dbg !3325
  %643 = trunc i64 %642 to i32, !dbg !3325
  store i32 %643, i32* %20, align 4, !dbg !3326
  br label %646, !dbg !3327

644:                                              ; preds = %637, %originalBBpart2146, %614
  %645 = load i8*, i8** @parse_with_separator.E_invalid_group, align 8, !dbg !3328
  store i8* %645, i8** %13, align 8, !dbg !3329
  br label %646

646:                                              ; preds = %644, %641
  br label %651, !dbg !3330

647:                                              ; preds = %610
  %648 = load %struct.group*, %struct.group** %15, align 8, !dbg !3331
  %649 = getelementptr inbounds %struct.group, %struct.group* %648, i32 0, i32 2, !dbg !3332
  %650 = load i32, i32* %649, align 8, !dbg !3332
  store i32 %650, i32* %20, align 4, !dbg !3333
  br label %651

651:                                              ; preds = %647, %646
  call void @endgrent(), !dbg !3334
  %652 = load i8*, i8** %17, align 8, !dbg !3335
  %653 = call noalias i8* @xstrdup(i8* %652), !dbg !3336
  store i8* %653, i8** %18, align 8, !dbg !3337
  br label %654, !dbg !3338

654:                                              ; preds = %651, %550, %originalBBpart2130
  %655 = load i32, i32* @x.55
  %656 = load i32, i32* @y.56
  %657 = sub i32 %655, 1
  %658 = mul i32 %655, %657
  %659 = urem i32 %658, 2
  %660 = icmp eq i32 %659, 0
  %661 = icmp slt i32 %656, 10
  %662 = or i1 %660, %661
  br i1 %662, label %originalBB148, label %originalBB148alteredBB

originalBB148:                                    ; preds = %654, %originalBB148alteredBB
  %663 = load i8*, i8** %13, align 8, !dbg !3339
  %664 = icmp eq i8* %663, null, !dbg !3341
  %665 = load i32, i32* @x.55
  %666 = load i32, i32* @y.56
  %667 = sub i32 %665, 1
  %668 = mul i32 %665, %667
  %669 = urem i32 %668, 2
  %670 = icmp eq i32 %669, 0
  %671 = icmp slt i32 %666, 10
  %672 = or i1 %670, %671
  br i1 %672, label %originalBBpart2150, label %originalBB148alteredBB

originalBBpart2150:                               ; preds = %originalBB148
  br i1 %664, label %673, label %758, !dbg !3342

673:                                              ; preds = %originalBBpart2150
  %674 = load i32, i32* @x.55
  %675 = load i32, i32* @y.56
  %676 = sub i32 %674, 1
  %677 = mul i32 %674, %676
  %678 = urem i32 %677, 2
  %679 = icmp eq i32 %678, 0
  %680 = icmp slt i32 %675, 10
  %681 = or i1 %679, %680
  br i1 %681, label %originalBB152, label %originalBB152alteredBB

originalBB152:                                    ; preds = %673, %originalBB152alteredBB
  %682 = load i32, i32* %19, align 4, !dbg !3343
  %683 = load i32*, i32** %9, align 8, !dbg !3345
  store i32 %682, i32* %683, align 4, !dbg !3346
  %684 = load i32*, i32** %10, align 8, !dbg !3347
  %685 = icmp ne i32* %684, null, !dbg !3347
  %686 = load i32, i32* @x.55
  %687 = load i32, i32* @y.56
  %688 = sub i32 %686, 1
  %689 = mul i32 %686, %688
  %690 = urem i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = icmp slt i32 %687, 10
  %693 = or i1 %691, %692
  br i1 %693, label %originalBBpart2154, label %originalBB152alteredBB

originalBBpart2154:                               ; preds = %originalBB152
  br i1 %685, label %694, label %713, !dbg !3349

694:                                              ; preds = %originalBBpart2154
  %695 = load i32, i32* @x.55
  %696 = load i32, i32* @y.56
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBB156, label %originalBB156alteredBB

originalBB156:                                    ; preds = %694, %originalBB156alteredBB
  %703 = load i32, i32* %20, align 4, !dbg !3350
  %704 = load i32*, i32** %10, align 8, !dbg !3351
  store i32 %703, i32* %704, align 4, !dbg !3352
  %705 = load i32, i32* @x.55
  %706 = load i32, i32* @y.56
  %707 = sub i32 %705, 1
  %708 = mul i32 %705, %707
  %709 = urem i32 %708, 2
  %710 = icmp eq i32 %709, 0
  %711 = icmp slt i32 %706, 10
  %712 = or i1 %710, %711
  br i1 %712, label %originalBBpart2158, label %originalBB156alteredBB

originalBBpart2158:                               ; preds = %originalBB156
  br label %713, !dbg !3353

713:                                              ; preds = %originalBBpart2158, %originalBBpart2154
  %714 = load i8**, i8*** %11, align 8, !dbg !3354
  %715 = icmp ne i8** %714, null, !dbg !3354
  br i1 %715, label %716, label %735, !dbg !3356

716:                                              ; preds = %713
  %717 = load i32, i32* @x.55
  %718 = load i32, i32* @y.56
  %719 = sub i32 %717, 1
  %720 = mul i32 %717, %719
  %721 = urem i32 %720, 2
  %722 = icmp eq i32 %721, 0
  %723 = icmp slt i32 %718, 10
  %724 = or i1 %722, %723
  br i1 %724, label %originalBB160, label %originalBB160alteredBB

originalBB160:                                    ; preds = %716, %originalBB160alteredBB
  %725 = load i8*, i8** %16, align 8, !dbg !3357
  %726 = load i8**, i8*** %11, align 8, !dbg !3359
  store i8* %725, i8** %726, align 8, !dbg !3360
  store i8* null, i8** %16, align 8, !dbg !3361
  %727 = load i32, i32* @x.55
  %728 = load i32, i32* @y.56
  %729 = sub i32 %727, 1
  %730 = mul i32 %727, %729
  %731 = urem i32 %730, 2
  %732 = icmp eq i32 %731, 0
  %733 = icmp slt i32 %728, 10
  %734 = or i1 %732, %733
  br i1 %734, label %originalBBpart2162, label %originalBB160alteredBB

originalBBpart2162:                               ; preds = %originalBB160
  br label %735, !dbg !3362

735:                                              ; preds = %originalBBpart2162, %713
  %736 = load i8**, i8*** %12, align 8, !dbg !3363
  %737 = icmp ne i8** %736, null, !dbg !3363
  br i1 %737, label %738, label %741, !dbg !3365

738:                                              ; preds = %735
  %739 = load i8*, i8** %18, align 8, !dbg !3366
  %740 = load i8**, i8*** %12, align 8, !dbg !3368
  store i8* %739, i8** %740, align 8, !dbg !3369
  store i8* null, i8** %18, align 8, !dbg !3370
  br label %741, !dbg !3371

741:                                              ; preds = %738, %735
  %742 = load i32, i32* @x.55
  %743 = load i32, i32* @y.56
  %744 = sub i32 %742, 1
  %745 = mul i32 %742, %744
  %746 = urem i32 %745, 2
  %747 = icmp eq i32 %746, 0
  %748 = icmp slt i32 %743, 10
  %749 = or i1 %747, %748
  br i1 %749, label %originalBB164, label %originalBB164alteredBB

originalBB164:                                    ; preds = %741, %originalBB164alteredBB
  %750 = load i32, i32* @x.55
  %751 = load i32, i32* @y.56
  %752 = sub i32 %750, 1
  %753 = mul i32 %750, %752
  %754 = urem i32 %753, 2
  %755 = icmp eq i32 %754, 0
  %756 = icmp slt i32 %751, 10
  %757 = or i1 %755, %756
  br i1 %757, label %originalBBpart2166, label %originalBB164alteredBB

originalBBpart2166:                               ; preds = %originalBB164
  br label %758, !dbg !3372

758:                                              ; preds = %originalBBpart2166, %originalBBpart2150
  %759 = load i32, i32* @x.55
  %760 = load i32, i32* @y.56
  %761 = sub i32 %759, 1
  %762 = mul i32 %759, %761
  %763 = urem i32 %762, 2
  %764 = icmp eq i32 %763, 0
  %765 = icmp slt i32 %760, 10
  %766 = or i1 %764, %765
  br i1 %766, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %758, %originalBB168alteredBB
  %767 = load i8*, i8** %16, align 8, !dbg !3373
  call void @free(i8* %767) #10, !dbg !3374
  %768 = load i8*, i8** %18, align 8, !dbg !3375
  call void @free(i8* %768) #10, !dbg !3376
  %769 = load i8*, i8** %13, align 8, !dbg !3377
  %770 = icmp ne i8* %769, null, !dbg !3377
  %771 = load i32, i32* @x.55
  %772 = load i32, i32* @y.56
  %773 = sub i32 %771, 1
  %774 = mul i32 %771, %773
  %775 = urem i32 %774, 2
  %776 = icmp eq i32 %775, 0
  %777 = icmp slt i32 %772, 10
  %778 = or i1 %776, %777
  br i1 %778, label %originalBBpart2170, label %originalBB168alteredBB

originalBBpart2170:                               ; preds = %originalBB168
  br i1 %770, label %779, label %782, !dbg !3377

779:                                              ; preds = %originalBBpart2170
  %780 = load i8*, i8** %13, align 8, !dbg !3378
  %781 = call i8* @gettext(i8* %780) #10, !dbg !3378
  br label %799, !dbg !3377

782:                                              ; preds = %originalBBpart2170
  %783 = load i32, i32* @x.55
  %784 = load i32, i32* @y.56
  %785 = sub i32 %783, 1
  %786 = mul i32 %783, %785
  %787 = urem i32 %786, 2
  %788 = icmp eq i32 %787, 0
  %789 = icmp slt i32 %784, 10
  %790 = or i1 %788, %789
  br i1 %790, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %782, %originalBB172alteredBB
  %791 = load i32, i32* @x.55
  %792 = load i32, i32* @y.56
  %793 = sub i32 %791, 1
  %794 = mul i32 %791, %793
  %795 = urem i32 %794, 2
  %796 = icmp eq i32 %795, 0
  %797 = icmp slt i32 %792, 10
  %798 = or i1 %796, %797
  br i1 %798, label %originalBBpart2174, label %originalBB172alteredBB

originalBBpart2174:                               ; preds = %originalBB172
  br label %799, !dbg !3377

799:                                              ; preds = %originalBBpart2174, %779
  %800 = phi i8* [ %781, %779 ], [ null, %originalBBpart2174 ], !dbg !3377
  %801 = load i32, i32* @x.55
  %802 = load i32, i32* @y.56
  %803 = sub i32 %801, 1
  %804 = mul i32 %801, %803
  %805 = urem i32 %804, 2
  %806 = icmp eq i32 %805, 0
  %807 = icmp slt i32 %802, 10
  %808 = or i1 %806, %807
  br i1 %808, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %799, %originalBB176alteredBB
  %809 = load i32, i32* @x.55
  %810 = load i32, i32* @y.56
  %811 = sub i32 %809, 1
  %812 = mul i32 %809, %811
  %813 = urem i32 %812, 2
  %814 = icmp eq i32 %813, 0
  %815 = icmp slt i32 %810, 10
  %816 = or i1 %814, %815
  br i1 %816, label %originalBBpart2178, label %originalBB176alteredBB

originalBBpart2178:                               ; preds = %originalBB176
  ret i8* %800, !dbg !3379

originalBBalteredBB:                              ; preds = %originalBB, %55
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %72
  %817 = load i8*, i8** %8, align 8, !dbg !3181
  %818 = load i8*, i8** %7, align 8, !dbg !3182
  %819 = ptrtoint i8* %817 to i64, !dbg !3183
  %820 = ptrtoint i8* %818 to i64, !dbg !3183
  %821 = sub i64 %819, %820, !dbg !3183
  store i64 %821, i64* %21, align 8, !dbg !3180
  %822 = load i64, i64* %21, align 8, !dbg !3184
  %823 = icmp ne i64 %822, 0, !dbg !3186
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %96
  %824 = load i8*, i8** %7, align 8, !dbg !3188
  %825 = load i64, i64* %21, align 8, !dbg !3190
  %_ = sub i64 0, %825
  %gen = add i64 %_, 1
  %_7 = shl i64 %825, 1
  %_8 = sub i64 %825, 1
  %gen9 = mul i64 %_8, 1
  %826 = add i64 %825, 1, !dbg !3191
  %827 = call i8* @xmemdup(i8* %824, i64 %826), !dbg !3192
  store i8* %827, i8** %16, align 8, !dbg !3193
  %828 = load i8*, i8** %16, align 8, !dbg !3194
  %829 = load i64, i64* %21, align 8, !dbg !3195
  %830 = getelementptr inbounds i8, i8* %828, i64 %829, !dbg !3194
  store i8 0, i8* %830, align 1, !dbg !3196
  br label %originalBB6

originalBB13alteredBB:                            ; preds = %originalBB13, %121
  %831 = load i8*, i8** %8, align 8, !dbg !3198
  %832 = icmp eq i8* %831, null, !dbg !3199
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %154
  %833 = load i8*, i8** %16, align 8, !dbg !3212
  %834 = load i8, i8* %833, align 1, !dbg !3214
  %835 = sext i8 %834 to i32, !dbg !3214
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %175
  %836 = load i32, i32* @inVal0
  %837 = icmp sgt i32 %836, 1
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %194
  store i32 82, i32* %collatzVar
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %211
  %838 = load i8**, i8*** @inVal1
  %839 = getelementptr inbounds i8*, i8** %838, i64 1
  %840 = load i8*, i8** %839
  %controlealteredBB = call i32 @controle(i8* %840, i32 43)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %234
  %841 = load i32, i32* %collatzVar
  %_34 = sub i32 0, %841
  %gen35 = add i32 %_34, 2
  %_36 = sub i32 0, %841
  %gen37 = add i32 %_36, 2
  %_38 = shl i32 %841, 2
  %_39 = sub i32 %841, 2
  %gen40 = mul i32 %_39, 2
  %_41 = sub i32 0, %841
  %gen42 = add i32 %_41, 2
  %_43 = sub i32 %841, 2
  %gen44 = mul i32 %_43, 2
  %842 = srem i32 %841, 2
  %843 = icmp eq i32 %842, 0
  br label %originalBB33

originalBB48alteredBB:                            ; preds = %originalBB48, %257
  %844 = load i32, i32* %collatzVar
  %_49 = shl i32 %844, 3
  %_50 = sub i32 %844, 3
  %gen51 = mul i32 %_50, 3
  %_52 = shl i32 %844, 3
  %_53 = shl i32 %844, 3
  %_54 = sub i32 %844, 3
  %gen55 = mul i32 %_54, 3
  %_56 = sub i32 0, %844
  %gen57 = add i32 %_56, 3
  %_58 = sub i32 0, %844
  %gen59 = add i32 %_58, 3
  %_60 = sub i32 0, %844
  %gen61 = add i32 %_60, 3
  %845 = mul i32 %844, 3
  %_62 = sub i32 %845, 1
  %gen63 = mul i32 %_62, 1
  %_64 = sub i32 %845, 1
  %gen65 = mul i32 %_64, 1
  %_66 = sub i32 %845, 1
  %gen67 = mul i32 %_66, 1
  %846 = add i32 %845, 1
  store i32 %846, i32* %collatzVar
  br label %originalBB48

originalBB71alteredBB:                            ; preds = %originalBB71, %277
  %847 = load i32, i32* %collatzVar
  %_72 = sub i32 %165, %847
  %gen73 = mul i32 %_72, %847
  %_74 = shl i32 %165, %847
  %_75 = sub i32 0, %165
  %gen76 = add i32 %_75, %847
  %_77 = sub i32 %165, %847
  %gen78 = mul i32 %_77, %847
  %_79 = sub i32 %165, %847
  %gen80 = mul i32 %_79, %847
  %_81 = sub i32 %165, %847
  %gen82 = mul i32 %_81, %847
  %_83 = sub i32 0, %165
  %gen84 = add i32 %_83, %847
  %848 = sub i32 %165, %847
  %849 = icmp sgt i32 %848, 41
  br label %originalBB71

originalBB88alteredBB:                            ; preds = %originalBB88, %302
  %850 = load i8*, i8** %16, align 8, !dbg !3216
  %851 = call %struct.passwd* @getpwnam(i8* %850), !dbg !3217
  br label %originalBB88

originalBB92alteredBB:                            ; preds = %originalBB92, %325
  %852 = load i8*, i8** %8, align 8, !dbg !3226
  %853 = icmp ne i8* %852, null, !dbg !3227
  br label %originalBB92

originalBB96alteredBB:                            ; preds = %originalBB96, %344
  %854 = load i8*, i8** %17, align 8, !dbg !3229
  %855 = icmp eq i8* %854, null, !dbg !3230
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %363
  %856 = zext i1 %364 to i8, !dbg !3225
  store i8 %856, i8* %22, align 1, !dbg !3225
  %857 = load i8, i8* %22, align 1, !dbg !3232
  %858 = trunc i8 %857 to i1, !dbg !3232
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %384
  %859 = load i8*, i8** @parse_with_separator.E_bad_spec, align 8, !dbg !3235
  store i8* %859, i8** %13, align 8, !dbg !3237
  br label %originalBB104

originalBB108alteredBB:                           ; preds = %originalBB108, %409
  %860 = load i64, i64* %23, align 8, !dbg !3250
  %861 = trunc i64 %860 to i32, !dbg !3251
  %862 = icmp ne i32 %861, -1, !dbg !3252
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %429
  %863 = load i64, i64* %23, align 8, !dbg !3254
  %864 = trunc i64 %863 to i32, !dbg !3254
  store i32 %864, i32* %19, align 4, !dbg !3255
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %469
  %865 = load %struct.group*, %struct.group** %15, align 8, !dbg !3281
  %866 = getelementptr inbounds %struct.group, %struct.group* %865, i32 0, i32 0, !dbg !3282
  %867 = load i8*, i8** %866, align 8, !dbg !3282
  br label %originalBB116

originalBB120alteredBB:                           ; preds = %originalBB120, %494
  %868 = call noalias i8* @xstrdup(i8* %495), !dbg !3286
  store i8* %868, i8** %18, align 8, !dbg !3287
  call void @endgrent(), !dbg !3288
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %514
  call void @endpwent(), !dbg !3290
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %531
  %869 = load i8*, i8** %17, align 8, !dbg !3292
  %870 = icmp ne i8* %869, null, !dbg !3294
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %553
  %871 = load i8*, i8** %17, align 8, !dbg !3299
  %872 = load i8, i8* %871, align 1, !dbg !3301
  %873 = sext i8 %872 to i32, !dbg !3301
  %874 = icmp eq i32 %873, 43, !dbg !3302
  br label %originalBB132

originalBB136alteredBB:                           ; preds = %originalBB136, %574
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %591
  %875 = load i8*, i8** %17, align 8, !dbg !3303
  %876 = call %struct.group* @getgrnam(i8* %875), !dbg !3304
  br label %originalBB140

originalBB144alteredBB:                           ; preds = %originalBB144, %618
  %877 = load i64, i64* %25, align 8, !dbg !3318
  %878 = icmp ule i64 %877, 4294967295, !dbg !3319
  br label %originalBB144

originalBB148alteredBB:                           ; preds = %originalBB148, %654
  %879 = load i8*, i8** %13, align 8, !dbg !3339
  %880 = icmp eq i8* %879, null, !dbg !3341
  br label %originalBB148

originalBB152alteredBB:                           ; preds = %originalBB152, %673
  %881 = load i32, i32* %19, align 4, !dbg !3343
  %882 = load i32*, i32** %9, align 8, !dbg !3345
  store i32 %881, i32* %882, align 4, !dbg !3346
  %883 = load i32*, i32** %10, align 8, !dbg !3347
  %884 = icmp ne i32* %883, null, !dbg !3347
  br label %originalBB152

originalBB156alteredBB:                           ; preds = %originalBB156, %694
  %885 = load i32, i32* %20, align 4, !dbg !3350
  %886 = load i32*, i32** %10, align 8, !dbg !3351
  store i32 %885, i32* %886, align 4, !dbg !3352
  br label %originalBB156

originalBB160alteredBB:                           ; preds = %originalBB160, %716
  %887 = load i8*, i8** %16, align 8, !dbg !3357
  %888 = load i8**, i8*** %11, align 8, !dbg !3359
  store i8* %887, i8** %888, align 8, !dbg !3360
  store i8* null, i8** %16, align 8, !dbg !3361
  br label %originalBB160

originalBB164alteredBB:                           ; preds = %originalBB164, %741
  br label %originalBB164

originalBB168alteredBB:                           ; preds = %originalBB168, %758
  %889 = load i8*, i8** %16, align 8, !dbg !3373
  call void @free(i8* %889) #10, !dbg !3374
  %890 = load i8*, i8** %18, align 8, !dbg !3375
  call void @free(i8* %890) #10, !dbg !3376
  %891 = load i8*, i8** %13, align 8, !dbg !3377
  %892 = icmp ne i8* %891, null, !dbg !3377
  br label %originalBB168

originalBB172alteredBB:                           ; preds = %originalBB172, %782
  br label %originalBB172

originalBB176alteredBB:                           ; preds = %originalBB176, %799
  br label %originalBB176
}

declare dso_local %struct.passwd* @getpwnam(i8*) #3

declare dso_local void @endgrent() #3

declare dso_local void @endpwent() #3

declare dso_local %struct.group* @getgrnam(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !3380 {
  %7 = alloca %struct._IO_FILE*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8**, align 8
  %12 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %7, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %7, metadata !3438, metadata !DIExpression()), !dbg !3439
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !3440, metadata !DIExpression()), !dbg !3441
  store i8* %2, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3442, metadata !DIExpression()), !dbg !3443
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !3444, metadata !DIExpression()), !dbg !3445
  store i8** %4, i8*** %11, align 8
  call void @llvm.dbg.declare(metadata i8*** %11, metadata !3446, metadata !DIExpression()), !dbg !3447
  store i64 %5, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !3448, metadata !DIExpression()), !dbg !3449
  %13 = load i8*, i8** %8, align 8, !dbg !3450
  %14 = icmp ne i8* %13, null, !dbg !3450
  br i1 %14, label %15, label %21, !dbg !3452

15:                                               ; preds = %6
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3453
  %17 = load i8*, i8** %8, align 8, !dbg !3454
  %18 = load i8*, i8** %9, align 8, !dbg !3455
  %19 = load i8*, i8** %10, align 8, !dbg !3456
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.106, i64 0, i64 0), i8* %17, i8* %18, i8* %19), !dbg !3457
  br label %42, !dbg !3457

21:                                               ; preds = %6
  %22 = load i32, i32* @x.57
  %23 = load i32, i32* @y.58
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %21, %originalBBalteredBB
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3458
  %31 = load i8*, i8** %9, align 8, !dbg !3459
  %32 = load i8*, i8** %10, align 8, !dbg !3460
  %33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.107, i64 0, i64 0), i8* %31, i8* %32), !dbg !3461
  %34 = load i32, i32* @x.57
  %35 = load i32, i32* @y.58
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %42

42:                                               ; preds = %originalBBpart2, %15
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3462
  %44 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.108, i64 0, i64 0)) #10, !dbg !3463
  %45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %44, i32 2020), !dbg !3464
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3465
  %47 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.109, i64 0, i64 0), %struct._IO_FILE* %46), !dbg !3465
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3466
  %49 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.110, i64 0, i64 0)) #10, !dbg !3467
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* %49, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.111, i64 0, i64 0)), !dbg !3468
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3469
  %52 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.109, i64 0, i64 0), %struct._IO_FILE* %51), !dbg !3469
  %53 = load i64, i64* %12, align 8, !dbg !3470
  switch i64 %53, label %322 [
    i64 0, label %54
    i64 1, label %55
    i64 2, label %62
    i64 3, label %88
    i64 4, label %117
    i64 5, label %133
    i64 6, label %152
    i64 7, label %190
    i64 8, label %231
    i64 9, label %275
  ], !dbg !3471

54:                                               ; preds = %42
  br label %369, !dbg !3472

55:                                               ; preds = %42
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3474
  %57 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.112, i64 0, i64 0)) #10, !dbg !3475
  %58 = load i8**, i8*** %11, align 8, !dbg !3476
  %59 = getelementptr inbounds i8*, i8** %58, i64 0, !dbg !3476
  %60 = load i8*, i8** %59, align 8, !dbg !3476
  %61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* %57, i8* %60), !dbg !3477
  br label %369, !dbg !3478

62:                                               ; preds = %42
  %63 = load i32, i32* @x.57
  %64 = load i32, i32* @y.58
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %62, %originalBB1alteredBB
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3479
  %72 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.113, i64 0, i64 0)) #10, !dbg !3480
  %73 = load i8**, i8*** %11, align 8, !dbg !3481
  %74 = getelementptr inbounds i8*, i8** %73, i64 0, !dbg !3481
  %75 = load i8*, i8** %74, align 8, !dbg !3481
  %76 = load i8**, i8*** %11, align 8, !dbg !3482
  %77 = getelementptr inbounds i8*, i8** %76, i64 1, !dbg !3482
  %78 = load i8*, i8** %77, align 8, !dbg !3482
  %79 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* %72, i8* %75, i8* %78), !dbg !3483
  %80 = load i32, i32* @x.57
  %81 = load i32, i32* @y.58
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %369, !dbg !3484

88:                                               ; preds = %42
  %89 = load i32, i32* @x.57
  %90 = load i32, i32* @y.58
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %88, %originalBB6alteredBB
  %97 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3485
  %98 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.114, i64 0, i64 0)) #10, !dbg !3486
  %99 = load i8**, i8*** %11, align 8, !dbg !3487
  %100 = getelementptr inbounds i8*, i8** %99, i64 0, !dbg !3487
  %101 = load i8*, i8** %100, align 8, !dbg !3487
  %102 = load i8**, i8*** %11, align 8, !dbg !3488
  %103 = getelementptr inbounds i8*, i8** %102, i64 1, !dbg !3488
  %104 = load i8*, i8** %103, align 8, !dbg !3488
  %105 = load i8**, i8*** %11, align 8, !dbg !3489
  %106 = getelementptr inbounds i8*, i8** %105, i64 2, !dbg !3489
  %107 = load i8*, i8** %106, align 8, !dbg !3489
  %108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %97, i8* %98, i8* %101, i8* %104, i8* %107), !dbg !3490
  %109 = load i32, i32* @x.57
  %110 = load i32, i32* @y.58
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %369, !dbg !3491

117:                                              ; preds = %42
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3492
  %119 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.115, i64 0, i64 0)) #10, !dbg !3493
  %120 = load i8**, i8*** %11, align 8, !dbg !3494
  %121 = getelementptr inbounds i8*, i8** %120, i64 0, !dbg !3494
  %122 = load i8*, i8** %121, align 8, !dbg !3494
  %123 = load i8**, i8*** %11, align 8, !dbg !3495
  %124 = getelementptr inbounds i8*, i8** %123, i64 1, !dbg !3495
  %125 = load i8*, i8** %124, align 8, !dbg !3495
  %126 = load i8**, i8*** %11, align 8, !dbg !3496
  %127 = getelementptr inbounds i8*, i8** %126, i64 2, !dbg !3496
  %128 = load i8*, i8** %127, align 8, !dbg !3496
  %129 = load i8**, i8*** %11, align 8, !dbg !3497
  %130 = getelementptr inbounds i8*, i8** %129, i64 3, !dbg !3497
  %131 = load i8*, i8** %130, align 8, !dbg !3497
  %132 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %118, i8* %119, i8* %122, i8* %125, i8* %128, i8* %131), !dbg !3498
  br label %369, !dbg !3499

133:                                              ; preds = %42
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3500
  %135 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.116, i64 0, i64 0)) #10, !dbg !3501
  %136 = load i8**, i8*** %11, align 8, !dbg !3502
  %137 = getelementptr inbounds i8*, i8** %136, i64 0, !dbg !3502
  %138 = load i8*, i8** %137, align 8, !dbg !3502
  %139 = load i8**, i8*** %11, align 8, !dbg !3503
  %140 = getelementptr inbounds i8*, i8** %139, i64 1, !dbg !3503
  %141 = load i8*, i8** %140, align 8, !dbg !3503
  %142 = load i8**, i8*** %11, align 8, !dbg !3504
  %143 = getelementptr inbounds i8*, i8** %142, i64 2, !dbg !3504
  %144 = load i8*, i8** %143, align 8, !dbg !3504
  %145 = load i8**, i8*** %11, align 8, !dbg !3505
  %146 = getelementptr inbounds i8*, i8** %145, i64 3, !dbg !3505
  %147 = load i8*, i8** %146, align 8, !dbg !3505
  %148 = load i8**, i8*** %11, align 8, !dbg !3506
  %149 = getelementptr inbounds i8*, i8** %148, i64 4, !dbg !3506
  %150 = load i8*, i8** %149, align 8, !dbg !3506
  %151 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* %135, i8* %138, i8* %141, i8* %144, i8* %147, i8* %150), !dbg !3507
  br label %369, !dbg !3508

152:                                              ; preds = %42
  %153 = load i32, i32* @x.57
  %154 = load i32, i32* @y.58
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %152, %originalBB10alteredBB
  %161 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3509
  %162 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.117, i64 0, i64 0)) #10, !dbg !3510
  %163 = load i8**, i8*** %11, align 8, !dbg !3511
  %164 = getelementptr inbounds i8*, i8** %163, i64 0, !dbg !3511
  %165 = load i8*, i8** %164, align 8, !dbg !3511
  %166 = load i8**, i8*** %11, align 8, !dbg !3512
  %167 = getelementptr inbounds i8*, i8** %166, i64 1, !dbg !3512
  %168 = load i8*, i8** %167, align 8, !dbg !3512
  %169 = load i8**, i8*** %11, align 8, !dbg !3513
  %170 = getelementptr inbounds i8*, i8** %169, i64 2, !dbg !3513
  %171 = load i8*, i8** %170, align 8, !dbg !3513
  %172 = load i8**, i8*** %11, align 8, !dbg !3514
  %173 = getelementptr inbounds i8*, i8** %172, i64 3, !dbg !3514
  %174 = load i8*, i8** %173, align 8, !dbg !3514
  %175 = load i8**, i8*** %11, align 8, !dbg !3515
  %176 = getelementptr inbounds i8*, i8** %175, i64 4, !dbg !3515
  %177 = load i8*, i8** %176, align 8, !dbg !3515
  %178 = load i8**, i8*** %11, align 8, !dbg !3516
  %179 = getelementptr inbounds i8*, i8** %178, i64 5, !dbg !3516
  %180 = load i8*, i8** %179, align 8, !dbg !3516
  %181 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %161, i8* %162, i8* %165, i8* %168, i8* %171, i8* %174, i8* %177, i8* %180), !dbg !3517
  %182 = load i32, i32* @x.57
  %183 = load i32, i32* @y.58
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %369, !dbg !3518

190:                                              ; preds = %42
  %191 = load i32, i32* @x.57
  %192 = load i32, i32* @y.58
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %190, %originalBB14alteredBB
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3519
  %200 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.118, i64 0, i64 0)) #10, !dbg !3520
  %201 = load i8**, i8*** %11, align 8, !dbg !3521
  %202 = getelementptr inbounds i8*, i8** %201, i64 0, !dbg !3521
  %203 = load i8*, i8** %202, align 8, !dbg !3521
  %204 = load i8**, i8*** %11, align 8, !dbg !3522
  %205 = getelementptr inbounds i8*, i8** %204, i64 1, !dbg !3522
  %206 = load i8*, i8** %205, align 8, !dbg !3522
  %207 = load i8**, i8*** %11, align 8, !dbg !3523
  %208 = getelementptr inbounds i8*, i8** %207, i64 2, !dbg !3523
  %209 = load i8*, i8** %208, align 8, !dbg !3523
  %210 = load i8**, i8*** %11, align 8, !dbg !3524
  %211 = getelementptr inbounds i8*, i8** %210, i64 3, !dbg !3524
  %212 = load i8*, i8** %211, align 8, !dbg !3524
  %213 = load i8**, i8*** %11, align 8, !dbg !3525
  %214 = getelementptr inbounds i8*, i8** %213, i64 4, !dbg !3525
  %215 = load i8*, i8** %214, align 8, !dbg !3525
  %216 = load i8**, i8*** %11, align 8, !dbg !3526
  %217 = getelementptr inbounds i8*, i8** %216, i64 5, !dbg !3526
  %218 = load i8*, i8** %217, align 8, !dbg !3526
  %219 = load i8**, i8*** %11, align 8, !dbg !3527
  %220 = getelementptr inbounds i8*, i8** %219, i64 6, !dbg !3527
  %221 = load i8*, i8** %220, align 8, !dbg !3527
  %222 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %199, i8* %200, i8* %203, i8* %206, i8* %209, i8* %212, i8* %215, i8* %218, i8* %221), !dbg !3528
  %223 = load i32, i32* @x.57
  %224 = load i32, i32* @y.58
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %369, !dbg !3529

231:                                              ; preds = %42
  %232 = load i32, i32* @x.57
  %233 = load i32, i32* @y.58
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %231, %originalBB18alteredBB
  %240 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3530
  %241 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.119, i64 0, i64 0)) #10, !dbg !3531
  %242 = load i8**, i8*** %11, align 8, !dbg !3532
  %243 = getelementptr inbounds i8*, i8** %242, i64 0, !dbg !3532
  %244 = load i8*, i8** %243, align 8, !dbg !3532
  %245 = load i8**, i8*** %11, align 8, !dbg !3533
  %246 = getelementptr inbounds i8*, i8** %245, i64 1, !dbg !3533
  %247 = load i8*, i8** %246, align 8, !dbg !3533
  %248 = load i8**, i8*** %11, align 8, !dbg !3534
  %249 = getelementptr inbounds i8*, i8** %248, i64 2, !dbg !3534
  %250 = load i8*, i8** %249, align 8, !dbg !3534
  %251 = load i8**, i8*** %11, align 8, !dbg !3535
  %252 = getelementptr inbounds i8*, i8** %251, i64 3, !dbg !3535
  %253 = load i8*, i8** %252, align 8, !dbg !3535
  %254 = load i8**, i8*** %11, align 8, !dbg !3536
  %255 = getelementptr inbounds i8*, i8** %254, i64 4, !dbg !3536
  %256 = load i8*, i8** %255, align 8, !dbg !3536
  %257 = load i8**, i8*** %11, align 8, !dbg !3537
  %258 = getelementptr inbounds i8*, i8** %257, i64 5, !dbg !3537
  %259 = load i8*, i8** %258, align 8, !dbg !3537
  %260 = load i8**, i8*** %11, align 8, !dbg !3538
  %261 = getelementptr inbounds i8*, i8** %260, i64 6, !dbg !3538
  %262 = load i8*, i8** %261, align 8, !dbg !3538
  %263 = load i8**, i8*** %11, align 8, !dbg !3539
  %264 = getelementptr inbounds i8*, i8** %263, i64 7, !dbg !3539
  %265 = load i8*, i8** %264, align 8, !dbg !3539
  %266 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %240, i8* %241, i8* %244, i8* %247, i8* %250, i8* %253, i8* %256, i8* %259, i8* %262, i8* %265), !dbg !3540
  %267 = load i32, i32* @x.57
  %268 = load i32, i32* @y.58
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %369, !dbg !3541

275:                                              ; preds = %42
  %276 = load i32, i32* @x.57
  %277 = load i32, i32* @y.58
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %275, %originalBB22alteredBB
  %284 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3542
  %285 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.120, i64 0, i64 0)) #10, !dbg !3543
  %286 = load i8**, i8*** %11, align 8, !dbg !3544
  %287 = getelementptr inbounds i8*, i8** %286, i64 0, !dbg !3544
  %288 = load i8*, i8** %287, align 8, !dbg !3544
  %289 = load i8**, i8*** %11, align 8, !dbg !3545
  %290 = getelementptr inbounds i8*, i8** %289, i64 1, !dbg !3545
  %291 = load i8*, i8** %290, align 8, !dbg !3545
  %292 = load i8**, i8*** %11, align 8, !dbg !3546
  %293 = getelementptr inbounds i8*, i8** %292, i64 2, !dbg !3546
  %294 = load i8*, i8** %293, align 8, !dbg !3546
  %295 = load i8**, i8*** %11, align 8, !dbg !3547
  %296 = getelementptr inbounds i8*, i8** %295, i64 3, !dbg !3547
  %297 = load i8*, i8** %296, align 8, !dbg !3547
  %298 = load i8**, i8*** %11, align 8, !dbg !3548
  %299 = getelementptr inbounds i8*, i8** %298, i64 4, !dbg !3548
  %300 = load i8*, i8** %299, align 8, !dbg !3548
  %301 = load i8**, i8*** %11, align 8, !dbg !3549
  %302 = getelementptr inbounds i8*, i8** %301, i64 5, !dbg !3549
  %303 = load i8*, i8** %302, align 8, !dbg !3549
  %304 = load i8**, i8*** %11, align 8, !dbg !3550
  %305 = getelementptr inbounds i8*, i8** %304, i64 6, !dbg !3550
  %306 = load i8*, i8** %305, align 8, !dbg !3550
  %307 = load i8**, i8*** %11, align 8, !dbg !3551
  %308 = getelementptr inbounds i8*, i8** %307, i64 7, !dbg !3551
  %309 = load i8*, i8** %308, align 8, !dbg !3551
  %310 = load i8**, i8*** %11, align 8, !dbg !3552
  %311 = getelementptr inbounds i8*, i8** %310, i64 8, !dbg !3552
  %312 = load i8*, i8** %311, align 8, !dbg !3552
  %313 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %284, i8* %285, i8* %288, i8* %291, i8* %294, i8* %297, i8* %300, i8* %303, i8* %306, i8* %309, i8* %312), !dbg !3553
  %314 = load i32, i32* @x.57
  %315 = load i32, i32* @y.58
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %369, !dbg !3554

322:                                              ; preds = %42
  %323 = load i32, i32* @x.57
  %324 = load i32, i32* @y.58
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %322, %originalBB26alteredBB
  %331 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3555
  %332 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.121, i64 0, i64 0)) #10, !dbg !3556
  %333 = load i8**, i8*** %11, align 8, !dbg !3557
  %334 = getelementptr inbounds i8*, i8** %333, i64 0, !dbg !3557
  %335 = load i8*, i8** %334, align 8, !dbg !3557
  %336 = load i8**, i8*** %11, align 8, !dbg !3558
  %337 = getelementptr inbounds i8*, i8** %336, i64 1, !dbg !3558
  %338 = load i8*, i8** %337, align 8, !dbg !3558
  %339 = load i8**, i8*** %11, align 8, !dbg !3559
  %340 = getelementptr inbounds i8*, i8** %339, i64 2, !dbg !3559
  %341 = load i8*, i8** %340, align 8, !dbg !3559
  %342 = load i8**, i8*** %11, align 8, !dbg !3560
  %343 = getelementptr inbounds i8*, i8** %342, i64 3, !dbg !3560
  %344 = load i8*, i8** %343, align 8, !dbg !3560
  %345 = load i8**, i8*** %11, align 8, !dbg !3561
  %346 = getelementptr inbounds i8*, i8** %345, i64 4, !dbg !3561
  %347 = load i8*, i8** %346, align 8, !dbg !3561
  %348 = load i8**, i8*** %11, align 8, !dbg !3562
  %349 = getelementptr inbounds i8*, i8** %348, i64 5, !dbg !3562
  %350 = load i8*, i8** %349, align 8, !dbg !3562
  %351 = load i8**, i8*** %11, align 8, !dbg !3563
  %352 = getelementptr inbounds i8*, i8** %351, i64 6, !dbg !3563
  %353 = load i8*, i8** %352, align 8, !dbg !3563
  %354 = load i8**, i8*** %11, align 8, !dbg !3564
  %355 = getelementptr inbounds i8*, i8** %354, i64 7, !dbg !3564
  %356 = load i8*, i8** %355, align 8, !dbg !3564
  %357 = load i8**, i8*** %11, align 8, !dbg !3565
  %358 = getelementptr inbounds i8*, i8** %357, i64 8, !dbg !3565
  %359 = load i8*, i8** %358, align 8, !dbg !3565
  %360 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %331, i8* %332, i8* %335, i8* %338, i8* %341, i8* %344, i8* %347, i8* %350, i8* %353, i8* %356, i8* %359), !dbg !3566
  %361 = load i32, i32* @x.57
  %362 = load i32, i32* @y.58
  %363 = sub i32 %361, 1
  %364 = mul i32 %361, %363
  %365 = urem i32 %364, 2
  %366 = icmp eq i32 %365, 0
  %367 = icmp slt i32 %362, 10
  %368 = or i1 %366, %367
  br i1 %368, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %369, !dbg !3567

369:                                              ; preds = %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216, %originalBBpart212, %133, %117, %originalBBpart28, %originalBBpart24, %55, %54
  ret void, !dbg !3568

originalBBalteredBB:                              ; preds = %originalBB, %21
  %370 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3458
  %371 = load i8*, i8** %9, align 8, !dbg !3459
  %372 = load i8*, i8** %10, align 8, !dbg !3460
  %373 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %370, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.107, i64 0, i64 0), i8* %371, i8* %372), !dbg !3461
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %62
  %374 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3479
  %375 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.113, i64 0, i64 0)) #10, !dbg !3480
  %376 = load i8**, i8*** %11, align 8, !dbg !3481
  %377 = getelementptr inbounds i8*, i8** %376, i64 0, !dbg !3481
  %378 = load i8*, i8** %377, align 8, !dbg !3481
  %379 = load i8**, i8*** %11, align 8, !dbg !3482
  %380 = getelementptr inbounds i8*, i8** %379, i64 1, !dbg !3482
  %381 = load i8*, i8** %380, align 8, !dbg !3482
  %382 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %374, i8* %375, i8* %378, i8* %381), !dbg !3483
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %88
  %383 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3485
  %384 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.114, i64 0, i64 0)) #10, !dbg !3486
  %385 = load i8**, i8*** %11, align 8, !dbg !3487
  %386 = getelementptr inbounds i8*, i8** %385, i64 0, !dbg !3487
  %387 = load i8*, i8** %386, align 8, !dbg !3487
  %388 = load i8**, i8*** %11, align 8, !dbg !3488
  %389 = getelementptr inbounds i8*, i8** %388, i64 1, !dbg !3488
  %390 = load i8*, i8** %389, align 8, !dbg !3488
  %391 = load i8**, i8*** %11, align 8, !dbg !3489
  %392 = getelementptr inbounds i8*, i8** %391, i64 2, !dbg !3489
  %393 = load i8*, i8** %392, align 8, !dbg !3489
  %394 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %383, i8* %384, i8* %387, i8* %390, i8* %393), !dbg !3490
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %152
  %395 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3509
  %396 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.117, i64 0, i64 0)) #10, !dbg !3510
  %397 = load i8**, i8*** %11, align 8, !dbg !3511
  %398 = getelementptr inbounds i8*, i8** %397, i64 0, !dbg !3511
  %399 = load i8*, i8** %398, align 8, !dbg !3511
  %400 = load i8**, i8*** %11, align 8, !dbg !3512
  %401 = getelementptr inbounds i8*, i8** %400, i64 1, !dbg !3512
  %402 = load i8*, i8** %401, align 8, !dbg !3512
  %403 = load i8**, i8*** %11, align 8, !dbg !3513
  %404 = getelementptr inbounds i8*, i8** %403, i64 2, !dbg !3513
  %405 = load i8*, i8** %404, align 8, !dbg !3513
  %406 = load i8**, i8*** %11, align 8, !dbg !3514
  %407 = getelementptr inbounds i8*, i8** %406, i64 3, !dbg !3514
  %408 = load i8*, i8** %407, align 8, !dbg !3514
  %409 = load i8**, i8*** %11, align 8, !dbg !3515
  %410 = getelementptr inbounds i8*, i8** %409, i64 4, !dbg !3515
  %411 = load i8*, i8** %410, align 8, !dbg !3515
  %412 = load i8**, i8*** %11, align 8, !dbg !3516
  %413 = getelementptr inbounds i8*, i8** %412, i64 5, !dbg !3516
  %414 = load i8*, i8** %413, align 8, !dbg !3516
  %415 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %395, i8* %396, i8* %399, i8* %402, i8* %405, i8* %408, i8* %411, i8* %414), !dbg !3517
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %190
  %416 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3519
  %417 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.118, i64 0, i64 0)) #10, !dbg !3520
  %418 = load i8**, i8*** %11, align 8, !dbg !3521
  %419 = getelementptr inbounds i8*, i8** %418, i64 0, !dbg !3521
  %420 = load i8*, i8** %419, align 8, !dbg !3521
  %421 = load i8**, i8*** %11, align 8, !dbg !3522
  %422 = getelementptr inbounds i8*, i8** %421, i64 1, !dbg !3522
  %423 = load i8*, i8** %422, align 8, !dbg !3522
  %424 = load i8**, i8*** %11, align 8, !dbg !3523
  %425 = getelementptr inbounds i8*, i8** %424, i64 2, !dbg !3523
  %426 = load i8*, i8** %425, align 8, !dbg !3523
  %427 = load i8**, i8*** %11, align 8, !dbg !3524
  %428 = getelementptr inbounds i8*, i8** %427, i64 3, !dbg !3524
  %429 = load i8*, i8** %428, align 8, !dbg !3524
  %430 = load i8**, i8*** %11, align 8, !dbg !3525
  %431 = getelementptr inbounds i8*, i8** %430, i64 4, !dbg !3525
  %432 = load i8*, i8** %431, align 8, !dbg !3525
  %433 = load i8**, i8*** %11, align 8, !dbg !3526
  %434 = getelementptr inbounds i8*, i8** %433, i64 5, !dbg !3526
  %435 = load i8*, i8** %434, align 8, !dbg !3526
  %436 = load i8**, i8*** %11, align 8, !dbg !3527
  %437 = getelementptr inbounds i8*, i8** %436, i64 6, !dbg !3527
  %438 = load i8*, i8** %437, align 8, !dbg !3527
  %439 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %416, i8* %417, i8* %420, i8* %423, i8* %426, i8* %429, i8* %432, i8* %435, i8* %438), !dbg !3528
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %231
  %440 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3530
  %441 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.119, i64 0, i64 0)) #10, !dbg !3531
  %442 = load i8**, i8*** %11, align 8, !dbg !3532
  %443 = getelementptr inbounds i8*, i8** %442, i64 0, !dbg !3532
  %444 = load i8*, i8** %443, align 8, !dbg !3532
  %445 = load i8**, i8*** %11, align 8, !dbg !3533
  %446 = getelementptr inbounds i8*, i8** %445, i64 1, !dbg !3533
  %447 = load i8*, i8** %446, align 8, !dbg !3533
  %448 = load i8**, i8*** %11, align 8, !dbg !3534
  %449 = getelementptr inbounds i8*, i8** %448, i64 2, !dbg !3534
  %450 = load i8*, i8** %449, align 8, !dbg !3534
  %451 = load i8**, i8*** %11, align 8, !dbg !3535
  %452 = getelementptr inbounds i8*, i8** %451, i64 3, !dbg !3535
  %453 = load i8*, i8** %452, align 8, !dbg !3535
  %454 = load i8**, i8*** %11, align 8, !dbg !3536
  %455 = getelementptr inbounds i8*, i8** %454, i64 4, !dbg !3536
  %456 = load i8*, i8** %455, align 8, !dbg !3536
  %457 = load i8**, i8*** %11, align 8, !dbg !3537
  %458 = getelementptr inbounds i8*, i8** %457, i64 5, !dbg !3537
  %459 = load i8*, i8** %458, align 8, !dbg !3537
  %460 = load i8**, i8*** %11, align 8, !dbg !3538
  %461 = getelementptr inbounds i8*, i8** %460, i64 6, !dbg !3538
  %462 = load i8*, i8** %461, align 8, !dbg !3538
  %463 = load i8**, i8*** %11, align 8, !dbg !3539
  %464 = getelementptr inbounds i8*, i8** %463, i64 7, !dbg !3539
  %465 = load i8*, i8** %464, align 8, !dbg !3539
  %466 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %440, i8* %441, i8* %444, i8* %447, i8* %450, i8* %453, i8* %456, i8* %459, i8* %462, i8* %465), !dbg !3540
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %275
  %467 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3542
  %468 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.120, i64 0, i64 0)) #10, !dbg !3543
  %469 = load i8**, i8*** %11, align 8, !dbg !3544
  %470 = getelementptr inbounds i8*, i8** %469, i64 0, !dbg !3544
  %471 = load i8*, i8** %470, align 8, !dbg !3544
  %472 = load i8**, i8*** %11, align 8, !dbg !3545
  %473 = getelementptr inbounds i8*, i8** %472, i64 1, !dbg !3545
  %474 = load i8*, i8** %473, align 8, !dbg !3545
  %475 = load i8**, i8*** %11, align 8, !dbg !3546
  %476 = getelementptr inbounds i8*, i8** %475, i64 2, !dbg !3546
  %477 = load i8*, i8** %476, align 8, !dbg !3546
  %478 = load i8**, i8*** %11, align 8, !dbg !3547
  %479 = getelementptr inbounds i8*, i8** %478, i64 3, !dbg !3547
  %480 = load i8*, i8** %479, align 8, !dbg !3547
  %481 = load i8**, i8*** %11, align 8, !dbg !3548
  %482 = getelementptr inbounds i8*, i8** %481, i64 4, !dbg !3548
  %483 = load i8*, i8** %482, align 8, !dbg !3548
  %484 = load i8**, i8*** %11, align 8, !dbg !3549
  %485 = getelementptr inbounds i8*, i8** %484, i64 5, !dbg !3549
  %486 = load i8*, i8** %485, align 8, !dbg !3549
  %487 = load i8**, i8*** %11, align 8, !dbg !3550
  %488 = getelementptr inbounds i8*, i8** %487, i64 6, !dbg !3550
  %489 = load i8*, i8** %488, align 8, !dbg !3550
  %490 = load i8**, i8*** %11, align 8, !dbg !3551
  %491 = getelementptr inbounds i8*, i8** %490, i64 7, !dbg !3551
  %492 = load i8*, i8** %491, align 8, !dbg !3551
  %493 = load i8**, i8*** %11, align 8, !dbg !3552
  %494 = getelementptr inbounds i8*, i8** %493, i64 8, !dbg !3552
  %495 = load i8*, i8** %494, align 8, !dbg !3552
  %496 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %467, i8* %468, i8* %471, i8* %474, i8* %477, i8* %480, i8* %483, i8* %486, i8* %489, i8* %492, i8* %495), !dbg !3553
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %322
  %497 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !3555
  %498 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.121, i64 0, i64 0)) #10, !dbg !3556
  %499 = load i8**, i8*** %11, align 8, !dbg !3557
  %500 = getelementptr inbounds i8*, i8** %499, i64 0, !dbg !3557
  %501 = load i8*, i8** %500, align 8, !dbg !3557
  %502 = load i8**, i8*** %11, align 8, !dbg !3558
  %503 = getelementptr inbounds i8*, i8** %502, i64 1, !dbg !3558
  %504 = load i8*, i8** %503, align 8, !dbg !3558
  %505 = load i8**, i8*** %11, align 8, !dbg !3559
  %506 = getelementptr inbounds i8*, i8** %505, i64 2, !dbg !3559
  %507 = load i8*, i8** %506, align 8, !dbg !3559
  %508 = load i8**, i8*** %11, align 8, !dbg !3560
  %509 = getelementptr inbounds i8*, i8** %508, i64 3, !dbg !3560
  %510 = load i8*, i8** %509, align 8, !dbg !3560
  %511 = load i8**, i8*** %11, align 8, !dbg !3561
  %512 = getelementptr inbounds i8*, i8** %511, i64 4, !dbg !3561
  %513 = load i8*, i8** %512, align 8, !dbg !3561
  %514 = load i8**, i8*** %11, align 8, !dbg !3562
  %515 = getelementptr inbounds i8*, i8** %514, i64 5, !dbg !3562
  %516 = load i8*, i8** %515, align 8, !dbg !3562
  %517 = load i8**, i8*** %11, align 8, !dbg !3563
  %518 = getelementptr inbounds i8*, i8** %517, i64 6, !dbg !3563
  %519 = load i8*, i8** %518, align 8, !dbg !3563
  %520 = load i8**, i8*** %11, align 8, !dbg !3564
  %521 = getelementptr inbounds i8*, i8** %520, i64 7, !dbg !3564
  %522 = load i8*, i8** %521, align 8, !dbg !3564
  %523 = load i8**, i8*** %11, align 8, !dbg !3565
  %524 = getelementptr inbounds i8*, i8** %523, i64 8, !dbg !3565
  %525 = load i8*, i8** %524, align 8, !dbg !3565
  %526 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %497, i8* %498, i8* %501, i8* %504, i8* %507, i8* %510, i8* %513, i8* %516, i8* %519, i8* %522, i8* %525), !dbg !3566
  br label %originalBB26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !3569 {
  %6 = alloca %struct._IO_FILE*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.__va_list_tag*, align 8
  %11 = alloca i64, align 8
  %12 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %6, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %6, metadata !3579, metadata !DIExpression()), !dbg !3580
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !3581, metadata !DIExpression()), !dbg !3582
  store i8* %2, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !3583, metadata !DIExpression()), !dbg !3584
  store i8* %3, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3585, metadata !DIExpression()), !dbg !3586
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %10, metadata !3587, metadata !DIExpression()), !dbg !3588
  call void @llvm.dbg.declare(metadata i64* %11, metadata !3589, metadata !DIExpression()), !dbg !3590
  call void @llvm.dbg.declare(metadata [10 x i8*]* %12, metadata !3591, metadata !DIExpression()), !dbg !3593
  store i64 0, i64* %11, align 8, !dbg !3594
  br label %13, !dbg !3596

13:                                               ; preds = %originalBBpart24, %5
  %14 = load i64, i64* %11, align 8, !dbg !3597
  %15 = icmp ult i64 %14, 10, !dbg !3599
  br i1 %15, label %16, label %54, !dbg !3600

16:                                               ; preds = %13
  %17 = load %struct.__va_list_tag*, %struct.__va_list_tag** %10, align 8, !dbg !3601
  %18 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 0, !dbg !3601
  %19 = load i32, i32* %18, align 8, !dbg !3601
  %20 = icmp ule i32 %19, 40, !dbg !3601
  br i1 %20, label %21, label %27, !dbg !3601

21:                                               ; preds = %16
  %22 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 3, !dbg !3601
  %23 = load i8*, i8** %22, align 8, !dbg !3601
  %24 = getelementptr i8, i8* %23, i32 %19, !dbg !3601
  %25 = bitcast i8* %24 to i8**, !dbg !3601
  %26 = add i32 %19, 8, !dbg !3601
  store i32 %26, i32* %18, align 8, !dbg !3601
  br label %48, !dbg !3601

27:                                               ; preds = %16
  %28 = load i32, i32* @x.59
  %29 = load i32, i32* @y.60
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %27, %originalBBalteredBB
  %36 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 2, !dbg !3601
  %37 = load i8*, i8** %36, align 8, !dbg !3601
  %38 = bitcast i8* %37 to i8**, !dbg !3601
  %39 = getelementptr i8, i8* %37, i32 8, !dbg !3601
  store i8* %39, i8** %36, align 8, !dbg !3601
  %40 = load i32, i32* @x.59
  %41 = load i32, i32* @y.60
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %48, !dbg !3601

48:                                               ; preds = %originalBBpart2, %21
  %49 = phi i8** [ %25, %21 ], [ %38, %originalBBpart2 ], !dbg !3601
  %50 = load i8*, i8** %49, align 8, !dbg !3601
  %51 = load i64, i64* %11, align 8, !dbg !3602
  %52 = getelementptr inbounds [10 x i8*], [10 x i8*]* %12, i64 0, i64 %51, !dbg !3603
  store i8* %50, i8** %52, align 8, !dbg !3604
  %53 = icmp ne i8* %50, null, !dbg !3605
  br label %54

54:                                               ; preds = %48, %13
  %55 = phi i1 [ false, %13 ], [ %53, %48 ], !dbg !3606
  br i1 %55, label %56, label %76, !dbg !3607

56:                                               ; preds = %54
  br label %57, !dbg !3607

57:                                               ; preds = %56
  %58 = load i32, i32* @x.59
  %59 = load i32, i32* @y.60
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %57, %originalBB1alteredBB
  %66 = load i64, i64* %11, align 8, !dbg !3608
  %67 = add i64 %66, 1, !dbg !3608
  store i64 %67, i64* %11, align 8, !dbg !3608
  %68 = load i32, i32* @x.59
  %69 = load i32, i32* @y.60
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %13, !dbg !3609, !llvm.loop !3610

76:                                               ; preds = %54
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8, !dbg !3612
  %78 = load i8*, i8** %7, align 8, !dbg !3613
  %79 = load i8*, i8** %8, align 8, !dbg !3614
  %80 = load i8*, i8** %9, align 8, !dbg !3615
  %81 = getelementptr inbounds [10 x i8*], [10 x i8*]* %12, i64 0, i64 0, !dbg !3616
  %82 = load i64, i64* %11, align 8, !dbg !3617
  call void @version_etc_arn(%struct._IO_FILE* %77, i8* %78, i8* %79, i8* %80, i8** %81, i64 %82), !dbg !3618
  ret void, !dbg !3619

originalBBalteredBB:                              ; preds = %originalBB, %27
  %83 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %17, i32 0, i32 2, !dbg !3601
  %84 = load i8*, i8** %83, align 8, !dbg !3601
  %85 = bitcast i8* %84 to i8**, !dbg !3601
  %86 = getelementptr i8, i8* %84, i32 8, !dbg !3601
  store i8* %86, i8** %83, align 8, !dbg !3601
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %57
  %87 = load i64, i64* %11, align 8, !dbg !3608
  %_ = shl i64 %87, 1
  %_2 = sub i64 %87, 1
  %gen = mul i64 %_2, 1
  %88 = add i64 %87, 1, !dbg !3608
  store i64 %88, i64* %11, align 8, !dbg !3608
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !3620 {
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %5, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %5, metadata !3623, metadata !DIExpression()), !dbg !3624
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !3625, metadata !DIExpression()), !dbg !3626
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !3627, metadata !DIExpression()), !dbg !3628
  store i8* %3, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !3629, metadata !DIExpression()), !dbg !3630
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %9, metadata !3631, metadata !DIExpression()), !dbg !3637
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !3638
  %11 = bitcast %struct.__va_list_tag* %10 to i8*, !dbg !3638
  call void @llvm.va_start(i8* %11), !dbg !3638
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3639
  %13 = load i8*, i8** %6, align 8, !dbg !3640
  %14 = load i8*, i8** %7, align 8, !dbg !3641
  %15 = load i8*, i8** %8, align 8, !dbg !3642
  %16 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !3643
  call void @version_etc_va(%struct._IO_FILE* %12, i8* %13, i8* %14, i8* %15, %struct.__va_list_tag* %16), !dbg !3644
  %17 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !3645
  %18 = bitcast %struct.__va_list_tag* %17 to i8*, !dbg !3645
  call void @llvm.va_end(i8* %18), !dbg !3645
  ret void, !dbg !3646
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !3647 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3651, metadata !DIExpression()), !dbg !3652
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3653, metadata !DIExpression()), !dbg !3654
  %12 = load i64, i64* %10, align 8, !dbg !3655
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !3656
  store i8* %13, i8** %11, align 8, !dbg !3654
  %14 = load i8*, i8** %11, align 8, !dbg !3657
  %15 = icmp ne i8* %14, null, !dbg !3657
  %16 = load i32, i32* @x.63
  %17 = load i32, i32* @y.64
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %60, label %24, !dbg !3659

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.63
  %26 = load i32, i32* @y.64
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !3660
  %34 = icmp ne i64 %33, 0, !dbg !3661
  %35 = load i32, i32* @x.63
  %36 = load i32, i32* @y.64
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %60, !dbg !3662

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.63
  %45 = load i32, i32* @y.64
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3663
  %52 = load i32, i32* @x.63
  %53 = load i32, i32* @y.64
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3663

60:                                               ; preds = %originalBBpart24, %originalBBpart2
  %61 = load i8*, i8** %11, align 8, !dbg !3664
  ret i8* %61, !dbg !3665

originalBBalteredBB:                              ; preds = %originalBB, %1
  %62 = alloca i64, align 8
  %63 = alloca i8*, align 8
  store i64 %0, i64* %62, align 8
  call void @llvm.dbg.declare(metadata i64* %62, metadata !3666, metadata !DIExpression()), !dbg !3652
  call void @llvm.dbg.declare(metadata i8** %63, metadata !3669, metadata !DIExpression()), !dbg !3654
  %64 = load i64, i64* %62, align 8, !dbg !3655
  %65 = call noalias i8* @malloc(i64 %64) #10, !dbg !3656
  store i8* %65, i8** %63, align 8, !dbg !3654
  %66 = load i8*, i8** %63, align 8, !dbg !3657
  %67 = icmp ne i8* %66, null, !dbg !3657
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %68 = load i64, i64* %10, align 8, !dbg !3660
  %69 = icmp ne i64 %68, 0, !dbg !3661
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  call void @xalloc_die() #14, !dbg !3663
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !3670 {
  %3 = load i32, i32* @x.65
  %4 = load i32, i32* @y.66
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3673, metadata !DIExpression()), !dbg !3674
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !3675, metadata !DIExpression()), !dbg !3676
  %14 = load i64, i64* %13, align 8, !dbg !3677
  %15 = icmp ne i64 %14, 0, !dbg !3677
  %16 = load i32, i32* @x.65
  %17 = load i32, i32* @y.66
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %61, label %24, !dbg !3679

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.65
  %26 = load i32, i32* @y.66
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !3680
  %34 = icmp ne i8* %33, null, !dbg !3680
  %35 = load i32, i32* @x.65
  %36 = load i32, i32* @y.66
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %61, !dbg !3681

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.65
  %45 = load i32, i32* @y.66
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i8*, i8** %12, align 8, !dbg !3682
  call void @free(i8* %52) #10, !dbg !3684
  store i8* null, i8** %11, align 8, !dbg !3685
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %105, !dbg !3685

61:                                               ; preds = %originalBBpart24, %originalBBpart2
  %62 = load i8*, i8** %12, align 8, !dbg !3686
  %63 = load i64, i64* %13, align 8, !dbg !3687
  %64 = call i8* @realloc(i8* %62, i64 %63) #10, !dbg !3688
  store i8* %64, i8** %12, align 8, !dbg !3689
  %65 = load i8*, i8** %12, align 8, !dbg !3690
  %66 = icmp ne i8* %65, null, !dbg !3690
  br i1 %66, label %87, label %67, !dbg !3692

67:                                               ; preds = %61
  %68 = load i32, i32* @x.65
  %69 = load i32, i32* @y.66
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %76 = load i64, i64* %13, align 8, !dbg !3693
  %77 = icmp ne i64 %76, 0, !dbg !3693
  %78 = load i32, i32* @x.65
  %79 = load i32, i32* @y.66
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %77, label %86, label %87, !dbg !3694

86:                                               ; preds = %originalBBpart212
  call void @xalloc_die() #14, !dbg !3695
  unreachable, !dbg !3695

87:                                               ; preds = %originalBBpart212, %61
  %88 = load i32, i32* @x.65
  %89 = load i32, i32* @y.66
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load i8*, i8** %12, align 8, !dbg !3696
  store i8* %96, i8** %11, align 8, !dbg !3697
  %97 = load i32, i32* @x.65
  %98 = load i32, i32* @y.66
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %105, !dbg !3697

105:                                              ; preds = %originalBBpart216, %originalBBpart28
  %106 = load i32, i32* @x.65
  %107 = load i32, i32* @y.66
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %105, %originalBB18alteredBB
  %114 = load i8*, i8** %11, align 8, !dbg !3698
  %115 = load i32, i32* @x.65
  %116 = load i32, i32* @y.66
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i8* %114, !dbg !3698

originalBBalteredBB:                              ; preds = %originalBB, %2
  %123 = alloca i8*, align 8
  %124 = alloca i8*, align 8
  %125 = alloca i64, align 8
  store i8* %0, i8** %124, align 8
  call void @llvm.dbg.declare(metadata i8** %124, metadata !3699, metadata !DIExpression()), !dbg !3674
  store i64 %1, i64* %125, align 8
  call void @llvm.dbg.declare(metadata i64* %125, metadata !3702, metadata !DIExpression()), !dbg !3676
  %126 = load i64, i64* %125, align 8, !dbg !3677
  %127 = icmp ne i64 %126, 0, !dbg !3677
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %128 = load i8*, i8** %12, align 8, !dbg !3680
  %129 = icmp ne i8* %128, null, !dbg !3680
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %130 = load i8*, i8** %12, align 8, !dbg !3682
  call void @free(i8* %130) #10, !dbg !3684
  store i8* null, i8** %11, align 8, !dbg !3685
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %131 = load i64, i64* %13, align 8, !dbg !3693
  %132 = icmp ne i64 %131, 0, !dbg !3693
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %133 = load i8*, i8** %12, align 8, !dbg !3696
  store i8* %133, i8** %11, align 8, !dbg !3697
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %105
  %134 = load i8*, i8** %11, align 8, !dbg !3698
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !3703 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !3707, metadata !DIExpression()), !dbg !3708
  %3 = load i64, i64* %2, align 8, !dbg !3709
  %4 = call noalias i8* @xmalloc(i64 %3), !dbg !3709
  ret i8* %4, !dbg !3710
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xmemdup(i8*, i64) #4 !dbg !3711 {
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3716, metadata !DIExpression()), !dbg !3717
  store i64 %1, i64* %4, align 8
  call void @llvm.dbg.declare(metadata i64* %4, metadata !3718, metadata !DIExpression()), !dbg !3719
  %5 = load i64, i64* %4, align 8, !dbg !3720
  %6 = call noalias i8* @xmalloc(i64 %5), !dbg !3721
  %7 = load i8*, i8** %3, align 8, !dbg !3722
  %8 = load i64, i64* %4, align 8, !dbg !3723
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %7, i64 %8, i1 false), !dbg !3724
  ret i8* %6, !dbg !3725
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xstrdup(i8*) #4 !dbg !3726 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !3727, metadata !DIExpression()), !dbg !3728
  %3 = load i8*, i8** %2, align 8, !dbg !3729
  %4 = load i8*, i8** %2, align 8, !dbg !3730
  %5 = call i64 @strlen(i8* %4) #13, !dbg !3731
  %6 = add i64 %5, 1, !dbg !3732
  %7 = call i8* @xmemdup(i8* %3, i64 %6), !dbg !3733
  ret i8* %7, !dbg !3734
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !3735 {
  %1 = load volatile i32, i32* @exit_failure, align 4, !dbg !3737
  %2 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.136, i64 0, i64 0)) #10, !dbg !3738
  call void (i32, i32, i8*, ...) @error(i32 %1, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.137, i64 0, i64 0), i8* %2), !dbg !3739
  call void @abort() #12, !dbg !3740
  unreachable, !dbg !3740
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xgetgroups(i8*, i32, i32**) #4 !dbg !3741 {
  %4 = load i32, i32* @x.75
  %5 = load i32, i32* @y.76
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32**, align 8
  %15 = alloca i32, align 4
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3746, metadata !DIExpression()), !dbg !3747
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3748, metadata !DIExpression()), !dbg !3749
  store i32** %2, i32*** %14, align 8
  call void @llvm.dbg.declare(metadata i32*** %14, metadata !3750, metadata !DIExpression()), !dbg !3751
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3752, metadata !DIExpression()), !dbg !3753
  %16 = load i8*, i8** %12, align 8, !dbg !3754
  %17 = load i32, i32* %13, align 4, !dbg !3755
  %18 = load i32**, i32*** %14, align 8, !dbg !3756
  %19 = call i32 @mgetgroups(i8* %16, i32 %17, i32** %18), !dbg !3757
  store i32 %19, i32* %15, align 4, !dbg !3753
  %20 = load i32, i32* %15, align 4, !dbg !3758
  %21 = icmp eq i32 %20, -1, !dbg !3760
  %22 = load i32, i32* @x.75
  %23 = load i32, i32* @y.76
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %67, !dbg !3761

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.75
  %32 = load i32, i32* @y.76
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = call i32* @__errno_location() #15, !dbg !3762
  %40 = load i32, i32* %39, align 4, !dbg !3762
  %41 = icmp eq i32 %40, 12, !dbg !3763
  %42 = load i32, i32* @x.75
  %43 = load i32, i32* @y.76
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %41, label %50, label %67, !dbg !3764

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.75
  %52 = load i32, i32* @y.76
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3765
  %59 = load i32, i32* @x.75
  %60 = load i32, i32* @y.76
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3765

67:                                               ; preds = %originalBBpart24, %originalBBpart2
  %68 = load i32, i32* @x.75
  %69 = load i32, i32* @y.76
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %76 = load i32, i32* %15, align 4, !dbg !3766
  %77 = load i32, i32* @x.75
  %78 = load i32, i32* @y.76
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i32 %76, !dbg !3767

originalBBalteredBB:                              ; preds = %originalBB, %3
  %85 = alloca i8*, align 8
  %86 = alloca i32, align 4
  %87 = alloca i32**, align 8
  %88 = alloca i32, align 4
  store i8* %0, i8** %85, align 8
  call void @llvm.dbg.declare(metadata i8** %85, metadata !3768, metadata !DIExpression()), !dbg !3747
  store i32 %1, i32* %86, align 4
  call void @llvm.dbg.declare(metadata i32* %86, metadata !3771, metadata !DIExpression()), !dbg !3749
  store i32** %2, i32*** %87, align 8
  call void @llvm.dbg.declare(metadata i32*** %87, metadata !3772, metadata !DIExpression()), !dbg !3751
  call void @llvm.dbg.declare(metadata i32* %88, metadata !3773, metadata !DIExpression()), !dbg !3753
  %89 = load i8*, i8** %85, align 8, !dbg !3754
  %90 = load i32, i32* %86, align 4, !dbg !3755
  %91 = load i32**, i32*** %87, align 8, !dbg !3756
  %92 = call i32 @mgetgroups(i8* %89, i32 %90, i32** %91), !dbg !3757
  store i32 %92, i32* %88, align 4, !dbg !3753
  %93 = load i32, i32* %88, align 4, !dbg !3758
  %94 = icmp eq i32 %93, -1, !dbg !3760
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %95 = call i32* @__errno_location() #15, !dbg !3762
  %96 = load i32, i32* %95, align 4, !dbg !3762
  %97 = icmp eq i32 %96, 12, !dbg !3763
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  call void @xalloc_die() #14, !dbg !3765
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %98 = load i32, i32* %15, align 4, !dbg !3766
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @xstrtoul(i8*, i8**, i32, i64*, i8*) #4 !dbg !3774 {
  %6 = load i32, i32* @x.77
  %7 = load i32, i32* @y.78
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8**, align 8
  %17 = alloca i32, align 4
  %18 = alloca i64*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i8**, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  store i8* %0, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3780, metadata !DIExpression()), !dbg !3781
  store i8** %1, i8*** %16, align 8
  call void @llvm.dbg.declare(metadata i8*** %16, metadata !3782, metadata !DIExpression()), !dbg !3783
  store i32 %2, i32* %17, align 4
  call void @llvm.dbg.declare(metadata i32* %17, metadata !3784, metadata !DIExpression()), !dbg !3785
  store i64* %3, i64** %18, align 8
  call void @llvm.dbg.declare(metadata i64** %18, metadata !3786, metadata !DIExpression()), !dbg !3787
  store i8* %4, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !3788, metadata !DIExpression()), !dbg !3789
  call void @llvm.dbg.declare(metadata i8** %20, metadata !3790, metadata !DIExpression()), !dbg !3791
  call void @llvm.dbg.declare(metadata i8*** %21, metadata !3792, metadata !DIExpression()), !dbg !3793
  call void @llvm.dbg.declare(metadata i64* %22, metadata !3794, metadata !DIExpression()), !dbg !3795
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3796, metadata !DIExpression()), !dbg !3797
  store i32 0, i32* %23, align 4, !dbg !3797
  %29 = load i32, i32* %17, align 4, !dbg !3798
  %30 = icmp sle i32 0, %29, !dbg !3798
  %31 = load i32, i32* @x.77
  %32 = load i32, i32* @y.78
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %30, label %39, label %59, !dbg !3798

39:                                               ; preds = %originalBBpart2
  %40 = load i32, i32* @x.77
  %41 = load i32, i32* @y.78
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %48 = load i32, i32* %17, align 4, !dbg !3798
  %49 = icmp sle i32 %48, 36, !dbg !3798
  %50 = load i32, i32* @x.77
  %51 = load i32, i32* @y.78
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %49, label %58, label %59, !dbg !3801

58:                                               ; preds = %originalBBpart24
  br label %76, !dbg !3801

59:                                               ; preds = %originalBBpart24, %originalBBpart2
  %60 = load i32, i32* @x.77
  %61 = load i32, i32* @y.78
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.143, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @__PRETTY_FUNCTION__.xstrtoul, i64 0, i64 0)) #12, !dbg !3798
  %68 = load i32, i32* @x.77
  %69 = load i32, i32* @y.78
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3798

76:                                               ; preds = %58
  %77 = load i8**, i8*** %16, align 8, !dbg !3802
  %78 = icmp ne i8** %77, null, !dbg !3802
  br i1 %78, label %79, label %81, !dbg !3802

79:                                               ; preds = %76
  %80 = load i8**, i8*** %16, align 8, !dbg !3803
  br label %82, !dbg !3802

81:                                               ; preds = %76
  br label %82, !dbg !3802

82:                                               ; preds = %81, %79
  %83 = phi i8** [ %80, %79 ], [ %20, %81 ], !dbg !3802
  store i8** %83, i8*** %21, align 8, !dbg !3804
  %84 = call i32* @__errno_location() #15, !dbg !3805
  store i32 0, i32* %84, align 4, !dbg !3806
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3807, metadata !DIExpression()), !dbg !3810
  %85 = load i8*, i8** %15, align 8, !dbg !3811
  store i8* %85, i8** %24, align 8, !dbg !3810
  call void @llvm.dbg.declare(metadata i8* %25, metadata !3812, metadata !DIExpression()), !dbg !3813
  %86 = load i8*, i8** %24, align 8, !dbg !3814
  %87 = load i8, i8* %86, align 1, !dbg !3815
  store i8 %87, i8* %25, align 1, !dbg !3813
  br label %88, !dbg !3816

88:                                               ; preds = %originalBBpart224, %82
  %89 = load i32, i32* @x.77
  %90 = load i32, i32* @y.78
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %88, %originalBB10alteredBB
  %97 = call i16** @__ctype_b_loc() #15, !dbg !3817
  %98 = load i16*, i16** %97, align 8, !dbg !3817
  %99 = load i8, i8* %25, align 1, !dbg !3817
  %100 = zext i8 %99 to i32, !dbg !3817
  %101 = sext i32 %100 to i64, !dbg !3817
  %102 = getelementptr inbounds i16, i16* %98, i64 %101, !dbg !3817
  %103 = load i16, i16* %102, align 2, !dbg !3817
  %104 = zext i16 %103 to i32, !dbg !3817
  %105 = and i32 %104, 8192, !dbg !3817
  %106 = icmp ne i32 %105, 0, !dbg !3816
  %107 = load i32, i32* @x.77
  %108 = load i32, i32* @y.78
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart220, label %originalBB10alteredBB

originalBBpart220:                                ; preds = %originalBB10
  br i1 %106, label %115, label %135, !dbg !3816

115:                                              ; preds = %originalBBpart220
  %116 = load i32, i32* @x.77
  %117 = load i32, i32* @y.78
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %115, %originalBB22alteredBB
  %124 = load i8*, i8** %24, align 8, !dbg !3818
  %125 = getelementptr inbounds i8, i8* %124, i32 1, !dbg !3818
  store i8* %125, i8** %24, align 8, !dbg !3818
  %126 = load i8, i8* %125, align 1, !dbg !3819
  store i8 %126, i8* %25, align 1, !dbg !3820
  %127 = load i32, i32* @x.77
  %128 = load i32, i32* @y.78
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %88, !dbg !3816, !llvm.loop !3821

135:                                              ; preds = %originalBBpart220
  %136 = load i8, i8* %25, align 1, !dbg !3823
  %137 = zext i8 %136 to i32, !dbg !3823
  %138 = icmp eq i32 %137, 45, !dbg !3825
  br i1 %138, label %139, label %156, !dbg !3826

139:                                              ; preds = %135
  %140 = load i32, i32* @x.77
  %141 = load i32, i32* @y.78
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %139, %originalBB26alteredBB
  store i32 4, i32* %14, align 4, !dbg !3827
  %148 = load i32, i32* @x.77
  %149 = load i32, i32* @y.78
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %605, !dbg !3827

156:                                              ; preds = %135
  %157 = load i8*, i8** %15, align 8, !dbg !3828
  %158 = load i8**, i8*** %21, align 8, !dbg !3829
  %159 = load i32, i32* %17, align 4, !dbg !3830
  %160 = call i64 @strtoul(i8* %157, i8** %158, i32 %159) #10, !dbg !3831
  store i64 %160, i64* %22, align 8, !dbg !3832
  %161 = load i8**, i8*** %21, align 8, !dbg !3833
  %162 = load i8*, i8** %161, align 8, !dbg !3835
  %163 = load i8*, i8** %15, align 8, !dbg !3836
  %164 = icmp eq i8* %162, %163, !dbg !3837
  br i1 %164, label %165, label %233, !dbg !3838

165:                                              ; preds = %156
  %166 = load i8*, i8** %19, align 8, !dbg !3839
  %167 = icmp ne i8* %166, null, !dbg !3839
  br i1 %167, label %168, label %231, !dbg !3842

168:                                              ; preds = %165
  %169 = load i32, i32* @x.77
  %170 = load i32, i32* @y.78
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %168, %originalBB30alteredBB
  %177 = load i8**, i8*** %21, align 8, !dbg !3843
  %178 = load i8*, i8** %177, align 8, !dbg !3844
  %179 = load i8, i8* %178, align 1, !dbg !3845
  %180 = sext i8 %179 to i32, !dbg !3845
  %181 = icmp ne i32 %180, 0, !dbg !3845
  %182 = load i32, i32* @x.77
  %183 = load i32, i32* @y.78
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %181, label %190, label %231, !dbg !3846

190:                                              ; preds = %originalBBpart232
  %191 = load i32, i32* @x.77
  %192 = load i32, i32* @y.78
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %190, %originalBB34alteredBB
  %199 = load i8*, i8** %19, align 8, !dbg !3847
  %200 = load i8**, i8*** %21, align 8, !dbg !3848
  %201 = load i8*, i8** %200, align 8, !dbg !3849
  %202 = load i8, i8* %201, align 1, !dbg !3850
  %203 = sext i8 %202 to i32, !dbg !3850
  %204 = call i8* @strchr(i8* %199, i32 %203) #13, !dbg !3851
  %205 = icmp ne i8* %204, null, !dbg !3851
  %206 = load i32, i32* @x.77
  %207 = load i32, i32* @y.78
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %205, label %214, label %231, !dbg !3852

214:                                              ; preds = %originalBBpart236
  %215 = load i32, i32* @x.77
  %216 = load i32, i32* @y.78
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %214, %originalBB38alteredBB
  store i64 1, i64* %22, align 8, !dbg !3853
  %223 = load i32, i32* @x.77
  %224 = load i32, i32* @y.78
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %232, !dbg !3854

231:                                              ; preds = %originalBBpart236, %originalBBpart232, %165
  store i32 4, i32* %14, align 4, !dbg !3855
  br label %605, !dbg !3855

232:                                              ; preds = %originalBBpart240
  br label %260, !dbg !3856

233:                                              ; preds = %156
  %234 = call i32* @__errno_location() #15, !dbg !3857
  %235 = load i32, i32* %234, align 4, !dbg !3857
  %236 = icmp ne i32 %235, 0, !dbg !3859
  br i1 %236, label %237, label %259, !dbg !3860

237:                                              ; preds = %233
  %238 = call i32* @__errno_location() #15, !dbg !3861
  %239 = load i32, i32* %238, align 4, !dbg !3861
  %240 = icmp ne i32 %239, 34, !dbg !3864
  br i1 %240, label %241, label %258, !dbg !3865

241:                                              ; preds = %237
  %242 = load i32, i32* @x.77
  %243 = load i32, i32* @y.78
  %244 = sub i32 %242, 1
  %245 = mul i32 %242, %244
  %246 = urem i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %243, 10
  %249 = or i1 %247, %248
  br i1 %249, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %241, %originalBB42alteredBB
  store i32 4, i32* %14, align 4, !dbg !3866
  %250 = load i32, i32* @x.77
  %251 = load i32, i32* @y.78
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %605, !dbg !3866

258:                                              ; preds = %237
  store i32 1, i32* %23, align 4, !dbg !3867
  br label %259, !dbg !3868

259:                                              ; preds = %258, %233
  br label %260

260:                                              ; preds = %259, %232
  %261 = load i8*, i8** %19, align 8, !dbg !3869
  %262 = icmp ne i8* %261, null, !dbg !3869
  br i1 %262, label %267, label %263, !dbg !3871

263:                                              ; preds = %260
  %264 = load i64, i64* %22, align 8, !dbg !3872
  %265 = load i64*, i64** %18, align 8, !dbg !3874
  store i64 %264, i64* %265, align 8, !dbg !3875
  %266 = load i32, i32* %23, align 4, !dbg !3876
  store i32 %266, i32* %14, align 4, !dbg !3877
  br label %605, !dbg !3877

267:                                              ; preds = %260
  %268 = load i8**, i8*** %21, align 8, !dbg !3878
  %269 = load i8*, i8** %268, align 8, !dbg !3880
  %270 = load i8, i8* %269, align 1, !dbg !3881
  %271 = sext i8 %270 to i32, !dbg !3881
  %272 = icmp ne i32 %271, 0, !dbg !3882
  br i1 %272, label %273, label %585, !dbg !3883

273:                                              ; preds = %267
  call void @llvm.dbg.declare(metadata i32* %26, metadata !3884, metadata !DIExpression()), !dbg !3886
  %274 = load i32, i32* @x.77
  %275 = load i32, i32* @y.78
  %276 = sub i32 %274, 1
  %277 = mul i32 %274, %276
  %278 = urem i32 %277, 2
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %279, %280
  br i1 %281, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %273, %originalBB46alteredBB
  store i32 1024, i32* %26, align 4, !dbg !3886
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3887, metadata !DIExpression()), !dbg !3888
  store i32 1, i32* %27, align 4, !dbg !3888
  call void @llvm.dbg.declare(metadata i32* %28, metadata !3889, metadata !DIExpression()), !dbg !3890
  %282 = load i8*, i8** %19, align 8, !dbg !3891
  %283 = load i8**, i8*** %21, align 8, !dbg !3893
  %284 = load i8*, i8** %283, align 8, !dbg !3894
  %285 = load i8, i8* %284, align 1, !dbg !3895
  %286 = sext i8 %285 to i32, !dbg !3895
  %287 = call i8* @strchr(i8* %282, i32 %286) #13, !dbg !3896
  %288 = icmp ne i8* %287, null, !dbg !3896
  %289 = load i32, i32* @x.77
  %290 = load i32, i32* @y.78
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %288, label %302, label %297, !dbg !3897

297:                                              ; preds = %originalBBpart248
  %298 = load i64, i64* %22, align 8, !dbg !3898
  %299 = load i64*, i64** %18, align 8, !dbg !3900
  store i64 %298, i64* %299, align 8, !dbg !3901
  %300 = load i32, i32* %23, align 4, !dbg !3902
  %301 = or i32 %300, 2, !dbg !3903
  store i32 %301, i32* %14, align 4, !dbg !3904
  br label %605, !dbg !3904

302:                                              ; preds = %originalBBpart248
  %303 = load i32, i32* @x.77
  %304 = load i32, i32* @y.78
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %302, %originalBB50alteredBB
  %311 = load i8**, i8*** %21, align 8, !dbg !3905
  %312 = load i8*, i8** %311, align 8, !dbg !3906
  %313 = load i8, i8* %312, align 1, !dbg !3907
  %314 = sext i8 %313 to i32, !dbg !3907
  %315 = load i32, i32* @x.77
  %316 = load i32, i32* @y.78
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  switch i32 %314, label %399 [
    i32 69, label %323
    i32 71, label %323
    i32 103, label %323
    i32 107, label %323
    i32 75, label %323
    i32 77, label %323
    i32 109, label %323
    i32 80, label %323
    i32 84, label %323
    i32 116, label %323
    i32 89, label %323
    i32 90, label %323
  ], !dbg !3908

323:                                              ; preds = %originalBBpart252, %originalBBpart252, %originalBBpart252, %originalBBpart252, %originalBBpart252, %originalBBpart252, %originalBBpart252, %originalBBpart252, %originalBBpart252, %originalBBpart252, %originalBBpart252, %originalBBpart252
  %324 = load i32, i32* @x.77
  %325 = load i32, i32* @y.78
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %323, %originalBB54alteredBB
  %332 = load i8*, i8** %19, align 8, !dbg !3909
  %333 = call i8* @strchr(i8* %332, i32 48) #13, !dbg !3912
  %334 = icmp ne i8* %333, null, !dbg !3912
  %335 = load i32, i32* @x.77
  %336 = load i32, i32* @y.78
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %334, label %343, label %398, !dbg !3913

343:                                              ; preds = %originalBBpart256
  %344 = load i8**, i8*** %21, align 8, !dbg !3914
  %345 = getelementptr inbounds i8*, i8** %344, i64 0, !dbg !3914
  %346 = load i8*, i8** %345, align 8, !dbg !3914
  %347 = getelementptr inbounds i8, i8* %346, i64 1, !dbg !3914
  %348 = load i8, i8* %347, align 1, !dbg !3914
  %349 = sext i8 %348 to i32, !dbg !3914
  switch i32 %349, label %381 [
    i32 105, label %350
    i32 66, label %378
    i32 68, label %378
  ], !dbg !3915

350:                                              ; preds = %343
  %351 = load i8**, i8*** %21, align 8, !dbg !3916
  %352 = getelementptr inbounds i8*, i8** %351, i64 0, !dbg !3916
  %353 = load i8*, i8** %352, align 8, !dbg !3916
  %354 = getelementptr inbounds i8, i8* %353, i64 2, !dbg !3916
  %355 = load i8, i8* %354, align 1, !dbg !3916
  %356 = sext i8 %355 to i32, !dbg !3916
  %357 = icmp eq i32 %356, 66, !dbg !3919
  br i1 %357, label %358, label %361, !dbg !3920

358:                                              ; preds = %350
  %359 = load i32, i32* %27, align 4, !dbg !3921
  %360 = add nsw i32 %359, 2, !dbg !3921
  store i32 %360, i32* %27, align 4, !dbg !3921
  br label %361, !dbg !3922

361:                                              ; preds = %358, %350
  %362 = load i32, i32* @x.77
  %363 = load i32, i32* @y.78
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %361, %originalBB58alteredBB
  %370 = load i32, i32* @x.77
  %371 = load i32, i32* @y.78
  %372 = sub i32 %370, 1
  %373 = mul i32 %370, %372
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %375, %376
  br i1 %377, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %381, !dbg !3923

378:                                              ; preds = %343, %343
  store i32 1000, i32* %26, align 4, !dbg !3924
  %379 = load i32, i32* %27, align 4, !dbg !3925
  %380 = add nsw i32 %379, 1, !dbg !3925
  store i32 %380, i32* %27, align 4, !dbg !3925
  br label %381, !dbg !3926

381:                                              ; preds = %378, %originalBBpart260, %343
  %382 = load i32, i32* @x.77
  %383 = load i32, i32* @y.78
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %381, %originalBB62alteredBB
  %390 = load i32, i32* @x.77
  %391 = load i32, i32* @y.78
  %392 = sub i32 %390, 1
  %393 = mul i32 %390, %392
  %394 = urem i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %395, %396
  br i1 %397, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %398, !dbg !3927

398:                                              ; preds = %originalBBpart264, %originalBBpart256
  br label %399, !dbg !3928

399:                                              ; preds = %398, %originalBBpart252
  %400 = load i8**, i8*** %21, align 8, !dbg !3929
  %401 = load i8*, i8** %400, align 8, !dbg !3930
  %402 = load i8, i8* %401, align 1, !dbg !3931
  %403 = sext i8 %402 to i32, !dbg !3931
  switch i32 %403, label %515 [
    i32 98, label %404
    i32 66, label %406
    i32 99, label %424
    i32 69, label %425
    i32 71, label %444
    i32 103, label %444
    i32 107, label %463
    i32 75, label %463
    i32 77, label %466
    i32 109, label %466
    i32 80, label %469
    i32 84, label %472
    i32 116, label %472
    i32 119, label %475
    i32 89, label %493
    i32 90, label %496
  ], !dbg !3932

404:                                              ; preds = %399
  %405 = call i32 @bkm_scale(i64* %22, i32 512), !dbg !3933
  store i32 %405, i32* %28, align 4, !dbg !3935
  br label %520, !dbg !3936

406:                                              ; preds = %399
  %407 = load i32, i32* @x.77
  %408 = load i32, i32* @y.78
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %406, %originalBB66alteredBB
  %415 = call i32 @bkm_scale(i64* %22, i32 1024), !dbg !3937
  store i32 %415, i32* %28, align 4, !dbg !3938
  %416 = load i32, i32* @x.77
  %417 = load i32, i32* @y.78
  %418 = sub i32 %416, 1
  %419 = mul i32 %416, %418
  %420 = urem i32 %419, 2
  %421 = icmp eq i32 %420, 0
  %422 = icmp slt i32 %417, 10
  %423 = or i1 %421, %422
  br i1 %423, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %520, !dbg !3939

424:                                              ; preds = %399
  store i32 0, i32* %28, align 4, !dbg !3940
  br label %520, !dbg !3941

425:                                              ; preds = %399
  %426 = load i32, i32* @x.77
  %427 = load i32, i32* @y.78
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %425, %originalBB70alteredBB
  %434 = load i32, i32* %26, align 4, !dbg !3942
  %435 = call i32 @bkm_scale_by_power(i64* %22, i32 %434, i32 6), !dbg !3943
  store i32 %435, i32* %28, align 4, !dbg !3944
  %436 = load i32, i32* @x.77
  %437 = load i32, i32* @y.78
  %438 = sub i32 %436, 1
  %439 = mul i32 %436, %438
  %440 = urem i32 %439, 2
  %441 = icmp eq i32 %440, 0
  %442 = icmp slt i32 %437, 10
  %443 = or i1 %441, %442
  br i1 %443, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %520, !dbg !3945

444:                                              ; preds = %399, %399
  %445 = load i32, i32* @x.77
  %446 = load i32, i32* @y.78
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %444, %originalBB74alteredBB
  %453 = load i32, i32* %26, align 4, !dbg !3946
  %454 = call i32 @bkm_scale_by_power(i64* %22, i32 %453, i32 3), !dbg !3947
  store i32 %454, i32* %28, align 4, !dbg !3948
  %455 = load i32, i32* @x.77
  %456 = load i32, i32* @y.78
  %457 = sub i32 %455, 1
  %458 = mul i32 %455, %457
  %459 = urem i32 %458, 2
  %460 = icmp eq i32 %459, 0
  %461 = icmp slt i32 %456, 10
  %462 = or i1 %460, %461
  br i1 %462, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %520, !dbg !3949

463:                                              ; preds = %399, %399
  %464 = load i32, i32* %26, align 4, !dbg !3950
  %465 = call i32 @bkm_scale_by_power(i64* %22, i32 %464, i32 1), !dbg !3951
  store i32 %465, i32* %28, align 4, !dbg !3952
  br label %520, !dbg !3953

466:                                              ; preds = %399, %399
  %467 = load i32, i32* %26, align 4, !dbg !3954
  %468 = call i32 @bkm_scale_by_power(i64* %22, i32 %467, i32 2), !dbg !3955
  store i32 %468, i32* %28, align 4, !dbg !3956
  br label %520, !dbg !3957

469:                                              ; preds = %399
  %470 = load i32, i32* %26, align 4, !dbg !3958
  %471 = call i32 @bkm_scale_by_power(i64* %22, i32 %470, i32 5), !dbg !3959
  store i32 %471, i32* %28, align 4, !dbg !3960
  br label %520, !dbg !3961

472:                                              ; preds = %399, %399
  %473 = load i32, i32* %26, align 4, !dbg !3962
  %474 = call i32 @bkm_scale_by_power(i64* %22, i32 %473, i32 4), !dbg !3963
  store i32 %474, i32* %28, align 4, !dbg !3964
  br label %520, !dbg !3965

475:                                              ; preds = %399
  %476 = load i32, i32* @x.77
  %477 = load i32, i32* @y.78
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %475, %originalBB78alteredBB
  %484 = call i32 @bkm_scale(i64* %22, i32 2), !dbg !3966
  store i32 %484, i32* %28, align 4, !dbg !3967
  %485 = load i32, i32* @x.77
  %486 = load i32, i32* @y.78
  %487 = sub i32 %485, 1
  %488 = mul i32 %485, %487
  %489 = urem i32 %488, 2
  %490 = icmp eq i32 %489, 0
  %491 = icmp slt i32 %486, 10
  %492 = or i1 %490, %491
  br i1 %492, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %520, !dbg !3968

493:                                              ; preds = %399
  %494 = load i32, i32* %26, align 4, !dbg !3969
  %495 = call i32 @bkm_scale_by_power(i64* %22, i32 %494, i32 8), !dbg !3970
  store i32 %495, i32* %28, align 4, !dbg !3971
  br label %520, !dbg !3972

496:                                              ; preds = %399
  %497 = load i32, i32* @x.77
  %498 = load i32, i32* @y.78
  %499 = sub i32 %497, 1
  %500 = mul i32 %497, %499
  %501 = urem i32 %500, 2
  %502 = icmp eq i32 %501, 0
  %503 = icmp slt i32 %498, 10
  %504 = or i1 %502, %503
  br i1 %504, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %496, %originalBB82alteredBB
  %505 = load i32, i32* %26, align 4, !dbg !3973
  %506 = call i32 @bkm_scale_by_power(i64* %22, i32 %505, i32 7), !dbg !3974
  store i32 %506, i32* %28, align 4, !dbg !3975
  %507 = load i32, i32* @x.77
  %508 = load i32, i32* @y.78
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br label %520, !dbg !3976

515:                                              ; preds = %399
  %516 = load i64, i64* %22, align 8, !dbg !3977
  %517 = load i64*, i64** %18, align 8, !dbg !3978
  store i64 %516, i64* %517, align 8, !dbg !3979
  %518 = load i32, i32* %23, align 4, !dbg !3980
  %519 = or i32 %518, 2, !dbg !3981
  store i32 %519, i32* %14, align 4, !dbg !3982
  br label %605, !dbg !3982

520:                                              ; preds = %originalBBpart284, %493, %originalBBpart280, %472, %469, %466, %463, %originalBBpart276, %originalBBpart272, %424, %originalBBpart268, %404
  %521 = load i32, i32* @x.77
  %522 = load i32, i32* @y.78
  %523 = sub i32 %521, 1
  %524 = mul i32 %521, %523
  %525 = urem i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = icmp slt i32 %522, 10
  %528 = or i1 %526, %527
  br i1 %528, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %520, %originalBB86alteredBB
  %529 = load i32, i32* %28, align 4, !dbg !3983
  %530 = load i32, i32* %23, align 4, !dbg !3984
  %531 = or i32 %530, %529, !dbg !3984
  store i32 %531, i32* %23, align 4, !dbg !3984
  %532 = load i32, i32* %27, align 4, !dbg !3985
  %533 = load i8**, i8*** %21, align 8, !dbg !3986
  %534 = load i8*, i8** %533, align 8, !dbg !3987
  %535 = sext i32 %532 to i64, !dbg !3987
  %536 = getelementptr inbounds i8, i8* %534, i64 %535, !dbg !3987
  store i8* %536, i8** %533, align 8, !dbg !3987
  %537 = load i8**, i8*** %21, align 8, !dbg !3988
  %538 = load i8*, i8** %537, align 8, !dbg !3990
  %539 = load i8, i8* %538, align 1, !dbg !3991
  %540 = icmp ne i8 %539, 0, !dbg !3991
  %541 = load i32, i32* @x.77
  %542 = load i32, i32* @y.78
  %543 = sub i32 %541, 1
  %544 = mul i32 %541, %543
  %545 = urem i32 %544, 2
  %546 = icmp eq i32 %545, 0
  %547 = icmp slt i32 %542, 10
  %548 = or i1 %546, %547
  br i1 %548, label %originalBBpart292, label %originalBB86alteredBB

originalBBpart292:                                ; preds = %originalBB86
  br i1 %540, label %549, label %568, !dbg !3992

549:                                              ; preds = %originalBBpart292
  %550 = load i32, i32* @x.77
  %551 = load i32, i32* @y.78
  %552 = sub i32 %550, 1
  %553 = mul i32 %550, %552
  %554 = urem i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = icmp slt i32 %551, 10
  %557 = or i1 %555, %556
  br i1 %557, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %549, %originalBB94alteredBB
  %558 = load i32, i32* %23, align 4, !dbg !3993
  %559 = or i32 %558, 2, !dbg !3993
  store i32 %559, i32* %23, align 4, !dbg !3993
  %560 = load i32, i32* @x.77
  %561 = load i32, i32* @y.78
  %562 = sub i32 %560, 1
  %563 = mul i32 %560, %562
  %564 = urem i32 %563, 2
  %565 = icmp eq i32 %564, 0
  %566 = icmp slt i32 %561, 10
  %567 = or i1 %565, %566
  br i1 %567, label %originalBBpart2105, label %originalBB94alteredBB

originalBBpart2105:                               ; preds = %originalBB94
  br label %568, !dbg !3994

568:                                              ; preds = %originalBBpart2105, %originalBBpart292
  %569 = load i32, i32* @x.77
  %570 = load i32, i32* @y.78
  %571 = sub i32 %569, 1
  %572 = mul i32 %569, %571
  %573 = urem i32 %572, 2
  %574 = icmp eq i32 %573, 0
  %575 = icmp slt i32 %570, 10
  %576 = or i1 %574, %575
  br i1 %576, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %568, %originalBB107alteredBB
  %577 = load i32, i32* @x.77
  %578 = load i32, i32* @y.78
  %579 = sub i32 %577, 1
  %580 = mul i32 %577, %579
  %581 = urem i32 %580, 2
  %582 = icmp eq i32 %581, 0
  %583 = icmp slt i32 %578, 10
  %584 = or i1 %582, %583
  br i1 %584, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br label %585, !dbg !3995

585:                                              ; preds = %originalBBpart2109, %267
  %586 = load i32, i32* @x.77
  %587 = load i32, i32* @y.78
  %588 = sub i32 %586, 1
  %589 = mul i32 %586, %588
  %590 = urem i32 %589, 2
  %591 = icmp eq i32 %590, 0
  %592 = icmp slt i32 %587, 10
  %593 = or i1 %591, %592
  br i1 %593, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %585, %originalBB111alteredBB
  %594 = load i64, i64* %22, align 8, !dbg !3996
  %595 = load i64*, i64** %18, align 8, !dbg !3997
  store i64 %594, i64* %595, align 8, !dbg !3998
  %596 = load i32, i32* %23, align 4, !dbg !3999
  store i32 %596, i32* %14, align 4, !dbg !4000
  %597 = load i32, i32* @x.77
  %598 = load i32, i32* @y.78
  %599 = sub i32 %597, 1
  %600 = mul i32 %597, %599
  %601 = urem i32 %600, 2
  %602 = icmp eq i32 %601, 0
  %603 = icmp slt i32 %598, 10
  %604 = or i1 %602, %603
  br i1 %604, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br label %605, !dbg !4000

605:                                              ; preds = %originalBBpart2113, %515, %297, %263, %originalBBpart244, %231, %originalBBpart228
  %606 = load i32, i32* %14, align 4, !dbg !4001
  ret i32 %606, !dbg !4001

originalBBalteredBB:                              ; preds = %originalBB, %5
  %607 = alloca i32, align 4
  %608 = alloca i8*, align 8
  %609 = alloca i8**, align 8
  %610 = alloca i32, align 4
  %611 = alloca i64*, align 8
  %612 = alloca i8*, align 8
  %613 = alloca i8*, align 8
  %614 = alloca i8**, align 8
  %615 = alloca i64, align 8
  %616 = alloca i32, align 4
  %617 = alloca i8*, align 8
  %618 = alloca i8, align 1
  %619 = alloca i32, align 4
  %620 = alloca i32, align 4
  %621 = alloca i32, align 4
  store i8* %0, i8** %608, align 8
  call void @llvm.dbg.declare(metadata i8** %608, metadata !4002, metadata !DIExpression()), !dbg !3781
  store i8** %1, i8*** %609, align 8
  call void @llvm.dbg.declare(metadata i8*** %609, metadata !4005, metadata !DIExpression()), !dbg !3783
  store i32 %2, i32* %610, align 4
  call void @llvm.dbg.declare(metadata i32* %610, metadata !4006, metadata !DIExpression()), !dbg !3785
  store i64* %3, i64** %611, align 8
  call void @llvm.dbg.declare(metadata i64** %611, metadata !4007, metadata !DIExpression()), !dbg !3787
  store i8* %4, i8** %612, align 8
  call void @llvm.dbg.declare(metadata i8** %612, metadata !4008, metadata !DIExpression()), !dbg !3789
  call void @llvm.dbg.declare(metadata i8** %613, metadata !4009, metadata !DIExpression()), !dbg !3791
  call void @llvm.dbg.declare(metadata i8*** %614, metadata !4010, metadata !DIExpression()), !dbg !3793
  call void @llvm.dbg.declare(metadata i64* %615, metadata !4011, metadata !DIExpression()), !dbg !3795
  call void @llvm.dbg.declare(metadata i32* %616, metadata !4012, metadata !DIExpression()), !dbg !3797
  store i32 0, i32* %616, align 4, !dbg !3797
  %622 = load i32, i32* %610, align 4, !dbg !3798
  %623 = icmp sle i32 0, %622, !dbg !3798
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  %624 = load i32, i32* %17, align 4, !dbg !3798
  %625 = icmp sle i32 %624, 36, !dbg !3798
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  call void @__assert_fail(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.142, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.143, i64 0, i64 0), i32 84, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @__PRETTY_FUNCTION__.xstrtoul, i64 0, i64 0)) #12, !dbg !3798
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %88
  %626 = call i16** @__ctype_b_loc() #15, !dbg !3817
  %627 = load i16*, i16** %626, align 8, !dbg !3817
  %628 = load i8, i8* %25, align 1, !dbg !3817
  %629 = zext i8 %628 to i32, !dbg !3817
  %630 = sext i32 %629 to i64, !dbg !3817
  %631 = getelementptr inbounds i16, i16* %627, i64 %630, !dbg !3817
  %632 = load i16, i16* %631, align 2, !dbg !3817
  %633 = zext i16 %632 to i32, !dbg !3817
  %_ = shl i32 %633, 8192
  %_11 = sub i32 0, %633
  %gen = add i32 %_11, 8192
  %_12 = sub i32 %633, 8192
  %gen13 = mul i32 %_12, 8192
  %_14 = sub i32 %633, 8192
  %gen15 = mul i32 %_14, 8192
  %_16 = shl i32 %633, 8192
  %_17 = sub i32 %633, 8192
  %gen18 = mul i32 %_17, 8192
  %634 = and i32 %633, 8192, !dbg !3817
  %635 = icmp ne i32 %634, 0, !dbg !3816
  br label %originalBB10

originalBB22alteredBB:                            ; preds = %originalBB22, %115
  %636 = load i8*, i8** %24, align 8, !dbg !3818
  %637 = getelementptr inbounds i8, i8* %636, i32 1, !dbg !3818
  store i8* %637, i8** %24, align 8, !dbg !3818
  %638 = load i8, i8* %637, align 1, !dbg !3819
  store i8 %638, i8* %25, align 1, !dbg !3820
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %139
  store i32 4, i32* %14, align 4, !dbg !3827
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %168
  %639 = load i8**, i8*** %21, align 8, !dbg !3843
  %640 = load i8*, i8** %639, align 8, !dbg !3844
  %641 = load i8, i8* %640, align 1, !dbg !3845
  %642 = sext i8 %641 to i32, !dbg !3845
  %643 = icmp ne i32 %642, 0, !dbg !3845
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %190
  %644 = load i8*, i8** %19, align 8, !dbg !3847
  %645 = load i8**, i8*** %21, align 8, !dbg !3848
  %646 = load i8*, i8** %645, align 8, !dbg !3849
  %647 = load i8, i8* %646, align 1, !dbg !3850
  %648 = sext i8 %647 to i32, !dbg !3850
  %649 = call i8* @strchr(i8* %644, i32 %648) #13, !dbg !3851
  %650 = icmp ne i8* %649, null, !dbg !3851
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %214
  store i64 1, i64* %22, align 8, !dbg !3853
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %241
  store i32 4, i32* %14, align 4, !dbg !3866
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %273
  store i32 1024, i32* %26, align 4, !dbg !3886
  call void @llvm.dbg.declare(metadata !4, metadata !4013, metadata !DIExpression()), !dbg !3888
  store i32 1, i32* %27, align 4, !dbg !3888
  call void @llvm.dbg.declare(metadata !4, metadata !4018, metadata !DIExpression()), !dbg !3890
  %651 = load i8*, i8** %19, align 8, !dbg !3891
  %652 = load i8**, i8*** %21, align 8, !dbg !3893
  %653 = load i8*, i8** %652, align 8, !dbg !3894
  %654 = load i8, i8* %653, align 1, !dbg !3895
  %655 = sext i8 %654 to i32, !dbg !3895
  %656 = call i8* @strchr(i8* %651, i32 %655) #13, !dbg !3896
  %657 = icmp ne i8* %656, null, !dbg !3896
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %302
  %658 = load i8**, i8*** %21, align 8, !dbg !3905
  %659 = load i8*, i8** %658, align 8, !dbg !3906
  %660 = load i8, i8* %659, align 1, !dbg !3907
  %661 = sext i8 %660 to i32, !dbg !3907
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %323
  %662 = load i8*, i8** %19, align 8, !dbg !3909
  %663 = call i8* @strchr(i8* %662, i32 48) #13, !dbg !3912
  %664 = icmp ne i8* %663, null, !dbg !3912
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %361
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %381
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %406
  %665 = call i32 @bkm_scale(i64* %22, i32 1024), !dbg !3937
  store i32 %665, i32* %28, align 4, !dbg !3938
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %425
  %666 = load i32, i32* %26, align 4, !dbg !3942
  %667 = call i32 @bkm_scale_by_power(i64* %22, i32 %666, i32 6), !dbg !3943
  store i32 %667, i32* %28, align 4, !dbg !3944
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %444
  %668 = load i32, i32* %26, align 4, !dbg !3946
  %669 = call i32 @bkm_scale_by_power(i64* %22, i32 %668, i32 3), !dbg !3947
  store i32 %669, i32* %28, align 4, !dbg !3948
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %475
  %670 = call i32 @bkm_scale(i64* %22, i32 2), !dbg !3966
  store i32 %670, i32* %28, align 4, !dbg !3967
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %496
  %671 = load i32, i32* %26, align 4, !dbg !3973
  %672 = call i32 @bkm_scale_by_power(i64* %22, i32 %671, i32 7), !dbg !3974
  store i32 %672, i32* %28, align 4, !dbg !3975
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %520
  %673 = load i32, i32* %28, align 4, !dbg !3983
  %674 = load i32, i32* %23, align 4, !dbg !3984
  %_87 = sub i32 %674, %673
  %gen88 = mul i32 %_87, %673
  %_89 = shl i32 %674, %673
  %_90 = shl i32 %674, %673
  %675 = or i32 %674, %673, !dbg !3984
  store i32 %675, i32* %23, align 4, !dbg !3984
  %676 = load i32, i32* %27, align 4, !dbg !3985
  %677 = load i8**, i8*** %21, align 8, !dbg !3986
  %678 = load i8*, i8** %677, align 8, !dbg !3987
  %679 = sext i32 %676 to i64, !dbg !3987
  %680 = getelementptr inbounds i8, i8* %678, i64 %679, !dbg !3987
  store i8* %680, i8** %677, align 8, !dbg !3987
  %681 = load i8**, i8*** %21, align 8, !dbg !3988
  %682 = load i8*, i8** %681, align 8, !dbg !3990
  %683 = load i8, i8* %682, align 1, !dbg !3991
  %684 = icmp ne i8 %683, 0, !dbg !3991
  br label %originalBB86

originalBB94alteredBB:                            ; preds = %originalBB94, %549
  %685 = load i32, i32* %23, align 4, !dbg !3993
  %_95 = sub i32 0, %685
  %gen96 = add i32 %_95, 2
  %_97 = sub i32 0, %685
  %gen98 = add i32 %_97, 2
  %_99 = shl i32 %685, 2
  %_100 = shl i32 %685, 2
  %_101 = sub i32 0, %685
  %gen102 = add i32 %_101, 2
  %_103 = shl i32 %685, 2
  %686 = or i32 %685, 2, !dbg !3993
  store i32 %686, i32* %23, align 4, !dbg !3993
  br label %originalBB94

originalBB107alteredBB:                           ; preds = %originalBB107, %568
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %585
  %687 = load i64, i64* %22, align 8, !dbg !3996
  %688 = load i64*, i64** %18, align 8, !dbg !3997
  store i64 %687, i64* %688, align 8, !dbg !3998
  %689 = load i32, i32* %23, align 4, !dbg !3999
  store i32 %689, i32* %14, align 4, !dbg !4000
  br label %originalBB111
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #5

; Function Attrs: nounwind
declare dso_local i64 @strtoul(i8*, i8**, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale(i64*, i32) #4 !dbg !4019 {
  %3 = alloca i32, align 4
  %4 = alloca i64*, align 8
  %5 = alloca i32, align 4
  store i64* %0, i64** %4, align 8
  call void @llvm.dbg.declare(metadata i64** %4, metadata !4022, metadata !DIExpression()), !dbg !4023
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !4024, metadata !DIExpression()), !dbg !4025
  %6 = load i32, i32* %5, align 4, !dbg !4026
  %7 = sext i32 %6 to i64, !dbg !4026
  %8 = udiv i64 -1, %7, !dbg !4028
  %9 = load i64*, i64** %4, align 8, !dbg !4029
  %10 = load i64, i64* %9, align 8, !dbg !4030
  %11 = icmp ult i64 %8, %10, !dbg !4031
  br i1 %11, label %12, label %30, !dbg !4032

12:                                               ; preds = %2
  %13 = load i32, i32* @x.79
  %14 = load i32, i32* @y.80
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %12, %originalBBalteredBB
  %21 = load i64*, i64** %4, align 8, !dbg !4033
  store i64 -1, i64* %21, align 8, !dbg !4035
  store i32 1, i32* %3, align 4, !dbg !4036
  %22 = load i32, i32* @x.79
  %23 = load i32, i32* @y.80
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %36, !dbg !4036

30:                                               ; preds = %2
  %31 = load i32, i32* %5, align 4, !dbg !4037
  %32 = sext i32 %31 to i64, !dbg !4037
  %33 = load i64*, i64** %4, align 8, !dbg !4038
  %34 = load i64, i64* %33, align 8, !dbg !4039
  %35 = mul i64 %34, %32, !dbg !4039
  store i64 %35, i64* %33, align 8, !dbg !4039
  store i32 0, i32* %3, align 4, !dbg !4040
  br label %36, !dbg !4040

36:                                               ; preds = %30, %originalBBpart2
  %37 = load i32, i32* @x.79
  %38 = load i32, i32* @y.80
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = load i32, i32* %3, align 4, !dbg !4041
  %46 = load i32, i32* @x.79
  %47 = load i32, i32* @y.80
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i32 %45, !dbg !4041

originalBBalteredBB:                              ; preds = %originalBB, %12
  %54 = load i64*, i64** %4, align 8, !dbg !4033
  store i64 -1, i64* %54, align 8, !dbg !4035
  store i32 1, i32* %3, align 4, !dbg !4036
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %55 = load i32, i32* %3, align 4, !dbg !4041
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @bkm_scale_by_power(i64*, i32, i32) #4 !dbg !4042 {
  %4 = load i32, i32* @x.81
  %5 = load i32, i32* @y.82
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i64*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i64* %0, i64** %12, align 8
  call void @llvm.dbg.declare(metadata i64** %12, metadata !4045, metadata !DIExpression()), !dbg !4046
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4047, metadata !DIExpression()), !dbg !4048
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !4049, metadata !DIExpression()), !dbg !4050
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4051, metadata !DIExpression()), !dbg !4052
  store i32 0, i32* %15, align 4, !dbg !4052
  %16 = load i32, i32* @x.81
  %17 = load i32, i32* @y.82
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %24, !dbg !4053

24:                                               ; preds = %originalBBpart26, %originalBBpart2
  %25 = load i32, i32* %14, align 4, !dbg !4054
  %26 = add nsw i32 %25, -1, !dbg !4054
  store i32 %26, i32* %14, align 4, !dbg !4054
  %27 = icmp ne i32 %25, 0, !dbg !4053
  br i1 %27, label %28, label %50, !dbg !4053

28:                                               ; preds = %24
  %29 = load i32, i32* @x.81
  %30 = load i32, i32* @y.82
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %28, %originalBB1alteredBB
  %37 = load i64*, i64** %12, align 8, !dbg !4055
  %38 = load i32, i32* %13, align 4, !dbg !4056
  %39 = call i32 @bkm_scale(i64* %37, i32 %38), !dbg !4057
  %40 = load i32, i32* %15, align 4, !dbg !4058
  %41 = or i32 %40, %39, !dbg !4058
  store i32 %41, i32* %15, align 4, !dbg !4058
  %42 = load i32, i32* @x.81
  %43 = load i32, i32* @y.82
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart26, label %originalBB1alteredBB

originalBBpart26:                                 ; preds = %originalBB1
  br label %24, !dbg !4053, !llvm.loop !4059

50:                                               ; preds = %24
  %51 = load i32, i32* %15, align 4, !dbg !4061
  ret i32 %51, !dbg !4062

originalBBalteredBB:                              ; preds = %originalBB, %3
  %52 = alloca i64*, align 8
  %53 = alloca i32, align 4
  %54 = alloca i32, align 4
  %55 = alloca i32, align 4
  store i64* %0, i64** %52, align 8
  call void @llvm.dbg.declare(metadata i64** %52, metadata !4063, metadata !DIExpression()), !dbg !4046
  store i32 %1, i32* %53, align 4
  call void @llvm.dbg.declare(metadata i32* %53, metadata !4066, metadata !DIExpression()), !dbg !4048
  store i32 %2, i32* %54, align 4
  call void @llvm.dbg.declare(metadata i32* %54, metadata !4067, metadata !DIExpression()), !dbg !4050
  call void @llvm.dbg.declare(metadata i32* %55, metadata !4068, metadata !DIExpression()), !dbg !4052
  store i32 0, i32* %55, align 4, !dbg !4052
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %28
  %56 = load i64*, i64** %12, align 8, !dbg !4055
  %57 = load i32, i32* %13, align 4, !dbg !4056
  %58 = call i32 @bkm_scale(i64* %56, i32 %57), !dbg !4057
  %59 = load i32, i32* %15, align 4, !dbg !4058
  %_ = sub i32 %59, %58
  %gen = mul i32 %_, %58
  %_2 = shl i32 %59, %58
  %_3 = shl i32 %59, %58
  %_4 = shl i32 %59, %58
  %60 = or i32 %59, %58, !dbg !4058
  store i32 %60, i32* %15, align 4, !dbg !4058
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !4069 {
  %5 = load i32, i32* @x.83
  %6 = load i32, i32* @y.84
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !4085, metadata !DIExpression()), !dbg !4086
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !4087, metadata !DIExpression()), !dbg !4088
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !4089, metadata !DIExpression()), !dbg !4090
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !4091, metadata !DIExpression()), !dbg !4092
  call void @llvm.dbg.declare(metadata i64* %18, metadata !4093, metadata !DIExpression()), !dbg !4094
  call void @llvm.dbg.declare(metadata i32* %19, metadata !4095, metadata !DIExpression()), !dbg !4096
  %21 = load i32*, i32** %14, align 8, !dbg !4097
  %22 = icmp ne i32* %21, null, !dbg !4097
  %23 = load i32, i32* @x.83
  %24 = load i32, i32* @y.84
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !4099

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.83
  %33 = load i32, i32* @y.84
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !4100
  %40 = load i32, i32* @x.83
  %41 = load i32, i32* @y.84
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !4101

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.83
  %50 = load i32, i32* @y.84
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !4102
  %58 = load i8*, i8** %15, align 8, !dbg !4103
  %59 = load i64, i64* %16, align 8, !dbg !4104
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !4105
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !4106
  store i64 %61, i64* %18, align 8, !dbg !4107
  %62 = load i64, i64* %18, align 8, !dbg !4108
  %63 = icmp ule i64 -2, %62, !dbg !4110
  %64 = load i32, i32* @x.83
  %65 = load i32, i32* @y.84
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %115, !dbg !4111

72:                                               ; preds = %originalBBpart28
  %73 = load i32, i32* @x.83
  %74 = load i32, i32* @y.84
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %72, %originalBB10alteredBB
  %81 = load i64, i64* %16, align 8, !dbg !4112
  %82 = icmp ne i64 %81, 0, !dbg !4113
  %83 = load i32, i32* @x.83
  %84 = load i32, i32* @y.84
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %115, !dbg !4114

91:                                               ; preds = %originalBBpart212
  %92 = call zeroext i1 @hard_locale(i32 0), !dbg !4115
  br i1 %92, label %115, label %93, !dbg !4116

93:                                               ; preds = %91
  call void @llvm.dbg.declare(metadata i8* %20, metadata !4117, metadata !DIExpression()), !dbg !4119
  %94 = load i32, i32* @x.83
  %95 = load i32, i32* @y.84
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  %102 = load i8*, i8** %15, align 8, !dbg !4120
  %103 = load i8, i8* %102, align 1, !dbg !4121
  store i8 %103, i8* %20, align 1, !dbg !4119
  %104 = load i8, i8* %20, align 1, !dbg !4122
  %105 = zext i8 %104 to i32, !dbg !4122
  %106 = load i32*, i32** %14, align 8, !dbg !4123
  store i32 %105, i32* %106, align 4, !dbg !4124
  store i64 1, i64* %13, align 8, !dbg !4125
  %107 = load i32, i32* @x.83
  %108 = load i32, i32* @y.84
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %133, !dbg !4125

115:                                              ; preds = %91, %originalBBpart212, %originalBBpart28
  %116 = load i32, i32* @x.83
  %117 = load i32, i32* @y.84
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i64, i64* %18, align 8, !dbg !4126
  store i64 %124, i64* %13, align 8, !dbg !4127
  %125 = load i32, i32* @x.83
  %126 = load i32, i32* @y.84
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !4127

133:                                              ; preds = %originalBBpart220, %originalBBpart216
  %134 = load i64, i64* %13, align 8, !dbg !4128
  ret i64 %134, !dbg !4128

originalBBalteredBB:                              ; preds = %originalBB, %4
  %135 = alloca i64, align 8
  %136 = alloca i32*, align 8
  %137 = alloca i8*, align 8
  %138 = alloca i64, align 8
  %139 = alloca %struct.__mbstate_t*, align 8
  %140 = alloca i64, align 8
  %141 = alloca i32, align 4
  %142 = alloca i8, align 1
  store i32* %0, i32** %136, align 8
  call void @llvm.dbg.declare(metadata i32** %136, metadata !4129, metadata !DIExpression()), !dbg !4086
  store i8* %1, i8** %137, align 8
  call void @llvm.dbg.declare(metadata i8** %137, metadata !4145, metadata !DIExpression()), !dbg !4088
  store i64 %2, i64* %138, align 8
  call void @llvm.dbg.declare(metadata i64* %138, metadata !4146, metadata !DIExpression()), !dbg !4090
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %139, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %139, metadata !4147, metadata !DIExpression()), !dbg !4092
  call void @llvm.dbg.declare(metadata i64* %140, metadata !4148, metadata !DIExpression()), !dbg !4094
  call void @llvm.dbg.declare(metadata i32* %141, metadata !4149, metadata !DIExpression()), !dbg !4096
  %143 = load i32*, i32** %136, align 8, !dbg !4097
  %144 = icmp ne i32* %143, null, !dbg !4097
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !4100
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %145 = load i32*, i32** %14, align 8, !dbg !4102
  %146 = load i8*, i8** %15, align 8, !dbg !4103
  %147 = load i64, i64* %16, align 8, !dbg !4104
  %148 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !4105
  %149 = call i64 @mbrtowc(i32* %145, i8* %146, i64 %147, %struct.__mbstate_t* %148) #10, !dbg !4106
  store i64 %149, i64* %18, align 8, !dbg !4107
  %150 = load i64, i64* %18, align 8, !dbg !4108
  %151 = icmp ule i64 -2, %150, !dbg !4110
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %72
  %152 = load i64, i64* %16, align 8, !dbg !4112
  %153 = icmp ne i64 %152, 0, !dbg !4113
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  %154 = load i8*, i8** %15, align 8, !dbg !4120
  %155 = load i8, i8* %154, align 1, !dbg !4121
  store i8 %155, i8* %20, align 1, !dbg !4119
  %156 = load i8, i8* %20, align 1, !dbg !4122
  %157 = zext i8 %156 to i32, !dbg !4122
  %158 = load i32*, i32** %14, align 8, !dbg !4123
  store i32 %157, i32* %158, align 4, !dbg !4124
  store i64 1, i64* %13, align 8, !dbg !4125
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %159 = load i64, i64* %18, align 8, !dbg !4126
  store i64 %159, i64* %13, align 8, !dbg !4127
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !4150 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !4154, metadata !DIExpression()), !dbg !4155
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4156, metadata !DIExpression()), !dbg !4157
  call void @llvm.dbg.declare(metadata i8** %6, metadata !4158, metadata !DIExpression()), !dbg !4159
  %10 = load i8*, i8** %4, align 8, !dbg !4160
  store i8* %10, i8** %6, align 8, !dbg !4159
  call void @llvm.dbg.declare(metadata i8** %7, metadata !4161, metadata !DIExpression()), !dbg !4162
  %11 = load i8*, i8** %5, align 8, !dbg !4163
  store i8* %11, i8** %7, align 8, !dbg !4162
  call void @llvm.dbg.declare(metadata i8* %8, metadata !4164, metadata !DIExpression()), !dbg !4165
  call void @llvm.dbg.declare(metadata i8* %9, metadata !4166, metadata !DIExpression()), !dbg !4167
  %12 = load i8*, i8** %6, align 8, !dbg !4168
  %13 = load i8*, i8** %7, align 8, !dbg !4170
  %14 = icmp eq i8* %12, %13, !dbg !4171
  br i1 %14, label %15, label %32, !dbg !4172

15:                                               ; preds = %2
  %16 = load i32, i32* @x.85
  %17 = load i32, i32* @y.86
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  store i32 0, i32* %3, align 4, !dbg !4173
  %24 = load i32, i32* @x.85
  %25 = load i32, i32* @y.86
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %113, !dbg !4173

32:                                               ; preds = %2
  %33 = load i32, i32* @x.85
  %34 = load i32, i32* @y.86
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32, i32* @x.85
  %42 = load i32, i32* @y.86
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !4174

49:                                               ; preds = %101, %originalBBpart24
  %50 = load i8*, i8** %6, align 8, !dbg !4175
  %51 = load i8, i8* %50, align 1, !dbg !4177
  %52 = zext i8 %51 to i32, !dbg !4177
  %53 = call i32 @c_tolower(i32 %52), !dbg !4178
  %54 = trunc i32 %53 to i8, !dbg !4178
  store i8 %54, i8* %8, align 1, !dbg !4179
  %55 = load i8*, i8** %7, align 8, !dbg !4180
  %56 = load i8, i8* %55, align 1, !dbg !4181
  %57 = zext i8 %56 to i32, !dbg !4181
  %58 = call i32 @c_tolower(i32 %57), !dbg !4182
  %59 = trunc i32 %58 to i8, !dbg !4182
  store i8 %59, i8* %9, align 1, !dbg !4183
  %60 = load i8, i8* %8, align 1, !dbg !4184
  %61 = zext i8 %60 to i32, !dbg !4184
  %62 = icmp eq i32 %61, 0, !dbg !4186
  br i1 %62, label %63, label %80, !dbg !4187

63:                                               ; preds = %49
  %64 = load i32, i32* @x.85
  %65 = load i32, i32* @y.86
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  %72 = load i32, i32* @x.85
  %73 = load i32, i32* @y.86
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %107, !dbg !4188

80:                                               ; preds = %49
  %81 = load i32, i32* @x.85
  %82 = load i32, i32* @y.86
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %89 = load i8*, i8** %6, align 8, !dbg !4189
  %90 = getelementptr inbounds i8, i8* %89, i32 1, !dbg !4189
  store i8* %90, i8** %6, align 8, !dbg !4189
  %91 = load i8*, i8** %7, align 8, !dbg !4190
  %92 = getelementptr inbounds i8, i8* %91, i32 1, !dbg !4190
  store i8* %92, i8** %7, align 8, !dbg !4190
  %93 = load i32, i32* @x.85
  %94 = load i32, i32* @y.86
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %101, !dbg !4191

101:                                              ; preds = %originalBBpart212
  %102 = load i8, i8* %8, align 1, !dbg !4192
  %103 = zext i8 %102 to i32, !dbg !4192
  %104 = load i8, i8* %9, align 1, !dbg !4193
  %105 = zext i8 %104 to i32, !dbg !4193
  %106 = icmp eq i32 %103, %105, !dbg !4194
  br i1 %106, label %49, label %107, !dbg !4191, !llvm.loop !4195

107:                                              ; preds = %101, %originalBBpart28
  %108 = load i8, i8* %8, align 1, !dbg !4197
  %109 = zext i8 %108 to i32, !dbg !4197
  %110 = load i8, i8* %9, align 1, !dbg !4199
  %111 = zext i8 %110 to i32, !dbg !4199
  %112 = sub nsw i32 %109, %111, !dbg !4200
  store i32 %112, i32* %3, align 4, !dbg !4201
  br label %113, !dbg !4201

113:                                              ; preds = %107, %originalBBpart2
  %114 = load i32, i32* @x.85
  %115 = load i32, i32* @y.86
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %113, %originalBB14alteredBB
  %122 = load i32, i32* %3, align 4, !dbg !4202
  %123 = load i32, i32* @x.85
  %124 = load i32, i32* @y.86
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %122, !dbg !4202

originalBBalteredBB:                              ; preds = %originalBB, %15
  store i32 0, i32* %3, align 4, !dbg !4173
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  %131 = load i8*, i8** %6, align 8, !dbg !4189
  %132 = getelementptr inbounds i8, i8* %131, i32 1, !dbg !4189
  store i8* %132, i8** %6, align 8, !dbg !4189
  %133 = load i8*, i8** %7, align 8, !dbg !4190
  %134 = getelementptr inbounds i8, i8* %133, i32 1, !dbg !4190
  store i8* %134, i8** %7, align 8, !dbg !4190
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %113
  %135 = load i32, i32* %3, align 4, !dbg !4202
  br label %originalBB14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !4203 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8, align 1
  %6 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !4241, metadata !DIExpression()), !dbg !4242
  call void @llvm.dbg.declare(metadata i8* %4, metadata !4243, metadata !DIExpression()), !dbg !4245
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4246
  %8 = call i64 @__fpending(%struct._IO_FILE* %7) #10, !dbg !4247
  %9 = icmp ne i64 %8, 0, !dbg !4248
  %10 = zext i1 %9 to i8, !dbg !4245
  store i8 %10, i8* %4, align 1, !dbg !4245
  call void @llvm.dbg.declare(metadata i8* %5, metadata !4249, metadata !DIExpression()), !dbg !4250
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4251
  %12 = call i32 @ferror_unlocked(%struct._IO_FILE* %11) #10, !dbg !4251
  %13 = icmp ne i32 %12, 0, !dbg !4252
  %14 = zext i1 %13 to i8, !dbg !4250
  store i8 %14, i8* %5, align 1, !dbg !4250
  call void @llvm.dbg.declare(metadata i8* %6, metadata !4253, metadata !DIExpression()), !dbg !4254
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4255
  %16 = call i32 @rpl_fclose(%struct._IO_FILE* %15), !dbg !4256
  %17 = icmp ne i32 %16, 0, !dbg !4257
  %18 = zext i1 %17 to i8, !dbg !4254
  store i8 %18, i8* %6, align 1, !dbg !4254
  %19 = load i8, i8* %5, align 1, !dbg !4258
  %20 = trunc i8 %19 to i1, !dbg !4258
  br i1 %20, label %63, label %21, !dbg !4260

21:                                               ; preds = %1
  %22 = load i8, i8* %6, align 1, !dbg !4261
  %23 = trunc i8 %22 to i1, !dbg !4261
  br i1 %23, label %24, label %117, !dbg !4262

24:                                               ; preds = %21
  %25 = load i32, i32* @x.87
  %26 = load i32, i32* @y.88
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %24, %originalBBalteredBB
  %33 = load i8, i8* %4, align 1, !dbg !4263
  %34 = trunc i8 %33 to i1, !dbg !4263
  %35 = load i32, i32* @x.87
  %36 = load i32, i32* @y.88
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %34, label %63, label %43, !dbg !4264

43:                                               ; preds = %originalBBpart2
  %44 = load i32, i32* @x.87
  %45 = load i32, i32* @y.88
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %43, %originalBB1alteredBB
  %52 = call i32* @__errno_location() #15, !dbg !4265
  %53 = load i32, i32* %52, align 4, !dbg !4265
  %54 = icmp ne i32 %53, 9, !dbg !4266
  %55 = load i32, i32* @x.87
  %56 = load i32, i32* @y.88
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %54, label %63, label %117, !dbg !4267

63:                                               ; preds = %originalBBpart24, %originalBBpart2, %1
  %64 = load i32, i32* @x.87
  %65 = load i32, i32* @y.88
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  %72 = load i8, i8* %6, align 1, !dbg !4268
  %73 = trunc i8 %72 to i1, !dbg !4268
  %74 = load i32, i32* @x.87
  %75 = load i32, i32* @y.88
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %73, label %100, label %82, !dbg !4271

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.87
  %84 = load i32, i32* @y.88
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  %91 = call i32* @__errno_location() #15, !dbg !4272
  store i32 0, i32* %91, align 4, !dbg !4273
  %92 = load i32, i32* @x.87
  %93 = load i32, i32* @y.88
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !4272

100:                                              ; preds = %originalBBpart212, %originalBBpart28
  %101 = load i32, i32* @x.87
  %102 = load i32, i32* @y.88
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %100, %originalBB14alteredBB
  store i32 -1, i32* %2, align 4, !dbg !4274
  %109 = load i32, i32* @x.87
  %110 = load i32, i32* @y.88
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %134, !dbg !4274

117:                                              ; preds = %originalBBpart24, %21
  %118 = load i32, i32* @x.87
  %119 = load i32, i32* @y.88
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  store i32 0, i32* %2, align 4, !dbg !4275
  %126 = load i32, i32* @x.87
  %127 = load i32, i32* @y.88
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %134, !dbg !4275

134:                                              ; preds = %originalBBpart220, %originalBBpart216
  %135 = load i32, i32* @x.87
  %136 = load i32, i32* @y.88
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %134, %originalBB22alteredBB
  %143 = load i32, i32* %2, align 4, !dbg !4276
  %144 = load i32, i32* @x.87
  %145 = load i32, i32* @y.88
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i32 %143, !dbg !4276

originalBBalteredBB:                              ; preds = %originalBB, %24
  %152 = load i8, i8* %4, align 1, !dbg !4263
  %153 = trunc i8 %152 to i1, !dbg !4263
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %43
  %154 = call i32* @__errno_location() #15, !dbg !4265
  %155 = load i32, i32* %154, align 4, !dbg !4265
  %156 = icmp ne i32 %155, 9, !dbg !4266
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  %157 = load i8, i8* %6, align 1, !dbg !4268
  %158 = trunc i8 %157 to i1, !dbg !4268
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  %159 = call i32* @__errno_location() #15, !dbg !4272
  store i32 0, i32* %159, align 4, !dbg !4273
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %100
  store i32 -1, i32* %2, align 4, !dbg !4274
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  store i32 0, i32* %2, align 4, !dbg !4275
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %134
  %160 = load i32, i32* %2, align 4, !dbg !4276
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !4277 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca [257 x i8], align 16
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !4281, metadata !DIExpression()), !dbg !4282
  call void @llvm.dbg.declare(metadata [257 x i8]* %4, metadata !4283, metadata !DIExpression()), !dbg !4287
  %5 = load i32, i32* %3, align 4, !dbg !4288
  %6 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4290
  %7 = call i32 @setlocale_null_r(i32 %5, i8* %6, i64 257), !dbg !4291
  %8 = icmp ne i32 %7, 0, !dbg !4291
  br i1 %8, label %9, label %26, !dbg !4292

9:                                                ; preds = %1
  %10 = load i32, i32* @x.89
  %11 = load i32, i32* @y.90
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  store i1 false, i1* %2, align 1, !dbg !4293
  %18 = load i32, i32* @x.89
  %19 = load i32, i32* @y.90
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %53, !dbg !4293

26:                                               ; preds = %1
  %27 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4294
  %28 = call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.152, i64 0, i64 0)) #13, !dbg !4295
  %29 = icmp eq i32 %28, 0, !dbg !4296
  br i1 %29, label %50, label %30, !dbg !4297

30:                                               ; preds = %26
  %31 = load i32, i32* @x.89
  %32 = load i32, i32* @y.90
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4298
  %40 = call i32 @strcmp(i8* %39, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.153, i64 0, i64 0)) #13, !dbg !4299
  %41 = icmp eq i32 %40, 0, !dbg !4300
  %42 = load i32, i32* @x.89
  %43 = load i32, i32* @y.90
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %50, !dbg !4297

50:                                               ; preds = %originalBBpart24, %26
  %51 = phi i1 [ true, %26 ], [ %41, %originalBBpart24 ]
  %52 = xor i1 %51, true, !dbg !4301
  store i1 %52, i1* %2, align 1, !dbg !4302
  br label %53, !dbg !4302

53:                                               ; preds = %50, %originalBBpart2
  %54 = load i32, i32* @x.89
  %55 = load i32, i32* @y.90
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i1, i1* %2, align 1, !dbg !4303
  %63 = load i32, i32* @x.89
  %64 = load i32, i32* @y.90
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i1 %62, !dbg !4303

originalBBalteredBB:                              ; preds = %originalBB, %9
  store i1 false, i1* %2, align 1, !dbg !4293
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %71 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !4298
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.153, i64 0, i64 0)) #13, !dbg !4299
  %73 = icmp eq i32 %72, 0, !dbg !4300
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %74 = load i1, i1* %2, align 1, !dbg !4303
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !4304 {
  %1 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %1, metadata !4308, metadata !DIExpression()), !dbg !4309
  %2 = call i8* @nl_langinfo(i32 14) #10, !dbg !4310
  store i8* %2, i8** %1, align 8, !dbg !4311
  %3 = load i8*, i8** %1, align 8, !dbg !4312
  %4 = icmp eq i8* %3, null, !dbg !4314
  br i1 %4, label %5, label %22, !dbg !4315

5:                                                ; preds = %0
  %6 = load i32, i32* @x.91
  %7 = load i32, i32* @y.92
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.156, i64 0, i64 0), i8** %1, align 8, !dbg !4316
  %14 = load i32, i32* @x.91
  %15 = load i32, i32* @y.92
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %22, !dbg !4317

22:                                               ; preds = %originalBBpart2, %0
  %23 = load i32, i32* @x.91
  %24 = load i32, i32* @y.92
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load i8*, i8** %1, align 8, !dbg !4318
  %32 = getelementptr inbounds i8, i8* %31, i64 0, !dbg !4318
  %33 = load i8, i8* %32, align 1, !dbg !4318
  %34 = sext i8 %33 to i32, !dbg !4318
  %35 = icmp eq i32 %34, 0, !dbg !4322
  %36 = load i32, i32* @x.91
  %37 = load i32, i32* @y.92
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %44, label %61, !dbg !4323

44:                                               ; preds = %originalBBpart24
  %45 = load i32, i32* @x.91
  %46 = load i32, i32* @y.92
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.157, i64 0, i64 0), i8** %1, align 8, !dbg !4324
  %53 = load i32, i32* @x.91
  %54 = load i32, i32* @y.92
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %61, !dbg !4325

61:                                               ; preds = %originalBBpart28, %originalBBpart24
  %62 = load i32, i32* @x.91
  %63 = load i32, i32* @y.92
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %1, align 8, !dbg !4326
  %71 = load i32, i32* @x.91
  %72 = load i32, i32* @y.92
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %70, !dbg !4327

originalBBalteredBB:                              ; preds = %originalBB, %5
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.156, i64 0, i64 0), i8** %1, align 8, !dbg !4316
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %79 = load i8*, i8** %1, align 8, !dbg !4318
  %80 = getelementptr inbounds i8, i8* %79, i64 0, !dbg !4318
  %81 = load i8, i8* %80, align 1, !dbg !4318
  %82 = sext i8 %81 to i32, !dbg !4318
  %83 = icmp eq i32 %82, 0, !dbg !4322
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.157, i64 0, i64 0), i8** %1, align 8, !dbg !4324
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %84 = load i8*, i8** %1, align 8, !dbg !4326
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @mgetgroups(i8*, i32, i32**) #4 !dbg !4328 {
  %4 = load i32, i32* @x.93
  %5 = load i32, i32* @y.94
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32**, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32*, align 8
  %19 = alloca i32*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32*, align 8
  %25 = alloca i32*, align 8
  store i8* %0, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !4330, metadata !DIExpression()), !dbg !4331
  store i32 %1, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !4332, metadata !DIExpression()), !dbg !4333
  store i32** %2, i32*** %15, align 8
  call void @llvm.dbg.declare(metadata i32*** %15, metadata !4334, metadata !DIExpression()), !dbg !4335
  call void @llvm.dbg.declare(metadata i32* %16, metadata !4336, metadata !DIExpression()), !dbg !4337
  call void @llvm.dbg.declare(metadata i32* %17, metadata !4338, metadata !DIExpression()), !dbg !4339
  call void @llvm.dbg.declare(metadata i32** %18, metadata !4340, metadata !DIExpression()), !dbg !4341
  %26 = load i8*, i8** %13, align 8, !dbg !4342
  %27 = icmp ne i8* %26, null, !dbg !4342
  %28 = load i32, i32* @x.93
  %29 = load i32, i32* @y.94
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %27, label %36, label %193, !dbg !4344

36:                                               ; preds = %originalBBpart2
  %37 = load i32, i32* @x.93
  %38 = load i32, i32* @y.94
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  store i32 10, i32* %16, align 4, !dbg !4345
  %45 = load i32, i32* %16, align 4, !dbg !4347
  %46 = sext i32 %45 to i64, !dbg !4347
  %47 = call i32* @realloc_groupbuf(i32* null, i64 %46), !dbg !4348
  store i32* %47, i32** %18, align 8, !dbg !4349
  %48 = load i32*, i32** %18, align 8, !dbg !4350
  %49 = icmp eq i32* %48, null, !dbg !4352
  %50 = load i32, i32* @x.93
  %51 = load i32, i32* @y.94
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %49, label %58, label %59, !dbg !4353

58:                                               ; preds = %originalBBpart24
  store i32 -1, i32* %12, align 4, !dbg !4354
  br label %601, !dbg !4354

59:                                               ; preds = %originalBBpart24
  %60 = load i32, i32* @x.93
  %61 = load i32, i32* @y.94
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = load i32, i32* @x.93
  %69 = load i32, i32* @y.94
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %76, !dbg !4355

76:                                               ; preds = %192, %originalBBpart28
  call void @llvm.dbg.declare(metadata i32** %19, metadata !4356, metadata !DIExpression()), !dbg !4358
  call void @llvm.dbg.declare(metadata i32* %20, metadata !4359, metadata !DIExpression()), !dbg !4360
  %77 = load i32, i32* %16, align 4, !dbg !4361
  store i32 %77, i32* %20, align 4, !dbg !4360
  %78 = load i8*, i8** %13, align 8, !dbg !4362
  %79 = load i32, i32* %14, align 4, !dbg !4363
  %80 = load i32*, i32** %18, align 8, !dbg !4364
  %81 = call i32 @getgrouplist(i8* %78, i32 %79, i32* %80, i32* %16), !dbg !4365
  store i32 %81, i32* %17, align 4, !dbg !4366
  %82 = load i32, i32* %17, align 4, !dbg !4367
  %83 = icmp slt i32 %82, 0, !dbg !4369
  br i1 %83, label %84, label %123, !dbg !4370

84:                                               ; preds = %76
  %85 = load i32, i32* @x.93
  %86 = load i32, i32* @y.94
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %84, %originalBB10alteredBB
  %93 = load i32, i32* %20, align 4, !dbg !4371
  %94 = load i32, i32* %16, align 4, !dbg !4372
  %95 = icmp eq i32 %93, %94, !dbg !4373
  %96 = load i32, i32* @x.93
  %97 = load i32, i32* @y.94
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %95, label %104, label %123, !dbg !4374

104:                                              ; preds = %originalBBpart212
  %105 = load i32, i32* @x.93
  %106 = load i32, i32* @y.94
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %104, %originalBB14alteredBB
  %113 = load i32, i32* %16, align 4, !dbg !4375
  %114 = mul nsw i32 %113, 2, !dbg !4375
  store i32 %114, i32* %16, align 4, !dbg !4375
  %115 = load i32, i32* @x.93
  %116 = load i32, i32* @y.94
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart227, label %originalBB14alteredBB

originalBBpart227:                                ; preds = %originalBB14
  br label %123, !dbg !4376

123:                                              ; preds = %originalBBpart227, %originalBBpart212, %76
  %124 = load i32, i32* @x.93
  %125 = load i32, i32* @y.94
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %123, %originalBB29alteredBB
  %132 = load i32*, i32** %18, align 8, !dbg !4377
  %133 = load i32, i32* %16, align 4, !dbg !4379
  %134 = sext i32 %133 to i64, !dbg !4379
  %135 = call i32* @realloc_groupbuf(i32* %132, i64 %134), !dbg !4380
  store i32* %135, i32** %19, align 8, !dbg !4381
  %136 = icmp eq i32* %135, null, !dbg !4382
  %137 = load i32, i32* @x.93
  %138 = load i32, i32* @y.94
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %136, label %145, label %168, !dbg !4383

145:                                              ; preds = %originalBBpart231
  call void @llvm.dbg.declare(metadata i32* %21, metadata !4384, metadata !DIExpression()), !dbg !4386
  %146 = load i32, i32* @x.93
  %147 = load i32, i32* @y.94
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %145, %originalBB33alteredBB
  %154 = call i32* @__errno_location() #15, !dbg !4387
  %155 = load i32, i32* %154, align 4, !dbg !4387
  store i32 %155, i32* %21, align 4, !dbg !4386
  %156 = load i32*, i32** %18, align 8, !dbg !4388
  %157 = bitcast i32* %156 to i8*, !dbg !4388
  call void @free(i8* %157) #10, !dbg !4389
  %158 = load i32, i32* %21, align 4, !dbg !4390
  %159 = call i32* @__errno_location() #15, !dbg !4391
  store i32 %158, i32* %159, align 4, !dbg !4392
  store i32 -1, i32* %12, align 4, !dbg !4393
  %160 = load i32, i32* @x.93
  %161 = load i32, i32* @y.94
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %601, !dbg !4393

168:                                              ; preds = %originalBBpart231
  %169 = load i32*, i32** %19, align 8, !dbg !4394
  store i32* %169, i32** %18, align 8, !dbg !4395
  %170 = load i32, i32* %17, align 4, !dbg !4396
  %171 = icmp sle i32 0, %170, !dbg !4398
  br i1 %171, label %172, label %192, !dbg !4399

172:                                              ; preds = %168
  %173 = load i32, i32* @x.93
  %174 = load i32, i32* @y.94
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %172, %originalBB37alteredBB
  %181 = load i32*, i32** %18, align 8, !dbg !4400
  %182 = load i32**, i32*** %15, align 8, !dbg !4402
  store i32* %181, i32** %182, align 8, !dbg !4403
  %183 = load i32, i32* %16, align 4, !dbg !4404
  store i32 %183, i32* %12, align 4, !dbg !4405
  %184 = load i32, i32* @x.93
  %185 = load i32, i32* @y.94
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %601, !dbg !4405

192:                                              ; preds = %168
  br label %76, !dbg !4355, !llvm.loop !4406

193:                                              ; preds = %originalBBpart2
  %194 = load i32, i32* @x.93
  %195 = load i32, i32* @y.94
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %193, %originalBB41alteredBB
  %202 = load i8*, i8** %13, align 8, !dbg !4408
  %203 = icmp ne i8* %202, null, !dbg !4408
  %204 = load i32, i32* @x.93
  %205 = load i32, i32* @y.94
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br i1 %203, label %212, label %216, !dbg !4408

212:                                              ; preds = %originalBBpart243
  %213 = load i8*, i8** %13, align 8, !dbg !4409
  %214 = load i32, i32* %14, align 4, !dbg !4410
  %215 = call i32 @getugroups(i32 0, i32* null, i8* %213, i32 %214), !dbg !4411
  br label %218, !dbg !4408

216:                                              ; preds = %originalBBpart243
  %217 = call i32 @getgroups(i32 0, i32* null) #10, !dbg !4412
  br label %218, !dbg !4408

218:                                              ; preds = %216, %212
  %219 = phi i32 [ %215, %212 ], [ %217, %216 ], !dbg !4408
  store i32 %219, i32* %16, align 4, !dbg !4413
  %220 = load i32, i32* %16, align 4, !dbg !4414
  %221 = icmp slt i32 %220, 0, !dbg !4416
  br i1 %221, label %222, label %254, !dbg !4417

222:                                              ; preds = %218
  %223 = load i32, i32* @x.93
  %224 = load i32, i32* @y.94
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %222, %originalBB45alteredBB
  %231 = call i32* @__errno_location() #15, !dbg !4418
  %232 = load i32, i32* %231, align 4, !dbg !4418
  %233 = icmp eq i32 %232, 38, !dbg !4421
  %234 = load i32, i32* @x.93
  %235 = load i32, i32* @y.94
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br i1 %233, label %242, label %253, !dbg !4422

242:                                              ; preds = %originalBBpart247
  %243 = call i32* @realloc_groupbuf(i32* null, i64 1), !dbg !4423
  store i32* %243, i32** %18, align 8, !dbg !4424
  %244 = icmp ne i32* %243, null, !dbg !4424
  br i1 %244, label %245, label %253, !dbg !4425

245:                                              ; preds = %242
  %246 = load i32*, i32** %18, align 8, !dbg !4426
  %247 = load i32**, i32*** %15, align 8, !dbg !4428
  store i32* %246, i32** %247, align 8, !dbg !4429
  %248 = load i32, i32* %14, align 4, !dbg !4430
  %249 = load i32*, i32** %18, align 8, !dbg !4431
  store i32 %248, i32* %249, align 4, !dbg !4432
  %250 = load i32, i32* %14, align 4, !dbg !4433
  %251 = icmp ne i32 %250, -1, !dbg !4434
  %252 = zext i1 %251 to i32, !dbg !4434
  store i32 %252, i32* %12, align 4, !dbg !4435
  br label %601, !dbg !4435

253:                                              ; preds = %242, %originalBBpart247
  store i32 -1, i32* %12, align 4, !dbg !4436
  br label %601, !dbg !4436

254:                                              ; preds = %218
  %255 = load i32, i32* @x.93
  %256 = load i32, i32* @y.94
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %254, %originalBB49alteredBB
  %263 = load i32, i32* %16, align 4, !dbg !4437
  %264 = icmp eq i32 %263, 0, !dbg !4439
  %265 = load i32, i32* @x.93
  %266 = load i32, i32* @y.94
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br i1 %264, label %295, label %273, !dbg !4440

273:                                              ; preds = %originalBBpart251
  %274 = load i32, i32* @x.93
  %275 = load i32, i32* @y.94
  %276 = sub i32 %274, 1
  %277 = mul i32 %274, %276
  %278 = urem i32 %277, 2
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %279, %280
  br i1 %281, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %273, %originalBB53alteredBB
  %282 = load i8*, i8** %13, align 8, !dbg !4441
  %283 = icmp ne i8* %282, null, !dbg !4441
  %284 = load i32, i32* @x.93
  %285 = load i32, i32* @y.94
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br i1 %283, label %314, label %292, !dbg !4442

292:                                              ; preds = %originalBBpart255
  %293 = load i32, i32* %14, align 4, !dbg !4443
  %294 = icmp ne i32 %293, -1, !dbg !4444
  br i1 %294, label %295, label %314, !dbg !4445

295:                                              ; preds = %292, %originalBBpart251
  %296 = load i32, i32* @x.93
  %297 = load i32, i32* @y.94
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %295, %originalBB57alteredBB
  %304 = load i32, i32* %16, align 4, !dbg !4446
  %305 = add nsw i32 %304, 1, !dbg !4446
  store i32 %305, i32* %16, align 4, !dbg !4446
  %306 = load i32, i32* @x.93
  %307 = load i32, i32* @y.94
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBBpart269, label %originalBB57alteredBB

originalBBpart269:                                ; preds = %originalBB57
  br label %314, !dbg !4447

314:                                              ; preds = %originalBBpart269, %292, %originalBBpart255
  %315 = load i32, i32* @x.93
  %316 = load i32, i32* @y.94
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %314, %originalBB71alteredBB
  %323 = load i32, i32* %16, align 4, !dbg !4448
  %324 = sext i32 %323 to i64, !dbg !4448
  %325 = call i32* @realloc_groupbuf(i32* null, i64 %324), !dbg !4449
  store i32* %325, i32** %18, align 8, !dbg !4450
  %326 = load i32*, i32** %18, align 8, !dbg !4451
  %327 = icmp eq i32* %326, null, !dbg !4453
  %328 = load i32, i32* @x.93
  %329 = load i32, i32* @y.94
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br i1 %327, label %336, label %353, !dbg !4454

336:                                              ; preds = %originalBBpart273
  %337 = load i32, i32* @x.93
  %338 = load i32, i32* @y.94
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %336, %originalBB75alteredBB
  store i32 -1, i32* %12, align 4, !dbg !4455
  %345 = load i32, i32* @x.93
  %346 = load i32, i32* @y.94
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  br label %601, !dbg !4455

353:                                              ; preds = %originalBBpart273
  %354 = load i8*, i8** %13, align 8, !dbg !4456
  %355 = icmp ne i8* %354, null, !dbg !4456
  br i1 %355, label %356, label %362, !dbg !4456

356:                                              ; preds = %353
  %357 = load i32, i32* %16, align 4, !dbg !4457
  %358 = load i32*, i32** %18, align 8, !dbg !4458
  %359 = load i8*, i8** %13, align 8, !dbg !4459
  %360 = load i32, i32* %14, align 4, !dbg !4460
  %361 = call i32 @getugroups(i32 %357, i32* %358, i8* %359, i32 %360), !dbg !4461
  br label %391, !dbg !4456

362:                                              ; preds = %353
  %363 = load i32, i32* @x.93
  %364 = load i32, i32* @y.94
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %362, %originalBB79alteredBB
  %371 = load i32, i32* %16, align 4, !dbg !4462
  %372 = load i32, i32* %14, align 4, !dbg !4463
  %373 = icmp ne i32 %372, -1, !dbg !4464
  %374 = zext i1 %373 to i32, !dbg !4464
  %375 = sub nsw i32 %371, %374, !dbg !4465
  %376 = load i32*, i32** %18, align 8, !dbg !4466
  %377 = load i32, i32* %14, align 4, !dbg !4467
  %378 = icmp ne i32 %377, -1, !dbg !4468
  %379 = zext i1 %378 to i32, !dbg !4468
  %380 = sext i32 %379 to i64, !dbg !4469
  %381 = getelementptr inbounds i32, i32* %376, i64 %380, !dbg !4469
  %382 = call i32 @getgroups(i32 %375, i32* %381) #10, !dbg !4470
  %383 = load i32, i32* @x.93
  %384 = load i32, i32* @y.94
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBBpart287, label %originalBB79alteredBB

originalBBpart287:                                ; preds = %originalBB79
  br label %391, !dbg !4456

391:                                              ; preds = %originalBBpart287, %356
  %392 = phi i32 [ %361, %356 ], [ %382, %originalBBpart287 ], !dbg !4456
  store i32 %392, i32* %17, align 4, !dbg !4471
  %393 = load i32, i32* %17, align 4, !dbg !4472
  %394 = icmp slt i32 %393, 0, !dbg !4474
  br i1 %394, label %395, label %402, !dbg !4475

395:                                              ; preds = %391
  call void @llvm.dbg.declare(metadata i32* %22, metadata !4476, metadata !DIExpression()), !dbg !4478
  %396 = call i32* @__errno_location() #15, !dbg !4479
  %397 = load i32, i32* %396, align 4, !dbg !4479
  store i32 %397, i32* %22, align 4, !dbg !4478
  %398 = load i32*, i32** %18, align 8, !dbg !4480
  %399 = bitcast i32* %398 to i8*, !dbg !4480
  call void @free(i8* %399) #10, !dbg !4481
  %400 = load i32, i32* %22, align 4, !dbg !4482
  %401 = call i32* @__errno_location() #15, !dbg !4483
  store i32 %400, i32* %401, align 4, !dbg !4484
  store i32 -1, i32* %12, align 4, !dbg !4485
  br label %601, !dbg !4485

402:                                              ; preds = %391
  %403 = load i32, i32* @x.93
  %404 = load i32, i32* @y.94
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %402, %originalBB89alteredBB
  %411 = load i8*, i8** %13, align 8, !dbg !4486
  %412 = icmp ne i8* %411, null, !dbg !4486
  %413 = load i32, i32* @x.93
  %414 = load i32, i32* @y.94
  %415 = sub i32 %413, 1
  %416 = mul i32 %413, %415
  %417 = urem i32 %416, 2
  %418 = icmp eq i32 %417, 0
  %419 = icmp slt i32 %414, 10
  %420 = or i1 %418, %419
  br i1 %420, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br i1 %412, label %429, label %421, !dbg !4488

421:                                              ; preds = %originalBBpart291
  %422 = load i32, i32* %14, align 4, !dbg !4489
  %423 = icmp ne i32 %422, -1, !dbg !4490
  br i1 %423, label %424, label %429, !dbg !4491

424:                                              ; preds = %421
  %425 = load i32, i32* %14, align 4, !dbg !4492
  %426 = load i32*, i32** %18, align 8, !dbg !4494
  store i32 %425, i32* %426, align 4, !dbg !4495
  %427 = load i32, i32* %17, align 4, !dbg !4496
  %428 = add nsw i32 %427, 1, !dbg !4496
  store i32 %428, i32* %17, align 4, !dbg !4496
  br label %429, !dbg !4497

429:                                              ; preds = %424, %421, %originalBBpart291
  %430 = load i32, i32* @x.93
  %431 = load i32, i32* @y.94
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %429, %originalBB93alteredBB
  %438 = load i32*, i32** %18, align 8, !dbg !4498
  %439 = load i32**, i32*** %15, align 8, !dbg !4499
  store i32* %438, i32** %439, align 8, !dbg !4500
  %440 = load i32, i32* %17, align 4, !dbg !4501
  %441 = icmp slt i32 1, %440, !dbg !4503
  %442 = load i32, i32* @x.93
  %443 = load i32, i32* @y.94
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br i1 %441, label %450, label %599, !dbg !4504

450:                                              ; preds = %originalBBpart295
  call void @llvm.dbg.declare(metadata i32* %23, metadata !4505, metadata !DIExpression()), !dbg !4507
  %451 = load i32*, i32** %18, align 8, !dbg !4508
  %452 = load i32, i32* %451, align 4, !dbg !4509
  store i32 %452, i32* %23, align 4, !dbg !4507
  call void @llvm.dbg.declare(metadata i32** %24, metadata !4510, metadata !DIExpression()), !dbg !4511
  call void @llvm.dbg.declare(metadata i32** %25, metadata !4512, metadata !DIExpression()), !dbg !4513
  %453 = load i32*, i32** %18, align 8, !dbg !4514
  %454 = load i32, i32* %17, align 4, !dbg !4515
  %455 = sext i32 %454 to i64, !dbg !4516
  %456 = getelementptr inbounds i32, i32* %453, i64 %455, !dbg !4516
  store i32* %456, i32** %25, align 8, !dbg !4513
  %457 = load i32*, i32** %18, align 8, !dbg !4517
  %458 = getelementptr inbounds i32, i32* %457, i64 1, !dbg !4519
  store i32* %458, i32** %24, align 8, !dbg !4520
  br label %459, !dbg !4521

459:                                              ; preds = %originalBBpart2129, %450
  %460 = load i32, i32* @x.93
  %461 = load i32, i32* @y.94
  %462 = sub i32 %460, 1
  %463 = mul i32 %460, %462
  %464 = urem i32 %463, 2
  %465 = icmp eq i32 %464, 0
  %466 = icmp slt i32 %461, 10
  %467 = or i1 %465, %466
  br i1 %467, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %459, %originalBB97alteredBB
  %468 = load i32*, i32** %24, align 8, !dbg !4522
  %469 = load i32*, i32** %25, align 8, !dbg !4524
  %470 = icmp ult i32* %468, %469, !dbg !4525
  %471 = load i32, i32* @x.93
  %472 = load i32, i32* @y.94
  %473 = sub i32 %471, 1
  %474 = mul i32 %471, %473
  %475 = urem i32 %474, 2
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %476, %477
  br i1 %478, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br i1 %470, label %479, label %582, !dbg !4526

479:                                              ; preds = %originalBBpart299
  %480 = load i32, i32* @x.93
  %481 = load i32, i32* @y.94
  %482 = sub i32 %480, 1
  %483 = mul i32 %480, %482
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %481, 10
  %487 = or i1 %485, %486
  br i1 %487, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %479, %originalBB101alteredBB
  %488 = load i32*, i32** %24, align 8, !dbg !4527
  %489 = load i32, i32* %488, align 4, !dbg !4530
  %490 = load i32, i32* %23, align 4, !dbg !4531
  %491 = icmp eq i32 %489, %490, !dbg !4532
  %492 = load i32, i32* @x.93
  %493 = load i32, i32* @y.94
  %494 = sub i32 %492, 1
  %495 = mul i32 %492, %494
  %496 = urem i32 %495, 2
  %497 = icmp eq i32 %496, 0
  %498 = icmp slt i32 %493, 10
  %499 = or i1 %497, %498
  br i1 %499, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br i1 %491, label %522, label %500, !dbg !4533

500:                                              ; preds = %originalBBpart2103
  %501 = load i32, i32* @x.93
  %502 = load i32, i32* @y.94
  %503 = sub i32 %501, 1
  %504 = mul i32 %501, %503
  %505 = urem i32 %504, 2
  %506 = icmp eq i32 %505, 0
  %507 = icmp slt i32 %502, 10
  %508 = or i1 %506, %507
  br i1 %508, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %500, %originalBB105alteredBB
  %509 = load i32*, i32** %24, align 8, !dbg !4534
  %510 = load i32, i32* %509, align 4, !dbg !4535
  %511 = load i32*, i32** %18, align 8, !dbg !4536
  %512 = load i32, i32* %511, align 4, !dbg !4537
  %513 = icmp eq i32 %510, %512, !dbg !4538
  %514 = load i32, i32* @x.93
  %515 = load i32, i32* @y.94
  %516 = sub i32 %514, 1
  %517 = mul i32 %514, %516
  %518 = urem i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %519, %520
  br i1 %521, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br i1 %513, label %522, label %541, !dbg !4539

522:                                              ; preds = %originalBBpart2107, %originalBBpart2103
  %523 = load i32, i32* @x.93
  %524 = load i32, i32* @y.94
  %525 = sub i32 %523, 1
  %526 = mul i32 %523, %525
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %524, 10
  %530 = or i1 %528, %529
  br i1 %530, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %522, %originalBB109alteredBB
  %531 = load i32, i32* %17, align 4, !dbg !4540
  %532 = add nsw i32 %531, -1, !dbg !4540
  store i32 %532, i32* %17, align 4, !dbg !4540
  %533 = load i32, i32* @x.93
  %534 = load i32, i32* @y.94
  %535 = sub i32 %533, 1
  %536 = mul i32 %533, %535
  %537 = urem i32 %536, 2
  %538 = icmp eq i32 %537, 0
  %539 = icmp slt i32 %534, 10
  %540 = or i1 %538, %539
  br i1 %540, label %originalBBpart2121, label %originalBB109alteredBB

originalBBpart2121:                               ; preds = %originalBB109
  br label %546, !dbg !4541

541:                                              ; preds = %originalBBpart2107
  %542 = load i32*, i32** %24, align 8, !dbg !4542
  %543 = load i32, i32* %542, align 4, !dbg !4543
  %544 = load i32*, i32** %18, align 8, !dbg !4544
  %545 = getelementptr inbounds i32, i32* %544, i32 1, !dbg !4544
  store i32* %545, i32** %18, align 8, !dbg !4544
  store i32 %543, i32* %545, align 4, !dbg !4545
  br label %546

546:                                              ; preds = %541, %originalBBpart2121
  %547 = load i32, i32* @x.93
  %548 = load i32, i32* @y.94
  %549 = sub i32 %547, 1
  %550 = mul i32 %547, %549
  %551 = urem i32 %550, 2
  %552 = icmp eq i32 %551, 0
  %553 = icmp slt i32 %548, 10
  %554 = or i1 %552, %553
  br i1 %554, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %546, %originalBB123alteredBB
  %555 = load i32, i32* @x.93
  %556 = load i32, i32* @y.94
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  br label %563, !dbg !4546

563:                                              ; preds = %originalBBpart2125
  %564 = load i32, i32* @x.93
  %565 = load i32, i32* @y.94
  %566 = sub i32 %564, 1
  %567 = mul i32 %564, %566
  %568 = urem i32 %567, 2
  %569 = icmp eq i32 %568, 0
  %570 = icmp slt i32 %565, 10
  %571 = or i1 %569, %570
  br i1 %571, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %563, %originalBB127alteredBB
  %572 = load i32*, i32** %24, align 8, !dbg !4547
  %573 = getelementptr inbounds i32, i32* %572, i32 1, !dbg !4547
  store i32* %573, i32** %24, align 8, !dbg !4547
  %574 = load i32, i32* @x.93
  %575 = load i32, i32* @y.94
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br label %459, !dbg !4548, !llvm.loop !4549

582:                                              ; preds = %originalBBpart299
  %583 = load i32, i32* @x.93
  %584 = load i32, i32* @y.94
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %582, %originalBB131alteredBB
  %591 = load i32, i32* @x.93
  %592 = load i32, i32* @y.94
  %593 = sub i32 %591, 1
  %594 = mul i32 %591, %593
  %595 = urem i32 %594, 2
  %596 = icmp eq i32 %595, 0
  %597 = icmp slt i32 %592, 10
  %598 = or i1 %596, %597
  br i1 %598, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  br label %599, !dbg !4551

599:                                              ; preds = %originalBBpart2133, %originalBBpart295
  %600 = load i32, i32* %17, align 4, !dbg !4552
  store i32 %600, i32* %12, align 4, !dbg !4553
  br label %601, !dbg !4553

601:                                              ; preds = %599, %395, %originalBBpart277, %253, %245, %originalBBpart239, %originalBBpart235, %58
  %602 = load i32, i32* @x.93
  %603 = load i32, i32* @y.94
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %601, %originalBB135alteredBB
  %610 = load i32, i32* %12, align 4, !dbg !4554
  %611 = load i32, i32* @x.93
  %612 = load i32, i32* @y.94
  %613 = sub i32 %611, 1
  %614 = mul i32 %611, %613
  %615 = urem i32 %614, 2
  %616 = icmp eq i32 %615, 0
  %617 = icmp slt i32 %612, 10
  %618 = or i1 %616, %617
  br i1 %618, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  ret i32 %610, !dbg !4554

originalBBalteredBB:                              ; preds = %originalBB, %3
  %619 = alloca i32, align 4
  %620 = alloca i8*, align 8
  %621 = alloca i32, align 4
  %622 = alloca i32**, align 8
  %623 = alloca i32, align 4
  %624 = alloca i32, align 4
  %625 = alloca i32*, align 8
  %626 = alloca i32*, align 8
  %627 = alloca i32, align 4
  %628 = alloca i32, align 4
  %629 = alloca i32, align 4
  %630 = alloca i32, align 4
  %631 = alloca i32*, align 8
  %632 = alloca i32*, align 8
  store i8* %0, i8** %620, align 8
  call void @llvm.dbg.declare(metadata i8** %620, metadata !4555, metadata !DIExpression()), !dbg !4331
  store i32 %1, i32* %621, align 4
  call void @llvm.dbg.declare(metadata i32* %621, metadata !4558, metadata !DIExpression()), !dbg !4333
  store i32** %2, i32*** %622, align 8
  call void @llvm.dbg.declare(metadata i32*** %622, metadata !4559, metadata !DIExpression()), !dbg !4335
  call void @llvm.dbg.declare(metadata i32* %623, metadata !4560, metadata !DIExpression()), !dbg !4337
  call void @llvm.dbg.declare(metadata i32* %624, metadata !4561, metadata !DIExpression()), !dbg !4339
  call void @llvm.dbg.declare(metadata i32** %625, metadata !4562, metadata !DIExpression()), !dbg !4341
  %633 = load i8*, i8** %620, align 8, !dbg !4342
  %634 = icmp ne i8* %633, null, !dbg !4342
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  store i32 10, i32* %16, align 4, !dbg !4345
  %635 = load i32, i32* %16, align 4, !dbg !4347
  %636 = sext i32 %635 to i64, !dbg !4347
  %637 = call i32* @realloc_groupbuf(i32* null, i64 %636), !dbg !4348
  store i32* %637, i32** %18, align 8, !dbg !4349
  %638 = load i32*, i32** %18, align 8, !dbg !4350
  %639 = icmp eq i32* %638, null, !dbg !4352
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %84
  %640 = load i32, i32* %20, align 4, !dbg !4371
  %641 = load i32, i32* %16, align 4, !dbg !4372
  %642 = icmp eq i32 %640, %641, !dbg !4373
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %104
  %643 = load i32, i32* %16, align 4, !dbg !4375
  %_ = sub i32 0, %643
  %gen = add i32 %_, 2
  %_15 = sub i32 %643, 2
  %gen16 = mul i32 %_15, 2
  %_17 = sub i32 %643, 2
  %gen18 = mul i32 %_17, 2
  %_19 = sub i32 0, %643
  %gen20 = add i32 %_19, 2
  %_21 = sub i32 0, %643
  %gen22 = add i32 %_21, 2
  %_23 = sub i32 %643, 2
  %gen24 = mul i32 %_23, 2
  %644 = mul nsw i32 %643, 2, !dbg !4375
  store i32 %644, i32* %16, align 4, !dbg !4375
  br label %originalBB14

originalBB29alteredBB:                            ; preds = %originalBB29, %123
  %645 = load i32*, i32** %18, align 8, !dbg !4377
  %646 = load i32, i32* %16, align 4, !dbg !4379
  %647 = sext i32 %646 to i64, !dbg !4379
  %648 = call i32* @realloc_groupbuf(i32* %645, i64 %647), !dbg !4380
  store i32* %648, i32** %19, align 8, !dbg !4381
  %649 = icmp eq i32* %648, null, !dbg !4382
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %145
  %650 = call i32* @__errno_location() #15, !dbg !4387
  %651 = load i32, i32* %650, align 4, !dbg !4387
  store i32 %651, i32* %21, align 4, !dbg !4386
  %652 = load i32*, i32** %18, align 8, !dbg !4388
  %653 = bitcast i32* %652 to i8*, !dbg !4388
  call void @free(i8* %653) #10, !dbg !4389
  %654 = load i32, i32* %21, align 4, !dbg !4390
  %655 = call i32* @__errno_location() #15, !dbg !4391
  store i32 %654, i32* %655, align 4, !dbg !4392
  store i32 -1, i32* %12, align 4, !dbg !4393
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %172
  %656 = load i32*, i32** %18, align 8, !dbg !4400
  %657 = load i32**, i32*** %15, align 8, !dbg !4402
  store i32* %656, i32** %657, align 8, !dbg !4403
  %658 = load i32, i32* %16, align 4, !dbg !4404
  store i32 %658, i32* %12, align 4, !dbg !4405
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %193
  %659 = load i8*, i8** %13, align 8, !dbg !4408
  %660 = icmp ne i8* %659, null, !dbg !4408
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %222
  %661 = call i32* @__errno_location() #15, !dbg !4418
  %662 = load i32, i32* %661, align 4, !dbg !4418
  %663 = icmp eq i32 %662, 38, !dbg !4421
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %254
  %664 = load i32, i32* %16, align 4, !dbg !4437
  %665 = icmp eq i32 %664, 0, !dbg !4439
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %273
  %666 = load i8*, i8** %13, align 8, !dbg !4441
  %667 = icmp ne i8* %666, null, !dbg !4441
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %295
  %668 = load i32, i32* %16, align 4, !dbg !4446
  %_58 = sub i32 %668, 1
  %gen59 = mul i32 %_58, 1
  %_60 = sub i32 %668, 1
  %gen61 = mul i32 %_60, 1
  %_62 = sub i32 %668, 1
  %gen63 = mul i32 %_62, 1
  %_64 = sub i32 %668, 1
  %gen65 = mul i32 %_64, 1
  %_66 = sub i32 %668, 1
  %gen67 = mul i32 %_66, 1
  %669 = add nsw i32 %668, 1, !dbg !4446
  store i32 %669, i32* %16, align 4, !dbg !4446
  br label %originalBB57

originalBB71alteredBB:                            ; preds = %originalBB71, %314
  %670 = load i32, i32* %16, align 4, !dbg !4448
  %671 = sext i32 %670 to i64, !dbg !4448
  %672 = call i32* @realloc_groupbuf(i32* null, i64 %671), !dbg !4449
  store i32* %672, i32** %18, align 8, !dbg !4450
  %673 = load i32*, i32** %18, align 8, !dbg !4451
  %674 = icmp eq i32* %673, null, !dbg !4453
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %336
  store i32 -1, i32* %12, align 4, !dbg !4455
  br label %originalBB75

originalBB79alteredBB:                            ; preds = %originalBB79, %362
  %675 = load i32, i32* %16, align 4, !dbg !4462
  %676 = load i32, i32* %14, align 4, !dbg !4463
  %677 = icmp ne i32 %676, -1, !dbg !4464
  %678 = zext i1 %677 to i32, !dbg !4464
  %_80 = sub i32 0, %675
  %gen81 = add i32 %_80, %678
  %_82 = sub i32 %675, %678
  %gen83 = mul i32 %_82, %678
  %_84 = sub i32 0, %675
  %gen85 = add i32 %_84, %678
  %679 = sub nsw i32 %675, %678, !dbg !4465
  %680 = load i32*, i32** %18, align 8, !dbg !4466
  %681 = load i32, i32* %14, align 4, !dbg !4467
  %682 = icmp ne i32 %681, -1, !dbg !4468
  %683 = zext i1 %682 to i32, !dbg !4468
  %684 = sext i32 %683 to i64, !dbg !4469
  %685 = getelementptr inbounds i32, i32* %680, i64 %684, !dbg !4469
  %686 = call i32 @getgroups(i32 %679, i32* %685) #10, !dbg !4470
  br label %originalBB79

originalBB89alteredBB:                            ; preds = %originalBB89, %402
  %687 = load i8*, i8** %13, align 8, !dbg !4486
  %688 = icmp ne i8* %687, null, !dbg !4486
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %429
  %689 = load i32*, i32** %18, align 8, !dbg !4498
  %690 = load i32**, i32*** %15, align 8, !dbg !4499
  store i32* %689, i32** %690, align 8, !dbg !4500
  %691 = load i32, i32* %17, align 4, !dbg !4501
  %692 = icmp slt i32 1, %691, !dbg !4503
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %459
  %693 = load i32*, i32** %24, align 8, !dbg !4522
  %694 = load i32*, i32** %25, align 8, !dbg !4524
  %695 = icmp ult i32* %693, %694, !dbg !4525
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %479
  %696 = load i32*, i32** %24, align 8, !dbg !4527
  %697 = load i32, i32* %696, align 4, !dbg !4530
  %698 = load i32, i32* %23, align 4, !dbg !4531
  %699 = icmp eq i32 %697, %698, !dbg !4532
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %500
  %700 = load i32*, i32** %24, align 8, !dbg !4534
  %701 = load i32, i32* %700, align 4, !dbg !4535
  %702 = load i32*, i32** %18, align 8, !dbg !4536
  %703 = load i32, i32* %702, align 4, !dbg !4537
  %704 = icmp eq i32 %701, %703, !dbg !4538
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %522
  %705 = load i32, i32* %17, align 4, !dbg !4540
  %_110 = sub i32 0, %705
  %gen111 = add i32 %_110, -1
  %_112 = sub i32 %705, -1
  %gen113 = mul i32 %_112, -1
  %_114 = shl i32 %705, -1
  %_115 = shl i32 %705, -1
  %_116 = sub i32 0, %705
  %gen117 = add i32 %_116, -1
  %_118 = sub i32 0, %705
  %gen119 = add i32 %_118, -1
  %706 = add nsw i32 %705, -1, !dbg !4540
  store i32 %706, i32* %17, align 4, !dbg !4540
  br label %originalBB109

originalBB123alteredBB:                           ; preds = %originalBB123, %546
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %563
  %707 = load i32*, i32** %24, align 8, !dbg !4547
  %708 = getelementptr inbounds i32, i32* %707, i32 1, !dbg !4547
  store i32* %708, i32** %24, align 8, !dbg !4547
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %582
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %601
  %709 = load i32, i32* %12, align 4, !dbg !4554
  br label %originalBB135
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32* @realloc_groupbuf(i32*, i64) #4 !dbg !4563 {
  %3 = load i32, i32* @x.95
  %4 = load i32, i32* @y.96
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i64, align 8
  store i32* %0, i32** %12, align 8
  call void @llvm.dbg.declare(metadata i32** %12, metadata !4566, metadata !DIExpression()), !dbg !4567
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !4568, metadata !DIExpression()), !dbg !4569
  %14 = load i64, i64* %13, align 8, !dbg !4570
  %15 = icmp ult i64 2305843009213693951, %14, !dbg !4570
  %16 = load i32, i32* @x.95
  %17 = load i32, i32* @y.96
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %26, !dbg !4572

24:                                               ; preds = %originalBBpart2
  %25 = call i32* @__errno_location() #15, !dbg !4573
  store i32 12, i32* %25, align 4, !dbg !4575
  store i32* null, i32** %11, align 8, !dbg !4576
  br label %49, !dbg !4576

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.95
  %28 = load i32, i32* @y.96
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i32*, i32** %12, align 8, !dbg !4577
  %36 = bitcast i32* %35 to i8*, !dbg !4577
  %37 = load i64, i64* %13, align 8, !dbg !4578
  %38 = mul i64 %37, 4, !dbg !4579
  %39 = call i8* @realloc(i8* %36, i64 %38) #10, !dbg !4580
  %40 = bitcast i8* %39 to i32*, !dbg !4580
  store i32* %40, i32** %11, align 8, !dbg !4581
  %41 = load i32, i32* @x.95
  %42 = load i32, i32* @y.96
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart211, label %originalBB1alteredBB

originalBBpart211:                                ; preds = %originalBB1
  br label %49, !dbg !4581

49:                                               ; preds = %originalBBpart211, %24
  %50 = load i32, i32* @x.95
  %51 = load i32, i32* @y.96
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %49, %originalBB13alteredBB
  %58 = load i32*, i32** %11, align 8, !dbg !4582
  %59 = load i32, i32* @x.95
  %60 = load i32, i32* @y.96
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  ret i32* %58, !dbg !4582

originalBBalteredBB:                              ; preds = %originalBB, %2
  %67 = alloca i32*, align 8
  %68 = alloca i32*, align 8
  %69 = alloca i64, align 8
  store i32* %0, i32** %68, align 8
  call void @llvm.dbg.declare(metadata i32** %68, metadata !4583, metadata !DIExpression()), !dbg !4567
  store i64 %1, i64* %69, align 8
  call void @llvm.dbg.declare(metadata i64* %69, metadata !4586, metadata !DIExpression()), !dbg !4569
  %70 = load i64, i64* %69, align 8, !dbg !4570
  %71 = icmp ult i64 2305843009213693951, %70, !dbg !4570
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %72 = load i32*, i32** %12, align 8, !dbg !4577
  %73 = bitcast i32* %72 to i8*, !dbg !4577
  %74 = load i64, i64* %13, align 8, !dbg !4578
  %_ = sub i64 0, %74
  %gen = add i64 %_, 4
  %_2 = sub i64 %74, 4
  %gen3 = mul i64 %_2, 4
  %_4 = sub i64 %74, 4
  %gen5 = mul i64 %_4, 4
  %_6 = sub i64 0, %74
  %gen7 = add i64 %_6, 4
  %_8 = sub i64 %74, 4
  %gen9 = mul i64 %_8, 4
  %75 = mul i64 %74, 4, !dbg !4579
  %76 = call i8* @realloc(i8* %73, i64 %75) #10, !dbg !4580
  %77 = bitcast i8* %76 to i32*, !dbg !4580
  store i32* %77, i32** %11, align 8, !dbg !4581
  br label %originalBB1

originalBB13alteredBB:                            ; preds = %originalBB13, %49
  %78 = load i32*, i32** %11, align 8, !dbg !4582
  br label %originalBB13
}

declare dso_local i32 @getgrouplist(i8*, i32, i32*, i32*) #3

; Function Attrs: nounwind
declare dso_local i32 @getgroups(i32, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !4587 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !4591, metadata !DIExpression()), !dbg !4592
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !4593, metadata !DIExpression()), !dbg !4594
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !4595, metadata !DIExpression()), !dbg !4596
  %7 = load i32, i32* %4, align 4, !dbg !4597
  %8 = load i8*, i8** %5, align 8, !dbg !4598
  %9 = load i64, i64* %6, align 8, !dbg !4599
  %10 = call i32 @setlocale_null_unlocked(i32 %7, i8* %8, i64 %9), !dbg !4600
  ret i32 %10, !dbg !4601
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !4602 {
  %4 = load i32, i32* @x.99
  %5 = load i32, i32* @y.100
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4603, metadata !DIExpression()), !dbg !4604
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4605, metadata !DIExpression()), !dbg !4606
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !4607, metadata !DIExpression()), !dbg !4608
  call void @llvm.dbg.declare(metadata i8** %16, metadata !4609, metadata !DIExpression()), !dbg !4610
  %18 = load i32, i32* %13, align 4, !dbg !4611
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !4612
  store i8* %19, i8** %16, align 8, !dbg !4610
  %20 = load i8*, i8** %16, align 8, !dbg !4613
  %21 = icmp eq i8* %20, null, !dbg !4615
  %22 = load i32, i32* @x.99
  %23 = load i32, i32* @y.100
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %53, !dbg !4616

30:                                               ; preds = %originalBBpart2
  %31 = load i64, i64* %15, align 8, !dbg !4617
  %32 = icmp ugt i64 %31, 0, !dbg !4620
  br i1 %32, label %33, label %52, !dbg !4621

33:                                               ; preds = %30
  %34 = load i32, i32* @x.99
  %35 = load i32, i32* @y.100
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %14, align 8, !dbg !4622
  %43 = getelementptr inbounds i8, i8* %42, i64 0, !dbg !4622
  store i8 0, i8* %43, align 1, !dbg !4623
  %44 = load i32, i32* @x.99
  %45 = load i32, i32* @y.100
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %52, !dbg !4622

52:                                               ; preds = %originalBBpart24, %30
  store i32 22, i32* %12, align 4, !dbg !4624
  br label %125, !dbg !4624

53:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !4625, metadata !DIExpression()), !dbg !4627
  %54 = load i32, i32* @x.99
  %55 = load i32, i32* @y.100
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i8*, i8** %16, align 8, !dbg !4628
  %63 = call i64 @strlen(i8* %62) #13, !dbg !4629
  store i64 %63, i64* %17, align 8, !dbg !4627
  %64 = load i64, i64* %17, align 8, !dbg !4630
  %65 = load i64, i64* %15, align 8, !dbg !4632
  %66 = icmp ult i64 %64, %65, !dbg !4633
  %67 = load i32, i32* @x.99
  %68 = load i32, i32* @y.100
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %96, !dbg !4634

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.99
  %77 = load i32, i32* @y.100
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = load i8*, i8** %14, align 8, !dbg !4635
  %85 = load i8*, i8** %16, align 8, !dbg !4637
  %86 = load i64, i64* %17, align 8, !dbg !4638
  %87 = add i64 %86, 1, !dbg !4639
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %85, i64 %87, i1 false), !dbg !4640
  store i32 0, i32* %12, align 4, !dbg !4641
  %88 = load i32, i32* @x.99
  %89 = load i32, i32* @y.100
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart220, label %originalBB10alteredBB

originalBBpart220:                                ; preds = %originalBB10
  br label %125, !dbg !4641

96:                                               ; preds = %originalBBpart28
  %97 = load i64, i64* %15, align 8, !dbg !4642
  %98 = icmp ugt i64 %97, 0, !dbg !4645
  br i1 %98, label %99, label %108, !dbg !4646

99:                                               ; preds = %96
  %100 = load i8*, i8** %14, align 8, !dbg !4647
  %101 = load i8*, i8** %16, align 8, !dbg !4649
  %102 = load i64, i64* %15, align 8, !dbg !4650
  %103 = sub i64 %102, 1, !dbg !4651
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %100, i8* align 1 %101, i64 %103, i1 false), !dbg !4652
  %104 = load i8*, i8** %14, align 8, !dbg !4653
  %105 = load i64, i64* %15, align 8, !dbg !4654
  %106 = sub i64 %105, 1, !dbg !4655
  %107 = getelementptr inbounds i8, i8* %104, i64 %106, !dbg !4653
  store i8 0, i8* %107, align 1, !dbg !4656
  br label %108, !dbg !4657

108:                                              ; preds = %99, %96
  %109 = load i32, i32* @x.99
  %110 = load i32, i32* @y.100
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %108, %originalBB22alteredBB
  store i32 34, i32* %12, align 4, !dbg !4658
  %117 = load i32, i32* @x.99
  %118 = load i32, i32* @y.100
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %125, !dbg !4658

125:                                              ; preds = %originalBBpart224, %originalBBpart220, %52
  %126 = load i32, i32* @x.99
  %127 = load i32, i32* @y.100
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %125, %originalBB26alteredBB
  %134 = load i32, i32* %12, align 4, !dbg !4659
  %135 = load i32, i32* @x.99
  %136 = load i32, i32* @y.100
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 %134, !dbg !4659

originalBBalteredBB:                              ; preds = %originalBB, %3
  %143 = alloca i32, align 4
  %144 = alloca i32, align 4
  %145 = alloca i8*, align 8
  %146 = alloca i64, align 8
  %147 = alloca i8*, align 8
  %148 = alloca i64, align 8
  store i32 %0, i32* %144, align 4
  call void @llvm.dbg.declare(metadata i32* %144, metadata !4660, metadata !DIExpression()), !dbg !4604
  store i8* %1, i8** %145, align 8
  call void @llvm.dbg.declare(metadata i8** %145, metadata !4663, metadata !DIExpression()), !dbg !4606
  store i64 %2, i64* %146, align 8
  call void @llvm.dbg.declare(metadata i64* %146, metadata !4664, metadata !DIExpression()), !dbg !4608
  call void @llvm.dbg.declare(metadata i8** %147, metadata !4665, metadata !DIExpression()), !dbg !4610
  %149 = load i32, i32* %144, align 4, !dbg !4611
  %150 = call i8* @setlocale_null_androidfix(i32 %149), !dbg !4612
  store i8* %150, i8** %147, align 8, !dbg !4610
  %151 = load i8*, i8** %147, align 8, !dbg !4613
  %152 = icmp eq i8* %151, null, !dbg !4615
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %153 = load i8*, i8** %14, align 8, !dbg !4622
  %154 = getelementptr inbounds i8, i8* %153, i64 0, !dbg !4622
  store i8 0, i8* %154, align 1, !dbg !4623
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %155 = load i8*, i8** %16, align 8, !dbg !4628
  %156 = call i64 @strlen(i8* %155) #13, !dbg !4629
  store i64 %156, i64* %17, align 8, !dbg !4627
  %157 = load i64, i64* %17, align 8, !dbg !4630
  %158 = load i64, i64* %15, align 8, !dbg !4632
  %159 = icmp ult i64 %157, %158, !dbg !4633
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %160 = load i8*, i8** %14, align 8, !dbg !4635
  %161 = load i8*, i8** %16, align 8, !dbg !4637
  %162 = load i64, i64* %17, align 8, !dbg !4638
  %_ = shl i64 %162, 1
  %_11 = sub i64 %162, 1
  %gen = mul i64 %_11, 1
  %_12 = shl i64 %162, 1
  %_13 = sub i64 0, %162
  %gen14 = add i64 %_13, 1
  %_15 = sub i64 %162, 1
  %gen16 = mul i64 %_15, 1
  %_17 = sub i64 0, %162
  %gen18 = add i64 %_17, 1
  %163 = add i64 %162, 1, !dbg !4639
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %160, i8* align 1 %161, i64 %163, i1 false), !dbg !4640
  store i32 0, i32* %12, align 4, !dbg !4641
  br label %originalBB10

originalBB22alteredBB:                            ; preds = %originalBB22, %108
  store i32 34, i32* %12, align 4, !dbg !4658
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %125
  %164 = load i32, i32* %12, align 4, !dbg !4659
  br label %originalBB26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !4666 {
  %2 = load i32, i32* @x.101
  %3 = load i32, i32* @y.102
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !4669, metadata !DIExpression()), !dbg !4670
  call void @llvm.dbg.declare(metadata i8** %11, metadata !4671, metadata !DIExpression()), !dbg !4672
  %12 = load i32, i32* %10, align 4, !dbg !4673
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !4674
  store i8* %13, i8** %11, align 8, !dbg !4672
  %14 = load i8*, i8** %11, align 8, !dbg !4675
  %15 = load i32, i32* @x.101
  %16 = load i32, i32* @y.102
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !4676

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !4677, metadata !DIExpression()), !dbg !4670
  call void @llvm.dbg.declare(metadata i8** %24, metadata !4680, metadata !DIExpression()), !dbg !4672
  %25 = load i32, i32* %23, align 4, !dbg !4673
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !4674
  store i8* %26, i8** %24, align 8, !dbg !4672
  %27 = load i8*, i8** %24, align 8, !dbg !4675
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !4681 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !4719, metadata !DIExpression()), !dbg !4720
  call void @llvm.dbg.declare(metadata i32* %4, metadata !4721, metadata !DIExpression()), !dbg !4722
  store i32 0, i32* %4, align 4, !dbg !4722
  call void @llvm.dbg.declare(metadata i32* %5, metadata !4723, metadata !DIExpression()), !dbg !4724
  call void @llvm.dbg.declare(metadata i32* %6, metadata !4725, metadata !DIExpression()), !dbg !4726
  store i32 0, i32* %6, align 4, !dbg !4726
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4727
  %8 = call i32 @fileno(%struct._IO_FILE* %7) #10, !dbg !4728
  store i32 %8, i32* %5, align 4, !dbg !4729
  %9 = load i32, i32* %5, align 4, !dbg !4730
  %10 = icmp slt i32 %9, 0, !dbg !4732
  br i1 %10, label %11, label %30, !dbg !4733

11:                                               ; preds = %1
  %12 = load i32, i32* @x.103
  %13 = load i32, i32* @y.104
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %11, %originalBBalteredBB
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4734
  %21 = call i32 @fclose(%struct._IO_FILE* %20), !dbg !4735
  store i32 %21, i32* %2, align 4, !dbg !4736
  %22 = load i32, i32* @x.103
  %23 = load i32, i32* @y.104
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %104, !dbg !4736

30:                                               ; preds = %1
  %31 = load i32, i32* @x.103
  %32 = load i32, i32* @y.104
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4737
  %40 = call i32 @__freading(%struct._IO_FILE* %39) #10, !dbg !4737
  %41 = icmp ne i32 %40, 0, !dbg !4737
  %42 = load i32, i32* @x.103
  %43 = load i32, i32* @y.104
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %41, label %50, label %71, !dbg !4739

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.103
  %52 = load i32, i32* @y.104
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4740
  %60 = call i32 @fileno(%struct._IO_FILE* %59) #10, !dbg !4741
  %61 = call i64 @lseek(i32 %60, i64 0, i32 1) #10, !dbg !4742
  %62 = icmp ne i64 %61, -1, !dbg !4743
  %63 = load i32, i32* @x.103
  %64 = load i32, i32* @y.104
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %62, label %71, label %78, !dbg !4744

71:                                               ; preds = %originalBBpart28, %originalBBpart24
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4745
  %73 = call i32 @rpl_fflush(%struct._IO_FILE* %72), !dbg !4746
  %74 = icmp ne i32 %73, 0, !dbg !4746
  br i1 %74, label %75, label %78, !dbg !4747

75:                                               ; preds = %71
  %76 = call i32* @__errno_location() #15, !dbg !4748
  %77 = load i32, i32* %76, align 4, !dbg !4748
  store i32 %77, i32* %4, align 4, !dbg !4749
  br label %78, !dbg !4750

78:                                               ; preds = %75, %71, %originalBBpart28
  %79 = load i32, i32* @x.103
  %80 = load i32, i32* @y.104
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %78, %originalBB10alteredBB
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4751
  %88 = call i32 @fclose(%struct._IO_FILE* %87), !dbg !4752
  store i32 %88, i32* %6, align 4, !dbg !4753
  %89 = load i32, i32* %4, align 4, !dbg !4754
  %90 = icmp ne i32 %89, 0, !dbg !4756
  %91 = load i32, i32* @x.103
  %92 = load i32, i32* @y.104
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %90, label %99, label %102, !dbg !4757

99:                                               ; preds = %originalBBpart212
  %100 = load i32, i32* %4, align 4, !dbg !4758
  %101 = call i32* @__errno_location() #15, !dbg !4760
  store i32 %100, i32* %101, align 4, !dbg !4761
  store i32 -1, i32* %6, align 4, !dbg !4762
  br label %102, !dbg !4763

102:                                              ; preds = %99, %originalBBpart212
  %103 = load i32, i32* %6, align 4, !dbg !4764
  store i32 %103, i32* %2, align 4, !dbg !4765
  br label %104, !dbg !4765

104:                                              ; preds = %102, %originalBBpart2
  %105 = load i32, i32* %2, align 4, !dbg !4766
  ret i32 %105, !dbg !4766

originalBBalteredBB:                              ; preds = %originalBB, %11
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4734
  %107 = call i32 @fclose(%struct._IO_FILE* %106), !dbg !4735
  store i32 %107, i32* %2, align 4, !dbg !4736
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4737
  %109 = call i32 @__freading(%struct._IO_FILE* %108) #10, !dbg !4737
  %110 = icmp ne i32 %109, 0, !dbg !4737
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4740
  %112 = call i32 @fileno(%struct._IO_FILE* %111) #10, !dbg !4741
  %113 = call i64 @lseek(i32 %112, i64 0, i32 1) #10, !dbg !4742
  %114 = icmp ne i64 %113, -1, !dbg !4743
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %78
  %115 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !4751
  %116 = call i32 @fclose(%struct._IO_FILE* %115), !dbg !4752
  store i32 %116, i32* %6, align 4, !dbg !4753
  %117 = load i32, i32* %4, align 4, !dbg !4754
  %118 = icmp ne i32 %117, 0, !dbg !4756
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !4767 {
  %2 = load i32, i32* @x.105
  %3 = load i32, i32* @y.106
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !4805, metadata !DIExpression()), !dbg !4806
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4807
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !4809
  %14 = load i32, i32* @x.105
  %15 = load i32, i32* @y.106
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !4810

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.105
  %24 = load i32, i32* @y.106
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4811
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !4811
  %33 = icmp ne i32 %32, 0, !dbg !4811
  %34 = load i32, i32* @x.105
  %35 = load i32, i32* @y.106
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %45, label %42, !dbg !4812

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4813
  %44 = call i32 @fflush(%struct._IO_FILE* %43), !dbg !4814
  store i32 %44, i32* %10, align 4, !dbg !4815
  br label %49, !dbg !4815

45:                                               ; preds = %originalBBpart24
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4816
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %46), !dbg !4817
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4818
  %48 = call i32 @fflush(%struct._IO_FILE* %47), !dbg !4819
  store i32 %48, i32* %10, align 4, !dbg !4820
  br label %49, !dbg !4820

49:                                               ; preds = %45, %42
  %50 = load i32, i32* @x.105
  %51 = load i32, i32* @y.106
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load i32, i32* %10, align 4, !dbg !4821
  %59 = load i32, i32* @x.105
  %60 = load i32, i32* @y.106
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i32 %58, !dbg !4821

originalBBalteredBB:                              ; preds = %originalBB, %1
  %67 = alloca i32, align 4
  %68 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %68, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %68, metadata !4822, metadata !DIExpression()), !dbg !4806
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** %68, align 8, !dbg !4807
  %70 = icmp eq %struct._IO_FILE* %69, null, !dbg !4809
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4811
  %72 = call i32 @__freading(%struct._IO_FILE* %71) #10, !dbg !4811
  %73 = icmp ne i32 %72, 0, !dbg !4811
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %74 = load i32, i32* %10, align 4, !dbg !4821
  br label %originalBB6
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !4861 {
  %2 = load i32, i32* @x.107
  %3 = load i32, i32* @y.108
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !4864, metadata !DIExpression()), !dbg !4865
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !4866
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !4868
  %13 = load i32, i32* %12, align 8, !dbg !4868
  %14 = and i32 %13, 256, !dbg !4869
  %15 = icmp ne i32 %14, 0, !dbg !4869
  %16 = load i32, i32* @x.107
  %17 = load i32, i32* @y.108
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !4870

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.107
  %26 = load i32, i32* @y.108
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB5, label %originalBB5alteredBB

originalBB5:                                      ; preds = %24, %originalBB5alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !4871
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !4872
  %35 = load i32, i32* @x.107
  %36 = load i32, i32* @y.108
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart27, label %originalBB5alteredBB

originalBBpart27:                                 ; preds = %originalBB5
  br label %43, !dbg !4872

43:                                               ; preds = %originalBBpart27, %originalBBpart2
  ret void, !dbg !4873

originalBBalteredBB:                              ; preds = %originalBB, %1
  %44 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %44, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %44, metadata !4874, metadata !DIExpression()), !dbg !4865
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %44, align 8, !dbg !4866
  %46 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %45, i32 0, i32 0, !dbg !4868
  %47 = load i32, i32* %46, align 8, !dbg !4868
  %_ = shl i32 %47, 256
  %_1 = shl i32 %47, 256
  %_2 = sub i32 %47, 256
  %gen = mul i32 %_2, 256
  %_3 = sub i32 %47, 256
  %gen4 = mul i32 %_3, 256
  %48 = and i32 %47, 256, !dbg !4869
  %49 = icmp ne i32 %48, 0, !dbg !4869
  br label %originalBB

originalBB5alteredBB:                             ; preds = %originalBB5, %24
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !4871
  %51 = call i32 @rpl_fseeko(%struct._IO_FILE* %50, i64 0, i32 1), !dbg !4872
  br label %originalBB5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !4913 {
  %4 = load i32, i32* @x.109
  %5 = load i32, i32* @y.110
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !4952, metadata !DIExpression()), !dbg !4953
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !4954, metadata !DIExpression()), !dbg !4955
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4956, metadata !DIExpression()), !dbg !4957
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4958
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !4960
  %19 = load i8*, i8** %18, align 8, !dbg !4960
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4961
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !4962
  %22 = load i8*, i8** %21, align 8, !dbg !4962
  %23 = icmp eq i8* %19, %22, !dbg !4963
  %24 = load i32, i32* @x.109
  %25 = load i32, i32* @y.110
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %78, !dbg !4964

32:                                               ; preds = %originalBBpart2
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4965
  %34 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %33, i32 0, i32 5, !dbg !4966
  %35 = load i8*, i8** %34, align 8, !dbg !4966
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4967
  %37 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %36, i32 0, i32 4, !dbg !4968
  %38 = load i8*, i8** %37, align 8, !dbg !4968
  %39 = icmp eq i8* %35, %38, !dbg !4969
  br i1 %39, label %40, label %78, !dbg !4970

40:                                               ; preds = %32
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4971
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 9, !dbg !4972
  %43 = load i8*, i8** %42, align 8, !dbg !4972
  %44 = icmp eq i8* %43, null, !dbg !4973
  br i1 %44, label %45, label %78, !dbg !4974

45:                                               ; preds = %40
  call void @llvm.dbg.declare(metadata i64* %16, metadata !4975, metadata !DIExpression()), !dbg !4977
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4978
  %47 = call i32 @fileno(%struct._IO_FILE* %46) #10, !dbg !4979
  %48 = load i64, i64* %14, align 8, !dbg !4980
  %49 = load i32, i32* %15, align 4, !dbg !4981
  %50 = call i64 @lseek(i32 %47, i64 %48, i32 %49) #10, !dbg !4982
  store i64 %50, i64* %16, align 8, !dbg !4977
  %51 = load i64, i64* %16, align 8, !dbg !4983
  %52 = icmp eq i64 %51, -1, !dbg !4985
  br i1 %52, label %53, label %70, !dbg !4986

53:                                               ; preds = %45
  %54 = load i32, i32* @x.109
  %55 = load i32, i32* @y.110
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %53, %originalBB1alteredBB
  store i32 -1, i32* %12, align 4, !dbg !4987
  %62 = load i32, i32* @x.109
  %63 = load i32, i32* @y.110
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %83, !dbg !4987

70:                                               ; preds = %45
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4989
  %72 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %71, i32 0, i32 0, !dbg !4990
  %73 = load i32, i32* %72, align 8, !dbg !4991
  %74 = and i32 %73, -17, !dbg !4991
  store i32 %74, i32* %72, align 8, !dbg !4991
  %75 = load i64, i64* %16, align 8, !dbg !4992
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4993
  %77 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %76, i32 0, i32 21, !dbg !4994
  store i64 %75, i64* %77, align 8, !dbg !4995
  store i32 0, i32* %12, align 4, !dbg !4996
  br label %83, !dbg !4996

78:                                               ; preds = %40, %32, %originalBBpart2
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4997
  %80 = load i64, i64* %14, align 8, !dbg !4998
  %81 = load i32, i32* %15, align 4, !dbg !4999
  %82 = call i32 @fseeko(%struct._IO_FILE* %79, i64 %80, i32 %81), !dbg !5000
  store i32 %82, i32* %12, align 4, !dbg !5001
  br label %83, !dbg !5001

83:                                               ; preds = %78, %70, %originalBBpart24
  %84 = load i32, i32* %12, align 4, !dbg !5002
  ret i32 %84, !dbg !5002

originalBBalteredBB:                              ; preds = %originalBB, %3
  %85 = alloca i32, align 4
  %86 = alloca %struct._IO_FILE*, align 8
  %87 = alloca i64, align 8
  %88 = alloca i32, align 4
  %89 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %86, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %86, metadata !5003, metadata !DIExpression()), !dbg !4953
  store i64 %1, i64* %87, align 8
  call void @llvm.dbg.declare(metadata i64* %87, metadata !5042, metadata !DIExpression()), !dbg !4955
  store i32 %2, i32* %88, align 4
  call void @llvm.dbg.declare(metadata i32* %88, metadata !5043, metadata !DIExpression()), !dbg !4957
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** %86, align 8, !dbg !4958
  %91 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %90, i32 0, i32 2, !dbg !4960
  %92 = load i8*, i8** %91, align 8, !dbg !4960
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** %86, align 8, !dbg !4961
  %94 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %93, i32 0, i32 1, !dbg !4962
  %95 = load i8*, i8** %94, align 8, !dbg !4962
  %96 = icmp eq i8* %92, %95, !dbg !4963
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %53
  store i32 -1, i32* %12, align 4, !dbg !4987
  br label %originalBB1
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !5044 {
  %2 = load i32, i32* @x.111
  %3 = load i32, i32* @y.112
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !5048, metadata !DIExpression()), !dbg !5049
  %12 = load i32, i32* %11, align 4, !dbg !5050
  %13 = load i32, i32* @x.111
  %14 = load i32, i32* @y.112
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !5051

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.111
  %23 = load i32, i32* @y.112
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !5052
  %31 = sub nsw i32 %30, 65, !dbg !5054
  %32 = add nsw i32 %31, 97, !dbg !5055
  store i32 %32, i32* %10, align 4, !dbg !5056
  %33 = load i32, i32* @x.111
  %34 = load i32, i32* @y.112
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart213, label %originalBB1alteredBB

originalBBpart213:                                ; preds = %originalBB1
  br label %59, !dbg !5056

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.111
  %43 = load i32, i32* @y.112
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %41, %originalBB15alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !5057
  store i32 %50, i32* %10, align 4, !dbg !5058
  %51 = load i32, i32* @x.111
  %52 = load i32, i32* @y.112
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %59, !dbg !5058

59:                                               ; preds = %originalBBpart217, %originalBBpart213
  %60 = load i32, i32* %10, align 4, !dbg !5059
  ret i32 %60, !dbg !5059

originalBBalteredBB:                              ; preds = %originalBB, %1
  %61 = alloca i32, align 4
  %62 = alloca i32, align 4
  store i32 %0, i32* %62, align 4
  call void @llvm.dbg.declare(metadata i32* %62, metadata !5060, metadata !DIExpression()), !dbg !5049
  %63 = load i32, i32* %62, align 4, !dbg !5050
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %64 = load i32, i32* %11, align 4, !dbg !5052
  %_ = sub i32 0, %64
  %gen = add i32 %_, 65
  %_2 = sub i32 0, %64
  %gen3 = add i32 %_2, 65
  %_4 = shl i32 %64, 65
  %_5 = sub i32 %64, 65
  %gen6 = mul i32 %_5, 65
  %_7 = sub i32 0, %64
  %gen8 = add i32 %_7, 65
  %_9 = sub i32 0, %64
  %gen10 = add i32 %_9, 65
  %65 = sub nsw i32 %64, 65, !dbg !5054
  %_11 = shl i32 %65, 97
  %66 = add nsw i32 %65, 97, !dbg !5055
  store i32 %66, i32* %10, align 4, !dbg !5056
  br label %originalBB1

originalBB15alteredBB:                            ; preds = %originalBB15, %41
  %67 = load i32, i32* %11, align 4, !dbg !5057
  store i32 %67, i32* %10, align 4, !dbg !5058
  br label %originalBB15
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getugroups(i32, i32*, i8*, i32) #4 !dbg !5063 {
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8**, align 8
  %11 = alloca %struct.group*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !5067, metadata !DIExpression()), !dbg !5068
  store i32* %1, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !5069, metadata !DIExpression()), !dbg !5070
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !5071, metadata !DIExpression()), !dbg !5072
  store i32 %3, i32* %8, align 4
  call void @llvm.dbg.declare(metadata i32* %8, metadata !5073, metadata !DIExpression()), !dbg !5074
  call void @llvm.dbg.declare(metadata i32* %9, metadata !5075, metadata !DIExpression()), !dbg !5076
  store i32 0, i32* %9, align 4, !dbg !5076
  %14 = load i32, i32* %8, align 4, !dbg !5077
  %15 = icmp ne i32 %14, -1, !dbg !5079
  br i1 %15, label %16, label %44, !dbg !5080

16:                                               ; preds = %4
  %17 = load i32, i32* %5, align 4, !dbg !5081
  %18 = icmp ne i32 %17, 0, !dbg !5084
  br i1 %18, label %19, label %41, !dbg !5085

19:                                               ; preds = %16
  %20 = load i32, i32* @x.113
  %21 = load i32, i32* @y.114
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %19, %originalBBalteredBB
  %28 = load i32, i32* %8, align 4, !dbg !5086
  %29 = load i32*, i32** %6, align 8, !dbg !5087
  %30 = load i32, i32* %9, align 4, !dbg !5088
  %31 = sext i32 %30 to i64, !dbg !5087
  %32 = getelementptr inbounds i32, i32* %29, i64 %31, !dbg !5087
  store i32 %28, i32* %32, align 4, !dbg !5089
  %33 = load i32, i32* @x.113
  %34 = load i32, i32* @y.114
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %41, !dbg !5087

41:                                               ; preds = %originalBBpart2, %16
  %42 = load i32, i32* %9, align 4, !dbg !5090
  %43 = add nsw i32 %42, 1, !dbg !5090
  store i32 %43, i32* %9, align 4, !dbg !5090
  br label %44, !dbg !5091

44:                                               ; preds = %41, %4
  call void @setgrent(), !dbg !5092
  br label %45, !dbg !5093

45:                                               ; preds = %313, %44
  call void @llvm.dbg.declare(metadata i8*** %10, metadata !5094, metadata !DIExpression()), !dbg !5096
  call void @llvm.dbg.declare(metadata %struct.group** %11, metadata !5097, metadata !DIExpression()), !dbg !5105
  %46 = load i32, i32* @x.113
  %47 = load i32, i32* @y.114
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %45, %originalBB1alteredBB
  %54 = call i32* @__errno_location() #15, !dbg !5106
  store i32 0, i32* %54, align 4, !dbg !5107
  %55 = call %struct.group* @getgrent(), !dbg !5108
  store %struct.group* %55, %struct.group** %11, align 8, !dbg !5109
  %56 = load %struct.group*, %struct.group** %11, align 8, !dbg !5110
  %57 = icmp eq %struct.group* %56, null, !dbg !5112
  %58 = load i32, i32* @x.113
  %59 = load i32, i32* @y.114
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %57, label %66, label %67, !dbg !5113

66:                                               ; preds = %originalBBpart24
  br label %314, !dbg !5114

67:                                               ; preds = %originalBBpart24
  %68 = load %struct.group*, %struct.group** %11, align 8, !dbg !5115
  %69 = getelementptr inbounds %struct.group, %struct.group* %68, i32 0, i32 3, !dbg !5117
  %70 = load i8**, i8*** %69, align 8, !dbg !5117
  store i8** %70, i8*** %10, align 8, !dbg !5118
  br label %71, !dbg !5119

71:                                               ; preds = %originalBBpart253, %67
  %72 = load i32, i32* @x.113
  %73 = load i32, i32* @y.114
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %71, %originalBB6alteredBB
  %80 = load i8**, i8*** %10, align 8, !dbg !5120
  %81 = load i8*, i8** %80, align 8, !dbg !5122
  %82 = icmp ne i8* %81, null, !dbg !5123
  %83 = load i32, i32* @x.113
  %84 = load i32, i32* @y.114
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %82, label %91, label %313, !dbg !5123

91:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i32* %12, metadata !5124, metadata !DIExpression()), !dbg !5126
  %92 = load i32, i32* @x.113
  %93 = load i32, i32* @y.114
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %91, %originalBB10alteredBB
  %100 = load i8*, i8** %7, align 8, !dbg !5127
  %101 = load i8**, i8*** %10, align 8, !dbg !5127
  %102 = load i8*, i8** %101, align 8, !dbg !5127
  %103 = call i32 @strcmp(i8* %100, i8* %102) #13, !dbg !5127
  %104 = icmp eq i32 %103, 0, !dbg !5127
  %105 = load i32, i32* @x.113
  %106 = load i32, i32* @y.114
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %104, label %114, label %113, !dbg !5129

113:                                              ; preds = %originalBBpart212
  br label %294, !dbg !5130

114:                                              ; preds = %originalBBpart212
  %115 = load i32, i32* @x.113
  %116 = load i32, i32* @y.114
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %114, %originalBB14alteredBB
  store i32 0, i32* %12, align 4, !dbg !5131
  %123 = load i32, i32* @x.113
  %124 = load i32, i32* @y.114
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %131, !dbg !5133

131:                                              ; preds = %182, %originalBBpart216
  %132 = load i32, i32* %12, align 4, !dbg !5134
  %133 = load i32, i32* %9, align 4, !dbg !5136
  %134 = icmp slt i32 %132, %133, !dbg !5137
  br i1 %134, label %135, label %185, !dbg !5138

135:                                              ; preds = %131
  %136 = load i32, i32* @x.113
  %137 = load i32, i32* @y.114
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %135, %originalBB18alteredBB
  %144 = load i32*, i32** %6, align 8, !dbg !5139
  %145 = icmp ne i32* %144, null, !dbg !5139
  %146 = load i32, i32* @x.113
  %147 = load i32, i32* @y.114
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %145, label %154, label %181, !dbg !5141

154:                                              ; preds = %originalBBpart220
  %155 = load i32*, i32** %6, align 8, !dbg !5142
  %156 = load i32, i32* %12, align 4, !dbg !5143
  %157 = sext i32 %156 to i64, !dbg !5142
  %158 = getelementptr inbounds i32, i32* %155, i64 %157, !dbg !5142
  %159 = load i32, i32* %158, align 4, !dbg !5142
  %160 = load %struct.group*, %struct.group** %11, align 8, !dbg !5144
  %161 = getelementptr inbounds %struct.group, %struct.group* %160, i32 0, i32 2, !dbg !5145
  %162 = load i32, i32* %161, align 8, !dbg !5145
  %163 = icmp eq i32 %159, %162, !dbg !5146
  br i1 %163, label %164, label %181, !dbg !5147

164:                                              ; preds = %154
  %165 = load i32, i32* @x.113
  %166 = load i32, i32* @y.114
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %164, %originalBB22alteredBB
  %173 = load i32, i32* @x.113
  %174 = load i32, i32* @y.114
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %185, !dbg !5148

181:                                              ; preds = %154, %originalBBpart220
  br label %182, !dbg !5145

182:                                              ; preds = %181
  %183 = load i32, i32* %12, align 4, !dbg !5149
  %184 = add nsw i32 %183, 1, !dbg !5149
  store i32 %184, i32* %12, align 4, !dbg !5149
  br label %131, !dbg !5150, !llvm.loop !5151

185:                                              ; preds = %originalBBpart224, %131
  %186 = load i32, i32* @x.113
  %187 = load i32, i32* @y.114
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %185, %originalBB26alteredBB
  %194 = load i32, i32* %12, align 4, !dbg !5153
  %195 = load i32, i32* %9, align 4, !dbg !5155
  %196 = icmp eq i32 %194, %195, !dbg !5156
  %197 = load i32, i32* @x.113
  %198 = load i32, i32* @y.114
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %196, label %205, label %277, !dbg !5157

205:                                              ; preds = %originalBBpart228
  %206 = load i32, i32* %5, align 4, !dbg !5158
  %207 = icmp ne i32 %206, 0, !dbg !5161
  br i1 %207, label %208, label %237, !dbg !5162

208:                                              ; preds = %205
  %209 = load i32, i32* %9, align 4, !dbg !5163
  %210 = load i32, i32* %5, align 4, !dbg !5166
  %211 = icmp sge i32 %209, %210, !dbg !5167
  br i1 %211, label %212, label %213, !dbg !5168

212:                                              ; preds = %208
  br label %368, !dbg !5169

213:                                              ; preds = %208
  %214 = load i32, i32* @x.113
  %215 = load i32, i32* @y.114
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %213, %originalBB30alteredBB
  %222 = load %struct.group*, %struct.group** %11, align 8, !dbg !5170
  %223 = getelementptr inbounds %struct.group, %struct.group* %222, i32 0, i32 2, !dbg !5171
  %224 = load i32, i32* %223, align 8, !dbg !5171
  %225 = load i32*, i32** %6, align 8, !dbg !5172
  %226 = load i32, i32* %9, align 4, !dbg !5173
  %227 = sext i32 %226 to i64, !dbg !5172
  %228 = getelementptr inbounds i32, i32* %225, i64 %227, !dbg !5172
  store i32 %224, i32* %228, align 4, !dbg !5174
  %229 = load i32, i32* @x.113
  %230 = load i32, i32* @y.114
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %237, !dbg !5175

237:                                              ; preds = %originalBBpart232, %205
  %238 = load i32, i32* %9, align 4, !dbg !5176
  %239 = icmp eq i32 %238, 2147483647, !dbg !5178
  br i1 %239, label %240, label %258, !dbg !5179

240:                                              ; preds = %237
  %241 = load i32, i32* @x.113
  %242 = load i32, i32* @y.114
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %240, %originalBB34alteredBB
  %249 = call i32* @__errno_location() #15, !dbg !5180
  store i32 75, i32* %249, align 4, !dbg !5182
  %250 = load i32, i32* @x.113
  %251 = load i32, i32* @y.114
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %368, !dbg !5183

258:                                              ; preds = %237
  %259 = load i32, i32* @x.113
  %260 = load i32, i32* @y.114
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %258, %originalBB38alteredBB
  %267 = load i32, i32* %9, align 4, !dbg !5184
  %268 = add nsw i32 %267, 1, !dbg !5184
  store i32 %268, i32* %9, align 4, !dbg !5184
  %269 = load i32, i32* @x.113
  %270 = load i32, i32* @y.114
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart245, label %originalBB38alteredBB

originalBBpart245:                                ; preds = %originalBB38
  br label %277, !dbg !5185

277:                                              ; preds = %originalBBpart245, %originalBBpart228
  %278 = load i32, i32* @x.113
  %279 = load i32, i32* @y.114
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %277, %originalBB47alteredBB
  %286 = load i32, i32* @x.113
  %287 = load i32, i32* @y.114
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %294, !dbg !5186

294:                                              ; preds = %originalBBpart249, %113
  %295 = load i32, i32* @x.113
  %296 = load i32, i32* @y.114
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %294, %originalBB51alteredBB
  %303 = load i8**, i8*** %10, align 8, !dbg !5187
  %304 = getelementptr inbounds i8*, i8** %303, i32 1, !dbg !5187
  store i8** %304, i8*** %10, align 8, !dbg !5187
  %305 = load i32, i32* @x.113
  %306 = load i32, i32* @y.114
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br label %71, !dbg !5188, !llvm.loop !5189

313:                                              ; preds = %originalBBpart28
  br label %45, !dbg !5093, !llvm.loop !5191

314:                                              ; preds = %66
  %315 = load i32, i32* @x.113
  %316 = load i32, i32* @y.114
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %314, %originalBB55alteredBB
  %323 = call i32* @__errno_location() #15, !dbg !5193
  %324 = load i32, i32* %323, align 4, !dbg !5193
  %325 = icmp ne i32 %324, 0, !dbg !5195
  %326 = load i32, i32* @x.113
  %327 = load i32, i32* @y.114
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br i1 %325, label %334, label %351, !dbg !5196

334:                                              ; preds = %originalBBpart257
  %335 = load i32, i32* @x.113
  %336 = load i32, i32* @y.114
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %334, %originalBB59alteredBB
  store i32 -1, i32* %9, align 4, !dbg !5197
  %343 = load i32, i32* @x.113
  %344 = load i32, i32* @y.114
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br label %351, !dbg !5198

351:                                              ; preds = %originalBBpart261, %originalBBpart257
  %352 = load i32, i32* @x.113
  %353 = load i32, i32* @y.114
  %354 = sub i32 %352, 1
  %355 = mul i32 %352, %354
  %356 = urem i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %353, 10
  %359 = or i1 %357, %358
  br i1 %359, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %351, %originalBB63alteredBB
  %360 = load i32, i32* @x.113
  %361 = load i32, i32* @y.114
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %368, !dbg !5199

368:                                              ; preds = %originalBBpart265, %originalBBpart236, %212
  call void @llvm.dbg.label(metadata !5200), !dbg !5201
  call void @llvm.dbg.declare(metadata i32* %13, metadata !5202, metadata !DIExpression()), !dbg !5204
  %369 = call i32* @__errno_location() #15, !dbg !5205
  %370 = load i32, i32* %369, align 4, !dbg !5205
  store i32 %370, i32* %13, align 4, !dbg !5204
  call void @endgrent(), !dbg !5206
  %371 = load i32, i32* %13, align 4, !dbg !5207
  %372 = call i32* @__errno_location() #15, !dbg !5208
  store i32 %371, i32* %372, align 4, !dbg !5209
  %373 = load i32, i32* %9, align 4, !dbg !5210
  ret i32 %373, !dbg !5211

originalBBalteredBB:                              ; preds = %originalBB, %19
  %374 = load i32, i32* %8, align 4, !dbg !5086
  %375 = load i32*, i32** %6, align 8, !dbg !5087
  %376 = load i32, i32* %9, align 4, !dbg !5088
  %377 = sext i32 %376 to i64, !dbg !5087
  %378 = getelementptr inbounds i32, i32* %375, i64 %377, !dbg !5087
  store i32 %374, i32* %378, align 4, !dbg !5089
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %45
  %379 = call i32* @__errno_location() #15, !dbg !5106
  store i32 0, i32* %379, align 4, !dbg !5107
  %380 = call %struct.group* @getgrent(), !dbg !5108
  store %struct.group* %380, %struct.group** %11, align 8, !dbg !5109
  %381 = load %struct.group*, %struct.group** %11, align 8, !dbg !5110
  %382 = icmp eq %struct.group* %381, null, !dbg !5112
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %71
  %383 = load i8**, i8*** %10, align 8, !dbg !5120
  %384 = load i8*, i8** %383, align 8, !dbg !5122
  %385 = icmp ne i8* %384, null, !dbg !5123
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %91
  %386 = load i8*, i8** %7, align 8, !dbg !5127
  %387 = load i8**, i8*** %10, align 8, !dbg !5127
  %388 = load i8*, i8** %387, align 8, !dbg !5127
  %389 = call i32 @strcmp(i8* %386, i8* %388) #13, !dbg !5127
  %390 = icmp eq i32 %389, 0, !dbg !5127
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %114
  store i32 0, i32* %12, align 4, !dbg !5131
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %135
  %391 = load i32*, i32** %6, align 8, !dbg !5139
  %392 = icmp ne i32* %391, null, !dbg !5139
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %164
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %185
  %393 = load i32, i32* %12, align 4, !dbg !5153
  %394 = load i32, i32* %9, align 4, !dbg !5155
  %395 = icmp eq i32 %393, %394, !dbg !5156
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %213
  %396 = load %struct.group*, %struct.group** %11, align 8, !dbg !5170
  %397 = getelementptr inbounds %struct.group, %struct.group* %396, i32 0, i32 2, !dbg !5171
  %398 = load i32, i32* %397, align 8, !dbg !5171
  %399 = load i32*, i32** %6, align 8, !dbg !5172
  %400 = load i32, i32* %9, align 4, !dbg !5173
  %401 = sext i32 %400 to i64, !dbg !5172
  %402 = getelementptr inbounds i32, i32* %399, i64 %401, !dbg !5172
  store i32 %398, i32* %402, align 4, !dbg !5174
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %240
  %403 = call i32* @__errno_location() #15, !dbg !5180
  store i32 75, i32* %403, align 4, !dbg !5182
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %258
  %404 = load i32, i32* %9, align 4, !dbg !5184
  %_ = sub i32 %404, 1
  %gen = mul i32 %_, 1
  %_39 = sub i32 0, %404
  %gen40 = add i32 %_39, 1
  %_41 = shl i32 %404, 1
  %_42 = sub i32 %404, 1
  %gen43 = mul i32 %_42, 1
  %405 = add nsw i32 %404, 1, !dbg !5184
  store i32 %405, i32* %9, align 4, !dbg !5184
  br label %originalBB38

originalBB47alteredBB:                            ; preds = %originalBB47, %277
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %294
  %406 = load i8**, i8*** %10, align 8, !dbg !5187
  %407 = getelementptr inbounds i8*, i8** %406, i32 1, !dbg !5187
  store i8** %407, i8*** %10, align 8, !dbg !5187
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %314
  %408 = call i32* @__errno_location() #15, !dbg !5193
  %409 = load i32, i32* %408, align 4, !dbg !5193
  %410 = icmp ne i32 %409, 0, !dbg !5195
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %334
  store i32 -1, i32* %9, align 4, !dbg !5197
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %351
  br label %originalBB63
}

declare dso_local void @setgrent() #3

declare dso_local %struct.group* @getgrent() #3

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.115
  %4 = load i32, i32* @y.116
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.115
  %14 = load i32, i32* @y.116
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.115
  %23 = load i32, i32* @y.116
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.115
  %34 = load i32, i32* @y.116
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart211, label %originalBB1alteredBB

originalBBpart211:                                ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal2, i32 0, i32 0
  %43 = call i32 @strcmp(i8* %42, i8* %0)
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %80

45:                                               ; preds = %41
  %46 = load i32, i32* @x.115
  %47 = load i32, i32* @y.116
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %45, %originalBB13alteredBB
  %54 = icmp eq i32 %1, 0
  %55 = load i32, i32* @x.115
  %56 = load i32, i32* @y.116
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br i1 %54, label %63, label %80

63:                                               ; preds = %originalBBpart215
  %64 = load i32, i32* @x.115
  %65 = load i32, i32* @y.116
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %63, %originalBB17alteredBB
  %72 = load i32, i32* @x.115
  %73 = load i32, i32* @y.116
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  ret i32 5

80:                                               ; preds = %originalBBpart215, %41
  %81 = load i32, i32* @x.115
  %82 = load i32, i32* @y.116
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %80, %originalBB21alteredBB
  %89 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %90 = call i32 @strcmp(i8* %89, i8* %0)
  %91 = icmp eq i32 %90, 0
  %92 = load i32, i32* @x.115
  %93 = load i32, i32* @y.116
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br i1 %91, label %100, label %119

100:                                              ; preds = %originalBBpart223
  %101 = load i32, i32* @x.115
  %102 = load i32, i32* @y.116
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %100, %originalBB25alteredBB
  %109 = icmp eq i32 %1, 43
  %110 = load i32, i32* @x.115
  %111 = load i32, i32* @y.116
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %109, label %118, label %119

118:                                              ; preds = %originalBBpart227
  ret i32 3

119:                                              ; preds = %originalBBpart227, %originalBBpart223
  %120 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %121 = call i32 @strcmp(i8* %120, i8* %0)
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %158

123:                                              ; preds = %119
  %124 = load i32, i32* @x.115
  %125 = load i32, i32* @y.116
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %123, %originalBB29alteredBB
  %132 = icmp eq i32 %1, -1
  %133 = load i32, i32* @x.115
  %134 = load i32, i32* @y.116
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %132, label %141, label %158

141:                                              ; preds = %originalBBpart231
  %142 = load i32, i32* @x.115
  %143 = load i32, i32* @y.116
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %141, %originalBB33alteredBB
  %150 = load i32, i32* @x.115
  %151 = load i32, i32* @y.116
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  ret i32 3

158:                                              ; preds = %originalBBpart231, %119
  %159 = load i32, i32* @x.115
  %160 = load i32, i32* @y.116
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %158, %originalBB37alteredBB
  %167 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %168 = call i32 @strcmp(i8* %167, i8* %0)
  %169 = icmp eq i32 %168, 0
  %170 = load i32, i32* @x.115
  %171 = load i32, i32* @y.116
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br i1 %169, label %178, label %197

178:                                              ; preds = %originalBBpart239
  %179 = load i32, i32* @x.115
  %180 = load i32, i32* @y.116
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %178, %originalBB41alteredBB
  %187 = icmp eq i32 %1, 0
  %188 = load i32, i32* @x.115
  %189 = load i32, i32* @y.116
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br i1 %187, label %196, label %197

196:                                              ; preds = %originalBBpart243
  ret i32 5

197:                                              ; preds = %originalBBpart243, %originalBBpart239
  %198 = load i32, i32* @x.115
  %199 = load i32, i32* @y.116
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %197, %originalBB45alteredBB
  call void @srand(i32 %1)
  %206 = call i32 @rand()
  %207 = srem i32 %206, 50000
  %208 = add i32 %207, 2
  %209 = load i32, i32* @x.115
  %210 = load i32, i32* @y.116
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBBpart265, label %originalBB45alteredBB

originalBBpart265:                                ; preds = %originalBB45
  ret i32 %208

originalBBalteredBB:                              ; preds = %originalBB, %2
  %217 = load i32, i32* @inVal0
  %218 = icmp sgt i32 %217, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %219 = call i32 @rand()
  %_ = sub i32 0, %219
  %gen = add i32 %_, 50000
  %_2 = sub i32 0, %219
  %gen3 = add i32 %_2, 50000
  %_4 = shl i32 %219, 50000
  %_5 = shl i32 %219, 50000
  %_6 = sub i32 0, %219
  %gen7 = add i32 %_6, 50000
  %220 = srem i32 %219, 50000
  %_8 = sub i32 %220, 2
  %gen9 = mul i32 %_8, 2
  %221 = add i32 %220, 2
  br label %originalBB1

originalBB13alteredBB:                            ; preds = %originalBB13, %45
  %222 = icmp eq i32 %1, 0
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %63
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %80
  %223 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %224 = call i32 @strcmp(i8* %223, i8* %0)
  %225 = icmp eq i32 %224, 0
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %100
  %226 = icmp eq i32 %1, 43
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %123
  %227 = icmp eq i32 %1, -1
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %141
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %158
  %228 = getelementptr inbounds [2 x i8], [2 x i8]* @.compVal0, i32 0, i32 0
  %229 = call i32 @strcmp(i8* %228, i8* %0)
  %230 = icmp eq i32 %229, 0
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %178
  %231 = icmp eq i32 %1, 0
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %197
  call void @srand(i32 %1)
  %232 = call i32 @rand()
  %_46 = sub i32 0, %232
  %gen47 = add i32 %_46, 50000
  %_48 = shl i32 %232, 50000
  %_49 = sub i32 0, %232
  %gen50 = add i32 %_49, 50000
  %_51 = sub i32 0, %232
  %gen52 = add i32 %_51, 50000
  %_53 = sub i32 %232, 50000
  %gen54 = mul i32 %_53, 50000
  %_55 = sub i32 0, %232
  %gen56 = add i32 %_55, 50000
  %233 = srem i32 %232, 50000
  %_57 = shl i32 %233, 2
  %_58 = sub i32 0, %233
  %gen59 = add i32 %_58, 2
  %_60 = sub i32 %233, 2
  %gen61 = mul i32 %_60, 2
  %_62 = sub i32 0, %233
  %gen63 = add i32 %_62, 2
  %234 = add i32 %233, 2
  br label %originalBB45
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !82, !88, !93, !101, !202, !108, !115, !208, !185, !210, !195, !213, !216, !218, !220, !232, !235, !241, !243, !245, !247, !250, !252, !254, !256, !258, !260}
!llvm.ident = !{!263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263, !263}
!llvm.module.flags = !{!264, !265, !266, !267, !268}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 75, type: !63, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !9, nameTableKind: None)
!3 = !DIFile(filename: "src/id.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !8}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!9 = !{!10, !17, !19, !23, !0, !25, !28, !30, !32, !34, !36, !38, !40, !42, !44, !46, !56}
!10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
!11 = distinct !DIGlobalVariable(name: "ruid", scope: !2, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!12 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !13, line: 79, baseType: !14)
!13 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "")
!14 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !15, line: 146, baseType: !16)
!15 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!16 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!17 = !DIGlobalVariableExpression(var: !18, expr: !DIExpression())
!18 = distinct !DIGlobalVariable(name: "euid", scope: !2, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!19 = !DIGlobalVariableExpression(var: !20, expr: !DIExpression())
!20 = distinct !DIGlobalVariable(name: "rgid", scope: !2, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!21 = !DIDerivedType(tag: DW_TAG_typedef, name: "gid_t", file: !13, line: 64, baseType: !22)
!22 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !15, line: 147, baseType: !16)
!23 = !DIGlobalVariableExpression(var: !24, expr: !DIExpression())
!24 = distinct !DIGlobalVariable(name: "egid", scope: !2, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "just_context", scope: !2, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!27 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!28 = !DIGlobalVariableExpression(var: !29, expr: !DIExpression())
!29 = distinct !DIGlobalVariable(name: "just_group", scope: !2, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "use_name", scope: !2, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!32 = !DIGlobalVariableExpression(var: !33, expr: !DIExpression())
!33 = distinct !DIGlobalVariable(name: "use_real", scope: !2, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!34 = !DIGlobalVariableExpression(var: !35, expr: !DIExpression())
!35 = distinct !DIGlobalVariable(name: "just_user", scope: !2, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "opt_zero", scope: !2, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!38 = !DIGlobalVariableExpression(var: !39, expr: !DIExpression())
!39 = distinct !DIGlobalVariable(name: "just_group_list", scope: !2, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!40 = !DIGlobalVariableExpression(var: !41, expr: !DIExpression())
!41 = distinct !DIGlobalVariable(name: "context", scope: !2, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!42 = !DIGlobalVariableExpression(var: !43, expr: !DIExpression())
!43 = distinct !DIGlobalVariable(name: "multiple_users", scope: !2, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!44 = !DIGlobalVariableExpression(var: !45, expr: !DIExpression())
!45 = distinct !DIGlobalVariable(name: "ok", scope: !2, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "buf", scope: !48, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!48 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!49 = !DISubroutineType(types: !50)
!50 = !{!6, !51}
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!52 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!53 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 168, elements: !54)
!54 = !{!55}
!55 = !DISubrange(count: 21)
!56 = !DIGlobalVariableExpression(var: !57, expr: !DIExpression())
!57 = distinct !DIGlobalVariable(name: "buf", scope: !58, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!58 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!59 = !DISubroutineType(types: !60)
!60 = !{!6, !61}
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !62, size: 64)
!62 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !21)
!63 = !DICompositeType(tag: DW_TAG_array_type, baseType: !64, size: 2560, elements: !76)
!64 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !65)
!65 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !67)
!66 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!67 = !{!68, !71, !73, !75}
!68 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !65, file: !66, line: 52, baseType: !69, size: 64)
!69 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !70, size: 64)
!70 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !65, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!72 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !65, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!74 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !72, size: 64)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !65, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!76 = !{!77}
!77 = !DISubrange(count: 10)
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "buf", scope: !80, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!80 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !82, retainedNodes: !4)
!81 = !DIFile(filename: "src/group-list.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!82 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !85, nameTableKind: None)
!83 = !{!8, !84}
!84 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!85 = !{!78}
!86 = !DIGlobalVariableExpression(var: !87, expr: !DIExpression())
!87 = distinct !DIGlobalVariable(name: "Version", scope: !88, file: !89, line: 2, type: !69, isLocal: false, isDefinition: true)
!88 = distinct !DICompileUnit(language: DW_LANG_C99, file: !89, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !90, nameTableKind: None)
!89 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!90 = !{!86}
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !93, file: !98, line: 56, type: !27, isLocal: true, isDefinition: true)
!93 = distinct !DICompileUnit(language: DW_LANG_C99, file: !94, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !95, nameTableKind: None)
!94 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!95 = !{!96, !91}
!96 = !DIGlobalVariableExpression(var: !97, expr: !DIExpression())
!97 = distinct !DIGlobalVariable(name: "file_name", scope: !93, file: !98, line: 46, type: !69, isLocal: true, isDefinition: true)
!98 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!99 = !DIGlobalVariableExpression(var: !100, expr: !DIExpression())
!100 = distinct !DIGlobalVariable(name: "exit_failure", scope: !101, file: !104, line: 24, type: !105, isLocal: false, isDefinition: true)
!101 = distinct !DICompileUnit(language: DW_LANG_C99, file: !102, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !103, nameTableKind: None)
!102 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!103 = !{!99}
!104 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!105 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !72)
!106 = !DIGlobalVariableExpression(var: !107, expr: !DIExpression())
!107 = distinct !DIGlobalVariable(name: "program_name", scope: !108, file: !112, line: 33, type: !69, isLocal: false, isDefinition: true)
!108 = distinct !DICompileUnit(language: DW_LANG_C99, file: !109, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !110, globals: !111, nameTableKind: None)
!109 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!110 = !{!8, !6}
!111 = !{!106}
!112 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!113 = !DIGlobalVariableExpression(var: !114, expr: !DIExpression())
!114 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !115, file: !139, line: 116, type: !150, isLocal: true, isDefinition: true)
!115 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !136, nameTableKind: None)
!116 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!117 = !{!118}
!118 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !119, line: 32, baseType: !16, size: 32, elements: !120)
!119 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!120 = !{!121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131}
!121 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!122 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!123 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!124 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!125 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!126 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!127 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!128 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!129 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!130 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!131 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!132 = !{!72, !133, !134}
!133 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!134 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !135, line: 46, baseType: !84)
!135 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!136 = !{!137, !144, !148, !113, !160, !165, !172, !174}
!137 = !DIGlobalVariableExpression(var: !138, expr: !DIExpression())
!138 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !115, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!139 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!140 = !DICompositeType(tag: DW_TAG_array_type, baseType: !141, size: 704, elements: !142)
!141 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !69)
!142 = !{!143}
!143 = !DISubrange(count: 11)
!144 = !DIGlobalVariableExpression(var: !145, expr: !DIExpression())
!145 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !115, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!146 = !DICompositeType(tag: DW_TAG_array_type, baseType: !147, size: 320, elements: !76)
!147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !118)
!148 = !DIGlobalVariableExpression(var: !149, expr: !DIExpression())
!149 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !115, file: !139, line: 1052, type: !150, isLocal: false, isDefinition: true)
!150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !151)
!151 = !{!152, !153, !154, !158, !159}
!152 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !150, file: !139, line: 68, baseType: !118, size: 32)
!153 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !150, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!154 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !150, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!155 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 256, elements: !156)
!156 = !{!157}
!157 = !DISubrange(count: 8)
!158 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !150, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!159 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !150, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!160 = !DIGlobalVariableExpression(var: !161, expr: !DIExpression())
!161 = distinct !DIGlobalVariable(name: "slot0", scope: !115, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!162 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2048, elements: !163)
!163 = !{!164}
!164 = !DISubrange(count: 256)
!165 = !DIGlobalVariableExpression(var: !166, expr: !DIExpression())
!166 = distinct !DIGlobalVariable(name: "slotvec", scope: !115, file: !139, line: 845, type: !167, isLocal: true, isDefinition: true)
!167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !168, size: 64)
!168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !169)
!169 = !{!170, !171}
!170 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !168, file: !139, line: 836, baseType: !134, size: 64)
!171 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !168, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!172 = !DIGlobalVariableExpression(var: !173, expr: !DIExpression())
!173 = distinct !DIGlobalVariable(name: "nslots", scope: !115, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!174 = !DIGlobalVariableExpression(var: !175, expr: !DIExpression())
!175 = distinct !DIGlobalVariable(name: "slotvec0", scope: !115, file: !139, line: 844, type: !168, isLocal: true, isDefinition: true)
!176 = !DIGlobalVariableExpression(var: !177, expr: !DIExpression())
!177 = distinct !DIGlobalVariable(name: "E_bad_spec", scope: !178, file: !179, line: 108, type: !69, isLocal: true, isDefinition: true)
!178 = distinct !DISubprogram(name: "parse_with_separator", scope: !179, file: !179, line: 102, type: !180, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !185, retainedNodes: !4)
!179 = !DIFile(filename: "lib/userspec.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!180 = !DISubroutineType(types: !181)
!181 = !{!69, !69, !69, !182, !183, !184, !184}
!182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12, size: 64)
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !21, size: 64)
!184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!185 = distinct !DICompileUnit(language: DW_LANG_C99, file: !186, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !187, globals: !188, nameTableKind: None)
!186 = !DIFile(filename: "./lib/userspec.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!187 = !{!8, !12, !21}
!188 = !{!189, !191, !176}
!189 = !DIGlobalVariableExpression(var: !190, expr: !DIExpression())
!190 = distinct !DIGlobalVariable(name: "E_invalid_user", scope: !178, file: !179, line: 106, type: !69, isLocal: true, isDefinition: true)
!191 = !DIGlobalVariableExpression(var: !192, expr: !DIExpression())
!192 = distinct !DIGlobalVariable(name: "E_invalid_group", scope: !178, file: !179, line: 107, type: !69, isLocal: true, isDefinition: true)
!193 = !DIGlobalVariableExpression(var: !194, expr: !DIExpression())
!194 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !195, file: !198, line: 26, type: !199, isLocal: false, isDefinition: true)
!195 = distinct !DICompileUnit(language: DW_LANG_C99, file: !196, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !197, nameTableKind: None)
!196 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!197 = !{!193}
!198 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!199 = !DICompositeType(tag: DW_TAG_array_type, baseType: !70, size: 376, elements: !200)
!200 = !{!201}
!201 = !DISubrange(count: 47)
!202 = distinct !DICompileUnit(language: DW_LANG_C99, file: !203, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !204, nameTableKind: None)
!203 = !DIFile(filename: "./lib/umaxtostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!204 = !{!205}
!205 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !206, line: 102, baseType: !207)
!206 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!207 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !15, line: 73, baseType: !84)
!208 = distinct !DICompileUnit(language: DW_LANG_C99, file: !209, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!209 = !DIFile(filename: "./lib/se-selinux.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!210 = distinct !DICompileUnit(language: DW_LANG_C99, file: !211, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!211 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!212 = !{!8}
!213 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!214 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!215 = !{!134, !6, !8}
!216 = distinct !DICompileUnit(language: DW_LANG_C99, file: !217, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!217 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!218 = distinct !DICompileUnit(language: DW_LANG_C99, file: !219, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!219 = !DIFile(filename: "./lib/xgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!220 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!221 = !DIFile(filename: "./lib/xstrtoul.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!222 = !{!223}
!223 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "strtol_error", file: !224, line: 25, baseType: !16, size: 32, elements: !225)
!224 = !DIFile(filename: "./lib/xstrtol.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!225 = !{!226, !227, !228, !229, !230}
!226 = !DIEnumerator(name: "LONGINT_OK", value: 0, isUnsigned: true)
!227 = !DIEnumerator(name: "LONGINT_OVERFLOW", value: 1, isUnsigned: true)
!228 = !DIEnumerator(name: "LONGINT_INVALID_SUFFIX_CHAR", value: 2, isUnsigned: true)
!229 = !DIEnumerator(name: "LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW", value: 3, isUnsigned: true)
!230 = !DIEnumerator(name: "LONGINT_INVALID", value: 4, isUnsigned: true)
!231 = !{!72, !133}
!232 = distinct !DICompileUnit(language: DW_LANG_C99, file: !233, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !234, nameTableKind: None)
!233 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!234 = !{!134}
!235 = distinct !DICompileUnit(language: DW_LANG_C99, file: !236, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !237, nameTableKind: None)
!236 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!237 = !{!238}
!238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !239, size: 64)
!239 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !240)
!240 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!241 = distinct !DICompileUnit(language: DW_LANG_C99, file: !242, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!242 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!243 = distinct !DICompileUnit(language: DW_LANG_C99, file: !244, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!244 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!245 = distinct !DICompileUnit(language: DW_LANG_C99, file: !246, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!246 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!247 = distinct !DICompileUnit(language: DW_LANG_C99, file: !248, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !249, nameTableKind: None)
!248 = !DIFile(filename: "./lib/mgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!249 = !{!8, !21, !134}
!250 = distinct !DICompileUnit(language: DW_LANG_C99, file: !251, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!251 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!252 = distinct !DICompileUnit(language: DW_LANG_C99, file: !253, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!253 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!254 = distinct !DICompileUnit(language: DW_LANG_C99, file: !255, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!255 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!256 = distinct !DICompileUnit(language: DW_LANG_C99, file: !257, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!257 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!258 = distinct !DICompileUnit(language: DW_LANG_C99, file: !259, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!259 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!260 = distinct !DICompileUnit(language: DW_LANG_C99, file: !261, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !262, nameTableKind: None)
!261 = !DIFile(filename: "./lib/getugroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!262 = !{!21, !8}
!263 = !{!"clang version 9.0.1-12 "}
!264 = !{i32 2, !"Dwarf Version", i32 4}
!265 = !{i32 2, !"Debug Info Version", i32 3}
!266 = !{i32 1, !"wchar_size", i32 4}
!267 = !{i32 1, !"ThinLTO", i32 0}
!268 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!269 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 90, type: !270, scopeLine: 91, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!270 = !DISubroutineType(types: !271)
!271 = !{null, !72}
!272 = !DILocalVariable(name: "status", arg: 1, scope: !269, file: !3, line: 90, type: !72)
!273 = !DILocation(line: 90, column: 12, scope: !269)
!274 = !DILocation(line: 92, column: 7, scope: !275)
!275 = distinct !DILexicalBlock(scope: !269, file: !3, line: 92, column: 7)
!276 = !DILocation(line: 92, column: 14, scope: !275)
!277 = !DILocation(line: 92, column: 7, scope: !269)
!278 = !DILocation(line: 93, column: 5, scope: !275)
!279 = !DILocation(line: 93, column: 5, scope: !280)
!280 = distinct !DILexicalBlock(scope: !275, file: !3, line: 93, column: 5)
!281 = !DILocation(line: 96, column: 15, scope: !282)
!282 = distinct !DILexicalBlock(scope: !275, file: !3, line: 95, column: 5)
!283 = !DILocation(line: 96, column: 55, scope: !282)
!284 = !DILocation(line: 96, column: 7, scope: !282)
!285 = !DILocation(line: 97, column: 7, scope: !282)
!286 = !DILocation(line: 102, column: 7, scope: !282)
!287 = !DILocation(line: 113, column: 7, scope: !282)
!288 = !DILocation(line: 114, column: 7, scope: !282)
!289 = !DILocation(line: 115, column: 7, scope: !282)
!290 = !DILocation(line: 119, column: 7, scope: !282)
!291 = !DILocation(line: 121, column: 9, scope: !269)
!292 = !DILocation(line: 121, column: 3, scope: !269)
!293 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !294, file: !294, line: 634, type: !295, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!294 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!295 = !DISubroutineType(types: !296)
!296 = !{null, !69}
!297 = !DILocalVariable(name: "program", arg: 1, scope: !293, file: !294, line: 634, type: !69)
!298 = !DILocation(line: 634, column: 34, scope: !293)
!299 = !DILocalVariable(name: "infomap", scope: !293, file: !294, line: 636, type: !300)
!300 = !DICompositeType(tag: DW_TAG_array_type, baseType: !301, size: 896, elements: !306)
!301 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !302)
!302 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !293, file: !294, line: 636, size: 128, elements: !303)
!303 = !{!304, !305}
!304 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !302, file: !294, line: 636, baseType: !69, size: 64)
!305 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !302, file: !294, line: 636, baseType: !69, size: 64, offset: 64)
!306 = !{!307}
!307 = !DISubrange(count: 7)
!308 = !DILocation(line: 636, column: 67, scope: !293)
!309 = !DILocalVariable(name: "node", scope: !293, file: !294, line: 646, type: !69)
!310 = !DILocation(line: 646, column: 15, scope: !293)
!311 = !DILocation(line: 646, column: 22, scope: !293)
!312 = !DILocalVariable(name: "map_prog", scope: !293, file: !294, line: 647, type: !313)
!313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !301, size: 64)
!314 = !DILocation(line: 647, column: 25, scope: !293)
!315 = !DILocation(line: 647, column: 36, scope: !293)
!316 = !DILocation(line: 649, column: 3, scope: !293)
!317 = !DILocation(line: 649, column: 10, scope: !293)
!318 = !DILocation(line: 649, column: 20, scope: !293)
!319 = !DILocation(line: 649, column: 28, scope: !293)
!320 = !DILocation(line: 649, column: 33, scope: !293)
!321 = !DILocation(line: 649, column: 31, scope: !293)
!322 = !DILocation(line: 0, scope: !293)
!323 = !DILocation(line: 650, column: 13, scope: !293)
!324 = distinct !{!324, !316, !323}
!325 = !DILocation(line: 652, column: 7, scope: !326)
!326 = distinct !DILexicalBlock(scope: !293, file: !294, line: 652, column: 7)
!327 = !DILocation(line: 652, column: 17, scope: !326)
!328 = !DILocation(line: 652, column: 7, scope: !293)
!329 = !DILocation(line: 653, column: 12, scope: !326)
!330 = !DILocation(line: 653, column: 22, scope: !326)
!331 = !DILocation(line: 653, column: 10, scope: !326)
!332 = !DILocation(line: 653, column: 5, scope: !326)
!333 = !DILocation(line: 655, column: 11, scope: !293)
!334 = !DILocation(line: 655, column: 3, scope: !293)
!335 = !DILocalVariable(name: "lc_messages", scope: !293, file: !294, line: 659, type: !69)
!336 = !DILocation(line: 659, column: 15, scope: !293)
!337 = !DILocation(line: 659, column: 29, scope: !293)
!338 = !DILocation(line: 660, column: 7, scope: !339)
!339 = distinct !DILexicalBlock(scope: !293, file: !294, line: 660, column: 7)
!340 = !DILocation(line: 660, column: 19, scope: !339)
!341 = !DILocation(line: 660, column: 22, scope: !339)
!342 = !DILocation(line: 660, column: 7, scope: !293)
!343 = !DILocation(line: 666, column: 7, scope: !344)
!344 = distinct !DILexicalBlock(scope: !339, file: !294, line: 661, column: 5)
!345 = !DILocation(line: 668, column: 5, scope: !344)
!346 = !DILocation(line: 669, column: 11, scope: !293)
!347 = !DILocation(line: 670, column: 24, scope: !293)
!348 = !DILocation(line: 669, column: 3, scope: !293)
!349 = !DILocation(line: 671, column: 11, scope: !293)
!350 = !DILocation(line: 672, column: 11, scope: !293)
!351 = !DILocation(line: 672, column: 17, scope: !293)
!352 = !DILocation(line: 672, column: 25, scope: !293)
!353 = !DILocation(line: 672, column: 22, scope: !293)
!354 = !DILocation(line: 671, column: 3, scope: !293)
!355 = !DILocation(line: 673, column: 1, scope: !293)
!356 = !DILocalVariable(name: "program", arg: 1, scope: !357, file: !294, line: 634, type: !69)
!357 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !294, file: !294, line: 634, type: !295, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !358, retainedNodes: !4)
!358 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !359, nameTableKind: None)
!359 = !{!360, !362, !364, !366, !368, !378, !380, !382, !384, !386, !388, !390, !392, !394, !396, !398, !401}
!360 = !DIGlobalVariableExpression(var: !361, expr: !DIExpression())
!361 = distinct !DIGlobalVariable(name: "ruid", scope: !358, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!362 = !DIGlobalVariableExpression(var: !363, expr: !DIExpression())
!363 = distinct !DIGlobalVariable(name: "euid", scope: !358, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!364 = !DIGlobalVariableExpression(var: !365, expr: !DIExpression())
!365 = distinct !DIGlobalVariable(name: "rgid", scope: !358, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!366 = !DIGlobalVariableExpression(var: !367, expr: !DIExpression())
!367 = distinct !DIGlobalVariable(name: "egid", scope: !358, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!368 = !DIGlobalVariableExpression(var: !369, expr: !DIExpression())
!369 = distinct !DIGlobalVariable(name: "longopts", scope: !358, file: !3, line: 75, type: !370, isLocal: true, isDefinition: true)
!370 = !DICompositeType(tag: DW_TAG_array_type, baseType: !371, size: 2560, elements: !76)
!371 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !372)
!372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !373)
!373 = !{!374, !375, !376, !377}
!374 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !372, file: !66, line: 52, baseType: !69, size: 64)
!375 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !372, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!376 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !372, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!377 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !372, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!378 = !DIGlobalVariableExpression(var: !379, expr: !DIExpression())
!379 = distinct !DIGlobalVariable(name: "just_context", scope: !358, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!380 = !DIGlobalVariableExpression(var: !381, expr: !DIExpression())
!381 = distinct !DIGlobalVariable(name: "just_group", scope: !358, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!382 = !DIGlobalVariableExpression(var: !383, expr: !DIExpression())
!383 = distinct !DIGlobalVariable(name: "use_name", scope: !358, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!384 = !DIGlobalVariableExpression(var: !385, expr: !DIExpression())
!385 = distinct !DIGlobalVariable(name: "use_real", scope: !358, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!386 = !DIGlobalVariableExpression(var: !387, expr: !DIExpression())
!387 = distinct !DIGlobalVariable(name: "just_user", scope: !358, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!388 = !DIGlobalVariableExpression(var: !389, expr: !DIExpression())
!389 = distinct !DIGlobalVariable(name: "opt_zero", scope: !358, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!390 = !DIGlobalVariableExpression(var: !391, expr: !DIExpression())
!391 = distinct !DIGlobalVariable(name: "just_group_list", scope: !358, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!392 = !DIGlobalVariableExpression(var: !393, expr: !DIExpression())
!393 = distinct !DIGlobalVariable(name: "context", scope: !358, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!394 = !DIGlobalVariableExpression(var: !395, expr: !DIExpression())
!395 = distinct !DIGlobalVariable(name: "multiple_users", scope: !358, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!396 = !DIGlobalVariableExpression(var: !397, expr: !DIExpression())
!397 = distinct !DIGlobalVariable(name: "ok", scope: !358, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!398 = !DIGlobalVariableExpression(var: !399, expr: !DIExpression())
!399 = distinct !DIGlobalVariable(name: "buf", scope: !400, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!400 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !358, retainedNodes: !4)
!401 = !DIGlobalVariableExpression(var: !402, expr: !DIExpression())
!402 = distinct !DIGlobalVariable(name: "buf", scope: !403, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!403 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !358, retainedNodes: !4)
!404 = !DILocalVariable(name: "infomap", scope: !357, file: !294, line: 636, type: !405)
!405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !406, size: 896, elements: !306)
!406 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !407)
!407 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !357, file: !294, line: 636, size: 128, elements: !408)
!408 = !{!409, !410}
!409 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !407, file: !294, line: 636, baseType: !69, size: 64)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !407, file: !294, line: 636, baseType: !69, size: 64, offset: 64)
!411 = !DILocalVariable(name: "node", scope: !357, file: !294, line: 646, type: !69)
!412 = !DILocalVariable(name: "map_prog", scope: !357, file: !294, line: 647, type: !413)
!413 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !406, size: 64)
!414 = !DILocalVariable(name: "lc_messages", scope: !415, file: !294, line: 659, type: !69)
!415 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !294, file: !294, line: 634, type: !295, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !416, retainedNodes: !4)
!416 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !417, nameTableKind: None)
!417 = !{!418, !420, !422, !424, !426, !436, !438, !440, !442, !444, !446, !448, !450, !452, !454, !456, !459}
!418 = !DIGlobalVariableExpression(var: !419, expr: !DIExpression())
!419 = distinct !DIGlobalVariable(name: "ruid", scope: !416, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!420 = !DIGlobalVariableExpression(var: !421, expr: !DIExpression())
!421 = distinct !DIGlobalVariable(name: "euid", scope: !416, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!422 = !DIGlobalVariableExpression(var: !423, expr: !DIExpression())
!423 = distinct !DIGlobalVariable(name: "rgid", scope: !416, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!424 = !DIGlobalVariableExpression(var: !425, expr: !DIExpression())
!425 = distinct !DIGlobalVariable(name: "egid", scope: !416, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!426 = !DIGlobalVariableExpression(var: !427, expr: !DIExpression())
!427 = distinct !DIGlobalVariable(name: "longopts", scope: !416, file: !3, line: 75, type: !428, isLocal: true, isDefinition: true)
!428 = !DICompositeType(tag: DW_TAG_array_type, baseType: !429, size: 2560, elements: !76)
!429 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !430)
!430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !431)
!431 = !{!432, !433, !434, !435}
!432 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !430, file: !66, line: 52, baseType: !69, size: 64)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !430, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!434 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !430, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !430, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!436 = !DIGlobalVariableExpression(var: !437, expr: !DIExpression())
!437 = distinct !DIGlobalVariable(name: "just_context", scope: !416, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!438 = !DIGlobalVariableExpression(var: !439, expr: !DIExpression())
!439 = distinct !DIGlobalVariable(name: "just_group", scope: !416, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!440 = !DIGlobalVariableExpression(var: !441, expr: !DIExpression())
!441 = distinct !DIGlobalVariable(name: "use_name", scope: !416, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!442 = !DIGlobalVariableExpression(var: !443, expr: !DIExpression())
!443 = distinct !DIGlobalVariable(name: "use_real", scope: !416, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!444 = !DIGlobalVariableExpression(var: !445, expr: !DIExpression())
!445 = distinct !DIGlobalVariable(name: "just_user", scope: !416, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!446 = !DIGlobalVariableExpression(var: !447, expr: !DIExpression())
!447 = distinct !DIGlobalVariable(name: "opt_zero", scope: !416, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!448 = !DIGlobalVariableExpression(var: !449, expr: !DIExpression())
!449 = distinct !DIGlobalVariable(name: "just_group_list", scope: !416, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!450 = !DIGlobalVariableExpression(var: !451, expr: !DIExpression())
!451 = distinct !DIGlobalVariable(name: "context", scope: !416, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!452 = !DIGlobalVariableExpression(var: !453, expr: !DIExpression())
!453 = distinct !DIGlobalVariable(name: "multiple_users", scope: !416, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!454 = !DIGlobalVariableExpression(var: !455, expr: !DIExpression())
!455 = distinct !DIGlobalVariable(name: "ok", scope: !416, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!456 = !DIGlobalVariableExpression(var: !457, expr: !DIExpression())
!457 = distinct !DIGlobalVariable(name: "buf", scope: !458, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!458 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !416, retainedNodes: !4)
!459 = !DIGlobalVariableExpression(var: !460, expr: !DIExpression())
!460 = distinct !DIGlobalVariable(name: "buf", scope: !461, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!461 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !416, retainedNodes: !4)
!462 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 125, type: !463, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!463 = !DISubroutineType(types: !464)
!464 = !{!72, !72, !184}
!465 = !DILocalVariable(name: "argc", arg: 1, scope: !462, file: !3, line: 125, type: !72)
!466 = !DILocation(line: 125, column: 11, scope: !462)
!467 = !DILocalVariable(name: "argv", arg: 2, scope: !462, file: !3, line: 125, type: !184)
!468 = !DILocation(line: 125, column: 24, scope: !462)
!469 = !DILocalVariable(name: "optc", scope: !462, file: !3, line: 127, type: !72)
!470 = !DILocation(line: 127, column: 7, scope: !462)
!471 = !DILocalVariable(name: "selinux_enabled", scope: !462, file: !3, line: 128, type: !72)
!472 = !DILocation(line: 128, column: 7, scope: !462)
!473 = !DILocalVariable(name: "smack_enabled", scope: !462, file: !3, line: 129, type: !27)
!474 = !DILocation(line: 129, column: 8, scope: !462)
!475 = !DILocation(line: 129, column: 24, scope: !462)
!476 = !DILocalVariable(name: "pw_name", scope: !462, file: !3, line: 130, type: !6)
!477 = !DILocation(line: 130, column: 9, scope: !462)
!478 = !DILocation(line: 133, column: 21, scope: !462)
!479 = !DILocation(line: 133, column: 3, scope: !462)
!480 = !DILocation(line: 134, column: 3, scope: !462)
!481 = !DILocation(line: 135, column: 3, scope: !462)
!482 = !DILocation(line: 136, column: 3, scope: !462)
!483 = !DILocation(line: 138, column: 3, scope: !462)
!484 = !DILocation(line: 140, column: 3, scope: !462)
!485 = !DILocation(line: 140, column: 31, scope: !462)
!486 = !DILocation(line: 140, column: 37, scope: !462)
!487 = !DILocation(line: 140, column: 18, scope: !462)
!488 = !DILocation(line: 140, column: 16, scope: !462)
!489 = !DILocation(line: 140, column: 72, scope: !462)
!490 = !DILocation(line: 142, column: 15, scope: !491)
!491 = distinct !DILexicalBlock(scope: !462, file: !3, line: 141, column: 5)
!492 = !DILocation(line: 142, column: 7, scope: !491)
!493 = !DILocation(line: 146, column: 11, scope: !494)
!494 = distinct !DILexicalBlock(scope: !491, file: !3, line: 143, column: 9)
!495 = !DILocation(line: 156, column: 16, scope: !496)
!496 = distinct !DILexicalBlock(scope: !494, file: !3, line: 156, column: 15)
!497 = !DILocation(line: 156, column: 15, scope: !494)
!498 = !DILocation(line: 157, column: 13, scope: !496)
!499 = !DILocation(line: 160, column: 24, scope: !494)
!500 = !DILocation(line: 161, column: 11, scope: !494)
!501 = !DILocation(line: 164, column: 22, scope: !494)
!502 = !DILocation(line: 165, column: 11, scope: !494)
!503 = !DILocation(line: 167, column: 20, scope: !494)
!504 = !DILocation(line: 168, column: 11, scope: !494)
!505 = !DILocation(line: 170, column: 20, scope: !494)
!506 = !DILocation(line: 171, column: 11, scope: !494)
!507 = !DILocation(line: 173, column: 21, scope: !494)
!508 = !DILocation(line: 174, column: 11, scope: !494)
!509 = !DILocation(line: 176, column: 20, scope: !494)
!510 = !DILocation(line: 177, column: 11, scope: !494)
!511 = !DILocation(line: 179, column: 27, scope: !494)
!512 = !DILocation(line: 180, column: 11, scope: !494)
!513 = !DILocation(line: 181, column: 9, scope: !494)
!514 = !DILocation(line: 182, column: 9, scope: !494)
!515 = !DILocation(line: 184, column: 11, scope: !494)
!516 = distinct !{!516, !484, !517}
!517 = !DILocation(line: 186, column: 5, scope: !462)
!518 = !DILocalVariable(name: "n_ids", scope: !462, file: !3, line: 188, type: !134)
!519 = !DILocation(line: 188, column: 10, scope: !462)
!520 = !DILocation(line: 188, column: 18, scope: !462)
!521 = !DILocation(line: 188, column: 25, scope: !462)
!522 = !DILocation(line: 188, column: 23, scope: !462)
!523 = !DILocation(line: 190, column: 7, scope: !524)
!524 = distinct !DILexicalBlock(scope: !462, file: !3, line: 190, column: 7)
!525 = !DILocation(line: 190, column: 13, scope: !524)
!526 = !DILocation(line: 190, column: 16, scope: !524)
!527 = !DILocation(line: 190, column: 7, scope: !462)
!528 = !DILocation(line: 191, column: 5, scope: !524)
!529 = !DILocation(line: 194, column: 7, scope: !530)
!530 = distinct !DILexicalBlock(scope: !462, file: !3, line: 194, column: 7)
!531 = !DILocation(line: 194, column: 19, scope: !530)
!532 = !DILocation(line: 194, column: 17, scope: !530)
!533 = !DILocation(line: 194, column: 32, scope: !530)
!534 = !DILocation(line: 194, column: 30, scope: !530)
!535 = !DILocation(line: 194, column: 50, scope: !530)
!536 = !DILocation(line: 194, column: 48, scope: !530)
!537 = !DILocation(line: 194, column: 63, scope: !530)
!538 = !DILocation(line: 194, column: 7, scope: !462)
!539 = !DILocation(line: 195, column: 5, scope: !530)
!540 = !DILocalVariable(name: "default_format", scope: !462, file: !3, line: 197, type: !27)
!541 = !DILocation(line: 197, column: 8, scope: !462)
!542 = !DILocation(line: 197, column: 28, scope: !462)
!543 = !DILocation(line: 198, column: 28, scope: !462)
!544 = !DILocation(line: 198, column: 31, scope: !462)
!545 = !DILocation(line: 199, column: 28, scope: !462)
!546 = !DILocation(line: 199, column: 31, scope: !462)
!547 = !DILocation(line: 200, column: 28, scope: !462)
!548 = !DILocation(line: 200, column: 31, scope: !462)
!549 = !DILocation(line: 197, column: 25, scope: !462)
!550 = !DILocation(line: 202, column: 7, scope: !551)
!551 = distinct !DILexicalBlock(scope: !462, file: !3, line: 202, column: 7)
!552 = !DILocation(line: 202, column: 22, scope: !551)
!553 = !DILocation(line: 202, column: 26, scope: !551)
!554 = !DILocation(line: 202, column: 35, scope: !551)
!555 = !DILocation(line: 202, column: 38, scope: !551)
!556 = !DILocation(line: 202, column: 7, scope: !462)
!557 = !DILocation(line: 203, column: 5, scope: !551)
!558 = !DILocation(line: 206, column: 7, scope: !559)
!559 = distinct !DILexicalBlock(scope: !462, file: !3, line: 206, column: 7)
!560 = !DILocation(line: 206, column: 22, scope: !559)
!561 = !DILocation(line: 206, column: 25, scope: !559)
!562 = !DILocation(line: 206, column: 7, scope: !462)
!563 = !DILocation(line: 207, column: 5, scope: !559)
!564 = !DILocation(line: 215, column: 7, scope: !565)
!565 = distinct !DILexicalBlock(scope: !462, file: !3, line: 215, column: 7)
!566 = !DILocation(line: 215, column: 13, scope: !565)
!567 = !DILocation(line: 216, column: 11, scope: !565)
!568 = !DILocation(line: 217, column: 11, scope: !565)
!569 = !DILocation(line: 217, column: 15, scope: !565)
!570 = !DILocation(line: 217, column: 30, scope: !565)
!571 = !DILocation(line: 217, column: 35, scope: !565)
!572 = !DILocation(line: 215, column: 7, scope: !462)
!573 = !DILocation(line: 220, column: 12, scope: !574)
!574 = distinct !DILexicalBlock(scope: !575, file: !3, line: 220, column: 11)
!575 = distinct !DILexicalBlock(scope: !565, file: !3, line: 218, column: 5)
!576 = !DILocation(line: 220, column: 28, scope: !574)
!577 = !DILocation(line: 220, column: 31, scope: !574)
!578 = !DILocation(line: 220, column: 49, scope: !574)
!579 = !DILocation(line: 220, column: 52, scope: !574)
!580 = !DILocation(line: 221, column: 11, scope: !574)
!581 = !DILocation(line: 221, column: 15, scope: !574)
!582 = !DILocation(line: 222, column: 15, scope: !574)
!583 = !DILocation(line: 222, column: 18, scope: !574)
!584 = !DILocation(line: 222, column: 55, scope: !574)
!585 = !DILocation(line: 223, column: 15, scope: !574)
!586 = !DILocation(line: 223, column: 18, scope: !574)
!587 = !DILocation(line: 220, column: 11, scope: !575)
!588 = !DILocation(line: 224, column: 9, scope: !574)
!589 = !DILocation(line: 225, column: 5, scope: !575)
!590 = !DILocation(line: 227, column: 7, scope: !591)
!591 = distinct !DILexicalBlock(scope: !462, file: !3, line: 227, column: 7)
!592 = !DILocation(line: 227, column: 13, scope: !591)
!593 = !DILocation(line: 227, column: 7, scope: !462)
!594 = !DILocation(line: 229, column: 24, scope: !595)
!595 = distinct !DILexicalBlock(scope: !591, file: !3, line: 228, column: 5)
!596 = !DILocation(line: 229, column: 30, scope: !595)
!597 = !DILocation(line: 229, column: 22, scope: !595)
!598 = !DILocation(line: 234, column: 16, scope: !595)
!599 = !DILocation(line: 234, column: 13, scope: !595)
!600 = !DILocation(line: 236, column: 7, scope: !595)
!601 = !DILocation(line: 236, column: 14, scope: !602)
!602 = distinct !DILexicalBlock(scope: !603, file: !3, line: 236, column: 7)
!603 = distinct !DILexicalBlock(scope: !595, file: !3, line: 236, column: 7)
!604 = !DILocation(line: 236, column: 23, scope: !602)
!605 = !DILocation(line: 236, column: 21, scope: !602)
!606 = !DILocation(line: 236, column: 7, scope: !603)
!607 = !DILocalVariable(name: "pwd", scope: !608, file: !3, line: 238, type: !609)
!608 = distinct !DILexicalBlock(scope: !602, file: !3, line: 237, column: 9)
!609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !610, size: 64)
!610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !612)
!611 = !DIFile(filename: "/usr/include/pwd.h", directory: "")
!612 = !{!613, !614, !615, !616, !617, !618, !619}
!613 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !610, file: !611, line: 51, baseType: !6, size: 64)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !610, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !610, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !610, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !610, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !610, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !610, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!620 = !DILocation(line: 238, column: 26, scope: !608)
!621 = !DILocalVariable(name: "spec", scope: !608, file: !3, line: 239, type: !69)
!622 = !DILocation(line: 239, column: 23, scope: !608)
!623 = !DILocation(line: 239, column: 30, scope: !608)
!624 = !DILocation(line: 239, column: 35, scope: !608)
!625 = !DILocation(line: 243, column: 16, scope: !626)
!626 = distinct !DILexicalBlock(scope: !608, file: !3, line: 243, column: 15)
!627 = !DILocation(line: 243, column: 15, scope: !626)
!628 = !DILocation(line: 243, column: 15, scope: !608)
!629 = !DILocation(line: 245, column: 36, scope: !630)
!630 = distinct !DILexicalBlock(scope: !631, file: !3, line: 245, column: 19)
!631 = distinct !DILexicalBlock(scope: !626, file: !3, line: 244, column: 13)
!632 = !DILocation(line: 245, column: 19, scope: !630)
!633 = !DILocation(line: 245, column: 67, scope: !630)
!634 = !DILocation(line: 245, column: 19, scope: !631)
!635 = !DILocation(line: 250, column: 35, scope: !636)
!636 = distinct !DILexicalBlock(scope: !630, file: !3, line: 246, column: 17)
!637 = !DILocation(line: 250, column: 25, scope: !636)
!638 = !DILocation(line: 250, column: 23, scope: !636)
!639 = !DILocation(line: 251, column: 17, scope: !636)
!640 = !DILocation(line: 252, column: 13, scope: !631)
!641 = !DILocation(line: 253, column: 15, scope: !642)
!642 = distinct !DILexicalBlock(scope: !608, file: !3, line: 253, column: 15)
!643 = !DILocation(line: 253, column: 19, scope: !642)
!644 = !DILocation(line: 253, column: 15, scope: !608)
!645 = !DILocation(line: 255, column: 25, scope: !646)
!646 = distinct !DILexicalBlock(scope: !642, file: !3, line: 254, column: 13)
!647 = !DILocation(line: 255, column: 32, scope: !646)
!648 = !DILocation(line: 255, column: 62, scope: !646)
!649 = !DILocation(line: 255, column: 67, scope: !646)
!650 = !DILocation(line: 255, column: 55, scope: !646)
!651 = !DILocation(line: 255, column: 15, scope: !646)
!652 = !DILocation(line: 256, column: 18, scope: !646)
!653 = !DILocation(line: 257, column: 15, scope: !646)
!654 = !DILocation(line: 259, column: 30, scope: !608)
!655 = !DILocation(line: 259, column: 35, scope: !608)
!656 = !DILocation(line: 259, column: 21, scope: !608)
!657 = !DILocation(line: 259, column: 19, scope: !608)
!658 = !DILocation(line: 260, column: 25, scope: !608)
!659 = !DILocation(line: 260, column: 30, scope: !608)
!660 = !DILocation(line: 260, column: 23, scope: !608)
!661 = !DILocation(line: 260, column: 16, scope: !608)
!662 = !DILocation(line: 261, column: 25, scope: !608)
!663 = !DILocation(line: 261, column: 30, scope: !608)
!664 = !DILocation(line: 261, column: 23, scope: !608)
!665 = !DILocation(line: 261, column: 16, scope: !608)
!666 = !DILocation(line: 262, column: 24, scope: !608)
!667 = !DILocation(line: 262, column: 11, scope: !608)
!668 = !DILocation(line: 263, column: 17, scope: !608)
!669 = !DILocation(line: 263, column: 11, scope: !608)
!670 = !DILocation(line: 264, column: 9, scope: !608)
!671 = !DILocation(line: 236, column: 36, scope: !602)
!672 = !DILocation(line: 236, column: 7, scope: !602)
!673 = distinct !{!673, !606, !674}
!674 = !DILocation(line: 264, column: 9, scope: !603)
!675 = !DILocation(line: 265, column: 5, scope: !595)
!676 = !DILocalVariable(name: "NO_UID", scope: !677, file: !3, line: 271, type: !12)
!677 = distinct !DILexicalBlock(scope: !591, file: !3, line: 267, column: 5)
!678 = !DILocation(line: 271, column: 13, scope: !677)
!679 = !DILocalVariable(name: "NO_GID", scope: !677, file: !3, line: 272, type: !21)
!680 = !DILocation(line: 272, column: 13, scope: !677)
!681 = !DILocation(line: 274, column: 11, scope: !682)
!682 = distinct !DILexicalBlock(scope: !677, file: !3, line: 274, column: 11)
!683 = !DILocation(line: 274, column: 11, scope: !677)
!684 = !DILocation(line: 274, column: 24, scope: !682)
!685 = !DILocation(line: 275, column: 14, scope: !682)
!686 = !DILocation(line: 275, column: 25, scope: !682)
!687 = !DILocation(line: 275, column: 29, scope: !682)
!688 = !DILocation(line: 275, column: 45, scope: !682)
!689 = !DILocation(line: 275, column: 49, scope: !682)
!690 = !DILocation(line: 277, column: 11, scope: !691)
!691 = distinct !DILexicalBlock(scope: !682, file: !3, line: 276, column: 9)
!692 = !DILocation(line: 277, column: 17, scope: !691)
!693 = !DILocation(line: 278, column: 18, scope: !691)
!694 = !DILocation(line: 278, column: 16, scope: !691)
!695 = !DILocation(line: 279, column: 15, scope: !696)
!696 = distinct !DILexicalBlock(scope: !691, file: !3, line: 279, column: 15)
!697 = !DILocation(line: 279, column: 23, scope: !696)
!698 = !DILocation(line: 279, column: 20, scope: !696)
!699 = !DILocation(line: 279, column: 30, scope: !696)
!700 = !DILocation(line: 279, column: 33, scope: !696)
!701 = !DILocation(line: 279, column: 15, scope: !691)
!702 = !DILocation(line: 280, column: 13, scope: !696)
!703 = !DILocation(line: 281, column: 9, scope: !691)
!704 = !DILocation(line: 283, column: 11, scope: !705)
!705 = distinct !DILexicalBlock(scope: !677, file: !3, line: 283, column: 11)
!706 = !DILocation(line: 283, column: 11, scope: !677)
!707 = !DILocation(line: 283, column: 23, scope: !705)
!708 = !DILocation(line: 284, column: 14, scope: !705)
!709 = !DILocation(line: 284, column: 25, scope: !705)
!710 = !DILocation(line: 284, column: 29, scope: !705)
!711 = !DILocation(line: 284, column: 45, scope: !705)
!712 = !DILocation(line: 284, column: 49, scope: !705)
!713 = !DILocation(line: 286, column: 11, scope: !714)
!714 = distinct !DILexicalBlock(scope: !705, file: !3, line: 285, column: 9)
!715 = !DILocation(line: 286, column: 17, scope: !714)
!716 = !DILocation(line: 287, column: 18, scope: !714)
!717 = !DILocation(line: 287, column: 16, scope: !714)
!718 = !DILocation(line: 288, column: 15, scope: !719)
!719 = distinct !DILexicalBlock(scope: !714, file: !3, line: 288, column: 15)
!720 = !DILocation(line: 288, column: 23, scope: !719)
!721 = !DILocation(line: 288, column: 20, scope: !719)
!722 = !DILocation(line: 288, column: 30, scope: !719)
!723 = !DILocation(line: 288, column: 33, scope: !719)
!724 = !DILocation(line: 288, column: 15, scope: !714)
!725 = !DILocation(line: 289, column: 13, scope: !719)
!726 = !DILocation(line: 290, column: 9, scope: !714)
!727 = !DILocation(line: 292, column: 12, scope: !728)
!728 = distinct !DILexicalBlock(scope: !677, file: !3, line: 292, column: 11)
!729 = !DILocation(line: 292, column: 22, scope: !728)
!730 = !DILocation(line: 292, column: 26, scope: !728)
!731 = !DILocation(line: 292, column: 37, scope: !728)
!732 = !DILocation(line: 292, column: 40, scope: !728)
!733 = !DILocation(line: 292, column: 56, scope: !728)
!734 = !DILocation(line: 292, column: 60, scope: !728)
!735 = !DILocation(line: 292, column: 11, scope: !677)
!736 = !DILocation(line: 294, column: 11, scope: !737)
!737 = distinct !DILexicalBlock(scope: !728, file: !3, line: 293, column: 9)
!738 = !DILocation(line: 294, column: 17, scope: !737)
!739 = !DILocation(line: 295, column: 18, scope: !737)
!740 = !DILocation(line: 295, column: 16, scope: !737)
!741 = !DILocation(line: 296, column: 15, scope: !742)
!742 = distinct !DILexicalBlock(scope: !737, file: !3, line: 296, column: 15)
!743 = !DILocation(line: 296, column: 23, scope: !742)
!744 = !DILocation(line: 296, column: 20, scope: !742)
!745 = !DILocation(line: 296, column: 30, scope: !742)
!746 = !DILocation(line: 296, column: 33, scope: !742)
!747 = !DILocation(line: 296, column: 15, scope: !737)
!748 = !DILocation(line: 297, column: 13, scope: !742)
!749 = !DILocation(line: 299, column: 11, scope: !737)
!750 = !DILocation(line: 299, column: 17, scope: !737)
!751 = !DILocation(line: 300, column: 18, scope: !737)
!752 = !DILocation(line: 300, column: 16, scope: !737)
!753 = !DILocation(line: 301, column: 15, scope: !754)
!754 = distinct !DILexicalBlock(scope: !737, file: !3, line: 301, column: 15)
!755 = !DILocation(line: 301, column: 23, scope: !754)
!756 = !DILocation(line: 301, column: 20, scope: !754)
!757 = !DILocation(line: 301, column: 30, scope: !754)
!758 = !DILocation(line: 301, column: 33, scope: !754)
!759 = !DILocation(line: 301, column: 15, scope: !737)
!760 = !DILocation(line: 302, column: 13, scope: !754)
!761 = !DILocation(line: 303, column: 9, scope: !737)
!762 = !DILocation(line: 304, column: 22, scope: !677)
!763 = !DILocation(line: 304, column: 9, scope: !677)
!764 = !DILocation(line: 307, column: 10, scope: !462)
!765 = !DILocation(line: 307, column: 3, scope: !462)
!766 = !DILocalVariable(name: "spec", scope: !767, file: !3, line: 239, type: !69)
!767 = distinct !DILexicalBlock(scope: !768, file: !3, line: 237, column: 9)
!768 = distinct !DILexicalBlock(scope: !769, file: !3, line: 236, column: 7)
!769 = distinct !DILexicalBlock(scope: !770, file: !3, line: 236, column: 7)
!770 = distinct !DILexicalBlock(scope: !771, file: !3, line: 228, column: 5)
!771 = distinct !DILexicalBlock(scope: !772, file: !3, line: 227, column: 7)
!772 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 125, type: !463, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !773, retainedNodes: !4)
!773 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !774, nameTableKind: None)
!774 = !{!775, !777, !779, !781, !783, !793, !795, !797, !799, !801, !803, !805, !807, !809, !811, !813, !816}
!775 = !DIGlobalVariableExpression(var: !776, expr: !DIExpression())
!776 = distinct !DIGlobalVariable(name: "ruid", scope: !773, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!777 = !DIGlobalVariableExpression(var: !778, expr: !DIExpression())
!778 = distinct !DIGlobalVariable(name: "euid", scope: !773, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!779 = !DIGlobalVariableExpression(var: !780, expr: !DIExpression())
!780 = distinct !DIGlobalVariable(name: "rgid", scope: !773, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!781 = !DIGlobalVariableExpression(var: !782, expr: !DIExpression())
!782 = distinct !DIGlobalVariable(name: "egid", scope: !773, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!783 = !DIGlobalVariableExpression(var: !784, expr: !DIExpression())
!784 = distinct !DIGlobalVariable(name: "longopts", scope: !773, file: !3, line: 75, type: !785, isLocal: true, isDefinition: true)
!785 = !DICompositeType(tag: DW_TAG_array_type, baseType: !786, size: 2560, elements: !76)
!786 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !787)
!787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !788)
!788 = !{!789, !790, !791, !792}
!789 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !787, file: !66, line: 52, baseType: !69, size: 64)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !787, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !787, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !787, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!793 = !DIGlobalVariableExpression(var: !794, expr: !DIExpression())
!794 = distinct !DIGlobalVariable(name: "just_context", scope: !773, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!795 = !DIGlobalVariableExpression(var: !796, expr: !DIExpression())
!796 = distinct !DIGlobalVariable(name: "just_group", scope: !773, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!797 = !DIGlobalVariableExpression(var: !798, expr: !DIExpression())
!798 = distinct !DIGlobalVariable(name: "use_name", scope: !773, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!799 = !DIGlobalVariableExpression(var: !800, expr: !DIExpression())
!800 = distinct !DIGlobalVariable(name: "use_real", scope: !773, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!801 = !DIGlobalVariableExpression(var: !802, expr: !DIExpression())
!802 = distinct !DIGlobalVariable(name: "just_user", scope: !773, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!803 = !DIGlobalVariableExpression(var: !804, expr: !DIExpression())
!804 = distinct !DIGlobalVariable(name: "opt_zero", scope: !773, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!805 = !DIGlobalVariableExpression(var: !806, expr: !DIExpression())
!806 = distinct !DIGlobalVariable(name: "just_group_list", scope: !773, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!807 = !DIGlobalVariableExpression(var: !808, expr: !DIExpression())
!808 = distinct !DIGlobalVariable(name: "context", scope: !773, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!809 = !DIGlobalVariableExpression(var: !810, expr: !DIExpression())
!810 = distinct !DIGlobalVariable(name: "multiple_users", scope: !773, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!811 = !DIGlobalVariableExpression(var: !812, expr: !DIExpression())
!812 = distinct !DIGlobalVariable(name: "ok", scope: !773, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!813 = !DIGlobalVariableExpression(var: !814, expr: !DIExpression())
!814 = distinct !DIGlobalVariable(name: "buf", scope: !815, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!815 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !773, retainedNodes: !4)
!816 = !DIGlobalVariableExpression(var: !817, expr: !DIExpression())
!817 = distinct !DIGlobalVariable(name: "buf", scope: !818, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!818 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !773, retainedNodes: !4)
!819 = !DILocalVariable(name: "NO_GID", scope: !820, file: !3, line: 272, type: !21)
!820 = distinct !DILexicalBlock(scope: !821, file: !3, line: 267, column: 5)
!821 = distinct !DILexicalBlock(scope: !822, file: !3, line: 227, column: 7)
!822 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 125, type: !463, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !823, retainedNodes: !4)
!823 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !824, nameTableKind: None)
!824 = !{!825, !827, !829, !831, !833, !843, !845, !847, !849, !851, !853, !855, !857, !859, !861, !863, !866}
!825 = !DIGlobalVariableExpression(var: !826, expr: !DIExpression())
!826 = distinct !DIGlobalVariable(name: "ruid", scope: !823, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!827 = !DIGlobalVariableExpression(var: !828, expr: !DIExpression())
!828 = distinct !DIGlobalVariable(name: "euid", scope: !823, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!829 = !DIGlobalVariableExpression(var: !830, expr: !DIExpression())
!830 = distinct !DIGlobalVariable(name: "rgid", scope: !823, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!831 = !DIGlobalVariableExpression(var: !832, expr: !DIExpression())
!832 = distinct !DIGlobalVariable(name: "egid", scope: !823, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!833 = !DIGlobalVariableExpression(var: !834, expr: !DIExpression())
!834 = distinct !DIGlobalVariable(name: "longopts", scope: !823, file: !3, line: 75, type: !835, isLocal: true, isDefinition: true)
!835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !836, size: 2560, elements: !76)
!836 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !837)
!837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !838)
!838 = !{!839, !840, !841, !842}
!839 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !837, file: !66, line: 52, baseType: !69, size: 64)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !837, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !837, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !837, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!843 = !DIGlobalVariableExpression(var: !844, expr: !DIExpression())
!844 = distinct !DIGlobalVariable(name: "just_context", scope: !823, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!845 = !DIGlobalVariableExpression(var: !846, expr: !DIExpression())
!846 = distinct !DIGlobalVariable(name: "just_group", scope: !823, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!847 = !DIGlobalVariableExpression(var: !848, expr: !DIExpression())
!848 = distinct !DIGlobalVariable(name: "use_name", scope: !823, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!849 = !DIGlobalVariableExpression(var: !850, expr: !DIExpression())
!850 = distinct !DIGlobalVariable(name: "use_real", scope: !823, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!851 = !DIGlobalVariableExpression(var: !852, expr: !DIExpression())
!852 = distinct !DIGlobalVariable(name: "just_user", scope: !823, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!853 = !DIGlobalVariableExpression(var: !854, expr: !DIExpression())
!854 = distinct !DIGlobalVariable(name: "opt_zero", scope: !823, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!855 = !DIGlobalVariableExpression(var: !856, expr: !DIExpression())
!856 = distinct !DIGlobalVariable(name: "just_group_list", scope: !823, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!857 = !DIGlobalVariableExpression(var: !858, expr: !DIExpression())
!858 = distinct !DIGlobalVariable(name: "context", scope: !823, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!859 = !DIGlobalVariableExpression(var: !860, expr: !DIExpression())
!860 = distinct !DIGlobalVariable(name: "multiple_users", scope: !823, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!861 = !DIGlobalVariableExpression(var: !862, expr: !DIExpression())
!862 = distinct !DIGlobalVariable(name: "ok", scope: !823, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!863 = !DIGlobalVariableExpression(var: !864, expr: !DIExpression())
!864 = distinct !DIGlobalVariable(name: "buf", scope: !865, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!865 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !823, retainedNodes: !4)
!866 = !DIGlobalVariableExpression(var: !867, expr: !DIExpression())
!867 = distinct !DIGlobalVariable(name: "buf", scope: !868, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!868 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !823, retainedNodes: !4)
!869 = distinct !DISubprogram(name: "is_smack_enabled", scope: !870, file: !870, line: 39, type: !871, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!870 = !DIFile(filename: "./lib/smack.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!871 = !DISubroutineType(types: !872)
!872 = !{!27}
!873 = !DILocation(line: 44, column: 3, scope: !869)
!874 = distinct !DISubprogram(name: "smack_new_label_from_self", scope: !870, file: !870, line: 26, type: !875, scopeLine: 27, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!875 = !DISubroutineType(types: !876)
!876 = !{!877, !184}
!877 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !878, line: 77, baseType: !879)
!878 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!879 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !15, line: 193, baseType: !880)
!880 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!881 = !DILocalVariable(name: "label", arg: 1, scope: !874, file: !870, line: 26, type: !184)
!882 = !DILocation(line: 26, column: 35, scope: !874)
!883 = !DILocation(line: 28, column: 3, scope: !874)
!884 = distinct !DISubprogram(name: "print_stuff", scope: !3, file: !3, line: 432, type: !295, scopeLine: 433, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!885 = !DILocalVariable(name: "pw_name", arg: 1, scope: !884, file: !3, line: 432, type: !69)
!886 = !DILocation(line: 432, column: 26, scope: !884)
!887 = !DILocation(line: 434, column: 7, scope: !888)
!888 = distinct !DILexicalBlock(scope: !884, file: !3, line: 434, column: 7)
!889 = !DILocation(line: 434, column: 7, scope: !884)
!890 = !DILocation(line: 435, column: 19, scope: !888)
!891 = !DILocation(line: 435, column: 30, scope: !888)
!892 = !DILocation(line: 435, column: 37, scope: !888)
!893 = !DILocation(line: 435, column: 7, scope: !888)
!894 = !DILocation(line: 442, column: 12, scope: !895)
!895 = distinct !DILexicalBlock(scope: !888, file: !3, line: 442, column: 12)
!896 = !DILocation(line: 442, column: 12, scope: !888)
!897 = !DILocation(line: 443, column: 24, scope: !895)
!898 = !DILocation(line: 443, column: 35, scope: !895)
!899 = !DILocation(line: 443, column: 42, scope: !895)
!900 = !DILocation(line: 443, column: 48, scope: !895)
!901 = !DILocation(line: 443, column: 11, scope: !895)
!902 = !DILocation(line: 443, column: 8, scope: !895)
!903 = !DILocation(line: 443, column: 5, scope: !895)
!904 = !DILocation(line: 444, column: 12, scope: !905)
!905 = distinct !DILexicalBlock(scope: !895, file: !3, line: 444, column: 12)
!906 = !DILocation(line: 444, column: 12, scope: !895)
!907 = !DILocation(line: 445, column: 29, scope: !905)
!908 = !DILocation(line: 445, column: 38, scope: !905)
!909 = !DILocation(line: 445, column: 44, scope: !905)
!910 = !DILocation(line: 445, column: 50, scope: !905)
!911 = !DILocation(line: 446, column: 29, scope: !905)
!912 = !DILocation(line: 446, column: 39, scope: !905)
!913 = !DILocation(line: 445, column: 11, scope: !905)
!914 = !DILocation(line: 445, column: 8, scope: !905)
!915 = !DILocation(line: 445, column: 5, scope: !905)
!916 = !DILocation(line: 447, column: 12, scope: !917)
!917 = distinct !DILexicalBlock(scope: !905, file: !3, line: 447, column: 12)
!918 = !DILocation(line: 447, column: 12, scope: !905)
!919 = !DILocation(line: 448, column: 5, scope: !917)
!920 = !DILocation(line: 450, column: 22, scope: !917)
!921 = !DILocation(line: 450, column: 5, scope: !917)
!922 = !DILocation(line: 455, column: 7, scope: !923)
!923 = distinct !DILexicalBlock(scope: !884, file: !3, line: 455, column: 7)
!924 = !DILocation(line: 455, column: 16, scope: !923)
!925 = !DILocation(line: 455, column: 19, scope: !923)
!926 = !DILocation(line: 455, column: 35, scope: !923)
!927 = !DILocation(line: 455, column: 38, scope: !923)
!928 = !DILocation(line: 455, column: 7, scope: !884)
!929 = !DILocation(line: 457, column: 7, scope: !930)
!930 = distinct !DILexicalBlock(scope: !923, file: !3, line: 456, column: 5)
!931 = !DILocation(line: 458, column: 7, scope: !930)
!932 = !DILocation(line: 459, column: 5, scope: !930)
!933 = !DILocation(line: 462, column: 7, scope: !934)
!934 = distinct !DILexicalBlock(scope: !923, file: !3, line: 461, column: 5)
!935 = !DILocation(line: 464, column: 1, scope: !884)
!936 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 335, type: !937, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!937 = !DISubroutineType(types: !938)
!938 = !{null, !12}
!939 = !DILocalVariable(name: "uid", arg: 1, scope: !936, file: !3, line: 335, type: !12)
!940 = !DILocation(line: 335, column: 19, scope: !936)
!941 = !DILocalVariable(name: "pwd", scope: !936, file: !3, line: 337, type: !609)
!942 = !DILocation(line: 337, column: 18, scope: !936)
!943 = !DILocation(line: 339, column: 7, scope: !944)
!944 = distinct !DILexicalBlock(scope: !936, file: !3, line: 339, column: 7)
!945 = !DILocation(line: 339, column: 7, scope: !936)
!946 = !DILocation(line: 341, column: 23, scope: !947)
!947 = distinct !DILexicalBlock(scope: !944, file: !3, line: 340, column: 5)
!948 = !DILocation(line: 341, column: 13, scope: !947)
!949 = !DILocation(line: 341, column: 11, scope: !947)
!950 = !DILocation(line: 342, column: 11, scope: !951)
!951 = distinct !DILexicalBlock(scope: !947, file: !3, line: 342, column: 11)
!952 = !DILocation(line: 342, column: 15, scope: !951)
!953 = !DILocation(line: 342, column: 11, scope: !947)
!954 = !DILocation(line: 344, column: 24, scope: !955)
!955 = distinct !DILexicalBlock(scope: !951, file: !3, line: 343, column: 9)
!956 = !DILocation(line: 345, column: 18, scope: !955)
!957 = !DILocation(line: 344, column: 11, scope: !955)
!958 = !DILocation(line: 346, column: 14, scope: !955)
!959 = !DILocation(line: 347, column: 9, scope: !955)
!960 = !DILocation(line: 348, column: 5, scope: !947)
!961 = !DILocalVariable(name: "s", scope: !936, file: !3, line: 350, type: !6)
!962 = !DILocation(line: 350, column: 9, scope: !936)
!963 = !DILocation(line: 350, column: 13, scope: !936)
!964 = !DILocation(line: 350, column: 19, scope: !936)
!965 = !DILocation(line: 350, column: 24, scope: !936)
!966 = !DILocation(line: 350, column: 34, scope: !936)
!967 = !DILocation(line: 351, column: 3, scope: !936)
!968 = !DILocation(line: 352, column: 1, scope: !936)
!969 = !DILocalVariable(name: "uid", arg: 1, scope: !970, file: !3, line: 335, type: !12)
!970 = distinct !DISubprogram(name: "print_user", scope: !3, file: !3, line: 335, type: !937, scopeLine: 336, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !971, retainedNodes: !4)
!971 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !972, nameTableKind: None)
!972 = !{!973, !975, !977, !979, !981, !991, !993, !995, !997, !999, !1001, !1003, !1005, !1007, !1009, !1011, !1014}
!973 = !DIGlobalVariableExpression(var: !974, expr: !DIExpression())
!974 = distinct !DIGlobalVariable(name: "ruid", scope: !971, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!975 = !DIGlobalVariableExpression(var: !976, expr: !DIExpression())
!976 = distinct !DIGlobalVariable(name: "euid", scope: !971, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!977 = !DIGlobalVariableExpression(var: !978, expr: !DIExpression())
!978 = distinct !DIGlobalVariable(name: "rgid", scope: !971, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!979 = !DIGlobalVariableExpression(var: !980, expr: !DIExpression())
!980 = distinct !DIGlobalVariable(name: "egid", scope: !971, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!981 = !DIGlobalVariableExpression(var: !982, expr: !DIExpression())
!982 = distinct !DIGlobalVariable(name: "longopts", scope: !971, file: !3, line: 75, type: !983, isLocal: true, isDefinition: true)
!983 = !DICompositeType(tag: DW_TAG_array_type, baseType: !984, size: 2560, elements: !76)
!984 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !985)
!985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !986)
!986 = !{!987, !988, !989, !990}
!987 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !985, file: !66, line: 52, baseType: !69, size: 64)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !985, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !985, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !985, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!991 = !DIGlobalVariableExpression(var: !992, expr: !DIExpression())
!992 = distinct !DIGlobalVariable(name: "just_context", scope: !971, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!993 = !DIGlobalVariableExpression(var: !994, expr: !DIExpression())
!994 = distinct !DIGlobalVariable(name: "just_group", scope: !971, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!995 = !DIGlobalVariableExpression(var: !996, expr: !DIExpression())
!996 = distinct !DIGlobalVariable(name: "use_name", scope: !971, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!997 = !DIGlobalVariableExpression(var: !998, expr: !DIExpression())
!998 = distinct !DIGlobalVariable(name: "use_real", scope: !971, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!999 = !DIGlobalVariableExpression(var: !1000, expr: !DIExpression())
!1000 = distinct !DIGlobalVariable(name: "just_user", scope: !971, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!1001 = !DIGlobalVariableExpression(var: !1002, expr: !DIExpression())
!1002 = distinct !DIGlobalVariable(name: "opt_zero", scope: !971, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!1003 = !DIGlobalVariableExpression(var: !1004, expr: !DIExpression())
!1004 = distinct !DIGlobalVariable(name: "just_group_list", scope: !971, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!1005 = !DIGlobalVariableExpression(var: !1006, expr: !DIExpression())
!1006 = distinct !DIGlobalVariable(name: "context", scope: !971, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!1007 = !DIGlobalVariableExpression(var: !1008, expr: !DIExpression())
!1008 = distinct !DIGlobalVariable(name: "multiple_users", scope: !971, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!1009 = !DIGlobalVariableExpression(var: !1010, expr: !DIExpression())
!1010 = distinct !DIGlobalVariable(name: "ok", scope: !971, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!1011 = !DIGlobalVariableExpression(var: !1012, expr: !DIExpression())
!1012 = distinct !DIGlobalVariable(name: "buf", scope: !1013, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!1013 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !971, retainedNodes: !4)
!1014 = !DIGlobalVariableExpression(var: !1015, expr: !DIExpression())
!1015 = distinct !DIGlobalVariable(name: "buf", scope: !1016, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!1016 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !971, retainedNodes: !4)
!1017 = !DILocalVariable(name: "pwd", scope: !970, file: !3, line: 337, type: !1018)
!1018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1019, size: 64)
!1019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !1020)
!1020 = !{!1021, !1022, !1023, !1024, !1025, !1026, !1027}
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1019, file: !611, line: 51, baseType: !6, size: 64)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1019, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1019, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1019, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1019, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1019, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1019, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!1028 = distinct !DISubprogram(name: "print_full_info", scope: !3, file: !3, line: 357, type: !295, scopeLine: 358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1029 = !DILocalVariable(name: "username", arg: 1, scope: !1028, file: !3, line: 357, type: !69)
!1030 = !DILocation(line: 357, column: 30, scope: !1028)
!1031 = !DILocalVariable(name: "pwd", scope: !1028, file: !3, line: 359, type: !609)
!1032 = !DILocation(line: 359, column: 18, scope: !1028)
!1033 = !DILocalVariable(name: "grp", scope: !1028, file: !3, line: 360, type: !1034)
!1034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1035, size: 64)
!1035 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !1037)
!1036 = !DIFile(filename: "/usr/include/grp.h", directory: "")
!1037 = !{!1038, !1039, !1040, !1041}
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !1035, file: !1036, line: 44, baseType: !6, size: 64)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !1035, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !1035, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !1035, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!1042 = !DILocation(line: 360, column: 17, scope: !1028)
!1043 = !DILocation(line: 362, column: 11, scope: !1028)
!1044 = !DILocation(line: 362, column: 24, scope: !1028)
!1045 = !DILocation(line: 362, column: 3, scope: !1028)
!1046 = !DILocation(line: 363, column: 19, scope: !1028)
!1047 = !DILocation(line: 363, column: 9, scope: !1028)
!1048 = !DILocation(line: 363, column: 7, scope: !1028)
!1049 = !DILocation(line: 364, column: 7, scope: !1050)
!1050 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 364, column: 7)
!1051 = !DILocation(line: 364, column: 7, scope: !1028)
!1052 = !DILocation(line: 365, column: 21, scope: !1050)
!1053 = !DILocation(line: 365, column: 26, scope: !1050)
!1054 = !DILocation(line: 365, column: 5, scope: !1050)
!1055 = !DILocation(line: 367, column: 11, scope: !1028)
!1056 = !DILocation(line: 367, column: 25, scope: !1028)
!1057 = !DILocation(line: 367, column: 3, scope: !1028)
!1058 = !DILocation(line: 368, column: 19, scope: !1028)
!1059 = !DILocation(line: 368, column: 9, scope: !1028)
!1060 = !DILocation(line: 368, column: 7, scope: !1028)
!1061 = !DILocation(line: 369, column: 7, scope: !1062)
!1062 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 369, column: 7)
!1063 = !DILocation(line: 369, column: 7, scope: !1028)
!1064 = !DILocation(line: 370, column: 21, scope: !1062)
!1065 = !DILocation(line: 370, column: 26, scope: !1062)
!1066 = !DILocation(line: 370, column: 5, scope: !1062)
!1067 = !DILocation(line: 372, column: 7, scope: !1068)
!1068 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 372, column: 7)
!1069 = !DILocation(line: 372, column: 15, scope: !1068)
!1070 = !DILocation(line: 372, column: 12, scope: !1068)
!1071 = !DILocation(line: 372, column: 7, scope: !1028)
!1072 = !DILocation(line: 374, column: 15, scope: !1073)
!1073 = distinct !DILexicalBlock(scope: !1068, file: !3, line: 373, column: 5)
!1074 = !DILocation(line: 374, column: 30, scope: !1073)
!1075 = !DILocation(line: 374, column: 7, scope: !1073)
!1076 = !DILocation(line: 375, column: 23, scope: !1073)
!1077 = !DILocation(line: 375, column: 13, scope: !1073)
!1078 = !DILocation(line: 375, column: 11, scope: !1073)
!1079 = !DILocation(line: 376, column: 11, scope: !1080)
!1080 = distinct !DILexicalBlock(scope: !1073, file: !3, line: 376, column: 11)
!1081 = !DILocation(line: 376, column: 11, scope: !1073)
!1082 = !DILocation(line: 377, column: 25, scope: !1080)
!1083 = !DILocation(line: 377, column: 30, scope: !1080)
!1084 = !DILocation(line: 377, column: 9, scope: !1080)
!1085 = !DILocation(line: 378, column: 5, scope: !1073)
!1086 = !DILocation(line: 380, column: 7, scope: !1087)
!1087 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 380, column: 7)
!1088 = !DILocation(line: 380, column: 15, scope: !1087)
!1089 = !DILocation(line: 380, column: 12, scope: !1087)
!1090 = !DILocation(line: 380, column: 7, scope: !1028)
!1091 = !DILocation(line: 382, column: 15, scope: !1092)
!1092 = distinct !DILexicalBlock(scope: !1087, file: !3, line: 381, column: 5)
!1093 = !DILocation(line: 382, column: 30, scope: !1092)
!1094 = !DILocation(line: 382, column: 7, scope: !1092)
!1095 = !DILocation(line: 383, column: 23, scope: !1092)
!1096 = !DILocation(line: 383, column: 13, scope: !1092)
!1097 = !DILocation(line: 383, column: 11, scope: !1092)
!1098 = !DILocation(line: 384, column: 11, scope: !1099)
!1099 = distinct !DILexicalBlock(scope: !1092, file: !3, line: 384, column: 11)
!1100 = !DILocation(line: 384, column: 11, scope: !1092)
!1101 = !DILocation(line: 385, column: 25, scope: !1099)
!1102 = !DILocation(line: 385, column: 30, scope: !1099)
!1103 = !DILocation(line: 385, column: 9, scope: !1099)
!1104 = !DILocation(line: 386, column: 5, scope: !1092)
!1105 = !DILocalVariable(name: "groups", scope: !1106, file: !3, line: 389, type: !183)
!1106 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 388, column: 3)
!1107 = !DILocation(line: 389, column: 12, scope: !1106)
!1108 = !DILocalVariable(name: "primary_group", scope: !1106, file: !3, line: 391, type: !21)
!1109 = !DILocation(line: 391, column: 11, scope: !1106)
!1110 = !DILocation(line: 392, column: 9, scope: !1111)
!1111 = distinct !DILexicalBlock(scope: !1106, file: !3, line: 392, column: 9)
!1112 = !DILocation(line: 392, column: 9, scope: !1106)
!1113 = !DILocation(line: 393, column: 23, scope: !1111)
!1114 = !DILocation(line: 393, column: 29, scope: !1111)
!1115 = !DILocation(line: 393, column: 34, scope: !1111)
!1116 = !DILocation(line: 393, column: 21, scope: !1111)
!1117 = !DILocation(line: 393, column: 7, scope: !1111)
!1118 = !DILocation(line: 395, column: 23, scope: !1111)
!1119 = !DILocation(line: 395, column: 21, scope: !1111)
!1120 = !DILocalVariable(name: "n_groups", scope: !1106, file: !3, line: 397, type: !72)
!1121 = !DILocation(line: 397, column: 9, scope: !1106)
!1122 = !DILocation(line: 397, column: 32, scope: !1106)
!1123 = !DILocation(line: 397, column: 42, scope: !1106)
!1124 = !DILocation(line: 397, column: 20, scope: !1106)
!1125 = !DILocation(line: 398, column: 9, scope: !1126)
!1126 = distinct !DILexicalBlock(scope: !1106, file: !3, line: 398, column: 9)
!1127 = !DILocation(line: 398, column: 18, scope: !1126)
!1128 = !DILocation(line: 398, column: 9, scope: !1106)
!1129 = !DILocation(line: 400, column: 13, scope: !1130)
!1130 = distinct !DILexicalBlock(scope: !1131, file: !3, line: 400, column: 13)
!1131 = distinct !DILexicalBlock(scope: !1126, file: !3, line: 399, column: 7)
!1132 = !DILocation(line: 400, column: 13, scope: !1131)
!1133 = !DILocation(line: 401, column: 21, scope: !1130)
!1134 = !DILocation(line: 401, column: 28, scope: !1130)
!1135 = !DILocation(line: 402, column: 25, scope: !1130)
!1136 = !DILocation(line: 402, column: 18, scope: !1130)
!1137 = !DILocation(line: 401, column: 11, scope: !1130)
!1138 = !DILocation(line: 404, column: 21, scope: !1130)
!1139 = !DILocation(line: 404, column: 28, scope: !1130)
!1140 = !DILocation(line: 404, column: 11, scope: !1130)
!1141 = !DILocation(line: 405, column: 12, scope: !1131)
!1142 = !DILocation(line: 406, column: 9, scope: !1131)
!1143 = !DILocation(line: 409, column: 9, scope: !1144)
!1144 = distinct !DILexicalBlock(scope: !1106, file: !3, line: 409, column: 9)
!1145 = !DILocation(line: 409, column: 18, scope: !1144)
!1146 = !DILocation(line: 409, column: 9, scope: !1106)
!1147 = !DILocation(line: 410, column: 7, scope: !1144)
!1148 = !DILocalVariable(name: "i", scope: !1149, file: !3, line: 411, type: !72)
!1149 = distinct !DILexicalBlock(scope: !1106, file: !3, line: 411, column: 5)
!1150 = !DILocation(line: 411, column: 14, scope: !1149)
!1151 = !DILocation(line: 411, column: 10, scope: !1149)
!1152 = !DILocation(line: 411, column: 21, scope: !1153)
!1153 = distinct !DILexicalBlock(scope: !1149, file: !3, line: 411, column: 5)
!1154 = !DILocation(line: 411, column: 25, scope: !1153)
!1155 = !DILocation(line: 411, column: 23, scope: !1153)
!1156 = !DILocation(line: 411, column: 5, scope: !1149)
!1157 = !DILocation(line: 413, column: 13, scope: !1158)
!1158 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 413, column: 13)
!1159 = distinct !DILexicalBlock(scope: !1153, file: !3, line: 412, column: 7)
!1160 = !DILocation(line: 413, column: 15, scope: !1158)
!1161 = !DILocation(line: 413, column: 13, scope: !1159)
!1162 = !DILocation(line: 414, column: 11, scope: !1158)
!1163 = !DILocation(line: 415, column: 9, scope: !1159)
!1164 = !DILocation(line: 416, column: 25, scope: !1159)
!1165 = !DILocation(line: 416, column: 32, scope: !1159)
!1166 = !DILocation(line: 416, column: 15, scope: !1159)
!1167 = !DILocation(line: 416, column: 13, scope: !1159)
!1168 = !DILocation(line: 417, column: 13, scope: !1169)
!1169 = distinct !DILexicalBlock(scope: !1159, file: !3, line: 417, column: 13)
!1170 = !DILocation(line: 417, column: 13, scope: !1159)
!1171 = !DILocation(line: 418, column: 27, scope: !1169)
!1172 = !DILocation(line: 418, column: 32, scope: !1169)
!1173 = !DILocation(line: 418, column: 11, scope: !1169)
!1174 = !DILocation(line: 419, column: 7, scope: !1159)
!1175 = !DILocation(line: 411, column: 36, scope: !1153)
!1176 = !DILocation(line: 411, column: 5, scope: !1153)
!1177 = distinct !{!1177, !1156, !1178}
!1178 = !DILocation(line: 419, column: 7, scope: !1149)
!1179 = !DILocation(line: 420, column: 11, scope: !1106)
!1180 = !DILocation(line: 420, column: 5, scope: !1106)
!1181 = !DILocation(line: 425, column: 7, scope: !1182)
!1182 = distinct !DILexicalBlock(scope: !1028, file: !3, line: 425, column: 7)
!1183 = !DILocation(line: 425, column: 7, scope: !1028)
!1184 = !DILocation(line: 426, column: 13, scope: !1182)
!1185 = !DILocation(line: 426, column: 31, scope: !1182)
!1186 = !DILocation(line: 426, column: 5, scope: !1182)
!1187 = !DILocation(line: 427, column: 1, scope: !1028)
!1188 = !DILocalVariable(name: "uid", arg: 1, scope: !48, file: !3, line: 325, type: !51)
!1189 = !DILocation(line: 325, column: 28, scope: !48)
!1190 = !DILocation(line: 328, column: 22, scope: !48)
!1191 = !DILocation(line: 328, column: 21, scope: !48)
!1192 = !DILocation(line: 328, column: 10, scope: !48)
!1193 = !DILocation(line: 328, column: 3, scope: !48)
!1194 = !DILocalVariable(name: "uid", arg: 1, scope: !1195, file: !3, line: 325, type: !51)
!1195 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1196, retainedNodes: !4)
!1196 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1197, nameTableKind: None)
!1197 = !{!1198, !1200, !1202, !1204, !1206, !1216, !1218, !1220, !1222, !1224, !1226, !1228, !1230, !1232, !1234, !1236, !1238}
!1198 = !DIGlobalVariableExpression(var: !1199, expr: !DIExpression())
!1199 = distinct !DIGlobalVariable(name: "ruid", scope: !1196, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1200 = !DIGlobalVariableExpression(var: !1201, expr: !DIExpression())
!1201 = distinct !DIGlobalVariable(name: "euid", scope: !1196, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1202 = !DIGlobalVariableExpression(var: !1203, expr: !DIExpression())
!1203 = distinct !DIGlobalVariable(name: "rgid", scope: !1196, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1204 = !DIGlobalVariableExpression(var: !1205, expr: !DIExpression())
!1205 = distinct !DIGlobalVariable(name: "egid", scope: !1196, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1206 = !DIGlobalVariableExpression(var: !1207, expr: !DIExpression())
!1207 = distinct !DIGlobalVariable(name: "longopts", scope: !1196, file: !3, line: 75, type: !1208, isLocal: true, isDefinition: true)
!1208 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1209, size: 2560, elements: !76)
!1209 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1210)
!1210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !1211)
!1211 = !{!1212, !1213, !1214, !1215}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1210, file: !66, line: 52, baseType: !69, size: 64)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1210, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1210, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1210, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!1216 = !DIGlobalVariableExpression(var: !1217, expr: !DIExpression())
!1217 = distinct !DIGlobalVariable(name: "just_context", scope: !1196, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!1218 = !DIGlobalVariableExpression(var: !1219, expr: !DIExpression())
!1219 = distinct !DIGlobalVariable(name: "just_group", scope: !1196, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!1220 = !DIGlobalVariableExpression(var: !1221, expr: !DIExpression())
!1221 = distinct !DIGlobalVariable(name: "use_name", scope: !1196, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!1222 = !DIGlobalVariableExpression(var: !1223, expr: !DIExpression())
!1223 = distinct !DIGlobalVariable(name: "use_real", scope: !1196, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!1224 = !DIGlobalVariableExpression(var: !1225, expr: !DIExpression())
!1225 = distinct !DIGlobalVariable(name: "just_user", scope: !1196, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!1226 = !DIGlobalVariableExpression(var: !1227, expr: !DIExpression())
!1227 = distinct !DIGlobalVariable(name: "opt_zero", scope: !1196, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!1228 = !DIGlobalVariableExpression(var: !1229, expr: !DIExpression())
!1229 = distinct !DIGlobalVariable(name: "just_group_list", scope: !1196, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!1230 = !DIGlobalVariableExpression(var: !1231, expr: !DIExpression())
!1231 = distinct !DIGlobalVariable(name: "context", scope: !1196, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!1232 = !DIGlobalVariableExpression(var: !1233, expr: !DIExpression())
!1233 = distinct !DIGlobalVariable(name: "multiple_users", scope: !1196, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!1234 = !DIGlobalVariableExpression(var: !1235, expr: !DIExpression())
!1235 = distinct !DIGlobalVariable(name: "ok", scope: !1196, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!1236 = !DIGlobalVariableExpression(var: !1237, expr: !DIExpression())
!1237 = distinct !DIGlobalVariable(name: "buf", scope: !1195, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!1238 = !DIGlobalVariableExpression(var: !1239, expr: !DIExpression())
!1239 = distinct !DIGlobalVariable(name: "buf", scope: !1240, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!1240 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1196, retainedNodes: !4)
!1241 = !DILocalVariable(name: "gid", arg: 1, scope: !58, file: !3, line: 314, type: !61)
!1242 = !DILocation(line: 314, column: 28, scope: !58)
!1243 = !DILocation(line: 317, column: 22, scope: !58)
!1244 = !DILocation(line: 317, column: 21, scope: !58)
!1245 = !DILocation(line: 317, column: 10, scope: !58)
!1246 = !DILocation(line: 317, column: 3, scope: !58)
!1247 = !DILocalVariable(name: "gid", arg: 1, scope: !1248, file: !3, line: 314, type: !61)
!1248 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !3, file: !3, line: 314, type: !59, scopeLine: 315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1249, retainedNodes: !4)
!1249 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1250, nameTableKind: None)
!1250 = !{!1251, !1253, !1255, !1257, !1259, !1269, !1271, !1273, !1275, !1277, !1279, !1281, !1283, !1285, !1287, !1289, !1292}
!1251 = !DIGlobalVariableExpression(var: !1252, expr: !DIExpression())
!1252 = distinct !DIGlobalVariable(name: "ruid", scope: !1249, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1253 = !DIGlobalVariableExpression(var: !1254, expr: !DIExpression())
!1254 = distinct !DIGlobalVariable(name: "euid", scope: !1249, file: !3, line: 64, type: !12, isLocal: true, isDefinition: true)
!1255 = !DIGlobalVariableExpression(var: !1256, expr: !DIExpression())
!1256 = distinct !DIGlobalVariable(name: "rgid", scope: !1249, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1257 = !DIGlobalVariableExpression(var: !1258, expr: !DIExpression())
!1258 = distinct !DIGlobalVariable(name: "egid", scope: !1249, file: !3, line: 65, type: !21, isLocal: true, isDefinition: true)
!1259 = !DIGlobalVariableExpression(var: !1260, expr: !DIExpression())
!1260 = distinct !DIGlobalVariable(name: "longopts", scope: !1249, file: !3, line: 75, type: !1261, isLocal: true, isDefinition: true)
!1261 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1262, size: 2560, elements: !76)
!1262 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1263)
!1263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !66, line: 50, size: 256, elements: !1264)
!1264 = !{!1265, !1266, !1267, !1268}
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1263, file: !66, line: 52, baseType: !69, size: 64)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1263, file: !66, line: 55, baseType: !72, size: 32, offset: 64)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1263, file: !66, line: 56, baseType: !74, size: 64, offset: 128)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1263, file: !66, line: 57, baseType: !72, size: 32, offset: 192)
!1269 = !DIGlobalVariableExpression(var: !1270, expr: !DIExpression())
!1270 = distinct !DIGlobalVariable(name: "just_context", scope: !1249, file: !3, line: 45, type: !27, isLocal: true, isDefinition: true)
!1271 = !DIGlobalVariableExpression(var: !1272, expr: !DIExpression())
!1272 = distinct !DIGlobalVariable(name: "just_group", scope: !1249, file: !3, line: 51, type: !27, isLocal: true, isDefinition: true)
!1273 = !DIGlobalVariableExpression(var: !1274, expr: !DIExpression())
!1274 = distinct !DIGlobalVariable(name: "use_name", scope: !1249, file: !3, line: 61, type: !27, isLocal: true, isDefinition: true)
!1275 = !DIGlobalVariableExpression(var: !1276, expr: !DIExpression())
!1276 = distinct !DIGlobalVariable(name: "use_real", scope: !1249, file: !3, line: 53, type: !27, isLocal: true, isDefinition: true)
!1277 = !DIGlobalVariableExpression(var: !1278, expr: !DIExpression())
!1278 = distinct !DIGlobalVariable(name: "just_user", scope: !1249, file: !3, line: 55, type: !27, isLocal: true, isDefinition: true)
!1279 = !DIGlobalVariableExpression(var: !1280, expr: !DIExpression())
!1280 = distinct !DIGlobalVariable(name: "opt_zero", scope: !1249, file: !3, line: 47, type: !27, isLocal: true, isDefinition: true)
!1281 = !DIGlobalVariableExpression(var: !1282, expr: !DIExpression())
!1282 = distinct !DIGlobalVariable(name: "just_group_list", scope: !1249, file: !3, line: 49, type: !27, isLocal: true, isDefinition: true)
!1283 = !DIGlobalVariableExpression(var: !1284, expr: !DIExpression())
!1284 = distinct !DIGlobalVariable(name: "context", scope: !1249, file: !3, line: 69, type: !6, isLocal: true, isDefinition: true)
!1285 = !DIGlobalVariableExpression(var: !1286, expr: !DIExpression())
!1286 = distinct !DIGlobalVariable(name: "multiple_users", scope: !1249, file: !3, line: 59, type: !27, isLocal: true, isDefinition: true)
!1287 = !DIGlobalVariableExpression(var: !1288, expr: !DIExpression())
!1288 = distinct !DIGlobalVariable(name: "ok", scope: !1249, file: !3, line: 57, type: !27, isLocal: true, isDefinition: true)
!1289 = !DIGlobalVariableExpression(var: !1290, expr: !DIExpression())
!1290 = distinct !DIGlobalVariable(name: "buf", scope: !1291, file: !3, line: 327, type: !53, isLocal: true, isDefinition: true)
!1291 = distinct !DISubprogram(name: "uidtostr_ptr", scope: !3, file: !3, line: 325, type: !49, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1249, retainedNodes: !4)
!1292 = !DIGlobalVariableExpression(var: !1293, expr: !DIExpression())
!1293 = distinct !DIGlobalVariable(name: "buf", scope: !1248, file: !3, line: 316, type: !53, isLocal: true, isDefinition: true)
!1294 = distinct !DISubprogram(name: "print_group_list", scope: !81, file: !81, line: 36, type: !1295, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !82, retainedNodes: !4)
!1295 = !DISubroutineType(types: !1296)
!1296 = !{!27, !69, !12, !21, !21, !27, !7}
!1297 = !DILocalVariable(name: "username", arg: 1, scope: !1294, file: !81, line: 36, type: !69)
!1298 = !DILocation(line: 36, column: 31, scope: !1294)
!1299 = !DILocalVariable(name: "ruid", arg: 2, scope: !1294, file: !81, line: 37, type: !12)
!1300 = !DILocation(line: 37, column: 25, scope: !1294)
!1301 = !DILocalVariable(name: "rgid", arg: 3, scope: !1294, file: !81, line: 37, type: !21)
!1302 = !DILocation(line: 37, column: 37, scope: !1294)
!1303 = !DILocalVariable(name: "egid", arg: 4, scope: !1294, file: !81, line: 37, type: !21)
!1304 = !DILocation(line: 37, column: 49, scope: !1294)
!1305 = !DILocalVariable(name: "use_names", arg: 5, scope: !1294, file: !81, line: 38, type: !27)
!1306 = !DILocation(line: 38, column: 24, scope: !1294)
!1307 = !DILocalVariable(name: "delim", arg: 6, scope: !1294, file: !81, line: 38, type: !7)
!1308 = !DILocation(line: 38, column: 40, scope: !1294)
!1309 = !DILocalVariable(name: "ok", scope: !1294, file: !81, line: 40, type: !27)
!1310 = !DILocation(line: 40, column: 8, scope: !1294)
!1311 = !DILocalVariable(name: "pwd", scope: !1294, file: !81, line: 41, type: !1312)
!1312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1313, size: 64)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !1314)
!1314 = !{!1315, !1316, !1317, !1318, !1319, !1320, !1321}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1313, file: !611, line: 51, baseType: !6, size: 64)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1313, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1313, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1313, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1313, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1313, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1313, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!1322 = !DILocation(line: 41, column: 18, scope: !1294)
!1323 = !DILocation(line: 43, column: 7, scope: !1324)
!1324 = distinct !DILexicalBlock(scope: !1294, file: !81, line: 43, column: 7)
!1325 = !DILocation(line: 43, column: 7, scope: !1294)
!1326 = !DILocation(line: 45, column: 23, scope: !1327)
!1327 = distinct !DILexicalBlock(scope: !1324, file: !81, line: 44, column: 5)
!1328 = !DILocation(line: 45, column: 13, scope: !1327)
!1329 = !DILocation(line: 45, column: 11, scope: !1327)
!1330 = !DILocation(line: 46, column: 11, scope: !1331)
!1331 = distinct !DILexicalBlock(scope: !1327, file: !81, line: 46, column: 11)
!1332 = !DILocation(line: 46, column: 15, scope: !1331)
!1333 = !DILocation(line: 46, column: 11, scope: !1327)
!1334 = !DILocation(line: 47, column: 12, scope: !1331)
!1335 = !DILocation(line: 47, column: 9, scope: !1331)
!1336 = !DILocation(line: 48, column: 5, scope: !1327)
!1337 = !DILocation(line: 50, column: 21, scope: !1338)
!1338 = distinct !DILexicalBlock(scope: !1294, file: !81, line: 50, column: 7)
!1339 = !DILocation(line: 50, column: 27, scope: !1338)
!1340 = !DILocation(line: 50, column: 8, scope: !1338)
!1341 = !DILocation(line: 50, column: 7, scope: !1294)
!1342 = !DILocation(line: 51, column: 8, scope: !1338)
!1343 = !DILocation(line: 51, column: 5, scope: !1338)
!1344 = !DILocation(line: 53, column: 7, scope: !1345)
!1345 = distinct !DILexicalBlock(scope: !1294, file: !81, line: 53, column: 7)
!1346 = !DILocation(line: 53, column: 15, scope: !1345)
!1347 = !DILocation(line: 53, column: 12, scope: !1345)
!1348 = !DILocation(line: 53, column: 7, scope: !1294)
!1349 = !DILocation(line: 55, column: 7, scope: !1350)
!1350 = distinct !DILexicalBlock(scope: !1345, file: !81, line: 54, column: 5)
!1351 = !DILocation(line: 56, column: 25, scope: !1352)
!1352 = distinct !DILexicalBlock(scope: !1350, file: !81, line: 56, column: 11)
!1353 = !DILocation(line: 56, column: 31, scope: !1352)
!1354 = !DILocation(line: 56, column: 12, scope: !1352)
!1355 = !DILocation(line: 56, column: 11, scope: !1350)
!1356 = !DILocation(line: 57, column: 12, scope: !1352)
!1357 = !DILocation(line: 57, column: 9, scope: !1352)
!1358 = !DILocation(line: 58, column: 5, scope: !1350)
!1359 = !DILocalVariable(name: "groups", scope: !1360, file: !81, line: 61, type: !183)
!1360 = distinct !DILexicalBlock(scope: !1294, file: !81, line: 60, column: 3)
!1361 = !DILocation(line: 61, column: 12, scope: !1360)
!1362 = !DILocalVariable(name: "n_groups", scope: !1360, file: !81, line: 63, type: !72)
!1363 = !DILocation(line: 63, column: 9, scope: !1360)
!1364 = !DILocation(line: 63, column: 32, scope: !1360)
!1365 = !DILocation(line: 63, column: 43, scope: !1360)
!1366 = !DILocation(line: 63, column: 49, scope: !1360)
!1367 = !DILocation(line: 63, column: 54, scope: !1360)
!1368 = !DILocation(line: 63, column: 63, scope: !1360)
!1369 = !DILocation(line: 63, column: 20, scope: !1360)
!1370 = !DILocation(line: 64, column: 9, scope: !1371)
!1371 = distinct !DILexicalBlock(scope: !1360, file: !81, line: 64, column: 9)
!1372 = !DILocation(line: 64, column: 18, scope: !1371)
!1373 = !DILocation(line: 64, column: 9, scope: !1360)
!1374 = !DILocation(line: 66, column: 13, scope: !1375)
!1375 = distinct !DILexicalBlock(scope: !1376, file: !81, line: 66, column: 13)
!1376 = distinct !DILexicalBlock(scope: !1371, file: !81, line: 65, column: 7)
!1377 = !DILocation(line: 66, column: 13, scope: !1376)
!1378 = !DILocation(line: 68, column: 23, scope: !1379)
!1379 = distinct !DILexicalBlock(scope: !1375, file: !81, line: 67, column: 11)
!1380 = !DILocation(line: 68, column: 30, scope: !1379)
!1381 = !DILocation(line: 69, column: 27, scope: !1379)
!1382 = !DILocation(line: 69, column: 20, scope: !1379)
!1383 = !DILocation(line: 68, column: 13, scope: !1379)
!1384 = !DILocation(line: 70, column: 11, scope: !1379)
!1385 = !DILocation(line: 73, column: 23, scope: !1386)
!1386 = distinct !DILexicalBlock(scope: !1375, file: !81, line: 72, column: 11)
!1387 = !DILocation(line: 73, column: 30, scope: !1386)
!1388 = !DILocation(line: 73, column: 13, scope: !1386)
!1389 = !DILocation(line: 75, column: 9, scope: !1376)
!1390 = !DILocalVariable(name: "i", scope: !1391, file: !81, line: 78, type: !72)
!1391 = distinct !DILexicalBlock(scope: !1360, file: !81, line: 78, column: 5)
!1392 = !DILocation(line: 78, column: 14, scope: !1391)
!1393 = !DILocation(line: 78, column: 10, scope: !1391)
!1394 = !DILocation(line: 78, column: 21, scope: !1395)
!1395 = distinct !DILexicalBlock(scope: !1391, file: !81, line: 78, column: 5)
!1396 = !DILocation(line: 78, column: 25, scope: !1395)
!1397 = !DILocation(line: 78, column: 23, scope: !1395)
!1398 = !DILocation(line: 78, column: 5, scope: !1391)
!1399 = !DILocation(line: 79, column: 11, scope: !1400)
!1400 = distinct !DILexicalBlock(scope: !1395, file: !81, line: 79, column: 11)
!1401 = !DILocation(line: 79, column: 18, scope: !1400)
!1402 = !DILocation(line: 79, column: 24, scope: !1400)
!1403 = !DILocation(line: 79, column: 21, scope: !1400)
!1404 = !DILocation(line: 79, column: 29, scope: !1400)
!1405 = !DILocation(line: 79, column: 32, scope: !1400)
!1406 = !DILocation(line: 79, column: 39, scope: !1400)
!1407 = !DILocation(line: 79, column: 45, scope: !1400)
!1408 = !DILocation(line: 79, column: 42, scope: !1400)
!1409 = !DILocation(line: 79, column: 11, scope: !1395)
!1410 = !DILocation(line: 81, column: 11, scope: !1411)
!1411 = distinct !DILexicalBlock(scope: !1400, file: !81, line: 80, column: 9)
!1412 = !DILocation(line: 82, column: 29, scope: !1413)
!1413 = distinct !DILexicalBlock(scope: !1411, file: !81, line: 82, column: 15)
!1414 = !DILocation(line: 82, column: 36, scope: !1413)
!1415 = !DILocation(line: 82, column: 40, scope: !1413)
!1416 = !DILocation(line: 82, column: 16, scope: !1413)
!1417 = !DILocation(line: 82, column: 15, scope: !1411)
!1418 = !DILocation(line: 83, column: 16, scope: !1413)
!1419 = !DILocation(line: 83, column: 13, scope: !1413)
!1420 = !DILocation(line: 84, column: 9, scope: !1411)
!1421 = !DILocation(line: 78, column: 36, scope: !1395)
!1422 = !DILocation(line: 78, column: 5, scope: !1395)
!1423 = distinct !{!1423, !1398, !1424}
!1424 = !DILocation(line: 84, column: 9, scope: !1391)
!1425 = !DILocation(line: 85, column: 11, scope: !1360)
!1426 = !DILocation(line: 85, column: 5, scope: !1360)
!1427 = !DILocation(line: 87, column: 10, scope: !1294)
!1428 = !DILocation(line: 87, column: 3, scope: !1294)
!1429 = !DILocation(line: 88, column: 1, scope: !1294)
!1430 = !DILocalVariable(name: "username", arg: 1, scope: !1431, file: !81, line: 36, type: !69)
!1431 = distinct !DISubprogram(name: "print_group_list", scope: !81, file: !81, line: 36, type: !1295, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1432, retainedNodes: !4)
!1432 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !1433, nameTableKind: None)
!1433 = !{!1434}
!1434 = !DIGlobalVariableExpression(var: !1435, expr: !DIExpression())
!1435 = distinct !DIGlobalVariable(name: "buf", scope: !1436, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!1436 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1432, retainedNodes: !4)
!1437 = !DILocalVariable(name: "ruid", arg: 2, scope: !1431, file: !81, line: 37, type: !12)
!1438 = !DILocalVariable(name: "rgid", arg: 3, scope: !1431, file: !81, line: 37, type: !21)
!1439 = !DILocalVariable(name: "egid", arg: 4, scope: !1431, file: !81, line: 37, type: !21)
!1440 = !DILocalVariable(name: "use_names", arg: 5, scope: !1431, file: !81, line: 38, type: !27)
!1441 = !DILocalVariable(name: "delim", arg: 6, scope: !1431, file: !81, line: 38, type: !7)
!1442 = !DILocalVariable(name: "ok", scope: !1431, file: !81, line: 40, type: !27)
!1443 = !DILocalVariable(name: "pwd", scope: !1431, file: !81, line: 41, type: !1444)
!1444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1445, size: 64)
!1445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !1446)
!1446 = !{!1447, !1448, !1449, !1450, !1451, !1452, !1453}
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !1445, file: !611, line: 51, baseType: !6, size: 64)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !1445, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !1445, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !1445, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !1445, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !1445, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !1445, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!1454 = distinct !DISubprogram(name: "print_group", scope: !81, file: !81, line: 103, type: !1455, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !82, retainedNodes: !4)
!1455 = !DISubroutineType(types: !1456)
!1456 = !{!27, !21, !27}
!1457 = !DILocalVariable(name: "gid", arg: 1, scope: !1454, file: !81, line: 103, type: !21)
!1458 = !DILocation(line: 103, column: 20, scope: !1454)
!1459 = !DILocalVariable(name: "use_name", arg: 2, scope: !1454, file: !81, line: 103, type: !27)
!1460 = !DILocation(line: 103, column: 30, scope: !1454)
!1461 = !DILocalVariable(name: "grp", scope: !1454, file: !81, line: 105, type: !1462)
!1462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1463, size: 64)
!1463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !1464)
!1464 = !{!1465, !1466, !1467, !1468}
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !1463, file: !1036, line: 44, baseType: !6, size: 64)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !1463, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !1463, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !1463, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!1469 = !DILocation(line: 105, column: 17, scope: !1454)
!1470 = !DILocalVariable(name: "ok", scope: !1454, file: !81, line: 106, type: !27)
!1471 = !DILocation(line: 106, column: 8, scope: !1454)
!1472 = !DILocation(line: 108, column: 7, scope: !1473)
!1473 = distinct !DILexicalBlock(scope: !1454, file: !81, line: 108, column: 7)
!1474 = !DILocation(line: 108, column: 7, scope: !1454)
!1475 = !DILocation(line: 110, column: 23, scope: !1476)
!1476 = distinct !DILexicalBlock(scope: !1473, file: !81, line: 109, column: 5)
!1477 = !DILocation(line: 110, column: 13, scope: !1476)
!1478 = !DILocation(line: 110, column: 11, scope: !1476)
!1479 = !DILocation(line: 111, column: 11, scope: !1480)
!1480 = distinct !DILexicalBlock(scope: !1476, file: !81, line: 111, column: 11)
!1481 = !DILocation(line: 111, column: 15, scope: !1480)
!1482 = !DILocation(line: 111, column: 11, scope: !1476)
!1483 = !DILocation(line: 113, column: 24, scope: !1484)
!1484 = distinct !DILexicalBlock(scope: !1480, file: !81, line: 112, column: 9)
!1485 = !DILocation(line: 114, column: 38, scope: !1484)
!1486 = !DILocation(line: 114, column: 18, scope: !1484)
!1487 = !DILocation(line: 113, column: 11, scope: !1484)
!1488 = !DILocation(line: 115, column: 14, scope: !1484)
!1489 = !DILocation(line: 116, column: 9, scope: !1484)
!1490 = !DILocation(line: 117, column: 5, scope: !1476)
!1491 = !DILocalVariable(name: "s", scope: !1454, file: !81, line: 119, type: !6)
!1492 = !DILocation(line: 119, column: 9, scope: !1454)
!1493 = !DILocation(line: 119, column: 13, scope: !1454)
!1494 = !DILocation(line: 119, column: 19, scope: !1454)
!1495 = !DILocation(line: 119, column: 24, scope: !1454)
!1496 = !DILocation(line: 119, column: 34, scope: !1454)
!1497 = !DILocation(line: 120, column: 3, scope: !1454)
!1498 = !DILocation(line: 121, column: 10, scope: !1454)
!1499 = !DILocation(line: 121, column: 3, scope: !1454)
!1500 = !DILocalVariable(name: "gid", arg: 1, scope: !80, file: !81, line: 94, type: !61)
!1501 = !DILocation(line: 94, column: 28, scope: !80)
!1502 = !DILocation(line: 97, column: 22, scope: !80)
!1503 = !DILocation(line: 97, column: 21, scope: !80)
!1504 = !DILocation(line: 97, column: 10, scope: !80)
!1505 = !DILocation(line: 97, column: 3, scope: !80)
!1506 = !DILocalVariable(name: "gid", arg: 1, scope: !1507, file: !81, line: 94, type: !61)
!1507 = distinct !DISubprogram(name: "gidtostr_ptr", scope: !81, file: !81, line: 94, type: !59, scopeLine: 95, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1508, retainedNodes: !4)
!1508 = distinct !DICompileUnit(language: DW_LANG_C99, file: !81, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !83, globals: !1509, nameTableKind: None)
!1509 = !{!1510}
!1510 = !DIGlobalVariableExpression(var: !1511, expr: !DIExpression())
!1511 = distinct !DIGlobalVariable(name: "buf", scope: !1507, file: !81, line: 96, type: !53, isLocal: true, isDefinition: true)
!1512 = distinct !DISubprogram(name: "close_stdout", scope: !98, file: !98, line: 117, type: !1513, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !93, retainedNodes: !4)
!1513 = !DISubroutineType(types: !1514)
!1514 = !{null}
!1515 = !DILocation(line: 119, column: 21, scope: !1516)
!1516 = distinct !DILexicalBlock(scope: !1512, file: !98, line: 119, column: 7)
!1517 = !DILocation(line: 119, column: 7, scope: !1516)
!1518 = !DILocation(line: 119, column: 29, scope: !1516)
!1519 = !DILocation(line: 120, column: 7, scope: !1516)
!1520 = !DILocation(line: 120, column: 12, scope: !1516)
!1521 = !DILocation(line: 120, column: 25, scope: !1516)
!1522 = !DILocation(line: 120, column: 28, scope: !1516)
!1523 = !DILocation(line: 120, column: 34, scope: !1516)
!1524 = !DILocation(line: 119, column: 7, scope: !1512)
!1525 = !DILocalVariable(name: "write_error", scope: !1526, file: !98, line: 122, type: !69)
!1526 = distinct !DILexicalBlock(scope: !1516, file: !98, line: 121, column: 5)
!1527 = !DILocation(line: 122, column: 19, scope: !1526)
!1528 = !DILocation(line: 122, column: 33, scope: !1526)
!1529 = !DILocation(line: 123, column: 11, scope: !1530)
!1530 = distinct !DILexicalBlock(scope: !1526, file: !98, line: 123, column: 11)
!1531 = !DILocation(line: 123, column: 11, scope: !1526)
!1532 = !DILocation(line: 124, column: 19, scope: !1530)
!1533 = !DILocation(line: 124, column: 52, scope: !1530)
!1534 = !DILocation(line: 124, column: 36, scope: !1530)
!1535 = !DILocation(line: 125, column: 16, scope: !1530)
!1536 = !DILocation(line: 124, column: 9, scope: !1530)
!1537 = !DILocation(line: 127, column: 19, scope: !1530)
!1538 = !DILocation(line: 127, column: 32, scope: !1530)
!1539 = !DILocation(line: 127, column: 9, scope: !1530)
!1540 = !DILocation(line: 129, column: 14, scope: !1526)
!1541 = !DILocation(line: 129, column: 7, scope: !1526)
!1542 = !DILocation(line: 134, column: 42, scope: !1543)
!1543 = distinct !DILexicalBlock(scope: !1512, file: !98, line: 134, column: 7)
!1544 = !DILocation(line: 134, column: 28, scope: !1543)
!1545 = !DILocation(line: 134, column: 50, scope: !1543)
!1546 = !DILocation(line: 134, column: 7, scope: !1512)
!1547 = !DILocation(line: 135, column: 12, scope: !1543)
!1548 = !DILocation(line: 135, column: 5, scope: !1543)
!1549 = !DILocation(line: 136, column: 1, scope: !1512)
!1550 = distinct !DISubprogram(name: "umaxtostr", scope: !1551, file: !1551, line: 36, type: !1552, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !202, retainedNodes: !4)
!1551 = !DIFile(filename: "./lib/anytostr.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!1552 = !DISubroutineType(types: !1553)
!1553 = !{!6, !205, !6}
!1554 = !DILocalVariable(name: "i", arg: 1, scope: !1550, file: !1551, line: 36, type: !205)
!1555 = !DILocation(line: 36, column: 19, scope: !1550)
!1556 = !DILocalVariable(name: "buf", arg: 2, scope: !1550, file: !1551, line: 36, type: !6)
!1557 = !DILocation(line: 36, column: 28, scope: !1550)
!1558 = !DILocalVariable(name: "p", scope: !1550, file: !1551, line: 38, type: !6)
!1559 = !DILocation(line: 38, column: 9, scope: !1550)
!1560 = !DILocation(line: 38, column: 13, scope: !1550)
!1561 = !DILocation(line: 38, column: 17, scope: !1550)
!1562 = !DILocation(line: 39, column: 4, scope: !1550)
!1563 = !DILocation(line: 39, column: 6, scope: !1550)
!1564 = !DILocation(line: 41, column: 7, scope: !1565)
!1565 = distinct !DILexicalBlock(scope: !1550, file: !1551, line: 41, column: 7)
!1566 = !DILocation(line: 41, column: 9, scope: !1565)
!1567 = !DILocation(line: 41, column: 7, scope: !1550)
!1568 = !DILocation(line: 43, column: 7, scope: !1569)
!1569 = distinct !DILexicalBlock(scope: !1565, file: !1551, line: 42, column: 5)
!1570 = !DILocation(line: 44, column: 22, scope: !1569)
!1571 = !DILocation(line: 44, column: 24, scope: !1569)
!1572 = !DILocation(line: 44, column: 20, scope: !1569)
!1573 = !DILocation(line: 44, column: 16, scope: !1569)
!1574 = !DILocation(line: 44, column: 10, scope: !1569)
!1575 = !DILocation(line: 44, column: 14, scope: !1569)
!1576 = !DILocation(line: 44, column: 9, scope: !1569)
!1577 = !DILocation(line: 45, column: 17, scope: !1569)
!1578 = !DILocation(line: 45, column: 24, scope: !1569)
!1579 = distinct !{!1579, !1568, !1580}
!1580 = !DILocation(line: 45, column: 28, scope: !1569)
!1581 = !DILocation(line: 47, column: 8, scope: !1569)
!1582 = !DILocation(line: 47, column: 12, scope: !1569)
!1583 = !DILocation(line: 48, column: 5, scope: !1569)
!1584 = !DILocation(line: 51, column: 7, scope: !1585)
!1585 = distinct !DILexicalBlock(scope: !1565, file: !1551, line: 50, column: 5)
!1586 = !DILocation(line: 52, column: 22, scope: !1585)
!1587 = !DILocation(line: 52, column: 24, scope: !1585)
!1588 = !DILocation(line: 52, column: 20, scope: !1585)
!1589 = !DILocation(line: 52, column: 16, scope: !1585)
!1590 = !DILocation(line: 52, column: 10, scope: !1585)
!1591 = !DILocation(line: 52, column: 14, scope: !1585)
!1592 = !DILocation(line: 52, column: 9, scope: !1585)
!1593 = !DILocation(line: 53, column: 17, scope: !1585)
!1594 = !DILocation(line: 53, column: 24, scope: !1585)
!1595 = distinct !{!1595, !1584, !1596}
!1596 = !DILocation(line: 53, column: 28, scope: !1585)
!1597 = !DILocation(line: 56, column: 10, scope: !1550)
!1598 = !DILocation(line: 56, column: 3, scope: !1550)
!1599 = !DILocalVariable(name: "i", arg: 1, scope: !1600, file: !1551, line: 36, type: !205)
!1600 = distinct !DISubprogram(name: "umaxtostr", scope: !1551, file: !1551, line: 36, type: !1552, scopeLine: 37, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1601, retainedNodes: !4)
!1601 = distinct !DICompileUnit(language: DW_LANG_C99, file: !203, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !204, nameTableKind: None)
!1602 = !DILocalVariable(name: "buf", arg: 2, scope: !1600, file: !1551, line: 36, type: !6)
!1603 = !DILocalVariable(name: "p", scope: !1600, file: !1551, line: 38, type: !6)
!1604 = distinct !DISubprogram(name: "set_program_name", scope: !112, file: !112, line: 39, type: !295, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !108, retainedNodes: !4)
!1605 = !DILocalVariable(name: "argv0", arg: 1, scope: !1604, file: !112, line: 39, type: !69)
!1606 = !DILocation(line: 39, column: 31, scope: !1604)
!1607 = !DILocalVariable(name: "slash", scope: !1604, file: !112, line: 46, type: !69)
!1608 = !DILocation(line: 46, column: 15, scope: !1604)
!1609 = !DILocalVariable(name: "base", scope: !1604, file: !112, line: 47, type: !69)
!1610 = !DILocation(line: 47, column: 15, scope: !1604)
!1611 = !DILocation(line: 51, column: 7, scope: !1612)
!1612 = distinct !DILexicalBlock(scope: !1604, file: !112, line: 51, column: 7)
!1613 = !DILocation(line: 51, column: 13, scope: !1612)
!1614 = !DILocation(line: 51, column: 7, scope: !1604)
!1615 = !DILocation(line: 55, column: 14, scope: !1616)
!1616 = distinct !DILexicalBlock(scope: !1612, file: !112, line: 52, column: 5)
!1617 = !DILocation(line: 54, column: 7, scope: !1616)
!1618 = !DILocation(line: 56, column: 7, scope: !1616)
!1619 = !DILocation(line: 59, column: 20, scope: !1604)
!1620 = !DILocation(line: 59, column: 11, scope: !1604)
!1621 = !DILocation(line: 59, column: 9, scope: !1604)
!1622 = !DILocation(line: 60, column: 11, scope: !1604)
!1623 = !DILocation(line: 60, column: 17, scope: !1604)
!1624 = !DILocation(line: 60, column: 27, scope: !1604)
!1625 = !DILocation(line: 60, column: 33, scope: !1604)
!1626 = !DILocation(line: 60, column: 39, scope: !1604)
!1627 = !DILocation(line: 60, column: 8, scope: !1604)
!1628 = !DILocation(line: 61, column: 7, scope: !1629)
!1629 = distinct !DILexicalBlock(scope: !1604, file: !112, line: 61, column: 7)
!1630 = !DILocation(line: 61, column: 14, scope: !1629)
!1631 = !DILocation(line: 61, column: 12, scope: !1629)
!1632 = !DILocation(line: 61, column: 20, scope: !1629)
!1633 = !DILocation(line: 61, column: 25, scope: !1629)
!1634 = !DILocation(line: 61, column: 37, scope: !1629)
!1635 = !DILocation(line: 61, column: 42, scope: !1629)
!1636 = !DILocation(line: 61, column: 28, scope: !1629)
!1637 = !DILocation(line: 61, column: 61, scope: !1629)
!1638 = !DILocation(line: 61, column: 7, scope: !1604)
!1639 = !DILocation(line: 63, column: 15, scope: !1640)
!1640 = distinct !DILexicalBlock(scope: !1629, file: !112, line: 62, column: 5)
!1641 = !DILocation(line: 63, column: 13, scope: !1640)
!1642 = !DILocation(line: 64, column: 20, scope: !1643)
!1643 = distinct !DILexicalBlock(scope: !1640, file: !112, line: 64, column: 11)
!1644 = !DILocation(line: 64, column: 11, scope: !1643)
!1645 = !DILocation(line: 64, column: 36, scope: !1643)
!1646 = !DILocation(line: 64, column: 11, scope: !1640)
!1647 = !DILocation(line: 66, column: 19, scope: !1648)
!1648 = distinct !DILexicalBlock(scope: !1643, file: !112, line: 65, column: 9)
!1649 = !DILocation(line: 66, column: 24, scope: !1648)
!1650 = !DILocation(line: 66, column: 17, scope: !1648)
!1651 = !DILocation(line: 70, column: 52, scope: !1648)
!1652 = !DILocation(line: 70, column: 41, scope: !1648)
!1653 = !DILocation(line: 72, column: 9, scope: !1648)
!1654 = !DILocation(line: 73, column: 5, scope: !1640)
!1655 = !DILocation(line: 84, column: 18, scope: !1604)
!1656 = !DILocation(line: 84, column: 16, scope: !1604)
!1657 = !DILocation(line: 90, column: 38, scope: !1604)
!1658 = !DILocation(line: 90, column: 27, scope: !1604)
!1659 = !DILocation(line: 92, column: 1, scope: !1604)
!1660 = distinct !DISubprogram(name: "set_char_quoting", scope: !139, file: !139, line: 152, type: !1661, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!1661 = !DISubroutineType(types: !1662)
!1662 = !{!72, !1663, !7, !72}
!1663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !150, size: 64)
!1664 = !DILocalVariable(name: "o", arg: 1, scope: !1660, file: !139, line: 152, type: !1663)
!1665 = !DILocation(line: 152, column: 43, scope: !1660)
!1666 = !DILocalVariable(name: "c", arg: 2, scope: !1660, file: !139, line: 152, type: !7)
!1667 = !DILocation(line: 152, column: 51, scope: !1660)
!1668 = !DILocalVariable(name: "i", arg: 3, scope: !1660, file: !139, line: 152, type: !72)
!1669 = !DILocation(line: 152, column: 58, scope: !1660)
!1670 = !DILocalVariable(name: "uc", scope: !1660, file: !139, line: 154, type: !240)
!1671 = !DILocation(line: 154, column: 17, scope: !1660)
!1672 = !DILocation(line: 154, column: 22, scope: !1660)
!1673 = !DILocalVariable(name: "p", scope: !1660, file: !139, line: 155, type: !1674)
!1674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !16, size: 64)
!1675 = !DILocation(line: 155, column: 17, scope: !1660)
!1676 = !DILocation(line: 156, column: 6, scope: !1660)
!1677 = !DILocation(line: 156, column: 10, scope: !1660)
!1678 = !DILocation(line: 156, column: 41, scope: !1660)
!1679 = !DILocation(line: 156, column: 5, scope: !1660)
!1680 = !DILocation(line: 156, column: 59, scope: !1660)
!1681 = !DILocation(line: 156, column: 62, scope: !1660)
!1682 = !DILocation(line: 156, column: 57, scope: !1660)
!1683 = !DILocalVariable(name: "shift", scope: !1660, file: !139, line: 157, type: !72)
!1684 = !DILocation(line: 157, column: 7, scope: !1660)
!1685 = !DILocation(line: 157, column: 15, scope: !1660)
!1686 = !DILocation(line: 157, column: 18, scope: !1660)
!1687 = !DILocalVariable(name: "r", scope: !1660, file: !139, line: 158, type: !72)
!1688 = !DILocation(line: 158, column: 7, scope: !1660)
!1689 = !DILocation(line: 158, column: 13, scope: !1660)
!1690 = !DILocation(line: 158, column: 12, scope: !1660)
!1691 = !DILocation(line: 158, column: 18, scope: !1660)
!1692 = !DILocation(line: 158, column: 15, scope: !1660)
!1693 = !DILocation(line: 158, column: 25, scope: !1660)
!1694 = !DILocation(line: 159, column: 11, scope: !1660)
!1695 = !DILocation(line: 159, column: 13, scope: !1660)
!1696 = !DILocation(line: 159, column: 20, scope: !1660)
!1697 = !DILocation(line: 159, column: 18, scope: !1660)
!1698 = !DILocation(line: 159, column: 26, scope: !1660)
!1699 = !DILocation(line: 159, column: 23, scope: !1660)
!1700 = !DILocation(line: 159, column: 4, scope: !1660)
!1701 = !DILocation(line: 159, column: 6, scope: !1660)
!1702 = !DILocation(line: 160, column: 10, scope: !1660)
!1703 = !DILocation(line: 160, column: 3, scope: !1660)
!1704 = !DILocalVariable(name: "shift", scope: !1705, file: !139, line: 157, type: !72)
!1705 = distinct !DISubprogram(name: "set_char_quoting", scope: !139, file: !139, line: 152, type: !1706, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1716, retainedNodes: !4)
!1706 = !DISubroutineType(types: !1707)
!1707 = !{!72, !1708, !7, !72}
!1708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1709, size: 64)
!1709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !1710)
!1710 = !{!1711, !1712, !1713, !1714, !1715}
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1709, file: !139, line: 68, baseType: !118, size: 32)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1709, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1709, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1709, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1709, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!1716 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !1717, nameTableKind: None)
!1717 = !{!1718, !1720, !1722, !1724, !1726, !1728, !1735, !1737}
!1718 = !DIGlobalVariableExpression(var: !1719, expr: !DIExpression())
!1719 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1716, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!1720 = !DIGlobalVariableExpression(var: !1721, expr: !DIExpression())
!1721 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1716, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!1722 = !DIGlobalVariableExpression(var: !1723, expr: !DIExpression())
!1723 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1716, file: !139, line: 1052, type: !1709, isLocal: false, isDefinition: true)
!1724 = !DIGlobalVariableExpression(var: !1725, expr: !DIExpression())
!1725 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1716, file: !139, line: 116, type: !1709, isLocal: true, isDefinition: true)
!1726 = !DIGlobalVariableExpression(var: !1727, expr: !DIExpression())
!1727 = distinct !DIGlobalVariable(name: "slot0", scope: !1716, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!1728 = !DIGlobalVariableExpression(var: !1729, expr: !DIExpression())
!1729 = distinct !DIGlobalVariable(name: "slotvec", scope: !1716, file: !139, line: 845, type: !1730, isLocal: true, isDefinition: true)
!1730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1731, size: 64)
!1731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !1732)
!1732 = !{!1733, !1734}
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1731, file: !139, line: 836, baseType: !134, size: 64)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1731, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!1735 = !DIGlobalVariableExpression(var: !1736, expr: !DIExpression())
!1736 = distinct !DIGlobalVariable(name: "nslots", scope: !1716, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!1737 = !DIGlobalVariableExpression(var: !1738, expr: !DIExpression())
!1738 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1716, file: !139, line: 844, type: !1731, isLocal: true, isDefinition: true)
!1739 = !DILocalVariable(name: "r", scope: !1705, file: !139, line: 158, type: !72)
!1740 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !139, file: !139, line: 982, type: !1741, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!1741 = !DISubroutineType(types: !1742)
!1742 = !{!6, !69, !134, !7}
!1743 = !DILocalVariable(name: "arg", arg: 1, scope: !1740, file: !139, line: 982, type: !69)
!1744 = !DILocation(line: 982, column: 32, scope: !1740)
!1745 = !DILocalVariable(name: "argsize", arg: 2, scope: !1740, file: !139, line: 982, type: !134)
!1746 = !DILocation(line: 982, column: 44, scope: !1740)
!1747 = !DILocalVariable(name: "ch", arg: 3, scope: !1740, file: !139, line: 982, type: !7)
!1748 = !DILocation(line: 982, column: 58, scope: !1740)
!1749 = !DILocalVariable(name: "options", scope: !1740, file: !139, line: 984, type: !150)
!1750 = !DILocation(line: 984, column: 26, scope: !1740)
!1751 = !DILocation(line: 985, column: 13, scope: !1740)
!1752 = !DILocation(line: 986, column: 31, scope: !1740)
!1753 = !DILocation(line: 986, column: 3, scope: !1740)
!1754 = !DILocation(line: 987, column: 33, scope: !1740)
!1755 = !DILocation(line: 987, column: 38, scope: !1740)
!1756 = !DILocation(line: 987, column: 10, scope: !1740)
!1757 = !DILocation(line: 987, column: 3, scope: !1740)
!1758 = !DILocalVariable(name: "arg", arg: 1, scope: !1759, file: !139, line: 982, type: !69)
!1759 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !139, file: !139, line: 982, type: !1741, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1760, retainedNodes: !4)
!1760 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !1761, nameTableKind: None)
!1761 = !{!1762, !1764, !1766, !1775, !1777, !1779, !1786, !1788}
!1762 = !DIGlobalVariableExpression(var: !1763, expr: !DIExpression())
!1763 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1760, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!1764 = !DIGlobalVariableExpression(var: !1765, expr: !DIExpression())
!1765 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1760, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!1766 = !DIGlobalVariableExpression(var: !1767, expr: !DIExpression())
!1767 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1760, file: !139, line: 1052, type: !1768, isLocal: false, isDefinition: true)
!1768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !1769)
!1769 = !{!1770, !1771, !1772, !1773, !1774}
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1768, file: !139, line: 68, baseType: !118, size: 32)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1768, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1768, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1768, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1768, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!1775 = !DIGlobalVariableExpression(var: !1776, expr: !DIExpression())
!1776 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1760, file: !139, line: 116, type: !1768, isLocal: true, isDefinition: true)
!1777 = !DIGlobalVariableExpression(var: !1778, expr: !DIExpression())
!1778 = distinct !DIGlobalVariable(name: "slot0", scope: !1760, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!1779 = !DIGlobalVariableExpression(var: !1780, expr: !DIExpression())
!1780 = distinct !DIGlobalVariable(name: "slotvec", scope: !1760, file: !139, line: 845, type: !1781, isLocal: true, isDefinition: true)
!1781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1782, size: 64)
!1782 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !1783)
!1783 = !{!1784, !1785}
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1782, file: !139, line: 836, baseType: !134, size: 64)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1782, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!1786 = !DIGlobalVariableExpression(var: !1787, expr: !DIExpression())
!1787 = distinct !DIGlobalVariable(name: "nslots", scope: !1760, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!1788 = !DIGlobalVariableExpression(var: !1789, expr: !DIExpression())
!1789 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1760, file: !139, line: 844, type: !1782, isLocal: true, isDefinition: true)
!1790 = !DILocalVariable(name: "argsize", arg: 2, scope: !1759, file: !139, line: 982, type: !134)
!1791 = !DILocalVariable(name: "ch", arg: 3, scope: !1759, file: !139, line: 982, type: !7)
!1792 = !DILocalVariable(name: "options", scope: !1759, file: !139, line: 984, type: !1768)
!1793 = distinct !DISubprogram(name: "quotearg_n_options", scope: !139, file: !139, line: 877, type: !1794, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !115, retainedNodes: !4)
!1794 = !DISubroutineType(types: !1795)
!1795 = !{!6, !72, !69, !134, !1796}
!1796 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1797, size: 64)
!1797 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !150)
!1798 = !DILocalVariable(name: "n", arg: 1, scope: !1793, file: !139, line: 877, type: !72)
!1799 = !DILocation(line: 877, column: 25, scope: !1793)
!1800 = !DILocalVariable(name: "arg", arg: 2, scope: !1793, file: !139, line: 877, type: !69)
!1801 = !DILocation(line: 877, column: 40, scope: !1793)
!1802 = !DILocalVariable(name: "argsize", arg: 3, scope: !1793, file: !139, line: 877, type: !134)
!1803 = !DILocation(line: 877, column: 52, scope: !1793)
!1804 = !DILocalVariable(name: "options", arg: 4, scope: !1793, file: !139, line: 878, type: !1796)
!1805 = !DILocation(line: 878, column: 51, scope: !1793)
!1806 = !DILocalVariable(name: "e", scope: !1793, file: !139, line: 880, type: !72)
!1807 = !DILocation(line: 880, column: 7, scope: !1793)
!1808 = !DILocation(line: 880, column: 11, scope: !1793)
!1809 = !DILocalVariable(name: "sv", scope: !1793, file: !139, line: 882, type: !167)
!1810 = !DILocation(line: 882, column: 19, scope: !1793)
!1811 = !DILocation(line: 882, column: 24, scope: !1793)
!1812 = !DILocation(line: 884, column: 7, scope: !1813)
!1813 = distinct !DILexicalBlock(scope: !1793, file: !139, line: 884, column: 7)
!1814 = !DILocation(line: 884, column: 9, scope: !1813)
!1815 = !DILocation(line: 884, column: 7, scope: !1793)
!1816 = !DILocation(line: 885, column: 5, scope: !1813)
!1817 = !DILocation(line: 887, column: 7, scope: !1818)
!1818 = distinct !DILexicalBlock(scope: !1793, file: !139, line: 887, column: 7)
!1819 = !DILocation(line: 887, column: 17, scope: !1818)
!1820 = !DILocation(line: 887, column: 14, scope: !1818)
!1821 = !DILocation(line: 887, column: 7, scope: !1793)
!1822 = !DILocalVariable(name: "preallocated", scope: !1823, file: !139, line: 889, type: !27)
!1823 = distinct !DILexicalBlock(scope: !1818, file: !139, line: 888, column: 5)
!1824 = !DILocation(line: 889, column: 12, scope: !1823)
!1825 = !DILocation(line: 889, column: 28, scope: !1823)
!1826 = !DILocation(line: 889, column: 31, scope: !1823)
!1827 = !DILocalVariable(name: "nmax", scope: !1823, file: !139, line: 890, type: !72)
!1828 = !DILocation(line: 890, column: 11, scope: !1823)
!1829 = !DILocation(line: 892, column: 11, scope: !1830)
!1830 = distinct !DILexicalBlock(scope: !1823, file: !139, line: 892, column: 11)
!1831 = !DILocation(line: 892, column: 18, scope: !1830)
!1832 = !DILocation(line: 892, column: 16, scope: !1830)
!1833 = !DILocation(line: 892, column: 11, scope: !1823)
!1834 = !DILocation(line: 893, column: 9, scope: !1830)
!1835 = !DILocation(line: 895, column: 32, scope: !1823)
!1836 = !DILocation(line: 895, column: 54, scope: !1823)
!1837 = !DILocation(line: 895, column: 59, scope: !1823)
!1838 = !DILocation(line: 895, column: 61, scope: !1823)
!1839 = !DILocation(line: 895, column: 58, scope: !1823)
!1840 = !DILocation(line: 895, column: 66, scope: !1823)
!1841 = !DILocation(line: 895, column: 22, scope: !1823)
!1842 = !DILocation(line: 895, column: 20, scope: !1823)
!1843 = !DILocation(line: 895, column: 15, scope: !1823)
!1844 = !DILocation(line: 896, column: 11, scope: !1845)
!1845 = distinct !DILexicalBlock(scope: !1823, file: !139, line: 896, column: 11)
!1846 = !DILocation(line: 896, column: 11, scope: !1823)
!1847 = !DILocation(line: 897, column: 10, scope: !1845)
!1848 = !DILocation(line: 897, column: 15, scope: !1845)
!1849 = !DILocation(line: 897, column: 9, scope: !1845)
!1850 = !DILocation(line: 898, column: 15, scope: !1823)
!1851 = !DILocation(line: 898, column: 20, scope: !1823)
!1852 = !DILocation(line: 898, column: 18, scope: !1823)
!1853 = !DILocation(line: 898, column: 7, scope: !1823)
!1854 = !DILocation(line: 898, column: 32, scope: !1823)
!1855 = !DILocation(line: 898, column: 34, scope: !1823)
!1856 = !DILocation(line: 898, column: 40, scope: !1823)
!1857 = !DILocation(line: 898, column: 38, scope: !1823)
!1858 = !DILocation(line: 898, column: 31, scope: !1823)
!1859 = !DILocation(line: 898, column: 48, scope: !1823)
!1860 = !DILocation(line: 899, column: 16, scope: !1823)
!1861 = !DILocation(line: 899, column: 18, scope: !1823)
!1862 = !DILocation(line: 899, column: 14, scope: !1823)
!1863 = !DILocation(line: 900, column: 5, scope: !1823)
!1864 = !DILocalVariable(name: "size", scope: !1865, file: !139, line: 903, type: !134)
!1865 = distinct !DILexicalBlock(scope: !1793, file: !139, line: 902, column: 3)
!1866 = !DILocation(line: 903, column: 12, scope: !1865)
!1867 = !DILocation(line: 903, column: 19, scope: !1865)
!1868 = !DILocation(line: 903, column: 22, scope: !1865)
!1869 = !DILocation(line: 903, column: 25, scope: !1865)
!1870 = !DILocalVariable(name: "val", scope: !1865, file: !139, line: 904, type: !6)
!1871 = !DILocation(line: 904, column: 11, scope: !1865)
!1872 = !DILocation(line: 904, column: 17, scope: !1865)
!1873 = !DILocation(line: 904, column: 20, scope: !1865)
!1874 = !DILocation(line: 904, column: 23, scope: !1865)
!1875 = !DILocalVariable(name: "flags", scope: !1865, file: !139, line: 906, type: !72)
!1876 = !DILocation(line: 906, column: 9, scope: !1865)
!1877 = !DILocation(line: 906, column: 17, scope: !1865)
!1878 = !DILocation(line: 906, column: 26, scope: !1865)
!1879 = !DILocation(line: 906, column: 32, scope: !1865)
!1880 = !DILocalVariable(name: "qsize", scope: !1865, file: !139, line: 907, type: !134)
!1881 = !DILocation(line: 907, column: 12, scope: !1865)
!1882 = !DILocation(line: 907, column: 46, scope: !1865)
!1883 = !DILocation(line: 907, column: 51, scope: !1865)
!1884 = !DILocation(line: 907, column: 57, scope: !1865)
!1885 = !DILocation(line: 907, column: 62, scope: !1865)
!1886 = !DILocation(line: 908, column: 46, scope: !1865)
!1887 = !DILocation(line: 908, column: 55, scope: !1865)
!1888 = !DILocation(line: 908, column: 62, scope: !1865)
!1889 = !DILocation(line: 909, column: 46, scope: !1865)
!1890 = !DILocation(line: 909, column: 55, scope: !1865)
!1891 = !DILocation(line: 910, column: 46, scope: !1865)
!1892 = !DILocation(line: 910, column: 55, scope: !1865)
!1893 = !DILocation(line: 911, column: 46, scope: !1865)
!1894 = !DILocation(line: 911, column: 55, scope: !1865)
!1895 = !DILocation(line: 907, column: 20, scope: !1865)
!1896 = !DILocation(line: 913, column: 9, scope: !1897)
!1897 = distinct !DILexicalBlock(scope: !1865, file: !139, line: 913, column: 9)
!1898 = !DILocation(line: 913, column: 17, scope: !1897)
!1899 = !DILocation(line: 913, column: 14, scope: !1897)
!1900 = !DILocation(line: 913, column: 9, scope: !1865)
!1901 = !DILocation(line: 915, column: 29, scope: !1902)
!1902 = distinct !DILexicalBlock(scope: !1897, file: !139, line: 914, column: 7)
!1903 = !DILocation(line: 915, column: 35, scope: !1902)
!1904 = !DILocation(line: 915, column: 27, scope: !1902)
!1905 = !DILocation(line: 915, column: 9, scope: !1902)
!1906 = !DILocation(line: 915, column: 12, scope: !1902)
!1907 = !DILocation(line: 915, column: 15, scope: !1902)
!1908 = !DILocation(line: 915, column: 20, scope: !1902)
!1909 = !DILocation(line: 916, column: 13, scope: !1910)
!1910 = distinct !DILexicalBlock(scope: !1902, file: !139, line: 916, column: 13)
!1911 = !DILocation(line: 916, column: 17, scope: !1910)
!1912 = !DILocation(line: 916, column: 13, scope: !1902)
!1913 = !DILocation(line: 917, column: 17, scope: !1910)
!1914 = !DILocation(line: 917, column: 11, scope: !1910)
!1915 = !DILocation(line: 918, column: 39, scope: !1902)
!1916 = !DILocation(line: 918, column: 27, scope: !1902)
!1917 = !DILocation(line: 918, column: 25, scope: !1902)
!1918 = !DILocation(line: 918, column: 9, scope: !1902)
!1919 = !DILocation(line: 918, column: 12, scope: !1902)
!1920 = !DILocation(line: 918, column: 15, scope: !1902)
!1921 = !DILocation(line: 918, column: 19, scope: !1902)
!1922 = !DILocation(line: 919, column: 35, scope: !1902)
!1923 = !DILocation(line: 919, column: 40, scope: !1902)
!1924 = !DILocation(line: 919, column: 46, scope: !1902)
!1925 = !DILocation(line: 919, column: 51, scope: !1902)
!1926 = !DILocation(line: 919, column: 60, scope: !1902)
!1927 = !DILocation(line: 919, column: 69, scope: !1902)
!1928 = !DILocation(line: 920, column: 35, scope: !1902)
!1929 = !DILocation(line: 920, column: 42, scope: !1902)
!1930 = !DILocation(line: 920, column: 51, scope: !1902)
!1931 = !DILocation(line: 921, column: 35, scope: !1902)
!1932 = !DILocation(line: 921, column: 44, scope: !1902)
!1933 = !DILocation(line: 922, column: 35, scope: !1902)
!1934 = !DILocation(line: 922, column: 44, scope: !1902)
!1935 = !DILocation(line: 919, column: 9, scope: !1902)
!1936 = !DILocation(line: 923, column: 7, scope: !1902)
!1937 = !DILocation(line: 925, column: 13, scope: !1865)
!1938 = !DILocation(line: 925, column: 5, scope: !1865)
!1939 = !DILocation(line: 925, column: 11, scope: !1865)
!1940 = !DILocation(line: 926, column: 12, scope: !1865)
!1941 = !DILocation(line: 926, column: 5, scope: !1865)
!1942 = !DILocalVariable(name: "val", scope: !1943, file: !139, line: 904, type: !6)
!1943 = distinct !DILexicalBlock(scope: !1944, file: !139, line: 902, column: 3)
!1944 = distinct !DISubprogram(name: "quotearg_n_options", scope: !139, file: !139, line: 877, type: !1945, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1956, retainedNodes: !4)
!1945 = !DISubroutineType(types: !1946)
!1946 = !{!6, !72, !69, !134, !1947}
!1947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1948, size: 64)
!1948 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1949)
!1949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !1950)
!1950 = !{!1951, !1952, !1953, !1954, !1955}
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1949, file: !139, line: 68, baseType: !118, size: 32)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1949, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1949, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1949, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1949, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!1956 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !1957, nameTableKind: None)
!1957 = !{!1958, !1960, !1962, !1964, !1966, !1968, !1975, !1977}
!1958 = !DIGlobalVariableExpression(var: !1959, expr: !DIExpression())
!1959 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1956, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!1960 = !DIGlobalVariableExpression(var: !1961, expr: !DIExpression())
!1961 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1956, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!1962 = !DIGlobalVariableExpression(var: !1963, expr: !DIExpression())
!1963 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1956, file: !139, line: 1052, type: !1949, isLocal: false, isDefinition: true)
!1964 = !DIGlobalVariableExpression(var: !1965, expr: !DIExpression())
!1965 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1956, file: !139, line: 116, type: !1949, isLocal: true, isDefinition: true)
!1966 = !DIGlobalVariableExpression(var: !1967, expr: !DIExpression())
!1967 = distinct !DIGlobalVariable(name: "slot0", scope: !1956, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!1968 = !DIGlobalVariableExpression(var: !1969, expr: !DIExpression())
!1969 = distinct !DIGlobalVariable(name: "slotvec", scope: !1956, file: !139, line: 845, type: !1970, isLocal: true, isDefinition: true)
!1970 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1971, size: 64)
!1971 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !1972)
!1972 = !{!1973, !1974}
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1971, file: !139, line: 836, baseType: !134, size: 64)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1971, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!1975 = !DIGlobalVariableExpression(var: !1976, expr: !DIExpression())
!1976 = distinct !DIGlobalVariable(name: "nslots", scope: !1956, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!1977 = !DIGlobalVariableExpression(var: !1978, expr: !DIExpression())
!1978 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1956, file: !139, line: 844, type: !1971, isLocal: true, isDefinition: true)
!1979 = !DILocalVariable(name: "flags", scope: !1943, file: !139, line: 906, type: !72)
!1980 = !DILocalVariable(name: "qsize", scope: !1943, file: !139, line: 907, type: !134)
!1981 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !139, file: !139, line: 256, type: !1982, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !115, retainedNodes: !4)
!1982 = !DISubroutineType(types: !1983)
!1983 = !{!134, !6, !134, !69, !134, !118, !72, !1984, !69, !69}
!1984 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1985, size: 64)
!1985 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!1986 = !DILocalVariable(name: "buffer", arg: 1, scope: !1981, file: !139, line: 256, type: !6)
!1987 = !DILocation(line: 256, column: 33, scope: !1981)
!1988 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1981, file: !139, line: 256, type: !134)
!1989 = !DILocation(line: 256, column: 48, scope: !1981)
!1990 = !DILocalVariable(name: "arg", arg: 3, scope: !1981, file: !139, line: 257, type: !69)
!1991 = !DILocation(line: 257, column: 39, scope: !1981)
!1992 = !DILocalVariable(name: "argsize", arg: 4, scope: !1981, file: !139, line: 257, type: !134)
!1993 = !DILocation(line: 257, column: 51, scope: !1981)
!1994 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1981, file: !139, line: 258, type: !118)
!1995 = !DILocation(line: 258, column: 46, scope: !1981)
!1996 = !DILocalVariable(name: "flags", arg: 6, scope: !1981, file: !139, line: 258, type: !72)
!1997 = !DILocation(line: 258, column: 65, scope: !1981)
!1998 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1981, file: !139, line: 259, type: !1984)
!1999 = !DILocation(line: 259, column: 47, scope: !1981)
!2000 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1981, file: !139, line: 260, type: !69)
!2001 = !DILocation(line: 260, column: 39, scope: !1981)
!2002 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1981, file: !139, line: 261, type: !69)
!2003 = !DILocation(line: 261, column: 39, scope: !1981)
!2004 = !DILocalVariable(name: "i", scope: !1981, file: !139, line: 263, type: !134)
!2005 = !DILocation(line: 263, column: 10, scope: !1981)
!2006 = !DILocalVariable(name: "len", scope: !1981, file: !139, line: 264, type: !134)
!2007 = !DILocation(line: 264, column: 10, scope: !1981)
!2008 = !DILocalVariable(name: "orig_buffersize", scope: !1981, file: !139, line: 265, type: !134)
!2009 = !DILocation(line: 265, column: 10, scope: !1981)
!2010 = !DILocalVariable(name: "quote_string", scope: !1981, file: !139, line: 266, type: !69)
!2011 = !DILocation(line: 266, column: 15, scope: !1981)
!2012 = !DILocalVariable(name: "quote_string_len", scope: !1981, file: !139, line: 267, type: !134)
!2013 = !DILocation(line: 267, column: 10, scope: !1981)
!2014 = !DILocalVariable(name: "backslash_escapes", scope: !1981, file: !139, line: 268, type: !27)
!2015 = !DILocation(line: 268, column: 8, scope: !1981)
!2016 = !DILocalVariable(name: "unibyte_locale", scope: !1981, file: !139, line: 269, type: !27)
!2017 = !DILocation(line: 269, column: 8, scope: !1981)
!2018 = !DILocation(line: 269, column: 25, scope: !1981)
!2019 = !DILocation(line: 269, column: 36, scope: !1981)
!2020 = !DILocalVariable(name: "elide_outer_quotes", scope: !1981, file: !139, line: 270, type: !27)
!2021 = !DILocation(line: 270, column: 8, scope: !1981)
!2022 = !DILocation(line: 270, column: 30, scope: !1981)
!2023 = !DILocation(line: 270, column: 36, scope: !1981)
!2024 = !DILocation(line: 270, column: 61, scope: !1981)
!2025 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1981, file: !139, line: 271, type: !27)
!2026 = !DILocation(line: 271, column: 8, scope: !1981)
!2027 = !DILocalVariable(name: "encountered_single_quote", scope: !1981, file: !139, line: 272, type: !27)
!2028 = !DILocation(line: 272, column: 8, scope: !1981)
!2029 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1981, file: !139, line: 273, type: !27)
!2030 = !DILocation(line: 273, column: 8, scope: !1981)
!2031 = !DILocation(line: 273, column: 3, scope: !1981)
!2032 = !DILabel(scope: !1981, name: "process_input", file: !139, line: 314)
!2033 = !DILocation(line: 314, column: 2, scope: !1981)
!2034 = !DILocation(line: 316, column: 11, scope: !1981)
!2035 = !DILocation(line: 316, column: 3, scope: !1981)
!2036 = !DILocation(line: 319, column: 21, scope: !2037)
!2037 = distinct !DILexicalBlock(scope: !1981, file: !139, line: 317, column: 5)
!2038 = !DILocation(line: 320, column: 26, scope: !2037)
!2039 = !DILocation(line: 321, column: 7, scope: !2037)
!2040 = !DILocation(line: 323, column: 12, scope: !2041)
!2041 = distinct !DILexicalBlock(scope: !2037, file: !139, line: 323, column: 11)
!2042 = !DILocation(line: 323, column: 11, scope: !2037)
!2043 = !DILocation(line: 324, column: 9, scope: !2041)
!2044 = !DILocation(line: 324, column: 9, scope: !2045)
!2045 = distinct !DILexicalBlock(scope: !2046, file: !139, line: 324, column: 9)
!2046 = distinct !DILexicalBlock(scope: !2041, file: !139, line: 324, column: 9)
!2047 = !DILocation(line: 324, column: 9, scope: !2046)
!2048 = !DILocation(line: 325, column: 25, scope: !2037)
!2049 = !DILocation(line: 326, column: 20, scope: !2037)
!2050 = !DILocation(line: 327, column: 24, scope: !2037)
!2051 = !DILocation(line: 328, column: 7, scope: !2037)
!2052 = !DILocation(line: 331, column: 25, scope: !2037)
!2053 = !DILocation(line: 332, column: 26, scope: !2037)
!2054 = !DILocation(line: 333, column: 7, scope: !2037)
!2055 = !DILocation(line: 339, column: 13, scope: !2056)
!2056 = distinct !DILexicalBlock(scope: !2057, file: !139, line: 339, column: 13)
!2057 = distinct !DILexicalBlock(scope: !2037, file: !139, line: 338, column: 7)
!2058 = !DILocation(line: 339, column: 27, scope: !2056)
!2059 = !DILocation(line: 339, column: 13, scope: !2057)
!2060 = !DILocation(line: 362, column: 50, scope: !2061)
!2061 = distinct !DILexicalBlock(scope: !2056, file: !139, line: 340, column: 11)
!2062 = !DILocation(line: 362, column: 26, scope: !2061)
!2063 = !DILocation(line: 362, column: 24, scope: !2061)
!2064 = !DILocation(line: 363, column: 51, scope: !2061)
!2065 = !DILocation(line: 363, column: 27, scope: !2061)
!2066 = !DILocation(line: 363, column: 25, scope: !2061)
!2067 = !DILocation(line: 364, column: 11, scope: !2061)
!2068 = !DILocation(line: 365, column: 14, scope: !2069)
!2069 = distinct !DILexicalBlock(scope: !2057, file: !139, line: 365, column: 13)
!2070 = !DILocation(line: 365, column: 13, scope: !2057)
!2071 = !DILocation(line: 366, column: 31, scope: !2072)
!2072 = distinct !DILexicalBlock(scope: !2069, file: !139, line: 366, column: 11)
!2073 = !DILocation(line: 366, column: 29, scope: !2072)
!2074 = !DILocation(line: 366, column: 16, scope: !2072)
!2075 = !DILocation(line: 366, column: 44, scope: !2076)
!2076 = distinct !DILexicalBlock(scope: !2072, file: !139, line: 366, column: 11)
!2077 = !DILocation(line: 366, column: 43, scope: !2076)
!2078 = !DILocation(line: 366, column: 11, scope: !2072)
!2079 = !DILocation(line: 367, column: 13, scope: !2076)
!2080 = !DILocation(line: 367, column: 13, scope: !2081)
!2081 = distinct !DILexicalBlock(scope: !2082, file: !139, line: 367, column: 13)
!2082 = distinct !DILexicalBlock(scope: !2076, file: !139, line: 367, column: 13)
!2083 = !DILocation(line: 367, column: 13, scope: !2082)
!2084 = !DILocation(line: 366, column: 70, scope: !2076)
!2085 = !DILocation(line: 366, column: 11, scope: !2076)
!2086 = distinct !{!2086, !2078, !2087}
!2087 = !DILocation(line: 367, column: 13, scope: !2072)
!2088 = !DILocation(line: 368, column: 27, scope: !2057)
!2089 = !DILocation(line: 369, column: 24, scope: !2057)
!2090 = !DILocation(line: 369, column: 22, scope: !2057)
!2091 = !DILocation(line: 370, column: 36, scope: !2057)
!2092 = !DILocation(line: 370, column: 28, scope: !2057)
!2093 = !DILocation(line: 370, column: 26, scope: !2057)
!2094 = !DILocation(line: 372, column: 7, scope: !2037)
!2095 = !DILocation(line: 375, column: 25, scope: !2037)
!2096 = !DILocation(line: 376, column: 7, scope: !2037)
!2097 = !DILocation(line: 378, column: 26, scope: !2037)
!2098 = !DILocation(line: 379, column: 7, scope: !2037)
!2099 = !DILocation(line: 381, column: 12, scope: !2100)
!2100 = distinct !DILexicalBlock(scope: !2037, file: !139, line: 381, column: 11)
!2101 = !DILocation(line: 381, column: 11, scope: !2037)
!2102 = !DILocation(line: 382, column: 27, scope: !2100)
!2103 = !DILocation(line: 382, column: 9, scope: !2100)
!2104 = !DILocation(line: 383, column: 7, scope: !2037)
!2105 = !DILocation(line: 385, column: 21, scope: !2037)
!2106 = !DILocation(line: 386, column: 12, scope: !2107)
!2107 = distinct !DILexicalBlock(scope: !2037, file: !139, line: 386, column: 11)
!2108 = !DILocation(line: 386, column: 11, scope: !2037)
!2109 = !DILocation(line: 387, column: 9, scope: !2107)
!2110 = !DILocation(line: 387, column: 9, scope: !2111)
!2111 = distinct !DILexicalBlock(scope: !2112, file: !139, line: 387, column: 9)
!2112 = distinct !DILexicalBlock(scope: !2107, file: !139, line: 387, column: 9)
!2113 = !DILocation(line: 387, column: 9, scope: !2112)
!2114 = !DILocation(line: 388, column: 20, scope: !2037)
!2115 = !DILocation(line: 389, column: 24, scope: !2037)
!2116 = !DILocation(line: 390, column: 7, scope: !2037)
!2117 = !DILocation(line: 393, column: 26, scope: !2037)
!2118 = !DILocation(line: 394, column: 7, scope: !2037)
!2119 = !DILocation(line: 397, column: 7, scope: !2037)
!2120 = !DILocation(line: 400, column: 10, scope: !2121)
!2121 = distinct !DILexicalBlock(scope: !1981, file: !139, line: 400, column: 3)
!2122 = !DILocation(line: 400, column: 8, scope: !2121)
!2123 = !DILocation(line: 400, column: 19, scope: !2124)
!2124 = distinct !DILexicalBlock(scope: !2121, file: !139, line: 400, column: 3)
!2125 = !DILocation(line: 400, column: 27, scope: !2124)
!2126 = !DILocation(line: 400, column: 41, scope: !2124)
!2127 = !DILocation(line: 400, column: 45, scope: !2124)
!2128 = !DILocation(line: 400, column: 48, scope: !2124)
!2129 = !DILocation(line: 400, column: 58, scope: !2124)
!2130 = !DILocation(line: 400, column: 63, scope: !2124)
!2131 = !DILocation(line: 400, column: 60, scope: !2124)
!2132 = !DILocation(line: 400, column: 16, scope: !2124)
!2133 = !DILocation(line: 400, column: 3, scope: !2121)
!2134 = !DILocalVariable(name: "c", scope: !2135, file: !139, line: 402, type: !240)
!2135 = distinct !DILexicalBlock(scope: !2124, file: !139, line: 401, column: 5)
!2136 = !DILocation(line: 402, column: 21, scope: !2135)
!2137 = !DILocalVariable(name: "esc", scope: !2135, file: !139, line: 403, type: !240)
!2138 = !DILocation(line: 403, column: 21, scope: !2135)
!2139 = !DILocalVariable(name: "is_right_quote", scope: !2135, file: !139, line: 404, type: !27)
!2140 = !DILocation(line: 404, column: 12, scope: !2135)
!2141 = !DILocalVariable(name: "escaping", scope: !2135, file: !139, line: 405, type: !27)
!2142 = !DILocation(line: 405, column: 12, scope: !2135)
!2143 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2135, file: !139, line: 406, type: !27)
!2144 = !DILocation(line: 406, column: 12, scope: !2135)
!2145 = !DILocation(line: 408, column: 11, scope: !2146)
!2146 = distinct !DILexicalBlock(scope: !2135, file: !139, line: 408, column: 11)
!2147 = !DILocation(line: 409, column: 11, scope: !2146)
!2148 = !DILocation(line: 409, column: 14, scope: !2146)
!2149 = !DILocation(line: 409, column: 28, scope: !2146)
!2150 = !DILocation(line: 410, column: 11, scope: !2146)
!2151 = !DILocation(line: 410, column: 14, scope: !2146)
!2152 = !DILocation(line: 411, column: 11, scope: !2146)
!2153 = !DILocation(line: 411, column: 15, scope: !2146)
!2154 = !DILocation(line: 411, column: 19, scope: !2146)
!2155 = !DILocation(line: 411, column: 17, scope: !2146)
!2156 = !DILocation(line: 412, column: 19, scope: !2146)
!2157 = !DILocation(line: 412, column: 27, scope: !2146)
!2158 = !DILocation(line: 412, column: 39, scope: !2146)
!2159 = !DILocation(line: 412, column: 46, scope: !2146)
!2160 = !DILocation(line: 412, column: 44, scope: !2146)
!2161 = !DILocation(line: 416, column: 40, scope: !2146)
!2162 = !DILocation(line: 416, column: 32, scope: !2146)
!2163 = !DILocation(line: 416, column: 30, scope: !2146)
!2164 = !DILocation(line: 416, column: 48, scope: !2146)
!2165 = !DILocation(line: 412, column: 15, scope: !2146)
!2166 = !DILocation(line: 417, column: 11, scope: !2146)
!2167 = !DILocation(line: 417, column: 22, scope: !2146)
!2168 = !DILocation(line: 417, column: 28, scope: !2146)
!2169 = !DILocation(line: 417, column: 26, scope: !2146)
!2170 = !DILocation(line: 417, column: 31, scope: !2146)
!2171 = !DILocation(line: 417, column: 45, scope: !2146)
!2172 = !DILocation(line: 417, column: 14, scope: !2146)
!2173 = !DILocation(line: 417, column: 63, scope: !2146)
!2174 = !DILocation(line: 408, column: 11, scope: !2135)
!2175 = !DILocation(line: 419, column: 15, scope: !2176)
!2176 = distinct !DILexicalBlock(scope: !2177, file: !139, line: 419, column: 15)
!2177 = distinct !DILexicalBlock(scope: !2146, file: !139, line: 418, column: 9)
!2178 = !DILocation(line: 419, column: 15, scope: !2177)
!2179 = !DILocation(line: 420, column: 13, scope: !2176)
!2180 = !DILocation(line: 421, column: 26, scope: !2177)
!2181 = !DILocation(line: 422, column: 9, scope: !2177)
!2182 = !DILocation(line: 424, column: 11, scope: !2135)
!2183 = !DILocation(line: 424, column: 15, scope: !2135)
!2184 = !DILocation(line: 424, column: 9, scope: !2135)
!2185 = !DILocation(line: 425, column: 15, scope: !2135)
!2186 = !DILocation(line: 425, column: 7, scope: !2135)
!2187 = !DILocation(line: 428, column: 15, scope: !2188)
!2188 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 428, column: 15)
!2189 = distinct !DILexicalBlock(scope: !2135, file: !139, line: 426, column: 9)
!2190 = !DILocation(line: 428, column: 15, scope: !2189)
!2191 = !DILocation(line: 430, column: 15, scope: !2192)
!2192 = distinct !DILexicalBlock(scope: !2188, file: !139, line: 429, column: 13)
!2193 = !DILocation(line: 430, column: 15, scope: !2194)
!2194 = distinct !DILexicalBlock(scope: !2195, file: !139, line: 430, column: 15)
!2195 = distinct !DILexicalBlock(scope: !2192, file: !139, line: 430, column: 15)
!2196 = !DILocation(line: 430, column: 15, scope: !2195)
!2197 = !DILocation(line: 430, column: 15, scope: !2198)
!2198 = distinct !DILexicalBlock(scope: !2195, file: !139, line: 430, column: 15)
!2199 = !DILocation(line: 430, column: 15, scope: !2200)
!2200 = distinct !DILexicalBlock(scope: !2198, file: !139, line: 430, column: 15)
!2201 = !DILocation(line: 430, column: 15, scope: !2202)
!2202 = distinct !DILexicalBlock(scope: !2203, file: !139, line: 430, column: 15)
!2203 = distinct !DILexicalBlock(scope: !2200, file: !139, line: 430, column: 15)
!2204 = !DILocation(line: 430, column: 15, scope: !2203)
!2205 = !DILocation(line: 430, column: 15, scope: !2206)
!2206 = distinct !DILexicalBlock(scope: !2207, file: !139, line: 430, column: 15)
!2207 = distinct !DILexicalBlock(scope: !2200, file: !139, line: 430, column: 15)
!2208 = !DILocation(line: 430, column: 15, scope: !2207)
!2209 = !DILocation(line: 430, column: 15, scope: !2210)
!2210 = distinct !DILexicalBlock(scope: !2211, file: !139, line: 430, column: 15)
!2211 = distinct !DILexicalBlock(scope: !2200, file: !139, line: 430, column: 15)
!2212 = !DILocation(line: 430, column: 15, scope: !2211)
!2213 = !DILocation(line: 430, column: 15, scope: !2214)
!2214 = distinct !DILexicalBlock(scope: !2215, file: !139, line: 430, column: 15)
!2215 = distinct !DILexicalBlock(scope: !2195, file: !139, line: 430, column: 15)
!2216 = !DILocation(line: 430, column: 15, scope: !2215)
!2217 = !DILocation(line: 437, column: 19, scope: !2218)
!2218 = distinct !DILexicalBlock(scope: !2192, file: !139, line: 437, column: 19)
!2219 = !DILocation(line: 437, column: 33, scope: !2218)
!2220 = !DILocation(line: 438, column: 19, scope: !2218)
!2221 = !DILocation(line: 438, column: 22, scope: !2218)
!2222 = !DILocation(line: 438, column: 24, scope: !2218)
!2223 = !DILocation(line: 438, column: 30, scope: !2218)
!2224 = !DILocation(line: 438, column: 28, scope: !2218)
!2225 = !DILocation(line: 438, column: 38, scope: !2218)
!2226 = !DILocation(line: 438, column: 48, scope: !2218)
!2227 = !DILocation(line: 438, column: 52, scope: !2218)
!2228 = !DILocation(line: 438, column: 54, scope: !2218)
!2229 = !DILocation(line: 438, column: 45, scope: !2218)
!2230 = !DILocation(line: 438, column: 59, scope: !2218)
!2231 = !DILocation(line: 438, column: 62, scope: !2218)
!2232 = !DILocation(line: 438, column: 66, scope: !2218)
!2233 = !DILocation(line: 438, column: 68, scope: !2218)
!2234 = !DILocation(line: 438, column: 73, scope: !2218)
!2235 = !DILocation(line: 437, column: 19, scope: !2192)
!2236 = !DILocation(line: 440, column: 19, scope: !2237)
!2237 = distinct !DILexicalBlock(scope: !2218, file: !139, line: 439, column: 17)
!2238 = !DILocation(line: 440, column: 19, scope: !2239)
!2239 = distinct !DILexicalBlock(scope: !2240, file: !139, line: 440, column: 19)
!2240 = distinct !DILexicalBlock(scope: !2237, file: !139, line: 440, column: 19)
!2241 = !DILocation(line: 440, column: 19, scope: !2240)
!2242 = !DILocation(line: 441, column: 19, scope: !2237)
!2243 = !DILocation(line: 441, column: 19, scope: !2244)
!2244 = distinct !DILexicalBlock(scope: !2245, file: !139, line: 441, column: 19)
!2245 = distinct !DILexicalBlock(scope: !2237, file: !139, line: 441, column: 19)
!2246 = !DILocation(line: 441, column: 19, scope: !2245)
!2247 = !DILocation(line: 442, column: 17, scope: !2237)
!2248 = !DILocation(line: 443, column: 17, scope: !2192)
!2249 = !DILocation(line: 448, column: 13, scope: !2192)
!2250 = !DILocation(line: 449, column: 20, scope: !2251)
!2251 = distinct !DILexicalBlock(scope: !2188, file: !139, line: 449, column: 20)
!2252 = !DILocation(line: 449, column: 26, scope: !2251)
!2253 = !DILocation(line: 449, column: 20, scope: !2188)
!2254 = !DILocation(line: 450, column: 13, scope: !2251)
!2255 = !DILocation(line: 451, column: 11, scope: !2189)
!2256 = !DILocation(line: 454, column: 19, scope: !2189)
!2257 = !DILocation(line: 454, column: 11, scope: !2189)
!2258 = !DILocation(line: 457, column: 19, scope: !2259)
!2259 = distinct !DILexicalBlock(scope: !2260, file: !139, line: 457, column: 19)
!2260 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 455, column: 13)
!2261 = !DILocation(line: 457, column: 19, scope: !2260)
!2262 = !DILocation(line: 458, column: 17, scope: !2259)
!2263 = !DILocation(line: 459, column: 15, scope: !2260)
!2264 = !DILocation(line: 462, column: 20, scope: !2265)
!2265 = distinct !DILexicalBlock(scope: !2260, file: !139, line: 462, column: 19)
!2266 = !DILocation(line: 462, column: 26, scope: !2265)
!2267 = !DILocation(line: 463, column: 19, scope: !2265)
!2268 = !DILocation(line: 463, column: 22, scope: !2265)
!2269 = !DILocation(line: 463, column: 24, scope: !2265)
!2270 = !DILocation(line: 463, column: 30, scope: !2265)
!2271 = !DILocation(line: 463, column: 28, scope: !2265)
!2272 = !DILocation(line: 463, column: 38, scope: !2265)
!2273 = !DILocation(line: 463, column: 41, scope: !2265)
!2274 = !DILocation(line: 463, column: 45, scope: !2265)
!2275 = !DILocation(line: 463, column: 47, scope: !2265)
!2276 = !DILocation(line: 463, column: 52, scope: !2265)
!2277 = !DILocation(line: 462, column: 19, scope: !2260)
!2278 = !DILocation(line: 464, column: 25, scope: !2265)
!2279 = !DILocation(line: 464, column: 29, scope: !2265)
!2280 = !DILocation(line: 464, column: 31, scope: !2265)
!2281 = !DILocation(line: 464, column: 17, scope: !2265)
!2282 = !DILocation(line: 471, column: 25, scope: !2283)
!2283 = distinct !DILexicalBlock(scope: !2284, file: !139, line: 471, column: 25)
!2284 = distinct !DILexicalBlock(scope: !2265, file: !139, line: 465, column: 19)
!2285 = !DILocation(line: 471, column: 25, scope: !2284)
!2286 = !DILocation(line: 472, column: 23, scope: !2283)
!2287 = !DILocation(line: 473, column: 25, scope: !2284)
!2288 = !DILocation(line: 473, column: 29, scope: !2284)
!2289 = !DILocation(line: 473, column: 31, scope: !2284)
!2290 = !DILocation(line: 473, column: 23, scope: !2284)
!2291 = !DILocation(line: 474, column: 23, scope: !2284)
!2292 = !DILocation(line: 475, column: 21, scope: !2284)
!2293 = !DILocation(line: 475, column: 21, scope: !2294)
!2294 = distinct !DILexicalBlock(scope: !2295, file: !139, line: 475, column: 21)
!2295 = distinct !DILexicalBlock(scope: !2284, file: !139, line: 475, column: 21)
!2296 = !DILocation(line: 475, column: 21, scope: !2295)
!2297 = !DILocation(line: 476, column: 21, scope: !2284)
!2298 = !DILocation(line: 476, column: 21, scope: !2299)
!2299 = distinct !DILexicalBlock(scope: !2300, file: !139, line: 476, column: 21)
!2300 = distinct !DILexicalBlock(scope: !2284, file: !139, line: 476, column: 21)
!2301 = !DILocation(line: 476, column: 21, scope: !2300)
!2302 = !DILocation(line: 477, column: 21, scope: !2284)
!2303 = !DILocation(line: 477, column: 21, scope: !2304)
!2304 = distinct !DILexicalBlock(scope: !2305, file: !139, line: 477, column: 21)
!2305 = distinct !DILexicalBlock(scope: !2284, file: !139, line: 477, column: 21)
!2306 = !DILocation(line: 477, column: 21, scope: !2305)
!2307 = !DILocation(line: 478, column: 21, scope: !2284)
!2308 = !DILocation(line: 478, column: 21, scope: !2309)
!2309 = distinct !DILexicalBlock(scope: !2310, file: !139, line: 478, column: 21)
!2310 = distinct !DILexicalBlock(scope: !2284, file: !139, line: 478, column: 21)
!2311 = !DILocation(line: 478, column: 21, scope: !2310)
!2312 = !DILocation(line: 479, column: 21, scope: !2284)
!2313 = !DILocation(line: 482, column: 21, scope: !2284)
!2314 = !DILocation(line: 483, column: 19, scope: !2284)
!2315 = !DILocation(line: 484, column: 15, scope: !2260)
!2316 = !DILocation(line: 487, column: 15, scope: !2260)
!2317 = !DILocation(line: 489, column: 11, scope: !2189)
!2318 = !DILocation(line: 491, column: 24, scope: !2189)
!2319 = !DILocation(line: 491, column: 31, scope: !2189)
!2320 = !DILocation(line: 492, column: 24, scope: !2189)
!2321 = !DILocation(line: 492, column: 31, scope: !2189)
!2322 = !DILocation(line: 493, column: 24, scope: !2189)
!2323 = !DILocation(line: 493, column: 31, scope: !2189)
!2324 = !DILocation(line: 494, column: 24, scope: !2189)
!2325 = !DILocation(line: 494, column: 31, scope: !2189)
!2326 = !DILocation(line: 495, column: 24, scope: !2189)
!2327 = !DILocation(line: 495, column: 31, scope: !2189)
!2328 = !DILocation(line: 496, column: 24, scope: !2189)
!2329 = !DILocation(line: 496, column: 31, scope: !2189)
!2330 = !DILocation(line: 497, column: 24, scope: !2189)
!2331 = !DILocation(line: 497, column: 31, scope: !2189)
!2332 = !DILocation(line: 498, column: 26, scope: !2189)
!2333 = !DILocation(line: 498, column: 24, scope: !2189)
!2334 = !DILocation(line: 500, column: 15, scope: !2335)
!2335 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 500, column: 15)
!2336 = !DILocation(line: 500, column: 29, scope: !2335)
!2337 = !DILocation(line: 500, column: 15, scope: !2189)
!2338 = !DILocation(line: 502, column: 19, scope: !2339)
!2339 = distinct !DILexicalBlock(scope: !2340, file: !139, line: 502, column: 19)
!2340 = distinct !DILexicalBlock(scope: !2335, file: !139, line: 501, column: 13)
!2341 = !DILocation(line: 502, column: 19, scope: !2340)
!2342 = !DILocation(line: 503, column: 17, scope: !2339)
!2343 = !DILocation(line: 504, column: 15, scope: !2340)
!2344 = !DILocation(line: 509, column: 15, scope: !2345)
!2345 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 509, column: 15)
!2346 = !DILocation(line: 509, column: 33, scope: !2345)
!2347 = !DILocation(line: 509, column: 36, scope: !2345)
!2348 = !DILocation(line: 509, column: 55, scope: !2345)
!2349 = !DILocation(line: 509, column: 58, scope: !2345)
!2350 = !DILocation(line: 509, column: 15, scope: !2189)
!2351 = !DILocation(line: 510, column: 13, scope: !2345)
!2352 = !DILabel(scope: !2189, name: "c_and_shell_escape", file: !139, line: 512)
!2353 = !DILocation(line: 512, column: 9, scope: !2189)
!2354 = !DILocation(line: 513, column: 15, scope: !2355)
!2355 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 513, column: 15)
!2356 = !DILocation(line: 513, column: 29, scope: !2355)
!2357 = !DILocation(line: 514, column: 15, scope: !2355)
!2358 = !DILocation(line: 514, column: 18, scope: !2355)
!2359 = !DILocation(line: 513, column: 15, scope: !2189)
!2360 = !DILocation(line: 515, column: 13, scope: !2355)
!2361 = !DILabel(scope: !2189, name: "c_escape", file: !139, line: 517)
!2362 = !DILocation(line: 517, column: 9, scope: !2189)
!2363 = !DILocation(line: 518, column: 15, scope: !2364)
!2364 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 518, column: 15)
!2365 = !DILocation(line: 518, column: 15, scope: !2189)
!2366 = !DILocation(line: 520, column: 19, scope: !2367)
!2367 = distinct !DILexicalBlock(scope: !2364, file: !139, line: 519, column: 13)
!2368 = !DILocation(line: 520, column: 17, scope: !2367)
!2369 = !DILocation(line: 521, column: 15, scope: !2367)
!2370 = !DILocation(line: 523, column: 11, scope: !2189)
!2371 = !DILocation(line: 526, column: 18, scope: !2372)
!2372 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 526, column: 15)
!2373 = !DILocation(line: 526, column: 26, scope: !2372)
!2374 = !DILocation(line: 526, column: 15, scope: !2189)
!2375 = !DILocation(line: 526, column: 40, scope: !2372)
!2376 = !DILocation(line: 526, column: 47, scope: !2372)
!2377 = !DILocation(line: 526, column: 57, scope: !2372)
!2378 = !DILocation(line: 526, column: 65, scope: !2372)
!2379 = !DILocation(line: 527, column: 13, scope: !2372)
!2380 = !DILocation(line: 528, column: 11, scope: !2189)
!2381 = !DILocation(line: 530, column: 15, scope: !2382)
!2382 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 530, column: 15)
!2383 = !DILocation(line: 530, column: 17, scope: !2382)
!2384 = !DILocation(line: 530, column: 15, scope: !2189)
!2385 = !DILocation(line: 531, column: 13, scope: !2382)
!2386 = !DILocation(line: 532, column: 11, scope: !2189)
!2387 = !DILocation(line: 534, column: 36, scope: !2189)
!2388 = !DILocation(line: 535, column: 11, scope: !2189)
!2389 = !DILocation(line: 548, column: 15, scope: !2390)
!2390 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 548, column: 15)
!2391 = !DILocation(line: 548, column: 29, scope: !2390)
!2392 = !DILocation(line: 549, column: 15, scope: !2390)
!2393 = !DILocation(line: 549, column: 18, scope: !2390)
!2394 = !DILocation(line: 548, column: 15, scope: !2189)
!2395 = !DILocation(line: 550, column: 13, scope: !2390)
!2396 = !DILocation(line: 551, column: 11, scope: !2189)
!2397 = !DILocation(line: 554, column: 36, scope: !2189)
!2398 = !DILocation(line: 555, column: 36, scope: !2189)
!2399 = !DILocation(line: 556, column: 15, scope: !2400)
!2400 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 556, column: 15)
!2401 = !DILocation(line: 556, column: 29, scope: !2400)
!2402 = !DILocation(line: 556, column: 15, scope: !2189)
!2403 = !DILocation(line: 558, column: 19, scope: !2404)
!2404 = distinct !DILexicalBlock(scope: !2405, file: !139, line: 558, column: 19)
!2405 = distinct !DILexicalBlock(scope: !2400, file: !139, line: 557, column: 13)
!2406 = !DILocation(line: 558, column: 19, scope: !2405)
!2407 = !DILocation(line: 559, column: 17, scope: !2404)
!2408 = !DILocation(line: 561, column: 19, scope: !2409)
!2409 = distinct !DILexicalBlock(scope: !2405, file: !139, line: 561, column: 19)
!2410 = !DILocation(line: 561, column: 30, scope: !2409)
!2411 = !DILocation(line: 561, column: 35, scope: !2409)
!2412 = !DILocation(line: 561, column: 19, scope: !2405)
!2413 = !DILocation(line: 566, column: 37, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2409, file: !139, line: 562, column: 17)
!2415 = !DILocation(line: 566, column: 35, scope: !2414)
!2416 = !DILocation(line: 567, column: 30, scope: !2414)
!2417 = !DILocation(line: 568, column: 17, scope: !2414)
!2418 = !DILocation(line: 570, column: 15, scope: !2405)
!2419 = !DILocation(line: 570, column: 15, scope: !2420)
!2420 = distinct !DILexicalBlock(scope: !2421, file: !139, line: 570, column: 15)
!2421 = distinct !DILexicalBlock(scope: !2405, file: !139, line: 570, column: 15)
!2422 = !DILocation(line: 570, column: 15, scope: !2421)
!2423 = !DILocation(line: 571, column: 15, scope: !2405)
!2424 = !DILocation(line: 571, column: 15, scope: !2425)
!2425 = distinct !DILexicalBlock(scope: !2426, file: !139, line: 571, column: 15)
!2426 = distinct !DILexicalBlock(scope: !2405, file: !139, line: 571, column: 15)
!2427 = !DILocation(line: 571, column: 15, scope: !2426)
!2428 = !DILocation(line: 572, column: 15, scope: !2405)
!2429 = !DILocation(line: 572, column: 15, scope: !2430)
!2430 = distinct !DILexicalBlock(scope: !2431, file: !139, line: 572, column: 15)
!2431 = distinct !DILexicalBlock(scope: !2405, file: !139, line: 572, column: 15)
!2432 = !DILocation(line: 572, column: 15, scope: !2431)
!2433 = !DILocation(line: 573, column: 40, scope: !2405)
!2434 = !DILocation(line: 574, column: 13, scope: !2405)
!2435 = !DILocation(line: 575, column: 11, scope: !2189)
!2436 = !DILocation(line: 599, column: 36, scope: !2189)
!2437 = !DILocation(line: 600, column: 11, scope: !2189)
!2438 = !DILocalVariable(name: "m", scope: !2439, file: !139, line: 610, type: !134)
!2439 = distinct !DILexicalBlock(scope: !2189, file: !139, line: 608, column: 11)
!2440 = !DILocation(line: 610, column: 20, scope: !2439)
!2441 = !DILocalVariable(name: "printable", scope: !2439, file: !139, line: 612, type: !27)
!2442 = !DILocation(line: 612, column: 18, scope: !2439)
!2443 = !DILocation(line: 614, column: 17, scope: !2444)
!2444 = distinct !DILexicalBlock(scope: !2439, file: !139, line: 614, column: 17)
!2445 = !DILocation(line: 614, column: 17, scope: !2439)
!2446 = !DILocation(line: 616, column: 19, scope: !2447)
!2447 = distinct !DILexicalBlock(scope: !2444, file: !139, line: 615, column: 15)
!2448 = !DILocation(line: 617, column: 29, scope: !2447)
!2449 = !DILocation(line: 617, column: 41, scope: !2447)
!2450 = !DILocation(line: 617, column: 27, scope: !2447)
!2451 = !DILocation(line: 618, column: 15, scope: !2447)
!2452 = !DILocalVariable(name: "mbstate", scope: !2453, file: !139, line: 621, type: !2454)
!2453 = distinct !DILexicalBlock(scope: !2444, file: !139, line: 620, column: 15)
!2454 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2455, line: 6, baseType: !2456)
!2455 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!2456 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2457, line: 21, baseType: !2458)
!2457 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!2458 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2457, line: 13, size: 64, elements: !2459)
!2459 = !{!2460, !2461}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2458, file: !2457, line: 15, baseType: !72, size: 32)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2458, file: !2457, line: 20, baseType: !2462, size: 32, offset: 32)
!2462 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2458, file: !2457, line: 16, size: 32, elements: !2463)
!2463 = !{!2464, !2465}
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2462, file: !2457, line: 18, baseType: !16, size: 32)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2462, file: !2457, line: 19, baseType: !2466, size: 32)
!2466 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 32, elements: !2467)
!2467 = !{!2468}
!2468 = !DISubrange(count: 4)
!2469 = !DILocation(line: 621, column: 27, scope: !2453)
!2470 = !DILocation(line: 622, column: 17, scope: !2453)
!2471 = !DILocation(line: 624, column: 19, scope: !2453)
!2472 = !DILocation(line: 625, column: 27, scope: !2453)
!2473 = !DILocation(line: 626, column: 21, scope: !2474)
!2474 = distinct !DILexicalBlock(scope: !2453, file: !139, line: 626, column: 21)
!2475 = !DILocation(line: 626, column: 29, scope: !2474)
!2476 = !DILocation(line: 626, column: 21, scope: !2453)
!2477 = !DILocation(line: 627, column: 37, scope: !2474)
!2478 = !DILocation(line: 627, column: 29, scope: !2474)
!2479 = !DILocation(line: 627, column: 27, scope: !2474)
!2480 = !DILocation(line: 627, column: 19, scope: !2474)
!2481 = !DILocation(line: 629, column: 17, scope: !2453)
!2482 = !DILocalVariable(name: "w", scope: !2483, file: !139, line: 631, type: !2484)
!2483 = distinct !DILexicalBlock(scope: !2453, file: !139, line: 630, column: 19)
!2484 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !135, line: 74, baseType: !72)
!2485 = !DILocation(line: 631, column: 29, scope: !2483)
!2486 = !DILocalVariable(name: "bytes", scope: !2483, file: !139, line: 632, type: !134)
!2487 = !DILocation(line: 632, column: 28, scope: !2483)
!2488 = !DILocation(line: 632, column: 50, scope: !2483)
!2489 = !DILocation(line: 632, column: 54, scope: !2483)
!2490 = !DILocation(line: 632, column: 58, scope: !2483)
!2491 = !DILocation(line: 632, column: 56, scope: !2483)
!2492 = !DILocation(line: 633, column: 45, scope: !2483)
!2493 = !DILocation(line: 633, column: 56, scope: !2483)
!2494 = !DILocation(line: 633, column: 60, scope: !2483)
!2495 = !DILocation(line: 633, column: 58, scope: !2483)
!2496 = !DILocation(line: 633, column: 53, scope: !2483)
!2497 = !DILocation(line: 632, column: 36, scope: !2483)
!2498 = !DILocation(line: 634, column: 25, scope: !2499)
!2499 = distinct !DILexicalBlock(scope: !2483, file: !139, line: 634, column: 25)
!2500 = !DILocation(line: 634, column: 31, scope: !2499)
!2501 = !DILocation(line: 634, column: 25, scope: !2483)
!2502 = !DILocation(line: 635, column: 23, scope: !2499)
!2503 = !DILocation(line: 636, column: 30, scope: !2504)
!2504 = distinct !DILexicalBlock(scope: !2499, file: !139, line: 636, column: 30)
!2505 = !DILocation(line: 636, column: 36, scope: !2504)
!2506 = !DILocation(line: 636, column: 30, scope: !2499)
!2507 = !DILocation(line: 638, column: 35, scope: !2508)
!2508 = distinct !DILexicalBlock(scope: !2504, file: !139, line: 637, column: 23)
!2509 = !DILocation(line: 639, column: 25, scope: !2508)
!2510 = !DILocation(line: 641, column: 30, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2504, file: !139, line: 641, column: 30)
!2512 = !DILocation(line: 641, column: 36, scope: !2511)
!2513 = !DILocation(line: 641, column: 30, scope: !2504)
!2514 = !DILocation(line: 643, column: 35, scope: !2515)
!2515 = distinct !DILexicalBlock(scope: !2511, file: !139, line: 642, column: 23)
!2516 = !DILocation(line: 644, column: 25, scope: !2515)
!2517 = !DILocation(line: 644, column: 32, scope: !2515)
!2518 = !DILocation(line: 644, column: 36, scope: !2515)
!2519 = !DILocation(line: 644, column: 34, scope: !2515)
!2520 = !DILocation(line: 644, column: 40, scope: !2515)
!2521 = !DILocation(line: 644, column: 38, scope: !2515)
!2522 = !DILocation(line: 644, column: 48, scope: !2515)
!2523 = !DILocation(line: 644, column: 51, scope: !2515)
!2524 = !DILocation(line: 644, column: 55, scope: !2515)
!2525 = !DILocation(line: 644, column: 59, scope: !2515)
!2526 = !DILocation(line: 644, column: 57, scope: !2515)
!2527 = !DILocation(line: 0, scope: !2515)
!2528 = !DILocation(line: 645, column: 28, scope: !2515)
!2529 = distinct !{!2529, !2516, !2528}
!2530 = !DILocation(line: 646, column: 25, scope: !2515)
!2531 = !DILocation(line: 654, column: 44, scope: !2532)
!2532 = distinct !DILexicalBlock(scope: !2533, file: !139, line: 654, column: 29)
!2533 = distinct !DILexicalBlock(scope: !2511, file: !139, line: 649, column: 23)
!2534 = !DILocation(line: 655, column: 29, scope: !2532)
!2535 = !DILocation(line: 655, column: 32, scope: !2532)
!2536 = !DILocation(line: 655, column: 46, scope: !2532)
!2537 = !DILocation(line: 654, column: 29, scope: !2533)
!2538 = !DILocalVariable(name: "j", scope: !2539, file: !139, line: 657, type: !134)
!2539 = distinct !DILexicalBlock(scope: !2532, file: !139, line: 656, column: 27)
!2540 = !DILocation(line: 657, column: 36, scope: !2539)
!2541 = !DILocation(line: 658, column: 36, scope: !2542)
!2542 = distinct !DILexicalBlock(scope: !2539, file: !139, line: 658, column: 29)
!2543 = !DILocation(line: 658, column: 34, scope: !2542)
!2544 = !DILocation(line: 658, column: 41, scope: !2545)
!2545 = distinct !DILexicalBlock(scope: !2542, file: !139, line: 658, column: 29)
!2546 = !DILocation(line: 658, column: 45, scope: !2545)
!2547 = !DILocation(line: 658, column: 43, scope: !2545)
!2548 = !DILocation(line: 658, column: 29, scope: !2542)
!2549 = !DILocation(line: 659, column: 39, scope: !2545)
!2550 = !DILocation(line: 659, column: 43, scope: !2545)
!2551 = !DILocation(line: 659, column: 47, scope: !2545)
!2552 = !DILocation(line: 659, column: 45, scope: !2545)
!2553 = !DILocation(line: 659, column: 51, scope: !2545)
!2554 = !DILocation(line: 659, column: 49, scope: !2545)
!2555 = !DILocation(line: 659, column: 31, scope: !2545)
!2556 = !DILocation(line: 663, column: 35, scope: !2557)
!2557 = distinct !DILexicalBlock(scope: !2545, file: !139, line: 660, column: 33)
!2558 = !DILocation(line: 666, column: 35, scope: !2557)
!2559 = !DILocation(line: 667, column: 33, scope: !2557)
!2560 = !DILocation(line: 658, column: 53, scope: !2545)
!2561 = !DILocation(line: 658, column: 29, scope: !2545)
!2562 = distinct !{!2562, !2548, !2563}
!2563 = !DILocation(line: 667, column: 33, scope: !2542)
!2564 = !DILocation(line: 668, column: 27, scope: !2539)
!2565 = !DILocation(line: 670, column: 41, scope: !2566)
!2566 = distinct !DILexicalBlock(scope: !2533, file: !139, line: 670, column: 29)
!2567 = !DILocation(line: 670, column: 31, scope: !2566)
!2568 = !DILocation(line: 670, column: 29, scope: !2533)
!2569 = !DILocation(line: 671, column: 37, scope: !2566)
!2570 = !DILocation(line: 671, column: 27, scope: !2566)
!2571 = !DILocation(line: 672, column: 30, scope: !2533)
!2572 = !DILocation(line: 672, column: 27, scope: !2533)
!2573 = !DILocation(line: 674, column: 19, scope: !2483)
!2574 = !DILocation(line: 675, column: 26, scope: !2453)
!2575 = !DILocation(line: 675, column: 24, scope: !2453)
!2576 = distinct !{!2576, !2481, !2577}
!2577 = !DILocation(line: 675, column: 44, scope: !2453)
!2578 = !DILocation(line: 678, column: 40, scope: !2439)
!2579 = !DILocation(line: 678, column: 38, scope: !2439)
!2580 = !DILocation(line: 680, column: 21, scope: !2581)
!2581 = distinct !DILexicalBlock(scope: !2439, file: !139, line: 680, column: 17)
!2582 = !DILocation(line: 680, column: 19, scope: !2581)
!2583 = !DILocation(line: 680, column: 23, scope: !2581)
!2584 = !DILocation(line: 680, column: 27, scope: !2581)
!2585 = !DILocation(line: 680, column: 45, scope: !2581)
!2586 = !DILocation(line: 680, column: 50, scope: !2581)
!2587 = !DILocation(line: 680, column: 17, scope: !2439)
!2588 = !DILocalVariable(name: "ilim", scope: !2589, file: !139, line: 684, type: !134)
!2589 = distinct !DILexicalBlock(scope: !2581, file: !139, line: 681, column: 15)
!2590 = !DILocation(line: 684, column: 24, scope: !2589)
!2591 = !DILocation(line: 684, column: 31, scope: !2589)
!2592 = !DILocation(line: 684, column: 35, scope: !2589)
!2593 = !DILocation(line: 684, column: 33, scope: !2589)
!2594 = !DILocation(line: 686, column: 17, scope: !2589)
!2595 = !DILocation(line: 688, column: 25, scope: !2596)
!2596 = distinct !DILexicalBlock(scope: !2597, file: !139, line: 688, column: 25)
!2597 = distinct !DILexicalBlock(scope: !2598, file: !139, line: 687, column: 19)
!2598 = distinct !DILexicalBlock(scope: !2599, file: !139, line: 686, column: 17)
!2599 = distinct !DILexicalBlock(scope: !2589, file: !139, line: 686, column: 17)
!2600 = !DILocation(line: 688, column: 43, scope: !2596)
!2601 = !DILocation(line: 688, column: 48, scope: !2596)
!2602 = !DILocation(line: 688, column: 25, scope: !2597)
!2603 = !DILocation(line: 690, column: 25, scope: !2604)
!2604 = distinct !DILexicalBlock(scope: !2596, file: !139, line: 689, column: 23)
!2605 = !DILocation(line: 690, column: 25, scope: !2606)
!2606 = distinct !DILexicalBlock(scope: !2607, file: !139, line: 690, column: 25)
!2607 = distinct !DILexicalBlock(scope: !2604, file: !139, line: 690, column: 25)
!2608 = !DILocation(line: 690, column: 25, scope: !2607)
!2609 = !DILocation(line: 690, column: 25, scope: !2610)
!2610 = distinct !DILexicalBlock(scope: !2607, file: !139, line: 690, column: 25)
!2611 = !DILocation(line: 690, column: 25, scope: !2612)
!2612 = distinct !DILexicalBlock(scope: !2610, file: !139, line: 690, column: 25)
!2613 = !DILocation(line: 690, column: 25, scope: !2614)
!2614 = distinct !DILexicalBlock(scope: !2615, file: !139, line: 690, column: 25)
!2615 = distinct !DILexicalBlock(scope: !2612, file: !139, line: 690, column: 25)
!2616 = !DILocation(line: 690, column: 25, scope: !2615)
!2617 = !DILocation(line: 690, column: 25, scope: !2618)
!2618 = distinct !DILexicalBlock(scope: !2619, file: !139, line: 690, column: 25)
!2619 = distinct !DILexicalBlock(scope: !2612, file: !139, line: 690, column: 25)
!2620 = !DILocation(line: 690, column: 25, scope: !2619)
!2621 = !DILocation(line: 690, column: 25, scope: !2622)
!2622 = distinct !DILexicalBlock(scope: !2623, file: !139, line: 690, column: 25)
!2623 = distinct !DILexicalBlock(scope: !2612, file: !139, line: 690, column: 25)
!2624 = !DILocation(line: 690, column: 25, scope: !2623)
!2625 = !DILocation(line: 690, column: 25, scope: !2626)
!2626 = distinct !DILexicalBlock(scope: !2627, file: !139, line: 690, column: 25)
!2627 = distinct !DILexicalBlock(scope: !2607, file: !139, line: 690, column: 25)
!2628 = !DILocation(line: 690, column: 25, scope: !2627)
!2629 = !DILocation(line: 691, column: 25, scope: !2604)
!2630 = !DILocation(line: 691, column: 25, scope: !2631)
!2631 = distinct !DILexicalBlock(scope: !2632, file: !139, line: 691, column: 25)
!2632 = distinct !DILexicalBlock(scope: !2604, file: !139, line: 691, column: 25)
!2633 = !DILocation(line: 691, column: 25, scope: !2632)
!2634 = !DILocation(line: 692, column: 25, scope: !2604)
!2635 = !DILocation(line: 692, column: 25, scope: !2636)
!2636 = distinct !DILexicalBlock(scope: !2637, file: !139, line: 692, column: 25)
!2637 = distinct !DILexicalBlock(scope: !2604, file: !139, line: 692, column: 25)
!2638 = !DILocation(line: 692, column: 25, scope: !2637)
!2639 = !DILocation(line: 693, column: 36, scope: !2604)
!2640 = !DILocation(line: 693, column: 38, scope: !2604)
!2641 = !DILocation(line: 693, column: 33, scope: !2604)
!2642 = !DILocation(line: 693, column: 29, scope: !2604)
!2643 = !DILocation(line: 693, column: 27, scope: !2604)
!2644 = !DILocation(line: 694, column: 23, scope: !2604)
!2645 = !DILocation(line: 695, column: 30, scope: !2646)
!2646 = distinct !DILexicalBlock(scope: !2596, file: !139, line: 695, column: 30)
!2647 = !DILocation(line: 695, column: 30, scope: !2596)
!2648 = !DILocation(line: 697, column: 25, scope: !2649)
!2649 = distinct !DILexicalBlock(scope: !2646, file: !139, line: 696, column: 23)
!2650 = !DILocation(line: 697, column: 25, scope: !2651)
!2651 = distinct !DILexicalBlock(scope: !2652, file: !139, line: 697, column: 25)
!2652 = distinct !DILexicalBlock(scope: !2649, file: !139, line: 697, column: 25)
!2653 = !DILocation(line: 697, column: 25, scope: !2652)
!2654 = !DILocation(line: 698, column: 40, scope: !2649)
!2655 = !DILocation(line: 699, column: 23, scope: !2649)
!2656 = !DILocation(line: 700, column: 25, scope: !2657)
!2657 = distinct !DILexicalBlock(scope: !2597, file: !139, line: 700, column: 25)
!2658 = !DILocation(line: 700, column: 33, scope: !2657)
!2659 = !DILocation(line: 700, column: 35, scope: !2657)
!2660 = !DILocation(line: 700, column: 30, scope: !2657)
!2661 = !DILocation(line: 700, column: 25, scope: !2597)
!2662 = !DILocation(line: 701, column: 23, scope: !2657)
!2663 = !DILocation(line: 702, column: 21, scope: !2597)
!2664 = !DILocation(line: 702, column: 21, scope: !2665)
!2665 = distinct !DILexicalBlock(scope: !2666, file: !139, line: 702, column: 21)
!2666 = distinct !DILexicalBlock(scope: !2597, file: !139, line: 702, column: 21)
!2667 = !DILocation(line: 702, column: 21, scope: !2666)
!2668 = !DILocation(line: 702, column: 21, scope: !2669)
!2669 = distinct !DILexicalBlock(scope: !2665, file: !139, line: 702, column: 21)
!2670 = !DILocation(line: 702, column: 21, scope: !2671)
!2671 = distinct !DILexicalBlock(scope: !2672, file: !139, line: 702, column: 21)
!2672 = distinct !DILexicalBlock(scope: !2669, file: !139, line: 702, column: 21)
!2673 = !DILocation(line: 702, column: 21, scope: !2672)
!2674 = !DILocation(line: 702, column: 21, scope: !2675)
!2675 = distinct !DILexicalBlock(scope: !2676, file: !139, line: 702, column: 21)
!2676 = distinct !DILexicalBlock(scope: !2669, file: !139, line: 702, column: 21)
!2677 = !DILocation(line: 702, column: 21, scope: !2676)
!2678 = !DILocation(line: 703, column: 21, scope: !2597)
!2679 = !DILocation(line: 703, column: 21, scope: !2680)
!2680 = distinct !DILexicalBlock(scope: !2681, file: !139, line: 703, column: 21)
!2681 = distinct !DILexicalBlock(scope: !2597, file: !139, line: 703, column: 21)
!2682 = !DILocation(line: 703, column: 21, scope: !2681)
!2683 = !DILocation(line: 704, column: 25, scope: !2597)
!2684 = !DILocation(line: 704, column: 29, scope: !2597)
!2685 = !DILocation(line: 704, column: 23, scope: !2597)
!2686 = !DILocation(line: 686, column: 17, scope: !2598)
!2687 = distinct !{!2687, !2688, !2689}
!2688 = !DILocation(line: 686, column: 17, scope: !2599)
!2689 = !DILocation(line: 705, column: 19, scope: !2599)
!2690 = !DILocation(line: 707, column: 17, scope: !2589)
!2691 = !DILocation(line: 710, column: 9, scope: !2189)
!2692 = !DILocation(line: 712, column: 16, scope: !2693)
!2693 = distinct !DILexicalBlock(scope: !2135, file: !139, line: 712, column: 11)
!2694 = !DILocation(line: 712, column: 34, scope: !2693)
!2695 = !DILocation(line: 712, column: 37, scope: !2693)
!2696 = !DILocation(line: 712, column: 51, scope: !2693)
!2697 = !DILocation(line: 713, column: 15, scope: !2693)
!2698 = !DILocation(line: 713, column: 18, scope: !2693)
!2699 = !DILocation(line: 714, column: 14, scope: !2693)
!2700 = !DILocation(line: 714, column: 17, scope: !2693)
!2701 = !DILocation(line: 715, column: 14, scope: !2693)
!2702 = !DILocation(line: 715, column: 17, scope: !2693)
!2703 = !DILocation(line: 715, column: 33, scope: !2693)
!2704 = !DILocation(line: 715, column: 35, scope: !2693)
!2705 = !DILocation(line: 715, column: 51, scope: !2693)
!2706 = !DILocation(line: 715, column: 53, scope: !2693)
!2707 = !DILocation(line: 715, column: 47, scope: !2693)
!2708 = !DILocation(line: 715, column: 65, scope: !2693)
!2709 = !DILocation(line: 716, column: 11, scope: !2693)
!2710 = !DILocation(line: 716, column: 15, scope: !2693)
!2711 = !DILocation(line: 712, column: 11, scope: !2135)
!2712 = !DILocation(line: 717, column: 9, scope: !2693)
!2713 = !DILabel(scope: !2135, name: "store_escape", file: !139, line: 719)
!2714 = !DILocation(line: 719, column: 5, scope: !2135)
!2715 = !DILocation(line: 720, column: 7, scope: !2135)
!2716 = !DILocation(line: 720, column: 7, scope: !2717)
!2717 = distinct !DILexicalBlock(scope: !2718, file: !139, line: 720, column: 7)
!2718 = distinct !DILexicalBlock(scope: !2135, file: !139, line: 720, column: 7)
!2719 = !DILocation(line: 720, column: 7, scope: !2718)
!2720 = !DILocation(line: 720, column: 7, scope: !2721)
!2721 = distinct !DILexicalBlock(scope: !2718, file: !139, line: 720, column: 7)
!2722 = !DILocation(line: 720, column: 7, scope: !2723)
!2723 = distinct !DILexicalBlock(scope: !2721, file: !139, line: 720, column: 7)
!2724 = !DILocation(line: 720, column: 7, scope: !2725)
!2725 = distinct !DILexicalBlock(scope: !2726, file: !139, line: 720, column: 7)
!2726 = distinct !DILexicalBlock(scope: !2723, file: !139, line: 720, column: 7)
!2727 = !DILocation(line: 720, column: 7, scope: !2726)
!2728 = !DILocation(line: 720, column: 7, scope: !2729)
!2729 = distinct !DILexicalBlock(scope: !2730, file: !139, line: 720, column: 7)
!2730 = distinct !DILexicalBlock(scope: !2723, file: !139, line: 720, column: 7)
!2731 = !DILocation(line: 720, column: 7, scope: !2730)
!2732 = !DILocation(line: 720, column: 7, scope: !2733)
!2733 = distinct !DILexicalBlock(scope: !2734, file: !139, line: 720, column: 7)
!2734 = distinct !DILexicalBlock(scope: !2723, file: !139, line: 720, column: 7)
!2735 = !DILocation(line: 720, column: 7, scope: !2734)
!2736 = !DILocation(line: 720, column: 7, scope: !2737)
!2737 = distinct !DILexicalBlock(scope: !2738, file: !139, line: 720, column: 7)
!2738 = distinct !DILexicalBlock(scope: !2718, file: !139, line: 720, column: 7)
!2739 = !DILocation(line: 720, column: 7, scope: !2738)
!2740 = !DILabel(scope: !2135, name: "store_c", file: !139, line: 722)
!2741 = !DILocation(line: 722, column: 5, scope: !2135)
!2742 = !DILocation(line: 723, column: 7, scope: !2135)
!2743 = !DILocation(line: 723, column: 7, scope: !2744)
!2744 = distinct !DILexicalBlock(scope: !2745, file: !139, line: 723, column: 7)
!2745 = distinct !DILexicalBlock(scope: !2135, file: !139, line: 723, column: 7)
!2746 = !DILocation(line: 723, column: 7, scope: !2745)
!2747 = !DILocation(line: 723, column: 7, scope: !2748)
!2748 = distinct !DILexicalBlock(scope: !2744, file: !139, line: 723, column: 7)
!2749 = !DILocation(line: 723, column: 7, scope: !2750)
!2750 = distinct !DILexicalBlock(scope: !2751, file: !139, line: 723, column: 7)
!2751 = distinct !DILexicalBlock(scope: !2748, file: !139, line: 723, column: 7)
!2752 = !DILocation(line: 723, column: 7, scope: !2751)
!2753 = !DILocation(line: 723, column: 7, scope: !2754)
!2754 = distinct !DILexicalBlock(scope: !2755, file: !139, line: 723, column: 7)
!2755 = distinct !DILexicalBlock(scope: !2748, file: !139, line: 723, column: 7)
!2756 = !DILocation(line: 723, column: 7, scope: !2755)
!2757 = !DILocation(line: 724, column: 7, scope: !2135)
!2758 = !DILocation(line: 724, column: 7, scope: !2759)
!2759 = distinct !DILexicalBlock(scope: !2760, file: !139, line: 724, column: 7)
!2760 = distinct !DILexicalBlock(scope: !2135, file: !139, line: 724, column: 7)
!2761 = !DILocation(line: 724, column: 7, scope: !2760)
!2762 = !DILocation(line: 726, column: 13, scope: !2763)
!2763 = distinct !DILexicalBlock(scope: !2135, file: !139, line: 726, column: 11)
!2764 = !DILocation(line: 726, column: 11, scope: !2135)
!2765 = !DILocation(line: 727, column: 38, scope: !2763)
!2766 = !DILocation(line: 727, column: 9, scope: !2763)
!2767 = !DILocation(line: 728, column: 5, scope: !2135)
!2768 = !DILocation(line: 400, column: 75, scope: !2124)
!2769 = !DILocation(line: 400, column: 3, scope: !2124)
!2770 = distinct !{!2770, !2133, !2771}
!2771 = !DILocation(line: 728, column: 5, scope: !2121)
!2772 = !DILocation(line: 730, column: 7, scope: !2773)
!2773 = distinct !DILexicalBlock(scope: !1981, file: !139, line: 730, column: 7)
!2774 = !DILocation(line: 730, column: 11, scope: !2773)
!2775 = !DILocation(line: 730, column: 16, scope: !2773)
!2776 = !DILocation(line: 730, column: 19, scope: !2773)
!2777 = !DILocation(line: 730, column: 33, scope: !2773)
!2778 = !DILocation(line: 731, column: 7, scope: !2773)
!2779 = !DILocation(line: 731, column: 10, scope: !2773)
!2780 = !DILocation(line: 730, column: 7, scope: !1981)
!2781 = !DILocation(line: 732, column: 5, scope: !2773)
!2782 = !DILocation(line: 738, column: 7, scope: !2783)
!2783 = distinct !DILexicalBlock(scope: !1981, file: !139, line: 738, column: 7)
!2784 = !DILocation(line: 738, column: 21, scope: !2783)
!2785 = !DILocation(line: 738, column: 51, scope: !2783)
!2786 = !DILocation(line: 738, column: 56, scope: !2783)
!2787 = !DILocation(line: 739, column: 7, scope: !2783)
!2788 = !DILocation(line: 739, column: 10, scope: !2783)
!2789 = !DILocation(line: 738, column: 7, scope: !1981)
!2790 = !DILocation(line: 741, column: 11, scope: !2791)
!2791 = distinct !DILexicalBlock(scope: !2792, file: !139, line: 741, column: 11)
!2792 = distinct !DILexicalBlock(scope: !2783, file: !139, line: 740, column: 5)
!2793 = !DILocation(line: 741, column: 11, scope: !2792)
!2794 = !DILocation(line: 742, column: 42, scope: !2791)
!2795 = !DILocation(line: 742, column: 50, scope: !2791)
!2796 = !DILocation(line: 742, column: 67, scope: !2791)
!2797 = !DILocation(line: 742, column: 72, scope: !2791)
!2798 = !DILocation(line: 744, column: 42, scope: !2791)
!2799 = !DILocation(line: 744, column: 49, scope: !2791)
!2800 = !DILocation(line: 745, column: 42, scope: !2791)
!2801 = !DILocation(line: 745, column: 54, scope: !2791)
!2802 = !DILocation(line: 742, column: 16, scope: !2791)
!2803 = !DILocation(line: 742, column: 9, scope: !2791)
!2804 = !DILocation(line: 746, column: 18, scope: !2805)
!2805 = distinct !DILexicalBlock(scope: !2791, file: !139, line: 746, column: 16)
!2806 = !DILocation(line: 746, column: 29, scope: !2805)
!2807 = !DILocation(line: 746, column: 32, scope: !2805)
!2808 = !DILocation(line: 746, column: 16, scope: !2791)
!2809 = !DILocation(line: 749, column: 24, scope: !2810)
!2810 = distinct !DILexicalBlock(scope: !2805, file: !139, line: 747, column: 9)
!2811 = !DILocation(line: 749, column: 22, scope: !2810)
!2812 = !DILocation(line: 750, column: 15, scope: !2810)
!2813 = !DILocation(line: 751, column: 11, scope: !2810)
!2814 = !DILocation(line: 753, column: 5, scope: !2792)
!2815 = !DILocation(line: 755, column: 7, scope: !2816)
!2816 = distinct !DILexicalBlock(scope: !1981, file: !139, line: 755, column: 7)
!2817 = !DILocation(line: 755, column: 20, scope: !2816)
!2818 = !DILocation(line: 755, column: 24, scope: !2816)
!2819 = !DILocation(line: 755, column: 7, scope: !1981)
!2820 = !DILocation(line: 756, column: 5, scope: !2816)
!2821 = !DILocation(line: 756, column: 13, scope: !2822)
!2822 = distinct !DILexicalBlock(scope: !2823, file: !139, line: 756, column: 5)
!2823 = distinct !DILexicalBlock(scope: !2816, file: !139, line: 756, column: 5)
!2824 = !DILocation(line: 756, column: 12, scope: !2822)
!2825 = !DILocation(line: 756, column: 5, scope: !2823)
!2826 = !DILocation(line: 757, column: 7, scope: !2822)
!2827 = !DILocation(line: 757, column: 7, scope: !2828)
!2828 = distinct !DILexicalBlock(scope: !2829, file: !139, line: 757, column: 7)
!2829 = distinct !DILexicalBlock(scope: !2822, file: !139, line: 757, column: 7)
!2830 = !DILocation(line: 757, column: 7, scope: !2829)
!2831 = !DILocation(line: 756, column: 39, scope: !2822)
!2832 = !DILocation(line: 756, column: 5, scope: !2822)
!2833 = distinct !{!2833, !2825, !2834}
!2834 = !DILocation(line: 757, column: 7, scope: !2823)
!2835 = !DILocation(line: 759, column: 7, scope: !2836)
!2836 = distinct !DILexicalBlock(scope: !1981, file: !139, line: 759, column: 7)
!2837 = !DILocation(line: 759, column: 13, scope: !2836)
!2838 = !DILocation(line: 759, column: 11, scope: !2836)
!2839 = !DILocation(line: 759, column: 7, scope: !1981)
!2840 = !DILocation(line: 760, column: 5, scope: !2836)
!2841 = !DILocation(line: 760, column: 12, scope: !2836)
!2842 = !DILocation(line: 760, column: 17, scope: !2836)
!2843 = !DILocation(line: 761, column: 10, scope: !1981)
!2844 = !DILocation(line: 761, column: 3, scope: !1981)
!2845 = !DILabel(scope: !1981, name: "force_outer_quoting_style", file: !139, line: 763)
!2846 = !DILocation(line: 763, column: 2, scope: !1981)
!2847 = !DILocation(line: 766, column: 7, scope: !2848)
!2848 = distinct !DILexicalBlock(scope: !1981, file: !139, line: 766, column: 7)
!2849 = !DILocation(line: 766, column: 21, scope: !2848)
!2850 = !DILocation(line: 766, column: 51, scope: !2848)
!2851 = !DILocation(line: 766, column: 54, scope: !2848)
!2852 = !DILocation(line: 766, column: 7, scope: !1981)
!2853 = !DILocation(line: 767, column: 19, scope: !2848)
!2854 = !DILocation(line: 767, column: 5, scope: !2848)
!2855 = !DILocation(line: 768, column: 36, scope: !1981)
!2856 = !DILocation(line: 768, column: 44, scope: !1981)
!2857 = !DILocation(line: 768, column: 56, scope: !1981)
!2858 = !DILocation(line: 768, column: 61, scope: !1981)
!2859 = !DILocation(line: 769, column: 36, scope: !1981)
!2860 = !DILocation(line: 770, column: 36, scope: !1981)
!2861 = !DILocation(line: 770, column: 42, scope: !1981)
!2862 = !DILocation(line: 771, column: 36, scope: !1981)
!2863 = !DILocation(line: 771, column: 48, scope: !1981)
!2864 = !DILocation(line: 768, column: 10, scope: !1981)
!2865 = !DILocation(line: 768, column: 3, scope: !1981)
!2866 = !DILocation(line: 772, column: 1, scope: !1981)
!2867 = distinct !DISubprogram(name: "gettext_quote", scope: !139, file: !139, line: 207, type: !2868, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !115, retainedNodes: !4)
!2868 = !DISubroutineType(types: !2869)
!2869 = !{!69, !69, !118}
!2870 = !DILocalVariable(name: "msgid", arg: 1, scope: !2867, file: !139, line: 207, type: !69)
!2871 = !DILocation(line: 207, column: 28, scope: !2867)
!2872 = !DILocalVariable(name: "s", arg: 2, scope: !2867, file: !139, line: 207, type: !118)
!2873 = !DILocation(line: 207, column: 54, scope: !2867)
!2874 = !DILocalVariable(name: "translation", scope: !2867, file: !139, line: 209, type: !69)
!2875 = !DILocation(line: 209, column: 15, scope: !2867)
!2876 = !DILocation(line: 209, column: 29, scope: !2867)
!2877 = !DILocalVariable(name: "locale_code", scope: !2867, file: !139, line: 210, type: !69)
!2878 = !DILocation(line: 210, column: 15, scope: !2867)
!2879 = !DILocation(line: 212, column: 7, scope: !2880)
!2880 = distinct !DILexicalBlock(scope: !2867, file: !139, line: 212, column: 7)
!2881 = !DILocation(line: 212, column: 22, scope: !2880)
!2882 = !DILocation(line: 212, column: 19, scope: !2880)
!2883 = !DILocation(line: 212, column: 7, scope: !2867)
!2884 = !DILocation(line: 213, column: 12, scope: !2880)
!2885 = !DILocation(line: 213, column: 5, scope: !2880)
!2886 = !DILocation(line: 233, column: 17, scope: !2867)
!2887 = !DILocation(line: 233, column: 15, scope: !2867)
!2888 = !DILocation(line: 234, column: 7, scope: !2889)
!2889 = distinct !DILexicalBlock(scope: !2867, file: !139, line: 234, column: 7)
!2890 = !DILocation(line: 235, column: 12, scope: !2889)
!2891 = !DILocation(line: 235, column: 21, scope: !2889)
!2892 = !DILocation(line: 235, column: 5, scope: !2889)
!2893 = !DILocation(line: 236, column: 7, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2867, file: !139, line: 236, column: 7)
!2895 = !DILocation(line: 237, column: 12, scope: !2894)
!2896 = !DILocation(line: 237, column: 21, scope: !2894)
!2897 = !DILocation(line: 237, column: 5, scope: !2894)
!2898 = !DILocation(line: 239, column: 11, scope: !2867)
!2899 = !DILocation(line: 239, column: 13, scope: !2867)
!2900 = !DILocation(line: 239, column: 3, scope: !2867)
!2901 = !DILocation(line: 240, column: 1, scope: !2867)
!2902 = distinct !DISubprogram(name: "quotearg_char", scope: !139, file: !139, line: 991, type: !2903, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!2903 = !DISubroutineType(types: !2904)
!2904 = !{!6, !69, !7}
!2905 = !DILocalVariable(name: "arg", arg: 1, scope: !2902, file: !139, line: 991, type: !69)
!2906 = !DILocation(line: 991, column: 28, scope: !2902)
!2907 = !DILocalVariable(name: "ch", arg: 2, scope: !2902, file: !139, line: 991, type: !7)
!2908 = !DILocation(line: 991, column: 38, scope: !2902)
!2909 = !DILocation(line: 993, column: 29, scope: !2902)
!2910 = !DILocation(line: 993, column: 44, scope: !2902)
!2911 = !DILocation(line: 993, column: 10, scope: !2902)
!2912 = !DILocation(line: 993, column: 3, scope: !2902)
!2913 = distinct !DISubprogram(name: "quotearg_colon", scope: !139, file: !139, line: 997, type: !2914, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!2914 = !DISubroutineType(types: !2915)
!2915 = !{!6, !69}
!2916 = !DILocalVariable(name: "arg", arg: 1, scope: !2913, file: !139, line: 997, type: !69)
!2917 = !DILocation(line: 997, column: 29, scope: !2913)
!2918 = !DILocation(line: 999, column: 25, scope: !2913)
!2919 = !DILocation(line: 999, column: 10, scope: !2913)
!2920 = !DILocation(line: 999, column: 3, scope: !2913)
!2921 = distinct !DISubprogram(name: "quote_n_mem", scope: !139, file: !139, line: 1061, type: !2922, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!2922 = !DISubroutineType(types: !2923)
!2923 = !{!69, !72, !69, !134}
!2924 = !DILocalVariable(name: "n", arg: 1, scope: !2921, file: !139, line: 1061, type: !72)
!2925 = !DILocation(line: 1061, column: 18, scope: !2921)
!2926 = !DILocalVariable(name: "arg", arg: 2, scope: !2921, file: !139, line: 1061, type: !69)
!2927 = !DILocation(line: 1061, column: 33, scope: !2921)
!2928 = !DILocalVariable(name: "argsize", arg: 3, scope: !2921, file: !139, line: 1061, type: !134)
!2929 = !DILocation(line: 1061, column: 45, scope: !2921)
!2930 = !DILocation(line: 1063, column: 30, scope: !2921)
!2931 = !DILocation(line: 1063, column: 33, scope: !2921)
!2932 = !DILocation(line: 1063, column: 38, scope: !2921)
!2933 = !DILocation(line: 1063, column: 10, scope: !2921)
!2934 = !DILocation(line: 1063, column: 3, scope: !2921)
!2935 = !DILocalVariable(name: "n", arg: 1, scope: !2936, file: !139, line: 1061, type: !72)
!2936 = distinct !DISubprogram(name: "quote_n_mem", scope: !139, file: !139, line: 1061, type: !2922, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2937, retainedNodes: !4)
!2937 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !2938, nameTableKind: None)
!2938 = !{!2939, !2941, !2943, !2952, !2954, !2956, !2963, !2965}
!2939 = !DIGlobalVariableExpression(var: !2940, expr: !DIExpression())
!2940 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2937, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!2941 = !DIGlobalVariableExpression(var: !2942, expr: !DIExpression())
!2942 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2937, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!2943 = !DIGlobalVariableExpression(var: !2944, expr: !DIExpression())
!2944 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2937, file: !139, line: 1052, type: !2945, isLocal: false, isDefinition: true)
!2945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !2946)
!2946 = !{!2947, !2948, !2949, !2950, !2951}
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2945, file: !139, line: 68, baseType: !118, size: 32)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2945, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2945, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2945, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2945, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!2952 = !DIGlobalVariableExpression(var: !2953, expr: !DIExpression())
!2953 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2937, file: !139, line: 116, type: !2945, isLocal: true, isDefinition: true)
!2954 = !DIGlobalVariableExpression(var: !2955, expr: !DIExpression())
!2955 = distinct !DIGlobalVariable(name: "slot0", scope: !2937, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!2956 = !DIGlobalVariableExpression(var: !2957, expr: !DIExpression())
!2957 = distinct !DIGlobalVariable(name: "slotvec", scope: !2937, file: !139, line: 845, type: !2958, isLocal: true, isDefinition: true)
!2958 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2959, size: 64)
!2959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !2960)
!2960 = !{!2961, !2962}
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2959, file: !139, line: 836, baseType: !134, size: 64)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2959, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!2963 = !DIGlobalVariableExpression(var: !2964, expr: !DIExpression())
!2964 = distinct !DIGlobalVariable(name: "nslots", scope: !2937, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!2965 = !DIGlobalVariableExpression(var: !2966, expr: !DIExpression())
!2966 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2937, file: !139, line: 844, type: !2959, isLocal: true, isDefinition: true)
!2967 = !DILocalVariable(name: "arg", arg: 2, scope: !2936, file: !139, line: 1061, type: !69)
!2968 = !DILocalVariable(name: "argsize", arg: 3, scope: !2936, file: !139, line: 1061, type: !134)
!2969 = distinct !DISubprogram(name: "quote_n", scope: !139, file: !139, line: 1073, type: !2970, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!2970 = !DISubroutineType(types: !2971)
!2971 = !{!69, !72, !69}
!2972 = !DILocalVariable(name: "n", arg: 1, scope: !2969, file: !139, line: 1073, type: !72)
!2973 = !DILocation(line: 1073, column: 14, scope: !2969)
!2974 = !DILocalVariable(name: "arg", arg: 2, scope: !2969, file: !139, line: 1073, type: !69)
!2975 = !DILocation(line: 1073, column: 29, scope: !2969)
!2976 = !DILocation(line: 1075, column: 23, scope: !2969)
!2977 = !DILocation(line: 1075, column: 26, scope: !2969)
!2978 = !DILocation(line: 1075, column: 10, scope: !2969)
!2979 = !DILocation(line: 1075, column: 3, scope: !2969)
!2980 = distinct !DISubprogram(name: "quote", scope: !139, file: !139, line: 1079, type: !2981, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !115, retainedNodes: !4)
!2981 = !DISubroutineType(types: !2982)
!2982 = !{!69, !69}
!2983 = !DILocalVariable(name: "arg", arg: 1, scope: !2980, file: !139, line: 1079, type: !69)
!2984 = !DILocation(line: 1079, column: 20, scope: !2980)
!2985 = !DILocation(line: 1081, column: 22, scope: !2980)
!2986 = !DILocation(line: 1081, column: 10, scope: !2980)
!2987 = !DILocation(line: 1081, column: 3, scope: !2980)
!2988 = !DILocalVariable(name: "arg", arg: 1, scope: !2989, file: !139, line: 1079, type: !69)
!2989 = distinct !DISubprogram(name: "quote", scope: !139, file: !139, line: 1079, type: !2981, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2990, retainedNodes: !4)
!2990 = distinct !DICompileUnit(language: DW_LANG_C99, file: !116, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !117, retainedTypes: !132, globals: !2991, nameTableKind: None)
!2991 = !{!2992, !2994, !2996, !3005, !3007, !3009, !3016, !3018}
!2992 = !DIGlobalVariableExpression(var: !2993, expr: !DIExpression())
!2993 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2990, file: !139, line: 85, type: !140, isLocal: false, isDefinition: true)
!2994 = !DIGlobalVariableExpression(var: !2995, expr: !DIExpression())
!2995 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2990, file: !139, line: 101, type: !146, isLocal: false, isDefinition: true)
!2996 = !DIGlobalVariableExpression(var: !2997, expr: !DIExpression())
!2997 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2990, file: !139, line: 1052, type: !2998, isLocal: false, isDefinition: true)
!2998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !139, line: 65, size: 448, elements: !2999)
!2999 = !{!3000, !3001, !3002, !3003, !3004}
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2998, file: !139, line: 68, baseType: !118, size: 32)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2998, file: !139, line: 71, baseType: !72, size: 32, offset: 32)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2998, file: !139, line: 75, baseType: !155, size: 256, offset: 64)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2998, file: !139, line: 78, baseType: !69, size: 64, offset: 320)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2998, file: !139, line: 81, baseType: !69, size: 64, offset: 384)
!3005 = !DIGlobalVariableExpression(var: !3006, expr: !DIExpression())
!3006 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2990, file: !139, line: 116, type: !2998, isLocal: true, isDefinition: true)
!3007 = !DIGlobalVariableExpression(var: !3008, expr: !DIExpression())
!3008 = distinct !DIGlobalVariable(name: "slot0", scope: !2990, file: !139, line: 842, type: !162, isLocal: true, isDefinition: true)
!3009 = !DIGlobalVariableExpression(var: !3010, expr: !DIExpression())
!3010 = distinct !DIGlobalVariable(name: "slotvec", scope: !2990, file: !139, line: 845, type: !3011, isLocal: true, isDefinition: true)
!3011 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3012, size: 64)
!3012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !139, line: 834, size: 128, elements: !3013)
!3013 = !{!3014, !3015}
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3012, file: !139, line: 836, baseType: !134, size: 64)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3012, file: !139, line: 837, baseType: !6, size: 64, offset: 64)
!3016 = !DIGlobalVariableExpression(var: !3017, expr: !DIExpression())
!3017 = distinct !DIGlobalVariable(name: "nslots", scope: !2990, file: !139, line: 843, type: !72, isLocal: true, isDefinition: true)
!3018 = !DIGlobalVariableExpression(var: !3019, expr: !DIExpression())
!3019 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2990, file: !139, line: 844, type: !3012, isLocal: true, isDefinition: true)
!3020 = distinct !DISubprogram(name: "getcon", scope: !3021, file: !3021, line: 87, type: !3022, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !208, retainedNodes: !4)
!3021 = !DIFile(filename: "./lib/selinux/selinux.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3022 = !DISubroutineType(types: !3023)
!3023 = !{!72, !3024}
!3024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3025, size: 64)
!3025 = !DIDerivedType(tag: DW_TAG_typedef, name: "security_context_t", file: !3021, line: 83, baseType: !6)
!3026 = !DILocalVariable(name: "con", arg: 1, scope: !3020, file: !3021, line: 87, type: !3024)
!3027 = !DILocation(line: 87, column: 29, scope: !3020)
!3028 = !DILocation(line: 88, column: 5, scope: !3020)
!3029 = !DILocation(line: 88, column: 11, scope: !3020)
!3030 = !DILocation(line: 88, column: 22, scope: !3020)
!3031 = !DILocalVariable(name: "con", arg: 1, scope: !3032, file: !3021, line: 87, type: !3024)
!3032 = distinct !DISubprogram(name: "getcon", scope: !3021, file: !3021, line: 87, type: !3022, scopeLine: 88, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3033, retainedNodes: !4)
!3033 = distinct !DICompileUnit(language: DW_LANG_C99, file: !209, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3034 = distinct !DISubprogram(name: "parse_user_spec", scope: !179, file: !179, line: 259, type: !3035, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !185, retainedNodes: !4)
!3035 = !DISubroutineType(types: !3036)
!3036 = !{!69, !69, !182, !183, !184, !184}
!3037 = !DILocalVariable(name: "spec", arg: 1, scope: !3034, file: !179, line: 259, type: !69)
!3038 = !DILocation(line: 259, column: 30, scope: !3034)
!3039 = !DILocalVariable(name: "uid", arg: 2, scope: !3034, file: !179, line: 259, type: !182)
!3040 = !DILocation(line: 259, column: 43, scope: !3034)
!3041 = !DILocalVariable(name: "gid", arg: 3, scope: !3034, file: !179, line: 259, type: !183)
!3042 = !DILocation(line: 259, column: 55, scope: !3034)
!3043 = !DILocalVariable(name: "username", arg: 4, scope: !3034, file: !179, line: 260, type: !184)
!3044 = !DILocation(line: 260, column: 25, scope: !3034)
!3045 = !DILocalVariable(name: "groupname", arg: 5, scope: !3034, file: !179, line: 260, type: !184)
!3046 = !DILocation(line: 260, column: 42, scope: !3034)
!3047 = !DILocalVariable(name: "colon", scope: !3034, file: !179, line: 262, type: !69)
!3048 = !DILocation(line: 262, column: 15, scope: !3034)
!3049 = !DILocation(line: 262, column: 23, scope: !3034)
!3050 = !DILocation(line: 262, column: 37, scope: !3034)
!3051 = !DILocation(line: 262, column: 29, scope: !3034)
!3052 = !DILocalVariable(name: "error_msg", scope: !3034, file: !179, line: 263, type: !69)
!3053 = !DILocation(line: 263, column: 15, scope: !3034)
!3054 = !DILocation(line: 264, column: 27, scope: !3034)
!3055 = !DILocation(line: 264, column: 33, scope: !3034)
!3056 = !DILocation(line: 264, column: 40, scope: !3034)
!3057 = !DILocation(line: 264, column: 45, scope: !3034)
!3058 = !DILocation(line: 264, column: 50, scope: !3034)
!3059 = !DILocation(line: 264, column: 60, scope: !3034)
!3060 = !DILocation(line: 264, column: 5, scope: !3034)
!3061 = !DILocation(line: 266, column: 7, scope: !3062)
!3062 = distinct !DILexicalBlock(scope: !3034, file: !179, line: 266, column: 7)
!3063 = !DILocation(line: 266, column: 11, scope: !3062)
!3064 = !DILocation(line: 266, column: 15, scope: !3062)
!3065 = !DILocation(line: 266, column: 21, scope: !3062)
!3066 = !DILocation(line: 266, column: 24, scope: !3062)
!3067 = !DILocation(line: 266, column: 7, scope: !3034)
!3068 = !DILocalVariable(name: "dot", scope: !3069, file: !179, line: 274, type: !69)
!3069 = distinct !DILexicalBlock(scope: !3062, file: !179, line: 267, column: 5)
!3070 = !DILocation(line: 274, column: 19, scope: !3069)
!3071 = !DILocation(line: 274, column: 33, scope: !3069)
!3072 = !DILocation(line: 274, column: 25, scope: !3069)
!3073 = !DILocation(line: 275, column: 11, scope: !3074)
!3074 = distinct !DILexicalBlock(scope: !3069, file: !179, line: 275, column: 11)
!3075 = !DILocation(line: 276, column: 11, scope: !3074)
!3076 = !DILocation(line: 276, column: 38, scope: !3074)
!3077 = !DILocation(line: 276, column: 44, scope: !3074)
!3078 = !DILocation(line: 276, column: 49, scope: !3074)
!3079 = !DILocation(line: 276, column: 54, scope: !3074)
!3080 = !DILocation(line: 276, column: 59, scope: !3074)
!3081 = !DILocation(line: 276, column: 69, scope: !3074)
!3082 = !DILocation(line: 276, column: 16, scope: !3074)
!3083 = !DILocation(line: 275, column: 11, scope: !3069)
!3084 = !DILocation(line: 277, column: 19, scope: !3074)
!3085 = !DILocation(line: 277, column: 9, scope: !3074)
!3086 = !DILocation(line: 278, column: 5, scope: !3069)
!3087 = !DILocation(line: 280, column: 10, scope: !3034)
!3088 = !DILocation(line: 280, column: 3, scope: !3034)
!3089 = !DILocalVariable(name: "error_msg", scope: !3090, file: !179, line: 263, type: !69)
!3090 = distinct !DISubprogram(name: "parse_user_spec", scope: !179, file: !179, line: 259, type: !3035, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3091, retainedNodes: !4)
!3091 = distinct !DICompileUnit(language: DW_LANG_C99, file: !186, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !187, globals: !3092, nameTableKind: None)
!3092 = !{!3093, !3096, !3098}
!3093 = !DIGlobalVariableExpression(var: !3094, expr: !DIExpression())
!3094 = distinct !DIGlobalVariable(name: "E_invalid_user", scope: !3095, file: !179, line: 106, type: !69, isLocal: true, isDefinition: true)
!3095 = distinct !DISubprogram(name: "parse_with_separator", scope: !179, file: !179, line: 102, type: !180, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3091, retainedNodes: !4)
!3096 = !DIGlobalVariableExpression(var: !3097, expr: !DIExpression())
!3097 = distinct !DIGlobalVariable(name: "E_invalid_group", scope: !3095, file: !179, line: 107, type: !69, isLocal: true, isDefinition: true)
!3098 = !DIGlobalVariableExpression(var: !3099, expr: !DIExpression())
!3099 = distinct !DIGlobalVariable(name: "E_bad_spec", scope: !3095, file: !179, line: 108, type: !69, isLocal: true, isDefinition: true)
!3100 = !DILocalVariable(name: "spec", arg: 1, scope: !178, file: !179, line: 102, type: !69)
!3101 = !DILocation(line: 102, column: 35, scope: !178)
!3102 = !DILocalVariable(name: "separator", arg: 2, scope: !178, file: !179, line: 102, type: !69)
!3103 = !DILocation(line: 102, column: 53, scope: !178)
!3104 = !DILocalVariable(name: "uid", arg: 3, scope: !178, file: !179, line: 103, type: !182)
!3105 = !DILocation(line: 103, column: 30, scope: !178)
!3106 = !DILocalVariable(name: "gid", arg: 4, scope: !178, file: !179, line: 103, type: !183)
!3107 = !DILocation(line: 103, column: 42, scope: !178)
!3108 = !DILocalVariable(name: "username", arg: 5, scope: !178, file: !179, line: 104, type: !184)
!3109 = !DILocation(line: 104, column: 30, scope: !178)
!3110 = !DILocalVariable(name: "groupname", arg: 6, scope: !178, file: !179, line: 104, type: !184)
!3111 = !DILocation(line: 104, column: 47, scope: !178)
!3112 = !DILocalVariable(name: "error_msg", scope: !178, file: !179, line: 110, type: !69)
!3113 = !DILocation(line: 110, column: 15, scope: !178)
!3114 = !DILocalVariable(name: "pwd", scope: !178, file: !179, line: 111, type: !3115)
!3115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3116, size: 64)
!3116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "passwd", file: !611, line: 49, size: 384, elements: !3117)
!3117 = !{!3118, !3119, !3120, !3121, !3122, !3123, !3124}
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "pw_name", scope: !3116, file: !611, line: 51, baseType: !6, size: 64)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "pw_passwd", scope: !3116, file: !611, line: 52, baseType: !6, size: 64, offset: 64)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "pw_uid", scope: !3116, file: !611, line: 54, baseType: !14, size: 32, offset: 128)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gid", scope: !3116, file: !611, line: 55, baseType: !22, size: 32, offset: 160)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "pw_gecos", scope: !3116, file: !611, line: 56, baseType: !6, size: 64, offset: 192)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "pw_dir", scope: !3116, file: !611, line: 57, baseType: !6, size: 64, offset: 256)
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "pw_shell", scope: !3116, file: !611, line: 58, baseType: !6, size: 64, offset: 320)
!3125 = !DILocation(line: 111, column: 18, scope: !178)
!3126 = !DILocalVariable(name: "grp", scope: !178, file: !179, line: 112, type: !3127)
!3127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3128, size: 64)
!3128 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !3129)
!3129 = !{!3130, !3131, !3132, !3133}
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !3128, file: !1036, line: 44, baseType: !6, size: 64)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !3128, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !3128, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !3128, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!3134 = !DILocation(line: 112, column: 17, scope: !178)
!3135 = !DILocalVariable(name: "u", scope: !178, file: !179, line: 113, type: !6)
!3136 = !DILocation(line: 113, column: 9, scope: !178)
!3137 = !DILocalVariable(name: "g", scope: !178, file: !179, line: 114, type: !69)
!3138 = !DILocation(line: 114, column: 15, scope: !178)
!3139 = !DILocalVariable(name: "gname", scope: !178, file: !179, line: 115, type: !6)
!3140 = !DILocation(line: 115, column: 9, scope: !178)
!3141 = !DILocalVariable(name: "unum", scope: !178, file: !179, line: 116, type: !12)
!3142 = !DILocation(line: 116, column: 9, scope: !178)
!3143 = !DILocation(line: 116, column: 17, scope: !178)
!3144 = !DILocation(line: 116, column: 16, scope: !178)
!3145 = !DILocalVariable(name: "gnum", scope: !178, file: !179, line: 117, type: !21)
!3146 = !DILocation(line: 117, column: 9, scope: !178)
!3147 = !DILocation(line: 117, column: 16, scope: !178)
!3148 = !DILocation(line: 117, column: 23, scope: !178)
!3149 = !DILocation(line: 117, column: 22, scope: !178)
!3150 = !DILocation(line: 119, column: 13, scope: !178)
!3151 = !DILocation(line: 120, column: 7, scope: !3152)
!3152 = distinct !DILexicalBlock(scope: !178, file: !179, line: 120, column: 7)
!3153 = !DILocation(line: 120, column: 7, scope: !178)
!3154 = !DILocation(line: 121, column: 6, scope: !3152)
!3155 = !DILocation(line: 121, column: 15, scope: !3152)
!3156 = !DILocation(line: 121, column: 5, scope: !3152)
!3157 = !DILocation(line: 122, column: 7, scope: !3158)
!3158 = distinct !DILexicalBlock(scope: !178, file: !179, line: 122, column: 7)
!3159 = !DILocation(line: 122, column: 7, scope: !178)
!3160 = !DILocation(line: 123, column: 6, scope: !3158)
!3161 = !DILocation(line: 123, column: 16, scope: !3158)
!3162 = !DILocation(line: 123, column: 5, scope: !3158)
!3163 = !DILocation(line: 129, column: 5, scope: !178)
!3164 = !DILocation(line: 130, column: 7, scope: !3165)
!3165 = distinct !DILexicalBlock(scope: !178, file: !179, line: 130, column: 7)
!3166 = !DILocation(line: 130, column: 17, scope: !3165)
!3167 = !DILocation(line: 130, column: 7, scope: !178)
!3168 = !DILocation(line: 132, column: 12, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !3170, file: !179, line: 132, column: 11)
!3170 = distinct !DILexicalBlock(scope: !3165, file: !179, line: 131, column: 5)
!3171 = !DILocation(line: 132, column: 11, scope: !3169)
!3172 = !DILocation(line: 132, column: 11, scope: !3170)
!3173 = !DILocation(line: 133, column: 22, scope: !3169)
!3174 = !DILocation(line: 133, column: 13, scope: !3169)
!3175 = !DILocation(line: 133, column: 11, scope: !3169)
!3176 = !DILocation(line: 133, column: 9, scope: !3169)
!3177 = !DILocation(line: 134, column: 5, scope: !3170)
!3178 = !DILocalVariable(name: "ulen", scope: !3179, file: !179, line: 137, type: !134)
!3179 = distinct !DILexicalBlock(scope: !3165, file: !179, line: 136, column: 5)
!3180 = !DILocation(line: 137, column: 14, scope: !3179)
!3181 = !DILocation(line: 137, column: 21, scope: !3179)
!3182 = !DILocation(line: 137, column: 33, scope: !3179)
!3183 = !DILocation(line: 137, column: 31, scope: !3179)
!3184 = !DILocation(line: 138, column: 11, scope: !3185)
!3185 = distinct !DILexicalBlock(scope: !3179, file: !179, line: 138, column: 11)
!3186 = !DILocation(line: 138, column: 16, scope: !3185)
!3187 = !DILocation(line: 138, column: 11, scope: !3179)
!3188 = !DILocation(line: 140, column: 24, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !3185, file: !179, line: 139, column: 9)
!3190 = !DILocation(line: 140, column: 30, scope: !3189)
!3191 = !DILocation(line: 140, column: 35, scope: !3189)
!3192 = !DILocation(line: 140, column: 15, scope: !3189)
!3193 = !DILocation(line: 140, column: 13, scope: !3189)
!3194 = !DILocation(line: 141, column: 11, scope: !3189)
!3195 = !DILocation(line: 141, column: 13, scope: !3189)
!3196 = !DILocation(line: 141, column: 19, scope: !3189)
!3197 = !DILocation(line: 142, column: 9, scope: !3189)
!3198 = !DILocation(line: 145, column: 8, scope: !178)
!3199 = !DILocation(line: 145, column: 18, scope: !178)
!3200 = !DILocation(line: 145, column: 26, scope: !178)
!3201 = !DILocation(line: 145, column: 31, scope: !178)
!3202 = !DILocation(line: 145, column: 41, scope: !178)
!3203 = !DILocation(line: 145, column: 29, scope: !178)
!3204 = !DILocation(line: 145, column: 46, scope: !178)
!3205 = !DILocation(line: 147, column: 10, scope: !178)
!3206 = !DILocation(line: 147, column: 20, scope: !178)
!3207 = !DILocation(line: 145, column: 5, scope: !178)
!3208 = !DILocation(line: 158, column: 7, scope: !3209)
!3209 = distinct !DILexicalBlock(scope: !178, file: !179, line: 158, column: 7)
!3210 = !DILocation(line: 158, column: 9, scope: !3209)
!3211 = !DILocation(line: 158, column: 7, scope: !178)
!3212 = !DILocation(line: 161, column: 15, scope: !3213)
!3213 = distinct !DILexicalBlock(scope: !3209, file: !179, line: 159, column: 5)
!3214 = !DILocation(line: 161, column: 14, scope: !3213)
!3215 = !DILocation(line: 161, column: 17, scope: !3213)
!3216 = !DILocation(line: 161, column: 43, scope: !3213)
!3217 = !DILocation(line: 161, column: 33, scope: !3213)
!3218 = !DILocation(line: 161, column: 11, scope: !3213)
!3219 = !DILocation(line: 162, column: 11, scope: !3220)
!3220 = distinct !DILexicalBlock(scope: !3213, file: !179, line: 162, column: 11)
!3221 = !DILocation(line: 162, column: 15, scope: !3220)
!3222 = !DILocation(line: 162, column: 11, scope: !3213)
!3223 = !DILocalVariable(name: "use_login_group", scope: !3224, file: !179, line: 164, type: !27)
!3224 = distinct !DILexicalBlock(scope: !3220, file: !179, line: 163, column: 9)
!3225 = !DILocation(line: 164, column: 16, scope: !3224)
!3226 = !DILocation(line: 164, column: 35, scope: !3224)
!3227 = !DILocation(line: 164, column: 45, scope: !3224)
!3228 = !DILocation(line: 164, column: 53, scope: !3224)
!3229 = !DILocation(line: 164, column: 56, scope: !3224)
!3230 = !DILocation(line: 164, column: 58, scope: !3224)
!3231 = !DILocation(line: 0, scope: !3224)
!3232 = !DILocation(line: 165, column: 15, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3224, file: !179, line: 165, column: 15)
!3234 = !DILocation(line: 165, column: 15, scope: !3224)
!3235 = !DILocation(line: 169, column: 27, scope: !3236)
!3236 = distinct !DILexicalBlock(scope: !3233, file: !179, line: 166, column: 13)
!3237 = !DILocation(line: 169, column: 25, scope: !3236)
!3238 = !DILocation(line: 170, column: 13, scope: !3236)
!3239 = !DILocalVariable(name: "tmp", scope: !3240, file: !179, line: 173, type: !84)
!3240 = distinct !DILexicalBlock(scope: !3233, file: !179, line: 172, column: 13)
!3241 = !DILocation(line: 173, column: 33, scope: !3240)
!3242 = !DILocation(line: 174, column: 29, scope: !3243)
!3243 = distinct !DILexicalBlock(scope: !3240, file: !179, line: 174, column: 19)
!3244 = !DILocation(line: 174, column: 19, scope: !3243)
!3245 = !DILocation(line: 174, column: 52, scope: !3243)
!3246 = !DILocation(line: 175, column: 19, scope: !3243)
!3247 = !DILocation(line: 175, column: 22, scope: !3243)
!3248 = !DILocation(line: 175, column: 26, scope: !3243)
!3249 = !DILocation(line: 175, column: 36, scope: !3243)
!3250 = !DILocation(line: 175, column: 47, scope: !3243)
!3251 = !DILocation(line: 175, column: 39, scope: !3243)
!3252 = !DILocation(line: 175, column: 51, scope: !3243)
!3253 = !DILocation(line: 174, column: 19, scope: !3240)
!3254 = !DILocation(line: 176, column: 24, scope: !3243)
!3255 = !DILocation(line: 176, column: 22, scope: !3243)
!3256 = !DILocation(line: 176, column: 17, scope: !3243)
!3257 = !DILocation(line: 178, column: 29, scope: !3243)
!3258 = !DILocation(line: 178, column: 27, scope: !3243)
!3259 = !DILocation(line: 180, column: 9, scope: !3224)
!3260 = !DILocation(line: 183, column: 18, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !3220, file: !179, line: 182, column: 9)
!3262 = !DILocation(line: 183, column: 23, scope: !3261)
!3263 = !DILocation(line: 183, column: 16, scope: !3261)
!3264 = !DILocation(line: 184, column: 15, scope: !3265)
!3265 = distinct !DILexicalBlock(scope: !3261, file: !179, line: 184, column: 15)
!3266 = !DILocation(line: 184, column: 17, scope: !3265)
!3267 = !DILocation(line: 184, column: 25, scope: !3265)
!3268 = !DILocation(line: 184, column: 28, scope: !3265)
!3269 = !DILocation(line: 184, column: 38, scope: !3265)
!3270 = !DILocation(line: 184, column: 15, scope: !3261)
!3271 = !DILocalVariable(name: "buf", scope: !3272, file: !179, line: 188, type: !53)
!3272 = distinct !DILexicalBlock(scope: !3265, file: !179, line: 185, column: 13)
!3273 = !DILocation(line: 188, column: 20, scope: !3272)
!3274 = !DILocation(line: 189, column: 22, scope: !3272)
!3275 = !DILocation(line: 189, column: 27, scope: !3272)
!3276 = !DILocation(line: 189, column: 20, scope: !3272)
!3277 = !DILocation(line: 190, column: 31, scope: !3272)
!3278 = !DILocation(line: 190, column: 21, scope: !3272)
!3279 = !DILocation(line: 190, column: 19, scope: !3272)
!3280 = !DILocation(line: 191, column: 32, scope: !3272)
!3281 = !DILocation(line: 191, column: 38, scope: !3272)
!3282 = !DILocation(line: 191, column: 43, scope: !3272)
!3283 = !DILocation(line: 191, column: 64, scope: !3272)
!3284 = !DILocation(line: 191, column: 70, scope: !3272)
!3285 = !DILocation(line: 191, column: 53, scope: !3272)
!3286 = !DILocation(line: 191, column: 23, scope: !3272)
!3287 = !DILocation(line: 191, column: 21, scope: !3272)
!3288 = !DILocation(line: 192, column: 15, scope: !3272)
!3289 = !DILocation(line: 193, column: 13, scope: !3272)
!3290 = !DILocation(line: 195, column: 7, scope: !3213)
!3291 = !DILocation(line: 196, column: 5, scope: !3213)
!3292 = !DILocation(line: 198, column: 7, scope: !3293)
!3293 = distinct !DILexicalBlock(scope: !178, file: !179, line: 198, column: 7)
!3294 = !DILocation(line: 198, column: 9, scope: !3293)
!3295 = !DILocation(line: 198, column: 17, scope: !3293)
!3296 = !DILocation(line: 198, column: 20, scope: !3293)
!3297 = !DILocation(line: 198, column: 30, scope: !3293)
!3298 = !DILocation(line: 198, column: 7, scope: !178)
!3299 = !DILocation(line: 202, column: 15, scope: !3300)
!3300 = distinct !DILexicalBlock(scope: !3293, file: !179, line: 199, column: 5)
!3301 = !DILocation(line: 202, column: 14, scope: !3300)
!3302 = !DILocation(line: 202, column: 17, scope: !3300)
!3303 = !DILocation(line: 202, column: 43, scope: !3300)
!3304 = !DILocation(line: 202, column: 33, scope: !3300)
!3305 = !DILocation(line: 202, column: 11, scope: !3300)
!3306 = !DILocation(line: 203, column: 11, scope: !3307)
!3307 = distinct !DILexicalBlock(scope: !3300, file: !179, line: 203, column: 11)
!3308 = !DILocation(line: 203, column: 15, scope: !3307)
!3309 = !DILocation(line: 203, column: 11, scope: !3300)
!3310 = !DILocalVariable(name: "tmp", scope: !3311, file: !179, line: 205, type: !84)
!3311 = distinct !DILexicalBlock(scope: !3307, file: !179, line: 204, column: 9)
!3312 = !DILocation(line: 205, column: 29, scope: !3311)
!3313 = !DILocation(line: 206, column: 25, scope: !3314)
!3314 = distinct !DILexicalBlock(scope: !3311, file: !179, line: 206, column: 15)
!3315 = !DILocation(line: 206, column: 15, scope: !3314)
!3316 = !DILocation(line: 206, column: 48, scope: !3314)
!3317 = !DILocation(line: 207, column: 15, scope: !3314)
!3318 = !DILocation(line: 207, column: 18, scope: !3314)
!3319 = !DILocation(line: 207, column: 22, scope: !3314)
!3320 = !DILocation(line: 207, column: 32, scope: !3314)
!3321 = !DILocation(line: 207, column: 43, scope: !3314)
!3322 = !DILocation(line: 207, column: 35, scope: !3314)
!3323 = !DILocation(line: 207, column: 47, scope: !3314)
!3324 = !DILocation(line: 206, column: 15, scope: !3311)
!3325 = !DILocation(line: 208, column: 20, scope: !3314)
!3326 = !DILocation(line: 208, column: 18, scope: !3314)
!3327 = !DILocation(line: 208, column: 13, scope: !3314)
!3328 = !DILocation(line: 210, column: 25, scope: !3314)
!3329 = !DILocation(line: 210, column: 23, scope: !3314)
!3330 = !DILocation(line: 211, column: 9, scope: !3311)
!3331 = !DILocation(line: 213, column: 16, scope: !3307)
!3332 = !DILocation(line: 213, column: 21, scope: !3307)
!3333 = !DILocation(line: 213, column: 14, scope: !3307)
!3334 = !DILocation(line: 214, column: 7, scope: !3300)
!3335 = !DILocation(line: 215, column: 24, scope: !3300)
!3336 = !DILocation(line: 215, column: 15, scope: !3300)
!3337 = !DILocation(line: 215, column: 13, scope: !3300)
!3338 = !DILocation(line: 216, column: 5, scope: !3300)
!3339 = !DILocation(line: 218, column: 7, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !178, file: !179, line: 218, column: 7)
!3341 = !DILocation(line: 218, column: 17, scope: !3340)
!3342 = !DILocation(line: 218, column: 7, scope: !178)
!3343 = !DILocation(line: 220, column: 14, scope: !3344)
!3344 = distinct !DILexicalBlock(scope: !3340, file: !179, line: 219, column: 5)
!3345 = !DILocation(line: 220, column: 8, scope: !3344)
!3346 = !DILocation(line: 220, column: 12, scope: !3344)
!3347 = !DILocation(line: 221, column: 11, scope: !3348)
!3348 = distinct !DILexicalBlock(scope: !3344, file: !179, line: 221, column: 11)
!3349 = !DILocation(line: 221, column: 11, scope: !3344)
!3350 = !DILocation(line: 222, column: 16, scope: !3348)
!3351 = !DILocation(line: 222, column: 10, scope: !3348)
!3352 = !DILocation(line: 222, column: 14, scope: !3348)
!3353 = !DILocation(line: 222, column: 9, scope: !3348)
!3354 = !DILocation(line: 223, column: 11, scope: !3355)
!3355 = distinct !DILexicalBlock(scope: !3344, file: !179, line: 223, column: 11)
!3356 = !DILocation(line: 223, column: 11, scope: !3344)
!3357 = !DILocation(line: 225, column: 23, scope: !3358)
!3358 = distinct !DILexicalBlock(scope: !3355, file: !179, line: 224, column: 9)
!3359 = !DILocation(line: 225, column: 12, scope: !3358)
!3360 = !DILocation(line: 225, column: 21, scope: !3358)
!3361 = !DILocation(line: 226, column: 13, scope: !3358)
!3362 = !DILocation(line: 227, column: 9, scope: !3358)
!3363 = !DILocation(line: 228, column: 11, scope: !3364)
!3364 = distinct !DILexicalBlock(scope: !3344, file: !179, line: 228, column: 11)
!3365 = !DILocation(line: 228, column: 11, scope: !3344)
!3366 = !DILocation(line: 230, column: 24, scope: !3367)
!3367 = distinct !DILexicalBlock(scope: !3364, file: !179, line: 229, column: 9)
!3368 = !DILocation(line: 230, column: 12, scope: !3367)
!3369 = !DILocation(line: 230, column: 22, scope: !3367)
!3370 = !DILocation(line: 231, column: 17, scope: !3367)
!3371 = !DILocation(line: 232, column: 9, scope: !3367)
!3372 = !DILocation(line: 233, column: 5, scope: !3344)
!3373 = !DILocation(line: 235, column: 9, scope: !178)
!3374 = !DILocation(line: 235, column: 3, scope: !178)
!3375 = !DILocation(line: 236, column: 9, scope: !178)
!3376 = !DILocation(line: 236, column: 3, scope: !178)
!3377 = !DILocation(line: 237, column: 10, scope: !178)
!3378 = !DILocation(line: 237, column: 22, scope: !178)
!3379 = !DILocation(line: 237, column: 3, scope: !178)
!3380 = distinct !DISubprogram(name: "version_etc_arn", scope: !3381, file: !3381, line: 61, type: !3382, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !210, retainedNodes: !4)
!3381 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3382 = !DISubroutineType(types: !3383)
!3383 = !{null, !3384, !69, !69, !69, !3437, !134}
!3384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3385, size: 64)
!3385 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3386, line: 7, baseType: !3387)
!3386 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3388, line: 49, size: 1728, elements: !3389)
!3388 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3389 = !{!3390, !3391, !3392, !3393, !3394, !3395, !3396, !3397, !3398, !3399, !3400, !3401, !3402, !3405, !3407, !3408, !3409, !3411, !3412, !3414, !3418, !3421, !3423, !3426, !3429, !3430, !3431, !3432, !3433}
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3387, file: !3388, line: 51, baseType: !72, size: 32)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3387, file: !3388, line: 54, baseType: !6, size: 64, offset: 64)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3387, file: !3388, line: 55, baseType: !6, size: 64, offset: 128)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3387, file: !3388, line: 56, baseType: !6, size: 64, offset: 192)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3387, file: !3388, line: 57, baseType: !6, size: 64, offset: 256)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3387, file: !3388, line: 58, baseType: !6, size: 64, offset: 320)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3387, file: !3388, line: 59, baseType: !6, size: 64, offset: 384)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3387, file: !3388, line: 60, baseType: !6, size: 64, offset: 448)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3387, file: !3388, line: 61, baseType: !6, size: 64, offset: 512)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3387, file: !3388, line: 64, baseType: !6, size: 64, offset: 576)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3387, file: !3388, line: 65, baseType: !6, size: 64, offset: 640)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3387, file: !3388, line: 66, baseType: !6, size: 64, offset: 704)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3387, file: !3388, line: 68, baseType: !3403, size: 64, offset: 768)
!3403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3404, size: 64)
!3404 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3388, line: 36, flags: DIFlagFwdDecl)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3387, file: !3388, line: 70, baseType: !3406, size: 64, offset: 832)
!3406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3387, size: 64)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3387, file: !3388, line: 72, baseType: !72, size: 32, offset: 896)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3387, file: !3388, line: 73, baseType: !72, size: 32, offset: 928)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3387, file: !3388, line: 74, baseType: !3410, size: 64, offset: 960)
!3410 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !15, line: 152, baseType: !880)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3387, file: !3388, line: 77, baseType: !133, size: 16, offset: 1024)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3387, file: !3388, line: 78, baseType: !3413, size: 8, offset: 1040)
!3413 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3387, file: !3388, line: 79, baseType: !3415, size: 8, offset: 1048)
!3415 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 8, elements: !3416)
!3416 = !{!3417}
!3417 = !DISubrange(count: 1)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3387, file: !3388, line: 81, baseType: !3419, size: 64, offset: 1088)
!3419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3420, size: 64)
!3420 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3388, line: 43, baseType: null)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3387, file: !3388, line: 89, baseType: !3422, size: 64, offset: 1152)
!3422 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !15, line: 153, baseType: !880)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3387, file: !3388, line: 91, baseType: !3424, size: 64, offset: 1216)
!3424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3425, size: 64)
!3425 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3388, line: 37, flags: DIFlagFwdDecl)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3387, file: !3388, line: 92, baseType: !3427, size: 64, offset: 1280)
!3427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3428, size: 64)
!3428 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3388, line: 38, flags: DIFlagFwdDecl)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3387, file: !3388, line: 93, baseType: !3406, size: 64, offset: 1344)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3387, file: !3388, line: 94, baseType: !8, size: 64, offset: 1408)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3387, file: !3388, line: 95, baseType: !134, size: 64, offset: 1472)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3387, file: !3388, line: 96, baseType: !72, size: 32, offset: 1536)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3387, file: !3388, line: 98, baseType: !3434, size: 160, offset: 1568)
!3434 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 160, elements: !3435)
!3435 = !{!3436}
!3436 = !DISubrange(count: 20)
!3437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !141, size: 64)
!3438 = !DILocalVariable(name: "stream", arg: 1, scope: !3380, file: !3381, line: 61, type: !3384)
!3439 = !DILocation(line: 61, column: 24, scope: !3380)
!3440 = !DILocalVariable(name: "command_name", arg: 2, scope: !3380, file: !3381, line: 62, type: !69)
!3441 = !DILocation(line: 62, column: 30, scope: !3380)
!3442 = !DILocalVariable(name: "package", arg: 3, scope: !3380, file: !3381, line: 62, type: !69)
!3443 = !DILocation(line: 62, column: 56, scope: !3380)
!3444 = !DILocalVariable(name: "version", arg: 4, scope: !3380, file: !3381, line: 63, type: !69)
!3445 = !DILocation(line: 63, column: 30, scope: !3380)
!3446 = !DILocalVariable(name: "authors", arg: 5, scope: !3380, file: !3381, line: 64, type: !3437)
!3447 = !DILocation(line: 64, column: 39, scope: !3380)
!3448 = !DILocalVariable(name: "n_authors", arg: 6, scope: !3380, file: !3381, line: 64, type: !134)
!3449 = !DILocation(line: 64, column: 55, scope: !3380)
!3450 = !DILocation(line: 66, column: 7, scope: !3451)
!3451 = distinct !DILexicalBlock(scope: !3380, file: !3381, line: 66, column: 7)
!3452 = !DILocation(line: 66, column: 7, scope: !3380)
!3453 = !DILocation(line: 67, column: 14, scope: !3451)
!3454 = !DILocation(line: 67, column: 38, scope: !3451)
!3455 = !DILocation(line: 67, column: 52, scope: !3451)
!3456 = !DILocation(line: 67, column: 61, scope: !3451)
!3457 = !DILocation(line: 67, column: 5, scope: !3451)
!3458 = !DILocation(line: 69, column: 14, scope: !3451)
!3459 = !DILocation(line: 69, column: 33, scope: !3451)
!3460 = !DILocation(line: 69, column: 42, scope: !3451)
!3461 = !DILocation(line: 69, column: 5, scope: !3451)
!3462 = !DILocation(line: 83, column: 12, scope: !3380)
!3463 = !DILocation(line: 83, column: 43, scope: !3380)
!3464 = !DILocation(line: 83, column: 3, scope: !3380)
!3465 = !DILocation(line: 85, column: 3, scope: !3380)
!3466 = !DILocation(line: 88, column: 12, scope: !3380)
!3467 = !DILocation(line: 88, column: 20, scope: !3380)
!3468 = !DILocation(line: 88, column: 3, scope: !3380)
!3469 = !DILocation(line: 95, column: 3, scope: !3380)
!3470 = !DILocation(line: 97, column: 11, scope: !3380)
!3471 = !DILocation(line: 97, column: 3, scope: !3380)
!3472 = !DILocation(line: 102, column: 7, scope: !3473)
!3473 = distinct !DILexicalBlock(scope: !3380, file: !3381, line: 98, column: 5)
!3474 = !DILocation(line: 105, column: 16, scope: !3473)
!3475 = !DILocation(line: 105, column: 24, scope: !3473)
!3476 = !DILocation(line: 105, column: 47, scope: !3473)
!3477 = !DILocation(line: 105, column: 7, scope: !3473)
!3478 = !DILocation(line: 106, column: 7, scope: !3473)
!3479 = !DILocation(line: 109, column: 16, scope: !3473)
!3480 = !DILocation(line: 109, column: 24, scope: !3473)
!3481 = !DILocation(line: 109, column: 54, scope: !3473)
!3482 = !DILocation(line: 109, column: 66, scope: !3473)
!3483 = !DILocation(line: 109, column: 7, scope: !3473)
!3484 = !DILocation(line: 110, column: 7, scope: !3473)
!3485 = !DILocation(line: 113, column: 16, scope: !3473)
!3486 = !DILocation(line: 113, column: 24, scope: !3473)
!3487 = !DILocation(line: 114, column: 16, scope: !3473)
!3488 = !DILocation(line: 114, column: 28, scope: !3473)
!3489 = !DILocation(line: 114, column: 40, scope: !3473)
!3490 = !DILocation(line: 113, column: 7, scope: !3473)
!3491 = !DILocation(line: 115, column: 7, scope: !3473)
!3492 = !DILocation(line: 120, column: 16, scope: !3473)
!3493 = !DILocation(line: 120, column: 24, scope: !3473)
!3494 = !DILocation(line: 121, column: 16, scope: !3473)
!3495 = !DILocation(line: 121, column: 28, scope: !3473)
!3496 = !DILocation(line: 121, column: 40, scope: !3473)
!3497 = !DILocation(line: 121, column: 52, scope: !3473)
!3498 = !DILocation(line: 120, column: 7, scope: !3473)
!3499 = !DILocation(line: 122, column: 7, scope: !3473)
!3500 = !DILocation(line: 127, column: 16, scope: !3473)
!3501 = !DILocation(line: 127, column: 24, scope: !3473)
!3502 = !DILocation(line: 128, column: 16, scope: !3473)
!3503 = !DILocation(line: 128, column: 28, scope: !3473)
!3504 = !DILocation(line: 128, column: 40, scope: !3473)
!3505 = !DILocation(line: 128, column: 52, scope: !3473)
!3506 = !DILocation(line: 128, column: 64, scope: !3473)
!3507 = !DILocation(line: 127, column: 7, scope: !3473)
!3508 = !DILocation(line: 129, column: 7, scope: !3473)
!3509 = !DILocation(line: 134, column: 16, scope: !3473)
!3510 = !DILocation(line: 134, column: 24, scope: !3473)
!3511 = !DILocation(line: 135, column: 16, scope: !3473)
!3512 = !DILocation(line: 135, column: 28, scope: !3473)
!3513 = !DILocation(line: 135, column: 40, scope: !3473)
!3514 = !DILocation(line: 135, column: 52, scope: !3473)
!3515 = !DILocation(line: 135, column: 64, scope: !3473)
!3516 = !DILocation(line: 136, column: 16, scope: !3473)
!3517 = !DILocation(line: 134, column: 7, scope: !3473)
!3518 = !DILocation(line: 137, column: 7, scope: !3473)
!3519 = !DILocation(line: 142, column: 16, scope: !3473)
!3520 = !DILocation(line: 142, column: 24, scope: !3473)
!3521 = !DILocation(line: 143, column: 16, scope: !3473)
!3522 = !DILocation(line: 143, column: 28, scope: !3473)
!3523 = !DILocation(line: 143, column: 40, scope: !3473)
!3524 = !DILocation(line: 143, column: 52, scope: !3473)
!3525 = !DILocation(line: 143, column: 64, scope: !3473)
!3526 = !DILocation(line: 144, column: 16, scope: !3473)
!3527 = !DILocation(line: 144, column: 28, scope: !3473)
!3528 = !DILocation(line: 142, column: 7, scope: !3473)
!3529 = !DILocation(line: 145, column: 7, scope: !3473)
!3530 = !DILocation(line: 150, column: 16, scope: !3473)
!3531 = !DILocation(line: 150, column: 24, scope: !3473)
!3532 = !DILocation(line: 152, column: 17, scope: !3473)
!3533 = !DILocation(line: 152, column: 29, scope: !3473)
!3534 = !DILocation(line: 152, column: 41, scope: !3473)
!3535 = !DILocation(line: 152, column: 53, scope: !3473)
!3536 = !DILocation(line: 152, column: 65, scope: !3473)
!3537 = !DILocation(line: 153, column: 17, scope: !3473)
!3538 = !DILocation(line: 153, column: 29, scope: !3473)
!3539 = !DILocation(line: 153, column: 41, scope: !3473)
!3540 = !DILocation(line: 150, column: 7, scope: !3473)
!3541 = !DILocation(line: 154, column: 7, scope: !3473)
!3542 = !DILocation(line: 159, column: 16, scope: !3473)
!3543 = !DILocation(line: 159, column: 24, scope: !3473)
!3544 = !DILocation(line: 161, column: 16, scope: !3473)
!3545 = !DILocation(line: 161, column: 28, scope: !3473)
!3546 = !DILocation(line: 161, column: 40, scope: !3473)
!3547 = !DILocation(line: 161, column: 52, scope: !3473)
!3548 = !DILocation(line: 161, column: 64, scope: !3473)
!3549 = !DILocation(line: 162, column: 16, scope: !3473)
!3550 = !DILocation(line: 162, column: 28, scope: !3473)
!3551 = !DILocation(line: 162, column: 40, scope: !3473)
!3552 = !DILocation(line: 162, column: 52, scope: !3473)
!3553 = !DILocation(line: 159, column: 7, scope: !3473)
!3554 = !DILocation(line: 163, column: 7, scope: !3473)
!3555 = !DILocation(line: 170, column: 16, scope: !3473)
!3556 = !DILocation(line: 170, column: 24, scope: !3473)
!3557 = !DILocation(line: 172, column: 17, scope: !3473)
!3558 = !DILocation(line: 172, column: 29, scope: !3473)
!3559 = !DILocation(line: 172, column: 41, scope: !3473)
!3560 = !DILocation(line: 172, column: 53, scope: !3473)
!3561 = !DILocation(line: 172, column: 65, scope: !3473)
!3562 = !DILocation(line: 173, column: 17, scope: !3473)
!3563 = !DILocation(line: 173, column: 29, scope: !3473)
!3564 = !DILocation(line: 173, column: 41, scope: !3473)
!3565 = !DILocation(line: 173, column: 53, scope: !3473)
!3566 = !DILocation(line: 170, column: 7, scope: !3473)
!3567 = !DILocation(line: 174, column: 7, scope: !3473)
!3568 = !DILocation(line: 176, column: 1, scope: !3380)
!3569 = distinct !DISubprogram(name: "version_etc_va", scope: !3381, file: !3381, line: 199, type: !3570, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !210, retainedNodes: !4)
!3570 = !DISubroutineType(types: !3571)
!3571 = !{null, !3384, !69, !69, !69, !3572}
!3572 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3573, size: 64)
!3573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !211, line: 192, size: 192, elements: !3574)
!3574 = !{!3575, !3576, !3577, !3578}
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3573, file: !211, line: 192, baseType: !16, size: 32)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3573, file: !211, line: 192, baseType: !16, size: 32, offset: 32)
!3577 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3573, file: !211, line: 192, baseType: !8, size: 64, offset: 64)
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3573, file: !211, line: 192, baseType: !8, size: 64, offset: 128)
!3579 = !DILocalVariable(name: "stream", arg: 1, scope: !3569, file: !3381, line: 199, type: !3384)
!3580 = !DILocation(line: 199, column: 23, scope: !3569)
!3581 = !DILocalVariable(name: "command_name", arg: 2, scope: !3569, file: !3381, line: 200, type: !69)
!3582 = !DILocation(line: 200, column: 29, scope: !3569)
!3583 = !DILocalVariable(name: "package", arg: 3, scope: !3569, file: !3381, line: 200, type: !69)
!3584 = !DILocation(line: 200, column: 55, scope: !3569)
!3585 = !DILocalVariable(name: "version", arg: 4, scope: !3569, file: !3381, line: 201, type: !69)
!3586 = !DILocation(line: 201, column: 29, scope: !3569)
!3587 = !DILocalVariable(name: "authors", arg: 5, scope: !3569, file: !3381, line: 201, type: !3572)
!3588 = !DILocation(line: 201, column: 46, scope: !3569)
!3589 = !DILocalVariable(name: "n_authors", scope: !3569, file: !3381, line: 203, type: !134)
!3590 = !DILocation(line: 203, column: 10, scope: !3569)
!3591 = !DILocalVariable(name: "authtab", scope: !3569, file: !3381, line: 204, type: !3592)
!3592 = !DICompositeType(tag: DW_TAG_array_type, baseType: !69, size: 640, elements: !76)
!3593 = !DILocation(line: 204, column: 15, scope: !3569)
!3594 = !DILocation(line: 206, column: 18, scope: !3595)
!3595 = distinct !DILexicalBlock(scope: !3569, file: !3381, line: 206, column: 3)
!3596 = !DILocation(line: 206, column: 8, scope: !3595)
!3597 = !DILocation(line: 207, column: 8, scope: !3598)
!3598 = distinct !DILexicalBlock(scope: !3595, file: !3381, line: 206, column: 3)
!3599 = !DILocation(line: 207, column: 18, scope: !3598)
!3600 = !DILocation(line: 208, column: 10, scope: !3598)
!3601 = !DILocation(line: 208, column: 35, scope: !3598)
!3602 = !DILocation(line: 208, column: 22, scope: !3598)
!3603 = !DILocation(line: 208, column: 14, scope: !3598)
!3604 = !DILocation(line: 208, column: 33, scope: !3598)
!3605 = !DILocation(line: 208, column: 67, scope: !3598)
!3606 = !DILocation(line: 0, scope: !3598)
!3607 = !DILocation(line: 206, column: 3, scope: !3595)
!3608 = !DILocation(line: 209, column: 17, scope: !3598)
!3609 = !DILocation(line: 206, column: 3, scope: !3598)
!3610 = distinct !{!3610, !3607, !3611}
!3611 = !DILocation(line: 210, column: 5, scope: !3595)
!3612 = !DILocation(line: 211, column: 20, scope: !3569)
!3613 = !DILocation(line: 211, column: 28, scope: !3569)
!3614 = !DILocation(line: 211, column: 42, scope: !3569)
!3615 = !DILocation(line: 211, column: 51, scope: !3569)
!3616 = !DILocation(line: 212, column: 20, scope: !3569)
!3617 = !DILocation(line: 212, column: 29, scope: !3569)
!3618 = !DILocation(line: 211, column: 3, scope: !3569)
!3619 = !DILocation(line: 213, column: 1, scope: !3569)
!3620 = distinct !DISubprogram(name: "version_etc", scope: !3381, file: !3381, line: 230, type: !3621, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !210, retainedNodes: !4)
!3621 = !DISubroutineType(types: !3622)
!3622 = !{null, !3384, !69, !69, !69, null}
!3623 = !DILocalVariable(name: "stream", arg: 1, scope: !3620, file: !3381, line: 230, type: !3384)
!3624 = !DILocation(line: 230, column: 20, scope: !3620)
!3625 = !DILocalVariable(name: "command_name", arg: 2, scope: !3620, file: !3381, line: 231, type: !69)
!3626 = !DILocation(line: 231, column: 26, scope: !3620)
!3627 = !DILocalVariable(name: "package", arg: 3, scope: !3620, file: !3381, line: 231, type: !69)
!3628 = !DILocation(line: 231, column: 52, scope: !3620)
!3629 = !DILocalVariable(name: "version", arg: 4, scope: !3620, file: !3381, line: 232, type: !69)
!3630 = !DILocation(line: 232, column: 26, scope: !3620)
!3631 = !DILocalVariable(name: "authors", scope: !3620, file: !3381, line: 234, type: !3632)
!3632 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !878, line: 52, baseType: !3633)
!3633 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3634, line: 32, baseType: !3635)
!3634 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!3635 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !211, line: 234, baseType: !3636)
!3636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3573, size: 192, elements: !3416)
!3637 = !DILocation(line: 234, column: 11, scope: !3620)
!3638 = !DILocation(line: 236, column: 3, scope: !3620)
!3639 = !DILocation(line: 237, column: 19, scope: !3620)
!3640 = !DILocation(line: 237, column: 27, scope: !3620)
!3641 = !DILocation(line: 237, column: 41, scope: !3620)
!3642 = !DILocation(line: 237, column: 50, scope: !3620)
!3643 = !DILocation(line: 237, column: 59, scope: !3620)
!3644 = !DILocation(line: 237, column: 3, scope: !3620)
!3645 = !DILocation(line: 238, column: 3, scope: !3620)
!3646 = !DILocation(line: 239, column: 1, scope: !3620)
!3647 = distinct !DISubprogram(name: "xmalloc", scope: !3648, file: !3648, line: 39, type: !3649, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!3648 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3649 = !DISubroutineType(types: !3650)
!3650 = !{!8, !134}
!3651 = !DILocalVariable(name: "n", arg: 1, scope: !3647, file: !3648, line: 39, type: !134)
!3652 = !DILocation(line: 39, column: 17, scope: !3647)
!3653 = !DILocalVariable(name: "p", scope: !3647, file: !3648, line: 41, type: !8)
!3654 = !DILocation(line: 41, column: 9, scope: !3647)
!3655 = !DILocation(line: 41, column: 21, scope: !3647)
!3656 = !DILocation(line: 41, column: 13, scope: !3647)
!3657 = !DILocation(line: 42, column: 8, scope: !3658)
!3658 = distinct !DILexicalBlock(scope: !3647, file: !3648, line: 42, column: 7)
!3659 = !DILocation(line: 42, column: 10, scope: !3658)
!3660 = !DILocation(line: 42, column: 13, scope: !3658)
!3661 = !DILocation(line: 42, column: 15, scope: !3658)
!3662 = !DILocation(line: 42, column: 7, scope: !3647)
!3663 = !DILocation(line: 43, column: 5, scope: !3658)
!3664 = !DILocation(line: 44, column: 10, scope: !3647)
!3665 = !DILocation(line: 44, column: 3, scope: !3647)
!3666 = !DILocalVariable(name: "n", arg: 1, scope: !3667, file: !3648, line: 39, type: !134)
!3667 = distinct !DISubprogram(name: "xmalloc", scope: !3648, file: !3648, line: 39, type: !3649, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3668, retainedNodes: !4)
!3668 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!3669 = !DILocalVariable(name: "p", scope: !3667, file: !3648, line: 41, type: !8)
!3670 = distinct !DISubprogram(name: "xrealloc", scope: !3648, file: !3648, line: 51, type: !3671, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!3671 = !DISubroutineType(types: !3672)
!3672 = !{!8, !8, !134}
!3673 = !DILocalVariable(name: "p", arg: 1, scope: !3670, file: !3648, line: 51, type: !8)
!3674 = !DILocation(line: 51, column: 17, scope: !3670)
!3675 = !DILocalVariable(name: "n", arg: 2, scope: !3670, file: !3648, line: 51, type: !134)
!3676 = !DILocation(line: 51, column: 27, scope: !3670)
!3677 = !DILocation(line: 53, column: 8, scope: !3678)
!3678 = distinct !DILexicalBlock(scope: !3670, file: !3648, line: 53, column: 7)
!3679 = !DILocation(line: 53, column: 10, scope: !3678)
!3680 = !DILocation(line: 53, column: 13, scope: !3678)
!3681 = !DILocation(line: 53, column: 7, scope: !3670)
!3682 = !DILocation(line: 57, column: 13, scope: !3683)
!3683 = distinct !DILexicalBlock(scope: !3678, file: !3648, line: 54, column: 5)
!3684 = !DILocation(line: 57, column: 7, scope: !3683)
!3685 = !DILocation(line: 58, column: 7, scope: !3683)
!3686 = !DILocation(line: 61, column: 16, scope: !3670)
!3687 = !DILocation(line: 61, column: 19, scope: !3670)
!3688 = !DILocation(line: 61, column: 7, scope: !3670)
!3689 = !DILocation(line: 61, column: 5, scope: !3670)
!3690 = !DILocation(line: 62, column: 8, scope: !3691)
!3691 = distinct !DILexicalBlock(scope: !3670, file: !3648, line: 62, column: 7)
!3692 = !DILocation(line: 62, column: 10, scope: !3691)
!3693 = !DILocation(line: 62, column: 13, scope: !3691)
!3694 = !DILocation(line: 62, column: 7, scope: !3670)
!3695 = !DILocation(line: 63, column: 5, scope: !3691)
!3696 = !DILocation(line: 64, column: 10, scope: !3670)
!3697 = !DILocation(line: 64, column: 3, scope: !3670)
!3698 = !DILocation(line: 65, column: 1, scope: !3670)
!3699 = !DILocalVariable(name: "p", arg: 1, scope: !3700, file: !3648, line: 51, type: !8)
!3700 = distinct !DISubprogram(name: "xrealloc", scope: !3648, file: !3648, line: 51, type: !3671, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3701, retainedNodes: !4)
!3701 = distinct !DICompileUnit(language: DW_LANG_C99, file: !214, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !215, nameTableKind: None)
!3702 = !DILocalVariable(name: "n", arg: 2, scope: !3700, file: !3648, line: 51, type: !134)
!3703 = distinct !DISubprogram(name: "xcharalloc", scope: !3704, file: !3704, line: 216, type: !3705, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!3704 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3705 = !DISubroutineType(types: !3706)
!3706 = !{!6, !134}
!3707 = !DILocalVariable(name: "n", arg: 1, scope: !3703, file: !3704, line: 216, type: !134)
!3708 = !DILocation(line: 216, column: 20, scope: !3703)
!3709 = !DILocation(line: 218, column: 10, scope: !3703)
!3710 = !DILocation(line: 218, column: 3, scope: !3703)
!3711 = distinct !DISubprogram(name: "xmemdup", scope: !3648, file: !3648, line: 111, type: !3712, scopeLine: 112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!3712 = !DISubroutineType(types: !3713)
!3713 = !{!8, !3714, !134}
!3714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3715, size: 64)
!3715 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!3716 = !DILocalVariable(name: "p", arg: 1, scope: !3711, file: !3648, line: 111, type: !3714)
!3717 = !DILocation(line: 111, column: 22, scope: !3711)
!3718 = !DILocalVariable(name: "s", arg: 2, scope: !3711, file: !3648, line: 111, type: !134)
!3719 = !DILocation(line: 111, column: 32, scope: !3711)
!3720 = !DILocation(line: 113, column: 27, scope: !3711)
!3721 = !DILocation(line: 113, column: 18, scope: !3711)
!3722 = !DILocation(line: 113, column: 31, scope: !3711)
!3723 = !DILocation(line: 113, column: 34, scope: !3711)
!3724 = !DILocation(line: 113, column: 10, scope: !3711)
!3725 = !DILocation(line: 113, column: 3, scope: !3711)
!3726 = distinct !DISubprogram(name: "xstrdup", scope: !3648, file: !3648, line: 119, type: !2914, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !213, retainedNodes: !4)
!3727 = !DILocalVariable(name: "string", arg: 1, scope: !3726, file: !3648, line: 119, type: !69)
!3728 = !DILocation(line: 119, column: 22, scope: !3726)
!3729 = !DILocation(line: 121, column: 19, scope: !3726)
!3730 = !DILocation(line: 121, column: 35, scope: !3726)
!3731 = !DILocation(line: 121, column: 27, scope: !3726)
!3732 = !DILocation(line: 121, column: 43, scope: !3726)
!3733 = !DILocation(line: 121, column: 10, scope: !3726)
!3734 = !DILocation(line: 121, column: 3, scope: !3726)
!3735 = distinct !DISubprogram(name: "xalloc_die", scope: !3736, file: !3736, line: 32, type: !1513, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !216, retainedNodes: !4)
!3736 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3737 = !DILocation(line: 34, column: 10, scope: !3735)
!3738 = !DILocation(line: 34, column: 33, scope: !3735)
!3739 = !DILocation(line: 34, column: 3, scope: !3735)
!3740 = !DILocation(line: 40, column: 3, scope: !3735)
!3741 = distinct !DISubprogram(name: "xgetgroups", scope: !3742, file: !3742, line: 31, type: !3743, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !218, retainedNodes: !4)
!3742 = !DIFile(filename: "lib/xgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3743 = !DISubroutineType(types: !3744)
!3744 = !{!72, !69, !21, !3745}
!3745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !183, size: 64)
!3746 = !DILocalVariable(name: "username", arg: 1, scope: !3741, file: !3742, line: 31, type: !69)
!3747 = !DILocation(line: 31, column: 25, scope: !3741)
!3748 = !DILocalVariable(name: "gid", arg: 2, scope: !3741, file: !3742, line: 31, type: !21)
!3749 = !DILocation(line: 31, column: 41, scope: !3741)
!3750 = !DILocalVariable(name: "groups", arg: 3, scope: !3741, file: !3742, line: 31, type: !3745)
!3751 = !DILocation(line: 31, column: 54, scope: !3741)
!3752 = !DILocalVariable(name: "result", scope: !3741, file: !3742, line: 33, type: !72)
!3753 = !DILocation(line: 33, column: 7, scope: !3741)
!3754 = !DILocation(line: 33, column: 28, scope: !3741)
!3755 = !DILocation(line: 33, column: 38, scope: !3741)
!3756 = !DILocation(line: 33, column: 43, scope: !3741)
!3757 = !DILocation(line: 33, column: 16, scope: !3741)
!3758 = !DILocation(line: 34, column: 7, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3741, file: !3742, line: 34, column: 7)
!3760 = !DILocation(line: 34, column: 14, scope: !3759)
!3761 = !DILocation(line: 34, column: 20, scope: !3759)
!3762 = !DILocation(line: 34, column: 23, scope: !3759)
!3763 = !DILocation(line: 34, column: 29, scope: !3759)
!3764 = !DILocation(line: 34, column: 7, scope: !3741)
!3765 = !DILocation(line: 35, column: 5, scope: !3759)
!3766 = !DILocation(line: 36, column: 10, scope: !3741)
!3767 = !DILocation(line: 36, column: 3, scope: !3741)
!3768 = !DILocalVariable(name: "username", arg: 1, scope: !3769, file: !3742, line: 31, type: !69)
!3769 = distinct !DISubprogram(name: "xgetgroups", scope: !3742, file: !3742, line: 31, type: !3743, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3770, retainedNodes: !4)
!3770 = distinct !DICompileUnit(language: DW_LANG_C99, file: !219, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3771 = !DILocalVariable(name: "gid", arg: 2, scope: !3769, file: !3742, line: 31, type: !21)
!3772 = !DILocalVariable(name: "groups", arg: 3, scope: !3769, file: !3742, line: 31, type: !3745)
!3773 = !DILocalVariable(name: "result", scope: !3769, file: !3742, line: 33, type: !72)
!3774 = distinct !DISubprogram(name: "xstrtoul", scope: !3775, file: !3775, line: 76, type: !3776, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !220, retainedNodes: !4)
!3775 = !DIFile(filename: "./lib/xstrtol.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3776 = !DISubroutineType(types: !3777)
!3777 = !{!3778, !69, !184, !72, !3779, !69}
!3778 = !DIDerivedType(tag: DW_TAG_typedef, name: "strtol_error", file: !224, line: 38, baseType: !223)
!3779 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !84, size: 64)
!3780 = !DILocalVariable(name: "s", arg: 1, scope: !3774, file: !3775, line: 76, type: !69)
!3781 = !DILocation(line: 76, column: 24, scope: !3774)
!3782 = !DILocalVariable(name: "ptr", arg: 2, scope: !3774, file: !3775, line: 76, type: !184)
!3783 = !DILocation(line: 76, column: 34, scope: !3774)
!3784 = !DILocalVariable(name: "strtol_base", arg: 3, scope: !3774, file: !3775, line: 76, type: !72)
!3785 = !DILocation(line: 76, column: 43, scope: !3774)
!3786 = !DILocalVariable(name: "val", arg: 4, scope: !3774, file: !3775, line: 77, type: !3779)
!3787 = !DILocation(line: 77, column: 24, scope: !3774)
!3788 = !DILocalVariable(name: "valid_suffixes", arg: 5, scope: !3774, file: !3775, line: 77, type: !69)
!3789 = !DILocation(line: 77, column: 41, scope: !3774)
!3790 = !DILocalVariable(name: "t_ptr", scope: !3774, file: !3775, line: 79, type: !6)
!3791 = !DILocation(line: 79, column: 9, scope: !3774)
!3792 = !DILocalVariable(name: "p", scope: !3774, file: !3775, line: 80, type: !184)
!3793 = !DILocation(line: 80, column: 10, scope: !3774)
!3794 = !DILocalVariable(name: "tmp", scope: !3774, file: !3775, line: 81, type: !84)
!3795 = !DILocation(line: 81, column: 14, scope: !3774)
!3796 = !DILocalVariable(name: "err", scope: !3774, file: !3775, line: 82, type: !3778)
!3797 = !DILocation(line: 82, column: 16, scope: !3774)
!3798 = !DILocation(line: 84, column: 3, scope: !3799)
!3799 = distinct !DILexicalBlock(scope: !3800, file: !3775, line: 84, column: 3)
!3800 = distinct !DILexicalBlock(scope: !3774, file: !3775, line: 84, column: 3)
!3801 = !DILocation(line: 84, column: 3, scope: !3800)
!3802 = !DILocation(line: 86, column: 8, scope: !3774)
!3803 = !DILocation(line: 86, column: 14, scope: !3774)
!3804 = !DILocation(line: 86, column: 5, scope: !3774)
!3805 = !DILocation(line: 88, column: 3, scope: !3774)
!3806 = !DILocation(line: 88, column: 9, scope: !3774)
!3807 = !DILocalVariable(name: "q", scope: !3808, file: !3775, line: 92, type: !69)
!3808 = distinct !DILexicalBlock(scope: !3809, file: !3775, line: 91, column: 5)
!3809 = distinct !DILexicalBlock(scope: !3774, file: !3775, line: 90, column: 7)
!3810 = !DILocation(line: 92, column: 19, scope: !3808)
!3811 = !DILocation(line: 92, column: 23, scope: !3808)
!3812 = !DILocalVariable(name: "ch", scope: !3808, file: !3775, line: 93, type: !240)
!3813 = !DILocation(line: 93, column: 21, scope: !3808)
!3814 = !DILocation(line: 93, column: 27, scope: !3808)
!3815 = !DILocation(line: 93, column: 26, scope: !3808)
!3816 = !DILocation(line: 94, column: 7, scope: !3808)
!3817 = !DILocation(line: 94, column: 14, scope: !3808)
!3818 = !DILocation(line: 95, column: 15, scope: !3808)
!3819 = !DILocation(line: 95, column: 14, scope: !3808)
!3820 = !DILocation(line: 95, column: 12, scope: !3808)
!3821 = distinct !{!3821, !3816, !3822}
!3822 = !DILocation(line: 95, column: 17, scope: !3808)
!3823 = !DILocation(line: 96, column: 11, scope: !3824)
!3824 = distinct !DILexicalBlock(scope: !3808, file: !3775, line: 96, column: 11)
!3825 = !DILocation(line: 96, column: 14, scope: !3824)
!3826 = !DILocation(line: 96, column: 11, scope: !3808)
!3827 = !DILocation(line: 97, column: 9, scope: !3824)
!3828 = !DILocation(line: 100, column: 19, scope: !3774)
!3829 = !DILocation(line: 100, column: 22, scope: !3774)
!3830 = !DILocation(line: 100, column: 25, scope: !3774)
!3831 = !DILocation(line: 100, column: 9, scope: !3774)
!3832 = !DILocation(line: 100, column: 7, scope: !3774)
!3833 = !DILocation(line: 102, column: 8, scope: !3834)
!3834 = distinct !DILexicalBlock(scope: !3774, file: !3775, line: 102, column: 7)
!3835 = !DILocation(line: 102, column: 7, scope: !3834)
!3836 = !DILocation(line: 102, column: 13, scope: !3834)
!3837 = !DILocation(line: 102, column: 10, scope: !3834)
!3838 = !DILocation(line: 102, column: 7, scope: !3774)
!3839 = !DILocation(line: 106, column: 11, scope: !3840)
!3840 = distinct !DILexicalBlock(scope: !3841, file: !3775, line: 106, column: 11)
!3841 = distinct !DILexicalBlock(scope: !3834, file: !3775, line: 103, column: 5)
!3842 = !DILocation(line: 106, column: 26, scope: !3840)
!3843 = !DILocation(line: 106, column: 31, scope: !3840)
!3844 = !DILocation(line: 106, column: 30, scope: !3840)
!3845 = !DILocation(line: 106, column: 29, scope: !3840)
!3846 = !DILocation(line: 106, column: 33, scope: !3840)
!3847 = !DILocation(line: 106, column: 44, scope: !3840)
!3848 = !DILocation(line: 106, column: 62, scope: !3840)
!3849 = !DILocation(line: 106, column: 61, scope: !3840)
!3850 = !DILocation(line: 106, column: 60, scope: !3840)
!3851 = !DILocation(line: 106, column: 36, scope: !3840)
!3852 = !DILocation(line: 106, column: 11, scope: !3841)
!3853 = !DILocation(line: 107, column: 13, scope: !3840)
!3854 = !DILocation(line: 107, column: 9, scope: !3840)
!3855 = !DILocation(line: 109, column: 9, scope: !3840)
!3856 = !DILocation(line: 110, column: 5, scope: !3841)
!3857 = !DILocation(line: 111, column: 12, scope: !3858)
!3858 = distinct !DILexicalBlock(scope: !3834, file: !3775, line: 111, column: 12)
!3859 = !DILocation(line: 111, column: 18, scope: !3858)
!3860 = !DILocation(line: 111, column: 12, scope: !3834)
!3861 = !DILocation(line: 113, column: 11, scope: !3862)
!3862 = distinct !DILexicalBlock(scope: !3863, file: !3775, line: 113, column: 11)
!3863 = distinct !DILexicalBlock(scope: !3858, file: !3775, line: 112, column: 5)
!3864 = !DILocation(line: 113, column: 17, scope: !3862)
!3865 = !DILocation(line: 113, column: 11, scope: !3863)
!3866 = !DILocation(line: 114, column: 9, scope: !3862)
!3867 = !DILocation(line: 115, column: 11, scope: !3863)
!3868 = !DILocation(line: 116, column: 5, scope: !3863)
!3869 = !DILocation(line: 121, column: 8, scope: !3870)
!3870 = distinct !DILexicalBlock(scope: !3774, file: !3775, line: 121, column: 7)
!3871 = !DILocation(line: 121, column: 7, scope: !3774)
!3872 = !DILocation(line: 123, column: 14, scope: !3873)
!3873 = distinct !DILexicalBlock(scope: !3870, file: !3775, line: 122, column: 5)
!3874 = !DILocation(line: 123, column: 8, scope: !3873)
!3875 = !DILocation(line: 123, column: 12, scope: !3873)
!3876 = !DILocation(line: 124, column: 14, scope: !3873)
!3877 = !DILocation(line: 124, column: 7, scope: !3873)
!3878 = !DILocation(line: 127, column: 9, scope: !3879)
!3879 = distinct !DILexicalBlock(scope: !3774, file: !3775, line: 127, column: 7)
!3880 = !DILocation(line: 127, column: 8, scope: !3879)
!3881 = !DILocation(line: 127, column: 7, scope: !3879)
!3882 = !DILocation(line: 127, column: 11, scope: !3879)
!3883 = !DILocation(line: 127, column: 7, scope: !3774)
!3884 = !DILocalVariable(name: "base", scope: !3885, file: !3775, line: 129, type: !72)
!3885 = distinct !DILexicalBlock(scope: !3879, file: !3775, line: 128, column: 5)
!3886 = !DILocation(line: 129, column: 11, scope: !3885)
!3887 = !DILocalVariable(name: "suffixes", scope: !3885, file: !3775, line: 130, type: !72)
!3888 = !DILocation(line: 130, column: 11, scope: !3885)
!3889 = !DILocalVariable(name: "overflow", scope: !3885, file: !3775, line: 131, type: !3778)
!3890 = !DILocation(line: 131, column: 20, scope: !3885)
!3891 = !DILocation(line: 133, column: 20, scope: !3892)
!3892 = distinct !DILexicalBlock(scope: !3885, file: !3775, line: 133, column: 11)
!3893 = !DILocation(line: 133, column: 38, scope: !3892)
!3894 = !DILocation(line: 133, column: 37, scope: !3892)
!3895 = !DILocation(line: 133, column: 36, scope: !3892)
!3896 = !DILocation(line: 133, column: 12, scope: !3892)
!3897 = !DILocation(line: 133, column: 11, scope: !3885)
!3898 = !DILocation(line: 135, column: 18, scope: !3899)
!3899 = distinct !DILexicalBlock(scope: !3892, file: !3775, line: 134, column: 9)
!3900 = !DILocation(line: 135, column: 12, scope: !3899)
!3901 = !DILocation(line: 135, column: 16, scope: !3899)
!3902 = !DILocation(line: 136, column: 18, scope: !3899)
!3903 = !DILocation(line: 136, column: 22, scope: !3899)
!3904 = !DILocation(line: 136, column: 11, scope: !3899)
!3905 = !DILocation(line: 139, column: 17, scope: !3885)
!3906 = !DILocation(line: 139, column: 16, scope: !3885)
!3907 = !DILocation(line: 139, column: 15, scope: !3885)
!3908 = !DILocation(line: 139, column: 7, scope: !3885)
!3909 = !DILocation(line: 151, column: 23, scope: !3910)
!3910 = distinct !DILexicalBlock(scope: !3911, file: !3775, line: 151, column: 15)
!3911 = distinct !DILexicalBlock(scope: !3885, file: !3775, line: 140, column: 9)
!3912 = !DILocation(line: 151, column: 15, scope: !3910)
!3913 = !DILocation(line: 151, column: 15, scope: !3911)
!3914 = !DILocation(line: 152, column: 21, scope: !3910)
!3915 = !DILocation(line: 152, column: 13, scope: !3910)
!3916 = !DILocation(line: 155, column: 21, scope: !3917)
!3917 = distinct !DILexicalBlock(scope: !3918, file: !3775, line: 155, column: 21)
!3918 = distinct !DILexicalBlock(scope: !3910, file: !3775, line: 153, column: 15)
!3919 = !DILocation(line: 155, column: 29, scope: !3917)
!3920 = !DILocation(line: 155, column: 21, scope: !3918)
!3921 = !DILocation(line: 156, column: 28, scope: !3917)
!3922 = !DILocation(line: 156, column: 19, scope: !3917)
!3923 = !DILocation(line: 157, column: 17, scope: !3918)
!3924 = !DILocation(line: 161, column: 22, scope: !3918)
!3925 = !DILocation(line: 162, column: 25, scope: !3918)
!3926 = !DILocation(line: 163, column: 17, scope: !3918)
!3927 = !DILocation(line: 164, column: 15, scope: !3918)
!3928 = !DILocation(line: 165, column: 9, scope: !3911)
!3929 = !DILocation(line: 167, column: 17, scope: !3885)
!3930 = !DILocation(line: 167, column: 16, scope: !3885)
!3931 = !DILocation(line: 167, column: 15, scope: !3885)
!3932 = !DILocation(line: 167, column: 7, scope: !3885)
!3933 = !DILocation(line: 170, column: 22, scope: !3934)
!3934 = distinct !DILexicalBlock(scope: !3885, file: !3775, line: 168, column: 9)
!3935 = !DILocation(line: 170, column: 20, scope: !3934)
!3936 = !DILocation(line: 171, column: 11, scope: !3934)
!3937 = !DILocation(line: 177, column: 22, scope: !3934)
!3938 = !DILocation(line: 177, column: 20, scope: !3934)
!3939 = !DILocation(line: 178, column: 11, scope: !3934)
!3940 = !DILocation(line: 181, column: 20, scope: !3934)
!3941 = !DILocation(line: 182, column: 11, scope: !3934)
!3942 = !DILocation(line: 185, column: 48, scope: !3934)
!3943 = !DILocation(line: 185, column: 22, scope: !3934)
!3944 = !DILocation(line: 185, column: 20, scope: !3934)
!3945 = !DILocation(line: 186, column: 11, scope: !3934)
!3946 = !DILocation(line: 190, column: 48, scope: !3934)
!3947 = !DILocation(line: 190, column: 22, scope: !3934)
!3948 = !DILocation(line: 190, column: 20, scope: !3934)
!3949 = !DILocation(line: 191, column: 11, scope: !3934)
!3950 = !DILocation(line: 195, column: 48, scope: !3934)
!3951 = !DILocation(line: 195, column: 22, scope: !3934)
!3952 = !DILocation(line: 195, column: 20, scope: !3934)
!3953 = !DILocation(line: 196, column: 11, scope: !3934)
!3954 = !DILocation(line: 200, column: 48, scope: !3934)
!3955 = !DILocation(line: 200, column: 22, scope: !3934)
!3956 = !DILocation(line: 200, column: 20, scope: !3934)
!3957 = !DILocation(line: 201, column: 11, scope: !3934)
!3958 = !DILocation(line: 204, column: 48, scope: !3934)
!3959 = !DILocation(line: 204, column: 22, scope: !3934)
!3960 = !DILocation(line: 204, column: 20, scope: !3934)
!3961 = !DILocation(line: 205, column: 11, scope: !3934)
!3962 = !DILocation(line: 209, column: 48, scope: !3934)
!3963 = !DILocation(line: 209, column: 22, scope: !3934)
!3964 = !DILocation(line: 209, column: 20, scope: !3934)
!3965 = !DILocation(line: 210, column: 11, scope: !3934)
!3966 = !DILocation(line: 213, column: 22, scope: !3934)
!3967 = !DILocation(line: 213, column: 20, scope: !3934)
!3968 = !DILocation(line: 214, column: 11, scope: !3934)
!3969 = !DILocation(line: 217, column: 48, scope: !3934)
!3970 = !DILocation(line: 217, column: 22, scope: !3934)
!3971 = !DILocation(line: 217, column: 20, scope: !3934)
!3972 = !DILocation(line: 218, column: 11, scope: !3934)
!3973 = !DILocation(line: 221, column: 48, scope: !3934)
!3974 = !DILocation(line: 221, column: 22, scope: !3934)
!3975 = !DILocation(line: 221, column: 20, scope: !3934)
!3976 = !DILocation(line: 222, column: 11, scope: !3934)
!3977 = !DILocation(line: 225, column: 18, scope: !3934)
!3978 = !DILocation(line: 225, column: 12, scope: !3934)
!3979 = !DILocation(line: 225, column: 16, scope: !3934)
!3980 = !DILocation(line: 226, column: 18, scope: !3934)
!3981 = !DILocation(line: 226, column: 22, scope: !3934)
!3982 = !DILocation(line: 226, column: 11, scope: !3934)
!3983 = !DILocation(line: 229, column: 14, scope: !3885)
!3984 = !DILocation(line: 229, column: 11, scope: !3885)
!3985 = !DILocation(line: 230, column: 13, scope: !3885)
!3986 = !DILocation(line: 230, column: 8, scope: !3885)
!3987 = !DILocation(line: 230, column: 10, scope: !3885)
!3988 = !DILocation(line: 231, column: 13, scope: !3989)
!3989 = distinct !DILexicalBlock(scope: !3885, file: !3775, line: 231, column: 11)
!3990 = !DILocation(line: 231, column: 12, scope: !3989)
!3991 = !DILocation(line: 231, column: 11, scope: !3989)
!3992 = !DILocation(line: 231, column: 11, scope: !3885)
!3993 = !DILocation(line: 232, column: 13, scope: !3989)
!3994 = !DILocation(line: 232, column: 9, scope: !3989)
!3995 = !DILocation(line: 233, column: 5, scope: !3885)
!3996 = !DILocation(line: 235, column: 10, scope: !3774)
!3997 = !DILocation(line: 235, column: 4, scope: !3774)
!3998 = !DILocation(line: 235, column: 8, scope: !3774)
!3999 = !DILocation(line: 236, column: 10, scope: !3774)
!4000 = !DILocation(line: 236, column: 3, scope: !3774)
!4001 = !DILocation(line: 237, column: 1, scope: !3774)
!4002 = !DILocalVariable(name: "s", arg: 1, scope: !4003, file: !3775, line: 76, type: !69)
!4003 = distinct !DISubprogram(name: "xstrtoul", scope: !3775, file: !3775, line: 76, type: !3776, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4004, retainedNodes: !4)
!4004 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4005 = !DILocalVariable(name: "ptr", arg: 2, scope: !4003, file: !3775, line: 76, type: !184)
!4006 = !DILocalVariable(name: "strtol_base", arg: 3, scope: !4003, file: !3775, line: 76, type: !72)
!4007 = !DILocalVariable(name: "val", arg: 4, scope: !4003, file: !3775, line: 77, type: !3779)
!4008 = !DILocalVariable(name: "valid_suffixes", arg: 5, scope: !4003, file: !3775, line: 77, type: !69)
!4009 = !DILocalVariable(name: "t_ptr", scope: !4003, file: !3775, line: 79, type: !6)
!4010 = !DILocalVariable(name: "p", scope: !4003, file: !3775, line: 80, type: !184)
!4011 = !DILocalVariable(name: "tmp", scope: !4003, file: !3775, line: 81, type: !84)
!4012 = !DILocalVariable(name: "err", scope: !4003, file: !3775, line: 82, type: !3778)
!4013 = !DILocalVariable(name: "suffixes", scope: !4014, file: !3775, line: 130, type: !72)
!4014 = distinct !DILexicalBlock(scope: !4015, file: !3775, line: 128, column: 5)
!4015 = distinct !DILexicalBlock(scope: !4016, file: !3775, line: 127, column: 7)
!4016 = distinct !DISubprogram(name: "xstrtoul", scope: !3775, file: !3775, line: 76, type: !3776, scopeLine: 78, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4017, retainedNodes: !4)
!4017 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4018 = !DILocalVariable(name: "overflow", scope: !4014, file: !3775, line: 131, type: !3778)
!4019 = distinct !DISubprogram(name: "bkm_scale", scope: !3775, file: !3775, line: 48, type: !4020, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4020 = !DISubroutineType(types: !4021)
!4021 = !{!3778, !3779, !72}
!4022 = !DILocalVariable(name: "x", arg: 1, scope: !4019, file: !3775, line: 48, type: !3779)
!4023 = !DILocation(line: 48, column: 24, scope: !4019)
!4024 = !DILocalVariable(name: "scale_factor", arg: 2, scope: !4019, file: !3775, line: 48, type: !72)
!4025 = !DILocation(line: 48, column: 31, scope: !4019)
!4026 = !DILocation(line: 55, column: 26, scope: !4027)
!4027 = distinct !DILexicalBlock(scope: !4019, file: !3775, line: 55, column: 7)
!4028 = !DILocation(line: 55, column: 24, scope: !4027)
!4029 = !DILocation(line: 55, column: 42, scope: !4027)
!4030 = !DILocation(line: 55, column: 41, scope: !4027)
!4031 = !DILocation(line: 55, column: 39, scope: !4027)
!4032 = !DILocation(line: 55, column: 7, scope: !4019)
!4033 = !DILocation(line: 57, column: 8, scope: !4034)
!4034 = distinct !DILexicalBlock(scope: !4027, file: !3775, line: 56, column: 5)
!4035 = !DILocation(line: 57, column: 10, scope: !4034)
!4036 = !DILocation(line: 58, column: 7, scope: !4034)
!4037 = !DILocation(line: 60, column: 9, scope: !4019)
!4038 = !DILocation(line: 60, column: 4, scope: !4019)
!4039 = !DILocation(line: 60, column: 6, scope: !4019)
!4040 = !DILocation(line: 61, column: 3, scope: !4019)
!4041 = !DILocation(line: 62, column: 1, scope: !4019)
!4042 = distinct !DISubprogram(name: "bkm_scale_by_power", scope: !3775, file: !3775, line: 65, type: !4043, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !220, retainedNodes: !4)
!4043 = !DISubroutineType(types: !4044)
!4044 = !{!3778, !3779, !72, !72}
!4045 = !DILocalVariable(name: "x", arg: 1, scope: !4042, file: !3775, line: 65, type: !3779)
!4046 = !DILocation(line: 65, column: 33, scope: !4042)
!4047 = !DILocalVariable(name: "base", arg: 2, scope: !4042, file: !3775, line: 65, type: !72)
!4048 = !DILocation(line: 65, column: 40, scope: !4042)
!4049 = !DILocalVariable(name: "power", arg: 3, scope: !4042, file: !3775, line: 65, type: !72)
!4050 = !DILocation(line: 65, column: 50, scope: !4042)
!4051 = !DILocalVariable(name: "err", scope: !4042, file: !3775, line: 67, type: !3778)
!4052 = !DILocation(line: 67, column: 16, scope: !4042)
!4053 = !DILocation(line: 68, column: 3, scope: !4042)
!4054 = !DILocation(line: 68, column: 15, scope: !4042)
!4055 = !DILocation(line: 69, column: 23, scope: !4042)
!4056 = !DILocation(line: 69, column: 26, scope: !4042)
!4057 = !DILocation(line: 69, column: 12, scope: !4042)
!4058 = !DILocation(line: 69, column: 9, scope: !4042)
!4059 = distinct !{!4059, !4053, !4060}
!4060 = !DILocation(line: 69, column: 30, scope: !4042)
!4061 = !DILocation(line: 70, column: 10, scope: !4042)
!4062 = !DILocation(line: 70, column: 3, scope: !4042)
!4063 = !DILocalVariable(name: "x", arg: 1, scope: !4064, file: !3775, line: 65, type: !3779)
!4064 = distinct !DISubprogram(name: "bkm_scale_by_power", scope: !3775, file: !3775, line: 65, type: !4043, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4065, retainedNodes: !4)
!4065 = distinct !DICompileUnit(language: DW_LANG_C99, file: !221, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !222, retainedTypes: !231, nameTableKind: None)
!4066 = !DILocalVariable(name: "base", arg: 2, scope: !4064, file: !3775, line: 65, type: !72)
!4067 = !DILocalVariable(name: "power", arg: 3, scope: !4064, file: !3775, line: 65, type: !72)
!4068 = !DILocalVariable(name: "err", scope: !4064, file: !3775, line: 67, type: !3778)
!4069 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !4070, file: !4070, line: 86, type: !4071, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !232, retainedNodes: !4)
!4070 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4071 = !DISubroutineType(types: !4072)
!4072 = !{!134, !4073, !69, !134, !4074}
!4073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2484, size: 64)
!4074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4075, size: 64)
!4075 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2455, line: 6, baseType: !4076)
!4076 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2457, line: 21, baseType: !4077)
!4077 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2457, line: 13, size: 64, elements: !4078)
!4078 = !{!4079, !4080}
!4079 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !4077, file: !2457, line: 15, baseType: !72, size: 32)
!4080 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !4077, file: !2457, line: 20, baseType: !4081, size: 32, offset: 32)
!4081 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4077, file: !2457, line: 16, size: 32, elements: !4082)
!4082 = !{!4083, !4084}
!4083 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !4081, file: !2457, line: 18, baseType: !16, size: 32)
!4084 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !4081, file: !2457, line: 19, baseType: !2466, size: 32)
!4085 = !DILocalVariable(name: "pwc", arg: 1, scope: !4069, file: !4070, line: 86, type: !4073)
!4086 = !DILocation(line: 86, column: 23, scope: !4069)
!4087 = !DILocalVariable(name: "s", arg: 2, scope: !4069, file: !4070, line: 86, type: !69)
!4088 = !DILocation(line: 86, column: 40, scope: !4069)
!4089 = !DILocalVariable(name: "n", arg: 3, scope: !4069, file: !4070, line: 86, type: !134)
!4090 = !DILocation(line: 86, column: 50, scope: !4069)
!4091 = !DILocalVariable(name: "ps", arg: 4, scope: !4069, file: !4070, line: 86, type: !4074)
!4092 = !DILocation(line: 86, column: 64, scope: !4069)
!4093 = !DILocalVariable(name: "ret", scope: !4069, file: !4070, line: 88, type: !134)
!4094 = !DILocation(line: 88, column: 10, scope: !4069)
!4095 = !DILocalVariable(name: "wc", scope: !4069, file: !4070, line: 89, type: !2484)
!4096 = !DILocation(line: 89, column: 11, scope: !4069)
!4097 = !DILocation(line: 105, column: 9, scope: !4098)
!4098 = distinct !DILexicalBlock(scope: !4069, file: !4070, line: 105, column: 7)
!4099 = !DILocation(line: 105, column: 7, scope: !4069)
!4100 = !DILocation(line: 106, column: 9, scope: !4098)
!4101 = !DILocation(line: 106, column: 5, scope: !4098)
!4102 = !DILocation(line: 145, column: 18, scope: !4069)
!4103 = !DILocation(line: 145, column: 23, scope: !4069)
!4104 = !DILocation(line: 145, column: 26, scope: !4069)
!4105 = !DILocation(line: 145, column: 29, scope: !4069)
!4106 = !DILocation(line: 145, column: 9, scope: !4069)
!4107 = !DILocation(line: 145, column: 7, scope: !4069)
!4108 = !DILocation(line: 154, column: 22, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !4069, file: !4070, line: 154, column: 7)
!4110 = !DILocation(line: 154, column: 19, scope: !4109)
!4111 = !DILocation(line: 154, column: 26, scope: !4109)
!4112 = !DILocation(line: 154, column: 29, scope: !4109)
!4113 = !DILocation(line: 154, column: 31, scope: !4109)
!4114 = !DILocation(line: 154, column: 36, scope: !4109)
!4115 = !DILocation(line: 154, column: 41, scope: !4109)
!4116 = !DILocation(line: 154, column: 7, scope: !4069)
!4117 = !DILocalVariable(name: "uc", scope: !4118, file: !4070, line: 156, type: !240)
!4118 = distinct !DILexicalBlock(scope: !4109, file: !4070, line: 155, column: 5)
!4119 = !DILocation(line: 156, column: 21, scope: !4118)
!4120 = !DILocation(line: 156, column: 27, scope: !4118)
!4121 = !DILocation(line: 156, column: 26, scope: !4118)
!4122 = !DILocation(line: 157, column: 14, scope: !4118)
!4123 = !DILocation(line: 157, column: 8, scope: !4118)
!4124 = !DILocation(line: 157, column: 12, scope: !4118)
!4125 = !DILocation(line: 158, column: 7, scope: !4118)
!4126 = !DILocation(line: 162, column: 10, scope: !4069)
!4127 = !DILocation(line: 162, column: 3, scope: !4069)
!4128 = !DILocation(line: 163, column: 1, scope: !4069)
!4129 = !DILocalVariable(name: "pwc", arg: 1, scope: !4130, file: !4070, line: 86, type: !4073)
!4130 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !4070, file: !4070, line: 86, type: !4131, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4144, retainedNodes: !4)
!4131 = !DISubroutineType(types: !4132)
!4132 = !{!134, !4073, !69, !134, !4133}
!4133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4134, size: 64)
!4134 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2455, line: 6, baseType: !4135)
!4135 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2457, line: 21, baseType: !4136)
!4136 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2457, line: 13, size: 64, elements: !4137)
!4137 = !{!4138, !4139}
!4138 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !4136, file: !2457, line: 15, baseType: !72, size: 32)
!4139 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !4136, file: !2457, line: 20, baseType: !4140, size: 32, offset: 32)
!4140 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4136, file: !2457, line: 16, size: 32, elements: !4141)
!4141 = !{!4142, !4143}
!4142 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !4140, file: !2457, line: 18, baseType: !16, size: 32)
!4143 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !4140, file: !2457, line: 19, baseType: !2466, size: 32)
!4144 = distinct !DICompileUnit(language: DW_LANG_C99, file: !233, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !234, nameTableKind: None)
!4145 = !DILocalVariable(name: "s", arg: 2, scope: !4130, file: !4070, line: 86, type: !69)
!4146 = !DILocalVariable(name: "n", arg: 3, scope: !4130, file: !4070, line: 86, type: !134)
!4147 = !DILocalVariable(name: "ps", arg: 4, scope: !4130, file: !4070, line: 86, type: !4133)
!4148 = !DILocalVariable(name: "ret", scope: !4130, file: !4070, line: 88, type: !134)
!4149 = !DILocalVariable(name: "wc", scope: !4130, file: !4070, line: 89, type: !2484)
!4150 = distinct !DISubprogram(name: "c_strcasecmp", scope: !4151, file: !4151, line: 27, type: !4152, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !235, retainedNodes: !4)
!4151 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4152 = !DISubroutineType(types: !4153)
!4153 = !{!72, !69, !69}
!4154 = !DILocalVariable(name: "s1", arg: 1, scope: !4150, file: !4151, line: 27, type: !69)
!4155 = !DILocation(line: 27, column: 27, scope: !4150)
!4156 = !DILocalVariable(name: "s2", arg: 2, scope: !4150, file: !4151, line: 27, type: !69)
!4157 = !DILocation(line: 27, column: 43, scope: !4150)
!4158 = !DILocalVariable(name: "p1", scope: !4150, file: !4151, line: 29, type: !238)
!4159 = !DILocation(line: 29, column: 33, scope: !4150)
!4160 = !DILocation(line: 29, column: 62, scope: !4150)
!4161 = !DILocalVariable(name: "p2", scope: !4150, file: !4151, line: 30, type: !238)
!4162 = !DILocation(line: 30, column: 33, scope: !4150)
!4163 = !DILocation(line: 30, column: 62, scope: !4150)
!4164 = !DILocalVariable(name: "c1", scope: !4150, file: !4151, line: 31, type: !240)
!4165 = !DILocation(line: 31, column: 17, scope: !4150)
!4166 = !DILocalVariable(name: "c2", scope: !4150, file: !4151, line: 31, type: !240)
!4167 = !DILocation(line: 31, column: 21, scope: !4150)
!4168 = !DILocation(line: 33, column: 7, scope: !4169)
!4169 = distinct !DILexicalBlock(scope: !4150, file: !4151, line: 33, column: 7)
!4170 = !DILocation(line: 33, column: 13, scope: !4169)
!4171 = !DILocation(line: 33, column: 10, scope: !4169)
!4172 = !DILocation(line: 33, column: 7, scope: !4150)
!4173 = !DILocation(line: 34, column: 5, scope: !4169)
!4174 = !DILocation(line: 36, column: 3, scope: !4150)
!4175 = !DILocation(line: 38, column: 24, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4150, file: !4151, line: 37, column: 5)
!4177 = !DILocation(line: 38, column: 23, scope: !4176)
!4178 = !DILocation(line: 38, column: 12, scope: !4176)
!4179 = !DILocation(line: 38, column: 10, scope: !4176)
!4180 = !DILocation(line: 39, column: 24, scope: !4176)
!4181 = !DILocation(line: 39, column: 23, scope: !4176)
!4182 = !DILocation(line: 39, column: 12, scope: !4176)
!4183 = !DILocation(line: 39, column: 10, scope: !4176)
!4184 = !DILocation(line: 41, column: 11, scope: !4185)
!4185 = distinct !DILexicalBlock(scope: !4176, file: !4151, line: 41, column: 11)
!4186 = !DILocation(line: 41, column: 14, scope: !4185)
!4187 = !DILocation(line: 41, column: 11, scope: !4176)
!4188 = !DILocation(line: 42, column: 9, scope: !4185)
!4189 = !DILocation(line: 44, column: 7, scope: !4176)
!4190 = !DILocation(line: 45, column: 7, scope: !4176)
!4191 = !DILocation(line: 46, column: 5, scope: !4176)
!4192 = !DILocation(line: 47, column: 10, scope: !4150)
!4193 = !DILocation(line: 47, column: 16, scope: !4150)
!4194 = !DILocation(line: 47, column: 13, scope: !4150)
!4195 = distinct !{!4195, !4174, !4196}
!4196 = !DILocation(line: 47, column: 18, scope: !4150)
!4197 = !DILocation(line: 50, column: 12, scope: !4198)
!4198 = distinct !DILexicalBlock(scope: !4150, file: !4151, line: 49, column: 7)
!4199 = !DILocation(line: 50, column: 17, scope: !4198)
!4200 = !DILocation(line: 50, column: 15, scope: !4198)
!4201 = !DILocation(line: 50, column: 5, scope: !4198)
!4202 = !DILocation(line: 56, column: 1, scope: !4150)
!4203 = distinct !DISubprogram(name: "close_stream", scope: !4204, file: !4204, line: 56, type: !4205, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !241, retainedNodes: !4)
!4204 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4205 = !DISubroutineType(types: !4206)
!4206 = !{!72, !4207}
!4207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4208, size: 64)
!4208 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3386, line: 7, baseType: !4209)
!4209 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3388, line: 49, size: 1728, elements: !4210)
!4210 = !{!4211, !4212, !4213, !4214, !4215, !4216, !4217, !4218, !4219, !4220, !4221, !4222, !4223, !4224, !4226, !4227, !4228, !4229, !4230, !4231, !4232, !4233, !4234, !4235, !4236, !4237, !4238, !4239, !4240}
!4211 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4209, file: !3388, line: 51, baseType: !72, size: 32)
!4212 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4209, file: !3388, line: 54, baseType: !6, size: 64, offset: 64)
!4213 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4209, file: !3388, line: 55, baseType: !6, size: 64, offset: 128)
!4214 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4209, file: !3388, line: 56, baseType: !6, size: 64, offset: 192)
!4215 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4209, file: !3388, line: 57, baseType: !6, size: 64, offset: 256)
!4216 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4209, file: !3388, line: 58, baseType: !6, size: 64, offset: 320)
!4217 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4209, file: !3388, line: 59, baseType: !6, size: 64, offset: 384)
!4218 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4209, file: !3388, line: 60, baseType: !6, size: 64, offset: 448)
!4219 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4209, file: !3388, line: 61, baseType: !6, size: 64, offset: 512)
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4209, file: !3388, line: 64, baseType: !6, size: 64, offset: 576)
!4221 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4209, file: !3388, line: 65, baseType: !6, size: 64, offset: 640)
!4222 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4209, file: !3388, line: 66, baseType: !6, size: 64, offset: 704)
!4223 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4209, file: !3388, line: 68, baseType: !3403, size: 64, offset: 768)
!4224 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4209, file: !3388, line: 70, baseType: !4225, size: 64, offset: 832)
!4225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4209, size: 64)
!4226 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4209, file: !3388, line: 72, baseType: !72, size: 32, offset: 896)
!4227 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4209, file: !3388, line: 73, baseType: !72, size: 32, offset: 928)
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4209, file: !3388, line: 74, baseType: !3410, size: 64, offset: 960)
!4229 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4209, file: !3388, line: 77, baseType: !133, size: 16, offset: 1024)
!4230 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4209, file: !3388, line: 78, baseType: !3413, size: 8, offset: 1040)
!4231 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4209, file: !3388, line: 79, baseType: !3415, size: 8, offset: 1048)
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4209, file: !3388, line: 81, baseType: !3419, size: 64, offset: 1088)
!4233 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4209, file: !3388, line: 89, baseType: !3422, size: 64, offset: 1152)
!4234 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4209, file: !3388, line: 91, baseType: !3424, size: 64, offset: 1216)
!4235 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4209, file: !3388, line: 92, baseType: !3427, size: 64, offset: 1280)
!4236 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4209, file: !3388, line: 93, baseType: !4225, size: 64, offset: 1344)
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4209, file: !3388, line: 94, baseType: !8, size: 64, offset: 1408)
!4238 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4209, file: !3388, line: 95, baseType: !134, size: 64, offset: 1472)
!4239 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4209, file: !3388, line: 96, baseType: !72, size: 32, offset: 1536)
!4240 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4209, file: !3388, line: 98, baseType: !3434, size: 160, offset: 1568)
!4241 = !DILocalVariable(name: "stream", arg: 1, scope: !4203, file: !4204, line: 56, type: !4207)
!4242 = !DILocation(line: 56, column: 21, scope: !4203)
!4243 = !DILocalVariable(name: "some_pending", scope: !4203, file: !4204, line: 58, type: !4244)
!4244 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !27)
!4245 = !DILocation(line: 58, column: 14, scope: !4203)
!4246 = !DILocation(line: 58, column: 42, scope: !4203)
!4247 = !DILocation(line: 58, column: 30, scope: !4203)
!4248 = !DILocation(line: 58, column: 50, scope: !4203)
!4249 = !DILocalVariable(name: "prev_fail", scope: !4203, file: !4204, line: 59, type: !4244)
!4250 = !DILocation(line: 59, column: 14, scope: !4203)
!4251 = !DILocation(line: 59, column: 27, scope: !4203)
!4252 = !DILocation(line: 59, column: 43, scope: !4203)
!4253 = !DILocalVariable(name: "fclose_fail", scope: !4203, file: !4204, line: 60, type: !4244)
!4254 = !DILocation(line: 60, column: 14, scope: !4203)
!4255 = !DILocation(line: 60, column: 37, scope: !4203)
!4256 = !DILocation(line: 60, column: 29, scope: !4203)
!4257 = !DILocation(line: 60, column: 45, scope: !4203)
!4258 = !DILocation(line: 70, column: 7, scope: !4259)
!4259 = distinct !DILexicalBlock(scope: !4203, file: !4204, line: 70, column: 7)
!4260 = !DILocation(line: 70, column: 17, scope: !4259)
!4261 = !DILocation(line: 70, column: 21, scope: !4259)
!4262 = !DILocation(line: 70, column: 33, scope: !4259)
!4263 = !DILocation(line: 70, column: 37, scope: !4259)
!4264 = !DILocation(line: 70, column: 50, scope: !4259)
!4265 = !DILocation(line: 70, column: 53, scope: !4259)
!4266 = !DILocation(line: 70, column: 59, scope: !4259)
!4267 = !DILocation(line: 70, column: 7, scope: !4203)
!4268 = !DILocation(line: 72, column: 13, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !4270, file: !4204, line: 72, column: 11)
!4270 = distinct !DILexicalBlock(scope: !4259, file: !4204, line: 71, column: 5)
!4271 = !DILocation(line: 72, column: 11, scope: !4270)
!4272 = !DILocation(line: 73, column: 9, scope: !4269)
!4273 = !DILocation(line: 73, column: 15, scope: !4269)
!4274 = !DILocation(line: 74, column: 7, scope: !4270)
!4275 = !DILocation(line: 77, column: 3, scope: !4203)
!4276 = !DILocation(line: 78, column: 1, scope: !4203)
!4277 = distinct !DISubprogram(name: "hard_locale", scope: !4278, file: !4278, line: 27, type: !4279, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !243, retainedNodes: !4)
!4278 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4279 = !DISubroutineType(types: !4280)
!4280 = !{!27, !72}
!4281 = !DILocalVariable(name: "category", arg: 1, scope: !4277, file: !4278, line: 27, type: !72)
!4282 = !DILocation(line: 27, column: 18, scope: !4277)
!4283 = !DILocalVariable(name: "locale", scope: !4277, file: !4278, line: 29, type: !4284)
!4284 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 2056, elements: !4285)
!4285 = !{!4286}
!4286 = !DISubrange(count: 257)
!4287 = !DILocation(line: 29, column: 8, scope: !4277)
!4288 = !DILocation(line: 31, column: 25, scope: !4289)
!4289 = distinct !DILexicalBlock(scope: !4277, file: !4278, line: 31, column: 7)
!4290 = !DILocation(line: 31, column: 35, scope: !4289)
!4291 = !DILocation(line: 31, column: 7, scope: !4289)
!4292 = !DILocation(line: 31, column: 7, scope: !4277)
!4293 = !DILocation(line: 32, column: 5, scope: !4289)
!4294 = !DILocation(line: 34, column: 20, scope: !4277)
!4295 = !DILocation(line: 34, column: 12, scope: !4277)
!4296 = !DILocation(line: 34, column: 33, scope: !4277)
!4297 = !DILocation(line: 34, column: 38, scope: !4277)
!4298 = !DILocation(line: 34, column: 49, scope: !4277)
!4299 = !DILocation(line: 34, column: 41, scope: !4277)
!4300 = !DILocation(line: 34, column: 66, scope: !4277)
!4301 = !DILocation(line: 34, column: 10, scope: !4277)
!4302 = !DILocation(line: 34, column: 3, scope: !4277)
!4303 = !DILocation(line: 35, column: 1, scope: !4277)
!4304 = distinct !DISubprogram(name: "locale_charset", scope: !4305, file: !4305, line: 831, type: !4306, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !245, retainedNodes: !4)
!4305 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4306 = !DISubroutineType(types: !4307)
!4307 = !{!69}
!4308 = !DILocalVariable(name: "codeset", scope: !4304, file: !4305, line: 833, type: !69)
!4309 = !DILocation(line: 833, column: 15, scope: !4304)
!4310 = !DILocation(line: 847, column: 13, scope: !4304)
!4311 = !DILocation(line: 847, column: 11, scope: !4304)
!4312 = !DILocation(line: 911, column: 7, scope: !4313)
!4313 = distinct !DILexicalBlock(scope: !4304, file: !4305, line: 911, column: 7)
!4314 = !DILocation(line: 911, column: 15, scope: !4313)
!4315 = !DILocation(line: 911, column: 7, scope: !4304)
!4316 = !DILocation(line: 913, column: 13, scope: !4313)
!4317 = !DILocation(line: 913, column: 5, scope: !4313)
!4318 = !DILocation(line: 1070, column: 13, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4320, file: !4305, line: 1070, column: 13)
!4320 = distinct !DILexicalBlock(scope: !4321, file: !4305, line: 1060, column: 7)
!4321 = distinct !DILexicalBlock(scope: !4304, file: !4305, line: 1019, column: 3)
!4322 = !DILocation(line: 1070, column: 24, scope: !4319)
!4323 = !DILocation(line: 1070, column: 13, scope: !4320)
!4324 = !DILocation(line: 1071, column: 19, scope: !4319)
!4325 = !DILocation(line: 1071, column: 11, scope: !4319)
!4326 = !DILocation(line: 1158, column: 10, scope: !4304)
!4327 = !DILocation(line: 1158, column: 3, scope: !4304)
!4328 = distinct !DISubprogram(name: "mgetgroups", scope: !4329, file: !4329, line: 66, type: !3743, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !247, retainedNodes: !4)
!4329 = !DIFile(filename: "lib/mgetgroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4330 = !DILocalVariable(name: "username", arg: 1, scope: !4328, file: !4329, line: 66, type: !69)
!4331 = !DILocation(line: 66, column: 25, scope: !4328)
!4332 = !DILocalVariable(name: "gid", arg: 2, scope: !4328, file: !4329, line: 66, type: !21)
!4333 = !DILocation(line: 66, column: 41, scope: !4328)
!4334 = !DILocalVariable(name: "groups", arg: 3, scope: !4328, file: !4329, line: 66, type: !3745)
!4335 = !DILocation(line: 66, column: 54, scope: !4328)
!4336 = !DILocalVariable(name: "max_n_groups", scope: !4328, file: !4329, line: 68, type: !72)
!4337 = !DILocation(line: 68, column: 7, scope: !4328)
!4338 = !DILocalVariable(name: "ng", scope: !4328, file: !4329, line: 69, type: !72)
!4339 = !DILocation(line: 69, column: 7, scope: !4328)
!4340 = !DILocalVariable(name: "g", scope: !4328, file: !4329, line: 70, type: !183)
!4341 = !DILocation(line: 70, column: 10, scope: !4328)
!4342 = !DILocation(line: 81, column: 7, scope: !4343)
!4343 = distinct !DILexicalBlock(scope: !4328, file: !4329, line: 81, column: 7)
!4344 = !DILocation(line: 81, column: 7, scope: !4328)
!4345 = !DILocation(line: 84, column: 20, scope: !4346)
!4346 = distinct !DILexicalBlock(scope: !4343, file: !4329, line: 82, column: 5)
!4347 = !DILocation(line: 86, column: 35, scope: !4346)
!4348 = !DILocation(line: 86, column: 11, scope: !4346)
!4349 = !DILocation(line: 86, column: 9, scope: !4346)
!4350 = !DILocation(line: 87, column: 11, scope: !4351)
!4351 = distinct !DILexicalBlock(scope: !4346, file: !4329, line: 87, column: 11)
!4352 = !DILocation(line: 87, column: 13, scope: !4351)
!4353 = !DILocation(line: 87, column: 11, scope: !4346)
!4354 = !DILocation(line: 88, column: 9, scope: !4351)
!4355 = !DILocation(line: 90, column: 7, scope: !4346)
!4356 = !DILocalVariable(name: "h", scope: !4357, file: !4329, line: 92, type: !183)
!4357 = distinct !DILexicalBlock(scope: !4346, file: !4329, line: 91, column: 9)
!4358 = !DILocation(line: 92, column: 18, scope: !4357)
!4359 = !DILocalVariable(name: "last_n_groups", scope: !4357, file: !4329, line: 93, type: !72)
!4360 = !DILocation(line: 93, column: 15, scope: !4357)
!4361 = !DILocation(line: 93, column: 31, scope: !4357)
!4362 = !DILocation(line: 96, column: 30, scope: !4357)
!4363 = !DILocation(line: 96, column: 40, scope: !4357)
!4364 = !DILocation(line: 96, column: 45, scope: !4357)
!4365 = !DILocation(line: 96, column: 16, scope: !4357)
!4366 = !DILocation(line: 96, column: 14, scope: !4357)
!4367 = !DILocation(line: 100, column: 15, scope: !4368)
!4368 = distinct !DILexicalBlock(scope: !4357, file: !4329, line: 100, column: 15)
!4369 = !DILocation(line: 100, column: 18, scope: !4368)
!4370 = !DILocation(line: 100, column: 22, scope: !4368)
!4371 = !DILocation(line: 100, column: 25, scope: !4368)
!4372 = !DILocation(line: 100, column: 42, scope: !4368)
!4373 = !DILocation(line: 100, column: 39, scope: !4368)
!4374 = !DILocation(line: 100, column: 15, scope: !4357)
!4375 = !DILocation(line: 101, column: 26, scope: !4368)
!4376 = !DILocation(line: 101, column: 13, scope: !4368)
!4377 = !DILocation(line: 103, column: 38, scope: !4378)
!4378 = distinct !DILexicalBlock(scope: !4357, file: !4329, line: 103, column: 15)
!4379 = !DILocation(line: 103, column: 41, scope: !4378)
!4380 = !DILocation(line: 103, column: 20, scope: !4378)
!4381 = !DILocation(line: 103, column: 18, scope: !4378)
!4382 = !DILocation(line: 103, column: 56, scope: !4378)
!4383 = !DILocation(line: 103, column: 15, scope: !4357)
!4384 = !DILocalVariable(name: "saved_errno", scope: !4385, file: !4329, line: 105, type: !72)
!4385 = distinct !DILexicalBlock(scope: !4378, file: !4329, line: 104, column: 13)
!4386 = !DILocation(line: 105, column: 19, scope: !4385)
!4387 = !DILocation(line: 105, column: 33, scope: !4385)
!4388 = !DILocation(line: 106, column: 21, scope: !4385)
!4389 = !DILocation(line: 106, column: 15, scope: !4385)
!4390 = !DILocation(line: 107, column: 23, scope: !4385)
!4391 = !DILocation(line: 107, column: 15, scope: !4385)
!4392 = !DILocation(line: 107, column: 21, scope: !4385)
!4393 = !DILocation(line: 108, column: 15, scope: !4385)
!4394 = !DILocation(line: 110, column: 15, scope: !4357)
!4395 = !DILocation(line: 110, column: 13, scope: !4357)
!4396 = !DILocation(line: 112, column: 20, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4357, file: !4329, line: 112, column: 15)
!4398 = !DILocation(line: 112, column: 17, scope: !4397)
!4399 = !DILocation(line: 112, column: 15, scope: !4357)
!4400 = !DILocation(line: 114, column: 25, scope: !4401)
!4401 = distinct !DILexicalBlock(scope: !4397, file: !4329, line: 113, column: 13)
!4402 = !DILocation(line: 114, column: 16, scope: !4401)
!4403 = !DILocation(line: 114, column: 23, scope: !4401)
!4404 = !DILocation(line: 117, column: 22, scope: !4401)
!4405 = !DILocation(line: 117, column: 15, scope: !4401)
!4406 = distinct !{!4406, !4355, !4407}
!4407 = !DILocation(line: 119, column: 9, scope: !4346)
!4408 = !DILocation(line: 124, column: 19, scope: !4328)
!4409 = !DILocation(line: 125, column: 42, scope: !4328)
!4410 = !DILocation(line: 125, column: 52, scope: !4328)
!4411 = !DILocation(line: 125, column: 21, scope: !4328)
!4412 = !DILocation(line: 126, column: 21, scope: !4328)
!4413 = !DILocation(line: 124, column: 16, scope: !4328)
!4414 = !DILocation(line: 131, column: 7, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4328, file: !4329, line: 131, column: 7)
!4416 = !DILocation(line: 131, column: 20, scope: !4415)
!4417 = !DILocation(line: 131, column: 7, scope: !4328)
!4418 = !DILocation(line: 133, column: 11, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4420, file: !4329, line: 133, column: 11)
!4420 = distinct !DILexicalBlock(scope: !4415, file: !4329, line: 132, column: 5)
!4421 = !DILocation(line: 133, column: 17, scope: !4419)
!4422 = !DILocation(line: 133, column: 27, scope: !4419)
!4423 = !DILocation(line: 133, column: 35, scope: !4419)
!4424 = !DILocation(line: 133, column: 33, scope: !4419)
!4425 = !DILocation(line: 133, column: 11, scope: !4420)
!4426 = !DILocation(line: 135, column: 21, scope: !4427)
!4427 = distinct !DILexicalBlock(scope: !4419, file: !4329, line: 134, column: 9)
!4428 = !DILocation(line: 135, column: 12, scope: !4427)
!4429 = !DILocation(line: 135, column: 19, scope: !4427)
!4430 = !DILocation(line: 136, column: 16, scope: !4427)
!4431 = !DILocation(line: 136, column: 12, scope: !4427)
!4432 = !DILocation(line: 136, column: 14, scope: !4427)
!4433 = !DILocation(line: 137, column: 18, scope: !4427)
!4434 = !DILocation(line: 137, column: 22, scope: !4427)
!4435 = !DILocation(line: 137, column: 11, scope: !4427)
!4436 = !DILocation(line: 139, column: 7, scope: !4420)
!4437 = !DILocation(line: 142, column: 7, scope: !4438)
!4438 = distinct !DILexicalBlock(scope: !4328, file: !4329, line: 142, column: 7)
!4439 = !DILocation(line: 142, column: 20, scope: !4438)
!4440 = !DILocation(line: 142, column: 25, scope: !4438)
!4441 = !DILocation(line: 142, column: 30, scope: !4438)
!4442 = !DILocation(line: 142, column: 39, scope: !4438)
!4443 = !DILocation(line: 142, column: 42, scope: !4438)
!4444 = !DILocation(line: 142, column: 46, scope: !4438)
!4445 = !DILocation(line: 142, column: 7, scope: !4328)
!4446 = !DILocation(line: 143, column: 17, scope: !4438)
!4447 = !DILocation(line: 143, column: 5, scope: !4438)
!4448 = !DILocation(line: 144, column: 31, scope: !4328)
!4449 = !DILocation(line: 144, column: 7, scope: !4328)
!4450 = !DILocation(line: 144, column: 5, scope: !4328)
!4451 = !DILocation(line: 145, column: 7, scope: !4452)
!4452 = distinct !DILexicalBlock(scope: !4328, file: !4329, line: 145, column: 7)
!4453 = !DILocation(line: 145, column: 9, scope: !4452)
!4454 = !DILocation(line: 145, column: 7, scope: !4328)
!4455 = !DILocation(line: 146, column: 5, scope: !4452)
!4456 = !DILocation(line: 148, column: 9, scope: !4328)
!4457 = !DILocation(line: 149, column: 23, scope: !4328)
!4458 = !DILocation(line: 149, column: 37, scope: !4328)
!4459 = !DILocation(line: 149, column: 40, scope: !4328)
!4460 = !DILocation(line: 149, column: 50, scope: !4328)
!4461 = !DILocation(line: 149, column: 11, scope: !4328)
!4462 = !DILocation(line: 150, column: 22, scope: !4328)
!4463 = !DILocation(line: 150, column: 38, scope: !4328)
!4464 = !DILocation(line: 150, column: 42, scope: !4328)
!4465 = !DILocation(line: 150, column: 35, scope: !4328)
!4466 = !DILocation(line: 151, column: 33, scope: !4328)
!4467 = !DILocation(line: 151, column: 38, scope: !4328)
!4468 = !DILocation(line: 151, column: 42, scope: !4328)
!4469 = !DILocation(line: 151, column: 35, scope: !4328)
!4470 = !DILocation(line: 150, column: 11, scope: !4328)
!4471 = !DILocation(line: 148, column: 6, scope: !4328)
!4472 = !DILocation(line: 153, column: 7, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !4328, file: !4329, line: 153, column: 7)
!4474 = !DILocation(line: 153, column: 10, scope: !4473)
!4475 = !DILocation(line: 153, column: 7, scope: !4328)
!4476 = !DILocalVariable(name: "saved_errno", scope: !4477, file: !4329, line: 156, type: !72)
!4477 = distinct !DILexicalBlock(scope: !4473, file: !4329, line: 154, column: 5)
!4478 = !DILocation(line: 156, column: 11, scope: !4477)
!4479 = !DILocation(line: 156, column: 25, scope: !4477)
!4480 = !DILocation(line: 157, column: 13, scope: !4477)
!4481 = !DILocation(line: 157, column: 7, scope: !4477)
!4482 = !DILocation(line: 158, column: 15, scope: !4477)
!4483 = !DILocation(line: 158, column: 7, scope: !4477)
!4484 = !DILocation(line: 158, column: 13, scope: !4477)
!4485 = !DILocation(line: 159, column: 7, scope: !4477)
!4486 = !DILocation(line: 162, column: 8, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4328, file: !4329, line: 162, column: 7)
!4488 = !DILocation(line: 162, column: 17, scope: !4487)
!4489 = !DILocation(line: 162, column: 20, scope: !4487)
!4490 = !DILocation(line: 162, column: 24, scope: !4487)
!4491 = !DILocation(line: 162, column: 7, scope: !4328)
!4492 = !DILocation(line: 164, column: 12, scope: !4493)
!4493 = distinct !DILexicalBlock(scope: !4487, file: !4329, line: 163, column: 5)
!4494 = !DILocation(line: 164, column: 8, scope: !4493)
!4495 = !DILocation(line: 164, column: 10, scope: !4493)
!4496 = !DILocation(line: 165, column: 9, scope: !4493)
!4497 = !DILocation(line: 166, column: 5, scope: !4493)
!4498 = !DILocation(line: 167, column: 13, scope: !4328)
!4499 = !DILocation(line: 167, column: 4, scope: !4328)
!4500 = !DILocation(line: 167, column: 11, scope: !4328)
!4501 = !DILocation(line: 185, column: 11, scope: !4502)
!4502 = distinct !DILexicalBlock(scope: !4328, file: !4329, line: 185, column: 7)
!4503 = !DILocation(line: 185, column: 9, scope: !4502)
!4504 = !DILocation(line: 185, column: 7, scope: !4328)
!4505 = !DILocalVariable(name: "first", scope: !4506, file: !4329, line: 187, type: !21)
!4506 = distinct !DILexicalBlock(scope: !4502, file: !4329, line: 186, column: 5)
!4507 = !DILocation(line: 187, column: 13, scope: !4506)
!4508 = !DILocation(line: 187, column: 22, scope: !4506)
!4509 = !DILocation(line: 187, column: 21, scope: !4506)
!4510 = !DILocalVariable(name: "next", scope: !4506, file: !4329, line: 188, type: !183)
!4511 = !DILocation(line: 188, column: 14, scope: !4506)
!4512 = !DILocalVariable(name: "groups_end", scope: !4506, file: !4329, line: 189, type: !183)
!4513 = !DILocation(line: 189, column: 14, scope: !4506)
!4514 = !DILocation(line: 189, column: 27, scope: !4506)
!4515 = !DILocation(line: 189, column: 31, scope: !4506)
!4516 = !DILocation(line: 189, column: 29, scope: !4506)
!4517 = !DILocation(line: 191, column: 19, scope: !4518)
!4518 = distinct !DILexicalBlock(scope: !4506, file: !4329, line: 191, column: 7)
!4519 = !DILocation(line: 191, column: 21, scope: !4518)
!4520 = !DILocation(line: 191, column: 17, scope: !4518)
!4521 = !DILocation(line: 191, column: 12, scope: !4518)
!4522 = !DILocation(line: 191, column: 26, scope: !4523)
!4523 = distinct !DILexicalBlock(scope: !4518, file: !4329, line: 191, column: 7)
!4524 = !DILocation(line: 191, column: 33, scope: !4523)
!4525 = !DILocation(line: 191, column: 31, scope: !4523)
!4526 = !DILocation(line: 191, column: 7, scope: !4518)
!4527 = !DILocation(line: 193, column: 16, scope: !4528)
!4528 = distinct !DILexicalBlock(scope: !4529, file: !4329, line: 193, column: 15)
!4529 = distinct !DILexicalBlock(scope: !4523, file: !4329, line: 192, column: 9)
!4530 = !DILocation(line: 193, column: 15, scope: !4528)
!4531 = !DILocation(line: 193, column: 24, scope: !4528)
!4532 = !DILocation(line: 193, column: 21, scope: !4528)
!4533 = !DILocation(line: 193, column: 30, scope: !4528)
!4534 = !DILocation(line: 193, column: 34, scope: !4528)
!4535 = !DILocation(line: 193, column: 33, scope: !4528)
!4536 = !DILocation(line: 193, column: 43, scope: !4528)
!4537 = !DILocation(line: 193, column: 42, scope: !4528)
!4538 = !DILocation(line: 193, column: 39, scope: !4528)
!4539 = !DILocation(line: 193, column: 15, scope: !4529)
!4540 = !DILocation(line: 194, column: 15, scope: !4528)
!4541 = !DILocation(line: 194, column: 13, scope: !4528)
!4542 = !DILocation(line: 196, column: 21, scope: !4528)
!4543 = !DILocation(line: 196, column: 20, scope: !4528)
!4544 = !DILocation(line: 196, column: 14, scope: !4528)
!4545 = !DILocation(line: 196, column: 18, scope: !4528)
!4546 = !DILocation(line: 197, column: 9, scope: !4529)
!4547 = !DILocation(line: 191, column: 49, scope: !4523)
!4548 = !DILocation(line: 191, column: 7, scope: !4523)
!4549 = distinct !{!4549, !4526, !4550}
!4550 = !DILocation(line: 197, column: 9, scope: !4518)
!4551 = !DILocation(line: 198, column: 5, scope: !4506)
!4552 = !DILocation(line: 200, column: 10, scope: !4328)
!4553 = !DILocation(line: 200, column: 3, scope: !4328)
!4554 = !DILocation(line: 201, column: 1, scope: !4328)
!4555 = !DILocalVariable(name: "username", arg: 1, scope: !4556, file: !4329, line: 66, type: !69)
!4556 = distinct !DISubprogram(name: "mgetgroups", scope: !4329, file: !4329, line: 66, type: !3743, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4557, retainedNodes: !4)
!4557 = distinct !DICompileUnit(language: DW_LANG_C99, file: !248, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !249, nameTableKind: None)
!4558 = !DILocalVariable(name: "gid", arg: 2, scope: !4556, file: !4329, line: 66, type: !21)
!4559 = !DILocalVariable(name: "groups", arg: 3, scope: !4556, file: !4329, line: 66, type: !3745)
!4560 = !DILocalVariable(name: "max_n_groups", scope: !4556, file: !4329, line: 68, type: !72)
!4561 = !DILocalVariable(name: "ng", scope: !4556, file: !4329, line: 69, type: !72)
!4562 = !DILocalVariable(name: "g", scope: !4556, file: !4329, line: 70, type: !183)
!4563 = distinct !DISubprogram(name: "realloc_groupbuf", scope: !4329, file: !4329, line: 43, type: !4564, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !247, retainedNodes: !4)
!4564 = !DISubroutineType(types: !4565)
!4565 = !{!183, !183, !134}
!4566 = !DILocalVariable(name: "g", arg: 1, scope: !4563, file: !4329, line: 43, type: !183)
!4567 = !DILocation(line: 43, column: 26, scope: !4563)
!4568 = !DILocalVariable(name: "num", arg: 2, scope: !4563, file: !4329, line: 43, type: !134)
!4569 = !DILocation(line: 43, column: 36, scope: !4563)
!4570 = !DILocation(line: 45, column: 7, scope: !4571)
!4571 = distinct !DILexicalBlock(scope: !4563, file: !4329, line: 45, column: 7)
!4572 = !DILocation(line: 45, column: 7, scope: !4563)
!4573 = !DILocation(line: 47, column: 7, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !4571, file: !4329, line: 46, column: 5)
!4575 = !DILocation(line: 47, column: 13, scope: !4574)
!4576 = !DILocation(line: 48, column: 7, scope: !4574)
!4577 = !DILocation(line: 51, column: 19, scope: !4563)
!4578 = !DILocation(line: 51, column: 22, scope: !4563)
!4579 = !DILocation(line: 51, column: 26, scope: !4563)
!4580 = !DILocation(line: 51, column: 10, scope: !4563)
!4581 = !DILocation(line: 51, column: 3, scope: !4563)
!4582 = !DILocation(line: 52, column: 1, scope: !4563)
!4583 = !DILocalVariable(name: "g", arg: 1, scope: !4584, file: !4329, line: 43, type: !183)
!4584 = distinct !DISubprogram(name: "realloc_groupbuf", scope: !4329, file: !4329, line: 43, type: !4564, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4585, retainedNodes: !4)
!4585 = distinct !DICompileUnit(language: DW_LANG_C99, file: !248, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !249, nameTableKind: None)
!4586 = !DILocalVariable(name: "num", arg: 2, scope: !4584, file: !4329, line: 43, type: !134)
!4587 = distinct !DISubprogram(name: "setlocale_null_r", scope: !4588, file: !4588, line: 269, type: !4589, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !250, retainedNodes: !4)
!4588 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4589 = !DISubroutineType(types: !4590)
!4590 = !{!72, !72, !6, !134}
!4591 = !DILocalVariable(name: "category", arg: 1, scope: !4587, file: !4588, line: 269, type: !72)
!4592 = !DILocation(line: 269, column: 23, scope: !4587)
!4593 = !DILocalVariable(name: "buf", arg: 2, scope: !4587, file: !4588, line: 269, type: !6)
!4594 = !DILocation(line: 269, column: 39, scope: !4587)
!4595 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4587, file: !4588, line: 269, type: !134)
!4596 = !DILocation(line: 269, column: 51, scope: !4587)
!4597 = !DILocation(line: 274, column: 35, scope: !4587)
!4598 = !DILocation(line: 274, column: 45, scope: !4587)
!4599 = !DILocation(line: 274, column: 50, scope: !4587)
!4600 = !DILocation(line: 274, column: 10, scope: !4587)
!4601 = !DILocation(line: 274, column: 3, scope: !4587)
!4602 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !4588, file: !4588, line: 91, type: !4589, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !250, retainedNodes: !4)
!4603 = !DILocalVariable(name: "category", arg: 1, scope: !4602, file: !4588, line: 91, type: !72)
!4604 = !DILocation(line: 91, column: 30, scope: !4602)
!4605 = !DILocalVariable(name: "buf", arg: 2, scope: !4602, file: !4588, line: 91, type: !6)
!4606 = !DILocation(line: 91, column: 46, scope: !4602)
!4607 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4602, file: !4588, line: 91, type: !134)
!4608 = !DILocation(line: 91, column: 58, scope: !4602)
!4609 = !DILocalVariable(name: "result", scope: !4602, file: !4588, line: 140, type: !69)
!4610 = !DILocation(line: 140, column: 15, scope: !4602)
!4611 = !DILocation(line: 140, column: 51, scope: !4602)
!4612 = !DILocation(line: 140, column: 24, scope: !4602)
!4613 = !DILocation(line: 142, column: 7, scope: !4614)
!4614 = distinct !DILexicalBlock(scope: !4602, file: !4588, line: 142, column: 7)
!4615 = !DILocation(line: 142, column: 14, scope: !4614)
!4616 = !DILocation(line: 142, column: 7, scope: !4602)
!4617 = !DILocation(line: 145, column: 11, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4619, file: !4588, line: 145, column: 11)
!4619 = distinct !DILexicalBlock(scope: !4614, file: !4588, line: 143, column: 5)
!4620 = !DILocation(line: 145, column: 19, scope: !4618)
!4621 = !DILocation(line: 145, column: 11, scope: !4619)
!4622 = !DILocation(line: 149, column: 9, scope: !4618)
!4623 = !DILocation(line: 149, column: 16, scope: !4618)
!4624 = !DILocation(line: 150, column: 7, scope: !4619)
!4625 = !DILocalVariable(name: "length", scope: !4626, file: !4588, line: 154, type: !134)
!4626 = distinct !DILexicalBlock(scope: !4614, file: !4588, line: 153, column: 5)
!4627 = !DILocation(line: 154, column: 14, scope: !4626)
!4628 = !DILocation(line: 154, column: 31, scope: !4626)
!4629 = !DILocation(line: 154, column: 23, scope: !4626)
!4630 = !DILocation(line: 155, column: 11, scope: !4631)
!4631 = distinct !DILexicalBlock(scope: !4626, file: !4588, line: 155, column: 11)
!4632 = !DILocation(line: 155, column: 20, scope: !4631)
!4633 = !DILocation(line: 155, column: 18, scope: !4631)
!4634 = !DILocation(line: 155, column: 11, scope: !4626)
!4635 = !DILocation(line: 157, column: 19, scope: !4636)
!4636 = distinct !DILexicalBlock(scope: !4631, file: !4588, line: 156, column: 9)
!4637 = !DILocation(line: 157, column: 24, scope: !4636)
!4638 = !DILocation(line: 157, column: 32, scope: !4636)
!4639 = !DILocation(line: 157, column: 39, scope: !4636)
!4640 = !DILocation(line: 157, column: 11, scope: !4636)
!4641 = !DILocation(line: 158, column: 11, scope: !4636)
!4642 = !DILocation(line: 162, column: 15, scope: !4643)
!4643 = distinct !DILexicalBlock(scope: !4644, file: !4588, line: 162, column: 15)
!4644 = distinct !DILexicalBlock(scope: !4631, file: !4588, line: 161, column: 9)
!4645 = !DILocation(line: 162, column: 23, scope: !4643)
!4646 = !DILocation(line: 162, column: 15, scope: !4644)
!4647 = !DILocation(line: 167, column: 23, scope: !4648)
!4648 = distinct !DILexicalBlock(scope: !4643, file: !4588, line: 163, column: 13)
!4649 = !DILocation(line: 167, column: 28, scope: !4648)
!4650 = !DILocation(line: 167, column: 36, scope: !4648)
!4651 = !DILocation(line: 167, column: 44, scope: !4648)
!4652 = !DILocation(line: 167, column: 15, scope: !4648)
!4653 = !DILocation(line: 168, column: 15, scope: !4648)
!4654 = !DILocation(line: 168, column: 19, scope: !4648)
!4655 = !DILocation(line: 168, column: 27, scope: !4648)
!4656 = !DILocation(line: 168, column: 32, scope: !4648)
!4657 = !DILocation(line: 169, column: 13, scope: !4648)
!4658 = !DILocation(line: 170, column: 11, scope: !4644)
!4659 = !DILocation(line: 174, column: 1, scope: !4602)
!4660 = !DILocalVariable(name: "category", arg: 1, scope: !4661, file: !4588, line: 91, type: !72)
!4661 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !4588, file: !4588, line: 91, type: !4589, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4662, retainedNodes: !4)
!4662 = distinct !DICompileUnit(language: DW_LANG_C99, file: !251, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!4663 = !DILocalVariable(name: "buf", arg: 2, scope: !4661, file: !4588, line: 91, type: !6)
!4664 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4661, file: !4588, line: 91, type: !134)
!4665 = !DILocalVariable(name: "result", scope: !4661, file: !4588, line: 140, type: !69)
!4666 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !4588, file: !4588, line: 60, type: !4667, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !250, retainedNodes: !4)
!4667 = !DISubroutineType(types: !4668)
!4668 = !{!69, !72}
!4669 = !DILocalVariable(name: "category", arg: 1, scope: !4666, file: !4588, line: 60, type: !72)
!4670 = !DILocation(line: 60, column: 32, scope: !4666)
!4671 = !DILocalVariable(name: "result", scope: !4666, file: !4588, line: 62, type: !69)
!4672 = !DILocation(line: 62, column: 15, scope: !4666)
!4673 = !DILocation(line: 62, column: 35, scope: !4666)
!4674 = !DILocation(line: 62, column: 24, scope: !4666)
!4675 = !DILocation(line: 87, column: 10, scope: !4666)
!4676 = !DILocation(line: 87, column: 3, scope: !4666)
!4677 = !DILocalVariable(name: "category", arg: 1, scope: !4678, file: !4588, line: 60, type: !72)
!4678 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !4588, file: !4588, line: 60, type: !4667, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4679, retainedNodes: !4)
!4679 = distinct !DICompileUnit(language: DW_LANG_C99, file: !251, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!4680 = !DILocalVariable(name: "result", scope: !4678, file: !4588, line: 62, type: !69)
!4681 = distinct !DISubprogram(name: "rpl_fclose", scope: !4682, file: !4682, line: 58, type: !4683, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !252, retainedNodes: !4)
!4682 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4683 = !DISubroutineType(types: !4684)
!4684 = !{!72, !4685}
!4685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4686, size: 64)
!4686 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3386, line: 7, baseType: !4687)
!4687 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3388, line: 49, size: 1728, elements: !4688)
!4688 = !{!4689, !4690, !4691, !4692, !4693, !4694, !4695, !4696, !4697, !4698, !4699, !4700, !4701, !4702, !4704, !4705, !4706, !4707, !4708, !4709, !4710, !4711, !4712, !4713, !4714, !4715, !4716, !4717, !4718}
!4689 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4687, file: !3388, line: 51, baseType: !72, size: 32)
!4690 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4687, file: !3388, line: 54, baseType: !6, size: 64, offset: 64)
!4691 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4687, file: !3388, line: 55, baseType: !6, size: 64, offset: 128)
!4692 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4687, file: !3388, line: 56, baseType: !6, size: 64, offset: 192)
!4693 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4687, file: !3388, line: 57, baseType: !6, size: 64, offset: 256)
!4694 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4687, file: !3388, line: 58, baseType: !6, size: 64, offset: 320)
!4695 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4687, file: !3388, line: 59, baseType: !6, size: 64, offset: 384)
!4696 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4687, file: !3388, line: 60, baseType: !6, size: 64, offset: 448)
!4697 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4687, file: !3388, line: 61, baseType: !6, size: 64, offset: 512)
!4698 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4687, file: !3388, line: 64, baseType: !6, size: 64, offset: 576)
!4699 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4687, file: !3388, line: 65, baseType: !6, size: 64, offset: 640)
!4700 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4687, file: !3388, line: 66, baseType: !6, size: 64, offset: 704)
!4701 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4687, file: !3388, line: 68, baseType: !3403, size: 64, offset: 768)
!4702 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4687, file: !3388, line: 70, baseType: !4703, size: 64, offset: 832)
!4703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4687, size: 64)
!4704 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4687, file: !3388, line: 72, baseType: !72, size: 32, offset: 896)
!4705 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4687, file: !3388, line: 73, baseType: !72, size: 32, offset: 928)
!4706 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4687, file: !3388, line: 74, baseType: !3410, size: 64, offset: 960)
!4707 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4687, file: !3388, line: 77, baseType: !133, size: 16, offset: 1024)
!4708 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4687, file: !3388, line: 78, baseType: !3413, size: 8, offset: 1040)
!4709 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4687, file: !3388, line: 79, baseType: !3415, size: 8, offset: 1048)
!4710 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4687, file: !3388, line: 81, baseType: !3419, size: 64, offset: 1088)
!4711 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4687, file: !3388, line: 89, baseType: !3422, size: 64, offset: 1152)
!4712 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4687, file: !3388, line: 91, baseType: !3424, size: 64, offset: 1216)
!4713 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4687, file: !3388, line: 92, baseType: !3427, size: 64, offset: 1280)
!4714 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4687, file: !3388, line: 93, baseType: !4703, size: 64, offset: 1344)
!4715 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4687, file: !3388, line: 94, baseType: !8, size: 64, offset: 1408)
!4716 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4687, file: !3388, line: 95, baseType: !134, size: 64, offset: 1472)
!4717 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4687, file: !3388, line: 96, baseType: !72, size: 32, offset: 1536)
!4718 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4687, file: !3388, line: 98, baseType: !3434, size: 160, offset: 1568)
!4719 = !DILocalVariable(name: "fp", arg: 1, scope: !4681, file: !4682, line: 58, type: !4685)
!4720 = !DILocation(line: 58, column: 19, scope: !4681)
!4721 = !DILocalVariable(name: "saved_errno", scope: !4681, file: !4682, line: 60, type: !72)
!4722 = !DILocation(line: 60, column: 7, scope: !4681)
!4723 = !DILocalVariable(name: "fd", scope: !4681, file: !4682, line: 61, type: !72)
!4724 = !DILocation(line: 61, column: 7, scope: !4681)
!4725 = !DILocalVariable(name: "result", scope: !4681, file: !4682, line: 62, type: !72)
!4726 = !DILocation(line: 62, column: 7, scope: !4681)
!4727 = !DILocation(line: 65, column: 16, scope: !4681)
!4728 = !DILocation(line: 65, column: 8, scope: !4681)
!4729 = !DILocation(line: 65, column: 6, scope: !4681)
!4730 = !DILocation(line: 66, column: 7, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4681, file: !4682, line: 66, column: 7)
!4732 = !DILocation(line: 66, column: 10, scope: !4731)
!4733 = !DILocation(line: 66, column: 7, scope: !4681)
!4734 = !DILocation(line: 67, column: 28, scope: !4731)
!4735 = !DILocation(line: 67, column: 12, scope: !4731)
!4736 = !DILocation(line: 67, column: 5, scope: !4731)
!4737 = !DILocation(line: 72, column: 9, scope: !4738)
!4738 = distinct !DILexicalBlock(scope: !4681, file: !4682, line: 72, column: 7)
!4739 = !DILocation(line: 72, column: 23, scope: !4738)
!4740 = !DILocation(line: 72, column: 41, scope: !4738)
!4741 = !DILocation(line: 72, column: 33, scope: !4738)
!4742 = !DILocation(line: 72, column: 26, scope: !4738)
!4743 = !DILocation(line: 72, column: 59, scope: !4738)
!4744 = !DILocation(line: 73, column: 7, scope: !4738)
!4745 = !DILocation(line: 73, column: 18, scope: !4738)
!4746 = !DILocation(line: 73, column: 10, scope: !4738)
!4747 = !DILocation(line: 72, column: 7, scope: !4681)
!4748 = !DILocation(line: 74, column: 19, scope: !4738)
!4749 = !DILocation(line: 74, column: 17, scope: !4738)
!4750 = !DILocation(line: 74, column: 5, scope: !4738)
!4751 = !DILocation(line: 100, column: 28, scope: !4681)
!4752 = !DILocation(line: 100, column: 12, scope: !4681)
!4753 = !DILocation(line: 100, column: 10, scope: !4681)
!4754 = !DILocation(line: 105, column: 7, scope: !4755)
!4755 = distinct !DILexicalBlock(scope: !4681, file: !4682, line: 105, column: 7)
!4756 = !DILocation(line: 105, column: 19, scope: !4755)
!4757 = !DILocation(line: 105, column: 7, scope: !4681)
!4758 = !DILocation(line: 107, column: 15, scope: !4759)
!4759 = distinct !DILexicalBlock(scope: !4755, file: !4682, line: 106, column: 5)
!4760 = !DILocation(line: 107, column: 7, scope: !4759)
!4761 = !DILocation(line: 107, column: 13, scope: !4759)
!4762 = !DILocation(line: 108, column: 14, scope: !4759)
!4763 = !DILocation(line: 109, column: 5, scope: !4759)
!4764 = !DILocation(line: 111, column: 10, scope: !4681)
!4765 = !DILocation(line: 111, column: 3, scope: !4681)
!4766 = !DILocation(line: 112, column: 1, scope: !4681)
!4767 = distinct !DISubprogram(name: "rpl_fflush", scope: !4768, file: !4768, line: 129, type: !4769, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !254, retainedNodes: !4)
!4768 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4769 = !DISubroutineType(types: !4770)
!4770 = !{!72, !4771}
!4771 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4772, size: 64)
!4772 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3386, line: 7, baseType: !4773)
!4773 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3388, line: 49, size: 1728, elements: !4774)
!4774 = !{!4775, !4776, !4777, !4778, !4779, !4780, !4781, !4782, !4783, !4784, !4785, !4786, !4787, !4788, !4790, !4791, !4792, !4793, !4794, !4795, !4796, !4797, !4798, !4799, !4800, !4801, !4802, !4803, !4804}
!4775 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4773, file: !3388, line: 51, baseType: !72, size: 32)
!4776 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4773, file: !3388, line: 54, baseType: !6, size: 64, offset: 64)
!4777 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4773, file: !3388, line: 55, baseType: !6, size: 64, offset: 128)
!4778 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4773, file: !3388, line: 56, baseType: !6, size: 64, offset: 192)
!4779 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4773, file: !3388, line: 57, baseType: !6, size: 64, offset: 256)
!4780 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4773, file: !3388, line: 58, baseType: !6, size: 64, offset: 320)
!4781 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4773, file: !3388, line: 59, baseType: !6, size: 64, offset: 384)
!4782 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4773, file: !3388, line: 60, baseType: !6, size: 64, offset: 448)
!4783 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4773, file: !3388, line: 61, baseType: !6, size: 64, offset: 512)
!4784 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4773, file: !3388, line: 64, baseType: !6, size: 64, offset: 576)
!4785 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4773, file: !3388, line: 65, baseType: !6, size: 64, offset: 640)
!4786 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4773, file: !3388, line: 66, baseType: !6, size: 64, offset: 704)
!4787 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4773, file: !3388, line: 68, baseType: !3403, size: 64, offset: 768)
!4788 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4773, file: !3388, line: 70, baseType: !4789, size: 64, offset: 832)
!4789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4773, size: 64)
!4790 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4773, file: !3388, line: 72, baseType: !72, size: 32, offset: 896)
!4791 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4773, file: !3388, line: 73, baseType: !72, size: 32, offset: 928)
!4792 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4773, file: !3388, line: 74, baseType: !3410, size: 64, offset: 960)
!4793 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4773, file: !3388, line: 77, baseType: !133, size: 16, offset: 1024)
!4794 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4773, file: !3388, line: 78, baseType: !3413, size: 8, offset: 1040)
!4795 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4773, file: !3388, line: 79, baseType: !3415, size: 8, offset: 1048)
!4796 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4773, file: !3388, line: 81, baseType: !3419, size: 64, offset: 1088)
!4797 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4773, file: !3388, line: 89, baseType: !3422, size: 64, offset: 1152)
!4798 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4773, file: !3388, line: 91, baseType: !3424, size: 64, offset: 1216)
!4799 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4773, file: !3388, line: 92, baseType: !3427, size: 64, offset: 1280)
!4800 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4773, file: !3388, line: 93, baseType: !4789, size: 64, offset: 1344)
!4801 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4773, file: !3388, line: 94, baseType: !8, size: 64, offset: 1408)
!4802 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4773, file: !3388, line: 95, baseType: !134, size: 64, offset: 1472)
!4803 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4773, file: !3388, line: 96, baseType: !72, size: 32, offset: 1536)
!4804 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4773, file: !3388, line: 98, baseType: !3434, size: 160, offset: 1568)
!4805 = !DILocalVariable(name: "stream", arg: 1, scope: !4767, file: !4768, line: 129, type: !4771)
!4806 = !DILocation(line: 129, column: 19, scope: !4767)
!4807 = !DILocation(line: 150, column: 7, scope: !4808)
!4808 = distinct !DILexicalBlock(scope: !4767, file: !4768, line: 150, column: 7)
!4809 = !DILocation(line: 150, column: 14, scope: !4808)
!4810 = !DILocation(line: 150, column: 22, scope: !4808)
!4811 = !DILocation(line: 150, column: 27, scope: !4808)
!4812 = !DILocation(line: 150, column: 7, scope: !4767)
!4813 = !DILocation(line: 151, column: 20, scope: !4808)
!4814 = !DILocation(line: 151, column: 12, scope: !4808)
!4815 = !DILocation(line: 151, column: 5, scope: !4808)
!4816 = !DILocation(line: 156, column: 44, scope: !4767)
!4817 = !DILocation(line: 156, column: 3, scope: !4767)
!4818 = !DILocation(line: 158, column: 18, scope: !4767)
!4819 = !DILocation(line: 158, column: 10, scope: !4767)
!4820 = !DILocation(line: 158, column: 3, scope: !4767)
!4821 = !DILocation(line: 235, column: 1, scope: !4767)
!4822 = !DILocalVariable(name: "stream", arg: 1, scope: !4823, file: !4768, line: 129, type: !4826)
!4823 = distinct !DISubprogram(name: "rpl_fflush", scope: !4768, file: !4768, line: 129, type: !4824, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4860, retainedNodes: !4)
!4824 = !DISubroutineType(types: !4825)
!4825 = !{!72, !4826}
!4826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4827, size: 64)
!4827 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3386, line: 7, baseType: !4828)
!4828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3388, line: 49, size: 1728, elements: !4829)
!4829 = !{!4830, !4831, !4832, !4833, !4834, !4835, !4836, !4837, !4838, !4839, !4840, !4841, !4842, !4843, !4845, !4846, !4847, !4848, !4849, !4850, !4851, !4852, !4853, !4854, !4855, !4856, !4857, !4858, !4859}
!4830 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4828, file: !3388, line: 51, baseType: !72, size: 32)
!4831 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4828, file: !3388, line: 54, baseType: !6, size: 64, offset: 64)
!4832 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4828, file: !3388, line: 55, baseType: !6, size: 64, offset: 128)
!4833 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4828, file: !3388, line: 56, baseType: !6, size: 64, offset: 192)
!4834 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4828, file: !3388, line: 57, baseType: !6, size: 64, offset: 256)
!4835 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4828, file: !3388, line: 58, baseType: !6, size: 64, offset: 320)
!4836 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4828, file: !3388, line: 59, baseType: !6, size: 64, offset: 384)
!4837 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4828, file: !3388, line: 60, baseType: !6, size: 64, offset: 448)
!4838 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4828, file: !3388, line: 61, baseType: !6, size: 64, offset: 512)
!4839 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4828, file: !3388, line: 64, baseType: !6, size: 64, offset: 576)
!4840 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4828, file: !3388, line: 65, baseType: !6, size: 64, offset: 640)
!4841 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4828, file: !3388, line: 66, baseType: !6, size: 64, offset: 704)
!4842 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4828, file: !3388, line: 68, baseType: !3403, size: 64, offset: 768)
!4843 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4828, file: !3388, line: 70, baseType: !4844, size: 64, offset: 832)
!4844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4828, size: 64)
!4845 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4828, file: !3388, line: 72, baseType: !72, size: 32, offset: 896)
!4846 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4828, file: !3388, line: 73, baseType: !72, size: 32, offset: 928)
!4847 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4828, file: !3388, line: 74, baseType: !3410, size: 64, offset: 960)
!4848 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4828, file: !3388, line: 77, baseType: !133, size: 16, offset: 1024)
!4849 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4828, file: !3388, line: 78, baseType: !3413, size: 8, offset: 1040)
!4850 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4828, file: !3388, line: 79, baseType: !3415, size: 8, offset: 1048)
!4851 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4828, file: !3388, line: 81, baseType: !3419, size: 64, offset: 1088)
!4852 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4828, file: !3388, line: 89, baseType: !3422, size: 64, offset: 1152)
!4853 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4828, file: !3388, line: 91, baseType: !3424, size: 64, offset: 1216)
!4854 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4828, file: !3388, line: 92, baseType: !3427, size: 64, offset: 1280)
!4855 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4828, file: !3388, line: 93, baseType: !4844, size: 64, offset: 1344)
!4856 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4828, file: !3388, line: 94, baseType: !8, size: 64, offset: 1408)
!4857 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4828, file: !3388, line: 95, baseType: !134, size: 64, offset: 1472)
!4858 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4828, file: !3388, line: 96, baseType: !72, size: 32, offset: 1536)
!4859 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4828, file: !3388, line: 98, baseType: !3434, size: 160, offset: 1568)
!4860 = distinct !DICompileUnit(language: DW_LANG_C99, file: !255, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!4861 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !4768, file: !4768, line: 41, type: !4862, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !254, retainedNodes: !4)
!4862 = !DISubroutineType(types: !4863)
!4863 = !{null, !4771}
!4864 = !DILocalVariable(name: "fp", arg: 1, scope: !4861, file: !4768, line: 41, type: !4771)
!4865 = !DILocation(line: 41, column: 48, scope: !4861)
!4866 = !DILocation(line: 43, column: 7, scope: !4867)
!4867 = distinct !DILexicalBlock(scope: !4861, file: !4768, line: 43, column: 7)
!4868 = !DILocation(line: 43, column: 11, scope: !4867)
!4869 = !DILocation(line: 43, column: 18, scope: !4867)
!4870 = !DILocation(line: 43, column: 7, scope: !4861)
!4871 = !DILocation(line: 45, column: 13, scope: !4867)
!4872 = !DILocation(line: 45, column: 5, scope: !4867)
!4873 = !DILocation(line: 46, column: 1, scope: !4861)
!4874 = !DILocalVariable(name: "fp", arg: 1, scope: !4875, file: !4768, line: 41, type: !4878)
!4875 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !4768, file: !4768, line: 41, type: !4876, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4912, retainedNodes: !4)
!4876 = !DISubroutineType(types: !4877)
!4877 = !{null, !4878}
!4878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4879, size: 64)
!4879 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3386, line: 7, baseType: !4880)
!4880 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3388, line: 49, size: 1728, elements: !4881)
!4881 = !{!4882, !4883, !4884, !4885, !4886, !4887, !4888, !4889, !4890, !4891, !4892, !4893, !4894, !4895, !4897, !4898, !4899, !4900, !4901, !4902, !4903, !4904, !4905, !4906, !4907, !4908, !4909, !4910, !4911}
!4882 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4880, file: !3388, line: 51, baseType: !72, size: 32)
!4883 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4880, file: !3388, line: 54, baseType: !6, size: 64, offset: 64)
!4884 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4880, file: !3388, line: 55, baseType: !6, size: 64, offset: 128)
!4885 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4880, file: !3388, line: 56, baseType: !6, size: 64, offset: 192)
!4886 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4880, file: !3388, line: 57, baseType: !6, size: 64, offset: 256)
!4887 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4880, file: !3388, line: 58, baseType: !6, size: 64, offset: 320)
!4888 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4880, file: !3388, line: 59, baseType: !6, size: 64, offset: 384)
!4889 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4880, file: !3388, line: 60, baseType: !6, size: 64, offset: 448)
!4890 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4880, file: !3388, line: 61, baseType: !6, size: 64, offset: 512)
!4891 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4880, file: !3388, line: 64, baseType: !6, size: 64, offset: 576)
!4892 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4880, file: !3388, line: 65, baseType: !6, size: 64, offset: 640)
!4893 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4880, file: !3388, line: 66, baseType: !6, size: 64, offset: 704)
!4894 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4880, file: !3388, line: 68, baseType: !3403, size: 64, offset: 768)
!4895 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4880, file: !3388, line: 70, baseType: !4896, size: 64, offset: 832)
!4896 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4880, size: 64)
!4897 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4880, file: !3388, line: 72, baseType: !72, size: 32, offset: 896)
!4898 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4880, file: !3388, line: 73, baseType: !72, size: 32, offset: 928)
!4899 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4880, file: !3388, line: 74, baseType: !3410, size: 64, offset: 960)
!4900 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4880, file: !3388, line: 77, baseType: !133, size: 16, offset: 1024)
!4901 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4880, file: !3388, line: 78, baseType: !3413, size: 8, offset: 1040)
!4902 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4880, file: !3388, line: 79, baseType: !3415, size: 8, offset: 1048)
!4903 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4880, file: !3388, line: 81, baseType: !3419, size: 64, offset: 1088)
!4904 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4880, file: !3388, line: 89, baseType: !3422, size: 64, offset: 1152)
!4905 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4880, file: !3388, line: 91, baseType: !3424, size: 64, offset: 1216)
!4906 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4880, file: !3388, line: 92, baseType: !3427, size: 64, offset: 1280)
!4907 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4880, file: !3388, line: 93, baseType: !4896, size: 64, offset: 1344)
!4908 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4880, file: !3388, line: 94, baseType: !8, size: 64, offset: 1408)
!4909 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4880, file: !3388, line: 95, baseType: !134, size: 64, offset: 1472)
!4910 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4880, file: !3388, line: 96, baseType: !72, size: 32, offset: 1536)
!4911 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4880, file: !3388, line: 98, baseType: !3434, size: 160, offset: 1568)
!4912 = distinct !DICompileUnit(language: DW_LANG_C99, file: !255, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!4913 = distinct !DISubprogram(name: "rpl_fseeko", scope: !4914, file: !4914, line: 28, type: !4915, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !256, retainedNodes: !4)
!4914 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4915 = !DISubroutineType(types: !4916)
!4916 = !{!72, !4917, !4951, !72}
!4917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4918, size: 64)
!4918 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3386, line: 7, baseType: !4919)
!4919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3388, line: 49, size: 1728, elements: !4920)
!4920 = !{!4921, !4922, !4923, !4924, !4925, !4926, !4927, !4928, !4929, !4930, !4931, !4932, !4933, !4934, !4936, !4937, !4938, !4939, !4940, !4941, !4942, !4943, !4944, !4945, !4946, !4947, !4948, !4949, !4950}
!4921 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4919, file: !3388, line: 51, baseType: !72, size: 32)
!4922 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4919, file: !3388, line: 54, baseType: !6, size: 64, offset: 64)
!4923 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4919, file: !3388, line: 55, baseType: !6, size: 64, offset: 128)
!4924 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4919, file: !3388, line: 56, baseType: !6, size: 64, offset: 192)
!4925 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4919, file: !3388, line: 57, baseType: !6, size: 64, offset: 256)
!4926 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4919, file: !3388, line: 58, baseType: !6, size: 64, offset: 320)
!4927 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4919, file: !3388, line: 59, baseType: !6, size: 64, offset: 384)
!4928 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4919, file: !3388, line: 60, baseType: !6, size: 64, offset: 448)
!4929 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4919, file: !3388, line: 61, baseType: !6, size: 64, offset: 512)
!4930 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4919, file: !3388, line: 64, baseType: !6, size: 64, offset: 576)
!4931 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4919, file: !3388, line: 65, baseType: !6, size: 64, offset: 640)
!4932 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4919, file: !3388, line: 66, baseType: !6, size: 64, offset: 704)
!4933 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4919, file: !3388, line: 68, baseType: !3403, size: 64, offset: 768)
!4934 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4919, file: !3388, line: 70, baseType: !4935, size: 64, offset: 832)
!4935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4919, size: 64)
!4936 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4919, file: !3388, line: 72, baseType: !72, size: 32, offset: 896)
!4937 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4919, file: !3388, line: 73, baseType: !72, size: 32, offset: 928)
!4938 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4919, file: !3388, line: 74, baseType: !3410, size: 64, offset: 960)
!4939 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4919, file: !3388, line: 77, baseType: !133, size: 16, offset: 1024)
!4940 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4919, file: !3388, line: 78, baseType: !3413, size: 8, offset: 1040)
!4941 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4919, file: !3388, line: 79, baseType: !3415, size: 8, offset: 1048)
!4942 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4919, file: !3388, line: 81, baseType: !3419, size: 64, offset: 1088)
!4943 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4919, file: !3388, line: 89, baseType: !3422, size: 64, offset: 1152)
!4944 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4919, file: !3388, line: 91, baseType: !3424, size: 64, offset: 1216)
!4945 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4919, file: !3388, line: 92, baseType: !3427, size: 64, offset: 1280)
!4946 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4919, file: !3388, line: 93, baseType: !4935, size: 64, offset: 1344)
!4947 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4919, file: !3388, line: 94, baseType: !8, size: 64, offset: 1408)
!4948 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4919, file: !3388, line: 95, baseType: !134, size: 64, offset: 1472)
!4949 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4919, file: !3388, line: 96, baseType: !72, size: 32, offset: 1536)
!4950 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4919, file: !3388, line: 98, baseType: !3434, size: 160, offset: 1568)
!4951 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !878, line: 63, baseType: !3410)
!4952 = !DILocalVariable(name: "fp", arg: 1, scope: !4913, file: !4914, line: 28, type: !4917)
!4953 = !DILocation(line: 28, column: 15, scope: !4913)
!4954 = !DILocalVariable(name: "offset", arg: 2, scope: !4913, file: !4914, line: 28, type: !4951)
!4955 = !DILocation(line: 28, column: 25, scope: !4913)
!4956 = !DILocalVariable(name: "whence", arg: 3, scope: !4913, file: !4914, line: 28, type: !72)
!4957 = !DILocation(line: 28, column: 37, scope: !4913)
!4958 = !DILocation(line: 52, column: 7, scope: !4959)
!4959 = distinct !DILexicalBlock(scope: !4913, file: !4914, line: 52, column: 7)
!4960 = !DILocation(line: 52, column: 11, scope: !4959)
!4961 = !DILocation(line: 52, column: 27, scope: !4959)
!4962 = !DILocation(line: 52, column: 31, scope: !4959)
!4963 = !DILocation(line: 52, column: 24, scope: !4959)
!4964 = !DILocation(line: 53, column: 7, scope: !4959)
!4965 = !DILocation(line: 53, column: 10, scope: !4959)
!4966 = !DILocation(line: 53, column: 14, scope: !4959)
!4967 = !DILocation(line: 53, column: 31, scope: !4959)
!4968 = !DILocation(line: 53, column: 35, scope: !4959)
!4969 = !DILocation(line: 53, column: 28, scope: !4959)
!4970 = !DILocation(line: 54, column: 7, scope: !4959)
!4971 = !DILocation(line: 54, column: 10, scope: !4959)
!4972 = !DILocation(line: 54, column: 14, scope: !4959)
!4973 = !DILocation(line: 54, column: 28, scope: !4959)
!4974 = !DILocation(line: 52, column: 7, scope: !4913)
!4975 = !DILocalVariable(name: "pos", scope: !4976, file: !4914, line: 117, type: !4951)
!4976 = distinct !DILexicalBlock(scope: !4959, file: !4914, line: 113, column: 5)
!4977 = !DILocation(line: 117, column: 13, scope: !4976)
!4978 = !DILocation(line: 117, column: 34, scope: !4976)
!4979 = !DILocation(line: 117, column: 26, scope: !4976)
!4980 = !DILocation(line: 117, column: 39, scope: !4976)
!4981 = !DILocation(line: 117, column: 47, scope: !4976)
!4982 = !DILocation(line: 117, column: 19, scope: !4976)
!4983 = !DILocation(line: 118, column: 11, scope: !4984)
!4984 = distinct !DILexicalBlock(scope: !4976, file: !4914, line: 118, column: 11)
!4985 = !DILocation(line: 118, column: 15, scope: !4984)
!4986 = !DILocation(line: 118, column: 11, scope: !4976)
!4987 = !DILocation(line: 124, column: 11, scope: !4988)
!4988 = distinct !DILexicalBlock(scope: !4984, file: !4914, line: 119, column: 9)
!4989 = !DILocation(line: 129, column: 7, scope: !4976)
!4990 = !DILocation(line: 129, column: 11, scope: !4976)
!4991 = !DILocation(line: 129, column: 18, scope: !4976)
!4992 = !DILocation(line: 130, column: 21, scope: !4976)
!4993 = !DILocation(line: 130, column: 7, scope: !4976)
!4994 = !DILocation(line: 130, column: 11, scope: !4976)
!4995 = !DILocation(line: 130, column: 19, scope: !4976)
!4996 = !DILocation(line: 161, column: 7, scope: !4976)
!4997 = !DILocation(line: 163, column: 18, scope: !4913)
!4998 = !DILocation(line: 163, column: 22, scope: !4913)
!4999 = !DILocation(line: 163, column: 30, scope: !4913)
!5000 = !DILocation(line: 163, column: 10, scope: !4913)
!5001 = !DILocation(line: 163, column: 3, scope: !4913)
!5002 = !DILocation(line: 164, column: 1, scope: !4913)
!5003 = !DILocalVariable(name: "fp", arg: 1, scope: !5004, file: !4914, line: 28, type: !5007)
!5004 = distinct !DISubprogram(name: "rpl_fseeko", scope: !4914, file: !4914, line: 28, type: !5005, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5041, retainedNodes: !4)
!5005 = !DISubroutineType(types: !5006)
!5006 = !{!72, !5007, !4951, !72}
!5007 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5008, size: 64)
!5008 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3386, line: 7, baseType: !5009)
!5009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3388, line: 49, size: 1728, elements: !5010)
!5010 = !{!5011, !5012, !5013, !5014, !5015, !5016, !5017, !5018, !5019, !5020, !5021, !5022, !5023, !5024, !5026, !5027, !5028, !5029, !5030, !5031, !5032, !5033, !5034, !5035, !5036, !5037, !5038, !5039, !5040}
!5011 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !5009, file: !3388, line: 51, baseType: !72, size: 32)
!5012 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !5009, file: !3388, line: 54, baseType: !6, size: 64, offset: 64)
!5013 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !5009, file: !3388, line: 55, baseType: !6, size: 64, offset: 128)
!5014 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !5009, file: !3388, line: 56, baseType: !6, size: 64, offset: 192)
!5015 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !5009, file: !3388, line: 57, baseType: !6, size: 64, offset: 256)
!5016 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !5009, file: !3388, line: 58, baseType: !6, size: 64, offset: 320)
!5017 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !5009, file: !3388, line: 59, baseType: !6, size: 64, offset: 384)
!5018 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !5009, file: !3388, line: 60, baseType: !6, size: 64, offset: 448)
!5019 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !5009, file: !3388, line: 61, baseType: !6, size: 64, offset: 512)
!5020 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !5009, file: !3388, line: 64, baseType: !6, size: 64, offset: 576)
!5021 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !5009, file: !3388, line: 65, baseType: !6, size: 64, offset: 640)
!5022 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !5009, file: !3388, line: 66, baseType: !6, size: 64, offset: 704)
!5023 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !5009, file: !3388, line: 68, baseType: !3403, size: 64, offset: 768)
!5024 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !5009, file: !3388, line: 70, baseType: !5025, size: 64, offset: 832)
!5025 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5009, size: 64)
!5026 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !5009, file: !3388, line: 72, baseType: !72, size: 32, offset: 896)
!5027 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !5009, file: !3388, line: 73, baseType: !72, size: 32, offset: 928)
!5028 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !5009, file: !3388, line: 74, baseType: !3410, size: 64, offset: 960)
!5029 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !5009, file: !3388, line: 77, baseType: !133, size: 16, offset: 1024)
!5030 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !5009, file: !3388, line: 78, baseType: !3413, size: 8, offset: 1040)
!5031 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !5009, file: !3388, line: 79, baseType: !3415, size: 8, offset: 1048)
!5032 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !5009, file: !3388, line: 81, baseType: !3419, size: 64, offset: 1088)
!5033 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !5009, file: !3388, line: 89, baseType: !3422, size: 64, offset: 1152)
!5034 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !5009, file: !3388, line: 91, baseType: !3424, size: 64, offset: 1216)
!5035 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !5009, file: !3388, line: 92, baseType: !3427, size: 64, offset: 1280)
!5036 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !5009, file: !3388, line: 93, baseType: !5025, size: 64, offset: 1344)
!5037 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !5009, file: !3388, line: 94, baseType: !8, size: 64, offset: 1408)
!5038 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !5009, file: !3388, line: 95, baseType: !134, size: 64, offset: 1472)
!5039 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !5009, file: !3388, line: 96, baseType: !72, size: 32, offset: 1536)
!5040 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !5009, file: !3388, line: 98, baseType: !3434, size: 160, offset: 1568)
!5041 = distinct !DICompileUnit(language: DW_LANG_C99, file: !257, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !212, nameTableKind: None)
!5042 = !DILocalVariable(name: "offset", arg: 2, scope: !5004, file: !4914, line: 28, type: !4951)
!5043 = !DILocalVariable(name: "whence", arg: 3, scope: !5004, file: !4914, line: 28, type: !72)
!5044 = distinct !DISubprogram(name: "c_tolower", scope: !5045, file: !5045, line: 337, type: !5046, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !258, retainedNodes: !4)
!5045 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5046 = !DISubroutineType(types: !5047)
!5047 = !{!72, !72}
!5048 = !DILocalVariable(name: "c", arg: 1, scope: !5044, file: !5045, line: 337, type: !72)
!5049 = !DILocation(line: 337, column: 16, scope: !5044)
!5050 = !DILocation(line: 339, column: 11, scope: !5044)
!5051 = !DILocation(line: 339, column: 3, scope: !5044)
!5052 = !DILocation(line: 342, column: 14, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !5044, file: !5045, line: 340, column: 5)
!5054 = !DILocation(line: 342, column: 16, scope: !5053)
!5055 = !DILocation(line: 342, column: 22, scope: !5053)
!5056 = !DILocation(line: 342, column: 7, scope: !5053)
!5057 = !DILocation(line: 344, column: 14, scope: !5053)
!5058 = !DILocation(line: 344, column: 7, scope: !5053)
!5059 = !DILocation(line: 346, column: 1, scope: !5044)
!5060 = !DILocalVariable(name: "c", arg: 1, scope: !5061, file: !5045, line: 337, type: !72)
!5061 = distinct !DISubprogram(name: "c_tolower", scope: !5045, file: !5045, line: 337, type: !5046, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !5062, retainedNodes: !4)
!5062 = distinct !DICompileUnit(language: DW_LANG_C99, file: !259, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!5063 = distinct !DISubprogram(name: "getugroups", scope: !5064, file: !5064, line: 61, type: !5065, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !260, retainedNodes: !4)
!5064 = !DIFile(filename: "lib/getugroups.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!5065 = !DISubroutineType(types: !5066)
!5066 = !{!72, !72, !183, !69, !21}
!5067 = !DILocalVariable(name: "maxcount", arg: 1, scope: !5063, file: !5064, line: 61, type: !72)
!5068 = !DILocation(line: 61, column: 17, scope: !5063)
!5069 = !DILocalVariable(name: "grouplist", arg: 2, scope: !5063, file: !5064, line: 61, type: !183)
!5070 = !DILocation(line: 61, column: 34, scope: !5063)
!5071 = !DILocalVariable(name: "username", arg: 3, scope: !5063, file: !5064, line: 61, type: !69)
!5072 = !DILocation(line: 61, column: 57, scope: !5063)
!5073 = !DILocalVariable(name: "gid", arg: 4, scope: !5063, file: !5064, line: 62, type: !21)
!5074 = !DILocation(line: 62, column: 19, scope: !5063)
!5075 = !DILocalVariable(name: "count", scope: !5063, file: !5064, line: 64, type: !72)
!5076 = !DILocation(line: 64, column: 7, scope: !5063)
!5077 = !DILocation(line: 66, column: 7, scope: !5078)
!5078 = distinct !DILexicalBlock(scope: !5063, file: !5064, line: 66, column: 7)
!5079 = !DILocation(line: 66, column: 11, scope: !5078)
!5080 = !DILocation(line: 66, column: 7, scope: !5063)
!5081 = !DILocation(line: 68, column: 11, scope: !5082)
!5082 = distinct !DILexicalBlock(scope: !5083, file: !5064, line: 68, column: 11)
!5083 = distinct !DILexicalBlock(scope: !5078, file: !5064, line: 67, column: 5)
!5084 = !DILocation(line: 68, column: 20, scope: !5082)
!5085 = !DILocation(line: 68, column: 11, scope: !5083)
!5086 = !DILocation(line: 69, column: 28, scope: !5082)
!5087 = !DILocation(line: 69, column: 9, scope: !5082)
!5088 = !DILocation(line: 69, column: 19, scope: !5082)
!5089 = !DILocation(line: 69, column: 26, scope: !5082)
!5090 = !DILocation(line: 70, column: 7, scope: !5083)
!5091 = !DILocation(line: 71, column: 5, scope: !5083)
!5092 = !DILocation(line: 73, column: 3, scope: !5063)
!5093 = !DILocation(line: 74, column: 3, scope: !5063)
!5094 = !DILocalVariable(name: "cp", scope: !5095, file: !5064, line: 76, type: !184)
!5095 = distinct !DILexicalBlock(scope: !5063, file: !5064, line: 75, column: 5)
!5096 = !DILocation(line: 76, column: 14, scope: !5095)
!5097 = !DILocalVariable(name: "grp", scope: !5095, file: !5064, line: 77, type: !5098)
!5098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5099, size: 64)
!5099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group", file: !1036, line: 42, size: 256, elements: !5100)
!5100 = !{!5101, !5102, !5103, !5104}
!5101 = !DIDerivedType(tag: DW_TAG_member, name: "gr_name", scope: !5099, file: !1036, line: 44, baseType: !6, size: 64)
!5102 = !DIDerivedType(tag: DW_TAG_member, name: "gr_passwd", scope: !5099, file: !1036, line: 45, baseType: !6, size: 64, offset: 64)
!5103 = !DIDerivedType(tag: DW_TAG_member, name: "gr_gid", scope: !5099, file: !1036, line: 46, baseType: !22, size: 32, offset: 128)
!5104 = !DIDerivedType(tag: DW_TAG_member, name: "gr_mem", scope: !5099, file: !1036, line: 47, baseType: !184, size: 64, offset: 192)
!5105 = !DILocation(line: 77, column: 21, scope: !5095)
!5106 = !DILocation(line: 79, column: 7, scope: !5095)
!5107 = !DILocation(line: 79, column: 13, scope: !5095)
!5108 = !DILocation(line: 80, column: 13, scope: !5095)
!5109 = !DILocation(line: 80, column: 11, scope: !5095)
!5110 = !DILocation(line: 81, column: 11, scope: !5111)
!5111 = distinct !DILexicalBlock(scope: !5095, file: !5064, line: 81, column: 11)
!5112 = !DILocation(line: 81, column: 15, scope: !5111)
!5113 = !DILocation(line: 81, column: 11, scope: !5095)
!5114 = !DILocation(line: 82, column: 9, scope: !5111)
!5115 = !DILocation(line: 84, column: 17, scope: !5116)
!5116 = distinct !DILexicalBlock(scope: !5095, file: !5064, line: 84, column: 7)
!5117 = !DILocation(line: 84, column: 22, scope: !5116)
!5118 = !DILocation(line: 84, column: 15, scope: !5116)
!5119 = !DILocation(line: 84, column: 12, scope: !5116)
!5120 = !DILocation(line: 84, column: 31, scope: !5121)
!5121 = distinct !DILexicalBlock(scope: !5116, file: !5064, line: 84, column: 7)
!5122 = !DILocation(line: 84, column: 30, scope: !5121)
!5123 = !DILocation(line: 84, column: 7, scope: !5116)
!5124 = !DILocalVariable(name: "n", scope: !5125, file: !5064, line: 86, type: !72)
!5125 = distinct !DILexicalBlock(scope: !5121, file: !5064, line: 85, column: 9)
!5126 = !DILocation(line: 86, column: 15, scope: !5125)
!5127 = !DILocation(line: 88, column: 18, scope: !5128)
!5128 = distinct !DILexicalBlock(scope: !5125, file: !5064, line: 88, column: 16)
!5129 = !DILocation(line: 88, column: 16, scope: !5125)
!5130 = !DILocation(line: 89, column: 13, scope: !5128)
!5131 = !DILocation(line: 92, column: 18, scope: !5132)
!5132 = distinct !DILexicalBlock(scope: !5125, file: !5064, line: 92, column: 11)
!5133 = !DILocation(line: 92, column: 16, scope: !5132)
!5134 = !DILocation(line: 92, column: 23, scope: !5135)
!5135 = distinct !DILexicalBlock(scope: !5132, file: !5064, line: 92, column: 11)
!5136 = !DILocation(line: 92, column: 27, scope: !5135)
!5137 = !DILocation(line: 92, column: 25, scope: !5135)
!5138 = !DILocation(line: 92, column: 11, scope: !5132)
!5139 = !DILocation(line: 93, column: 17, scope: !5140)
!5140 = distinct !DILexicalBlock(scope: !5135, file: !5064, line: 93, column: 17)
!5141 = !DILocation(line: 93, column: 27, scope: !5140)
!5142 = !DILocation(line: 93, column: 30, scope: !5140)
!5143 = !DILocation(line: 93, column: 40, scope: !5140)
!5144 = !DILocation(line: 93, column: 46, scope: !5140)
!5145 = !DILocation(line: 93, column: 51, scope: !5140)
!5146 = !DILocation(line: 93, column: 43, scope: !5140)
!5147 = !DILocation(line: 93, column: 17, scope: !5135)
!5148 = !DILocation(line: 94, column: 15, scope: !5140)
!5149 = !DILocation(line: 92, column: 34, scope: !5135)
!5150 = !DILocation(line: 92, column: 11, scope: !5135)
!5151 = distinct !{!5151, !5138, !5152}
!5152 = !DILocation(line: 94, column: 15, scope: !5132)
!5153 = !DILocation(line: 97, column: 15, scope: !5154)
!5154 = distinct !DILexicalBlock(scope: !5125, file: !5064, line: 97, column: 15)
!5155 = !DILocation(line: 97, column: 20, scope: !5154)
!5156 = !DILocation(line: 97, column: 17, scope: !5154)
!5157 = !DILocation(line: 97, column: 15, scope: !5125)
!5158 = !DILocation(line: 99, column: 19, scope: !5159)
!5159 = distinct !DILexicalBlock(scope: !5160, file: !5064, line: 99, column: 19)
!5160 = distinct !DILexicalBlock(scope: !5154, file: !5064, line: 98, column: 13)
!5161 = !DILocation(line: 99, column: 28, scope: !5159)
!5162 = !DILocation(line: 99, column: 19, scope: !5160)
!5163 = !DILocation(line: 101, column: 23, scope: !5164)
!5164 = distinct !DILexicalBlock(scope: !5165, file: !5064, line: 101, column: 23)
!5165 = distinct !DILexicalBlock(scope: !5159, file: !5064, line: 100, column: 17)
!5166 = !DILocation(line: 101, column: 32, scope: !5164)
!5167 = !DILocation(line: 101, column: 29, scope: !5164)
!5168 = !DILocation(line: 101, column: 23, scope: !5165)
!5169 = !DILocation(line: 102, column: 21, scope: !5164)
!5170 = !DILocation(line: 103, column: 38, scope: !5165)
!5171 = !DILocation(line: 103, column: 43, scope: !5165)
!5172 = !DILocation(line: 103, column: 19, scope: !5165)
!5173 = !DILocation(line: 103, column: 29, scope: !5165)
!5174 = !DILocation(line: 103, column: 36, scope: !5165)
!5175 = !DILocation(line: 104, column: 17, scope: !5165)
!5176 = !DILocation(line: 105, column: 19, scope: !5177)
!5177 = distinct !DILexicalBlock(scope: !5160, file: !5064, line: 105, column: 19)
!5178 = !DILocation(line: 105, column: 25, scope: !5177)
!5179 = !DILocation(line: 105, column: 19, scope: !5160)
!5180 = !DILocation(line: 107, column: 19, scope: !5181)
!5181 = distinct !DILexicalBlock(scope: !5177, file: !5064, line: 106, column: 17)
!5182 = !DILocation(line: 107, column: 25, scope: !5181)
!5183 = !DILocation(line: 108, column: 19, scope: !5181)
!5184 = !DILocation(line: 110, column: 20, scope: !5160)
!5185 = !DILocation(line: 111, column: 13, scope: !5160)
!5186 = !DILocation(line: 112, column: 9, scope: !5125)
!5187 = !DILocation(line: 84, column: 35, scope: !5121)
!5188 = !DILocation(line: 84, column: 7, scope: !5121)
!5189 = distinct !{!5189, !5123, !5190}
!5190 = !DILocation(line: 112, column: 9, scope: !5116)
!5191 = distinct !{!5191, !5093, !5192}
!5192 = !DILocation(line: 113, column: 5, scope: !5063)
!5193 = !DILocation(line: 115, column: 7, scope: !5194)
!5194 = distinct !DILexicalBlock(scope: !5063, file: !5064, line: 115, column: 7)
!5195 = !DILocation(line: 115, column: 13, scope: !5194)
!5196 = !DILocation(line: 115, column: 7, scope: !5063)
!5197 = !DILocation(line: 116, column: 11, scope: !5194)
!5198 = !DILocation(line: 116, column: 5, scope: !5194)
!5199 = !DILocation(line: 115, column: 16, scope: !5194)
!5200 = !DILabel(scope: !5063, name: "done", file: !5064, line: 118)
!5201 = !DILocation(line: 118, column: 2, scope: !5063)
!5202 = !DILocalVariable(name: "saved_errno", scope: !5203, file: !5064, line: 120, type: !72)
!5203 = distinct !DILexicalBlock(scope: !5063, file: !5064, line: 119, column: 3)
!5204 = !DILocation(line: 120, column: 9, scope: !5203)
!5205 = !DILocation(line: 120, column: 23, scope: !5203)
!5206 = !DILocation(line: 121, column: 5, scope: !5203)
!5207 = !DILocation(line: 122, column: 13, scope: !5203)
!5208 = !DILocation(line: 122, column: 5, scope: !5203)
!5209 = !DILocation(line: 122, column: 11, scope: !5203)
!5210 = !DILocation(line: 125, column: 10, scope: !5063)
!5211 = !DILocation(line: 125, column: 3, scope: !5063)
